00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            		include "MapMacros.asm"
00000000 =00000001                  SonicMappingsVer = 1
00000000 =00000001                  SonicDplcVer = 1
00000000                            
00000000                            ; macro to declare a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            ;mappingsTable macro
00000000                            ;@current_mappings_table = *
00000000                            ;	endm
00000000                            
00000000 =00000005                  MappingSize		= 5
00000000 =00000001                  MappingHeaderSize	= 1
00000000                            
00000000                            ; macro to declare an entry in a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            ;mappingsTableEntry macro ptr
00000000                            ;	dc.ATTRIBUTE ptr-.current_mappings_table
00000000                            ;	endm
00000000                            
00000000                            ;spriteHeader macro {INTLABEL}
00000000                            ;__LABEL__ label *
00000000                            ;	if SonicMappingsVer=1
00000000                            ;	dc.b ((__LABEL___End - __LABEL___Begin) / MappingSize)
00000000                            ;	elseif SonicMappingsVer=4
00000000                            ;	dc.w (((__LABEL___End - __LABEL___Begin) / MappingSize)-1)
00000000                            ;	else
00000000                            ;	dc.w ((__LABEL___End - __LABEL___Begin) / MappingSize)
00000000                            ;	endif
00000000                            ;__LABEL___Begin label *
00000000                            ;	endm
00000000                            
00000000                            spritePiece macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile))>>8
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(((tile)>>1)|((tile)&$8000))
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            spritePiece2P macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri,tile2,xflip2,yflip2,pal2,pri2
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile))>>8
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	(((pri2&1)<<15)|((pal2&3)<<13)|((yflip2&1)<<12)|((xflip2&1)<<11))+(tile2)
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ;dplcHeader macro {INTLABEL}
00000000                            ;__LABEL__ label *
00000000                            ;	if SonicDplcVer=1
00000000                            ;	dc.b ((__LABEL___End - __LABEL___Begin) / 2)
00000000                            ;	elseif SonicDplcVer=3
00000000                            ;	dc.w (((__LABEL___End - __LABEL___Begin) / 2)-1)
00000000                            ;	else
00000000                            ;	dc.w ((__LABEL___End - __LABEL___Begin) / 2)
00000000                            ;	endif
00000000                            ;__LABEL___Begin label *
00000000                            ;	endm
00000000                            
00000000                            dplcEntry macro tiles,offset
00000000                            	if SonicDplcVer=3
00000000                            	dc.w	((offset&$FFF)<<4)|((tiles-1)&$F)
00000000                            	elseif SonicDplcVer=4
00000000                            	dc.w	(((tiles-1)&$F)<<12)|((offset&$FFF)<<4)
00000000                            	else
00000000                            	dc.w	(((tiles-1)&$F)<<12)|(offset&$FFF)
00000000                            	endif
00000000                            	endm
00000000                            	endm
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000                            
00000000 =60860003                  lsscrpos 	= $60860003 ; level select screen position
00000000 =00240000                  lsoff 		= $240000 ; second row jump
00000000 =64C20003                  lsstpos 	= lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos 	= $6C820003	; now playing
00000000 =6D020003                  lsctrlpos 	= $6D020003 ; control help
00000000                            lsrow1size: 	equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: 	equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: 	equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            
00000000                            ; level select item constants
00000000                            
00000000                            lssndtest: 	equ lsrow1size+8
00000000                            lswifi: 	equ lsrow1size+9
00000000                            lsjackass:	equ lsrow1size+11
00000000 =FFFFFFC4                  vBlankRoutine 	equ $FFFFFFC4 ; VBlank Routine Jump Instruction (6 bytes)
00000000 =FFFFFFC4                  vBlankJump 	equ vBlankRoutine
00000000 =FFFFFFC6                  vBlankAdress 	equ vBlankRoutine+2
00000000                            ; options menu
00000000                            optamm: 	equ ((OMTEnd-OptionMenuText)/16)-1
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 50FF FE00 0000 0000 0000+  Vectors:	dc.l 'P'<<24|$FFFE00,		'O'<<24|EntryPoint,	'Y'<<24|BusError,	'S'<<24|AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l 'U'<<24|IllegalInstr,	'F'<<24|ZeroDivide,	'O'<<24|ChkInstr,	'K'<<24|TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l 'L'<<24|PrivilegeViol,	'F'<<24|Trace,		'U'<<24|Line1010Emu,	'I'<<24|Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l 'L'<<24|ErrorExcept,	' '<<24|ErrorExcept,	'R'<<24|ErrorExcept,	'N'<<24|ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ' '<<24|ErrorExcept,	' '<<24|ErrorExcept,	' '<<24|ErrorExcept,	' '<<24|'H'<<24|ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l 'B'<<24|ErrorExcept,	'O'<<24|ErrorExcept,	'I'<<24|ErrorExcept,	'L'<<24|ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l 'H'<<24|ErrorExcept,	'I'<<24|ErrorTrap,	'M'<<24|ErrorTrap,	' '<<24|ErrorTrap
00000070 0000 0000 0000 0000 FFFF+  		dc.l ' '<<24|PalToCRAM,		PalToCRAM,		' '<<24|vBlankRoutine,	vBlankRoutine
00000080 5768 6174 2069 7320 6120+  		dc.b 'What is a hex editor? A miserable little detector of secrets!   But enough talk,fuck off you!'
000000DD 2020 2020 2020 2020 2020+  		dcb.b $100-*,' '
00000100 2053 4547 4141 4141 4141+  Console:	dc.b ' SEGAAAAAAAAAAAA' ; NOTE: " SEGA" is valid for the TMSS, but not for some other stuff, namely the game genie
00000110 4141 4141 4141 4141 4141+  Date:		dc.b 'AAAAAAAAAAAAAAAA'
00000120 4966 2079 6F75 2063 616E+  Title_Local:	dc.b 'If you can see this, your emulator is homoerotic' ; Domestic name
00000150                            		dcb.b $150-*,' '
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood'
0000017E 2020                       		dcb.b $180-*,' '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'	; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A4A 4A4A 4A4A 4A4A 4A4A+  		dcb.b $1A0-*,'J'	; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 6964 6B20 6920 7370 656E+  Notes:		dc.b 'idk i spent all my  mental budget on the other stuff'
000001F0                            		dcb.b $1F0-*,' '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            	even
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 007C 0700                  		ori	#$700,sr
0000030A                            
0000030A 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000312 6700                       		beq.s	CheckSumCheck
00000314 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031C 6700 0000                  		beq.w	GameInit	; if yes, branch
00000320                            
00000320                            CheckSumCheck:
00000320                            ;		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000320                            ;		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000320                            ;		move.l	(a1),d0
00000320                            ;		moveq	#0,d1
00000320                            ;
00000320                            ;loc_32C:
00000320                            ;		add.w	(a0)+,d1
00000320                            ;		cmp.l	a0,d0
00000320                            ;		bcc.s	loc_32C
00000320                            ;		movea.l	#Checksum,a1	; read the checksum
00000320                            ;		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
00000320                            ;		bne.w	CheckSumError	; if they don't match, branch
00000320 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000324 7E00                       		moveq	#0,d7
00000326 3C3C 007F                  		move.w	#$7F,d6
0000032A                            
0000032A                            loc_348:
0000032A 2CC7                       		move.l	d7,(a6)+
0000032C 51CE FFFC                  		dbf	d6,loc_348
00000330 1039 00A1 0001             		move.b	($A10001).l,d0
00000336 0200 00C0                  		andi.b	#$C0,d0
0000033A 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000033E                            GameInit:
0000033E 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000344 7E00                       		moveq	#0,d7
00000346 3C3C 3F7F                  		move.w	#$3F7F,d6
0000034A                            
0000034A                            GameClrRAM:
0000034A 2CC7                       		move.l	d7,(a6)+
0000034C 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000350                            
00000350 31FC 4EF9 FFC4             		move.w	#$4EF9,(vBlankJump).w			; JMP opcode
00000356 21FC 0000 0000 FFC6        		move.l	#loc_B10,(vBlankAdress).w		; Set the V-INT pointer to the standard V-INT routine
0000035E                            
0000035E 6100 0000                  		bsr.w	VDPSetupGame
00000362                            	;	bsr.w	SoundDriverLoad
00000362 4EB9 0000 0000                             jsr     MegaPCM_LoadDriver
00000368 41F9 0000 0000                             lea     SampleTable, a0
0000036E 4EB9 0000 0000                             jsr     MegaPCM_LoadSampleTable
00000374 4A40                       		tst.w	d0
00000376 6700                       		beq.s	@mpcmsucc
00000378 4EF9 0000 0000             		jmp	Sound_E5
0000037E                            @mpcmsucc:
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w	; has checksum routine already run?
00000390 6700 0000                  		beq.w	@nosplashscreens	; if yes, branch
00000394 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w	; set flag so checksum won't be run again
0000039C 1039 00A1 0001             		move.b	($A10001).l,d0
000003A2 0240 000F                  		and.w	#$F,d0
000003A6 6700                       		beq.s	@notmss
000003A8 4EB9 0000 0000             		jsr	GM_AntiTMSS
000003AE                            @notmss:
000003AE                            @nosplashscreens:
000003AE                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
000003AE                            	;	move.b	#$24,($FFFFF600).w ; set Game Mode to Bee Bush
000003AE                            MainGameLoop:
000003AE 707E                       		moveq	#$7E,d0
000003B0 C038 F600                  		and.b	($FFFFF600).w,d0 ; load	Game Mode
000003B4 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
000003B8 60F4                       		bra.s	MainGameLoop
000003BA                            ; ===========================================================================
000003BA                            ; ---------------------------------------------------------------------------
000003BA                            ; Main game mode array
000003BA                            ; ---------------------------------------------------------------------------
000003BA                            
000003BA                            GameModeArray:
000003BA 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
000003BE                            ; ===========================================================================
000003BE 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
000003C2                            ; ===========================================================================
000003C2 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003C6                            ; ===========================================================================
000003C6 6000 0000                  		bra.w	Level	; Normal Level ($0C)
000003CA                            ; ===========================================================================
000003CA 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003CE                            ; ===========================================================================
000003CE 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003D2                            ; ===========================================================================
000003D2 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003D6                            ; ===========================================================================
000003D6 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003DA                            ; ===========================================================================
000003DA 6000 0000                  		bra.w	jmpto_Minecraft	; Minecraft ($20)
000003DE                            ; ===========================================================================
000003DE 6000 0000                  		bra.w	jmpto_BeeBush   ; BeeBush ($24)	
000003E2                            ; ===========================================================================
000003E2                            ; uuuuuuuuuuuuuuuuuuuuuuuuuuuuu
000003E2                            
000003E2                            jmpto_Minecraft:
000003E2 4EF9 0000 0000             		jmp     Minecraft
000003E8                            
000003E8                            jmpto_BeeBush:
000003E8 4EF9 0000 0000             		jmp     GM_BEEBUSH
000003EE                            
000003EE                            
000003EE                            CheckSumError:
000003EE 6100 0000                  		bsr.w	VDPSetupGame
000003F2 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003FC 7E3F                       		moveq	#$3F,d7
000003FE                            
000003FE                            CheckSum_Red:
000003FE 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
00000406 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
0000040A                            
0000040A                            CheckSum_Loop:
0000040A 60FE                       		bra.s	CheckSum_Loop
0000040C                            ; ===========================================================================
0000040C                            
0000040C                            BusError:
0000040C 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
00000412 6000                       		bra.s	loc_43A
00000414                            ; ===========================================================================
00000414                            
00000414                            AddressError:
00000414 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
0000041A 6000                       		bra.s	loc_43A
0000041C                            ; ===========================================================================
0000041C                            
0000041C                            IllegalInstr:
0000041C 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
00000422 54AF 0002                  		addq.l	#2,2(sp)
00000426 6000                       		bra.s	loc_462
00000428                            ; ===========================================================================
00000428                            
00000428                            ZeroDivide:
00000428 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
0000042E 6000                       		bra.s	loc_462
00000430                            ; ===========================================================================
00000430                            
00000430                            ChkInstr:
00000430 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000436 6000                       		bra.s	loc_462
00000438                            ; ===========================================================================
00000438                            
00000438                            TrapvInstr:
00000438 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
0000043E 6000                       		bra.s	loc_462
00000440                            ; ===========================================================================
00000440                            
00000440                            PrivilegeViol:
00000440 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000446 6000                       		bra.s	loc_462
00000448                            ; ===========================================================================
00000448                            
00000448                            Trace:
00000448 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000044E 6000                       		bra.s	loc_462
00000450                            ; ===========================================================================
00000450                            
00000450                            Line1010Emu:
00000450 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000456 54AF 0002                  		addq.l	#2,2(sp)
0000045A 6000                       		bra.s	loc_462
0000045C                            ; ===========================================================================
0000045C                            
0000045C                            Line1111Emu:
0000045C 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000462 54AF 0002                  		addq.l	#2,2(sp)
00000466 6000                       		bra.s	loc_462
00000468                            ; ===========================================================================
00000468                            
00000468                            ErrorExcept:
00000468 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000046E 6000                       		bra.s	loc_462
00000470                            ; ===========================================================================
00000470                            
00000470                            loc_43A:
00000470 46FC 2700                  		move	#$2700,sr
00000474 544F                       		addq.w	#2,sp
00000476 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
0000047A 544F                       		addq.w	#2,sp
0000047C 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000482 6100 0000                  		bsr.w	ShowErrorMsg
00000486 202F 0002                  		move.l	2(sp),d0
0000048A 6100 0000                  		bsr.w	sub_5BA
0000048E 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000492 6100 0000                  		bsr.w	sub_5BA
00000496 6000                       		bra.s	loc_478
00000498                            ; ===========================================================================
00000498                            
00000498                            loc_462:
00000498 46FC 2700                  		move	#$2700,sr
0000049C 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
000004A2 6100 0000                  		bsr.w	ShowErrorMsg
000004A6 202F 0002                  		move.l	2(sp),d0
000004AA 6100 0000                  		bsr.w	sub_5BA
000004AE                            
000004AE                            loc_478:
000004AE 6100 0000                  		bsr.w	ErrorWaitForC
000004B2 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
000004B8 46FC 2300                  		move	#$2300,sr
000004BC 4E73                       		rte	
000004BE                            
000004BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000004BE                            
000004BE                            
000004BE                            ShowErrorMsg:				; XREF: loc_43A; loc_462
000004BE 4DF9 00C0 0000             		lea	($C00000).l,a6
000004C4 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000004CE 41F9 0000 0000             		lea	(Art_ErrText).l,a0
000004D4 323C 027F                  		move.w	#$27F,d1
000004D8                            
000004D8                            Error_LoadGfx:
000004D8 3C98                       		move.w	(a0)+,(a6)
000004DA 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004DE 7000                       		moveq	#0,d0		; clear	d0
000004E0 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004E4 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004E8 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004EC 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004F6 7212                       		moveq	#$12,d1		; number of characters
000004F8                            
000004F8                            Error_LoopChars:
000004F8 7000                       		moveq	#0,d0
000004FA 1018                       		move.b	(a0)+,d0
000004FC 0640 0790                  		addi.w	#$790,d0
00000500 3C80                       		move.w	d0,(a6)
00000502 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
00000506 4E75                       		rts	
00000508                            ; End of function ShowErrorMsg
00000508                            
00000508                            ; ===========================================================================
00000508 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
0000050C 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
00000510 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
00000514 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000518 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
0000051C 0000                       		dc.w asc_5A6-ErrorText
0000051E 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000531 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000544 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000557 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
0000056A 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000057D 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
00000590 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
000005A3 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
000005B6 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000005C9 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005DC 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005F0 00                         		even
000005F0                            
000005F0                            ; ||||||||||||||| S U B	R O U T	I N ET |||||||||||||||||||||||||||||||||||||||
000005F0                            
000005F0                            
000005F0                            sub_5BA:				; XREF: loc_43A; loc_462
000005F0 3CBC 07CA                  		move.w	#$7CA,(a6)
000005F4 7407                       		moveq	#7,d2
000005F6                            
000005F6                            loc_5C0:
000005F6 E998                       		rol.l	#4,d0
000005F8 6100                       		bsr.s	sub_5CA
000005FA 51CA FFFA                  		dbf	d2,loc_5C0
000005FE 4E75                       		rts	
00000600                            ; End of function sub_5BA
00000600                            
00000600                            
00000600                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000600                            
00000600                            
00000600                            sub_5CA:				; XREF: sub_5BA
00000600 3200                       		move.w	d0,d1
00000602 0241 000F                  		andi.w	#$F,d1
00000606 0C41 000A                  		cmpi.w	#$A,d1
0000060A 6500                       		bcs.s	loc_5D8
0000060C 5E41                       		addq.w	#7,d1
0000060E                            
0000060E                            loc_5D8:
0000060E 0641 07C0                  		addi.w	#$7C0,d1
00000612 3C81                       		move.w	d1,(a6)
00000614 4E75                       		rts	
00000616                            ; End of function sub_5CA
00000616                            
00000616                            
00000616                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000616                            
00000616                            
00000616                            ErrorWaitForC:				; XREF: loc_478
00000616 6100 0000                  		bsr.w	ReadJoypads
0000061A 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
00000620 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000624 4E75                       		rts	
00000626                            ; End of function ErrorWaitForC
00000626                            
00000626                            ; ===========================================================================
00000626                            Art_ErrText:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D66                            Art_ErrText_end:		even
00000D66                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
000014A6                            Art_Text_end:		even
000014A6                            
000014A6                            ; ===========================================================================
000014A6                            ;VBlank
000014A6                            loc_B10:				; XREF: Vectors
000014A6 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000014AA 4A38 F62A                  		tst.b	($FFFFF62A).w
000014AE 6700                       		beq.s	loc_B88
000014B0 3039 00C0 0004             		move.w	($C00004).l,d0
000014B6 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000014C0 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000014C8                            ;		btst	#6,($FFFFFFF8).w
000014C8                            ;		beq.s	loc_B42
000014C8                            ;		move.w	#$700,d0
000014C8                            ;
000014C8                            ;loc_B3E:
000014C8                            ;		dbf	d0,loc_B3E
000014C8                            
000014C8                            ;loc_B42:
000014C8 1038 F62A                  		move.b	($FFFFF62A).w,d0
000014CC 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
000014D2 31FC 0001 F644             		move.w	#1,($FFFFF644).w
000014D8 0240 003E                  		andi.w	#$3E,d0
000014DC 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
000014E0 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
000014E4                            
000014E4                            loc_B5E:				; XREF: loc_B88
000014E4 4EB9 0000 0000             		jsr	sub_71B4C
000014EA                            
000014EA                            loc_B64:				; XREF: loc_D50
000014EA 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
000014EE 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000014F2 4E73                       		rte	
000014F4                            ; ===========================================================================
000014F4                            ; THIS SUCKS
000014F4 =0000001A                  VBLNO_BEEBUSH        EQU         13*2
000014F4 =0000001C                  VBLNO_BEEBUSHSCR     EQU         14*2
000014F4                            
000014F4 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
000014F8 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
000014FC 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00001500 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00001504 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00001508 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
0000150C 0000                       		dc.w loc_E72-off_B6E
0000150E 0000                       		dc.w jmpto_VBLANK_BEEBUSH-off_B6E
00001510 0000                       		dc.w jmpto_VBLANK_BEEBUSHSCR-off_B6E
00001512                            
00001512                            ; ===========================================================================
00001512                            
00001512                            loc_B88:				; XREF: loc_B10; off_B6E
00001512 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00001518 6700                       		beq.s	loc_B9A
0000151A 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00001520 6600 FFC2                  		bne.w	loc_B5E
00001524                            
00001524                            loc_B9A:
00001524 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
0000152A 6600 FFB8                  		bne.w	loc_B5E		; if not, branch
0000152E 3039 00C0 0004             		move.w	($C00004).l,d0
00001534                            ;		btst	#6,($FFFFFFF8).w
00001534                            ;		beq.s	loc_BBA
00001534                            ;		move.w	#$700,d0
00001534                            ;
00001534                            ;loc_BB6:
00001534                            ;		dbf	d0,loc_BB6
00001534                            ;
00001534                            ;loc_BBA:
00001534 31FC 0001 F644             		move.w	#1,($FFFFF644).w
0000153A 4A38 F64E                  		tst.b	($FFFFF64E).w
0000153E 6600                       		bne.s	loc_BFE
00001540 4BF9 00C0 0004             		lea	($C00004).l,a5
00001546 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000154C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001552 3ABC 977F                  		move.w	#$977F,(a5)
00001556 3ABC C000                  		move.w	#$C000,(a5)
0000155A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001560 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001564 6000                       		bra.s	loc_C22
00001566                            ; ===========================================================================
00001566                            
00001566                            loc_BFE:				; XREF: loc_BC8
00001566 4BF9 00C0 0004             		lea	($C00004).l,a5
0000156C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001572 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00001578 3ABC 977F                  		move.w	#$977F,(a5)
0000157C 3ABC C000                  		move.w	#$C000,(a5)
00001580 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001586 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000158A                            
0000158A                            loc_C22:				; XREF: loc_BC8
0000158A 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
0000158E 6000 FF54                  		bra.w	loc_B5E
00001592                            ; ===========================================================================
00001592                            
00001592                            loc_C32:				; XREF: off_B6E
00001592 6100 0000                  		bsr.w	sub_106E
00001596                            
00001596                            loc_C36:				; XREF: off_B6E
00001596 4A78 F614                  		tst.w	($FFFFF614).w
0000159A 6700 0000                  		beq.w	locret_C42
0000159E 5378 F614                  		subq.w	#1,($FFFFF614).w
000015A2                            
000015A2                            locret_C42:
000015A2 4E75                       		rts	
000015A4                            ; ===========================================================================
000015A4                            
000015A4                            loc_C44:				; XREF: off_B6E
000015A4 6100 0000                  		bsr.w	sub_106E
000015A8 6100 0000                  		bsr.w	sub_6886
000015AC 6100 0000                  		bsr.w	sub_1642
000015B0 4A78 F614                  		tst.w	($FFFFF614).w
000015B4 6700 0000                  		beq.w	locret_C5C
000015B8 5378 F614                  		subq.w	#1,($FFFFF614).w
000015BC                            
000015BC                            locret_C5C:
000015BC 4E75                       		rts	
000015BE                            
000015BE                            ; ---------------------------------------------------------------------------
000015BE                            ; SOOOO GROSS!!!
000015BE                            ; ---------------------------------------------------------------------------
000015BE                            jmpto_VBLANK_BEEBUSH:
000015BE 4EF9 0000 0000             	jmp VBLANK_BEEBUSH
000015C4                            
000015C4                            jmpto_VBLANK_BEEBUSHSCR:
000015C4 4EF9 0000 0000             	jmp VBLANK_BEEBUSHSCR
000015CA                            
000015CA                            ; ---------------------------------------------------------------------------
000015CA                            
000015CA                            ; ===========================================================================
000015CA                            
000015CA                            loc_C5E:				; XREF: off_B6E
000015CA 6100 0000                  		bsr.w	sub_106E
000015CE 4E75                       		rts	
000015D0                            ; ===========================================================================
000015D0                            
000015D0                            loc_C64:				; XREF: off_B6E
000015D0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
000015D6 6700 0000                  		beq.w	loc_DA6		; if yes, branch
000015DA                            
000015DA                            loc_C6E:				; XREF: off_B6E
000015DA 6100 0000                  		bsr.w	ReadJoypads
000015DE 4A38 F64E                  		tst.b	($FFFFF64E).w
000015E2 6600                       		bne.s	loc_CB0
000015E4 4BF9 00C0 0004             		lea	($C00004).l,a5
000015EA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000015F0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000015F6 3ABC 977F                  		move.w	#$977F,(a5)
000015FA 3ABC C000                  		move.w	#$C000,(a5)
000015FE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001604 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001608 6000                       		bra.s	loc_CD4
0000160A                            ; ===========================================================================
0000160A                            
0000160A                            loc_CB0:				; XREF: loc_C76
0000160A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001610 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001616 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
0000161C 3ABC 977F                  		move.w	#$977F,(a5)
00001620 3ABC C000                  		move.w	#$C000,(a5)
00001624 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000162A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000162E                            
0000162E                            loc_CD4:				; XREF: loc_C76
0000162E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001632 4BF9 00C0 0004             		lea	($C00004).l,a5
00001638 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000163E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001644 3ABC 977F                  		move.w	#$977F,(a5)
00001648 3ABC 7C00                  		move.w	#$7C00,(a5)
0000164C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001652 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001656 4BF9 00C0 0004             		lea	($C00004).l,a5
0000165C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001662 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001668 3ABC 977F                  		move.w	#$977F,(a5)
0000166C 3ABC 7800                  		move.w	#$7800,(a5)
00001670 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001676 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000167A 4A38 F767                  		tst.b	($FFFFF767).w
0000167E 6700                       		beq.s	loc_D50
00001680 4BF9 00C0 0004             		lea	($C00004).l,a5
00001686 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000168C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001692 3ABC 977F                  		move.w	#$977F,(a5)
00001696 3ABC 7000                  		move.w	#$7000,(a5)
0000169A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000016A0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000016A4 11FC 0000 F767             		move.b	#0,($FFFFF767).w
000016AA                            
000016AA                            loc_D50:
000016AA 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
000016B0 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
000016B6 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
000016BC 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
000016C2 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
000016C8 6400                       		bcc.s	Demo_Time
000016CA 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
000016D0 588F                       		addq.l	#4,sp
000016D2 6000 FE16                  		bra.w	loc_B64
000016D6                            
000016D6                            ; ---------------------------------------------------------------------------
000016D6                            ; Subroutine to	run a demo for an amount of time
000016D6                            ; ---------------------------------------------------------------------------
000016D6                            
000016D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016D6                            
000016D6                            
000016D6                            Demo_Time:				; XREF: loc_D50; PalToCRAM
000016D6 6100 0000                  		bsr.w	LoadTilesAsYouMove
000016DA 4EB9 0000 0000             		jsr	AniArt_Load
000016E0 4EB9 0000 0000             		jsr	HudUpdate
000016E6 6100 0000                  		bsr.w	sub_165E
000016EA 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000016EE 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
000016F2 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
000016F6                            
000016F6                            Demo_TimeEnd:
000016F6 4E75                       		rts	
000016F8                            ; End of function Demo_Time
000016F8                            
000016F8                            ; ===========================================================================
000016F8                            
000016F8                            loc_DA6:				; XREF: off_B6E
000016F8 6100 0000                  		bsr.w	ReadJoypads
000016FC 4BF9 00C0 0004             		lea	($C00004).l,a5
00001702 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001708 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000170E 3ABC 977F                  		move.w	#$977F,(a5)
00001712 3ABC C000                  		move.w	#$C000,(a5)
00001716 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000171C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001720 4BF9 00C0 0004             		lea	($C00004).l,a5
00001726 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000172C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001732 3ABC 977F                  		move.w	#$977F,(a5)
00001736 3ABC 7800                  		move.w	#$7800,(a5)
0000173A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001740 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001744 4BF9 00C0 0004             		lea	($C00004).l,a5
0000174A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001750 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001756 3ABC 977F                  		move.w	#$977F,(a5)
0000175A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000175E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001764 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001768 6100 0000                  		bsr.w	PalCycle_SS
0000176C 4A38 F767                  		tst.b	($FFFFF767).w
00001770 6700                       		beq.s	loc_E64
00001772 4BF9 00C0 0004             		lea	($C00004).l,a5
00001778 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000177E 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001784 3ABC 977F                  		move.w	#$977F,(a5)
00001788 3ABC 7000                  		move.w	#$7000,(a5)
0000178C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001792 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001796 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000179C                            
0000179C                            loc_E64:
0000179C 4A78 F614                  		tst.w	($FFFFF614).w
000017A0 6700 0000                  		beq.w	locret_E70
000017A4 5378 F614                  		subq.w	#1,($FFFFF614).w
000017A8                            
000017A8                            locret_E70:
000017A8 4E75                       		rts	
000017AA                            ; ===========================================================================
000017AA                            
000017AA                            loc_E72:				; XREF: off_B6E
000017AA 6100 0000                  		bsr.w	ReadJoypads
000017AE 4A38 F64E                  		tst.b	($FFFFF64E).w
000017B2 6600                       		bne.s	loc_EB4
000017B4 4BF9 00C0 0004             		lea	($C00004).l,a5
000017BA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000017C0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000017C6 3ABC 977F                  		move.w	#$977F,(a5)
000017CA 3ABC C000                  		move.w	#$C000,(a5)
000017CE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000017D4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000017D8 6000                       		bra.s	loc_ED8
000017DA                            ; ===========================================================================
000017DA                            
000017DA                            loc_EB4:				; XREF: loc_E7A
000017DA 4BF9 00C0 0004             		lea	($C00004).l,a5
000017E0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000017E6 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000017EC 3ABC 977F                  		move.w	#$977F,(a5)
000017F0 3ABC C000                  		move.w	#$C000,(a5)
000017F4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000017FA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000017FE                            
000017FE                            loc_ED8:				; XREF: loc_E7A
000017FE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001802 4BF9 00C0 0004             		lea	($C00004).l,a5
00001808 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000180E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001814                            
00001814                            loc_EEE:
00001814 3ABC 977F                  		move.w	#$977F,(a5)
00001818 3ABC 7C00                  		move.w	#$7C00,(a5)
0000181C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001822 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001826 4BF9 00C0 0004             		lea	($C00004).l,a5
0000182C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001832 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001838 3ABC 977F                  		move.w	#$977F,(a5)
0000183C 3ABC 7800                  		move.w	#$7800,(a5)
00001840 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001846 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000184A 4A38 F767                  		tst.b	($FFFFF767).w
0000184E 6700                       		beq.s	loc_F54
00001850 4BF9 00C0 0004             		lea	($C00004).l,a5
00001856 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000185C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001862 3ABC 977F                  		move.w	#$977F,(a5)
00001866 3ABC 7000                  		move.w	#$7000,(a5)
0000186A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001870 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001874 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000187A                            
0000187A                            loc_F54:
0000187A 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001880 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00001886 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
0000188C 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001892 6100 0000                  		bsr.w	LoadTilesAsYouMove
00001896 4EB9 0000 0000             		jsr	AniArt_Load
0000189C 4EB9 0000 0000             		jsr	HudUpdate
000018A2 6100 0000                  		bsr.w	sub_1642
000018A6 4E75                       		rts	
000018A8                            ; ===========================================================================
000018A8                            
000018A8                            loc_F8A:				; XREF: off_B6E
000018A8 6100 0000                  		bsr.w	sub_106E
000018AC 5238 F628                  		addq.b	#1,($FFFFF628).w
000018B0 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000018B6 4E75                       		rts	
000018B8                            ; ===========================================================================
000018B8                            
000018B8                            loc_F9A:				; XREF: off_B6E
000018B8 6100 0000                  		bsr.w	sub_106E
000018BC 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000018C0 6000 0000                  		bra.w	sub_1642
000018C4                            ; ===========================================================================
000018C4                            
000018C4                            loc_FA6:				; XREF: off_B6E
000018C4 6100 0000                  		bsr.w	ReadJoypads
000018C8 4BF9 00C0 0004             		lea	($C00004).l,a5
000018CE 2ABC 9400 9340             		move.l	#$94009340,(a5)
000018D4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000018DA 3ABC 977F                  		move.w	#$977F,(a5)
000018DE 3ABC C000                  		move.w	#$C000,(a5)
000018E2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000018E8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000018EC 4BF9 00C0 0004             		lea	($C00004).l,a5
000018F2 2ABC 9401 9340             		move.l	#$94019340,(a5)
000018F8 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000018FE 3ABC 977F                  		move.w	#$977F,(a5)
00001902 3ABC 7800                  		move.w	#$7800,(a5)
00001906 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000190C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001910 4BF9 00C0 0004             		lea	($C00004).l,a5
00001916 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000191C 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001922 3ABC 977F                  		move.w	#$977F,(a5)
00001926 3ABC 7C00                  		move.w	#$7C00,(a5)
0000192A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001930 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001934 4A38 F767                  		tst.b	($FFFFF767).w
00001938 6700                       		beq.s	loc_1060
0000193A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001940 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001946 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000194C 3ABC 977F                  		move.w	#$977F,(a5)
00001950 3ABC 7000                  		move.w	#$7000,(a5)
00001954 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000195A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000195E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001964                            
00001964                            loc_1060:
00001964 4A78 F614                  		tst.w	($FFFFF614).w
00001968 6700 0000                  		beq.w	locret_106C
0000196C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001970                            
00001970                            locret_106C:
00001970 4E75                       		rts	
00001972                            
00001972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001972                            
00001972                            
00001972                            sub_106E:				; XREF: loc_C32; et al
00001972 6100 0000                  		bsr.w	ReadJoypads
00001976 4A38 F64E                  		tst.b	($FFFFF64E).w
0000197A 6600                       		bne.s	loc_10B0
0000197C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001982 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001988 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000198E 3ABC 977F                  		move.w	#$977F,(a5)
00001992 3ABC C000                  		move.w	#$C000,(a5)
00001996 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000199C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000019A0 6000                       		bra.s	loc_10D4
000019A2                            ; ===========================================================================
000019A2                            
000019A2                            loc_10B0:				; XREF: sub_106E
000019A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000019A8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000019AE 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000019B4 3ABC 977F                  		move.w	#$977F,(a5)
000019B8 3ABC C000                  		move.w	#$C000,(a5)
000019BC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000019C2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000019C6                            
000019C6                            loc_10D4:				; XREF: sub_106E
000019C6 4BF9 00C0 0004             		lea	($C00004).l,a5
000019CC 2ABC 9401 9340             		move.l	#$94019340,(a5)
000019D2 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000019D8 3ABC 977F                  		move.w	#$977F,(a5)
000019DC 3ABC 7800                  		move.w	#$7800,(a5)
000019E0 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000019E6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000019EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000019F0 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000019F6 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
000019FC 3ABC 977F                  		move.w	#$977F,(a5)
00001A00 3ABC 7C00                  		move.w	#$7C00,(a5)
00001A04 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001A0A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001A0E 4E75                       		rts	
00001A10                            ; End of function sub_106E
00001A10                            
00001A10                            ; ---------------------------------------------------------------------------
00001A10                            ; Subroutine to	move pallets from the RAM to CRAM
00001A10                            ; ---------------------------------------------------------------------------
00001A10                            
00001A10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A10                            
00001A10                            
00001A10                            PalToCRAM:
00001A10 46FC 2700                  		move	#$2700,sr
00001A14 4A78 F644                  		tst.w	($FFFFF644).w
00001A18 6700                       		beq.s	locret_119C
00001A1A 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001A20 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001A24 43F9 00C0 0000             		lea	($C00000).l,a1
00001A2A 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001A2E 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001A36 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001A38 2298                       		move.l	(a0)+,(a1)
00001A3A 2298                       		move.l	(a0)+,(a1)
00001A3C 2298                       		move.l	(a0)+,(a1)
00001A3E 2298                       		move.l	(a0)+,(a1)
00001A40 2298                       		move.l	(a0)+,(a1)
00001A42 2298                       		move.l	(a0)+,(a1)
00001A44 2298                       		move.l	(a0)+,(a1)
00001A46 2298                       		move.l	(a0)+,(a1)
00001A48 2298                       		move.l	(a0)+,(a1)
00001A4A 2298                       		move.l	(a0)+,(a1)
00001A4C 2298                       		move.l	(a0)+,(a1)
00001A4E 2298                       		move.l	(a0)+,(a1)
00001A50 2298                       		move.l	(a0)+,(a1)
00001A52 2298                       		move.l	(a0)+,(a1)
00001A54 2298                       		move.l	(a0)+,(a1)
00001A56 2298                       		move.l	(a0)+,(a1)
00001A58 2298                       		move.l	(a0)+,(a1)
00001A5A 2298                       		move.l	(a0)+,(a1)
00001A5C 2298                       		move.l	(a0)+,(a1)
00001A5E 2298                       		move.l	(a0)+,(a1)
00001A60 2298                       		move.l	(a0)+,(a1)
00001A62 2298                       		move.l	(a0)+,(a1)
00001A64 2298                       		move.l	(a0)+,(a1)
00001A66 2298                       		move.l	(a0)+,(a1)
00001A68 2298                       		move.l	(a0)+,(a1)
00001A6A 2298                       		move.l	(a0)+,(a1)
00001A6C 2298                       		move.l	(a0)+,(a1)
00001A6E 2298                       		move.l	(a0)+,(a1)
00001A70 2298                       		move.l	(a0)+,(a1)
00001A72 2298                       		move.l	(a0)+,(a1)
00001A74 2298                       		move.l	(a0)+,(a1)
00001A76 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00001A7C 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001A80 4A38 F64F                  		tst.b	($FFFFF64F).w
00001A84 6600                       		bne.s	loc_119E
00001A86                            
00001A86                            locret_119C:
00001A86 4E73                       		rte	
00001A88                            ; ===========================================================================
00001A88                            
00001A88                            loc_119E:				; XREF: PalToCRAM
00001A88 4238 F64F                  		clr.b	($FFFFF64F).w
00001A8C 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001A90 6100 FC44                  		bsr.w	Demo_Time
00001A94 4EB9 0000 0000             		jsr	sub_71B4C
00001A9A 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00001A9E 4E73                       		rte	
00001AA0                            ; End of function PalToCRAM
00001AA0                            
00001AA0                            ; ---------------------------------------------------------------------------
00001AA0                            ; Subroutine to	initialise joypads
00001AA0                            ; ---------------------------------------------------------------------------
00001AA0                            
00001AA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AA0                            
00001AA0                            
00001AA0                            JoypadInit:				; XREF: GameClrRAM
00001AA0 7040                       		moveq	#$40,d0
00001AA2 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001AA8 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001AAE 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001AB4 4E75                       		rts	
00001AB6                            ; End of function JoypadInit
00001AB6                            
00001AB6                            ; ---------------------------------------------------------------------------
00001AB6                            ; Subroutine to	read joypad input, and send it to the RAM
00001AB6                            ; ---------------------------------------------------------------------------
00001AB6                            
00001AB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AB6                            
00001AB6                            
00001AB6                            ReadJoypads:
00001AB6 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00001ABA 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001AC0 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001AC2 5449                       		addq.w	#2,a1		; do the second	joypad
00001AC4                            
00001AC4                            Joypad_Read:
00001AC4 12BC 0000                  		move.b	#0,(a1)
00001AC8 4E71                       		nop	
00001ACA 4E71                       		nop	
00001ACC 1011                       		move.b	(a1),d0
00001ACE E508                       		lsl.b	#2,d0
00001AD0 0200 00C0                  		andi.b	#$C0,d0
00001AD4 12BC 0040                  		move.b	#$40,(a1)
00001AD8 4E71                       		nop	
00001ADA 4E71                       		nop	
00001ADC 1211                       		move.b	(a1),d1
00001ADE 0201 003F                  		andi.b	#$3F,d1
00001AE2 8001                       		or.b	d1,d0
00001AE4 4600                       		not.b	d0
00001AE6 1210                       		move.b	(a0),d1
00001AE8 B101                       		eor.b	d0,d1
00001AEA 10C0                       		move.b	d0,(a0)+
00001AEC C200                       		and.b	d0,d1
00001AEE 10C1                       		move.b	d1,(a0)+
00001AF0 4E75                       		rts	
00001AF2                            ; End of function ReadJoypads
00001AF2                            
00001AF2                            
00001AF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AF2                            
00001AF2                            
00001AF2                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001AF2 41F9 00C0 0004             		lea	($C00004).l,a0
00001AF8 43F9 00C0 0000             		lea	($C00000).l,a1
00001AFE 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001B04 7E12                       		moveq	#$12,d7
00001B06                            
00001B06                            VDP_Loop:
00001B06 309A                       		move.w	(a2)+,(a0)
00001B08 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001B0C                            
00001B0C 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001B12 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; Is this a PAL console?
00001B18 6700                       		beq.s	.UseV28			; If not, skip
00001B1A 08C0 0003                  		bset	#3,d0			; set v30 and pretend nothing happened
00001B1E                            .UseV28:
00001B1E 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001B22 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001B28 7000                       		moveq	#0,d0
00001B2A 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001B34 3E3C 003F                  		move.w	#$3F,d7
00001B38                            
00001B38                            VDP_ClrCRAM:
00001B38 3280                       		move.w	d0,(a1)
00001B3A 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001B3E                            
00001B3E 42B8 F616                  		clr.l	($FFFFF616).w
00001B42 42B8 F61A                  		clr.l	($FFFFF61A).w
00001B46 2F01                       		move.l	d1,-(sp)
00001B48 4BF9 00C0 0004             		lea	($C00004).l,a5
00001B4E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001B52 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00001B58 3ABC 9780                  		move.w	#$9780,(a5)
00001B5C 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001B62 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
00001B6A                            
00001B6A                            loc_128E:
00001B6A 3215                       		move.w	(a5),d1
00001B6C 0801 0001                  		btst	#1,d1
00001B70 66F8                       		bne.s	loc_128E
00001B72                            
00001B72 3ABC 8F02                  		move.w	#$8F02,(a5)
00001B76 221F                       		move.l	(sp)+,d1
00001B78 4E75                       		rts	
00001B7A                            ; End of function VDPSetupGame
00001B7A                            
00001B7A                            ; ===========================================================================
00001B7A 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
00001B82 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
00001B8A 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
00001B92 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
00001B9A 9001 9100 9200             		dc.w $9001, $9100, $9200
00001BA0                            
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            ; Subroutine to	clear the screen
00001BA0                            ; ---------------------------------------------------------------------------
00001BA0                            
00001BA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BA0                            
00001BA0                            InitScreen:
00001BA0                            ClearScreen:
00001BA0 4BF9 00C0 0004             		lea	($C00004).l,a5
00001BA6 3ABC 8F01                  		move.w	#$8F01,(a5)
00001BAA 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001BB0 3ABC 9780                  		move.w	#$9780,(a5)
00001BB4 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001BBA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001BC2                            
00001BC2                            loc_12E6:
00001BC2 3215                       		move.w	(a5),d1
00001BC4 0801 0001                  		btst	#1,d1
00001BC8 66F8                       		bne.s	loc_12E6
00001BCA                            
00001BCA 3ABC 8F02                  		move.w	#$8F02,(a5)
00001BCE 4BF9 00C0 0004             		lea	($C00004).l,a5
00001BD4 3ABC 8F01                  		move.w	#$8F01,(a5)
00001BD8 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001BDE 3ABC 9780                  		move.w	#$9780,(a5)
00001BE2 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001BE8 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001BF0                            
00001BF0                            loc_1314:
00001BF0 3215                       		move.w	(a5),d1
00001BF2 0801 0001                  		btst	#1,d1
00001BF6 66F8                       		bne.s	loc_1314
00001BF8                            
00001BF8 3ABC 8F02                  		move.w	#$8F02,(a5)
00001BFC 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001C04 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001C0C 43F8 F800                  		lea	($FFFFF800).w,a1
00001C10 7000                       		moveq	#0,d0
00001C12 323C 009F                  		move.w	#$9F,d1
00001C16                            
00001C16                            loc_133A:
00001C16 22C0                       		move.l	d0,(a1)+
00001C18 51C9 FFFC                  		dbf	d1,loc_133A
00001C1C                            
00001C1C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001C20 7000                       		moveq	#0,d0
00001C22 323C 00FF                  		move.w	#$FF,d1
00001C26                            
00001C26                            loc_134A:
00001C26 22C0                       		move.l	d0,(a1)+
00001C28 51C9 FFFC                  		dbf	d1,loc_134A
00001C2C 4E75                       		rts	
00001C2E                            ; End of function ClearScreen
00001C2E                            
00001C2E                            ; ---------------------------------------------------------------------------
00001C2E                            ; Subroutine to	load the sound driver
00001C2E                            ; ---------------------------------------------------------------------------
00001C2E                            
00001C2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C2E                            
00001C2E                            
00001C2E                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001C2E 4E75                       		rts
00001C30                            
00001C30                            ; work around this if you need to, other stops are redundant anyway
00001C30                            
00001C30 4E71                       		nop	
00001C32 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001C3A 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001C42 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00001C48 43F9 00A0 0000             		lea	($A00000).l,a1
00001C4E 6100 0000                  		bsr.w	KosDec		; decompress
00001C52 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
00001C5A 4E71                       		nop	
00001C5C 4E71                       		nop	
00001C5E 4E71                       		nop	
00001C60 4E71                       		nop	
00001C62 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001C6A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001C72 4E75                       		rts	
00001C74                            ; End of function SoundDriverLoad
00001C74                            
00001C74                            ; ---------------------------------------------------------------------------
00001C74                            ; Subroutine to	play a sound or	music track
00001C74                            ; ---------------------------------------------------------------------------
00001C74                            
00001C74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C74                            
00001C74                            
00001C74                            PlaySound:
00001C74 11C0 F00A                  		move.b	d0,($FFFFF00A).w
00001C78 4E75                       		rts	
00001C7A                            ; End of function PlaySound
00001C7A                            
00001C7A                            ; ---------------------------------------------------------------------------
00001C7A                            ; Subroutine to	play a special sound/music (E0-E4)
00001C7A                            ;
00001C7A                            ; E0 - Fade out
00001C7A                            ; E1 - Sega
00001C7A                            ; E2 - Speed up
00001C7A                            ; E3 - Normal speed
00001C7A                            ; E4 - Stop
00001C7A                            ; ---------------------------------------------------------------------------
00001C7A                            
00001C7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C7A                            
00001C7A                            
00001C7A                            PlaySound_Special:
00001C7A 11C0 F00B                  		move.b	d0,($FFFFF00B).w
00001C7E 4E75                       		rts	
00001C80                            ; End of function PlaySound_Special
00001C80                            
00001C80                            ; ===========================================================================
00001C80                            ; ---------------------------------------------------------------------------
00001C80                            ; Unused sound/music subroutine
00001C80                            ; ---------------------------------------------------------------------------
00001C80                            
00001C80                            PlaySound_Unk:
00001C80 11C0 F00C                  		move.b	d0,($FFFFF00C).w
00001C84 4E75                       		rts	
00001C86                            
00001C86                            ; ---------------------------------------------------------------------------
00001C86                            ; Subroutine to	pause the game
00001C86                            ; ---------------------------------------------------------------------------
00001C86                            
00001C86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C86                            
00001C86                            
00001C86                            PauseGame:				; XREF: Level_MainLoop; et al
00001C86 4E71                       		nop	
00001C88 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
00001C8C 6700                       		beq.s	Unpause		; if not, branch
00001C8E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
00001C92 6600                       		bne.s	loc_13BE	; if yes, branch
00001C94 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001C9A 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001C9C                            
00001C9C                            loc_13BE:
00001C9C 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
00001CA2 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001CA8                            
00001CA8                            loc_13CA:
00001CA8 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
00001CAE 6100 0000                  		bsr.w	DelayProgram
00001CB2 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001CB8 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001CBA 11FC 0024 F600             		move.b	#$24,($FFFFF600).w ; set game mode to $24 (beebush)
00001CC0 4E71                       		nop	
00001CC2 6000                       		bra.s	loc_1404
00001CC4                            ; ===========================================================================
00001CC4                            
00001CC4                            Pause_ChkBC:				; XREF: PauseGame
00001CC4 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001CCA 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001CCC 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001CD2 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001CD4                            
00001CD4                            Pause_ChkStart:				; XREF: PauseGame
00001CD4 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001CDA 67CC                       		beq.s	loc_13CA	; if not, branch
00001CDC                            
00001CDC                            loc_1404:				; XREF: PauseGame
00001CDC 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001CE2                            
00001CE2                            Unpause:				; XREF: PauseGame
00001CE2 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001CE8                            
00001CE8                            Pause_DoNothing:			; XREF: PauseGame
00001CE8 4E75                       		rts	
00001CEA                            ; ===========================================================================
00001CEA                            
00001CEA                            Pause_SlowMo:				; XREF: PauseGame
00001CEA 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001CF0 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001CF6 4E75                       		rts	
00001CF8                            ; End of function PauseGame
00001CF8                            
00001CF8                            ; ---------------------------------------------------------------------------
00001CF8                            ; Subroutine to	display	patterns via the VDP
00001CF8                            ; ---------------------------------------------------------------------------
00001CF8                            
00001CF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CF8                            
00001CF8                            DrawTileMap:
00001CF8                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001CF8 4DF9 00C0 0000             		lea	($C00000).l,a6
00001CFE 283C 0080 0000             		move.l	#$800000,d4
00001D04                            
00001D04                            loc_142C:
00001D04 2D40 0004                  		move.l	d0,4(a6)
00001D08 3601                       		move.w	d1,d3
00001D0A                            
00001D0A                            loc_1432:
00001D0A 3C99                       		move.w	(a1)+,(a6)
00001D0C 51CB FFFC                  		dbf	d3,loc_1432
00001D10 D084                       		add.l	d4,d0
00001D12 51CA FFF0                  		dbf	d2,loc_142C
00001D16 4E75                       		rts	
00001D18                            ; End of function ShowVDPGraphics
00001D18                            
00001D18                            ; ---------------------------------------------------------------------------
00001D18                            ; Nemesis decompression	algorithm
00001D18                            ; ---------------------------------------------------------------------------
00001D18                            
00001D18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D18                            
00001D18                            
00001D18                            NemDec:
00001D18 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001D1C 47F9 0000 0000             		lea	(loc_1502).l,a3
00001D22 49F9 00C0 0000             		lea	($C00000).l,a4
00001D28 6000                       		bra.s	loc_145C
00001D2A                            ; ===========================================================================
00001D2A 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001D2E 47F9 0000 0000             		lea	(loc_1518).l,a3
00001D34                            
00001D34                            loc_145C:				; XREF: NemDec
00001D34 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001D38 3418                       		move.w	(a0)+,d2
00001D3A E34A                       		lsl.w	#1,d2
00001D3C 6400                       		bcc.s	loc_146A
00001D3E D6FC 000A                  		adda.w	#$A,a3
00001D42                            
00001D42                            loc_146A:
00001D42 E54A                       		lsl.w	#2,d2
00001D44 3A42                       		movea.w	d2,a5
00001D46 7608                       		moveq	#8,d3
00001D48 7400                       		moveq	#0,d2
00001D4A 7800                       		moveq	#0,d4
00001D4C 6100 0000                  		bsr.w	NemDec4
00001D50 1A18                       		move.b	(a0)+,d5
00001D52 E145                       		asl.w	#8,d5
00001D54 1A18                       		move.b	(a0)+,d5
00001D56 3C3C 0010                  		move.w	#$10,d6
00001D5A 6100                       		bsr.s	NemDec2
00001D5C 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
00001D60 4E75                       		rts	
00001D62                            ; End of function NemDec
00001D62                            
00001D62                            
00001D62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D62                            
00001D62                            
00001D62                            NemDec2:				; XREF: NemDec
00001D62 3E06                       		move.w	d6,d7
00001D64 5147                       		subq.w	#8,d7
00001D66 3205                       		move.w	d5,d1
00001D68 EE69                       		lsr.w	d7,d1
00001D6A 0C01 00FC                  		cmpi.b	#-4,d1
00001D6E 6400                       		bcc.s	loc_14D6
00001D70 0241 00FF                  		andi.w	#$FF,d1
00001D74 D241                       		add.w	d1,d1
00001D76 1031 1000                  		move.b	(a1,d1.w),d0
00001D7A 4880                       		ext.w	d0
00001D7C 9C40                       		sub.w	d0,d6
00001D7E 0C46 0009                  		cmpi.w	#9,d6
00001D82 6400                       		bcc.s	loc_14B2
00001D84 5046                       		addq.w	#8,d6
00001D86 E145                       		asl.w	#8,d5
00001D88 1A18                       		move.b	(a0)+,d5
00001D8A                            
00001D8A                            loc_14B2:
00001D8A 1231 1001                  		move.b	1(a1,d1.w),d1
00001D8E 3001                       		move.w	d1,d0
00001D90 0241 000F                  		andi.w	#$F,d1
00001D94 0240 00F0                  		andi.w	#$F0,d0
00001D98                            
00001D98                            loc_14C0:				; XREF: NemDec3
00001D98 E848                       		lsr.w	#4,d0
00001D9A                            
00001D9A                            loc_14C2:				; XREF: NemDec3
00001D9A E98C                       		lsl.l	#4,d4
00001D9C 8801                       		or.b	d1,d4
00001D9E 5343                       		subq.w	#1,d3
00001DA0 6600                       		bne.s	loc_14D0
00001DA2 4ED3                       		jmp	(a3)
00001DA4                            ; End of function NemDec2
00001DA4                            
00001DA4                            
00001DA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DA4                            
00001DA4                            
00001DA4                            NemDec3:				; XREF: loc_1502
00001DA4 7800                       		moveq	#0,d4
00001DA6 7608                       		moveq	#8,d3
00001DA8                            
00001DA8                            loc_14D0:				; XREF: NemDec2
00001DA8 51C8 FFF0                  		dbf	d0,loc_14C2
00001DAC 60B4                       		bra.s	NemDec2
00001DAE                            ; ===========================================================================
00001DAE                            
00001DAE                            loc_14D6:				; XREF: NemDec2
00001DAE 5D46                       		subq.w	#6,d6
00001DB0 0C46 0009                  		cmpi.w	#9,d6
00001DB4 6400                       		bcc.s	loc_14E4
00001DB6 5046                       		addq.w	#8,d6
00001DB8 E145                       		asl.w	#8,d5
00001DBA 1A18                       		move.b	(a0)+,d5
00001DBC                            
00001DBC                            loc_14E4:				; XREF: NemDec3
00001DBC 5F46                       		subq.w	#7,d6
00001DBE 3205                       		move.w	d5,d1
00001DC0 EC69                       		lsr.w	d6,d1
00001DC2 3001                       		move.w	d1,d0
00001DC4 0241 000F                  		andi.w	#$F,d1
00001DC8 0240 0070                  		andi.w	#$70,d0
00001DCC 0C46 0009                  		cmpi.w	#9,d6
00001DD0 64C6                       		bcc.s	loc_14C0
00001DD2 5046                       		addq.w	#8,d6
00001DD4 E145                       		asl.w	#8,d5
00001DD6 1A18                       		move.b	(a0)+,d5
00001DD8 60BE                       		bra.s	loc_14C0
00001DDA                            ; End of function NemDec3
00001DDA                            
00001DDA                            ; ===========================================================================
00001DDA                            
00001DDA                            loc_1502:				; XREF: NemDec
00001DDA 2884                       		move.l	d4,(a4)
00001DDC 534D                       		subq.w	#1,a5
00001DDE 380D                       		move.w	a5,d4
00001DE0 66C2                       		bne.s	NemDec3
00001DE2 4E75                       		rts	
00001DE4                            ; ===========================================================================
00001DE4 B982                       		eor.l	d4,d2
00001DE6 2882                       		move.l	d2,(a4)
00001DE8 534D                       		subq.w	#1,a5
00001DEA 380D                       		move.w	a5,d4
00001DEC 66B6                       		bne.s	NemDec3
00001DEE 4E75                       		rts	
00001DF0                            ; ===========================================================================
00001DF0                            
00001DF0                            loc_1518:				; XREF: NemDec
00001DF0 28C4                       		move.l	d4,(a4)+
00001DF2 534D                       		subq.w	#1,a5
00001DF4 380D                       		move.w	a5,d4
00001DF6 66AC                       		bne.s	NemDec3
00001DF8 4E75                       		rts	
00001DFA                            ; ===========================================================================
00001DFA B982                       		eor.l	d4,d2
00001DFC 28C2                       		move.l	d2,(a4)+
00001DFE 534D                       		subq.w	#1,a5
00001E00 380D                       		move.w	a5,d4
00001E02 66A0                       		bne.s	NemDec3
00001E04 4E75                       		rts	
00001E06                            
00001E06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E06                            
00001E06                            
00001E06                            NemDec4:				; XREF: NemDec
00001E06 1018                       		move.b	(a0)+,d0
00001E08                            
00001E08                            loc_1530:
00001E08 0C00 00FF                  		cmpi.b	#-1,d0
00001E0C 6600                       		bne.s	loc_1538
00001E0E 4E75                       		rts	
00001E10                            ; ===========================================================================
00001E10                            
00001E10                            loc_1538:				; XREF: NemDec4
00001E10 3E00                       		move.w	d0,d7
00001E12                            
00001E12                            loc_153A:
00001E12 1018                       		move.b	(a0)+,d0
00001E14 0C00 0080                  		cmpi.b	#$80,d0
00001E18 64EE                       		bcc.s	loc_1530
00001E1A 1200                       		move.b	d0,d1
00001E1C 0247 000F                  		andi.w	#$F,d7
00001E20 0241 0070                  		andi.w	#$70,d1
00001E24 8E41                       		or.w	d1,d7
00001E26 0240 000F                  		andi.w	#$F,d0
00001E2A 1200                       		move.b	d0,d1
00001E2C E149                       		lsl.w	#8,d1
00001E2E 8E41                       		or.w	d1,d7
00001E30 7208                       		moveq	#8,d1
00001E32 9240                       		sub.w	d0,d1
00001E34 6600                       		bne.s	loc_1568
00001E36 1018                       		move.b	(a0)+,d0
00001E38 D040                       		add.w	d0,d0
00001E3A 3387 0000                  		move.w	d7,(a1,d0.w)
00001E3E 60D2                       		bra.s	loc_153A
00001E40                            ; ===========================================================================
00001E40                            
00001E40                            loc_1568:				; XREF: NemDec4
00001E40 1018                       		move.b	(a0)+,d0
00001E42 E368                       		lsl.w	d1,d0
00001E44 D040                       		add.w	d0,d0
00001E46 7A01                       		moveq	#1,d5
00001E48 E36D                       		lsl.w	d1,d5
00001E4A 5345                       		subq.w	#1,d5
00001E4C                            
00001E4C                            loc_1574:
00001E4C 3387 0000                  		move.w	d7,(a1,d0.w)
00001E50 5440                       		addq.w	#2,d0
00001E52 51CD FFF8                  		dbf	d5,loc_1574
00001E56 60BA                       		bra.s	loc_153A
00001E58                            ; End of function NemDec4
00001E58                            
00001E58                            ; ---------------------------------------------------------------------------
00001E58                            ; Subroutine to	load pattern load cues
00001E58                            ; ---------------------------------------------------------------------------
00001E58                            
00001E58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E58                            
00001E58                            LoadArtList: 
00001E58                            LoadPLC:
00001E58 48E7 0060                  		movem.l	a1-a2,-(sp)
00001E5C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001E62 D040                       		add.w	d0,d0
00001E64 3031 0000                  		move.w	(a1,d0.w),d0
00001E68 43F1 0000                  		lea	(a1,d0.w),a1
00001E6C 45F8 F680                  		lea	($FFFFF680).w,a2
00001E70                            
00001E70                            loc_1598:
00001E70 4A92                       		tst.l	(a2)
00001E72 6700                       		beq.s	loc_15A0
00001E74 5C4A                       		addq.w	#6,a2
00001E76 60F8                       		bra.s	loc_1598
00001E78                            ; ===========================================================================
00001E78                            
00001E78                            loc_15A0:				; XREF: LoadPLC
00001E78 3019                       		move.w	(a1)+,d0
00001E7A 6B00                       		bmi.s	loc_15AC
00001E7C                            
00001E7C                            loc_15A4:
00001E7C 24D9                       		move.l	(a1)+,(a2)+
00001E7E 34D9                       		move.w	(a1)+,(a2)+
00001E80 51C8 FFFA                  		dbf	d0,loc_15A4
00001E84                            
00001E84                            loc_15AC:
00001E84 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001E88 4E75                       		rts	
00001E8A                            ; End of function LoadPLC
00001E8A                            
00001E8A                            
00001E8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E8A                            
00001E8A                            InitArtList: 
00001E8A                            LoadPLC2:
00001E8A 48E7 0060                  		movem.l	a1-a2,-(sp)
00001E8E 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001E94 D040                       		add.w	d0,d0
00001E96 3031 0000                  		move.w	(a1,d0.w),d0
00001E9A 43F1 0000                  		lea	(a1,d0.w),a1
00001E9E 6100                       		bsr.s	ClearPLC
00001EA0 45F8 F680                  		lea	($FFFFF680).w,a2
00001EA4 3019                       		move.w	(a1)+,d0
00001EA6 6B00                       		bmi.s	loc_15D8
00001EA8                            
00001EA8                            loc_15D0:
00001EA8 24D9                       		move.l	(a1)+,(a2)+
00001EAA 34D9                       		move.w	(a1)+,(a2)+
00001EAC 51C8 FFFA                  		dbf	d0,loc_15D0
00001EB0                            
00001EB0                            loc_15D8:
00001EB0 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001EB4 4E75                       		rts	
00001EB6                            ; End of function LoadPLC2
00001EB6                            
00001EB6                            ; ---------------------------------------------------------------------------
00001EB6                            ; Subroutine to	clear the pattern load cues
00001EB6                            ; ---------------------------------------------------------------------------
00001EB6                            
00001EB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EB6                            
00001EB6                            ClearArtListQueue:
00001EB6                            ClearPLC:				; XREF: LoadPLC2
00001EB6 45F8 F680                  		lea	($FFFFF680).w,a2
00001EBA 701F                       		moveq	#$1F,d0
00001EBC                            
00001EBC                            ClearPLC_Loop:
00001EBC 429A                       		clr.l	(a2)+
00001EBE 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00001EC2 4E75                       		rts	
00001EC4                            ; End of function ClearPLC
00001EC4                            
00001EC4                            ; ---------------------------------------------------------------------------
00001EC4                            ; Subroutine to	use graphics listed in a pattern load cue
00001EC4                            ; ---------------------------------------------------------------------------
00001EC4                            
00001EC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EC4                            
00001EC4                            ProcessArtLoading: 
00001EC4                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001EC4 4AB8 F680                  		tst.l	($FFFFF680).w
00001EC8 6700                       		beq.s	locret_1640
00001ECA 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001ECE 6600                       		bne.s	locret_1640
00001ED0 2078 F680                  		movea.l	($FFFFF680).w,a0
00001ED4 47F9 0000 1DDA             		lea	(loc_1502).l,a3
00001EDA 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001EDE 3418                       		move.w	(a0)+,d2
00001EE0 6A00                       		bpl.s	loc_160E
00001EE2 D6FC 000A                  		adda.w	#$A,a3
00001EE6                            
00001EE6                            loc_160E:
00001EE6 0242 7FFF                  		andi.w	#$7FFF,d2
00001EEA 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001EEE 6100 FF16                  		bsr.w	NemDec4
00001EF2 1A18                       		move.b	(a0)+,d5
00001EF4 E145                       		asl.w	#8,d5
00001EF6 1A18                       		move.b	(a0)+,d5
00001EF8 7C10                       		moveq	#$10,d6
00001EFA 7000                       		moveq	#0,d0
00001EFC 21C8 F680                  		move.l	a0,($FFFFF680).w
00001F00 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001F04 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001F08 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001F0C 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001F10 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001F14 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001F18                            
00001F18                            locret_1640:
00001F18 4E75                       		rts	
00001F1A                            ; End of function RunPLC_RAM
00001F1A                            
00001F1A                            
00001F1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F1A                            
00001F1A                            
00001F1A                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001F1A 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001F1E 6700 0000                  		beq.w	locret_16DA
00001F22 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001F28 7000                       		moveq	#0,d0
00001F2A 3038 F684                  		move.w	($FFFFF684).w,d0
00001F2E 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001F34 6000                       		bra.s	loc_1676
00001F36                            ; End of function sub_1642
00001F36                            
00001F36                            
00001F36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F36                            
00001F36                            
00001F36                            sub_165E:				; XREF: Demo_Time
00001F36 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001F3A 6700                       		beq.s	locret_16DA
00001F3C 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001F42 7000                       		moveq	#0,d0
00001F44 3038 F684                  		move.w	($FFFFF684).w,d0
00001F48 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001F4E                            
00001F4E                            loc_1676:				; XREF: sub_1642
00001F4E 49F9 00C0 0004             		lea	($C00004).l,a4
00001F54 E588                       		lsl.l	#2,d0
00001F56 E448                       		lsr.w	#2,d0
00001F58 0040 4000                  		ori.w	#$4000,d0
00001F5C 4840                       		swap	d0
00001F5E 2880                       		move.l	d0,(a4)
00001F60 594C                       		subq.w	#4,a4
00001F62 2078 F680                  		movea.l	($FFFFF680).w,a0
00001F66 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001F6A 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001F6E 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001F72 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001F76 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001F7A 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001F7E 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001F82                            
00001F82                            loc_16AA:				; XREF: sub_165E
00001F82 3A7C 0008                  		movea.w	#8,a5
00001F86 6100 FE1C                  		bsr.w	NemDec3
00001F8A 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00001F8E 6700                       		beq.s	loc_16DC
00001F90 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001F94 66EC                       		bne.s	loc_16AA
00001F96 21C8 F680                  		move.l	a0,($FFFFF680).w
00001F9A 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001F9E 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001FA2 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001FA6 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001FAA 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001FAE 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001FB2                            
00001FB2                            locret_16DA:				; XREF: sub_1642
00001FB2 4E75                       		rts	
00001FB4                            ; ===========================================================================
00001FB4                            
00001FB4                            loc_16DC:				; XREF: sub_165E
00001FB4 41F8 F680                  		lea	($FFFFF680).w,a0
00001FB8 7015                       		moveq	#$15,d0
00001FBA                            
00001FBA                            loc_16E2:				; XREF: sub_165E
00001FBA 20E8 0006                  		move.l	6(a0),(a0)+
00001FBE 51C8 FFFA                  		dbf	d0,loc_16E2
00001FC2 4E75                       		rts	
00001FC4                            ; End of function sub_165E
00001FC4                            
00001FC4                            ; ---------------------------------------------------------------------------
00001FC4                            ; Subroutine to	execute	the pattern load cue
00001FC4                            ; ---------------------------------------------------------------------------
00001FC4                            
00001FC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FC4                            
00001FC4                            
00001FC4                            RunPLC_ROM:
00001FC4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001FCA D040                       		add.w	d0,d0
00001FCC 3031 0000                  		move.w	(a1,d0.w),d0
00001FD0 43F1 0000                  		lea	(a1,d0.w),a1
00001FD4 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001FD6                            
00001FD6                            RunPLC_Loop:
00001FD6 2059                       		movea.l	(a1)+,a0	; get art pointer
00001FD8 7000                       		moveq	#0,d0
00001FDA 3019                       		move.w	(a1)+,d0	; get VRAM address
00001FDC E588                       		lsl.l	#2,d0		; divide address by $20
00001FDE E448                       		lsr.w	#2,d0
00001FE0 0040 4000                  		ori.w	#$4000,d0
00001FE4 4840                       		swap	d0
00001FE6 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001FEC 6100 FD2A                  		bsr.w	NemDec		; decompress
00001FF0 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001FF4 4E75                       		rts	
00001FF6                            ; End of function RunPLC_ROM
00001FF6                            
00001FF6                            ; ---------------------------------------------------------------------------
00001FF6                            ; Enigma decompression algorithm
00001FF6                            ; ---------------------------------------------------------------------------
00001FF6                            
00001FF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FF6                            
00001FF6                            
00001FF6                            EniDec:
00001FF6 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001FFA 3640                       		movea.w	d0,a3
00001FFC 1018                       		move.b	(a0)+,d0
00001FFE 4880                       		ext.w	d0
00002000 3A40                       		movea.w	d0,a5
00002002 1818                       		move.b	(a0)+,d4
00002004 E70C                       		lsl.b	#3,d4
00002006 3458                       		movea.w	(a0)+,a2
00002008 D4CB                       		adda.w	a3,a2
0000200A 3858                       		movea.w	(a0)+,a4
0000200C D8CB                       		adda.w	a3,a4
0000200E 1A18                       		move.b	(a0)+,d5
00002010 E145                       		asl.w	#8,d5
00002012 1A18                       		move.b	(a0)+,d5
00002014 7C10                       		moveq	#$10,d6
00002016                            
00002016                            loc_173E:				; XREF: loc_1768
00002016 7007                       		moveq	#7,d0
00002018 3E06                       		move.w	d6,d7
0000201A 9E40                       		sub.w	d0,d7
0000201C 3205                       		move.w	d5,d1
0000201E EE69                       		lsr.w	d7,d1
00002020 0241 007F                  		andi.w	#$7F,d1
00002024 3401                       		move.w	d1,d2
00002026 0C41 0040                  		cmpi.w	#$40,d1
0000202A 6400                       		bcc.s	loc_1758
0000202C 7006                       		moveq	#6,d0
0000202E E24A                       		lsr.w	#1,d2
00002030                            
00002030                            loc_1758:
00002030 6100 0000                  		bsr.w	sub_188C
00002034 0242 000F                  		andi.w	#$F,d2
00002038 E849                       		lsr.w	#4,d1
0000203A D241                       		add.w	d1,d1
0000203C 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00002040                            ; End of function EniDec
00002040                            
00002040                            ; ===========================================================================
00002040                            
00002040                            loc_1768:				; XREF: loc_17B4
00002040 32CA                       		move.w	a2,(a1)+
00002042 524A                       		addq.w	#1,a2
00002044 51CA FFFA                  		dbf	d2,loc_1768
00002048 60CC                       		bra.s	loc_173E
0000204A                            ; ===========================================================================
0000204A                            
0000204A                            loc_1772:				; XREF: loc_17B4
0000204A 32CC                       		move.w	a4,(a1)+
0000204C 51CA FFFC                  		dbf	d2,loc_1772
00002050 60C4                       		bra.s	loc_173E
00002052                            ; ===========================================================================
00002052                            
00002052                            loc_177A:				; XREF: loc_17B4
00002052 6100 0000                  		bsr.w	loc_17DC
00002056                            
00002056                            loc_177E:
00002056 32C1                       		move.w	d1,(a1)+
00002058 51CA FFFC                  		dbf	d2,loc_177E
0000205C 60B8                       		bra.s	loc_173E
0000205E                            ; ===========================================================================
0000205E                            
0000205E                            loc_1786:				; XREF: loc_17B4
0000205E 6100 0000                  		bsr.w	loc_17DC
00002062                            
00002062                            loc_178A:
00002062 32C1                       		move.w	d1,(a1)+
00002064 5241                       		addq.w	#1,d1
00002066 51CA FFFA                  		dbf	d2,loc_178A
0000206A 60AA                       		bra.s	loc_173E
0000206C                            ; ===========================================================================
0000206C                            
0000206C                            loc_1794:				; XREF: loc_17B4
0000206C 6100 0000                  		bsr.w	loc_17DC
00002070                            
00002070                            loc_1798:
00002070 32C1                       		move.w	d1,(a1)+
00002072 5341                       		subq.w	#1,d1
00002074 51CA FFFA                  		dbf	d2,loc_1798
00002078 609C                       		bra.s	loc_173E
0000207A                            ; ===========================================================================
0000207A                            
0000207A                            loc_17A2:				; XREF: loc_17B4
0000207A 0C42 000F                  		cmpi.w	#$F,d2
0000207E 6700                       		beq.s	loc_17C4
00002080                            
00002080                            loc_17A8:
00002080 6100 0000                  		bsr.w	loc_17DC
00002084 32C1                       		move.w	d1,(a1)+
00002086 51CA FFF8                  		dbf	d2,loc_17A8
0000208A 608A                       		bra.s	loc_173E
0000208C                            ; ===========================================================================
0000208C                            
0000208C                            loc_17B4:				; XREF: EniDec
0000208C 60B2                       		bra.s	loc_1768
0000208E                            ; ===========================================================================
0000208E 60B0                       		bra.s	loc_1768
00002090                            ; ===========================================================================
00002090 60B8                       		bra.s	loc_1772
00002092                            ; ===========================================================================
00002092 60B6                       		bra.s	loc_1772
00002094                            ; ===========================================================================
00002094 60BC                       		bra.s	loc_177A
00002096                            ; ===========================================================================
00002096 60C6                       		bra.s	loc_1786
00002098                            ; ===========================================================================
00002098 60D2                       		bra.s	loc_1794
0000209A                            ; ===========================================================================
0000209A 60DE                       		bra.s	loc_17A2
0000209C                            ; ===========================================================================
0000209C                            
0000209C                            loc_17C4:				; XREF: loc_17A2
0000209C 5348                       		subq.w	#1,a0
0000209E 0C46 0010                  		cmpi.w	#$10,d6
000020A2 6600                       		bne.s	loc_17CE
000020A4 5348                       		subq.w	#1,a0
000020A6                            
000020A6                            loc_17CE:
000020A6 3008                       		move.w	a0,d0
000020A8 E248                       		lsr.w	#1,d0
000020AA 6400                       		bcc.s	loc_17D6
000020AC 5248                       		addq.w	#1,a0
000020AE                            
000020AE                            loc_17D6:
000020AE 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000020B2 4E75                       		rts	
000020B4                            ; ===========================================================================
000020B4                            
000020B4                            loc_17DC:				; XREF: loc_17A2
000020B4 360B                       		move.w	a3,d3
000020B6 1204                       		move.b	d4,d1
000020B8 D201                       		add.b	d1,d1
000020BA 6400                       		bcc.s	loc_17EE
000020BC 5346                       		subq.w	#1,d6
000020BE 0D05                       		btst	d6,d5
000020C0 6700                       		beq.s	loc_17EE
000020C2 0043 8000                  		ori.w	#-$8000,d3
000020C6                            
000020C6                            loc_17EE:
000020C6 D201                       		add.b	d1,d1
000020C8 6400                       		bcc.s	loc_17FC
000020CA 5346                       		subq.w	#1,d6
000020CC 0D05                       		btst	d6,d5
000020CE 6700                       		beq.s	loc_17FC
000020D0 0643 4000                  		addi.w	#$4000,d3
000020D4                            
000020D4                            loc_17FC:
000020D4 D201                       		add.b	d1,d1
000020D6 6400                       		bcc.s	loc_180A
000020D8 5346                       		subq.w	#1,d6
000020DA 0D05                       		btst	d6,d5
000020DC 6700                       		beq.s	loc_180A
000020DE 0643 2000                  		addi.w	#$2000,d3
000020E2                            
000020E2                            loc_180A:
000020E2 D201                       		add.b	d1,d1
000020E4 6400                       		bcc.s	loc_1818
000020E6 5346                       		subq.w	#1,d6
000020E8 0D05                       		btst	d6,d5
000020EA 6700                       		beq.s	loc_1818
000020EC 0043 1000                  		ori.w	#$1000,d3
000020F0                            
000020F0                            loc_1818:
000020F0 D201                       		add.b	d1,d1
000020F2 6400                       		bcc.s	loc_1826
000020F4 5346                       		subq.w	#1,d6
000020F6 0D05                       		btst	d6,d5
000020F8 6700                       		beq.s	loc_1826
000020FA 0043 0800                  		ori.w	#$800,d3
000020FE                            
000020FE                            loc_1826:
000020FE 3205                       		move.w	d5,d1
00002100 3E06                       		move.w	d6,d7
00002102 9E4D                       		sub.w	a5,d7
00002104 6400                       		bcc.s	loc_1856
00002106 3C07                       		move.w	d7,d6
00002108 0646 0010                  		addi.w	#$10,d6
0000210C 4447                       		neg.w	d7
0000210E EF69                       		lsl.w	d7,d1
00002110 1A10                       		move.b	(a0),d5
00002112 EF3D                       		rol.b	d7,d5
00002114 DE47                       		add.w	d7,d7
00002116 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
0000211A D245                       		add.w	d5,d1
0000211C                            
0000211C                            loc_1844:				; XREF: loc_1868
0000211C 300D                       		move.w	a5,d0
0000211E D040                       		add.w	d0,d0
00002120 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00002124 D243                       		add.w	d3,d1
00002126 1A18                       		move.b	(a0)+,d5
00002128 E14D                       		lsl.w	#8,d5
0000212A 1A18                       		move.b	(a0)+,d5
0000212C 4E75                       		rts	
0000212E                            ; ===========================================================================
0000212E                            
0000212E                            loc_1856:				; XREF: loc_1826
0000212E 6700                       		beq.s	loc_1868
00002130 EE69                       		lsr.w	d7,d1
00002132 300D                       		move.w	a5,d0
00002134 D040                       		add.w	d0,d0
00002136 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000213A D243                       		add.w	d3,d1
0000213C 300D                       		move.w	a5,d0
0000213E 6000                       		bra.s	sub_188C
00002140                            ; ===========================================================================
00002140                            
00002140                            loc_1868:				; XREF: loc_1856
00002140 7C10                       		moveq	#$10,d6
00002142                            
00002142                            loc_186A:
00002142 60D8                       		bra.s	loc_1844
00002144                            ; ===========================================================================
00002144 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
0000215A 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00002164                            
00002164                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002164                            
00002164                            
00002164                            sub_188C:				; XREF: EniDec
00002164 9C40                       		sub.w	d0,d6
00002166 0C46 0009                  		cmpi.w	#9,d6
0000216A 6400                       		bcc.s	locret_189A
0000216C 5046                       		addq.w	#8,d6
0000216E E145                       		asl.w	#8,d5
00002170 1A18                       		move.b	(a0)+,d5
00002172                            
00002172                            locret_189A:
00002172 4E75                       		rts	
00002174                            ; End of function sub_188C
00002174                            
00002174                            ; ---------------------------------------------------------------------------
00002174                            ; Kosinski decompression algorithm
00002174                            ; ---------------------------------------------------------------------------
00002174                            
00002174                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002174                            
00002174                            
00002174                            KosDec:
00002174                            
00002174 =FFFFFFFE                  var_2		= -2
00002174 =FFFFFFFF                  var_1		= -1
00002174                            
00002174 558F                       		subq.l	#2,sp
00002176 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
0000217A 1E98                       		move.b	(a0)+,(sp)
0000217C 3A17                       		move.w	(sp),d5
0000217E 780F                       		moveq	#$F,d4
00002180                            
00002180                            loc_18A8:
00002180 E24D                       		lsr.w	#1,d5
00002182 40C6                       		move	sr,d6
00002184 51CC 0000                  		dbf	d4,loc_18BA
00002188 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
0000218C 1E98                       		move.b	(a0)+,(sp)
0000218E 3A17                       		move.w	(sp),d5
00002190 780F                       		moveq	#$F,d4
00002192                            
00002192                            loc_18BA:
00002192 44C6                       		move	d6,ccr
00002194 6400                       		bcc.s	loc_18C2
00002196 12D8                       		move.b	(a0)+,(a1)+
00002198 60E6                       		bra.s	loc_18A8
0000219A                            ; ===========================================================================
0000219A                            
0000219A                            loc_18C2:				; XREF: KosDec
0000219A 7600                       		moveq	#0,d3
0000219C E24D                       		lsr.w	#1,d5
0000219E 40C6                       		move	sr,d6
000021A0 51CC 0000                  		dbf	d4,loc_18D6
000021A4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000021A8 1E98                       		move.b	(a0)+,(sp)
000021AA 3A17                       		move.w	(sp),d5
000021AC 780F                       		moveq	#$F,d4
000021AE                            
000021AE                            loc_18D6:
000021AE 44C6                       		move	d6,ccr
000021B0 6500                       		bcs.s	loc_1906
000021B2 E24D                       		lsr.w	#1,d5
000021B4 51CC 0000                  		dbf	d4,loc_18EA
000021B8 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000021BC 1E98                       		move.b	(a0)+,(sp)
000021BE 3A17                       		move.w	(sp),d5
000021C0 780F                       		moveq	#$F,d4
000021C2                            
000021C2                            loc_18EA:
000021C2 E353                       		roxl.w	#1,d3
000021C4 E24D                       		lsr.w	#1,d5
000021C6 51CC 0000                  		dbf	d4,loc_18FC
000021CA 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000021CE 1E98                       		move.b	(a0)+,(sp)
000021D0 3A17                       		move.w	(sp),d5
000021D2 780F                       		moveq	#$F,d4
000021D4                            
000021D4                            loc_18FC:
000021D4 E353                       		roxl.w	#1,d3
000021D6 5243                       		addq.w	#1,d3
000021D8 74FF                       		moveq	#-1,d2
000021DA 1418                       		move.b	(a0)+,d2
000021DC 6000                       		bra.s	loc_191C
000021DE                            ; ===========================================================================
000021DE                            
000021DE                            loc_1906:				; XREF: loc_18C2
000021DE 1018                       		move.b	(a0)+,d0
000021E0 1218                       		move.b	(a0)+,d1
000021E2 74FF                       		moveq	#-1,d2
000021E4 1401                       		move.b	d1,d2
000021E6 EB4A                       		lsl.w	#5,d2
000021E8 1400                       		move.b	d0,d2
000021EA 0241 0007                  		andi.w	#7,d1
000021EE 6700                       		beq.s	loc_1928
000021F0 1601                       		move.b	d1,d3
000021F2 5243                       		addq.w	#1,d3
000021F4                            
000021F4                            loc_191C:
000021F4 1031 2000                  		move.b	(a1,d2.w),d0
000021F8 12C0                       		move.b	d0,(a1)+
000021FA 51CB FFF8                  		dbf	d3,loc_191C
000021FE 6080                       		bra.s	loc_18A8
00002200                            ; ===========================================================================
00002200                            
00002200                            loc_1928:				; XREF: loc_1906
00002200 1218                       		move.b	(a0)+,d1
00002202 6700                       		beq.s	loc_1938
00002204 0C01 0001                  		cmpi.b	#1,d1
00002208 6700 FF76                  		beq.w	loc_18A8
0000220C 1601                       		move.b	d1,d3
0000220E 60E4                       		bra.s	loc_191C
00002210                            ; ===========================================================================
00002210                            
00002210                            loc_1938:				; XREF: loc_1928
00002210 548F                       		addq.l	#2,sp
00002212 4E75                       		rts	
00002214                            ; End of function KosDec
00002214                            
00002214                            ; ---------------------------------------------------------------------------
00002214                            ; Pallet cycling routine loading subroutine
00002214                            ; ---------------------------------------------------------------------------
00002214                            
00002214                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002214                            
00002214                            
00002214                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00002214 7400                       		moveq	#0,d2
00002216 7000                       		moveq	#0,d0
00002218 4A38 FFF9                  		tst.b	($FFFFFFF9).w	; GMZ: Is truth nuke flag set?
0000221C 6600                       		bne.s	PalCycle_Stop	; GMZ: If yes, branch
0000221E 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00002222 D040                       		add.w	d0,d0		; multiply by 2
00002224 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00002228 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
0000222C                            
0000222C                            PalCycle_Stop:
0000222C 4E75                       		rts
0000222E                            ; End of function PalCycle_Load
0000222E                            
0000222E                            ; ===========================================================================
0000222E                            ; ---------------------------------------------------------------------------
0000222E                            ; Pallet cycling routines
0000222E                            ; ---------------------------------------------------------------------------
0000222E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00002230 0000                       		dc.w PalCycle_LZ-PalCycle
00002232 0000                       		dc.w PalCycle_MZ-PalCycle
00002234 0000                       		dc.w PalCycle_SLZ-PalCycle
00002236 0000                       		dc.w PalCycle_SYZ-PalCycle
00002238 0000                       		dc.w PalCycle_SBZ-PalCycle
0000223A 0000                       		dc.w PalCycle_GHZ-PalCycle
0000223C 0000                       		dc.w PalCycle_GHZ-PalCycle
0000223E                            
0000223E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000223E                            
0000223E                            
0000223E                            PalCycle_Title:				; XREF: TitleScreen
0000223E 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00002244 6000                       		bra.s	loc_196A
00002246                            ; ===========================================================================
00002246                            
00002246                            PalCycle_GHZ:				; XREF: PalCycle
00002246 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
0000224C                            
0000224C                            loc_196A:				; XREF: PalCycle_Title
0000224C 5378 F634                  		subq.w	#1,($FFFFF634).w
00002250 6A00                       		bpl.s	locret_1990
00002252 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00002258 3038 F632                  		move.w	($FFFFF632).w,d0
0000225C 5278 F632                  		addq.w	#1,($FFFFF632).w
00002260 0240 0003                  		andi.w	#3,d0
00002264 E748                       		lsl.w	#3,d0
00002266 43F8 FB50                  		lea	($FFFFFB50).w,a1
0000226A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000226E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00002272                            
00002272                            locret_1990:
00002272 4E75                       		rts	
00002274                            ; End of function PalCycle_Title
00002274                            
00002274                            
00002274                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002274                            
00002274                            
00002274                            PalCycle_LZ:				; XREF: PalCycle
00002274 5378 F634                  		subq.w	#1,($FFFFF634).w
00002278 6A00                       		bpl.s	loc_19D8
0000227A 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00002280 3038 F632                  		move.w	($FFFFF632).w,d0
00002284 5278 F632                  		addq.w	#1,($FFFFF632).w
00002288 0240 0003                  		andi.w	#3,d0
0000228C E748                       		lsl.w	#3,d0
0000228E 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00002294 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
0000229A 6600                       		bne.s	loc_19C0
0000229C 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
000022A2                            
000022A2                            loc_19C0:
000022A2 43F8 FB56                  		lea	($FFFFFB56).w,a1
000022A6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000022AA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000022AE 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
000022B2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000022B6 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000022BA                            
000022BA                            loc_19D8:
000022BA 3038 FE04                  		move.w	($FFFFFE04).w,d0
000022BE 0240 0007                  		andi.w	#7,d0
000022C2 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
000022C6 6700                       		beq.s	locret_1A3A
000022C8 7201                       		moveq	#1,d1
000022CA 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000022CE 6700                       		beq.s	loc_19F0
000022D0 4441                       		neg.w	d1
000022D2                            
000022D2                            loc_19F0:
000022D2 3038 F650                  		move.w	($FFFFF650).w,d0
000022D6 0240 0003                  		andi.w	#3,d0
000022DA D041                       		add.w	d1,d0
000022DC 0C40 0003                  		cmpi.w	#3,d0
000022E0 6500                       		bcs.s	loc_1A0A
000022E2 3200                       		move.w	d0,d1
000022E4 7000                       		moveq	#0,d0
000022E6 4A41                       		tst.w	d1
000022E8 6A00                       		bpl.s	loc_1A0A
000022EA 7002                       		moveq	#2,d0
000022EC                            
000022EC                            loc_1A0A:
000022EC 31C0 F650                  		move.w	d0,($FFFFF650).w
000022F0 D040                       		add.w	d0,d0
000022F2 3200                       		move.w	d0,d1
000022F4 D040                       		add.w	d0,d0
000022F6 D041                       		add.w	d1,d0
000022F8 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
000022FE 43F8 FB76                  		lea	($FFFFFB76).w,a1
00002302 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00002306 32B0 0004                  		move.w	4(a0,d0.w),(a1)
0000230A 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00002310 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00002314 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00002318 32B0 0004                  		move.w	4(a0,d0.w),(a1)
0000231C                            
0000231C                            locret_1A3A:
0000231C 4E75                       		rts	
0000231E                            ; End of function PalCycle_LZ
0000231E                            
0000231E                            ; ===========================================================================
0000231E 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00002326                            ; ===========================================================================
00002326                            
00002326                            PalCycle_MZ:				; XREF: PalCycle
00002326 4E75                       		rts	
00002328                            
00002328                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002328                            
00002328                            
00002328                            PalCycle_SLZ:				; XREF: PalCycle
00002328 4E75                       		rts	
0000232A                            ; End of function PalCycle_SLZ
0000232A                            
0000232A                            
0000232A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000232A                            
0000232A                            
0000232A                            PalCycle_SYZ:				; XREF: PalCycle
0000232A 5378 F634                  		subq.w	#1,($FFFFF634).w
0000232E 6A00                       		bpl.s	locret_1AC6
00002330 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00002336 3038 F632                  		move.w	($FFFFF632).w,d0
0000233A 5278 F632                  		addq.w	#1,($FFFFF632).w
0000233E 0240 0003                  		andi.w	#3,d0
00002342 E548                       		lsl.w	#2,d0
00002344 3200                       		move.w	d0,d1
00002346 D040                       		add.w	d0,d0
00002348 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
0000234E 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00002352 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00002356 22B0 0004                  		move.l	4(a0,d0.w),(a1)
0000235A 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00002360 43F8 FB76                  		lea	($FFFFFB76).w,a1
00002364 32B0 1000                  		move.w	(a0,d1.w),(a1)
00002368 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
0000236E                            
0000236E                            locret_1AC6:
0000236E 4E75                       		rts	
00002370                            ; End of function PalCycle_SYZ
00002370                            
00002370                            
00002370                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002370                            
00002370                            
00002370                            PalCycle_SBZ:				; XREF: PalCycle
00002370 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00002376 4A38 FE11                  		tst.b	($FFFFFE11).w
0000237A 6700                       		beq.s	loc_1ADA
0000237C 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00002382                            
00002382                            loc_1ADA:
00002382 43F8 F650                  		lea	($FFFFF650).w,a1
00002386 321A                       		move.w	(a2)+,d1
00002388                            
00002388                            loc_1AE0:
00002388 5311                       		subq.b	#1,(a1)
0000238A 6B00                       		bmi.s	loc_1AEA
0000238C 5489                       		addq.l	#2,a1
0000238E 5C8A                       		addq.l	#6,a2
00002390 6000                       		bra.s	loc_1B06
00002392                            ; ===========================================================================
00002392                            
00002392                            loc_1AEA:				; XREF: PalCycle_SBZ
00002392 12DA                       		move.b	(a2)+,(a1)+
00002394 1011                       		move.b	(a1),d0
00002396 5200                       		addq.b	#1,d0
00002398 B01A                       		cmp.b	(a2)+,d0
0000239A 6500                       		bcs.s	loc_1AF6
0000239C 7000                       		moveq	#0,d0
0000239E                            
0000239E                            loc_1AF6:
0000239E 12C0                       		move.b	d0,(a1)+
000023A0 0240 000F                  		andi.w	#$F,d0
000023A4 D040                       		add.w	d0,d0
000023A6 305A                       		movea.w	(a2)+,a0
000023A8 365A                       		movea.w	(a2)+,a3
000023AA 36B0 0000                  		move.w	(a0,d0.w),(a3)
000023AE                            
000023AE                            loc_1B06:				; XREF: PalCycle_SBZ
000023AE 51C9 FFD8                  		dbf	d1,loc_1AE0
000023B2 5378 F634                  		subq.w	#1,($FFFFF634).w
000023B6 6A00                       		bpl.s	locret_1B64
000023B8 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
000023BE 31FC 0001 F634             		move.w	#1,($FFFFF634).w
000023C4 4A38 FE11                  		tst.b	($FFFFFE11).w
000023C8 6700                       		beq.s	loc_1B2E
000023CA 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
000023D0 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000023D6                            
000023D6                            loc_1B2E:
000023D6 72FF                       		moveq	#-1,d1
000023D8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000023DC 6700                       		beq.s	loc_1B38
000023DE 4441                       		neg.w	d1
000023E0                            
000023E0                            loc_1B38:
000023E0 3038 F632                  		move.w	($FFFFF632).w,d0
000023E4 0240 0003                  		andi.w	#3,d0
000023E8 D041                       		add.w	d1,d0
000023EA 0C40 0003                  		cmpi.w	#3,d0
000023EE 6500                       		bcs.s	loc_1B52
000023F0 3200                       		move.w	d0,d1
000023F2 7000                       		moveq	#0,d0
000023F4 4A41                       		tst.w	d1
000023F6 6A00                       		bpl.s	loc_1B52
000023F8 7002                       		moveq	#2,d0
000023FA                            
000023FA                            loc_1B52:
000023FA 31C0 F632                  		move.w	d0,($FFFFF632).w
000023FE D040                       		add.w	d0,d0
00002400 43F8 FB58                  		lea	($FFFFFB58).w,a1
00002404 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00002408 32B0 0004                  		move.w	4(a0,d0.w),(a1)
0000240C                            
0000240C                            locret_1B64:
0000240C 4E75                       		rts	
0000240E                            ; End of function PalCycle_SBZ
0000240E                            
0000240E                            ; ===========================================================================
0000240E                            Pal_TitleCyc:	incbin	pallet\c_title.bin
0000242E                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
0000244E                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
0000246E                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00002480                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00002492                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
000024FA                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
0000251E                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
0000253E                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
0000254E                            
0000254E                            Pal_SBZCycList:
0000254E                            	include "_inc\SBZ pallet script 1.asm"
0000254E                            ; ---------------------------------------------------------------------------
0000254E                            ; Scrap Brain Zone 1 pallet cycling script
0000254E                            ; ---------------------------------------------------------------------------
0000254E 0008                       	dc.w 8			; number of entries - 1
00002550 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00002552 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00002554 FB50                       	dc.w $FB50		; RAM address
00002556 0D08                       	dc.b $D, 8
00002558 0000                       	dc.w Pal_SBZCyc2
0000255A FB52                       	dc.w $FB52
0000255C 0E08                       	dc.b $E, 8
0000255E 0000                       	dc.w Pal_SBZCyc3
00002560 FB6E                       	dc.w $FB6E
00002562 0B08                       	dc.b $B, 8
00002564 0000                       	dc.w Pal_SBZCyc5
00002566 FB70                       	dc.w $FB70
00002568 0708                       	dc.b 7,	8
0000256A 0000                       	dc.w Pal_SBZCyc6
0000256C FB72                       	dc.w $FB72
0000256E 1C10                       	dc.b $1C, $10
00002570 0000                       	dc.w Pal_SBZCyc7
00002572 FB7E                       	dc.w $FB7E
00002574 0303                       	dc.b 3,	3
00002576 0000                       	dc.w Pal_SBZCyc8
00002578 FB78                       	dc.w $FB78
0000257A 0303                       	dc.b 3,	3
0000257C 0000                       	dc.w Pal_SBZCyc8+2
0000257E FB7A                       	dc.w $FB7A
00002580 0303                       	dc.b 3,	3
00002582 0000                       	dc.w Pal_SBZCyc8+4
00002584 FB7C                       	dc.w $FB7C
00002586                            	even
00002586                            	even
00002586                            
00002586                            Pal_SBZCycList2:
00002586                            	include "_inc\SBZ pallet script 2.asm"
00002586                            ; ---------------------------------------------------------------------------
00002586                            ; Scrap Brain Zone 2 pallet cycling script
00002586                            ; ---------------------------------------------------------------------------
00002586 0006                       	dc.w 6
00002588 0708                       	dc.b 7,	8
0000258A 0000                       	dc.w Pal_SBZCyc1
0000258C FB50                       	dc.w $FB50
0000258E 0D08                       	dc.b $D, 8
00002590 0000                       	dc.w Pal_SBZCyc2
00002592 FB52                       	dc.w $FB52
00002594 0908                       	dc.b 9,	8
00002596 0000                       	dc.w Pal_SBZCyc9
00002598 FB70                       	dc.w $FB70
0000259A 0708                       	dc.b 7,	8
0000259C 0000                       	dc.w Pal_SBZCyc6
0000259E FB72                       	dc.w $FB72
000025A0 0303                       	dc.b 3,	3
000025A2 0000                       	dc.w Pal_SBZCyc8
000025A4 FB78                       	dc.w $FB78
000025A6 0303                       	dc.b 3,	3
000025A8 0000                       	dc.w Pal_SBZCyc8+2
000025AA FB7A                       	dc.w $FB7A
000025AC 0303                       	dc.b 3,	3
000025AE 0000                       	dc.w Pal_SBZCyc8+4
000025B0 FB7C                       	dc.w $FB7C
000025B2                            	even
000025B2                            	even
000025B2                            
000025B2                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
000025C2                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
000025D2                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
000025E2                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
000025EE                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
000025FE                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
0000260E                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
0000262E                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00002638                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00002648                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00002654                            ; ---------------------------------------------------------------------------
00002654                            ; Subroutine to	fade out and fade in
00002654                            ; ---------------------------------------------------------------------------
00002654                            
00002654                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002654                            
00002654                            
00002654                            Pal_FadeTo:
00002654 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000265A                            
0000265A                            Pal_FadeTo2:
0000265A 7000                       		moveq	#0,d0
0000265C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002660 1038 F626                  		move.b	($FFFFF626).w,d0
00002664 D0C0                       		adda.w	d0,a0
00002666 7200                       		moveq	#0,d1
00002668 1038 F627                  		move.b	($FFFFF627).w,d0
0000266C                            
0000266C                            Pal_ToBlack:
0000266C 30C1                       		move.w	d1,(a0)+
0000266E 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00002672                            
00002672 383C 0015                  		move.w	#$15,d4
00002676 1A3C 0009                  		move.b	#9,d5
0000267A                            
0000267A                            loc_1DCE:
0000267A 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002680 6100 0000                  		bsr.w	DelayProgram
00002684 6100                       		bsr.s	Pal_FadeIn
00002686 6100 F83C                  		bsr.w	RunPLC_RAM
0000268A 51CC FFEE                  		dbf	d4,loc_1DCE
0000268E 4E75                       		rts	
00002690                            ; End of function Pal_FadeTo
00002690                            
00002690                            ; ---------------------------------------------------------------------------
00002690                            ; Pallet fade-in subroutine
00002690                            ; ---------------------------------------------------------------------------
00002690                            
00002690                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002690                            
00002690                            
00002690                            Pal_FadeIn:				; XREF: Pal_FadeTo
00002690 7000                       		moveq	#0,d0
00002692 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002696 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000269A 1038 F626                  		move.b	($FFFFF626).w,d0
0000269E D0C0                       		adda.w	d0,a0
000026A0 D2C0                       		adda.w	d0,a1
000026A2 1038 F627                  		move.b	($FFFFF627).w,d0
000026A6                            
000026A6                            loc_1DFA:
000026A6 6100                       		bsr.s	Pal_AddColor
000026A8 51C8 FFFC                  		dbf	d0,loc_1DFA
000026AC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000026B2 6600                       		bne.s	locret_1E24
000026B4 7000                       		moveq	#0,d0
000026B6 41F8 FA80                  		lea	($FFFFFA80).w,a0
000026BA 43F8 FA00                  		lea	($FFFFFA00).w,a1
000026BE 1038 F626                  		move.b	($FFFFF626).w,d0
000026C2 D0C0                       		adda.w	d0,a0
000026C4 D2C0                       		adda.w	d0,a1
000026C6 1038 F627                  		move.b	($FFFFF627).w,d0
000026CA                            
000026CA                            loc_1E1E:
000026CA 6100                       		bsr.s	Pal_AddColor
000026CC 51C8 FFFC                  		dbf	d0,loc_1E1E
000026D0                            
000026D0                            locret_1E24:
000026D0 4E75                       		rts	
000026D2                            ; End of function Pal_FadeIn
000026D2                            
000026D2                            
000026D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000026D2                            
000026D2                            
000026D2                            Pal_AddColor:				; XREF: Pal_FadeIn
000026D2 3419                       		move.w	(a1)+,d2
000026D4 3610                       		move.w	(a0),d3
000026D6 B642                       		cmp.w	d2,d3
000026D8 6700                       		beq.s	loc_1E4E
000026DA 3203                       		move.w	d3,d1
000026DC 0641 0200                  		addi.w	#$200,d1	; increase blue	value
000026E0 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
000026E2 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
000026E4 30C1                       		move.w	d1,(a0)+	; update pallet
000026E6 4E75                       		rts	
000026E8                            ; ===========================================================================
000026E8                            
000026E8                            Pal_AddGreen:				; XREF: Pal_AddColor
000026E8 3203                       		move.w	d3,d1
000026EA 0641 0020                  		addi.w	#$20,d1		; increase green value
000026EE B242                       		cmp.w	d2,d1
000026F0 6200                       		bhi.s	Pal_AddRed
000026F2 30C1                       		move.w	d1,(a0)+	; update pallet
000026F4 4E75                       		rts	
000026F6                            ; ===========================================================================
000026F6                            
000026F6                            Pal_AddRed:				; XREF: Pal_AddGreen
000026F6 5458                       		addq.w	#2,(a0)+	; increase red value
000026F8 4E75                       		rts	
000026FA                            ; ===========================================================================
000026FA                            
000026FA                            loc_1E4E:				; XREF: Pal_AddColor
000026FA 5448                       		addq.w	#2,a0
000026FC 4E75                       		rts	
000026FE                            ; End of function Pal_AddColor
000026FE                            
000026FE                            
000026FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000026FE                            
000026FE                            PalFadeOut:
000026FE                            Pal_FadeFrom:
000026FE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002704 383C 0015                  		move.w	#$15,d4
00002708                            loc_1E5C:
00002708 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000270E 6100 0000                  		bsr.w	DelayProgram
00002712 6100                       		bsr.s	Pal_FadeOut
00002714 6100 F7AE                  		bsr.w	RunPLC_RAM
00002718 51CC FFEE                  		dbf	d4,loc_1E5C
0000271C 4E75                       		rts	
0000271E                            ; End of function Pal_FadeFrom
0000271E                            
0000271E                            ; ---------------------------------------------------------------------------
0000271E                            ; Pallet fade-out subroutine
0000271E                            ; ---------------------------------------------------------------------------
0000271E                            
0000271E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000271E                            
0000271E                            
0000271E                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000271E 7000                       		moveq	#0,d0
00002720 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002724 1038 F626                  		move.b	($FFFFF626).w,d0
00002728 D0C0                       		adda.w	d0,a0
0000272A 1038 F627                  		move.b	($FFFFF627).w,d0
0000272E                            
0000272E                            loc_1E82:
0000272E 6100                       		bsr.s	Pal_DecColor
00002730 51C8 FFFC                  		dbf	d0,loc_1E82
00002734                            
00002734 7000                       		moveq	#0,d0
00002736 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000273A 1038 F626                  		move.b	($FFFFF626).w,d0
0000273E D0C0                       		adda.w	d0,a0
00002740 1038 F627                  		move.b	($FFFFF627).w,d0
00002744                            
00002744                            loc_1E98:
00002744 6100                       		bsr.s	Pal_DecColor
00002746 51C8 FFFC                  		dbf	d0,loc_1E98
0000274A 4E75                       		rts	
0000274C                            ; End of function Pal_FadeOut
0000274C                            
0000274C                            
0000274C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000274C                            
0000274C                            
0000274C                            Pal_DecColor:				; XREF: Pal_FadeOut
0000274C 3410                       		move.w	(a0),d2
0000274E 6700                       		beq.s	loc_1ECC
00002750 3202                       		move.w	d2,d1
00002752 0241 000E                  		andi.w	#$E,d1
00002756 6700                       		beq.s	Pal_DecGreen
00002758 5558                       		subq.w	#2,(a0)+	; decrease red value
0000275A 4E75                       		rts	
0000275C                            ; ===========================================================================
0000275C                            
0000275C                            Pal_DecGreen:				; XREF: Pal_DecColor
0000275C 3202                       		move.w	d2,d1
0000275E 0241 00E0                  		andi.w	#$E0,d1
00002762 6700                       		beq.s	Pal_DecBlue
00002764 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00002768 4E75                       		rts	
0000276A                            ; ===========================================================================
0000276A                            
0000276A                            Pal_DecBlue:				; XREF: Pal_DecGreen
0000276A 3202                       		move.w	d2,d1
0000276C 0241 0E00                  		andi.w	#$E00,d1
00002770 6700                       		beq.s	loc_1ECC
00002772 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00002776 4E75                       		rts	
00002778                            ; ===========================================================================
00002778                            
00002778                            loc_1ECC:				; XREF: Pal_DecColor
00002778 5448                       		addq.w	#2,a0
0000277A 4E75                       		rts	
0000277C                            ; End of function Pal_DecColor
0000277C                            
0000277C                            ; ---------------------------------------------------------------------------
0000277C                            ; Subroutine to	fill the pallet	with white (special stage)
0000277C                            ; ---------------------------------------------------------------------------
0000277C                            
0000277C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000277C                            
0000277C                            
0000277C                            Pal_MakeWhite:				; XREF: SpecialStage
0000277C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002782 7000                       		moveq	#0,d0
00002784 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002788 1038 F626                  		move.b	($FFFFF626).w,d0
0000278C D0C0                       		adda.w	d0,a0
0000278E 323C 0EEE                  		move.w	#$EEE,d1
00002792 1038 F627                  		move.b	($FFFFF627).w,d0
00002796                            
00002796                            PalWhite_Loop:
00002796 30C1                       		move.w	d1,(a0)+
00002798 51C8 FFFC                  		dbf	d0,PalWhite_Loop
0000279C 383C 0015                  		move.w	#$15,d4
000027A0                            
000027A0                            loc_1EF4:
000027A0 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000027A6 6100 0000                  		bsr.w	DelayProgram
000027AA 6100                       		bsr.s	Pal_WhiteToBlack
000027AC 6100 F716                  		bsr.w	RunPLC_RAM
000027B0 51CC FFEE                  		dbf	d4,loc_1EF4
000027B4 4E75                       		rts	
000027B6                            ; End of function Pal_MakeWhite
000027B6                            
000027B6                            
000027B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000027B6                            
000027B6                            
000027B6                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000027B6 7000                       		moveq	#0,d0
000027B8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000027BC 43F8 FB80                  		lea	($FFFFFB80).w,a1
000027C0 1038 F626                  		move.b	($FFFFF626).w,d0
000027C4 D0C0                       		adda.w	d0,a0
000027C6 D2C0                       		adda.w	d0,a1
000027C8 1038 F627                  		move.b	($FFFFF627).w,d0
000027CC                            
000027CC                            loc_1F20:
000027CC 6100                       		bsr.s	Pal_DecColor2
000027CE 51C8 FFFC                  		dbf	d0,loc_1F20
000027D2                            
000027D2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000027D8 6600                       		bne.s	locret_1F4A
000027DA 7000                       		moveq	#0,d0
000027DC 41F8 FA80                  		lea	($FFFFFA80).w,a0
000027E0 43F8 FA00                  		lea	($FFFFFA00).w,a1
000027E4 1038 F626                  		move.b	($FFFFF626).w,d0
000027E8 D0C0                       		adda.w	d0,a0
000027EA D2C0                       		adda.w	d0,a1
000027EC 1038 F627                  		move.b	($FFFFF627).w,d0
000027F0                            
000027F0                            loc_1F44:
000027F0 6100                       		bsr.s	Pal_DecColor2
000027F2 51C8 FFFC                  		dbf	d0,loc_1F44
000027F6                            
000027F6                            locret_1F4A:
000027F6 4E75                       		rts	
000027F8                            ; End of function Pal_WhiteToBlack
000027F8                            
000027F8                            
000027F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000027F8                            
000027F8                            
000027F8                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
000027F8 3419                       		move.w	(a1)+,d2
000027FA 3610                       		move.w	(a0),d3
000027FC B642                       		cmp.w	d2,d3
000027FE 6700                       		beq.s	loc_1F78
00002800 3203                       		move.w	d3,d1
00002802 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002806 6500                       		bcs.s	loc_1F64
00002808 B242                       		cmp.w	d2,d1
0000280A 6500                       		bcs.s	loc_1F64
0000280C 30C1                       		move.w	d1,(a0)+
0000280E 4E75                       		rts	
00002810                            ; ===========================================================================
00002810                            
00002810                            loc_1F64:				; XREF: Pal_DecColor2
00002810 3203                       		move.w	d3,d1
00002812 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002816 6500                       		bcs.s	loc_1F74
00002818 B242                       		cmp.w	d2,d1
0000281A 6500                       		bcs.s	loc_1F74
0000281C 30C1                       		move.w	d1,(a0)+
0000281E 4E75                       		rts	
00002820                            ; ===========================================================================
00002820                            
00002820                            loc_1F74:				; XREF: loc_1F64
00002820 5558                       		subq.w	#2,(a0)+	; decrease red value
00002822 4E75                       		rts	
00002824                            ; ===========================================================================
00002824                            
00002824                            loc_1F78:				; XREF: Pal_DecColor2
00002824 5448                       		addq.w	#2,a0
00002826 4E75                       		rts	
00002828                            ; End of function Pal_DecColor2
00002828                            
00002828                            ; ---------------------------------------------------------------------------
00002828                            ; Subroutine to	make a white flash when	you enter a special stage
00002828                            ; ---------------------------------------------------------------------------
00002828                            
00002828                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002828                            
00002828                            
00002828                            Pal_MakeFlash:				; XREF: SpecialStage
00002828 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000282E 383C 0015                  		move.w	#$15,d4
00002832                            
00002832                            loc_1F86:
00002832 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002838 6100 0000                  		bsr.w	DelayProgram
0000283C 6100                       		bsr.s	Pal_ToWhite
0000283E 6100 F684                  		bsr.w	RunPLC_RAM
00002842 51CC FFEE                  		dbf	d4,loc_1F86
00002846 4E75                       		rts	
00002848                            ; End of function Pal_MakeFlash
00002848                            
00002848                            
00002848                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002848                            
00002848                            
00002848                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002848 7000                       		moveq	#0,d0
0000284A 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000284E 1038 F626                  		move.b	($FFFFF626).w,d0
00002852 D0C0                       		adda.w	d0,a0
00002854 1038 F627                  		move.b	($FFFFF627).w,d0
00002858                            
00002858                            loc_1FAC:
00002858 6100                       		bsr.s	Pal_AddColor2
0000285A 51C8 FFFC                  		dbf	d0,loc_1FAC
0000285E 7000                       		moveq	#0,d0
00002860 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002864 1038 F626                  		move.b	($FFFFF626).w,d0
00002868 D0C0                       		adda.w	d0,a0
0000286A 1038 F627                  		move.b	($FFFFF627).w,d0
0000286E                            
0000286E                            loc_1FC2:
0000286E 6100                       		bsr.s	Pal_AddColor2
00002870 51C8 FFFC                  		dbf	d0,loc_1FC2
00002874 4E75                       		rts	
00002876                            ; End of function Pal_ToWhite
00002876                            
00002876                            
00002876                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002876                            
00002876                            
00002876                            Pal_AddColor2:				; XREF: Pal_ToWhite
00002876 3410                       		move.w	(a0),d2
00002878 0C42 0EEE                  		cmpi.w	#$EEE,d2
0000287C 6700                       		beq.s	loc_2006
0000287E 3202                       		move.w	d2,d1
00002880 0241 000E                  		andi.w	#$E,d1
00002884 0C41 000E                  		cmpi.w	#$E,d1
00002888 6700                       		beq.s	loc_1FE2
0000288A 5458                       		addq.w	#2,(a0)+	; increase red value
0000288C 4E75                       		rts	
0000288E                            ; ===========================================================================
0000288E                            
0000288E                            loc_1FE2:				; XREF: Pal_AddColor2
0000288E 3202                       		move.w	d2,d1
00002890 0241 00E0                  		andi.w	#$E0,d1
00002894 0C41 00E0                  		cmpi.w	#$E0,d1
00002898 6700                       		beq.s	loc_1FF4
0000289A 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
0000289E 4E75                       		rts	
000028A0                            ; ===========================================================================
000028A0                            
000028A0                            loc_1FF4:				; XREF: loc_1FE2
000028A0 3202                       		move.w	d2,d1
000028A2 0241 0E00                  		andi.w	#$E00,d1
000028A6 0C41 0E00                  		cmpi.w	#$E00,d1
000028AA 6700                       		beq.s	loc_2006
000028AC 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000028B0 4E75                       		rts	
000028B2                            ; ===========================================================================
000028B2                            
000028B2                            loc_2006:				; XREF: Pal_AddColor2
000028B2 5448                       		addq.w	#2,a0
000028B4 4E75                       		rts	
000028B6                            ; End of function Pal_AddColor2
000028B6                            
000028B6                            ; ---------------------------------------------------------------------------
000028B6                            ; Pallet cycling routine - Sega	logo
000028B6                            ; ---------------------------------------------------------------------------
000028B6                            
000028B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000028B6                            
000028B6                            
000028B6                            PalCycle_Sega:				; XREF: SegaScreen
000028B6 4A38 F635                  		tst.b	($FFFFF635).w
000028BA 6600                       		bne.s	loc_206A
000028BC 43F8 FB20                  		lea	($FFFFFB20).w,a1
000028C0 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
000028C6 7205                       		moveq	#5,d1
000028C8 3038 F632                  		move.w	($FFFFF632).w,d0
000028CC                            
000028CC                            loc_2020:
000028CC 6A00                       		bpl.s	loc_202A
000028CE 5448                       		addq.w	#2,a0
000028D0 5341                       		subq.w	#1,d1
000028D2 5440                       		addq.w	#2,d0
000028D4 60F6                       		bra.s	loc_2020
000028D6                            ; ===========================================================================
000028D6                            
000028D6                            loc_202A:				; XREF: PalCycle_Sega
000028D6 3400                       		move.w	d0,d2
000028D8 0242 001E                  		andi.w	#$1E,d2
000028DC 6600                       		bne.s	loc_2034
000028DE 5440                       		addq.w	#2,d0
000028E0                            
000028E0                            loc_2034:
000028E0 0C40 0060                  		cmpi.w	#$60,d0
000028E4 6400                       		bcc.s	loc_203E
000028E6 3398 0000                  		move.w	(a0)+,(a1,d0.w)
000028EA                            
000028EA                            loc_203E:
000028EA 5440                       		addq.w	#2,d0
000028EC 51C9 FFE8                  		dbf	d1,loc_202A
000028F0 3038 F632                  		move.w	($FFFFF632).w,d0
000028F4 5440                       		addq.w	#2,d0
000028F6 3400                       		move.w	d0,d2
000028F8 0242 001E                  		andi.w	#$1E,d2
000028FC 6600                       		bne.s	loc_2054
000028FE 5440                       		addq.w	#2,d0
00002900                            
00002900                            loc_2054:
00002900 0C40 0064                  		cmpi.w	#$64,d0
00002904 6D00                       		blt.s	loc_2062
00002906 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000290C 70F4                       		moveq	#-$C,d0
0000290E                            
0000290E                            loc_2062:
0000290E 31C0 F632                  		move.w	d0,($FFFFF632).w
00002912 7001                       		moveq	#1,d0
00002914 4E75                       		rts	
00002916                            ; ===========================================================================
00002916                            
00002916                            loc_206A:				; XREF: loc_202A
00002916 5338 F634                  		subq.b	#1,($FFFFF634).w
0000291A 6A00                       		bpl.s	loc_20BC
0000291C 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002922 3038 F632                  		move.w	($FFFFF632).w,d0
00002926 0640 000C                  		addi.w	#$C,d0
0000292A 0C40 0030                  		cmpi.w	#$30,d0
0000292E 6500                       		bcs.s	loc_2088
00002930 7000                       		moveq	#0,d0
00002932 4E75                       		rts	
00002934                            ; ===========================================================================
00002934                            
00002934                            loc_2088:				; XREF: loc_206A
00002934 31C0 F632                  		move.w	d0,($FFFFF632).w
00002938 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000293E 41F0 0000                  		lea	(a0,d0.w),a0
00002942 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002946 22D8                       		move.l	(a0)+,(a1)+
00002948 22D8                       		move.l	(a0)+,(a1)+
0000294A 3298                       		move.w	(a0)+,(a1)
0000294C 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002950 7000                       		moveq	#0,d0
00002952 722C                       		moveq	#$2C,d1
00002954                            
00002954                            loc_20A8:
00002954 3400                       		move.w	d0,d2
00002956 0242 001E                  		andi.w	#$1E,d2
0000295A 6600                       		bne.s	loc_20B2
0000295C 5440                       		addq.w	#2,d0
0000295E                            
0000295E                            loc_20B2:
0000295E 3390 0000                  		move.w	(a0),(a1,d0.w)
00002962 5440                       		addq.w	#2,d0
00002964 51C9 FFEE                  		dbf	d1,loc_20A8
00002968                            
00002968                            loc_20BC:
00002968 7001                       		moveq	#1,d0
0000296A 4E75                       		rts	
0000296C                            ; End of function PalCycle_Sega
0000296C                            
0000296C                            ; ===========================================================================
0000296C                            
0000296C                            Pal_Sega1:	incbin	pallet\sega1.bin
00002978                            Pal_Sega2:	incbin	pallet\sega2.bin
000029A8                            
000029A8                            ; ---------------------------------------------------------------------------
000029A8                            ; Subroutines to load pallets
000029A8                            ; ---------------------------------------------------------------------------
000029A8                            
000029A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029A8                            
000029A8                            
000029A8                            PalLoad1:
000029A8 43F9 0000 0000             		lea	(PalPointers).l,a1
000029AE E748                       		lsl.w	#3,d0
000029B0 D2C0                       		adda.w	d0,a1
000029B2 2459                       		movea.l	(a1)+,a2
000029B4 3659                       		movea.w	(a1)+,a3
000029B6 D6FC 0080                  		adda.w	#$80,a3
000029BA 3E19                       		move.w	(a1)+,d7
000029BC                            
000029BC                            loc_2110:
000029BC 26DA                       		move.l	(a2)+,(a3)+
000029BE 51CF FFFC                  		dbf	d7,loc_2110
000029C2 4E75                       		rts	
000029C4                            ; End of function PalLoad1
000029C4                            
000029C4                            
000029C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029C4                            
000029C4                            
000029C4                            PalLoad2:
000029C4 43F9 0000 0000             		lea	(PalPointers).l,a1
000029CA E748                       		lsl.w	#3,d0
000029CC D2C0                       		adda.w	d0,a1
000029CE 2459                       		movea.l	(a1)+,a2
000029D0 3659                       		movea.w	(a1)+,a3
000029D2 3E19                       		move.w	(a1)+,d7
000029D4                            
000029D4                            loc_2128:
000029D4 26DA                       		move.l	(a2)+,(a3)+
000029D6 51CF FFFC                  		dbf	d7,loc_2128
000029DA 4E75                       		rts	
000029DC                            ; End of function PalLoad2
000029DC                            
000029DC                            ; ---------------------------------------------------------------------------
000029DC                            ; Underwater pallet loading subroutine
000029DC                            ; ---------------------------------------------------------------------------
000029DC                            
000029DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029DC                            
000029DC                            
000029DC                            PalLoad3_Water:
000029DC 43F9 0000 0000             		lea	(PalPointers).l,a1
000029E2 E748                       		lsl.w	#3,d0
000029E4 D2C0                       		adda.w	d0,a1
000029E6 2459                       		movea.l	(a1)+,a2
000029E8 3659                       		movea.w	(a1)+,a3
000029EA 96FC 0080                  		suba.w	#$80,a3
000029EE 3E19                       		move.w	(a1)+,d7
000029F0                            
000029F0                            loc_2144:
000029F0 26DA                       		move.l	(a2)+,(a3)+
000029F2 51CF FFFC                  		dbf	d7,loc_2144
000029F6 4E75                       		rts	
000029F8                            ; End of function PalLoad3_Water
000029F8                            
000029F8                            
000029F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029F8                            
000029F8                            
000029F8                            PalLoad4_Water:
000029F8 43F9 0000 0000             		lea	(PalPointers).l,a1
000029FE E748                       		lsl.w	#3,d0
00002A00 D2C0                       		adda.w	d0,a1
00002A02 2459                       		movea.l	(a1)+,a2
00002A04 3659                       		movea.w	(a1)+,a3
00002A06 96FC 0100                  		suba.w	#$100,a3
00002A0A 3E19                       		move.w	(a1)+,d7
00002A0C                            
00002A0C                            loc_2160:
00002A0C 26DA                       		move.l	(a2)+,(a3)+
00002A0E 51CF FFFC                  		dbf	d7,loc_2160
00002A12 4E75                       		rts	
00002A14                            ; End of function PalLoad4_Water
00002A14                            
00002A14                            ; ===========================================================================
00002A14                            ; ---------------------------------------------------------------------------
00002A14                            ; Pallet pointers
00002A14                            ; ---------------------------------------------------------------------------
00002A14                            PalPointers:
00002A14                            	include "_inc\Pallet pointers.asm"
00002A14                            ; ---------------------------------------------------------------------------
00002A14                            ; Pallet pointers
00002A14                            ; ---------------------------------------------------------------------------
00002A14 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002A18 FB00                       	dc.w $FB00		; RAM address
00002A1A 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002A1C 0000 0000                  	dc.l Pal_Title
00002A20 FB00                       	dc.w $FB00
00002A22 001F                       	dc.w $1F
00002A24 0000 0000                  	dc.l Pal_LevelSel
00002A28 FB00                       	dc.w $FB00
00002A2A 001F                       	dc.w $1F
00002A2C 0000 0000                  	dc.l Pal_Sonic
00002A30 FB00                       	dc.w $FB00
00002A32 0007                       	dc.w 7
00002A34 0000 0000                  	dc.l Pal_GHZ
00002A38 FB20                       	dc.w $FB20
00002A3A 0017                       	dc.w $17
00002A3C 0000 0000                  	dc.l Pal_LZ
00002A40 FB20                       	dc.w $FB20
00002A42 0017                       	dc.w $17
00002A44 0000 0000                  	dc.l Pal_MZ
00002A48 FB20                       	dc.w $FB20
00002A4A 0017                       	dc.w $17
00002A4C 0000 0000                  	dc.l Pal_SLZ
00002A50 FB20                       	dc.w $FB20
00002A52 0017                       	dc.w $17
00002A54 0000 0000                  	dc.l Pal_SYZ
00002A58 FB20                       	dc.w $FB20
00002A5A 0017                       	dc.w $17
00002A5C 0000 0000                  	dc.l Pal_SBZ1
00002A60 FB20                       	dc.w $FB20
00002A62 0017                       	dc.w $17
00002A64 0000 0000                  	dc.l Pal_Special
00002A68 FB00                       	dc.w $FB00
00002A6A 001F                       	dc.w $1F
00002A6C 0000 0000                  	dc.l Pal_LZWater
00002A70 FB00                       	dc.w $FB00
00002A72 001F                       	dc.w $1F
00002A74 0000 0000                  	dc.l Pal_SBZ3
00002A78 FB20                       	dc.w $FB20
00002A7A 0017                       	dc.w $17
00002A7C 0000 0000                  	dc.l Pal_SBZ3Water
00002A80 FB00                       	dc.w $FB00
00002A82 001F                       	dc.w $1F
00002A84 0000 0000                  	dc.l Pal_SBZ2
00002A88 FB20                       	dc.w $FB20
00002A8A 0017                       	dc.w $17
00002A8C 0000 0000                  	dc.l Pal_LZSonWater
00002A90 FB00                       	dc.w $FB00
00002A92 0007                       	dc.w 7
00002A94 0000 0000                  	dc.l Pal_SBZ3SonWat
00002A98 FB00                       	dc.w $FB00
00002A9A 0007                       	dc.w 7
00002A9C 0000 0000                  	dc.l Pal_SpeResult
00002AA0 FB00                       	dc.w $FB00
00002AA2 001F                       	dc.w $1F
00002AA4 0000 0000                  	dc.l Pal_SpeContinue
00002AA8 FB00                       	dc.w $FB00
00002AAA 000F                       	dc.w $F
00002AAC 0000 0000                  	dc.l Pal_Ending
00002AB0 FB00                       	dc.w $FB00
00002AB2 001F                       	dc.w $1F
00002AB4 0000 0000                  	dc.l Pal_Idiot
00002AB8 FB20                       	dc.w $FB20
00002ABA 0007                       	dc.w 7
00002ABC 0000 0000                  	dc.l Pal_BHZ
00002AC0 FB20                       	dc.w $FB20
00002AC2 0017                       	dc.w $17
00002AC4 0000 0000                  	dc.l Pal_Gronic
00002AC8 FB00                       	dc.w $FB00
00002ACA 0007                       	dc.w 7
00002ACC 0000 0000                  	dc.l Pal_LZGroWater
00002AD0 FB00                       	dc.w $FB00
00002AD2 0007                       	dc.w 7
00002AD4 0000 0000                  	dc.l Pal_SBZ3GroWat
00002AD8 FB00                       	dc.w $FB00
00002ADA 0007                       	dc.w 7
00002ADC 0000 0000                  	dc.l Pal_Anakama
00002AE0 FB00                       	dc.w $FB00
00002AE2 0007                       	dc.w 7
00002AE2 0007                       	dc.w 7
00002AE4                            
00002AE4                            ; ---------------------------------------------------------------------------
00002AE4                            ; Pallet data
00002AE4                            ; ---------------------------------------------------------------------------
00002AE4                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002B64                            Pal_Title:	incbin	pallet\title.bin
00002BE4                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002C64                            Pal_Sonic:	incbin	pallet\sonic.bin
00002C84                            Pal_GHZ:	incbin	pallet\ghz.bin
00002CE4                            Pal_LZ:		incbin	pallet\lz.bin
00002D44                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002DC4                            Pal_MZ:		incbin	pallet\mz.bin
00002E24                            Pal_SLZ:	incbin	pallet\slz.bin
00002E84                            Pal_SYZ:	incbin	pallet\syz.bin
00002EE4                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002F44                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
00002FA4                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00003024                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00003084                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00003104                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00003124                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00003144                            Pal_BHZ:	incbin	pallet\bhz.bin
000031A4                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00003224                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00003264                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
000032E4                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00003304                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00003324                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00003344                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00003364                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
000033E4                            
000033E4                            ; ---------------------------------------------------------------------------
000033E4                            ; Subroutine to	delay the program by ($FFFFF62A) frames
000033E4                            ; ---------------------------------------------------------------------------
000033E4                            
000033E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033E4                            
000033E4                            VSync:
000033E4                            DelayProgram:				; XREF: PauseGame
000033E4 46FC 2300                  		move	#$2300,sr
000033E8                            
000033E8                            loc_29AC:
000033E8 4A38 F62A                  		tst.b	($FFFFF62A).w
000033EC 66FA                       		bne.s	loc_29AC
000033EE 4E75                       		rts	
000033F0                            ; End of function DelayProgram
000033F0                            
000033F0                            ; ---------------------------------------------------------------------------
000033F0                            ; Subroutine to	generate a pseudo-random number	in d0
000033F0                            ; ---------------------------------------------------------------------------
000033F0                            
000033F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033F0                            
000033F0                            CalcRandom: 
000033F0                            RandomNumber:
000033F0 2238 F636                  		move.l	($FFFFF636).w,d1
000033F4 6600                       		bne.s	loc_29C0
000033F6 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000033FC                            
000033FC                            loc_29C0:
000033FC 2001                       		move.l	d1,d0
000033FE E581                       		asl.l	#2,d1
00003400 D280                       		add.l	d0,d1
00003402 E781                       		asl.l	#3,d1
00003404 D280                       		add.l	d0,d1
00003406 3001                       		move.w	d1,d0
00003408 4841                       		swap	d1
0000340A D041                       		add.w	d1,d0
0000340C 3200                       		move.w	d0,d1
0000340E 4841                       		swap	d1
00003410 21C1 F636                  		move.l	d1,($FFFFF636).w
00003414 4E75                       		rts	
00003416                            ; End of function RandomNumber
00003416                            
00003416                            
00003416                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003416                            
00003416                            CalcSinCos:
00003416                            CalcSine:				; XREF: SS_BGAnimate; et al
00003416 0240 00FF                  		andi.w	#$FF,d0
0000341A D040                       		add.w	d0,d0
0000341C 0640 0080                  		addi.w	#$80,d0
00003420 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00003424 0440 0080                  		subi.w	#$80,d0
00003428 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
0000342C 4E75                       		rts	
0000342E                            ; End of function CalcSine
0000342E                            
0000342E                            ; ===========================================================================
0000342E                            
0000342E                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
000036AE                            
000036AE                            ; ===========================================================================
000036AE 48E7 6000                  		movem.l	d1-d2,-(sp)
000036B2 3200                       		move.w	d0,d1
000036B4 4841                       		swap	d1
000036B6 7000                       		moveq	#0,d0
000036B8 3200                       		move.w	d0,d1
000036BA 7407                       		moveq	#7,d2
000036BC                            
000036BC                            loc_2C80:
000036BC E599                       		rol.l	#2,d1
000036BE D040                       		add.w	d0,d0
000036C0 5240                       		addq.w	#1,d0
000036C2 9240                       		sub.w	d0,d1
000036C4 6400                       		bcc.s	loc_2C9A
000036C6 D240                       		add.w	d0,d1
000036C8 5340                       		subq.w	#1,d0
000036CA 51CA FFF0                  		dbf	d2,loc_2C80
000036CE E248                       		lsr.w	#1,d0
000036D0 4CDF 0006                  		movem.l	(sp)+,d1-d2
000036D4 4E75                       		rts	
000036D6                            ; ===========================================================================
000036D6                            
000036D6                            loc_2C9A:
000036D6 5240                       		addq.w	#1,d0
000036D8 51CA FFE2                  		dbf	d2,loc_2C80
000036DC E248                       		lsr.w	#1,d0
000036DE 4CDF 0006                  		movem.l	(sp)+,d1-d2
000036E2 4E75                       		rts	
000036E4                            
000036E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000036E4                            
000036E4                            
000036E4                            CalcAngle:
000036E4 48E7 1800                  		movem.l	d3-d4,-(sp)
000036E8 7600                       		moveq	#0,d3
000036EA 7800                       		moveq	#0,d4
000036EC 3601                       		move.w	d1,d3
000036EE 3802                       		move.w	d2,d4
000036F0 8843                       		or.w	d3,d4
000036F2 6700                       		beq.s	loc_2D04
000036F4 3802                       		move.w	d2,d4
000036F6 4A43                       		tst.w	d3
000036F8 6A00 0000                  		bpl.w	loc_2CC2
000036FC 4443                       		neg.w	d3
000036FE                            
000036FE                            loc_2CC2:
000036FE 4A44                       		tst.w	d4
00003700 6A00 0000                  		bpl.w	loc_2CCA
00003704 4444                       		neg.w	d4
00003706                            
00003706                            loc_2CCA:
00003706 B843                       		cmp.w	d3,d4
00003708 6400 0000                  		bcc.w	loc_2CDC
0000370C E18C                       		lsl.l	#8,d4
0000370E 88C3                       		divu.w	d3,d4
00003710 7000                       		moveq	#0,d0
00003712 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003716 6000                       		bra.s	loc_2CE6
00003718                            ; ===========================================================================
00003718                            
00003718                            loc_2CDC:				; XREF: CalcAngle
00003718 E18B                       		lsl.l	#8,d3
0000371A 86C4                       		divu.w	d4,d3
0000371C 7040                       		moveq	#$40,d0
0000371E 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003722                            
00003722                            loc_2CE6:
00003722 4A41                       		tst.w	d1
00003724 6A00 0000                  		bpl.w	loc_2CF2
00003728 4440                       		neg.w	d0
0000372A 0640 0080                  		addi.w	#$80,d0
0000372E                            
0000372E                            loc_2CF2:
0000372E 4A42                       		tst.w	d2
00003730 6A00 0000                  		bpl.w	loc_2CFE
00003734 4440                       		neg.w	d0
00003736 0640 0100                  		addi.w	#$100,d0
0000373A                            
0000373A                            loc_2CFE:
0000373A 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000373E 4E75                       		rts	
00003740                            ; ===========================================================================
00003740                            
00003740                            loc_2D04:				; XREF: CalcAngle
00003740 303C 0040                  		move.w	#$40,d0
00003744 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003748 4E75                       		rts	
0000374A                            ; End of function CalcAngle
0000374A                            
0000374A                            ; ===========================================================================
0000374A                            
0000374A                            Angle_Data:	incbin	misc\angles.bin
0000384C                            
0000384C                            ; ===========================================================================
0000384C                            
0000384C                            ; ---------------------------------------------------------------------------
0000384C                            ; Sega screen
0000384C                            ; ---------------------------------------------------------------------------
0000384C                            
0000384C                            SegaScreen:				; XREF: GameModeArray
0000384C 103C 00E4                  		move.b	#$E4,d0
00003850 6100 E428                  		bsr.w	PlaySound_Special ; stop music
00003854 6100 E660                  		bsr.w	ClearPLC
00003858 6100 EEA4                  		bsr.w	Pal_FadeFrom
0000385C 4DF9 00C0 0004             		lea	($C00004).l,a6
00003862 3CBC 8004                  		move.w	#$8004,(a6)
00003866 3CBC 8230                  		move.w	#$8230,(a6)
0000386A 3CBC 8407                  		move.w	#$8407,(a6)
0000386E 3CBC 8700                  		move.w	#$8700,(a6)
00003872 3CBC 8B00                  		move.w	#$8B00,(a6)
00003876 3CBC 8C81                  		move.w	#$8C81,(a6)
0000387A 4238 F64E                  		clr.b	($FFFFF64E).w
0000387E 46FC 2700                  		move	#$2700,sr
00003882 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003886 0200 00BF                  		andi.b	#$BF,d0
0000388A 33C0 00C0 0004             		move.w	d0,($C00004).l
00003890 6100 E30E                  		bsr.w	ClearScreen
00003894 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000389E 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000038A4 6100 E472                  		bsr.w	NemDec
000038A8 43F9 00FF 0000             		lea	($FF0000).l,a1
000038AE 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000038B4 303C 0000                  		move.w	#0,d0
000038B8 6100 E73C                  		bsr.w	EniDec
000038BC 43F9 00FF 0000             		lea	($FF0000).l,a1
000038C2 203C 6510 0003             		move.l	#$65100003,d0
000038C8 7217                       		moveq	#$17,d1
000038CA 7407                       		moveq	#7,d2
000038CC 6100 E42A                  		bsr.w	ShowVDPGraphics
000038D0 43F9 00FF 0180             		lea	($FF0180).l,a1
000038D6 203C 4000 0003             		move.l	#$40000003,d0
000038DC 7227                       		moveq	#$27,d1
000038DE 741B                       		moveq	#$1B,d2
000038E0 6100 E416                  		bsr.w	ShowVDPGraphics
000038E4 7000                       		moveq	#0,d0
000038E6 6100 F0DC                  		bsr.w	PalLoad2	; load Sega logo pallet
000038EA 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000038F0 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000038F6 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000038FC 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00003902 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003906 0000 0040                  		ori.b	#$40,d0
0000390A 33C0 00C0 0004             		move.w	d0,($C00004).l
00003910                            
00003910                            Sega_WaitPallet:
00003910 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003916 6100 FACC                  		bsr.w	DelayProgram
0000391A 6100 EF9A                  		bsr.w	PalCycle_Sega
0000391E 66F0                       		bne.s	Sega_WaitPallet
00003920                            
00003920 103C 00E1                  		move.b	#$E1,d0
00003924 6100 E354                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003928 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
0000392E 6100 FAB4                  		bsr.w	DelayProgram
00003932 31FC 01C2 F614                             move.w  #$1E+7*60,($FFFFF614).w         ; was $1E
00003938                            
00003938                            Sega_WaitEnd:
00003938 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000393E 6100 FAA4                  		bsr.w	DelayProgram
00003942 4A78 F614                  		tst.w	($FFFFF614).w
00003946 6700                       		beq.s	Sega_GotoTitle
00003948 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000394E 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003950                            
00003950                            Sega_GotoTitle:
00003950 11FC 0004 F600             		move.b	#$4,($FFFFF600).w ; go to title screen
00003956 4E75                       		rts	
00003958                            ; ===========================================================================
00003958                            
00003958                            ; ---------------------------------------------------------------------------
00003958                            ; Title	screen
00003958                            ; ---------------------------------------------------------------------------
00003958                            
00003958                            TitleScreen:				; XREF: GameModeArray
00003958 103C 00E4                  		move.b	#$E4,d0
0000395C 6100 E31C                  		bsr.w	PlaySound_Special ; stop music
00003960 6100 ED9C                  		bsr.w	Pal_FadeFrom
00003964 6100 E550                  		bsr.w	ClearPLC
00003968 46FC 2700                  		move	#$2700,sr
0000396C 6100 E2C0                  		bsr.w	SoundDriverLoad
00003970 4DF9 00C0 0004             		lea	($C00004).l,a6
00003976 3CBC 8004                  		move.w	#$8004,(a6)
0000397A 3CBC 8230                  		move.w	#$8230,(a6)
0000397E 3CBC 8407                  		move.w	#$8407,(a6)
00003982 3CBC 9001                  		move.w	#$9001,(a6)
00003986 3CBC 9200                  		move.w	#$9200,(a6)
0000398A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000398E 3CBC 8720                  		move.w	#$8720,(a6)
00003992 4238 F64E                  		clr.b	($FFFFF64E).w
00003996 6100 E208                  		bsr.w	ClearScreen
0000399A 43F8 D000                  		lea	($FFFFD000).w,a1
0000399E 7000                       		moveq	#0,d0
000039A0 323C 07FF                  		move.w	#$7FF,d1
000039A4                            
000039A4                            Title_ClrObjRam:
000039A4 22C0                       		move.l	d0,(a1)+
000039A6 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000039AA                            
000039AA                            ; gomer
000039AA 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000039B4 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
000039BA 6100 E35C                  		bsr.w	NemDec
000039BE 7003                       		moveq	#3,d0		; load Sonic's pallet
000039C0 6100 EFE6                  		bsr.w	PalLoad1
000039C4                            
000039C4 43F9 00FF 0000             		lea	($FF0000).l,a1
000039CA 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
000039D0 303C 0000                  		move.w	#0,d0
000039D4 6100 E620                  		bsr.w	EniDec
000039D8                            ; help how the fuck can i do this IT SHOWS NOTHING
000039D8 6100 EC7A                  		bsr.w	Pal_FadeTo
000039DC 43F9 00FF 0000             		lea	($FF0000).l,a1
000039E2 203C 4000 0003             		move.l	#$40000003,d0
000039E8 7227                       		moveq	#$27,d1
000039EA 741B                       		moveq	#$1B,d2
000039EC 6100 E30A                  		bsr.w	ShowVDPGraphics
000039F0                            
000039F0                            
000039F0 43F9 00FF 0000             		lea	($FF0000).l,a1
000039F6 203C 6000 0003             		move.l	#$60000003,d0
000039FC 7227                       		moveq	#$27,d1
000039FE 741B                       		moveq	#$1B,d2
00003A00                            
00003A00 6100 ECFC                  		bsr.w	Pal_FadeFrom
00003A04                            
00003A04                            
00003A04 6100 E19A                  		bsr.w	ClearScreen
00003A08 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003A12 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003A18 6100 E2FE                  		bsr.w	NemDec
00003A1C 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003A26 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003A2C 6100 E2EA                  		bsr.w	NemDec
00003A30 43F9 00FF 0000             		lea	($FF0000).l,a1
00003A36 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003A3C 303C 0000                  		move.w	#0,d0
00003A40 6100 E5B4                  		bsr.w	EniDec
00003A44 43F9 00FF 0000             		lea	($FF0000).l,a1
00003A4A 203C 4000 0003             		move.l	#$40000003,d0
00003A50 7227                       		moveq	#$27,d1
00003A52 741B                       		moveq	#$1B,d2
00003A54 6100 E2A2                  		bsr.w	ShowVDPGraphics
00003A58 6100 ECA4                  		bsr.w	Pal_FadeFrom
00003A5C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003A60 7000                       		moveq	#0,d0
00003A62 323C 001F                  		move.w	#$1F,d1
00003A66                            
00003A66                            
00003A66                            Title_ClrPallet:
00003A66 22C0                       		move.l	d0,(a1)+
00003A68 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003A6C                            
00003A6C 7003                       		moveq	#3,d0		; load Sonic's pallet
00003A6E 6100 EF38                  		bsr.w	PalLoad1
00003A72 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003A78 4EB9 0000 0000             		jsr	ObjectsLoad
00003A7E 4EB9 0000 0000             		jsr	BuildSprites
00003A84 6100 EBCE                  		bsr.w	Pal_FadeTo
00003A88 46FC 2700                  		move	#$2700,sr
00003A8C 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00003A96 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003A9C 6100 E27A                  		bsr.w	NemDec
00003AA0 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003AAA 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003AB0 6100 E266                  		bsr.w	NemDec
00003AB4 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003ABE 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003AC4 6100 E252                  		bsr.w	NemDec
00003AC8 4DF9 00C0 0000             		lea	($C00000).l,a6
00003ACE 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003AD6 4BF9 0000 0D66             		lea	(Art_Text).l,a5
00003ADC 323C 114C                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003AE0                            
00003AE0                            Title_LoadText:
00003AE0 2C9D                       		move.l	(a5)+,(a6)
00003AE2 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003AE6                            
00003AE6 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003AEC 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003AF2 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003AF8 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003AFE 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003B04 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003B0A 6100 0000                  		bsr.w	LevelSizeLoad
00003B0E 6100 0000                  		bsr.w	DeformBgLayer
00003B12                            
00003B12 43F8 B000                  		lea	($FFFFB000).w,a1
00003B16 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003B1C 303C 0000                  		move.w	#0,d0
00003B20 6100 E4D4                  		bsr.w	EniDec
00003B24 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003B2A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003B30 6100 E642                  		bsr.w	KosDec
00003B34 6100 0000                  		bsr.w	LevelLayoutLoad
00003B38                            
00003B38 46FC 2700                  		move	#$2700,sr
00003B3C 6100 E062                  		bsr.w	ClearScreen
00003B40 4BF9 00C0 0004             		lea	($C00004).l,a5
00003B46 4DF9 00C0 0000             		lea	($C00000).l,a6
00003B4C 47F8 F708                  		lea	($FFFFF708).w,a3
00003B50 49F8 A440                  		lea	($FFFFA440).w,a4
00003B54 343C 6000                  		move.w	#$6000,d2
00003B58 6100 0000                  		bsr.w	LoadTilesFromStart2
00003B5C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003B62 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003B68 303C 0000                  		move.w	#0,d0
00003B6C 6100 E488                  		bsr.w	EniDec
00003B70 43F9 00FF 0000             		lea	($FF0000).l,a1
00003B76 203C 4206 0003             		move.l	#$42060003,d0
00003B7C 7221                       		moveq	#$21,d1
00003B7E 7415                       		moveq	#$15,d2
00003B80 6100 E176                  		bsr.w	ShowVDPGraphics
00003B84 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003B8E 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
00003B94 6100 E182                  		bsr.w	NemDec
00003B98 7001                       		moveq	#1,d0		; load title screen pallet
00003B9A 6100 EE0C                  		bsr.w	PalLoad1
00003B9E 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003BA2 6100 E0D6                  		bsr.w	PlaySound_Special
00003BA6 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003BAC 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003BB2 43F8 D080                  		lea	($FFFFD080).w,a1
00003BB6 7000                       		moveq	#0,d0
00003BB8 323C 000F                  		move.w	#$F,d1
00003BBC                            
00003BBC                            Title_ClrObjRam2:
00003BBC 22C0                       		move.l	d0,(a1)+
00003BBE 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003BC2                            
00003BC2 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003BC8 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003BCE 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003BD4 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003BDA 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003BE0 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003BE6 4EB9 0000 0000             		jsr	ObjectsLoad
00003BEC 6100 0000                  		bsr.w	DeformBgLayer
00003BF0 4EB9 0000 0000             		jsr	BuildSprites
00003BF6 7000                       		moveq	#0,d0
00003BF8 6100 E290                  		bsr.w	LoadPLC2
00003BFC 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003C02 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003C08 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003C0C 0000 0040                  		ori.b	#$40,d0
00003C10 33C0 00C0 0004             		move.w	d0,($C00004).l
00003C16 6100 EA3C                  		bsr.w	Pal_FadeTo
00003C1A                            
00003C1A                            loc_317C:
00003C1A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003C20 6100 F7C2                  		bsr.w	DelayProgram
00003C24 4EB9 0000 0000             		jsr	ObjectsLoad
00003C2A 6100 0000                  		bsr.w	DeformBgLayer
00003C2E 4EB9 0000 0000             		jsr	BuildSprites
00003C34 6100 E608                  		bsr.w	PalCycle_Title
00003C38 6100 E28A                  		bsr.w	RunPLC_RAM
00003C3C 3038 D008                  		move.w	($FFFFD008).w,d0
00003C40 5440                       		addq.w	#2,d0
00003C42 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003C46 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003C4A 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003C4C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003C52 4E75                       		rts	
00003C54                            ; ===========================================================================
00003C54                            
00003C54                            Title_ChkRegion:
00003C54 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003C58 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003C5A 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003C60 6000                       		bra.s	Title_EnterCheat
00003C62                            ; ===========================================================================
00003C62                            
00003C62                            Title_RegionJ:				; XREF: Title_ChkRegion
00003C62 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003C68                            
00003C68                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003C68 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003C6C D0C0                       		adda.w	d0,a0
00003C6E 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003C72 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003C76 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003C78 6600                       		bne.s	loc_3210	; if not, branch
00003C7A 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003C7E 4A00                       		tst.b	d0
00003C80 6600                       		bne.s	Title_CountC
00003C82 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003C86 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003C8A E249                       		lsr.w	#1,d1
00003C8C 0241 0003                  		andi.w	#3,d1
00003C90 6700                       		beq.s	Title_PlayRing
00003C92 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003C96 6A00                       		bpl.s	Title_PlayRing
00003C98 7201                       		moveq	#1,d1
00003C9A 1181 1001                  		move.b	d1,1(a0,d1.w)
00003C9E                            
00003C9E                            Title_PlayRing:
00003C9E 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003CA4 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003CA8 6100 DFD0                  		bsr.w	PlaySound_Special
00003CAC 6000                       		bra.s	Title_CountC
00003CAE                            ; ===========================================================================
00003CAE                            
00003CAE                            loc_3210:				; XREF: Title_EnterCheat
00003CAE 4A00                       		tst.b	d0
00003CB0 6700                       		beq.s	Title_CountC
00003CB2 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003CB8 6700                       		beq.s	Title_CountC
00003CBA 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003CC0                            
00003CC0                            Title_CountC:
00003CC0 1038 F605                  		move.b	($FFFFF605).w,d0
00003CC4 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003CC8 6700                       		beq.s	loc_3230	; if not, branch
00003CCA 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003CCE                            
00003CCE                            loc_3230:
00003CCE 4A78 F614                  		tst.w	($FFFFF614).w
00003CD2 6700 0000                  		beq.w	Demo
00003CD6                            		; (temporary until we have an actual options screen)
00003CD6 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
00003CDC 6700                       		beq.s	@notc
00003CDE                            
00003CDE 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
00003CE2 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
00003CE8 6D00                       		blt.s	@notoverflow
00003CEA 11FC 0000 FFE8             		move.b	#0,(v_character).w
00003CF0                            	@notoverflow:
00003CF0 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003CF4 6100 DF84                  		bsr.w	PlaySound_Special
00003CF8                            	@notc:
00003CF8 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003CFE 6700 FF1A                  		beq.w	loc_317C	; if not, branch
00003D02                            
00003D02                            Title_ChkLevSel:
00003D02 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003D08 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003D0C                            		
00003D0C                            		
00003D0C 7002                       		moveq	#2,d0
00003D0E 6100 ECB4                  		bsr.w	PalLoad2	; load level select pallet
00003D12 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003D16 7000                       		moveq	#0,d0
00003D18 323C 00DF                  		move.w	#$DF,d1
00003D1C                            
00003D1C                            Title_ClrScroll:
00003D1C 22C0                       		move.l	d0,(a1)+
00003D1E 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003D22                            
00003D22 21C0 F616                  		move.l	d0,($FFFFF616).w
00003D26 46FC 2700                  		move	#$2700,sr
00003D2A 4DF9 00C0 0000             		lea	($C00000).l,a6
00003D30 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003D3A 323C 03FF                  		move.w	#$3FF,d1
00003D3E                            
00003D3E                            Title_ClrVram:
00003D3E 2C80                       		move.l	d0,(a6)
00003D40 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003D44                            
00003D44 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003D48 6700 0000                  		beq.w	GotoOptions	; if not, play level
00003D4C                            
00003D4C 6100 0000                  		bsr.w	LevSelTextLoad
00003D50                            		
00003D50                            		; sound test fix
00003D50 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003D54 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
00003D5A                            		
00003D5A 363C C65F                  		move.w	#$C680-$21,d3 ; selected
00003D5E 0C46 0014                  		cmpi.w	#$14,d6
00003D62 6700                       		beq.s	@issndtst
00003D64 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
00003D68                            	@issndtst:
00003D68 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
00003D6C 31C6 FF82                  		move.w	d6,($FFFFFF82).w
00003D70                            		
00003D70 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003D74 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003D7C                            		
00003D7C 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003D82 6700                       		beq.s	@issndtst2
00003D84                            		
00003D84 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
00003D8A 6100 0000                  		bsr.w	CStringSlop
00003D8E 6000                       		bra.s	LevelSelect
00003D90                            	@issndtst2:
00003D90 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003D96 6100 0000                  		bsr.w	CStringSlop
00003D9A                            		
00003D9A                            ; ---------------------------------------------------------------------------
00003D9A                            ; Level	Select
00003D9A                            ; ---------------------------------------------------------------------------
00003D9A                            LevelSelect:
00003D9A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003DA0 6100 F642                  		bsr.w	DelayProgram
00003DA4 6100 0000                  		bsr.w	LevSelControls
00003DA8 6100 E11A                  		bsr.w	RunPLC_RAM
00003DAC 4AB8 F680                  		tst.l	($FFFFF680).w
00003DB0 66E8                       		bne.s	LevelSelect
00003DB2 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w 	; is	A, B, C, or Start pressed?
00003DB8 67E0                       		beq.s	LevelSelect		; if not, branch
00003DBA                            
00003DBA 3038 FF82                  		move.w	($FFFFFF82).w,d0 	; d0 = current entry
00003DBE                            
00003DBE 0C40 0000                  		cmpi.w	#lsjackass,d0		; have you selected item $16 (jackass/beebush)
00003DC2 6600                       		bne.s	@waitbees		; if not, we're just waiting for the bees. 
00003DC4                            
00003DC4 11FC 0024 F600             		move.b	#$24,($FFFFF600).w 	; set screen	mode to	$24 BEEBUSH
00003DCA 4E75                       		rts	
00003DCC                            
00003DCC                            
00003DCC                            
00003DCC                            
00003DCC                            
00003DCC                            
00003DCC                            
00003DCC                            
00003DCC                            
00003DCC                            
00003DCC                            
00003DCC                            		; giggity
00003DCC                            	@waitbees:
00003DCC 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
00003DD0 6600                       		bne.s	@dont	; if not, dont blow this place up
00003DD2                            			
00003DD2 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
00003DD8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003DDE 6100 F604                  		bsr.w	DelayProgram
00003DE2                            	@dont:
00003DE2 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
00003DE6 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003DE8                            		
00003DE8 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
00003DEE 67AA                       		beq.s	LevelSelect	; if not, branch
00003DF0                            		
00003DF0 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
00003DF6 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
00003DF8                            		
00003DF8 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003DFC 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003E00                            		
00003E00 4EB9 0000 0000             		jsr		ShowNow_Playing
00003E06 6092                       		bra.s	LevelSelect
00003E08                            ; ===========================================================================
00003E08                            
00003E08                            LevSel_SEGA:				; XREF: LevelSelect
00003E08 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
00003E0E 4E75                       		rts	
00003E10                            ; ===========================================================================
00003E10                            
00003E10                            LevSel_Ending:				; XREF: LevelSelect
00003E10 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003E16 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003E1C 4E75                       		rts	
00003E1E                            ; ===========================================================================
00003E1E                            
00003E1E                            LevSel_Credits:				; XREF: LevelSelect
00003E1E 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003E24 103C 0091                  		move.b	#$91,d0
00003E28 6100 DE50                  		bsr.w	PlaySound_Special ; play credits music
00003E2C 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003E32 4E75                       		rts	
00003E34                            ; ===========================================================================
00003E34                            
00003E34                            LevSel_Level_SS:			; XREF: LevelSelect
00003E34 D040                       		add.w	d0,d0
00003E36 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003E3A 6B00 FF5E                  		bmi.w	LevelSelect
00003E3E 0C40 FFFF                  		cmpi.w	#$FFFF,d0	; check	if level is 0700 (Special Stage)
00003E42 6600                       		bne.s	LevSel_Level	; if not, branch
00003E44 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003E4A 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003E4E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003E54 7000                       		moveq	#0,d0
00003E56 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003E5A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003E5E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003E62 4E75                       		rts	
00003E64                            ; ===========================================================================
00003E64                            
00003E64                            LevSel_Level:				; XREF: LevSel_Level_SS
00003E64 0240 3FFF                  		andi.w	#$3FFF,d0
00003E68 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003E6C                            
00003E6C                            PlayLevel:				; XREF: ROM:00003246j ...
00003E6C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003E72 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003E78 7000                       		moveq	#0,d0
00003E7A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003E7E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003E82 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003E86 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003E8A 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003E8E 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003E92 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003E96 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003E9A 103C 00E0                  		move.b	#$E0,d0
00003E9E 6100 DDDA                  		bsr.w	PlaySound_Special ; fade out music
00003EA2 4E75                       		rts	
00003EA4                            ; ===========================================================================
00003EA4                            ; ---------------------------------------------------------------------------
00003EA4                            ; Level	select - level pointers
00003EA4                            ; ---------------------------------------------------------------------------
00003EA4                            LSelectPointers:
00003EA4 0000                       		dc.w $0000 ; crz
00003EA6 0001                       		dc.w $0001
00003EA8 0002                       		dc.w $0002
00003EAA 0100                       		dc.w $0100 ; ilfez
00003EAC 0101                       		dc.w $0101
00003EAE 0102                       		dc.w $0102
00003EB0 0200                       		dc.w $0200 ; mz
00003EB2 0201                       		dc.w $0201
00003EB4 0202                       		dc.w $0202
00003EB6 0300                       		dc.w $0300 ; dgrotz
00003EB8 0301                       		dc.w $0301 
00003EBA 0302                       		dc.w $0302 
00003EBC 0700                       		dc.w $0700 ; the other mz...
00003EBE 0701                       		dc.w $0701 
00003EC0 0702                       		dc.w $0702 
00003EC2 0400                       		dc.w $0400 ; tpfbz
00003EC4 0401                       		dc.w $0401
00003EC6 0402                       		dc.w $0402
00003EC8 0500                       		dc.w $0500 ; zzzzz
00003ECA 0501                       		dc.w $0501 
00003ECC 0103                       		dc.w $0103 
00003ECE 0502                       		dc.w $0502 ; fz
00003ED0 FFFF                       		dc.w $FFFF ; special
00003ED2 8000                       		dc.w $8000 ; sound test
00003ED4                            		even
00003ED4                            ; --------------------------------------
00003ED4                            ; ---------------------------------------------------------------------------
00003ED4                            ; Level	select codes
00003ED4                            ; ---------------------------------------------------------------------------
00003ED4                            LevelSelectCode_J:
00003ED4                            		incbin	misc\ls_jcode.bin
00003EDA                            		even
00003EDA                            
00003EDA                            LevelSelectCode_US:
00003EDA                            		incbin	misc\ls_ucode.bin
00003EE0                            		even
00003EE0                            ; ===========================================================================
00003EE0                            
00003EE0                            ; ---------------------------------------------------------------------------
00003EE0                            ; Demo mode
00003EE0                            ; ---------------------------------------------------------------------------
00003EE0                            
00003EE0                            Demo:					; XREF: TitleScreen
00003EE0 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003EE6                            
00003EE6                            loc_33B6:				; XREF: loc_33E4
00003EE6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003EEC 6100 F4F6                  		bsr.w	DelayProgram
00003EF0 6100 0000                  		bsr.w	DeformBgLayer
00003EF4 6100 E31E                  		bsr.w	PalCycle_Load
00003EF8 6100 DFCA                  		bsr.w	RunPLC_RAM
00003EFC 3038 D008                  		move.w	($FFFFD008).w,d0
00003F00 5440                       		addq.w	#2,d0
00003F02 31C0 D008                  		move.w	d0,($FFFFD008).w
00003F06 0C40 1C00                  		cmpi.w	#$1C00,d0
00003F0A 6500                       		bcs.s	loc_33E4
00003F0C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003F12 4E75                       		rts	
00003F14                            ; ===========================================================================
00003F14                            
00003F14                            loc_33E4:				; XREF: Demo
00003F14 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003F1A 6600 FDE6                  		bne.w	Title_ChkLevSel	; if yes, branch
00003F1E 4A78 F614                  		tst.w	($FFFFF614).w
00003F22 6600 FFC2                  		bne.w	loc_33B6
00003F26 103C 00E0                  		move.b	#$E0,d0
00003F2A 6100 DD4E                  		bsr.w	PlaySound_Special ; fade out music
00003F2E 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003F32 0240 0007                  		andi.w	#7,d0
00003F36 D040                       		add.w	d0,d0
00003F38 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003F3C 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003F40 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003F44 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003F4A 6500                       		bcs.s	loc_3422	; if yes, branch
00003F4C 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003F52                            
00003F52                            loc_3422:
00003F52 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003F58 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003F5E 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003F62 6600                       		bne.s	Demo_Level	; if not, branch
00003F64 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003F6A 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003F6E 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003F72                            
00003F72                            Demo_Level:
00003F72 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003F78 7000                       		moveq	#0,d0
00003F7A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003F7E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003F82 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003F86 4E75                       		rts	
00003F88                            ; ===========================================================================
00003F88                            ; ---------------------------------------------------------------------------
00003F88                            ; Levels used in demos
00003F88                            ; ---------------------------------------------------------------------------
00003F88                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003F90                            		even
00003F90                            
00003F90                            ; ---------------------------------------------------------------------------
00003F90                            ; Subroutine to	change what you're selecting in the level select
00003F90                            ; ---------------------------------------------------------------------------
00003F90                            
00003F90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F90                            
00003F90                            
00003F90                            LevSelControls:				; XREF: LevelSelect
00003F90 1238 F605                  		move.b	($FFFFF605).w,d1
00003F94 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003F98 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003F9A 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003F9E 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
00003FA2                            
00003FA2                            LevSel_UpDown:
00003FA2 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003FA8 1238 F604                  		move.b	($FFFFF604).w,d1
00003FAC 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003FB0 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
00003FB4 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003FB8 0801 0000                  		btst	#0,d1		; is up	pressed?
00003FBC 6700                       		beq.s	LevSel_Down	; if not, branch
00003FBE 5346                       		subq.w	#1,d6		; move up 1 selection
00003FC0 6400                       		bcc.s	LevSel_Down
00003FC2 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003FC4                            
00003FC4                            LevSel_Down:
00003FC4 0801 0001                  		btst	#1,d1		; is down pressed?
00003FC8 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003FCA 5246                       		addq.w	#1,d6		; move down 1 selection
00003FCC 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003FD0 6500                       		bcs.s	LevSel_Refresh
00003FD2 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003FD4 6000                       		bra.s	LevSel_Refresh
00003FD6                            		
00003FD6                            LevSel_LR:
00003FD6 0801 0002                  		btst	#2,d1		; is left pressed?
00003FDA 6700                       		beq.s	LevSel_Right	; if not, branch
00003FDC 0446 0000                  		sub.w	#lsrow2size,d6
00003FE0 64E2                       		bcc.s	LevSel_Down
00003FE2 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
00003FE6                            LevSel_Right:
00003FE6 0801 0003                  		btst	#3,d1		; is right pressed?
00003FEA 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003FEC 0646 0000                  		add.w	#lsrow1size,d6
00003FF0 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003FF4 6500                       		bcs.s	LevSel_Refresh
00003FF6 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003FFA                            ; ===========================================================================
00003FFA                            LevSel_Refresh:
00003FFA                            		
00003FFA 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003FFE 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00004002                            		
00004002 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00004008 6600                       		bne.s	@exitsndtest
0000400A                            		
0000400A 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
0000400E 43F9 0000 0000             		lea	(Controls_Normal).l,a1
00004014 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000401C 6100 0000                  		bsr.w	CStringSlop
00004020                            	@exitsndtest:
00004020                            	
00004020 363C C65F                  		move.w	#$C680-$21,d3
00004024 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00004028 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000402C                            		
0000402C 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
00004032 6600                       		bne.s	@entersndtest
00004034                            		
00004034 363C C65F                  		move.w	#$C680-$21,d3
00004038 43F9 0000 0000             		lea	(Controls_SND).l,a1
0000403E 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00004046 6100 0000                  		bsr.w	CStringSlop
0000404A                            	@entersndtest:
0000404A 4E75                       		rts	
0000404C                            		
0000404C                            LevSel_SndTest:				; XREF: LevSelControls
0000404C 1238 F605                  		move.b	($FFFFF605).w,d1
00004050 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
00004054 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004056 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
0000405C 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
00004060                            		
00004060 1038 FF84                  		move.b	($FFFFFF84).w,d0
00004064 0801 0002                  		btst	#2,d1		; is left pressed?
00004068 6700                       		beq.s	SndTest_Right	; if not, branch
0000406A 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
0000406C                            		; no need the fact it's a byte does the trick
0000406C                            
0000406C                            SndTest_Right:
0000406C 0801 0003                  		btst	#3,d1		; is right pressed?
00004070 6700                       		beq.s	SndTest_A	; if not, branch
00004072 5200                       		addq.b	#1,d0		; add 1	to sound test
00004074                            		; same here
00004074                            		
00004074                            SndTest_A:
00004074 0801 0006                  		btst	#6,d1		; is A pressed?
00004078 6700                       		beq.s	SndTest_B	; if not, branch
0000407A 5100                       		subq.b	#8,d0		; subtract $10 to sound test
0000407C 5100                       		subq.b	#8,d0
0000407E                            		
0000407E                            SndTest_B:
0000407E 0801 0004                  		btst	#4,d1		; is B pressed?
00004082 6700                       		beq.s	SndTest_Refresh	; if not, branch
00004084 5000                       		addq.b	#8,d0		; add $10 to sound test
00004086 5000                       		addq.b	#8,d0
00004088                            
00004088                            SndTest_Refresh:
00004088 363C C65F                  		move.w	#$C680-$21,d3
0000408C 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
00004090 6000 0000                  		bra.w	LevSelSndTest	; refresh text
00004094                            
00004094                            LevSel_NoMove:
00004094 4E75                       		rts	
00004096                            ; End of function LevSelControls
00004096                            
00004096                            ; ---------------------------------------------------------------------------
00004096                            ; Subroutine to load level select text
00004096                            ; ---------------------------------------------------------------------------
00004096                            
00004096                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004096                            
00004096                            LevSelTextLoad_loop:
00004096 2D44 0004                  		move.l	d4,4(a6)
0000409A 6100 0000                  		bsr.w	LevSel_ChgLine
0000409E 0684 0080 0000             		addi.l	#$800000,d4
000040A4 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000040A8 4E75                       		rts
000040AA                            LevSelTextLoad:				; XREF: TitleScreen
000040AA 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000040B0 4DF9 00C0 0000             		lea	($C00000).l,a6
000040B6 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000040BA 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000040C0                            		
000040C0 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000040C4 61D0                       		bsr.s	LevSelTextLoad_loop
000040C6                            		
000040C6                            		
000040C6 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
000040CC 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
000040D0 61C4                       		bsr.s	LevSelTextLoad_loop
000040D2 363C C65F                  		move.w	#$C680-$21,d3
000040D6                            		
000040D6                            LevSelHighlightCode:
000040D6 4DF9 00C0 0000             		lea	($C00000).l,a6
000040DC 7000                       		moveq	#0,d0
000040DE 3038 FF82                  		move.w	($FFFFFF82).w,d0
000040E2 3200                       		move.w	d0,d1
000040E4 283C 6086 0003             		move.l	#lsscrpos,d4
000040EA                            		
000040EA 0C40 0000                  		cmpi.w	#lsrow1size,d0
000040EE 6D00                       		blt.s	@notsecond
000040F0                            		
000040F0 0440 0000                  		sub.w	#lsrow1size,d0
000040F4 0684 0024 0000             		addi.l	#lsoff,d4
000040FA                            	@notsecond:
000040FA EF48                       		lsl.w	#7,d0
000040FC 4840                       		swap	d0
000040FE D880                       		add.l	d0,d4
00004100 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00004106 E749                       		lsl.w	#3,d1
00004108 D241                       		add.w	d1,d1
0000410A D2C1                       		adda.w	d1,a1
0000410C 2D44 0004                  		move.l	d4,4(a6)
00004110 6100 0000                  		bsr.w	LevSel_ChgLine
00004114 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
0000411A 6700                       		beq.s	LevSelSndTest
0000411C 4E75                       		rts
0000411E                            
0000411E                            LevSelSndTest:
0000411E 0643 0030                  		add.w	#$30,d3
00004122 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
0000412C 1038 FF84                  		move.b	($FFFFFF84).w,d0
00004130 1400                       		move.b	d0,d2
00004132 E808                       		lsr.b	#4,d0
00004134 6100 0000                  		bsr.w	LevSel_ChgSnd
00004138 1002                       		move.b	d2,d0
0000413A 6100 0000                  		bsr.w	LevSel_ChgSnd
0000413E 4E75                       		rts	
00004140                            ; End of function LevSelTextLoad
00004140                            
00004140                            
00004140                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004140                            
00004140                            
00004140                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00004140 0240 000F                  		andi.w	#$F,d0
00004144 0C00 000A                  		cmpi.b	#$A,d0
00004148 6500                       		bcs.s	loc_3580
0000414A 5E00                       		addi.b	#7,d0
0000414C                            
0000414C                            loc_3580:
0000414C D043                       		add.w	d3,d0
0000414E 3C80                       		move.w	d0,(a6)
00004150 4E75                       		rts	
00004152                            ; End of function LevSel_ChgSnd
00004152                            
00004152                            
00004152                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004152                            
00004152                            
00004152                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00004152 740F                       		moveq	#$10-1,d2		; number of characters per line
00004154                            
00004154                            @loop:
00004154 7000                       		moveq	#0,d0
00004156 1019                       		move.b	(a1)+,d0
00004158 0C00 0020                  		cmpi.b	#$20,d0
0000415C 6E00                       		bgt.s	@draw
0000415E 3CBC 0000                  		move.w	#0,(a6)
00004162 51CA FFF0                  		dbf	d2,@loop
00004166 4E75                       		rts	
00004168                            ; ===========================================================================
00004168                            
00004168                            @draw:				; XREF: LevSel_ChgLine
00004168 D043                       		add.w	d3,d0
0000416A 3C80                       		move.w	d0,(a6)
0000416C 51CA FFE6                  		dbf	d2,@loop
00004170 4E75                       		rts	
00004172                            ; End of function LevSel_ChgLine
00004172                            		
00004172                            CStringSlop_draw:
00004172 D043                       		add.w	d3,d0
00004174 3C80                       		move.w	d0,(a6)
00004176                            CStringSlop:				; XREF: LevSelTextLoad
00004176 7000                       		moveq	#0,d0
00004178 1019                       		move.b	(a1)+,d0
0000417A 0C00 0020                  		cmpi.b	#$20,d0
0000417E 6EF2                       		bgt.s	CStringSlop_draw
00004180                            		
00004180 0C00 0001                  		cmpi.b	#1,d0
00004184 6700                       		beq.s	@InsertSpaces
00004186 6500                       		blo.s	@end
00004188                            		
00004188 3CBC 0000                  		move.w	#0,(a6)
0000418C 60E8                       		bra.s	CStringSlop
0000418E                            	@end:
0000418E 4E75                       		rts
00004190                            	@InsertSpaces:
00004190 7000                       		moveq	#0,d0
00004192 1019                       		move.b	(a1)+,d0
00004194                            		
00004194                            	@insert:
00004194 3CBC 0000                  		move.w	#0,(a6)
00004198 51C8 FFFA                  		dbf.w	d0,@insert
0000419C 60D8                       		bra.s	CStringSlop
0000419E                            ; End of function LevSel_ChgLine
0000419E                            
0000419E                            ; ===========================================================================
0000419E                            ; ---------------------------------------------------------------------------
0000419E                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
0000419E                            ; ---------------------------------------------------------------------------
0000419E                            LevelMenuText:	
0000419E 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
000041AE 2020 2020 2020 2020 2020+          dc.b    "               2"
000041BE 2020 2020 2020 2020 2020+          dc.b    "               3"
000041CE 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
000041DE 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
000041EE 2020 2020 2020 2020 2020+          dc.b    "               3"
000041FE 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
0000420E 2020 2020 2020 2020 2020+          dc.b    "               2"
0000421E 2020 2020 2020 2020 2020+          dc.b    "               3"
0000422E 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
0000423E 2020 2020 2020 2020 2020+          dc.b    "               2"
0000424E 2020 2020 2020 2020 2020+          dc.b    "               3"
0000425E 4D41 4B4F 544F 2020 2020+          dc.b    "MAKOTO         1"
0000426E 2020 2020 2020 2020 2020+          dc.b    "               2"
0000427E 2020 2020 2020 2020 2020+          dc.b    "               3"
0000428E                            LMTSecondRow:
0000428E 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
0000429E 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
000042AE 2020 2020 2020 2020 2020+          dc.b    "               3"
000042BE 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
000042CE 2020 2020 2020 2020 2020+          dc.b    "               2"
000042DE 2020 2020 2020 2020 2020+          dc.b    "               3"
000042EE 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
000042FE 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
0000430E 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
0000431E 4652 4545 2057 4946 4920+  	dc.b	"FREE WIFI       "
0000432E 4F50 5449 4F4E 5320 4C41+  	dc.b	"OPTIONS LATER   "
0000433E 4A41 434B 4153 5320 2020+  	dc.b	"JACKASS         "
0000434E                            LMTSelectableEnd:
0000434E 4341 4E54 2054 4F55 4348+  	dc.b	"CANT TOUCH ME XD"
0000435E                            LMTEnd:
0000435E                            
0000435E                            Now_Playing:
0000435E 3E3E 3E4E 4F57 2050 4C41+  	dc.b	">>>NOW PLAYING ",0
0000436E                            	even
0000436E                            NP_Track:
0000436E 5452 4143 4B20 2400        	dc.b	"TRACK $",0
00004376                            	even
00004376                            NP_SFX:
00004376 534F 554E 4420 2400        	dc.b	"SOUND $",0
0000437E                            	even
0000437E                            
0000437E                            ShowNow_Playing:
0000437E 1C00                       		move.b	d0,d6
00004380 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00004384 43FA FFD8                  		lea	Now_Playing(pc),a1
00004388 4DF9 00C0 0000             		lea		($C00000).l,a6
0000438E 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00004396 6100 FDDE                  		bsr.w	CStringSlop
0000439A                            		
0000439A 43FA FFD2                  		lea	NP_Track(pc),a1
0000439E 0C06 00A0                  		cmpi.b	#$A0,d6
000043A2 6D00                       		blt.s	@track
000043A4                            		
000043A4 43FA FFD0                  		lea	NP_SFX(pc),a1
000043A8                            	@track:
000043A8 6100 FDCC                  		bsr.w	CStringSlop
000043AC                            		
000043AC 0643 0030                  		add.w	#$30,d3
000043B0 1006                       		move.b	d6,d0
000043B2 1400                       		move.b	d0,d2
000043B4 E808                       		lsr.b	#4,d0
000043B6 6100 FD88                  		bsr.w	LevSel_ChgSnd
000043BA 1002                       		move.b	d2,d0
000043BC 6100 FD82                  		bsr.w	LevSel_ChgSnd
000043C0 4E75                       		rts	
000043C2                            
000043C2                            ; 1 is insert spaces btw
000043C2                            Controls_Normal:
000043C2 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
000043CE                            		even		
000043CE                            Controls_SND:
000043CE 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
000043F4 00                         		even
000043F4                            		
000043F4                            OptionMenuText:	
000043F4 504C 4159 2054 4845 2047+  		dc.b    "PLAY THE GAME!!!"
00004404 4348 4152 4143 5445 5220+          dc.b    "CHARACTER       "
00004414                            OMTEnd:
00004414                            		
00004414                            ; ---------------------------------------------------------------------------
00004414                            ; Level	Select
00004414                            ; ---------------------------------------------------------------------------
00004414                            GotoOptions:
00004414 43F9 0000 43F4             		lea	(OptionMenuText).l,a1
0000441A 4DF9 00C0 0000             		lea	($C00000).l,a6
00004420 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00004424 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
0000442A                            		
0000442A 323C 0000                  		move.w	#optamm-1,d1		; number of lines of text (first row)
0000442E 6100 FC66                  		bsr.w	LevSelTextLoad_loop
00004432                            
00004432                            OptionsMenu:
00004432 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00004438 6100 EFAA                  		bsr.w	DelayProgram
0000443C 6100 0000                  		bsr.w	OptControls
00004440 6100 DA82                  		bsr.w	RunPLC_RAM
00004444 4AB8 F680                  		tst.l	($FFFFF680).w
00004448 66E8                       		bne.s	OptionsMenu
0000444A 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00004450 67E0                       		beq.s	OptionsMenu	; if not, branch
00004452 4E71                       		nop
00004454 60DC                       		bra.s	OptionsMenu
00004456                            		
00004456                            OptReturn:
00004456 4E75                       		rts
00004458                            OptControls:				; XREF: LevelSelect
00004458 1238 F605                  		move.b	($FFFFF605).w,d1
0000445C 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00004460 6600                       		bne.s	Opt_UpDown	; if yes, branch
00004462 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00004466 6AEE                       		bpl.s	OptReturn	; if time remains, branch
00004468                            Opt_UpDown:
00004468 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
0000446E 1238 F604                  		move.b	($FFFFF604).w,d1
00004472 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00004476 0801 0000                  		btst	#0,d1		; is up	pressed?
0000447A 6700                       		beq.s	Opt_Down	; if not, branch
0000447C 5346                       		subq.w	#1,d6		; move up 1 selection
0000447E 6400                       		bcc.s	Opt_Down
00004480 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00004482                            
00004482                            Opt_Down:
00004482 0801 0001                  		btst	#1,d1		; is down pressed?
00004486 6700                       		beq.s	Opt_Refresh	; if not, branch
00004488 5246                       		addq.w	#1,d6		; move down 1 selection
0000448A 0C46 0000                  		cmpi.w	#lsselectable+1,d6
0000448E 6500                       		bcs.s	Opt_Refresh
00004490 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00004492                            Opt_Refresh:
00004492                            		
00004492                            ; ---------------------------------------------------------------------------
00004492                            ; Music	playlist
00004492                            ; ---------------------------------------------------------------------------
00004492                            MusicList1:	incbin	misc\muslist1.bin
0000449A                            		even
0000449A                            MusicList2:	incbin	misc\muslist2.bin
000044A2                            		even
000044A2                            MusicList3:	incbin	misc\muslist3.bin
000044AA                            		even
000044AA                            MusicList4:	incbin	misc\muslist4.bin
000044B2                            		even
000044B2                            ; ===========================================================================
000044B2                            
000044B2                            ; ---------------------------------------------------------------------------
000044B2                            ; Level
000044B2                            ; ---------------------------------------------------------------------------
000044B2                            
000044B2                            Level:					; XREF: GameModeArray
000044B2 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
000044B8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044BC 6B00                       		bmi.s	loc_37B6
000044BE 103C 00E0                  		move.b	#$E0,d0
000044C2 6100 D7B6                  		bsr.w	PlaySound_Special ; fade out music
000044C6                            
000044C6                            loc_37B6:
000044C6 6100 D9EE                  		bsr.w	ClearPLC
000044CA 6100 E232                  		bsr.w	Pal_FadeFrom
000044CE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044D2 6B00                       		bmi.s	Level_ClrRam
000044D4 46FC 2700                  		move	#$2700,sr
000044D8 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000044E2 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000044E8 6100 D82E                  		bsr.w	NemDec
000044EC 46FC 2300                  		move	#$2300,sr
000044F0 7000                       		moveq	#0,d0
000044F2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000044F6 E948                       		lsl.w	#4,d0
000044F8 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000044FE 45F2 0000                  		lea	(a2,d0.w),a2
00004502 7000                       		moveq	#0,d0
00004504 1012                       		move.b	(a2),d0
00004506 6700                       		beq.s	loc_37FC
00004508 6100 D94E                  		bsr.w	LoadPLC		; load level patterns
0000450C                            
0000450C                            loc_37FC:
0000450C 7001                       		moveq	#1,d0
0000450E 6100 D948                  		bsr.w	LoadPLC		; load standard	patterns
00004512                            
00004512                            Level_ClrRam:
00004512 43F8 D000                  		lea	($FFFFD000).w,a1
00004516 7000                       		moveq	#0,d0
00004518 323C 07FF                  		move.w	#$7FF,d1
0000451C                            
0000451C                            Level_ClrObjRam:
0000451C 22C0                       		move.l	d0,(a1)+
0000451E 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00004522                            
00004522 43F8 F628                  		lea	($FFFFF628).w,a1
00004526 7000                       		moveq	#0,d0
00004528 323C 0015                  		move.w	#$15,d1
0000452C                            
0000452C                            Level_ClrVars:
0000452C 22C0                       		move.l	d0,(a1)+
0000452E 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00004532                            
00004532 43F8 F700                  		lea	($FFFFF700).w,a1
00004536 7000                       		moveq	#0,d0
00004538 323C 003F                  		move.w	#$3F,d1
0000453C                            
0000453C                            Level_ClrVars2:
0000453C 22C0                       		move.l	d0,(a1)+
0000453E 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00004542                            
00004542 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004546 7000                       		moveq	#0,d0
00004548 323C 0047                  		move.w	#$47,d1
0000454C                            
0000454C                            Level_ClrVars3:
0000454C 22C0                       		move.l	d0,(a1)+
0000454E 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00004552                            
00004552 46FC 2700                  		move	#$2700,sr
00004556 6100 D648                  		bsr.w	ClearScreen
0000455A 4DF9 00C0 0004             		lea	($C00004).l,a6
00004560 3CBC 8B03                  		move.w	#$8B03,(a6)
00004564 3CBC 8230                  		move.w	#$8230,(a6)
00004568 3CBC 8407                  		move.w	#$8407,(a6)
0000456C 3CBC 857C                  		move.w	#$857C,(a6)
00004570 3CBC 9001                  		move.w	#$9001,(a6)
00004574 3CBC 8004                  		move.w	#$8004,(a6)
00004578 3CBC 8720                  		move.w	#$8720,(a6)
0000457C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00004582 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00004586 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000458C 6600                       		bne.s	Level_LoadPal	; if not, branch
0000458E 3CBC 8014                  		move.w	#$8014,(a6)
00004592 7000                       		moveq	#0,d0
00004594 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004598 D040                       		add.w	d0,d0
0000459A 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
000045A0 3031 0000                  		move.w	(a1,d0.w),d0
000045A4 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
000045A8 31C0 F648                  		move.w	d0,($FFFFF648).w
000045AC 31C0 F64A                  		move.w	d0,($FFFFF64A).w
000045B0 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
000045B4 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
000045B8 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
000045BE 6000 0000                  		bra.w	Level_LoadPal
000045C2                            Player_Palette:
000045C2                            		; normal, lz, sbz, blank
000045C2 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
000045CA                            		
000045CA 0016 0017 0018 0000        		dc.w	22,23,24,0 ; Pal_Gronic 
000045D2 0019 0017 0018 0000        		dc.w	25,23,24,0 ; Pal_Anakama 
000045DA 0003 000F 0010 0000                dc.w	3,$F,$10,0 ; LimitedSonic 
000045E2                            
000045E2                            		; add more player palettes
000045E2                            Level_LoadPal:
000045E2 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000045E8 46FC 2300                  		move	#$2300,sr
000045EC                            
000045EC 7200                       		moveq	#0,d1
000045EE 1238 FFE8                  		move.b	(v_character),d1
000045F2 D241                       		add.w	d1,d1
000045F4 D241                       		add.w	d1,d1
000045F6 D241                       		add.w	d1,d1
000045F8 303B 10C8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
000045FC                            		
000045FC 6100 E3C6                  		bsr.w	PalLoad2	; load Sonic's pallet line
00004600 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004606 6600                       		bne.s	Level_GetBgm	; if not, branch
00004608 303B 10BA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
0000460C 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00004612 6600                       		bne.s	Level_WaterPal	; if not, branch
00004614 303B 10B0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00004618                            
00004618                            Level_WaterPal:
00004618 6100 E3C2                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
0000461C 4A38 FE30                  		tst.b	($FFFFFE30).w
00004620 6700                       		beq.s	Level_GetBgm
00004622 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00004628                            
00004628                            ; NineKode begins here - How to play different songs on different acts
00004628                             
00004628                            Level_GetBgm:
00004628 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000462C 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00004630 7000                       		moveq	#0,d0
00004632 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004636                             
00004636 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0000463C 6600                       		bne.s	Level_GetBgm2	; if not, branch
0000463E 43F9 0000 4492             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00004644 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00004646                             
00004646                            Level_GetBgm2:
00004646 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0000464C 6600                       		bne.s	Level_GetBgm3	; if not, branch
0000464E 43F9 0000 449A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00004654 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00004656                             
00004656                            Level_GetBgm3:
00004656 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0000465C 6600                       		bne.s	Level_GetBgm4	; if not, branch
0000465E 43F9 0000 44A2             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00004664 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00004666                             
00004666                            Level_GetBgm4:
00004666 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0000466C 6600                       		bne.s	Level_PlayBgm	; if not, branch
0000466E 43F9 0000 44AA             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00004674                             
00004674                            Level_PlayBgm:
00004674 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00004678 6100 D5FA                  		bsr.w	PlaySound	; play music
0000467C 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00004682                             
00004682                            ; NineKode ends here
00004682                            
00004682                            Level_TtlCard:
00004682 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004688 6100 ED5A                  		bsr.w	DelayProgram
0000468C 4EB9 0000 0000             		jsr	ObjectsLoad
00004692 4EB9 0000 0000             		jsr	BuildSprites
00004698 6100 D82A                  		bsr.w	RunPLC_RAM
0000469C 3038 D108                  		move.w	($FFFFD108).w,d0
000046A0 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
000046A4 66DC                       		bne.s	Level_TtlCard	; if not, branch
000046A6 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
000046AA 66D6                       		bne.s	Level_TtlCard	; if yes, branch
000046AC 4EB9 0000 0000             		jsr	Hud_Base
000046B2                            
000046B2                            loc_3946:
000046B2 7003                       		moveq	#3,d0
000046B4 6100 E2F2                  		bsr.w	PalLoad1	; load Sonic's pallet line
000046B8 6100 0000                  		bsr.w	LevelSizeLoad
000046BC 6100 0000                  		bsr.w	DeformBgLayer
000046C0 08F8 0002 F754             		bset	#2,($FFFFF754).w
000046C6 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
000046CA 6100 0000                  		bsr.w	LoadTilesFromStart
000046CE 4EB9 0000 0000             		jsr	FloorLog_Unk
000046D4 6100 0000                  		bsr.w	ColIndexLoad
000046D8 6100 0000                  		bsr.w	LZWaterEffects
000046DC 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000046E2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000046E6 6B00                       		bmi.s	Level_ChkDebug
000046E8 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000046EE                            
000046EE                            Level_ChkDebug:
000046EE 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000046F2 6700                       		beq.s	Level_ChkWater	; if not, branch
000046F4 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
000046FA 6700                       		beq.s	Level_ChkWater	; if not, branch
000046FC 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004702                            
00004702                            Level_ChkWater:
00004702 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00004708 31FC 0000 F604             		move.w	#0,($FFFFF604).w
0000470E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004714 6600                       		bne.s	Level_LoadObj	; if not, branch
00004716 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
0000471C 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00004722 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00004728 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
0000472E                            
0000472E                            Level_LoadObj:
0000472E 4EB9 0000 0000             		jsr	ObjPosLoad
00004734 4EB9 0000 0000             		jsr	ObjectsLoad
0000473A 4EB9 0000 0000             		jsr	BuildSprites
00004740 7000                       		moveq	#0,d0
00004742 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00004746 6600                       		bne.s	loc_39E8	; if yes, branch
00004748 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000474C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004750 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00004754                            
00004754                            loc_39E8:
00004754 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00004758 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
0000475C 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00004760 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00004764                            		; move.b	d0,($FFFFFE2F).w
00004764 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
0000476A 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000476E 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00004772 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00004776 11C0 FFF9                  		move.b	d0,($FFFFFFF9).w	; GMZ: Clear truth nuke flag
0000477A 6100 0000                  		bsr.w	OscillateNumInit
0000477E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004784 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
0000478A 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00004790 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004796 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
0000479C 7000                       		moveq	#0,d0
0000479E 1038 FE10                  		move.b	($FFFFFE10).w,d0
000047A2 E548                       		lsl.w	#2,d0
000047A4 2271 0000                  		movea.l	(a1,d0.w),a1
000047A8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000047AC 6A00                       		bpl.s	Level_Demo	; if yes, branch
000047AE 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000047B4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000047B8 5340                       		subq.w	#1,d0
000047BA E548                       		lsl.w	#2,d0
000047BC 2271 0000                  		movea.l	(a1,d0.w),a1
000047C0                            
000047C0                            Level_Demo:
000047C0 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000047C6 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
000047CA 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000047D0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000047D4 6A00                       		bpl.s	Level_ChkWaterPal
000047D6 31FC 021C F614             		move.w	#540,($FFFFF614).w
000047DC 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000047E2 6600                       		bne.s	Level_ChkWaterPal
000047E4 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000047EA                            
000047EA                            Level_ChkWaterPal:
000047EA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
000047F0 6600                       		bne.s	Level_Delay	; if not, branch
000047F2 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
000047F4 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
000047FA 6600                       		bne.s	Level_WaterPal2	; if not, branch
000047FC 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
000047FE                            
000047FE                            Level_WaterPal2:
000047FE 6100 E1F8                  		bsr.w	PalLoad4_Water
00004802                            
00004802                            Level_Delay:
00004802 323C 0003                  		move.w	#3,d1
00004806                            
00004806                            Level_DelayLoop:
00004806 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000480C 6100 EBD6                  		bsr.w	DelayProgram
00004810 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00004814                            
00004814 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
0000481A 6100 DE3E                  		bsr.w	Pal_FadeTo2
0000481E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004822 6B00                       		bmi.s	Level_ClrCardArt
00004824 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00004828 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
0000482C 5838 D124                  		addq.b	#4,($FFFFD124).w
00004830 5838 D164                  		addq.b	#4,($FFFFD164).w
00004834 6000                       		bra.s	Level_StartGame
00004836                            ; ===========================================================================
00004836                            
00004836                            Level_ClrCardArt:
00004836 7002                       		moveq	#2,d0
00004838 4EB9 0000 1E58             		jsr	(LoadPLC).l	; load explosion patterns
0000483E 7000                       		moveq	#0,d0
00004840 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004844 0640 0015                  		addi.w	#$15,d0
00004848 4EB9 0000 1E58             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
0000484E                            
0000484E                            Level_StartGame:
0000484E 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00004854                            
00004854                            ; ---------------------------------------------------------------------------
00004854                            ; Main level loop (when	all title card and loading sequences are finished)
00004854                            ; ---------------------------------------------------------------------------
00004854                            
00004854                            Level_MainLoop:
00004854 6100 D430                  		bsr.w	PauseGame
00004858 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000485E 6100 EB84                  		bsr.w	DelayProgram
00004862 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00004866 6100 0000                  		bsr.w	MoveSonicInDemo
0000486A 6100 0000                  		bsr.w	LZWaterEffects
0000486E 4EB9 0000 0000             		jsr	ObjectsLoad
00004874 4A78 FE08                  		tst.w	($FFFFFE08).w
00004878 6600                       		bne.s	loc_3B10
0000487A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004880 6400                       		bcc.s	loc_3B14
00004882                            
00004882                            loc_3B10:
00004882 6100 0000                  		bsr.w	DeformBgLayer
00004886                            
00004886                            loc_3B14:
00004886 4EB9 0000 0000             		jsr	BuildSprites
0000488C 4EB9 0000 0000             		jsr	ObjPosLoad
00004892 6100 D980                  		bsr.w	PalCycle_Load
00004896 6100 D62C                  		bsr.w	RunPLC_RAM
0000489A 6100 0000                  		bsr.w	OscillateNumDo
0000489E 6100 0000                  		bsr.w	ChangeRingFrame
000048A2 6100 0000                  		bsr.w	SignpostArtLoad
000048A6 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000048AC 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
000048AE 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
000048B2 6600 FBFE                  		bne.w	Level		; if yes, branch
000048B6 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000048BC 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000048C0 4E75                       		rts	
000048C2                            ; ===========================================================================
000048C2                            
000048C2                            Level_ChkDemo:				; XREF: Level_MainLoop
000048C2 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000048C6 6600                       		bne.s	Level_EndDemo	; if yes, branch
000048C8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000048CC 6700                       		beq.s	Level_EndDemo	; if not, branch
000048CE 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000048D4 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000048D8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000048DE 4E75                       		rts	
000048E0                            ; ===========================================================================
000048E0                            
000048E0                            Level_EndDemo:				; XREF: Level_ChkDemo
000048E0 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000048E6 6600                       		bne.s	loc_3B88	; if not, branch
000048E8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000048EE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000048F2 6A00                       		bpl.s	loc_3B88	; if yes, branch
000048F4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000048FA                            
000048FA                            loc_3B88:
000048FA 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00004900 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004906 4278 F794                  		clr.w	($FFFFF794).w
0000490A                            
0000490A                            loc_3B98:
0000490A 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004910 6100 EAD2                  		bsr.w	DelayProgram
00004914 6100 0000                  		bsr.w	MoveSonicInDemo
00004918 4EB9 0000 0000             		jsr	ObjectsLoad
0000491E 4EB9 0000 0000             		jsr	BuildSprites
00004924 4EB9 0000 0000             		jsr	ObjPosLoad
0000492A 5378 F794                  		subq.w	#1,($FFFFF794).w
0000492E 6A00                       		bpl.s	loc_3BC8
00004930 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004936 6100 DDE6                  		bsr.w	Pal_FadeOut
0000493A                            
0000493A                            loc_3BC8:
0000493A 4A78 F614                  		tst.w	($FFFFF614).w
0000493E 66CA                       		bne.s	loc_3B98
00004940 4E75                       		rts	
00004942                            ; ===========================================================================
00004942                            ; ---------------------------------------------------------------------------
00004942                            ; Subroutine to	do special water effects in Labyrinth Zone
00004942                            ; ---------------------------------------------------------------------------
00004942                            
00004942                            LZWaterEffects:				; XREF: Level
00004942 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004948 6600                       		bne.s	locret_3C28	; if not, branch
0000494A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004950 6400                       		bcc.s	LZMoveWater
00004952 6100 0000                  		bsr.w	LZWindTunnels
00004956 6100 0000                  		bsr.w	LZWaterSlides
0000495A 6100 0000                  		bsr.w	LZDynamicWater
0000495E                            
0000495E                            LZMoveWater:
0000495E 4238 F64E                  		clr.b	($FFFFF64E).w
00004962 7000                       		moveq	#0,d0
00004964 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004968 E248                       		lsr.w	#1,d0
0000496A D078 F648                  		add.w	($FFFFF648).w,d0
0000496E 31C0 F646                  		move.w	d0,($FFFFF646).w
00004972 3038 F646                  		move.w	($FFFFF646).w,d0
00004976 9078 F704                  		sub.w	($FFFFF704).w,d0
0000497A 6400                       		bcc.s	loc_3C1A
0000497C 4A40                       		tst.w	d0
0000497E 6A00                       		bpl.s	loc_3C1A
00004980 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00004986 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
0000498C                            
0000498C                            loc_3C1A:
0000498C 0C40 00DF                  		cmpi.w	#$DF,d0
00004990 6500                       		bcs.s	loc_3C24
00004992 303C 00DF                  		move.w	#$DF,d0
00004996                            
00004996                            loc_3C24:
00004996 11C0 F625                  		move.b	d0,($FFFFF625).w
0000499A                            
0000499A                            locret_3C28:
0000499A 4E75                       		rts	
0000499C                            ; ===========================================================================
0000499C                            ; ---------------------------------------------------------------------------
0000499C                            ; Labyrinth default water heights
0000499C                            ; ---------------------------------------------------------------------------
0000499C                            WaterHeight:	incbin	misc\lz_heigh.bin
000049A4                            		even
000049A4                            ; ===========================================================================
000049A4                            
000049A4                            ; ---------------------------------------------------------------------------
000049A4                            ; Labyrinth dynamic water routines
000049A4                            ; ---------------------------------------------------------------------------
000049A4                            
000049A4                            LZDynamicWater:				; XREF: LZWaterEffects
000049A4 7000                       		moveq	#0,d0
000049A6 1038 FE11                  		move.b	($FFFFFE11).w,d0
000049AA D040                       		add.w	d0,d0
000049AC 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000049B0 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000049B4 7200                       		moveq	#0,d1
000049B6 1238 F64C                  		move.b	($FFFFF64C).w,d1
000049BA 3038 F64A                  		move.w	($FFFFF64A).w,d0
000049BE 9078 F648                  		sub.w	($FFFFF648).w,d0
000049C2 6700                       		beq.s	locret_3C5A
000049C4 6400                       		bcc.s	loc_3C56
000049C6 4441                       		neg.w	d1
000049C8                            
000049C8                            loc_3C56:
000049C8 D378 F648                  		add.w	d1,($FFFFF648).w
000049CC                            
000049CC                            locret_3C5A:
000049CC 4E75                       		rts	
000049CE                            ; ===========================================================================
000049CE 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000049D0 0000                       		dc.w DynWater_LZ2-DynWater_Index
000049D2 0000                       		dc.w DynWater_LZ3-DynWater_Index
000049D4 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000049D6                            ; ===========================================================================
000049D6                            
000049D6                            DynWater_LZ1:				; XREF: DynWater_Index
000049D6 3038 F700                  		move.w	($FFFFF700).w,d0
000049DA 1438 F64D                  		move.b	($FFFFF64D).w,d2
000049DE 6600                       		bne.s	loc_3CD0
000049E0 323C 00B8                  		move.w	#$B8,d1
000049E4 0C40 0600                  		cmpi.w	#$600,d0
000049E8 6500                       		bcs.s	loc_3CB4
000049EA 323C 0108                  		move.w	#$108,d1
000049EE 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000049F4 6500                       		bcs.s	loc_3CBA
000049F6 0C40 0C00                  		cmpi.w	#$C00,d0
000049FA 6500                       		bcs.s	loc_3CB4
000049FC 323C 0318                  		move.w	#$318,d1
00004A00 0C40 1080                  		cmpi.w	#$1080,d0
00004A04 6500                       		bcs.s	loc_3CB4
00004A06 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00004A0C 323C 05C8                  		move.w	#$5C8,d1
00004A10 0C40 1380                  		cmpi.w	#$1380,d0
00004A14 6500                       		bcs.s	loc_3CB4
00004A16 323C 03A8                  		move.w	#$3A8,d1
00004A1A B278 F648                  		cmp.w	($FFFFF648).w,d1
00004A1E 6600                       		bne.s	loc_3CB4
00004A20 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004A26                            
00004A26                            loc_3CB4:
00004A26 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004A2A 4E75                       		rts	
00004A2C                            ; ===========================================================================
00004A2C                            
00004A2C                            loc_3CBA:				; XREF: DynWater_LZ1
00004A2C 0C40 0C80                  		cmpi.w	#$C80,d0
00004A30 65F4                       		bcs.s	loc_3CB4
00004A32 323C 00E8                  		move.w	#$E8,d1
00004A36 0C40 1500                  		cmpi.w	#$1500,d0
00004A3A 65EA                       		bcs.s	loc_3CB4
00004A3C 323C 0108                  		move.w	#$108,d1
00004A40 60E4                       		bra.s	loc_3CB4
00004A42                            ; ===========================================================================
00004A42                            
00004A42                            loc_3CD0:				; XREF: DynWater_LZ1
00004A42 5302                       		subq.b	#1,d2
00004A44 6600                       		bne.s	locret_3CF4
00004A46 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004A4C 6400                       		bcc.s	locret_3CF4
00004A4E 323C 03A8                  		move.w	#$3A8,d1
00004A52 0C40 1300                  		cmpi.w	#$1300,d0
00004A56 6500                       		bcs.s	loc_3CF0
00004A58 323C 0108                  		move.w	#$108,d1
00004A5C 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004A62                            
00004A62                            loc_3CF0:
00004A62 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004A66                            
00004A66                            locret_3CF4:
00004A66 4E75                       		rts	
00004A68                            ; ===========================================================================
00004A68                            
00004A68                            DynWater_LZ2:				; XREF: DynWater_Index
00004A68 3038 F700                  		move.w	($FFFFF700).w,d0
00004A6C 323C 0328                  		move.w	#$328,d1
00004A70 0C40 0500                  		cmpi.w	#$500,d0
00004A74 6500                       		bcs.s	loc_3D12
00004A76 323C 03C8                  		move.w	#$3C8,d1
00004A7A 0C40 0B00                  		cmpi.w	#$B00,d0
00004A7E 6500                       		bcs.s	loc_3D12
00004A80 323C 0428                  		move.w	#$428,d1
00004A84                            
00004A84                            loc_3D12:
00004A84 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004A88 4E75                       		rts	
00004A8A                            ; ===========================================================================
00004A8A                            
00004A8A                            DynWater_LZ3:				; XREF: DynWater_Index
00004A8A 3038 F700                  		move.w	($FFFFF700).w,d0
00004A8E 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004A92 6600                       		bne.s	loc_3D5E
00004A94 323C 0500                  		move.w	#$500,d1
00004A98 0C40 0600                  		cmpi.w	#$600,d0
00004A9C 6500                       		bcs.s	loc_3D54
00004A9E 0C40 1B00                  		cmpi.w	#$1B00,d0
00004AA2 6500                       		bcs.s	loc_3D54
00004AA4 323C 0850                  		move.w	#$850,d1
00004AA8                            
00004AA8                            loc_3D54:
00004AA8 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004AAC 31C1 F648                  		move.w	d1,($FFFFF648).w
00004AB0 4E75                       		rts	
00004AB2                            ; ===========================================================================
00004AB2                            
00004AB2                            loc_3D5E:				; XREF: DynWater_LZ3
00004AB2 5302                       		subq.b	#1,d2
00004AB4 6600                       		bne.s	loc_3DA8
00004AB6 323C 04C8                  		move.w	#$4C8,d1
00004ABA 0C40 0770                  		cmpi.w	#$770,d0
00004ABE 6500                       		bcs.s	loc_3DA2
00004AC0 323C 0308                  		move.w	#$308,d1
00004AC4 0C40 1400                  		cmpi.w	#$1400,d0
00004AC8 6500                       		bcs.s	loc_3DA2
00004ACA 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00004AD0 6700                       		beq.s	loc_3D8E
00004AD2 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004AD8 6400                       		bcc.s	loc_3D8E
00004ADA 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00004AE0 6400                       		bcc.s	loc_3DA2
00004AE2                            
00004AE2                            loc_3D8E:
00004AE2 323C 0508                  		move.w	#$508,d1
00004AE6 31C1 F648                  		move.w	d1,($FFFFF648).w
00004AEA 0C40 1770                  		cmpi.w	#$1770,d0
00004AEE 6500                       		bcs.s	loc_3DA2
00004AF0 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004AF6                            
00004AF6                            loc_3DA2:
00004AF6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004AFA 4E75                       		rts	
00004AFC                            ; ===========================================================================
00004AFC                            
00004AFC                            loc_3DA8:
00004AFC 5302                       		subq.b	#1,d2
00004AFE 6600                       		bne.s	loc_3DD2
00004B00 323C 0508                  		move.w	#$508,d1
00004B04 0C40 1860                  		cmpi.w	#$1860,d0
00004B08 6500                       		bcs.s	loc_3DCC
00004B0A 323C 0188                  		move.w	#$188,d1
00004B0E 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004B12 6400                       		bcc.s	loc_3DC6
00004B14 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004B18 6600                       		bne.s	loc_3DCC
00004B1A                            
00004B1A                            loc_3DC6:
00004B1A 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004B20                            
00004B20                            loc_3DCC:
00004B20 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004B24 4E75                       		rts	
00004B26                            ; ===========================================================================
00004B26                            
00004B26                            loc_3DD2:
00004B26 5302                       		subq.b	#1,d2
00004B28 6600                       		bne.s	loc_3E0E
00004B2A 323C 0188                  		move.w	#$188,d1
00004B2E 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004B32 6500                       		bcs.s	loc_3E04
00004B34 323C 0900                  		move.w	#$900,d1
00004B38 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004B3C 6500                       		bcs.s	loc_3E04
00004B3E 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004B44 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004B4A 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004B50 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004B56 4E75                       		rts	
00004B58                            ; ===========================================================================
00004B58                            
00004B58                            loc_3E04:
00004B58 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004B5C 31C1 F648                  		move.w	d1,($FFFFF648).w
00004B60 4E75                       		rts	
00004B62                            ; ===========================================================================
00004B62                            
00004B62                            loc_3E0E:
00004B62 0C40 1E00                  		cmpi.w	#$1E00,d0
00004B66 6500                       		bcs.s	locret_3E1A
00004B68 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004B6E                            
00004B6E                            locret_3E1A:
00004B6E 4E75                       		rts	
00004B70                            ; ===========================================================================
00004B70                            
00004B70                            DynWater_SBZ3:				; XREF: DynWater_Index
00004B70 323C 0228                  		move.w	#$228,d1
00004B74 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004B7A 6500                       		bcs.s	loc_3E2C
00004B7C 323C 04C8                  		move.w	#$4C8,d1
00004B80                            
00004B80                            loc_3E2C:
00004B80 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004B84 4E75                       		rts
00004B86                            
00004B86                            ; ---------------------------------------------------------------------------
00004B86                            ; Labyrinth Zone "wind tunnels"	subroutine
00004B86                            ; ---------------------------------------------------------------------------
00004B86                            
00004B86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B86                            
00004B86                            
00004B86                            LZWindTunnels:				; XREF: LZWaterEffects
00004B86 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004B8A 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004B8E 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004B94 7000                       		moveq	#0,d0
00004B96 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004B9A E748                       		lsl.w	#3,d0
00004B9C D4C0                       		adda.w	d0,a2
00004B9E 7200                       		moveq	#0,d1
00004BA0 4A38 FE11                  		tst.b	($FFFFFE11).w
00004BA4 6600                       		bne.s	loc_3E56
00004BA6 7201                       		moveq	#1,d1
00004BA8 514A                       		subq.w	#8,a2
00004BAA                            
00004BAA                            loc_3E56:
00004BAA 43F8 D000                  		lea	($FFFFD000).w,a1
00004BAE                            
00004BAE                            LZWind_Loop:
00004BAE 3029 0008                  		move.w	8(a1),d0
00004BB2 B052                       		cmp.w	(a2),d0
00004BB4 6500 0000                  		bcs.w	loc_3EF4
00004BB8 B06A 0004                  		cmp.w	4(a2),d0
00004BBC 6400 0000                  		bcc.w	loc_3EF4
00004BC0 3429 000C                  		move.w	$C(a1),d2
00004BC4 B46A 0002                  		cmp.w	2(a2),d2
00004BC8 6500                       		bcs.s	loc_3EF4
00004BCA B46A 0006                  		cmp.w	6(a2),d2
00004BCE 6400                       		bcc.s	loc_3EF4
00004BD0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004BD4 0200 003F                  		andi.b	#$3F,d0
00004BD8 6600                       		bne.s	loc_3E90
00004BDA 303C 00D0                  		move.w	#$D0,d0
00004BDE 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play rushing water sound
00004BE4                            
00004BE4                            loc_3E90:
00004BE4 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00004BE8 6600 0000                  		bne.w	locret_3F0A
00004BEC 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004BF2 6400                       		bcc.s	loc_3F06
00004BF4 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00004BFA 0440 0080                  		subi.w	#$80,d0
00004BFE B052                       		cmp.w	(a2),d0
00004C00 6400                       		bcc.s	LZWind_Move
00004C02 7002                       		moveq	#2,d0
00004C04 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004C0A 6600                       		bne.s	loc_3EBA
00004C0C 4440                       		neg.w	d0
00004C0E                            
00004C0E                            loc_3EBA:
00004C0E D169 000C                  		add.w	d0,$C(a1)
00004C12                            
00004C12                            LZWind_Move:
00004C12 5869 0008                  		addq.w	#4,8(a1)
00004C16 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004C1C 337C 0000 0012             		move.w	#0,$12(a1)
00004C22 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004C28 08E9 0001 0022             		bset	#1,$22(a1)
00004C2E 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004C34 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004C36 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004C3A                            
00004C3A                            LZWind_MoveDown:
00004C3A 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004C40 6700                       		beq.s	locret_3EF2	; if not, branch
00004C42 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004C46                            
00004C46                            locret_3EF2:
00004C46 4E75                       		rts	
00004C48                            ; ===========================================================================
00004C48                            
00004C48                            loc_3EF4:				; XREF: LZWindTunnels
00004C48 504A                       		addq.w	#8,a2
00004C4A 51C9 FF62                  		dbf	d1,LZWind_Loop
00004C4E 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004C52 6700                       		beq.s	locret_3F0A
00004C54 137C 0000 001C             		move.b	#0,$1C(a1)
00004C5A                            
00004C5A                            loc_3F06:
00004C5A 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004C5E                            
00004C5E                            locret_3F0A:
00004C5E 4E75                       		rts	
00004C60                            ; End of function LZWindTunnels
00004C60                            
00004C60                            ; ===========================================================================
00004C60 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004C68 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004C7A 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004C88                            					; XREF: LZWindTunnels
00004C88                            		even
00004C88                            
00004C88                            ; ---------------------------------------------------------------------------
00004C88                            ; Labyrinth Zone water slide subroutine
00004C88                            ; ---------------------------------------------------------------------------
00004C88                            
00004C88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C88                            
00004C88                            
00004C88                            LZWaterSlides:				; XREF: LZWaterEffects
00004C88 43F8 D000                  		lea	($FFFFD000).w,a1
00004C8C 0829 0001 0022             		btst	#1,$22(a1)
00004C92 6600                       		bne.s	loc_3F6A
00004C94 3029 000C                  		move.w	$C(a1),d0
00004C98 E248                       		lsr.w	#1,d0
00004C9A 0240 0380                  		andi.w	#$380,d0
00004C9E 1229 0008                  		move.b	8(a1),d1
00004CA2 0241 007F                  		andi.w	#$7F,d1
00004CA6 D041                       		add.w	d1,d0
00004CA8 45F8 A400                  		lea	($FFFFA400).w,a2
00004CAC 1032 0000                  		move.b	(a2,d0.w),d0
00004CB0 45FA 0000                  		lea	byte_3FCF(pc),a2
00004CB4 7206                       		moveq	#6,d1
00004CB6                            
00004CB6                            loc_3F62:
00004CB6 B022                       		cmp.b	-(a2),d0
00004CB8 57C9 FFFC                  		dbeq	d1,loc_3F62
00004CBC 6700                       		beq.s	LZSlide_Move
00004CBE                            
00004CBE                            loc_3F6A:
00004CBE 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00004CC2 6700                       		beq.s	locret_3F7A
00004CC4 337C 0005 003E             		move.w	#5,$3E(a1)
00004CCA 4238 F7CA                  		clr.b	($FFFFF7CA).w
00004CCE                            
00004CCE                            locret_3F7A:
00004CCE 4E75                       		rts	
00004CD0                            ; ===========================================================================
00004CD0                            
00004CD0                            LZSlide_Move:				; XREF: LZWaterSlides
00004CD0 0C41 0003                  		cmpi.w	#3,d1
00004CD4 6400                       		bcc.s	loc_3F84
00004CD6 4E71                       		nop	
00004CD8                            
00004CD8                            loc_3F84:
00004CD8 08A9 0000 0022             		bclr	#0,$22(a1)
00004CDE 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00004CE2 1340 0014                  		move.b	d0,$14(a1)
00004CE6 6A00                       		bpl.s	loc_3F9A
00004CE8 08E9 0000 0022             		bset	#0,$22(a1)
00004CEE                            
00004CEE                            loc_3F9A:
00004CEE 4229 0015                  		clr.b	$15(a1)
00004CF2 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00004CF8 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004CFE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004D02 0200 001F                  		andi.b	#$1F,d0
00004D06 6600                       		bne.s	locret_3FBE
00004D08 303C 00D0                  		move.w	#$D0,d0
00004D0C 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play water sound
00004D12                            
00004D12                            locret_3FBE:
00004D12 4E75                       		rts	
00004D14                            ; End of function LZWaterSlides
00004D14                            
00004D14                            ; ===========================================================================
00004D14 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004D23 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004D24                            		even
00004D24                            
00004D24                            ; ---------------------------------------------------------------------------
00004D24                            ; Subroutine to	move Sonic in demo mode
00004D24                            ; ---------------------------------------------------------------------------
00004D24                            
00004D24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D24                            
00004D24                            
00004D24                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004D24 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004D28 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004D2A 4E75                       		rts	
00004D2C                            ; ===========================================================================
00004D2C                            
00004D2C                            ; This is an unused subroutine for recording a demo
00004D2C                            
00004D2C                            MoveDemo_Record:
00004D2C 43F9 0008 0000             		lea	($80000).l,a1
00004D32 3038 F790                  		move.w	($FFFFF790).w,d0
00004D36 D2C0                       		adda.w	d0,a1
00004D38 1038 F604                  		move.b	($FFFFF604).w,d0
00004D3C B011                       		cmp.b	(a1),d0
00004D3E 6600                       		bne.s	loc_3FFA
00004D40 5229 0001                  		addq.b	#1,1(a1)
00004D44 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004D4A 6700                       		beq.s	loc_3FFA
00004D4C 4E75                       		rts	
00004D4E                            ; ===========================================================================
00004D4E                            
00004D4E                            loc_3FFA:				; XREF: MoveDemo_Record
00004D4E 1340 0002                  		move.b	d0,2(a1)
00004D52 137C 0000 0003             		move.b	#0,3(a1)
00004D58 5478 F790                  		addq.w	#2,($FFFFF790).w
00004D5C 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004D62 4E75                       		rts	
00004D64                            ; ===========================================================================
00004D64                            
00004D64                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004D64 4A38 F604                  		tst.b	($FFFFF604).w
00004D68 6A00                       		bpl.s	loc_4022
00004D6A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004D6E 6B00                       		bmi.s	loc_4022
00004D70 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004D76                            
00004D76                            loc_4022:
00004D76 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004D7C 7000                       		moveq	#0,d0
00004D7E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004D82 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004D88 6600                       		bne.s	loc_4038
00004D8A 7006                       		moveq	#6,d0
00004D8C                            
00004D8C                            loc_4038:
00004D8C E548                       		lsl.w	#2,d0
00004D8E 2271 0000                  		movea.l	(a1,d0.w),a1
00004D92 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004D96 6A00                       		bpl.s	loc_4056
00004D98 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004D9E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004DA2 5340                       		subq.w	#1,d0
00004DA4 E548                       		lsl.w	#2,d0
00004DA6 2271 0000                  		movea.l	(a1,d0.w),a1
00004DAA                            
00004DAA                            loc_4056:
00004DAA 3038 F790                  		move.w	($FFFFF790).w,d0
00004DAE D2C0                       		adda.w	d0,a1
00004DB0 1011                       		move.b	(a1),d0
00004DB2 41F8 F604                  		lea	($FFFFF604).w,a0
00004DB6 1200                       		move.b	d0,d1
00004DB8 1410                       		move.b	(a0),d2
00004DBA B500                       		eor.b	d2,d0
00004DBC 10C1                       		move.b	d1,(a0)+
00004DBE C001                       		and.b	d1,d0
00004DC0 10C0                       		move.b	d0,(a0)+
00004DC2 5338 F792                  		subq.b	#1,($FFFFF792).w
00004DC6 6400                       		bcc.s	locret_407E
00004DC8 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004DCE 5478 F790                  		addq.w	#2,($FFFFF790).w
00004DD2                            
00004DD2                            locret_407E:
00004DD2 4E75                       		rts	
00004DD4                            ; End of function MoveSonicInDemo
00004DD4                            
00004DD4                            ; ===========================================================================
00004DD4                            ; ---------------------------------------------------------------------------
00004DD4                            ; Demo sequence	pointers
00004DD4                            ; ---------------------------------------------------------------------------
00004DD4                            Demo_Index:
00004DD4                            	include "_inc\Demo pointers for intro.asm"
00004DD4                            ; ---------------------------------------------------------------------------
00004DD4                            ; Demo sequence	pointers
00004DD4                            ; ---------------------------------------------------------------------------
00004DD4 0000 0000                  	dc.l Demo_GHZ
00004DD8 0000 0000                  	dc.l Demo_GHZ
00004DDC 0000 0000                  	dc.l Demo_MZ
00004DE0 0000 0000                  	dc.l Demo_MZ
00004DE4 0000 0000                  	dc.l Demo_SYZ
00004DE8 0000 0000                  	dc.l Demo_SYZ
00004DEC 0000 0000                  	dc.l Demo_SS
00004DF0 0000 0000                  	dc.l Demo_SS
00004DF0 0000 0000                  	dc.l Demo_SS
00004DF4                            
00004DF4                            Demo_EndIndex:
00004DF4                            	include "_inc\Demo pointers for ending.asm"
00004DF4                            ; ---------------------------------------------------------------------------
00004DF4                            ; Demo (ending) sequence pointers
00004DF4                            ; ---------------------------------------------------------------------------
00004DF4 0000 0000                  	dc.l Demo_EndGHZ1
00004DF8 0000 0000                  	dc.l Demo_EndMZ
00004DFC 0000 0000                  	dc.l Demo_EndSYZ
00004E00 0000 0000                  	dc.l Demo_EndLZ
00004E04 0000 0000                  	dc.l Demo_EndSLZ
00004E08 0000 0000                  	dc.l Demo_EndSBZ1
00004E0C 0000 0000                  	dc.l Demo_EndSBZ2
00004E10 0000 0000                  	dc.l Demo_EndGHZ2
00004E10 0000 0000                  	dc.l Demo_EndGHZ2
00004E14                            
00004E14 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004E24 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004E34 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004E44                            		even
00004E44                            
00004E44                            ; ---------------------------------------------------------------------------
00004E44                            ; Collision index loading subroutine
00004E44                            ; ---------------------------------------------------------------------------
00004E44                            
00004E44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E44                            
00004E44                            
00004E44                            ColIndexLoad:				; XREF: Level
00004E44 7000                       		moveq	#0,d0
00004E46 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004E4A E548                       		lsl.w	#2,d0
00004E4C 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004E52 4E75                       		rts	
00004E54                            ; End of function ColIndexLoad
00004E54                            
00004E54                            ; ===========================================================================
00004E54                            ; ---------------------------------------------------------------------------
00004E54                            ; Collision index pointers
00004E54                            ; ---------------------------------------------------------------------------
00004E54                            ColPointers:
00004E54                            	include "_inc\Collision index pointers.asm"
00004E54                            ; ---------------------------------------------------------------------------
00004E54                            ; Collision index pointers
00004E54                            ; ---------------------------------------------------------------------------
00004E54 0000 0000                  	dc.l Col_GHZ
00004E58 0000 0000                  	dc.l Col_LZ
00004E5C 0000 0000                  	dc.l Col_MZ
00004E60 0000 0000                  	dc.l Col_SLZ
00004E64 0000 0000                  	dc.l Col_SYZ
00004E68 0000 0000                  	dc.l Col_SBZ
00004E6C 0000 0000                  	dc.l Col_GHZ ; this is the ending just so it does not fuck up
00004E70 0000 0000                  	dc.l Col_BHZ
00004E70 0000 0000                  	dc.l Col_BHZ
00004E74                            
00004E74                            ; ---------------------------------------------------------------------------
00004E74                            ; Oscillating number subroutine
00004E74                            ; ---------------------------------------------------------------------------
00004E74                            
00004E74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E74                            
00004E74                            
00004E74                            OscillateNumInit:			; XREF: Level
00004E74 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004E78 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004E7E 7220                       		moveq	#$20,d1
00004E80                            
00004E80                            Osc_Loop:
00004E80 32DA                       		move.w	(a2)+,(a1)+
00004E82 51C9 FFFC                  		dbf	d1,Osc_Loop
00004E86 4E75                       		rts	
00004E88                            ; End of function OscillateNumInit
00004E88                            
00004E88                            ; ===========================================================================
00004E88 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004E8C 0000 0080                  		dc.w 0,	$80
00004E90 0000 0080                  		dc.w 0,	$80
00004E94 0000 0080                  		dc.w 0,	$80
00004E98 0000 0080                  		dc.w 0,	$80
00004E9C 0000 0080                  		dc.w 0,	$80
00004EA0 0000 0080                  		dc.w 0,	$80
00004EA4 0000 0080                  		dc.w 0,	$80
00004EA8 0000 0080                  		dc.w 0,	$80
00004EAC 0000 50F0                  		dc.w 0,	$50F0
00004EB0 011E 2080                  		dc.w $11E, $2080
00004EB4 00B4 3080                  		dc.w $B4, $3080
00004EB8 010E 5080                  		dc.w $10E, $5080
00004EBC 01C2 7080                  		dc.w $1C2, $7080
00004EC0 0276 0080                  		dc.w $276, $80
00004EC4 0000 0080                  		dc.w 0,	$80
00004EC8 0000                       		dc.w 0
00004ECA                            		even
00004ECA                            
00004ECA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004ECA                            
00004ECA                            
00004ECA                            OscillateNumDo:				; XREF: Level
00004ECA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004ED0 6400                       		bcc.s	locret_41C4
00004ED2 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004ED6 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004EDC 3619                       		move.w	(a1)+,d3
00004EDE 720F                       		moveq	#$F,d1
00004EE0                            
00004EE0                            loc_4184:
00004EE0 341A                       		move.w	(a2)+,d2
00004EE2 381A                       		move.w	(a2)+,d4
00004EE4 0303                       		btst	d1,d3
00004EE6 6600                       		bne.s	loc_41A4
00004EE8 3029 0002                  		move.w	2(a1),d0
00004EEC D042                       		add.w	d2,d0
00004EEE 3340 0002                  		move.w	d0,2(a1)
00004EF2 D151                       		add.w	d0,0(a1)
00004EF4 B811                       		cmp.b	0(a1),d4
00004EF6 6200                       		bhi.s	loc_41BA
00004EF8 03C3                       		bset	d1,d3
00004EFA 6000                       		bra.s	loc_41BA
00004EFC                            ; ===========================================================================
00004EFC                            
00004EFC                            loc_41A4:				; XREF: OscillateNumDo
00004EFC 3029 0002                  		move.w	2(a1),d0
00004F00 9042                       		sub.w	d2,d0
00004F02 3340 0002                  		move.w	d0,2(a1)
00004F06 D151                       		add.w	d0,0(a1)
00004F08 B811                       		cmp.b	0(a1),d4
00004F0A 6300                       		bls.s	loc_41BA
00004F0C 0383                       		bclr	d1,d3
00004F0E                            
00004F0E                            loc_41BA:
00004F0E 5849                       		addq.w	#4,a1
00004F10 51C9 FFCE                  		dbf	d1,loc_4184
00004F14 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004F18                            
00004F18                            locret_41C4:
00004F18 4E75                       		rts	
00004F1A                            ; End of function OscillateNumDo
00004F1A                            
00004F1A                            ; ===========================================================================
00004F1A 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004F1E 0002 0018                  		dc.w 2,	$18
00004F22 0002 0020                  		dc.w 2,	$20
00004F26 0002 0030                  		dc.w 2,	$30
00004F2A 0004 0020                  		dc.w 4,	$20
00004F2E 0008 0008                  		dc.w 8,	8
00004F32 0008 0040                  		dc.w 8,	$40
00004F36 0004 0040                  		dc.w 4,	$40
00004F3A 0002 0050                  		dc.w 2,	$50
00004F3E 0002 0050                  		dc.w 2,	$50
00004F42 0002 0020                  		dc.w 2,	$20
00004F46 0003 0030                  		dc.w 3,	$30
00004F4A 0005 0050                  		dc.w 5,	$50
00004F4E 0007 0070                  		dc.w 7,	$70
00004F52 0002 0010                  		dc.w 2,	$10
00004F56 0002 0010                  		dc.w 2,	$10
00004F5A                            		even
00004F5A                            
00004F5A                            ; ---------------------------------------------------------------------------
00004F5A                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004F5A                            ; ---------------------------------------------------------------------------
00004F5A                            
00004F5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F5A                            
00004F5A                            
00004F5A                            ChangeRingFrame:			; XREF: Level
00004F5A 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004F5E 6A00                       		bpl.s	loc_421C
00004F60 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004F66 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004F6A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004F70                            
00004F70                            loc_421C:
00004F70 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004F74 6A00                       		bpl.s	loc_4232
00004F76 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004F7C 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004F80 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004F86                            
00004F86                            loc_4232:
00004F86 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004F8A 6A00                       		bpl.s	loc_4250
00004F8C 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004F92 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004F96 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004F9C 6500                       		bcs.s	loc_4250
00004F9E 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004FA4                            
00004FA4                            loc_4250:
00004FA4 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004FA8 6700                       		beq.s	locret_4272
00004FAA 7000                       		moveq	#0,d0
00004FAC 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004FB0 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004FB4 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004FB8 EF58                       		rol.w	#7,d0
00004FBA 0240 0003                  		andi.w	#3,d0
00004FBE 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004FC2 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004FC6                            
00004FC6                            locret_4272:
00004FC6 4E75                       		rts	
00004FC8                            ; End of function ChangeRingFrame
00004FC8                            
00004FC8                            ; ---------------------------------------------------------------------------
00004FC8                            ; End-of-act signpost pattern loading subroutine
00004FC8                            ; ---------------------------------------------------------------------------
00004FC8                            
00004FC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FC8                            
00004FC8                            
00004FC8                            SignpostArtLoad:			; XREF: Level
00004FC8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004FCC 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004FD0 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004FD6 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004FD8 3038 F700                  		move.w	($FFFFF700).w,d0
00004FDC 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004FE0 0441 0100                  		subi.w	#$100,d1
00004FE4 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004FE6 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004FE8 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004FEC 6700                       		beq.s	Signpost_Exit
00004FEE B278 F728                  		cmp.w	($FFFFF728).w,d1
00004FF2 6700                       		beq.s	Signpost_Exit
00004FF4 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004FF8 7012                       		moveq	#$12,d0
00004FFA 6000 CE8E                  		bra.w	LoadPLC2	; load signpost	patterns
00004FFE                            ; ===========================================================================
00004FFE                            
00004FFE                            Signpost_Exit:
00004FFE 4E75                       		rts	
00005000                            ; End of function SignpostArtLoad
00005000                            
00005000                            ; ===========================================================================
00005000                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00005080                            Demo_MZ:	incbin	demodata\i_mz.bin
000051B0                            Demo_SYZ:	incbin	demodata\i_syz.bin
00005230                            Demo_SS:	incbin	demodata\i_ss.bin
00005330                            ; ===========================================================================
00005330                            
00005330                            ; ---------------------------------------------------------------------------
00005330                            ; Special Stage
00005330                            ; ---------------------------------------------------------------------------
00005330                            
00005330                            SpecialStage:				; XREF: GameModeArray
00005330 303C 00CA                  		move.w	#$CA,d0
00005334 6100 C944                  		bsr.w	PlaySound_Special ; play special stage entry sound
00005338 6100 D4EE                  		bsr.w	Pal_MakeFlash
0000533C 46FC 2700                  		move	#$2700,sr
00005340 4DF9 00C0 0004             		lea	($C00004).l,a6
00005346 3CBC 8B03                  		move.w	#$8B03,(a6)
0000534A 3CBC 8004                  		move.w	#$8004,(a6)
0000534E 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00005354 3CBC 9011                  		move.w	#$9011,(a6)
00005358 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000535C 0200 00BF                  		andi.b	#$BF,d0
00005360 33C0 00C0 0004             		move.w	d0,($C00004).l
00005366 6100 C838                  		bsr.w	ClearScreen
0000536A 46FC 2300                  		move	#$2300,sr
0000536E 4BF9 00C0 0004             		lea	($C00004).l,a5
00005374 3ABC 8F01                  		move.w	#$8F01,(a5)
00005378 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
0000537E 3ABC 9780                  		move.w	#$9780,(a5)
00005382 2ABC 5000 0081             		move.l	#$50000081,(a5)
00005388 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00005390                            
00005390                            loc_463C:
00005390 3215                       		move.w	(a5),d1
00005392 0801 0001                  		btst	#1,d1
00005396 66F8                       		bne.s	loc_463C
00005398 3ABC 8F02                  		move.w	#$8F02,(a5)
0000539C 6100 0000                  		bsr.w	SS_BGLoad
000053A0 7014                       		moveq	#$14,d0
000053A2 6100 CC20                  		bsr.w	RunPLC_ROM	; load special stage patterns
000053A6 43F8 D000                  		lea	($FFFFD000).w,a1
000053AA 7000                       		moveq	#0,d0
000053AC 323C 07FF                  		move.w	#$7FF,d1
000053B0                            
000053B0                            SS_ClrObjRam:
000053B0 22C0                       		move.l	d0,(a1)+
000053B2 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000053B6                            
000053B6 43F8 F700                  		lea	($FFFFF700).w,a1
000053BA 7000                       		moveq	#0,d0
000053BC 323C 003F                  		move.w	#$3F,d1
000053C0                            
000053C0                            SS_ClrRam:
000053C0 22C0                       		move.l	d0,(a1)+
000053C2 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
000053C6                            
000053C6 43F8 FE60                  		lea	($FFFFFE60).w,a1
000053CA 7000                       		moveq	#0,d0
000053CC 323C 0027                  		move.w	#$27,d1
000053D0                            
000053D0                            SS_ClrRam2:
000053D0 22C0                       		move.l	d0,(a1)+
000053D2 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000053D6                            
000053D6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000053DA 7000                       		moveq	#0,d0
000053DC 323C 007F                  		move.w	#$7F,d1
000053E0                            
000053E0                            SS_ClrNemRam:
000053E0 22C0                       		move.l	d0,(a1)+
000053E2 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000053E6                            
000053E6 4238 F64E                  		clr.b	($FFFFF64E).w
000053EA 4278 FE02                  		clr.w	($FFFFFE02).w
000053EE 700A                       		moveq	#$A,d0
000053F0 6100 D5B6                  		bsr.w	PalLoad1	; load special stage pallet
000053F4 4EB9 0000 0000             		jsr	SS_Load
000053FA 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00005402 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
0000540A 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00005410 6100 0000                  		bsr.w	PalCycle_SS
00005414 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00005418 4278 F784                  		clr.w	($FFFFF784).w	; set stage angle to "upright"
0000541C 31FC 0002 F786             		move.w	#2,($FFFFF786).w ; set stage rotation speed
00005422 303C 0089                  		move.w	#$89,d0
00005426 6100 C84C                  		bsr.w	PlaySound	; play special stage BG	music
0000542A 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00005430 43F9 0000 4DD4             		lea	(Demo_Index).l,a1
00005436 7006                       		moveq	#6,d0
00005438 E548                       		lsl.w	#2,d0
0000543A 2271 0000                  		movea.l	(a1,d0.w),a1
0000543E 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00005444 5338 F792                  		subq.b	#1,($FFFFF792).w
00005448 4278 FE20                  		clr.w	($FFFFFE20).w
0000544C 4238 FE1B                  		clr.b	($FFFFFE1B).w
00005450 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00005456 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000545C                            ;		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
0000545C                            ;		beq.s	SS_NoDebug	; if not, branch
0000545C                            ;		btst	#6,($FFFFF604).w ; is A	button pressed?
0000545C                            ;		beq.s	SS_NoDebug	; if not, branch
0000545C                            ;		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000545C                            
0000545C                            SS_NoDebug:
0000545C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005460 0000 0040                  		ori.b	#$40,d0
00005464 33C0 00C0 0004             		move.w	d0,($C00004).l
0000546A 6100 D310                  		bsr.w	Pal_MakeWhite
0000546E                            
0000546E                            ; ---------------------------------------------------------------------------
0000546E                            ; Main Special Stage loop
0000546E                            ; ---------------------------------------------------------------------------
0000546E                            
0000546E                            SS_MainLoop:
0000546E 6100 C816                  		bsr.w	PauseGame
00005472 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00005478 6100 DF6A                  		bsr.w	DelayProgram
0000547C 4A78 F784                          tst.w   ($FFFFF784).w
00005480 6700                               beq.s   SS_NotReversed
00005482 5378 F784                          subi.w  #1,($FFFFF784).w
00005486                            
00005486                            SS_NotReversed:
00005486 6100 F89C                  		bsr.w	MoveSonicInDemo
0000548A 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00005490 4EB9 0000 0000             		jsr	ObjectsLoad
00005496 4EB9 0000 0000             		jsr	BuildSprites
0000549C 4EB9 0000 0000             		jsr	SS_ShowLayout
000054A2 6100 0000                  		bsr.w	SS_BGAnimate
000054A6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000054AA 6700                       		beq.s	SS_ChkEnd	; if not, branch
000054AC 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000054B0 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
000054B4                            
000054B4                            SS_ChkEnd:
000054B4 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
000054BA 6700 FFB2                  		beq.w	SS_MainLoop	; if yes, branch
000054BE                            
000054BE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000054C2 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
000054C6 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000054CC 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
000054D2 6500                       		bcs.s	SS_End		; if not, branch
000054D4 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
000054D8                            
000054D8                            SS_End:
000054D8 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
000054DE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000054E4 4278 F794                  		clr.w	($FFFFF794).w
000054E8                            
000054E8                            SS_EndLoop:
000054E8 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000054EE 6100 DEF4                  		bsr.w	DelayProgram
000054F2 6100 F830                  		bsr.w	MoveSonicInDemo
000054F6 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000054FC 4EB9 0000 0000             		jsr	ObjectsLoad
00005502 4EB9 0000 0000             		jsr	BuildSprites
00005508 4EB9 0000 0000             		jsr	SS_ShowLayout
0000550E 6100 0000                  		bsr.w	SS_BGAnimate
00005512 5378 F794                  		subq.w	#1,($FFFFF794).w
00005516 6A00                       		bpl.s	loc_47D4
00005518 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000551E 6100 D328                  		bsr.w	Pal_ToWhite
00005522                            
00005522                            loc_47D4:
00005522 4A78 F614                  		tst.w	($FFFFF614).w
00005526 66C0                       		bne.s	SS_EndLoop
00005528                            
00005528 46FC 2700                  		move	#$2700,sr
0000552C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005532 3CBC 8230                  		move.w	#$8230,(a6)
00005536 3CBC 8407                  		move.w	#$8407,(a6)
0000553A 3CBC 9001                  		move.w	#$9001,(a6)
0000553E 6100 C660                  		bsr.w	ClearScreen
00005542 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000554C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005552 6100 C7C4                  		bsr.w	NemDec
00005556 4EB9 0000 0000             		jsr	Hud_Base
0000555C 46FC 2300                  		move	#$2300,sr
00005560 7011                       		moveq	#$11,d0
00005562 6100 D460                  		bsr.w	PalLoad2	; load results screen pallet
00005566 7000                       		moveq	#0,d0
00005568 6100 C920                  		bsr.w	LoadPLC2
0000556C 701B                       		moveq	#$1B,d0
0000556E 6100 C8E8                  		bsr.w	LoadPLC		; load results screen patterns
00005572 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00005578 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
0000557E 3038 FE20                  		move.w	($FFFFFE20).w,d0
00005582 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005586 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
0000558A 303C 008E                  		move.w	#$8E,d0
0000558E 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play end-of-level music
00005594 43F8 D000                  		lea	($FFFFD000).w,a1
00005598 7000                       		moveq	#0,d0
0000559A 323C 07FF                  		move.w	#$7FF,d1
0000559E                            
0000559E                            SS_EndClrObjRam:
0000559E 22C0                       		move.l	d0,(a1)+
000055A0 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
000055A4                            
000055A4 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
000055AA                            
000055AA                            SS_NormalExit:
000055AA 6100 C6DA                  		bsr.w	PauseGame
000055AE 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
000055B4 6100 DE2E                  		bsr.w	DelayProgram
000055B8 4EB9 0000 0000             		jsr	ObjectsLoad
000055BE 4EB9 0000 0000             		jsr	BuildSprites
000055C4 6100 C8FE                  		bsr.w	RunPLC_RAM
000055C8 4A78 FE02                  		tst.w	($FFFFFE02).w
000055CC 67DC                       		beq.s	SS_NormalExit
000055CE 4AB8 F680                  		tst.l	($FFFFF680).w
000055D2 66D6                       		bne.s	SS_NormalExit
000055D4 303C 00CA                  		move.w	#$CA,d0
000055D8 6100 C6A0                  		bsr.w	PlaySound_Special ; play special stage exit sound
000055DC 6100 D24A                  		bsr.w	Pal_MakeFlash
000055E0 4E75                       		rts	
000055E2                            ; ===========================================================================
000055E2                            
000055E2                            SS_ToSegaScreen:
000055E2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
000055E8 4E75                       		rts
000055EA                            
000055EA                            ; ---------------------------------------------------------------------------
000055EA                            ; Special stage	background loading subroutine
000055EA                            ; ---------------------------------------------------------------------------
000055EA                            
000055EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000055EA                            
000055EA                            
000055EA                            SS_BGLoad:				; XREF: SpecialStage
000055EA 43F9 00FF 0000             		lea	($FF0000).l,a1
000055F0 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000055F6 303C 4051                  		move.w	#$4051,d0
000055FA 6100 C9FA                  		bsr.w	EniDec
000055FE 263C 5000 0001             		move.l	#$50000001,d3
00005604 45F9 00FF 0080             		lea	($FF0080).l,a2
0000560A 7E06                       		moveq	#6,d7
0000560C                            
0000560C                            loc_48BE:
0000560C 2003                       		move.l	d3,d0
0000560E 7C03                       		moveq	#3,d6
00005610 7800                       		moveq	#0,d4
00005612 0C47 0003                  		cmpi.w	#3,d7
00005616 6400                       		bcc.s	loc_48CC
00005618 7801                       		moveq	#1,d4
0000561A                            
0000561A                            loc_48CC:
0000561A 7A07                       		moveq	#7,d5
0000561C                            
0000561C                            loc_48CE:
0000561C 224A                       		movea.l	a2,a1
0000561E 0A04 0001                  		eori.b	#1,d4
00005622 6600                       		bne.s	loc_48E2
00005624 0C47 0006                  		cmpi.w	#6,d7
00005628 6600                       		bne.s	loc_48F2
0000562A 43F9 00FF 0000             		lea	($FF0000).l,a1
00005630                            
00005630                            loc_48E2:
00005630 48E7 F800                  		movem.l	d0-d4,-(sp)
00005634 7207                       		moveq	#7,d1
00005636 7407                       		moveq	#7,d2
00005638 6100 C6BE                  		bsr.w	ShowVDPGraphics
0000563C 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005640                            
00005640                            loc_48F2:
00005640 0680 0010 0000             		addi.l	#$100000,d0
00005646 51CD FFD4                  		dbf	d5,loc_48CE
0000564A 0680 0380 0000             		addi.l	#$3800000,d0
00005650 0A04 0001                  		eori.b	#1,d4
00005654 51CE FFC4                  		dbf	d6,loc_48CC
00005658 0683 1000 0000             		addi.l	#$10000000,d3
0000565E 6A00                       		bpl.s	loc_491C
00005660 4843                       		swap	d3
00005662 0683 0000 C000             		addi.l	#$C000,d3
00005668 4843                       		swap	d3
0000566A                            
0000566A                            loc_491C:
0000566A D4FC 0080                  		adda.w	#$80,a2
0000566E 51CF FF9C                  		dbf	d7,loc_48BE
00005672 43F9 00FF 0000             		lea	($FF0000).l,a1
00005678 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
0000567E 303C 4000                  		move.w	#$4000,d0
00005682 6100 C972                  		bsr.w	EniDec
00005686 43F9 00FF 0000             		lea	($FF0000).l,a1
0000568C 203C 4000 0003             		move.l	#$40000003,d0
00005692 723F                       		moveq	#$3F,d1
00005694 741F                       		moveq	#$1F,d2
00005696 6100 C660                  		bsr.w	ShowVDPGraphics
0000569A 43F9 00FF 0000             		lea	($FF0000).l,a1
000056A0 203C 5000 0003             		move.l	#$50000003,d0
000056A6 723F                       		moveq	#$3F,d1
000056A8 743F                       		moveq	#$3F,d2
000056AA 6100 C64C                  		bsr.w	ShowVDPGraphics
000056AE 4E75                       		rts	
000056B0                            ; End of function SS_BGLoad
000056B0                            
000056B0                            ; ---------------------------------------------------------------------------
000056B0                            ; Pallet cycling routine - special stage
000056B0                            ; ---------------------------------------------------------------------------
000056B0                            
000056B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000056B0                            
000056B0                            
000056B0                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
000056B0 4A78 F63A                  		tst.w	($FFFFF63A).w
000056B4 6600                       		bne.s	locret_49E6
000056B6 5378 F79C                  		subq.w	#1,($FFFFF79C).w
000056BA 6A00                       		bpl.s	locret_49E6
000056BC 4DF9 00C0 0004             		lea	($C00004).l,a6
000056C2 3038 F79A                  		move.w	($FFFFF79A).w,d0
000056C6 5278 F79A                  		addq.w	#1,($FFFFF79A).w
000056CA 0240 001F                  		andi.w	#$1F,d0
000056CE E548                       		lsl.w	#2,d0
000056D0 41F9 0000 0000             		lea	(byte_4A3C).l,a0
000056D6 D0C0                       		adda.w	d0,a0
000056D8 1018                       		move.b	(a0)+,d0
000056DA 6A00                       		bpl.s	loc_4992
000056DC 303C 01FF                  		move.w	#$1FF,d0
000056E0                            
000056E0                            loc_4992:
000056E0 31C0 F79C                  		move.w	d0,($FFFFF79C).w
000056E4 7000                       		moveq	#0,d0
000056E6 1018                       		move.b	(a0)+,d0
000056E8 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
000056EC 43F9 0000 0000             		lea	(byte_4ABC).l,a1
000056F2 43F1 0000                  		lea	(a1,d0.w),a1
000056F6 303C 8200                  		move.w	#-$7E00,d0
000056FA 1019                       		move.b	(a1)+,d0
000056FC 3C80                       		move.w	d0,(a6)
000056FE 11D1 F616                  		move.b	(a1),($FFFFF616).w
00005702 303C 8400                  		move.w	#-$7C00,d0
00005706 1018                       		move.b	(a0)+,d0
00005708 3C80                       		move.w	d0,(a6)
0000570A 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00005714 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
0000571C 7000                       		moveq	#0,d0
0000571E 1018                       		move.b	(a0)+,d0
00005720 6B00                       		bmi.s	loc_49E8
00005722 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005728 D2C0                       		adda.w	d0,a1
0000572A 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
0000572E 24D9                       		move.l	(a1)+,(a2)+
00005730 24D9                       		move.l	(a1)+,(a2)+
00005732 24D9                       		move.l	(a1)+,(a2)+
00005734                            
00005734                            locret_49E6:
00005734 4E75                       		rts	
00005736                            ; ===========================================================================
00005736                            
00005736                            loc_49E8:				; XREF: PalCycle_SS
00005736 3238 F79E                  		move.w	($FFFFF79E).w,d1
0000573A 0C40 008A                  		cmpi.w	#$8A,d0
0000573E 6500                       		bcs.s	loc_49F4
00005740 5241                       		addq.w	#1,d1
00005742                            
00005742                            loc_49F4:
00005742 C2FC 002A                  		mulu.w	#$2A,d1
00005746 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
0000574C D2C1                       		adda.w	d1,a1
0000574E 0240 007F                  		andi.w	#$7F,d0
00005752 0880 0000                  		bclr	#0,d0
00005756 6700                       		beq.s	loc_4A18
00005758 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
0000575C 24D1                       		move.l	(a1),(a2)+
0000575E 24E9 0004                  		move.l	4(a1),(a2)+
00005762 24E9 0008                  		move.l	8(a1),(a2)+
00005766                            
00005766                            loc_4A18:
00005766 D2FC 000C                  		adda.w	#$C,a1
0000576A 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
0000576E 0C40 000A                  		cmpi.w	#$A,d0
00005772 6500                       		bcs.s	loc_4A2E
00005774 0440 000A                  		subi.w	#$A,d0
00005778 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
0000577C                            
0000577C                            loc_4A2E:
0000577C 3200                       		move.w	d0,d1
0000577E D040                       		add.w	d0,d0
00005780 D041                       		add.w	d1,d0
00005782 D2C0                       		adda.w	d0,a1
00005784 24D9                       		move.l	(a1)+,(a2)+
00005786 34D9                       		move.w	(a1)+,(a2)+
00005788 4E75                       		rts	
0000578A                            ; End of function PalCycle_SS
0000578A                            
0000578A                            ; ===========================================================================
0000578A 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
0000579A                            					; XREF: PalCycle_SS
0000579A 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
000057AA 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
000057BA FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
000057CA 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
000057DA 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
000057EA 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
000057FA FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
0000580A                            		even
0000580A 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005818                            					; XREF: PalCycle_SS
00005818                            		even
00005818                            
00005818                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00005860                            		even
00005860                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00005932                            		even
00005932                            
00005932                            ; ---------------------------------------------------------------------------
00005932                            ; Subroutine to	make the special stage background animated
00005932                            ; ---------------------------------------------------------------------------
00005932                            
00005932                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005932                            
00005932                            
00005932                            SS_BGAnimate:				; XREF: SpecialStage
00005932 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005936 6600                       		bne.s	loc_4BF6
00005938 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
0000593E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005944                            
00005944                            loc_4BF6:
00005944 0C40 0008                  		cmpi.w	#8,d0
00005948 6400                       		bcc.s	loc_4C4E
0000594A 0C40 0006                  		cmpi.w	#6,d0
0000594E 6600                       		bne.s	loc_4C10
00005950 5278 F718                  		addq.w	#1,($FFFFF718).w
00005954 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005958 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000595E                            
0000595E                            loc_4C10:
0000595E 7000                       		moveq	#0,d0
00005960 3038 F708                  		move.w	($FFFFF708).w,d0
00005964 4440                       		neg.w	d0
00005966 4840                       		swap	d0
00005968 43F9 0000 0000             		lea	(byte_4CCC).l,a1
0000596E 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005972 7609                       		moveq	#9,d3
00005974                            
00005974                            loc_4C26:
00005974 302B 0002                  		move.w	2(a3),d0
00005978 6100 DA9C                  		bsr.w	CalcSine
0000597C 7400                       		moveq	#0,d2
0000597E 1419                       		move.b	(a1)+,d2
00005980 C1C2                       		muls.w	d2,d0
00005982 E080                       		asr.l	#8,d0
00005984 36C0                       		move.w	d0,(a3)+
00005986 1419                       		move.b	(a1)+,d2
00005988 4882                       		ext.w	d2
0000598A D55B                       		add.w	d2,(a3)+
0000598C 51CB FFE6                  		dbf	d3,loc_4C26
00005990 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005994 45F9 0000 0000             		lea	(byte_4CB8).l,a2
0000599A 6000                       		bra.s	loc_4C7E
0000599C                            ; ===========================================================================
0000599C                            
0000599C                            loc_4C4E:				; XREF: SS_BGAnimate
0000599C 0C40 000C                  		cmpi.w	#$C,d0
000059A0 6600                       		bne.s	loc_4C74
000059A2 5378 F718                  		subq.w	#1,($FFFFF718).w
000059A6 47F8 AB00                  		lea	($FFFFAB00).w,a3
000059AA 243C 0001 8000             		move.l	#$18000,d2
000059B0 7206                       		moveq	#6,d1
000059B2                            
000059B2                            loc_4C64:
000059B2 2013                       		move.l	(a3),d0
000059B4 9082                       		sub.l	d2,d0
000059B6 26C0                       		move.l	d0,(a3)+
000059B8 0482 0000 2000             		subi.l	#$2000,d2
000059BE 51C9 FFF2                  		dbf	d1,loc_4C64
000059C2                            
000059C2                            loc_4C74:
000059C2 47F8 AB00                  		lea	($FFFFAB00).w,a3
000059C6 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000059CC                            
000059CC                            loc_4C7E:
000059CC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000059D0 3038 F718                  		move.w	($FFFFF718).w,d0
000059D4 4440                       		neg.w	d0
000059D6 4840                       		swap	d0
000059D8 7600                       		moveq	#0,d3
000059DA 161A                       		move.b	(a2)+,d3
000059DC 3438 F70C                  		move.w	($FFFFF70C).w,d2
000059E0 4442                       		neg.w	d2
000059E2 0242 00FF                  		andi.w	#$FF,d2
000059E6 E54A                       		lsl.w	#2,d2
000059E8                            
000059E8                            loc_4C9A:
000059E8 301B                       		move.w	(a3)+,d0
000059EA 544B                       		addq.w	#2,a3
000059EC 7200                       		moveq	#0,d1
000059EE 121A                       		move.b	(a2)+,d1
000059F0 5341                       		subq.w	#1,d1
000059F2                            
000059F2                            loc_4CA4:
000059F2 2380 2000                  		move.l	d0,(a1,d2.w)
000059F6 5842                       		addq.w	#4,d2
000059F8 0242 03FC                  		andi.w	#$3FC,d2
000059FC 51C9 FFF4                  		dbf	d1,loc_4CA4
00005A00 51CB FFE6                  		dbf	d3,loc_4C9A
00005A04 4E75                       		rts	
00005A06                            ; End of function SS_BGAnimate
00005A06                            
00005A06                            ; ===========================================================================
00005A06 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005A12                            		even
00005A12 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005A1A                            		even
00005A1A 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005A2E                            		even
00005A2E                            					; XREF: SS_BGAnimate
00005A2E                            ; ===========================================================================
00005A2E                            
00005A2E                            ; ---------------------------------------------------------------------------
00005A2E                            ; Continue screen
00005A2E                            ; ---------------------------------------------------------------------------
00005A2E                            
00005A2E                            ContinueScreen:				; XREF: GameModeArray
00005A2E 6100 CCCE                  		bsr.w	Pal_FadeFrom
00005A32 46FC 2700                  		move	#$2700,sr
00005A36 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005A3A 0200 00BF                  		andi.b	#$BF,d0
00005A3E 33C0 00C0 0004             		move.w	d0,($C00004).l
00005A44 4DF9 00C0 0004             		lea	($C00004).l,a6
00005A4A 3CBC 8004                  		move.w	#$8004,(a6)
00005A4E 3CBC 8700                  		move.w	#$8700,(a6)
00005A52 6100 C14C                  		bsr.w	ClearScreen
00005A56 43F8 D000                  		lea	($FFFFD000).w,a1
00005A5A 7000                       		moveq	#0,d0
00005A5C 323C 07FF                  		move.w	#$7FF,d1
00005A60                            
00005A60                            Cont_ClrObjRam:
00005A60 22C0                       		move.l	d0,(a1)+
00005A62 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005A66                            
00005A66 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005A70 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005A76 6100 C2A0                  		bsr.w	NemDec
00005A7A 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00005A84 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005A8A 6100 C28C                  		bsr.w	NemDec
00005A8E 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005A98 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005A9E 6100 C278                  		bsr.w	NemDec
00005AA2 720A                       		moveq	#10,d1
00005AA4 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00005AAA 7012                       		moveq	#$12,d0
00005AAC 6100 CEFA                  		bsr.w	PalLoad1	; load continue	screen pallet
00005AB0 103C 0090                  		move.b	#$90,d0
00005AB4 6100 C1BE                  		bsr.w	PlaySound	; play continue	music
00005AB8 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00005ABE 42B8 F700                  		clr.l	($FFFFF700).w
00005AC2 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00005ACA 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00005AD0 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00005AD6 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00005ADC 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00005AE2 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00005AE8 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00005AEE 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00005AF4 4EB9 0000 0000             		jsr	ObjectsLoad
00005AFA 4EB9 0000 0000             		jsr	BuildSprites
00005B00 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005B04 0000 0040                  		ori.b	#$40,d0
00005B08 33C0 00C0 0004             		move.w	d0,($C00004).l
00005B0E 6100 CB44                  		bsr.w	Pal_FadeTo
00005B12                            
00005B12                            ; ---------------------------------------------------------------------------
00005B12                            ; Continue screen main loop
00005B12                            ; ---------------------------------------------------------------------------
00005B12                            
00005B12                            Cont_MainLoop:
00005B12 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005B18 6100 D8CA                  		bsr.w	DelayProgram
00005B1C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005B22 6400                       		bcc.s	loc_4DF2
00005B24 46FC 2700                  		move	#$2700,sr
00005B28 3238 F614                  		move.w	($FFFFF614).w,d1
00005B2C 82FC 003C                  		divu.w	#$3C,d1
00005B30 0281 0000 000F             		andi.l	#$F,d1
00005B36 4EB9 0000 0000             		jsr	ContScrCounter
00005B3C 46FC 2300                  		move	#$2300,sr
00005B40                            
00005B40                            loc_4DF2:
00005B40 4EB9 0000 0000             		jsr	ObjectsLoad
00005B46 4EB9 0000 0000             		jsr	BuildSprites
00005B4C 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005B52 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005B54 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005B5A 64B6                       		bcc.s	Cont_MainLoop
00005B5C 4A78 F614                  		tst.w	($FFFFF614).w
00005B60 6600 FFB0                  		bne.w	Cont_MainLoop
00005B64 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005B6A 4E75                       		rts	
00005B6C                            ; ===========================================================================
00005B6C                            
00005B6C                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005B6C 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005B72 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005B78 7000                       		moveq	#0,d0
00005B7A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005B7E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005B82 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005B86 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005B8A 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005B8E 4E75                       		rts	
00005B90                            ; ===========================================================================
00005B90                            
00005B90                            ; ---------------------------------------------------------------------------
00005B90                            ; Object 80 - Continue screen elements
00005B90                            ; ---------------------------------------------------------------------------
00005B90                            
00005B90                            Obj80:					; XREF: Obj_Index
00005B90 7000                       		moveq	#0,d0
00005B92 1028 0024                  		move.b	$24(a0),d0
00005B96 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005B9A 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005B9E                            ; ===========================================================================
00005B9E 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005BA0 0000                       		dc.w Obj80_Display-Obj80_Index
00005BA2 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005BA4 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005BA6                            ; ===========================================================================
00005BA6                            
00005BA6                            Obj80_Main:				; XREF: Obj80_Index
00005BA6 5428 0024                  		addq.b	#2,$24(a0)
00005BAA 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005BB2 317C 8500 0002             		move.w	#$8500,2(a0)
00005BB8 117C 0000 0001             		move.b	#0,1(a0)
00005BBE 117C 003C 0019             		move.b	#$3C,$19(a0)
00005BC4 317C 0120 0008             		move.w	#$120,8(a0)
00005BCA 317C 00C0 000A             		move.w	#$C0,$A(a0)
00005BD0 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005BD6                            
00005BD6                            Obj80_Display:				; XREF: Obj80_Index
00005BD6 4EF9 0000 0000             		jmp	DisplaySprite
00005BDC                            ; ===========================================================================
00005BDC                            Obj80_MiniSonicPos:
00005BDC 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005BEE 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005BFA                            ; ===========================================================================
00005BFA                            
00005BFA                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00005BFA 2248                       		movea.l	a0,a1
00005BFC 45F9 0000 5BDC             		lea	(Obj80_MiniSonicPos).l,a2
00005C02 7200                       		moveq	#0,d1
00005C04 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005C08 5501                       		subq.b	#2,d1
00005C0A 6400                       		bcc.s	loc_4EC4
00005C0C 4EF9 0000 0000             		jmp	DeleteObject
00005C12                            ; ===========================================================================
00005C12                            
00005C12                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005C12 7601                       		moveq	#1,d3
00005C14 0C01 000E                  		cmpi.b	#$E,d1
00005C18 6500                       		bcs.s	loc_4ED0
00005C1A 7600                       		moveq	#0,d3
00005C1C 720E                       		moveq	#$E,d1
00005C1E                            
00005C1E                            loc_4ED0:
00005C1E 1401                       		move.b	d1,d2
00005C20 0202 0001                  		andi.b	#1,d2
00005C24                            
00005C24                            Obj80_MiniSonLoop:
00005C24 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005C28 335A 0008                  		move.w	(a2)+,8(a1)
00005C2C 4A02                       		tst.b	d2
00005C2E 6700                       		beq.s	loc_4EEA
00005C30 0469 000A 0008             		subi.w	#$A,8(a1)
00005C36                            
00005C36                            loc_4EEA:
00005C36 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005C3C 137C 0006 001A             		move.b	#6,$1A(a1)
00005C42 137C 0006 0024             		move.b	#6,$24(a1)
00005C48 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005C50 337C 8551 0002             		move.w	#$8551,2(a1)
00005C56 137C 0000 0001             		move.b	#0,1(a1)
00005C5C 43E9 0040                  		lea	$40(a1),a1
00005C60 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005C64 43E9 FFC0                  		lea	-$40(a1),a1
00005C68 1343 0028                  		move.b	d3,$28(a1)
00005C6C                            
00005C6C                            Obj80_ChkType:				; XREF: Obj80_Index
00005C6C 4A28 0028                  		tst.b	$28(a0)
00005C70 6700                       		beq.s	loc_4F40
00005C72 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005C78 6500                       		bcs.s	loc_4F40
00005C7A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005C7E 0200 0001                  		andi.b	#1,d0
00005C82 6600                       		bne.s	loc_4F40
00005C84 4A78 D010                  		tst.w	($FFFFD010).w
00005C88 6600                       		bne.s	Obj80_Delete
00005C8A 4E75                       		rts	
00005C8C                            ; ===========================================================================
00005C8C                            
00005C8C                            loc_4F40:				; XREF: Obj80_ChkType
00005C8C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005C90 0200 000F                  		andi.b	#$F,d0
00005C94 6600                       		bne.s	Obj80_Display2
00005C96 0868 0000 001A             		bchg	#0,$1A(a0)
00005C9C                            
00005C9C                            Obj80_Display2:
00005C9C 4EF9 0000 0000             		jmp	DisplaySprite
00005CA2                            ; ===========================================================================
00005CA2                            
00005CA2                            Obj80_Delete:				; XREF: Obj80_ChkType
00005CA2 4EF9 0000 0000             		jmp	DeleteObject
00005CA8                            ; ===========================================================================
00005CA8                            
00005CA8                            ; ---------------------------------------------------------------------------
00005CA8                            ; Object 81 - Sonic on the continue screen
00005CA8                            ; ---------------------------------------------------------------------------
00005CA8                            
00005CA8                            Obj81:					; XREF: Obj_Index
00005CA8 7000                       		moveq	#0,d0
00005CAA 1028 0024                  		move.b	$24(a0),d0
00005CAE 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00005CB2 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005CB6 4EF9 0000 0000             		jmp	DisplaySprite
00005CBC                            ; ===========================================================================
00005CBC 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00005CBE 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00005CC0 0000                       		dc.w Obj81_Animate-Obj81_Index
00005CC2 0000                       		dc.w Obj81_Run-Obj81_Index
00005CC4                            ; ===========================================================================
00005CC4                            
00005CC4                            Obj81_Main:				; XREF: Obj81_Index
00005CC4 5428 0024                  		addq.b	#2,$24(a0)
00005CC8 317C 00A0 0008             		move.w	#$A0,8(a0)
00005CCE 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005CD4 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005CDC 317C 0780 0002             		move.w	#$780,2(a0)
00005CE2 117C 0004 0001             		move.b	#4,1(a0)
00005CE8 117C 0002 0018             		move.b	#2,$18(a0)
00005CEE 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005CF4 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00005CFA                            
00005CFA                            Obj81_ChkLand:				; XREF: Obj81_Index
00005CFA 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005D00 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005D02 5428 0024                  		addq.b	#2,$24(a0)
00005D06 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005D0A 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005D12 317C 8500 0002             		move.w	#$8500,2(a0)
00005D18 117C 0000 001C             		move.b	#0,$1C(a0)
00005D1E 6000                       		bra.s	Obj81_Animate
00005D20                            ; ===========================================================================
00005D20                            
00005D20                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005D20 4EB9 0000 0000             		jsr	SpeedToPos
00005D26 4EB9 0000 0000             		jsr	Sonic_Animate
00005D2C 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005D32                            ; ===========================================================================
00005D32                            
00005D32                            Obj81_Animate:				; XREF: Obj81_Index
00005D32 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005D36 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005D38 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005D3E 4EF9 0000 0000             		jmp	AnimateSprite
00005D44                            ; ===========================================================================
00005D44                            
00005D44                            Obj81_GetUp:				; XREF: Obj81_Animate
00005D44 5428 0024                  		addq.b	#2,$24(a0)
00005D48 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005D50 317C 0780 0002             		move.w	#$780,2(a0)
00005D56 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005D5C 4268 0014                  		clr.w	$14(a0)
00005D60 5168 000C                  		subq.w	#8,$C(a0)
00005D64 103C 00E0                  		move.b	#$E0,d0
00005D68 6100 BF10                  		bsr.w	PlaySound_Special ; fade out music
00005D6C                            
00005D6C                            Obj81_Run:				; XREF: Obj81_Index
00005D6C 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005D72 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005D74 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005D7A 6000                       		bra.s	Obj81_ShowRun
00005D7C                            ; ===========================================================================
00005D7C                            
00005D7C                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005D7C 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005D82                            
00005D82                            Obj81_ShowRun:				; XREF: Obj81_Run
00005D82 4EB9 0000 0000             		jsr	SpeedToPos
00005D88 4EB9 0000 0000             		jsr	Sonic_Animate
00005D8E 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005D94                            ; ===========================================================================
00005D94                            Ani_obj81:
00005D94                            	include "_anim\obj81.asm"
00005D94                            ; ---------------------------------------------------------------------------
00005D94                            ; Animation script - Sonic on the continue screen
00005D94                            ; ---------------------------------------------------------------------------
00005D94 0000                       		dc.w byte_504A-Ani_obj81
00005D96 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005DA2 00                         		even
00005DA2 00                         		even
00005DA2                            
00005DA2                            ; ---------------------------------------------------------------------------
00005DA2                            ; Sprite mappings - Continue screen
00005DA2                            ; ---------------------------------------------------------------------------
00005DA2                            Map_obj80:
00005DA2                            	include "_maps\obj80.asm"
00005DA2                            ; ---------------------------------------------------------------------------
00005DA2                            ; Sprite mappings - Continue screen
00005DA2                            ; ---------------------------------------------------------------------------
00005DA2 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005DA6 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005DAA 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005DAE 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005DB2 0B                         byte_5066:	dc.b $B
00005DB3 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005DB8 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005DBD F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005DC2 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005DC7 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005DCC F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005DD1 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005DD6 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005DDB 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005DE0 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005DE5 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005DEA 03                         byte_509E:	dc.b 3
00005DEB 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005DF0 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005DF5 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005DFA 03                         byte_50AE:	dc.b 3
00005DFB 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005E00 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005E05 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005E0A 03                         byte_50BE:	dc.b 3
00005E0B 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005E10 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005E15 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005E1A 02                         byte_50CE:	dc.b 2
00005E1B 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005E20 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005E25 01                         byte_50D9:	dc.b 1
00005E26 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005E2B 01                         byte_50DF:	dc.b 1
00005E2C 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005E32 00                         		even
00005E32 00                         		even
00005E32                            
00005E32                            ; ===========================================================================
00005E32                            ; ---------------------------------------------------------------------------
00005E32                            ; Ending sequence in Green Hill	Zone
00005E32                            ; ---------------------------------------------------------------------------
00005E32                            
00005E32                            EndingSequence:				; XREF: GameModeArray
00005E32 103C 00E4                  		move.b	#$E4,d0
00005E36 6100 BE42                  		bsr.w	PlaySound_Special ; stop music
00005E3A 6100 C8C2                  		bsr.w	Pal_FadeFrom
00005E3E 43F8 D000                  		lea	($FFFFD000).w,a1
00005E42 7000                       		moveq	#0,d0
00005E44 323C 07FF                  		move.w	#$7FF,d1
00005E48                            
00005E48                            End_ClrObjRam:
00005E48 22C0                       		move.l	d0,(a1)+
00005E4A 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005E4E                            
00005E4E 43F8 F628                  		lea	($FFFFF628).w,a1
00005E52 7000                       		moveq	#0,d0
00005E54 323C 0015                  		move.w	#$15,d1
00005E58                            
00005E58                            End_ClrRam:
00005E58 22C0                       		move.l	d0,(a1)+
00005E5A 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005E5E                            
00005E5E 43F8 F700                  		lea	($FFFFF700).w,a1
00005E62 7000                       		moveq	#0,d0
00005E64 323C 003F                  		move.w	#$3F,d1
00005E68                            
00005E68                            End_ClrRam2:
00005E68 22C0                       		move.l	d0,(a1)+
00005E6A 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005E6E                            
00005E6E 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005E72 7000                       		moveq	#0,d0
00005E74 323C 0047                  		move.w	#$47,d1
00005E78                            
00005E78                            End_ClrRam3:
00005E78 22C0                       		move.l	d0,(a1)+
00005E7A 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005E7E                            
00005E7E 46FC 2700                  		move	#$2700,sr
00005E82 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005E86 0200 00BF                  		andi.b	#$BF,d0
00005E8A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005E90 6100 BD0E                  		bsr.w	ClearScreen
00005E94 4DF9 00C0 0004             		lea	($C00004).l,a6
00005E9A 3CBC 8B03                  		move.w	#$8B03,(a6)
00005E9E 3CBC 8230                  		move.w	#$8230,(a6)
00005EA2 3CBC 8407                  		move.w	#$8407,(a6)
00005EA6 3CBC 857C                  		move.w	#$857C,(a6)
00005EAA 3CBC 9001                  		move.w	#$9001,(a6)
00005EAE 3CBC 8004                  		move.w	#$8004,(a6)
00005EB2 3CBC 8720                  		move.w	#$8720,(a6)
00005EB6 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005EBC 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005EC0 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005EC6 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005ECC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005ED2 6700                       		beq.s	End_LoadData	; if yes, branch
00005ED4 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005EDA                            
00005EDA                            End_LoadData:
00005EDA 701C                       		moveq	#$1C,d0
00005EDC 6100 C0E6                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005EE0 4EB9 0000 0000             		jsr	Hud_Base
00005EE6 6100 0000                  		bsr.w	LevelSizeLoad
00005EEA 6100 0000                  		bsr.w	DeformBgLayer
00005EEE 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005EF4 6100 0000                  		bsr.w	MainLoadBlockLoad
00005EF8 6100 0000                  		bsr.w	LoadTilesFromStart
00005EFC 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005F04 46FC 2300                  		move	#$2300,sr
00005F08 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005F0E 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005F12 6100 C260                  		bsr.w	KosDec
00005F16 7003                       		moveq	#3,d0
00005F18 6100 CA8E                  		bsr.w	PalLoad1	; load Sonic's pallet
00005F1C 303C 008B                  		move.w	#$8B,d0
00005F20 6100 BD52                  		bsr.w	PlaySound	; play ending sequence music
00005F24 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005F2A 6700                       		beq.s	End_LoadSonic	; if not, branch
00005F2C 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005F32                            
00005F32                            End_LoadSonic:
00005F32 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005F38 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005F3E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005F44 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005F4A 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005F50 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005F56 4EB9 0000 0000             		jsr	ObjPosLoad
00005F5C 4EB9 0000 0000             		jsr	ObjectsLoad
00005F62 4EB9 0000 0000             		jsr	BuildSprites
00005F68 7000                       		moveq	#0,d0
00005F6A 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005F6E 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005F72 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005F76 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005F7A 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005F7E 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005F82 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005F86 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005F8A 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005F8E 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005F92 6100 EEE0                  		bsr.w	OscillateNumInit
00005F96 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005F9C 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005FA2 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005FA8 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005FAE 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005FB4 6100 D42E                  		bsr.w	DelayProgram
00005FB8 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005FBC 0000 0040                  		ori.b	#$40,d0
00005FC0 33C0 00C0 0004             		move.w	d0,($C00004).l
00005FC6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005FCC 6100 C686                  		bsr.w	Pal_FadeTo
00005FD0                            
00005FD0                            ; ---------------------------------------------------------------------------
00005FD0                            ; Main ending sequence loop
00005FD0                            ; ---------------------------------------------------------------------------
00005FD0                            
00005FD0                            End_MainLoop:
00005FD0 6100 BCB4                  		bsr.w	PauseGame
00005FD4 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005FDA 6100 D408                  		bsr.w	DelayProgram
00005FDE 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005FE2 6100 0000                  		bsr.w	End_MoveSonic
00005FE6 4EB9 0000 0000             		jsr	ObjectsLoad
00005FEC 6100 0000                  		bsr.w	DeformBgLayer
00005FF0 4EB9 0000 0000             		jsr	BuildSprites
00005FF6 4EB9 0000 0000             		jsr	ObjPosLoad
00005FFC 6100 C216                  		bsr.w	PalCycle_Load
00006000 6100 EEC8                  		bsr.w	OscillateNumDo
00006004 6100 EF54                  		bsr.w	ChangeRingFrame
00006008 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
0000600E 6700                       		beq.s	loc_52DA	; if yes, branch
00006010 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00006016 103C 0091                  		move.b	#$91,d0
0000601A 6100 BC5E                  		bsr.w	PlaySound_Special ; play credits music
0000601E 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00006024 4E75                       		rts	
00006026                            ; ===========================================================================
00006026                            
00006026                            loc_52DA:
00006026 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000602A 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
0000602E                            
0000602E 4278 FE02                  		clr.w	($FFFFFE02).w
00006032 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00006038 4278 F794                  		clr.w	($FFFFF794).w
0000603C                            
0000603C                            End_AllEmlds:				; XREF: loc_5334
0000603C 6100 BC48                  		bsr.w	PauseGame
00006040 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006046 6100 D39C                  		bsr.w	DelayProgram
0000604A 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000604E 6100 0000                  		bsr.w	End_MoveSonic
00006052 4EB9 0000 0000             		jsr	ObjectsLoad
00006058 6100 0000                  		bsr.w	DeformBgLayer
0000605C 4EB9 0000 0000             		jsr	BuildSprites
00006062 4EB9 0000 0000             		jsr	ObjPosLoad
00006068 6100 EE60                  		bsr.w	OscillateNumDo
0000606C 6100 EEEC                  		bsr.w	ChangeRingFrame
00006070 5378 F794                  		subq.w	#1,($FFFFF794).w
00006074 6A00                       		bpl.s	loc_5334
00006076 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000607C 6100 C7CA                  		bsr.w	Pal_ToWhite
00006080                            
00006080                            loc_5334:
00006080 4A78 FE02                  		tst.w	($FFFFFE02).w
00006084 6700 FFB6                  		beq.w	End_AllEmlds
00006088 4278 FE02                  		clr.w	($FFFFFE02).w
0000608C 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00006092 4BF9 00C0 0004             		lea	($C00004).l,a5
00006098 4DF9 00C0 0000             		lea	($C00000).l,a6
0000609E 47F8 F700                  		lea	($FFFFF700).w,a3
000060A2 49F8 A400                  		lea	($FFFFA400).w,a4
000060A6 343C 4000                  		move.w	#$4000,d2
000060AA 6100 0000                  		bsr.w	LoadTilesFromStart2
000060AE 7013                       		moveq	#$13,d0
000060B0 6100 C8F6                  		bsr.w	PalLoad1	; load ending pallet
000060B4 6100 C6C6                  		bsr.w	Pal_MakeWhite
000060B8 6000 FF16                  		bra.w	End_MainLoop
000060BC                            
000060BC                            ; ---------------------------------------------------------------------------
000060BC                            ; Subroutine controlling Sonic on the ending sequence
000060BC                            ; ---------------------------------------------------------------------------
000060BC                            
000060BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000060BC                            
000060BC                            
000060BC                            End_MoveSonic:				; XREF: End_MainLoop
000060BC 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000060C0 6600                       		bne.s	End_MoveSonic2
000060C2 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000060C8 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000060CA 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000060CE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000060D4 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000060DA 4E75                       		rts	
000060DC                            ; ===========================================================================
000060DC                            
000060DC                            End_MoveSonic2:				; XREF: End_MoveSonic
000060DC 5500                       		subq.b	#2,d0
000060DE 6600                       		bne.s	End_MoveSonic3
000060E0 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000060E6 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000060E8 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000060EC 7000                       		moveq	#0,d0
000060EE 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000060F2 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000060F6 31C0 D014                  		move.w	d0,($FFFFD014).w
000060FA 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00006100 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00006106 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
0000610C 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00006112 4E75                       		rts	
00006114                            ; ===========================================================================
00006114                            
00006114                            End_MoveSonic3:				; XREF: End_MoveSonic
00006114 5500                       		subq.b	#2,d0
00006116 6600                       		bne.s	End_MoveSonExit
00006118 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000611C 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00006122 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00006128 4278 D024                  		clr.w	($FFFFD024).w
0000612C                            
0000612C                            End_MoveSonExit:
0000612C 4E75                       		rts	
0000612E                            ; End of function End_MoveSonic
0000612E                            
0000612E                            ; ===========================================================================
0000612E                            ; ---------------------------------------------------------------------------
0000612E                            ; Object 87 - Sonic on ending sequence
0000612E                            ; ---------------------------------------------------------------------------
0000612E                            
0000612E                            Obj87:					; XREF: Obj_Index
0000612E 7000                       		moveq	#0,d0
00006130 1028 0025                  		move.b	$25(a0),d0
00006134 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00006138 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
0000613C 4EF9 0000 0000             		jmp	DisplaySprite
00006142                            ; ===========================================================================
00006142 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00006146 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
0000614A 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
0000614E 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00006152 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00006156                            ; ===========================================================================
00006156                            
00006156                            Obj87_Main:				; XREF: Obj87_Index
00006156 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000615C 6700                       		beq.s	Obj87_Main2	; if yes, branch
0000615E 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00006164 317C 00D8 0030             		move.w	#$D8,$30(a0)
0000616A 4E75                       		rts	
0000616C                            ; ===========================================================================
0000616C                            
0000616C                            Obj87_Main2:				; XREF: Obj87_Main
0000616C 5428 0025                  		addq.b	#2,$25(a0)
00006170 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00006178 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000617E 117C 0004 0001             		move.b	#4,1(a0)
00006184 4228 0022                  		clr.b	$22(a0)
00006188 117C 0002 0018             		move.b	#2,$18(a0)
0000618E 117C 0000 001A             		move.b	#0,$1A(a0)
00006194 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
0000619A                            
0000619A                            Obj87_MakeEmlds:			; XREF: Obj87_Index
0000619A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000619E 6600                       		bne.s	Obj87_Wait
000061A0 5428 0025                  		addq.b	#2,$25(a0)
000061A4 317C 0001 001C             		move.w	#1,$1C(a0)
000061AA 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
000061B0                            
000061B0                            Obj87_Wait:
000061B0 4E75                       		rts	
000061B2                            ; ===========================================================================
000061B2                            
000061B2                            Obj87_LookUp:				; XREF: Obj87_Index
000061B2 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
000061BA 6600                       		bne.s	locret_5480
000061BC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000061C2 317C 005A 0030             		move.w	#$5A,$30(a0)
000061C8 5428 0025                  		addq.b	#2,$25(a0)
000061CC                            
000061CC                            locret_5480:
000061CC 4E75                       		rts	
000061CE                            ; ===========================================================================
000061CE                            
000061CE                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000061CE 5368 0030                  		subq.w	#1,$30(a0)
000061D2 6600                       		bne.s	Obj87_Wait2
000061D4 43F8 D400                  		lea	($FFFFD400).w,a1
000061D8 323C 00FF                  		move.w	#$FF,d1
000061DC                            
000061DC                            Obj87_ClrLoop:
000061DC 4299                       		clr.l	(a1)+
000061DE 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000061E2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000061E8 5428 0025                  		addq.b	#2,$25(a0)
000061EC 117C 0001 001C             		move.b	#1,$1C(a0)
000061F2 317C 003C 0030             		move.w	#$3C,$30(a0)
000061F8                            
000061F8                            Obj87_Wait2:
000061F8 4E75                       		rts	
000061FA                            ; ===========================================================================
000061FA                            
000061FA                            Obj87_MakeLogo:				; XREF: Obj87_Index
000061FA 5368 0030                  		subq.w	#1,$30(a0)
000061FE 6600                       		bne.s	Obj87_Wait3
00006200 5428 0025                  		addq.b	#2,$25(a0)
00006204 317C 00B4 0030             		move.w	#$B4,$30(a0)
0000620A 117C 0002 001C             		move.b	#2,$1C(a0)
00006210 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00006216                            
00006216                            Obj87_Wait3:
00006216 4E75                       		rts	
00006218                            ; ===========================================================================
00006218                            
00006218                            Obj87_Animate:				; XREF: Obj87_Index
00006218 43F9 0000 0000             		lea	(Ani_obj87).l,a1
0000621E 4EF9 0000 0000             		jmp	AnimateSprite
00006224                            ; ===========================================================================
00006224                            
00006224                            Obj87_Leap:				; XREF: Obj87_Index
00006224 5368 0030                  		subq.w	#1,$30(a0)
00006228 6600                       		bne.s	Obj87_Wait4
0000622A 5428 0025                  		addq.b	#2,$25(a0)
0000622E 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00006236 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000623C 117C 0004 0001             		move.b	#4,1(a0)
00006242 4228 0022                  		clr.b	$22(a0)
00006246 117C 0002 0018             		move.b	#2,$18(a0)
0000624C 117C 0005 001A             		move.b	#5,$1A(a0)
00006252 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00006258 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000625E 60B8                       		bra.s	Obj87_Animate
00006260                            ; ===========================================================================
00006260                            
00006260                            Obj87_Wait4:				; XREF: Obj87_Leap
00006260 4E75                       		rts	
00006262                            ; ===========================================================================
00006262                            Ani_obj87:
00006262                            	include "_anim\obj87.asm"
00006262                            ; ---------------------------------------------------------------------------
00006262                            ; Animation script - Sonic on the ending sequence
00006262                            ; ---------------------------------------------------------------------------
00006262 0000                       		dc.w byte_551C-Ani_obj87
00006264 0000                       		dc.w byte_552A-Ani_obj87
00006266 0000                       		dc.w byte_5534-Ani_obj87
00006268 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006276 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00006280 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00006288                            		even
00006288                            		even
00006288                            
00006288                            ; ===========================================================================
00006288                            ; ---------------------------------------------------------------------------
00006288                            ; Object 88 - chaos emeralds on	the ending sequence
00006288                            ; ---------------------------------------------------------------------------
00006288                            
00006288                            Obj88:					; XREF: Obj_Index
00006288 7000                       		moveq	#0,d0
0000628A 1028 0024                  		move.b	$24(a0),d0
0000628E 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00006292 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00006296 4EF9 0000 0000             		jmp	DisplaySprite
0000629C                            ; ===========================================================================
0000629C 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
0000629E 0000                       		dc.w Obj88_Move-Obj88_Index
000062A0                            ; ===========================================================================
000062A0                            
000062A0                            Obj88_Main:				; XREF: Obj88_Index
000062A0 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
000062A6 6700                       		beq.s	Obj88_Main2
000062A8 588F                       		addq.l	#4,sp
000062AA 4E75                       		rts	
000062AC                            ; ===========================================================================
000062AC                            
000062AC                            Obj88_Main2:				; XREF: Obj88_Main
000062AC 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
000062B2 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
000062B8 2248                       		movea.l	a0,a1
000062BA 7600                       		moveq	#0,d3
000062BC 7401                       		moveq	#1,d2
000062BE 7205                       		moveq	#5,d1
000062C0                            
000062C0                            Obj88_MainLoop:
000062C0 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
000062C4 5429 0024                  		addq.b	#2,$24(a1)
000062C8 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
000062D0 337C 03C5 0002             		move.w	#$3C5,2(a1)
000062D6 137C 0004 0001             		move.b	#4,1(a1)
000062DC 137C 0001 0018             		move.b	#1,$18(a1)
000062E2 3368 0008 0038             		move.w	8(a0),$38(a1)
000062E8 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000062EE 1342 001C                  		move.b	d2,$1C(a1)
000062F2 1342 001A                  		move.b	d2,$1A(a1)
000062F6 5202                       		addq.b	#1,d2
000062F8 1343 0026                  		move.b	d3,$26(a1)
000062FC 0603 002A                  		addi.b	#$2A,d3
00006300 43E9 0040                  		lea	$40(a1),a1
00006304 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00006308                            
00006308                            Obj88_Move:				; XREF: Obj88_Index
00006308 3028 003E                  		move.w	$3E(a0),d0
0000630C D168 0026                  		add.w	d0,$26(a0)
00006310 1028 0026                  		move.b	$26(a0),d0
00006314 4EB9 0000 3416             		jsr	(CalcSine).l
0000631A 7800                       		moveq	#0,d4
0000631C 1828 003C                  		move.b	$3C(a0),d4
00006320 C3C4                       		muls.w	d4,d1
00006322 E081                       		asr.l	#8,d1
00006324 C1C4                       		muls.w	d4,d0
00006326 E080                       		asr.l	#8,d0
00006328 D268 0038                  		add.w	$38(a0),d1
0000632C D068 003A                  		add.w	$3A(a0),d0
00006330 3141 0008                  		move.w	d1,8(a0)
00006334 3140 000C                  		move.w	d0,$C(a0)
00006338 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
0000633E 6700                       		beq.s	loc_55FA
00006340 0668 0020 003C             		addi.w	#$20,$3C(a0)
00006346                            
00006346                            loc_55FA:
00006346 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
0000634C 6700                       		beq.s	loc_5608
0000634E 0668 0020 003E             		addi.w	#$20,$3E(a0)
00006354                            
00006354                            loc_5608:
00006354 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
0000635A 6700                       		beq.s	locret_5614
0000635C 5368 003A                  		subq.w	#1,$3A(a0)
00006360                            
00006360                            locret_5614:
00006360 4E75                       		rts	
00006362                            ; ===========================================================================
00006362                            ; ---------------------------------------------------------------------------
00006362                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00006362                            ; ---------------------------------------------------------------------------
00006362                            
00006362                            Obj89:					; XREF: Obj_Index
00006362 7000                       		moveq	#0,d0
00006364 1028 0024                  		move.b	$24(a0),d0
00006368 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
0000636C 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00006370                            ; ===========================================================================
00006370 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00006372 0000                       		dc.w Obj89_Move-Obj89_Index
00006374 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00006376                            ; ===========================================================================
00006376                            
00006376                            Obj89_Main:				; XREF: Obj89_Index
00006376 5428 0024                  		addq.b	#2,$24(a0)
0000637A 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00006380 317C 00D8 000A             		move.w	#$D8,$A(a0)
00006386 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
0000638E 317C 05C5 0002             		move.w	#$5C5,2(a0)
00006394 117C 0000 0001             		move.b	#0,1(a0)
0000639A 117C 0000 0018             		move.b	#0,$18(a0)
000063A0                            
000063A0                            Obj89_Move:				; XREF: Obj89_Index
000063A0 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
000063A6 6700                       		beq.s	Obj89_Delay	; if yes, branch
000063A8 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
000063AE 4EB9 0000 0000             		jsr	DisplaySprite
000063B4                            ; ===========================================================================
000063B4                            
000063B4                            Obj89_Delay:				; XREF: Obj89_Move
000063B4 5428 0024                  		addq.b	#2,$24(a0)
000063B8 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
000063BE                            
000063BE                            Obj89_GotoCredits:			; XREF: Obj89_Index
000063BE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000063C2 6A00                       		bpl.s	Obj89_Display
000063C4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
000063CA                            
000063CA                            Obj89_Display:
000063CA 4EB9 0000 0000             		jsr	DisplaySprite
000063D0                            ; ===========================================================================
000063D0                            ; ---------------------------------------------------------------------------
000063D0                            ; Sprite mappings - Sonic on the ending	sequence
000063D0                            ; ---------------------------------------------------------------------------
000063D0                            Map_obj87:
000063D0                            	include "_maps\obj87.asm"
000063D0                            ; ---------------------------------------------------------------------------
000063D0                            ; Sprite mappings - Sonic on the ending	sequence
000063D0                            ; ---------------------------------------------------------------------------
000063D0 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000063D4 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000063D8 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000063DC 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000063E0 02                         byte_5690:	dc.b 2
000063E1 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000063E6 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000063EB 03                         byte_569B:	dc.b 3
000063EC FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000063F1 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000063F6 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000063FB 02                         byte_56AB:	dc.b 2
000063FC EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00006401 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00006406 02                         byte_56B6:	dc.b 2
00006407 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
0000640C FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00006411 02                         byte_56C1:	dc.b 2
00006412 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00006417 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
0000641C 03                         byte_56CC:	dc.b 3
0000641D EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00006422 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00006427 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
0000642C 07                         byte_56DC:	dc.b 7
0000642D B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00006432 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00006437 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
0000643C CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00006441 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00006446 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
0000644B EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00006450 18                         byte_5700:	dc.b $18
00006451 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00006456 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
0000645B 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00006460 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00006465 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
0000646A 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
0000646F 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00006474 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00006479 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
0000647E B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00006483 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00006488 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
0000648D C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00006492 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00006497 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
0000649C D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
000064A1 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
000064A6 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
000064AB E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
000064B0 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
000064B5 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
000064BA E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
000064BF F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
000064C4 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
000064CA 00                         		even
000064CA 00                         		even
000064CA                            
000064CA                            ; ---------------------------------------------------------------------------
000064CA                            ; Sprite mappings - chaos emeralds on the ending sequence
000064CA                            ; ---------------------------------------------------------------------------
000064CA                            Map_obj88:
000064CA                            	include "_maps\obj88.asm"
000064CA                            ; ---------------------------------------------------------------------------
000064CA                            ; Sprite mappings - chaos emeralds on the ending sequence
000064CA                            ; ---------------------------------------------------------------------------
000064CA 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
000064CE 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
000064D2 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
000064D6 0000                       		dc.w byte_57AC-Map_obj88
000064D8 01                         byte_5788:	dc.b 1
000064D9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000064DE 01                         byte_578E:	dc.b 1
000064DF F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000064E4 01                         byte_5794:	dc.b 1
000064E5 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
000064EA 01                         byte_579A:	dc.b 1
000064EB F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
000064F0 01                         byte_57A0:	dc.b 1
000064F1 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000064F6 01                         byte_57A6:	dc.b 1
000064F7 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000064FC 01                         byte_57AC:	dc.b 1
000064FD F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00006502                            		even
00006502                            		even
00006502                            
00006502                            ; ---------------------------------------------------------------------------
00006502                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00006502                            ; ---------------------------------------------------------------------------
00006502                            Map_obj89:
00006502                            	include "_maps\obj89.asm"
00006502                            ; ---------------------------------------------------------------------------
00006502                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00006502                            ; ---------------------------------------------------------------------------
00006502 0000                       		dc.w byte_57B4-Map_obj89
00006504 03                         byte_57B4:	dc.b 3
00006505 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
0000650A F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000650F F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00006514                            		even
00006514                            		even
00006514                            
00006514                            ; ===========================================================================
00006514                            ; ---------------------------------------------------------------------------
00006514                            ; Credits ending sequence
00006514                            ; ---------------------------------------------------------------------------
00006514                            
00006514                            Credits:				; XREF: GameModeArray
00006514 6100 B9A0                  		bsr.w	ClearPLC
00006518 6100 C1E4                  		bsr.w	Pal_FadeFrom
0000651C 4DF9 00C0 0004             		lea	($C00004).l,a6
00006522 3CBC 8004                  		move.w	#$8004,(a6)
00006526 3CBC 8230                  		move.w	#$8230,(a6)
0000652A 3CBC 8407                  		move.w	#$8407,(a6)
0000652E 3CBC 9001                  		move.w	#$9001,(a6)
00006532 3CBC 9200                  		move.w	#$9200,(a6)
00006536 3CBC 8B03                  		move.w	#$8B03,(a6)
0000653A 3CBC 8720                  		move.w	#$8720,(a6)
0000653E 4238 F64E                  		clr.b	($FFFFF64E).w
00006542 6100 B65C                  		bsr.w	ClearScreen
00006546 43F8 D000                  		lea	($FFFFD000).w,a1
0000654A 7000                       		moveq	#0,d0
0000654C 323C 07FF                  		move.w	#$7FF,d1
00006550                            
00006550                            Cred_ClrObjRam:
00006550 22C0                       		move.l	d0,(a1)+
00006552 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00006556                            
00006556 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00006560 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00006566 6100 B7B0                  		bsr.w	NemDec
0000656A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000656E 7000                       		moveq	#0,d0
00006570 323C 001F                  		move.w	#$1F,d1
00006574                            
00006574                            Cred_ClrPallet:
00006574 22C0                       		move.l	d0,(a1)+
00006576 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
0000657A                            
0000657A 7003                       		moveq	#3,d0
0000657C 6100 C42A                  		bsr.w	PalLoad1	; load Sonic's pallet
00006580 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00006586 4EB9 0000 0000             		jsr	ObjectsLoad
0000658C 4EB9 0000 0000             		jsr	BuildSprites
00006592 6100 0000                  		bsr.w	EndingDemoLoad
00006596 7000                       		moveq	#0,d0
00006598 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000659C E948                       		lsl.w	#4,d0
0000659E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
000065A4 45F2 0000                  		lea	(a2,d0.w),a2
000065A8 7000                       		moveq	#0,d0
000065AA 1012                       		move.b	(a2),d0
000065AC 6700                       		beq.s	loc_5862
000065AE 6100 B8A8                  		bsr.w	LoadPLC		; load level patterns
000065B2                            
000065B2                            loc_5862:
000065B2 7001                       		moveq	#1,d0
000065B4 6100 B8A2                  		bsr.w	LoadPLC		; load standard	level patterns
000065B8 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
000065BE 6100 C094                  		bsr.w	Pal_FadeTo
000065C2                            
000065C2                            Cred_WaitLoop:
000065C2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000065C8 6100 CE1A                  		bsr.w	DelayProgram
000065CC 6100 B8F6                  		bsr.w	RunPLC_RAM
000065D0 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
000065D4 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
000065D6 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
000065DA 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
000065DC 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
000065E2 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
000065E6 4E75                       		rts	
000065E8                            
000065E8                            ; ---------------------------------------------------------------------------
000065E8                            ; Ending sequence demo loading subroutine
000065E8                            ; ---------------------------------------------------------------------------
000065E8                            
000065E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065E8                            
000065E8                            
000065E8                            EndingDemoLoad:				; XREF: Credits
000065E8 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000065EC 0240 000F                  		andi.w	#$F,d0
000065F0 D040                       		add.w	d0,d0
000065F2 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
000065F6 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
000065FA 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
000065FE 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00006604 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00006606 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
0000660C 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00006612 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00006618 7000                       		moveq	#0,d0
0000661A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000661E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00006622 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00006626 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
0000662A 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00006630 6600                       		bne.s	EndDemo_Exit	; if not, branch
00006632 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00006638 45F8 FE30                  		lea	($FFFFFE30).w,a2
0000663C 303C 0008                  		move.w	#8,d0
00006640                            
00006640                            EndDemo_LampLoad:
00006640 24D9                       		move.l	(a1)+,(a2)+
00006642 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00006646                            
00006646                            EndDemo_Exit:
00006646 4E75                       		rts	
00006648                            ; End of function EndingDemoLoad
00006648                            
00006648                            ; ===========================================================================
00006648                            ; ---------------------------------------------------------------------------
00006648                            ; Levels used in the end sequence demos
00006648                            ; ---------------------------------------------------------------------------
00006648                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00006658                            
00006658                            ; ---------------------------------------------------------------------------
00006658                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00006658                            ; ---------------------------------------------------------------------------
00006658                            EndDemo_LampVar:
00006658 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
0000665A 0A00 062C 000D             		dc.w $A00, $62C, $D
00006660 0000 0000                  		dc.l 0
00006664 0000                       		dc.b 0,	0
00006666 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
0000667A 0101                       		dc.b 1,	1
0000667C                            ; ===========================================================================
0000667C                            ; ---------------------------------------------------------------------------
0000667C                            ; "TRY AGAIN" and "END"	screens
0000667C                            ; ---------------------------------------------------------------------------
0000667C                            
0000667C                            TryAgainEnd:				; XREF: Credits
0000667C 6100 B838                  		bsr.w	ClearPLC
00006680 6100 C07C                  		bsr.w	Pal_FadeFrom
00006684 4DF9 00C0 0004             		lea	($C00004).l,a6
0000668A 3CBC 8004                  		move.w	#$8004,(a6)
0000668E 3CBC 8230                  		move.w	#$8230,(a6)
00006692 3CBC 8407                  		move.w	#$8407,(a6)
00006696 3CBC 9001                  		move.w	#$9001,(a6)
0000669A 3CBC 9200                  		move.w	#$9200,(a6)
0000669E 3CBC 8B03                  		move.w	#$8B03,(a6)
000066A2 3CBC 8720                  		move.w	#$8720,(a6)
000066A6 4238 F64E                  		clr.b	($FFFFF64E).w
000066AA 6100 B4F4                  		bsr.w	ClearScreen
000066AE 43F8 D000                  		lea	($FFFFD000).w,a1
000066B2 7000                       		moveq	#0,d0
000066B4 323C 07FF                  		move.w	#$7FF,d1
000066B8                            
000066B8                            TryAg_ClrObjRam:
000066B8 22C0                       		move.l	d0,(a1)+
000066BA 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000066BE                            
000066BE 701D                       		moveq	#$1D,d0
000066C0 6100 B902                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
000066C4 43F8 FB80                  		lea	($FFFFFB80).w,a1
000066C8 7000                       		moveq	#0,d0
000066CA 323C 001F                  		move.w	#$1F,d1
000066CE                            
000066CE                            TryAg_ClrPallet:
000066CE 22C0                       		move.l	d0,(a1)+
000066D0 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
000066D4                            
000066D4 7013                       		moveq	#$13,d0
000066D6 6100 C2D0                  		bsr.w	PalLoad1	; load ending pallet
000066DA 4278 FBC0                  		clr.w	($FFFFFBC0).w
000066DE 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
000066E4 4EB9 0000 0000             		jsr	ObjectsLoad
000066EA 4EB9 0000 0000             		jsr	BuildSprites
000066F0 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
000066F6 6100 BF5C                  		bsr.w	Pal_FadeTo
000066FA                            
000066FA                            ; ---------------------------------------------------------------------------
000066FA                            ; "TRY AGAIN" and "END"	screen main loop
000066FA                            ; ---------------------------------------------------------------------------
000066FA                            TryAg_MainLoop:
000066FA 6100 B58A                  		bsr.w	PauseGame
000066FE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00006704 6100 CCDE                  		bsr.w	DelayProgram
00006708 4EB9 0000 0000             		jsr	ObjectsLoad
0000670E 4EB9 0000 0000             		jsr	BuildSprites
00006714 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000671A 6600                       		bne.s	TryAg_Exit	; if yes, branch
0000671C 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00006720 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006722 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00006728 67D0                       		beq.s	TryAg_MainLoop
0000672A                            
0000672A                            TryAg_Exit:
0000672A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00006730 4E75                       		rts	
00006732                            
00006732                            ; ===========================================================================
00006732                            ; ---------------------------------------------------------------------------
00006732                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006732                            ; ---------------------------------------------------------------------------
00006732                            
00006732                            Obj8B:					; XREF: Obj_Index
00006732 7000                       		moveq	#0,d0
00006734 1028 0024                  		move.b	$24(a0),d0
00006738 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
0000673C 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00006740 4EF9 0000 0000             		jmp	DisplaySprite
00006746                            ; ===========================================================================
00006746 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00006748 0000                       		dc.w Obj8B_Animate-Obj8B_Index
0000674A 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
0000674C 0000                       		dc.w loc_5A8E-Obj8B_Index
0000674E                            ; ===========================================================================
0000674E                            
0000674E                            Obj8B_Main:				; XREF: Obj8B_Index
0000674E 5428 0024                  		addq.b	#2,$24(a0)
00006752 317C 0120 0008             		move.w	#$120,8(a0)
00006758 317C 00F4 000A             		move.w	#$F4,$A(a0)
0000675E 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00006766 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000676C 117C 0000 0001             		move.b	#0,1(a0)
00006772 117C 0002 0018             		move.b	#2,$18(a0)
00006778 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
0000677E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00006784 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00006786 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
0000678C 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00006792 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00006798 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
0000679E                            
0000679E                            Obj8B_Animate:				; XREF: Obj8B_Index
0000679E 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
000067A4 4EF9 0000 0000             		jmp	AnimateSprite
000067AA                            ; ===========================================================================
000067AA                            
000067AA                            Obj8B_Juggle:				; XREF: Obj8B_Index
000067AA 5428 0024                  		addq.b	#2,$24(a0)
000067AE 7002                       		moveq	#2,d0
000067B0 0828 0000 001C             		btst	#0,$1C(a0)
000067B6 6700                       		beq.s	loc_5A6A
000067B8 4440                       		neg.w	d0
000067BA                            
000067BA                            loc_5A6A:
000067BA 43F8 D800                  		lea	($FFFFD800).w,a1
000067BE 7205                       		moveq	#5,d1
000067C0                            
000067C0                            loc_5A70:
000067C0 1340 003E                  		move.b	d0,$3E(a1)
000067C4 3400                       		move.w	d0,d2
000067C6 E742                       		asl.w	#3,d2
000067C8 D529 0026                  		add.b	d2,$26(a1)
000067CC 43E9 0040                  		lea	$40(a1),a1
000067D0 51C9 FFEE                  		dbf	d1,loc_5A70
000067D4 5228 001A                  		addq.b	#1,$1A(a0)
000067D8 317C 0070 0030             		move.w	#112,$30(a0)
000067DE                            
000067DE                            loc_5A8E:				; XREF: Obj8B_Index
000067DE 5368 0030                  		subq.w	#1,$30(a0)
000067E2 6A00                       		bpl.s	locret_5AA0
000067E4 0868 0000 001C             		bchg	#0,$1C(a0)
000067EA 117C 0002 0024             		move.b	#2,$24(a0)
000067F0                            
000067F0                            locret_5AA0:
000067F0 4E75                       		rts	
000067F2                            ; ===========================================================================
000067F2                            Ani_obj8B:
000067F2                            	include "_anim\obj8B.asm"
000067F2                            ; ---------------------------------------------------------------------------
000067F2                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000067F2                            ; ---------------------------------------------------------------------------
000067F2 0000                       		dc.w byte_5AA8-Ani_obj8B
000067F4 0000                       		dc.w byte_5AAC-Ani_obj8B
000067F6 0000                       		dc.w byte_5AB0-Ani_obj8B
000067F8 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
000067FC 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00006800 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00006812                            		even
00006812                            		even
00006812                            
00006812                            ; ===========================================================================
00006812                            ; ---------------------------------------------------------------------------
00006812                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00006812                            ; ---------------------------------------------------------------------------
00006812                            
00006812                            Obj8C:					; XREF: Obj_Index
00006812 7000                       		moveq	#0,d0
00006814 1028 0024                  		move.b	$24(a0),d0
00006818 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
0000681C 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00006820 4EF9 0000 0000             		jmp	DisplaySprite
00006826                            ; ===========================================================================
00006826 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00006828 0000                       		dc.w Obj8C_Move-Obj8C_Index
0000682A                            ; ===========================================================================
0000682A                            
0000682A                            Obj8C_Main:				; XREF: Obj8C_Index
0000682A 2248                       		movea.l	a0,a1
0000682C 7400                       		moveq	#0,d2
0000682E 7600                       		moveq	#0,d3
00006830 7205                       		moveq	#5,d1
00006832 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00006836                            
00006836                            Obj8C_MakeEms:				; XREF: loc_5B42
00006836 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
0000683A 5429 0024                  		addq.b	#2,$24(a1)
0000683E 237C 0000 64CA 0004        		move.l	#Map_obj88,4(a1)
00006846 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000684C 137C 0000 0001             		move.b	#0,1(a1)
00006852 137C 0001 0018             		move.b	#1,$18(a1)
00006858 337C 0104 0008             		move.w	#$104,8(a1)
0000685E 337C 0120 0038             		move.w	#$120,$38(a1)
00006864 337C 00EC 000A             		move.w	#$EC,$A(a1)
0000686A 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00006870 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006876 47F8 FE58                  		lea	($FFFFFE58).w,a3
0000687A                            
0000687A                            Obj8C_ChkEms:
0000687A 7000                       		moveq	#0,d0
0000687C 1038 FE57                  		move.b	($FFFFFE57).w,d0
00006880 5340                       		subq.w	#1,d0
00006882 6500                       		bcs.s	loc_5B42
00006884                            
00006884                            Obj8C_ChkEmLoop:
00006884 B433 0000                  		cmp.b	(a3,d0.w),d2
00006888 6600                       		bne.s	loc_5B3E
0000688A 5202                       		addq.b	#1,d2
0000688C 60EC                       		bra.s	Obj8C_ChkEms
0000688E                            ; ===========================================================================
0000688E                            
0000688E                            loc_5B3E:
0000688E 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00006892                            
00006892                            loc_5B42:
00006892 1342 001A                  		move.b	d2,$1A(a1)
00006896 5229 001A                  		addq.b	#1,$1A(a1)
0000689A 5202                       		addq.b	#1,d2
0000689C 137C 0080 0026             		move.b	#$80,$26(a1)
000068A2 1343 001E                  		move.b	d3,$1E(a1)
000068A6 1343 001F                  		move.b	d3,$1F(a1)
000068AA 0643 000A                  		addi.w	#$A,d3
000068AE 43E9 0040                  		lea	$40(a1),a1
000068B2 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
000068B6                            
000068B6                            Obj8C_Move:				; XREF: Obj8C_Index
000068B6 4A68 003E                  		tst.w	$3E(a0)
000068BA 6700                       		beq.s	locret_5BBA
000068BC 4A28 001E                  		tst.b	$1E(a0)
000068C0 6700                       		beq.s	loc_5B78
000068C2 5328 001E                  		subq.b	#1,$1E(a0)
000068C6 6600                       		bne.s	loc_5B80
000068C8                            
000068C8                            loc_5B78:
000068C8 3028 003E                  		move.w	$3E(a0),d0
000068CC D168 0026                  		add.w	d0,$26(a0)
000068D0                            
000068D0                            loc_5B80:
000068D0 1028 0026                  		move.b	$26(a0),d0
000068D4 6700                       		beq.s	loc_5B8C
000068D6 0C00 0080                  		cmpi.b	#$80,d0
000068DA 6600                       		bne.s	loc_5B96
000068DC                            
000068DC                            loc_5B8C:
000068DC 4268 003E                  		clr.w	$3E(a0)
000068E0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000068E6                            
000068E6                            loc_5B96:
000068E6 4EB9 0000 3416             		jsr	(CalcSine).l
000068EC 7800                       		moveq	#0,d4
000068EE 1828 003C                  		move.b	$3C(a0),d4
000068F2 C3C4                       		muls.w	d4,d1
000068F4 E081                       		asr.l	#8,d1
000068F6 C1C4                       		muls.w	d4,d0
000068F8 E080                       		asr.l	#8,d0
000068FA D268 0038                  		add.w	$38(a0),d1
000068FE D068 003A                  		add.w	$3A(a0),d0
00006902 3141 0008                  		move.w	d1,8(a0)
00006906 3140 000A                  		move.w	d0,$A(a0)
0000690A                            
0000690A                            locret_5BBA:
0000690A 4E75                       		rts	
0000690C                            ; ===========================================================================
0000690C                            ; ---------------------------------------------------------------------------
0000690C                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
0000690C                            ; ---------------------------------------------------------------------------
0000690C                            Map_obj8B:
0000690C                            	include "_maps\obj8B.asm"
0000690C                            ; ---------------------------------------------------------------------------
0000690C                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
0000690C                            ; ---------------------------------------------------------------------------
0000690C 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006910 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00006914 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006918 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
0000691C 08                         byte_5BCC:	dc.b 8
0000691D E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006922 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006927 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
0000692C F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006931 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006936 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000693B 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006940 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006945 08                         byte_5BF5:	dc.b 8
00006946 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
0000694B F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006950 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006955 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
0000695A 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000695F 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006964 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006969 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000696E 08                         byte_5C1E:	dc.b 8
0000696F E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006974 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006979 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
0000697E F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006983 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006988 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000698D 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006992 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006997 08                         byte_5C47:	dc.b 8
00006998 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
0000699D F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
000069A2 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
000069A7 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000069AC 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000069B1 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000069B6 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000069BB 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000069C0 0C                         byte_5C70:	dc.b $C
000069C1 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000069C6 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000069CB 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000069D0 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000069D5 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000069DA F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000069DF 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000069E4 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000069E9 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000069EE 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000069F3 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000069F8 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000069FD 0A                         byte_5CAD:	dc.b $A
000069FE D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006A03 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006A08 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006A0D D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006A12 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006A17 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006A1C 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006A21 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006A26 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006A2B 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006A30 0A                         byte_5CE0:	dc.b $A
00006A31 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006A36 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006A3B EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006A40 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006A45 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006A4A EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006A4F 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006A54 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006A59 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006A5E 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006A63 0C                         byte_5D13:	dc.b $C
00006A64 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006A69 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006A6E 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006A73 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006A78 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006A7D FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006A82 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006A87 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006A8C 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006A91 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006A96 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006A9B 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006AA0                            		even
00006AA0                            		even
00006AA0                            
00006AA0                            ; ---------------------------------------------------------------------------
00006AA0                            ; Ending sequence demos
00006AA0                            ; ---------------------------------------------------------------------------
00006AA0                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00006ACE                            		even
00006ACE                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006B0E                            		even
00006B0E                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006B3E                            		even
00006B3E                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006B6E                            		even
00006B6E                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006B8E                            		even
00006B8E                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00006BAE                            		even
00006BAE                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00006BDE                            		even
00006BDE                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006C0E                            		even
00006C0E                            
00006C0E                            ; ---------------------------------------------------------------------------
00006C0E                            ; Subroutine to	load level boundaries and start	locations
00006C0E                            ; ---------------------------------------------------------------------------
00006C0E                            
00006C0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C0E                            
00006C0E                            
00006C0E                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006C0E 7000                       		moveq	#0,d0
00006C10 11C0 F740                  		move.b	d0,($FFFFF740).w
00006C14 11C0 F741                  		move.b	d0,($FFFFF741).w
00006C18 11C0 F746                  		move.b	d0,($FFFFF746).w
00006C1C 11C0 F748                  		move.b	d0,($FFFFF748).w
00006C20 11C0 F742                  		move.b	d0,($FFFFF742).w
00006C24 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006C28 ED08                       		lsl.b	#6,d0
00006C2A E848                       		lsr.w	#4,d0
00006C2C 3200                       		move.w	d0,d1
00006C2E D040                       		add.w	d0,d0
00006C30 D041                       		add.w	d1,d0
00006C32 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006C36 3018                       		move.w	(a0)+,d0
00006C38 31C0 F730                  		move.w	d0,($FFFFF730).w
00006C3C 2018                       		move.l	(a0)+,d0
00006C3E 21C0 F728                  		move.l	d0,($FFFFF728).w
00006C42 21C0 F720                  		move.l	d0,($FFFFF720).w
00006C46 2018                       		move.l	(a0)+,d0
00006C48 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006C4C 21C0 F724                  		move.l	d0,($FFFFF724).w
00006C50 3038 F728                  		move.w	($FFFFF728).w,d0
00006C54 0640 0240                  		addi.w	#$240,d0
00006C58 31C0 F732                  		move.w	d0,($FFFFF732).w
00006C5C 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006C62 3018                       		move.w	(a0)+,d0
00006C64 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006C68 6000 0000                  		bra.w	LevSz_ChkLamp
00006C6C                            ; ===========================================================================
00006C6C                            ; ---------------------------------------------------------------------------
00006C6C                            ; Level size array and ending start location array
00006C6C                            ; ---------------------------------------------------------------------------
00006C6C                            LevelSizeArray:        ; GHZ
00006C6C 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006C78 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
00006C84 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00006C90 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00006C9C                                    ; LZ
00006C9C 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
00006CA8 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
00006CB4 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
00006CC0 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
00006CCC                                    ; MZ
00006CCC 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
00006CD8 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
00006CE4 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
00006CF0 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
00006CFC                                    ; SLZ
00006CFC 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
00006D08 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
00006D14 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
00006D20 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006D2C                                    ; SYZ
00006D2C 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00006D38 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
00006D44 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
00006D50 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
00006D5C                                    ; SBZ
00006D5C 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
00006D68 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
00006D74 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
00006D80 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006D8C                                    ; Ending
00006D8C 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
00006D98 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
00006DA4 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
00006DB0 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
00006DBC                                    ; BHZ
00006DBC 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006DC8 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
00006DD4 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00006DE0 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00006DEC                                    even
00006DEC                            
00006DEC                            ; ===========================================================================
00006DEC                            
00006DEC                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006DEC 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006DF0 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006DF2 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006DF8 3238 D008                  		move.w	($FFFFD008).w,d1
00006DFC 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006E00 6000 0000                  		bra.w	loc_60D0
00006E04                            ; ===========================================================================
00006E04                            
00006E04                            
00006E04                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006E04 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006E08 ED08                       		lsl.b	#6,d0
00006E0A E848                       		lsr.w	#4,d0
00006E0C 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006E10 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006E14 6A00 0000                  		bpl.w	LevSz_SonicPos	; if not, branch
00006E18 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006E1C 5340                       		subq.w	#1,d0
00006E1E E548                       		lsl.w	#2,d0
00006E20 43FB 0000                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006E24 6000 0000                  		bra.w	LevSz_SonicPos
00006E28                            
00006E28                            EndingStLocArray:
00006E28                            		incbin	misc\sloc_end.bin
00006E48                            		even
00006E48                            		
00006E48                            ; ===========================================================================
00006E48                            ; ---------------------------------------------------------------------------
00006E48                            ; Sonic	start location array
00006E48                            ; ---------------------------------------------------------------------------
00006E48                            StartLocArray:	incbin	misc\sloc_lev.bin
00006EC8                            		even
00006EC8                            
00006EC8                            LevSz_SonicPos:
00006EC8 7200                       		moveq	#0,d1
00006ECA 3219                       		move.w	(a1)+,d1
00006ECC 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006ED0 7000                       		moveq	#0,d0
00006ED2 3011                       		move.w	(a1),d0
00006ED4 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006ED8                            
00006ED8                            loc_60D0:				; XREF: LevSz_ChkLamp
00006ED8 0441 00A0                  		subi.w	#$A0,d1
00006EDC 6400                       		bcc.s	loc_60D8
00006EDE 7200                       		moveq	#0,d1
00006EE0                            
00006EE0                            loc_60D8:
00006EE0 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006EE4 B242                       		cmp.w	d2,d1
00006EE6 6500                       		bcs.s	loc_60E2
00006EE8 3202                       		move.w	d2,d1
00006EEA                            
00006EEA                            loc_60E2:
00006EEA 31C1 F700                  		move.w	d1,($FFFFF700).w
00006EEE 0440 0060                  		subi.w	#$60,d0
00006EF2 6400                       		bcc.s	loc_60EE
00006EF4 7000                       		moveq	#0,d0
00006EF6                            
00006EF6                            loc_60EE:
00006EF6 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006EFA 6D00                       		blt.s	loc_60F8
00006EFC 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006F00                            
00006F00                            loc_60F8:
00006F00 31C0 F704                  		move.w	d0,($FFFFF704).w
00006F04 6100 0000                  		bsr.w	BgScrollSpeed
00006F08 7000                       		moveq	#0,d0
00006F0A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006F0E E508                       		lsl.b	#2,d0
00006F10 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006F16 6000 0000                  		bra.w	LevSz_Unk
00006F1A                            
00006F1A                            ; ---------------------------------------------------------------------------
00006F1A                            ; Which	256x256	tiles contain loops or roll-tunnels
00006F1A                            ; ---------------------------------------------------------------------------
00006F1A                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006F1A                            ; loop,	loop, tunnel, tunnel
00006F1A                            ; ---------------------------------------------------------------------------
00006F1A                            LoopTileNums:	incbin	misc\loopnums.bin
00006F3A                            		even
00006F3A                            ; this is from the cwa source code i will share kaito x gakupo mpreg if this does not work i swear t ogod if this does not
00006F3A                            ; ITS GONJE HELP
00006F3A                            ; ===========================================================================
00006F3A                            
00006F3A                            LevSz_Unk:				; XREF: LevelSizeLoad
00006F3A 7000                       		moveq	#0,d0
00006F3C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006F40 E748                       		lsl.w	#3,d0
00006F42 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006F46 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006F4A 24D9                       		move.l	(a1)+,(a2)+
00006F4C 24D9                       		move.l	(a1)+,(a2)+
00006F4E 4E75                       		rts	
00006F50                            ; End of function LevelSizeLoad
00006F50                            
00006F50                            ; ===========================================================================
00006F50 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006F58 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006F60 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006F68 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006F70 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006F78 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006F80 0070 0100 0100 0100        		dc.l $700100, $1000100
00006F88                            
00006F88                            ; ---------------------------------------------------------------------------
00006F88                            ; Subroutine to	set scroll speed of some backgrounds
00006F88                            ; ---------------------------------------------------------------------------
00006F88                            
00006F88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F88                            
00006F88                            
00006F88                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006F88 4A38 FE30                  		tst.b	($FFFFFE30).w
00006F8C 6600                       		bne.s	loc_6206
00006F8E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006F92 31C0 F714                  		move.w	d0,($FFFFF714).w
00006F96 31C1 F708                  		move.w	d1,($FFFFF708).w
00006F9A 31C1 F710                  		move.w	d1,($FFFFF710).w
00006F9E 31C1 F718                  		move.w	d1,($FFFFF718).w
00006FA2                            
00006FA2                            loc_6206:
00006FA2 7400                       		moveq	#0,d2
00006FA4 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006FA8 D442                       		add.w	d2,d2
00006FAA 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006FAE 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006FB2                            ; End of function BgScrollSpeed
00006FB2                            
00006FB2                            ; ===========================================================================
00006FB2 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006FB6 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006FBA 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006FBE 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_MZ-BgScroll_Index ; MAKOTO
00006FC2                            ; ===========================================================================
00006FC2                            
00006FC2                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006FC2 6000 0000                  		bra.w	Deform_GHZ
00006FC6                            ; ===========================================================================
00006FC6                            
00006FC6                            BgScroll_LZ:				; XREF: BgScroll_Index
00006FC6 E280                       		asr.l	#1,d0
00006FC8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006FCC 4E75                       		rts	
00006FCE                            ; ===========================================================================
00006FCE                            
00006FCE                            BgScroll_MZ:				; XREF: BgScroll_Index
00006FCE 4E75                       		rts	
00006FD0                            ; ===========================================================================
00006FD0                            
00006FD0                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006FD0 E280                       		asr.l	#1,d0
00006FD2 0640 00C0                  		addi.w	#$C0,d0
00006FD6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006FDA 4E75                       		rts	
00006FDC                            ; ===========================================================================
00006FDC                            
00006FDC                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006FDC E980                       		asl.l	#4,d0
00006FDE 2400                       		move.l	d0,d2
00006FE0 E380                       		asl.l	#1,d0
00006FE2 D082                       		add.l	d2,d0
00006FE4 E080                       		asr.l	#8,d0
00006FE6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006FEA 31C0 F714                  		move.w	d0,($FFFFF714).w
00006FEE 4E75                       		rts	
00006FF0                            ; ===========================================================================
00006FF0                            
00006FF0                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006FF0 E980                       		asl.l	#4,d0
00006FF2 E380                       		asl.l	#1,d0
00006FF4 E080                       		asr.l	#8,d0
00006FF6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006FFA 4E75                       		rts	
00006FFC                            ; ===========================================================================
00006FFC                            
00006FFC                            BgScroll_End:				; XREF: BgScroll_Index
00006FFC 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00007002 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00007008 4E75                       		rts	
0000700A                            ; ===========================================================================
0000700A 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00007010 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00007016 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
0000701C 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00007022 4E75                       		rts
00007024                            
00007024                            ; ---------------------------------------------------------------------------
00007024                            ; Background layer deformation subroutines
00007024                            ; ---------------------------------------------------------------------------
00007024                            
00007024                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007024                            
00007024                            
00007024                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00007024 4A38 F744                  		tst.b	($FFFFF744).w
00007028 6700                       		beq.s	loc_628E
0000702A 4E75                       		rts	
0000702C                            ; ===========================================================================
0000702C                            
0000702C                            loc_628E:
0000702C 4278 F754                  		clr.w	($FFFFF754).w
00007030 4278 F756                  		clr.w	($FFFFF756).w
00007034 4278 F758                  		clr.w	($FFFFF758).w
00007038 4278 F75A                  		clr.w	($FFFFF75A).w
0000703C 6100 0000                  		bsr.w	ScrollHoriz
00007040 6100 0000                  		bsr.w	ScrollVertical
00007044 6100 0000                  		bsr.w	DynScrResizeLoad
00007048 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
0000704E 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00007054 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
0000705A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007060 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00007066 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
0000706C 7000                       		moveq	#0,d0
0000706E 4A38 FFF9                  		tst.b	($FFFFFFF9).w	; GMZ
00007072 6700                       		beq.s	GetDeformRoutine	; GMZ
00007074 4EF9 0000 0000             		jmp	Deform_LZ	; GMZ
0000707A                            
0000707A                            GetDeformRoutine:	; GMZ
0000707A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000707E D040                       		add.w	d0,d0
00007080 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00007084 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00007088                            ; End of function DeformBgLayer
00007088                            
00007088                            ; ===========================================================================
00007088                            ; ---------------------------------------------------------------------------
00007088                            ; Offset index for background layer deformation	code
00007088                            ; ---------------------------------------------------------------------------
00007088 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000708C 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007090 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007094 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_BHZ-Deform_Index ; MAKOTO
00007098                            ; ---------------------------------------------------------------------------
00007098                            ; Green	Hill Zone background layer deformation code
00007098                            ; ---------------------------------------------------------------------------
00007098                            
00007098                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007098                            
00007098                            
00007098                            Deform_GHZ:				; XREF: Deform_Index
00007098 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000709C 48C4                       		ext.l	d4
0000709E EB84                       		asl.l	#5,d4
000070A0 2204                       		move.l	d4,d1
000070A2 E384                       		asl.l	#1,d4
000070A4 D881                       		add.l	d1,d4
000070A6 7A00                       		moveq	#0,d5
000070A8 6100 0000                  		bsr.w	ScrollBlock1
000070AC 6100 0000                  		bsr.w	ScrollBlock4
000070B0 43F8 CC00                  		lea	($FFFFCC00).w,a1
000070B4 3038 F704                  		move.w	($FFFFF704).w,d0
000070B8 0240 07FF                  		andi.w	#$7FF,d0
000070BC EA48                       		lsr.w	#5,d0
000070BE 4440                       		neg.w	d0
000070C0 0640 0026                  		addi.w	#$26,d0
000070C4 31C0 F714                  		move.w	d0,($FFFFF714).w
000070C8 3800                       		move.w	d0,d4
000070CA 6100 0000                  		bsr.w	ScrollBlock3
000070CE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000070D4 323C 006F                  		move.w	#$6F,d1
000070D8 9244                       		sub.w	d4,d1
000070DA 3038 F700                  		move.w	($FFFFF700).w,d0
000070DE 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000070E4 6600                       		bne.s	loc_633C
000070E6 7000                       		moveq	#0,d0
000070E8                            
000070E8                            loc_633C:
000070E8 4440                       		neg.w	d0
000070EA 4840                       		swap	d0
000070EC 3038 F708                  		move.w	($FFFFF708).w,d0
000070F0 4440                       		neg.w	d0
000070F2                            
000070F2                            loc_6346:
000070F2 22C0                       		move.l	d0,(a1)+
000070F4 51C9 FFFC                  		dbf	d1,loc_6346
000070F8 323C 0027                  		move.w	#$27,d1
000070FC 3038 F710                  		move.w	($FFFFF710).w,d0
00007100 4440                       		neg.w	d0
00007102                            
00007102                            loc_6356:
00007102 22C0                       		move.l	d0,(a1)+
00007104 51C9 FFFC                  		dbf	d1,loc_6356
00007108 3038 F710                  		move.w	($FFFFF710).w,d0
0000710C 0640 0000                  		addi.w	#0,d0
00007110 3438 F700                  		move.w	($FFFFF700).w,d2
00007114 0642 FE00                  		addi.w	#-$200,d2
00007118 9440                       		sub.w	d0,d2
0000711A 48C2                       		ext.l	d2
0000711C E182                       		asl.l	#8,d2
0000711E 85FC 0068                  		divs.w	#$68,d2
00007122 48C2                       		ext.l	d2
00007124 E182                       		asl.l	#8,d2
00007126 7600                       		moveq	#0,d3
00007128 3600                       		move.w	d0,d3
0000712A 323C 0047                  		move.w	#$47,d1
0000712E D244                       		add.w	d4,d1
00007130                            
00007130                            loc_6384:
00007130 3003                       		move.w	d3,d0
00007132 4440                       		neg.w	d0
00007134 22C0                       		move.l	d0,(a1)+
00007136 4843                       		swap	d3
00007138 D682                       		add.l	d2,d3
0000713A 4843                       		swap	d3
0000713C 51C9 FFF2                  		dbf	d1,loc_6384
00007140 4E75                       		rts	
00007142                            ; End of function Deform_GHZ
00007142                            
00007142                            ; ---------------------------------------------------------------------------
00007142                            ; Labyrinth Zone background layer deformation code
00007142                            ; ---------------------------------------------------------------------------
00007142                            
00007142                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007142                            
00007142                            
00007142                            Deform_LZ:				; XREF: Deform_Index
00007142 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007146 48C4                       		ext.l	d4
00007148 EF84                       		asl.l	#7,d4
0000714A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000714E 48C5                       		ext.l	d5
00007150 EF85                       		asl.l	#7,d5
00007152 6100 0000                  		bsr.w	ScrollBlock1
00007156 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000715C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007160 323C 00DF                  		move.w	#$DF,d1
00007164 3038 F700                  		move.w	($FFFFF700).w,d0
00007168 4440                       		neg.w	d0
0000716A 4840                       		swap	d0
0000716C 3038 F708                  		move.w	($FFFFF708).w,d0
00007170 4440                       		neg.w	d0
00007172                            
00007172                            loc_63C6:
00007172 22C0                       		move.l	d0,(a1)+
00007174 51C9 FFFC                  		dbf	d1,loc_63C6
00007178 3038 F646                  		move.w	($FFFFF646).w,d0
0000717C 9078 F704                  		sub.w	($FFFFF704).w,d0
00007180 4E75                       		rts	
00007182                            ; End of function Deform_LZ
00007182                            
00007182                            ; ---------------------------------------------------------------------------
00007182                            ; Marble Zone background layer deformation code
00007182                            ; ---------------------------------------------------------------------------
00007182                            
00007182                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007182                            
00007182                            
00007182                            Deform_MZ:				; XREF: Deform_Index
00007182 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007186 48C4                       		ext.l	d4
00007188 ED84                       		asl.l	#6,d4
0000718A 2204                       		move.l	d4,d1
0000718C E384                       		asl.l	#1,d4
0000718E D881                       		add.l	d1,d4
00007190 7A00                       		moveq	#0,d5
00007192 6100 0000                  		bsr.w	ScrollBlock1
00007196 303C 0200                  		move.w	#$200,d0
0000719A 3238 F704                  		move.w	($FFFFF704).w,d1
0000719E 0441 01C8                  		subi.w	#$1C8,d1
000071A2 6500                       		bcs.s	loc_6402
000071A4 3401                       		move.w	d1,d2
000071A6 D241                       		add.w	d1,d1
000071A8 D242                       		add.w	d2,d1
000071AA E441                       		asr.w	#2,d1
000071AC D041                       		add.w	d1,d0
000071AE                            
000071AE                            loc_6402:
000071AE 31C0 F714                  		move.w	d0,($FFFFF714).w
000071B2 6100 0000                  		bsr.w	ScrollBlock3
000071B6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000071BC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000071C0 323C 00DF                  		move.w	#$DF,d1
000071C4 3038 F700                  		move.w	($FFFFF700).w,d0
000071C8 4440                       		neg.w	d0
000071CA 4840                       		swap	d0
000071CC 3038 F708                  		move.w	($FFFFF708).w,d0
000071D0 4440                       		neg.w	d0
000071D2                            
000071D2                            loc_6426:
000071D2 22C0                       		move.l	d0,(a1)+
000071D4 51C9 FFFC                  		dbf	d1,loc_6426
000071D8 4E75                       		rts	
000071DA                            ; End of function Deform_MZ
000071DA                            
000071DA                            ; ---------------------------------------------------------------------------
000071DA                            ; Star Light Zone background layer deformation code
000071DA                            ; ---------------------------------------------------------------------------
000071DA                            
000071DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071DA                            
000071DA                            
000071DA                            Deform_SLZ:				; XREF: Deform_Index
000071DA 3838 F73A                  		move.w	($FFFFF73A).w,d4
000071DE 48C4                       		ext.l	d4
000071E0 EB84                       		asl.l	#5,d4
000071E2 2204                       		move.l	d4,d1
000071E4 E384                       		asl.l	#1,d4
000071E6 D881                       		add.l	d1,d4
000071E8 7A00                       		moveq	#0,d5
000071EA 6100 0000                  		bsr.w	ScrollBlock1
000071EE 6100 0000                  		bsr.w	ScrollBlock3
000071F2 43F8 CC00                  		lea	($FFFFCC00).w,a1
000071F6                            	;	move.w	($FFFFF704).w,d0
000071F6                            	;	andi.w	#$7FF,d0
000071F6 EA48                       		lsr.w	#5,d0
000071F8 4440                       		neg.w	d0
000071FA 0640 0026                  		addi.w	#$26,d0
000071FE 31C0 F714                  		move.w	d0,($FFFFF714).w
00007202 3800                       		move.w	d0,d4
00007204                            	;	bsr.w	ScrollBlock3
00007204 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
0000720A 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
0000720E                            
0000720E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007212 4440                       		neg.w	d0			; negate (positive to negative)
00007214 4840                       		swap	d0			; send to the left side of d0
00007216 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000721A 45F8 A800                  		lea	($FFFFA800).w,a2
0000721E 069A 0000 5000             		addi.l	#$5000,(a2)+
00007224 069A 0000 C000             		addi.l	#$C000,(a2)+
0000722A 3038 A800                  		move.w	($FFFFA800).w,d0
0000722E 4440                       		neg.w	d0			; negate (positive to negative)
00007230 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00007232 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007236                            slz_DeformLoop_1:
00007236 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007238 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
0000723C                            
0000723C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007240 4440                       		neg.w	d0			; negate (positive to negative)
00007242 4840                       		swap	d0			; send to the left side of d0
00007244 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007248 45F8 A800                  		lea	($FFFFA800).w,a2
0000724C 069A 0000 5000             		addi.l	#$5000,(a2)+
00007252 069A 0000 C000             		addi.l	#$C000,(a2)+
00007258 3038 A800                  		move.w	($FFFFA800).w,d0
0000725C 4440                       		neg.w	d0			; negate (positive to negative)
0000725E E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00007260 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007264                            slz_DeformLoop_2:
00007264 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007266 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
0000726A                            
0000726A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000726E 4440                       		neg.w	d0			; negate (positive to negative)
00007270 4840                       		swap	d0			; send to the left side of d0
00007272 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007276 45F8 A800                  		lea	($FFFFA800).w,a2
0000727A 069A 0000 5000             		addi.l	#$5000,(a2)+
00007280 069A 0000 C000             		addi.l	#$C000,(a2)+
00007286 3038 A800                  		move.w	($FFFFA800).w,d0
0000728A 4440                       		neg.w	d0			; negate (positive to negative)
0000728C E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
0000728E 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007292                            slz_DeformLoop_3:
00007292 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007294 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00007298                            
00007298 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000729C 4440                       		neg.w	d0			; negate (positive to negative)
0000729E 4840                       		swap	d0			; send to the left side of d0
000072A0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000072A4 45F8 A800                  		lea	($FFFFA800).w,a2
000072A8 069A 0000 5000             		addi.l	#$5000,(a2)+
000072AE 069A 0000 C000             		addi.l	#$C000,(a2)+
000072B4 3038 A800                  		move.w	($FFFFA800).w,d0
000072B8 4440                       		neg.w	d0			; negate (positive to negative)
000072BA E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000072BC 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000072C0                            slz_DeformLoop_4:
000072C0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000072C2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
000072C6                            
000072C6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000072CA 4440                       		neg.w	d0			; negate (positive to negative)
000072CC 4840                       		swap	d0			; send to the left side of d0
000072CE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000072D2 45F8 A800                  		lea	($FFFFA800).w,a2
000072D6 069A 0000 5000             		addi.l	#$5000,(a2)+
000072DC 069A 0000 C000             		addi.l	#$C000,(a2)+
000072E2 3038 A800                  		move.w	($FFFFA800).w,d0
000072E6 4440                       		neg.w	d0			; negate (positive to negative)
000072E8 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
000072EA 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000072EE                            slz_DeformLoop_5:
000072EE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000072F0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
000072F4                            
000072F4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000072F8 4440                       		neg.w	d0			; negate (positive to negative)
000072FA 4840                       		swap	d0			; send to the left side of d0
000072FC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007300 4440                       		neg.w	d0			; negate (positive to negative)
00007302 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00007304 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007308                            slz_DeformLoop_6:
00007308 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000730A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
0000730E                            
0000730E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007312 4440                       		neg.w	d0			; negate (positive to negative)
00007314 4840                       		swap	d0			; send to the left side of d0
00007316 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000731A 4440                       		neg.w	d0			; negate (positive to negative)
0000731C EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
0000731E 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007322                            slz_DeformLoop_7:
00007322 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007324 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00007328                            
00007328 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000732C 4440                       		neg.w	d0			; negate (positive to negative)
0000732E 4840                       		swap	d0			; send to the left side of d0
00007330 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007334 4440                       		neg.w	d0			; negate (positive to negative)
00007336 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00007338 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000733C                            slz_DeformLoop_8:
0000733C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000733E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00007342                            
00007342 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007346 4440                       		neg.w	d0			; negate (positive to negative)
00007348 4840                       		swap	d0			; send to the left side of d0
0000734A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000734E 4440                       		neg.w	d0			; negate (positive to negative)
00007350 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00007352 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007356                            slz_DeformLoop_9:
00007356 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007358 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
0000735C                            
0000735C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007360 4440                       		neg.w	d0			; negate (positive to negative)
00007362 4840                       		swap	d0			; send to the left side of d0
00007364 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007368 4440                       		neg.w	d0			; negate (positive to negative)
0000736A E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
0000736C 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007370                            slz_DeformLoop_10:
00007370 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007372 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00007376                            
00007376 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000737A 4440                       		neg.w	d0			; negate (positive to negative)
0000737C 4840                       		swap	d0			; send to the left side of d0
0000737E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007382 4440                       		neg.w	d0			; negate (positive to negative)
00007384 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00007386 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000738A                            slz_DeformLoop_11:
0000738A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000738C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00007390                            
00007390 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007394 4440                       		neg.w	d0			; negate (positive to negative)
00007396 4840                       		swap	d0			; send to the left side of d0
00007398 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000739C 4440                       		neg.w	d0			; negate (positive to negative)
0000739E E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000073A0 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000073A4                            slz_DeformLoop_12:
000073A4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000073A6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
000073AA                            
000073AA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000073AE 4440                       		neg.w	d0			; negate (positive to negative)
000073B0 4840                       		swap	d0			; send to the left side of d0
000073B2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000073B6 4440                       		neg.w	d0			; negate (positive to negative)
000073B8 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000073BA 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000073BE                            slz_DeformLoop_13:
000073BE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000073C0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
000073C4 4E75                       		rts	
000073C6                            ; End of function Deform_SLZ
000073C6 4E75                       		rts	
000073C8                            ; End of function Deform_SLZ_2
000073C8                            
000073C8                            ; ---------------------------------------------------------------------------
000073C8                            ; Spring Yard Zone background layer deformation	code
000073C8                            ; ---------------------------------------------------------------------------
000073C8                            
000073C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073C8                            
000073C8                            
000073C8                            Deform_SYZ:				; XREF: Deform_Index
000073C8 3838 F73A                  		move.w	($FFFFF73A).w,d4
000073CC 48C4                       		ext.l	d4
000073CE ED84                       		asl.l	#6,d4
000073D0 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000073D4 48C5                       		ext.l	d5
000073D6 E985                       		asl.l	#4,d5
000073D8 2205                       		move.l	d5,d1
000073DA E385                       		asl.l	#1,d5
000073DC DA81                       		add.l	d1,d5
000073DE 6100 0000                  		bsr.w	ScrollBlock1
000073E2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000073E8 43F8 CC00                  		lea	($FFFFCC00).w,a1
000073EC 323C 00DF                  		move.w	#$DF,d1
000073F0 3038 F700                  		move.w	($FFFFF700).w,d0
000073F4 4440                       		neg.w	d0
000073F6 4840                       		swap	d0
000073F8 3038 F708                  		move.w	($FFFFF708).w,d0
000073FC 4440                       		neg.w	d0
000073FE                            
000073FE                            loc_653C:
000073FE 22C0                       		move.l	d0,(a1)+
00007400 51C9 FFFC                  		dbf	d1,loc_653C
00007404 4E75                       		rts	
00007406                            ; End of function Deform_SYZ
00007406                            
00007406                            ; ---------------------------------------------------------------------------
00007406                            ; Scrap	Brain Zone background layer deformation	code
00007406                            ; ---------------------------------------------------------------------------
00007406                            
00007406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007406                            
00007406                            
00007406                            Deform_SBZ:				; XREF: Deform_Index
00007406 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000740A 48C4                       		ext.l	d4
0000740C ED84                       		asl.l	#6,d4
0000740E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007412 48C5                       		ext.l	d5
00007414 E985                       		asl.l	#4,d5
00007416 E385                       		asl.l	#1,d5
00007418 6100 0000                  		bsr.w	ScrollBlock1
0000741C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007422 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007426 323C 00DF                  		move.w	#$DF,d1
0000742A 3038 F700                  		move.w	($FFFFF700).w,d0
0000742E 4440                       		neg.w	d0
00007430 4840                       		swap	d0
00007432 3038 F708                  		move.w	($FFFFF708).w,d0
00007436 4440                       		neg.w	d0
00007438                            
00007438                            loc_6576:
00007438 22C0                       		move.l	d0,(a1)+
0000743A 51C9 FFFC                  		dbf	d1,loc_6576
0000743E 4E75                       		rts	
00007440                            ; End of function Deform_SBZ
00007440                            ; ---------------------------------------------------------------------------
00007440                            ; Makoto Zone background layer deformation code
00007440                            ; ---------------------------------------------------------------------------
00007440                            
00007440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007440                            
00007440                            
00007440                            Deform_BHZ:				; XREF: Deform_Index
00007440 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007444 48C4                       		ext.l	d4
00007446 E984                       		asl.l	#4,d4
00007448 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000744C 48C5                       		ext.l	d5
0000744E E985                       		asl.l	#4,d5
00007450 7A00                       		moveq	#0,d5	; reset bg position in title screen
00007452 6100 0000                  		bsr.w	ScrollBlock1
00007456 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000745C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007460 323C 00DF                  		move.w	#$DF,d1
00007464 3038 F700                  		move.w	($FFFFF700).w,d0
00007468 4440                       		neg.w	d0
0000746A 4840                       		swap	d0
0000746C 3038 F708                  		move.w	($FFFFF708).w,d0
00007470 4440                       		neg.w	d0
00007472                            
00007472                            loc_63COCK6:
00007472 22C0                       		move.l	d0,(a1)+
00007474 51C9 FFFC                  		dbf	d1,loc_63COCK6
00007478 3038 F646                  		move.w	($FFFFF646).w,d0
0000747C 9078 F704                  		sub.w	($FFFFF704).w,d0
00007480 4E75                       		rts	
00007482                            ; End of function Deform_BHZ
00007482                            ; ---------------------------------------------------------------------------
00007482                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007482                            ; ---------------------------------------------------------------------------
00007482                            
00007482                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007482                            
00007482                            
00007482                            ScrollHoriz:				; XREF: DeformBgLayer
00007482 3838 F700                  		move.w	($FFFFF700).w,d4
00007486 6100                       		bsr.s	ScrollHoriz2
00007488 3038 F700                  		move.w	($FFFFF700).w,d0
0000748C 0240 0010                  		andi.w	#$10,d0
00007490 1238 F74A                  		move.b	($FFFFF74A).w,d1
00007494 B300                       		eor.b	d1,d0
00007496 6600                       		bne.s	locret_65B0
00007498 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
0000749E 3038 F700                  		move.w	($FFFFF700).w,d0
000074A2 9044                       		sub.w	d4,d0
000074A4 6A00                       		bpl.s	loc_65AA
000074A6 08F8 0002 F754             		bset	#2,($FFFFF754).w
000074AC 4E75                       		rts	
000074AE                            ; ===========================================================================
000074AE                            
000074AE                            loc_65AA:
000074AE 08F8 0003 F754             		bset	#3,($FFFFF754).w
000074B4                            
000074B4                            locret_65B0:
000074B4 4E75                       		rts	
000074B6                            ; End of function ScrollHoriz
000074B6                            
000074B6                            
000074B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074B6                            
000074B6                            
000074B6                            ScrollHoriz2:				; XREF: ScrollHoriz
000074B6 3038 D008                  		move.w	($FFFFD008).w,d0
000074BA 9078 F700                  		sub.w	($FFFFF700).w,d0
000074BE 0440 0090                  		subi.w	#$90,d0
000074C2 6500                       		bcs.s	loc_65F6
000074C4 0440 0010                  		subi.w	#$10,d0
000074C8 6400                       		bcc.s	loc_65CC
000074CA 4278 F73A                  		clr.w	($FFFFF73A).w
000074CE 4E75                       		rts	
000074D0                            ; ===========================================================================
000074D0                            
000074D0                            loc_65CC:
000074D0 0C40 0010                  		cmpi.w	#$10,d0
000074D4 6500                       		bcs.s	loc_65D6
000074D6 303C 0010                  		move.w	#$10,d0
000074DA                            
000074DA                            loc_65D6:
000074DA D078 F700                  		add.w	($FFFFF700).w,d0
000074DE B078 F72A                  		cmp.w	($FFFFF72A).w,d0
000074E2 6D00                       		blt.s	loc_65E4
000074E4 3038 F72A                  		move.w	($FFFFF72A).w,d0
000074E8                            
000074E8                            loc_65E4:
000074E8 3200                       		move.w	d0,d1
000074EA 9278 F700                  		sub.w	($FFFFF700).w,d1
000074EE E141                       		asl.w	#8,d1
000074F0 31C0 F700                  		move.w	d0,($FFFFF700).w
000074F4 31C1 F73A                  		move.w	d1,($FFFFF73A).w
000074F8 4E75                       		rts	
000074FA                            ; ===========================================================================
000074FA                            
000074FA                            loc_65F6:				; XREF: ScrollHoriz2
000074FA D078 F700                  		add.w	($FFFFF700).w,d0
000074FE B078 F728                  		cmp.w	($FFFFF728).w,d0
00007502 6EE4                       		bgt.s	loc_65E4
00007504 3038 F728                  		move.w	($FFFFF728).w,d0
00007508 60DE                       		bra.s	loc_65E4
0000750A                            ; End of function ScrollHoriz2
0000750A                            
0000750A                            ; ===========================================================================
0000750A 4A40                       		tst.w	d0
0000750C 6A00                       		bpl.s	loc_6610
0000750E 303C FFFE                  		move.w	#-2,d0
00007512 60E6                       		bra.s	loc_65F6
00007514                            ; ===========================================================================
00007514                            
00007514                            loc_6610:
00007514 303C 0002                  		move.w	#2,d0
00007518 60B6                       		bra.s	loc_65CC
0000751A                            
0000751A                            ; ---------------------------------------------------------------------------
0000751A                            ; Subroutine to	scroll the level vertically as Sonic moves
0000751A                            ; ---------------------------------------------------------------------------
0000751A                            
0000751A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000751A                            
0000751A                            
0000751A                            ScrollVertical:				; XREF: DeformBgLayer
0000751A 7200                       		moveq	#0,d1
0000751C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00007520 9078 F704                  		sub.w	($FFFFF704).w,d0
00007524 0838 0002 D022             		btst	#2,($FFFFD022).w
0000752A 6700                       		beq.s	loc_662A
0000752C 5B40                       		subq.w	#5,d0
0000752E                            
0000752E                            loc_662A:
0000752E 0838 0001 D022             		btst	#1,($FFFFD022).w
00007534 6700                       		beq.s	loc_664A
00007536 0640 0020                  		addi.w	#$20,d0
0000753A 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000753E 6500                       		bcs.s	loc_6696
00007540 0440 0040                  		subi.w	#$40,d0
00007544 6400                       		bcc.s	loc_6696
00007546 4A38 F75C                  		tst.b	($FFFFF75C).w
0000754A 6600                       		bne.s	loc_66A8
0000754C 6000                       		bra.s	loc_6656
0000754E                            ; ===========================================================================
0000754E                            
0000754E                            loc_664A:
0000754E 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00007552 6600                       		bne.s	loc_665C
00007554 4A38 F75C                  		tst.b	($FFFFF75C).w
00007558 6600                       		bne.s	loc_66A8
0000755A                            
0000755A                            loc_6656:
0000755A 4278 F73C                  		clr.w	($FFFFF73C).w
0000755E 4E75                       		rts	
00007560                            ; ===========================================================================
00007560                            
00007560                            loc_665C:
00007560 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00007566 6600                       		bne.s	loc_6684
00007568 3238 D014                  		move.w	($FFFFD014).w,d1
0000756C 6A00                       		bpl.s	loc_666C
0000756E 4441                       		neg.w	d1
00007570                            
00007570                            loc_666C:
00007570 0C41 0800                  		cmpi.w	#$800,d1
00007574 6400                       		bcc.s	loc_6696
00007576 323C 0600                  		move.w	#$600,d1
0000757A 0C40 0006                  		cmpi.w	#6,d0
0000757E 6E00                       		bgt.s	loc_66F6
00007580 0C40 FFFA                  		cmpi.w	#-6,d0
00007584 6D00                       		blt.s	loc_66C0
00007586 6000                       		bra.s	loc_66AE
00007588                            ; ===========================================================================
00007588                            
00007588                            loc_6684:
00007588 323C 0200                  		move.w	#$200,d1
0000758C 0C40 0002                  		cmpi.w	#2,d0
00007590 6E00                       		bgt.s	loc_66F6
00007592 0C40 FFFE                  		cmpi.w	#-2,d0
00007596 6D00                       		blt.s	loc_66C0
00007598 6000                       		bra.s	loc_66AE
0000759A                            ; ===========================================================================
0000759A                            
0000759A                            loc_6696:
0000759A 323C 1000                  		move.w	#$1000,d1
0000759E 0C40 0010                  		cmpi.w	#$10,d0
000075A2 6E00                       		bgt.s	loc_66F6
000075A4 0C40 FFF0                  		cmpi.w	#-$10,d0
000075A8 6D00                       		blt.s	loc_66C0
000075AA 6000                       		bra.s	loc_66AE
000075AC                            ; ===========================================================================
000075AC                            
000075AC                            loc_66A8:
000075AC 7000                       		moveq	#0,d0
000075AE 11C0 F75C                  		move.b	d0,($FFFFF75C).w
000075B2                            
000075B2                            loc_66AE:
000075B2 7200                       		moveq	#0,d1
000075B4 3200                       		move.w	d0,d1
000075B6 D278 F704                  		add.w	($FFFFF704).w,d1
000075BA 4A40                       		tst.w	d0
000075BC 6A00 0000                  		bpl.w	loc_6700
000075C0 6000 0000                  		bra.w	loc_66CC
000075C4                            ; ===========================================================================
000075C4                            
000075C4                            loc_66C0:
000075C4 4441                       		neg.w	d1
000075C6 48C1                       		ext.l	d1
000075C8 E181                       		asl.l	#8,d1
000075CA D2B8 F704                  		add.l	($FFFFF704).w,d1
000075CE 4841                       		swap	d1
000075D0                            
000075D0                            loc_66CC:
000075D0 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
000075D4 6E00                       		bgt.s	loc_6724
000075D6 0C41 FF00                  		cmpi.w	#-$100,d1
000075DA 6E00                       		bgt.s	loc_66F0
000075DC 0241 07FF                  		andi.w	#$7FF,d1
000075E0 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000075E6 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
000075EC 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000075F2 6000                       		bra.s	loc_6724
000075F4                            ; ===========================================================================
000075F4                            
000075F4                            loc_66F0:
000075F4 3238 F72C                  		move.w	($FFFFF72C).w,d1
000075F8 6000                       		bra.s	loc_6724
000075FA                            ; ===========================================================================
000075FA                            
000075FA                            loc_66F6:
000075FA 48C1                       		ext.l	d1
000075FC E181                       		asl.l	#8,d1
000075FE D2B8 F704                  		add.l	($FFFFF704).w,d1
00007602 4841                       		swap	d1
00007604                            
00007604                            loc_6700:
00007604 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00007608 6D00                       		blt.s	loc_6724
0000760A 0441 0800                  		subi.w	#$800,d1
0000760E 6500                       		bcs.s	loc_6720
00007610 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00007616 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
0000761C 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00007622 6000                       		bra.s	loc_6724
00007624                            ; ===========================================================================
00007624                            
00007624                            loc_6720:
00007624 3238 F72E                  		move.w	($FFFFF72E).w,d1
00007628                            
00007628                            loc_6724:
00007628 3838 F704                  		move.w	($FFFFF704).w,d4
0000762C 4841                       		swap	d1
0000762E 2601                       		move.l	d1,d3
00007630 96B8 F704                  		sub.l	($FFFFF704).w,d3
00007634 E09B                       		ror.l	#8,d3
00007636 31C3 F73C                  		move.w	d3,($FFFFF73C).w
0000763A 21C1 F704                  		move.l	d1,($FFFFF704).w
0000763E 3038 F704                  		move.w	($FFFFF704).w,d0
00007642 0240 0010                  		andi.w	#$10,d0
00007646 1238 F74B                  		move.b	($FFFFF74B).w,d1
0000764A B300                       		eor.b	d1,d0
0000764C 6600                       		bne.s	locret_6766
0000764E 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00007654 3038 F704                  		move.w	($FFFFF704).w,d0
00007658 9044                       		sub.w	d4,d0
0000765A 6A00                       		bpl.s	loc_6760
0000765C 08F8 0000 F754             		bset	#0,($FFFFF754).w
00007662 4E75                       		rts	
00007664                            ; ===========================================================================
00007664                            
00007664                            loc_6760:
00007664 08F8 0001 F754             		bset	#1,($FFFFF754).w
0000766A                            
0000766A                            locret_6766:
0000766A 4E75                       		rts	
0000766C                            ; End of function ScrollVertical
0000766C                            
0000766C                            
0000766C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000766C                            
0000766C                            
0000766C                            ScrollBlock1:				; XREF: Deform_GHZ; et al
0000766C 2438 F708                  		move.l	($FFFFF708).w,d2
00007670 2002                       		move.l	d2,d0
00007672 D084                       		add.l	d4,d0
00007674 21C0 F708                  		move.l	d0,($FFFFF708).w
00007678 2200                       		move.l	d0,d1
0000767A 4841                       		swap	d1
0000767C 0241 0010                  		andi.w	#$10,d1
00007680 1638 F74C                  		move.b	($FFFFF74C).w,d3
00007684 B701                       		eor.b	d3,d1
00007686 6600                       		bne.s	loc_679C
00007688 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000768E 9082                       		sub.l	d2,d0
00007690 6A00                       		bpl.s	loc_6796
00007692 08F8 0002 F756             		bset	#2,($FFFFF756).w
00007698 6000                       		bra.s	loc_679C
0000769A                            ; ===========================================================================
0000769A                            
0000769A                            loc_6796:
0000769A 08F8 0003 F756             		bset	#3,($FFFFF756).w
000076A0                            
000076A0                            loc_679C:
000076A0 2638 F70C                  		move.l	($FFFFF70C).w,d3
000076A4 2003                       		move.l	d3,d0
000076A6 D085                       		add.l	d5,d0
000076A8 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000076AC 2200                       		move.l	d0,d1
000076AE 4841                       		swap	d1
000076B0 0241 0010                  		andi.w	#$10,d1
000076B4 1438 F74D                  		move.b	($FFFFF74D).w,d2
000076B8 B501                       		eor.b	d2,d1
000076BA 6600                       		bne.s	locret_67D0
000076BC 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000076C2 9083                       		sub.l	d3,d0
000076C4 6A00                       		bpl.s	loc_67CA
000076C6 08F8 0000 F756             		bset	#0,($FFFFF756).w
000076CC 4E75                       		rts	
000076CE                            ; ===========================================================================
000076CE                            
000076CE                            loc_67CA:
000076CE 08F8 0001 F756             		bset	#1,($FFFFF756).w
000076D4                            
000076D4                            locret_67D0:
000076D4 4E75                       		rts	
000076D6                            ; End of function ScrollBlock1
000076D6                            
000076D6                            
000076D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076D6                            
000076D6                            
000076D6                            ScrollBlock2:				; XREF: Deform_SLZ
000076D6 2438 F708                  		move.l	($FFFFF708).w,d2
000076DA 2002                       		move.l	d2,d0
000076DC D084                       		add.l	d4,d0
000076DE 21C0 F708                  		move.l	d0,($FFFFF708).w
000076E2 2638 F70C                  		move.l	($FFFFF70C).w,d3
000076E6 2003                       		move.l	d3,d0
000076E8 D085                       		add.l	d5,d0
000076EA 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000076EE 2200                       		move.l	d0,d1
000076F0 4841                       		swap	d1
000076F2 0241 0010                  		andi.w	#$10,d1
000076F6 1438 F74D                  		move.b	($FFFFF74D).w,d2
000076FA B501                       		eor.b	d2,d1
000076FC 6600                       		bne.s	locret_6812
000076FE 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007704 9083                       		sub.l	d3,d0
00007706 6A00                       		bpl.s	loc_680C
00007708 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000770E 4E75                       		rts	
00007710                            ; ===========================================================================
00007710                            
00007710                            loc_680C:
00007710 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007716                            
00007716                            locret_6812:
00007716 4E75                       		rts	
00007718                            ; End of function ScrollBlock2
00007718                            
00007718                            
00007718                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007718                            
00007718                            
00007718                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00007718 3638 F70C                  		move.w	($FFFFF70C).w,d3
0000771C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007720 3200                       		move.w	d0,d1
00007722 0241 0010                  		andi.w	#$10,d1
00007726 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000772A B501                       		eor.b	d2,d1
0000772C 6600                       		bne.s	locret_6842
0000772E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007734 9043                       		sub.w	d3,d0
00007736 6A00                       		bpl.s	loc_683C
00007738 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000773E 4E75                       		rts	
00007740                            ; ===========================================================================
00007740                            
00007740                            loc_683C:
00007740 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007746                            
00007746                            locret_6842:
00007746 4E75                       		rts	
00007748                            ; End of function ScrollBlock3
00007748                            
00007748                            
00007748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007748                            
00007748                            
00007748                            ScrollBlock4:				; XREF: Deform_GHZ
00007748 3438 F710                  		move.w	($FFFFF710).w,d2
0000774C 3638 F714                  		move.w	($FFFFF714).w,d3
00007750 3038 F73A                  		move.w	($FFFFF73A).w,d0
00007754 48C0                       		ext.l	d0
00007756 EF80                       		asl.l	#7,d0
00007758 D1B8 F710                  		add.l	d0,($FFFFF710).w
0000775C 3038 F710                  		move.w	($FFFFF710).w,d0
00007760 0240 0010                  		andi.w	#$10,d0
00007764 1238 F74E                  		move.b	($FFFFF74E).w,d1
00007768 B300                       		eor.b	d1,d0
0000776A 6600                       		bne.s	locret_6884
0000776C 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00007772 3038 F710                  		move.w	($FFFFF710).w,d0
00007776 9042                       		sub.w	d2,d0
00007778 6A00                       		bpl.s	loc_687E
0000777A 08F8 0002 F758             		bset	#2,($FFFFF758).w
00007780 6000                       		bra.s	locret_6884
00007782                            ; ===========================================================================
00007782                            
00007782                            loc_687E:
00007782 08F8 0003 F758             		bset	#3,($FFFFF758).w
00007788                            
00007788                            locret_6884:
00007788 4E75                       		rts	
0000778A                            ; End of function ScrollBlock4
0000778A                            
0000778A                            
0000778A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000778A                            
0000778A                            
0000778A                            sub_6886:				; XREF: loc_C44
0000778A 4BF9 00C0 0004             		lea	($C00004).l,a5
00007790 4DF9 00C0 0000             		lea	($C00000).l,a6
00007796 45F8 F756                  		lea	($FFFFF756).w,a2
0000779A 47F8 F708                  		lea	($FFFFF708).w,a3
0000779E 49F8 A440                  		lea	($FFFFA440).w,a4
000077A2 343C 6000                  		move.w	#$6000,d2
000077A6 6100 0000                  		bsr.w	sub_6954
000077AA 45F8 F758                  		lea	($FFFFF758).w,a2
000077AE 47F8 F710                  		lea	($FFFFF710).w,a3
000077B2 6000 0000                  		bra.w	sub_69F4
000077B6                            ; End of function sub_6886
000077B6                            
000077B6                            ; ---------------------------------------------------------------------------
000077B6                            ; Subroutine to	display	correct	tiles as you move
000077B6                            ; ---------------------------------------------------------------------------
000077B6                            
000077B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000077B6                            
000077B6                            
000077B6                            LoadTilesAsYouMove:			; XREF: Demo_Time
000077B6 4BF9 00C0 0004             		lea	($C00004).l,a5
000077BC 4DF9 00C0 0000             		lea	($C00000).l,a6
000077C2 45F8 FF32                  		lea	($FFFFFF32).w,a2
000077C6 47F8 FF18                  		lea	($FFFFFF18).w,a3
000077CA 49F8 A440                  		lea	($FFFFA440).w,a4
000077CE 343C 6000                  		move.w	#$6000,d2
000077D2 6100 0000                  		bsr.w	sub_6954
000077D6 45F8 FF34                  		lea	($FFFFFF34).w,a2
000077DA 47F8 FF20                  		lea	($FFFFFF20).w,a3
000077DE 6100 0000                  		bsr.w	sub_69F4
000077E2 45F8 FF30                  		lea	($FFFFFF30).w,a2
000077E6 47F8 FF10                  		lea	($FFFFFF10).w,a3
000077EA 49F8 A400                  		lea	($FFFFA400).w,a4
000077EE 343C 4000                  		move.w	#$4000,d2
000077F2 4A12                       		tst.b	(a2)
000077F4 6700                       		beq.s	locret_6952
000077F6 0892 0000                  		bclr	#0,(a2)
000077FA 6700                       		beq.s	loc_6908
000077FC 78F0                       		moveq	#-$10,d4
000077FE 7AF0                       		moveq	#-$10,d5
00007800 6100 0000                  		bsr.w	sub_6C20
00007804 78F0                       		moveq	#-$10,d4
00007806 7AF0                       		moveq	#-$10,d5
00007808 6100 0000                  		bsr.w	sub_6AD8
0000780C                            
0000780C                            loc_6908:
0000780C 0892 0001                  		bclr	#1,(a2)
00007810 6700                       		beq.s	loc_6922
00007812 383C 00E0                  		move.w	#$E0,d4
00007816 7AF0                       		moveq	#-$10,d5
00007818 6100 0000                  		bsr.w	sub_6C20
0000781C 383C 00E0                  		move.w	#$E0,d4
00007820 7AF0                       		moveq	#-$10,d5
00007822 6100 0000                  		bsr.w	sub_6AD8
00007826                            
00007826                            loc_6922:
00007826 0892 0002                  		bclr	#2,(a2)
0000782A 6700                       		beq.s	loc_6938
0000782C 78F0                       		moveq	#-$10,d4
0000782E 7AF0                       		moveq	#-$10,d5
00007830 6100 0000                  		bsr.w	sub_6C20
00007834 78F0                       		moveq	#-$10,d4
00007836 7AF0                       		moveq	#-$10,d5
00007838 6100 0000                  		bsr.w	sub_6B04
0000783C                            
0000783C                            loc_6938:
0000783C 0892 0003                  		bclr	#3,(a2)
00007840 6700                       		beq.s	locret_6952
00007842 78F0                       		moveq	#-$10,d4
00007844 3A3C 0140                  		move.w	#$140,d5
00007848 6100 0000                  		bsr.w	sub_6C20
0000784C 78F0                       		moveq	#-$10,d4
0000784E 3A3C 0140                  		move.w	#$140,d5
00007852 6100 0000                  		bsr.w	sub_6B04
00007856                            
00007856                            locret_6952:
00007856 4E75                       		rts	
00007858                            ; End of function LoadTilesAsYouMove
00007858                            
00007858                            
00007858                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007858                            
00007858                            
00007858                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00007858 4A12                       		tst.b	(a2)
0000785A 6700 0000                  		beq.w	locret_69F2
0000785E 0892 0000                  		bclr	#0,(a2)
00007862 6700                       		beq.s	loc_6972
00007864 78F0                       		moveq	#-$10,d4
00007866 7AF0                       		moveq	#-$10,d5
00007868 6100 0000                  		bsr.w	sub_6C20
0000786C 78F0                       		moveq	#-$10,d4
0000786E 7AF0                       		moveq	#-$10,d5
00007870 7C1F                       		moveq	#$1F,d6
00007872 6100 0000                  		bsr.w	sub_6ADA
00007876                            
00007876                            loc_6972:
00007876 0892 0001                  		bclr	#1,(a2)
0000787A 6700                       		beq.s	loc_698E
0000787C 383C 00E0                  		move.w	#$E0,d4
00007880 7AF0                       		moveq	#-$10,d5
00007882 6100 0000                  		bsr.w	sub_6C20
00007886 383C 00E0                  		move.w	#$E0,d4
0000788A 7AF0                       		moveq	#-$10,d5
0000788C 7C1F                       		moveq	#$1F,d6
0000788E 6100 0000                  		bsr.w	sub_6ADA
00007892                            
00007892                            loc_698E:
00007892 0892 0002                  		bclr	#2,(a2)
00007896 6700                       		beq.s	loc_69BE
00007898 78F0                       		moveq	#-$10,d4
0000789A 7AF0                       		moveq	#-$10,d5
0000789C 6100 0000                  		bsr.w	sub_6C20
000078A0 78F0                       		moveq	#-$10,d4
000078A2 7AF0                       		moveq	#-$10,d5
000078A4 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000078A8 322B 0004                  		move.w	4(a3),d1
000078AC 0241 FFF0                  		andi.w	#-$10,d1
000078B0 9C41                       		sub.w	d1,d6
000078B2 6D00                       		blt.s	loc_69BE
000078B4 E84E                       		lsr.w	#4,d6
000078B6 0C46 000F                  		cmpi.w	#$F,d6
000078BA 6500                       		bcs.s	loc_69BA
000078BC 7C0F                       		moveq	#$F,d6
000078BE                            
000078BE                            loc_69BA:
000078BE 6100 0000                  		bsr.w	sub_6B06
000078C2                            
000078C2                            loc_69BE:
000078C2 0892 0003                  		bclr	#3,(a2)
000078C6 6700                       		beq.s	locret_69F2
000078C8 78F0                       		moveq	#-$10,d4
000078CA 3A3C 0140                  		move.w	#$140,d5
000078CE 6100 0000                  		bsr.w	sub_6C20
000078D2 78F0                       		moveq	#-$10,d4
000078D4 3A3C 0140                  		move.w	#$140,d5
000078D8 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000078DC 322B 0004                  		move.w	4(a3),d1
000078E0 0241 FFF0                  		andi.w	#-$10,d1
000078E4 9C41                       		sub.w	d1,d6
000078E6 6D00                       		blt.s	locret_69F2
000078E8 E84E                       		lsr.w	#4,d6
000078EA 0C46 000F                  		cmpi.w	#$F,d6
000078EE 6500                       		bcs.s	loc_69EE
000078F0 7C0F                       		moveq	#$F,d6
000078F2                            
000078F2                            loc_69EE:
000078F2 6100 0000                  		bsr.w	sub_6B06
000078F6                            
000078F6                            locret_69F2:
000078F6 4E75                       		rts	
000078F8                            ; End of function sub_6954
000078F8                            
000078F8                            
000078F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078F8                            
000078F8                            
000078F8                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
000078F8 4A12                       		tst.b	(a2)
000078FA 6700 0000                  		beq.w	locret_6A80
000078FE 0892 0002                  		bclr	#2,(a2)
00007902 6700                       		beq.s	loc_6A3E
00007904 0C53 0010                  		cmpi.w	#$10,(a3)
00007908 6500                       		bcs.s	loc_6A3E
0000790A 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
0000790E 322B 0004                  		move.w	4(a3),d1
00007912 0241 FFF0                  		andi.w	#-$10,d1
00007916 9841                       		sub.w	d1,d4
00007918 3F04                       		move.w	d4,-(sp)
0000791A 7AF0                       		moveq	#-$10,d5
0000791C 6100 0000                  		bsr.w	sub_6C20
00007920 381F                       		move.w	(sp)+,d4
00007922 7AF0                       		moveq	#-$10,d5
00007924 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007928 322B 0004                  		move.w	4(a3),d1
0000792C 0241 FFF0                  		andi.w	#-$10,d1
00007930 9C41                       		sub.w	d1,d6
00007932 6D00                       		blt.s	loc_6A3E
00007934 E84E                       		lsr.w	#4,d6
00007936 0446 000E                  		subi.w	#$E,d6
0000793A 6400                       		bcc.s	loc_6A3E
0000793C 4446                       		neg.w	d6
0000793E 6100 0000                  		bsr.w	sub_6B06
00007942                            
00007942                            loc_6A3E:
00007942 0892 0003                  		bclr	#3,(a2)
00007946 6700                       		beq.s	locret_6A80
00007948 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
0000794C 322B 0004                  		move.w	4(a3),d1
00007950 0241 FFF0                  		andi.w	#-$10,d1
00007954 9841                       		sub.w	d1,d4
00007956 3F04                       		move.w	d4,-(sp)
00007958 3A3C 0140                  		move.w	#$140,d5
0000795C 6100 0000                  		bsr.w	sub_6C20
00007960 381F                       		move.w	(sp)+,d4
00007962 3A3C 0140                  		move.w	#$140,d5
00007966 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000796A 322B 0004                  		move.w	4(a3),d1
0000796E 0241 FFF0                  		andi.w	#-$10,d1
00007972 9C41                       		sub.w	d1,d6
00007974 6D00                       		blt.s	locret_6A80
00007976 E84E                       		lsr.w	#4,d6
00007978 0446 000E                  		subi.w	#$E,d6
0000797C 6400                       		bcc.s	locret_6A80
0000797E 4446                       		neg.w	d6
00007980 6100 0000                  		bsr.w	sub_6B06
00007984                            
00007984                            locret_6A80:
00007984 4E75                       		rts	
00007986                            ; End of function sub_69F4
00007986                            
00007986                            ; ===========================================================================
00007986 4A12                       		tst.b	(a2)
00007988 6700                       		beq.s	locret_6AD6
0000798A 0892 0002                  		bclr	#2,(a2)
0000798E 6700                       		beq.s	loc_6AAC
00007990 383C 00D0                  		move.w	#$D0,d4
00007994 322B 0004                  		move.w	4(a3),d1
00007998 0241 FFF0                  		andi.w	#-$10,d1
0000799C 9841                       		sub.w	d1,d4
0000799E 3F04                       		move.w	d4,-(sp)
000079A0 7AF0                       		moveq	#-$10,d5
000079A2 6100 0000                  		bsr.w	sub_6C3C
000079A6 381F                       		move.w	(sp)+,d4
000079A8 7AF0                       		moveq	#-$10,d5
000079AA 7C02                       		moveq	#2,d6
000079AC 6100 0000                  		bsr.w	sub_6B06
000079B0                            
000079B0                            loc_6AAC:
000079B0 0892 0003                  		bclr	#3,(a2)
000079B4 6700                       		beq.s	locret_6AD6
000079B6 383C 00D0                  		move.w	#$D0,d4
000079BA 322B 0004                  		move.w	4(a3),d1
000079BE 0241 FFF0                  		andi.w	#-$10,d1
000079C2 9841                       		sub.w	d1,d4
000079C4 3F04                       		move.w	d4,-(sp)
000079C6 3A3C 0140                  		move.w	#$140,d5
000079CA 6100 0000                  		bsr.w	sub_6C3C
000079CE 381F                       		move.w	(sp)+,d4
000079D0 3A3C 0140                  		move.w	#$140,d5
000079D4 7C02                       		moveq	#2,d6
000079D6 6100 0000                  		bsr.w	sub_6B06
000079DA                            
000079DA                            locret_6AD6:
000079DA 4E75                       		rts	
000079DC                            
000079DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079DC                            
000079DC                            
000079DC                            sub_6AD8:				; XREF: LoadTilesAsYouMove
000079DC 7C15                       		moveq	#$15,d6
000079DE                            ; End of function sub_6AD8
000079DE                            
000079DE                            
000079DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079DE                            
000079DE                            
000079DE                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
000079DE 2E3C 0080 0000             		move.l	#$800000,d7
000079E4 2200                       		move.l	d0,d1
000079E6                            
000079E6                            loc_6AE2:
000079E6 48E7 0C00                  		movem.l	d4-d5,-(sp)
000079EA 6100 0000                  		bsr.w	sub_6BD6
000079EE 2001                       		move.l	d1,d0
000079F0 6100 0000                  		bsr.w	sub_6B32
000079F4 5801                       		addq.b	#4,d1
000079F6 0201 007F                  		andi.b	#$7F,d1
000079FA 4CDF 0030                  		movem.l	(sp)+,d4-d5
000079FE 0645 0010                  		addi.w	#$10,d5
00007A02 51CE FFE2                  		dbf	d6,loc_6AE2
00007A06 4E75                       		rts	
00007A08                            ; End of function sub_6ADA
00007A08                            
00007A08                            
00007A08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A08                            
00007A08                            
00007A08                            sub_6B04:				; XREF: LoadTilesAsYouMove
00007A08 7C0F                       		moveq	#$F,d6
00007A0A                            ; End of function sub_6B04
00007A0A                            
00007A0A                            
00007A0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A0A                            
00007A0A                            
00007A0A                            sub_6B06:				; XREF: sub_6954
00007A0A 2E3C 0080 0000             		move.l	#$800000,d7
00007A10 2200                       		move.l	d0,d1
00007A12                            
00007A12                            loc_6B0E:
00007A12 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007A16 6100 0000                  		bsr.w	sub_6BD6
00007A1A 2001                       		move.l	d1,d0
00007A1C 6100 0000                  		bsr.w	sub_6B32
00007A20 0641 0100                  		addi.w	#$100,d1
00007A24 0241 0FFF                  		andi.w	#$FFF,d1
00007A28 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007A2C 0644 0010                  		addi.w	#$10,d4
00007A30 51CE FFE0                  		dbf	d6,loc_6B0E
00007A34 4E75                       		rts	
00007A36                            ; End of function sub_6B06
00007A36                            
00007A36                            
00007A36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A36                            
00007A36                            
00007A36                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00007A36 8042                       		or.w	d2,d0
00007A38 4840                       		swap	d0
00007A3A 0810 0004                  		btst	#4,(a0)
00007A3E 6600                       		bne.s	loc_6B6E
00007A40 0810 0003                  		btst	#3,(a0)
00007A44 6600                       		bne.s	loc_6B4E
00007A46 2A80                       		move.l	d0,(a5)
00007A48 2C99                       		move.l	(a1)+,(a6)
00007A4A D087                       		add.l	d7,d0
00007A4C 2A80                       		move.l	d0,(a5)
00007A4E 2C99                       		move.l	(a1)+,(a6)
00007A50 4E75                       		rts	
00007A52                            ; ===========================================================================
00007A52                            
00007A52                            loc_6B4E:
00007A52 2A80                       		move.l	d0,(a5)
00007A54 2819                       		move.l	(a1)+,d4
00007A56 0A84 0800 0800             		eori.l	#$8000800,d4
00007A5C 4844                       		swap	d4
00007A5E 2C84                       		move.l	d4,(a6)
00007A60 D087                       		add.l	d7,d0
00007A62 2A80                       		move.l	d0,(a5)
00007A64 2819                       		move.l	(a1)+,d4
00007A66 0A84 0800 0800             		eori.l	#$8000800,d4
00007A6C 4844                       		swap	d4
00007A6E 2C84                       		move.l	d4,(a6)
00007A70 4E75                       		rts	
00007A72                            ; ===========================================================================
00007A72                            
00007A72                            loc_6B6E:
00007A72 0810 0003                  		btst	#3,(a0)
00007A76 6600                       		bne.s	loc_6B90
00007A78 2A80                       		move.l	d0,(a5)
00007A7A 2A19                       		move.l	(a1)+,d5
00007A7C 2819                       		move.l	(a1)+,d4
00007A7E 0A84 1000 1000             		eori.l	#$10001000,d4
00007A84 2C84                       		move.l	d4,(a6)
00007A86 D087                       		add.l	d7,d0
00007A88 2A80                       		move.l	d0,(a5)
00007A8A 0A85 1000 1000             		eori.l	#$10001000,d5
00007A90 2C85                       		move.l	d5,(a6)
00007A92 4E75                       		rts	
00007A94                            ; ===========================================================================
00007A94                            
00007A94                            loc_6B90:
00007A94 2A80                       		move.l	d0,(a5)
00007A96 2A19                       		move.l	(a1)+,d5
00007A98 2819                       		move.l	(a1)+,d4
00007A9A 0A84 1800 1800             		eori.l	#$18001800,d4
00007AA0 4844                       		swap	d4
00007AA2 2C84                       		move.l	d4,(a6)
00007AA4 D087                       		add.l	d7,d0
00007AA6 2A80                       		move.l	d0,(a5)
00007AA8 0A85 1800 1800             		eori.l	#$18001800,d5
00007AAE 4845                       		swap	d5
00007AB0 2C85                       		move.l	d5,(a6)
00007AB2 4E75                       		rts	
00007AB4                            ; End of function sub_6B32
00007AB4                            
00007AB4                            ; ===========================================================================
00007AB4 4E75                       		rts	
00007AB6                            ; ===========================================================================
00007AB6 2A80                       		move.l	d0,(a5)
00007AB8 3A3C 2000                  		move.w	#$2000,d5
00007ABC 3819                       		move.w	(a1)+,d4
00007ABE D845                       		add.w	d5,d4
00007AC0 3C84                       		move.w	d4,(a6)
00007AC2 3819                       		move.w	(a1)+,d4
00007AC4 D845                       		add.w	d5,d4
00007AC6 3C84                       		move.w	d4,(a6)
00007AC8 D087                       		add.l	d7,d0
00007ACA 2A80                       		move.l	d0,(a5)
00007ACC 3819                       		move.w	(a1)+,d4
00007ACE D845                       		add.w	d5,d4
00007AD0 3C84                       		move.w	d4,(a6)
00007AD2 3819                       		move.w	(a1)+,d4
00007AD4 D845                       		add.w	d5,d4
00007AD6 3C84                       		move.w	d4,(a6)
00007AD8 4E75                       		rts	
00007ADA                            
00007ADA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007ADA                            
00007ADA                            
00007ADA                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007ADA 43F8 B000                  		lea	($FFFFB000).w,a1
00007ADE D86B 0004                  		add.w	4(a3),d4
00007AE2 DA53                       		add.w	(a3),d5
00007AE4 3604                       		move.w	d4,d3
00007AE6 E24B                       		lsr.w	#1,d3
00007AE8 0243 0380                  		andi.w	#$380,d3
00007AEC E64D                       		lsr.w	#3,d5
00007AEE 3005                       		move.w	d5,d0
00007AF0 EA48                       		lsr.w	#5,d0
00007AF2 0240 007F                  		andi.w	#$7F,d0
00007AF6 D043                       		add.w	d3,d0
00007AF8 76FF                       		moveq	#-1,d3
00007AFA 1634 0000                  		move.b	(a4,d0.w),d3
00007AFE 6700                       		beq.s	locret_6C1E
00007B00 5303                       		subq.b	#1,d3
00007B02 0243 007F                  		andi.w	#$7F,d3
00007B06 EE5B                       		ror.w	#7,d3
00007B08 D844                       		add.w	d4,d4
00007B0A 0244 01E0                  		andi.w	#$1E0,d4
00007B0E 0245 001E                  		andi.w	#$1E,d5
00007B12 D644                       		add.w	d4,d3
00007B14 D645                       		add.w	d5,d3
00007B16 2043                       		movea.l	d3,a0
00007B18 3610                       		move.w	(a0),d3
00007B1A 0243 03FF                  		andi.w	#$3FF,d3
00007B1E E74B                       		lsl.w	#3,d3
00007B20 D2C3                       		adda.w	d3,a1
00007B22                            
00007B22                            locret_6C1E:
00007B22 4E75                       		rts	
00007B24                            ; End of function sub_6BD6
00007B24                            
00007B24                            
00007B24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B24                            
00007B24                            
00007B24                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00007B24 D86B 0004                  		add.w	4(a3),d4
00007B28 DA53                       		add.w	(a3),d5
00007B2A 0244 00F0                  		andi.w	#$F0,d4
00007B2E 0245 01F0                  		andi.w	#$1F0,d5
00007B32 E94C                       		lsl.w	#4,d4
00007B34 E44D                       		lsr.w	#2,d5
00007B36 D845                       		add.w	d5,d4
00007B38 7003                       		moveq	#3,d0
00007B3A 4840                       		swap	d0
00007B3C 3004                       		move.w	d4,d0
00007B3E 4E75                       		rts	
00007B40                            ; End of function sub_6C20
00007B40                            
00007B40                            
00007B40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B40                            ; not used
00007B40                            
00007B40                            
00007B40                            sub_6C3C:
00007B40 D86B 0004                  		add.w	4(a3),d4
00007B44 DA53                       		add.w	(a3),d5
00007B46 0244 00F0                  		andi.w	#$F0,d4
00007B4A 0245 01F0                  		andi.w	#$1F0,d5
00007B4E E94C                       		lsl.w	#4,d4
00007B50 E44D                       		lsr.w	#2,d5
00007B52 D845                       		add.w	d5,d4
00007B54 7002                       		moveq	#2,d0
00007B56 4840                       		swap	d0
00007B58 3004                       		move.w	d4,d0
00007B5A 4E75                       		rts	
00007B5C                            ; End of function sub_6C3C
00007B5C                            
00007B5C                            ; ---------------------------------------------------------------------------
00007B5C                            ; Subroutine to	load tiles as soon as the level	appears
00007B5C                            ; ---------------------------------------------------------------------------
00007B5C                            
00007B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B5C                            
00007B5C                            
00007B5C                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00007B5C 4BF9 00C0 0004             		lea	($C00004).l,a5
00007B62 4DF9 00C0 0000             		lea	($C00000).l,a6
00007B68 47F8 F700                  		lea	($FFFFF700).w,a3
00007B6C 49F8 A400                  		lea	($FFFFA400).w,a4
00007B70 343C 4000                  		move.w	#$4000,d2
00007B74 6100                       		bsr.s	LoadTilesFromStart2
00007B76 47F8 F708                  		lea	($FFFFF708).w,a3
00007B7A 49F8 A440                  		lea	($FFFFA440).w,a4
00007B7E 343C 6000                  		move.w	#$6000,d2
00007B82                            ; End of function LoadTilesFromStart
00007B82                            
00007B82                            
00007B82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B82                            
00007B82                            
00007B82                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00007B82 78F0                       		moveq	#-$10,d4
00007B84 7C0F                       		moveq	#$F,d6
00007B86                            
00007B86                            loc_6C82:
00007B86 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007B8A 7A00                       		moveq	#0,d5
00007B8C 3204                       		move.w	d4,d1
00007B8E 6100 FF94                  		bsr.w	sub_6C20
00007B92 3801                       		move.w	d1,d4
00007B94 7A00                       		moveq	#0,d5
00007B96 7C1F                       		moveq	#$1F,d6
00007B98 6100 FE44                  		bsr.w	sub_6ADA
00007B9C 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007BA0 0644 0010                  		addi.w	#$10,d4
00007BA4 51CE FFE0                  		dbf	d6,loc_6C82
00007BA8 4E75                       		rts	
00007BAA                            ; End of function LoadTilesFromStart2
00007BAA                            
00007BAA                            ; ---------------------------------------------------------------------------
00007BAA                            ; Main Load Block loading subroutine
00007BAA                            ; ---------------------------------------------------------------------------
00007BAA                            
00007BAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BAA                            
00007BAA                            
00007BAA                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007BAA 7000                       		moveq	#0,d0
00007BAC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007BB0 E948                       		lsl.w	#4,d0
00007BB2 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007BB8 45F2 0000                  		lea	(a2,d0.w),a2
00007BBC 2F0A                       		move.l	a2,-(sp)
00007BBE 588A                       		addq.l	#4,a2
00007BC0 205A                       		movea.l	(a2)+,a0
00007BC2 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007BC6 303C 0000                  		move.w	#0,d0
00007BCA 6100 A42A                  		bsr.w	EniDec
00007BCE 205A                       		movea.l	(a2)+,a0
00007BD0 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007BD6 6100 A59C                  		bsr.w	KosDec
00007BDA 6100 0000                  		bsr.w	LevelLayoutLoad
00007BDE 301A                       		move.w	(a2)+,d0
00007BE0 3012                       		move.w	(a2),d0
00007BE2 0240 00FF                  		andi.w	#$FF,d0
00007BE6 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007BEC 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007BEE 700C                       		moveq	#$C,d0		; use SB3 pallet
00007BF0                            
00007BF0                            MLB_ChkSBZPal:
00007BF0 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007BF6 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007BF8 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007BFE 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007C00                            
00007C00                            MLB_UsePal0E:
00007C00 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007C02                            
00007C02                            MLB_NormalPal:
00007C02 6100 ADA4                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007C06 245F                       		movea.l	(sp)+,a2
00007C08 584A                       		addq.w	#4,a2
00007C0A 7000                       		moveq	#0,d0
00007C0C 1012                       		move.b	(a2),d0
00007C0E 6700                       		beq.s	locret_6D10
00007C10 6100 A246                  		bsr.w	LoadPLC		; load pattern load cues
00007C14                            
00007C14                            locret_6D10:
00007C14 4E75                       		rts	
00007C16                            ; End of function MainLoadBlockLoad
00007C16                            
00007C16                            ; ---------------------------------------------------------------------------
00007C16                            ; Level	layout loading subroutine
00007C16                            ; ---------------------------------------------------------------------------
00007C16                            
00007C16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C16                            
00007C16                            
00007C16                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007C16 47F8 A400                  		lea	($FFFFA400).w,a3
00007C1A 323C 01FF                  		move.w	#$1FF,d1
00007C1E 7000                       		moveq	#0,d0
00007C20                            
00007C20                            LevLoad_ClrRam:
00007C20 26C0                       		move.l	d0,(a3)+
00007C22 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007C26                            
00007C26 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007C2A 7200                       		moveq	#0,d1
00007C2C 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007C30 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007C34 7202                       		moveq	#2,d1
00007C36                            ; End of function LevelLayoutLoad
00007C36                            
00007C36                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007C36                            
00007C36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C36                            
00007C36                            
00007C36                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007C36 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007C3A ED08                       		lsl.b	#6,d0
00007C3C EA48                       		lsr.w	#5,d0
00007C3E 3400                       		move.w	d0,d2
00007C40 D040                       		add.w	d0,d0
00007C42 D042                       		add.w	d2,d0
00007C44 D041                       		add.w	d1,d0
00007C46 43F9 0000 0000             		lea	(Level_Index).l,a1
00007C4C 3031 0000                  		move.w	(a1,d0.w),d0
00007C50 43F1 0000                  		lea	(a1,d0.w),a1
00007C54 7200                       		moveq	#0,d1
00007C56 3401                       		move.w	d1,d2
00007C58 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007C5A 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007C5C                            
00007C5C                            LevLoad_NumRows:
00007C5C 3001                       		move.w	d1,d0
00007C5E 204B                       		movea.l	a3,a0
00007C60                            
00007C60                            LevLoad_Row:
00007C60 10D9                       		move.b	(a1)+,(a0)+
00007C62 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007C66 47EB 0080                  		lea	$80(a3),a3	; do next row
00007C6A 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007C6E 4E75                       		rts	
00007C70                            ; End of function LevelLayoutLoad2
00007C70                            
00007C70                            ; ---------------------------------------------------------------------------
00007C70                            ; Dynamic screen resize	loading	subroutine
00007C70                            ; ---------------------------------------------------------------------------
00007C70                            
00007C70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C70                            
00007C70                            
00007C70                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007C70 7000                       		moveq	#0,d0
00007C72 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007C76 D040                       		add.w	d0,d0
00007C78 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007C7C 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007C80 7202                       		moveq	#2,d1
00007C82 3038 F726                  		move.w	($FFFFF726).w,d0
00007C86 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007C8A 6700                       		beq.s	locret_6DAA
00007C8C 6400                       		bcc.s	loc_6DAC
00007C8E 4441                       		neg.w	d1
00007C90 3038 F704                  		move.w	($FFFFF704).w,d0
00007C94 B078 F726                  		cmp.w	($FFFFF726).w,d0
00007C98 6300                       		bls.s	loc_6DA0
00007C9A 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007C9E 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007CA4                            
00007CA4                            loc_6DA0:
00007CA4 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007CA8 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007CAE                            
00007CAE                            locret_6DAA:
00007CAE 4E75                       		rts	
00007CB0                            ; ===========================================================================
00007CB0                            
00007CB0                            loc_6DAC:				; XREF: DynScrResizeLoad
00007CB0 3038 F704                  		move.w	($FFFFF704).w,d0
00007CB4 5040                       		addq.w	#8,d0
00007CB6 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007CBA 6500                       		bcs.s	loc_6DC4
00007CBC 0838 0001 D022             		btst	#1,($FFFFD022).w
00007CC2 6700                       		beq.s	loc_6DC4
00007CC4 D241                       		add.w	d1,d1
00007CC6 D241                       		add.w	d1,d1
00007CC8                            
00007CC8                            loc_6DC4:
00007CC8 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007CCC 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007CD2 4E75                       		rts	
00007CD4                            ; End of function DynScrResizeLoad
00007CD4                            
00007CD4                            ; ===========================================================================
00007CD4                            ; ---------------------------------------------------------------------------
00007CD4                            ; Offset index for dynamic screen resizing
00007CD4                            ; ---------------------------------------------------------------------------
00007CD4 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007CD8 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007CDC 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007CE0 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_GHZ-Resize_Index
00007CE4                            ; ===========================================================================
00007CE4                            ; ---------------------------------------------------------------------------
00007CE4                            ; Green	Hill Zone dynamic screen resizing
00007CE4                            ; ---------------------------------------------------------------------------
00007CE4                            
00007CE4                            Resize_GHZ:				; XREF: Resize_Index
00007CE4 7000                       		moveq	#0,d0
00007CE6 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007CEA D040                       		add.w	d0,d0
00007CEC 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007CF0 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007CF4                            ; ===========================================================================
00007CF4 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007CF6 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007CF8 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007CFA                            ; ===========================================================================
00007CFA                            
00007CFA                            Resize_GHZ1:
00007CFA 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007D00 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007D06 6500                       		bcs.s	locret_6E08	; if not, branch
00007D08 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007D0E                            
00007D0E                            locret_6E08:
00007D0E 4E75                       		rts	
00007D10                            ; ===========================================================================
00007D10                            
00007D10                            Resize_GHZ2:
00007D10 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007D16 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007D1C 6500                       		bcs.s	locret_6E3A
00007D1E 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007D24 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007D2A 6500                       		bcs.s	locret_6E3A
00007D2C 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007D32 0C78 1C00 F700             		cmpi.w	#$1C00,($FFFFF700).w
00007D38 6500                       		bcs.s	locret_6E3A
00007D3A 31FC 0100 F726             		move.w	#$100,($FFFFF726).w
00007D40 0C78 1D00 F700             		cmpi.w	#$1D00,($FFFFF700).w
00007D46 6500                       		bcs.s	locret_6E3A
00007D48 31FC 0020 F726             		move.w	#$20,($FFFFF726).w
00007D4E                            		
00007D4E                            locret_6E3A:
00007D4E 4E75                       		rts	
00007D50                            ; ===========================================================================
00007D50                            
00007D50                            Resize_GHZ3:
00007D50 7000                       		moveq	#0,d0
00007D52 1038 F742                  		move.b	($FFFFF742).w,d0
00007D56 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007D5A 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007D5E                            ; ===========================================================================
00007D5E 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007D60 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007D62 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007D64                            ; ===========================================================================
00007D64                            
00007D64                            Resize_GHZ3main:
00007D64 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007D6A 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007D70 6500                       		bcs.s	locret_6E96
00007D72 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007D78 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007D7E 6500                       		bcs.s	locret_6E96
00007D80 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007D86 6500                       		bcs.s	loc_6E98
00007D88 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007D8E 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007D94 6400                       		bcc.s	loc_6E8E
00007D96 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007D9C 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007DA2                            
00007DA2                            loc_6E8E:
00007DA2 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007DA8 6400                       		bcc.s	loc_6E98
00007DAA                            
00007DAA                            locret_6E96:
00007DAA 4E75                       		rts	
00007DAC                            ; ===========================================================================
00007DAC                            
00007DAC                            loc_6E98:
00007DAC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007DB2 5438 F742                  		addq.b	#2,($FFFFF742).w
00007DB6 4E75                       		rts	
00007DB8                            ; ===========================================================================
00007DB8                            
00007DB8                            Resize_GHZ3boss:
00007DB8 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007DBE 6400                       		bcc.s	loc_6EB0
00007DC0 5538 F742                  		subq.b	#2,($FFFFF742).w
00007DC4                            
00007DC4                            loc_6EB0:
00007DC4 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007DCA 6500                       		bcs.s	locret_6EE8
00007DCC 6100 0000                  		bsr.w	SingleObjLoad
00007DD0 6600                       		bne.s	loc_6ED0
00007DD2 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007DD6 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007DDC 337C 0280 000C             		move.w	#$280,$C(a1)
00007DE2                            
00007DE2                            loc_6ED0:
00007DE2 303C 008C                  		move.w	#$8C,d0
00007DE6 6100 9E8C                  		bsr.w	PlaySound	; play boss music
00007DEA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007DF0 5438 F742                  		addq.b	#2,($FFFFF742).w
00007DF4 7011                       		moveq	#$11,d0
00007DF6 6000 A060                  		bra.w	LoadPLC		; load boss patterns
00007DFA                            ; ===========================================================================
00007DFA                            
00007DFA                            locret_6EE8:
00007DFA 4E75                       		rts	
00007DFC                            ; ===========================================================================
00007DFC                            
00007DFC                            Resize_GHZ3end:
00007DFC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007E02 4E75                       		rts	
00007E04                            ; ===========================================================================
00007E04                            ; ---------------------------------------------------------------------------
00007E04                            ; Labyrinth Zone dynamic screen	resizing
00007E04                            ; ---------------------------------------------------------------------------
00007E04                            
00007E04                            Resize_LZ:				; XREF: Resize_Index
00007E04 7000                       		moveq	#0,d0
00007E06 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007E0A D040                       		add.w	d0,d0
00007E0C 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007E10 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007E14                            ; ===========================================================================
00007E14 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007E16 0000                       		dc.w Resize_LZ12-Resize_LZx
00007E18 0000                       		dc.w Resize_LZ3-Resize_LZx
00007E1A 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007E1C                            ; ===========================================================================
00007E1C                            
00007E1C                            Resize_LZ12:
00007E1C 4E75                       		rts	
00007E1E                            ; ===========================================================================
00007E1E                            
00007E1E                            Resize_LZ3:
00007E1E 7000                       		moveq	#0,d0
00007E20 1038 F742                  		move.b	($FFFFF742).w,d0
00007E24 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
00007E28 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
00007E2C                            ; ===========================================================================
00007E2C                            off_6E4A2:	
00007E2C 0000                       		dc.w Resize_LZ3boss-off_6E4A2
00007E2E 0000                       		dc.w Resize_LZ3end-off_6E4A2
00007E30                            ; ===========================================================================
00007E30                            Resize_LZ3boss:
00007E30 4A38 F742                  		tst.b	($FFFFF742).w
00007E34 6600                       		bne.s	locret_6F62
00007E36 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007E3C 6500                       		bcs.s	locret_6F62
00007E3E 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
00007E44 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00007E4A                            
00007E4A 6100 0000                  		bsr.w	SingleObjLoad
00007E4E 6600                       		bne.s	loc_6F4A
00007E50 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007E54 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
00007E5A 337C 06E0 000C             		move.w	#$6E0,$C(a1)
00007E60                            loc_6F4A:
00007E60 303C 008C                  		move.w	#$8C,d0
00007E64 6100 9E0E                  		bsr.w	PlaySound	; play boss music
00007E68 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007E6E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007E72 7022                       		moveq	#$22,d0
00007E74 6000 9FE2                  		bra.w	LoadPLC		; load boss patterns
00007E78                            ; ===========================================================================
00007E78                            
00007E78                            locret_6F62:
00007E78 4E75                       		rts	
00007E7A                            ; ===========================================================================
00007E7A                            
00007E7A                            Resize_LZ3end:
00007E7A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007E80 4E75                       		rts	
00007E82                            ; ===========================================================================
00007E82                            
00007E82                            Resize_SBZ3:
00007E82 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007E88 6500                       		bcs.s	locret_6F8C
00007E8A 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007E90 6400                       		bcc.s	locret_6F8C	; if not, branch
00007E92 4238 FE30                  		clr.b	($FFFFFE30).w
00007E96 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00007E9C 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007EA2 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007EA8                            
00007EA8                            locret_6F8C:
00007EA8 4E75                       		rts	
00007EAA                            ; ===========================================================================
00007EAA                            ; ---------------------------------------------------------------------------
00007EAA                            ; Marble Zone dynamic screen resizing
00007EAA                            ; ---------------------------------------------------------------------------
00007EAA                            
00007EAA                            Resize_MZ:				; XREF: Resize_Index
00007EAA 7000                       		moveq	#0,d0
00007EAC 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007EB0 D040                       		add.w	d0,d0
00007EB2 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007EB6 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007EBA                            ; ===========================================================================
00007EBA 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00007EBC 0000                       		dc.w Resize_MZ2-Resize_MZx
00007EBE 0000                       		dc.w Resize_MZ3-Resize_MZx
00007EC0                            ; ===========================================================================
00007EC0                            
00007EC0                            Resize_MZ1:
00007EC0 7000                       		moveq	#0,d0
00007EC2 1038 F742                  		move.b	($FFFFF742).w,d0
00007EC6 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007ECA 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007ECE                            ; ===========================================================================
00007ECE 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007ED0 0000                       		dc.w loc_6FEA-off_6FB2
00007ED2 0000                       		dc.w loc_702E-off_6FB2
00007ED4 0000                       		dc.w loc_7050-off_6FB2
00007ED6                            ; ===========================================================================
00007ED6                            
00007ED6                            loc_6FBA:
00007ED6 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007EDC 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007EE2 6500                       		bcs.s	locret_6FE8
00007EE4 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007EEA 0C78 09A0 F700             		cmpi.w	#$9A0,($FFFFF700).w
00007EF0 6500                       		bcs.s	locret_6FE8
00007EF2 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007EF8 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007EFE 6500                       		bcs.s	locret_6FE8
00007F00 5438 F742                  		addq.b	#2,($FFFFF742).w
00007F04                            
00007F04                            locret_6FE8:
00007F04 4E75                       		rts	
00007F06                            ; ===========================================================================
00007F06                            
00007F06                            loc_6FEA:
00007F06 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007F0C 6400                       		bcc.s	loc_6FF8
00007F0E 5538 F742                  		subq.b	#2,($FFFFF742).w
00007F12 4E75                       		rts	
00007F14                            ; ===========================================================================
00007F14                            
00007F14                            loc_6FF8:
00007F14 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007F1A 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007F20 6400                       		bcc.s	locret_702C
00007F22 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007F28 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007F2E 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007F34 6400                       		bcc.s	locret_702C
00007F36 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007F3C 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007F42 6500                       		bcs.s	locret_702C
00007F44 5438 F742                  		addq.b	#2,($FFFFF742).w
00007F48                            
00007F48                            locret_702C:
00007F48 4E75                       		rts	
00007F4A                            ; ===========================================================================
00007F4A                            
00007F4A                            loc_702E:
00007F4A 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007F50 6400                       		bcc.s	loc_703C
00007F52 5538 F742                  		subq.b	#2,($FFFFF742).w
00007F56 4E75                       		rts	
00007F58                            ; ===========================================================================
00007F58                            
00007F58                            loc_703C:
00007F58 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007F5E 6500                       		bcs.s	locret_704E
00007F60 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007F66 5438 F742                  		addq.b	#2,($FFFFF742).w
00007F6A                            
00007F6A                            locret_704E:
00007F6A 4E75                       		rts	
00007F6C                            ; ===========================================================================
00007F6C                            
00007F6C                            loc_7050:
00007F6C 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007F72 6500                       		bcs.s	locret_7072
00007F74 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007F7A 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007F80 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007F86 6500                       		bcs.s	locret_7072
00007F88 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007F8E                            
00007F8E                            locret_7072:
00007F8E 4E75                       		rts	
00007F90                            ; ===========================================================================
00007F90                            
00007F90                            Resize_MZ2:
00007F90 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007F96 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007F9C 6500                       		bcs.s	locret_7088
00007F9E 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007FA4                            
00007FA4                            locret_7088:
00007FA4 4E75                       		rts	
00007FA6                            ; ===========================================================================
00007FA6                            
00007FA6                            Resize_MZ3:
00007FA6 7000                       		moveq	#0,d0
00007FA8 1038 F742                  		move.b	($FFFFF742).w,d0
00007FAC 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007FB0 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007FB4                            ; ===========================================================================
00007FB4 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007FB6 0000                       		dc.w Resize_MZ3end-off_7098
00007FB8                            ; ===========================================================================
00007FB8                            
00007FB8                            Resize_MZ3boss:
00007FB8 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007FBE 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007FC4 6500                       		bcs.s	locret_70E8
00007FC6 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007FCC 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007FD2 6500                       		bcs.s	locret_70E8
00007FD4 6100 0000                  		bsr.w	SingleObjLoad
00007FD8 6600                       		bne.s	loc_70D0
00007FDA 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007FDE 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007FE4 337C 022C 000C             		move.w	#$22C,$C(a1)
00007FEA                            
00007FEA                            loc_70D0:
00007FEA 303C 008C                  		move.w	#$8C,d0
00007FEE 6100 9C84                  		bsr.w	PlaySound	; play boss music
00007FF2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007FF8 5438 F742                  		addq.b	#2,($FFFFF742).w
00007FFC 7011                       		moveq	#$11,d0
00007FFE 6000 9E58                  		bra.w	LoadPLC		; load boss patterns
00008002                            ; ===========================================================================
00008002                            
00008002                            locret_70E8:
00008002 4E75                       		rts	
00008004                            ; ===========================================================================
00008004                            
00008004                            Resize_MZ3end:
00008004 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000800A 4E75                       		rts	
0000800C                            ; ===========================================================================
0000800C                            ; ---------------------------------------------------------------------------
0000800C                            ; Star Light Zone dynamic screen resizing
0000800C                            ; ---------------------------------------------------------------------------
0000800C                            
0000800C                            Resize_SLZ:				; XREF: Resize_Index
0000800C 7000                       		moveq	#0,d0
0000800E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008012 D040                       		add.w	d0,d0
00008014 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00008018 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000801C                            ; ===========================================================================
0000801C 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
0000801E 0000                       		dc.w Resize_SLZ2-Resize_SLZx
00008020 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00008022                            ; ===========================================================================
00008022                            
00008022                            Resize_SLZ1:
00008022 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
00008028 4E75                       		rts	
0000802A                            
0000802A                            Resize_SLZ2:
0000802A 4E75                       		rts	
0000802C                            ; ===========================================================================
0000802C                            
0000802C                            Resize_SLZ3:
0000802C 7000                       		moveq	#0,d0
0000802E 1038 F742                  		move.b	($FFFFF742).w,d0
00008032 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008036 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000803A                            ; ===========================================================================
0000803A 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
0000803C 0000                       		dc.w Resize_SLZ3boss-off_7118
0000803E 0000                       		dc.w Resize_SLZ3end-off_7118
00008040                            ; ===========================================================================
00008040                            
00008040                            Resize_SLZ3main:
00008040 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00008046 6500                       		bcs.s	locret_7130
00008048 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000804E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008052                            
00008052                            locret_7130:
00008052 4E75                       		rts	
00008054                            ; ===========================================================================
00008054                            
00008054                            Resize_SLZ3boss:
00008054 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000805A 6500                       		bcs.s	locret_715C
0000805C 6100 0000                  		bsr.w	SingleObjLoad
00008060 6600                       		bne.s	loc_7144
00008062 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00008066                            
00008066                            loc_7144:
00008066 303C 008C                  		move.w	#$8C,d0
0000806A 6100 9C08                  		bsr.w	PlaySound	; play boss music
0000806E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008074 5438 F742                  		addq.b	#2,($FFFFF742).w
00008078 7011                       		moveq	#$11,d0
0000807A 6000 9DDC                  		bra.w	LoadPLC		; load boss patterns
0000807E                            ; ===========================================================================
0000807E                            
0000807E                            locret_715C:
0000807E 4E75                       		rts	
00008080                            ; ===========================================================================
00008080                            
00008080                            Resize_SLZ3end:
00008080 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008086 4E75                       		rts
00008088 4E75                       		rts
0000808A                            ; ===========================================================================
0000808A                            ; ---------------------------------------------------------------------------
0000808A                            ; Spring Yard Zone dynamic screen resizing
0000808A                            ; ---------------------------------------------------------------------------
0000808A                            
0000808A                            Resize_SYZ:				; XREF: Resize_Index
0000808A 7000                       		moveq	#0,d0
0000808C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008090 D040                       		add.w	d0,d0
00008092 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00008096 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
0000809A                            ; ===========================================================================
0000809A 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000809C 0000                       		dc.w Resize_SYZ2-Resize_SYZx
0000809E 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000080A0                            ; ===========================================================================
000080A0                            
000080A0                            Resize_SYZ1:
000080A0 4E75                       		rts	
000080A2                            ; ===========================================================================
000080A2                            
000080A2                            Resize_SYZ2:
000080A2 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000080A8 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000080AE 6500                       		bcs.s	locret_71A2
000080B0 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000080B6 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000080BC 6500                       		bcs.s	locret_71A2
000080BE 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000080C4                            
000080C4                            locret_71A2:
000080C4 4E75                       		rts	
000080C6                            ; ===========================================================================
000080C6                            
000080C6                            Resize_SYZ3:
000080C6 7000                       		moveq	#0,d0
000080C8 1038 F742                  		move.b	($FFFFF742).w,d0
000080CC 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000080D0 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000080D4                            ; ===========================================================================
000080D4 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000080D6 0000                       		dc.w Resize_SYZ3boss-off_71B2
000080D8 0000                       		dc.w Resize_SYZ3end-off_71B2
000080DA                            ; ===========================================================================
000080DA                            
000080DA                            Resize_SYZ3main:
000080DA 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000080E0 6500                       		bcs.s	locret_71CE
000080E2 6100 0000                  		bsr.w	SingleObjLoad
000080E6 6600                       		bne.s	locret_71CE
000080E8 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000080EC 5438 F742                  		addq.b	#2,($FFFFF742).w
000080F0                            
000080F0                            locret_71CE:
000080F0 4E75                       		rts	
000080F2                            ; ===========================================================================
000080F2                            
000080F2                            Resize_SYZ3boss:
000080F2 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000080F8 6500                       		bcs.s	locret_7200
000080FA 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00008100 6100 0000                  		bsr.w	SingleObjLoad
00008104 6600                       		bne.s	loc_71EC
00008106 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000810A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000810E                            
0000810E                            loc_71EC:
0000810E 303C 008C                  		move.w	#$8C,d0
00008112 6100 9B60                  		bsr.w	PlaySound	; play boss music
00008116 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000811C 7011                       		moveq	#$11,d0
0000811E 6000 9D38                  		bra.w	LoadPLC		; load boss patterns
00008122                            ; ===========================================================================
00008122                            
00008122                            locret_7200:
00008122 4E75                       		rts	
00008124                            ; ===========================================================================
00008124                            
00008124                            Resize_SYZ3end:
00008124 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000812A 4E75                       		rts	
0000812C                            ; ===========================================================================
0000812C                            ; ---------------------------------------------------------------------------
0000812C                            ; Scrap	Brain Zone dynamic screen resizing
0000812C                            ; ---------------------------------------------------------------------------
0000812C                            
0000812C                            Resize_SBZ:				; XREF: Resize_Index
0000812C 7000                       		moveq	#0,d0
0000812E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008132 D040                       		add.w	d0,d0
00008134 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00008138 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
0000813C                            ; ===========================================================================
0000813C 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
0000813E 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00008140 0000                       		dc.w Resize_FZ-Resize_SBZx
00008142                            ; ===========================================================================
00008142                            
00008142                            Resize_SBZ1:
00008142 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00008148 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
0000814E 6500                       		bcs.s	locret_7242
00008150 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00008156 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000815C 6500                       		bcs.s	locret_7242
0000815E 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00008164                            
00008164                            locret_7242:
00008164 4E75                       		rts	
00008166                            ; ===========================================================================
00008166                            
00008166                            Resize_SBZ2:
00008166 7000                       		moveq	#0,d0
00008168 1038 F742                  		move.b	($FFFFF742).w,d0
0000816C 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008170 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008174                            ; ===========================================================================
00008174 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00008176 0000                       		dc.w Resize_SBZ2boss-off_7252
00008178 0000                       		dc.w Resize_SBZ2boss2-off_7252
0000817A 0000                       		dc.w Resize_SBZ2end-off_7252
0000817C                            ; ===========================================================================
0000817C                            
0000817C                            Resize_SBZ2main:
0000817C 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00008182 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00008188 6500                       		bcs.s	locret_727A
0000818A 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00008190 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00008196 6500                       		bcs.s	locret_727A
00008198 5438 F742                  		addq.b	#2,($FFFFF742).w
0000819C                            
0000819C                            locret_727A:
0000819C 4E75                       		rts	
0000819E                            ; ===========================================================================
0000819E                            
0000819E                            Resize_SBZ2boss:
0000819E 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000081A4 6500                       		bcs.s	locret_7298
000081A6 6100 0000                  		bsr.w	SingleObjLoad
000081AA 6600                       		bne.s	locret_7298
000081AC 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000081B0 5438 F742                  		addq.b	#2,($FFFFF742).w
000081B4 701E                       		moveq	#$1E,d0
000081B6 6000 9CA0                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000081BA                            ; ===========================================================================
000081BA                            
000081BA                            locret_7298:
000081BA 4E75                       		rts	
000081BC                            ; ===========================================================================
000081BC                            
000081BC                            Resize_SBZ2boss2:
000081BC 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000081C2 6500                       		bcs.s	loc_72B6
000081C4 6100 0000                  		bsr.w	SingleObjLoad
000081C8 6600                       		bne.s	loc_72B0
000081CA 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000081CE 5438 F742                  		addq.b	#2,($FFFFF742).w
000081D2                            
000081D2                            loc_72B0:
000081D2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000081D8                            
000081D8                            loc_72B6:
000081D8 6000                       		bra.s	loc_72C2
000081DA                            ; ===========================================================================
000081DA                            
000081DA                            Resize_SBZ2end:
000081DA 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000081E0 6500                       		bcs.s	loc_72C2
000081E2 4E75                       		rts	
000081E4                            ; ===========================================================================
000081E4                            
000081E4                            loc_72C2:
000081E4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000081EA 4E75                       		rts	
000081EC                            ; ===========================================================================
000081EC                            
000081EC                            Resize_FZ:
000081EC 7000                       		moveq	#0,d0
000081EE 1038 F742                  		move.b	($FFFFF742).w,d0
000081F2 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000081F6 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000081FA                            ; ===========================================================================
000081FA 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000081FE 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00008202 0000                       		dc.w Resize_FZend2-off_72D8
00008204                            ; ===========================================================================
00008204                            
00008204                            Resize_FZmain:
00008204 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000820A 6500                       		bcs.s	loc_72F4
0000820C 5438 F742                  		addq.b	#2,($FFFFF742).w
00008210 701F                       		moveq	#$1F,d0
00008212 6100 9C44                  		bsr.w	LoadPLC		; load FZ boss patterns
00008216                            
00008216                            loc_72F4:
00008216 60CC                       		bra.s	loc_72C2
00008218                            ; ===========================================================================
00008218                            
00008218                            Resize_FZboss:
00008218 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
0000821E 6500                       		bcs.s	loc_7312
00008220 6100 0000                  		bsr.w	SingleObjLoad
00008224 6600                       		bne.s	loc_7312
00008226 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000822A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000822E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008234                            
00008234                            loc_7312:
00008234 60AE                       		bra.s	loc_72C2
00008236                            ; ===========================================================================
00008236                            
00008236                            Resize_FZend:
00008236 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0000823C 6500                       		bcs.s	loc_7320
0000823E 5438 F742                  		addq.b	#2,($FFFFF742).w
00008242                            
00008242                            loc_7320:
00008242 60A0                       		bra.s	loc_72C2
00008244                            ; ===========================================================================
00008244                            
00008244                            locret_7322:
00008244 4E75                       		rts	
00008246                            ; ===========================================================================
00008246                            
00008246                            Resize_FZend2:
00008246 609C                       		bra.s	loc_72C2
00008248                            ; ===========================================================================
00008248                            ; ---------------------------------------------------------------------------
00008248                            ; Ending sequence dynamic screen resizing (empty)
00008248                            ; ---------------------------------------------------------------------------
00008248                            
00008248                            Resize_Ending:				; XREF: Resize_Index
00008248 4E75                       		rts	
0000824A                            ; ===========================================================================
0000824A                            ; ---------------------------------------------------------------------------
0000824A                            ; Object 11 - GHZ bridge
0000824A                            ; ---------------------------------------------------------------------------
0000824A                            
0000824A                            Obj11:					; XREF: Obj_Index
0000824A 7000                       		moveq	#0,d0
0000824C 1028 0024                  		move.b	$24(a0),d0
00008250 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00008254 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00008258                            ; ===========================================================================
00008258 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
0000825C 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00008260 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00008264                            ; ===========================================================================
00008264                            
00008264                            Obj11_Main:				; XREF: Obj11_Index
00008264 5428 0024                  		addq.b	#2,$24(a0)
00008268 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00008270 317C 438E 0002             		move.w	#$438E,2(a0)
00008276 117C 0004 0001             		move.b	#4,1(a0)
0000827C 117C 0003 0018             		move.b	#3,$18(a0)
00008282 117C 0080 0019             		move.b	#$80,$19(a0)
00008288 3428 000C                  		move.w	$C(a0),d2
0000828C 3628 0008                  		move.w	8(a0),d3
00008290 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008292 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00008296 7200                       		moveq	#0,d1
00008298 1212                       		move.b	(a2),d1		; copy a2 to d1
0000829A 14FC 0000                  		move.b	#0,(a2)+
0000829E 3001                       		move.w	d1,d0
000082A0 E248                       		lsr.w	#1,d0
000082A2 E948                       		lsl.w	#4,d0
000082A4 9640                       		sub.w	d0,d3
000082A6 5501                       		subq.b	#2,d1
000082A8 6500                       		bcs.s	Obj11_Action
000082AA                            
000082AA                            Obj11_MakeBdg:
000082AA 6100 0000                  		bsr.w	SingleObjLoad
000082AE 6600                       		bne.s	Obj11_Action
000082B0 5228 0028                  		addq.b	#1,$28(a0)
000082B4 B668 0008                  		cmp.w	8(a0),d3
000082B8 6600                       		bne.s	loc_73B8
000082BA 0643 0010                  		addi.w	#$10,d3
000082BE 3142 000C                  		move.w	d2,$C(a0)
000082C2 3142 003C                  		move.w	d2,$3C(a0)
000082C6 3A08                       		move.w	a0,d5
000082C8 0445 D000                  		subi.w	#-$3000,d5
000082CC EC4D                       		lsr.w	#6,d5
000082CE 0245 007F                  		andi.w	#$7F,d5
000082D2 14C5                       		move.b	d5,(a2)+
000082D4 5228 0028                  		addq.b	#1,$28(a0)
000082D8                            
000082D8                            loc_73B8:				; XREF: ROM:00007398j
000082D8 3A09                       		move.w	a1,d5
000082DA 0445 D000                  		subi.w	#-$3000,d5
000082DE EC4D                       		lsr.w	#6,d5
000082E0 0245 007F                  		andi.w	#$7F,d5
000082E4 14C5                       		move.b	d5,(a2)+
000082E6 137C 000A 0024             		move.b	#$A,$24(a1)
000082EC 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000082EE 3342 000C                  		move.w	d2,$C(a1)
000082F2 3342 003C                  		move.w	d2,$3C(a1)
000082F6 3343 0008                  		move.w	d3,8(a1)
000082FA 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00008302 337C 438E 0002             		move.w	#$438E,2(a1)
00008308 137C 0004 0001             		move.b	#4,1(a1)
0000830E 137C 0003 0018             		move.b	#3,$18(a1)
00008314 137C 0008 0019             		move.b	#8,$19(a1)
0000831A 0643 0010                  		addi.w	#$10,d3
0000831E 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00008322                            
00008322                            Obj11_Action:				; XREF: Obj11_Index
00008322 6100                       		bsr.s	Obj11_Solid
00008324 4A28 003E                  		tst.b	$3E(a0)
00008328 6700                       		beq.s	Obj11_Display
0000832A 5928 003E                  		subq.b	#4,$3E(a0)
0000832E 6100 0000                  		bsr.w	Obj11_Bend
00008332                            
00008332                            Obj11_Display:
00008332 6100 0000                  		bsr.w	DisplaySprite
00008336 6000 0000                  		bra.w	Obj11_ChkDel
0000833A                            
0000833A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000833A                            
0000833A                            
0000833A                            Obj11_Solid:				; XREF: Obj11_Action
0000833A 7200                       		moveq	#0,d1
0000833C 1228 0028                  		move.b	$28(a0),d1
00008340 E749                       		lsl.w	#3,d1
00008342 3401                       		move.w	d1,d2
00008344 5041                       		addq.w	#8,d1
00008346 D442                       		add.w	d2,d2
00008348 43F8 D000                  		lea	($FFFFD000).w,a1
0000834C 4A69 0012                  		tst.w	$12(a1)
00008350 6B00 0000                  		bmi.w	locret_751E
00008354 3029 0008                  		move.w	8(a1),d0
00008358 9068 0008                  		sub.w	8(a0),d0
0000835C D041                       		add.w	d1,d0
0000835E 6B00 0000                  		bmi.w	locret_751E
00008362 B042                       		cmp.w	d2,d0
00008364 6400 0000                  		bcc.w	locret_751E
00008368 6000                       		bra.s	Platform2
0000836A                            ; End of function Obj11_Solid
0000836A                            
0000836A                            ; ---------------------------------------------------------------------------
0000836A                            ; Platform subroutine
0000836A                            ; ---------------------------------------------------------------------------
0000836A                            
0000836A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000836A                            
0000836A                            
0000836A                            PlatformObject:
0000836A 43F8 D000                  		lea	($FFFFD000).w,a1
0000836E 4A69 0012                  		tst.w	$12(a1)
00008372 6B00 0000                  		bmi.w	locret_751E
00008376 3029 0008                  		move.w	8(a1),d0
0000837A 9068 0008                  		sub.w	8(a0),d0
0000837E D041                       		add.w	d1,d0
00008380 6B00 0000                  		bmi.w	locret_751E
00008384 D241                       		add.w	d1,d1
00008386 B041                       		cmp.w	d1,d0
00008388 6400 0000                  		bcc.w	locret_751E
0000838C                            
0000838C                            Platform2:
0000838C 3028 000C                  		move.w	$C(a0),d0
00008390 5140                       		subq.w	#8,d0
00008392                            
00008392                            Platform3:
00008392 3429 000C                  		move.w	$C(a1),d2
00008396 1229 0016                  		move.b	$16(a1),d1
0000839A 4881                       		ext.w	d1
0000839C D242                       		add.w	d2,d1
0000839E 5841                       		addq.w	#4,d1
000083A0 9041                       		sub.w	d1,d0
000083A2 6200 0000                  		bhi.w	locret_751E
000083A6 0C40 FFF0                  		cmpi.w	#-$10,d0
000083AA 6500 0000                  		bcs.w	locret_751E
000083AE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000083B2 6B00 0000                  		bmi.w	locret_751E
000083B6 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000083BC 6400 0000                  		bcc.w	locret_751E
000083C0 D440                       		add.w	d0,d2
000083C2 5642                       		addq.w	#3,d2
000083C4 3342 000C                  		move.w	d2,$C(a1)
000083C8 5428 0024                  		addq.b	#2,$24(a0)
000083CC                            
000083CC                            loc_74AE:
000083CC 0829 0003 0022             		btst	#3,$22(a1)
000083D2 6700                       		beq.s	loc_74DC
000083D4 7000                       		moveq	#0,d0
000083D6 1029 003D                  		move.b	$3D(a1),d0
000083DA ED48                       		lsl.w	#6,d0
000083DC 0680 00FF D000             		addi.l	#$FFD000,d0
000083E2 2440                       		movea.l	d0,a2
000083E4 08AA 0003 0022             		bclr	#3,$22(a2)
000083EA 422A 0025                  		clr.b	$25(a2)
000083EE 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
000083F4 6600                       		bne.s	loc_74DC
000083F6 552A 0024                  		subq.b	#2,$24(a2)
000083FA                            
000083FA                            loc_74DC:
000083FA 3008                       		move.w	a0,d0
000083FC 0440 D000                  		subi.w	#-$3000,d0
00008400 EC48                       		lsr.w	#6,d0
00008402 0240 007F                  		andi.w	#$7F,d0
00008406 1340 003D                  		move.b	d0,$3D(a1)
0000840A 137C 0000 0026             		move.b	#0,$26(a1)
00008410 337C 0000 0012             		move.w	#0,$12(a1)
00008416 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000841C 0829 0001 0022             		btst	#1,$22(a1)
00008422 6700                       		beq.s	loc_7512
00008424 2F08                       		move.l	a0,-(sp)
00008426 2049                       		movea.l	a1,a0
00008428 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000842E 205F                       		movea.l	(sp)+,a0
00008430                            
00008430                            loc_7512:
00008430 08E9 0003 0022             		bset	#3,$22(a1)
00008436 08E8 0003 0022             		bset	#3,$22(a0)
0000843C                            
0000843C                            locret_751E:
0000843C 4E75                       		rts	
0000843E                            ; End of function PlatformObject
0000843E                            
0000843E                            ; ---------------------------------------------------------------------------
0000843E                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
0000843E                            ; ---------------------------------------------------------------------------
0000843E                            
0000843E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000843E                            
0000843E                            
0000843E                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
0000843E 43F8 D000                  		lea	($FFFFD000).w,a1
00008442 4A69 0012                  		tst.w	$12(a1)
00008446 6B00 FFF4                  		bmi.w	locret_751E
0000844A 3029 0008                  		move.w	8(a1),d0
0000844E 9068 0008                  		sub.w	8(a0),d0
00008452 D041                       		add.w	d1,d0
00008454 6BE6                       		bmi.s	locret_751E
00008456 D241                       		add.w	d1,d1
00008458 B041                       		cmp.w	d1,d0
0000845A 64E0                       		bcc.s	locret_751E
0000845C 0828 0000 0001             		btst	#0,1(a0)
00008462 6700                       		beq.s	loc_754A
00008464 4640                       		not.w	d0
00008466 D041                       		add.w	d1,d0
00008468                            
00008468                            loc_754A:
00008468 E248                       		lsr.w	#1,d0
0000846A 7600                       		moveq	#0,d3
0000846C 1632 0000                  		move.b	(a2,d0.w),d3
00008470 3028 000C                  		move.w	$C(a0),d0
00008474 9043                       		sub.w	d3,d0
00008476 6000 FF1A                  		bra.w	Platform3
0000847A                            ; End of function SlopeObject
0000847A                            
0000847A                            
0000847A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000847A                            
0000847A                            
0000847A                            Obj15_Solid:				; XREF: Obj15_SetSolid
0000847A 43F8 D000                  		lea	($FFFFD000).w,a1
0000847E 4A69 0012                  		tst.w	$12(a1)
00008482 6B00 FFB8                  		bmi.w	locret_751E
00008486 3029 0008                  		move.w	8(a1),d0
0000848A 9068 0008                  		sub.w	8(a0),d0
0000848E D041                       		add.w	d1,d0
00008490 6B00 FFAA                  		bmi.w	locret_751E
00008494 D241                       		add.w	d1,d1
00008496 B041                       		cmp.w	d1,d0
00008498 6400 FFA2                  		bcc.w	locret_751E
0000849C 3028 000C                  		move.w	$C(a0),d0
000084A0 9043                       		sub.w	d3,d0
000084A2 6000 FEEE                  		bra.w	Platform3
000084A6                            ; End of function Obj15_Solid
000084A6                            
000084A6                            ; ===========================================================================
000084A6                            
000084A6                            Obj11_Action2:				; XREF: Obj11_Index
000084A6 6100                       		bsr.s	Obj11_WalkOff
000084A8 6100 0000                  		bsr.w	DisplaySprite
000084AC 6000 0000                  		bra.w	Obj11_ChkDel
000084B0                            
000084B0                            ; ---------------------------------------------------------------------------
000084B0                            ; Subroutine allowing Sonic to walk off a bridge
000084B0                            ; ---------------------------------------------------------------------------
000084B0                            
000084B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084B0                            
000084B0                            
000084B0                            Obj11_WalkOff:				; XREF: Obj11_Action2
000084B0 7200                       		moveq	#0,d1
000084B2 1228 0028                  		move.b	$28(a0),d1
000084B6 E749                       		lsl.w	#3,d1
000084B8 3401                       		move.w	d1,d2
000084BA 5041                       		addq.w	#8,d1
000084BC 6100                       		bsr.s	ExitPlatform2
000084BE 6400                       		bcc.s	locret_75BE
000084C0 E848                       		lsr.w	#4,d0
000084C2 1140 003F                  		move.b	d0,$3F(a0)
000084C6 1028 003E                  		move.b	$3E(a0),d0
000084CA 0C00 0040                  		cmpi.b	#$40,d0
000084CE 6700                       		beq.s	loc_75B6
000084D0 5828 003E                  		addq.b	#4,$3E(a0)
000084D4                            
000084D4                            loc_75B6:
000084D4 6100 0000                  		bsr.w	Obj11_Bend
000084D8 6100 0000                  		bsr.w	Obj11_MoveSonic
000084DC                            
000084DC                            locret_75BE:
000084DC 4E75                       		rts	
000084DE                            ; End of function Obj11_WalkOff
000084DE                            
000084DE                            ; ---------------------------------------------------------------------------
000084DE                            ; Subroutine allowing Sonic to walk or jump off	a platform
000084DE                            ; ---------------------------------------------------------------------------
000084DE                            
000084DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084DE                            
000084DE                            
000084DE                            ExitPlatform:
000084DE 3401                       		move.w	d1,d2
000084E0                            
000084E0                            ExitPlatform2:
000084E0 D442                       		add.w	d2,d2
000084E2 43F8 D000                  		lea	($FFFFD000).w,a1
000084E6 0829 0001 0022             		btst	#1,$22(a1)
000084EC 6600                       		bne.s	loc_75E0
000084EE 3029 0008                  		move.w	8(a1),d0
000084F2 9068 0008                  		sub.w	8(a0),d0
000084F6 D041                       		add.w	d1,d0
000084F8 6B00                       		bmi.s	loc_75E0
000084FA B042                       		cmp.w	d2,d0
000084FC 6500                       		bcs.s	locret_75F2
000084FE                            
000084FE                            loc_75E0:
000084FE 08A9 0003 0022             		bclr	#3,$22(a1)
00008504 117C 0002 0024             		move.b	#2,$24(a0)
0000850A 08A8 0003 0022             		bclr	#3,$22(a0)
00008510                            
00008510                            locret_75F2:
00008510 4E75                       		rts	
00008512                            ; End of function ExitPlatform
00008512                            
00008512                            
00008512                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008512                            
00008512                            
00008512                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00008512 7000                       		moveq	#0,d0
00008514 1028 003F                  		move.b	$3F(a0),d0
00008518 1030 0029                  		move.b	$29(a0,d0.w),d0
0000851C ED48                       		lsl.w	#6,d0
0000851E 0680 00FF D000             		addi.l	#$FFD000,d0
00008524 2440                       		movea.l	d0,a2
00008526 43F8 D000                  		lea	($FFFFD000).w,a1
0000852A 302A 000C                  		move.w	$C(a2),d0
0000852E 5140                       		subq.w	#8,d0
00008530 7200                       		moveq	#0,d1
00008532 1229 0016                  		move.b	$16(a1),d1
00008536 9041                       		sub.w	d1,d0
00008538 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
0000853C 4E75                       		rts	
0000853E                            ; End of function Obj11_MoveSonic
0000853E                            
0000853E                            
0000853E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000853E                            
0000853E                            
0000853E                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
0000853E 1028 003E                  		move.b	$3E(a0),d0
00008542 6100 AED2                  		bsr.w	CalcSine
00008546 3800                       		move.w	d0,d4
00008548 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
0000854E 7000                       		moveq	#0,d0
00008550 1028 0028                  		move.b	$28(a0),d0
00008554 E948                       		lsl.w	#4,d0
00008556 7600                       		moveq	#0,d3
00008558 1628 003F                  		move.b	$3F(a0),d3
0000855C 3403                       		move.w	d3,d2
0000855E D640                       		add.w	d0,d3
00008560 7A00                       		moveq	#0,d5
00008562 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00008568 1A35 3000                  		move.b	(a5,d3.w),d5
0000856C 0243 000F                  		andi.w	#$F,d3
00008570 E94B                       		lsl.w	#4,d3
00008572 47F4 3000                  		lea	(a4,d3.w),a3
00008576 45E8 0029                  		lea	$29(a0),a2
0000857A                            
0000857A                            loc_765C:
0000857A 7000                       		moveq	#0,d0
0000857C 101A                       		move.b	(a2)+,d0
0000857E ED48                       		lsl.w	#6,d0
00008580 0680 00FF D000             		addi.l	#$FFD000,d0
00008586 2240                       		movea.l	d0,a1
00008588 7000                       		moveq	#0,d0
0000858A 101B                       		move.b	(a3)+,d0
0000858C 5240                       		addq.w	#1,d0
0000858E C0C5                       		mulu.w	d5,d0
00008590 C0C4                       		mulu.w	d4,d0
00008592 4840                       		swap	d0
00008594 D069 003C                  		add.w	$3C(a1),d0
00008598 3340 000C                  		move.w	d0,$C(a1)
0000859C 51CA FFDC                  		dbf	d2,loc_765C
000085A0 7000                       		moveq	#0,d0
000085A2 1028 0028                  		move.b	$28(a0),d0
000085A6 7600                       		moveq	#0,d3
000085A8 1628 003F                  		move.b	$3F(a0),d3
000085AC 5203                       		addq.b	#1,d3
000085AE 9600                       		sub.b	d0,d3
000085B0 4403                       		neg.b	d3
000085B2 6B00                       		bmi.s	locret_76CA
000085B4 3403                       		move.w	d3,d2
000085B6 E94B                       		lsl.w	#4,d3
000085B8 47F4 3000                  		lea	(a4,d3.w),a3
000085BC D6C2                       		adda.w	d2,a3
000085BE 5342                       		subq.w	#1,d2
000085C0 6500                       		bcs.s	locret_76CA
000085C2                            
000085C2                            loc_76A4:
000085C2 7000                       		moveq	#0,d0
000085C4 101A                       		move.b	(a2)+,d0
000085C6 ED48                       		lsl.w	#6,d0
000085C8 0680 00FF D000             		addi.l	#$FFD000,d0
000085CE 2240                       		movea.l	d0,a1
000085D0 7000                       		moveq	#0,d0
000085D2 1023                       		move.b	-(a3),d0
000085D4 5240                       		addq.w	#1,d0
000085D6 C0C5                       		mulu.w	d5,d0
000085D8 C0C4                       		mulu.w	d4,d0
000085DA 4840                       		swap	d0
000085DC D069 003C                  		add.w	$3C(a1),d0
000085E0 3340 000C                  		move.w	d0,$C(a1)
000085E4 51CA FFDC                  		dbf	d2,loc_76A4
000085E8                            
000085E8                            locret_76CA:
000085E8 4E75                       		rts	
000085EA                            ; End of function Obj11_Bend
000085EA                            
000085EA                            ; ===========================================================================
000085EA                            ; ---------------------------------------------------------------------------
000085EA                            ; GHZ bridge-bending data
000085EA                            ; (Defines how the bridge bends	when Sonic walks across	it)
000085EA                            ; ---------------------------------------------------------------------------
000085EA                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000086FA                            		even
000086FA                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000087FA                            		even
000087FA                            
000087FA                            ; ===========================================================================
000087FA                            
000087FA                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000087FA 3028 0008                  		move.w	8(a0),d0
000087FE 0240 FF80                  		andi.w	#$FF80,d0
00008802 3238 F700                  		move.w	($FFFFF700).w,d1
00008806 0441 0080                  		subi.w	#$80,d1
0000880A 0241 FF80                  		andi.w	#$FF80,d1
0000880E 9041                       		sub.w	d1,d0
00008810 0C40 0280                  		cmpi.w	#$280,d0
00008814 6200 0000                  		bhi.w	Obj11_DelAll
00008818 4E75                       		rts	
0000881A                            ; ===========================================================================
0000881A                            
0000881A                            Obj11_DelAll:				; XREF: Obj11_ChkDel
0000881A 7400                       		moveq	#0,d2
0000881C 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00008820 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00008822 5302                       		subq.b	#1,d2		; subtract 1
00008824 6500                       		bcs.s	Obj11_Delete
00008826                            
00008826                            Obj11_DelLoop:
00008826 7000                       		moveq	#0,d0
00008828 101A                       		move.b	(a2)+,d0
0000882A ED48                       		lsl.w	#6,d0
0000882C 0680 00FF D000             		addi.l	#$FFD000,d0
00008832 2240                       		movea.l	d0,a1
00008834 B048                       		cmp.w	a0,d0
00008836 6700                       		beq.s	loc_791E
00008838 6100 0000                  		bsr.w	DeleteObject2
0000883C                            
0000883C                            loc_791E:
0000883C 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00008840                            
00008840                            Obj11_Delete:
00008840 6100 0000                  		bsr.w	DeleteObject
00008844 4E75                       		rts	
00008846                            ; ===========================================================================
00008846                            
00008846                            Obj11_Delete2:				; XREF: Obj11_Index
00008846 6100 0000                  		bsr.w	DeleteObject
0000884A 4E75                       		rts	
0000884C                            ; ===========================================================================
0000884C                            
0000884C                            Obj11_Display2:				; XREF: Obj11_Index
0000884C 6100 0000                  		bsr.w	DisplaySprite
00008850 4E75                       		rts	
00008852                            ; ===========================================================================
00008852                            ; ---------------------------------------------------------------------------
00008852                            ; Sprite mappings - GHZ	bridge
00008852                            ; ---------------------------------------------------------------------------
00008852                            Map_obj11:
00008852                            	include "_maps\obj11.asm"
00008852                            ; ---------------------------------------------------------------------------
00008852                            ; Sprite mappings - GHZ	bridge
00008852                            ; ---------------------------------------------------------------------------
00008852 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00008856 0000                       		dc.w byte_794B-Map_obj11
00008858 01                         byte_793A:	dc.b 1
00008859 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000885E 02                         byte_7940:	dc.b 2
0000885F F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00008864 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00008869 01                         byte_794B:	dc.b 1
0000886A FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00008870 00                         		even
00008870 00                         		even
00008870                            
00008870                            ; ===========================================================================
00008870                            ; ---------------------------------------------------------------------------
00008870                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00008870                            ;	    - spiked ball on a chain (SBZ)
00008870                            ; ---------------------------------------------------------------------------
00008870                            
00008870                            Obj15:					; XREF: Obj_Index
00008870 7000                       		moveq	#0,d0
00008872 1028 0024                  		move.b	$24(a0),d0
00008876 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
0000887A 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
0000887E                            ; ===========================================================================
0000887E 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00008882 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00008886 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
0000888A 0000                       		dc.w Obj15_Action-Obj15_Index
0000888C                            ; ===========================================================================
0000888C                            
0000888C                            Obj15_Main:				; XREF: Obj15_Index
0000888C 5428 0024                  		addq.b	#2,$24(a0)
00008890 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00008898 317C 4380 0002             		move.w	#$4380,2(a0)
0000889E 117C 0004 0001             		move.b	#4,1(a0)
000088A4 117C 0003 0018             		move.b	#3,$18(a0)
000088AA 117C 0018 0019             		move.b	#$18,$19(a0)
000088B0 117C 0008 0016             		move.b	#8,$16(a0)
000088B6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000088BC 3168 0008 003A             		move.w	8(a0),$3A(a0)
000088C2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000088C8 6600                       		bne.s	Obj15_NotSLZ
000088CA 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
000088D2 317C 43DC 0002             		move.w	#$43DC,2(a0)
000088D8 117C 0020 0019             		move.b	#$20,$19(a0)
000088DE 117C 0010 0016             		move.b	#$10,$16(a0)
000088E4 117C 0099 0020             		move.b	#$99,$20(a0)
000088EA                            
000088EA                            Obj15_NotSLZ:
000088EA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000088F0 6600                       		bne.s	Obj15_SetLength
000088F2 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
000088FA 317C 0391 0002             		move.w	#$391,2(a0)
00008900 117C 0018 0019             		move.b	#$18,$19(a0)
00008906 117C 0018 0016             		move.b	#$18,$16(a0)
0000890C 117C 0086 0020             		move.b	#$86,$20(a0)
00008912 117C 000C 0024             		move.b	#$C,$24(a0)
00008918                            
00008918                            Obj15_SetLength:
00008918 1810                       		move.b	0(a0),d4
0000891A 7200                       		moveq	#0,d1
0000891C 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008920 1212                       		move.b	(a2),d1		; move a2 to d1
00008922 3F01                       		move.w	d1,-(sp)
00008924 0241 000F                  		andi.w	#$F,d1
00008928 14FC 0000                  		move.b	#0,(a2)+
0000892C 3601                       		move.w	d1,d3
0000892E E94B                       		lsl.w	#4,d3
00008930 5003                       		addq.b	#8,d3
00008932 1143 003C                  		move.b	d3,$3C(a0)
00008936 5103                       		subq.b	#8,d3
00008938 4A28 001A                  		tst.b	$1A(a0)
0000893C 6700                       		beq.s	Obj15_MakeChain
0000893E 5003                       		addq.b	#8,d3
00008940 5341                       		subq.w	#1,d1
00008942                            
00008942                            Obj15_MakeChain:
00008942 6100 0000                  		bsr.w	SingleObjLoad
00008946 6600                       		bne.s	loc_7A92
00008948 5228 0028                  		addq.b	#1,$28(a0)
0000894C 3A09                       		move.w	a1,d5
0000894E 0445 D000                  		subi.w	#-$3000,d5
00008952 EC4D                       		lsr.w	#6,d5
00008954 0245 007F                  		andi.w	#$7F,d5
00008958 14C5                       		move.b	d5,(a2)+
0000895A 137C 000A 0024             		move.b	#$A,$24(a1)
00008960 1284                       		move.b	d4,0(a1)	; load swinging	object
00008962 2368 0004 0004             		move.l	4(a0),4(a1)
00008968 3368 0002 0002             		move.w	2(a0),2(a1)
0000896E 08A9 0006 0002             		bclr	#6,2(a1)
00008974 137C 0004 0001             		move.b	#4,1(a1)
0000897A 137C 0004 0018             		move.b	#4,$18(a1)
00008980 137C 0008 0019             		move.b	#8,$19(a1)
00008986 137C 0001 001A             		move.b	#1,$1A(a1)
0000898C 1343 003C                  		move.b	d3,$3C(a1)
00008990 0403 0010                  		subi.b	#$10,d3
00008994 6400                       		bcc.s	loc_7A8E
00008996 137C 0002 001A             		move.b	#2,$1A(a1)
0000899C 137C 0003 0018             		move.b	#3,$18(a1)
000089A2 08E9 0006 0002             		bset	#6,2(a1)
000089A8                            
000089A8                            loc_7A8E:
000089A8 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
000089AC                            
000089AC                            loc_7A92:
000089AC 3A08                       		move.w	a0,d5
000089AE 0445 D000                  		subi.w	#-$3000,d5
000089B2 EC4D                       		lsr.w	#6,d5
000089B4 0245 007F                  		andi.w	#$7F,d5
000089B8 14C5                       		move.b	d5,(a2)+
000089BA 317C 4080 0026             		move.w	#$4080,$26(a0)
000089C0 317C FE00 003E             		move.w	#-$200,$3E(a0)
000089C6 321F                       		move.w	(sp)+,d1
000089C8 0801 0004                  		btst	#4,d1		; is object type $8X ?
000089CC 6700                       		beq.s	loc_7AD4	; if not, branch
000089CE 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
000089D6 317C 43AA 0002             		move.w	#$43AA,2(a0)
000089DC 117C 0001 001A             		move.b	#1,$1A(a0)
000089E2 117C 0002 0018             		move.b	#2,$18(a0)
000089E8 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
000089EE                            
000089EE                            loc_7AD4:
000089EE 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
000089F4 6700                       		beq.s	Obj15_Action	; if yes, branch
000089F6                            
000089F6                            Obj15_SetSolid:				; XREF: Obj15_Index
000089F6 7200                       		moveq	#0,d1
000089F8 1228 0019                  		move.b	$19(a0),d1
000089FC 7600                       		moveq	#0,d3
000089FE 1628 0016                  		move.b	$16(a0),d3
00008A02 6100 FA76                  		bsr.w	Obj15_Solid
00008A06                            
00008A06                            Obj15_Action:				; XREF: Obj15_Index
00008A06 6100 0000                  		bsr.w	Obj15_Move
00008A0A 6100 0000                  		bsr.w	DisplaySprite
00008A0E 6000 0000                  		bra.w	Obj15_ChkDel
00008A12                            ; ===========================================================================
00008A12                            
00008A12                            Obj15_Action2:				; XREF: Obj15_Index
00008A12 7200                       		moveq	#0,d1
00008A14 1228 0019                  		move.b	$19(a0),d1
00008A18 6100 FAC4                  		bsr.w	ExitPlatform
00008A1C 3F28 0008                  		move.w	8(a0),-(sp)
00008A20 6100 0000                  		bsr.w	Obj15_Move
00008A24 341F                       		move.w	(sp)+,d2
00008A26 7600                       		moveq	#0,d3
00008A28 1628 0016                  		move.b	$16(a0),d3
00008A2C 5203                       		addq.b	#1,d3
00008A2E 6100 0000                  		bsr.w	MvSonicOnPtfm
00008A32 6100 0000                  		bsr.w	DisplaySprite
00008A36 6000 0000                  		bra.w	Obj15_ChkDel
00008A3A                            
00008A3A 4E75                       		rts
00008A3C                            
00008A3C                            ; ---------------------------------------------------------------------------
00008A3C                            ; Subroutine to	change Sonic's position with a platform
00008A3C                            ; ---------------------------------------------------------------------------
00008A3C                            
00008A3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A3C                            
00008A3C                            
00008A3C                            MvSonicOnPtfm:
00008A3C 43F8 D000                  		lea	($FFFFD000).w,a1
00008A40 3028 000C                  		move.w	$C(a0),d0
00008A44 9043                       		sub.w	d3,d0
00008A46 6000                       		bra.s	MvSonic2
00008A48                            ; End of function MvSonicOnPtfm
00008A48                            
00008A48                            ; ---------------------------------------------------------------------------
00008A48                            ; Subroutine to	change Sonic's position with a platform
00008A48                            ; ---------------------------------------------------------------------------
00008A48                            
00008A48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A48                            
00008A48                            
00008A48                            MvSonicOnPtfm2:
00008A48 43F8 D000                  		lea	($FFFFD000).w,a1
00008A4C 3028 000C                  		move.w	$C(a0),d0
00008A50 0440 0009                  		subi.w	#9,d0
00008A54                            
00008A54                            MvSonic2:
00008A54 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008A58 6B00                       		bmi.s	locret_7B62
00008A5A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008A60 6400                       		bcc.s	locret_7B62
00008A62 4A78 FE08                  		tst.w	($FFFFFE08).w
00008A66 6600                       		bne.s	locret_7B62
00008A68 7200                       		moveq	#0,d1
00008A6A 1229 0016                  		move.b	$16(a1),d1
00008A6E 9041                       		sub.w	d1,d0
00008A70 3340 000C                  		move.w	d0,$C(a1)
00008A74 9468 0008                  		sub.w	8(a0),d2
00008A78 9569 0008                  		sub.w	d2,8(a1)
00008A7C                            
00008A7C                            locret_7B62:
00008A7C 4E75                       		rts	
00008A7E                            ; End of function MvSonicOnPtfm2
00008A7E                            
00008A7E                            
00008A7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A7E                            
00008A7E                            
00008A7E                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008A7E 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008A82 323C 0080                  		move.w	#$80,d1
00008A86 0828 0000 0022             		btst	#0,$22(a0)
00008A8C 6700                       		beq.s	loc_7B78
00008A8E 4440                       		neg.w	d0
00008A90 D041                       		add.w	d1,d0
00008A92                            
00008A92                            loc_7B78:
00008A92 6000                       		bra.s	Obj15_Move2
00008A94                            ; End of function Obj15_Move
00008A94                            
00008A94                            
00008A94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A94                            
00008A94                            
00008A94                            Obj48_Move:				; XREF: Obj48_Display2
00008A94 4A28 003D                  		tst.b	$3D(a0)
00008A98 6600                       		bne.s	loc_7B9C
00008A9A 3028 003E                  		move.w	$3E(a0),d0
00008A9E 5040                       		addq.w	#8,d0
00008AA0 3140 003E                  		move.w	d0,$3E(a0)
00008AA4 D168 0026                  		add.w	d0,$26(a0)
00008AA8 0C40 0200                  		cmpi.w	#$200,d0
00008AAC 6600                       		bne.s	loc_7BB6
00008AAE 117C 0001 003D             		move.b	#1,$3D(a0)
00008AB4 6000                       		bra.s	loc_7BB6
00008AB6                            ; ===========================================================================
00008AB6                            
00008AB6                            loc_7B9C:
00008AB6 3028 003E                  		move.w	$3E(a0),d0
00008ABA 5140                       		subq.w	#8,d0
00008ABC 3140 003E                  		move.w	d0,$3E(a0)
00008AC0 D168 0026                  		add.w	d0,$26(a0)
00008AC4 0C40 FE00                  		cmpi.w	#-$200,d0
00008AC8 6600                       		bne.s	loc_7BB6
00008ACA 117C 0000 003D             		move.b	#0,$3D(a0)
00008AD0                            
00008AD0                            loc_7BB6:
00008AD0 1028 0026                  		move.b	$26(a0),d0
00008AD4                            ; End of function Obj48_Move
00008AD4                            
00008AD4                            
00008AD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AD4                            
00008AD4                            
00008AD4                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008AD4 6100 A940                  		bsr.w	CalcSine
00008AD8 3428 0038                  		move.w	$38(a0),d2
00008ADC 3628 003A                  		move.w	$3A(a0),d3
00008AE0 45E8 0028                  		lea	$28(a0),a2
00008AE4 7C00                       		moveq	#0,d6
00008AE6 1C1A                       		move.b	(a2)+,d6
00008AE8                            
00008AE8                            loc_7BCE:
00008AE8 7800                       		moveq	#0,d4
00008AEA 181A                       		move.b	(a2)+,d4
00008AEC ED4C                       		lsl.w	#6,d4
00008AEE 0684 00FF D000             		addi.l	#$FFD000,d4
00008AF4 2244                       		movea.l	d4,a1
00008AF6 7800                       		moveq	#0,d4
00008AF8 1829 003C                  		move.b	$3C(a1),d4
00008AFC 2A04                       		move.l	d4,d5
00008AFE C9C0                       		muls.w	d0,d4
00008B00 E084                       		asr.l	#8,d4
00008B02 CBC1                       		muls.w	d1,d5
00008B04 E085                       		asr.l	#8,d5
00008B06 D842                       		add.w	d2,d4
00008B08 DA43                       		add.w	d3,d5
00008B0A 3344 000C                  		move.w	d4,$C(a1)
00008B0E 3345 0008                  		move.w	d5,8(a1)
00008B12 51CE FFD4                  		dbf	d6,loc_7BCE
00008B16 4E75                       		rts	
00008B18                            ; End of function Obj15_Move2
00008B18                            
00008B18                            ; ===========================================================================
00008B18                            
00008B18                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008B18 3028 003A                  		move.w	$3A(a0),d0
00008B1C 0240 FF80                  		andi.w	#$FF80,d0
00008B20 3238 F700                  		move.w	($FFFFF700).w,d1
00008B24 0441 0080                  		subi.w	#$80,d1
00008B28 0241 FF80                  		andi.w	#$FF80,d1
00008B2C 9041                       		sub.w	d1,d0
00008B2E 0C40 0280                  		cmpi.w	#$280,d0
00008B32 6200 0000                  		bhi.w	Obj15_DelAll
00008B36 4E75                       		rts	
00008B38                            ; ===========================================================================
00008B38                            
00008B38                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008B38 7400                       		moveq	#0,d2
00008B3A 45E8 0028                  		lea	$28(a0),a2
00008B3E 141A                       		move.b	(a2)+,d2
00008B40                            
00008B40                            Obj15_DelLoop:
00008B40 7000                       		moveq	#0,d0
00008B42 101A                       		move.b	(a2)+,d0
00008B44 ED48                       		lsl.w	#6,d0
00008B46 0680 00FF D000             		addi.l	#$FFD000,d0
00008B4C 2240                       		movea.l	d0,a1
00008B4E 6100 0000                  		bsr.w	DeleteObject2
00008B52 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008B56 4E75                       		rts	
00008B58                            ; ===========================================================================
00008B58                            
00008B58                            Obj15_Delete:				; XREF: Obj15_Index
00008B58 6100 0000                  		bsr.w	DeleteObject
00008B5C 4E75                       		rts	
00008B5E                            ; ===========================================================================
00008B5E                            
00008B5E                            Obj15_Display:				; XREF: Obj15_Index
00008B5E 6000 0000                  		bra.w	DisplaySprite
00008B62                            ; ===========================================================================
00008B62                            ; ---------------------------------------------------------------------------
00008B62                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008B62                            ; ---------------------------------------------------------------------------
00008B62                            Map_obj15:
00008B62                            	include "_maps\obj15ghz.asm"
00008B62                            ; ---------------------------------------------------------------------------
00008B62                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008B62                            ; ---------------------------------------------------------------------------
00008B62 0000                       		dc.w byte_7C4E-Map_obj15
00008B64 0000                       		dc.w byte_7C59-Map_obj15
00008B66 0000                       		dc.w byte_7C5F-Map_obj15
00008B68 02                         byte_7C4E:	dc.b 2
00008B69 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008B6E F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008B73 01                         byte_7C59:	dc.b 1
00008B74 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008B79 01                         byte_7C5F:	dc.b 1
00008B7A F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008B80 00                         		even
00008B80 00                         		even
00008B80                            
00008B80                            ; ---------------------------------------------------------------------------
00008B80                            ; Sprite mappings - SLZ	swinging platforms
00008B80                            ; ---------------------------------------------------------------------------
00008B80                            Map_obj15a:
00008B80                            	include "_maps\obj15slz.asm"
00008B80                            ; ---------------------------------------------------------------------------
00008B80                            ; Sprite mappings - SLZ	swinging platforms
00008B80                            ; ---------------------------------------------------------------------------
00008B80 0000                       		dc.w byte_7C6C-Map_obj15a
00008B82 0000                       		dc.w byte_7C95-Map_obj15a
00008B84 0000                       		dc.w byte_7C9B-Map_obj15a
00008B86 08                         byte_7C6C:	dc.b 8
00008B87 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008B8C F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008B91 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008B96 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008B9B 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008BA0 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008BA5 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008BAA 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008BAF 01                         byte_7C95:	dc.b 1
00008BB0 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008BB5 01                         byte_7C9B:	dc.b 1
00008BB6 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008BBC 00                         		even
00008BBC 00                         		even
00008BBC                            
00008BBC                            ; ===========================================================================
00008BBC                            ; ---------------------------------------------------------------------------
00008BBC                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008BBC                            ; ---------------------------------------------------------------------------
00008BBC                            
00008BBC                            Obj17:					; XREF: Obj_Index
00008BBC 7000                       		moveq	#0,d0
00008BBE 1028 0024                  		move.b	$24(a0),d0
00008BC2 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008BC6 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008BCA                            ; ===========================================================================
00008BCA 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008BCC 0000                       		dc.w Obj17_Action-Obj17_Index
00008BCE 0000                       		dc.w Obj17_Action-Obj17_Index
00008BD0 0000                       		dc.w Obj17_Delete-Obj17_Index
00008BD2 0000                       		dc.w Obj17_Display-Obj17_Index
00008BD4                            ; ===========================================================================
00008BD4                            
00008BD4                            Obj17_Main:				; XREF: Obj17_Index
00008BD4 5428 0024                  		addq.b	#2,$24(a0)
00008BD8 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008BE0 317C 4398 0002             		move.w	#$4398,2(a0)
00008BE6 117C 0007 0022             		move.b	#7,$22(a0)
00008BEC 117C 0004 0001             		move.b	#4,1(a0)
00008BF2 117C 0003 0018             		move.b	#3,$18(a0)
00008BF8 117C 0008 0019             		move.b	#8,$19(a0)
00008BFE 3428 000C                  		move.w	$C(a0),d2
00008C02 3628 0008                  		move.w	8(a0),d3
00008C06 1810                       		move.b	0(a0),d4
00008C08 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008C0C 7200                       		moveq	#0,d1
00008C0E 1212                       		move.b	(a2),d1		; move a2 to d1
00008C10 14FC 0000                  		move.b	#0,(a2)+
00008C14 3001                       		move.w	d1,d0
00008C16 E248                       		lsr.w	#1,d0
00008C18 E948                       		lsl.w	#4,d0
00008C1A 9640                       		sub.w	d0,d3
00008C1C 5501                       		subq.b	#2,d1
00008C1E 6500                       		bcs.s	Obj17_Action
00008C20 7C00                       		moveq	#0,d6
00008C22                            
00008C22                            Obj17_MakeHelix:
00008C22 6100 0000                  		bsr.w	SingleObjLoad
00008C26 6600                       		bne.s	Obj17_Action
00008C28 5228 0028                  		addq.b	#1,$28(a0)
00008C2C 3A09                       		move.w	a1,d5
00008C2E 0445 D000                  		subi.w	#$D000,d5
00008C32 EC4D                       		lsr.w	#6,d5
00008C34 0245 007F                  		andi.w	#$7F,d5
00008C38 14C5                       		move.b	d5,(a2)+
00008C3A 137C 0008 0024             		move.b	#8,$24(a1)
00008C40 1284                       		move.b	d4,0(a1)
00008C42 3342 000C                  		move.w	d2,$C(a1)
00008C46 3343 0008                  		move.w	d3,8(a1)
00008C4A 2368 0004 0004             		move.l	4(a0),4(a1)
00008C50 337C 4398 0002             		move.w	#$4398,2(a1)
00008C56 137C 0004 0001             		move.b	#4,1(a1)
00008C5C 137C 0003 0018             		move.b	#3,$18(a1)
00008C62 137C 0008 0019             		move.b	#8,$19(a1)
00008C68 1346 003E                  		move.b	d6,$3E(a1)
00008C6C 5206                       		addq.b	#1,d6
00008C6E 0206 0007                  		andi.b	#7,d6
00008C72 0643 0010                  		addi.w	#$10,d3
00008C76 B668 0008                  		cmp.w	8(a0),d3
00008C7A 6600                       		bne.s	loc_7D78
00008C7C 1146 003E                  		move.b	d6,$3E(a0)
00008C80 5206                       		addq.b	#1,d6
00008C82 0206 0007                  		andi.b	#7,d6
00008C86 0643 0010                  		addi.w	#$10,d3
00008C8A 5228 0028                  		addq.b	#1,$28(a0)
00008C8E                            
00008C8E                            loc_7D78:
00008C8E 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008C92                            
00008C92                            Obj17_Action:				; XREF: Obj17_Index
00008C92 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008C96 6100 0000                  		bsr.w	DisplaySprite
00008C9A 6000 0000                  		bra.w	Obj17_ChkDel
00008C9E                            
00008C9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C9E                            
00008C9E                            
00008C9E                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008C9E 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008CA2 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008CA8 D028 003E                  		add.b	$3E(a0),d0
00008CAC 0200 0007                  		andi.b	#7,d0
00008CB0 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008CB4 6600                       		bne.s	locret_7DA6
00008CB6 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008CBC                            
00008CBC                            locret_7DA6:
00008CBC 4E75                       		rts	
00008CBE                            ; End of function Obj17_RotateSpikes
00008CBE                            
00008CBE                            ; ===========================================================================
00008CBE                            
00008CBE                            Obj17_ChkDel:				; XREF: Obj17_Action
00008CBE 3028 0008                  		move.w	8(a0),d0
00008CC2 0240 FF80                  		andi.w	#$FF80,d0
00008CC6 3238 F700                  		move.w	($FFFFF700).w,d1
00008CCA 0441 0080                  		subi.w	#$80,d1
00008CCE 0241 FF80                  		andi.w	#$FF80,d1
00008CD2 9041                       		sub.w	d1,d0
00008CD4 0C40 0280                  		cmpi.w	#$280,d0
00008CD8 6200 0000                  		bhi.w	Obj17_DelAll
00008CDC 4E75                       		rts	
00008CDE                            ; ===========================================================================
00008CDE                            
00008CDE                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008CDE 7400                       		moveq	#0,d2
00008CE0 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008CE4 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008CE6 5502                       		subq.b	#2,d2
00008CE8 6500                       		bcs.s	Obj17_Delete
00008CEA                            
00008CEA                            Obj17_DelLoop:
00008CEA 7000                       		moveq	#0,d0
00008CEC 101A                       		move.b	(a2)+,d0
00008CEE ED48                       		lsl.w	#6,d0
00008CF0 0680 00FF D000             		addi.l	#$FFD000,d0
00008CF6 2240                       		movea.l	d0,a1
00008CF8 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008CFC 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008D00                            
00008D00                            Obj17_Delete:				; XREF: Obj17_Index
00008D00 6100 0000                  		bsr.w	DeleteObject
00008D04 4E75                       		rts	
00008D06                            ; ===========================================================================
00008D06                            
00008D06                            Obj17_Display:				; XREF: Obj17_Index
00008D06 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00008D0A 6000 0000                  		bra.w	DisplaySprite
00008D0E                            ; ===========================================================================
00008D0E                            ; ---------------------------------------------------------------------------
00008D0E                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008D0E                            ; ---------------------------------------------------------------------------
00008D0E                            Map_obj17:
00008D0E                            	include "_maps\obj17.asm"
00008D0E                            ; ---------------------------------------------------------------------------
00008D0E                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008D0E                            ; ---------------------------------------------------------------------------
00008D0E 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008D12 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008D16 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008D1A 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008D1E 01                         byte_7E08:	dc.b 1
00008D1F F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008D24 01                         byte_7E0E:	dc.b 1
00008D25 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008D2A 01                         byte_7E14:	dc.b 1
00008D2B F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008D30 01                         byte_7E1A:	dc.b 1
00008D31 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008D36 01                         byte_7E20:	dc.b 1
00008D37 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008D3C 01                         byte_7E26:	dc.b 1
00008D3D 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008D42 01                         byte_7E2C:	dc.b 1
00008D43 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008D48                            		even
00008D48                            		even
00008D48                            
00008D48                            ; ===========================================================================
00008D48                            ; ---------------------------------------------------------------------------
00008D48                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008D48                            ; ---------------------------------------------------------------------------
00008D48                            
00008D48                            Obj18:					; XREF: Obj_Index
00008D48 7000                       		moveq	#0,d0
00008D4A 1028 0024                  		move.b	$24(a0),d0
00008D4E 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008D52 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008D56                            ; ===========================================================================
00008D56 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008D58 0000                       		dc.w Obj18_Solid-Obj18_Index
00008D5A 0000                       		dc.w Obj18_Action2-Obj18_Index
00008D5C 0000                       		dc.w Obj18_Delete-Obj18_Index
00008D5E 0000                       		dc.w Obj18_Action-Obj18_Index
00008D60                            ; ===========================================================================
00008D60                            
00008D60                            Obj18_Main:				; XREF: Obj18_Index
00008D60 5428 0024                  		addq.b	#2,$24(a0)
00008D64 317C 4000 0002             		move.w	#$4000,2(a0)
00008D6A 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008D72 117C 0020 0019             		move.b	#$20,$19(a0)
00008D78 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008D7E 6600                       		bne.s	Obj18_NotSYZ
00008D80 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008D88 117C 0020 0019             		move.b	#$20,$19(a0)
00008D8E                            
00008D8E                            Obj18_NotSYZ:
00008D8E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008D94 6600                       		bne.s	Obj18_NotSLZ
00008D96 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008D9E 117C 0020 0019             		move.b	#$20,$19(a0)
00008DA4 317C 4000 0002             		move.w	#$4000,2(a0)
00008DAA 117C 0003 0028             		move.b	#3,$28(a0)
00008DB0                            
00008DB0                            Obj18_NotSLZ:
00008DB0 117C 0004 0001             		move.b	#4,1(a0)
00008DB6 117C 0004 0018             		move.b	#4,$18(a0)
00008DBC 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008DC2 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008DC8 3168 0008 0032             		move.w	8(a0),$32(a0)
00008DCE 317C 0080 0026             		move.w	#$80,$26(a0)
00008DD4 7200                       		moveq	#0,d1
00008DD6 1028 0028                  		move.b	$28(a0),d0
00008DDA 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008DDE 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008DE0 5201                       		addq.b	#1,d1		; use frame #1
00008DE2 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008DE8                            
00008DE8                            Obj18_SetFrame:
00008DE8 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008DEC                            
00008DEC                            Obj18_Solid:				; XREF: Obj18_Index
00008DEC 4A28 0038                  		tst.b	$38(a0)
00008DF0 6700                       		beq.s	loc_7EE0
00008DF2 5928 0038                  		subq.b	#4,$38(a0)
00008DF6                            
00008DF6                            loc_7EE0:
00008DF6 7200                       		moveq	#0,d1
00008DF8 1228 0019                  		move.b	$19(a0),d1
00008DFC 6100 F56C                  		bsr.w	PlatformObject
00008E00                            
00008E00                            Obj18_Action:				; XREF: Obj18_Index
00008E00 6100 0000                  		bsr.w	Obj18_Move
00008E04 6100 0000                  		bsr.w	Obj18_Nudge
00008E08 6100 0000                  		bsr.w	DisplaySprite
00008E0C 6000 0000                  		bra.w	Obj18_ChkDel
00008E10                            ; ===========================================================================
00008E10                            
00008E10                            Obj18_Action2:				; XREF: Obj18_Index
00008E10 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00008E16 6700                       		beq.s	loc_7F06
00008E18 5828 0038                  		addq.b	#4,$38(a0)
00008E1C                            
00008E1C                            loc_7F06:
00008E1C 7200                       		moveq	#0,d1
00008E1E 1228 0019                  		move.b	$19(a0),d1
00008E22 6100 F6BA                  		bsr.w	ExitPlatform
00008E26 3F28 0008                  		move.w	8(a0),-(sp)
00008E2A 6100 0000                  		bsr.w	Obj18_Move
00008E2E 6100 0000                  		bsr.w	Obj18_Nudge
00008E32 341F                       		move.w	(sp)+,d2
00008E34 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00008E38 6100 0000                  		bsr.w	DisplaySprite
00008E3C 6000 0000                  		bra.w	Obj18_ChkDel
00008E40                            
00008E40 4E75                       		rts
00008E42                            
00008E42                            ; ---------------------------------------------------------------------------
00008E42                            ; Subroutine to	move platform slightly when you	stand on it
00008E42                            ; ---------------------------------------------------------------------------
00008E42                            
00008E42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E42                            
00008E42                            
00008E42                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008E42 1028 0038                  		move.b	$38(a0),d0
00008E46 6100 A5CE                  		bsr.w	CalcSine
00008E4A 323C 0400                  		move.w	#$400,d1
00008E4E C1C1                       		muls.w	d1,d0
00008E50 4840                       		swap	d0
00008E52 D068 002C                  		add.w	$2C(a0),d0
00008E56 3140 000C                  		move.w	d0,$C(a0)
00008E5A 4E75                       		rts	
00008E5C                            ; End of function Obj18_Nudge
00008E5C                            
00008E5C                            ; ---------------------------------------------------------------------------
00008E5C                            ; Subroutine to	move platforms
00008E5C                            ; ---------------------------------------------------------------------------
00008E5C                            
00008E5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E5C                            
00008E5C                            
00008E5C                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008E5C 7000                       		moveq	#0,d0
00008E5E 1028 0028                  		move.b	$28(a0),d0
00008E62 0240 000F                  		andi.w	#$F,d0
00008E66 D040                       		add.w	d0,d0
00008E68 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00008E6C 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008E70                            ; End of function Obj18_Move
00008E70                            
00008E70                            ; ===========================================================================
00008E70 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008E74 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008E78 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008E7C 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008E80 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008E84 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008E88 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008E8A                            ; ===========================================================================
00008E8A                            
00008E8A                            Obj18_Type00:
00008E8A 4E75                       		rts			; platform 00 doesn't move
00008E8C                            ; ===========================================================================
00008E8C                            
00008E8C                            Obj18_Type05:
00008E8C 3028 0032                  		move.w	$32(a0),d0
00008E90 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008E94 4401                       		neg.b	d1		; reverse platform-motion
00008E96 0601 0040                  		addi.b	#$40,d1
00008E9A 6000                       		bra.s	Obj18_01_Move
00008E9C                            ; ===========================================================================
00008E9C                            
00008E9C                            Obj18_Type01:
00008E9C 3028 0032                  		move.w	$32(a0),d0
00008EA0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008EA4 0401 0040                  		subi.b	#$40,d1
00008EA8                            
00008EA8                            Obj18_01_Move:
00008EA8 4881                       		ext.w	d1
00008EAA D041                       		add.w	d1,d0
00008EAC 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008EB0 6000 0000                  		bra.w	Obj18_ChgMotion
00008EB4                            ; ===========================================================================
00008EB4                            
00008EB4                            Obj18_Type0C:
00008EB4 3028 0034                  		move.w	$34(a0),d0
00008EB8 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008EBC 4401                       		neg.b	d1		; reverse platform-motion
00008EBE 0601 0030                  		addi.b	#$30,d1
00008EC2 6000                       		bra.s	Obj18_02_Move
00008EC4                            ; ===========================================================================
00008EC4                            
00008EC4                            Obj18_Type0B:
00008EC4 3028 0034                  		move.w	$34(a0),d0
00008EC8 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008ECC 0401 0030                  		subi.b	#$30,d1
00008ED0 6000                       		bra.s	Obj18_02_Move
00008ED2                            ; ===========================================================================
00008ED2                            
00008ED2                            Obj18_Type06:
00008ED2 3028 0034                  		move.w	$34(a0),d0
00008ED6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008EDA 4401                       		neg.b	d1		; reverse platform-motion
00008EDC 0601 0040                  		addi.b	#$40,d1
00008EE0 6000                       		bra.s	Obj18_02_Move
00008EE2                            ; ===========================================================================
00008EE2                            
00008EE2                            Obj18_Type02:
00008EE2 3028 0034                  		move.w	$34(a0),d0
00008EE6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008EEA 0401 0040                  		subi.b	#$40,d1
00008EEE                            
00008EEE                            Obj18_02_Move:
00008EEE 4881                       		ext.w	d1
00008EF0 D041                       		add.w	d1,d0
00008EF2 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008EF6 6000 0000                  		bra.w	Obj18_ChgMotion
00008EFA                            ; ===========================================================================
00008EFA                            
00008EFA                            Obj18_Type03:
00008EFA 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008EFE 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008F00 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008F06 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008F08 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008F0E                            
00008F0E                            Obj18_03_NoMove:
00008F0E 4E75                       		rts	
00008F10                            ; ===========================================================================
00008F10                            
00008F10                            Obj18_03_Wait:
00008F10 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008F14 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008F16 317C 0020 003A             		move.w	#32,$3A(a0)
00008F1C 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008F20 4E75                       		rts	
00008F22                            ; ===========================================================================
00008F22                            
00008F22                            Obj18_Type04:
00008F22 4A68 003A                  		tst.w	$3A(a0)
00008F26 6700                       		beq.s	loc_8048
00008F28 5368 003A                  		subq.w	#1,$3A(a0)
00008F2C 6600                       		bne.s	loc_8048
00008F2E 0828 0003 0022             		btst	#3,$22(a0)
00008F34 6700                       		beq.s	loc_8042
00008F36 08E9 0001 0022             		bset	#1,$22(a1)
00008F3C 08A9 0003 0022             		bclr	#3,$22(a1)
00008F42 137C 0002 0024             		move.b	#2,$24(a1)
00008F48 08A8 0003 0022             		bclr	#3,$22(a0)
00008F4E 4228 0025                  		clr.b	$25(a0)
00008F52 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008F58                            
00008F58                            loc_8042:
00008F58 117C 0008 0024             		move.b	#8,$24(a0)
00008F5E                            
00008F5E                            loc_8048:
00008F5E 2628 002C                  		move.l	$2C(a0),d3
00008F62 3028 0012                  		move.w	$12(a0),d0
00008F66 48C0                       		ext.l	d0
00008F68 E180                       		asl.l	#8,d0
00008F6A D680                       		add.l	d0,d3
00008F6C 2143 002C                  		move.l	d3,$2C(a0)
00008F70 0668 0038 0012             		addi.w	#$38,$12(a0)
00008F76 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008F7A 0640 00E0                  		addi.w	#$E0,d0
00008F7E B068 002C                  		cmp.w	$2C(a0),d0
00008F82 6400                       		bcc.s	locret_8074
00008F84 117C 0006 0024             		move.b	#6,$24(a0)
00008F8A                            
00008F8A                            locret_8074:
00008F8A 4E75                       		rts	
00008F8C                            ; ===========================================================================
00008F8C                            
00008F8C                            Obj18_Type07:
00008F8C 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008F90 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008F92 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008F96 7000                       		moveq	#0,d0
00008F98 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008F9C E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008F9E 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008FA2 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008FA4 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008FAA                            
00008FAA                            Obj18_07_NoMove:
00008FAA 4E75                       		rts	
00008FAC                            ; ===========================================================================
00008FAC                            
00008FAC                            Obj18_07_Wait:
00008FAC 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008FB0 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008FB2 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008FB6 4E75                       		rts	
00008FB8                            ; ===========================================================================
00008FB8                            
00008FB8                            Obj18_Type08:
00008FB8 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008FBC 3028 0034                  		move.w	$34(a0),d0
00008FC0 0440 0200                  		subi.w	#$200,d0
00008FC4 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008FC8 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008FCA 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008FCE                            
00008FCE                            Obj18_08_NoStop:
00008FCE 4E75                       		rts	
00008FD0                            ; ===========================================================================
00008FD0                            
00008FD0                            Obj18_Type0A:
00008FD0 3028 0034                  		move.w	$34(a0),d0
00008FD4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008FD8 0401 0040                  		subi.b	#$40,d1
00008FDC 4881                       		ext.w	d1
00008FDE E241                       		asr.w	#1,d1
00008FE0 D041                       		add.w	d1,d0
00008FE2 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008FE6                            
00008FE6                            Obj18_ChgMotion:
00008FE6 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008FEC 4E75                       		rts	
00008FEE                            ; ===========================================================================
00008FEE                            
00008FEE                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008FEE 3028 0032                  		move.w	$32(a0),d0
00008FF2 0240 FF80                  		andi.w	#$FF80,d0
00008FF6 3238 F700                  		move.w	($FFFFF700).w,d1
00008FFA 0441 0080                  		subi.w	#$80,d1
00008FFE 0241 FF80                  		andi.w	#$FF80,d1
00009002 9041                       		sub.w	d1,d0
00009004 0C40 0280                  		cmpi.w	#$280,d0
00009008 6200                       		bhi.s	Obj18_Delete
0000900A 4E75                       		rts	
0000900C                            ; ===========================================================================
0000900C                            
0000900C                            Obj18_Delete:				; XREF: Obj18_Index
0000900C 6000 0000                  		bra.w	DeleteObject
00009010                            ; ===========================================================================
00009010                            ; ---------------------------------------------------------------------------
00009010                            ; Sprite mappings - unused
00009010                            ; ---------------------------------------------------------------------------
00009010                            Map_obj18x:
00009010                            	include "_maps\obj18x.asm"
00009010                            ; ---------------------------------------------------------------------------
00009010                            ; Sprite mappings - unused
00009010                            ; ---------------------------------------------------------------------------
00009010 0000                       		dc.w byte_80FE-Map_obj18x
00009012 0000                       		dc.w byte_8109-Map_obj18x
00009014 02                         byte_80FE:	dc.b 2
00009015 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000901A F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000901F 0A                         byte_8109:	dc.b $A
00009020 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009025 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000902A 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000902F 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009034 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00009039 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000903E 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009043 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00009048 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000904D 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009052                            		even
00009052                            		even
00009052                            
00009052                            ; ---------------------------------------------------------------------------
00009052                            ; Sprite mappings - GHZ	platforms
00009052                            ; ---------------------------------------------------------------------------
00009052                            Map_obj18:
00009052                            	include "_maps\obj18ghz.asm"
00009052                            ; ---------------------------------------------------------------------------
00009052                            ; Sprite mappings - GHZ	platforms
00009052                            ; ---------------------------------------------------------------------------
00009052 0000                       		dc.w byte_8140-Map_obj18
00009054 0000                       		dc.w byte_8155-Map_obj18
00009056 04                         byte_8140:	dc.b 4
00009057 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000905C F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009061 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009066 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000906B 0A                         byte_8155:	dc.b $A
0000906C F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009071 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009076 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
0000907B 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009080 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009085 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
0000908A 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
0000908F 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009094 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00009099 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
0000909E                            		even
0000909E                            		even
0000909E                            
0000909E                            ; ---------------------------------------------------------------------------
0000909E                            ; Sprite mappings - SYZ	platforms
0000909E                            ; ---------------------------------------------------------------------------
0000909E                            Map_obj18a:
0000909E                            	include "_maps\obj18syz.asm"
0000909E                            ; ---------------------------------------------------------------------------
0000909E                            ; Sprite mappings - SYZ	platforms
0000909E                            ; ---------------------------------------------------------------------------
0000909E 0000                       		dc.w byte_818A-Map_obj18a
000090A0 03                         byte_818A:	dc.b 3
000090A1 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000090A6 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000090AB F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000090B0                            		even
000090B0                            		even
000090B0                            
000090B0                            ; ---------------------------------------------------------------------------
000090B0                            ; Sprite mappings - SLZ	platforms
000090B0                            ; ---------------------------------------------------------------------------
000090B0                            Map_obj18b:
000090B0                            	include "_maps\obj18slz.asm"
000090B0                            ; ---------------------------------------------------------------------------
000090B0                            ; Sprite mappings - SLZ	platforms
000090B0                            ; ---------------------------------------------------------------------------
000090B0 0000                       		dc.w byte_819C-Map_obj18b
000090B2 02                         byte_819C:	dc.b 2
000090B3 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000090B8 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000090BE 00                         		even
000090BE 00                         		even
000090BE                            
000090BE                            ; ===========================================================================
000090BE                            ; ---------------------------------------------------------------------------
000090BE                            ; Object 19 - Pearto bombs
000090BE                            ; ---------------------------------------------------------------------------
000090BE                            Obj19:					; XREF: Obj_Index
000090BE 7000                       		moveq	#0,d0
000090C0 1028 0024                  		move.b	$24(a0),d0
000090C4 323B 0000                  		move.w	off_7070(pc,d0.w),d1
000090C8 4EFB 1000                  		jmp	off_7070(pc,d1.w)
000090CC                            ; ---------------------------------------------------------------------------
000090CC                            
000090CC 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
000090D2                            ; ---------------------------------------------------------------------------
000090D2                            
000090D2                            loc_7076:
000090D2 5428 0024                  		addq.b	#2,$24(a0)
000090D6 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
000090DE 317C 0480 0002             		move.w	#($9000/$20),2(a0)
000090E4 117C 0004 0001             		move.b	#4,1(a0)
000090EA 117C 0003 0019             		move.b	#3,$19(a0)
000090F0 117C 0087 0020             		move.b	#$87,$20(a0)
000090F6 117C 0008 0018             		move.b	#8,$18(a0)
000090FC 317C 0018 0030             		move.w	#$18,$30(a0)
00009102                            
00009102                            loc_70A6:
00009102 0828 0007 0022             		btst	#7,$22(a0)
00009108 6600                       		bne.s	loc_70C2
0000910A 4A68 0030                  		tst.w	$30(a0)
0000910E 6600                       		bne.s	loc_70D2
00009110 4EB9 0000 0000             		jsr	ObjHitFloor
00009116 4A41                       		tst.w	d1
00009118 6A00                       		bpl.s	loc_70D6
0000911A D368 000C                  		add.w	d1,$C(a0)
0000911E                            
0000911E                            loc_70C2:
0000911E 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
00009122 117C 0000 0024             		move.b	#0,$24(a0)
00009128                            ; ---------------------------------------------------------------------------
00009128                            
00009128                            loc_70D2:
00009128 5368 0030                  		subq.w	#1,$30(a0)
0000912C                            
0000912C                            loc_70D6:
0000912C 6100 0000                  		bsr.w	ObjectFall
00009130 6100 0000                  		bsr.w	DisplaySprite
00009134 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009138 0640 00E0                  		addi.w	#$E0,d0
0000913C B068 000C                  		cmp.w	$C(a0),d0
00009140 6500                       		bcs.s	loc_70EE
00009142 4E75                       		rts
00009144                            ; ---------------------------------------------------------------------------
00009144                            
00009144                            loc_70EE:
00009144 6100 0000                  		bsr.w	DeleteObject
00009148 4E75                       		rts
0000914A                            		
0000914A                            Map_obj19:
0000914A                            	include "_maps\obj19.asm"
0000914A                            Map_02b4:
0000914A 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
0000914C 01                         Map_02b4_2: 	dc.b $1
0000914D F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
00009152                            	even
00009152                            	even
00009152                            ; ===========================================================================
00009152                            ; ---------------------------------------------------------------------------
00009152                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009152                            ; ---------------------------------------------------------------------------
00009152                            Map_obj48:
00009152                            	include "_maps\obj48.asm"
00009152                            ; ---------------------------------------------------------------------------
00009152                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009152                            ; ---------------------------------------------------------------------------
00009152 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00009156 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
0000915A 06                         byte_81B2:	dc.b 6
0000915B F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009160 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009165 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000916A E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0000916F 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009174 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00009179 04                         byte_81D1:	dc.b 4
0000917A E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
0000917F E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009184 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00009189 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
0000918E 04                         byte_81E6:	dc.b 4
0000918F E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009194 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00009199 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0000919E 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000091A3 04                         byte_81FB:	dc.b 4
000091A4 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000091A9 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000091AE 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000091B3 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000091B8                            		even
000091B8                            		even
000091B8                            
000091B8                            ; ===========================================================================
000091B8                            ; ---------------------------------------------------------------------------
000091B8                            ; Object 1A - GHZ collapsing ledge
000091B8                            ; ---------------------------------------------------------------------------
000091B8                            
000091B8                            Obj1A:					; XREF: Obj_Index
000091B8 7000                       		moveq	#0,d0
000091BA 1028 0024                  		move.b	$24(a0),d0
000091BE 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000091C2 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000091C6                            ; ===========================================================================
000091C6 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000091CA 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000091CE 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
000091D2                            ; ===========================================================================
000091D2                            
000091D2                            Obj1A_Main:				; XREF: Obj1A_Index
000091D2 5428 0024                  		addq.b	#2,$24(a0)
000091D6 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
000091DE 317C 4000 0002             		move.w	#$4000,2(a0)
000091E4 0028 0004 0001             		ori.b	#4,1(a0)
000091EA 117C 0004 0018             		move.b	#4,$18(a0)
000091F0 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
000091F6 117C 0064 0019             		move.b	#$64,$19(a0)
000091FC 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00009202 117C 0038 0016             		move.b	#$38,$16(a0)
00009208 08E8 0004 0001             		bset	#4,1(a0)
0000920E                            
0000920E                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
0000920E 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00009212 6700                       		beq.s	Obj1A_Slope	; if not, branch
00009214 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00009218 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
0000921C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009220                            
00009220                            Obj1A_Slope:
00009220 323C 0030                  		move.w	#$30,d1
00009224 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000922A 6100 F212                  		bsr.w	SlopeObject
0000922E 6000 0000                  		bra.w	MarkObjGone
00009232                            ; ===========================================================================
00009232                            
00009232                            Obj1A_Touch:				; XREF: Obj1A_Index
00009232 4A28 0038                  		tst.b	$38(a0)
00009236 6700 0000                  		beq.w	loc_847A
0000923A 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009240 5328 0038                  		subq.b	#1,$38(a0)
00009244                            
00009244                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009244                            
00009244                            
00009244                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00009244 323C 0030                  		move.w	#$30,d1
00009248 6100 F294                  		bsr.w	ExitPlatform
0000924C 323C 0030                  		move.w	#$30,d1
00009250 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00009256 3428 0008                  		move.w	8(a0),d2
0000925A 6100 0000                  		bsr.w	SlopeObject2
0000925E 6000 0000                  		bra.w	MarkObjGone
00009262                            ; End of function Obj1A_WalkOff
00009262                            
00009262                            ; ===========================================================================
00009262                            
00009262                            Obj1A_Display:				; XREF: Obj1A_Index
00009262 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009266 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00009268 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000926C 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009270 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009274 6000 0000                  		bra.w	DisplaySprite
00009278                            ; ===========================================================================
00009278                            
00009278                            loc_82D0:				; XREF: Obj1A_Display
00009278 5328 0038                  		subq.b	#1,$38(a0)
0000927C 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00009280 43F8 D000                  		lea	($FFFFD000).w,a1
00009284 0829 0003 0022             		btst	#3,$22(a1)
0000928A 6700                       		beq.s	loc_82FC
0000928C 4A28 0038                  		tst.b	$38(a0)
00009290 6600                       		bne.s	locret_8308
00009292 08A9 0003 0022             		bclr	#3,$22(a1)
00009298 08A9 0005 0022             		bclr	#5,$22(a1)
0000929E 137C 0001 001D             		move.b	#1,$1D(a1)
000092A4                            
000092A4                            loc_82FC:
000092A4 117C 0000 003A             		move.b	#0,$3A(a0)
000092AA 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
000092B0                            
000092B0                            locret_8308:
000092B0 4E75                       		rts	
000092B2                            ; ===========================================================================
000092B2                            
000092B2                            Obj1A_TimeZero:				; XREF: Obj1A_Display
000092B2 6100 0000                  		bsr.w	ObjectFall
000092B6 6100 0000                  		bsr.w	DisplaySprite
000092BA 4A28 0001                  		tst.b	1(a0)
000092BE 6A00                       		bpl.s	Obj1A_Delete
000092C0 4E75                       		rts	
000092C2                            ; ===========================================================================
000092C2                            
000092C2                            Obj1A_Delete:				; XREF: Obj1A_Index
000092C2 6100 0000                  		bsr.w	DeleteObject
000092C6 4E75                       		rts	
000092C8                            ; ===========================================================================
000092C8                            ; ---------------------------------------------------------------------------
000092C8                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000092C8                            ; ---------------------------------------------------------------------------
000092C8                            
000092C8                            Obj53:					; XREF: Obj_Index
000092C8 7000                       		moveq	#0,d0
000092CA 1028 0024                  		move.b	$24(a0),d0
000092CE 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
000092D2 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
000092D6                            ; ===========================================================================
000092D6 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
000092DA 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
000092DE 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
000092E2                            ; ===========================================================================
000092E2                            
000092E2                            Obj53_Main:				; XREF: Obj53_Index
000092E2 5428 0024                  		addq.b	#2,$24(a0)
000092E6 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
000092EE 317C 42B8 0002             		move.w	#$42B8,2(a0)
000092F4 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000092FA 6600                       		bne.s	Obj53_NotSLZ
000092FC 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00009302 5428 001A                  		addq.b	#2,$1A(a0)
00009306                            
00009306                            Obj53_NotSLZ:
00009306 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000930C 6600                       		bne.s	Obj53_NotSBZ
0000930E 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00009314                            
00009314                            Obj53_NotSBZ:
00009314 0028 0004 0001             		ori.b	#4,1(a0)
0000931A 117C 0004 0018             		move.b	#4,$18(a0)
00009320 117C 0007 0038             		move.b	#7,$38(a0)
00009326 117C 0044 0019             		move.b	#$44,$19(a0)
0000932C                            
0000932C                            Obj53_ChkTouch:				; XREF: Obj53_Index
0000932C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009330 6700                       		beq.s	Obj53_Solid	; if not, branch
00009332 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009336 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
0000933A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000933E                            
0000933E                            Obj53_Solid:
0000933E 323C 0020                  		move.w	#$20,d1
00009342 6100 F026                  		bsr.w	PlatformObject
00009346 4A28 0028                  		tst.b	$28(a0)
0000934A 6A00                       		bpl.s	Obj53_MarkAsGone
0000934C 0829 0003 0022             		btst	#3,$22(a1)
00009352 6700                       		beq.s	Obj53_MarkAsGone
00009354 08A8 0000 0001             		bclr	#0,1(a0)
0000935A 3029 0008                  		move.w	8(a1),d0
0000935E 9068 0008                  		sub.w	8(a0),d0
00009362 6400                       		bcc.s	Obj53_MarkAsGone
00009364 08E8 0000 0001             		bset	#0,1(a0)
0000936A                            
0000936A                            Obj53_MarkAsGone:
0000936A 6000 0000                  		bra.w	MarkObjGone
0000936E                            ; ===========================================================================
0000936E                            
0000936E                            Obj53_Touch:				; XREF: Obj53_Index
0000936E 4A28 0038                  		tst.b	$38(a0)
00009372 6700 0000                  		beq.w	loc_8458
00009376 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000937C 5328 0038                  		subq.b	#1,$38(a0)
00009380                            
00009380                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009380                            
00009380                            
00009380                            Obj53_WalkOff:				; XREF: Obj53_Index
00009380 323C 0020                  		move.w	#$20,d1
00009384 6100 F158                  		bsr.w	ExitPlatform
00009388 3428 0008                  		move.w	8(a0),d2
0000938C 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00009390 6000 0000                  		bra.w	MarkObjGone
00009394                            ; End of function Obj53_WalkOff
00009394                            
00009394                            ; ===========================================================================
00009394                            
00009394                            Obj53_Display:				; XREF: Obj53_Index
00009394 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009398 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
0000939A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000939E 6600 0000                  		bne.w	loc_8402	; if yes, branch
000093A2 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000093A6 6000 0000                  		bra.w	DisplaySprite
000093AA                            ; ===========================================================================
000093AA                            
000093AA                            loc_8402:
000093AA 5328 0038                  		subq.b	#1,$38(a0)
000093AE 6100 FFD0                  		bsr.w	Obj53_WalkOff
000093B2 43F8 D000                  		lea	($FFFFD000).w,a1
000093B6 0829 0003 0022             		btst	#3,$22(a1)
000093BC 6700                       		beq.s	loc_842E
000093BE 4A28 0038                  		tst.b	$38(a0)
000093C2 6600                       		bne.s	locret_843A
000093C4 08A9 0003 0022             		bclr	#3,$22(a1)
000093CA 08A9 0005 0022             		bclr	#5,$22(a1)
000093D0 137C 0001 001D             		move.b	#1,$1D(a1)
000093D6                            
000093D6                            loc_842E:
000093D6 117C 0000 003A             		move.b	#0,$3A(a0)
000093DC 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
000093E2                            
000093E2                            locret_843A:
000093E2 4E75                       		rts	
000093E4                            ; ===========================================================================
000093E4                            
000093E4                            Obj53_TimeZero:				; XREF: Obj53_Display
000093E4 6100 0000                  		bsr.w	ObjectFall
000093E8 6100 0000                  		bsr.w	DisplaySprite
000093EC 4A28 0001                  		tst.b	1(a0)
000093F0 6A00                       		bpl.s	Obj53_Delete
000093F2 4E75                       		rts	
000093F4                            ; ===========================================================================
000093F4                            
000093F4                            Obj53_Delete:				; XREF: Obj53_Index
000093F4 6100 0000                  		bsr.w	DeleteObject
000093F8 4E75                       		rts	
000093FA                            ; ===========================================================================
000093FA                            
000093FA                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
000093FA 117C 0000 003A             		move.b	#0,$3A(a0)
00009400                            
00009400                            loc_8458:				; XREF: Obj53_Touch
00009400 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00009406 0828 0000 0028             		btst	#0,$28(a0)
0000940C 6700                       		beq.s	loc_846C
0000940E 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00009414                            
00009414                            loc_846C:
00009414 7207                       		moveq	#7,d1
00009416 5228 001A                  		addq.b	#1,$1A(a0)
0000941A 6000                       		bra.s	loc_8486
0000941C                            ; ===========================================================================
0000941C                            
0000941C                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
0000941C 117C 0000 003A             		move.b	#0,$3A(a0)
00009422                            
00009422                            loc_847A:				; XREF: Obj1A_Touch
00009422 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00009428 7218                       		moveq	#$18,d1
0000942A 5428 001A                  		addq.b	#2,$1A(a0)
0000942E                            
0000942E                            loc_8486:				; XREF: Obj53_Collapse
0000942E 7000                       		moveq	#0,d0
00009430 1028 001A                  		move.b	$1A(a0),d0
00009434 D040                       		add.w	d0,d0
00009436 2668 0004                  		movea.l	4(a0),a3
0000943A D6F3 0000                  		adda.w	(a3,d0.w),a3
0000943E 524B                       		addq.w	#1,a3
00009440 08E8 0005 0001             		bset	#5,1(a0)
00009446 1810                       		move.b	0(a0),d4
00009448 1A28 0001                  		move.b	1(a0),d5
0000944C 2248                       		movea.l	a0,a1
0000944E 6000                       		bra.s	loc_84B2
00009450                            ; ===========================================================================
00009450                            
00009450                            loc_84AA:
00009450 6100 0000                  		bsr.w	SingleObjLoad
00009454 6600                       		bne.s	loc_84F2
00009456 5A4B                       		addq.w	#5,a3
00009458                            
00009458                            loc_84B2:
00009458 137C 0006 0024             		move.b	#6,$24(a1)
0000945E 1284                       		move.b	d4,0(a1)
00009460 234B 0004                  		move.l	a3,4(a1)
00009464 1345 0001                  		move.b	d5,1(a1)
00009468 3368 0008 0008             		move.w	8(a0),8(a1)
0000946E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009474 3368 0002 0002             		move.w	2(a0),2(a1)
0000947A 1368 0018 0018             		move.b	$18(a0),$18(a1)
00009480 1368 0019 0019             		move.b	$19(a0),$19(a1)
00009486 135C 0038                  		move.b	(a4)+,$38(a1)
0000948A B3C8                       		cmpa.l	a0,a1
0000948C 6400                       		bcc.s	loc_84EE
0000948E 6100 0000                  		bsr.w	DisplaySprite2
00009492                            
00009492                            loc_84EE:
00009492 51C9 FFBC                  		dbf	d1,loc_84AA
00009496                            
00009496                            loc_84F2:
00009496 6100 0000                  		bsr.w	DisplaySprite
0000949A 303C 00B9                  		move.w	#$B9,d0
0000949E 4EF9 0000 1C7A             		jmp	(PlaySound_Special).l ;	play collapsing	sound
000094A4                            ; ===========================================================================
000094A4                            ; ---------------------------------------------------------------------------
000094A4                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
000094A4                            ; ---------------------------------------------------------------------------
000094A4 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
000094B4 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
000094BE 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
000094C6 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
000094CE                            
000094CE                            ; ---------------------------------------------------------------------------
000094CE                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
000094CE                            ; ---------------------------------------------------------------------------
000094CE                            
000094CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000094CE                            
000094CE                            
000094CE                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
000094CE 43F8 D000                  		lea	($FFFFD000).w,a1
000094D2 0829 0003 0022             		btst	#3,$22(a1)
000094D8 6700                       		beq.s	locret_856E
000094DA 3029 0008                  		move.w	8(a1),d0
000094DE 9068 0008                  		sub.w	8(a0),d0
000094E2 D041                       		add.w	d1,d0
000094E4 E248                       		lsr.w	#1,d0
000094E6 0828 0000 0001             		btst	#0,1(a0)
000094EC 6700                       		beq.s	loc_854E
000094EE 4640                       		not.w	d0
000094F0 D041                       		add.w	d1,d0
000094F2                            
000094F2                            loc_854E:
000094F2 7200                       		moveq	#0,d1
000094F4 1232 0000                  		move.b	(a2,d0.w),d1
000094F8 3028 000C                  		move.w	$C(a0),d0
000094FC 9041                       		sub.w	d1,d0
000094FE 7200                       		moveq	#0,d1
00009500 1229 0016                  		move.b	$16(a1),d1
00009504 9041                       		sub.w	d1,d0
00009506 3340 000C                  		move.w	d0,$C(a1)
0000950A 9468 0008                  		sub.w	8(a0),d2
0000950E 9569 0008                  		sub.w	d2,8(a1)
00009512                            
00009512                            locret_856E:
00009512 4E75                       		rts	
00009514                            ; End of function SlopeObject2
00009514                            
00009514                            ; ===========================================================================
00009514                            ; ---------------------------------------------------------------------------
00009514                            ; Collision data for GHZ collapsing ledge
00009514                            ; ---------------------------------------------------------------------------
00009514                            Obj1A_SlopeData:
00009514                            		incbin	misc\ghzledge.bin
00009544                            		even
00009544                            
00009544                            ; ---------------------------------------------------------------------------
00009544                            ; Sprite mappings - GHZ	collapsing ledge
00009544                            ; ---------------------------------------------------------------------------
00009544                            Map_obj1A:
00009544                            	include "_maps\obj1A.asm"
00009544                            ; ---------------------------------------------------------------------------
00009544                            ; Sprite mappings - GHZ	collapsing ledge
00009544                            ; ---------------------------------------------------------------------------
00009544 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00009548 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
0000954C 10                         byte_85A8:	dc.b $10
0000954D C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009552 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009557 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000955C E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009561 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009566 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000956B F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009570 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009575 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000957A F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000957F 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009584 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009589 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
0000958E 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009593 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00009598 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000959D 10                         byte_85F9:	dc.b $10
0000959E C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
000095A3 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000095A8 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000095AD E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000095B2 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000095B7 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000095BC F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000095C1 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000095C6 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000095CB F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000095D0 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000095D5 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000095DA 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000095DF 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000095E4 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000095E9 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000095EE 19                         byte_864A:	dc.b $19
000095EF C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
000095F4 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000095F9 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000095FE D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009603 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009608 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000960D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009612 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009617 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000961C D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009621 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009626 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000962B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009630 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009635 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000963A F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
0000963F 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009644 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00009649 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000964E 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009653 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00009658 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000965D 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009662 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009667 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000966C 19                         byte_86C8:	dc.b $19
0000966D C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00009672 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009677 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000967C D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009681 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009686 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000968B E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009690 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009695 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000969A D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000969F F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000096A4 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000096A9 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
000096AE F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000096B3 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000096B8 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000096BD 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000096C2 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000096C7 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000096CC 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000096D1 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000096D6 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000096DB 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000096E0 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000096E5 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000096EA                            		even
000096EA                            		even
000096EA                            
000096EA                            ; ---------------------------------------------------------------------------
000096EA                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000096EA                            ; ---------------------------------------------------------------------------
000096EA                            Map_obj53:
000096EA                            	include "_maps\obj53.asm"
000096EA                            ; ---------------------------------------------------------------------------
000096EA                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000096EA                            ; ---------------------------------------------------------------------------
000096EA 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
000096EE 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
000096F2 04                         byte_874E:	dc.b 4
000096F3 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
000096F8 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
000096FD F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009702 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00009707 08                         byte_8763:	dc.b 8
00009708 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000970D F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00009712 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009717 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
0000971C 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00009721 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00009726 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000972B 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00009730 04                         byte_878C:	dc.b 4
00009731 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00009736 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000973B F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009740 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00009745 08                         byte_87A1:	dc.b 8
00009746 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000974B F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00009750 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009755 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000975A 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000975F 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00009764 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00009769 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000976E                            		even
0000976E                            		even
0000976E                            
0000976E                            ; ===========================================================================
0000976E                            ; ---------------------------------------------------------------------------
0000976E                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000976E                            ; ---------------------------------------------------------------------------
0000976E                            
0000976E                            Obj1C:					; XREF: Obj_Index
0000976E 7000                       		moveq	#0,d0
00009770 1028 0024                  		move.b	$24(a0),d0
00009774 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00009778 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
0000977C                            ; ===========================================================================
0000977C 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
0000977E 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00009780                            ; ===========================================================================
00009780                            
00009780                            Obj1C_Main:				; XREF: Obj1C_Index
00009780 5428 0024                  		addq.b	#2,$24(a0)
00009784 7000                       		moveq	#0,d0
00009786 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
0000978A C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000978E 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00009792 2159 0004                  		move.l	(a1)+,4(a0)
00009796 3159 0002                  		move.w	(a1)+,2(a0)
0000979A 0028 0004 0001             		ori.b	#4,1(a0)
000097A0 1159 001A                  		move.b	(a1)+,$1A(a0)
000097A4 1159 0019                  		move.b	(a1)+,$19(a0)
000097A8 1159 0018                  		move.b	(a1)+,$18(a0)
000097AC 1159 0020                  		move.b	(a1)+,$20(a0)
000097B0                            
000097B0                            Obj1C_ChkDel:				; XREF: Obj1C_Index
000097B0 3028 0008                  		move.w	8(a0),d0
000097B4 0240 FF80                  		andi.w	#$FF80,d0
000097B8 3238 F700                  		move.w	($FFFFF700).w,d1
000097BC 0441 0080                  		subi.w	#$80,d1
000097C0 0241 FF80                  		andi.w	#$FF80,d1
000097C4 9041                       		sub.w	d1,d0
000097C6 0C40 0280                  		cmpi.w	#$280,d0
000097CA 6200 0000                  		bhi.w	DeleteObject
000097CE 6000 0000                  		bra.w	DisplaySprite
000097D2                            ; ===========================================================================
000097D2                            ; ---------------------------------------------------------------------------
000097D2                            ; Variables for	object $1C are stored in an array
000097D2                            ; ---------------------------------------------------------------------------
000097D2 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
000097D6 44D8                       		dc.w $44D8		; VRAM setting
000097D8 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
000097DC 0000 0000                  		dc.l Map_obj1C
000097E0 44D8                       		dc.w $44D8
000097E2 0008 0200                  		dc.b 0,	8, 2, 0
000097E6 0000 0000                  		dc.l Map_obj1C
000097EA 44D8                       		dc.w $44D8
000097EC 0008 0200                  		dc.b 0,	8, 2, 0
000097F0 0000 8852                  		dc.l Map_obj11
000097F4 438E                       		dc.w $438E
000097F6 0110 0100                  		dc.b 1,	$10, 1,	0
000097FA                            ; ---------------------------------------------------------------------------
000097FA                            ; Sprite mappings - SLZ	lava thrower
000097FA                            ; ---------------------------------------------------------------------------
000097FA                            Map_obj1C:
000097FA                            	include "_maps\obj1C.asm"
000097FA                            ; ---------------------------------------------------------------------------
000097FA                            ; Sprite mappings - SLZ	lava thrower
000097FA                            ; ---------------------------------------------------------------------------
000097FA 0000                       		dc.w byte_8858-Map_obj1C
000097FC 01                         byte_8858:	dc.b 1
000097FD F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00009802                            		even
00009802                            		even
00009802                            
00009802                            ; ===========================================================================
00009802                            ; ---------------------------------------------------------------------------
00009802                            ; Object 1D - switch that activates when Sonic touches it
00009802                            ; (this	is not used anywhere in	the game)
00009802                            ; ---------------------------------------------------------------------------
00009802                            
00009802                            Obj1D:					; XREF: Obj_Index
00009802 7000                       		moveq	#0,d0
00009804 1028 0024                  		move.b	$24(a0),d0
00009808 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
0000980C 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00009810                            ; ===========================================================================
00009810 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00009812 0000                       		dc.w Obj1D_Action-Obj1D_Index
00009814 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00009816                            ; ===========================================================================
00009816                            
00009816                            Obj1D_Main:				; XREF: Obj1D_Index
00009816 5428 0024                  		addq.b	#2,$24(a0)
0000981A 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00009822 317C 4000 0002             		move.w	#$4000,2(a0)
00009828 117C 0004 0001             		move.b	#4,1(a0)
0000982E 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00009834 117C 0010 0019             		move.b	#$10,$19(a0)
0000983A 117C 0005 0018             		move.b	#5,$18(a0)
00009840                            
00009840                            Obj1D_Action:				; XREF: Obj1D_Index
00009840 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00009846 323C 0010                  		move.w	#$10,d1
0000984A 6100 0000                  		bsr.w	Obj1D_ChkTouch
0000984E 6700                       		beq.s	Obj1D_ChkDel
00009850 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00009854 7001                       		moveq	#1,d0
00009856 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
0000985A                            
0000985A                            Obj1D_ChkDel:
0000985A 6100 0000                  		bsr.w	DisplaySprite
0000985E 3028 0008                  		move.w	8(a0),d0
00009862 0240 FF80                  		andi.w	#$FF80,d0
00009866 3238 F700                  		move.w	($FFFFF700).w,d1
0000986A 0441 0080                  		subi.w	#$80,d1
0000986E 0241 FF80                  		andi.w	#$FF80,d1
00009872 9041                       		sub.w	d1,d0
00009874 0C40 0280                  		cmpi.w	#$280,d0
00009878 6200 0000                  		bhi.w	Obj1D_Delete
0000987C 4E75                       		rts	
0000987E                            ; ===========================================================================
0000987E                            
0000987E                            Obj1D_Delete:				; XREF: Obj1D_Index
0000987E 6100 0000                  		bsr.w	DeleteObject
00009882 4E75                       		rts	
00009884                            ; ---------------------------------------------------------------------------
00009884                            ; Subroutine to	check if Sonic touches the object
00009884                            ; ---------------------------------------------------------------------------
00009884                            
00009884                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009884                            
00009884                            
00009884                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009884 43F8 D000                  		lea	($FFFFD000).w,a1
00009888 3029 0008                  		move.w	8(a1),d0
0000988C 9068 0008                  		sub.w	8(a0),d0
00009890 D041                       		add.w	d1,d0
00009892 6B00                       		bmi.s	loc_8918
00009894 D241                       		add.w	d1,d1
00009896 B041                       		cmp.w	d1,d0
00009898 6400                       		bcc.s	loc_8918
0000989A 3429 000C                  		move.w	$C(a1),d2
0000989E 1229 0016                  		move.b	$16(a1),d1
000098A2 4881                       		ext.w	d1
000098A4 D242                       		add.w	d2,d1
000098A6 3028 000C                  		move.w	$C(a0),d0
000098AA 0440 0010                  		subi.w	#$10,d0
000098AE 9041                       		sub.w	d1,d0
000098B0 6200                       		bhi.s	loc_8918
000098B2 0C40 FFF0                  		cmpi.w	#-$10,d0
000098B6 6500                       		bcs.s	loc_8918
000098B8 70FF                       		moveq	#-1,d0
000098BA 4E75                       		rts	
000098BC                            ; ===========================================================================
000098BC                            
000098BC                            loc_8918:
000098BC 7000                       		moveq	#0,d0
000098BE 4E75                       		rts	
000098C0                            ; End of function Obj1D_ChkTouch
000098C0                            
000098C0                            ; ===========================================================================
000098C0                            ; ---------------------------------------------------------------------------
000098C0                            ; Sprite mappings - object 1D
000098C0                            ; ---------------------------------------------------------------------------
000098C0                            Map_obj1D:
000098C0                            	include "_maps\obj1D.asm"
000098C0                            ; ---------------------------------------------------------------------------
000098C0                            ; Sprite mappings - object 1D
000098C0                            ; ---------------------------------------------------------------------------
000098C0 0000                       		dc.w byte_891E-Map_obj1D
000098C2 04                         byte_891E:	dc.b 4
000098C3 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
000098C8 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
000098CD E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
000098D2 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
000098D8 00                         		even
000098D8 00                         		even
000098D8                            
000098D8                            ; ===========================================================================
000098D8                            ; ---------------------------------------------------------------------------
000098D8                            ; Object 2A - doors (SBZ)
000098D8                            ; ---------------------------------------------------------------------------
000098D8                            
000098D8                            Obj2A:					; XREF: Obj_Index
000098D8 7000                       		moveq	#0,d0
000098DA 1028 0024                  		move.b	$24(a0),d0
000098DE 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
000098E2 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
000098E6                            ; ===========================================================================
000098E6 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
000098E8 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
000098EA                            ; ===========================================================================
000098EA                            
000098EA                            Obj2A_Main:				; XREF: Obj2A_Index
000098EA 5428 0024                  		addq.b	#2,$24(a0)
000098EE 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
000098F6 317C 42E8 0002             		move.w	#$42E8,2(a0)
000098FC 0028 0004 0001             		ori.b	#4,1(a0)
00009902 117C 0008 0019             		move.b	#8,$19(a0)
00009908 117C 0004 0018             		move.b	#4,$18(a0)
0000990E                            
0000990E                            Obj2A_OpenShut:				; XREF: Obj2A_Index
0000990E 323C 0040                  		move.w	#$40,d1
00009912 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00009916 3038 D008                  		move.w	($FFFFD008).w,d0
0000991A D041                       		add.w	d1,d0
0000991C B068 0008                  		cmp.w	8(a0),d0
00009920 6500                       		bcs.s	Obj2A_Animate
00009922 9041                       		sub.w	d1,d0
00009924 9041                       		sub.w	d1,d0
00009926 B068 0008                  		cmp.w	8(a0),d0
0000992A 6400                       		bcc.s	Obj2A_Animate
0000992C D041                       		add.w	d1,d0
0000992E B068 0008                  		cmp.w	8(a0),d0
00009932 6400                       		bcc.s	loc_899A
00009934 0828 0000 0022             		btst	#0,$22(a0)
0000993A 6600                       		bne.s	Obj2A_Animate
0000993C 6000                       		bra.s	Obj2A_Open
0000993E                            ; ===========================================================================
0000993E                            
0000993E                            loc_899A:				; XREF: Obj2A_OpenShut
0000993E 0828 0000 0022             		btst	#0,$22(a0)
00009944 6700                       		beq.s	Obj2A_Animate
00009946                            
00009946                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009946 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
0000994C                            
0000994C                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
0000994C 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009952 6100 0000                  		bsr.w	AnimateSprite
00009956 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000995A 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
0000995C 323C 0011                  		move.w	#$11,d1
00009960 343C 0020                  		move.w	#$20,d2
00009964 3602                       		move.w	d2,d3
00009966 5243                       		addq.w	#1,d3
00009968 3828 0008                  		move.w	8(a0),d4
0000996C 6100 0000                  		bsr.w	SolidObject
00009970                            
00009970                            Obj2A_MarkAsUsed:
00009970 6000 0000                  		bra.w	MarkObjGone
00009974                            ; ===========================================================================
00009974                            Ani_obj2A:
00009974                            	include "_anim\obj2A.asm"
00009974                            ; ---------------------------------------------------------------------------
00009974                            ; Animation script - doors (SBZ)
00009974                            ; ---------------------------------------------------------------------------
00009974 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009976 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009978 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009984 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009990                            		even
00009990                            		even
00009990                            
00009990                            ; ---------------------------------------------------------------------------
00009990                            ; Sprite mappings - doors (SBZ)
00009990                            ; ---------------------------------------------------------------------------
00009990                            Map_obj2A:
00009990                            	include "_maps\obj2A.asm"
00009990                            ; ---------------------------------------------------------------------------
00009990                            ; Sprite mappings - doors (SBZ)
00009990                            ; ---------------------------------------------------------------------------
00009990 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009994 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009998 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000999C 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
000099A0 0000                       		dc.w byte_8A56-Map_obj2A
000099A2 02                         byte_89FE:	dc.b 2
000099A3 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
000099A8 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
000099AD 02                         byte_8A09:	dc.b 2
000099AE DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
000099B3 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
000099B8 02                         byte_8A14:	dc.b 2
000099B9 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
000099BE 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
000099C3 02                         byte_8A1F:	dc.b 2
000099C4 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
000099C9 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000099CE 02                         byte_8A2A:	dc.b 2
000099CF D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000099D4 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000099D9 02                         byte_8A35:	dc.b 2
000099DA CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
000099DF 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
000099E4 02                         byte_8A40:	dc.b 2
000099E5 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
000099EA 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
000099EF 02                         byte_8A4B:	dc.b 2
000099F0 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
000099F5 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
000099FA 02                         byte_8A56:	dc.b 2
000099FB C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009A00 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00009A06 00                         		even
00009A06 00                         		even
00009A06                            
00009A06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A06                            
00009A06                            
00009A06                            Obj44_SolidWall:			; XREF: Obj44_Solid
00009A06 6100 0000                  		bsr.w	Obj44_SolidWall2
00009A0A 6700                       		beq.s	loc_8AA8
00009A0C 6B00 0000                  		bmi.w	loc_8AC4
00009A10 4A40                       		tst.w	d0
00009A12 6700 0000                  		beq.w	loc_8A92
00009A16 6B00                       		bmi.s	loc_8A7C
00009A18 4A69 0010                  		tst.w	$10(a1)
00009A1C 6B00                       		bmi.s	loc_8A92
00009A1E 6000                       		bra.s	loc_8A82
00009A20                            ; ===========================================================================
00009A20                            
00009A20                            loc_8A7C:
00009A20 4A69 0010                  		tst.w	$10(a1)
00009A24 6A00                       		bpl.s	loc_8A92
00009A26                            
00009A26                            loc_8A82:
00009A26 9169 0008                  		sub.w	d0,8(a1)
00009A2A 337C 0000 0014             		move.w	#0,$14(a1)
00009A30 337C 0000 0010             		move.w	#0,$10(a1)
00009A36                            
00009A36                            loc_8A92:
00009A36 0829 0001 0022             		btst	#1,$22(a1)
00009A3C 6600                       		bne.s	loc_8AB6
00009A3E 08E9 0005 0022             		bset	#5,$22(a1)
00009A44 08E8 0005 0022             		bset	#5,$22(a0)
00009A4A 4E75                       		rts	
00009A4C                            ; ===========================================================================
00009A4C                            
00009A4C                            loc_8AA8:
00009A4C 0828 0005 0022             		btst	#5,$22(a0)
00009A52 6700                       		beq.s	locret_8AC2
00009A54 337C 0001 001C             		move.w	#1,$1C(a1)
00009A5A                            
00009A5A                            loc_8AB6:
00009A5A 08A8 0005 0022             		bclr	#5,$22(a0)
00009A60 08A9 0005 0022             		bclr	#5,$22(a1)
00009A66                            
00009A66                            locret_8AC2:
00009A66 4E75                       		rts	
00009A68                            ; ===========================================================================
00009A68                            
00009A68                            loc_8AC4:
00009A68 4A69 0012                  		tst.w	$12(a1)
00009A6C 6A00                       		bpl.s	locret_8AD8
00009A6E 4A43                       		tst.w	d3
00009A70 6A00                       		bpl.s	locret_8AD8
00009A72 9769 000C                  		sub.w	d3,$C(a1)
00009A76 337C 0000 0012             		move.w	#0,$12(a1)
00009A7C                            
00009A7C                            locret_8AD8:
00009A7C 4E75                       		rts	
00009A7E                            ; End of function Obj44_SolidWall
00009A7E                            
00009A7E                            
00009A7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A7E                            
00009A7E                            
00009A7E                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009A7E 43F8 D000                  		lea	($FFFFD000).w,a1
00009A82 3029 0008                  		move.w	8(a1),d0
00009A86 9068 0008                  		sub.w	8(a0),d0
00009A8A D041                       		add.w	d1,d0
00009A8C 6B00                       		bmi.s	loc_8B48
00009A8E 3601                       		move.w	d1,d3
00009A90 D643                       		add.w	d3,d3
00009A92 B043                       		cmp.w	d3,d0
00009A94 6200                       		bhi.s	loc_8B48
00009A96 1629 0016                  		move.b	$16(a1),d3
00009A9A 4883                       		ext.w	d3
00009A9C D443                       		add.w	d3,d2
00009A9E 3629 000C                  		move.w	$C(a1),d3
00009AA2 9668 000C                  		sub.w	$C(a0),d3
00009AA6 D642                       		add.w	d2,d3
00009AA8 6B00                       		bmi.s	loc_8B48
00009AAA 3802                       		move.w	d2,d4
00009AAC D844                       		add.w	d4,d4
00009AAE B644                       		cmp.w	d4,d3
00009AB0 6400                       		bcc.s	loc_8B48
00009AB2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009AB6 6B00                       		bmi.s	loc_8B48
00009AB8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009ABE 6400                       		bcc.s	loc_8B48
00009AC0 4A78 FE08                  		tst.w	($FFFFFE08).w
00009AC4 6600                       		bne.s	loc_8B48
00009AC6 3A00                       		move.w	d0,d5
00009AC8 B240                       		cmp.w	d0,d1
00009ACA 6400                       		bcc.s	loc_8B30
00009ACC D241                       		add.w	d1,d1
00009ACE 9041                       		sub.w	d1,d0
00009AD0 3A00                       		move.w	d0,d5
00009AD2 4445                       		neg.w	d5
00009AD4                            
00009AD4                            loc_8B30:
00009AD4 3203                       		move.w	d3,d1
00009AD6 B443                       		cmp.w	d3,d2
00009AD8 6400                       		bcc.s	loc_8B3C
00009ADA 9644                       		sub.w	d4,d3
00009ADC 3203                       		move.w	d3,d1
00009ADE 4441                       		neg.w	d1
00009AE0                            
00009AE0                            loc_8B3C:
00009AE0 BA41                       		cmp.w	d1,d5
00009AE2 6200                       		bhi.s	loc_8B44
00009AE4 7801                       		moveq	#1,d4
00009AE6 4E75                       		rts	
00009AE8                            ; ===========================================================================
00009AE8                            
00009AE8                            loc_8B44:
00009AE8 78FF                       		moveq	#-1,d4
00009AEA 4E75                       		rts	
00009AEC                            ; ===========================================================================
00009AEC                            
00009AEC                            loc_8B48:
00009AEC 7800                       		moveq	#0,d4
00009AEE 4E75                       		rts	
00009AF0                            ; End of function Obj44_SolidWall2
00009AF0                            
00009AF0                            ; ===========================================================================
00009AF0                            ; ---------------------------------------------------------------------------
00009AF0                            ; Object 1E - Ball Hog enemy (SBZ)
00009AF0                            ; ---------------------------------------------------------------------------
00009AF0                            
00009AF0                            Obj1E:					; XREF: Obj_Index
00009AF0 7000                       		moveq	#0,d0
00009AF2 1028 0024                  		move.b	$24(a0),d0
00009AF6 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009AFA 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009AFE                            ; ===========================================================================
00009AFE 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009B00 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009B02                            ; ===========================================================================
00009B02                            
00009B02                            Obj1E_Main:				; XREF: Obj1E_Index
00009B02 117C 0013 0016             		move.b	#$13,$16(a0)
00009B08 117C 0008 0017             		move.b	#8,$17(a0)
00009B0E 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009B16 317C 2302 0002             		move.w	#$2302,2(a0)
00009B1C 117C 0004 0001             		move.b	#4,1(a0)
00009B22 117C 0004 0018             		move.b	#4,$18(a0)
00009B28 117C 0005 0020             		move.b	#5,$20(a0)
00009B2E 117C 000C 0019             		move.b	#$C,$19(a0)
00009B34 6100 0000                  		bsr.w	ObjectFall
00009B38 4EB9 0000 0000             		jsr	ObjHitFloor
00009B3E 4A41                       		tst.w	d1
00009B40 6A00                       		bpl.s	locret_8BAC
00009B42 D368 000C                  		add.w	d1,$C(a0)
00009B46 317C 0000 0012             		move.w	#0,$12(a0)
00009B4C 5428 0024                  		addq.b	#2,$24(a0)
00009B50                            
00009B50                            locret_8BAC:
00009B50 4E75                       		rts	
00009B52                            ; ===========================================================================
00009B52                            
00009B52                            Obj1E_Action:				; XREF: Obj1E_Index
00009B52 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009B58 6100 0000                  		bsr.w	AnimateSprite
00009B5C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009B62 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009B64 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009B68 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009B6A 6000                       		bra.s	Obj1E_MarkAsGone
00009B6C                            ; ===========================================================================
00009B6C                            
00009B6C                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009B6C 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009B70                            
00009B70                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009B70 6000 0000                  		bra.w	MarkObjGone
00009B74                            ; ===========================================================================
00009B74                            
00009B74                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009B74 117C 0001 0032             		move.b	#1,$32(a0)
00009B7A 6100 0000                  		bsr.w	SingleObjLoad
00009B7E 6600                       		bne.s	loc_8C1A
00009B80 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009B84 3368 0008 0008             		move.w	8(a0),8(a1)
00009B8A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009B90 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009B96 337C 0000 0012             		move.w	#0,$12(a1)
00009B9C 70FC                       		moveq	#-4,d0
00009B9E 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009BA4 6700                       		beq.s	loc_8C0A	; if not, branch
00009BA6 4440                       		neg.w	d0
00009BA8 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009BAC                            
00009BAC                            loc_8C0A:
00009BAC D169 0008                  		add.w	d0,8(a1)
00009BB0 0669 000C 000C             		addi.w	#$C,$C(a1)
00009BB6 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009BBC                            
00009BBC                            loc_8C1A:
00009BBC 60B2                       		bra.s	Obj1E_MarkAsGone
00009BBE                            ; ===========================================================================
00009BBE                            ; ---------------------------------------------------------------------------
00009BBE                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009BBE                            ; ---------------------------------------------------------------------------
00009BBE                            
00009BBE                            Obj20:					; XREF: Obj_Index
00009BBE 7000                       		moveq	#0,d0
00009BC0 1028 0024                  		move.b	$24(a0),d0
00009BC4 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009BC8 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00009BCC                            ; ===========================================================================
00009BCC 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009BCE 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009BD0                            ; ===========================================================================
00009BD0                            
00009BD0                            Obj20_Main:				; XREF: Obj20_Index
00009BD0 5428 0024                  		addq.b	#2,$24(a0)
00009BD4 117C 0007 0016             		move.b	#7,$16(a0)
00009BDA 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009BE2 317C 2302 0002             		move.w	#$2302,2(a0)
00009BE8 117C 0004 0001             		move.b	#4,1(a0)
00009BEE 117C 0003 0018             		move.b	#3,$18(a0)
00009BF4 117C 0087 0020             		move.b	#$87,$20(a0)
00009BFA 117C 0008 0019             		move.b	#8,$19(a0)
00009C00 7000                       		moveq	#0,d0
00009C02 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009C06 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009C0A 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009C0E 117C 0004 001A             		move.b	#4,$1A(a0)
00009C14                            
00009C14                            Obj20_Bounce:				; XREF: Obj20_Index
00009C14 4EB9 0000 0000             		jsr	ObjectFall
00009C1A 4A68 0012                  		tst.w	$12(a0)
00009C1E 6B00                       		bmi.s	Obj20_ChkExplode
00009C20 4EB9 0000 0000             		jsr	ObjHitFloor
00009C26 4A41                       		tst.w	d1
00009C28 6A00                       		bpl.s	Obj20_ChkExplode
00009C2A D368 000C                  		add.w	d1,$C(a0)
00009C2E 317C FD00 0012             		move.w	#-$300,$12(a0)
00009C34 4A03                       		tst.b	d3
00009C36 6700                       		beq.s	Obj20_ChkExplode
00009C38 6B00                       		bmi.s	loc_8CA4
00009C3A 4A68 0010                  		tst.w	$10(a0)
00009C3E 6A00                       		bpl.s	Obj20_ChkExplode
00009C40 4468 0010                  		neg.w	$10(a0)
00009C44 6000                       		bra.s	Obj20_ChkExplode
00009C46                            ; ===========================================================================
00009C46                            
00009C46                            loc_8CA4:				; XREF: Obj20_Bounce
00009C46 4A68 0010                  		tst.w	$10(a0)
00009C4A 6B00                       		bmi.s	Obj20_ChkExplode
00009C4C 4468 0010                  		neg.w	$10(a0)
00009C50                            
00009C50                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009C50 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009C54 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009C56 10BC 0024                  		move.b	#$24,0(a0)
00009C5A 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009C5E 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009C64 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009C68                            ; ===========================================================================
00009C68                            
00009C68                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009C68 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009C6C 6A00                       		bpl.s	Obj20_Display
00009C6E 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009C74 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009C7A                            
00009C7A                            Obj20_Display:
00009C7A 6100 0000                  		bsr.w	DisplaySprite
00009C7E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009C82 0640 00E0                  		addi.w	#$E0,d0
00009C86 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009C8A 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009C8E 4E75                       		rts	
00009C90                            ; ===========================================================================
00009C90                            ; ---------------------------------------------------------------------------
00009C90                            ; Object 24 - explosion	from a destroyed monitor
00009C90                            ; ---------------------------------------------------------------------------
00009C90                            
00009C90                            Obj24:					; XREF: Obj_Index
00009C90 7000                       		moveq	#0,d0
00009C92 1028 0024                  		move.b	$24(a0),d0
00009C96 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009C9A 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009C9E                            ; ===========================================================================
00009C9E 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009CA0 0000                       		dc.w Obj24_Animate-Obj24_Index
00009CA2                            ; ===========================================================================
00009CA2                            
00009CA2                            Obj24_Main:				; XREF: Obj24_Index
00009CA2 5428 0024                  		addq.b	#2,$24(a0)
00009CA6 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009CAE 317C 041C 0002             		move.w	#$41C,2(a0)
00009CB4 117C 0004 0001             		move.b	#4,1(a0)
00009CBA 117C 0001 0018             		move.b	#1,$18(a0)
00009CC0 117C 0000 0020             		move.b	#0,$20(a0)
00009CC6 117C 000C 0019             		move.b	#$C,$19(a0)
00009CCC 117C 0009 001E             		move.b	#9,$1E(a0)
00009CD2 117C 0000 001A             		move.b	#0,$1A(a0)
00009CD8 303C 00A5                  		move.w	#$A5,d0
00009CDC 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play explosion sound
00009CE2                            
00009CE2                            Obj24_Animate:				; XREF: Obj24_Index
00009CE2 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009CE6 6A00                       		bpl.s	Obj24_Display
00009CE8 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009CEE 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009CF2 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00009CF8 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009CFC                            
00009CFC                            Obj24_Display:
00009CFC 6000 0000                  		bra.w	DisplaySprite
00009D00                            ; ===========================================================================
00009D00                            ; ---------------------------------------------------------------------------
00009D00                            ; Object 27 - explosion	from a destroyed enemy
00009D00                            ; ---------------------------------------------------------------------------
00009D00                            
00009D00                            Obj27:					; XREF: Obj_Index
00009D00 7000                       		moveq	#0,d0
00009D02 1028 0024                  		move.b	$24(a0),d0
00009D06 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00009D0A 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00009D0E                            ; ===========================================================================
00009D0E 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009D10 0000                       		dc.w Obj27_Main-Obj27_Index
00009D12 0000                       		dc.w Obj27_Animate-Obj27_Index
00009D14                            ; ===========================================================================
00009D14                            
00009D14                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009D14 5428 0024                  		addq.b	#2,$24(a0)
00009D18 6100 0000                  		bsr.w	SingleObjLoad
00009D1C 6600                       		bne.s	Obj27_Main
00009D1E 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009D22 3368 0008 0008             		move.w	8(a0),8(a1)
00009D28 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D2E 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009D34                            
00009D34                            Obj27_Main:				; XREF: Obj27_Index
00009D34 5428 0024                  		addq.b	#2,$24(a0)
00009D38 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009D40 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009D46 117C 0004 0001             		move.b	#4,1(a0)
00009D4C 117C 0001 0018             		move.b	#1,$18(a0)
00009D52 117C 0000 0020             		move.b	#0,$20(a0)
00009D58 117C 000C 0019             		move.b	#$C,$19(a0)
00009D5E                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009D5E 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009D64 117C 0000 001A             		move.b	#0,$1A(a0)
00009D6A 303C 00C1                  		move.w	#$C1,d0
00009D6E 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009D74                            
00009D74 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
00009D7A 1028 0028                  		move.b	$28(a0),d0
00009D7E 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009D84 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
00009D8A                            
00009D8A                            Obj27_Animate:				; XREF: Obj27_Index
00009D8A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009D8E 6A00                       		bpl.s	Obj27_Display
00009D90                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009D90 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009D96 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009D9A 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009DA0 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009DA4                            
00009DA4                            Obj27_Display:
00009DA4 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
00009DAA 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
00009DB0 6000 0000                  		bra.w	DisplaySprite
00009DB4                            ; ===========================================================================
00009DB4                            ; ---------------------------------------------------------------------------
00009DB4                            Obj27_ExplosionXYSpd:
00009DB4                            		; dc.w	-$350, -$300	; Left
00009DB4                            		; dc.w	-$200, -$450	; Near middle (left)
00009DB4                            		; dc.w	0, -$500	; Middle
00009DB4                            		; dc.w	$200, -$450	; Near middle (right)
00009DB4                            		; dc.w	$350, -$300	; Right
00009DB4                            
00009DB4 FEB0 FC00                  		dc.w	-$150, -$400	; Left
00009DB8 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
00009DBC 0000 FA00                  		dc.w	0, -$600	; Middle
00009DC0 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
00009DC4 0150 FC00                  		dc.w	$150, -$400	; Right
00009DC8                            
00009DC8 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009DE2                            ; ---------------------------------------------------------------------------
00009DE2                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009DE2                            ; ---------------------------------------------------------------------------
00009DE2                            
00009DE2                            Obj3F:					; XREF: Obj_Index
00009DE2 7000                       		moveq	#0,d0
00009DE4 1028 0024                  		move.b	$24(a0),d0
00009DE8 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009DEC 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009DF0                            ; ===========================================================================
00009DF0 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009DF2 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009DF4                            ; ===========================================================================
00009DF4                            
00009DF4                            Obj3F_Main:				; XREF: Obj3F_Index
00009DF4 5428 0024                  		addq.b	#2,$24(a0)
00009DF8 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009E00 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009E06 117C 0004 0001             		move.b	#4,1(a0)
00009E0C 117C 0001 0018             		move.b	#1,$18(a0)
00009E12 117C 0000 0020             		move.b	#0,$20(a0)
00009E18 117C 000C 0019             		move.b	#$C,$19(a0)
00009E1E 117C 0007 001E             		move.b	#7,$1E(a0)
00009E24 117C 0000 001A             		move.b	#0,$1A(a0)
00009E2A 303C 00C4                  		move.w	#$C4,d0
00009E2E 4EF9 0000 1C7A             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009E34                            ; ===========================================================================
00009E34                            Ani_obj1E:
00009E34                            	include "_anim\obj1E.asm"
00009E34                            ; ---------------------------------------------------------------------------
00009E34                            ; Animation script - doors (SBZ)
00009E34                            ; ---------------------------------------------------------------------------
00009E34 0000                       		dc.w byte_8E4A-Ani_obj1E
00009E36 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00009E4E 00                         		even
00009E4E 00                         		even
00009E4E                            
00009E4E                            ; ---------------------------------------------------------------------------
00009E4E                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009E4E                            ; ---------------------------------------------------------------------------
00009E4E                            Map_obj1E:
00009E4E                            	include "_maps\obj1E.asm"
00009E4E                            Map_a7ad:
00009E4E 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
00009E50 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
00009E52 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
00009E54 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
00009E56 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
00009E58 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
00009E5A 02                         Map_a7ad_C: 	dc.b $2
00009E5B EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009E60 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009E65 02                         Map_a7ad_17: 	dc.b $2
00009E66 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009E6B FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009E70 02                         Map_a7ad_22: 	dc.b $2
00009E71 F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
00009E76 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
00009E7B 02                         Map_a7ad_2D: 	dc.b $2
00009E7C E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
00009E81 F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
00009E86 02                         Map_a7ad_38: 	dc.b $2
00009E87 F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
00009E8C E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
00009E91 02                         Map_a7ad_43: 	dc.b $2
00009E92 F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
00009E97 E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
00009E9C                            	even
00009E9C                            	even
00009E9C                            
00009E9C                            ; ---------------------------------------------------------------------------
00009E9C                            ; Sprite mappings - explosion
00009E9C                            ; ---------------------------------------------------------------------------
00009E9C                            Map_obj24:
00009E9C                            	include "_maps\obj24.asm"
00009E9C                            ; ---------------------------------------------------------------------------
00009E9C                            ; Sprite mappings - explosion
00009E9C                            ; ---------------------------------------------------------------------------
00009E9C 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009EA0 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00009EA4 01                         byte_8EAE:	dc.b 1
00009EA5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009EAA 01                         byte_8EB4:	dc.b 1
00009EAB F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009EB0 01                         byte_8EBA:	dc.b 1
00009EB1 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00009EB6 01                         byte_8EC0:	dc.b 1
00009EB7 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009EBC                            		even
00009EBC                            		even
00009EBC                            
00009EBC                            ; ---------------------------------------------------------------------------
00009EBC                            ; Sprite mappings - explosion
00009EBC                            ; ---------------------------------------------------------------------------
00009EBC 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009EC0 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00009EC4 0000                       		dc.w byte_8EF7-Map_obj27
00009EC6 01                         byte_8ED0:	dc.b 1
00009EC7 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009ECC 01                         byte_8ED6:	dc.b 1
00009ECD F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009ED2 01                         byte_8EDC:	dc.b 1
00009ED3 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009ED8 04                         byte_8EE2:	dc.b 4
00009ED9 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009EDE EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009EE3 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009EE8 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009EED 04                         byte_8EF7:	dc.b 4
00009EEE EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009EF3 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009EF8 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009EFD FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009F02                            		even
00009F02                            ; ---------------------------------------------------------------------------
00009F02                            ; Sprite mappings - explosion from when	a boss is destroyed
00009F02                            ; ---------------------------------------------------------------------------
00009F02 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009F04 0000                       		dc.w byte_8F16-Map_obj3F
00009F06 0000                       		dc.w byte_8F1C-Map_obj3F
00009F08 FFD6                       		dc.w byte_8EE2-Map_obj3F
00009F0A FFEB                       		dc.w byte_8EF7-Map_obj3F
00009F0C 01                         byte_8F16:	dc.b 1
00009F0D F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009F12 01                         byte_8F1C:	dc.b 1
00009F13 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009F18                            		even
00009F18                            ; ===========================================================================
00009F18                            ; ---------------------------------------------------------------------------
00009F18                            ; Object 28 - animals
00009F18                            ; ---------------------------------------------------------------------------
00009F18                            
00009F18                            Obj28:					; XREF: Obj_Index
00009F18 7000                       		moveq	#0,d0
00009F1A 1028 0024                  		move.b	$24(a0),d0
00009F1E 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009F22 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009F26                            ; ===========================================================================
00009F26 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009F2A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009F2E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009F32 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009F36 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009F3A 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009F3E 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009F42 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009F46 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009F4A 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009F4E 0000                       		dc.w loc_92D6-Obj28_Index
00009F50                            
00009F50 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1, 0,	5, 0,	5
00009F60                            
00009F60 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009F64 0000 0000                  		dc.l Map_obj28
00009F68 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009F6C 0000 0000                  		dc.l Map_obj28a		; mappings address
00009F70 FE80 FD00                  		dc.w $FE80, $FD00
00009F74 0000 0000                  		dc.l Map_obj28
00009F78 FEC0 FE80                  		dc.w $FEC0, $FE80
00009F7C 0000 0000                  		dc.l Map_obj28a
00009F80 FE40 FD00                  		dc.w $FE40, $FD00
00009F84 0000 0000                  		dc.l Map_obj28b
00009F88 FD00 FC00                  		dc.w $FD00, $FC00
00009F8C 0000 0000                  		dc.l Map_obj28a
00009F90 FD80 FC80                  		dc.w $FD80, $FC80
00009F94 0000 0000                  		dc.l Map_obj28b
00009F98                            
00009F98 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009FA8 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00009FB8 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009FC4                            
00009FC4 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009FD8 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009FEC 0000 0000                  		dc.l Map_obj28b
00009FF0                            
00009FF0 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000A002 0565 05B3                  		dc.w $565, $5B3
0000A006                            ; ===========================================================================
0000A006                            
0000A006                            Obj28_Ending:				; XREF: Obj28_Index
0000A006 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000A00A 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000A00E 7000                       		moveq	#0,d0
0000A010 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000A014 D040                       		add.w	d0,d0		; multiply d0 by 2
0000A016 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000A01A 0440 0014                  		subi.w	#$14,d0
0000A01E 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000A024 D040                       		add.w	d0,d0
0000A026 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000A02C 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000A030 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000A036 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000A03C 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000A042 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000A048 117C 000C 0016             		move.b	#$C,$16(a0)
0000A04E 117C 0004 0001             		move.b	#4,1(a0)
0000A054 08E8 0000 0001             		bset	#0,1(a0)
0000A05A 117C 0006 0018             		move.b	#6,$18(a0)
0000A060 117C 0008 0019             		move.b	#8,$19(a0)
0000A066 117C 0007 001E             		move.b	#7,$1E(a0)
0000A06C 6000 0000                  		bra.w	DisplaySprite
0000A070                            ; ===========================================================================
0000A070                            
0000A070                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000A070 5428 0024                  		addq.b	#2,$24(a0)
0000A074 6100 937A                  		bsr.w	RandomNumber
0000A078 0240 0001                  		andi.w	#1,d0
0000A07C 7200                       		moveq	#0,d1
0000A07E 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000A082 D241                       		add.w	d1,d1
0000A084 D240                       		add.w	d0,d1
0000A086 43FA FEC8                  		lea	Obj28_VarIndex(pc),a1
0000A08A 1031 1000                  		move.b	(a1,d1.w),d0
0000A08E 1140 0030                  		move.b	d0,$30(a0)
0000A092 E748                       		lsl.w	#3,d0
0000A094 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000A098 D2C0                       		adda.w	d0,a1
0000A09A 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000A09E 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000A0A2 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000A0A6 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000A0AC 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000A0B2 6700                       		beq.s	loc_90C0	; if yes, branch
0000A0B4 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000A0BA                            
0000A0BA                            loc_90C0:
0000A0BA 117C 000C 0016             		move.b	#$C,$16(a0)
0000A0C0 117C 0004 0001             		move.b	#4,1(a0)
0000A0C6 08E8 0000 0001             		bset	#0,1(a0)
0000A0CC 117C 0006 0018             		move.b	#6,$18(a0)
0000A0D2 117C 0008 0019             		move.b	#8,$19(a0)
0000A0D8 117C 0007 001E             		move.b	#7,$1E(a0)
0000A0DE 117C 0002 001A             		move.b	#2,$1A(a0)
0000A0E4 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A0EA 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A0EE 6600                       		bne.s	loc_911C
0000A0F0 6100 0000                  		bsr.w	SingleObjLoad
0000A0F4 6600                       		bne.s	Obj28_Display
0000A0F6 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000A0FA 3368 0008 0008             		move.w	8(a0),8(a1)
0000A100 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A106 3028 003E                  		move.w	$3E(a0),d0
0000A10A E248                       		lsr.w	#1,d0
0000A10C 1340 001A                  		move.b	d0,$1A(a1)
0000A110                            
0000A110                            Obj28_Display:
0000A110 6000 0000                  		bra.w	DisplaySprite
0000A114                            ; ===========================================================================
0000A114                            
0000A114                            loc_911C:
0000A114 117C 0012 0024             		move.b	#$12,$24(a0)
0000A11A 4268 0010                  		clr.w	$10(a0)
0000A11E 6000 0000                  		bra.w	DisplaySprite
0000A122                            ; ===========================================================================
0000A122                            
0000A122                            loc_912A:				; XREF: Obj28_Index
0000A122 4A28 0001                  		tst.b	1(a0)
0000A126 6A00 0000                  		bpl.w	DeleteObject
0000A12A 6100 0000                  		bsr.w	ObjectFall
0000A12E 4A68 0012                  		tst.w	$12(a0)
0000A132 6B00                       		bmi.s	loc_9180
0000A134 4EB9 0000 0000             		jsr	ObjHitFloor
0000A13A 4A41                       		tst.w	d1
0000A13C 6A00                       		bpl.s	loc_9180
0000A13E D368 000C                  		add.w	d1,$C(a0)
0000A142 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A148 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A14E 117C 0001 001A             		move.b	#1,$1A(a0)
0000A154 1028 0030                  		move.b	$30(a0),d0
0000A158 D000                       		add.b	d0,d0
0000A15A 5800                       		addq.b	#4,d0
0000A15C 1140 0024                  		move.b	d0,$24(a0)
0000A160 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A164 6700                       		beq.s	loc_9180
0000A166 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000A16C 6700                       		beq.s	loc_9180
0000A16E 4468 0010                  		neg.w	$10(a0)
0000A172 0868 0000 0001             		bchg	#0,1(a0)
0000A178                            
0000A178                            loc_9180:
0000A178 6000 0000                  		bra.w	DisplaySprite
0000A17C                            ; ===========================================================================
0000A17C                            
0000A17C                            loc_9184:				; XREF: Obj28_Index
0000A17C 6100 0000                  		bsr.w	ObjectFall
0000A180 117C 0001 001A             		move.b	#1,$1A(a0)
0000A186 4A68 0012                  		tst.w	$12(a0)
0000A18A 6B00                       		bmi.s	loc_91AE
0000A18C 117C 0000 001A             		move.b	#0,$1A(a0)
0000A192 4EB9 0000 0000             		jsr	ObjHitFloor
0000A198 4A41                       		tst.w	d1
0000A19A 6A00                       		bpl.s	loc_91AE
0000A19C D368 000C                  		add.w	d1,$C(a0)
0000A1A0 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A1A6                            
0000A1A6                            loc_91AE:
0000A1A6 4A28 0028                  		tst.b	$28(a0)
0000A1AA 6600                       		bne.s	loc_9224
0000A1AC 4A28 0001                  		tst.b	1(a0)
0000A1B0 6A00 0000                  		bpl.w	DeleteObject
0000A1B4 6000 0000                  		bra.w	DisplaySprite
0000A1B8                            ; ===========================================================================
0000A1B8                            
0000A1B8                            loc_91C0:				; XREF: Obj28_Index
0000A1B8 6100 0000                  		bsr.w	SpeedToPos
0000A1BC 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A1C2 4A68 0012                  		tst.w	$12(a0)
0000A1C6 6B00                       		bmi.s	loc_91FC
0000A1C8 4EB9 0000 0000             		jsr	ObjHitFloor
0000A1CE 4A41                       		tst.w	d1
0000A1D0 6A00                       		bpl.s	loc_91FC
0000A1D2 D368 000C                  		add.w	d1,$C(a0)
0000A1D6 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A1DC 4A28 0028                  		tst.b	$28(a0)
0000A1E0 6700                       		beq.s	loc_91FC
0000A1E2 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000A1E8 6700                       		beq.s	loc_91FC
0000A1EA 4468 0010                  		neg.w	$10(a0)
0000A1EE 0868 0000 0001             		bchg	#0,1(a0)
0000A1F4                            
0000A1F4                            loc_91FC:
0000A1F4 5328 001E                  		subq.b	#1,$1E(a0)
0000A1F8 6A00                       		bpl.s	loc_9212
0000A1FA 117C 0001 001E             		move.b	#1,$1E(a0)
0000A200 5228 001A                  		addq.b	#1,$1A(a0)
0000A204 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A20A                            
0000A20A                            loc_9212:
0000A20A 4A28 0028                  		tst.b	$28(a0)
0000A20E 6600                       		bne.s	loc_9224
0000A210 4A28 0001                  		tst.b	1(a0)
0000A214 6A00 0000                  		bpl.w	DeleteObject
0000A218 6000 0000                  		bra.w	DisplaySprite
0000A21C                            ; ===========================================================================
0000A21C                            
0000A21C                            loc_9224:				; XREF: Obj28_Index
0000A21C 3028 0008                  		move.w	8(a0),d0
0000A220 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A224 6500                       		bcs.s	loc_923C
0000A226 0440 0180                  		subi.w	#$180,d0
0000A22A 6A00                       		bpl.s	loc_923C
0000A22C 4A28 0001                  		tst.b	1(a0)
0000A230 6A00 0000                  		bpl.w	DeleteObject
0000A234                            
0000A234                            loc_923C:
0000A234 6000 0000                  		bra.w	DisplaySprite
0000A238                            ; ===========================================================================
0000A238                            
0000A238                            loc_9240:				; XREF: Obj28_Index
0000A238 4A28 0001                  		tst.b	1(a0)
0000A23C 6A00 0000                  		bpl.w	DeleteObject
0000A240 5368 0036                  		subq.w	#1,$36(a0)
0000A244 6600 0000                  		bne.w	loc_925C
0000A248 117C 0002 0024             		move.b	#2,$24(a0)
0000A24E 117C 0003 0018             		move.b	#3,$18(a0)
0000A254                            
0000A254                            loc_925C:
0000A254 6000 0000                  		bra.w	DisplaySprite
0000A258                            ; ===========================================================================
0000A258                            
0000A258                            loc_9260:				; XREF: Obj28_Index
0000A258 6100 0000                  		bsr.w	sub_9404
0000A25C 6400                       		bcc.s	loc_927C
0000A25E 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A264 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A26A 117C 000E 0024             		move.b	#$E,$24(a0)
0000A270 6000 FF46                  		bra.w	loc_91C0
0000A274                            ; ===========================================================================
0000A274                            
0000A274                            loc_927C:
0000A274 6000 FFA6                  		bra.w	loc_9224
0000A278                            ; ===========================================================================
0000A278                            
0000A278                            loc_9280:				; XREF: Obj28_Index
0000A278 6100 0000                  		bsr.w	sub_9404
0000A27C 6A00                       		bpl.s	loc_92B6
0000A27E 4268 0010                  		clr.w	$10(a0)
0000A282 4268 0032                  		clr.w	$32(a0)
0000A286 6100 0000                  		bsr.w	SpeedToPos
0000A28A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A290 6100 0000                  		bsr.w	loc_93C4
0000A294 6100 0000                  		bsr.w	loc_93EC
0000A298 5328 001E                  		subq.b	#1,$1E(a0)
0000A29C 6A00                       		bpl.s	loc_92B6
0000A29E 117C 0001 001E             		move.b	#1,$1E(a0)
0000A2A4 5228 001A                  		addq.b	#1,$1A(a0)
0000A2A8 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A2AE                            
0000A2AE                            loc_92B6:
0000A2AE 6000 FF6C                  		bra.w	loc_9224
0000A2B2                            ; ===========================================================================
0000A2B2                            
0000A2B2                            loc_92BA:				; XREF: Obj28_Index
0000A2B2 6100 0000                  		bsr.w	sub_9404
0000A2B6 6A00                       		bpl.s	loc_9310
0000A2B8 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A2BE 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A2C4 117C 0004 0024             		move.b	#4,$24(a0)
0000A2CA 6000 FEB0                  		bra.w	loc_9184
0000A2CE                            ; ===========================================================================
0000A2CE                            
0000A2CE                            loc_92D6:				; XREF: Obj28_Index
0000A2CE 6100 0000                  		bsr.w	ObjectFall
0000A2D2 117C 0001 001A             		move.b	#1,$1A(a0)
0000A2D8 4A68 0012                  		tst.w	$12(a0)
0000A2DC 6B00                       		bmi.s	loc_9310
0000A2DE 117C 0000 001A             		move.b	#0,$1A(a0)
0000A2E4 4EB9 0000 0000             		jsr	ObjHitFloor
0000A2EA 4A41                       		tst.w	d1
0000A2EC 6A00                       		bpl.s	loc_9310
0000A2EE 4628 0029                  		not.b	$29(a0)
0000A2F2 6600                       		bne.s	loc_9306
0000A2F4 4468 0010                  		neg.w	$10(a0)
0000A2F8 0868 0000 0001             		bchg	#0,1(a0)
0000A2FE                            
0000A2FE                            loc_9306:
0000A2FE D368 000C                  		add.w	d1,$C(a0)
0000A302 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A308                            
0000A308                            loc_9310:
0000A308 6000 FF12                  		bra.w	loc_9224
0000A30C                            ; ===========================================================================
0000A30C                            
0000A30C                            loc_9314:				; XREF: Obj28_Index
0000A30C 6100 0000                  		bsr.w	sub_9404
0000A310 6A00                       		bpl.s	loc_932E
0000A312 4268 0010                  		clr.w	$10(a0)
0000A316 4268 0032                  		clr.w	$32(a0)
0000A31A 6100 0000                  		bsr.w	ObjectFall
0000A31E 6100 0000                  		bsr.w	loc_93C4
0000A322 6100 0000                  		bsr.w	loc_93EC
0000A326                            
0000A326                            loc_932E:
0000A326 6000 FEF4                  		bra.w	loc_9224
0000A32A                            ; ===========================================================================
0000A32A                            
0000A32A                            loc_9332:				; XREF: Obj28_Index
0000A32A 6100 0000                  		bsr.w	sub_9404
0000A32E 6A00                       		bpl.s	loc_936C
0000A330 6100 0000                  		bsr.w	ObjectFall
0000A334 117C 0001 001A             		move.b	#1,$1A(a0)
0000A33A 4A68 0012                  		tst.w	$12(a0)
0000A33E 6B00                       		bmi.s	loc_936C
0000A340 117C 0000 001A             		move.b	#0,$1A(a0)
0000A346 4EB9 0000 0000             		jsr	ObjHitFloor
0000A34C 4A41                       		tst.w	d1
0000A34E 6A00                       		bpl.s	loc_936C
0000A350 4468 0010                  		neg.w	$10(a0)
0000A354 0868 0000 0001             		bchg	#0,1(a0)
0000A35A D368 000C                  		add.w	d1,$C(a0)
0000A35E 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A364                            
0000A364                            loc_936C:
0000A364 6000 FEB6                  		bra.w	loc_9224
0000A368                            ; ===========================================================================
0000A368                            
0000A368                            loc_9370:				; XREF: Obj28_Index
0000A368 6100 0000                  		bsr.w	sub_9404
0000A36C 6A00                       		bpl.s	loc_93C0
0000A36E 6100 0000                  		bsr.w	SpeedToPos
0000A372 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A378 4A68 0012                  		tst.w	$12(a0)
0000A37C 6B00                       		bmi.s	loc_93AA
0000A37E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A384 4A41                       		tst.w	d1
0000A386 6A00                       		bpl.s	loc_93AA
0000A388 4628 0029                  		not.b	$29(a0)
0000A38C 6600                       		bne.s	loc_93A0
0000A38E 4468 0010                  		neg.w	$10(a0)
0000A392 0868 0000 0001             		bchg	#0,1(a0)
0000A398                            
0000A398                            loc_93A0:
0000A398 D368 000C                  		add.w	d1,$C(a0)
0000A39C 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A3A2                            
0000A3A2                            loc_93AA:
0000A3A2 5328 001E                  		subq.b	#1,$1E(a0)
0000A3A6 6A00                       		bpl.s	loc_93C0
0000A3A8 117C 0001 001E             		move.b	#1,$1E(a0)
0000A3AE 5228 001A                  		addq.b	#1,$1A(a0)
0000A3B2 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A3B8                            
0000A3B8                            loc_93C0:
0000A3B8 6000 FE62                  		bra.w	loc_9224
0000A3BC                            ; ===========================================================================
0000A3BC                            
0000A3BC                            loc_93C4:
0000A3BC 117C 0001 001A             		move.b	#1,$1A(a0)
0000A3C2 4A68 0012                  		tst.w	$12(a0)
0000A3C6 6B00                       		bmi.s	locret_93EA
0000A3C8 117C 0000 001A             		move.b	#0,$1A(a0)
0000A3CE 4EB9 0000 0000             		jsr	ObjHitFloor
0000A3D4 4A41                       		tst.w	d1
0000A3D6 6A00                       		bpl.s	locret_93EA
0000A3D8 D368 000C                  		add.w	d1,$C(a0)
0000A3DC 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A3E2                            
0000A3E2                            locret_93EA:
0000A3E2 4E75                       		rts	
0000A3E4                            ; ===========================================================================
0000A3E4                            
0000A3E4                            loc_93EC:
0000A3E4 08E8 0000 0001             		bset	#0,1(a0)
0000A3EA 3028 0008                  		move.w	8(a0),d0
0000A3EE 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A3F2 6400                       		bcc.s	locret_9402
0000A3F4 08A8 0000 0001             		bclr	#0,1(a0)
0000A3FA                            
0000A3FA                            locret_9402:
0000A3FA 4E75                       		rts	
0000A3FC                            
0000A3FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A3FC                            
0000A3FC                            
0000A3FC                            sub_9404:
0000A3FC 3038 D008                  		move.w	($FFFFD008).w,d0
0000A400 9068 0008                  		sub.w	8(a0),d0
0000A404 0440 00B8                  		subi.w	#$B8,d0
0000A408 4E75                       		rts	
0000A40A                            ; End of function sub_9404
0000A40A                            
0000A40A                            ; ===========================================================================
0000A40A                            ; ---------------------------------------------------------------------------
0000A40A                            ; Object 29 - points that appear when you destroy something
0000A40A                            ; ---------------------------------------------------------------------------
0000A40A                            
0000A40A                            Obj29:					; XREF: Obj_Index
0000A40A 7000                       		moveq	#0,d0
0000A40C 1028 0024                  		move.b	$24(a0),d0
0000A410 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000A414 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000A418 6000 0000                  		bra.w	DisplaySprite
0000A41C                            ; ===========================================================================
0000A41C 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000A41E 0000                       		dc.w Obj29_Slower-Obj29_Index
0000A420                            ; ===========================================================================
0000A420                            
0000A420                            Obj29_Main:				; XREF: Obj29_Index
0000A420 5428 0024                  		addq.b	#2,$24(a0)
0000A424 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000A42C 317C 2797 0002             		move.w	#$2797,2(a0)
0000A432 117C 0004 0001             		move.b	#4,1(a0)
0000A438 117C 0001 0018             		move.b	#1,$18(a0)
0000A43E 117C 0008 0019             		move.b	#8,$19(a0)
0000A444 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000A44A                            
0000A44A                            Obj29_Slower:				; XREF: Obj29_Index
0000A44A 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A44E 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000A452 6100 0000                  		bsr.w	SpeedToPos
0000A456 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A45C 4E75                       		rts	
0000A45E                            ; ===========================================================================
0000A45E                            ; ---------------------------------------------------------------------------
0000A45E                            ; Sprite mappings - animals
0000A45E                            ; ---------------------------------------------------------------------------
0000A45E                            Map_obj28:
0000A45E                            	include "_maps\obj28.asm"
0000A45E                            ; ---------------------------------------------------------------------------
0000A45E                            ; Sprite mappings - animals
0000A45E                            ; ---------------------------------------------------------------------------
0000A45E 0000                       		dc.w byte_9472-Map_obj28
0000A460 0000                       		dc.w byte_9478-Map_obj28
0000A462 0000                       		dc.w byte_946C-Map_obj28
0000A464 01                         byte_946C:	dc.b 1
0000A465 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A46A 01                         byte_9472:	dc.b 1
0000A46B F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000A470 01                         byte_9478:	dc.b 1
0000A471 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000A476                            		even
0000A476                            		even
0000A476                            
0000A476                            Map_obj28a:
0000A476                            	include "_maps\obj28a.asm"
0000A476                            ; ---------------------------------------------------------------------------
0000A476                            ; Sprite mappings - animals
0000A476                            ; ---------------------------------------------------------------------------
0000A476 0000                       		dc.w byte_948A-Map_obj28a
0000A478 0000                       		dc.w byte_9490-Map_obj28a
0000A47A 0000                       		dc.w byte_9484-Map_obj28a
0000A47C 01                         byte_9484:	dc.b 1
0000A47D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A482 01                         byte_948A:	dc.b 1
0000A483 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000A488 01                         byte_9490:	dc.b 1
0000A489 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000A48E                            		even
0000A48E                            		even
0000A48E                            
0000A48E                            Map_obj28b:
0000A48E                            	include "_maps\obj28b.asm"
0000A48E                            ; ---------------------------------------------------------------------------
0000A48E                            ; Sprite mappings - animals
0000A48E                            ; ---------------------------------------------------------------------------
0000A48E 0000                       		dc.w byte_94A2-Map_obj28b
0000A490 0000                       		dc.w byte_94A8-Map_obj28b
0000A492 0000                       		dc.w byte_949C-Map_obj28b
0000A494 01                         byte_949C:	dc.b 1
0000A495 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A49A 01                         byte_94A2:	dc.b 1
0000A49B FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000A4A0 01                         byte_94A8:	dc.b 1
0000A4A1 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000A4A6                            		even
0000A4A6                            		even
0000A4A6                            
0000A4A6                            ; ---------------------------------------------------------------------------
0000A4A6                            ; Sprite mappings - points that	appear when you	destroy	something
0000A4A6                            ; ---------------------------------------------------------------------------
0000A4A6                            Map_obj29:
0000A4A6                            	include "_maps\obj29.asm"
0000A4A6                            ; ---------------------------------------------------------------------------
0000A4A6                            ; Sprite mappings - points that	appear when you	destroy	something
0000A4A6                            ; ---------------------------------------------------------------------------
0000A4A6 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000A4AA 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000A4AE 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000A4B2 0000                       		dc.w byte_94E5-Map_obj29
0000A4B4 01                         byte_94BC:	dc.b 1
0000A4B5 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000A4BA 01                         byte_94C2:	dc.b 1
0000A4BB FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000A4C0 01                         byte_94C8:	dc.b 1
0000A4C1 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000A4C6 01                         byte_94CE:	dc.b 1
0000A4C7 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000A4CC 01                         byte_94D4:	dc.b 1
0000A4CD FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000A4D2 02                         byte_94DA:	dc.b 2
0000A4D3 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000A4D8 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000A4DD 02                         byte_94E5:	dc.b 2
0000A4DE FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000A4E3 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000A4E8                            		even
0000A4E8                            		even
0000A4E8                            
0000A4E8                            ; ===========================================================================
0000A4E8                            ; ---------------------------------------------------------------------------
0000A4E8                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000A4E8                            ; ---------------------------------------------------------------------------
0000A4E8                            
0000A4E8                            Obj1F:					; XREF: Obj_Index
0000A4E8 7000                       		moveq	#0,d0
0000A4EA 1028 0024                  		move.b	$24(a0),d0
0000A4EE 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000A4F2 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000A4F6                            ; ===========================================================================
0000A4F6 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000A4F8 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000A4FA 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000A4FC 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000A4FE 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000A500                            ; ===========================================================================
0000A500                            
0000A500                            Obj1F_Main:				; XREF: Obj1F_Index
0000A500 117C 0010 0016             		move.b	#$10,$16(a0)
0000A506 117C 0008 0017             		move.b	#8,$17(a0)
0000A50C 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A514 317C 0400 0002             		move.w	#$400,2(a0)
0000A51A 117C 0004 0001             		move.b	#4,1(a0)
0000A520 117C 0003 0018             		move.b	#3,$18(a0)
0000A526 117C 0006 0020             		move.b	#6,$20(a0)
0000A52C 117C 0015 0019             		move.b	#$15,$19(a0)
0000A532 6100 0000                  		bsr.w	ObjectFall
0000A536 4EB9 0000 0000             		jsr	ObjHitFloor
0000A53C 4A41                       		tst.w	d1
0000A53E 6A00                       		bpl.s	locret_955A
0000A540 D368 000C                  		add.w	d1,$C(a0)
0000A544 1143 0026                  		move.b	d3,$26(a0)
0000A548 317C 0000 0012             		move.w	#0,$12(a0)
0000A54E 5428 0024                  		addq.b	#2,$24(a0)
0000A552                            
0000A552                            locret_955A:
0000A552 4E75                       		rts	
0000A554                            ; ===========================================================================
0000A554                            
0000A554                            Obj1F_Action:				; XREF: Obj1F_Index
0000A554 7000                       		moveq	#0,d0
0000A556 1028 0025                  		move.b	$25(a0),d0
0000A55A 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000A55E 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000A562 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A568 6100 0000                  		bsr.w	AnimateSprite
0000A56C 6000 0000                  		bra.w	MarkObjGone
0000A570                            ; ===========================================================================
0000A570 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000A572 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000A574                            ; ===========================================================================
0000A574                            
0000A574                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000A574 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000A578 6A00                       		bpl.s	locret_95B6
0000A57A 4A28 0001                  		tst.b	1(a0)
0000A57E 6A00                       		bpl.s	Obj1F_Move
0000A580 0868 0001 0032             		bchg	#1,$32(a0)
0000A586 6600                       		bne.s	Obj1F_MakeFire
0000A588                            
0000A588                            Obj1F_Move:
0000A588 5428 0025                  		addq.b	#2,$25(a0)
0000A58C 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000A592 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000A598 6100 0000                  		bsr.w	Obj1F_SetAni
0000A59C 5600                       		addq.b	#3,d0
0000A59E 1140 001C                  		move.b	d0,$1C(a0)
0000A5A2 0868 0000 0022             		bchg	#0,$22(a0)
0000A5A8 6600                       		bne.s	locret_95B6
0000A5AA 4468 0010                  		neg.w	$10(a0)		; change direction
0000A5AE                            
0000A5AE                            locret_95B6:
0000A5AE 4E75                       		rts	
0000A5B0                            ; ===========================================================================
0000A5B0                            
0000A5B0                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000A5B0 317C 003B 0030             		move.w	#$3B,$30(a0)
0000A5B6 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000A5BC 6100 0000                  		bsr.w	SingleObjLoad
0000A5C0 6600                       		bne.s	Obj1F_MakeFire2
0000A5C2 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000A5C6 137C 0006 0024             		move.b	#6,$24(a1)
0000A5CC 3368 0008 0008             		move.w	8(a0),8(a1)
0000A5D2 0469 0010 0008             		subi.w	#$10,8(a1)
0000A5D8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A5DE 337C FF00 0010             		move.w	#-$100,$10(a1)
0000A5E4                            
0000A5E4                            Obj1F_MakeFire2:
0000A5E4 6100 0000                  		bsr.w	SingleObjLoad
0000A5E8 6600                       		bne.s	locret_9618
0000A5EA 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000A5EE 137C 0006 0024             		move.b	#6,$24(a1)
0000A5F4 3368 0008 0008             		move.w	8(a0),8(a1)
0000A5FA 0669 0010 0008             		addi.w	#$10,8(a1)
0000A600 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A606 337C 0100 0010             		move.w	#$100,$10(a1)
0000A60C                            
0000A60C                            locret_9618:
0000A60C 4E75                       		rts	
0000A60E                            ; ===========================================================================
0000A60E                            
0000A60E                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000A60E 5368 0030                  		subq.w	#1,$30(a0)
0000A612 6B00                       		bmi.s	loc_966E
0000A614 6100 0000                  		bsr.w	SpeedToPos
0000A618 0868 0000 0032             		bchg	#0,$32(a0)
0000A61E 6600                       		bne.s	loc_9654
0000A620 3628 0008                  		move.w	8(a0),d3
0000A624 0643 0010                  		addi.w	#$10,d3
0000A628 0828 0000 0022             		btst	#0,$22(a0)
0000A62E 6700                       		beq.s	loc_9640
0000A630 0443 0020                  		subi.w	#$20,d3
0000A634                            
0000A634                            loc_9640:
0000A634 4EB9 0000 0000             		jsr	ObjHitFloor2
0000A63A 0C41 FFF8                  		cmpi.w	#-8,d1
0000A63E 6D00                       		blt.s	loc_966E
0000A640 0C41 000C                  		cmpi.w	#$C,d1
0000A644 6C00                       		bge.s	loc_966E
0000A646 4E75                       		rts	
0000A648                            ; ===========================================================================
0000A648                            
0000A648                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000A648 4EB9 0000 0000             		jsr	ObjHitFloor
0000A64E D368 000C                  		add.w	d1,$C(a0)
0000A652 1143 0026                  		move.b	d3,$26(a0)
0000A656 6100 0000                  		bsr.w	Obj1F_SetAni
0000A65A 5600                       		addq.b	#3,d0
0000A65C 1140 001C                  		move.b	d0,$1C(a0)
0000A660 4E75                       		rts	
0000A662                            ; ===========================================================================
0000A662                            
0000A662                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000A662 5528 0025                  		subq.b	#2,$25(a0)
0000A666 317C 003B 0030             		move.w	#59,$30(a0)
0000A66C 317C 0000 0010             		move.w	#0,$10(a0)
0000A672 6100 0000                  		bsr.w	Obj1F_SetAni
0000A676 1140 001C                  		move.b	d0,$1C(a0)
0000A67A 4E75                       		rts	
0000A67C                            ; ---------------------------------------------------------------------------
0000A67C                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000A67C                            ; ---------------------------------------------------------------------------
0000A67C                            
0000A67C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A67C                            
0000A67C                            
0000A67C                            Obj1F_SetAni:				; XREF: loc_966E
0000A67C 7000                       		moveq	#0,d0
0000A67E 1628 0026                  		move.b	$26(a0),d3
0000A682 6B00                       		bmi.s	loc_96A4
0000A684 0C03 0006                  		cmpi.b	#6,d3
0000A688 6500                       		bcs.s	locret_96A2
0000A68A 7001                       		moveq	#1,d0
0000A68C 0828 0000 0022             		btst	#0,$22(a0)
0000A692 6600                       		bne.s	locret_96A2
0000A694 7002                       		moveq	#2,d0
0000A696                            
0000A696                            locret_96A2:
0000A696 4E75                       		rts	
0000A698                            ; ===========================================================================
0000A698                            
0000A698                            loc_96A4:				; XREF: Obj1F_SetAni
0000A698 0C03 00FA                  		cmpi.b	#-6,d3
0000A69C 6200                       		bhi.s	locret_96B6
0000A69E 7002                       		moveq	#2,d0
0000A6A0 0828 0000 0022             		btst	#0,$22(a0)
0000A6A6 6600                       		bne.s	locret_96B6
0000A6A8 7001                       		moveq	#1,d0
0000A6AA                            
0000A6AA                            locret_96B6:
0000A6AA 4E75                       		rts	
0000A6AC                            ; End of function Obj1F_SetAni
0000A6AC                            
0000A6AC                            ; ===========================================================================
0000A6AC                            
0000A6AC                            Obj1F_Delete:				; XREF: Obj1F_Index
0000A6AC 6100 0000                  		bsr.w	DeleteObject
0000A6B0 4E75                       		rts	
0000A6B2                            ; ===========================================================================
0000A6B2                            ; ---------------------------------------------------------------------------
0000A6B2                            ; Sub-object - missile that the	Crabmeat throws
0000A6B2                            ; ---------------------------------------------------------------------------
0000A6B2                            
0000A6B2                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000A6B2 5428 0024                  		addq.b	#2,$24(a0)
0000A6B6 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A6BE 317C 0400 0002             		move.w	#$400,2(a0)
0000A6C4 117C 0004 0001             		move.b	#4,1(a0)
0000A6CA 117C 0003 0018             		move.b	#3,$18(a0)
0000A6D0 117C 0087 0020             		move.b	#$87,$20(a0)
0000A6D6 117C 0008 0019             		move.b	#8,$19(a0)
0000A6DC 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A6E2 117C 0007 001C             		move.b	#7,$1C(a0)
0000A6E8                            
0000A6E8                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000A6E8 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A6EE 6100 0000                  		bsr.w	AnimateSprite
0000A6F2 6100 0000                  		bsr.w	ObjectFall
0000A6F6 6100 0000                  		bsr.w	DisplaySprite
0000A6FA 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A6FE 0640 00E0                  		addi.w	#$E0,d0
0000A702 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A706 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000A708 4E75                       		rts	
0000A70A                            ; ===========================================================================
0000A70A                            
0000A70A                            Obj1F_Delete2:
0000A70A 6000 0000                  		bra.w	DeleteObject
0000A70E                            ; ===========================================================================
0000A70E                            Ani_obj1F:
0000A70E                            	include "_anim\obj1F.asm"
0000A70E                            ; ---------------------------------------------------------------------------
0000A70E                            ; Animation script - Crabmeat enemy
0000A70E                            ; ---------------------------------------------------------------------------
0000A70E 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000A714 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000A71A 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000A71E 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000A722 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000A726 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000A72A 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000A730 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000A736 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000A73C 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000A740 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000A744                            		even
0000A744                            		even
0000A744                            
0000A744                            ; ---------------------------------------------------------------------------
0000A744                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A744                            ; ---------------------------------------------------------------------------
0000A744                            Map_obj1F:
0000A744                            	include "_maps\obj1F.asm"
0000A744                            Map_1514:
0000A744 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
0000A746 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
0000A748 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
0000A74A 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
0000A74C 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
0000A74E 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
0000A750 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
0000A752 03                         Map_1514_E: 	dc.b $3
0000A753 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A758 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A75D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A762 03                         Map_1514_1E: 	dc.b $3
0000A763 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A768 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A76D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A772 03                         Map_1514_2E: 	dc.b $3
0000A773 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A778 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A77D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A782 03                         Map_1514_3E: 	dc.b $3
0000A783 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A788 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A78D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A792 03                         Map_1514_4E: 	dc.b $3
0000A793 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A798 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A79D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A7A2 01                         Map_1514_5E: 	dc.b $1
0000A7A3 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
0000A7A8 01                         Map_1514_64: 	dc.b $1
0000A7A9 F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
0000A7AE                            	even
0000A7AE                            	even
0000A7AE                            
0000A7AE                            ; ===========================================================================
0000A7AE                            ; ---------------------------------------------------------------------------
0000A7AE                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A7AE                            ; ---------------------------------------------------------------------------
0000A7AE                            
0000A7AE                            Obj22:					; XREF: Obj_Index
0000A7AE 7000                       		moveq	#0,d0
0000A7B0 1028 0024                  		move.b	$24(a0),d0
0000A7B4 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A7B8 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A7BC                            ; ===========================================================================
0000A7BC 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A7BE 0000                       		dc.w Obj22_Action-Obj22_Index
0000A7C0 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A7C2                            ; ===========================================================================
0000A7C2                            
0000A7C2                            Obj22_Main:				; XREF: Obj22_Index
0000A7C2 5428 0024                  		addq.b	#2,$24(a0)
0000A7C6 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A7CE 317C 0444 0002             		move.w	#$444,2(a0)
0000A7D4 117C 0004 0001             		move.b	#4,1(a0)
0000A7DA 117C 0003 0018             		move.b	#3,$18(a0)
0000A7E0 117C 0008 0020             		move.b	#8,$20(a0)
0000A7E6 117C 0018 0019             		move.b	#$18,$19(a0)
0000A7EC                            
0000A7EC                            Obj22_Action:				; XREF: Obj22_Index
0000A7EC 7000                       		moveq	#0,d0
0000A7EE 1028 0025                  		move.b	$25(a0),d0
0000A7F2 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A7F6 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A7FA 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A800 6100 0000                  		bsr.w	AnimateSprite
0000A804 6000 0000                  		bra.w	MarkObjGone
0000A808                            ; ===========================================================================
0000A808 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A80A 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A80C                            ; ===========================================================================
0000A80C                            
0000A80C                            Obj22_Move:				; XREF: Obj22_Index2
0000A80C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A810 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A812 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A818 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A81A 5428 0025                  		addq.b	#2,$25(a0)
0000A81E 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A824 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A82A 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A830 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A836 6600                       		bne.s	locret_986C	; if not, branch
0000A838 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A83C                            
0000A83C                            locret_986C:
0000A83C 4E75                       		rts	
0000A83E                            ; ===========================================================================
0000A83E                            
0000A83E                            Obj22_Fire:				; XREF: Obj22_Move
0000A83E 6100 0000                  		bsr.w	SingleObjLoad
0000A842 6600                       		bne.s	locret_98D0
0000A844 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A848 3368 0008 0008             		move.w	8(a0),8(a1)
0000A84E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A854 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A85A 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A860 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A866 303C 0018                  		move.w	#$18,d0
0000A86A 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A870 6600                       		bne.s	loc_98AA	; if not, branch
0000A872 4440                       		neg.w	d0
0000A874 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A878                            
0000A878                            loc_98AA:
0000A878 D169 0008                  		add.w	d0,8(a1)
0000A87C 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A882 337C 000E 0032             		move.w	#$E,$32(a1)
0000A888 2348 003C                  		move.l	a0,$3C(a1)
0000A88C 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A892 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A898 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A89E                            
0000A89E                            locret_98D0:
0000A89E 4E75                       		rts	
0000A8A0                            ; ===========================================================================
0000A8A0                            
0000A8A0                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A8A0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A8A4 6B00                       		bmi.s	Obj22_ChgDir
0000A8A6 6100 0000                  		bsr.w	SpeedToPos
0000A8AA 4A28 0034                  		tst.b	$34(a0)
0000A8AE 6600                       		bne.s	locret_992A
0000A8B0 3038 D008                  		move.w	($FFFFD008).w,d0
0000A8B4 9068 0008                  		sub.w	8(a0),d0
0000A8B8 6A00                       		bpl.s	Obj22_SetNrSonic
0000A8BA 4440                       		neg.w	d0
0000A8BC                            
0000A8BC                            Obj22_SetNrSonic:
0000A8BC 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A8C0 6400                       		bcc.s	locret_992A	; if not, branch
0000A8C2 4A28 0001                  		tst.b	1(a0)
0000A8C6 6A00                       		bpl.s	locret_992A
0000A8C8 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A8CE 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A8D4 6000                       		bra.s	Obj22_Stop
0000A8D6                            ; ===========================================================================
0000A8D6                            
0000A8D6                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A8D6 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A8DC 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A8E2 317C 003B 0032             		move.w	#59,$32(a0)
0000A8E8                            
0000A8E8                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A8E8 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A8EC 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A8F2 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A8F8                            
0000A8F8                            locret_992A:
0000A8F8 4E75                       		rts	
0000A8FA                            ; ===========================================================================
0000A8FA                            
0000A8FA                            Obj22_Delete:				; XREF: Obj22_Index
0000A8FA 6100 0000                  		bsr.w	DeleteObject
0000A8FE 4E75                       		rts	
0000A900                            ; ===========================================================================
0000A900                            ; ---------------------------------------------------------------------------
0000A900                            ; Object 23 - missile that Buzz	Bomber throws
0000A900                            ; ---------------------------------------------------------------------------
0000A900                            
0000A900                            Obj23:					; XREF: Obj_Index
0000A900 7000                       		moveq	#0,d0
0000A902 1028 0024                  		move.b	$24(a0),d0
0000A906 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A90A 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A90E                            ; ===========================================================================
0000A90E 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A910 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A912 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A914 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A916 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A918                            ; ===========================================================================
0000A918                            
0000A918                            Obj23_Main:				; XREF: Obj23_Index
0000A918 5368 0032                  		subq.w	#1,$32(a0)
0000A91C 6A00                       		bpl.s	Obj23_ChkCancel
0000A91E 5428 0024                  		addq.b	#2,$24(a0)
0000A922 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A92A 317C 2444 0002             		move.w	#$2444,2(a0)
0000A930 117C 0004 0001             		move.b	#4,1(a0)
0000A936 117C 0003 0018             		move.b	#3,$18(a0)
0000A93C 117C 0008 0019             		move.b	#8,$19(a0)
0000A942 0228 0003 0022             		andi.b	#3,$22(a0)
0000A948 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A94C 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A94E 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A954 117C 0087 0020             		move.b	#$87,$20(a0)
0000A95A 117C 0001 001C             		move.b	#1,$1C(a0)
0000A960 6000                       		bra.s	Obj23_Animate2
0000A962                            ; ===========================================================================
0000A962                            
0000A962                            Obj23_Animate:				; XREF: Obj23_Index
0000A962 6100                       		bsr.s	Obj23_ChkCancel
0000A964 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A96A 6100 0000                  		bsr.w	AnimateSprite
0000A96E 6000 0000                  		bra.w	DisplaySprite
0000A972                            ; ---------------------------------------------------------------------------
0000A972                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A972                            ; destroyed, and if it has, then cancel	the missile
0000A972                            ; ---------------------------------------------------------------------------
0000A972                            
0000A972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A972                            
0000A972                            
0000A972                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A972 2268 003C                  		movea.l	$3C(a0),a1
0000A976 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A97A 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A97C 4E75                       		rts	
0000A97E                            ; End of function Obj23_ChkCancel
0000A97E                            
0000A97E                            ; ===========================================================================
0000A97E                            
0000A97E                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A97E 0828 0007 0022             		btst	#7,$22(a0)
0000A984 6600                       		bne.s	Obj23_Explode
0000A986 117C 0087 0020             		move.b	#$87,$20(a0)
0000A98C 117C 0001 001C             		move.b	#1,$1C(a0)
0000A992 6100 0000                  		bsr.w	SpeedToPos
0000A996 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A99C 6100 0000                  		bsr.w	AnimateSprite
0000A9A0 6100 0000                  		bsr.w	DisplaySprite
0000A9A4 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A9A8 0640 00E0                  		addi.w	#$E0,d0
0000A9AC B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A9B0 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A9B2 4E75                       		rts	
0000A9B4                            ; ===========================================================================
0000A9B4                            
0000A9B4                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A9B4 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A9B8 117C 0000 0024             		move.b	#0,$24(a0)
0000A9BE 6000 F2D0                  		bra.w	Obj24
0000A9C2                            ; ===========================================================================
0000A9C2                            
0000A9C2                            Obj23_Delete:				; XREF: Obj23_Index
0000A9C2 6100 0000                  		bsr.w	DeleteObject
0000A9C6 4E75                       		rts	
0000A9C8                            ; ===========================================================================
0000A9C8                            
0000A9C8                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A9C8 4A28 0001                  		tst.b	1(a0)
0000A9CC 6AF4                       		bpl.s	Obj23_Delete
0000A9CE 6100 0000                  		bsr.w	SpeedToPos
0000A9D2                            
0000A9D2                            Obj23_Animate2:				; XREF: Obj23_Main
0000A9D2 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A9D8 6100 0000                  		bsr.w	AnimateSprite
0000A9DC 6100 0000                  		bsr.w	DisplaySprite
0000A9E0 4E75                       		rts	
0000A9E2                            ; ===========================================================================
0000A9E2                            Ani_obj22:
0000A9E2                            	include "_anim\obj22.asm"
0000A9E2                            ; ---------------------------------------------------------------------------
0000A9E2                            ; Animation script - Buzz Bomber enemy
0000A9E2                            ; ---------------------------------------------------------------------------
0000A9E2 0000                       		dc.w byte_9A1E-Ani_obj22
0000A9E4 0000                       		dc.w byte_9A22-Ani_obj22
0000A9E6 0000                       		dc.w byte_9A26-Ani_obj22
0000A9E8 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A9EC 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A9F0 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A9F4                            		even
0000A9F4                            		even
0000A9F4                            
0000A9F4                            Ani_obj23:
0000A9F4                            	include "_anim\obj23.asm"
0000A9F4                            ; ---------------------------------------------------------------------------
0000A9F4                            ; Animation script - missile that Buzz Bomber throws
0000A9F4                            ; ---------------------------------------------------------------------------
0000A9F4 0000                       		dc.w byte_9A2E-Ani_obj23
0000A9F6 0000                       		dc.w byte_9A32-Ani_obj23
0000A9F8 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A9FC 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000AA00                            		even
0000AA00                            		even
0000AA00                            
0000AA00                            ; ---------------------------------------------------------------------------
0000AA00                            ; Sprite mappings - Buzz Bomber	enemy
0000AA00                            ; ---------------------------------------------------------------------------
0000AA00                            Map_obj22:
0000AA00                            	include "_maps\obj22.asm"
0000AA00                            Map_e97a:
0000AA00 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000AA02 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000AA04 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000AA06 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000AA08 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000AA0A 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000AA0C 06                         Map_e97a_C: 	dc.b $6
0000AA0D F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000AA12 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000AA17 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000AA1C 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000AA21 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000AA26 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000AA2B 06                         Map_e97a_2B: 	dc.b $6
0000AA2C F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000AA31 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000AA36 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000AA3B 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000AA40 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000AA45 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000AA4A 07                         Map_e97a_4A: 	dc.b $7
0000AA4B 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000AA50 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000AA55 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000AA5A 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000AA5F 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000AA64 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000AA69 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000AA6E 07                         Map_e97a_6E: 	dc.b $7
0000AA6F 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000AA74 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000AA79 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000AA7E 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000AA83 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000AA88 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000AA8D F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000AA92 06                         Map_e97a_92: 	dc.b $6
0000AA93 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000AA98 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000AA9D 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000AAA2 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000AAA7 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000AAAC F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000AAB1 04                         Map_e97a_B1: 	dc.b $4
0000AAB2 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000AAB7 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000AABC 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000AAC1 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000AAC6                            	even
0000AAC6                            	even
0000AAC6                            
0000AAC6                            ; ---------------------------------------------------------------------------
0000AAC6                            ; Sprite mappings - missile that Buzz Bomber throws
0000AAC6                            ; ---------------------------------------------------------------------------
0000AAC6                            Map_obj23:
0000AAC6                            	include "_maps\obj23.asm"
0000AAC6                            ; ---------------------------------------------------------------------------
0000AAC6                            ; Sprite mappings - missile that Buzz Bomber throws
0000AAC6                            ; ---------------------------------------------------------------------------
0000AAC6 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000AACA 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000AACE 01                         byte_9B0E:	dc.b 1
0000AACF F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000AAD4 01                         byte_9B14:	dc.b 1
0000AAD5 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000AADA 01                         byte_9B1A:	dc.b 1
0000AADB F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000AAE0 01                         byte_9B20:	dc.b 1
0000AAE1 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000AAE6                            		even
0000AAE6                            		even
0000AAE6                            
0000AAE6                            ; ===========================================================================
0000AAE6                            ; ---------------------------------------------------------------------------
0000AAE6                            ; Object 25 - rings
0000AAE6                            ; ---------------------------------------------------------------------------
0000AAE6                            
0000AAE6                            Obj25:					; XREF: Obj_Index
0000AAE6 7000                       		moveq	#0,d0
0000AAE8 1028 0024                  		move.b	$24(a0),d0
0000AAEC 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000AAF0 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000AAF4                            ; ===========================================================================
0000AAF4 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000AAF6 0000                       		dc.w Obj25_Animate-Obj25_Index
0000AAF8 0000                       		dc.w Obj25_Collect-Obj25_Index
0000AAFA 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000AAFC 0000                       		dc.w Obj25_Delete-Obj25_Index
0000AAFE                            ; ---------------------------------------------------------------------------
0000AAFE                            ; Distances between rings (format: horizontal, vertical)
0000AAFE                            ; ---------------------------------------------------------------------------
0000AAFE 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000AB00 1800                       		dc.b $18, 0		; horizontal normal
0000AB02 2000                       		dc.b $20, 0		; horizontal wide
0000AB04 0010                       		dc.b 0,	$10		; vertical tight
0000AB06 0018                       		dc.b 0,	$18		; vertical normal
0000AB08 0020                       		dc.b 0,	$20		; vertical wide
0000AB0A 1010                       		dc.b $10, $10		; diagonal
0000AB0C 1818                       		dc.b $18, $18
0000AB0E 2020                       		dc.b $20, $20
0000AB10 F010                       		dc.b $F0, $10
0000AB12 E818                       		dc.b $E8, $18
0000AB14 E020                       		dc.b $E0, $20
0000AB16 1008                       		dc.b $10, 8
0000AB18 1810                       		dc.b $18, $10
0000AB1A F008                       		dc.b $F0, 8
0000AB1C E810                       		dc.b $E8, $10
0000AB1E                            ; ===========================================================================
0000AB1E                            
0000AB1E                            Obj25_Main:				; XREF: Obj25_Index
0000AB1E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AB22 7000                       		moveq	#0,d0
0000AB24 1028 0023                  		move.b	$23(a0),d0
0000AB28 45F2 0002                  		lea	2(a2,d0.w),a2
0000AB2C 1812                       		move.b	(a2),d4
0000AB2E 1228 0028                  		move.b	$28(a0),d1
0000AB32 1001                       		move.b	d1,d0
0000AB34 0241 0007                  		andi.w	#7,d1
0000AB38 0C41 0007                  		cmpi.w	#7,d1
0000AB3C 6600                       		bne.s	loc_9B80
0000AB3E 7206                       		moveq	#6,d1
0000AB40                            
0000AB40                            loc_9B80:
0000AB40 4841                       		swap	d1
0000AB42 323C 0000                  		move.w	#0,d1
0000AB46 E808                       		lsr.b	#4,d0
0000AB48 D040                       		add.w	d0,d0
0000AB4A 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000AB4E 4885                       		ext.w	d5
0000AB50 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000AB54 4886                       		ext.w	d6
0000AB56 2248                       		movea.l	a0,a1
0000AB58 3428 0008                  		move.w	8(a0),d2
0000AB5C 3628 000C                  		move.w	$C(a0),d3
0000AB60 E20C                       		lsr.b	#1,d4
0000AB62 6500                       		bcs.s	loc_9C02
0000AB64 0892 0007                  		bclr	#7,(a2)
0000AB68 6000                       		bra.s	loc_9BBA
0000AB6A                            ; ===========================================================================
0000AB6A                            
0000AB6A                            Obj25_MakeRings:
0000AB6A 4841                       		swap	d1
0000AB6C E20C                       		lsr.b	#1,d4
0000AB6E 6500                       		bcs.s	loc_9C02
0000AB70 0892 0007                  		bclr	#7,(a2)
0000AB74 6100 0000                  		bsr.w	SingleObjLoad
0000AB78 6600                       		bne.s	loc_9C0E
0000AB7A                            
0000AB7A                            loc_9BBA:				; XREF: Obj25_Main
0000AB7A 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000AB7E 5429 0024                  		addq.b	#2,$24(a1)
0000AB82 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000AB86 3368 0008 0032             		move.w	8(a0),$32(a1)
0000AB8C 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000AB90 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000AB98 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000AB9E 137C 0004 0001             		move.b	#4,1(a1)
0000ABA4 137C 0002 0018             		move.b	#2,$18(a1)
0000ABAA 137C 0047 0020             		move.b	#$47,$20(a1)
0000ABB0 137C 0008 0019             		move.b	#8,$19(a1)
0000ABB6 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000ABBC 1341 0034                  		move.b	d1,$34(a1)
0000ABC0                            
0000ABC0                            loc_9C02:
0000ABC0 5241                       		addq.w	#1,d1
0000ABC2 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000ABC4 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000ABC6 4841                       		swap	d1
0000ABC8 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000ABCC                            
0000ABCC                            loc_9C0E:
0000ABCC 0812 0000                  		btst	#0,(a2)
0000ABD0 6600 0000                  		bne.w	DeleteObject
0000ABD4                            
0000ABD4                            Obj25_Animate:				; XREF: Obj25_Index
0000ABD4 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000ABDA 6100 0000                  		bsr.w	DisplaySprite
0000ABDE 3028 0032                  		move.w	$32(a0),d0
0000ABE2 0240 FF80                  		andi.w	#$FF80,d0
0000ABE6 3238 F700                  		move.w	($FFFFF700).w,d1
0000ABEA 0441 0080                  		subi.w	#$80,d1
0000ABEE 0241 FF80                  		andi.w	#$FF80,d1
0000ABF2 9041                       		sub.w	d1,d0
0000ABF4 0C40 0280                  		cmpi.w	#$280,d0
0000ABF8 6200                       		bhi.s	Obj25_Delete
0000ABFA 4E75                       		rts	
0000ABFC                            ; ===========================================================================
0000ABFC                            
0000ABFC                            Obj25_Collect:				; XREF: Obj25_Index
0000ABFC 5428 0024                  		addq.b	#2,$24(a0)
0000AC00 117C 0000 0020             		move.b	#0,$20(a0)
0000AC06 117C 0001 0018             		move.b	#1,$18(a0)
0000AC0C 6100 0000                  		bsr.w	CollectRing
0000AC10 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AC14 7000                       		moveq	#0,d0
0000AC16 1028 0023                  		move.b	$23(a0),d0
0000AC1A 1228 0034                  		move.b	$34(a0),d1
0000AC1E 03F2 0002                  		bset	d1,2(a2,d0.w)
0000AC22                            
0000AC22                            Obj25_Sparkle:				; XREF: Obj25_Index
0000AC22 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000AC28 6100 0000                  		bsr.w	AnimateSprite
0000AC2C 6000 0000                  		bra.w	DisplaySprite
0000AC30                            ; ===========================================================================
0000AC30                            
0000AC30                            Obj25_Delete:				; XREF: Obj25_Index
0000AC30 6000 0000                  		bra.w	DeleteObject
0000AC34                            
0000AC34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AC34                            
0000AC34                            
0000AC34                            CollectRing:				; XREF: Obj25_Collect
0000AC34 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000AC38 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000AC3E 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000AC42 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000AC48 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000AC4A 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000AC50 6700                       		beq.s	loc_9CA4
0000AC52 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000AC58 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000AC5A 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000AC60 6600                       		bne.s	Obj25_PlaySnd
0000AC62                            
0000AC62                            loc_9CA4:
0000AC62 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AC66 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AC6A 303C 0088                  		move.w	#$88,d0		; play extra life music
0000AC6E                            
0000AC6E                            Obj25_PlaySnd:
0000AC6E 4EF9 0000 1C7A             		jmp	(PlaySound_Special).l
0000AC74                            ; End of function CollectRing
0000AC74                            
0000AC74                            ; ===========================================================================
0000AC74                            ; ---------------------------------------------------------------------------
0000AC74                            ; Object 37 - rings flying out of Sonic	when he's hit
0000AC74                            ; ---------------------------------------------------------------------------
0000AC74                            
0000AC74                            Obj37:					; XREF: Obj_Index
0000AC74 7000                       		moveq	#0,d0
0000AC76 1028 0024                  		move.b	$24(a0),d0
0000AC7A 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000AC7E 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000AC82                            ; ===========================================================================
0000AC82 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000AC84 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000AC86 0000                       		dc.w Obj37_Collect-Obj37_Index
0000AC88 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000AC8A 0000                       		dc.w Obj37_Delete-Obj37_Index
0000AC8C                            ; ===========================================================================
0000AC8C                            
0000AC8C                            Obj37_CountRings:			; XREF: Obj37_Index
0000AC8C 2248                       		movea.l	a0,a1
0000AC8E 7A00                       		moveq	#0,d5
0000AC90 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000AC94 7020                       		moveq	#32,d0
0000AC96 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000AC98 6500                       		bcs.s	loc_9CDE	; if not, branch
0000AC9A 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000AC9C                            
0000AC9C                            loc_9CDE:
0000AC9C 5345                       		subq.w	#1,d5
0000AC9E 383C 0288                  		move.w	#$288,d4
0000ACA2 6000                       		bra.s	Obj37_MakeRings
0000ACA4                            ; ===========================================================================
0000ACA4                            
0000ACA4                            Obj37_Loop:
0000ACA4 6100 0000                  		bsr.w	SingleObjLoad
0000ACA8 6600 0000                  		bne.w	Obj37_ResetCounter
0000ACAC                            
0000ACAC                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000ACAC 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000ACB0 5429 0024                  		addq.b	#2,$24(a1)
0000ACB4 137C 0008 0016             		move.b	#8,$16(a1)
0000ACBA 137C 0008 0017             		move.b	#8,$17(a1)
0000ACC0 3368 0008 0008             		move.w	8(a0),8(a1)
0000ACC6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ACCC 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000ACD4 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000ACDA 137C 0004 0001             		move.b	#4,1(a1)
0000ACE0 137C 0003 0018             		move.b	#3,$18(a1)
0000ACE6 137C 0047 0020             		move.b	#$47,$20(a1)
0000ACEC 137C 0008 0019             		move.b	#8,$19(a1)
0000ACF2 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000ACF8 4A44                       		tst.w	d4
0000ACFA 6B00                       		bmi.s	loc_9D62
0000ACFC 3004                       		move.w	d4,d0
0000ACFE 6100 8716                  		bsr.w	CalcSine
0000AD02 3404                       		move.w	d4,d2
0000AD04 E04A                       		lsr.w	#8,d2
0000AD06 E560                       		asl.w	d2,d0
0000AD08 E561                       		asl.w	d2,d1
0000AD0A 3400                       		move.w	d0,d2
0000AD0C 3601                       		move.w	d1,d3
0000AD0E 0604 0010                  		addi.b	#$10,d4
0000AD12 6400                       		bcc.s	loc_9D62
0000AD14 0444 0080                  		subi.w	#$80,d4
0000AD18 6400                       		bcc.s	loc_9D62
0000AD1A 383C 0288                  		move.w	#$288,d4
0000AD1E                            
0000AD1E                            loc_9D62:
0000AD1E 3342 0010                  		move.w	d2,$10(a1)
0000AD22 3343 0012                  		move.w	d3,$12(a1)
0000AD26 4442                       		neg.w	d2
0000AD28 4444                       		neg.w	d4
0000AD2A 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000AD2E                            
0000AD2E                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000AD2E 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000AD34 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000AD3A 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000AD40 303C 00C6                  		move.w	#$C6,d0
0000AD44 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000AD4A                            
0000AD4A                            Obj37_Bounce:				; XREF: Obj37_Index
0000AD4A 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000AD50 6100 0000                  		bsr.w	SpeedToPos
0000AD54 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AD5A 6B00                       		bmi.s	Obj37_ChkDel
0000AD5C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000AD60 D007                       		add.b	d7,d0
0000AD62 0200 0003                  		andi.b	#3,d0
0000AD66 6600                       		bne.s	Obj37_ChkDel
0000AD68 4EB9 0000 0000             		jsr	ObjHitFloor
0000AD6E 4A41                       		tst.w	d1
0000AD70 6A00                       		bpl.s	Obj37_ChkDel
0000AD72 D368 000C                  		add.w	d1,$C(a0)
0000AD76 3028 0012                  		move.w	$12(a0),d0
0000AD7A E440                       		asr.w	#2,d0
0000AD7C 9168 0012                  		sub.w	d0,$12(a0)
0000AD80 4468 0012                  		neg.w	$12(a0)
0000AD84                            
0000AD84                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000AD84 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000AD88 6700                       		beq.s	Obj37_Delete
0000AD8A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000AD8E 0640 00E0                  		addi.w	#$E0,d0
0000AD92 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000AD96 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000AD98 6000 0000                  		bra.w	DisplaySprite
0000AD9C                            ; ===========================================================================
0000AD9C                            
0000AD9C                            Obj37_Collect:				; XREF: Obj37_Index
0000AD9C 5428 0024                  		addq.b	#2,$24(a0)
0000ADA0 117C 0000 0020             		move.b	#0,$20(a0)
0000ADA6 117C 0001 0018             		move.b	#1,$18(a0)
0000ADAC 6100 FE86                  		bsr.w	CollectRing
0000ADB0                            
0000ADB0                            Obj37_Sparkle:				; XREF: Obj37_Index
0000ADB0 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000ADB6 6100 0000                  		bsr.w	AnimateSprite
0000ADBA 6000 0000                  		bra.w	DisplaySprite
0000ADBE                            ; ===========================================================================
0000ADBE                            
0000ADBE                            Obj37_Delete:				; XREF: Obj37_Index
0000ADBE 6000 0000                  		bra.w	DeleteObject
0000ADC2                            ; ===========================================================================
0000ADC2                            ; ---------------------------------------------------------------------------
0000ADC2                            ; Object 4B - giant ring for entry to special stage
0000ADC2                            ; ---------------------------------------------------------------------------
0000ADC2                            
0000ADC2                            Obj4B:					; XREF: Obj_Index
0000ADC2 7000                       		moveq	#0,d0
0000ADC4 1028 0024                  		move.b	$24(a0),d0
0000ADC8 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000ADCC 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000ADD0                            ; ===========================================================================
0000ADD0 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000ADD2 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000ADD4 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000ADD6 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000ADD8                            ; ===========================================================================
0000ADD8                            
0000ADD8                            Obj4B_Main:				; XREF: Obj4B_Index
0000ADD8 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000ADE0 317C 2400 0002             		move.w	#$2400,2(a0)
0000ADE6 0028 0004 0001             		ori.b	#4,1(a0)
0000ADEC 117C 0040 0019             		move.b	#$40,$19(a0)
0000ADF2 4A28 0001                  		tst.b	1(a0)
0000ADF6 6A00                       		bpl.s	Obj4B_Animate
0000ADF8 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000ADFE 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000AE02                            ; ===========================================================================
0000AE02                            
0000AE02                            Obj4B_Okay:				; XREF: Obj4B_Main
0000AE02 5428 0024                  		addq.b	#2,$24(a0)
0000AE06 117C 0002 0018             		move.b	#2,$18(a0)
0000AE0C 117C 0052 0020             		move.b	#$52,$20(a0)
0000AE12 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000AE18                            
0000AE18                            Obj4B_Animate:				; XREF: Obj4B_Index
0000AE18 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000AE1E 3028 0008                  		move.w	8(a0),d0
0000AE22 0240 FF80                  		andi.w	#$FF80,d0
0000AE26 3238 F700                  		move.w	($FFFFF700).w,d1
0000AE2A 0441 0080                  		subi.w	#$80,d1
0000AE2E 0241 FF80                  		andi.w	#$FF80,d1
0000AE32 9041                       		sub.w	d1,d0
0000AE34 0C40 0280                  		cmpi.w	#$280,d0
0000AE38 6200 0000                  		bhi.w	DeleteObject
0000AE3C 6000 0000                  		bra.w	DisplaySprite
0000AE40                            ; ===========================================================================
0000AE40                            
0000AE40                            Obj4B_Collect:				; XREF: Obj4B_Index
0000AE40 5528 0024                  		subq.b	#2,$24(a0)
0000AE44 117C 0000 0020             		move.b	#0,$20(a0)
0000AE4A 6100 0000                  		bsr.w	SingleObjLoad
0000AE4E 6600 0000                  		bne.w	Obj4B_PlaySnd
0000AE52 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000AE56 3368 0008 0008             		move.w	8(a0),8(a1)
0000AE5C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AE62 2348 003C                  		move.l	a0,$3C(a1)
0000AE66 3038 D008                  		move.w	($FFFFD008).w,d0
0000AE6A B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000AE6E 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000AE70 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000AE76                            
0000AE76                            Obj4B_PlaySnd:
0000AE76 303C 00C3                  		move.w	#$C3,d0
0000AE7A 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000AE80 6096                       		bra.s	Obj4B_Animate
0000AE82                            ; ===========================================================================
0000AE82                            
0000AE82                            Obj4B_Delete:				; XREF: Obj4B_Index
0000AE82 6000 0000                  		bra.w	DeleteObject
0000AE86                            ; ===========================================================================
0000AE86                            ; ---------------------------------------------------------------------------
0000AE86                            ; Object 7C - flash effect when	you collect the	giant ring
0000AE86                            ; ---------------------------------------------------------------------------
0000AE86                            
0000AE86                            Obj7C:					; XREF: Obj_Index
0000AE86 7000                       		moveq	#0,d0
0000AE88 1028 0024                  		move.b	$24(a0),d0
0000AE8C 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000AE90 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000AE94                            ; ===========================================================================
0000AE94 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000AE96 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000AE98 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000AE9A                            ; ===========================================================================
0000AE9A                            
0000AE9A                            Obj7C_Main:				; XREF: Obj7C_Index
0000AE9A 5428 0024                  		addq.b	#2,$24(a0)
0000AE9E 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000AEA6 317C 2462 0002             		move.w	#$2462,2(a0)
0000AEAC 0028 0004 0001             		ori.b	#4,1(a0)
0000AEB2 117C 0000 0018             		move.b	#0,$18(a0)
0000AEB8 117C 0020 0019             		move.b	#$20,$19(a0)
0000AEBE 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000AEC4                            
0000AEC4                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000AEC4 6100                       		bsr.s	Obj7C_Collect
0000AEC6 3028 0008                  		move.w	8(a0),d0
0000AECA 0240 FF80                  		andi.w	#$FF80,d0
0000AECE 3238 F700                  		move.w	($FFFFF700).w,d1
0000AED2 0441 0080                  		subi.w	#$80,d1
0000AED6 0241 FF80                  		andi.w	#$FF80,d1
0000AEDA 9041                       		sub.w	d1,d0
0000AEDC 0C40 0280                  		cmpi.w	#$280,d0
0000AEE0 6200 0000                  		bhi.w	DeleteObject
0000AEE4 6000 0000                  		bra.w	DisplaySprite
0000AEE8                            
0000AEE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AEE8                            
0000AEE8                            
0000AEE8                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000AEE8 5328 001E                  		subq.b	#1,$1E(a0)
0000AEEC 6A00                       		bpl.s	locret_9F76
0000AEEE 117C 0001 001E             		move.b	#1,$1E(a0)
0000AEF4 5228 001A                  		addq.b	#1,$1A(a0)
0000AEF8 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000AEFE 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000AF00 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000AF06 6600                       		bne.s	locret_9F76	; if not, branch
0000AF08 2268 003C                  		movea.l	$3C(a0),a1
0000AF0C 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000AF12 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000AF18 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000AF1E 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000AF22 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000AF26                            
0000AF26                            locret_9F76:
0000AF26 4E75                       		rts	
0000AF28                            ; ===========================================================================
0000AF28                            
0000AF28                            Obj7C_End:				; XREF: Obj7C_Collect
0000AF28 5428 0024                  		addq.b	#2,$24(a0)
0000AF2C 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000AF32 588F                       		addq.l	#4,sp
0000AF34 4E75                       		rts	
0000AF36                            ; End of function Obj7C_Collect
0000AF36                            
0000AF36                            ; ===========================================================================
0000AF36                            
0000AF36                            Obj7C_Delete:				; XREF: Obj7C_Index
0000AF36 6000 0000                  		bra.w	DeleteObject
0000AF3A                            ; ===========================================================================
0000AF3A                            Ani_obj25:
0000AF3A                            	include "_anim\obj25.asm"
0000AF3A                            ; ---------------------------------------------------------------------------
0000AF3A                            ; Animation script - ring
0000AF3A                            ; ---------------------------------------------------------------------------
0000AF3A 0000                       		dc.w byte_9F8C-Ani_obj25
0000AF3C 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000AF42                            		even
0000AF42                            		even
0000AF42                            
0000AF42                            ; ---------------------------------------------------------------------------
0000AF42                            ; Sprite mappings - rings
0000AF42                            ; ---------------------------------------------------------------------------
0000AF42                            Map_obj25:
0000AF42                            	include "_maps\obj25.asm"
0000AF42                            ; ---------------------------------------------------------------------------
0000AF42                            ; Sprite mappings - rings
0000AF42                            ; ---------------------------------------------------------------------------
0000AF42 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000AF46 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000AF4A 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000AF4E 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000AF52 01                         byte_9FA2:	dc.b 1
0000AF53 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000AF58 01                         byte_9FA8:	dc.b 1
0000AF59 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000AF5E 01                         byte_9FAE:	dc.b 1
0000AF5F F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000AF64 01                         byte_9FB4:	dc.b 1
0000AF65 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000AF6A 01                         byte_9FBA:	dc.b 1
0000AF6B F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000AF70 01                         byte_9FC0:	dc.b 1
0000AF71 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000AF76 01                         byte_9FC6:	dc.b 1
0000AF77 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000AF7C 01                         byte_9FCC:	dc.b 1
0000AF7D F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000AF82                            		even
0000AF82                            		even
0000AF82                            
0000AF82                            ; ---------------------------------------------------------------------------
0000AF82                            ; Sprite mappings - giant ring
0000AF82                            ; ---------------------------------------------------------------------------
0000AF82                            Map_obj4B:
0000AF82                            	include "_maps\obj4B.asm"
0000AF82                            ; ---------------------------------------------------------------------------
0000AF82                            ; Sprite mappings - giant ring
0000AF82                            ; ---------------------------------------------------------------------------
0000AF82 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000AF86 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000AF8A 0A                         byte_9FDA:	dc.b $A
0000AF8B E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000AF90 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000AF95 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000AF9A E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000AF9F F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000AFA4 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000AFA9 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000AFAE 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000AFB3 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000AFB8 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000AFBD 08                         byte_A00D:	dc.b 8
0000AFBE E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000AFC3 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000AFC8 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000AFCD F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000AFD2 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000AFD7 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000AFDC 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000AFE1 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000AFE6 04                         byte_A036:	dc.b 4
0000AFE7 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000AFEC E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000AFF1 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000AFF6 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000AFFB 08                         byte_A04B:	dc.b 8
0000AFFC E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000B001 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000B006 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000B00B F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000B010 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000B015 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000B01A 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000B01F 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000B024                            		even
0000B024                            		even
0000B024                            
0000B024                            ; ---------------------------------------------------------------------------
0000B024                            ; Sprite mappings - flash effect when you collect the giant ring
0000B024                            ; ---------------------------------------------------------------------------
0000B024                            Map_obj7C:
0000B024                            	include "_maps\obj7C.asm"
0000B024                            ; ---------------------------------------------------------------------------
0000B024                            ; Sprite mappings - flash effect when you collect the giant ring
0000B024                            ; ---------------------------------------------------------------------------
0000B024 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000B028 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000B02C 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000B030 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000B034 02                         byte_A084:	dc.b 2
0000B035 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000B03A 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000B03F 04                         byte_A08F:	dc.b 4
0000B040 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000B045 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000B04A 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000B04F 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000B054 04                         byte_A0A4:	dc.b 4
0000B055 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000B05A E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000B05F 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000B064 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000B069 04                         byte_A0B9:	dc.b 4
0000B06A E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000B06F E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000B074 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000B079 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000B07E 04                         byte_A0CE:	dc.b 4
0000B07F E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000B084 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000B089 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000B08E 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000B093 04                         byte_A0E3:	dc.b 4
0000B094 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000B099 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000B09E 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000B0A3 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000B0A8 02                         byte_A0F8:	dc.b 2
0000B0A9 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000B0AE 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000B0B3 04                         byte_A103:	dc.b 4
0000B0B4 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000B0B9 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000B0BE 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000B0C3 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000B0C8                            		even
0000B0C8                            		even
0000B0C8                            
0000B0C8                            ; ===========================================================================
0000B0C8                            ; ---------------------------------------------------------------------------
0000B0C8                            ; Object 26 - monitors
0000B0C8                            ; ---------------------------------------------------------------------------
0000B0C8                            
0000B0C8                            Obj26:					; XREF: Obj_Index
0000B0C8 7000                       		moveq	#0,d0
0000B0CA 1028 0024                  		move.b	$24(a0),d0
0000B0CE 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000B0D2 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000B0D6                            ; ===========================================================================
0000B0D6 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000B0D8 0000                       		dc.w Obj26_Solid-Obj26_Index
0000B0DA 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000B0DC 0000                       		dc.w Obj26_Animate-Obj26_Index
0000B0DE 0000                       		dc.w Obj26_Display-Obj26_Index
0000B0E0                            ; ===========================================================================
0000B0E0                            
0000B0E0                            Obj26_Main:				; XREF: Obj26_Index
0000B0E0 5428 0024                  		addq.b	#2,$24(a0)
0000B0E4 117C 000E 0016             		move.b	#$E,$16(a0)
0000B0EA 117C 000E 0017             		move.b	#$E,$17(a0)
0000B0F0 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000B0F8 317C 0680 0002             		move.w	#$680,2(a0)
0000B0FE 117C 0004 0001             		move.b	#4,1(a0)
0000B104 117C 0003 0018             		move.b	#3,$18(a0)
0000B10A 117C 000F 0019             		move.b	#$F,$19(a0)
0000B110 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B114 7000                       		moveq	#0,d0
0000B116 1028 0023                  		move.b	$23(a0),d0
0000B11A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000B120 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000B126 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000B128 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000B12E 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000B134 4E75                       		rts	
0000B136                            ; ===========================================================================
0000B136                            
0000B136                            Obj26_NotBroken:			; XREF: Obj26_Main
0000B136 117C 0046 0020             		move.b	#$46,$20(a0)
0000B13C 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000B142                            
0000B142                            Obj26_Solid:				; XREF: Obj26_Index
0000B142 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000B146 6700                       		beq.s	loc_A1EC	; if not, branch
0000B148 5500                       		subq.b	#2,d0
0000B14A 6600                       		bne.s	Obj26_Fall
0000B14C 7200                       		moveq	#0,d1
0000B14E 1228 0019                  		move.b	$19(a0),d1
0000B152 0641 000B                  		addi.w	#$B,d1
0000B156 6100 D386                  		bsr.w	ExitPlatform
0000B15A 0829 0003 0022             		btst	#3,$22(a1)
0000B160 6600 0000                  		bne.w	loc_A1BC
0000B164 4228 0025                  		clr.b	$25(a0)
0000B168 6000 0000                  		bra.w	Obj26_Animate
0000B16C                            ; ===========================================================================
0000B16C                            
0000B16C                            loc_A1BC:				; XREF: Obj26_Solid
0000B16C 363C 0010                  		move.w	#$10,d3
0000B170 3428 0008                  		move.w	8(a0),d2
0000B174 6100 D8C6                  		bsr.w	MvSonicOnPtfm
0000B178 6000 0000                  		bra.w	Obj26_Animate
0000B17C                            ; ===========================================================================
0000B17C                            
0000B17C                            Obj26_Fall:				; XREF: Obj26_Solid
0000B17C 6100 0000                  		bsr.w	ObjectFall
0000B180 4EB9 0000 0000             		jsr	ObjHitFloor
0000B186 4A41                       		tst.w	d1
0000B188 6A00 0000                  		bpl.w	Obj26_Animate
0000B18C D368 000C                  		add.w	d1,$C(a0)
0000B190 4268 0012                  		clr.w	$12(a0)
0000B194 4228 0025                  		clr.b	$25(a0)
0000B198 6000 0000                  		bra.w	Obj26_Animate
0000B19C                            ; ===========================================================================
0000B19C                            
0000B19C                            loc_A1EC:				; XREF: Obj26_Solid
0000B19C 323C 001A                  		move.w	#$1A,d1
0000B1A0 343C 000F                  		move.w	#$F,d2
0000B1A4 6100 0000                  		bsr.w	Obj26_SolidSides
0000B1A8 6700 0000                  		beq.w	loc_A25C
0000B1AC 4A69 0012                  		tst.w	$12(a1)
0000B1B0 6B00                       		bmi.s	loc_A20A
0000B1B2 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000B1B8 6700                       		beq.s	loc_A25C	; if yes, branch
0000B1BA                            
0000B1BA                            loc_A20A:
0000B1BA 4A41                       		tst.w	d1
0000B1BC 6A00                       		bpl.s	loc_A220
0000B1BE 9769 000C                  		sub.w	d3,$C(a1)
0000B1C2 6100 D208                  		bsr.w	loc_74AE
0000B1C6 117C 0002 0025             		move.b	#2,$25(a0)
0000B1CC 6000 0000                  		bra.w	Obj26_Animate
0000B1D0                            ; ===========================================================================
0000B1D0                            
0000B1D0                            loc_A220:
0000B1D0 4A40                       		tst.w	d0
0000B1D2 6700 0000                  		beq.w	loc_A246
0000B1D6 6B00                       		bmi.s	loc_A230
0000B1D8 4A69 0010                  		tst.w	$10(a1)
0000B1DC 6B00                       		bmi.s	loc_A246
0000B1DE 6000                       		bra.s	loc_A236
0000B1E0                            ; ===========================================================================
0000B1E0                            
0000B1E0                            loc_A230:
0000B1E0 4A69 0010                  		tst.w	$10(a1)
0000B1E4 6A00                       		bpl.s	loc_A246
0000B1E6                            
0000B1E6                            loc_A236:
0000B1E6 9169 0008                  		sub.w	d0,8(a1)
0000B1EA 337C 0000 0014             		move.w	#0,$14(a1)
0000B1F0 337C 0000 0010             		move.w	#0,$10(a1)
0000B1F6                            
0000B1F6                            loc_A246:
0000B1F6 0829 0001 0022             		btst	#1,$22(a1)
0000B1FC 6600                       		bne.s	loc_A26A
0000B1FE 08E9 0005 0022             		bset	#5,$22(a1)
0000B204 08E8 0005 0022             		bset	#5,$22(a0)
0000B20A 6000                       		bra.s	Obj26_Animate
0000B20C                            ; ===========================================================================
0000B20C                            
0000B20C                            loc_A25C:
0000B20C 0828 0005 0022             		btst	#5,$22(a0)
0000B212 6700                       		beq.s	Obj26_Animate
0000B214 337C 0001 001C             		move.w	#1,$1C(a1)
0000B21A                            
0000B21A                            loc_A26A:
0000B21A 08A8 0005 0022             		bclr	#5,$22(a0)
0000B220 08A9 0005 0022             		bclr	#5,$22(a1)
0000B226                            
0000B226                            Obj26_Animate:				; XREF: Obj26_Index
0000B226 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000B22C 6100 0000                  		bsr.w	AnimateSprite
0000B230                            
0000B230                            Obj26_Display:				; XREF: Obj26_Index
0000B230 6100 0000                  		bsr.w	DisplaySprite
0000B234 3028 0008                  		move.w	8(a0),d0
0000B238 0240 FF80                  		andi.w	#$FF80,d0
0000B23C 3238 F700                  		move.w	($FFFFF700).w,d1
0000B240 0441 0080                  		subi.w	#$80,d1
0000B244 0241 FF80                  		andi.w	#$FF80,d1
0000B248 9041                       		sub.w	d1,d0
0000B24A 0C40 0280                  		cmpi.w	#$280,d0
0000B24E 6200 0000                  		bhi.w	DeleteObject
0000B252 4E75                       		rts	
0000B254                            ; ===========================================================================
0000B254                            
0000B254                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000B254 5428 0024                  		addq.b	#2,$24(a0)
0000B258 117C 0000 0020             		move.b	#0,$20(a0)
0000B25E 6100 0000                  		bsr.w	SingleObjLoad
0000B262 6600                       		bne.s	Obj26_Explode
0000B264 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000B268 3368 0008 0008             		move.w	8(a0),8(a1)
0000B26E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B274 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000B27A 7400                       		moveq	#0,d2	; GMZ
0000B27C 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000B27E                            
0000B27E                            Obj26_Explode:
0000B27E 6100 0000                  		bsr.w	SingleObjLoad
0000B282 6600                       		bne.s	Obj26_SetBroken
0000B284 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000B288 5429 0024                  		addq.b	#2,$24(a1)
0000B28C 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000B290 3368 0008 0008             		move.w	8(a0),8(a1)
0000B296 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B29C                            
0000B29C                            Obj26_NextExplosion:
0000B29C 5802                       		addq.b	#4,d2
0000B29E 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000B2A2                            
0000B2A2                            Obj26_SetBroken:
0000B2A2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B2A6 7000                       		moveq	#0,d0
0000B2A8 1028 0023                  		move.b	$23(a0),d0
0000B2AC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000B2B2 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000B2B8 6000 0000                  		bra.w	DisplaySprite
0000B2BC                            ; ===========================================================================
0000B2BC                            ; ---------------------------------------------------------------------------
0000B2BC                            ; Object 2E - contents of monitors
0000B2BC                            ; ---------------------------------------------------------------------------
0000B2BC                            
0000B2BC                            Obj2E:					; XREF: Obj_Index
0000B2BC 7000                       		moveq	#0,d0
0000B2BE 1028 0024                  		move.b	$24(a0),d0
0000B2C2 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000B2C6 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000B2CA 6000 0000                  		bra.w	DisplaySprite
0000B2CE                            ; ===========================================================================
0000B2CE 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000B2D0 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000B2D2 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000B2D4                            ; ===========================================================================
0000B2D4                            
0000B2D4                            Obj2E_Main:				; XREF: Obj2E_Index
0000B2D4 5428 0024                  		addq.b	#2,$24(a0)
0000B2D8 317C 0680 0002             		move.w	#$680,2(a0)
0000B2DE 117C 0024 0001             		move.b	#$24,1(a0)
0000B2E4 117C 0003 0018             		move.b	#3,$18(a0)
0000B2EA 117C 0008 0019             		move.b	#8,$19(a0)
0000B2F0 317C FD00 0012             		move.w	#-$300,$12(a0)
0000B2F6 7000                       		moveq	#0,d0
0000B2F8 1028 001C                  		move.b	$1C(a0),d0
0000B2FC 5400                       		addq.b	#2,d0
0000B2FE 1140 001A                  		move.b	d0,$1A(a0)
0000B302 227C 0000 0000             		movea.l	#Map_obj26,a1
0000B308 D000                       		add.b	d0,d0
0000B30A D2F1 0000                  		adda.w	(a1,d0.w),a1
0000B30E 5249                       		addq.w	#1,a1
0000B310 2149 0004                  		move.l	a1,4(a0)
0000B314                            
0000B314                            Obj2E_Move:				; XREF: Obj2E_Index
0000B314 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000B318 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000B31C 6100 0000                  		bsr.w	SpeedToPos
0000B320 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000B326 4E75                       		rts	
0000B328                            ; ===========================================================================
0000B328                            
0000B328                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000B328 5428 0024                  		addq.b	#2,$24(a0)
0000B32C 317C 001D 001E             		move.w	#29,$1E(a0)
0000B332 1028 001C                  		move.b	$1C(a0),d0
0000B336 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000B33A 6600                       		bne.s	Obj2E_ChkSonic
0000B33C 4E75                       		rts			; Eggman monitor does nothing
0000B33E                            ; ===========================================================================
0000B33E                            
0000B33E                            Obj2E_ChkSonic:
0000B33E 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000B342 6600                       		bne.s	Obj2E_ChkShoes
0000B344                            
0000B344                            ExtraLife:
0000B344 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000B348 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000B34C 303C 0088                  		move.w	#$88,d0
0000B350 4EF9 0000 1C74             		jmp	(PlaySound).l	; play extra life music
0000B356                            ; ===========================================================================
0000B356                            
0000B356                            Obj2E_ChkShoes:
0000B356 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000B35A 6600                       		bne.s	Obj2E_ChkShield
0000B35C 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000B362 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000B368 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000B36E 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000B374 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000B37A 303C 00E2                  		move.w	#$E2,d0
0000B37E 4EF9 0000 1C74             		jmp	(PlaySound).l	; Speed	up the music
0000B384                            ; ===========================================================================
0000B384                            
0000B384                            Obj2E_ChkShield:
0000B384 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000B388 6600                       		bne.s	Obj2E_ChkInvinc
0000B38A 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000B390 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000B396 303C 00AF                  		move.w	#$AF,d0
0000B39A 4EF9 0000 1C74             		jmp	(PlaySound).l	; play shield sound
0000B3A0                            ; ===========================================================================
0000B3A0                            
0000B3A0                            Obj2E_ChkInvinc:
0000B3A0 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000B3A4 6600                       		bne.s	Obj2E_ChkRings
0000B3A6 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000B3AC 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000B3B2 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000B3B8 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000B3BE 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000B3C4 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000B3CA 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000B3D0 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000B3D6 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000B3DC 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000B3E2 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000B3E6 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000B3E8 303C 0087                  		move.w	#$87,d0
0000B3EC 4EF9 0000 1C74             		jmp	(PlaySound).l	; play invincibility music
0000B3F2                            ; ===========================================================================
0000B3F2                            
0000B3F2                            Obj2E_NoMusic:
0000B3F2 4E75                       		rts	
0000B3F4                            ; ===========================================================================
0000B3F4                            
0000B3F4                            Obj2E_ChkRings:
0000B3F4 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000B3F8 6600                       		bne.s	Obj2E_ChkS
0000B3FA 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000B400 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000B406 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000B40C 6500                       		bcs.s	Obj2E_RingSound
0000B40E 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000B414 6700 FF2E                  		beq.w	ExtraLife
0000B418 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000B41E 6500                       		bcs.s	Obj2E_RingSound
0000B420 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000B426 6700 FF1C                  		beq.w	ExtraLife
0000B42A                            
0000B42A                            Obj2E_RingSound:
0000B42A 303C 00B5                  		move.w	#$B5,d0
0000B42E 4EF9 0000 1C74             		jmp	(PlaySound).l	; play ring sound
0000B434                            ; ===========================================================================
0000B434                            
0000B434                            Obj2E_ChkS:
0000B434 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000B438 6600                       		bne.s	Obj2E_ChkEnd
0000B43A                            		; nop	
0000B43A 7201                       		moveq	#1,d1
0000B43C B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000B440                            
0000B440                            Obj2E_ChkEnd:
0000B440 4E75                       		rts			; 'S' and goggles monitors do nothing
0000B442                            ; ===========================================================================
0000B442                            
0000B442                            Obj2E_Delete:				; XREF: Obj2E_Index
0000B442 5368 001E                  		subq.w	#1,$1E(a0)
0000B446 6B00 0000                  		bmi.w	DeleteObject
0000B44A 4E75                       		rts	
0000B44C                            ; ---------------------------------------------------------------------------
0000B44C                            ; Subroutine to	make the sides of a monitor solid
0000B44C                            ; ---------------------------------------------------------------------------
0000B44C                            
0000B44C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B44C                            
0000B44C                            
0000B44C                            Obj26_SolidSides:			; XREF: loc_A1EC
0000B44C 43F8 D000                  		lea	($FFFFD000).w,a1
0000B450 3029 0008                  		move.w	8(a1),d0
0000B454 9068 0008                  		sub.w	8(a0),d0
0000B458 D041                       		add.w	d1,d0
0000B45A 6B00                       		bmi.s	loc_A4E6
0000B45C 3601                       		move.w	d1,d3
0000B45E D643                       		add.w	d3,d3
0000B460 B043                       		cmp.w	d3,d0
0000B462 6200                       		bhi.s	loc_A4E6
0000B464 1629 0016                  		move.b	$16(a1),d3
0000B468 4883                       		ext.w	d3
0000B46A D443                       		add.w	d3,d2
0000B46C 3629 000C                  		move.w	$C(a1),d3
0000B470 9668 000C                  		sub.w	$C(a0),d3
0000B474 D642                       		add.w	d2,d3
0000B476 6B00                       		bmi.s	loc_A4E6
0000B478 D442                       		add.w	d2,d2
0000B47A B642                       		cmp.w	d2,d3
0000B47C 6400                       		bcc.s	loc_A4E6
0000B47E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000B482 6B00                       		bmi.s	loc_A4E6
0000B484 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000B48A 6400                       		bcc.s	loc_A4E6
0000B48C 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B490 6600                       		bne.s	loc_A4E6
0000B492 B240                       		cmp.w	d0,d1
0000B494 6400                       		bcc.s	loc_A4DC
0000B496 D241                       		add.w	d1,d1
0000B498 9041                       		sub.w	d1,d0
0000B49A                            
0000B49A                            loc_A4DC:
0000B49A 0C43 0010                  		cmpi.w	#$10,d3
0000B49E 6500                       		bcs.s	loc_A4EA
0000B4A0                            
0000B4A0                            loc_A4E2:
0000B4A0 7201                       		moveq	#1,d1
0000B4A2 4E75                       		rts	
0000B4A4                            ; ===========================================================================
0000B4A4                            
0000B4A4                            loc_A4E6:
0000B4A4 7200                       		moveq	#0,d1
0000B4A6 4E75                       		rts	
0000B4A8                            ; ===========================================================================
0000B4A8                            
0000B4A8                            loc_A4EA:
0000B4A8 7200                       		moveq	#0,d1
0000B4AA 1228 0019                  		move.b	$19(a0),d1
0000B4AE 5841                       		addq.w	#4,d1
0000B4B0 3401                       		move.w	d1,d2
0000B4B2 D442                       		add.w	d2,d2
0000B4B4 D269 0008                  		add.w	8(a1),d1
0000B4B8 9268 0008                  		sub.w	8(a0),d1
0000B4BC 6BE2                       		bmi.s	loc_A4E2
0000B4BE B242                       		cmp.w	d2,d1
0000B4C0 64DE                       		bcc.s	loc_A4E2
0000B4C2 72FF                       		moveq	#-1,d1
0000B4C4 4E75                       		rts	
0000B4C6                            ; End of function Obj26_SolidSides
0000B4C6                            
0000B4C6                            ; ===========================================================================
0000B4C6                            Ani_obj26:
0000B4C6                            	include "_anim\obj26.asm"
0000B4C6                            ; ---------------------------------------------------------------------------
0000B4C6                            ; Animation script - monitors
0000B4C6                            ; ---------------------------------------------------------------------------
0000B4C6 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000B4CC 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000B4D2 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000B4D8 0000                       		dc.w byte_A582-Ani_obj26
0000B4DA 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000B4E0 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000B4EC 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000B4F8 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000B504 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000B510 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000B51C 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000B528 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000B534 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000B540 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000B548                            		even
0000B548                            		even
0000B548                            
0000B548                            ; ---------------------------------------------------------------------------
0000B548                            ; Sprite mappings - monitors
0000B548                            ; ---------------------------------------------------------------------------
0000B548                            Map_obj26:
0000B548                            	include "_maps\obj26.asm"
0000B548                            ; ================================================================================
0000B548                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000B548                            ; ================================================================================
0000B548                            
0000B548                            DATAY1U343IF3L:
0000B548 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000B54C 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000B550 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000B554 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000B558 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000B55C 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000B560 05                         DATAY1U343IF3L_0: dc.b $5
0000B561 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B566 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B56B E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B570 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B575 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B57A 06                         DATAY1U343IF3L_1: dc.b $6
0000B57B F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000B580 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B585 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B58A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B58F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B594 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B599 05                         DATAY1U343IF3L_2: dc.b $5
0000B59A E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B59F 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B5A4 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B5A9 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B5AE 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B5B3 05                         DATAY1U343IF3L_3: dc.b $5
0000B5B4 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B5B9 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B5BE E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B5C3 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B5C8 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B5CD 06                         DATAY1U343IF3L_4: dc.b $6
0000B5CE F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000B5D3 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B5D8 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B5DD E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B5E2 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B5E7 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B5EC 06                         DATAY1U343IF3L_5: dc.b $6
0000B5ED F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000B5F2 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B5F7 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B5FC E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B601 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B606 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B60B 06                         DATAY1U343IF3L_6: dc.b $6
0000B60C F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000B611 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B616 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B61B E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B620 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B625 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B62A 06                         DATAY1U343IF3L_7: dc.b $6
0000B62B F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000B630 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B635 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B63A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B63F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B644 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B649 06                         DATAY1U343IF3L_8: dc.b $6
0000B64A F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000B64F E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B654 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B659 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B65E 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B663 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B668 06                         DATAY1U343IF3L_9: dc.b $6
0000B669 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000B66E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B673 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B678 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B67D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B682 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B687 05                         DATAY1U343IF3L_A: dc.b $5
0000B688 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B68D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B692 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B697 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B69C 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B6A1 01                         DATAY1U343IF3L_B: dc.b $1
0000B6A2 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000B6A8 00                         	even
0000B6A8 00                         	even
0000B6A8                            
0000B6A8                            ; ===========================================================================
0000B6A8                            ; ---------------------------------------------------------------------------
0000B6A8                            ; Object 0E - Sonic on the title screen
0000B6A8                            ; ---------------------------------------------------------------------------
0000B6A8                            
0000B6A8                            Obj0E:					; XREF: Obj_Index
0000B6A8 7000                       		moveq	#0,d0
0000B6AA 1028 0024                  		move.b	$24(a0),d0
0000B6AE 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000B6B2 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000B6B6                            ; ===========================================================================
0000B6B6 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000B6B8 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000B6BA 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000B6BC 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000B6BE                            ; ===========================================================================
0000B6BE                            
0000B6BE                            Obj0E_Main:				; XREF: Obj0E_Index
0000B6BE 5428 0024                  		addq.b	#2,$24(a0)
0000B6C2 317C 00F0 0008             		move.w	#$F0,8(a0)
0000B6C8 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000B6CE 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000B6D6 317C 2300 0002             		move.w	#$2300,2(a0)
0000B6DC 117C 0001 0018             		move.b	#1,$18(a0)
0000B6E2 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000B6E8 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B6EE 6100 0000                  		bsr.w	AnimateSprite
0000B6F2                            
0000B6F2                            Obj0E_Delay:				; XREF: Obj0E_Index
0000B6F2 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000B6F6 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000B6F8 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000B6FC 6000 0000                  		bra.w	DisplaySprite
0000B700                            ; ===========================================================================
0000B700                            
0000B700                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000B700 4E75                       		rts	
0000B702                            ; ===========================================================================
0000B702                            
0000B702                            Obj0E_Move:				; XREF: Obj0E_Index
0000B702 5168 000A                  		subq.w	#8,$A(a0)
0000B706 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B70C 6600                       		bne.s	Obj0E_Display
0000B70E 5428 0024                  		addq.b	#2,$24(a0)
0000B712                            
0000B712                            Obj0E_Display:
0000B712 6000 0000                  		bra.w	DisplaySprite
0000B716                            ; ===========================================================================
0000B716 4E75                       		rts	
0000B718                            ; ===========================================================================
0000B718                            
0000B718                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B718 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B71E 6100 0000                  		bsr.w	AnimateSprite
0000B722 6000 0000                  		bra.w	DisplaySprite
0000B726                            ; ===========================================================================
0000B726 4E75                       		rts	
0000B728                            ; ===========================================================================
0000B728                            ; ---------------------------------------------------------------------------
0000B728                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B728                            ; ---------------------------------------------------------------------------
0000B728                            
0000B728                            Obj0F:					; XREF: Obj_Index
0000B728 7000                       		moveq	#0,d0
0000B72A 1028 0024                  		move.b	$24(a0),d0
0000B72E 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B732 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B736 6000 0000                  		bra.w	DisplaySprite
0000B73A                            ; ===========================================================================
0000B73A 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B73C 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B73E 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B740                            ; ===========================================================================
0000B740                            
0000B740                            Obj0F_Main:				; XREF: Obj0F_Index
0000B740 5428 0024                  		addq.b	#2,$24(a0)
0000B744 317C 00D0 0008             		move.w	#$D0,8(a0)
0000B74A 317C 0130 000A             		move.w	#$130,$A(a0)
0000B750 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B758 317C 0200 0002             		move.w	#$200,2(a0)
0000B75E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B764 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B766 5428 0024                  		addq.b	#2,$24(a0)
0000B76A 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B770 6600                       		bne.s	locret_A6F8	; if not, branch
0000B772 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B778 317C 0170 0008             		move.w	#$170,8(a0)
0000B77E 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B784                            
0000B784                            locret_A6F8:				; XREF: Obj0F_Index
0000B784 4E75                       		rts	
0000B786                            ; ===========================================================================
0000B786                            
0000B786                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B786 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B78C 6000 0000                  		bra.w	AnimateSprite
0000B790                            ; ===========================================================================
0000B790                            Ani_obj0E:
0000B790                            	include "_anim\obj0E.asm"
0000B790                            ; ---------------------------------------------------------------------------
0000B790                            ; Animation script - Sonic on the title screen
0000B790                            ; ---------------------------------------------------------------------------
0000B790 0000                       		dc.w byte_A706-Ani_obj0E
0000B792 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B79E                            		even
0000B79E                            		even
0000B79E                            
0000B79E                            Ani_obj0F:
0000B79E                            	include "_anim\obj0F.asm"
0000B79E                            ; ---------------------------------------------------------------------------
0000B79E                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B79E                            ; ---------------------------------------------------------------------------
0000B79E 0000                       		dc.w byte_A714-Ani_obj0F
0000B7A0 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B7A4                            		even
0000B7A4                            		even
0000B7A4                            
0000B7A4                            ; ---------------------------------------------------------------------------
0000B7A4                            ; Subroutine to	animate	a sprite using an animation script
0000B7A4                            ; ---------------------------------------------------------------------------
0000B7A4                            
0000B7A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B7A4                            
0000B7A4                            
0000B7A4                            AnimateSprite:
0000B7A4 7000                       		moveq	#0,d0
0000B7A6 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B7AA B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B7AE 6700                       		beq.s	Anim_Run	; if not, branch
0000B7B0 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B7B4 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B7BA 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B7C0                            
0000B7C0                            Anim_Run:
0000B7C0 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B7C4 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B7C6 D040                       		add.w	d0,d0
0000B7C8 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B7CC 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B7D0 7200                       		moveq	#0,d1
0000B7D2 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B7D6 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B7DA 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000B7DC                            
0000B7DC                            Anim_Next:
0000B7DC 1200                       		move.b	d0,d1
0000B7DE 0200 001F                  		andi.b	#$1F,d0
0000B7E2 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B7E6 1028 0022                  		move.b	$22(a0),d0
0000B7EA E719                       		rol.b	#3,d1
0000B7EC B101                       		eor.b	d0,d1
0000B7EE 0201 0003                  		andi.b	#3,d1
0000B7F2 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B7F8 8328 0001                  		or.b	d1,1(a0)
0000B7FC 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B800                            
0000B800                            Anim_Wait:
0000B800 4E75                       		rts	
0000B802                            ; ===========================================================================
0000B802                            
0000B802                            Anim_End_FF:
0000B802 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B804 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B806 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B80C 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B810 60CA                       		bra.s	Anim_Next
0000B812                            ; ===========================================================================
0000B812                            
0000B812                            Anim_End_FE:
0000B812 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B814 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B816 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B81A 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B81E 9200                       		sub.b	d0,d1
0000B820 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B824 60B6                       		bra.s	Anim_Next
0000B826                            ; ===========================================================================
0000B826                            
0000B826                            Anim_End_FD:
0000B826 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B828 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B82A 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B830                            
0000B830                            Anim_End_FC:
0000B830 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B832 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B834 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B838                            
0000B838                            Anim_End_FB:
0000B838 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B83A 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B83C 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B842 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B846                            
0000B846                            Anim_End_FA:
0000B846 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B848 6600                       		bne.s	Anim_End	; if not, branch
0000B84A 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B84E                            
0000B84E                            Anim_End:
0000B84E 4E75                       		rts	
0000B850                            ; End of function AnimateSprite
0000B850                            
0000B850                            ; ===========================================================================
0000B850                            ; ---------------------------------------------------------------------------
0000B850                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B850                            ; ---------------------------------------------------------------------------
0000B850                            Map_obj0F:
0000B850                            	include "_maps\obj0F.asm"
0000B850                            ; ---------------------------------------------------------------------------
0000B850                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B850                            ; ---------------------------------------------------------------------------
0000B850 0000                       		dc.w byte_A7CD-Map_obj0F
0000B852 0000                       		dc.w byte_A7CC-Map_obj0F
0000B854 0000                       		dc.w byte_A7EB-Map_obj0F
0000B856 0000                       		dc.w byte_A882-Map_obj0F
0000B858 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B859 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B85E 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B863 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B868 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B86D 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B872 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B877 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B878 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B87D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B882 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B887 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B88C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B891 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B896 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B89B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B8A0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B8A5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B8AA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8AF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8B4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8B9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8BE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8C3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8C8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8CD D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8D2 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8D7 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8DC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8E1 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8E6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8EB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8F0 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8F5 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8FA F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8FF F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B904 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B909 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B90E 01                         byte_A882:	dc.b 1			; "TM"
0000B90F FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B914                            		even
0000B914                            		even
0000B914                            
0000B914                            ; ---------------------------------------------------------------------------
0000B914                            ; Sprite mappings - Sonic on the title screen
0000B914                            ; ---------------------------------------------------------------------------
0000B914                            Map_obj0E:
0000B914                            	include "_maps\obj0E.asm"
0000B914                            ; ================================================================================
0000B914                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B914                            ; ================================================================================
0000B914                            
0000B914                            DATAGKI0HYDQBXP:
0000B914 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B918 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B91C 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B920 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B924 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B925 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B92A 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B92F 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B934 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B939 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B93E 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B943 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B948 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B94D 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B94E 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B953 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B958 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B95D 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B962 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B967 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B96C 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B971 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B976 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B97B 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B980 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B985 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B986 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B98B F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B990 F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B995 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B99A 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B99F 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B9A4 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B9A9 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B9AE 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B9B3 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B9B8 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B9BD 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B9BE FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B9C3 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B9C8 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B9CD 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B9D2 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B9D7 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B9DC 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B9E1 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B9E6 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B9EB 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B9F0 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B9F1 F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B9F6 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B9FB 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000BA00 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000BA05 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000BA0A 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000BA0F 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000BA14 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000BA19 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000BA1E 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000BA23 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000BA28 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000BA2D 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000BA32 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000BA37 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000BA3C 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000BA41 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000BA42 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000BA47 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000BA4C 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000BA51 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000BA56 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000BA5B 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000BA60 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000BA65 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000BA6A 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000BA6F 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000BA74 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000BA79 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000BA7A EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000BA7F 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000BA84 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000BA89 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000BA8E 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000BA93 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000BA98 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000BA9D 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000BAA2 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000BAA7 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000BAAC 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000BAB1 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000BAB6 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000BABB 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000BAC0 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000BAC5 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000BAC6 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000BACB 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000BAD0 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000BAD5 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000BADA 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000BADF 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000BAE4 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000BAE9 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000BAEE 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000BAF3 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000BAF8 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000BAFD 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000BB02 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000BB07 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000BB0C 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000BB12 00                         	even
0000BB12 00                         	even
0000BB12                            
0000BB12                            ; ===========================================================================
0000BB12                            ; ---------------------------------------------------------------------------
0000BB12                            ; Object 2B - Chopper enemy (GHZ)
0000BB12                            ; ---------------------------------------------------------------------------
0000BB12                            
0000BB12                            Obj2B:					; XREF: Obj_Index
0000BB12 7000                       		moveq	#0,d0
0000BB14 1028 0024                  		move.b	$24(a0),d0
0000BB18 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000BB1C 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000BB20 6000 0000                  		bra.w	MarkObjGone
0000BB24                            ; ===========================================================================
0000BB24 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000BB26 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000BB28                            ; ===========================================================================
0000BB28                            
0000BB28                            Obj2B_Main:				; XREF: Obj2B_Index
0000BB28 5428 0024                  		addq.b	#2,$24(a0)
0000BB2C 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000BB34 317C 047B 0002             		move.w	#$47B,2(a0)
0000BB3A 117C 0004 0001             		move.b	#4,1(a0)
0000BB40 117C 0004 0018             		move.b	#4,$18(a0)
0000BB46 117C 0009 0020             		move.b	#9,$20(a0)
0000BB4C 117C 0010 0019             		move.b	#$10,$19(a0)
0000BB52 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BB58 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000BB5E                            
0000BB5E                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000BB5E 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000BB64 6100 FC3E                  		bsr.w	AnimateSprite
0000BB68 6100 0000                  		bsr.w	SpeedToPos
0000BB6C 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000BB72 3028 0030                  		move.w	$30(a0),d0
0000BB76 B068 000C                  		cmp.w	$C(a0),d0
0000BB7A 6400                       		bcc.s	Obj2B_ChgAni
0000BB7C 3140 000C                  		move.w	d0,$C(a0)
0000BB80 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BB86                            
0000BB86                            Obj2B_ChgAni:
0000BB86 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000BB8C 0440 00C0                  		subi.w	#$C0,d0
0000BB90 B068 000C                  		cmp.w	$C(a0),d0
0000BB94 6400                       		bcc.s	locret_ABB6
0000BB96 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000BB9C 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000BBA0 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000BBA2 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000BBA8                            
0000BBA8                            locret_ABB6:
0000BBA8 4E75                       		rts	
0000BBAA                            ; ===========================================================================
0000BBAA                            Ani_obj2B:
0000BBAA                            	include "_anim\obj2B.asm"
0000BBAA                            ; ---------------------------------------------------------------------------
0000BBAA                            ; Animation script - Chopper enemy
0000BBAA                            ; ---------------------------------------------------------------------------
0000BBAA 0000                       		dc.w byte_ABBE-Ani_obj2B
0000BBAC 0000                       		dc.w byte_ABC2-Ani_obj2B
0000BBAE 0000                       		dc.w byte_ABC6-Ani_obj2B
0000BBB0 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000BBB4 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000BBB8 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000BBBC 00                         		even
0000BBBC 00                         		even
0000BBBC                            
0000BBBC                            ; ---------------------------------------------------------------------------
0000BBBC                            ; Sprite mappings - Chopper enemy (GHZ)
0000BBBC                            ; ---------------------------------------------------------------------------
0000BBBC                            Map_obj2B:
0000BBBC                            	include "_maps\obj2B.asm"
0000BBBC                            Map_1ff1:
0000BBBC 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000BBBE 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000BBC0 02                         Map_1ff1_4: 	dc.b $2
0000BBC1 E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000BBC6 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000BBCB 02                         Map_1ff1_F: 	dc.b $2
0000BBCC E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000BBD1 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000BBD6                            	even
0000BBD6                            	even
0000BBD6                            
0000BBD6                            ; ===========================================================================
0000BBD6                            ; ---------------------------------------------------------------------------
0000BBD6                            ; Object 2C - Jaws enemy (LZ)
0000BBD6                            ; ---------------------------------------------------------------------------
0000BBD6                            
0000BBD6                            Obj2C:					; XREF: Obj_Index
0000BBD6 7000                       		moveq	#0,d0
0000BBD8 1028 0024                  		move.b	$24(a0),d0
0000BBDC 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000BBE0 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000BBE4                            ; ===========================================================================
0000BBE4 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000BBE6 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000BBE8                            ; ===========================================================================
0000BBE8                            
0000BBE8                            Obj2C_Main:				; XREF: Obj2C_Index
0000BBE8 5428 0024                  		addq.b	#2,$24(a0)
0000BBEC 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000BBF4 317C 2486 0002             		move.w	#$2486,2(a0)
0000BBFA 0028 0004 0001             		ori.b	#4,1(a0)
0000BC00 117C 000A 0020             		move.b	#$A,$20(a0)
0000BC06 117C 0004 0018             		move.b	#4,$18(a0)
0000BC0C 117C 0010 0019             		move.b	#$10,$19(a0)
0000BC12 7000                       		moveq	#0,d0
0000BC14 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000BC18 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000BC1A 5340                       		subq.w	#1,d0
0000BC1C 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000BC20 3140 0032                  		move.w	d0,$32(a0)
0000BC24 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000BC2A 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000BC30 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000BC32 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000BC36                            
0000BC36                            Obj2C_Turn:				; XREF: Obj2C_Index
0000BC36 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000BC3A 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000BC3C 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000BC42 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000BC46 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000BC4C 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000BC52                            
0000BC52                            Obj2C_Animate:
0000BC52 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000BC58 6100 FB4A                  		bsr.w	AnimateSprite
0000BC5C 6100 0000                  		bsr.w	SpeedToPos
0000BC60 6000 0000                  		bra.w	MarkObjGone
0000BC64                            ; ===========================================================================
0000BC64                            Ani_obj2C:
0000BC64                            	include "_anim\obj2C.asm"
0000BC64                            ; ---------------------------------------------------------------------------
0000BC64                            ; Animation script - Jaws enemy
0000BC64                            ; ---------------------------------------------------------------------------
0000BC64 0000                       		dc.w byte_AC6A-Ani_obj2C
0000BC66 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000BC6C                            		even
0000BC6C                            		even
0000BC6C                            
0000BC6C                            ; ---------------------------------------------------------------------------
0000BC6C                            ; Sprite mappings - Jaws enemy (LZ)
0000BC6C                            ; ---------------------------------------------------------------------------
0000BC6C                            Map_obj2C:
0000BC6C                            	include "_maps\obj2C.asm"
0000BC6C                            ; ---------------------------------------------------------------------------
0000BC6C                            ; Sprite mappings - Jaws enemy (LZ)
0000BC6C                            ; ---------------------------------------------------------------------------
0000BC6C 0000                       		dc.w byte_AC78-Map_obj2C
0000BC6E 0000                       		dc.w byte_AC83-Map_obj2C
0000BC70 0000                       		dc.w byte_AC8E-Map_obj2C
0000BC72 0000                       		dc.w byte_AC99-Map_obj2C
0000BC74 02                         byte_AC78:	dc.b 2
0000BC75 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000BC7A F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000BC7F 02                         byte_AC83:	dc.b 2
0000BC80 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000BC85 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000BC8A 02                         byte_AC8E:	dc.b 2
0000BC8B F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000BC90 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000BC95 02                         byte_AC99:	dc.b 2
0000BC96 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000BC9B F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000BCA0                            		even
0000BCA0                            		even
0000BCA0                            
0000BCA0                            ; ===========================================================================
0000BCA0                            ; ---------------------------------------------------------------------------
0000BCA0                            ; Object 2D - Burrobot enemy (LZ)
0000BCA0                            ; ---------------------------------------------------------------------------
0000BCA0                            
0000BCA0                            Obj2D:					; XREF: Obj_Index
0000BCA0 7000                       		moveq	#0,d0
0000BCA2 1028 0024                  		move.b	$24(a0),d0
0000BCA6 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000BCAA 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000BCAE                            ; ===========================================================================
0000BCAE 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000BCB0 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000BCB2                            ; ===========================================================================
0000BCB2                            
0000BCB2                            Obj2D_Main:				; XREF: Obj2D_Index
0000BCB2 5428 0024                  		addq.b	#2,$24(a0)
0000BCB6 117C 0013 0016             		move.b	#$13,$16(a0)
0000BCBC 117C 0008 0017             		move.b	#8,$17(a0)
0000BCC2 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000BCCA 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000BCD0 0028 0004 0001             		ori.b	#4,1(a0)
0000BCD6 117C 0004 0018             		move.b	#4,$18(a0)
0000BCDC 117C 0005 0020             		move.b	#5,$20(a0)
0000BCE2 117C 000C 0019             		move.b	#$C,$19(a0)
0000BCE8 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000BCEC 117C 0002 001C             		move.b	#2,$1C(a0)
0000BCF2                            
0000BCF2                            Obj2D_Action:				; XREF: Obj2D_Index
0000BCF2 7000                       		moveq	#0,d0
0000BCF4 1028 0025                  		move.b	$25(a0),d0
0000BCF8 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000BCFC 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000BD00 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000BD06 6100 FA9C                  		bsr.w	AnimateSprite
0000BD0A 6000 0000                  		bra.w	MarkObjGone
0000BD0E                            ; ===========================================================================
0000BD0E 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000BD10 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000BD12 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000BD14 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000BD16                            ; ===========================================================================
0000BD16                            
0000BD16                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000BD16 5368 0030                  		subq.w	#1,$30(a0)
0000BD1A 6A00                       		bpl.s	locret_AD42
0000BD1C 5428 0025                  		addq.b	#2,$25(a0)
0000BD20 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000BD26 317C 0080 0010             		move.w	#$80,$10(a0)
0000BD2C 117C 0001 001C             		move.b	#1,$1C(a0)
0000BD32 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000BD38 6700                       		beq.s	locret_AD42
0000BD3A 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000BD3E                            
0000BD3E                            locret_AD42:
0000BD3E 4E75                       		rts	
0000BD40                            ; ===========================================================================
0000BD40                            
0000BD40                            Obj2D_Move:				; XREF: Obj2D_Index2
0000BD40 5368 0030                  		subq.w	#1,$30(a0)
0000BD44 6B00                       		bmi.s	loc_AD84
0000BD46 6100 0000                  		bsr.w	SpeedToPos
0000BD4A 0868 0000 0032             		bchg	#0,$32(a0)
0000BD50 6600                       		bne.s	loc_AD78
0000BD52 3628 0008                  		move.w	8(a0),d3
0000BD56 0643 000C                  		addi.w	#$C,d3
0000BD5A 0828 0000 0022             		btst	#0,$22(a0)
0000BD60 6600                       		bne.s	loc_AD6A
0000BD62 0443 0018                  		subi.w	#$18,d3
0000BD66                            
0000BD66                            loc_AD6A:
0000BD66 4EB9 0000 0000             		jsr	ObjHitFloor2
0000BD6C 0C41 000C                  		cmpi.w	#$C,d1
0000BD70 6C00                       		bge.s	loc_AD84
0000BD72 4E75                       		rts	
0000BD74                            ; ===========================================================================
0000BD74                            
0000BD74                            loc_AD78:				; XREF: Obj2D_Move
0000BD74 4EB9 0000 0000             		jsr	ObjHitFloor
0000BD7A D368 000C                  		add.w	d1,$C(a0)
0000BD7E 4E75                       		rts	
0000BD80                            ; ===========================================================================
0000BD80                            
0000BD80                            loc_AD84:				; XREF: Obj2D_Move
0000BD80 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000BD86 6700                       		beq.s	loc_ADA4
0000BD88 5528 0025                  		subq.b	#2,$25(a0)
0000BD8C 317C 003B 0030             		move.w	#$3B,$30(a0)
0000BD92 317C 0000 0010             		move.w	#0,$10(a0)
0000BD98 117C 0000 001C             		move.b	#0,$1C(a0)
0000BD9E 4E75                       		rts	
0000BDA0                            ; ===========================================================================
0000BDA0                            
0000BDA0                            loc_ADA4:
0000BDA0 5428 0025                  		addq.b	#2,$25(a0)
0000BDA4 317C FC00 0012             		move.w	#-$400,$12(a0)
0000BDAA 117C 0002 001C             		move.b	#2,$1C(a0)
0000BDB0 4E75                       		rts	
0000BDB2                            ; ===========================================================================
0000BDB2                            
0000BDB2                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000BDB2 6100 0000                  		bsr.w	SpeedToPos
0000BDB6 0668 0018 0012             		addi.w	#$18,$12(a0)
0000BDBC 6B00                       		bmi.s	locret_ADF0
0000BDBE 117C 0003 001C             		move.b	#3,$1C(a0)
0000BDC4 4EB9 0000 0000             		jsr	ObjHitFloor
0000BDCA 4A41                       		tst.w	d1
0000BDCC 6A00                       		bpl.s	locret_ADF0
0000BDCE D368 000C                  		add.w	d1,$C(a0)
0000BDD2 317C 0000 0012             		move.w	#0,$12(a0)
0000BDD8 117C 0001 001C             		move.b	#1,$1C(a0)
0000BDDE 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000BDE4 5528 0025                  		subq.b	#2,$25(a0)
0000BDE8 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000BDEC                            
0000BDEC                            locret_ADF0:
0000BDEC 4E75                       		rts	
0000BDEE                            ; ===========================================================================
0000BDEE                            
0000BDEE                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000BDEE 343C 0060                  		move.w	#$60,d2
0000BDF2 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000BDF6 6400                       		bcc.s	locret_AE20
0000BDF8 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000BDFC 9068 000C                  		sub.w	$C(a0),d0
0000BE00 6400                       		bcc.s	locret_AE20
0000BE02 0C40 FF80                  		cmpi.w	#-$80,d0
0000BE06 6500                       		bcs.s	locret_AE20
0000BE08 4A78 FE08                  		tst.w	($FFFFFE08).w
0000BE0C 6600                       		bne.s	locret_AE20
0000BE0E 5528 0025                  		subq.b	#2,$25(a0)
0000BE12 3141 0010                  		move.w	d1,$10(a0)
0000BE16 317C FC00 0012             		move.w	#-$400,$12(a0)
0000BE1C                            
0000BE1C                            locret_AE20:
0000BE1C 4E75                       		rts	
0000BE1E                            
0000BE1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BE1E                            
0000BE1E                            
0000BE1E                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000BE1E 323C 0080                  		move.w	#$80,d1
0000BE22 08E8 0000 0022             		bset	#0,$22(a0)
0000BE28 3038 D008                  		move.w	($FFFFD008).w,d0
0000BE2C 9068 0008                  		sub.w	8(a0),d0
0000BE30 6400                       		bcc.s	loc_AE40
0000BE32 4440                       		neg.w	d0
0000BE34 4441                       		neg.w	d1
0000BE36 08A8 0000 0022             		bclr	#0,$22(a0)
0000BE3C                            
0000BE3C                            loc_AE40:
0000BE3C B042                       		cmp.w	d2,d0
0000BE3E 4E75                       		rts	
0000BE40                            ; End of function Obj2D_ChkSonic2
0000BE40                            
0000BE40                            ; ===========================================================================
0000BE40                            Ani_obj2D:
0000BE40                            	include "_anim\obj2D.asm"
0000BE40                            ; ---------------------------------------------------------------------------
0000BE40                            ; Animation script - Burrobot enemy but craig
0000BE40                            ; ---------------------------------------------------------------------------
0000BE40 0000                       		dc.w byte_AE4C-Ani_obj2D
0000BE42 0000                       		dc.w byte_AE50-Ani_obj2D
0000BE44 0000                       		dc.w byte_AE54-Ani_obj2D
0000BE46 0000                       		dc.w byte_AE58-Ani_obj2D
0000BE48 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000BE4B 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000BE4F 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000BE5D 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000BE60                            		even
0000BE60                            		even
0000BE60                            
0000BE60                            ; ---------------------------------------------------------------------------
0000BE60                            ; Sprite mappings - Burrobot enemy (LZ)
0000BE60                            ; ---------------------------------------------------------------------------
0000BE60                            Map_obj2D:
0000BE60                            	include "_maps\obj2D.asm"
0000BE60                            Map_e3a3:
0000BE60 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000BE62 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000BE64 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000BE66 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000BE68 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000BE6A 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000BE6C 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000BE6E 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000BE70 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000BE72 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000BE74 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000BE76 02                         Map_e3a3_16: 	dc.b $2
0000BE77 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000BE7C 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000BE81 02                         Map_e3a3_21: 	dc.b $2
0000BE82 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000BE87 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000BE8C 02                         Map_e3a3_2C: 	dc.b $2
0000BE8D EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000BE92 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000BE97 02                         Map_e3a3_37: 	dc.b $2
0000BE98 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000BE9D FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000BEA2 02                         Map_e3a3_42: 	dc.b $2
0000BEA3 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000BEA8 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000BEAD 02                         Map_e3a3_4D: 	dc.b $2
0000BEAE EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000BEB3 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000BEB8 02                         Map_e3a3_58: 	dc.b $2
0000BEB9 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000BEBE FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000BEC3 02                         Map_e3a3_63: 	dc.b $2
0000BEC4 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000BEC9 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000BECE 02                         Map_e3a3_6E: 	dc.b $2
0000BECF EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000BED4 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000BED9 02                         Map_e3a3_79: 	dc.b $2
0000BEDA EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000BEDF 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000BEE4 02                         Map_e3a3_84: 	dc.b $2
0000BEE5 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000BEEA 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000BEF0 00                         	even
0000BEF0 00                         	even
0000BEF0                            
0000BEF0                            ; ===========================================================================
0000BEF0                            ; ---------------------------------------------------------------------------
0000BEF0                            ; Object 2F - large moving platforms (MZ)
0000BEF0                            ; ---------------------------------------------------------------------------
0000BEF0                            
0000BEF0                            Obj2F:					; XREF: Obj_Index
0000BEF0 7000                       		moveq	#0,d0
0000BEF2 1028 0024                  		move.b	$24(a0),d0
0000BEF6 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000BEFA 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000BEFE                            ; ===========================================================================
0000BEFE 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000BF00 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000BF02                            
0000BF02 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000BF04 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000BF06 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000BF08 0140                       		dc.b 1,	$40
0000BF0A 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000BF0C 0220                       		dc.b 2,	$20
0000BF0E                            ; ===========================================================================
0000BF0E                            
0000BF0E                            Obj2F_Main:				; XREF: Obj2F_Index
0000BF0E 5428 0024                  		addq.b	#2,$24(a0)
0000BF12 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000BF1A 317C C000 0002             		move.w	#$C000,2(a0)
0000BF20 117C 0004 0001             		move.b	#4,1(a0)
0000BF26 117C 0005 0018             		move.b	#5,$18(a0)
0000BF2C 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000BF32 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BF38 7000                       		moveq	#0,d0
0000BF3A 1028 0028                  		move.b	$28(a0),d0
0000BF3E E448                       		lsr.w	#2,d0
0000BF40 0240 001C                  		andi.w	#$1C,d0
0000BF44 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000BF48 3019                       		move.w	(a1)+,d0
0000BF4A 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000BF4E 214A 0030                  		move.l	a2,$30(a0)
0000BF52 1159 001A                  		move.b	(a1)+,$1A(a0)
0000BF56 1151 0019                  		move.b	(a1),$19(a0)
0000BF5A 0228 000F 0028             		andi.b	#$F,$28(a0)
0000BF60 117C 0040 0016             		move.b	#$40,$16(a0)
0000BF66 08E8 0004 0001             		bset	#4,1(a0)
0000BF6C                            
0000BF6C                            Obj2F_Action:				; XREF: Obj2F_Index
0000BF6C 6100 0000                  		bsr.w	Obj2F_Types
0000BF70 4A28 0025                  		tst.b	$25(a0)
0000BF74 6700                       		beq.s	Obj2F_Solid
0000BF76 7200                       		moveq	#0,d1
0000BF78 1228 0019                  		move.b	$19(a0),d1
0000BF7C 0641 000B                  		addi.w	#$B,d1
0000BF80 6100 C55C                  		bsr.w	ExitPlatform
0000BF84 0829 0003 0022             		btst	#3,$22(a1)
0000BF8A 6600 0000                  		bne.w	Obj2F_Slope
0000BF8E 4228 0025                  		clr.b	$25(a0)
0000BF92 6000                       		bra.s	Obj2F_Display
0000BF94                            ; ===========================================================================
0000BF94                            
0000BF94                            Obj2F_Slope:				; XREF: Obj2F_Action
0000BF94 7200                       		moveq	#0,d1
0000BF96 1228 0019                  		move.b	$19(a0),d1
0000BF9A 0641 000B                  		addi.w	#$B,d1
0000BF9E 2468 0030                  		movea.l	$30(a0),a2
0000BFA2 3428 0008                  		move.w	8(a0),d2
0000BFA6 6100 D526                  		bsr.w	SlopeObject2
0000BFAA 6000                       		bra.s	Obj2F_Display
0000BFAC                            ; ===========================================================================
0000BFAC                            
0000BFAC                            Obj2F_Solid:				; XREF: Obj2F_Action
0000BFAC 7200                       		moveq	#0,d1
0000BFAE 1228 0019                  		move.b	$19(a0),d1
0000BFB2 0641 000B                  		addi.w	#$B,d1
0000BFB6 343C 0020                  		move.w	#$20,d2
0000BFBA 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000BFC0 6600                       		bne.s	loc_AF8E
0000BFC2 343C 0030                  		move.w	#$30,d2
0000BFC6                            
0000BFC6                            loc_AF8E:
0000BFC6 2468 0030                  		movea.l	$30(a0),a2
0000BFCA 6100 0000                  		bsr.w	SolidObject2F
0000BFCE                            
0000BFCE                            Obj2F_Display:				; XREF: Obj2F_Action
0000BFCE 6100 0000                  		bsr.w	DisplaySprite
0000BFD2 6000 0000                  		bra.w	Obj2F_ChkDel
0000BFD6                            
0000BFD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BFD6                            
0000BFD6                            
0000BFD6                            Obj2F_Types:				; XREF: Obj2F_Action
0000BFD6 7000                       		moveq	#0,d0
0000BFD8 1028 0028                  		move.b	$28(a0),d0
0000BFDC 0240 0007                  		andi.w	#7,d0
0000BFE0 D040                       		add.w	d0,d0
0000BFE2 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000BFE6 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000BFEA                            ; End of function Obj2F_Types
0000BFEA                            
0000BFEA                            ; ===========================================================================
0000BFEA 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000BFEC 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000BFEE 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000BFF0 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000BFF2 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000BFF4 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000BFF6                            ; ===========================================================================
0000BFF6                            
0000BFF6                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000BFF6 4E75                       		rts			; type 00 platform doesn't move
0000BFF8                            ; ===========================================================================
0000BFF8                            
0000BFF8                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000BFF8 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000BFFC 323C 0020                  		move.w	#$20,d1
0000C000 6000                       		bra.s	Obj2F_Move
0000C002                            ; ===========================================================================
0000C002                            
0000C002                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000C002 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000C006 323C 0030                  		move.w	#$30,d1
0000C00A 6000                       		bra.s	Obj2F_Move
0000C00C                            ; ===========================================================================
0000C00C                            
0000C00C                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000C00C 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000C010 323C 0040                  		move.w	#$40,d1
0000C014 6000                       		bra.s	Obj2F_Move
0000C016                            ; ===========================================================================
0000C016                            
0000C016                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000C016 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000C01A 323C 0060                  		move.w	#$60,d1
0000C01E                            
0000C01E                            Obj2F_Move:
0000C01E 0828 0003 0028             		btst	#3,$28(a0)
0000C024 6700                       		beq.s	loc_AFF2
0000C026 4440                       		neg.w	d0
0000C028 D041                       		add.w	d1,d0
0000C02A                            
0000C02A                            loc_AFF2:
0000C02A 3228 002C                  		move.w	$2C(a0),d1
0000C02E 9240                       		sub.w	d0,d1
0000C030 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000C034 4E75                       		rts	
0000C036                            ; ===========================================================================
0000C036                            
0000C036                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000C036 1028 0034                  		move.b	$34(a0),d0
0000C03A 4A28 0025                  		tst.b	$25(a0)
0000C03E 6600                       		bne.s	loc_B010
0000C040 5500                       		subq.b	#2,d0
0000C042 6400                       		bcc.s	loc_B01C
0000C044 7000                       		moveq	#0,d0
0000C046 6000                       		bra.s	loc_B01C
0000C048                            ; ===========================================================================
0000C048                            
0000C048                            loc_B010:
0000C048 5800                       		addq.b	#4,d0
0000C04A 0C00 0040                  		cmpi.b	#$40,d0
0000C04E 6500                       		bcs.s	loc_B01C
0000C050 103C 0040                  		move.b	#$40,d0
0000C054                            
0000C054                            loc_B01C:
0000C054 1140 0034                  		move.b	d0,$34(a0)
0000C058 4EB9 0000 3416             		jsr	(CalcSine).l
0000C05E E848                       		lsr.w	#4,d0
0000C060 3200                       		move.w	d0,d1
0000C062 D068 002C                  		add.w	$2C(a0),d0
0000C066 3140 000C                  		move.w	d0,$C(a0)
0000C06A 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000C070 6600                       		bne.s	loc_B07A
0000C072 4A28 0035                  		tst.b	$35(a0)
0000C076 6600                       		bne.s	loc_B07A
0000C078 117C 0001 0035             		move.b	#1,$35(a0)
0000C07E 6100 0000                  		bsr.w	SingleObjLoad2
0000C082 6600                       		bne.s	loc_B07A
0000C084 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000C088 3368 0008 0008             		move.w	8(a0),8(a1)
0000C08E 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000C094 5069 002C                  		addq.w	#8,$2C(a1)
0000C098 5769 002C                  		subq.w	#3,$2C(a1)
0000C09C 0469 0040 0008             		subi.w	#$40,8(a1)
0000C0A2 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000C0A8 2348 0038                  		move.l	a0,$38(a1)
0000C0AC 2448                       		movea.l	a0,a2
0000C0AE 6100                       		bsr.s	sub_B09C
0000C0B0                            
0000C0B0                            loc_B07A:
0000C0B0 7400                       		moveq	#0,d2
0000C0B2 45E8 0036                  		lea	$36(a0),a2
0000C0B6 141A                       		move.b	(a2)+,d2
0000C0B8 5302                       		subq.b	#1,d2
0000C0BA 6500                       		bcs.s	locret_B09A
0000C0BC                            
0000C0BC                            loc_B086:
0000C0BC 7000                       		moveq	#0,d0
0000C0BE 101A                       		move.b	(a2)+,d0
0000C0C0 ED48                       		lsl.w	#6,d0
0000C0C2 0640 D000                  		addi.w	#-$3000,d0
0000C0C6 3240                       		movea.w	d0,a1
0000C0C8 3341 003C                  		move.w	d1,$3C(a1)
0000C0CC 51CA FFEE                  		dbf	d2,loc_B086
0000C0D0                            
0000C0D0                            locret_B09A:
0000C0D0 4E75                       		rts	
0000C0D2                            
0000C0D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C0D2                            
0000C0D2                            
0000C0D2                            sub_B09C:
0000C0D2 45EA 0036                  		lea	$36(a2),a2
0000C0D6 7000                       		moveq	#0,d0
0000C0D8 1012                       		move.b	(a2),d0
0000C0DA 5212                       		addq.b	#1,(a2)
0000C0DC 45F2 0001                  		lea	1(a2,d0.w),a2
0000C0E0 3009                       		move.w	a1,d0
0000C0E2 0440 D000                  		subi.w	#-$3000,d0
0000C0E6 EC48                       		lsr.w	#6,d0
0000C0E8 0240 007F                  		andi.w	#$7F,d0
0000C0EC 1480                       		move.b	d0,(a2)
0000C0EE 4E75                       		rts	
0000C0F0                            ; End of function sub_B09C
0000C0F0                            
0000C0F0                            ; ===========================================================================
0000C0F0                            
0000C0F0                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000C0F0 4A28 0035                  		tst.b	$35(a0)
0000C0F4 6700                       		beq.s	loc_B0C6
0000C0F6 4A28 0001                  		tst.b	1(a0)
0000C0FA 6A00                       		bpl.s	Obj2F_DelFlames
0000C0FC                            
0000C0FC                            loc_B0C6:
0000C0FC 3028 002A                  		move.w	$2A(a0),d0
0000C100 0240 FF80                  		andi.w	#$FF80,d0
0000C104 3238 F700                  		move.w	($FFFFF700).w,d1
0000C108 0441 0080                  		subi.w	#$80,d1
0000C10C 0241 FF80                  		andi.w	#$FF80,d1
0000C110 9041                       		sub.w	d1,d0
0000C112 0C40 0280                  		cmpi.w	#$280,d0
0000C116 6200 0000                  		bhi.w	DeleteObject
0000C11A 4E75                       		rts	
0000C11C                            ; ===========================================================================
0000C11C                            
0000C11C                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000C11C 7400                       		moveq	#0,d2
0000C11E                            
0000C11E                            loc_B0E8:
0000C11E 45E8 0036                  		lea	$36(a0),a2
0000C122 1412                       		move.b	(a2),d2
0000C124 421A                       		clr.b	(a2)+
0000C126 5302                       		subq.b	#1,d2
0000C128 6500                       		bcs.s	locret_B116
0000C12A                            
0000C12A                            loc_B0F4:
0000C12A 7000                       		moveq	#0,d0
0000C12C 1012                       		move.b	(a2),d0
0000C12E 421A                       		clr.b	(a2)+
0000C130 ED48                       		lsl.w	#6,d0
0000C132 0640 D000                  		addi.w	#-$3000,d0
0000C136 3240                       		movea.w	d0,a1
0000C138 6100 0000                  		bsr.w	DeleteObject2
0000C13C 51CA FFEC                  		dbf	d2,loc_B0F4
0000C140 117C 0000 0035             		move.b	#0,$35(a0)
0000C146 117C 0000 0034             		move.b	#0,$34(a0)
0000C14C                            
0000C14C                            locret_B116:
0000C14C 4E75                       		rts	
0000C14E                            ; ===========================================================================
0000C14E                            ; ---------------------------------------------------------------------------
0000C14E                            ; Collision data for large moving platforms (MZ)
0000C14E                            ; ---------------------------------------------------------------------------
0000C14E                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000C19A                            		even
0000C19A                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000C1C6                            		even
0000C1C6                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000C212                            		even
0000C212                            ; ===========================================================================
0000C212                            ; ---------------------------------------------------------------------------
0000C212                            ; Object 35 - fireball that sits on the	floor (MZ)
0000C212                            ; (appears when	you walk on sinking platforms)
0000C212                            ; ---------------------------------------------------------------------------
0000C212                            
0000C212                            Obj35:					; XREF: Obj_Index
0000C212 7000                       		moveq	#0,d0
0000C214 1028 0024                  		move.b	$24(a0),d0
0000C218 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000C21C 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000C220                            ; ===========================================================================
0000C220 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000C222 0000                       		dc.w loc_B238-Obj35_Index
0000C224 0000                       		dc.w Obj35_Move-Obj35_Index
0000C226                            ; ===========================================================================
0000C226                            
0000C226                            Obj35_Main:				; XREF: Obj35_Index
0000C226 5428 0024                  		addq.b	#2,$24(a0)
0000C22A 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000C232 317C 0345 0002             		move.w	#$345,2(a0)
0000C238 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C23E 117C 0004 0001             		move.b	#4,1(a0)
0000C244 117C 0001 0018             		move.b	#1,$18(a0)
0000C24A 117C 008B 0020             		move.b	#$8B,$20(a0)
0000C250 117C 0008 0019             		move.b	#8,$19(a0)
0000C256 303C 00C8                  		move.w	#$C8,d0
0000C25A 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play flame sound
0000C260 4A28 0028                  		tst.b	$28(a0)
0000C264 6700                       		beq.s	loc_B238
0000C266 5428 0024                  		addq.b	#2,$24(a0)
0000C26A 6000 0000                  		bra.w	Obj35_Move
0000C26E                            ; ===========================================================================
0000C26E                            
0000C26E                            loc_B238:				; XREF: Obj35_Index
0000C26E 2268 0030                  		movea.l	$30(a0),a1
0000C272 3228 0008                  		move.w	8(a0),d1
0000C276 9268 002A                  		sub.w	$2A(a0),d1
0000C27A 0641 000C                  		addi.w	#$C,d1
0000C27E 3001                       		move.w	d1,d0
0000C280 E248                       		lsr.w	#1,d0
0000C282 1031 0000                  		move.b	(a1,d0.w),d0
0000C286 4440                       		neg.w	d0
0000C288 D068 002C                  		add.w	$2C(a0),d0
0000C28C 3400                       		move.w	d0,d2
0000C28E D068 003C                  		add.w	$3C(a0),d0
0000C292 3140 000C                  		move.w	d0,$C(a0)
0000C296 0C41 0084                  		cmpi.w	#$84,d1
0000C29A 6400                       		bcc.s	loc_B2B0
0000C29C 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C2A4 0C41 0080                  		cmpi.w	#$80,d1
0000C2A8 6400                       		bcc.s	loc_B2B0
0000C2AA 2028 0008                  		move.l	8(a0),d0
0000C2AE 0680 0008 0000             		addi.l	#$80000,d0
0000C2B4 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000C2BA 6600                       		bne.s	loc_B2B0
0000C2BC 6100 0000                  		bsr.w	SingleObjLoad2
0000C2C0 6600                       		bne.s	loc_B2B0
0000C2C2 12BC 0035                  		move.b	#$35,0(a1)
0000C2C6 3368 0008 0008             		move.w	8(a0),8(a1)
0000C2CC 3342 002C                  		move.w	d2,$2C(a1)
0000C2D0 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000C2D6 137C 0001 0028             		move.b	#1,$28(a1)
0000C2DC 2468 0038                  		movea.l	$38(a0),a2
0000C2E0 6100 FDF0                  		bsr.w	sub_B09C
0000C2E4                            
0000C2E4                            loc_B2B0:
0000C2E4 6000                       		bra.s	Obj35_Animate
0000C2E6                            ; ===========================================================================
0000C2E6                            
0000C2E6                            Obj35_Move:				; XREF: Obj35_Index
0000C2E6 3028 002C                  		move.w	$2C(a0),d0
0000C2EA D068 003C                  		add.w	$3C(a0),d0
0000C2EE 3140 000C                  		move.w	d0,$C(a0)
0000C2F2                            
0000C2F2                            Obj35_Animate:				; XREF: loc_B238
0000C2F2 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000C2F8 6100 F4AA                  		bsr.w	AnimateSprite
0000C2FC 6000 0000                  		bra.w	DisplaySprite
0000C300                            ; ===========================================================================
0000C300                            Ani_obj35:
0000C300                            	include "_anim\obj35.asm"
0000C300                            ; ---------------------------------------------------------------------------
0000C300                            ; Animation script - fireball that sits on the	floor (MZ)
0000C300                            ; ---------------------------------------------------------------------------
0000C300 0000                       		dc.w byte_B2CE-Ani_obj35
0000C302 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000C308                            		even
0000C308                            		even
0000C308                            
0000C308                            ; ---------------------------------------------------------------------------
0000C308                            ; Sprite mappings - large moving platforms (MZ)
0000C308                            ; ---------------------------------------------------------------------------
0000C308                            Map_obj2F:
0000C308                            	include "_maps\obj2F.asm"
0000C308                            ; ---------------------------------------------------------------------------
0000C308                            ; Sprite mappings - large moving platforms (MZ)
0000C308                            ; ---------------------------------------------------------------------------
0000C308 0000                       		dc.w byte_B2DA-Map_obj2F
0000C30A 0000                       		dc.w byte_B31C-Map_obj2F
0000C30C 0000                       		dc.w byte_B34F-Map_obj2F
0000C30E 0D                         byte_B2DA:	dc.b $D
0000C30F D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000C314 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000C319 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C31E D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000C323 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000C328 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C32D D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000C332 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000C337 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000C33C F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C341 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000C346 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000C34B F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000C350 0A                         byte_B31C:	dc.b $A
0000C351 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000C356 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000C35B 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C360 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000C365 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000C36A F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C36F C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000C374 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000C379 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000C37E E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000C383 06                         byte_B34F:	dc.b 6
0000C384 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000C389 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C38E 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000C393 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000C398 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C39D 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000C3A2                            		even
0000C3A2                            		even
0000C3A2                            
0000C3A2                            ; ---------------------------------------------------------------------------
0000C3A2                            ; Sprite mappings - lava balls (MZ, SLZ)
0000C3A2                            ; ---------------------------------------------------------------------------
0000C3A2                            Map_obj14:
0000C3A2                            	include "_maps\obj14.asm"
0000C3A2                            ; --------------------------------------------------------------------------------
0000C3A2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C3A2                            ; --------------------------------------------------------------------------------
0000C3A2                            
0000C3A2                            SME_C6wT7:	
0000C3A2 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000C3A6 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000C3AA 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000C3AE 01                         SME_C6wT7_C:	dc.b 1	
0000C3AF E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000C3B4 01                         SME_C6wT7_12:	dc.b 1	
0000C3B5 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000C3BA 02                         SME_C6wT7_18:	dc.b 2	
0000C3BB EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000C3C0 E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000C3C5 01                         SME_C6wT7_23:	dc.b 1	
0000C3C6 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000C3CB 01                         SME_C6wT7_29:	dc.b 1	
0000C3CC F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000C3D1 01                         SME_C6wT7_2F:	dc.b 1	
0000C3D2 F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000C3D8 00                         		even
0000C3D8 00                         		even
0000C3D8                            
0000C3D8                            ; ===========================================================================
0000C3D8                            ; ---------------------------------------------------------------------------
0000C3D8                            ; Object 30 - large green glassy blocks	(MZ)
0000C3D8                            ; ---------------------------------------------------------------------------
0000C3D8                            
0000C3D8                            Obj30:					; XREF: Obj_Index
0000C3D8 7000                       		moveq	#0,d0
0000C3DA 1028 0024                  		move.b	$24(a0),d0
0000C3DE 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000C3E2 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000C3E6 3028 0008                  		move.w	8(a0),d0
0000C3EA 0240 FF80                  		andi.w	#$FF80,d0
0000C3EE 3238 F700                  		move.w	($FFFFF700).w,d1
0000C3F2 0441 0080                  		subi.w	#$80,d1
0000C3F6 0241 FF80                  		andi.w	#$FF80,d1
0000C3FA 9041                       		sub.w	d1,d0
0000C3FC 0C40 0280                  		cmpi.w	#$280,d0
0000C400 6200 0000                  		bhi.w	Obj30_Delete
0000C404 6000 0000                  		bra.w	DisplaySprite
0000C408                            ; ===========================================================================
0000C408                            
0000C408                            Obj30_Delete:
0000C408 6000 0000                  		bra.w	DeleteObject
0000C40C                            ; ===========================================================================
0000C40C 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000C40E 0000                       		dc.w Obj30_Block012-Obj30_Index
0000C410 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000C412 0000                       		dc.w Obj30_Block34-Obj30_Index
0000C414 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000C416                            
0000C416 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000C419 0400 01                    		dc.b 4,	0, 1
0000C41C 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000C41F 0800 01                    		dc.b 8,	0, 1
0000C422                            ; ===========================================================================
0000C422                            
0000C422                            Obj30_Main:				; XREF: Obj30_Index
0000C422 45F9 0000 C416             		lea	(Obj30_Vars1).l,a2
0000C428 7201                       		moveq	#1,d1
0000C42A 117C 0048 0016             		move.b	#$48,$16(a0)
0000C430 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000C436 6500                       		bcs.s	loc_B40C	; if yes, branch
0000C438 45F9 0000 C41C             		lea	(Obj30_Vars2).l,a2
0000C43E 7201                       		moveq	#1,d1
0000C440 117C 0038 0016             		move.b	#$38,$16(a0)
0000C446                            
0000C446                            loc_B40C:
0000C446 2248                       		movea.l	a0,a1
0000C448 6000                       		bra.s	Obj30_Load	; load main object
0000C44A                            ; ===========================================================================
0000C44A                            
0000C44A                            Obj30_Loop:
0000C44A 6100 0000                  		bsr.w	SingleObjLoad2
0000C44E 6600                       		bne.s	loc_B480
0000C450                            
0000C450                            Obj30_Load:				; XREF: Obj30_Main
0000C450 135A 0024                  		move.b	(a2)+,$24(a1)
0000C454 12BC 0030                  		move.b	#$30,0(a1)
0000C458 3368 0008 0008             		move.w	8(a0),8(a1)
0000C45E 101A                       		move.b	(a2)+,d0
0000C460 4880                       		ext.w	d0
0000C462 D068 000C                  		add.w	$C(a0),d0
0000C466 3340 000C                  		move.w	d0,$C(a1)
0000C46A 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000C472 337C C38E 0002             		move.w	#$C38E,2(a1)
0000C478 137C 0004 0001             		move.b	#4,1(a1)
0000C47E 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C484 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C48A 137C 0020 0019             		move.b	#$20,$19(a1)
0000C490 137C 0004 0018             		move.b	#4,$18(a1)
0000C496 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C49A 2348 003C                  		move.l	a0,$3C(a1)
0000C49E 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000C4A2                            
0000C4A2 137C 0010 0019             		move.b	#$10,$19(a1)
0000C4A8 137C 0003 0018             		move.b	#3,$18(a1)
0000C4AE 5029 0028                  		addq.b	#8,$28(a1)
0000C4B2 0229 000F 0028             		andi.b	#$F,$28(a1)
0000C4B8                            
0000C4B8                            loc_B480:
0000C4B8 317C 0090 0032             		move.w	#$90,$32(a0)
0000C4BE 08E8 0004 0001             		bset	#4,1(a0)
0000C4C4                            
0000C4C4                            Obj30_Block012:				; XREF: Obj30_Index
0000C4C4 6100 0000                  		bsr.w	Obj30_Types
0000C4C8 323C 002B                  		move.w	#$2B,d1
0000C4CC 343C 0048                  		move.w	#$48,d2
0000C4D0 363C 0049                  		move.w	#$49,d3
0000C4D4 3828 0008                  		move.w	8(a0),d4
0000C4D8 6000 0000                  		bra.w	SolidObject
0000C4DC                            ; ===========================================================================
0000C4DC                            
0000C4DC                            Obj30_Reflect012:			; XREF: Obj30_Index
0000C4DC 2268 003C                  		movea.l	$3C(a0),a1
0000C4E0 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C4E6 6000 0000                  		bra.w	Obj30_Types
0000C4EA                            ; ===========================================================================
0000C4EA                            
0000C4EA                            Obj30_Block34:				; XREF: Obj30_Index
0000C4EA 6100 0000                  		bsr.w	Obj30_Types
0000C4EE 323C 002B                  		move.w	#$2B,d1
0000C4F2 343C 0038                  		move.w	#$38,d2
0000C4F6 363C 0039                  		move.w	#$39,d3
0000C4FA 3828 0008                  		move.w	8(a0),d4
0000C4FE 6000 0000                  		bra.w	SolidObject
0000C502                            ; ===========================================================================
0000C502                            
0000C502                            Obj30_Reflect34:			; XREF: Obj30_Index
0000C502 2268 003C                  		movea.l	$3C(a0),a1
0000C506 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C50C 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000C512 6000 0002                  		bra.w	*+4
0000C516                            
0000C516                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C516                            
0000C516                            
0000C516                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000C516 7000                       		moveq	#0,d0
0000C518 1028 0028                  		move.b	$28(a0),d0
0000C51C 0240 0007                  		andi.w	#7,d0
0000C520 D040                       		add.w	d0,d0
0000C522 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000C526 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000C52A                            ; End of function Obj30_Types
0000C52A                            
0000C52A                            ; ===========================================================================
0000C52A 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000C52C 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000C52E 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000C530 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000C532 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000C534                            ; ===========================================================================
0000C534                            
0000C534                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000C534 4E75                       		rts	
0000C536                            ; ===========================================================================
0000C536                            
0000C536                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000C536 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C53A 323C 0040                  		move.w	#$40,d1
0000C53E 6000                       		bra.s	loc_B514
0000C540                            ; ===========================================================================
0000C540                            
0000C540                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000C540 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C544 323C 0040                  		move.w	#$40,d1
0000C548 4440                       		neg.w	d0
0000C54A D041                       		add.w	d1,d0
0000C54C                            
0000C54C                            loc_B514:				; XREF: Obj30_Type01
0000C54C 0828 0003 0028             		btst	#3,$28(a0)
0000C552 6700                       		beq.s	loc_B526
0000C554 4440                       		neg.w	d0
0000C556 D041                       		add.w	d1,d0
0000C558 E208                       		lsr.b	#1,d0
0000C55A 0640 0020                  		addi.w	#$20,d0
0000C55E                            
0000C55E                            loc_B526:
0000C55E 6000 0000                  		bra.w	loc_B5EE
0000C562                            ; ===========================================================================
0000C562                            
0000C562                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000C562 0828 0003 0028             		btst	#3,$28(a0)
0000C568 6700                       		beq.s	loc_B53E
0000C56A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C56E 0440 0010                  		subi.w	#$10,d0
0000C572 6000 0000                  		bra.w	loc_B5EE
0000C576                            ; ===========================================================================
0000C576                            
0000C576                            loc_B53E:
0000C576 0828 0003 0022             		btst	#3,$22(a0)
0000C57C 6600                       		bne.s	loc_B54E
0000C57E 08A8 0000 0034             		bclr	#0,$34(a0)
0000C584 6000                       		bra.s	loc_B582
0000C586                            ; ===========================================================================
0000C586                            
0000C586                            loc_B54E:
0000C586 4A28 0034                  		tst.b	$34(a0)
0000C58A 6600                       		bne.s	loc_B582
0000C58C 117C 0001 0034             		move.b	#1,$34(a0)
0000C592 08E8 0000 0035             		bset	#0,$35(a0)
0000C598 6700                       		beq.s	loc_B582
0000C59A 08E8 0007 0034             		bset	#7,$34(a0)
0000C5A0 317C 0010 0036             		move.w	#$10,$36(a0)
0000C5A6 117C 000A 0038             		move.b	#$A,$38(a0)
0000C5AC 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000C5B2 6600                       		bne.s	loc_B582
0000C5B4 317C 0040 0036             		move.w	#$40,$36(a0)
0000C5BA                            
0000C5BA                            loc_B582:
0000C5BA 4A28 0034                  		tst.b	$34(a0)
0000C5BE 6A00                       		bpl.s	loc_B5AA
0000C5C0 4A28 0038                  		tst.b	$38(a0)
0000C5C4 6700                       		beq.s	loc_B594
0000C5C6 5328 0038                  		subq.b	#1,$38(a0)
0000C5CA 6600                       		bne.s	loc_B5AA
0000C5CC                            
0000C5CC                            loc_B594:
0000C5CC 4A68 0032                  		tst.w	$32(a0)
0000C5D0 6700                       		beq.s	loc_B5A4
0000C5D2 5368 0032                  		subq.w	#1,$32(a0)
0000C5D6 5368 0036                  		subq.w	#1,$36(a0)
0000C5DA 6600                       		bne.s	loc_B5AA
0000C5DC                            
0000C5DC                            loc_B5A4:
0000C5DC 08A8 0007 0034             		bclr	#7,$34(a0)
0000C5E2                            
0000C5E2                            loc_B5AA:
0000C5E2 3028 0032                  		move.w	$32(a0),d0
0000C5E6 6000                       		bra.s	loc_B5EE
0000C5E8                            ; ===========================================================================
0000C5E8                            
0000C5E8                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000C5E8 0828 0003 0028             		btst	#3,$28(a0)
0000C5EE 6700                       		beq.s	Obj30_ChkSwitch
0000C5F0 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C5F4 0440 0010                  		subi.w	#$10,d0
0000C5F8 6000                       		bra.s	loc_B5EE
0000C5FA                            ; ===========================================================================
0000C5FA                            
0000C5FA                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000C5FA 4A28 0034                  		tst.b	$34(a0)
0000C5FE 6600                       		bne.s	loc_B5E0
0000C600 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000C604 7000                       		moveq	#0,d0
0000C606 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000C60A E848                       		lsr.w	#4,d0		; read only the	first nybble
0000C60C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000C610 6700                       		beq.s	loc_B5EA	; if not, branch
0000C612 117C 0001 0034             		move.b	#1,$34(a0)
0000C618                            
0000C618                            loc_B5E0:
0000C618 4A68 0032                  		tst.w	$32(a0)
0000C61C 6700                       		beq.s	loc_B5EA
0000C61E 5568 0032                  		subq.w	#2,$32(a0)
0000C622                            
0000C622                            loc_B5EA:
0000C622 3028 0032                  		move.w	$32(a0),d0
0000C626                            
0000C626                            loc_B5EE:
0000C626 3228 0030                  		move.w	$30(a0),d1
0000C62A 9240                       		sub.w	d0,d1
0000C62C 3141 000C                  		move.w	d1,$C(a0)
0000C630 4E75                       		rts	
0000C632                            ; ===========================================================================
0000C632                            ; ---------------------------------------------------------------------------
0000C632                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C632                            ; ---------------------------------------------------------------------------
0000C632                            Map_obj30:
0000C632                            	include "_maps\obj30.asm"
0000C632                            ; ---------------------------------------------------------------------------
0000C632                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C632                            ; ---------------------------------------------------------------------------
0000C632 0000                       		dc.w byte_B600-Map_obj30
0000C634 0000                       		dc.w byte_B63D-Map_obj30
0000C636 0000                       		dc.w byte_B648-Map_obj30
0000C638 0C                         byte_B600:	dc.b $C
0000C639 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000C63E B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000C643 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000C648 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000C64D E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000C652 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000C657 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000C65C 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000C661 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000C666 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000C66B 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000C670 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000C675 02                         byte_B63D:	dc.b 2
0000C676 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000C67B 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000C680 0A                         byte_B648:	dc.b $A
0000C681 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000C686 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000C68B D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000C690 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000C695 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000C69A F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000C69F 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000C6A4 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000C6A9 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000C6AE 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000C6B4 00                         		even
0000C6B4 00                         		even
0000C6B4                            
0000C6B4                            ; ===========================================================================
0000C6B4                            ; ---------------------------------------------------------------------------
0000C6B4                            ; Object 31 - stomping metal blocks on chains (MZ)
0000C6B4                            ; ---------------------------------------------------------------------------
0000C6B4                            
0000C6B4                            Obj31:					; XREF: Obj_Index
0000C6B4 7000                       		moveq	#0,d0
0000C6B6 1028 0024                  		move.b	$24(a0),d0
0000C6BA 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000C6BE 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000C6C2                            ; ===========================================================================
0000C6C2 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000C6C4 0000                       		dc.w loc_B798-Obj31_Index
0000C6C6 0000                       		dc.w loc_B7FE-Obj31_Index
0000C6C8 0000                       		dc.w Obj31_Display2-Obj31_Index
0000C6CA 0000                       		dc.w loc_B7E2-Obj31_Index
0000C6CC                            
0000C6CC 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000C6CE 0100                       		dc.b 1,	0
0000C6D0                            
0000C6D0 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000C6D3 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000C6D6 08CC 03                    		dc.b 8,	$CC, 3
0000C6D9 06F0 02                    		dc.b 6,	$F0, 2
0000C6DC                            
0000C6DC 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000C6E0 5000 7800                  		dc.w $5000, $7800
0000C6E4 3800 5800                  		dc.w $3800, $5800
0000C6E8 B800                       		dc.w $B800
0000C6EA                            ; ===========================================================================
0000C6EA                            
0000C6EA                            Obj31_Main:				; XREF: Obj31_Index
0000C6EA 7000                       		moveq	#0,d0
0000C6EC 1028 0028                  		move.b	$28(a0),d0
0000C6F0 6A00                       		bpl.s	loc_B6CE
0000C6F2 0240 007F                  		andi.w	#$7F,d0
0000C6F6 D040                       		add.w	d0,d0
0000C6F8 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000C6FC 115A 003A                  		move.b	(a2)+,$3A(a0)
0000C700 101A                       		move.b	(a2)+,d0
0000C702 1140 0028                  		move.b	d0,$28(a0)
0000C706                            
0000C706                            loc_B6CE:
0000C706 0200 000F                  		andi.b	#$F,d0
0000C70A D040                       		add.w	d0,d0
0000C70C 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C710 4A40                       		tst.w	d0
0000C712 6600                       		bne.s	loc_B6E0
0000C714 3142 0032                  		move.w	d2,$32(a0)
0000C718                            
0000C718                            loc_B6E0:
0000C718 45F9 0000 C6D0             		lea	(Obj31_Var).l,a2
0000C71E 2248                       		movea.l	a0,a1
0000C720 7203                       		moveq	#3,d1
0000C722 6000                       		bra.s	Obj31_MakeStomper
0000C724                            ; ===========================================================================
0000C724                            
0000C724                            Obj31_Loop:
0000C724 6100 0000                  		bsr.w	SingleObjLoad2
0000C728 6600 0000                  		bne.w	Obj31_SetSize
0000C72C                            
0000C72C                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C72C 135A 0024                  		move.b	(a2)+,$24(a1)
0000C730 12BC 0031                  		move.b	#$31,0(a1)
0000C734 3368 0008 0008             		move.w	8(a0),8(a1)
0000C73A 101A                       		move.b	(a2)+,d0
0000C73C 4880                       		ext.w	d0
0000C73E D068 000C                  		add.w	$C(a0),d0
0000C742 3340 000C                  		move.w	d0,$C(a1)
0000C746 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C74E 337C 0300 0002             		move.w	#$300,2(a1)
0000C754 137C 0004 0001             		move.b	#4,1(a1)
0000C75A 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C760 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C766 137C 0010 0019             		move.b	#$10,$19(a1)
0000C76C 3342 0034                  		move.w	d2,$34(a1)
0000C770 137C 0004 0018             		move.b	#4,$18(a1)
0000C776 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C77A 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C780 6600                       		bne.s	loc_B76A
0000C782 5341                       		subq.w	#1,d1
0000C784 1028 0028                  		move.b	$28(a0),d0
0000C788 0240 00F0                  		andi.w	#$F0,d0
0000C78C 0C40 0020                  		cmpi.w	#$20,d0
0000C790 679A                       		beq.s	Obj31_MakeStomper
0000C792 137C 0038 0019             		move.b	#$38,$19(a1)
0000C798 137C 0090 0020             		move.b	#$90,$20(a1)
0000C79E 5241                       		addq.w	#1,d1
0000C7A0                            
0000C7A0                            loc_B76A:
0000C7A0 2348 003C                  		move.l	a0,$3C(a1)
0000C7A4 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C7A8                            
0000C7A8 137C 0003 0018             		move.b	#3,$18(a1)
0000C7AE                            
0000C7AE                            Obj31_SetSize:
0000C7AE 7000                       		moveq	#0,d0
0000C7B0 1028 0028                  		move.b	$28(a0),d0
0000C7B4 E648                       		lsr.w	#3,d0
0000C7B6 0200 000E                  		andi.b	#$E,d0
0000C7BA 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C7BE 115A 0019                  		move.b	(a2)+,$19(a0)
0000C7C2 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C7C6 6000                       		bra.s	loc_B798
0000C7C8                            ; ===========================================================================
0000C7C8 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C7CA 3009                       		dc.b $30, 9
0000C7CC 100A                       		dc.b $10, $A
0000C7CE                            ; ===========================================================================
0000C7CE                            
0000C7CE                            loc_B798:				; XREF: Obj31_Index
0000C7CE 6100 0000                  		bsr.w	Obj31_Types
0000C7D2 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C7D8 7200                       		moveq	#0,d1
0000C7DA 1228 0019                  		move.b	$19(a0),d1
0000C7DE 0641 000B                  		addi.w	#$B,d1
0000C7E2 343C 000C                  		move.w	#$C,d2
0000C7E6 363C 000D                  		move.w	#$D,d3
0000C7EA 3828 0008                  		move.w	8(a0),d4
0000C7EE 6100 0000                  		bsr.w	SolidObject
0000C7F2 0828 0003 0022             		btst	#3,$22(a0)
0000C7F8 6700                       		beq.s	Obj31_Display
0000C7FA 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C800 6400                       		bcc.s	Obj31_Display
0000C802 2448                       		movea.l	a0,a2
0000C804 41F8 D000                  		lea	($FFFFD000).w,a0
0000C808 4EB9 0000 0000             		jsr	KillSonic
0000C80E 204A                       		movea.l	a2,a0
0000C810                            
0000C810                            Obj31_Display:
0000C810 6100 0000                  		bsr.w	DisplaySprite
0000C814 6000 0000                  		bra.w	Obj31_ChkDel
0000C818                            ; ===========================================================================
0000C818                            
0000C818                            loc_B7E2:				; XREF: Obj31_Index
0000C818 117C 0080 0016             		move.b	#$80,$16(a0)
0000C81E 08E8 0004 0001             		bset	#4,1(a0)
0000C824 2268 003C                  		movea.l	$3C(a0),a1
0000C828 1029 0032                  		move.b	$32(a1),d0
0000C82C EA08                       		lsr.b	#5,d0
0000C82E 5600                       		addq.b	#3,d0
0000C830 1140 001A                  		move.b	d0,$1A(a0)
0000C834                            
0000C834                            loc_B7FE:				; XREF: Obj31_Index
0000C834 2268 003C                  		movea.l	$3C(a0),a1
0000C838 7000                       		moveq	#0,d0
0000C83A 1029 0032                  		move.b	$32(a1),d0
0000C83E D068 0030                  		add.w	$30(a0),d0
0000C842 3140 000C                  		move.w	d0,$C(a0)
0000C846                            
0000C846                            Obj31_Display2:				; XREF: Obj31_Index
0000C846 6100 0000                  		bsr.w	DisplaySprite
0000C84A                            
0000C84A                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C84A 3028 0008                  		move.w	8(a0),d0
0000C84E 0240 FF80                  		andi.w	#$FF80,d0
0000C852 3238 F700                  		move.w	($FFFFF700).w,d1
0000C856 0441 0080                  		subi.w	#$80,d1
0000C85A 0241 FF80                  		andi.w	#$FF80,d1
0000C85E 9041                       		sub.w	d1,d0
0000C860 0C40 0280                  		cmpi.w	#$280,d0
0000C864 6200 0000                  		bhi.w	DeleteObject
0000C868 4E75                       		rts	
0000C86A                            ; ===========================================================================
0000C86A                            
0000C86A                            Obj31_Types:				; XREF: loc_B798
0000C86A 1028 0028                  		move.b	$28(a0),d0
0000C86E 0240 000F                  		andi.w	#$F,d0
0000C872 D040                       		add.w	d0,d0
0000C874 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C878 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C87C                            ; ===========================================================================
0000C87C 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C87E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C880 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C882 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C884 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C886 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C888 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C88A                            ; ===========================================================================
0000C88A                            
0000C88A                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C88A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C88E 7000                       		moveq	#0,d0
0000C890 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C894 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C898 6700                       		beq.s	loc_B8A8	; if not, branch
0000C89A 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C89E 6A00                       		bpl.s	loc_B872
0000C8A0 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C8A6 6700                       		beq.s	loc_B8A0
0000C8A8                            
0000C8A8                            loc_B872:
0000C8A8 4A68 0032                  		tst.w	$32(a0)
0000C8AC 6700                       		beq.s	loc_B8A0
0000C8AE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C8B2 0200 000F                  		andi.b	#$F,d0
0000C8B6 6600                       		bne.s	loc_B892
0000C8B8 4A28 0001                  		tst.b	1(a0)
0000C8BC 6A00                       		bpl.s	loc_B892
0000C8BE 303C 00C7                  		move.w	#$C7,d0
0000C8C2 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C8C8                            
0000C8C8                            loc_B892:
0000C8C8 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C8CE 6400                       		bcc.s	Obj31_Restart
0000C8D0 317C 0000 0032             		move.w	#0,$32(a0)
0000C8D6                            
0000C8D6                            loc_B8A0:
0000C8D6 317C 0000 0012             		move.w	#0,$12(a0)
0000C8DC 6000                       		bra.s	Obj31_Restart
0000C8DE                            ; ===========================================================================
0000C8DE                            
0000C8DE                            loc_B8A8:				; XREF: Obj31_Type00
0000C8DE 3228 0034                  		move.w	$34(a0),d1
0000C8E2 B268 0032                  		cmp.w	$32(a0),d1
0000C8E6 6700                       		beq.s	Obj31_Restart
0000C8E8 3028 0012                  		move.w	$12(a0),d0
0000C8EC 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C8F2 D168 0032                  		add.w	d0,$32(a0)
0000C8F6 B268 0032                  		cmp.w	$32(a0),d1
0000C8FA 6200                       		bhi.s	Obj31_Restart
0000C8FC 3141 0032                  		move.w	d1,$32(a0)
0000C900 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C906 4A28 0001                  		tst.b	1(a0)
0000C90A 6A00                       		bpl.s	Obj31_Restart
0000C90C 303C 00BD                  		move.w	#$BD,d0
0000C910 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C916                            
0000C916                            Obj31_Restart:
0000C916 7000                       		moveq	#0,d0
0000C918 1028 0032                  		move.b	$32(a0),d0
0000C91C D068 0030                  		add.w	$30(a0),d0
0000C920 3140 000C                  		move.w	d0,$C(a0)
0000C924 4E75                       		rts	
0000C926                            ; ===========================================================================
0000C926                            
0000C926                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C926 4A68 0036                  		tst.w	$36(a0)
0000C92A 6700                       		beq.s	loc_B938
0000C92C 4A68 0038                  		tst.w	$38(a0)
0000C930 6700                       		beq.s	loc_B902
0000C932 5368 0038                  		subq.w	#1,$38(a0)
0000C936 6000                       		bra.s	loc_B97C
0000C938                            ; ===========================================================================
0000C938                            
0000C938                            loc_B902:
0000C938 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C93C 0200 000F                  		andi.b	#$F,d0
0000C940 6600                       		bne.s	loc_B91C
0000C942 4A28 0001                  		tst.b	1(a0)
0000C946 6A00                       		bpl.s	loc_B91C
0000C948 303C 00C7                  		move.w	#$C7,d0
0000C94C 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C952                            
0000C952                            loc_B91C:
0000C952 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C958 6400                       		bcc.s	loc_B97C
0000C95A 317C 0000 0032             		move.w	#0,$32(a0)
0000C960 317C 0000 0012             		move.w	#0,$12(a0)
0000C966 317C 0000 0036             		move.w	#0,$36(a0)
0000C96C 6000                       		bra.s	loc_B97C
0000C96E                            ; ===========================================================================
0000C96E                            
0000C96E                            loc_B938:				; XREF: Obj31_Type01
0000C96E 3228 0034                  		move.w	$34(a0),d1
0000C972 B268 0032                  		cmp.w	$32(a0),d1
0000C976 6700                       		beq.s	loc_B97C
0000C978 3028 0012                  		move.w	$12(a0),d0
0000C97C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C982 D168 0032                  		add.w	d0,$32(a0)
0000C986 B268 0032                  		cmp.w	$32(a0),d1
0000C98A 6200                       		bhi.s	loc_B97C
0000C98C 3141 0032                  		move.w	d1,$32(a0)
0000C990 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C996 317C 0001 0036             		move.w	#1,$36(a0)
0000C99C 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C9A2 4A28 0001                  		tst.b	1(a0)
0000C9A6 6A00                       		bpl.s	loc_B97C
0000C9A8 303C 00BD                  		move.w	#$BD,d0
0000C9AC 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C9B2                            
0000C9B2                            loc_B97C:
0000C9B2 6000 FF62                  		bra.w	Obj31_Restart
0000C9B6                            ; ===========================================================================
0000C9B6                            
0000C9B6                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C9B6 3038 D008                  		move.w	($FFFFD008).w,d0
0000C9BA 9068 0008                  		sub.w	8(a0),d0
0000C9BE 6400                       		bcc.s	loc_B98C
0000C9C0 4440                       		neg.w	d0
0000C9C2                            
0000C9C2                            loc_B98C:
0000C9C2 0C40 0090                  		cmpi.w	#$90,d0
0000C9C6 6400                       		bcc.s	loc_B996
0000C9C8 5228 0028                  		addq.b	#1,$28(a0)
0000C9CC                            
0000C9CC                            loc_B996:
0000C9CC 6000 FF48                  		bra.w	Obj31_Restart
0000C9D0                            ; ===========================================================================
0000C9D0                            ; ---------------------------------------------------------------------------
0000C9D0                            ; Object 45 - spiked metal block from beta version (MZ)
0000C9D0                            ; ---------------------------------------------------------------------------
0000C9D0                            
0000C9D0                            Obj45:					; XREF: Obj_Index
0000C9D0 7000                       		moveq	#0,d0
0000C9D2 1028 0024                  		move.b	$24(a0),d0
0000C9D6 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C9DA 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C9DE                            ; ===========================================================================
0000C9DE 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C9E0 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C9E2 0000                       		dc.w loc_BA8E-Obj45_Index
0000C9E4 0000                       		dc.w Obj45_Display-Obj45_Index
0000C9E6 0000                       		dc.w loc_BA7A-Obj45_Index
0000C9E8                            
0000C9E8 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C9EB 04E4 01                    		dc.b	4, $E4,	  1
0000C9EE 0834 03                    		dc.b	8, $34,	  3
0000C9F1 0628 02                    		dc.b	6, $28,	  2
0000C9F4                            
0000C9F4 3800                       word_B9BE:	dc.w $3800
0000C9F6 A000                       		dc.w -$6000
0000C9F8 5000                       		dc.w $5000
0000C9FA                            ; ===========================================================================
0000C9FA                            
0000C9FA                            Obj45_Main:				; XREF: Obj45_Index
0000C9FA 7000                       		moveq	#0,d0
0000C9FC 1028 0028                  		move.b	$28(a0),d0
0000CA00 D040                       		add.w	d0,d0
0000CA02 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000CA06 45F9 0000 C9E8             		lea	(Obj45_Var).l,a2
0000CA0C 2248                       		movea.l	a0,a1
0000CA0E 7203                       		moveq	#3,d1
0000CA10 6000                       		bra.s	Obj45_Load
0000CA12                            ; ===========================================================================
0000CA12                            
0000CA12                            Obj45_Loop:
0000CA12 6100 0000                  		bsr.w	SingleObjLoad2
0000CA16 6600                       		bne.s	loc_BA52
0000CA18                            
0000CA18                            Obj45_Load:				; XREF: Obj45_Main
0000CA18 135A 0024                  		move.b	(a2)+,$24(a1)
0000CA1C 12BC 0045                  		move.b	#$45,0(a1)
0000CA20 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CA26 101A                       		move.b	(a2)+,d0
0000CA28 4880                       		ext.w	d0
0000CA2A D068 0008                  		add.w	8(a0),d0
0000CA2E 3340 0008                  		move.w	d0,8(a1)
0000CA32 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000CA3A 337C 0300 0002             		move.w	#$300,2(a1)
0000CA40 137C 0004 0001             		move.b	#4,1(a1)
0000CA46 3369 0008 0030             		move.w	8(a1),$30(a1)
0000CA4C 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000CA52 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CA58 137C 0020 0019             		move.b	#$20,$19(a1)
0000CA5E 3342 0034                  		move.w	d2,$34(a1)
0000CA62 137C 0004 0018             		move.b	#4,$18(a1)
0000CA68 0C12 0001                  		cmpi.b	#1,(a2)
0000CA6C 6600                       		bne.s	loc_BA40
0000CA6E 137C 0091 0020             		move.b	#$91,$20(a1)
0000CA74                            
0000CA74                            loc_BA40:
0000CA74 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CA78 2348 003C                  		move.l	a0,$3C(a1)
0000CA7C 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000CA80                            
0000CA80 137C 0003 0018             		move.b	#3,$18(a1)
0000CA86                            
0000CA86                            loc_BA52:
0000CA86 117C 0010 0019             		move.b	#$10,$19(a0)
0000CA8C                            
0000CA8C                            Obj45_Solid:				; XREF: Obj45_Index
0000CA8C 3F28 0008                  		move.w	8(a0),-(sp)
0000CA90 6100 0000                  		bsr.w	Obj45_Move
0000CA94 323C 0017                  		move.w	#$17,d1
0000CA98 343C 0020                  		move.w	#$20,d2
0000CA9C 363C 0020                  		move.w	#$20,d3
0000CAA0 381F                       		move.w	(sp)+,d4
0000CAA2 6100 0000                  		bsr.w	SolidObject
0000CAA6 6100 0000                  		bsr.w	DisplaySprite
0000CAAA 6000 0000                  		bra.w	Obj45_ChkDel
0000CAAE                            ; ===========================================================================
0000CAAE                            
0000CAAE                            loc_BA7A:				; XREF: Obj45_Index
0000CAAE 2268 003C                  		movea.l	$3C(a0),a1
0000CAB2 1029 0032                  		move.b	$32(a1),d0
0000CAB6 0600 0010                  		addi.b	#$10,d0
0000CABA EA08                       		lsr.b	#5,d0
0000CABC 5600                       		addq.b	#3,d0
0000CABE 1140 001A                  		move.b	d0,$1A(a0)
0000CAC2                            
0000CAC2                            loc_BA8E:				; XREF: Obj45_Index
0000CAC2 2268 003C                  		movea.l	$3C(a0),a1
0000CAC6 7000                       		moveq	#0,d0
0000CAC8 1029 0032                  		move.b	$32(a1),d0
0000CACC 4440                       		neg.w	d0
0000CACE D068 0030                  		add.w	$30(a0),d0
0000CAD2 3140 0008                  		move.w	d0,8(a0)
0000CAD6                            
0000CAD6                            Obj45_Display:				; XREF: Obj45_Index
0000CAD6 6100 0000                  		bsr.w	DisplaySprite
0000CADA                            
0000CADA                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000CADA 3028 003A                  		move.w	$3A(a0),d0
0000CADE 0240 FF80                  		andi.w	#$FF80,d0
0000CAE2 3238 F700                  		move.w	($FFFFF700).w,d1
0000CAE6 0441 0080                  		subi.w	#$80,d1
0000CAEA 0241 FF80                  		andi.w	#$FF80,d1
0000CAEE 9041                       		sub.w	d1,d0
0000CAF0 0C40 0280                  		cmpi.w	#$280,d0
0000CAF4 6200 0000                  		bhi.w	DeleteObject
0000CAF8 4E75                       		rts	
0000CAFA                            
0000CAFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CAFA                            
0000CAFA                            
0000CAFA                            Obj45_Move:				; XREF: Obj45_Solid
0000CAFA 7000                       		moveq	#0,d0
0000CAFC 1028 0028                  		move.b	$28(a0),d0
0000CB00 D040                       		add.w	d0,d0
0000CB02 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000CB06 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000CB0A                            ; End of function Obj45_Move
0000CB0A                            
0000CB0A                            ; ===========================================================================
0000CB0A 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000CB0C 0000                       		dc.w loc_BADA-off_BAD6
0000CB0E                            ; ===========================================================================
0000CB0E                            
0000CB0E                            loc_BADA:				; XREF: off_BAD6
0000CB0E 4A68 0036                  		tst.w	$36(a0)
0000CB12 6700                       		beq.s	loc_BB08
0000CB14 4A68 0038                  		tst.w	$38(a0)
0000CB18 6700                       		beq.s	loc_BAEC
0000CB1A 5368 0038                  		subq.w	#1,$38(a0)
0000CB1E 6000                       		bra.s	loc_BB3C
0000CB20                            ; ===========================================================================
0000CB20                            
0000CB20                            loc_BAEC:
0000CB20 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CB26 6400                       		bcc.s	loc_BB3C
0000CB28 317C 0000 0032             		move.w	#0,$32(a0)
0000CB2E 317C 0000 0010             		move.w	#0,$10(a0)
0000CB34 317C 0000 0036             		move.w	#0,$36(a0)
0000CB3A 6000                       		bra.s	loc_BB3C
0000CB3C                            ; ===========================================================================
0000CB3C                            
0000CB3C                            loc_BB08:				; XREF: loc_BADA
0000CB3C 3228 0034                  		move.w	$34(a0),d1
0000CB40 B268 0032                  		cmp.w	$32(a0),d1
0000CB44 6700                       		beq.s	loc_BB3C
0000CB46 3028 0010                  		move.w	$10(a0),d0
0000CB4A 0668 0070 0010             		addi.w	#$70,$10(a0)
0000CB50 D168 0032                  		add.w	d0,$32(a0)
0000CB54 B268 0032                  		cmp.w	$32(a0),d1
0000CB58 6200                       		bhi.s	loc_BB3C
0000CB5A 3141 0032                  		move.w	d1,$32(a0)
0000CB5E 317C 0000 0010             		move.w	#0,$10(a0)
0000CB64 317C 0001 0036             		move.w	#1,$36(a0)
0000CB6A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000CB70                            
0000CB70                            loc_BB3C:
0000CB70 7000                       		moveq	#0,d0
0000CB72 1028 0032                  		move.b	$32(a0),d0
0000CB76 4440                       		neg.w	d0
0000CB78 D068 0030                  		add.w	$30(a0),d0
0000CB7C 3140 0008                  		move.w	d0,8(a0)
0000CB80 4E75                       		rts	
0000CB82                            ; ===========================================================================
0000CB82                            ; ---------------------------------------------------------------------------
0000CB82                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CB82                            ; ---------------------------------------------------------------------------
0000CB82                            Map_obj31:
0000CB82                            	include "_maps\obj31.asm"
0000CB82                            ; ---------------------------------------------------------------------------
0000CB82                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CB82                            ; ---------------------------------------------------------------------------
0000CB82 0000                       		dc.w byte_BB64-Map_obj31
0000CB84 0000                       		dc.w byte_BB7E-Map_obj31
0000CB86 0000                       		dc.w byte_BB98-Map_obj31
0000CB88 0000                       		dc.w byte_BB9E-Map_obj31
0000CB8A 0000                       		dc.w byte_BBA9-Map_obj31
0000CB8C 0000                       		dc.w byte_BBBE-Map_obj31
0000CB8E 0000                       		dc.w byte_BBDD-Map_obj31
0000CB90 0000                       		dc.w byte_BC06-Map_obj31
0000CB92 0000                       		dc.w byte_BC06-Map_obj31
0000CB94 0000                       		dc.w byte_BC39-Map_obj31
0000CB96 0000                       		dc.w byte_BC53-Map_obj31
0000CB98 05                         byte_BB64:	dc.b 5
0000CB99 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000CB9E F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000CBA3 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CBA8 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000CBAD F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000CBB2 05                         byte_BB7E:	dc.b 5
0000CBB3 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000CBB8 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000CBBD F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000CBC2 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000CBC7 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000CBCC 01                         byte_BB98:	dc.b 1
0000CBCD DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000CBD2 02                         byte_BB9E:	dc.b 2
0000CBD3 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CBD8 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CBDD 04                         byte_BBA9:	dc.b 4
0000CBDE E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CBE3 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CBE8 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CBED 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CBF2 06                         byte_BBBE:	dc.b 6
0000CBF3 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CBF8 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CBFD E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CC02 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CC07 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CC0C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CC11 08                         byte_BBDD:	dc.b 8
0000CC12 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CC17 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CC1C C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CC21 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CC26 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CC2B F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CC30 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CC35 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CC3A 0A                         byte_BC06:	dc.b $A
0000CC3B 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000CC40 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000CC45 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CC4A B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CC4F C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CC54 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CC59 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CC5E F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CC63 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CC68 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CC6D 05                         byte_BC39:	dc.b 5
0000CC6E F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000CC73 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000CC78 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000CC7D F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000CC82 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CC87 01                         byte_BC53:	dc.b 1
0000CC88 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000CC8E 00                         		even
0000CC8E 00                         		even
0000CC8E                            
0000CC8E                            ; ---------------------------------------------------------------------------
0000CC8E                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CC8E                            ; ---------------------------------------------------------------------------
0000CC8E                            Map_obj45:
0000CC8E                            	include "_maps\obj45.asm"
0000CC8E                            ; ---------------------------------------------------------------------------
0000CC8E                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CC8E                            ; ---------------------------------------------------------------------------
0000CC8E 0000                       		dc.w byte_BC6C-Map_obj45
0000CC90 0000                       		dc.w byte_BC7C-Map_obj45
0000CC92 0000                       		dc.w byte_BC8C-Map_obj45
0000CC94 0000                       		dc.w byte_BC92-Map_obj45
0000CC96 0000                       		dc.w byte_BC9D-Map_obj45
0000CC98 0000                       		dc.w byte_BCB2-Map_obj45
0000CC9A 0000                       		dc.w byte_BCD1-Map_obj45
0000CC9C 0000                       		dc.w byte_BCFA-Map_obj45
0000CC9E 0000                       		dc.w byte_BCFA-Map_obj45
0000CCA0 03                         byte_BC6C:	dc.b 3
0000CCA1 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000CCA6 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000CCAB F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000CCB0 03                         byte_BC7C:	dc.b 3
0000CCB1 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000CCB6 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000CCBB 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000CCC0 01                         byte_BC8C:	dc.b 1
0000CCC1 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000CCC6 02                         byte_BC92:	dc.b 2
0000CCC7 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CCCC F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CCD1 04                         byte_BC9D:	dc.b 4
0000CCD2 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CCD7 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CCDC F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CCE1 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CCE6 06                         byte_BCB2:	dc.b 6
0000CCE7 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CCEC F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CCF1 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CCF6 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CCFB F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CD00 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CD05 08                         byte_BCD1:	dc.b 8
0000CD06 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CD0B F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CD10 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CD15 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CD1A F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CD1F F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CD24 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000CD29 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000CD2E 08                         byte_BCFA:	dc.b 8
0000CD2F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CD34 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CD39 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CD3E F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CD43 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CD48 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CD4D F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000CD52 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000CD57 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000CD5C F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000CD62 00                         		even
0000CD62 00                         		even
0000CD62                            
0000CD62                            ; ===========================================================================
0000CD62                            ; ---------------------------------------------------------------------------
0000CD62                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000CD62                            ; ---------------------------------------------------------------------------
0000CD62                            
0000CD62                            Obj32:					; XREF: Obj_Index
0000CD62 7000                       		moveq	#0,d0
0000CD64 1028 0024                  		move.b	$24(a0),d0
0000CD68 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000CD6C 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000CD70                            ; ===========================================================================
0000CD70 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000CD72 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000CD74                            ; ===========================================================================
0000CD74                            
0000CD74                            Obj32_Main:				; XREF: Obj32_Index
0000CD74 5428 0024                  		addq.b	#2,$24(a0)
0000CD78 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000CD80 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000CD86 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000CD8C 6700                       		beq.s	loc_BD60
0000CD8E 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000CD94                            
0000CD94                            loc_BD60:
0000CD94 117C 0004 0001             		move.b	#4,1(a0)
0000CD9A 117C 0010 0019             		move.b	#$10,$19(a0)
0000CDA0 117C 0004 0018             		move.b	#4,$18(a0)
0000CDA6 5668 000C                  		addq.w	#3,$C(a0)
0000CDAA                            
0000CDAA                            Obj32_Pressed:				; XREF: Obj32_Index
0000CDAA 4A28 0001                  		tst.b	1(a0)
0000CDAE 6A00                       		bpl.s	Obj32_Display
0000CDB0 323C 001B                  		move.w	#$1B,d1
0000CDB4 343C 0005                  		move.w	#5,d2
0000CDB8 363C 0005                  		move.w	#5,d3
0000CDBC 3828 0008                  		move.w	8(a0),d4
0000CDC0 6100 0000                  		bsr.w	SolidObject
0000CDC4 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000CDCA 1028 0028                  		move.b	$28(a0),d0
0000CDCE 0240 000F                  		andi.w	#$F,d0
0000CDD2 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000CDD6 47F3 0000                  		lea	(a3,d0.w),a3
0000CDDA 7600                       		moveq	#0,d3
0000CDDC 0828 0006 0028             		btst	#6,$28(a0)
0000CDE2 6700                       		beq.s	loc_BDB2
0000CDE4 7607                       		moveq	#7,d3
0000CDE6                            
0000CDE6                            loc_BDB2:
0000CDE6 4A28 0028                  		tst.b	$28(a0)
0000CDEA 6A00                       		bpl.s	loc_BDBE
0000CDEC 6100 0000                  		bsr.w	Obj32_MZBlock
0000CDF0 6600                       		bne.s	loc_BDC8
0000CDF2                            
0000CDF2                            loc_BDBE:
0000CDF2 4A28 0025                  		tst.b	$25(a0)
0000CDF6 6600                       		bne.s	loc_BDC8
0000CDF8 0793                       		bclr	d3,(a3)
0000CDFA 6000                       		bra.s	loc_BDDE
0000CDFC                            ; ===========================================================================
0000CDFC                            
0000CDFC                            loc_BDC8:
0000CDFC 4A13                       		tst.b	(a3)
0000CDFE 6600                       		bne.s	loc_BDD6
0000CE00 303C 00CD                  		move.w	#$CD,d0
0000CE04 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play switch sound
0000CE0A                            
0000CE0A                            loc_BDD6:
0000CE0A 07D3                       		bset	d3,(a3)
0000CE0C 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000CE12                            
0000CE12                            loc_BDDE:
0000CE12 0828 0005 0028             		btst	#5,$28(a0)
0000CE18 6700                       		beq.s	Obj32_Display
0000CE1A 5328 001E                  		subq.b	#1,$1E(a0)
0000CE1E 6A00                       		bpl.s	Obj32_Display
0000CE20 117C 0007 001E             		move.b	#7,$1E(a0)
0000CE26 0868 0001 001A             		bchg	#1,$1A(a0)
0000CE2C                            
0000CE2C                            Obj32_Display:
0000CE2C 6100 0000                  		bsr.w	DisplaySprite
0000CE30 3028 0008                  		move.w	8(a0),d0
0000CE34 0240 FF80                  		andi.w	#$FF80,d0
0000CE38 3238 F700                  		move.w	($FFFFF700).w,d1
0000CE3C 0441 0080                  		subi.w	#$80,d1
0000CE40 0241 FF80                  		andi.w	#$FF80,d1
0000CE44 9041                       		sub.w	d1,d0
0000CE46 0C40 0280                  		cmpi.w	#$280,d0
0000CE4A 6200 0000                  		bhi.w	Obj32_Delete
0000CE4E 4E75                       		rts	
0000CE50                            ; ===========================================================================
0000CE50                            
0000CE50                            Obj32_Delete:
0000CE50 6100 0000                  		bsr.w	DeleteObject
0000CE54 4E75                       		rts	
0000CE56                            
0000CE56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CE56                            
0000CE56                            
0000CE56                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000CE56 3F03                       		move.w	d3,-(sp)
0000CE58 3428 0008                  		move.w	8(a0),d2
0000CE5C 3628 000C                  		move.w	$C(a0),d3
0000CE60 0442 0010                  		subi.w	#$10,d2
0000CE64 5143                       		subq.w	#8,d3
0000CE66 383C 0020                  		move.w	#$20,d4
0000CE6A 3A3C 0010                  		move.w	#$10,d5
0000CE6E 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000CE72 3C3C 005F                  		move.w	#$5F,d6
0000CE76                            
0000CE76                            Obj32_MZLoop:
0000CE76 4A29 0001                  		tst.b	1(a1)
0000CE7A 6A00                       		bpl.s	loc_BE4E
0000CE7C 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000CE80 6700                       		beq.s	loc_BE5E	; if yes, branch
0000CE82                            
0000CE82                            loc_BE4E:
0000CE82 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000CE86 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000CE8A                            
0000CE8A 361F                       		move.w	(sp)+,d3
0000CE8C 7000                       		moveq	#0,d0
0000CE8E                            
0000CE8E                            locret_BE5A:
0000CE8E 4E75                       		rts	
0000CE90                            ; ===========================================================================
0000CE90 1010                       Obj32_MZData:	dc.b $10, $10
0000CE92                            ; ===========================================================================
0000CE92                            
0000CE92                            loc_BE5E:				; XREF: Obj32_MZBlock
0000CE92 7001                       		moveq	#1,d0
0000CE94 0240 003F                  		andi.w	#$3F,d0
0000CE98 D040                       		add.w	d0,d0
0000CE9A 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000CE9E 121A                       		move.b	(a2)+,d1
0000CEA0 4881                       		ext.w	d1
0000CEA2 3029 0008                  		move.w	8(a1),d0
0000CEA6 9041                       		sub.w	d1,d0
0000CEA8 9042                       		sub.w	d2,d0
0000CEAA 6400                       		bcc.s	loc_BE80
0000CEAC D241                       		add.w	d1,d1
0000CEAE D041                       		add.w	d1,d0
0000CEB0 6500                       		bcs.s	loc_BE84
0000CEB2 60CE                       		bra.s	loc_BE4E
0000CEB4                            ; ===========================================================================
0000CEB4                            
0000CEB4                            loc_BE80:
0000CEB4 B044                       		cmp.w	d4,d0
0000CEB6 62CA                       		bhi.s	loc_BE4E
0000CEB8                            
0000CEB8                            loc_BE84:
0000CEB8 121A                       		move.b	(a2)+,d1
0000CEBA 4881                       		ext.w	d1
0000CEBC 3029 000C                  		move.w	$C(a1),d0
0000CEC0 9041                       		sub.w	d1,d0
0000CEC2 9043                       		sub.w	d3,d0
0000CEC4 6400                       		bcc.s	loc_BE9A
0000CEC6 D241                       		add.w	d1,d1
0000CEC8 D041                       		add.w	d1,d0
0000CECA 6500                       		bcs.s	loc_BE9E
0000CECC 60B4                       		bra.s	loc_BE4E
0000CECE                            ; ===========================================================================
0000CECE                            
0000CECE                            loc_BE9A:
0000CECE B045                       		cmp.w	d5,d0
0000CED0 62B0                       		bhi.s	loc_BE4E
0000CED2                            
0000CED2                            loc_BE9E:
0000CED2 361F                       		move.w	(sp)+,d3
0000CED4 7001                       		moveq	#1,d0
0000CED6 4E75                       		rts	
0000CED8                            ; End of function Obj32_MZBlock
0000CED8                            
0000CED8                            ; ===========================================================================
0000CED8                            ; ---------------------------------------------------------------------------
0000CED8                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000CED8                            ; ---------------------------------------------------------------------------
0000CED8                            Map_obj32:
0000CED8                            	include "_maps\obj32.asm"
0000CED8                            ; ---------------------------------------------------------------------------
0000CED8                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000CED8                            ; ---------------------------------------------------------------------------
0000CED8 0000                       		dc.w byte_BEAC-Map_obj32
0000CEDA 0000                       		dc.w byte_BEB7-Map_obj32
0000CEDC 0000                       		dc.w byte_BEC2-Map_obj32
0000CEDE 0000                       		dc.w byte_BEB7-Map_obj32
0000CEE0 02                         byte_BEAC:	dc.b 2
0000CEE1 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000CEE6 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000CEEB 02                         byte_BEB7:	dc.b 2
0000CEEC F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000CEF1 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000CEF6 02                         byte_BEC2:	dc.b 2
0000CEF7 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000CEFC F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000CF01 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000CF06                            		even
0000CF06                            		even
0000CF06                            
0000CF06                            ; ===========================================================================
0000CF06                            ; ---------------------------------------------------------------------------
0000CF06                            ; Object 33 - pushable blocks (MZ, LZ)
0000CF06                            ; ---------------------------------------------------------------------------
0000CF06                            
0000CF06                            Obj33:					; XREF: Obj_Index
0000CF06 7000                       		moveq	#0,d0
0000CF08 1028 0024                  		move.b	$24(a0),d0
0000CF0C 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000CF10 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000CF14                            ; ===========================================================================
0000CF14 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000CF16 0000                       		dc.w loc_BF6E-Obj33_Index
0000CF18 0000                       		dc.w loc_C02C-Obj33_Index
0000CF1A                            
0000CF1A 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000CF1C 4001                       		dc.b $40, 1
0000CF1E                            ; ===========================================================================
0000CF1E                            
0000CF1E                            Obj33_Main:				; XREF: Obj33_Index
0000CF1E 5428 0024                  		addq.b	#2,$24(a0)
0000CF22 117C 000F 0016             		move.b	#$F,$16(a0)
0000CF28 117C 000F 0017             		move.b	#$F,$17(a0)
0000CF2E 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000CF36 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000CF3C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000CF42 6600                       		bne.s	loc_BF16
0000CF44 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000CF4A                            
0000CF4A                            loc_BF16:
0000CF4A 117C 0004 0001             		move.b	#4,1(a0)
0000CF50 117C 0003 0018             		move.b	#3,$18(a0)
0000CF56 3168 0008 0034             		move.w	8(a0),$34(a0)
0000CF5C 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000CF62 7000                       		moveq	#0,d0
0000CF64 1028 0028                  		move.b	$28(a0),d0
0000CF68 D040                       		add.w	d0,d0
0000CF6A 0240 000E                  		andi.w	#$E,d0
0000CF6E 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000CF72 115A 0019                  		move.b	(a2)+,$19(a0)
0000CF76 115A 001A                  		move.b	(a2)+,$1A(a0)
0000CF7A 4A28 0028                  		tst.b	$28(a0)
0000CF7E 6700                       		beq.s	Obj33_ChkGone
0000CF80 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000CF86                            
0000CF86                            Obj33_ChkGone:
0000CF86 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CF8A 7000                       		moveq	#0,d0
0000CF8C 1028 0023                  		move.b	$23(a0),d0
0000CF90 6700                       		beq.s	loc_BF6E
0000CF92 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000CF98 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000CF9E 6600 0000                  		bne.w	DeleteObject
0000CFA2                            
0000CFA2                            loc_BF6E:				; XREF: Obj33_Index
0000CFA2 4A28 0032                  		tst.b	$32(a0)
0000CFA6 6600 0000                  		bne.w	loc_C046
0000CFAA 7200                       		moveq	#0,d1
0000CFAC 1228 0019                  		move.b	$19(a0),d1
0000CFB0 0641 000B                  		addi.w	#$B,d1
0000CFB4 343C 0010                  		move.w	#$10,d2
0000CFB8 363C 0011                  		move.w	#$11,d3
0000CFBC 3828 0008                  		move.w	8(a0),d4
0000CFC0 6100 0000                  		bsr.w	loc_C186
0000CFC4 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000CFCA 6600                       		bne.s	loc_BFC6	; if not, branch
0000CFCC 08A8 0007 0028             		bclr	#7,$28(a0)
0000CFD2 3028 0008                  		move.w	8(a0),d0
0000CFD6 0C40 0A20                  		cmpi.w	#$A20,d0
0000CFDA 6500                       		bcs.s	loc_BFC6
0000CFDC 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000CFE0 6400                       		bcc.s	loc_BFC6
0000CFE2 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000CFE6 0440 001C                  		subi.w	#$1C,d0
0000CFEA 3140 000C                  		move.w	d0,$C(a0)
0000CFEE 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000CFF4 08E8 0007 0028             		bset	#7,$28(a0)
0000CFFA                            
0000CFFA                            loc_BFC6:
0000CFFA 3028 0008                  		move.w	8(a0),d0
0000CFFE 0240 FF80                  		andi.w	#$FF80,d0
0000D002 3238 F700                  		move.w	($FFFFF700).w,d1
0000D006 0441 0080                  		subi.w	#$80,d1
0000D00A 0241 FF80                  		andi.w	#$FF80,d1
0000D00E 9041                       		sub.w	d1,d0
0000D010 0C40 0280                  		cmpi.w	#$280,d0
0000D014 6200                       		bhi.s	loc_BFE6
0000D016 6000 0000                  		bra.w	DisplaySprite
0000D01A                            ; ===========================================================================
0000D01A                            
0000D01A                            loc_BFE6:
0000D01A 3028 0034                  		move.w	$34(a0),d0
0000D01E 0240 FF80                  		andi.w	#$FF80,d0
0000D022 3238 F700                  		move.w	($FFFFF700).w,d1
0000D026 0441 0080                  		subi.w	#$80,d1
0000D02A 0241 FF80                  		andi.w	#$FF80,d1
0000D02E 9041                       		sub.w	d1,d0
0000D030 0C40 0280                  		cmpi.w	#$280,d0
0000D034 6200                       		bhi.s	loc_C016
0000D036 3168 0034 0008             		move.w	$34(a0),8(a0)
0000D03C 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000D042 117C 0004 0024             		move.b	#4,$24(a0)
0000D048 6000                       		bra.s	loc_C02C
0000D04A                            ; ===========================================================================
0000D04A                            
0000D04A                            loc_C016:
0000D04A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D04E 7000                       		moveq	#0,d0
0000D050 1028 0023                  		move.b	$23(a0),d0
0000D054 6700                       		beq.s	loc_C028
0000D056 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000D05C                            
0000D05C                            loc_C028:
0000D05C 6000 0000                  		bra.w	DeleteObject
0000D060                            ; ===========================================================================
0000D060                            
0000D060                            loc_C02C:				; XREF: Obj33_Index
0000D060 6100 0000                  		bsr.w	ChkObjOnScreen2
0000D064 6700                       		beq.s	locret_C044
0000D066 117C 0002 0024             		move.b	#2,$24(a0)
0000D06C 4228 0032                  		clr.b	$32(a0)
0000D070 4268 0010                  		clr.w	$10(a0)
0000D074 4268 0012                  		clr.w	$12(a0)
0000D078                            
0000D078                            locret_C044:
0000D078 4E75                       		rts	
0000D07A                            ; ===========================================================================
0000D07A                            
0000D07A                            loc_C046:				; XREF: loc_BF6E
0000D07A 3F28 0008                  		move.w	8(a0),-(sp)
0000D07E 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000D084 6400                       		bcc.s	loc_C056
0000D086 6100 0000                  		bsr.w	SpeedToPos
0000D08A                            
0000D08A                            loc_C056:
0000D08A 0828 0001 0022             		btst	#1,$22(a0)
0000D090 6700                       		beq.s	loc_C0A0
0000D092 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D098 4EB9 0000 0000             		jsr	ObjHitFloor
0000D09E 4A41                       		tst.w	d1
0000D0A0 6A00 0000                  		bpl.w	loc_C09E
0000D0A4 D368 000C                  		add.w	d1,$C(a0)
0000D0A8 4268 0012                  		clr.w	$12(a0)
0000D0AC 08A8 0001 0022             		bclr	#1,$22(a0)
0000D0B2 3011                       		move.w	(a1),d0
0000D0B4 0240 03FF                  		andi.w	#$3FF,d0
0000D0B8 0C40 016A                  		cmpi.w	#$16A,d0
0000D0BC 6500                       		bcs.s	loc_C09E
0000D0BE 3028 0030                  		move.w	$30(a0),d0
0000D0C2 E640                       		asr.w	#3,d0
0000D0C4 3140 0010                  		move.w	d0,$10(a0)
0000D0C8 117C 0001 0032             		move.b	#1,$32(a0)
0000D0CE 4268 000E                  		clr.w	$E(a0)
0000D0D2                            
0000D0D2                            loc_C09E:
0000D0D2 6000                       		bra.s	loc_C0E6
0000D0D4                            ; ===========================================================================
0000D0D4                            
0000D0D4                            loc_C0A0:
0000D0D4 4A68 0010                  		tst.w	$10(a0)
0000D0D8 6700 0000                  		beq.w	loc_C0D6
0000D0DC 6B00                       		bmi.s	loc_C0BC
0000D0DE 7600                       		moveq	#0,d3
0000D0E0 1628 0019                  		move.b	$19(a0),d3
0000D0E4 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D0EA 4A41                       		tst.w	d1		; has block touched a wall?
0000D0EC 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D0EE 6000                       		bra.s	loc_C0E6
0000D0F0                            ; ===========================================================================
0000D0F0                            
0000D0F0                            loc_C0BC:
0000D0F0 7600                       		moveq	#0,d3
0000D0F2 1628 0019                  		move.b	$19(a0),d3
0000D0F6 4643                       		not.w	d3
0000D0F8 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D0FE 4A41                       		tst.w	d1		; has block touched a wall?
0000D100 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D102 6000                       		bra.s	loc_C0E6
0000D104                            ; ===========================================================================
0000D104                            
0000D104                            Obj33_StopPush:
0000D104 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000D108 6000                       		bra.s	loc_C0E6
0000D10A                            ; ===========================================================================
0000D10A                            
0000D10A                            loc_C0D6:
0000D10A 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000D112 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000D118 6400                       		bcc.s	loc_C104
0000D11A                            
0000D11A                            loc_C0E6:
0000D11A 7200                       		moveq	#0,d1
0000D11C 1228 0019                  		move.b	$19(a0),d1
0000D120 0641 000B                  		addi.w	#$B,d1
0000D124 343C 0010                  		move.w	#$10,d2
0000D128 363C 0011                  		move.w	#$11,d3
0000D12C 381F                       		move.w	(sp)+,d4
0000D12E 6100 0000                  		bsr.w	loc_C186
0000D132 6100                       		bsr.s	Obj33_ChkLava
0000D134 6000 FEC4                  		bra.w	loc_BFC6
0000D138                            ; ===========================================================================
0000D138                            
0000D138                            loc_C104:
0000D138 381F                       		move.w	(sp)+,d4
0000D13A 43F8 D000                  		lea	($FFFFD000).w,a1
0000D13E 08A9 0003 0022             		bclr	#3,$22(a1)
0000D144 08A8 0003 0022             		bclr	#3,$22(a0)
0000D14A 6000 FECE                  		bra.w	loc_BFE6
0000D14E                            ; ===========================================================================
0000D14E                            
0000D14E                            Obj33_ChkLava:
0000D14E 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000D154 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000D156 343C FFE0                  		move.w	#-$20,d2
0000D15A 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000D160 6700                       		beq.s	Obj33_LoadLava
0000D162 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000D168 6700                       		beq.s	Obj33_LoadLava
0000D16A 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000D170 6700                       		beq.s	Obj33_LoadLava
0000D172 4E75                       		rts	
0000D174                            ; ===========================================================================
0000D174                            
0000D174                            Obj33_ChkLava2:
0000D174 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000D17A 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000D17C 343C 0020                  		move.w	#$20,d2
0000D180 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000D186 6700                       		beq.s	Obj33_LoadLava
0000D188 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000D18E 6700                       		beq.s	Obj33_LoadLava
0000D190                            
0000D190                            Obj33_NoLava:
0000D190 4E75                       		rts	
0000D192                            ; ===========================================================================
0000D192                            
0000D192                            Obj33_LoadLava:
0000D192 6100 0000                  		bsr.w	SingleObjLoad
0000D196 6600                       		bne.s	locret_C184
0000D198 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000D19C 3368 0008 0008             		move.w	8(a0),8(a1)
0000D1A2 D569 0008                  		add.w	d2,8(a1)
0000D1A6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D1AC 0669 0010 000C             		addi.w	#$10,$C(a1)
0000D1B2 2348 003C                  		move.l	a0,$3C(a1)
0000D1B6                            
0000D1B6                            locret_C184:
0000D1B6 4E75                       		rts	
0000D1B8                            ; ===========================================================================
0000D1B8                            
0000D1B8                            loc_C186:				; XREF: loc_BF6E
0000D1B8 1028 0025                  		move.b	$25(a0),d0
0000D1BC 6700 0000                  		beq.w	loc_C218
0000D1C0 5500                       		subq.b	#2,d0
0000D1C2 6600                       		bne.s	loc_C1AA
0000D1C4 6100 B318                  		bsr.w	ExitPlatform
0000D1C8 0829 0003 0022             		btst	#3,$22(a1)
0000D1CE 6600                       		bne.s	loc_C1A4
0000D1D0 4228 0025                  		clr.b	$25(a0)
0000D1D4 4E75                       		rts	
0000D1D6                            ; ===========================================================================
0000D1D6                            
0000D1D6                            loc_C1A4:
0000D1D6 3404                       		move.w	d4,d2
0000D1D8 6000 B862                  		bra.w	MvSonicOnPtfm
0000D1DC                            ; ===========================================================================
0000D1DC                            
0000D1DC                            loc_C1AA:
0000D1DC 5500                       		subq.b	#2,d0
0000D1DE 6600                       		bne.s	loc_C1F2
0000D1E0 6100 0000                  		bsr.w	SpeedToPos
0000D1E4 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D1EA 4EB9 0000 0000             		jsr	ObjHitFloor
0000D1F0 4A41                       		tst.w	d1
0000D1F2 6A00 0000                  		bpl.w	locret_C1F0
0000D1F6 D368 000C                  		add.w	d1,$C(a0)
0000D1FA 4268 0012                  		clr.w	$12(a0)
0000D1FE 4228 0025                  		clr.b	$25(a0)
0000D202 3011                       		move.w	(a1),d0
0000D204 0240 03FF                  		andi.w	#$3FF,d0
0000D208 0C40 016A                  		cmpi.w	#$16A,d0
0000D20C 6500                       		bcs.s	locret_C1F0
0000D20E 3028 0030                  		move.w	$30(a0),d0
0000D212 E640                       		asr.w	#3,d0
0000D214 3140 0010                  		move.w	d0,$10(a0)
0000D218 117C 0001 0032             		move.b	#1,$32(a0)
0000D21E 4268 000E                  		clr.w	$E(a0)
0000D222                            
0000D222                            locret_C1F0:
0000D222 4E75                       		rts	
0000D224                            ; ===========================================================================
0000D224                            
0000D224                            loc_C1F2:
0000D224 6100 0000                  		bsr.w	SpeedToPos
0000D228 3028 0008                  		move.w	8(a0),d0
0000D22C 0240 000C                  		andi.w	#$C,d0
0000D230 6600 0000                  		bne.w	locret_C2E4
0000D234 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000D23A 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000D240 4268 0010                  		clr.w	$10(a0)
0000D244 5528 0025                  		subq.b	#2,$25(a0)
0000D248 4E75                       		rts	
0000D24A                            ; ===========================================================================
0000D24A                            
0000D24A                            loc_C218:
0000D24A 6100 0000                  		bsr.w	loc_FAC8
0000D24E 4A44                       		tst.w	d4
0000D250 6700 0000                  		beq.w	locret_C2E4
0000D254 6B00 0000                  		bmi.w	locret_C2E4
0000D258 4A28 0032                  		tst.b	$32(a0)
0000D25C 6700                       		beq.s	loc_C230
0000D25E 6000 0000                  		bra.w	locret_C2E4
0000D262                            ; ===========================================================================
0000D262                            
0000D262                            loc_C230:
0000D262 4A40                       		tst.w	d0
0000D264 6700 0000                  		beq.w	locret_C2E4
0000D268 6B00                       		bmi.s	loc_C268
0000D26A 0829 0000 0022             		btst	#0,$22(a1)
0000D270 6600 0000                  		bne.w	locret_C2E4
0000D274 3F00                       		move.w	d0,-(sp)
0000D276 7600                       		moveq	#0,d3
0000D278 1628 0019                  		move.b	$19(a0),d3
0000D27C 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D282 301F                       		move.w	(sp)+,d0
0000D284 4A41                       		tst.w	d1
0000D286 6B00 0000                  		bmi.w	locret_C2E4
0000D28A 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000D292 7001                       		moveq	#1,d0
0000D294 323C 0040                  		move.w	#$40,d1
0000D298 6000                       		bra.s	loc_C294
0000D29A                            ; ===========================================================================
0000D29A                            
0000D29A                            loc_C268:
0000D29A 0829 0000 0022             		btst	#0,$22(a1)
0000D2A0 6700                       		beq.s	locret_C2E4
0000D2A2 3F00                       		move.w	d0,-(sp)
0000D2A4 7600                       		moveq	#0,d3
0000D2A6 1628 0019                  		move.b	$19(a0),d3
0000D2AA 4643                       		not.w	d3
0000D2AC 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D2B2 301F                       		move.w	(sp)+,d0
0000D2B4 4A41                       		tst.w	d1
0000D2B6 6B00                       		bmi.s	locret_C2E4
0000D2B8 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000D2C0 70FF                       		moveq	#-1,d0
0000D2C2 323C FFC0                  		move.w	#-$40,d1
0000D2C6                            
0000D2C6                            loc_C294:
0000D2C6 43F8 D000                  		lea	($FFFFD000).w,a1
0000D2CA D169 0008                  		add.w	d0,8(a1)
0000D2CE 3341 0014                  		move.w	d1,$14(a1)
0000D2D2 337C 0000 0010             		move.w	#0,$10(a1)
0000D2D8 3F00                       		move.w	d0,-(sp)
0000D2DA 303C 00A7                  		move.w	#$A7,d0
0000D2DE 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play pushing sound
0000D2E4 301F                       		move.w	(sp)+,d0
0000D2E6 4A28 0028                  		tst.b	$28(a0)
0000D2EA 6B00                       		bmi.s	locret_C2E4
0000D2EC 3F00                       		move.w	d0,-(sp)
0000D2EE 4EB9 0000 0000             		jsr	ObjHitFloor
0000D2F4 301F                       		move.w	(sp)+,d0
0000D2F6 0C41 0004                  		cmpi.w	#4,d1
0000D2FA 6F00                       		ble.s	loc_C2E0
0000D2FC 317C 0400 0010             		move.w	#$400,$10(a0)
0000D302 4A40                       		tst.w	d0
0000D304 6A00                       		bpl.s	loc_C2D8
0000D306 4468 0010                  		neg.w	$10(a0)
0000D30A                            
0000D30A                            loc_C2D8:
0000D30A 117C 0006 0025             		move.b	#6,$25(a0)
0000D310 6000                       		bra.s	locret_C2E4
0000D312                            ; ===========================================================================
0000D312                            
0000D312                            loc_C2E0:
0000D312 D368 000C                  		add.w	d1,$C(a0)
0000D316                            
0000D316                            locret_C2E4:
0000D316 4E75                       		rts	
0000D318                            ; ===========================================================================
0000D318                            ; ---------------------------------------------------------------------------
0000D318                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D318                            ; ---------------------------------------------------------------------------
0000D318                            Map_obj33:
0000D318                            	include "_maps\obj33.asm"
0000D318                            ; ---------------------------------------------------------------------------
0000D318                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D318                            ; ---------------------------------------------------------------------------
0000D318 0000                       		dc.w byte_C2EA-Map_obj33
0000D31A 0000                       		dc.w byte_C2F0-Map_obj33
0000D31C 01                         byte_C2EA:	dc.b 1
0000D31D F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000D322 04                         byte_C2F0:	dc.b 4
0000D323 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000D328 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000D32D F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000D332 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000D338 00                         		even
0000D338 00                         		even
0000D338                            
0000D338                            ; ===========================================================================
0000D338                            ; ---------------------------------------------------------------------------
0000D338                            ; Object 34 - zone title cards
0000D338                            ; ---------------------------------------------------------------------------
0000D338                            Obj34:					; XREF: Obj_Index
0000D338 7000                       		moveq	#0,d0
0000D33A 1028 0024                  		move.b	$24(a0),d0
0000D33E 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000D342 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000D346                            ; ===========================================================================
0000D346 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000D348 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000D34A 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D34C 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D34E                            ; ===========================================================================
0000D34E                            
0000D34E                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000D34E 2248                       		movea.l	a0,a1
0000D350 7000                       		moveq	#0,d0
0000D352 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D356 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000D35C 6600                       		bne.s	Obj34_CheckFZ
0000D35E 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000D360                            
0000D360                            Obj34_CheckFZ:
0000D360 3400                       		move.w	d0,d2
0000D362 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000D368 6600                       		bne.s	Obj34_LoadConfig
0000D36A 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000D36C 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000D36E                            
0000D36E                            Obj34_LoadConfig:
0000D36E 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000D374 E948                       		lsl.w	#4,d0
0000D376 D6C0                       		adda.w	d0,a3
0000D378 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000D37E 7203                       		moveq	#3,d1
0000D380                            
0000D380                            Obj34_Loop:
0000D380 12BC 0034                  		move.b	#$34,0(a1)
0000D384 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000D388 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000D38C 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000D390 335A 000A                  		move.w	(a2)+,$A(a1)
0000D394 135A 0024                  		move.b	(a2)+,$24(a1)
0000D398 101A                       		move.b	(a2)+,d0
0000D39A 6600                       		bne.s	Obj34_ActNumber
0000D39C 1002                       		move.b	d2,d0
0000D39E                            
0000D39E                            Obj34_ActNumber:
0000D39E 0C00 0007                  		cmpi.b	#7,d0
0000D3A2 6600                       		bne.s	Obj34_MakeSprite
0000D3A4 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000D3A8 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000D3AE 6600                       		bne.s	Obj34_MakeSprite
0000D3B0 5300                       		subq.b	#1,d0
0000D3B2                            
0000D3B2                            Obj34_MakeSprite:
0000D3B2 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000D3B6 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000D3BE 337C 8580 0002             		move.w	#$8580,2(a1)
0000D3C4 137C 0078 0019             		move.b	#$78,$19(a1)
0000D3CA 137C 0000 0001             		move.b	#0,1(a1)
0000D3D0 137C 0000 0018             		move.b	#0,$18(a1)
0000D3D6 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000D3DC 43E9 0040                  		lea	$40(a1),a1	; next object
0000D3E0 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000D3E4                            
0000D3E4                            Obj34_ChkPos:				; XREF: Obj34_Index
0000D3E4 7210                       		moveq	#$10,d1		; set horizontal speed
0000D3E6 3028 0030                  		move.w	$30(a0),d0
0000D3EA B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000D3EE 6700                       		beq.s	loc_C3C8	; if yes, branch
0000D3F0 6C00                       		bge.s	Obj34_Move
0000D3F2 4441                       		neg.w	d1
0000D3F4                            
0000D3F4                            Obj34_Move:
0000D3F4 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D3F8                            
0000D3F8                            loc_C3C8:
0000D3F8 3028 0008                  		move.w	8(a0),d0
0000D3FC 6B00                       		bmi.s	locret_C3D8
0000D3FE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D402 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000D404 6000 0000                  		bra.w	DisplaySprite
0000D408                            ; ===========================================================================
0000D408                            
0000D408                            locret_C3D8:
0000D408 4E75                       		rts	
0000D40A                            ; ===========================================================================
0000D40A                            
0000D40A                            Obj34_Wait:				; XREF: Obj34_Index
0000D40A 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000D40E 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000D410 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000D414 6000 0000                  		bra.w	DisplaySprite
0000D418                            ; ===========================================================================
0000D418                            
0000D418                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000D418 4A28 0001                  		tst.b	1(a0)
0000D41C 6A00                       		bpl.s	Obj34_ChangeArt
0000D41E 7220                       		moveq	#$20,d1
0000D420 3028 0032                  		move.w	$32(a0),d0
0000D424 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000D428 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000D42A 6C00                       		bge.s	Obj34_Move2
0000D42C 4441                       		neg.w	d1
0000D42E                            
0000D42E                            Obj34_Move2:
0000D42E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D432 3028 0008                  		move.w	8(a0),d0
0000D436 6B00                       		bmi.s	locret_C412
0000D438 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D43C 6400                       		bcc.s	locret_C412	; if yes, branch
0000D43E 6000 0000                  		bra.w	DisplaySprite
0000D442                            ; ===========================================================================
0000D442                            
0000D442                            locret_C412:
0000D442 4E75                       		rts	
0000D444                            ; ===========================================================================
0000D444                            
0000D444                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000D444 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D44A 6600                       		bne.s	Obj34_Delete
0000D44C 7002                       		moveq	#2,d0
0000D44E 4EB9 0000 1E58             		jsr	(LoadPLC).l	; load explosion patterns
0000D454 7000                       		moveq	#0,d0
0000D456 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D45A 103B 0000                  		move.b	Obj34_AnimalPLC(pc,d0.w),d0
0000D45E 4EB9 0000 1E58             		jsr	(LoadPLC).l	; load animal patterns
0000D464                            
0000D464                            Obj34_Delete:
0000D464 6000 0000                  		bra.w	DeleteObject
0000D468                            
0000D468                            ; ===========================================================================
0000D468                            Obj34_AnimalPLC:
0000D468 15                         		dc.b $15	; "GHZ"
0000D469 16                         		dc.b $16
0000D46A 17                         		dc.b $17
0000D46B 18                         		dc.b $18
0000D46C 19                         		dc.b $19
0000D46D 1A                         		dc.b $1A	; "SBZ"
0000D46E 15                         		dc.b $15	; Ending (placeholder?
0000D46F 1A                         		dc.b $1A	; MAKOTO
0000D470                            	even
0000D470 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000D472 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000D474 00E4                       		dc.w $E4
0000D476 0206                       		dc.b 2,	6
0000D478 00EA                       		dc.w $EA
0000D47A 0207                       		dc.b 2,	7
0000D47C 00E0                       		dc.w $E0
0000D47E 020A                       		dc.b 2,	$A
0000D480                            ; ---------------------------------------------------------------------------
0000D480                            ; Title	card configuration data
0000D480                            ; Format:
0000D480                            ; 4 bytes per item (YYYY XXXX)
0000D480                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000D480                            ; ---------------------------------------------------------------------------
0000D480 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D490 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000D4A0 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000D4B0 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000D4C0 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000D4D0 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000D4E0 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000D4F0 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D500 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D510                            ; ===========================================================================
0000D510                            ; ---------------------------------------------------------------------------
0000D510                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000D510                            ; ---------------------------------------------------------------------------
0000D510                            
0000D510                            Obj39:					; XREF: Obj_Index
0000D510 7000                       		moveq	#0,d0
0000D512 1028 0024                  		move.b	$24(a0),d0
0000D516 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000D51A 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000D51E                            ; ===========================================================================
0000D51E 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000D520 0000                       		dc.w loc_C50C-Obj39_Index
0000D522 0000                       		dc.w Obj39_Wait-Obj39_Index
0000D524                            ; ===========================================================================
0000D524                            
0000D524                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000D524 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D528 6700                       		beq.s	Obj39_Main	; if yes, branch
0000D52A 4E75                       		rts	
0000D52C                            ; ===========================================================================
0000D52C                            
0000D52C                            Obj39_Main:
0000D52C 5428 0024                  		addq.b	#2,$24(a0)
0000D530 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000D536 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000D53C 6700                       		beq.s	loc_C4EC	; if not, branch
0000D53E 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000D544                            
0000D544                            loc_C4EC:
0000D544 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000D54A 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000D552 317C 855E 0002             		move.w	#$855E,2(a0)
0000D558 117C 0000 0001             		move.b	#0,1(a0)
0000D55E 117C 0000 0018             		move.b	#0,$18(a0)
0000D564                            
0000D564                            loc_C50C:				; XREF: Obj39_Index
0000D564 7210                       		moveq	#$10,d1		; set horizontal speed
0000D566 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000D56C 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000D56E 6500                       		bcs.s	Obj39_Move
0000D570 4441                       		neg.w	d1
0000D572                            
0000D572                            Obj39_Move:
0000D572 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D576 6000 0000                  		bra.w	DisplaySprite
0000D57A                            ; ===========================================================================
0000D57A                            
0000D57A                            Obj39_SetWait:				; XREF: Obj39_Main
0000D57A 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000D580 5428 0024                  		addq.b	#2,$24(a0)
0000D584 4E75                       		rts	
0000D586                            ; ===========================================================================
0000D586                            
0000D586                            Obj39_Wait:				; XREF: Obj39_Index
0000D586 1038 F605                  		move.b	($FFFFF605).w,d0
0000D58A 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000D58E 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000D590 0828 0000 001A             		btst	#0,$1A(a0)
0000D596 6600                       		bne.s	Obj39_Display
0000D598 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000D59C 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000D59E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D5A2 6000 0000                  		bra.w	DisplaySprite
0000D5A6                            ; ===========================================================================
0000D5A6                            
0000D5A6                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000D5A6 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000D5AA 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000D5AC 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000D5B2 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000D5B6 6600                       		bne.s	Obj39_Display	; if yes, branch
0000D5B8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000D5BE 6000                       		bra.s	Obj39_Display
0000D5C0                            ; ===========================================================================
0000D5C0                            
0000D5C0                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000D5C0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D5C6                            
0000D5C6                            Obj39_Display:				; XREF: Obj39_ChgMode
0000D5C6 6000 0000                  		bra.w	DisplaySprite
0000D5CA                            ; ===========================================================================
0000D5CA                            ; ---------------------------------------------------------------------------
0000D5CA                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000D5CA                            ; ---------------------------------------------------------------------------
0000D5CA                            
0000D5CA                            Obj3A:					; XREF: Obj_Index
0000D5CA 7000                       		moveq	#0,d0
0000D5CC 1028 0024                  		move.b	$24(a0),d0
0000D5D0 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000D5D4 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000D5D8                            ; ===========================================================================
0000D5D8 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000D5DA 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000D5DC 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D5DE 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000D5E0 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D5E2 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000D5E4 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D5E6 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000D5E8 0000                       		dc.w loc_C766-Obj3A_Index
0000D5EA                            ; ===========================================================================
0000D5EA                            
0000D5EA                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000D5EA 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D5EE 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000D5F0 4E75                       		rts	
0000D5F2                            ; ===========================================================================
0000D5F2                            
0000D5F2                            Obj3A_Main:
0000D5F2 2248                       		movea.l	a0,a1
0000D5F4 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000D5FA 7206                       		moveq	#6,d1
0000D5FC                            
0000D5FC                            Obj3A_Loop:
0000D5FC 12BC 003A                  		move.b	#$3A,0(a1)
0000D600 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000D604 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000D608 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D60C 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D610 135A 0024                  		move.b	(a2)+,$24(a1)
0000D614 101A                       		move.b	(a2)+,d0
0000D616 0C00 0006                  		cmpi.b	#6,d0
0000D61A 6600                       		bne.s	loc_C5CA
0000D61C D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000D620                            
0000D620                            loc_C5CA:
0000D620 1340 001A                  		move.b	d0,$1A(a1)
0000D624 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000D62C 337C 8580 0002             		move.w	#$8580,2(a1)
0000D632 137C 0000 0001             		move.b	#0,1(a1)
0000D638 43E9 0040                  		lea	$40(a1),a1
0000D63C 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000D640                            
0000D640                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000D640 7210                       		moveq	#$10,d1		; set horizontal speed
0000D642 3028 0030                  		move.w	$30(a0),d0
0000D646 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D64A 6700                       		beq.s	loc_C61A	; if yes, branch
0000D64C 6C00                       		bge.s	Obj3A_Move
0000D64E 4441                       		neg.w	d1
0000D650                            
0000D650                            Obj3A_Move:
0000D650 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D654                            
0000D654                            loc_C5FE:				; XREF: loc_C61A
0000D654 3028 0008                  		move.w	8(a0),d0
0000D658 6B00                       		bmi.s	locret_C60E
0000D65A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D65E 6400                       		bcc.s	locret_C60E	; if yes, branch
0000D660 6000 0000                  		bra.w	DisplaySprite
0000D664                            ; ===========================================================================
0000D664                            
0000D664                            locret_C60E:
0000D664 4E75                       		rts	
0000D666                            ; ===========================================================================
0000D666                            
0000D666                            loc_C610:				; XREF: loc_C61A
0000D666 117C 000E 0024             		move.b	#$E,$24(a0)
0000D66C 6000 0000                  		bra.w	Obj3A_ChkPos2
0000D670                            ; ===========================================================================
0000D670                            
0000D670                            loc_C61A:				; XREF: Obj3A_ChkPos
0000D670 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000D676 67EE                       		beq.s	loc_C610
0000D678 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D67E 66D4                       		bne.s	loc_C5FE
0000D680 5428 0024                  		addq.b	#2,$24(a0)
0000D684 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D68A                            
0000D68A                            Obj3A_Wait:				; XREF: Obj3A_Index
0000D68A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D68E 6600                       		bne.s	Obj3A_Display
0000D690 5428 0024                  		addq.b	#2,$24(a0)
0000D694                            
0000D694                            Obj3A_Display:
0000D694 6000 0000                  		bra.w	DisplaySprite
0000D698                            ; ===========================================================================
0000D698                            
0000D698                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000D698 6100 0000                  		bsr.w	DisplaySprite
0000D69C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000D6A2 7000                       		moveq	#0,d0
0000D6A4 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000D6A8 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000D6AA 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D6AE 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000D6B4                            
0000D6B4                            Obj3A_RingBonus:
0000D6B4 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D6B8 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000D6BA 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D6BE 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D6C4                            
0000D6C4                            Obj3A_ChkBonus:
0000D6C4 4A40                       		tst.w	d0		; is there any bonus?
0000D6C6 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000D6C8 303C 00C5                  		move.w	#$C5,d0
0000D6CC 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D6D2 5428 0024                  		addq.b	#2,$24(a0)
0000D6D6 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000D6DC 6600                       		bne.s	Obj3A_SetDelay
0000D6DE 5828 0024                  		addq.b	#4,$24(a0)
0000D6E2                            
0000D6E2                            Obj3A_SetDelay:
0000D6E2 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D6E8                            
0000D6E8                            locret_C692:
0000D6E8 4E75                       		rts	
0000D6EA                            ; ===========================================================================
0000D6EA                            
0000D6EA                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000D6EA 4EB9 0000 0000             		jsr	AddPoints
0000D6F0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D6F4 0200 0003                  		andi.b	#3,d0
0000D6F8 66EE                       		bne.s	locret_C692
0000D6FA 303C 00CD                  		move.w	#$CD,d0
0000D6FE 4EF9 0000 1C7A             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D704                            ; ===========================================================================
0000D704                            
0000D704                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000D704 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D708 0240 0007                  		andi.w	#7,d0
0000D70C E748                       		lsl.w	#3,d0
0000D70E 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D712 0241 0003                  		andi.w	#3,d1
0000D716 D241                       		add.w	d1,d1
0000D718 D041                       		add.w	d1,d0
0000D71A 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D71E 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D722 4A40                       		tst.w	d0
0000D724 6600                       		bne.s	Obj3A_ChkSS
0000D726 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000D72C 6000                       		bra.s	Obj3A_Display2
0000D72E                            ; ===========================================================================
0000D72E                            
0000D72E                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D72E 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D732 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D736 6700                       		beq.s	loc_C6EA	; if not, branch
0000D738 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D73E 6000                       		bra.s	Obj3A_Display2
0000D740                            ; ===========================================================================
0000D740                            
0000D740                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D740 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D746                            
0000D746                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D746 6000 0000                  		bra.w	DisplaySprite
0000D74A                            ; ===========================================================================
0000D74A                            ; ---------------------------------------------------------------------------
0000D74A                            ; Level	order array
0000D74A                            ; ---------------------------------------------------------------------------
0000D74A                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D78A                            		even
0000D78A                            ; ===========================================================================
0000D78A                            
0000D78A                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D78A 7220                       		moveq	#$20,d1		; set horizontal speed
0000D78C 3028 0032                  		move.w	$32(a0),d0
0000D790 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D794 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D796 6C00                       		bge.s	Obj3A_Move2
0000D798 4441                       		neg.w	d1
0000D79A                            
0000D79A                            Obj3A_Move2:
0000D79A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D79E 3028 0008                  		move.w	8(a0),d0
0000D7A2 6B00                       		bmi.s	locret_C748
0000D7A4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D7A8 6400                       		bcc.s	locret_C748	; if yes, branch
0000D7AA 6000 0000                  		bra.w	DisplaySprite
0000D7AE                            ; ===========================================================================
0000D7AE                            
0000D7AE                            locret_C748:
0000D7AE 4E75                       		rts	
0000D7B0                            ; ===========================================================================
0000D7B0                            
0000D7B0                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D7B0 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D7B6 6600 0000                  		bne.w	DeleteObject
0000D7BA 5428 0024                  		addq.b	#2,$24(a0)
0000D7BE 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D7C2 303C 008D                  		move.w	#$8D,d0
0000D7C6 4EF9 0000 1C74             		jmp	(PlaySound).l	; play FZ music
0000D7CC                            ; ===========================================================================
0000D7CC                            
0000D7CC                            loc_C766:				; XREF: Obj3A_Index
0000D7CC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D7D0 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D7D6 6700 0000                  		beq.w	DeleteObject
0000D7DA 4E75                       		rts	
0000D7DC                            ; ===========================================================================
0000D7DC 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D7E2 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D7E4 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D7EA 0201                       		dc.b 2,	1
0000D7EC 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D7F2 0206                       		dc.b 2,	6
0000D7F4 0520 0120 00EC             		dc.w $520, $120, $EC
0000D7FA 0202                       		dc.b 2,	2
0000D7FC 0540 0120 00FC             		dc.w $540, $120, $FC
0000D802 0203                       		dc.b 2,	3
0000D804 0560 0120 010C             		dc.w $560, $120, $10C
0000D80A 0204                       		dc.b 2,	4
0000D80C 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D812 0205                       		dc.b 2,	5
0000D814                            ; ===========================================================================
0000D814                            ; ---------------------------------------------------------------------------
0000D814                            ; Object 7E - special stage results screen
0000D814                            ; ---------------------------------------------------------------------------
0000D814                            
0000D814                            Obj7E:					; XREF: Obj_Index
0000D814 7000                       		moveq	#0,d0
0000D816 1028 0024                  		move.b	$24(a0),d0
0000D81A 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D81E 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D822                            ; ===========================================================================
0000D822 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D824 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D826 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D828 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D82A 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D82C 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D82E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D830 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D832 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D834 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D836 0000                       		dc.w loc_C91A-Obj7E_Index
0000D838                            ; ===========================================================================
0000D838                            
0000D838                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D838 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D83C 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D83E 4E75                       		rts	
0000D840                            ; ===========================================================================
0000D840                            
0000D840                            Obj7E_Main:
0000D840 2248                       		movea.l	a0,a1
0000D842 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D848 7203                       		moveq	#3,d1
0000D84A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D850 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D852 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D854                            
0000D854                            Obj7E_Loop:
0000D854 12BC 007E                  		move.b	#$7E,0(a1)
0000D858 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D85C 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D860 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D864 135A 0024                  		move.b	(a2)+,$24(a1)
0000D868 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D86C 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D874 337C 8580 0002             		move.w	#$8580,2(a1)
0000D87A 137C 0000 0001             		move.b	#0,1(a1)
0000D880 43E9 0040                  		lea	$40(a1),a1
0000D884 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D888                            
0000D888 7007                       		moveq	#7,d0
0000D88A 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D88E 6700                       		beq.s	loc_C842
0000D890 7000                       		moveq	#0,d0
0000D892 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D896 6600                       		bne.s	loc_C842	; if not, branch
0000D898 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D89A 317C 0018 0008             		move.w	#$18,8(a0)
0000D8A0 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D8A6                            
0000D8A6                            loc_C842:
0000D8A6 1140 001A                  		move.b	d0,$1A(a0)
0000D8AA                            
0000D8AA                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D8AA 7210                       		moveq	#$10,d1		; set horizontal speed
0000D8AC 3028 0030                  		move.w	$30(a0),d0
0000D8B0 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D8B4 6700                       		beq.s	loc_C86C	; if yes, branch
0000D8B6 6C00                       		bge.s	Obj7E_Move
0000D8B8 4441                       		neg.w	d1
0000D8BA                            
0000D8BA                            Obj7E_Move:
0000D8BA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D8BE                            
0000D8BE                            loc_C85A:				; XREF: loc_C86C
0000D8BE 3028 0008                  		move.w	8(a0),d0
0000D8C2 6B00                       		bmi.s	locret_C86A
0000D8C4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D8C8 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D8CA 6000 0000                  		bra.w	DisplaySprite
0000D8CE                            ; ===========================================================================
0000D8CE                            
0000D8CE                            locret_C86A:
0000D8CE 4E75                       		rts	
0000D8D0                            ; ===========================================================================
0000D8D0                            
0000D8D0                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D8D0 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D8D6 66E6                       		bne.s	loc_C85A
0000D8D8 5428 0024                  		addq.b	#2,$24(a0)
0000D8DC 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D8E2 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D8E8                            
0000D8E8                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D8E8 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D8EC 6600                       		bne.s	Obj7E_Display
0000D8EE 5428 0024                  		addq.b	#2,$24(a0)
0000D8F2                            
0000D8F2                            Obj7E_Display:
0000D8F2 6000 0000                  		bra.w	DisplaySprite
0000D8F6                            ; ===========================================================================
0000D8F6                            
0000D8F6                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D8F6 6100 0000                  		bsr.w	DisplaySprite
0000D8FA 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D900 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D904 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D906 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D90C 700A                       		moveq	#10,d0		; add 10 to score
0000D90E 4EB9 0000 0000             		jsr	AddPoints
0000D914 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D918 0200 0003                  		andi.b	#3,d0
0000D91C 6600                       		bne.s	locret_C8EA
0000D91E 303C 00CD                  		move.w	#$CD,d0
0000D922 4EF9 0000 1C7A             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D928                            ; ===========================================================================
0000D928                            
0000D928                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D928 303C 00C5                  		move.w	#$C5,d0
0000D92C 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D932 5428 0024                  		addq.b	#2,$24(a0)
0000D936 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D93C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D942 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D944 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D94A 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D94E                            
0000D94E                            locret_C8EA:
0000D94E 4E75                       		rts	
0000D950                            ; ===========================================================================
0000D950                            
0000D950                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D950 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D956 6000 0000                  		bra.w	DisplaySprite
0000D95A                            ; ===========================================================================
0000D95A                            
0000D95A                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D95A 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D960 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D966 303C 00BF                  		move.w	#$BF,d0
0000D96A 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play continues music
0000D970 5428 0024                  		addq.b	#2,$24(a0)
0000D974 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D97A 6000 0000                  		bra.w	DisplaySprite
0000D97E                            ; ===========================================================================
0000D97E                            
0000D97E                            loc_C91A:				; XREF: Obj7E_Index
0000D97E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D982 0200 000F                  		andi.b	#$F,d0
0000D986 6600                       		bne.s	Obj7E_Display2
0000D988 0868 0000 001A             		bchg	#0,$1A(a0)
0000D98E                            
0000D98E                            Obj7E_Display2:
0000D98E 6000 0000                  		bra.w	DisplaySprite
0000D992                            ; ===========================================================================
0000D992 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D998 0200                       		dc.b 2,	0		; rountine number, frame number
0000D99A 0320 0120 0118             		dc.w $320, $120, $118
0000D9A0 0201                       		dc.b 2,	1
0000D9A2 0360 0120 0128             		dc.w $360, $120, $128
0000D9A8 0202                       		dc.b 2,	2
0000D9AA 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D9B0 0203                       		dc.b 2,	3
0000D9B2 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D9B8 0206                       		dc.b 2,	6
0000D9BA                            ; ===========================================================================
0000D9BA                            ; ---------------------------------------------------------------------------
0000D9BA                            ; Object 7F - chaos emeralds from the special stage results screen
0000D9BA                            ; ---------------------------------------------------------------------------
0000D9BA                            
0000D9BA                            Obj7F:					; XREF: Obj_Index
0000D9BA 7000                       		moveq	#0,d0
0000D9BC 1028 0024                  		move.b	$24(a0),d0
0000D9C0 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D9C4 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D9C8                            ; ===========================================================================
0000D9C8 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D9CA 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D9CC                            
0000D9CC                            ; ---------------------------------------------------------------------------
0000D9CC                            ; X-axis positions for chaos emeralds
0000D9CC                            ; ---------------------------------------------------------------------------
0000D9CC 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D9D8                            ; ===========================================================================
0000D9D8                            
0000D9D8                            Obj7F_Main:				; XREF: Obj7F_Index
0000D9D8 2248                       		movea.l	a0,a1
0000D9DA 45F9 0000 D9CC             		lea	(Obj7F_PosData).l,a2
0000D9E0 7400                       		moveq	#0,d2
0000D9E2 7200                       		moveq	#0,d1
0000D9E4 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D9E8 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D9EA 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D9EE                            
0000D9EE                            Obj7F_Loop:
0000D9EE 12BC 007F                  		move.b	#$7F,0(a1)
0000D9F2 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D9F6 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D9FC 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000DA00 1633 2000                  		move.b	(a3,d2.w),d3
0000DA04 1343 001A                  		move.b	d3,$1A(a1)
0000DA08 1343 001C                  		move.b	d3,$1C(a1)
0000DA0C 5202                       		addq.b	#1,d2
0000DA0E 5429 0024                  		addq.b	#2,$24(a1)
0000DA12 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000DA1A 337C 8541 0002             		move.w	#$8541,2(a1)
0000DA20 137C 0000 0001             		move.b	#0,1(a1)
0000DA26 43E9 0040                  		lea	$40(a1),a1	; next object
0000DA2A 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000DA2E                            
0000DA2E                            Obj7F_Flash:				; XREF: Obj7F_Index
0000DA2E 1028 001A                  		move.b	$1A(a0),d0
0000DA32 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000DA38 0C00 0006                  		cmpi.b	#6,d0
0000DA3C 6600                       		bne.s	Obj7F_Display
0000DA3E 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000DA44                            
0000DA44                            Obj7F_Display:
0000DA44 6000 0000                  		bra.w	DisplaySprite
0000DA48                            ; ===========================================================================
0000DA48                            ; ---------------------------------------------------------------------------
0000DA48                            ; Sprite mappings - zone title cards
0000DA48                            ; ---------------------------------------------------------------------------
0000DA48                            Map_obj34:
0000DA48                                    include "_maps\obj34.asm"
0000DA48                            Map_c5df:
0000DA48 0000                       Map_c5df_0: 	dc.w Map_c5df_18-Map_c5df
0000DA4A 0000                       Map_c5df_2: 	dc.w Map_c5df_55-Map_c5df
0000DA4C 0000                       Map_c5df_4: 	dc.w Map_c5df_C4-Map_c5df
0000DA4E 0000                       Map_c5df_6: 	dc.w Map_c5df_DE-Map_c5df
0000DA50 0000                       Map_c5df_8: 	dc.w Map_c5df_134-Map_c5df
0000DA52 0000                       Map_c5df_A: 	dc.w Map_c5df_19E-Map_c5df
0000DA54 0000                       Map_c5df_C: 	dc.w Map_c5df_1C2-Map_c5df
0000DA56 0000                       Map_c5df_E: 	dc.w Map_c5df_1D7-Map_c5df
0000DA58 0000                       Map_c5df_10: 	dc.w Map_c5df_1E2-Map_c5df
0000DA5A 0000                       Map_c5df_12: 	dc.w Map_c5df_1ED-Map_c5df
0000DA5C 0000                       Map_c5df_14: 	dc.w Map_c5df_1F8-Map_c5df
0000DA5E 0000                       Map_c5df_16: 	dc.w Map_c5df_23A-Map_c5df
0000DA60 0C                         Map_c5df_18: 	dc.b $C
0000DA61 F805 0008 80               	dc.b $F8, $5, $0, $8, $80
0000DA66 F805 003A 90               	dc.b $F8, $5, $0, $3A, $90
0000DA6B F805 0046 A0               	dc.b $F8, $5, $0, $46, $A0
0000DA70 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0000DA75 F805 0008 C0               	dc.b $F8, $5, $0, $8, $C0
0000DA7A F805 001C D0               	dc.b $F8, $5, $0, $1C, $D0
0000DA7F F805 004A E0               	dc.b $F8, $5, $0, $4A, $E0
0000DA84 F800 0056 F0               	dc.b $F8, $0, $0, $56, $F0
0000DA89 F805 003A 00               	dc.b $F8, $5, $0, $3A, $0
0000DA8E F805 0032 10               	dc.b $F8, $5, $0, $32, $10
0000DA93 F805 0026 20               	dc.b $F8, $5, $0, $26, $20
0000DA98 F805 0026 30               	dc.b $F8, $5, $0, $26, $30
0000DA9D 16                         Map_c5df_55: 	dc.b $16
0000DA9E F801 0020 80               	dc.b $F8, $1, $0, $20, $80
0000DAA3 F800 0056 88               	dc.b $F8, $0, $0, $56, $88
0000DAA8 F805 0026 98               	dc.b $F8, $5, $0, $26, $98
0000DAAD F801 0020 A8               	dc.b $F8, $1, $0, $20, $A8
0000DAB2 F805 0022 B0               	dc.b $F8, $5, $0, $22, $B0
0000DAB7 F805 0010 C0               	dc.b $F8, $5, $0, $10, $C0
0000DABC F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000DAC1 F805 0014 E0               	dc.b $F8, $5, $0, $14, $E0
0000DAC6 F801 0020 F0               	dc.b $F8, $1, $0, $20, $F0
0000DACB F805 0026 F8               	dc.b $F8, $5, $0, $26, $F8
0000DAD0 F805 0010 08               	dc.b $F8, $5, $0, $10, $8
0000DAD5 F800 0056 18               	dc.b $F8, $0, $0, $56, $18
0000DADA F805 0010 28               	dc.b $F8, $5, $0, $10, $28
0000DADF F805 0018 38               	dc.b $F8, $5, $0, $18, $38
0000DAE4 F805 0018 48               	dc.b $F8, $5, $0, $18, $48
0000DAE9 F805 003E 58               	dc.b $F8, $5, $0, $3E, $58
0000DAEE F805 0036 68               	dc.b $F8, $5, $0, $36, $68
0000DAF3 F805 0026 78               	dc.b $F8, $5, $0, $26, $78
0000DAF8 F805 0032 88               	dc.b $F8, $5, $0, $32, $88
0000DAFD F805 003A 98               	dc.b $F8, $5, $0, $3A, $98
0000DB02 F805 0010 A8               	dc.b $F8, $5, $0, $10, $A8
0000DB07 F805 003A B8               	dc.b $F8, $5, $0, $3A, $B8
0000DB0C 05                         Map_c5df_C4: 	dc.b $5
0000DB0D F805 002A 80               	dc.b $F8, $5, $0, $2A, $80
0000DB12 F805 0000 90               	dc.b $F8, $5, $0, $0, $90
0000DB17 F805 003A A0               	dc.b $F8, $5, $0, $3A, $A0
0000DB1C F805 0004 B0               	dc.b $F8, $5, $0, $4, $B0
0000DB21 F805 0026 C0               	dc.b $F8, $5, $0, $26, $C0
0000DB26 11                         Map_c5df_DE: 	dc.b $11
0000DB27 F805 000C 80               	dc.b $F8, $5, $0, $C, $80
0000DB2C F805 0032 90               	dc.b $F8, $5, $0, $32, $90
0000DB31 F805 002E A0               	dc.b $F8, $5, $0, $2E, $A0
0000DB36 F805 0042 B0               	dc.b $F8, $5, $0, $42, $B0
0000DB3B F800 0056 C0               	dc.b $F8, $0, $0, $56, $C0
0000DB40 F805 0018 D0               	dc.b $F8, $5, $0, $18, $D0
0000DB45 F805 0010 E0               	dc.b $F8, $5, $0, $10, $E0
0000DB4A F805 0042 F0               	dc.b $F8, $5, $0, $42, $F0
0000DB4F F800 0056 00               	dc.b $F8, $0, $0, $56, $0
0000DB54 F805 003A 10               	dc.b $F8, $5, $0, $3A, $10
0000DB59 F801 0020 20               	dc.b $F8, $1, $0, $20, $20
0000DB5E F805 000C 28               	dc.b $F8, $5, $0, $C, $28
0000DB63 F805 0032 38               	dc.b $F8, $5, $0, $32, $38
0000DB68 F805 0042 48               	dc.b $F8, $5, $0, $42, $48
0000DB6D F805 001C 58               	dc.b $F8, $5, $0, $1C, $58
0000DB72 F801 0020 68               	dc.b $F8, $1, $0, $20, $68
0000DB77 F805 003E 70               	dc.b $F8, $5, $0, $3E, $70
0000DB7C 15                         Map_c5df_134: 	dc.b $15
0000DB7D F805 0042 80               	dc.b $F8, $5, $0, $42, $80
0000DB82 F805 001C 90               	dc.b $F8, $5, $0, $1C, $90
0000DB87 F805 0010 A0               	dc.b $F8, $5, $0, $10, $A0
0000DB8C F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000DB91 F805 0036 C0               	dc.b $F8, $5, $0, $36, $C0
0000DB96 F801 0020 D0               	dc.b $F8, $1, $0, $20, $D0
0000DB9B F805 0018 D8               	dc.b $F8, $5, $0, $18, $D8
0000DBA0 F800 0056 E8               	dc.b $F8, $0, $0, $56, $E8
0000DBA5 F805 0014 F8               	dc.b $F8, $5, $0, $14, $F8
0000DBAA F805 003A 08               	dc.b $F8, $5, $0, $3A, $8
0000DBAF F805 0032 18               	dc.b $F8, $5, $0, $32, $18
0000DBB4 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0000DBB9 F800 0056 38               	dc.b $F8, $0, $0, $56, $38
0000DBBE F805 0004 48               	dc.b $F8, $5, $0, $4, $48
0000DBC3 F805 0000 58               	dc.b $F8, $5, $0, $0, $58
0000DBC8 F805 003A 68               	dc.b $F8, $5, $0, $3A, $68
0000DBCD F805 002E 78               	dc.b $F8, $5, $0, $2E, $78
0000DBD2 F805 004A 88               	dc.b $F8, $5, $0, $4A, $88
0000DBD7 F805 0000 98               	dc.b $F8, $5, $0, $0, $98
0000DBDC F805 003A A8               	dc.b $F8, $5, $0, $3A, $A8
0000DBE1 F805 000C B8               	dc.b $F8, $5, $0, $C, $B8
0000DBE6 07                         Map_c5df_19E: 	dc.b $7
0000DBE7 F805 004E 80               	dc.b $F8, $5, $0, $4E, $80
0000DBEC F800 0056 90               	dc.b $F8, $0, $0, $56, $90
0000DBF1 F805 004E A0               	dc.b $F8, $5, $0, $4E, $A0
0000DBF6 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000DBFB F805 004E C0               	dc.b $F8, $5, $0, $4E, $C0
0000DC00 F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000DC05 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000DC0A 04                         Map_c5df_1C2: 	dc.b $4
0000DC0B F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000DC10 F805 0032 F0               	dc.b $F8, $5, $0, $32, $F0
0000DC15 F805 002E 00               	dc.b $F8, $5, $0, $2E, $0
0000DC1A F805 0010 10               	dc.b $F8, $5, $0, $10, $10
0000DC1F 02                         Map_c5df_1D7: 	dc.b $2
0000DC20 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000DC25 F402 0057 0C               	dc.b $F4, $2, $0, $57, $C
0000DC2A 02                         Map_c5df_1E2: 	dc.b $2
0000DC2B 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000DC30 F406 005A 08               	dc.b $F4, $6, $0, $5A, $8
0000DC35 02                         Map_c5df_1ED: 	dc.b $2
0000DC36 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000DC3B F406 0060 08               	dc.b $F4, $6, $0, $60, $8
0000DC40 0D                         Map_c5df_1F8: 	dc.b $D
0000DC41 E40C 0070 F4               	dc.b $E4, $C, $0, $70, $F4
0000DC46 E402 0074 14               	dc.b $E4, $2, $0, $74, $14
0000DC4B EC04 0077 EC               	dc.b $EC, $4, $0, $77, $EC
0000DC50 F405 0079 E4               	dc.b $F4, $5, $0, $79, $E4
0000DC55 140C 1870 EC               	dc.b $14, $C, $18, $70, $EC
0000DC5A 0402 1874 E4               	dc.b $4, $2, $18, $74, $E4
0000DC5F 0C04 1877 04               	dc.b $C, $4, $18, $77, $4
0000DC64 FC05 1879 0C               	dc.b $FC, $5, $18, $79, $C
0000DC69 EC08 007D FC               	dc.b $EC, $8, $0, $7D, $FC
0000DC6E F40C 007C F4               	dc.b $F4, $C, $0, $7C, $F4
0000DC73 FC08 007C F4               	dc.b $FC, $8, $0, $7C, $F4
0000DC78 040C 007C EC               	dc.b $4, $C, $0, $7C, $EC
0000DC7D 0C08 007C EC               	dc.b $C, $8, $0, $7C, $EC
0000DC82 05                         Map_c5df_23A: 	dc.b $5
0000DC83 F805 0014 DC               	dc.b $F8, $5, $0, $14, $DC
0000DC88 F801 0020 EC               	dc.b $F8, $1, $0, $20, $EC
0000DC8D F805 002E F4               	dc.b $F8, $5, $0, $2E, $F4
0000DC92 F805 0000 04               	dc.b $F8, $5, $0, $0, $4
0000DC97 F805 0026 14               	dc.b $F8, $5, $0, $26, $14
0000DC9C                            	even
0000DC9C                            	even
0000DC9C                            ; ---------------------------------------------------------------------------
0000DC9C                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DC9C                            ; ---------------------------------------------------------------------------
0000DC9C                            Map_obj39:
0000DC9C                            	include "_maps\obj39.asm"
0000DC9C                            ; ---------------------------------------------------------------------------
0000DC9C                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DC9C                            ; ---------------------------------------------------------------------------
0000DC9C 0000                       		dc.w byte_CBAC-Map_obj39
0000DC9E 0000                       		dc.w byte_CBB7-Map_obj39
0000DCA0 0000                       		dc.w byte_CBC2-Map_obj39
0000DCA2 0000                       		dc.w byte_CBCD-Map_obj39
0000DCA4 02                         byte_CBAC:	dc.b 2
0000DCA5 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000DCAA F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000DCAF 02                         byte_CBB7:	dc.b 2
0000DCB0 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000DCB5 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000DCBA 02                         byte_CBC2:	dc.b 2
0000DCBB F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000DCC0 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000DCC5 02                         byte_CBCD:	dc.b 2
0000DCC6 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000DCCB F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000DCD0                            		even
0000DCD0                            		even
0000DCD0                            
0000DCD0                            ; ---------------------------------------------------------------------------
0000DCD0                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000DCD0                            ; ---------------------------------------------------------------------------
0000DCD0 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000DCD2 0000                       		dc.w byte_CC13-Map_obj3A
0000DCD4 0000                       		dc.w byte_CC32-Map_obj3A
0000DCD6 0000                       		dc.w byte_CC51-Map_obj3A
0000DCD8 0000                       		dc.w byte_CC75-Map_obj3A
0000DCDA                            		;dc.w byte_CB47-Map_obj3A
0000DCDA                            		;dc.w byte_CB26-Map_obj3A
0000DCDA                            		;dc.w byte_CB31-Map_obj3A
0000DCDA                            		;dc.w byte_CB3C-Map_obj3A
0000DCDA 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000DCDB F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000DCE0 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000DCE5 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000DCEA F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000DCEF F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000DCF4 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000DCF9 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000DCFE F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000DD03 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000DD08 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000DD0D F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000DD12 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000DD17 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000DD1C F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000DD21 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000DD26 06                         byte_CC13:	dc.b 6			; PASSED
0000DD27 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000DD2C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000DD31 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000DD36 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000DD3B F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DD40 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000DD45 06                         byte_CC32:	dc.b 6			; SCORE
0000DD46 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000DD4B F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000DD50 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000DD55 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000DD5A F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000DD5F FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000DD64 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000DD65 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000DD6A F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DD6F F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DD74 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DD79 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DD7E F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000DD83 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DD88 07                         byte_CC75:	dc.b 7			; RING BONUS
0000DD89 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000DD8E F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DD93 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DD98 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DD9D FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DDA2 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000DDA7 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DDAC                            		even
0000DDAC                            ; ---------------------------------------------------------------------------
0000DDAC                            ; Sprite mappings - special stage results screen
0000DDAC                            ; ---------------------------------------------------------------------------
0000DDAC 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000DDAE 0000                       		dc.w byte_CCEE-Map_obj7E
0000DDB0 0000                       		dc.w byte_CD0D-Map_obj7E
0000DDB2                            		;dc.w byte_CB47-Map_obj7E
0000DDB2 0000                       		dc.w byte_CD31-Map_obj7E
0000DDB4 0000                       		dc.w byte_CD46-Map_obj7E
0000DDB6 0000                       		dc.w byte_CD5B-Map_obj7E
0000DDB8 0000                       		dc.w byte_CD6B-Map_obj7E
0000DDBA 0000                       		dc.w byte_CDA8-Map_obj7E
0000DDBC 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000DDBD F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000DDC2 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000DDC7 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000DDCC F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000DDD1 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000DDD6 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000DDDB F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000DDE0 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DDE5 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000DDEA F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000DDEF F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000DDF4 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000DDF9 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000DDFE 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000DDFF F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000DE04 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000DE09 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000DE0E F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000DE13 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000DE18 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000DE1D 07                         byte_CD0D:	dc.b 7
0000DE1E F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000DE23 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DE28 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DE2D F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DE32 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DE37 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000DE3C F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DE41 04                         byte_CD31:	dc.b 4
0000DE42 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000DE47 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000DE4C F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000DE51 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000DE56 04                         byte_CD46:	dc.b 4
0000DE57 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000DE5C F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000DE61 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000DE66 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000DE6B 03                         byte_CD5B:	dc.b 3
0000DE6C F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000DE71 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000DE76 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000DE7B 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000DE7C F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000DE81 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000DE86 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000DE8B F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000DE90 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000DE95 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000DE9A F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000DE9F F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000DEA4 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000DEA9 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000DEAE F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000DEB3 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000DEB8 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000DEB9 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000DEBE F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000DEC3 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000DEC8 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000DECD F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000DED2 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000DED7 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000DEDC F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000DEE1 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000DEE6 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000DEEB F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000DEF0 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000DEF5 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000DEFA F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000DEFF F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000DF04                            		even
0000DF04                            ; ---------------------------------------------------------------------------
0000DF04                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000DF04                            ; ---------------------------------------------------------------------------
0000DF04                            Map_obj7F:
0000DF04                            	include "_maps\obj7F.asm"
0000DF04                            ; ---------------------------------------------------------------------------
0000DF04                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000DF04                            ; ---------------------------------------------------------------------------
0000DF04 0000                       		dc.w byte_CE02-Map_obj7F
0000DF06 0000                       		dc.w byte_CE08-Map_obj7F
0000DF08 0000                       		dc.w byte_CE0E-Map_obj7F
0000DF0A 0000                       		dc.w byte_CE14-Map_obj7F
0000DF0C 0000                       		dc.w byte_CE1A-Map_obj7F
0000DF0E 0000                       		dc.w byte_CE20-Map_obj7F
0000DF10 0000                       		dc.w byte_CE26-Map_obj7F
0000DF12 01                         byte_CE02:	dc.b 1
0000DF13 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000DF18 01                         byte_CE08:	dc.b 1
0000DF19 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000DF1E 01                         byte_CE0E:	dc.b 1
0000DF1F F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000DF24 01                         byte_CE14:	dc.b 1
0000DF25 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000DF2A 01                         byte_CE1A:	dc.b 1
0000DF2B F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000DF30 01                         byte_CE20:	dc.b 1
0000DF31 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000DF36 00                         byte_CE26:	dc.b 0			; Blank frame
0000DF38 00                         		even
0000DF38 00                         		even
0000DF38                            
0000DF38                            ; ===========================================================================
0000DF38                            ; ---------------------------------------------------------------------------
0000DF38                            ; Object 36 - spikes
0000DF38                            ; ---------------------------------------------------------------------------
0000DF38                            
0000DF38                            Obj36:					; XREF: Obj_Index
0000DF38 7000                       		moveq	#0,d0
0000DF3A 1028 0024                  		move.b	$24(a0),d0
0000DF3E 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000DF42 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000DF46                            ; ===========================================================================
0000DF46 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000DF48 0000                       		dc.w Obj36_Solid-Obj36_Index
0000DF4A                            
0000DF4A 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000DF4C 0110                       		dc.b 1,	$10
0000DF4E 0204                       		dc.b 2,	4
0000DF50 031C                       		dc.b 3,	$1C
0000DF52 0440                       		dc.b 4,	$40
0000DF54 0510                       		dc.b 5,	$10
0000DF56                            ; ===========================================================================
0000DF56                            
0000DF56                            Obj36_Main:				; XREF: Obj36_Index
0000DF56 5428 0024                  		addq.b	#2,$24(a0)
0000DF5A 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000DF62 317C 051B 0002             		move.w	#$51B,2(a0)
0000DF68 0028 0004 0001             		ori.b	#4,1(a0)
0000DF6E 117C 0004 0018             		move.b	#4,$18(a0)
0000DF74 1028 0028                  		move.b	$28(a0),d0
0000DF78 0228 000F 0028             		andi.b	#$F,$28(a0)
0000DF7E 0240 00F0                  		andi.w	#$F0,d0
0000DF82 43F9 0000 DF4A             		lea	(Obj36_Var).l,a1
0000DF88 E648                       		lsr.w	#3,d0
0000DF8A D2C0                       		adda.w	d0,a1
0000DF8C 1159 001A                  		move.b	(a1)+,$1A(a0)
0000DF90 1159 0019                  		move.b	(a1)+,$19(a0)
0000DF94 3168 0008 0030             		move.w	8(a0),$30(a0)
0000DF9A 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000DFA0                            
0000DFA0                            Obj36_Solid:				; XREF: Obj36_Index
0000DFA0 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000DFA4 343C 0004                  		move.w	#4,d2
0000DFA8 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000DFAE 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000DFB0 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000DFB6 6600                       		bne.s	Obj36_Upright	; if not, branch
0000DFB8 343C 0014                  		move.w	#$14,d2
0000DFBC                            
0000DFBC                            ; Spikes types $1x and $5x face	sideways
0000DFBC                            
0000DFBC                            Obj36_SideWays:				; XREF: Obj36_Solid
0000DFBC 323C 001B                  		move.w	#$1B,d1
0000DFC0 3602                       		move.w	d2,d3
0000DFC2 5243                       		addq.w	#1,d3
0000DFC4 3828 0008                  		move.w	8(a0),d4
0000DFC8 6100 0000                  		bsr.w	SolidObject
0000DFCC 0828 0003 0022             		btst	#3,$22(a0)
0000DFD2 6600                       		bne.s	Obj36_Display
0000DFD4 0C44 0001                  		cmpi.w	#1,d4
0000DFD8 6700                       		beq.s	Obj36_Hurt
0000DFDA 6000                       		bra.s	Obj36_Display
0000DFDC                            ; ===========================================================================
0000DFDC                            
0000DFDC                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000DFDC                            
0000DFDC                            Obj36_Upright:				; XREF: Obj36_Solid
0000DFDC 7200                       		moveq	#0,d1
0000DFDE 1228 0019                  		move.b	$19(a0),d1
0000DFE2 0641 000B                  		addi.w	#$B,d1
0000DFE6 343C 0010                  		move.w	#$10,d2
0000DFEA 363C 0011                  		move.w	#$11,d3
0000DFEE 3828 0008                  		move.w	8(a0),d4
0000DFF2 6100 0000                  		bsr.w	SolidObject
0000DFF6 0828 0003 0022             		btst	#3,$22(a0)
0000DFFC 6600                       		bne.s	Obj36_Hurt
0000DFFE 4A44                       		tst.w	d4
0000E000 6A00                       		bpl.s	Obj36_Display
0000E002                            
0000E002                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000E002 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000E006 6600                       		bne.s	Obj36_Display	; if yes, branch
0000E008 2F08                       		move.l	a0,-(sp)
0000E00A 2448                       		movea.l	a0,a2
0000E00C 41F8 D000                  		lea	($FFFFD000).w,a0
0000E010 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000E016 6400                       		bcc.s	loc_CF20
0000E018 2628 000C                  		move.l	$C(a0),d3
0000E01C 3028 0012                  		move.w	$12(a0),d0
0000E020 48C0                       		ext.l	d0
0000E022 E180                       		asl.l	#8,d0
0000E024 9680                       		sub.l	d0,d3
0000E026 2143 000C                  		move.l	d3,$C(a0)
0000E02A 4EB9 0000 0000             		jsr	HurtSonic
0000E030                            
0000E030                            loc_CF20:
0000E030 205F                       		movea.l	(sp)+,a0
0000E032                            
0000E032                            Obj36_Display:
0000E032 6100 0000                  		bsr.w	DisplaySprite
0000E036 3028 0030                  		move.w	$30(a0),d0
0000E03A 0240 FF80                  		andi.w	#$FF80,d0
0000E03E 3238 F700                  		move.w	($FFFFF700).w,d1
0000E042 0441 0080                  		subi.w	#$80,d1
0000E046 0241 FF80                  		andi.w	#$FF80,d1
0000E04A 9041                       		sub.w	d1,d0
0000E04C 0C40 0280                  		cmpi.w	#$280,d0
0000E050 6200 0000                  		bhi.w	DeleteObject
0000E054 4E75                       		rts	
0000E056                            ; ===========================================================================
0000E056                            
0000E056                            Obj36_Type0x:				; XREF: Obj36_Solid
0000E056 7000                       		moveq	#0,d0
0000E058 1028 0028                  		move.b	$28(a0),d0
0000E05C D040                       		add.w	d0,d0
0000E05E 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000E062 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000E066                            ; ===========================================================================
0000E066 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000E068 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000E06A 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000E06C                            ; ===========================================================================
0000E06C                            
0000E06C                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000E06C 4E75                       		rts			; don't move the object
0000E06E                            ; ===========================================================================
0000E06E                            
0000E06E                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000E06E 6100 0000                  		bsr.w	Obj36_Wait
0000E072 7000                       		moveq	#0,d0
0000E074 1028 0034                  		move.b	$34(a0),d0
0000E078 D068 0032                  		add.w	$32(a0),d0
0000E07C 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000E080 4E75                       		rts	
0000E082                            ; ===========================================================================
0000E082                            
0000E082                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000E082 6100 0000                  		bsr.w	Obj36_Wait
0000E086 7000                       		moveq	#0,d0
0000E088 1028 0034                  		move.b	$34(a0),d0
0000E08C D068 0030                  		add.w	$30(a0),d0
0000E090 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000E094 4E75                       		rts	
0000E096                            ; ===========================================================================
0000E096                            
0000E096                            Obj36_Wait:
0000E096 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000E09A 6700                       		beq.s	loc_CFA4	; if yes, branch
0000E09C 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000E0A0 6600                       		bne.s	locret_CFE6
0000E0A2 4A28 0001                  		tst.b	1(a0)
0000E0A6 6A00                       		bpl.s	locret_CFE6
0000E0A8 303C 00B6                  		move.w	#$B6,d0
0000E0AC 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000E0B2 6000                       		bra.s	locret_CFE6
0000E0B4                            ; ===========================================================================
0000E0B4                            
0000E0B4                            loc_CFA4:
0000E0B4 4A68 0036                  		tst.w	$36(a0)
0000E0B8 6700                       		beq.s	loc_CFC6
0000E0BA 0468 0800 0034             		subi.w	#$800,$34(a0)
0000E0C0 6400                       		bcc.s	locret_CFE6
0000E0C2 317C 0000 0034             		move.w	#0,$34(a0)
0000E0C8 317C 0000 0036             		move.w	#0,$36(a0)
0000E0CE 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E0D4 6000                       		bra.s	locret_CFE6
0000E0D6                            ; ===========================================================================
0000E0D6                            
0000E0D6                            loc_CFC6:
0000E0D6 0668 0800 0034             		addi.w	#$800,$34(a0)
0000E0DC 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000E0E2 6500                       		bcs.s	locret_CFE6
0000E0E4 317C 2000 0034             		move.w	#$2000,$34(a0)
0000E0EA 317C 0001 0036             		move.w	#1,$36(a0)
0000E0F0 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E0F6                            
0000E0F6                            locret_CFE6:
0000E0F6 4E75                       		rts	
0000E0F8                            ; ===========================================================================
0000E0F8                            ; ---------------------------------------------------------------------------
0000E0F8                            ; Sprite mappings - spikes
0000E0F8                            ; ---------------------------------------------------------------------------
0000E0F8                            Map_obj36:
0000E0F8                            	include "_maps\obj36.asm"
0000E0F8                            Map_obj36_inner:
0000E0F8 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000E0FA 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000E0FC 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000E0FE 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000E100 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000E102 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000E104 03                         Map_obj36_inner_C: 	dc.b $3
0000E105 F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000E10A F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000E10F F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000E114 03                         Map_obj36_inner_1C: 	dc.b $3
0000E115 EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000E11A FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000E11F 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000E124 01                         Map_obj36_inner_2C: 	dc.b $1
0000E125 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000E12A 03                         Map_obj36_inner_32: 	dc.b $3
0000E12B F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000E130 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000E135 F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000E13A 06                         Map_obj36_inner_42: 	dc.b $6
0000E13B F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000E140 F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000E145 F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000E14A F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000E14F F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000E154 F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000E159 01                         Map_obj36_inner_61: 	dc.b $1
0000E15A FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000E160 00                         	even
0000E160 00                         	even
0000E160                            
0000E160                            ; ===========================================================================
0000E160                            ; ---------------------------------------------------------------------------
0000E160                            ; Object 3B - purple rock (GHZ)
0000E160                            ; ---------------------------------------------------------------------------
0000E160                            
0000E160                            Obj3B:					; XREF: Obj_Index
0000E160 7000                       		moveq	#0,d0
0000E162 1028 0024                  		move.b	$24(a0),d0
0000E166 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000E16A 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000E16E                            ; ===========================================================================
0000E16E 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000E170 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000E172                            ; ===========================================================================
0000E172                            
0000E172                            Obj3B_Main:				; XREF: Obj3B_Index
0000E172 5428 0024                  		addq.b	#2,$24(a0)
0000E176 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000E17E 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000E184 117C 0004 0001             		move.b	#4,1(a0)
0000E18A 117C 0013 0019             		move.b	#$13,$19(a0)
0000E190 117C 0004 0018             		move.b	#4,$18(a0)
0000E196                            
0000E196                            Obj3B_Solid:				; XREF: Obj3B_Index
0000E196 323C 001B                  		move.w	#$1B,d1
0000E19A 343C 0010                  		move.w	#$10,d2
0000E19E 363C 0010                  		move.w	#$10,d3
0000E1A2 3828 0008                  		move.w	8(a0),d4
0000E1A6 6100 0000                  		bsr.w	SolidObject
0000E1AA 6100 0000                  		bsr.w	DisplaySprite
0000E1AE 3028 0008                  		move.w	8(a0),d0
0000E1B2 0240 FF80                  		andi.w	#$FF80,d0
0000E1B6 3238 F700                  		move.w	($FFFFF700).w,d1
0000E1BA 0441 0080                  		subi.w	#$80,d1
0000E1BE 0241 FF80                  		andi.w	#$FF80,d1
0000E1C2 9041                       		sub.w	d1,d0
0000E1C4 0C40 0280                  		cmpi.w	#$280,d0
0000E1C8 6200 0000                  		bhi.w	DeleteObject
0000E1CC 4E75                       		rts	
0000E1CE                            ; ===========================================================================
0000E1CE                            ; ---------------------------------------------------------------------------
0000E1CE                            ; Object 49 - waterfall	sound effect (GHZ)
0000E1CE                            ; ---------------------------------------------------------------------------
0000E1CE                            
0000E1CE                            Obj49:					; XREF: Obj_Index
0000E1CE 7000                       		moveq	#0,d0
0000E1D0 1028 0024                  		move.b	$24(a0),d0
0000E1D4 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000E1D8 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000E1DC                            ; ===========================================================================
0000E1DC 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000E1DE 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000E1E0                            ; ===========================================================================
0000E1E0                            
0000E1E0                            Obj49_Main:				; XREF: Obj49_Index
0000E1E0 5428 0024                  		addq.b	#2,$24(a0)
0000E1E4 117C 0004 0001             		move.b	#4,1(a0)
0000E1EA                            
0000E1EA                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000E1EA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E1EE 0200 003F                  		andi.b	#$3F,d0
0000E1F2 6600                       		bne.s	Obj49_ChkDel
0000E1F4 303C 00D0                  		move.w	#$D0,d0
0000E1F8 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000E1FE                            
0000E1FE                            Obj49_ChkDel:
0000E1FE 3028 0008                  		move.w	8(a0),d0
0000E202 0240 FF80                  		andi.w	#$FF80,d0
0000E206 3238 F700                  		move.w	($FFFFF700).w,d1
0000E20A 0441 0080                  		subi.w	#$80,d1
0000E20E 0241 FF80                  		andi.w	#$FF80,d1
0000E212 9041                       		sub.w	d1,d0
0000E214 0C40 0280                  		cmpi.w	#$280,d0
0000E218 6200 0000                  		bhi.w	DeleteObject
0000E21C 4E75                       		rts	
0000E21E                            ; ===========================================================================
0000E21E                            ; ---------------------------------------------------------------------------
0000E21E                            ; Sprite mappings - purple rock	(GHZ)
0000E21E                            ; ---------------------------------------------------------------------------
0000E21E                            Map_obj3B:
0000E21E                            	include "_maps\obj3B.asm"
0000E21E                            ; ---------------------------------------------------------------------------
0000E21E                            ; Sprite mappings - purple rock	(GHZ)
0000E21E                            ; ---------------------------------------------------------------------------
0000E21E 0000                       		dc.w byte_D110-Map_obj3B
0000E220 02                         byte_D110:	dc.b 2
0000E221 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000E226 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000E22C 00                         		even
0000E22C 00                         		even
0000E22C                            
0000E22C                            ; ===========================================================================
0000E22C                            ; ---------------------------------------------------------------------------
0000E22C                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000E22C                            ; ---------------------------------------------------------------------------
0000E22C                            
0000E22C                            Obj3C:					; XREF: Obj_Index
0000E22C 7000                       		moveq	#0,d0
0000E22E 1028 0024                  		move.b	$24(a0),d0
0000E232 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000E236 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000E23A 6000 0000                  		bra.w	MarkObjGone
0000E23E                            ; ===========================================================================
0000E23E 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000E240 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000E242 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000E244                            ; ===========================================================================
0000E244                            
0000E244                            Obj3C_Main:				; XREF: Obj3C_Index
0000E244 5428 0024                  		addq.b	#2,$24(a0)
0000E248 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000E250 317C 450F 0002             		move.w	#$450F,2(a0)
0000E256 117C 0004 0001             		move.b	#4,1(a0)
0000E25C 117C 0010 0019             		move.b	#$10,$19(a0)
0000E262 117C 0004 0018             		move.b	#4,$18(a0)
0000E268 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000E26E                            
0000E26E                            Obj3C_Solid:				; XREF: Obj3C_Index
0000E26E 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000E274 323C 001B                  		move.w	#$1B,d1
0000E278 343C 0020                  		move.w	#$20,d2
0000E27C 363C 0020                  		move.w	#$20,d3
0000E280 3828 0008                  		move.w	8(a0),d4
0000E284 6100 0000                  		bsr.w	SolidObject
0000E288 0828 0005 0022             		btst	#5,$22(a0)
0000E28E 6600                       		bne.s	Obj3C_ChkRoll
0000E290                            
0000E290                            locret_D180:
0000E290 4E75                       		rts	
0000E292                            ; ===========================================================================
0000E292                            
0000E292                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000E292 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000E298 66F6                       		bne.s	locret_D180	; if not, branch
0000E29A 3028 0030                  		move.w	$30(a0),d0
0000E29E 6A00                       		bpl.s	Obj3C_ChkSpeed
0000E2A0 4440                       		neg.w	d0
0000E2A2                            
0000E2A2                            Obj3C_ChkSpeed:
0000E2A2 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000E2A6 65E8                       		bcs.s	locret_D180	; if not, branch
0000E2A8 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000E2AE 5869 0008                  		addq.w	#4,8(a1)
0000E2B2 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000E2B8 3028 0008                  		move.w	8(a0),d0
0000E2BC B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000E2C0 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000E2C2 5169 0008                  		subq.w	#8,8(a1)
0000E2C6 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000E2CC                            
0000E2CC                            Obj3C_Smash:
0000E2CC 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E2D2 08A8 0005 0022             		bclr	#5,$22(a0)
0000E2D8 08A9 0005 0022             		bclr	#5,$22(a1)
0000E2DE 7207                       		moveq	#7,d1		; load 8 fragments
0000E2E0 343C 0070                  		move.w	#$70,d2
0000E2E4 6100                       		bsr.s	SmashObject
0000E2E6                            
0000E2E6                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000E2E6 6100 0000                  		bsr.w	SpeedToPos
0000E2EA 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000E2F0 6100 0000                  		bsr.w	DisplaySprite
0000E2F4 4A28 0001                  		tst.b	1(a0)
0000E2F8 6A00 0000                  		bpl.w	DeleteObject
0000E2FC 4E75                       		rts	
0000E2FE                            
0000E2FE                            ; ---------------------------------------------------------------------------
0000E2FE                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000E2FE                            ; ---------------------------------------------------------------------------
0000E2FE                            
0000E2FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2FE                            
0000E2FE                            
0000E2FE                            SmashObject:				; XREF: Obj3C_Smash
0000E2FE 7000                       		moveq	#0,d0
0000E300 1028 001A                  		move.b	$1A(a0),d0
0000E304 D040                       		add.w	d0,d0
0000E306 2668 0004                  		movea.l	4(a0),a3
0000E30A D6F3 0000                  		adda.w	(a3,d0.w),a3
0000E30E 524B                       		addq.w	#1,a3
0000E310 08E8 0005 0001             		bset	#5,1(a0)
0000E316 1810                       		move.b	0(a0),d4
0000E318 1A28 0001                  		move.b	1(a0),d5
0000E31C 2248                       		movea.l	a0,a1
0000E31E 6000                       		bra.s	Smash_LoadFrag
0000E320                            ; ===========================================================================
0000E320                            
0000E320                            Smash_Loop:
0000E320 6100 0000                  		bsr.w	SingleObjLoad
0000E324 6600                       		bne.s	Smash_PlaySnd
0000E326 5A4B                       		addq.w	#5,a3
0000E328                            
0000E328                            Smash_LoadFrag:				; XREF: SmashObject
0000E328 137C 0004 0024             		move.b	#4,$24(a1)
0000E32E 1284                       		move.b	d4,0(a1)
0000E330 234B 0004                  		move.l	a3,4(a1)
0000E334 1345 0001                  		move.b	d5,1(a1)
0000E338 3368 0008 0008             		move.w	8(a0),8(a1)
0000E33E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E344 3368 0002 0002             		move.w	2(a0),2(a1)
0000E34A 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000E350 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000E356 335C 0010                  		move.w	(a4)+,$10(a1)
0000E35A 335C 0012                  		move.w	(a4)+,$12(a1)
0000E35E B3C8                       		cmpa.l	a0,a1
0000E360 6400                       		bcc.s	loc_D268
0000E362 2F08                       		move.l	a0,-(sp)
0000E364 2049                       		movea.l	a1,a0
0000E366 6100 0000                  		bsr.w	SpeedToPos
0000E36A D568 0012                  		add.w	d2,$12(a0)
0000E36E 205F                       		movea.l	(sp)+,a0
0000E370 6100 0000                  		bsr.w	DisplaySprite2
0000E374                            
0000E374                            loc_D268:
0000E374 51C9 FFAA                  		dbf	d1,Smash_Loop
0000E378                            
0000E378                            Smash_PlaySnd:
0000E378 303C 00CB                  		move.w	#$CB,d0
0000E37C 4EF9 0000 1C7A             		jmp	(PlaySound_Special).l ;	play smashing sound
0000E382                            ; End of function SmashObject
0000E382                            
0000E382                            ; ===========================================================================
0000E382                            ; Smashed block	fragment speeds
0000E382                            ;
0000E382 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000E386 0600 FF00                  		dc.w $600, $FF00
0000E38A 0600 0100                  		dc.w $600, $100
0000E38E 0400 0500                  		dc.w $400, $500
0000E392 0600 FA00                  		dc.w $600, $FA00
0000E396 0800 FE00                  		dc.w $800, $FE00
0000E39A 0800 0200                  		dc.w $800, $200
0000E39E 0600 0600                  		dc.w $600, $600
0000E3A2                            
0000E3A2 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000E3A6 F800 FE00                  		dc.w $F800, $FE00
0000E3AA F800 0200                  		dc.w $F800, $200
0000E3AE FA00 0600                  		dc.w $FA00, $600
0000E3B2 FC00 FB00                  		dc.w $FC00, $FB00
0000E3B6 FA00 FF00                  		dc.w $FA00, $FF00
0000E3BA FA00 0100                  		dc.w $FA00, $100
0000E3BE FC00 0500                  		dc.w $FC00, $500
0000E3C2                            ; ---------------------------------------------------------------------------
0000E3C2                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E3C2                            ; ---------------------------------------------------------------------------
0000E3C2                            Map_obj3C:
0000E3C2                            	include "_maps\obj3C.asm"
0000E3C2                            ; ---------------------------------------------------------------------------
0000E3C2                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E3C2                            ; ---------------------------------------------------------------------------
0000E3C2 0000                       		dc.w byte_D2BC-Map_obj3C
0000E3C4 0000                       		dc.w byte_D2E5-Map_obj3C
0000E3C6 0000                       		dc.w byte_D30E-Map_obj3C
0000E3C8 08                         byte_D2BC:	dc.b 8
0000E3C9 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000E3CE F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000E3D3 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000E3D8 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000E3DD E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E3E2 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E3E7 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E3EC 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E3F1 08                         byte_D2E5:	dc.b 8
0000E3F2 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E3F7 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E3FC 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E401 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E406 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E40B F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E410 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E415 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E41A 08                         byte_D30E:	dc.b 8
0000E41B E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E420 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E425 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E42A 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E42F E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000E434 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000E439 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000E43E 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000E444 00                         		even
0000E444 00                         		even
0000E444                            
0000E444                            ; ---------------------------------------------------------------------------
0000E444                            ; Object code loading subroutine
0000E444                            ; ---------------------------------------------------------------------------
0000E444                            
0000E444                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E444                            
0000E444                            
0000E444                            ObjectsLoad:				; XREF: TitleScreen; et al
0000E444 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000E448 7E7F                       		moveq	#$7F,d7
0000E44A 7000                       		moveq	#0,d0
0000E44C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000E452 6400                       		bcc.s	loc_D362
0000E454                            
0000E454                            loc_D348:
0000E454 1010                       		move.b	(a0),d0		; load object number from RAM
0000E456 6700                       		beq.s	loc_D358
0000E458 D040                       		add.w	d0,d0
0000E45A D040                       		add.w	d0,d0
0000E45C 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000E460 4E91                       		jsr	(a1)		; run the object's code
0000E462 7000                       		moveq	#0,d0
0000E464                            
0000E464                            loc_D358:
0000E464 41E8 0040                  		lea	$40(a0),a0	; next object
0000E468 51CF FFEA                  		dbf	d7,loc_D348
0000E46C 4E75                       		rts	
0000E46E                            ; ===========================================================================
0000E46E                            
0000E46E                            loc_D362:
0000E46E 7E1F                       		moveq	#$1F,d7
0000E470 61E2                       		bsr.s	loc_D348
0000E472 7E5F                       		moveq	#$5F,d7
0000E474                            
0000E474                            loc_D368:
0000E474 7000                       		moveq	#0,d0
0000E476 1010                       		move.b	(a0),d0
0000E478 6700                       		beq.s	loc_D378
0000E47A 4A28 0001                  		tst.b	1(a0)
0000E47E 6A00                       		bpl.s	loc_D378
0000E480 6100 0000                  		bsr.w	DisplaySprite
0000E484                            
0000E484                            loc_D378:
0000E484 41E8 0040                  		lea	$40(a0),a0
0000E488                            
0000E488                            loc_D37C:
0000E488 51CF FFEA                  		dbf	d7,loc_D368
0000E48C 4E75                       		rts	
0000E48E                            ; End of function ObjectsLoad
0000E48E                            
0000E48E                            ; ===========================================================================
0000E48E                            ; ---------------------------------------------------------------------------
0000E48E                            ; Object pointers
0000E48E                            ; ---------------------------------------------------------------------------
0000E48E                            Obj_Index:
0000E48E                            	include "_inc\Object pointers.asm"
0000E48E                            ; ---------------------------------------------------------------------------
0000E48E                            ; Object pointers
0000E48E                            ; ---------------------------------------------------------------------------
0000E48E 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000E49E 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000E4AE 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000E4BE 0000 0000 0000 B6A8 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000E4CE 0000 824A 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000E4DE 0000 8870 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000E4EE 0000 90BE 0000 91B8 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000E4FE 0000 9802 0000 9AF0 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000E50E 0000 0000 0000 A7AE 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000E51E 0000 AAE6 0000 B0C8 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000E52E 0000 A40A 0000 98D8 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000E53E 0000 BCA0 0000 B2BC 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000E54E 0000 C6B4 0000 CD62 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000E55E 0000 C212 0000 DF38 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000E56E 0000 D510 0000 D5CA 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000E57E 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000E58E 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000E59E 0000 C9D0 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000E5AE 0000 E1CE 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000E5BE 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000E5CE 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000E5DE 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000E5EE 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000E5FE 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000E60E 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000E61E 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000E62E 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000E63E 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000E64E 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000E65E 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000E66E 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000E67E 0000 0000 0000 D814 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000E68E 0000 5CA8 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000E69E 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000E6AE 0000 6362 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E6AE 0000 6362 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E6BE                            
0000E6BE                            ; ---------------------------------------------------------------------------
0000E6BE                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E6BE                            ; ---------------------------------------------------------------------------
0000E6BE                            
0000E6BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E6BE                            
0000E6BE                            _objectFall: 
0000E6BE                            ObjectFall:
0000E6BE 2428 0008                  		move.l	8(a0),d2
0000E6C2 2628 000C                  		move.l	$C(a0),d3
0000E6C6 3028 0010                  		move.w	$10(a0),d0
0000E6CA 48C0                       		ext.l	d0
0000E6CC E180                       		asl.l	#8,d0
0000E6CE D480                       		add.l	d0,d2
0000E6D0 3028 0012                  		move.w	$12(a0),d0
0000E6D4 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000E6DA 48C0                       		ext.l	d0
0000E6DC E180                       		asl.l	#8,d0
0000E6DE D680                       		add.l	d0,d3
0000E6E0 2142 0008                  		move.l	d2,8(a0)
0000E6E4 2143 000C                  		move.l	d3,$C(a0)
0000E6E8 4E75                       		rts	
0000E6EA                            ; End of function ObjectFall
0000E6EA                            
0000E6EA                            ; ---------------------------------------------------------------------------
0000E6EA                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E6EA                            ; ---------------------------------------------------------------------------
0000E6EA                            
0000E6EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E6EA                            
0000E6EA                            
0000E6EA                            ObjectFallNoJump:
0000E6EA 2428 0008                  		move.l	8(a0),d2
0000E6EE 2628 000C                  		move.l	$C(a0),d3
0000E6F2 3028 0010                  		move.w	$10(a0),d0
0000E6F6 48C0                       		ext.l	d0
0000E6F8 E180                       		asl.l	#8,d0
0000E6FA D480                       		add.l	d0,d2
0000E6FC                            ;		cmpi.b	#1,obID(a0)
0000E6FC                            ;		beq.s	ObjectFallSonic
0000E6FC 3028 000C                  		move.w	$C(a0),d0
0000E700 5868 000C                  		addi.w	#4,$C(a0)	; increase vertical speed
0000E704                            ;		ext.l	d0
0000E704                            ;		asl.l	#8,d0
0000E704                            ;		add.l	d0,d3
0000E704 2142 0008                  		move.l	d2,$8(a0)
0000E708                            ;		move.l	d3,obY(a0)
0000E708 4E75                       		rts	
0000E70A                            
0000E70A                            ; End of function ObjectFall
0000E70A                            
0000E70A                            JumpFallSonic:
0000E70A 4CA8 0003 0010                     movem.w    $10(a0),d0-d1        ; Get speed
0000E710                                    
0000E710 E180                               asl.l    #8,d0                ; Apply X speed
0000E712 D1A8 0008                          add.l    d0,$8(a0)
0000E716                                    
0000E716 303C 0300                          move.w    #$300,d0            ; Y movement speed
0000E71A 4A41                               tst.w    d1                ; Are we falling?
0000E71C 6A00                               bpl.s    .SetYSpeed            ; If so, branch
0000E71E 4440                               neg.w    d0                ; Make Y movement go up
0000E720                                    
0000E720                            .SetYSpeed:
0000E720 48C0                               ext.l    d0                ; Apply Y speed
0000E722 E180                               asl.l    #8,d0
0000E724 D1A8 000C                          add.l    d0,$C(a0)
0000E728 0668 0038 0012                     addi.w    #$38,$12(a0)            ; Apply gravity
0000E72E 4E75                               rts
0000E730                            
0000E730                            ; ---------------------------------------------------------------------------
0000E730                            ; Subroutine translating object	speed to update	object position
0000E730                            ; ---------------------------------------------------------------------------
0000E730                            
0000E730                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E730                            
0000E730                            _objectSetSpeed:
0000E730                            SpeedToPos:
0000E730 2428 0008                  		move.l	8(a0),d2
0000E734 2628 000C                  		move.l	$C(a0),d3
0000E738 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000E73C 48C0                       		ext.l	d0
0000E73E E180                       		asl.l	#8,d0		; multiply speed by $100
0000E740 D480                       		add.l	d0,d2		; add to x-axis	position
0000E742 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000E746 48C0                       		ext.l	d0
0000E748 E180                       		asl.l	#8,d0		; multiply by $100
0000E74A D680                       		add.l	d0,d3		; add to y-axis	position
0000E74C 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000E750 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000E754 4E75                       		rts	
0000E756                            ; End of function SpeedToPos
0000E756                            
0000E756                            ; ---------------------------------------------------------------------------
0000E756                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E756                            ; ---------------------------------------------------------------------------
0000E756                            
0000E756                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E756                            
0000E756                            _objectDraw:
0000E756                            DisplaySprite:
0000E756 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E75A 3028 0018                  		move.w	$18(a0),d0
0000E75E E248                       		lsr.w	#1,d0
0000E760 0240 0380                  		andi.w	#$380,d0
0000E764 D2C0                       		adda.w	d0,a1
0000E766 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E76A 6400                       		bcc.s	locret_D620
0000E76C 5451                       		addq.w	#2,(a1)
0000E76E D2D1                       		adda.w	(a1),a1
0000E770 3288                       		move.w	a0,(a1)
0000E772                            
0000E772                            locret_D620:
0000E772 4E75                       		rts	
0000E774                            ; End of function DisplaySprite
0000E774                            
0000E774                            ; ---------------------------------------------------------------------------
0000E774                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E774                            ; ---------------------------------------------------------------------------
0000E774                            
0000E774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E774                            
0000E774                            _objectDrawChild: 
0000E774                            DisplaySprite2:
0000E774 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E778 3029 0018                  		move.w	$18(a1),d0
0000E77C E248                       		lsr.w	#1,d0
0000E77E 0240 0380                  		andi.w	#$380,d0
0000E782 D4C0                       		adda.w	d0,a2
0000E784 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E788 6400                       		bcc.s	locret_D63E
0000E78A 5452                       		addq.w	#2,(a2)
0000E78C D4D2                       		adda.w	(a2),a2
0000E78E 3489                       		move.w	a1,(a2)
0000E790                            
0000E790                            locret_D63E:
0000E790 4E75                       		rts	
0000E792                            ; End of function DisplaySprite2
0000E792                            
0000E792                            ; ---------------------------------------------------------------------------
0000E792                            ; Subroutine to	delete an object
0000E792                            ; ---------------------------------------------------------------------------
0000E792                            
0000E792                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E792                            
0000E792                            _objectDelete: 
0000E792                            DeleteObject:
0000E792 2248                       		movea.l	a0,a1
0000E794                            
0000E794                            DeleteObject2:
0000E794 7200                       		moveq	#0,d1
0000E796 700F                       		moveq	#$F,d0
0000E798                            
0000E798                            loc_D646:
0000E798 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E79A 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E79E 4E75                       		rts	
0000E7A0                            ; End of function DeleteObject
0000E7A0                            
0000E7A0                            ; ===========================================================================
0000E7A0 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E7A4 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E7A8 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E7AC 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E7B0                            ; ---------------------------------------------------------------------------
0000E7B0                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E7B0                            ; ---------------------------------------------------------------------------
0000E7B0                            
0000E7B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E7B0                            
0000E7B0                            DrawObjects:
0000E7B0                            BuildSprites:				; XREF: TitleScreen; et al
0000E7B0 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E7B4 7A00                       		moveq	#0,d5
0000E7B6 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E7BA 7E07                       		moveq	#7,d7
0000E7BC                            
0000E7BC                            loc_D66A:
0000E7BC 4A54                       		tst.w	(a4)
0000E7BE 6700 0000                  		beq.w	loc_D72E
0000E7C2 7C02                       		moveq	#2,d6
0000E7C4                            
0000E7C4                            loc_D672:
0000E7C4 3074 6000                  		movea.w	(a4,d6.w),a0
0000E7C8 4A10                       		tst.b	(a0)
0000E7CA 6700 0000                  		beq.w	loc_D726
0000E7CE 08A8 0007 0001             		bclr	#7,1(a0)
0000E7D4 1028 0001                  		move.b	1(a0),d0
0000E7D8 1800                       		move.b	d0,d4
0000E7DA 0240 000C                  		andi.w	#$C,d0
0000E7DE 6700                       		beq.s	loc_D6DE
0000E7E0 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E7E4 7000                       		moveq	#0,d0
0000E7E6 1028 0019                  		move.b	$19(a0),d0
0000E7EA 3628 0008                  		move.w	8(a0),d3
0000E7EE 9651                       		sub.w	(a1),d3
0000E7F0 3203                       		move.w	d3,d1
0000E7F2 D240                       		add.w	d0,d1
0000E7F4 6B00 0000                  		bmi.w	loc_D726
0000E7F8 3203                       		move.w	d3,d1
0000E7FA 9240                       		sub.w	d0,d1
0000E7FC 0C41 0140                  		cmpi.w	#$140,d1
0000E800 6C00                       		bge.s	loc_D726
0000E802 0643 0080                  		addi.w	#$80,d3
0000E806 0804 0004                  		btst	#4,d4
0000E80A 6700                       		beq.s	loc_D6E8
0000E80C 7000                       		moveq	#0,d0
0000E80E 1028 0016                  		move.b	$16(a0),d0
0000E812 3428 000C                  		move.w	$C(a0),d2
0000E816 9469 0004                  		sub.w	4(a1),d2
0000E81A 3202                       		move.w	d2,d1
0000E81C D240                       		add.w	d0,d1
0000E81E 6B00                       		bmi.s	loc_D726
0000E820 3202                       		move.w	d2,d1
0000E822 9240                       		sub.w	d0,d1
0000E824 0C41 00E0                  		cmpi.w	#$E0,d1
0000E828 6C00                       		bge.s	loc_D726
0000E82A 0642 0080                  		addi.w	#$80,d2
0000E82E 6000                       		bra.s	loc_D700
0000E830                            ; ===========================================================================
0000E830                            
0000E830                            loc_D6DE:
0000E830 3428 000A                  		move.w	$A(a0),d2
0000E834 3628 0008                  		move.w	8(a0),d3
0000E838 6000                       		bra.s	loc_D700
0000E83A                            ; ===========================================================================
0000E83A                            
0000E83A                            loc_D6E8:
0000E83A 3428 000C                  		move.w	$C(a0),d2
0000E83E 9469 0004                  		sub.w	4(a1),d2
0000E842 0642 0080                  		addi.w	#$80,d2
0000E846 0C42 0060                  		cmpi.w	#$60,d2
0000E84A 6500                       		bcs.s	loc_D726
0000E84C 0C42 0180                  		cmpi.w	#$180,d2
0000E850 6400                       		bcc.s	loc_D726
0000E852                            
0000E852                            loc_D700:
0000E852 2268 0004                  		movea.l	4(a0),a1
0000E856 7200                       		moveq	#0,d1
0000E858 0804 0005                  		btst	#5,d4
0000E85C 6600                       		bne.s	loc_D71C
0000E85E 1228 001A                  		move.b	$1A(a0),d1
0000E862 D201                       		add.b	d1,d1
0000E864 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E868 1219                       		move.b	(a1)+,d1
0000E86A 5301                       		subq.b	#1,d1
0000E86C 6B00                       		bmi.s	loc_D720
0000E86E                            
0000E86E                            loc_D71C:
0000E86E 6100 0000                  		bsr.w	sub_D750
0000E872                            
0000E872                            loc_D720:
0000E872 08E8 0007 0001             		bset	#7,1(a0)
0000E878                            
0000E878                            loc_D726:
0000E878 5446                       		addq.w	#2,d6
0000E87A 5554                       		subq.w	#2,(a4)
0000E87C 6600 FF46                  		bne.w	loc_D672
0000E880                            
0000E880                            loc_D72E:
0000E880 49EC 0080                  		lea	$80(a4),a4
0000E884 51CF FF36                  		dbf	d7,loc_D66A
0000E888 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E88C 0C05 0050                  		cmpi.b	#$50,d5
0000E890 6700                       		beq.s	loc_D748
0000E892 24BC 0000 0000             		move.l	#0,(a2)
0000E898 4E75                       		rts	
0000E89A                            ; ===========================================================================
0000E89A                            
0000E89A                            loc_D748:
0000E89A 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E8A0 4E75                       		rts	
0000E8A2                            ; End of function BuildSprites
0000E8A2                            
0000E8A2                            
0000E8A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E8A2                            
0000E8A2                            
0000E8A2                            sub_D750:				; XREF: BuildSprites
0000E8A2 3668 0002                  		movea.w	2(a0),a3
0000E8A6 0804 0000                  		btst	#0,d4
0000E8AA 6600                       		bne.s	loc_D796
0000E8AC 0804 0001                  		btst	#1,d4
0000E8B0 6600 0000                  		bne.w	loc_D7E4
0000E8B4                            ; End of function sub_D750
0000E8B4                            
0000E8B4                            
0000E8B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E8B4                            
0000E8B4                            
0000E8B4                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E8B4 0C05 0050                  		cmpi.b	#$50,d5
0000E8B8 6700                       		beq.s	locret_D794
0000E8BA 1019                       		move.b	(a1)+,d0
0000E8BC 4880                       		ext.w	d0
0000E8BE D042                       		add.w	d2,d0
0000E8C0 34C0                       		move.w	d0,(a2)+
0000E8C2 14D9                       		move.b	(a1)+,(a2)+
0000E8C4 5205                       		addq.b	#1,d5
0000E8C6 14C5                       		move.b	d5,(a2)+
0000E8C8 1019                       		move.b	(a1)+,d0
0000E8CA E148                       		lsl.w	#8,d0
0000E8CC 1019                       		move.b	(a1)+,d0
0000E8CE D04B                       		add.w	a3,d0
0000E8D0 34C0                       		move.w	d0,(a2)+
0000E8D2 1019                       		move.b	(a1)+,d0
0000E8D4 4880                       		ext.w	d0
0000E8D6 D043                       		add.w	d3,d0
0000E8D8 0240 01FF                  		andi.w	#$1FF,d0
0000E8DC 6600                       		bne.s	loc_D78E
0000E8DE 5240                       		addq.w	#1,d0
0000E8E0                            
0000E8E0                            loc_D78E:
0000E8E0 34C0                       		move.w	d0,(a2)+
0000E8E2 51C9 FFD0                  		dbf	d1,sub_D762
0000E8E6                            
0000E8E6                            locret_D794:
0000E8E6 4E75                       		rts	
0000E8E8                            ; End of function sub_D762
0000E8E8                            
0000E8E8                            ; ===========================================================================
0000E8E8                            
0000E8E8                            loc_D796:
0000E8E8 0804 0001                  		btst	#1,d4
0000E8EC 6600 0000                  		bne.w	loc_D82A
0000E8F0                            
0000E8F0                            loc_D79E:
0000E8F0 0C05 0050                  		cmpi.b	#$50,d5
0000E8F4 6700                       		beq.s	locret_D7E2
0000E8F6 1019                       		move.b	(a1)+,d0
0000E8F8 4880                       		ext.w	d0
0000E8FA D042                       		add.w	d2,d0
0000E8FC 34C0                       		move.w	d0,(a2)+
0000E8FE 1819                       		move.b	(a1)+,d4
0000E900 14C4                       		move.b	d4,(a2)+
0000E902 5205                       		addq.b	#1,d5
0000E904 14C5                       		move.b	d5,(a2)+
0000E906 1019                       		move.b	(a1)+,d0
0000E908 E148                       		lsl.w	#8,d0
0000E90A 1019                       		move.b	(a1)+,d0
0000E90C D04B                       		add.w	a3,d0
0000E90E 0A40 0800                  		eori.w	#$800,d0
0000E912 34C0                       		move.w	d0,(a2)+
0000E914 1019                       		move.b	(a1)+,d0
0000E916 4880                       		ext.w	d0
0000E918 4440                       		neg.w	d0
0000E91A D804                       		add.b	d4,d4
0000E91C 0244 0018                  		andi.w	#$18,d4
0000E920 5044                       		addq.w	#8,d4
0000E922 9044                       		sub.w	d4,d0
0000E924 D043                       		add.w	d3,d0
0000E926 0240 01FF                  		andi.w	#$1FF,d0
0000E92A 6600                       		bne.s	loc_D7DC
0000E92C 5240                       		addq.w	#1,d0
0000E92E                            
0000E92E                            loc_D7DC:
0000E92E 34C0                       		move.w	d0,(a2)+
0000E930 51C9 FFBE                  		dbf	d1,loc_D79E
0000E934                            
0000E934                            locret_D7E2:
0000E934 4E75                       		rts	
0000E936                            ; ===========================================================================
0000E936                            
0000E936                            loc_D7E4:				; XREF: sub_D750
0000E936 0C05 0050                  		cmpi.b	#$50,d5
0000E93A 6700                       		beq.s	locret_D828
0000E93C 1019                       		move.b	(a1)+,d0
0000E93E 1811                       		move.b	(a1),d4
0000E940 4880                       		ext.w	d0
0000E942 4440                       		neg.w	d0
0000E944 E70C                       		lsl.b	#3,d4
0000E946 0244 0018                  		andi.w	#$18,d4
0000E94A 5044                       		addq.w	#8,d4
0000E94C 9044                       		sub.w	d4,d0
0000E94E D042                       		add.w	d2,d0
0000E950 34C0                       		move.w	d0,(a2)+
0000E952 14D9                       		move.b	(a1)+,(a2)+
0000E954 5205                       		addq.b	#1,d5
0000E956 14C5                       		move.b	d5,(a2)+
0000E958 1019                       		move.b	(a1)+,d0
0000E95A E148                       		lsl.w	#8,d0
0000E95C 1019                       		move.b	(a1)+,d0
0000E95E D04B                       		add.w	a3,d0
0000E960 0A40 1000                  		eori.w	#$1000,d0
0000E964 34C0                       		move.w	d0,(a2)+
0000E966 1019                       		move.b	(a1)+,d0
0000E968 4880                       		ext.w	d0
0000E96A D043                       		add.w	d3,d0
0000E96C 0240 01FF                  		andi.w	#$1FF,d0
0000E970 6600                       		bne.s	loc_D822
0000E972 5240                       		addq.w	#1,d0
0000E974                            
0000E974                            loc_D822:
0000E974 34C0                       		move.w	d0,(a2)+
0000E976 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E97A                            
0000E97A                            locret_D828:
0000E97A 4E75                       		rts	
0000E97C                            ; ===========================================================================
0000E97C                            
0000E97C                            loc_D82A:
0000E97C 0C05 0050                  		cmpi.b	#$50,d5
0000E980 6700                       		beq.s	locret_D87C
0000E982 1019                       		move.b	(a1)+,d0
0000E984 1811                       		move.b	(a1),d4
0000E986 4880                       		ext.w	d0
0000E988 4440                       		neg.w	d0
0000E98A E70C                       		lsl.b	#3,d4
0000E98C 0244 0018                  		andi.w	#$18,d4
0000E990 5044                       		addq.w	#8,d4
0000E992 9044                       		sub.w	d4,d0
0000E994 D042                       		add.w	d2,d0
0000E996 34C0                       		move.w	d0,(a2)+
0000E998 1819                       		move.b	(a1)+,d4
0000E99A 14C4                       		move.b	d4,(a2)+
0000E99C 5205                       		addq.b	#1,d5
0000E99E 14C5                       		move.b	d5,(a2)+
0000E9A0 1019                       		move.b	(a1)+,d0
0000E9A2 E148                       		lsl.w	#8,d0
0000E9A4 1019                       		move.b	(a1)+,d0
0000E9A6 D04B                       		add.w	a3,d0
0000E9A8 0A40 1800                  		eori.w	#$1800,d0
0000E9AC 34C0                       		move.w	d0,(a2)+
0000E9AE 1019                       		move.b	(a1)+,d0
0000E9B0 4880                       		ext.w	d0
0000E9B2 4440                       		neg.w	d0
0000E9B4 D804                       		add.b	d4,d4
0000E9B6 0244 0018                  		andi.w	#$18,d4
0000E9BA 5044                       		addq.w	#8,d4
0000E9BC 9044                       		sub.w	d4,d0
0000E9BE D043                       		add.w	d3,d0
0000E9C0 0240 01FF                  		andi.w	#$1FF,d0
0000E9C4 6600                       		bne.s	loc_D876
0000E9C6 5240                       		addq.w	#1,d0
0000E9C8                            
0000E9C8                            loc_D876:
0000E9C8 34C0                       		move.w	d0,(a2)+
0000E9CA 51C9 FFB0                  		dbf	d1,loc_D82A
0000E9CE                            
0000E9CE                            locret_D87C:
0000E9CE 4E75                       		rts	
0000E9D0                            ; ---------------------------------------------------------------------------
0000E9D0                            ; Subroutine to	check if an object is on the screen
0000E9D0                            ; ---------------------------------------------------------------------------
0000E9D0                            
0000E9D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E9D0                            
0000E9D0                            
0000E9D0                            ChkObjOnScreen:
0000E9D0 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E9D4 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E9D8 6B00                       		bmi.s	NotOnScreen
0000E9DA 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E9DE 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E9E0                            
0000E9E0 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E9E4 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E9E8 6B00                       		bmi.s	NotOnScreen
0000E9EA 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E9EE 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E9F0                            
0000E9F0 7000                       		moveq	#0,d0		; set flag to 0
0000E9F2 4E75                       		rts	
0000E9F4                            ; ===========================================================================
0000E9F4                            
0000E9F4                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E9F4 7001                       		moveq	#1,d0		; set flag to 1
0000E9F6 4E75                       		rts	
0000E9F8                            ; End of function ChkObjOnScreen
0000E9F8                            
0000E9F8                            
0000E9F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E9F8                            
0000E9F8                            
0000E9F8                            ChkObjOnScreen2:
0000E9F8 7200                       		moveq	#0,d1
0000E9FA 1228 0019                  		move.b	$19(a0),d1
0000E9FE 3028 0008                  		move.w	8(a0),d0
0000EA02 9078 F700                  		sub.w	($FFFFF700).w,d0
0000EA06 D041                       		add.w	d1,d0
0000EA08 6B00                       		bmi.s	NotOnScreen2
0000EA0A D241                       		add.w	d1,d1
0000EA0C 9041                       		sub.w	d1,d0
0000EA0E 0C40 0140                  		cmpi.w	#320,d0
0000EA12 6C00                       		bge.s	NotOnScreen2
0000EA14                            
0000EA14 3228 000C                  		move.w	$C(a0),d1
0000EA18 9278 F704                  		sub.w	($FFFFF704).w,d1
0000EA1C 6B00                       		bmi.s	NotOnScreen2
0000EA1E 0C41 00E0                  		cmpi.w	#224,d1
0000EA22 6C00                       		bge.s	NotOnScreen2
0000EA24                            
0000EA24 7000                       		moveq	#0,d0
0000EA26 4E75                       		rts	
0000EA28                            ; ===========================================================================
0000EA28                            
0000EA28                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000EA28 7001                       		moveq	#1,d0
0000EA2A 4E75                       		rts	
0000EA2C                            ; End of function ChkObjOnScreen2
0000EA2C                            
0000EA2C                            ; ---------------------------------------------------------------------------
0000EA2C                            ; Subroutine to	load a level's objects
0000EA2C                            ; ---------------------------------------------------------------------------
0000EA2C                            
0000EA2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EA2C                            
0000EA2C                            
0000EA2C                            ObjPosLoad:				; XREF: Level; et al
0000EA2C 7000                       		moveq	#0,d0
0000EA2E 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000EA32 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000EA36 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000EA3A                            ; End of function ObjPosLoad
0000EA3A                            
0000EA3A                            ; ===========================================================================
0000EA3A 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000EA3C 0000                       		dc.w OPL_Next-OPL_Index
0000EA3E                            ; ===========================================================================
0000EA3E                            
0000EA3E                            OPL_Main:				; XREF: OPL_Index
0000EA3E 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000EA42 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000EA46 ED08                       		lsl.b	#6,d0
0000EA48 E848                       		lsr.w	#4,d0
0000EA4A 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000EA50 2248                       		movea.l	a0,a1
0000EA52 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000EA56 21C8 F770                  		move.l	a0,($FFFFF770).w
0000EA5A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000EA5E D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000EA62 21C9 F778                  		move.l	a1,($FFFFF778).w
0000EA66 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000EA6A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EA6E 34FC 0101                  		move.w	#$101,(a2)+
0000EA72 303C 005E                  		move.w	#$5E,d0
0000EA76                            
0000EA76                            OPL_ClrList:
0000EA76 429A                       		clr.l	(a2)+
0000EA78 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000EA7C                            
0000EA7C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EA80 7400                       		moveq	#0,d2
0000EA82 3C38 F700                  		move.w	($FFFFF700).w,d6
0000EA86 0446 0080                  		subi.w	#$80,d6
0000EA8A 6400                       		bcc.s	loc_D93C
0000EA8C 7C00                       		moveq	#0,d6
0000EA8E                            
0000EA8E                            loc_D93C:
0000EA8E 0246 FF80                  		andi.w	#$FF80,d6
0000EA92 2078 F770                  		movea.l	($FFFFF770).w,a0
0000EA96                            
0000EA96                            loc_D944:
0000EA96 BC50                       		cmp.w	(a0),d6
0000EA98 6300                       		bls.s	loc_D956
0000EA9A 4A28 0004                  		tst.b	4(a0)
0000EA9E 6A00                       		bpl.s	loc_D952
0000EAA0 1412                       		move.b	(a2),d2
0000EAA2 5212                       		addq.b	#1,(a2)
0000EAA4                            
0000EAA4                            loc_D952:
0000EAA4 5C48                       		addq.w	#6,a0
0000EAA6 60EE                       		bra.s	loc_D944
0000EAA8                            ; ===========================================================================
0000EAA8                            
0000EAA8                            loc_D956:
0000EAA8 21C8 F770                  		move.l	a0,($FFFFF770).w
0000EAAC 2078 F774                  		movea.l	($FFFFF774).w,a0
0000EAB0 0446 0080                  		subi.w	#$80,d6
0000EAB4 6500                       		bcs.s	loc_D976
0000EAB6                            
0000EAB6                            loc_D964:
0000EAB6 BC50                       		cmp.w	(a0),d6
0000EAB8 6300                       		bls.s	loc_D976
0000EABA 4A28 0004                  		tst.b	4(a0)
0000EABE 6A00                       		bpl.s	loc_D972
0000EAC0 522A 0001                  		addq.b	#1,1(a2)
0000EAC4                            
0000EAC4                            loc_D972:
0000EAC4 5C48                       		addq.w	#6,a0
0000EAC6 60EE                       		bra.s	loc_D964
0000EAC8                            ; ===========================================================================
0000EAC8                            
0000EAC8                            loc_D976:
0000EAC8 21C8 F774                  		move.l	a0,($FFFFF774).w
0000EACC 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000EAD2                            
0000EAD2                            OPL_Next:				; XREF: OPL_Index
0000EAD2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EAD6 7400                       		moveq	#0,d2
0000EAD8 3C38 F700                  		move.w	($FFFFF700).w,d6
0000EADC 0246 FF80                  		andi.w	#$FF80,d6
0000EAE0 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000EAE4 6700 0000                  		beq.w	locret_DA3A
0000EAE8 6C00                       		bge.s	loc_D9F6
0000EAEA 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000EAEE 2078 F774                  		movea.l	($FFFFF774).w,a0
0000EAF2 0446 0080                  		subi.w	#$80,d6
0000EAF6 6500                       		bcs.s	loc_D9D2
0000EAF8                            
0000EAF8                            loc_D9A6:
0000EAF8 BC68 FFFA                  		cmp.w	-6(a0),d6
0000EAFC 6C00                       		bge.s	loc_D9D2
0000EAFE 5D48                       		subq.w	#6,a0
0000EB00 4A28 0004                  		tst.b	4(a0)
0000EB04 6A00                       		bpl.s	loc_D9BC
0000EB06 532A 0001                  		subq.b	#1,1(a2)
0000EB0A 142A 0001                  		move.b	1(a2),d2
0000EB0E                            
0000EB0E                            loc_D9BC:
0000EB0E 6100 0000                  		bsr.w	loc_DA3C
0000EB12 6600                       		bne.s	loc_D9C6
0000EB14 5D48                       		subq.w	#6,a0
0000EB16 60E0                       		bra.s	loc_D9A6
0000EB18                            ; ===========================================================================
0000EB18                            
0000EB18                            loc_D9C6:
0000EB18 4A28 0004                  		tst.b	4(a0)
0000EB1C 6A00                       		bpl.s	loc_D9D0
0000EB1E 522A 0001                  		addq.b	#1,1(a2)
0000EB22                            
0000EB22                            loc_D9D0:
0000EB22 5C48                       		addq.w	#6,a0
0000EB24                            
0000EB24                            loc_D9D2:
0000EB24 21C8 F774                  		move.l	a0,($FFFFF774).w
0000EB28 2078 F770                  		movea.l	($FFFFF770).w,a0
0000EB2C 0646 0300                  		addi.w	#$300,d6
0000EB30                            
0000EB30                            loc_D9DE:
0000EB30 BC68 FFFA                  		cmp.w	-6(a0),d6
0000EB34 6E00                       		bgt.s	loc_D9F0
0000EB36 4A28 FFFE                  		tst.b	-2(a0)
0000EB3A 6A00                       		bpl.s	loc_D9EC
0000EB3C 5312                       		subq.b	#1,(a2)
0000EB3E                            
0000EB3E                            loc_D9EC:
0000EB3E 5D48                       		subq.w	#6,a0
0000EB40 60EE                       		bra.s	loc_D9DE
0000EB42                            ; ===========================================================================
0000EB42                            
0000EB42                            loc_D9F0:
0000EB42 21C8 F770                  		move.l	a0,($FFFFF770).w
0000EB46 4E75                       		rts	
0000EB48                            ; ===========================================================================
0000EB48                            
0000EB48                            loc_D9F6:
0000EB48 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000EB4C 2078 F770                  		movea.l	($FFFFF770).w,a0
0000EB50 0646 0280                  		addi.w	#$280,d6
0000EB54                            
0000EB54                            loc_DA02:
0000EB54 BC50                       		cmp.w	(a0),d6
0000EB56 6300                       		bls.s	loc_DA16
0000EB58 4A28 0004                  		tst.b	4(a0)
0000EB5C 6A00                       		bpl.s	loc_DA10
0000EB5E 1412                       		move.b	(a2),d2
0000EB60 5212                       		addq.b	#1,(a2)
0000EB62                            
0000EB62                            loc_DA10:
0000EB62 6100 0000                  		bsr.w	loc_DA3C
0000EB66 67EC                       		beq.s	loc_DA02
0000EB68                            
0000EB68                            loc_DA16:
0000EB68 21C8 F770                  		move.l	a0,($FFFFF770).w
0000EB6C 2078 F774                  		movea.l	($FFFFF774).w,a0
0000EB70 0446 0300                  		subi.w	#$300,d6
0000EB74 6500                       		bcs.s	loc_DA36
0000EB76                            
0000EB76                            loc_DA24:
0000EB76 BC50                       		cmp.w	(a0),d6
0000EB78 6300                       		bls.s	loc_DA36
0000EB7A 4A28 0004                  		tst.b	4(a0)
0000EB7E 6A00                       		bpl.s	loc_DA32
0000EB80 522A 0001                  		addq.b	#1,1(a2)
0000EB84                            
0000EB84                            loc_DA32:
0000EB84 5C48                       		addq.w	#6,a0
0000EB86 60EE                       		bra.s	loc_DA24
0000EB88                            ; ===========================================================================
0000EB88                            
0000EB88                            loc_DA36:
0000EB88 21C8 F774                  		move.l	a0,($FFFFF774).w
0000EB8C                            
0000EB8C                            locret_DA3A:
0000EB8C 4E75                       		rts	
0000EB8E                            ; ===========================================================================
0000EB8E                            
0000EB8E                            loc_DA3C:
0000EB8E 4A28 0004                  		tst.b	4(a0)
0000EB92 6A00                       		bpl.s	OPL_MakeItem
0000EB94 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000EB9A 6700                       		beq.s	OPL_MakeItem
0000EB9C 5C48                       		addq.w	#6,a0
0000EB9E 7000                       		moveq	#0,d0
0000EBA0 4E75                       		rts	
0000EBA2                            ; ===========================================================================
0000EBA2                            
0000EBA2                            OPL_MakeItem:
0000EBA2 6100 0000                  		bsr.w	SingleObjLoad
0000EBA6 6600                       		bne.s	locret_DA8A
0000EBA8 3358 0008                  		move.w	(a0)+,8(a1)
0000EBAC 3018                       		move.w	(a0)+,d0
0000EBAE 3200                       		move.w	d0,d1
0000EBB0 0240 0FFF                  		andi.w	#$FFF,d0
0000EBB4 3340 000C                  		move.w	d0,$C(a1)
0000EBB8 E559                       		rol.w	#2,d1
0000EBBA 0201 0003                  		andi.b	#3,d1
0000EBBE 1341 0001                  		move.b	d1,1(a1)
0000EBC2 1341 0022                  		move.b	d1,$22(a1)
0000EBC6 1018                       		move.b	(a0)+,d0
0000EBC8 6A00                       		bpl.s	loc_DA80
0000EBCA 0200 007F                  		andi.b	#$7F,d0
0000EBCE 1342 0023                  		move.b	d2,$23(a1)
0000EBD2                            
0000EBD2                            loc_DA80:
0000EBD2 1280                       		move.b	d0,0(a1)
0000EBD4 1358 0028                  		move.b	(a0)+,$28(a1)
0000EBD8 7000                       		moveq	#0,d0
0000EBDA                            
0000EBDA                            locret_DA8A:
0000EBDA 4E75                       		rts	
0000EBDC                            ; ---------------------------------------------------------------------------
0000EBDC                            ; Single object	loading	subroutine
0000EBDC                            ; ---------------------------------------------------------------------------
0000EBDC                            
0000EBDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EBDC                            
0000EBDC                            
0000EBDC                            SingleObjLoad:
0000EBDC 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000EBE0 303C 005F                  		move.w	#$5F,d0
0000EBE4                            
0000EBE4                            loc_DA94:
0000EBE4 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000EBE6 6700                       		beq.s	locret_DAA0	; if yes, branch
0000EBE8 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000EBEC 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000EBF0                            
0000EBF0                            locret_DAA0:
0000EBF0 4E75                       		rts	
0000EBF2                            ; End of function SingleObjLoad
0000EBF2                            
0000EBF2                            
0000EBF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EBF2                            
0000EBF2                            
0000EBF2                            SingleObjLoad2:
0000EBF2 2248                       		movea.l	a0,a1
0000EBF4 303C F000                  		move.w	#-$1000,d0
0000EBF8 9048                       		sub.w	a0,d0
0000EBFA EC48                       		lsr.w	#6,d0
0000EBFC 5340                       		subq.w	#1,d0
0000EBFE 6500                       		bcs.s	locret_DABC
0000EC00                            
0000EC00                            loc_DAB0:
0000EC00 4A11                       		tst.b	(a1)
0000EC02 6700                       		beq.s	locret_DABC
0000EC04 43E9 0040                  		lea	$40(a1),a1
0000EC08 51C8 FFF6                  		dbf	d0,loc_DAB0
0000EC0C                            
0000EC0C                            locret_DABC:
0000EC0C 4E75                       		rts	
0000EC0E                            ; End of function SingleObjLoad2
0000EC0E                            
0000EC0E                            ; ===========================================================================
0000EC0E                            ; ---------------------------------------------------------------------------
0000EC0E                            ; Object 41 - springs
0000EC0E                            ; ---------------------------------------------------------------------------
0000EC0E                            
0000EC0E                            Obj41:					; XREF: Obj_Index
0000EC0E 7000                       		moveq	#0,d0
0000EC10 1028 0024                  		move.b	$24(a0),d0
0000EC14 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000EC18 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000EC1C 6100 FB38                  		bsr.w	DisplaySprite
0000EC20 3028 0008                  		move.w	8(a0),d0
0000EC24 0240 FF80                  		andi.w	#$FF80,d0
0000EC28 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC2C 0441 0080                  		subi.w	#$80,d1
0000EC30 0241 FF80                  		andi.w	#$FF80,d1
0000EC34 9041                       		sub.w	d1,d0
0000EC36 0C40 0280                  		cmpi.w	#$280,d0
0000EC3A 6200 FB56                  		bhi.w	DeleteObject
0000EC3E 4E75                       		rts	
0000EC40                            ; ===========================================================================
0000EC40 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000EC42 0000                       		dc.w Obj41_Up-Obj41_Index
0000EC44 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000EC46 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000EC48 0000                       		dc.w Obj41_LR-Obj41_Index
0000EC4A 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000EC4C 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000EC4E 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000EC50 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000EC52 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000EC54                            
0000EC54 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000EC56 F600                       		dc.w -$A00		; power	of yellow spring
0000EC58                            ; ===========================================================================
0000EC58                            
0000EC58                            Obj41_Main:				; XREF: Obj41_Index
0000EC58 5428 0024                  		addq.b	#2,$24(a0)
0000EC5C 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000EC64 317C 0523 0002             		move.w	#$523,2(a0)
0000EC6A 0028 0004 0001             		ori.b	#4,1(a0)
0000EC70 117C 0010 0019             		move.b	#$10,$19(a0)
0000EC76 117C 0004 0018             		move.b	#4,$18(a0)
0000EC7C 1028 0028                  		move.b	$28(a0),d0
0000EC80 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000EC84 6700                       		beq.s	loc_DB54	; if not, branch
0000EC86 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000EC8C 117C 0001 001C             		move.b	#1,$1C(a0)
0000EC92 117C 0003 001A             		move.b	#3,$1A(a0)
0000EC98 317C 0533 0002             		move.w	#$533,2(a0)
0000EC9E 117C 0008 0019             		move.b	#8,$19(a0)
0000ECA4                            
0000ECA4                            loc_DB54:
0000ECA4 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000ECA8 6700                       		beq.s	loc_DB66	; if not, branch
0000ECAA 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000ECB0 08E8 0001 0022             		bset	#1,$22(a0)
0000ECB6                            
0000ECB6                            loc_DB66:
0000ECB6 0800 0001                  		btst	#1,d0
0000ECBA 6700                       		beq.s	loc_DB72
0000ECBC 08E8 0005 0002             		bset	#5,2(a0)
0000ECC2                            
0000ECC2                            loc_DB72:
0000ECC2 0240 000F                  		andi.w	#$F,d0
0000ECC6 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000ECCC 4E75                       		rts	
0000ECCE                            ; ===========================================================================
0000ECCE                            
0000ECCE                            Obj41_Up:				; XREF: Obj41_Index
0000ECCE 323C 001B                  		move.w	#$1B,d1
0000ECD2 343C 0008                  		move.w	#8,d2
0000ECD6 363C 0010                  		move.w	#$10,d3
0000ECDA 3828 0008                  		move.w	8(a0),d4
0000ECDE 6100 0000                  		bsr.w	SolidObject
0000ECE2 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000ECE6 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000ECE8 4E75                       		rts	
0000ECEA                            ; ===========================================================================
0000ECEA                            
0000ECEA                            Obj41_BounceUp:				; XREF: Obj41_Up
0000ECEA 5428 0024                  		addq.b	#2,$24(a0)
0000ECEE 5069 000C                  		addq.w	#8,$C(a1)
0000ECF2 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000ECF8 08E9 0001 0022             		bset	#1,$22(a1)
0000ECFE 08A9 0003 0022             		bclr	#3,$22(a1)
0000ED04 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000ED0A 137C 0002 0024             		move.b	#2,$24(a1)
0000ED10 08A8 0003 0022             		bclr	#3,$22(a0)
0000ED16 4228 0025                  		clr.b	$25(a0)
0000ED1A 303C 00CC                  		move.w	#$CC,d0
0000ED1E 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play spring sound
0000ED24                            
0000ED24                            Obj41_AniUp:				; XREF: Obj41_Index
0000ED24 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000ED2A 6000 CA78                  		bra.w	AnimateSprite
0000ED2E                            ; ===========================================================================
0000ED2E                            
0000ED2E                            Obj41_ResetUp:				; XREF: Obj41_Index
0000ED2E 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000ED34 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000ED38 4E75                       		rts	
0000ED3A                            ; ===========================================================================
0000ED3A                            
0000ED3A                            Obj41_LR:				; XREF: Obj41_Index
0000ED3A 323C 0013                  		move.w	#$13,d1
0000ED3E 343C 000E                  		move.w	#$E,d2
0000ED42 363C 000F                  		move.w	#$F,d3
0000ED46 3828 0008                  		move.w	8(a0),d4
0000ED4A 6100 0000                  		bsr.w	SolidObject
0000ED4E 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000ED54 6600                       		bne.s	loc_DC0C
0000ED56 117C 0008 0024             		move.b	#8,$24(a0)
0000ED5C                            
0000ED5C                            loc_DC0C:
0000ED5C 0828 0005 0022             		btst	#5,$22(a0)
0000ED62 6600                       		bne.s	Obj41_BounceLR
0000ED64 4E75                       		rts	
0000ED66                            ; ===========================================================================
0000ED66                            
0000ED66                            Obj41_BounceLR:				; XREF: Obj41_LR
0000ED66 5428 0024                  		addq.b	#2,$24(a0)
0000ED6A 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000ED70 5069 0008                  		addq.w	#8,8(a1)
0000ED74 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000ED7A 6600                       		bne.s	loc_DC36	; if yes, branch
0000ED7C 0469 0010 0008             		subi.w	#$10,8(a1)
0000ED82 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000ED86                            
0000ED86                            loc_DC36:
0000ED86 337C 000F 003E             		move.w	#$F,$3E(a1)
0000ED8C 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000ED92 0869 0000 0022             		bchg	#0,$22(a1)
0000ED98 0829 0002 0022             		btst	#2,$22(a1)
0000ED9E 6600                       		bne.s	loc_DC56
0000EDA0 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000EDA6                            
0000EDA6                            loc_DC56:
0000EDA6 08A8 0005 0022             		bclr	#5,$22(a0)
0000EDAC 08A9 0005 0022             		bclr	#5,$22(a1)
0000EDB2 303C 00CC                  		move.w	#$CC,d0
0000EDB6 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play spring sound
0000EDBC                            
0000EDBC                            Obj41_AniLR:				; XREF: Obj41_Index
0000EDBC 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000EDC2 6000 C9E0                  		bra.w	AnimateSprite
0000EDC6                            ; ===========================================================================
0000EDC6                            
0000EDC6                            Obj41_ResetLR:				; XREF: Obj41_Index
0000EDC6 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000EDCC 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000EDD0 4E75                       		rts	
0000EDD2                            ; ===========================================================================
0000EDD2                            
0000EDD2                            Obj41_Dwn:				; XREF: Obj41_Index
0000EDD2 323C 001B                  		move.w	#$1B,d1
0000EDD6 343C 0008                  		move.w	#8,d2
0000EDDA 363C 0010                  		move.w	#$10,d3
0000EDDE 3828 0008                  		move.w	8(a0),d4
0000EDE2 6100 0000                  		bsr.w	SolidObject
0000EDE6 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000EDEC 6600                       		bne.s	loc_DCA4
0000EDEE 117C 000E 0024             		move.b	#$E,$24(a0)
0000EDF4                            
0000EDF4                            loc_DCA4:
0000EDF4 4A28 0025                  		tst.b	$25(a0)
0000EDF8 6600                       		bne.s	locret_DCAE
0000EDFA 4A44                       		tst.w	d4
0000EDFC 6B00                       		bmi.s	Obj41_BounceDwn
0000EDFE                            
0000EDFE                            locret_DCAE:
0000EDFE 4E75                       		rts	
0000EE00                            ; ===========================================================================
0000EE00                            
0000EE00                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000EE00 5428 0024                  		addq.b	#2,$24(a0)
0000EE04 5169 000C                  		subq.w	#8,$C(a1)
0000EE08 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000EE0E 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000EE12 08E9 0001 0022             		bset	#1,$22(a1)
0000EE18 08A9 0003 0022             		bclr	#3,$22(a1)
0000EE1E 137C 0002 0024             		move.b	#2,$24(a1)
0000EE24 08A8 0003 0022             		bclr	#3,$22(a0)
0000EE2A 4228 0025                  		clr.b	$25(a0)
0000EE2E 303C 00CC                  		move.w	#$CC,d0
0000EE32 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play spring sound
0000EE38                            
0000EE38                            Obj41_AniDwn:				; XREF: Obj41_Index
0000EE38 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000EE3E 6000 C964                  		bra.w	AnimateSprite
0000EE42                            ; ===========================================================================
0000EE42                            
0000EE42                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000EE42 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000EE48 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000EE4C 4E75                       		rts	
0000EE4E                            ; ===========================================================================
0000EE4E                            Ani_obj41:
0000EE4E                            	include "_anim\obj41.asm"
0000EE4E                            ; ---------------------------------------------------------------------------
0000EE4E                            ; Animation script - springs
0000EE4E                            ; ---------------------------------------------------------------------------
0000EE4E 0000                       		dc.w byte_DD02-Ani_obj41
0000EE50 0000                       		dc.w byte_DD0E-Ani_obj41
0000EE52 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000EE5E 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000EE6A                            		even
0000EE6A                            		even
0000EE6A                            
0000EE6A                            ; ---------------------------------------------------------------------------
0000EE6A                            ; Sprite mappings - springs
0000EE6A                            ; ---------------------------------------------------------------------------
0000EE6A                            Map_obj41:
0000EE6A                            	include "_maps\obj41.asm"
0000EE6A                            ; ---------------------------------------------------------------------------
0000EE6A                            ; Sprite mappings - springs
0000EE6A                            ; ---------------------------------------------------------------------------
0000EE6A 0000                       		dc.w byte_DD26-Map_obj41
0000EE6C 0000                       		dc.w byte_DD31-Map_obj41
0000EE6E 0000                       		dc.w byte_DD37-Map_obj41
0000EE70 0000                       		dc.w byte_DD47-Map_obj41
0000EE72 0000                       		dc.w byte_DD4D-Map_obj41
0000EE74 0000                       		dc.w byte_DD53-Map_obj41
0000EE76 02                         byte_DD26:	dc.b 2
0000EE77 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000EE7C 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000EE81 01                         byte_DD31:	dc.b 1
0000EE82 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000EE87 03                         byte_DD37:	dc.b 3
0000EE88 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000EE8D F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EE92 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000EE97 01                         byte_DD47:	dc.b 1
0000EE98 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000EE9D 01                         byte_DD4D:	dc.b 1
0000EE9E F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000EEA3 04                         byte_DD53:	dc.b 4
0000EEA4 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000EEA9 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000EEAE F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000EEB3 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000EEB8                            		even
0000EEB8                            		even
0000EEB8                            
0000EEB8                            ; ===========================================================================
0000EEB8                            ; ---------------------------------------------------------------------------
0000EEB8                            ; Object 42 - Newtron enemy (GHZ)
0000EEB8                            ; ---------------------------------------------------------------------------
0000EEB8                            
0000EEB8                            Obj42:					; XREF: Obj_Index
0000EEB8 7000                       		moveq	#0,d0
0000EEBA 1028 0024                  		move.b	$24(a0),d0
0000EEBE 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000EEC2 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000EEC6                            ; ===========================================================================
0000EEC6 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000EEC8 0000                       		dc.w Obj42_Action-Obj42_Index
0000EECA 0000                       		dc.w Obj42_Delete-Obj42_Index
0000EECC                            ; ===========================================================================
0000EECC                            
0000EECC                            Obj42_Main:				; XREF: Obj42_Index
0000EECC 5428 0024                  		addq.b	#2,$24(a0)
0000EED0 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000EED8 317C 049B 0002             		move.w	#$49B,2(a0)
0000EEDE 117C 0004 0001             		move.b	#4,1(a0)
0000EEE4 117C 0004 0018             		move.b	#4,$18(a0)
0000EEEA 117C 0014 0019             		move.b	#$14,$19(a0)
0000EEF0 117C 0010 0016             		move.b	#$10,$16(a0)
0000EEF6 117C 0008 0017             		move.b	#8,$17(a0)
0000EEFC                            
0000EEFC                            Obj42_Action:				; XREF: Obj42_Index
0000EEFC 7000                       		moveq	#0,d0
0000EEFE 1028 0025                  		move.b	$25(a0),d0
0000EF02 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000EF06 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000EF0A 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000EF10 6100 C892                  		bsr.w	AnimateSprite
0000EF14 6000 0000                  		bra.w	MarkObjGone
0000EF18                            ; ===========================================================================
0000EF18 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000EF1A 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000EF1C 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000EF1E 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000EF20 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000EF22                            ; ===========================================================================
0000EF22                            
0000EF22                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000EF22 08E8 0000 0022             		bset	#0,$22(a0)
0000EF28 3038 D008                  		move.w	($FFFFD008).w,d0
0000EF2C 9068 0008                  		sub.w	8(a0),d0
0000EF30 6400                       		bcc.s	loc_DDEA
0000EF32 4440                       		neg.w	d0
0000EF34 08A8 0000 0022             		bclr	#0,$22(a0)
0000EF3A                            
0000EF3A                            loc_DDEA:
0000EF3A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000EF3E 6400                       		bcc.s	locret_DE12	; if not, branch
0000EF40 5428 0025                  		addq.b	#2,$25(a0)
0000EF44 117C 0001 001C             		move.b	#1,$1C(a0)
0000EF4A 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000EF4E 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000EF50 317C 249B 0002             		move.w	#$249B,2(a0)
0000EF56 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000EF5C 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000EF62                            
0000EF62                            locret_DE12:
0000EF62 4E75                       		rts	
0000EF64                            ; ===========================================================================
0000EF64                            
0000EF64                            Obj42_Type00:				; XREF: Obj42_Index2
0000EF64 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000EF6A 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000EF6C 08E8 0000 0022             		bset	#0,$22(a0)
0000EF72 3038 D008                  		move.w	($FFFFD008).w,d0
0000EF76 9068 0008                  		sub.w	8(a0),d0
0000EF7A 6400                       		bcc.s	locret_DE32
0000EF7C 08A8 0000 0022             		bclr	#0,$22(a0)
0000EF82                            
0000EF82                            locret_DE32:
0000EF82 4E75                       		rts	
0000EF84                            ; ===========================================================================
0000EF84                            
0000EF84                            Obj42_Fall:				; XREF: Obj42_Type00
0000EF84 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000EF8A 6600                       		bne.s	loc_DE42
0000EF8C 117C 000C 0020             		move.b	#$C,$20(a0)
0000EF92                            
0000EF92                            loc_DE42:
0000EF92 6100 F72A                  		bsr.w	ObjectFall
0000EF96 6100 0000                  		bsr.w	ObjHitFloor
0000EF9A 4A41                       		tst.w	d1		; has newtron hit the floor?
0000EF9C 6A00                       		bpl.s	locret_DE86	; if not, branch
0000EF9E D368 000C                  		add.w	d1,$C(a0)
0000EFA2 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000EFA8 5428 0025                  		addq.b	#2,$25(a0)
0000EFAC 117C 0002 001C             		move.b	#2,$1C(a0)
0000EFB2 0828 0005 0002             		btst	#5,2(a0)
0000EFB8 6700                       		beq.s	Obj42_Move
0000EFBA 5228 001C                  		addq.b	#1,$1C(a0)
0000EFBE                            
0000EFBE                            Obj42_Move:
0000EFBE 117C 000D 0020             		move.b	#$D,$20(a0)
0000EFC4 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000EFCA 0828 0000 0022             		btst	#0,$22(a0)
0000EFD0 6600                       		bne.s	locret_DE86
0000EFD2 4468 0010                  		neg.w	$10(a0)
0000EFD6                            
0000EFD6                            locret_DE86:
0000EFD6 4E75                       		rts	
0000EFD8                            ; ===========================================================================
0000EFD8                            
0000EFD8                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000EFD8 6100 F756                  		bsr.w	SpeedToPos
0000EFDC 6100 0000                  		bsr.w	ObjHitFloor
0000EFE0 0C41 FFF8                  		cmpi.w	#-8,d1
0000EFE4 6D00                       		blt.s	loc_DEA2
0000EFE6 0C41 000C                  		cmpi.w	#$C,d1
0000EFEA 6C00                       		bge.s	loc_DEA2
0000EFEC D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000EFF0 4E75                       		rts	
0000EFF2                            ; ===========================================================================
0000EFF2                            
0000EFF2                            loc_DEA2:
0000EFF2 5428 0025                  		addq.b	#2,$25(a0)
0000EFF6 4E75                       		rts	
0000EFF8                            ; ===========================================================================
0000EFF8                            
0000EFF8                            Obj42_Speed:				; XREF: Obj42_Index2
0000EFF8 6100 F736                  		bsr.w	SpeedToPos
0000EFFC 4E75                       		rts	
0000EFFE                            ; ===========================================================================
0000EFFE                            
0000EFFE                            Obj42_Type01:				; XREF: Obj42_Index2
0000EFFE 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000F004 6600                       		bne.s	Obj42_FireMissile
0000F006 117C 000C 0020             		move.b	#$C,$20(a0)
0000F00C                            
0000F00C                            Obj42_FireMissile:
0000F00C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000F012 6600                       		bne.s	locret_DF14
0000F014 4A28 0032                  		tst.b	$32(a0)
0000F018 6600                       		bne.s	locret_DF14
0000F01A 117C 0001 0032             		move.b	#1,$32(a0)
0000F020 6100 FBBA                  		bsr.w	SingleObjLoad
0000F024 6600                       		bne.s	locret_DF14
0000F026 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000F02A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F030 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F036 5169 000C                  		subq.w	#8,$C(a1)
0000F03A 337C 0200 0010             		move.w	#$200,$10(a1)
0000F040 303C 0014                  		move.w	#$14,d0
0000F044 0828 0000 0022             		btst	#0,$22(a0)
0000F04A 6600                       		bne.s	loc_DF04
0000F04C 4440                       		neg.w	d0
0000F04E 4469 0010                  		neg.w	$10(a1)
0000F052                            
0000F052                            loc_DF04:
0000F052 D169 0008                  		add.w	d0,8(a1)
0000F056 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F05C 137C 0001 0028             		move.b	#1,$28(a1)
0000F062                            
0000F062                            locret_DF14:
0000F062 4E75                       		rts	
0000F064                            ; ===========================================================================
0000F064                            
0000F064                            Obj42_Delete:				; XREF: Obj42_Index
0000F064 6000 F72C                  		bra.w	DeleteObject
0000F068                            ; ===========================================================================
0000F068                            Ani_obj42:
0000F068                            	include "_anim\obj42.asm"
0000F068                            ; ---------------------------------------------------------------------------
0000F068                            ; Animation script - Newtron enemy
0000F068                            ; ---------------------------------------------------------------------------
0000F068 0000                       		dc.w byte_DF24-Ani_obj42
0000F06A 0000                       		dc.w byte_DF28-Ani_obj42
0000F06C 0000                       		dc.w byte_DF30-Ani_obj42
0000F06E 0000                       		dc.w byte_DF34-Ani_obj42
0000F070 0000                       		dc.w byte_DF38-Ani_obj42
0000F072 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000F076 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000F07E 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000F082 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000F086 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000F090                            		even
0000F090                            		even
0000F090                            
0000F090                            ; ---------------------------------------------------------------------------
0000F090                            ; Sprite mappings - Newtron enemy (GHZ)
0000F090                            ; ---------------------------------------------------------------------------
0000F090                            Map_obj42:
0000F090                            	include "_maps\obj42.asm"
0000F090                            ; ---------------------------------------------------------------------------
0000F090                            ; Sprite mappings - Newtron enemy (GHZ)
0000F090                            ; ---------------------------------------------------------------------------
0000F090 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000F094 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000F098 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000F09C 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000F0A0 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000F0A4 0000                       		dc.w byte_DFF8-Map_obj42
0000F0A6 03                         byte_DF58:	dc.b 3
0000F0A7 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000F0AC F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000F0B1 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000F0B6 03                         byte_DF68:	dc.b 3
0000F0B7 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000F0BC EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F0C1 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F0C6 03                         byte_DF78:	dc.b 3
0000F0C7 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000F0CC EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F0D1 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F0D6 04                         byte_DF88:	dc.b 4
0000F0D7 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000F0DC EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F0E1 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000F0E6 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000F0EB 03                         byte_DF9D:	dc.b 3
0000F0EC F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000F0F1 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000F0F6 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000F0FB 02                         byte_DFAD:	dc.b 2
0000F0FC F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F101 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F106 03                         byte_DFB8:	dc.b 3
0000F107 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F10C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F111 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000F116 03                         byte_DFC8:	dc.b 3
0000F117 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F11C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F121 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000F126 03                         byte_DFD8:	dc.b 3
0000F127 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F12C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F131 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000F136 03                         byte_DFE8:	dc.b 3
0000F137 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F13C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F141 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000F146 00                         byte_DFF8:	dc.b 0
0000F148 00                         		even
0000F148 00                         		even
0000F148                            
0000F148                            ; ===========================================================================
0000F148                            ; ---------------------------------------------------------------------------
0000F148                            ; Object 43 - Roller enemy (SYZ)
0000F148                            ; ---------------------------------------------------------------------------
0000F148                            
0000F148                            Obj43:					; XREF: Obj_Index
0000F148 7000                       		moveq	#0,d0
0000F14A 1028 0024                  		move.b	$24(a0),d0
0000F14E 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000F152 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000F156                            ; ===========================================================================
0000F156 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000F158 0000                       		dc.w Obj43_Action-Obj43_Index
0000F15A                            ; ===========================================================================
0000F15A                            
0000F15A                            Obj43_Main:				; XREF: Obj43_Index
0000F15A 117C 000E 0016             		move.b	#$E,$16(a0)
0000F160 117C 0008 0017             		move.b	#8,$17(a0)
0000F166 6100 F556                  		bsr.w	ObjectFall
0000F16A 6100 0000                  		bsr.w	ObjHitFloor
0000F16E 4A41                       		tst.w	d1
0000F170 6A00                       		bpl.s	locret_E052
0000F172 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000F176 317C 0000 0012             		move.w	#0,$12(a0)
0000F17C 5428 0024                  		addq.b	#2,$24(a0)
0000F180 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000F188 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000F18E 117C 0004 0001             		move.b	#4,1(a0)
0000F194 117C 0004 0018             		move.b	#4,$18(a0)
0000F19A 117C 0010 0019             		move.b	#$10,$19(a0)
0000F1A0                            
0000F1A0                            locret_E052:
0000F1A0 4E75                       		rts	
0000F1A2                            ; ===========================================================================
0000F1A2                            
0000F1A2                            Obj43_Action:				; XREF: Obj43_Index
0000F1A2 7000                       		moveq	#0,d0
0000F1A4 1028 0025                  		move.b	$25(a0),d0
0000F1A8 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000F1AC 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000F1B0 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000F1B6 6100 C5EC                  		bsr.w	AnimateSprite
0000F1BA 3028 0008                  		move.w	8(a0),d0
0000F1BE 0240 FF80                  		andi.w	#$FF80,d0
0000F1C2 3238 F700                  		move.w	($FFFFF700).w,d1
0000F1C6 0441 0080                  		subi.w	#$80,d1
0000F1CA 0241 FF80                  		andi.w	#$FF80,d1
0000F1CE 9041                       		sub.w	d1,d0
0000F1D0 0C40 0280                  		cmpi.w	#$280,d0
0000F1D4 6E00 0000                  		bgt.w	Obj43_ChkGone
0000F1D8 6000 F57C                  		bra.w	DisplaySprite
0000F1DC                            ; ===========================================================================
0000F1DC                            
0000F1DC                            Obj43_ChkGone:				; XREF: Obj43_Action
0000F1DC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F1E0 7000                       		moveq	#0,d0
0000F1E2 1028 0023                  		move.b	$23(a0),d0
0000F1E6 6700                       		beq.s	Obj43_Delete
0000F1E8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F1EE                            
0000F1EE                            Obj43_Delete:
0000F1EE 6000 F5A2                  		bra.w	DeleteObject
0000F1F2                            ; ===========================================================================
0000F1F2 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000F1F4 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000F1F6 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000F1F8 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000F1FA                            ; ===========================================================================
0000F1FA                            
0000F1FA                            Obj43_RollChk:				; XREF: Obj43_Index2
0000F1FA 3038 D008                  		move.w	($FFFFD008).w,d0
0000F1FE 0440 0100                  		subi.w	#$100,d0
0000F202 6500                       		bcs.s	loc_E0D2
0000F204 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000F208 6500                       		bcs.s	loc_E0D2
0000F20A 5828 0025                  		addq.b	#4,$25(a0)
0000F20E 117C 0002 001C             		move.b	#2,$1C(a0)
0000F214 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000F21A 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000F220                            
0000F220                            loc_E0D2:
0000F220 588F                       		addq.l	#4,sp
0000F222 4E75                       		rts	
0000F224                            ; ===========================================================================
0000F224                            
0000F224                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000F224 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000F22A 6700                       		beq.s	loc_E0F8
0000F22C 5368 0030                  		subq.w	#1,$30(a0)
0000F230 6A00                       		bpl.s	locret_E0F6
0000F232 117C 0001 001C             		move.b	#1,$1C(a0)
0000F238 317C 0700 0010             		move.w	#$700,$10(a0)
0000F23E 117C 008E 0020             		move.b	#$8E,$20(a0)
0000F244                            
0000F244                            locret_E0F6:
0000F244 4E75                       		rts	
0000F246                            ; ===========================================================================
0000F246                            
0000F246                            loc_E0F8:
0000F246 5428 0025                  		addq.b	#2,$25(a0)
0000F24A 4E75                       		rts	
0000F24C                            ; ===========================================================================
0000F24C                            
0000F24C                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000F24C 6100 0000                  		bsr.w	Obj43_Stop
0000F250 6100 F4DE                  		bsr.w	SpeedToPos
0000F254 6100 0000                  		bsr.w	ObjHitFloor
0000F258 0C41 FFF8                  		cmpi.w	#-8,d1
0000F25C 6D00                       		blt.s	Obj43_Jump
0000F25E 0C41 000C                  		cmpi.w	#$C,d1
0000F262 6C00                       		bge.s	Obj43_Jump
0000F264 D368 000C                  		add.w	d1,$C(a0)
0000F268 4E75                       		rts	
0000F26A                            ; ===========================================================================
0000F26A                            
0000F26A                            Obj43_Jump:
0000F26A 5428 0025                  		addq.b	#2,$25(a0)
0000F26E 08E8 0000 0032             		bset	#0,$32(a0)
0000F274 6700                       		beq.s	locret_E12E
0000F276 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000F27C                            
0000F27C                            locret_E12E:
0000F27C 4E75                       		rts	
0000F27E                            ; ===========================================================================
0000F27E                            
0000F27E                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000F27E 6100 F43E                  		bsr.w	ObjectFall
0000F282 4A68 0012                  		tst.w	$12(a0)
0000F286 6B00                       		bmi.s	locret_E150
0000F288 6100 0000                  		bsr.w	ObjHitFloor
0000F28C 4A41                       		tst.w	d1
0000F28E 6A00                       		bpl.s	locret_E150
0000F290 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000F294 5528 0025                  		subq.b	#2,$25(a0)
0000F298 317C 0000 0012             		move.w	#0,$12(a0)
0000F29E                            
0000F29E                            locret_E150:
0000F29E 4E75                       		rts	
0000F2A0                            
0000F2A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F2A0                            
0000F2A0                            
0000F2A0                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000F2A0 4A28 0032                  		tst.b	$32(a0)
0000F2A4 6B00                       		bmi.s	locret_E188
0000F2A6 3038 D008                  		move.w	($FFFFD008).w,d0
0000F2AA 0440 0030                  		subi.w	#$30,d0
0000F2AE 9068 0008                  		sub.w	8(a0),d0
0000F2B2 6400                       		bcc.s	locret_E188
0000F2B4 117C 0000 001C             		move.b	#0,$1C(a0)
0000F2BA 117C 000E 0020             		move.b	#$E,$20(a0)
0000F2C0 4268 0010                  		clr.w	$10(a0)
0000F2C4 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000F2CA 117C 0002 0025             		move.b	#2,$25(a0)
0000F2D0 08E8 0007 0032             		bset	#7,$32(a0)
0000F2D6                            
0000F2D6                            locret_E188:
0000F2D6 4E75                       		rts	
0000F2D8                            ; End of function Obj43_Stop
0000F2D8                            
0000F2D8                            ; ===========================================================================
0000F2D8                            Ani_obj43:
0000F2D8                            	include "_anim\obj43.asm"
0000F2D8                            ; ---------------------------------------------------------------------------
0000F2D8                            ; Animation script - Roller enemy
0000F2D8                            ; ---------------------------------------------------------------------------
0000F2D8 0000                       		dc.w byte_E190-Ani_obj43
0000F2DA 0000                       		dc.w byte_E196-Ani_obj43
0000F2DC 0000                       		dc.w byte_E19C-Ani_obj43
0000F2DE 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000F2E4 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000F2EA 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000F2F0 00                         		even
0000F2F0 00                         		even
0000F2F0                            
0000F2F0                            ; ---------------------------------------------------------------------------
0000F2F0                            ; Sprite mappings - Roller enemy (SYZ)
0000F2F0                            ; ---------------------------------------------------------------------------
0000F2F0                            Map_obj43:
0000F2F0                            	include "_maps\obj43.asm"
0000F2F0                            Map_61da:
0000F2F0 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000F2F2 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000F2F4 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000F2F6 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000F2F8 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000F2FA 02                         Map_61da_A: 	dc.b $2
0000F2FB DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000F300 F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000F305 02                         Map_61da_15: 	dc.b $2
0000F306 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000F30B FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000F310 01                         Map_61da_20: 	dc.b $1
0000F311 F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000F316 01                         Map_61da_26: 	dc.b $1
0000F317 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000F31C 01                         Map_61da_2C: 	dc.b $1
0000F31D F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000F322                            	even
0000F322                            	even
0000F322                            
0000F322                            ; ===========================================================================
0000F322                            ; ---------------------------------------------------------------------------
0000F322                            ; Object 44 - walls (GHZ)
0000F322                            ; ---------------------------------------------------------------------------
0000F322                            
0000F322                            Obj44:					; XREF: Obj_Index
0000F322 7000                       		moveq	#0,d0
0000F324 1028 0024                  		move.b	$24(a0),d0
0000F328 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000F32C 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000F330                            ; ===========================================================================
0000F330 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000F332 0000                       		dc.w Obj44_Solid-Obj44_Index
0000F334 0000                       		dc.w Obj44_Display-Obj44_Index
0000F336                            ; ===========================================================================
0000F336                            
0000F336                            Obj44_Main:				; XREF: Obj44_Index
0000F336 5428 0024                  		addq.b	#2,$24(a0)
0000F33A 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000F342 317C 434C 0002             		move.w	#$434C,2(a0)
0000F348 0028 0004 0001             		ori.b	#4,1(a0)
0000F34E 117C 0008 0019             		move.b	#8,$19(a0)
0000F354 117C 0006 0018             		move.b	#6,$18(a0)
0000F35A 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000F360 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000F366 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000F368 5428 0024                  		addq.b	#2,$24(a0)
0000F36C 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000F36E                            ; ===========================================================================
0000F36E                            
0000F36E                            Obj44_Solid:				; XREF: Obj44_Index
0000F36E 323C 0013                  		move.w	#$13,d1
0000F372 343C 0028                  		move.w	#$28,d2
0000F376 6100 A68E                  		bsr.w	Obj44_SolidWall
0000F37A                            
0000F37A                            Obj44_Display:				; XREF: Obj44_Index
0000F37A 6100 F3DA                  		bsr.w	DisplaySprite
0000F37E 3028 0008                  		move.w	8(a0),d0
0000F382 0240 FF80                  		andi.w	#$FF80,d0
0000F386 3238 F700                  		move.w	($FFFFF700).w,d1
0000F38A 0441 0080                  		subi.w	#$80,d1
0000F38E 0241 FF80                  		andi.w	#$FF80,d1
0000F392 9041                       		sub.w	d1,d0
0000F394 0C40 0280                  		cmpi.w	#$280,d0
0000F398 6200 F3F8                  		bhi.w	DeleteObject
0000F39C 4E75                       		rts	
0000F39E                            ; ===========================================================================
0000F39E                            ; ---------------------------------------------------------------------------
0000F39E                            ; Sprite mappings - walls (GHZ)
0000F39E                            ; ---------------------------------------------------------------------------
0000F39E                            Map_obj44:
0000F39E                            	include "_maps\obj44.asm"
0000F39E                            ; ---------------------------------------------------------------------------
0000F39E                            ; Sprite mappings - walls (GHZ)
0000F39E                            ; ---------------------------------------------------------------------------
0000F39E 0000                       		dc.w byte_E256-Map_obj44
0000F3A0 0000                       		dc.w byte_E26B-Map_obj44
0000F3A2 0000                       		dc.w byte_E280-Map_obj44
0000F3A4 04                         byte_E256:	dc.b 4
0000F3A5 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000F3AA F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F3AF 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000F3B4 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000F3B9 04                         byte_E26B:	dc.b 4
0000F3BA E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000F3BF F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F3C4 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000F3C9 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000F3CE 04                         byte_E280:	dc.b 4
0000F3CF E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000F3D4 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000F3D9 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000F3DE 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000F3E4 00                         		even
0000F3E4 00                         		even
0000F3E4                            
0000F3E4                            ; ===========================================================================
0000F3E4                            ; ---------------------------------------------------------------------------
0000F3E4                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000F3E4                            ; ---------------------------------------------------------------------------
0000F3E4                            
0000F3E4                            Obj13:					; XREF: Obj_Index
0000F3E4 7000                       		moveq	#0,d0
0000F3E6 1028 0024                  		move.b	$24(a0),d0
0000F3EA 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000F3EE 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000F3F2 6000 0000                  		bra.w	Obj14_ChkDel
0000F3F6                            ; ===========================================================================
0000F3F6 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000F3F8 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000F3FA                            ; ---------------------------------------------------------------------------
0000F3FA                            ;
0000F3FA                            ; Lava ball production rates
0000F3FA                            ;
0000F3FA 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000F400                            ; ===========================================================================
0000F400                            
0000F400                            Obj13_Main:				; XREF: Obj13_Index
0000F400 5428 0024                  		addq.b	#2,$24(a0)
0000F404 1028 0028                  		move.b	$28(a0),d0
0000F408 E848                       		lsr.w	#4,d0
0000F40A 0240 000F                  		andi.w	#$F,d0
0000F40E 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000F414 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000F41A 0228 000F 0028             		andi.b	#$F,$28(a0)
0000F420                            
0000F420                            Obj13_MakeLava:				; XREF: Obj13_Index
0000F420 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000F424 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000F426 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000F42C 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000F430 6600                       		bne.s	locret_E302
0000F432 6100 F7A8                  		bsr.w	SingleObjLoad
0000F436 6600                       		bne.s	locret_E302
0000F438 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000F43C 3368 0008 0008             		move.w	8(a0),8(a1)
0000F442 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F448 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F44E                            
0000F44E                            locret_E302:
0000F44E 4E75                       		rts	
0000F450                            ; ===========================================================================
0000F450                            ; ---------------------------------------------------------------------------
0000F450                            ; Object 14 - lava balls (MZ, SLZ)
0000F450                            ; ---------------------------------------------------------------------------
0000F450                            
0000F450                            Obj14:					; XREF: Obj_Index
0000F450 7000                       		moveq	#0,d0
0000F452 1028 0024                  		move.b	$24(a0),d0
0000F456 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000F45A 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000F45E 6000 F2F6                  		bra.w	DisplaySprite
0000F462                            ; ===========================================================================
0000F462 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000F464 0000                       		dc.w Obj14_Action-Obj14_Index
0000F466 0000                       		dc.w Obj14_Delete-Obj14_Index
0000F468                            
0000F468 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000F472 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000F47A                            ; ===========================================================================
0000F47A                            
0000F47A                            Obj14_Main:				; XREF: Obj14_Index
0000F47A 5428 0024                  		addq.b	#2,$24(a0)
0000F47E 117C 0008 0016             		move.b	#8,$16(a0)
0000F484 117C 0008 0017             		move.b	#8,$17(a0)
0000F48A 217C 0000 C3A2 0004        		move.l	#Map_obj14,4(a0)
0000F492 317C 0345 0002             		move.w	#$345,2(a0)
0000F498 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000F49E 6600                       		bne.s	loc_E35A
0000F4A0 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000F4A6                            
0000F4A6                            loc_E35A:
0000F4A6 117C 0004 0001             		move.b	#4,1(a0)
0000F4AC 117C 0003 0018             		move.b	#3,$18(a0)
0000F4B2 117C 008B 0020             		move.b	#$8B,$20(a0)
0000F4B8 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F4BE 4A28 0029                  		tst.b	$29(a0)
0000F4C2 6700                       		beq.s	Obj14_SetSpeed
0000F4C4 5428 0018                  		addq.b	#2,$18(a0)
0000F4C8                            
0000F4C8                            Obj14_SetSpeed:
0000F4C8 7000                       		moveq	#0,d0
0000F4CA 1028 0028                  		move.b	$28(a0),d0
0000F4CE D040                       		add.w	d0,d0
0000F4D0 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000F4D6 117C 0008 0019             		move.b	#8,$19(a0)
0000F4DC 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000F4E2 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000F4E4 117C 0010 0019             		move.b	#$10,$19(a0)
0000F4EA 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000F4F0 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000F4F6 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000F4FC                            
0000F4FC                            Obj14_PlaySnd:
0000F4FC 303C 00AE                  		move.w	#$AE,d0
0000F500 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000F506                            
0000F506                            Obj14_Action:				; XREF: Obj14_Index
0000F506 7000                       		moveq	#0,d0
0000F508 1028 0028                  		move.b	$28(a0),d0
0000F50C D040                       		add.w	d0,d0
0000F50E 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000F512 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000F516 6100 F218                  		bsr.w	SpeedToPos
0000F51A 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000F520 6100 C282                  		bsr.w	AnimateSprite
0000F524                            
0000F524                            Obj14_ChkDel:				; XREF: Obj13
0000F524 3028 0008                  		move.w	8(a0),d0
0000F528 0240 FF80                  		andi.w	#$FF80,d0
0000F52C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F530 0441 0080                  		subi.w	#$80,d1
0000F534 0241 FF80                  		andi.w	#$FF80,d1
0000F538 9041                       		sub.w	d1,d0
0000F53A 0C40 0280                  		cmpi.w	#$280,d0
0000F53E 6200 F252                  		bhi.w	DeleteObject
0000F542 4E75                       		rts	
0000F544                            ; ===========================================================================
0000F544 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000F548 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000F54C 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000F550 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000F554 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000F556                            ; ===========================================================================
0000F556                            ; lavaball types 00-03 fly up and fall back down
0000F556                            
0000F556                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000F556 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000F55C 3028 0030                  		move.w	$30(a0),d0
0000F560 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000F564 6400                       		bcc.s	loc_E41E	; if not, branch
0000F566 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000F56A                            
0000F56A                            loc_E41E:
0000F56A 08A8 0001 0022             		bclr	#1,$22(a0)
0000F570 4A68 0012                  		tst.w	$12(a0)
0000F574 6A00                       		bpl.s	locret_E430
0000F576 08E8 0001 0022             		bset	#1,$22(a0)
0000F57C                            
0000F57C                            locret_E430:
0000F57C 4E75                       		rts	
0000F57E                            ; ===========================================================================
0000F57E                            ; lavaball type	04 flies up until it hits the ceiling
0000F57E                            
0000F57E                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000F57E 08E8 0001 0022             		bset	#1,$22(a0)
0000F584 6100 0000                  		bsr.w	ObjHitCeiling
0000F588 4A41                       		tst.w	d1
0000F58A 6A00                       		bpl.s	locret_E452
0000F58C 117C 0008 0028             		move.b	#8,$28(a0)
0000F592 117C 0001 001C             		move.b	#1,$1C(a0)
0000F598 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000F59E                            
0000F59E                            locret_E452:
0000F59E 4E75                       		rts	
0000F5A0                            ; ===========================================================================
0000F5A0                            ; lavaball type	05 falls down until it hits the	floor
0000F5A0                            
0000F5A0                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000F5A0 08A8 0001 0022             		bclr	#1,$22(a0)
0000F5A6 6100 0000                  		bsr.w	ObjHitFloor
0000F5AA 4A41                       		tst.w	d1
0000F5AC 6A00                       		bpl.s	locret_E474
0000F5AE 117C 0008 0028             		move.b	#8,$28(a0)
0000F5B4 117C 0001 001C             		move.b	#1,$1C(a0)
0000F5BA 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000F5C0                            
0000F5C0                            locret_E474:
0000F5C0 4E75                       		rts	
0000F5C2                            ; ===========================================================================
0000F5C2                            ; lavaball types 06-07 move sideways
0000F5C2                            
0000F5C2                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000F5C2 08E8 0000 0022             		bset	#0,$22(a0)
0000F5C8 76F8                       		moveq	#-8,d3
0000F5CA 6100 0000                  		bsr.w	ObjHitWallLeft
0000F5CE 4A41                       		tst.w	d1
0000F5D0 6A00                       		bpl.s	locret_E498
0000F5D2 117C 0008 0028             		move.b	#8,$28(a0)
0000F5D8 117C 0003 001C             		move.b	#3,$1C(a0)
0000F5DE 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000F5E4                            
0000F5E4                            locret_E498:
0000F5E4 4E75                       		rts	
0000F5E6                            ; ===========================================================================
0000F5E6                            
0000F5E6                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000F5E6 08A8 0000 0022             		bclr	#0,$22(a0)
0000F5EC 7608                       		moveq	#8,d3
0000F5EE 6100 0000                  		bsr.w	ObjHitWallRight
0000F5F2 4A41                       		tst.w	d1
0000F5F4 6A00                       		bpl.s	locret_E4BC
0000F5F6 117C 0008 0028             		move.b	#8,$28(a0)
0000F5FC 117C 0003 001C             		move.b	#3,$1C(a0)
0000F602 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000F608                            
0000F608                            locret_E4BC:
0000F608 4E75                       		rts	
0000F60A                            ; ===========================================================================
0000F60A                            
0000F60A                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000F60A 4E75                       		rts	
0000F60C                            ; ===========================================================================
0000F60C                            
0000F60C                            Obj14_Delete:				; XREF: Obj14_Index
0000F60C 6000 F184                  		bra.w	DeleteObject
0000F610                            ; ===========================================================================
0000F610                            Ani_obj14:
0000F610                            	include "_anim\obj14.asm"
0000F610                            ; ---------------------------------------------------------------------------
0000F610                            ; Animation script - lava balls
0000F610                            ; ---------------------------------------------------------------------------
0000F610 0000                       		dc.w byte_E4CC-Ani_obj14
0000F612 0000                       		dc.w byte_E4D2-Ani_obj14
0000F614 0000                       		dc.w byte_E4D6-Ani_obj14
0000F616 0000                       		dc.w byte_E4DC-Ani_obj14
0000F618 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000F61E 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000F622 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000F628 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000F62C                            		even
0000F62C                            		even
0000F62C                            
0000F62C                            ; ===========================================================================
0000F62C                            ; ---------------------------------------------------------------------------
0000F62C                            ; Object 6D - flame thrower (SBZ)
0000F62C                            ; ---------------------------------------------------------------------------
0000F62C                            
0000F62C                            Obj6D:					; XREF: Obj_Index
0000F62C 7000                       		moveq	#0,d0
0000F62E 1028 0024                  		move.b	$24(a0),d0
0000F632 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000F636 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000F63A                            ; ===========================================================================
0000F63A 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000F63C 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000F63E                            ; ===========================================================================
0000F63E                            
0000F63E                            Obj6D_Main:				; XREF: Obj6D_Index
0000F63E 5428 0024                  		addq.b	#2,$24(a0)
0000F642 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000F64A 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000F650 0028 0004 0001             		ori.b	#4,1(a0)
0000F656 117C 0001 0018             		move.b	#1,$18(a0)
0000F65C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F662 117C 000C 0019             		move.b	#$C,$19(a0)
0000F668 1028 0028                  		move.b	$28(a0),d0
0000F66C 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000F670 D040                       		add.w	d0,d0		; multiply by 2
0000F672 3140 0030                  		move.w	d0,$30(a0)
0000F676 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000F67A 1028 0028                  		move.b	$28(a0),d0
0000F67E 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000F682 EB48                       		lsl.w	#5,d0		; multiply by $20
0000F684 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000F688 117C 000A 0036             		move.b	#$A,$36(a0)
0000F68E 0828 0001 0022             		btst	#1,$22(a0)
0000F694 6700                       		beq.s	Obj6D_Action
0000F696 117C 0002 001C             		move.b	#2,$1C(a0)
0000F69C 117C 0015 0036             		move.b	#$15,$36(a0)
0000F6A2                            
0000F6A2                            Obj6D_Action:				; XREF: Obj6D_Index
0000F6A2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000F6A6 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000F6A8 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000F6AE 0868 0000 001C             		bchg	#0,$1C(a0)
0000F6B4 6700                       		beq.s	loc_E57A
0000F6B6 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000F6BC 303C 00B3                  		move.w	#$B3,d0
0000F6C0 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play flame sound
0000F6C6                            
0000F6C6                            loc_E57A:
0000F6C6 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000F6CC 6100 C0D6                  		bsr.w	AnimateSprite
0000F6D0 117C 0000 0020             		move.b	#0,$20(a0)
0000F6D6 1028 0036                  		move.b	$36(a0),d0
0000F6DA B028 001A                  		cmp.b	$1A(a0),d0
0000F6DE 6600                       		bne.s	Obj6D_ChkDel
0000F6E0 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000F6E6                            
0000F6E6                            Obj6D_ChkDel:
0000F6E6 3028 0008                  		move.w	8(a0),d0
0000F6EA 0240 FF80                  		andi.w	#$FF80,d0
0000F6EE 3238 F700                  		move.w	($FFFFF700).w,d1
0000F6F2 0441 0080                  		subi.w	#$80,d1
0000F6F6 0241 FF80                  		andi.w	#$FF80,d1
0000F6FA 9041                       		sub.w	d1,d0
0000F6FC 0C40 0280                  		cmpi.w	#$280,d0
0000F700 6200 F090                  		bhi.w	DeleteObject
0000F704 6000 F050                  		bra.w	DisplaySprite
0000F708                            ; ===========================================================================
0000F708                            Ani_obj6D:
0000F708                            	include "_anim\obj6D.asm"
0000F708                            ; ---------------------------------------------------------------------------
0000F708                            ; Animation script - flamethrower (SBZ)
0000F708                            ; ---------------------------------------------------------------------------
0000F708 0000                       		dc.w byte_E5C4-Ani_obj6D
0000F70A 0000                       		dc.w byte_E5D2-Ani_obj6D
0000F70C 0000                       		dc.w byte_E5DC-Ani_obj6D
0000F70E 0000                       		dc.w byte_E5EA-Ani_obj6D
0000F710 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000F71E 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000F728 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000F736 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000F740                            		even
0000F740                            		even
0000F740                            
0000F740                            ; ---------------------------------------------------------------------------
0000F740                            ; Sprite mappings - flame thrower (SBZ)
0000F740                            ; ---------------------------------------------------------------------------
0000F740                            Map_obj6D:
0000F740                            	include "_maps\obj6D.asm"
0000F740                            ; ---------------------------------------------------------------------------
0000F740                            ; Sprite mappings - flame thrower (SBZ)
0000F740                            ; ---------------------------------------------------------------------------
0000F740 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000F744 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000F748 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000F74C 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000F750 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000F754 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000F758 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000F75C 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000F760 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000F764 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F768 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F76C 01                         byte_E620:	dc.b 1
0000F76D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F772 02                         byte_E626:	dc.b 2
0000F773 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F778 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F77D 02                         byte_E631:	dc.b 2
0000F77E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F783 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F788 03                         byte_E63C:	dc.b 3
0000F789 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F78E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F793 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F798 03                         byte_E64C:	dc.b 3
0000F799 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F79E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F7A3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F7A8 04                         byte_E65C:	dc.b 4
0000F7A9 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F7AE 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F7B3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F7B8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F7BD 04                         byte_E671:	dc.b 4
0000F7BE 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F7C3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F7C8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F7CD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F7D2 05                         byte_E686:	dc.b 5
0000F7D3 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F7D8 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F7DD 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F7E2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F7E7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F7EC 05                         byte_E6A0:	dc.b 5
0000F7ED F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F7F2 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F7F7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F7FC 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F801 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F806 06                         byte_E6BA:	dc.b 6
0000F807 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F80C F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F811 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F816 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F81B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F820 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F825 06                         byte_E6D9:	dc.b 6
0000F826 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F82B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F830 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F835 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F83A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F83F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F844 01                         byte_E6F8:	dc.b 1
0000F845 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F84A 02                         byte_E6FE:	dc.b 2
0000F84B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F850 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F855 02                         byte_E709:	dc.b 2
0000F856 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F85B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F860 03                         byte_E714:	dc.b 3
0000F861 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F866 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F86B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F870 03                         byte_E724:	dc.b 3
0000F871 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F876 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F87B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F880 04                         byte_E734:	dc.b 4
0000F881 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F886 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F88B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F890 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F895 04                         byte_E749:	dc.b 4
0000F896 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F89B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F8A0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F8A5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F8AA 05                         byte_E75E:	dc.b 5
0000F8AB F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F8B0 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F8B5 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F8BA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F8BF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F8C4 05                         byte_E778:	dc.b 5
0000F8C5 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F8CA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F8CF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F8D4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F8D9 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F8DE 06                         byte_E792:	dc.b 6
0000F8DF E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F8E4 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F8E9 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F8EE 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F8F3 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F8F8 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F8FD 06                         byte_E7B1:	dc.b 6
0000F8FE E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F903 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F908 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F90D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F912 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F917 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F91C                            		even
0000F91C                            		even
0000F91C                            
0000F91C                            ; ===========================================================================
0000F91C                            ; ---------------------------------------------------------------------------
0000F91C                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F91C                            ; ---------------------------------------------------------------------------
0000F91C                            
0000F91C                            Obj46:					; XREF: Obj_Index
0000F91C 7000                       		moveq	#0,d0
0000F91E 1028 0024                  		move.b	$24(a0),d0
0000F922 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F926 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F92A                            ; ===========================================================================
0000F92A 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F92C 0000                       		dc.w Obj46_Action-Obj46_Index
0000F92E                            ; ===========================================================================
0000F92E                            
0000F92E                            Obj46_Main:				; XREF: Obj46_Index
0000F92E 5428 0024                  		addq.b	#2,$24(a0)
0000F932 117C 000F 0016             		move.b	#$F,$16(a0)
0000F938 117C 000F 0017             		move.b	#$F,$17(a0)
0000F93E 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F946 317C 4000 0002             		move.w	#$4000,2(a0)
0000F94C 117C 0004 0001             		move.b	#4,1(a0)
0000F952 117C 0003 0018             		move.b	#3,$18(a0)
0000F958 117C 0010 0019             		move.b	#$10,$19(a0)
0000F95E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F964 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F96A                            
0000F96A                            Obj46_Action:				; XREF: Obj46_Index
0000F96A 4A28 0001                  		tst.b	1(a0)
0000F96E 6A00                       		bpl.s	Obj46_ChkDel
0000F970 7000                       		moveq	#0,d0
0000F972 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F976 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F97A D040                       		add.w	d0,d0
0000F97C 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F980 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F984 323C 001B                  		move.w	#$1B,d1
0000F988 343C 0010                  		move.w	#$10,d2
0000F98C 363C 0011                  		move.w	#$11,d3
0000F990 3828 0008                  		move.w	8(a0),d4
0000F994 6100 0000                  		bsr.w	SolidObject
0000F998                            
0000F998                            Obj46_ChkDel:
0000F998 6100 EDBC                  		bsr.w	DisplaySprite
0000F99C 3028 0008                  		move.w	8(a0),d0
0000F9A0 0240 FF80                  		andi.w	#$FF80,d0
0000F9A4 3238 F700                  		move.w	($FFFFF700).w,d1
0000F9A8 0441 0080                  		subi.w	#$80,d1
0000F9AC 0241 FF80                  		andi.w	#$FF80,d1
0000F9B0 9041                       		sub.w	d1,d0
0000F9B2 0C40 0280                  		cmpi.w	#$280,d0
0000F9B6 6200 EDDA                  		bhi.w	DeleteObject
0000F9BA 4E75                       		rts	
0000F9BC                            ; ===========================================================================
0000F9BC 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F9BE 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F9C0 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F9C2 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F9C4 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F9C6                            ; ===========================================================================
0000F9C6                            
0000F9C6                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F9C6 4E75                       		rts	
0000F9C8                            ; ===========================================================================
0000F9C8                            
0000F9C8                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F9C8 3038 D008                  		move.w	($FFFFD008).w,d0
0000F9CC 9068 0008                  		sub.w	8(a0),d0
0000F9D0 6400                       		bcc.s	loc_E888
0000F9D2 4440                       		neg.w	d0
0000F9D4                            
0000F9D4                            loc_E888:
0000F9D4 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F9D8 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F9DA 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F9E0                            
0000F9E0                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F9E0 7000                       		moveq	#0,d0
0000F9E2 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F9E6 0828 0003 0028             		btst	#3,$28(a0)
0000F9EC 6700                       		beq.s	loc_E8A8
0000F9EE 4440                       		neg.w	d0
0000F9F0 0640 0010                  		addi.w	#$10,d0
0000F9F4                            
0000F9F4                            loc_E8A8:
0000F9F4 3228 0030                  		move.w	$30(a0),d1
0000F9F8 9240                       		sub.w	d0,d1
0000F9FA 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F9FE 4E75                       		rts	
0000FA00                            ; ===========================================================================
0000FA00                            
0000FA00                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000FA00 6100 ED2E                  		bsr.w	SpeedToPos
0000FA04 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000FA0A 6100 0000                  		bsr.w	ObjHitFloor
0000FA0E 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000FA10 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000FA14 D368 000C                  		add.w	d1,$C(a0)
0000FA18 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000FA1C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FA22 117C 0004 0028             		move.b	#4,$28(a0)
0000FA28 3011                       		move.w	(a1),d0
0000FA2A 0240 03FF                  		andi.w	#$3FF,d0
0000FA2E 0C40 02E8                  		cmpi.w	#$2E8,d0
0000FA32 6400                       		bcc.s	locret_E8EE
0000FA34 117C 0000 0028             		move.b	#0,$28(a0)
0000FA3A                            
0000FA3A                            locret_E8EE:
0000FA3A 4E75                       		rts	
0000FA3C                            ; ===========================================================================
0000FA3C                            
0000FA3C                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000FA3C 7000                       		moveq	#0,d0
0000FA3E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000FA42 E648                       		lsr.w	#3,d0
0000FA44 3228 0030                  		move.w	$30(a0),d1
0000FA48 9240                       		sub.w	d0,d1
0000FA4A 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000FA4E 4E75                       		rts	
0000FA50                            ; ===========================================================================
0000FA50                            ; ---------------------------------------------------------------------------
0000FA50                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000FA50                            ; ---------------------------------------------------------------------------
0000FA50                            Map_obj46:
0000FA50                            	include "_maps\obj46.asm"
0000FA50                            ; ---------------------------------------------------------------------------
0000FA50                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000FA50                            ; ---------------------------------------------------------------------------
0000FA50 0000                       		dc.w byte_E906-Map_obj46
0000FA52 01                         byte_E906:	dc.b 1
0000FA53 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000FA58                            		even
0000FA58                            		even
0000FA58                            
0000FA58                            ; ===========================================================================
0000FA58                            ; ---------------------------------------------------------------------------
0000FA58                            ; Object 12 - lamp (SYZ)
0000FA58                            ; ---------------------------------------------------------------------------
0000FA58                            
0000FA58                            Obj12:					; XREF: Obj_Index
0000FA58 7000                       		moveq	#0,d0
0000FA5A 1028 0024                  		move.b	$24(a0),d0
0000FA5E 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000FA62 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000FA66                            ; ===========================================================================
0000FA66 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000FA68 0000                       		dc.w Obj12_Animate-Obj12_Index
0000FA6A                            ; ===========================================================================
0000FA6A                            
0000FA6A                            Obj12_Main:				; XREF: Obj12_Index
0000FA6A 5428 0024                  		addq.b	#2,$24(a0)
0000FA6E 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000FA76 317C 0000 0002             		move.w	#0,2(a0)
0000FA7C 117C 0004 0001             		move.b	#4,1(a0)
0000FA82 117C 0010 0019             		move.b	#$10,$19(a0)
0000FA88 117C 0006 0018             		move.b	#6,$18(a0)
0000FA8E                            
0000FA8E                            Obj12_Animate:				; XREF: Obj12_Index
0000FA8E 5328 001E                  		subq.b	#1,$1E(a0)
0000FA92 6A00                       		bpl.s	Obj12_ChkDel
0000FA94 117C 0007 001E             		move.b	#7,$1E(a0)
0000FA9A 5228 001A                  		addq.b	#1,$1A(a0)
0000FA9E 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000FAA4 6500                       		bcs.s	Obj12_ChkDel
0000FAA6 117C 0000 001A             		move.b	#0,$1A(a0)
0000FAAC                            
0000FAAC                            Obj12_ChkDel:
0000FAAC 3028 0008                  		move.w	8(a0),d0
0000FAB0 0240 FF80                  		andi.w	#$FF80,d0
0000FAB4 3238 F700                  		move.w	($FFFFF700).w,d1
0000FAB8 0441 0080                  		subi.w	#$80,d1
0000FABC 0241 FF80                  		andi.w	#$FF80,d1
0000FAC0 9041                       		sub.w	d1,d0
0000FAC2 0C40 0280                  		cmpi.w	#$280,d0
0000FAC6 6200 ECCA                  		bhi.w	DeleteObject
0000FACA 6000 EC8A                  		bra.w	DisplaySprite
0000FACE                            ; ===========================================================================
0000FACE                            ; ---------------------------------------------------------------------------
0000FACE                            ; Sprite mappings - lamp (SYZ)
0000FACE                            ; ---------------------------------------------------------------------------
0000FACE                            Map_obj12:
0000FACE                            	include "_maps\obj12.asm"
0000FACE                            ; ---------------------------------------------------------------------------
0000FACE                            ; Sprite mappings - lamp (SYZ)
0000FACE                            ; ---------------------------------------------------------------------------
0000FACE 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000FAD2 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000FAD6 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000FADA 02                         byte_E98E:	dc.b 2
0000FADB F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000FAE0 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000FAE5 02                         byte_E999:	dc.b 2
0000FAE6 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000FAEB 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000FAF0 02                         byte_E9A4:	dc.b 2
0000FAF1 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000FAF6 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000FAFB 02                         byte_E9AF:	dc.b 2
0000FAFC F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000FB01 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000FB06 02                         byte_E9BA:	dc.b 2
0000FB07 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000FB0C 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000FB11 02                         byte_E9C5:	dc.b 2
0000FB12 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000FB17 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000FB1C                            		even
0000FB1C                            		even
0000FB1C                            
0000FB1C                            ; ===========================================================================
0000FB1C                            ; ---------------------------------------------------------------------------
0000FB1C                            ; Object 47 - pinball bumper (SYZ)
0000FB1C                            ; ---------------------------------------------------------------------------
0000FB1C                            
0000FB1C                            Obj47:					; XREF: Obj_Index
0000FB1C 7000                       		moveq	#0,d0
0000FB1E 1028 0024                  		move.b	$24(a0),d0
0000FB22 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000FB26 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000FB2A                            ; ===========================================================================
0000FB2A 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000FB2C 0000                       		dc.w Obj47_Hit-Obj47_Index
0000FB2E                            ; ===========================================================================
0000FB2E                            
0000FB2E                            Obj47_Main:				; XREF: Obj47_Index
0000FB2E 5428 0024                  		addq.b	#2,$24(a0)
0000FB32 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000FB3A 317C 0380 0002             		move.w	#$380,2(a0)
0000FB40 117C 0004 0001             		move.b	#4,1(a0)
0000FB46 117C 0010 0019             		move.b	#$10,$19(a0)
0000FB4C 117C 0001 0018             		move.b	#1,$18(a0)
0000FB52 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000FB58                            
0000FB58                            Obj47_Hit:				; XREF: Obj47_Index
0000FB58 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000FB5C 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000FB60 4228 0021                  		clr.b	$21(a0)
0000FB64 43F8 D000                  		lea	($FFFFD000).w,a1
0000FB68 3228 0008                  		move.w	8(a0),d1
0000FB6C 3428 000C                  		move.w	$C(a0),d2
0000FB70 9269 0008                  		sub.w	8(a1),d1
0000FB74 9469 000C                  		sub.w	$C(a1),d2
0000FB78 4EB9 0000 36E4             		jsr	(CalcAngle).l
0000FB7E 4EB9 0000 3416             		jsr	(CalcSine).l
0000FB84 C3FC F900                  		muls.w	#-$700,d1
0000FB88 E081                       		asr.l	#8,d1
0000FB8A 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000FB8E C1FC F900                  		muls.w	#-$700,d0
0000FB92 E080                       		asr.l	#8,d0
0000FB94 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000FB98 08E9 0001 0022             		bset	#1,$22(a1)
0000FB9E 08A9 0004 0022             		bclr	#4,$22(a1)
0000FBA4 08A9 0005 0022             		bclr	#5,$22(a1)
0000FBAA 4229 003C                  		clr.b	$3C(a1)
0000FBAE 117C 0001 001C             		move.b	#1,$1C(a0)
0000FBB4 303C 00B4                  		move.w	#$B4,d0
0000FBB8 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play bumper sound
0000FBBE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FBC2 7000                       		moveq	#0,d0
0000FBC4 1028 0023                  		move.b	$23(a0),d0
0000FBC8 6700                       		beq.s	Obj47_Score
0000FBCA 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000FBD0 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000FBD2 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000FBD6                            
0000FBD6                            Obj47_Score:
0000FBD6 7001                       		moveq	#1,d0
0000FBD8 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000FBDE 6100 EFFC                  		bsr.w	SingleObjLoad
0000FBE2 6600                       		bne.s	Obj47_Display
0000FBE4 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000FBE8 3368 0008 0008             		move.w	8(a0),8(a1)
0000FBEE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FBF4 137C 0004 001A             		move.b	#4,$1A(a1)
0000FBFA                            
0000FBFA                            Obj47_Display:
0000FBFA 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000FC00 6100 BBA2                  		bsr.w	AnimateSprite
0000FC04 3028 0008                  		move.w	8(a0),d0
0000FC08 0240 FF80                  		andi.w	#$FF80,d0
0000FC0C 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC10 0441 0080                  		subi.w	#$80,d1
0000FC14 0241 FF80                  		andi.w	#$FF80,d1
0000FC18 9041                       		sub.w	d1,d0
0000FC1A 0C40 0280                  		cmpi.w	#$280,d0
0000FC1E 6200                       		bhi.s	Obj47_ChkHit
0000FC20 6000 EB34                  		bra.w	DisplaySprite
0000FC24                            ; ===========================================================================
0000FC24                            
0000FC24                            Obj47_ChkHit:				; XREF: Obj47_Display
0000FC24 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FC28 7000                       		moveq	#0,d0
0000FC2A 1028 0023                  		move.b	$23(a0),d0
0000FC2E 6700                       		beq.s	Obj47_Delete
0000FC30 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FC36                            
0000FC36                            Obj47_Delete:
0000FC36 6000 EB5A                  		bra.w	DeleteObject
0000FC3A                            ; ===========================================================================
0000FC3A                            Ani_obj47:
0000FC3A                            	include "_anim\obj47.asm"
0000FC3A                            ; ---------------------------------------------------------------------------
0000FC3A                            ; Animation script - flamethrower (SBZ)
0000FC3A                            ; ---------------------------------------------------------------------------
0000FC3A 0000                       		dc.w byte_EAF4-Ani_obj47
0000FC3C 0000                       		dc.w byte_EAF8-Ani_obj47
0000FC3E 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000FC42 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000FC4A                            		even
0000FC4A                            		even
0000FC4A                            
0000FC4A                            ; ---------------------------------------------------------------------------
0000FC4A                            ; Sprite mappings - pinball bumper (SYZ)
0000FC4A                            ; ---------------------------------------------------------------------------
0000FC4A                            Map_obj47:
0000FC4A                            	include "_maps\obj47.asm"
0000FC4A                            ; ---------------------------------------------------------------------------
0000FC4A                            ; Sprite mappings - pinball bumper (SYZ)
0000FC4A                            ; ---------------------------------------------------------------------------
0000FC4A 0000                       		dc.w byte_EB06-Map_obj47
0000FC4C 0000                       		dc.w byte_EB11-Map_obj47
0000FC4E 0000                       		dc.w byte_EB1C-Map_obj47
0000FC50 02                         byte_EB06:	dc.b 2
0000FC51 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000FC56 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000FC5B 02                         byte_EB11:	dc.b 2
0000FC5C F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000FC61 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000FC66 02                         byte_EB1C:	dc.b 2
0000FC67 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000FC6C F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000FC72 00                         		even
0000FC72 00                         		even
0000FC72                            
0000FC72                            ; ===========================================================================
0000FC72                            ; ---------------------------------------------------------------------------
0000FC72                            ; Object 0D - signpost at the end of a level
0000FC72                            ; ---------------------------------------------------------------------------
0000FC72                            
0000FC72                            Obj0D:					; XREF: Obj_Index
0000FC72 7000                       		moveq	#0,d0
0000FC74 1028 0024                  		move.b	$24(a0),d0
0000FC78 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000FC7C 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000FC80 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000FC86 6100 BB1C                  		bsr.w	AnimateSprite
0000FC8A 6100 EACA                  		bsr.w	DisplaySprite
0000FC8E 3028 0008                  		move.w	8(a0),d0
0000FC92 0240 FF80                  		andi.w	#$FF80,d0
0000FC96 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC9A 0441 0080                  		subi.w	#$80,d1
0000FC9E 0241 FF80                  		andi.w	#$FF80,d1
0000FCA2 9041                       		sub.w	d1,d0
0000FCA4 0C40 0280                  		cmpi.w	#$280,d0
0000FCA8 6200 EAE8                  		bhi.w	DeleteObject
0000FCAC 4E75                       		rts	
0000FCAE                            ; ===========================================================================
0000FCAE 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000FCB0 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000FCB2 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000FCB4 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000FCB6 0000                       		dc.w locret_ED1A-Obj0D_Index
0000FCB8                            ; ===========================================================================
0000FCB8                            
0000FCB8                            Obj0D_Main:				; XREF: Obj0D_Index
0000FCB8 5428 0024                  		addq.b	#2,$24(a0)
0000FCBC 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000FCC4 317C 0680 0002             		move.w	#$680,2(a0)
0000FCCA 117C 0004 0001             		move.b	#4,1(a0)
0000FCD0 117C 0018 0019             		move.b	#$18,$19(a0)
0000FCD6 117C 0004 0018             		move.b	#4,$18(a0)
0000FCDC                            
0000FCDC                            Obj0D_Touch:				; XREF: Obj0D_Index
0000FCDC 3038 D008                  		move.w	($FFFFD008).w,d0
0000FCE0 9068 0008                  		sub.w	8(a0),d0
0000FCE4 6500                       		bcs.s	locret_EBBA
0000FCE6 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000FCEA 6400                       		bcc.s	locret_EBBA	; if not, branch
0000FCEC 303C 00CF                  		move.w	#$CF,d0
0000FCF0 4EB9 0000 1C74             		jsr	(PlaySound).l	; play signpost	sound
0000FCF6 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000FCFA 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000FD00 5428 0024                  		addq.b	#2,$24(a0)
0000FD04                            
0000FD04                            locret_EBBA:
0000FD04 4E75                       		rts	
0000FD06                            ; ===========================================================================
0000FD06                            
0000FD06                            Obj0D_Spin:				; XREF: Obj0D_Index
0000FD06 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000FD0A 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000FD0C 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000FD12 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000FD16 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000FD1C 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000FD1E 5428 0024                  		addq.b	#2,$24(a0)
0000FD22                            
0000FD22                            Obj0D_Sparkle:
0000FD22 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000FD26 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000FD28 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000FD2E 7000                       		moveq	#0,d0
0000FD30 1028 0034                  		move.b	$34(a0),d0
0000FD34 5428 0034                  		addq.b	#2,$34(a0)
0000FD38 0228 000E 0034             		andi.b	#$E,$34(a0)
0000FD3E 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000FD42 6100 EE98                  		bsr.w	SingleObjLoad
0000FD46 6600                       		bne.s	locret_EC42
0000FD48 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000FD4C 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000FD52 101A                       		move.b	(a2)+,d0
0000FD54 4880                       		ext.w	d0
0000FD56 D068 0008                  		add.w	8(a0),d0
0000FD5A 3340 0008                  		move.w	d0,8(a1)
0000FD5E 101A                       		move.b	(a2)+,d0
0000FD60 4880                       		ext.w	d0
0000FD62 D068 000C                  		add.w	$C(a0),d0
0000FD66 3340 000C                  		move.w	d0,$C(a1)
0000FD6A 237C 0000 AF42 0004        		move.l	#Map_obj25,4(a1)
0000FD72 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000FD78 137C 0004 0001             		move.b	#4,1(a1)
0000FD7E 137C 0002 0018             		move.b	#2,$18(a1)
0000FD84 137C 0008 0019             		move.b	#8,$19(a1)
0000FD8A                            
0000FD8A                            locret_EC42:
0000FD8A 4E75                       		rts	
0000FD8C                            ; ===========================================================================
0000FD8C E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000FD8E 0808                       		dc.b	8,   8
0000FD90 F000                       		dc.b -$10,   0
0000FD92 18F8                       		dc.b  $18,  -8
0000FD94 00F8                       		dc.b	0,  -8
0000FD96 1000                       		dc.b  $10,   0
0000FD98 E808                       		dc.b -$18,   8
0000FD9A 1810                       		dc.b  $18, $10
0000FD9C                            ; ===========================================================================
0000FD9C                            
0000FD9C                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000FD9C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000FDA0 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000FDA4 0838 0001 D022             		btst	#1,($FFFFD022).w
0000FDAA 6600                       		bne.s	loc_EC70
0000FDAC 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000FDB2 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000FDB8 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000FDBA 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000FDC0 6000                       		bra.s	loc_EC70
0000FDC2                            
0000FDC2                            Obj0D_MoveLeft:
0000FDC2 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000FDC8                            
0000FDC8                            loc_EC70:
0000FDC8 4A38 D000                  		tst.b	($FFFFD000).w
0000FDCC 6700                       		beq.s	loc_EC86
0000FDCE 3038 D008                  		move.w	($FFFFD008).w,d0
0000FDD2 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000FDD6 0641 0128                  		addi.w	#$128,d1
0000FDDA B041                       		cmp.w	d1,d0
0000FDDC 6500                       		bcs.s	locret_ECEE
0000FDDE                            
0000FDDE                            loc_EC86:
0000FDDE 5428 0024                  		addq.b	#2,$24(a0)
0000FDE2                            
0000FDE2                            ; ---------------------------------------------------------------------------
0000FDE2                            ; Subroutine to	set up bonuses at the end of an	act
0000FDE2                            ; ---------------------------------------------------------------------------
0000FDE2                            
0000FDE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FDE2                            
0000FDE2                            
0000FDE2                            GotThroughAct:				; XREF: Obj3E_EndAct
0000FDE2 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000FDE6 6600                       		bne.s	locret_ECEE
0000FDE8 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000FDEE 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000FDF2 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000FDF6 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000FDFC 7010                       		moveq	#$10,d0
0000FDFE 4EB9 0000 1E8A             		jsr	(LoadPLC2).l	; load title card patterns
0000FE04 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000FE0A 7000                       		moveq	#0,d0
0000FE0C 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000FE10 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000FE14 7200                       		moveq	#0,d1
0000FE16 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000FE1A D041                       		add.w	d1,d0		; add up your time
0000FE1C 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000FE20 7214                       		moveq	#$14,d1
0000FE22 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000FE24 6500                       		bcs.s	loc_ECD0	; if not, branch
0000FE26 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000FE28                            
0000FE28                            loc_ECD0:
0000FE28 D040                       		add.w	d0,d0
0000FE2A 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000FE30 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000FE34 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000FE38 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000FE3C 303C 008E                  		move.w	#$8E,d0
0000FE40 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000FE46                            
0000FE46                            locret_ECEE:
0000FE46 4E75                       		rts	
0000FE48                            ; End of function GotThroughAct
0000FE48                            
0000FE48                            ; ===========================================================================
0000FE48 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000FE5C 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000FE72                            ; ===========================================================================
0000FE72                            
0000FE72                            locret_ED1A:				; XREF: Obj0D_Index
0000FE72 4E75                       		rts	
0000FE74                            ; ===========================================================================
0000FE74                            Ani_obj0D:
0000FE74                            	include "_anim\obj0D.asm"
0000FE74                            ; ---------------------------------------------------------------------------
0000FE74                            ; Animation script - signpost
0000FE74                            ; ---------------------------------------------------------------------------
0000FE74 0000                       		dc.w byte_ED24-Ani_obj0D
0000FE76 0000                       		dc.w byte_ED28-Ani_obj0D
0000FE78 0000                       		dc.w byte_ED2E-Ani_obj0D
0000FE7A 0000                       		dc.w byte_ED34-Ani_obj0D
0000FE7C 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000FE80 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000FE86 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000FE8C 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000FE90 00                         		even
0000FE90 00                         		even
0000FE90                            
0000FE90                            ; ---------------------------------------------------------------------------
0000FE90                            ; Sprite mappings - signpost
0000FE90                            ; ---------------------------------------------------------------------------
0000FE90                            Map_obj0D:
0000FE90                            	include "_maps\obj0D.asm"
0000FE90                            ; ---------------------------------------------------------------------------
0000FE90                            ; Sprite mappings - signpost
0000FE90                            ; ---------------------------------------------------------------------------
0000FE90 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000FE94 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000FE98 0000                       		dc.w byte_ED73-Map_obj0D
0000FE9A 03                         byte_ED42:	dc.b 3
0000FE9B F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000FEA0 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000FEA5 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000FEAA 02                         byte_ED52:	dc.b 2
0000FEAB F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000FEB0 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000FEB5 02                         byte_ED5D:	dc.b 2
0000FEB6 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000FEBB 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000FEC0 02                         byte_ED68:	dc.b 2
0000FEC1 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000FEC6 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000FECB 03                         byte_ED73:	dc.b 3
0000FECC F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000FED1 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000FED6 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000FEDC 00                         		even
0000FEDC 00                         		even
0000FEDC                            
0000FEDC                            ; ===========================================================================
0000FEDC                            ; ---------------------------------------------------------------------------
0000FEDC                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000FEDC                            ; ---------------------------------------------------------------------------
0000FEDC                            
0000FEDC                            Obj4C:					; XREF: Obj_Index
0000FEDC 7000                       		moveq	#0,d0
0000FEDE 1028 0024                  		move.b	$24(a0),d0
0000FEE2 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000FEE6 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000FEEA 6000 0000                  		bra.w	Obj4D_ChkDel
0000FEEE                            ; ===========================================================================
0000FEEE 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000FEF0 0000                       		dc.w loc_EDCC-Obj4C_Index
0000FEF2 0000                       		dc.w loc_EE3E-Obj4C_Index
0000FEF4 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000FEF6 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000FEF8 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000FEFA                            ; ===========================================================================
0000FEFA                            
0000FEFA                            Obj4C_Main:				; XREF: Obj4C_Index
0000FEFA 5428 0024                  		addq.b	#2,$24(a0)
0000FEFE 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000FF06 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000FF0C 117C 0004 0001             		move.b	#4,1(a0)
0000FF12 117C 0001 0018             		move.b	#1,$18(a0)
0000FF18 117C 0038 0019             		move.b	#$38,$19(a0)
0000FF1E 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000FF24                            
0000FF24                            loc_EDCC:				; XREF: Obj4C_Index
0000FF24 5368 0032                  		subq.w	#1,$32(a0)
0000FF28 6A00                       		bpl.s	locret_EDF0
0000FF2A 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000FF30 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FF34 3228 000C                  		move.w	$C(a0),d1
0000FF38 B041                       		cmp.w	d1,d0
0000FF3A 6400                       		bcc.s	locret_EDF0
0000FF3C 0441 0170                  		subi.w	#$170,d1
0000FF40 B041                       		cmp.w	d1,d0
0000FF42 6500                       		bcs.s	locret_EDF0
0000FF44 5428 0024                  		addq.b	#2,$24(a0)
0000FF48                            
0000FF48                            locret_EDF0:
0000FF48 4E75                       		rts	
0000FF4A                            ; ===========================================================================
0000FF4A                            
0000FF4A                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000FF4A 5428 0024                  		addq.b	#2,$24(a0)
0000FF4E 6100 ECA2                  		bsr.w	SingleObjLoad2
0000FF52 6600                       		bne.s	loc_EE18
0000FF54 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000FF58 3368 0008 0008             		move.w	8(a0),8(a1)
0000FF5E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FF64 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FF6A 2348 003C                  		move.l	a0,$3C(a1)
0000FF6E                            
0000FF6E                            loc_EE18:
0000FF6E 117C 0001 001C             		move.b	#1,$1C(a0)
0000FF74 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000FF78 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000FF7A 117C 0004 001C             		move.b	#4,$1C(a0)
0000FF80 6000                       		bra.s	Obj4C_Display
0000FF82                            ; ===========================================================================
0000FF82                            
0000FF82                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000FF82 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000FF86 08E9 0001 0022             		bset	#1,$22(a1)
0000FF8C 337C FA80 0012             		move.w	#-$580,$12(a1)
0000FF92 6000                       		bra.s	Obj4C_Display
0000FF94                            ; ===========================================================================
0000FF94                            
0000FF94                            loc_EE3E:				; XREF: Obj4C_Index
0000FF94 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000FF98 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000FF9A 5428 0024                  		addq.b	#2,$24(a0)
0000FF9E 4E75                       		rts	
0000FFA0                            ; ===========================================================================
0000FFA0                            
0000FFA0                            Obj4C_Display:				; XREF: Obj4C_Index
0000FFA0 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000FFA6 6100 B7FC                  		bsr.w	AnimateSprite
0000FFAA 6100 E7AA                  		bsr.w	DisplaySprite
0000FFAE 4E75                       		rts	
0000FFB0                            ; ===========================================================================
0000FFB0                            
0000FFB0                            Obj4C_Delete:				; XREF: Obj4C_Index
0000FFB0 117C 0000 001C             		move.b	#0,$1C(a0)
0000FFB6 117C 0002 0024             		move.b	#2,$24(a0)
0000FFBC 4A28 0028                  		tst.b	$28(a0)
0000FFC0 6700 E7D0                  		beq.w	DeleteObject
0000FFC4 4E75                       		rts	
0000FFC6                            ; ===========================================================================
0000FFC6                            ; ---------------------------------------------------------------------------
0000FFC6                            ; Object 4D - lava geyser / lavafall (MZ)
0000FFC6                            ; ---------------------------------------------------------------------------
0000FFC6                            
0000FFC6                            Obj4D:					; XREF: Obj_Index
0000FFC6 7000                       		moveq	#0,d0
0000FFC8 1028 0024                  		move.b	$24(a0),d0
0000FFCC 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000FFD0 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000FFD4 6000 E780                  		bra.w	DisplaySprite
0000FFD8                            ; ===========================================================================
0000FFD8 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000FFDA 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000FFDC 0000                       		dc.w loc_EFFC-Obj4D_Index
0000FFDE 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000FFE0                            
0000FFE0 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000FFE4                            ; ===========================================================================
0000FFE4                            
0000FFE4                            Obj4D_Main:				; XREF: Obj4D_Index
0000FFE4 5428 0024                  		addq.b	#2,$24(a0)
0000FFE8 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FFEE 4A28 0028                  		tst.b	$28(a0)
0000FFF2 6700                       		beq.s	loc_EEA4
0000FFF4 0468 0250 000C             		subi.w	#$250,$C(a0)
0000FFFA                            
0000FFFA                            loc_EEA4:
0000FFFA 7000                       		moveq	#0,d0
0000FFFC 1028 0028                  		move.b	$28(a0),d0
00010000 D040                       		add.w	d0,d0
00010002 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
00010008 2248                       		movea.l	a0,a1
0001000A 7201                       		moveq	#1,d1
0001000C 6100                       		bsr.s	Obj4D_MakeLava
0001000E 6000                       		bra.s	loc_EF10
00010010                            ; ===========================================================================
00010010                            
00010010                            Obj4D_Loop:
00010010 6100 EBE0                  		bsr.w	SingleObjLoad2
00010014 6600                       		bne.s	loc_EF0A
00010016                            
00010016                            Obj4D_MakeLava:				; XREF: Obj4D_Main
00010016 12BC 004D                  		move.b	#$4D,0(a1)
0001001A 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
00010022 337C 63A8 0002             		move.w	#$63A8,2(a1)
00010028 137C 0004 0001             		move.b	#4,1(a1)
0001002E 137C 0020 0019             		move.b	#$20,$19(a1)
00010034 3368 0008 0008             		move.w	8(a0),8(a1)
0001003A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010040 1368 0028 0028             		move.b	$28(a0),$28(a1)
00010046 137C 0001 0018             		move.b	#1,$18(a1)
0001004C 137C 0005 001C             		move.b	#5,$1C(a1)
00010052 4A28 0028                  		tst.b	$28(a0)
00010056 6700                       		beq.s	loc_EF0A
00010058 137C 0002 001C             		move.b	#2,$1C(a1)
0001005E                            
0001005E                            loc_EF0A:
0001005E 51C9 FFB0                  		dbf	d1,Obj4D_Loop
00010062 4E75                       		rts	
00010064                            ; ===========================================================================
00010064                            
00010064                            loc_EF10:				; XREF: Obj4D_Main
00010064 0669 0060 000C             		addi.w	#$60,$C(a1)
0001006A 3368 0030 0030             		move.w	$30(a0),$30(a1)
00010070 0669 0060 0030             		addi.w	#$60,$30(a1)
00010076 137C 0093 0020             		move.b	#$93,$20(a1)
0001007C 137C 0080 0016             		move.b	#$80,$16(a1)
00010082 08E9 0004 0001             		bset	#4,1(a1)
00010088 5829 0024                  		addq.b	#4,$24(a1)
0001008C 2348 003C                  		move.l	a0,$3C(a1)
00010090 4A28 0028                  		tst.b	$28(a0)
00010094 6700                       		beq.s	Obj4D_PlaySnd
00010096 7200                       		moveq	#0,d1
00010098 6100 FF76                  		bsr.w	Obj4D_Loop
0001009C 5429 0024                  		addq.b	#2,$24(a1)
000100A0 08E9 0004 0002             		bset	#4,2(a1)
000100A6 0669 0100 000C             		addi.w	#$100,$C(a1)
000100AC 137C 0000 0018             		move.b	#0,$18(a1)
000100B2 3368 0030 0030             		move.w	$30(a0),$30(a1)
000100B8 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
000100BE 117C 0000 0028             		move.b	#0,$28(a0)
000100C4                            
000100C4                            Obj4D_PlaySnd:
000100C4 303C 00C8                  		move.w	#$C8,d0
000100C8 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play flame sound
000100CE                            
000100CE                            Obj4D_Action:				; XREF: Obj4D_Index
000100CE 7000                       		moveq	#0,d0
000100D0 1028 0028                  		move.b	$28(a0),d0
000100D4 D040                       		add.w	d0,d0
000100D6 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
000100DA 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
000100DE 6100 E650                  		bsr.w	SpeedToPos
000100E2 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
000100E8 6100 B6BA                  		bsr.w	AnimateSprite
000100EC                            
000100EC                            Obj4D_ChkDel:				; XREF: Obj4C
000100EC 3028 0008                  		move.w	8(a0),d0
000100F0 0240 FF80                  		andi.w	#$FF80,d0
000100F4 3238 F700                  		move.w	($FFFFF700).w,d1
000100F8 0441 0080                  		subi.w	#$80,d1
000100FC 0241 FF80                  		andi.w	#$FF80,d1
00010100 9041                       		sub.w	d1,d0
00010102 0C40 0280                  		cmpi.w	#$280,d0
00010106 6200 E68A                  		bhi.w	DeleteObject
0001010A 4E75                       		rts	
0001010C                            ; ===========================================================================
0001010C 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0001010E 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
00010110                            ; ===========================================================================
00010110                            
00010110                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
00010110 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010116 3028 0030                  		move.w	$30(a0),d0
0001011A B068 000C                  		cmp.w	$C(a0),d0
0001011E 6400                       		bcc.s	locret_EFDA
00010120 5828 0024                  		addq.b	#4,$24(a0)
00010124 2268 003C                  		movea.l	$3C(a0),a1
00010128 137C 0003 001C             		move.b	#3,$1C(a1)
0001012E                            
0001012E                            locret_EFDA:
0001012E 4E75                       		rts	
00010130                            ; ===========================================================================
00010130                            
00010130                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
00010130 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010136 3028 0030                  		move.w	$30(a0),d0
0001013A B068 000C                  		cmp.w	$C(a0),d0
0001013E 6400                       		bcc.s	locret_EFFA
00010140 5828 0024                  		addq.b	#4,$24(a0)
00010144 2268 003C                  		movea.l	$3C(a0),a1
00010148 137C 0001 001C             		move.b	#1,$1C(a1)
0001014E                            
0001014E                            locret_EFFA:
0001014E 4E75                       		rts	
00010150                            ; ===========================================================================
00010150                            
00010150                            loc_EFFC:				; XREF: Obj4D_Index
00010150 2268 003C                  		movea.l	$3C(a0),a1
00010154 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0001015A 6700 0000                  		beq.w	Obj4D_Delete
0001015E 3029 000C                  		move.w	$C(a1),d0
00010162 0640 0060                  		addi.w	#$60,d0
00010166 3140 000C                  		move.w	d0,$C(a0)
0001016A 9068 0030                  		sub.w	$30(a0),d0
0001016E 4440                       		neg.w	d0
00010170 7208                       		moveq	#8,d1
00010172 0C40 0040                  		cmpi.w	#$40,d0
00010176 6C00                       		bge.s	loc_F026
00010178 720B                       		moveq	#$B,d1
0001017A                            
0001017A                            loc_F026:
0001017A 0C40 0080                  		cmpi.w	#$80,d0
0001017E 6F00                       		ble.s	loc_F02E
00010180 720E                       		moveq	#$E,d1
00010182                            
00010182                            loc_F02E:
00010182 5328 001E                  		subq.b	#1,$1E(a0)
00010186 6A00                       		bpl.s	loc_F04C
00010188 117C 0007 001E             		move.b	#7,$1E(a0)
0001018E 5228 001B                  		addq.b	#1,$1B(a0)
00010192 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
00010198 6500                       		bcs.s	loc_F04C
0001019A 117C 0000 001B             		move.b	#0,$1B(a0)
000101A0                            
000101A0                            loc_F04C:
000101A0 1028 001B                  		move.b	$1B(a0),d0
000101A4 D001                       		add.b	d1,d0
000101A6 1140 001A                  		move.b	d0,$1A(a0)
000101AA 6000 FF40                  		bra.w	Obj4D_ChkDel
000101AE                            ; ===========================================================================
000101AE                            
000101AE                            Obj4D_Delete:				; XREF: Obj4D_Index
000101AE 6000 E5E2                  		bra.w	DeleteObject
000101B2                            ; ===========================================================================
000101B2                            ; ---------------------------------------------------------------------------
000101B2                            ; Object 4E - advancing	wall of	lava (MZ)
000101B2                            ; ---------------------------------------------------------------------------
000101B2                            
000101B2                            Obj4E:					; XREF: Obj_Index
000101B2 7000                       		moveq	#0,d0
000101B4 1028 0024                  		move.b	$24(a0),d0
000101B8 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
000101BC 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
000101C0                            ; ===========================================================================
000101C0 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
000101C2 0000                       		dc.w Obj4E_Solid-Obj4E_Index
000101C4 0000                       		dc.w Obj4E_Action-Obj4E_Index
000101C6 0000                       		dc.w Obj4E_Move2-Obj4E_Index
000101C8 0000                       		dc.w Obj4E_Delete-Obj4E_Index
000101CA                            ; ===========================================================================
000101CA                            
000101CA                            Obj4E_Main:				; XREF: Obj4E_Index
000101CA 5828 0024                  		addq.b	#4,$24(a0)
000101CE 2248                       		movea.l	a0,a1
000101D0 7201                       		moveq	#1,d1
000101D2 6000                       		bra.s	Obj4E_Main2
000101D4                            ; ===========================================================================
000101D4                            
000101D4                            Obj4E_Loop:
000101D4 6100 EA1C                  		bsr.w	SingleObjLoad2
000101D8 6600                       		bne.s	loc_F0C8
000101DA                            
000101DA                            Obj4E_Main2:				; XREF: Obj4E_Main
000101DA 12BC 004E                  		move.b	#$4E,0(a1)	; load object
000101DE 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
000101E6 337C 63A8 0002             		move.w	#$63A8,2(a1)
000101EC 137C 0004 0001             		move.b	#4,1(a1)
000101F2 137C 0050 0019             		move.b	#$50,$19(a1)
000101F8 3368 0008 0008             		move.w	8(a0),8(a1)
000101FE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010204 137C 0001 0018             		move.b	#1,$18(a1)
0001020A 137C 0000 001C             		move.b	#0,$1C(a1)
00010210 137C 0094 0020             		move.b	#$94,$20(a1)
00010216 2348 003C                  		move.l	a0,$3C(a1)
0001021A                            
0001021A                            loc_F0C8:
0001021A 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0001021E                            
0001021E 5C29 0024                  		addq.b	#6,$24(a1)
00010222 137C 0004 001A             		move.b	#4,$1A(a1)
00010228                            
00010228                            Obj4E_Action:				; XREF: Obj4E_Index
00010228 3038 D008                  		move.w	($FFFFD008).w,d0
0001022C 9068 0008                  		sub.w	8(a0),d0
00010230 6400                       		bcc.s	Obj4E_ChkSonic
00010232 4440                       		neg.w	d0
00010234                            
00010234                            Obj4E_ChkSonic:
00010234 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
00010238 6400                       		bcc.s	Obj4E_Move	; if not, branch
0001023A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001023E 9068 000C                  		sub.w	$C(a0),d0
00010242 6400                       		bcc.s	loc_F0F4
00010244 4440                       		neg.w	d0
00010246                            
00010246                            loc_F0F4:
00010246 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0001024A 6400                       		bcc.s	Obj4E_Move	; if not, branch
0001024C 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
00010252 6000                       		bra.s	Obj4E_Solid
00010254                            ; ===========================================================================
00010254                            
00010254                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
00010254 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
00010258 6700                       		beq.s	Obj4E_Solid	; if not, branch
0001025A 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
00010260 5528 0024                  		subq.b	#2,$24(a0)
00010264                            
00010264                            Obj4E_Solid:				; XREF: Obj4E_Index
00010264 323C 002B                  		move.w	#$2B,d1
00010268 343C 0018                  		move.w	#$18,d2
0001026C 3602                       		move.w	d2,d3
0001026E 5243                       		addq.w	#1,d3
00010270 3828 0008                  		move.w	8(a0),d4
00010274 1028 0024                  		move.b	$24(a0),d0
00010278 3F00                       		move.w	d0,-(sp)
0001027A 6100 0000                  		bsr.w	SolidObject
0001027E 301F                       		move.w	(sp)+,d0
00010280 1140 0024                  		move.b	d0,$24(a0)
00010284 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0001028A 6600                       		bne.s	Obj4E_Animate	; if not, branch
0001028C 4268 0010                  		clr.w	$10(a0)		; stop object moving
00010290 4228 0036                  		clr.b	$36(a0)
00010294                            
00010294                            Obj4E_Animate:
00010294 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0001029A 6100 B508                  		bsr.w	AnimateSprite
0001029E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000102A4 6400                       		bcc.s	Obj4E_ChkDel
000102A6 6100 E488                  		bsr.w	SpeedToPos
000102AA                            
000102AA                            Obj4E_ChkDel:
000102AA 6100 E4AA                  		bsr.w	DisplaySprite
000102AE 4A28 0036                  		tst.b	$36(a0)
000102B2 6600                       		bne.s	locret_F17E
000102B4 3028 0008                  		move.w	8(a0),d0
000102B8 0240 FF80                  		andi.w	#$FF80,d0
000102BC 3238 F700                  		move.w	($FFFFF700).w,d1
000102C0 0441 0080                  		subi.w	#$80,d1
000102C4 0241 FF80                  		andi.w	#$FF80,d1
000102C8 9041                       		sub.w	d1,d0
000102CA 0C40 0280                  		cmpi.w	#$280,d0
000102CE 6200                       		bhi.s	Obj4E_ChkGone
000102D0                            
000102D0                            locret_F17E:
000102D0 4E75                       		rts	
000102D2                            ; ===========================================================================
000102D2                            
000102D2                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
000102D2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000102D6 7000                       		moveq	#0,d0
000102D8 1028 0023                  		move.b	$23(a0),d0
000102DC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000102E2 117C 0008 0024             		move.b	#8,$24(a0)
000102E8 4E75                       		rts	
000102EA                            ; ===========================================================================
000102EA                            
000102EA                            Obj4E_Move2:				; XREF: Obj4E_Index
000102EA 2268 003C                  		movea.l	$3C(a0),a1
000102EE 0C29 0008 0024             		cmpi.b	#8,$24(a1)
000102F4 6700                       		beq.s	Obj4E_Delete
000102F6 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
000102FC 0468 0080 0008             		subi.w	#$80,8(a0)
00010302 6000 E452                  		bra.w	DisplaySprite
00010306                            ; ===========================================================================
00010306                            
00010306                            Obj4E_Delete:				; XREF: Obj4E_Index
00010306 6000 E48A                  		bra.w	DeleteObject
0001030A                            ; ===========================================================================
0001030A                            ; ---------------------------------------------------------------------------
0001030A                            ; Object 54 - invisible	lava tag (MZ)
0001030A                            ; ---------------------------------------------------------------------------
0001030A                            
0001030A                            Obj54:					; XREF: Obj_Index
0001030A 7000                       		moveq	#0,d0
0001030C 1028 0024                  		move.b	$24(a0),d0
00010310 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
00010314 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
00010318                            ; ===========================================================================
00010318 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0001031A 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0001031C                            
0001031C 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
00010320                            ; ===========================================================================
00010320                            
00010320                            Obj54_Main:				; XREF: Obj54_Index
00010320 5428 0024                  		addq.b	#2,$24(a0)
00010324 7000                       		moveq	#0,d0
00010326 1028 0028                  		move.b	$28(a0),d0
0001032A 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
00010330 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
00010338 117C 0084 0001             		move.b	#$84,1(a0)
0001033E                            
0001033E                            Obj54_ChkDel:				; XREF: Obj54_Index
0001033E 3028 0008                  		move.w	8(a0),d0
00010342 0240 FF80                  		andi.w	#$FF80,d0
00010346 3238 F700                  		move.w	($FFFFF700).w,d1
0001034A 0441 0080                  		subi.w	#$80,d1
0001034E 0241 FF80                  		andi.w	#$FF80,d1
00010352 9041                       		sub.w	d1,d0
00010354 6B00 E43C                  		bmi.w	DeleteObject
00010358 0C40 0280                  		cmpi.w	#$280,d0
0001035C 6200 E434                  		bhi.w	DeleteObject
00010360 4E75                       		rts	
00010362                            ; ===========================================================================
00010362                            ; ---------------------------------------------------------------------------
00010362                            ; Sprite mappings - invisible lava tag (MZ)
00010362                            ; ---------------------------------------------------------------------------
00010362                            Map_obj54:
00010362                            	include "_maps\obj54.asm"
00010362                            ; ---------------------------------------------------------------------------
00010362                            ; Sprite mappings - invisible lava tag (MZ)
00010362                            ; ---------------------------------------------------------------------------
00010362 0000                       		dc.w byte_F212-Map_obj54
00010364 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
00010366 00                         		even
00010366 00                         		even
00010366                            
00010366                            Ani_obj4C:
00010366                            	include "_anim\obj4C.asm"
00010366                            ; ---------------------------------------------------------------------------
00010366                            ; Animation script - geyser of lava (MZ)
00010366                            ; ---------------------------------------------------------------------------
00010366 0000                       		dc.w byte_F220-Ani_obj4C
00010368 0000                       		dc.w byte_F22A-Ani_obj4C
0001036A 0000                       		dc.w byte_F22E-Ani_obj4C
0001036C 0000                       		dc.w byte_F232-Ani_obj4C
0001036E 0000                       		dc.w byte_F23A-Ani_obj4C
00010370 0000                       		dc.w byte_F23E-Ani_obj4C
00010372 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0001037C 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
00010380 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
00010384 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0001038C 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
00010390 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
00010394                            		even
00010394                            		even
00010394                            
00010394                            Ani_obj4E:
00010394                            	include "_anim\obj4E.asm"
00010394                            ; ---------------------------------------------------------------------------
00010394                            ; Animation script - advancing wall of lava (MZ)
00010394                            ; ---------------------------------------------------------------------------
00010394 0000                       		dc.w byte_F244-Ani_obj4E
00010396 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0001039C                            		even
0001039C                            		even
0001039C                            
0001039C                            ; ---------------------------------------------------------------------------
0001039C                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0001039C                            ; ---------------------------------------------------------------------------
0001039C                            Map_obj4C:
0001039C                            	include "_maps\obj4C.asm"
0001039C                            ; ---------------------------------------------------------------------------
0001039C                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0001039C                            ; ---------------------------------------------------------------------------
0001039C 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
000103A0 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
000103A4 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
000103A8 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
000103AC 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
000103B0 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
000103B4 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
000103B8 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
000103BC 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
000103C0 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
000103C4 02                         byte_F272:	dc.b 2
000103C5 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
000103CA EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
000103CF 02                         byte_F27D:	dc.b 2
000103D0 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
000103D5 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
000103DA 04                         byte_F288:	dc.b 4
000103DB EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000103E0 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000103E5 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000103EA EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000103EF 04                         byte_F29D:	dc.b 4
000103F0 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000103F5 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000103FA F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000103FF EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010404 06                         byte_F2B2:	dc.b 6
00010405 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0001040A F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0001040F F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010414 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010419 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0001041E E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
00010423 06                         byte_F2D1:	dc.b 6
00010424 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010429 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0001042E F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
00010433 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010438 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0001043D E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
00010442 02                         byte_F2F0:	dc.b 2
00010443 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00010448 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0001044D 02                         byte_F2FB:	dc.b 2
0001044E E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
00010453 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00010458 0A                         byte_F306:	dc.b $A
00010459 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001045E 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010463 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010468 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001046D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010472 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010477 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0001047C F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010481 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010486 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0001048B 0A                         byte_F339:	dc.b $A
0001048C 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010491 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010496 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001049B B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000104A0 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000104A5 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000104AA F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000104AF F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000104B4 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000104B9 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000104BE 0A                         byte_F36C:	dc.b $A
000104BF 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000104C4 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000104C9 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000104CE B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000104D3 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000104D8 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000104DD F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000104E2 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000104E7 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000104EC 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000104F1 06                         byte_F39F:	dc.b 6
000104F2 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000104F7 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000104FC B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010501 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010506 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001050B D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010510 06                         byte_F3BE:	dc.b 6
00010511 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010516 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0001051B B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010520 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010525 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0001052A D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001052F 06                         byte_F3DD:	dc.b 6
00010530 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010535 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0001053A B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001053F B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010544 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010549 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001054E 10                         byte_F3FC:	dc.b $10
0001054F 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010554 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010559 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001055E B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010563 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010568 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0001056D F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010572 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010577 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0001057C 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010581 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00010586 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0001058B 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
00010590 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00010595 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0001059A 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0001059F 10                         byte_F44D:	dc.b $10
000105A0 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
000105A5 900F 0850 00               		dc.b $90, $F, 8, $50, 0
000105AA B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
000105AF B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000105B4 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000105B9 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000105BE F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000105C3 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000105C8 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000105CD 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000105D2 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
000105D7 300F 0850 00               		dc.b $30, $F, 8, $50, 0
000105DC 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
000105E1 500F 0850 00               		dc.b $50, $F, 8, $50, 0
000105E6 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
000105EB 700F 0850 00               		dc.b $70, $F, 8, $50, 0
000105F0 10                         byte_F49E:	dc.b $10
000105F1 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000105F6 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000105FB B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
00010600 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010605 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0001060A D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001060F F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010614 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010619 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001061E 100F 0860 00               		dc.b $10, $F, 8, $60, 0
00010623 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00010628 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0001062D 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
00010632 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00010637 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0001063C 700F 0860 00               		dc.b $70, $F, 8, $60, 0
00010641 06                         byte_F4EF:	dc.b 6
00010642 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00010647 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0001064C E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
00010651 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00010656 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0001065B D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
00010660 06                         byte_F50E:	dc.b 6
00010661 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00010666 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0001066B E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
00010670 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00010675 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0001067A D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0001067F 00                         byte_F52D:	dc.b 0
00010680                            		even
00010680                            		even
00010680                            
00010680                            ; ---------------------------------------------------------------------------
00010680                            ; Sprite mappings - advancing wall of lava (MZ)
00010680                            ; ---------------------------------------------------------------------------
00010680                            Map_obj4E:
00010680                            	include "_maps\obj4E.asm"
00010680                            ; ---------------------------------------------------------------------------
00010680                            ; Sprite mappings - advancing wall of lava (MZ)
00010680                            ; ---------------------------------------------------------------------------
00010680 0000                       		dc.w byte_F538-Map_obj4E
00010682 0000                       		dc.w byte_F566-Map_obj4E
00010684 0000                       		dc.w byte_F594-Map_obj4E
00010686 0000                       		dc.w byte_F5C2-Map_obj4E
00010688 0000                       		dc.w byte_F5F0-Map_obj4E
0001068A 09                         byte_F538:	dc.b 9
0001068B E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
00010690 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010695 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001069A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001069F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000106A4 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000106A9 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000106AE E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000106B3 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000106B8 09                         byte_F566:	dc.b 9
000106B9 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
000106BE 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
000106C3 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000106C8 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000106CD 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000106D2 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000106D7 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000106DC E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000106E1 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000106E6 09                         byte_F594:	dc.b 9
000106E7 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
000106EC 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
000106F1 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000106F6 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000106FB 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010700 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010705 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001070A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001070F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010714 09                         byte_F5C2:	dc.b 9
00010715 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0001071A 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0001071F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010724 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010729 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001072E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010733 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010738 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001073D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010742 08                         byte_F5F0:	dc.b 8
00010743 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00010748 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001074D E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010752 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010757 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001075C 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010761 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010766 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001076C 00                         		even
0001076C 00                         		even
0001076C                            
0001076C                            ; ===========================================================================
0001076C                            ; ---------------------------------------------------------------------------
0001076C                            ; Object 40 - Moto Bug enemy (GHZ)
0001076C                            ; ---------------------------------------------------------------------------
0001076C                            
0001076C                            Obj40:					; XREF: Obj_Index
0001076C 7000                       		moveq	#0,d0
0001076E 1028 0024                  		move.b	$24(a0),d0
00010772 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010776 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0001077A                            ; ===========================================================================
0001077A 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0001077C 0000                       		dc.w Obj40_Action-Obj40_Index
0001077E 0000                       		dc.w Obj40_Animate-Obj40_Index
00010780 0000                       		dc.w Obj40_Delete-Obj40_Index
00010782                            ; ===========================================================================
00010782                            
00010782                            Obj40_Main:				; XREF: Obj40_Index
00010782 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0001078A 317C 04F0 0002             		move.w	#$4F0,2(a0)
00010790 117C 0004 0001             		move.b	#4,1(a0)
00010796 117C 0004 0018             		move.b	#4,$18(a0)
0001079C 117C 0014 0019             		move.b	#$14,$19(a0)
000107A2 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
000107A6 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
000107A8 117C 000E 0016             		move.b	#$E,$16(a0)
000107AE 117C 0008 0017             		move.b	#8,$17(a0)
000107B4 117C 000C 0020             		move.b	#$C,$20(a0)
000107BA 6100 DF02                  		bsr.w	ObjectFall
000107BE 4EB9 0000 0000             		jsr	ObjHitFloor
000107C4 4A41                       		tst.w	d1
000107C6 6A00                       		bpl.s	locret_F68A
000107C8 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000107CC 317C 0000 0012             		move.w	#0,$12(a0)
000107D2 5428 0024                  		addq.b	#2,$24(a0)
000107D6 0868 0000 0022             		bchg	#0,$22(a0)
000107DC                            
000107DC                            locret_F68A:
000107DC 4E75                       		rts	
000107DE                            ; ===========================================================================
000107DE                            
000107DE                            Obj40_SetSmoke:				; XREF: Obj40_Main
000107DE 5828 0024                  		addq.b	#4,$24(a0)
000107E2 6000 0000                  		bra.w	Obj40_Animate
000107E6                            ; ===========================================================================
000107E6                            
000107E6                            Obj40_Action:				; XREF: Obj40_Index
000107E6 7000                       		moveq	#0,d0
000107E8 1028 0025                  		move.b	$25(a0),d0
000107EC 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
000107F0 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
000107F4 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000107FA 6100 AFA8                  		bsr.w	AnimateSprite
000107FE                            
000107FE                            ; ---------------------------------------------------------------------------
000107FE                            ; Routine to mark an enemy/monitor/ring	as destroyed
000107FE                            ; ---------------------------------------------------------------------------
000107FE                            
000107FE                            MarkObjGone:
000107FE 3028 0008                  		move.w	8(a0),d0
00010802 0240 FF80                  		andi.w	#$FF80,d0
00010806 3238 F700                  		move.w	($FFFFF700).w,d1
0001080A 0441 0080                  		subi.w	#$80,d1
0001080E 0241 FF80                  		andi.w	#$FF80,d1
00010812 9041                       		sub.w	d1,d0
00010814 0C40 0280                  		cmpi.w	#$280,d0
00010818 6200 0000                  		bhi.w	Mark_ChkGone
0001081C 6000 DF38                  		bra.w	DisplaySprite
00010820                            ; ===========================================================================
00010820                            
00010820                            Mark_ChkGone:
00010820 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010824 7000                       		moveq	#0,d0
00010826 1028 0023                  		move.b	$23(a0),d0
0001082A 6700                       		beq.s	Mark_Delete
0001082C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010832                            
00010832                            Mark_Delete:
00010832 6000 DF5E                  		bra.w	DeleteObject
00010836                            
00010836                            ; ===========================================================================
00010836 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00010838 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0001083A                            ; ===========================================================================
0001083A                            
0001083A                            Obj40_Move:				; XREF: Obj40_Index2
0001083A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0001083E 6A00                       		bpl.s	locret_F70A	; if time remains, branch
00010840 5428 0025                  		addq.b	#2,$25(a0)
00010844 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0001084A 117C 0001 001C             		move.b	#1,$1C(a0)
00010850 0868 0000 0022             		bchg	#0,$22(a0)
00010856 6600                       		bne.s	locret_F70A
00010858 4468 0010                  		neg.w	$10(a0)		; change direction
0001085C                            
0001085C                            locret_F70A:
0001085C 4E75                       		rts	
0001085E                            ; ===========================================================================
0001085E                            
0001085E                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0001085E 6100 DED0                  		bsr.w	SpeedToPos
00010862 4EB9 0000 0000             		jsr	ObjHitFloor
00010868 0C41 FFF8                  		cmpi.w	#-8,d1
0001086C 6D00                       		blt.s	Obj40_Pause
0001086E 0C41 000C                  		cmpi.w	#$C,d1
00010872 6C00                       		bge.s	Obj40_Pause
00010874 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010878 5328 0033                  		subq.b	#1,$33(a0)
0001087C 6A00                       		bpl.s	locret_F756
0001087E 117C 000F 0033             		move.b	#$F,$33(a0)
00010884 6100 E356                  		bsr.w	SingleObjLoad
00010888 6600                       		bne.s	locret_F756
0001088A 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0001088E 3368 0008 0008             		move.w	8(a0),8(a1)
00010894 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001089A 1368 0022 0022             		move.b	$22(a0),$22(a1)
000108A0 137C 0002 001C             		move.b	#2,$1C(a1)
000108A6                            
000108A6                            locret_F756:
000108A6 4E75                       		rts	
000108A8                            ; ===========================================================================
000108A8                            
000108A8                            Obj40_Pause:				; XREF: Obj40_FixToFloor
000108A8 5528 0025                  		subq.b	#2,$25(a0)
000108AC 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000108B2 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
000108B8 117C 0000 001C             		move.b	#0,$1C(a0)
000108BE 4E75                       		rts	
000108C0                            ; ===========================================================================
000108C0                            
000108C0                            Obj40_Animate:				; XREF: Obj40_Index
000108C0 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000108C6 6100 AEDC                  		bsr.w	AnimateSprite
000108CA 6000 DE8A                  		bra.w	DisplaySprite
000108CE                            ; ===========================================================================
000108CE                            
000108CE                            Obj40_Delete:				; XREF: Obj40_Index
000108CE 6000 DEC2                  		bra.w	DeleteObject
000108D2                            ; ===========================================================================
000108D2                            Ani_obj40:
000108D2                            	include "_anim\obj40.asm"
000108D2                            ; ---------------------------------------------------------------------------
000108D2                            ; Animation script - Motobug enemy
000108D2                            ; ---------------------------------------------------------------------------
000108D2 0000                       		dc.w byte_F788-Ani_obj40
000108D4 0000                       		dc.w byte_F78C-Ani_obj40
000108D6 0000                       		dc.w byte_F792-Ani_obj40
000108D8 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
000108DC 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
000108E2 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
000108F0                            		even
000108F0                            		even
000108F0                            
000108F0                            ; ---------------------------------------------------------------------------
000108F0                            ; Sprite mappings - Moto Bug enemy (GHZ)
000108F0                            ; ---------------------------------------------------------------------------
000108F0                            Map_obj40:
000108F0                            	include "_maps\obj40.asm"
000108F0                            Map_cedc:
000108F0 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
000108F2 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
000108F4 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
000108F6 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
000108F8 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
000108FA 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
000108FC 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
000108FE 04                         Map_cedc_E: 	dc.b $4
000108FF F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
00010904 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
00010909 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0001090E 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
00010913 04                         Map_cedc_23: 	dc.b $4
00010914 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
00010919 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0001091E F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
00010923 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
00010928 05                         Map_cedc_38: 	dc.b $5
00010929 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0001092E 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
00010933 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00010938 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0001093D 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
00010942 01                         Map_cedc_52: 	dc.b $1
00010943 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
00010948 01                         Map_cedc_58: 	dc.b $1
00010949 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0001094E 01                         Map_cedc_5E: 	dc.b $1
0001094F FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
00010954 00                         Map_cedc_64: 	dc.b $0
00010956 00                         	even
00010956 00                         	even
00010956                            
00010956                            ; ===========================================================================
00010956                            ; ---------------------------------------------------------------------------
00010956                            ; Object 4F - blank
00010956                            ; ---------------------------------------------------------------------------
00010956                            
00010956                            Obj4F:					; XREF: Obj_Index
00010956 4E75                       		rts	
00010958                            
00010958                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010958                            
00010958                            
00010958                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00010958 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001095C D047                       		add.w	d7,d0
0001095E 0240 0003                  		andi.w	#3,d0
00010962 6600                       		bne.s	loc_F836
00010964 7600                       		moveq	#0,d3
00010966 1628 0019                  		move.b	$19(a0),d3
0001096A 4A68 0010                  		tst.w	$10(a0)
0001096E 6B00                       		bmi.s	loc_F82C
00010970 6100 0000                  		bsr.w	ObjHitWallRight
00010974 4A41                       		tst.w	d1
00010976 6A00                       		bpl.s	loc_F836
00010978                            
00010978                            loc_F828:
00010978 7001                       		moveq	#1,d0
0001097A 4E75                       		rts	
0001097C                            ; ===========================================================================
0001097C                            
0001097C                            loc_F82C:
0001097C 4643                       		not.w	d3
0001097E 6100 0000                  		bsr.w	ObjHitWallLeft
00010982 4A41                       		tst.w	d1
00010984 6BF2                       		bmi.s	loc_F828
00010986                            
00010986                            loc_F836:
00010986 7000                       		moveq	#0,d0
00010988 4E75                       		rts	
0001098A                            ; End of function Obj50_ChkWall
0001098A                            
0001098A                            ; ===========================================================================
0001098A                            ; ---------------------------------------------------------------------------
0001098A                            ; Object 50 - Yadrin enemy (SYZ)
0001098A                            ; ---------------------------------------------------------------------------
0001098A                            
0001098A                            Obj50:					; XREF: Obj_Index
0001098A 7000                       		moveq	#0,d0
0001098C 1028 0024                  		move.b	$24(a0),d0
00010990 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00010994 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00010998                            ; ===========================================================================
00010998 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0001099A 0000                       		dc.w Obj50_Action-Obj50_Index
0001099C                            ; ===========================================================================
0001099C                            
0001099C                            Obj50_Main:				; XREF: Obj50_Index
0001099C 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
000109A4 317C 247B 0002             		move.w	#$247B,2(a0)
000109AA 117C 0004 0001             		move.b	#4,1(a0)
000109B0 117C 0004 0018             		move.b	#4,$18(a0)
000109B6 117C 0014 0019             		move.b	#$14,$19(a0)
000109BC 117C 0011 0016             		move.b	#$11,$16(a0)
000109C2 117C 0008 0017             		move.b	#8,$17(a0)
000109C8 117C 00CC 0020             		move.b	#$CC,$20(a0)
000109CE 6100 DCEE                  		bsr.w	ObjectFall
000109D2 6100 0000                  		bsr.w	ObjHitFloor
000109D6 4A41                       		tst.w	d1
000109D8 6A00                       		bpl.s	locret_F89E
000109DA D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000109DE 317C 0000 0012             		move.w	#0,$12(a0)
000109E4 5428 0024                  		addq.b	#2,$24(a0)
000109E8 0868 0000 0022             		bchg	#0,$22(a0)
000109EE                            
000109EE                            locret_F89E:
000109EE 4E75                       		rts	
000109F0                            ; ===========================================================================
000109F0                            
000109F0                            Obj50_Action:				; XREF: Obj50_Index
000109F0 7000                       		moveq	#0,d0
000109F2 1028 0025                  		move.b	$25(a0),d0
000109F6 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
000109FA 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
000109FE 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00010A04 6100 AD9E                  		bsr.w	AnimateSprite
00010A08 6000 FDF4                  		bra.w	MarkObjGone
00010A0C                            ; ===========================================================================
00010A0C 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00010A0E 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00010A10                            ; ===========================================================================
00010A10                            
00010A10                            Obj50_Move:				; XREF: Obj50_Index2
00010A10 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010A14 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00010A16 5428 0025                  		addq.b	#2,$25(a0)
00010A1A 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
00010A20 117C 0001 001C             		move.b	#1,$1C(a0)
00010A26 0868 0000 0022             		bchg	#0,$22(a0)
00010A2C 6600                       		bne.s	locret_F8E2
00010A2E 4468 0010                  		neg.w	$10(a0)		; change direction
00010A32                            
00010A32                            locret_F8E2:
00010A32 4E75                       		rts	
00010A34                            ; ===========================================================================
00010A34                            
00010A34                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00010A34 6100 DCFA                  		bsr.w	SpeedToPos
00010A38 6100 0000                  		bsr.w	ObjHitFloor
00010A3C 0C41 FFF8                  		cmpi.w	#-8,d1
00010A40 6D00                       		blt.s	Obj50_Pause
00010A42 0C41 000C                  		cmpi.w	#$C,d1
00010A46 6C00                       		bge.s	Obj50_Pause
00010A48 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00010A4C 6100 FF0A                  		bsr.w	Obj50_ChkWall
00010A50 6600                       		bne.s	Obj50_Pause
00010A52 4E75                       		rts	
00010A54                            ; ===========================================================================
00010A54                            
00010A54                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00010A54 5528 0025                  		subq.b	#2,$25(a0)
00010A58 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010A5E 317C 0000 0010             		move.w	#0,$10(a0)
00010A64 117C 0000 001C             		move.b	#0,$1C(a0)
00010A6A 4E75                       		rts	
00010A6C                            ; ===========================================================================
00010A6C                            Ani_obj50:
00010A6C                            	include "_anim\obj50.asm"
00010A6C                            ; ---------------------------------------------------------------------------
00010A6C                            ; Animation script - Yadrin enemy
00010A6C                            ; ---------------------------------------------------------------------------
00010A6C 0000                       		dc.w byte_F920-Ani_obj50
00010A6E 0000                       		dc.w byte_F924-Ani_obj50
00010A70 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00010A74 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00010A7E                            		even
00010A7E                            		even
00010A7E                            
00010A7E                            ; ---------------------------------------------------------------------------
00010A7E                            ; Sprite mappings - Yadrin enemy (SYZ)
00010A7E                            ; ---------------------------------------------------------------------------
00010A7E                            Map_obj50:
00010A7E                            	include "_maps\obj50.asm"
00010A7E                            Map_ff24:
00010A7E 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
00010A80 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
00010A82 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
00010A84 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
00010A86 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
00010A88 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
00010A8A 05                         Map_ff24_C: 	dc.b $5
00010A8B F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010A90 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010A95 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010A9A F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010A9F 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010AA4 05                         Map_ff24_26: 	dc.b $5
00010AA5 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010AAA FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010AAF EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010AB4 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010AB9 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010ABE 05                         Map_ff24_40: 	dc.b $5
00010ABF F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010AC4 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010AC9 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010ACE F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010AD3 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010AD8 05                         Map_ff24_5A: 	dc.b $5
00010AD9 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010ADE FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010AE3 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010AE8 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010AED 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010AF2 05                         Map_ff24_74: 	dc.b $5
00010AF3 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010AF8 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010AFD EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010B02 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010B07 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010B0C 05                         Map_ff24_8E: 	dc.b $5
00010B0D F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010B12 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010B17 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010B1C F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010B21 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010B26                            	even
00010B26                            	even
00010B26                            
00010B26                            ; ---------------------------------------------------------------------------
00010B26                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010B26                            ;
00010B26                            ; variables:
00010B26                            ; d1 = width
00010B26                            ; d2 = height /	2 (when	jumping)
00010B26                            ; d3 = height /	2 (when	walking)
00010B26                            ; d4 = x-axis position
00010B26                            ; ---------------------------------------------------------------------------
00010B26                            
00010B26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010B26                            
00010B26                            
00010B26                            SolidObject:
00010B26 4A28 0025                  		tst.b	$25(a0)
00010B2A 6700 0000                  		beq.w	loc_FAC8
00010B2E 3401                       		move.w	d1,d2
00010B30 D442                       		add.w	d2,d2
00010B32 43F8 D000                  		lea	($FFFFD000).w,a1
00010B36 0829 0001 0022             		btst	#1,$22(a1)
00010B3C 6600                       		bne.s	loc_F9FE
00010B3E 3029 0008                  		move.w	8(a1),d0
00010B42 9068 0008                  		sub.w	8(a0),d0
00010B46 D041                       		add.w	d1,d0
00010B48 6B00                       		bmi.s	loc_F9FE
00010B4A B042                       		cmp.w	d2,d0
00010B4C 6500                       		bcs.s	loc_FA12
00010B4E                            
00010B4E                            loc_F9FE:
00010B4E 08A9 0003 0022             		bclr	#3,$22(a1)
00010B54 08A8 0003 0022             		bclr	#3,$22(a0)
00010B5A 4228 0025                  		clr.b	$25(a0)
00010B5E 7800                       		moveq	#0,d4
00010B60 4E75                       		rts	
00010B62                            ; ===========================================================================
00010B62                            
00010B62                            loc_FA12:
00010B62 3404                       		move.w	d4,d2
00010B64 4EB9 0000 8A3C             		jsr	MvSonicOnPtfm 
00010B6A 7800                       		moveq	#0,d4
00010B6C 4E75                       		rts	
00010B6E                            ; ===========================================================================
00010B6E                            
00010B6E                            SolidObject71:				; XREF: Obj71_Solid
00010B6E 4A28 0025                  		tst.b	$25(a0)
00010B72 6700 0000                  		beq.w	loc_FAD0
00010B76 3401                       		move.w	d1,d2
00010B78 D442                       		add.w	d2,d2
00010B7A 43F8 D000                  		lea	($FFFFD000).w,a1
00010B7E 0829 0001 0022             		btst	#1,$22(a1)
00010B84 6600                       		bne.s	loc_FA44
00010B86 3029 0008                  		move.w	8(a1),d0
00010B8A 9068 0008                  		sub.w	8(a0),d0
00010B8E D041                       		add.w	d1,d0
00010B90 6B00                       		bmi.s	loc_FA44
00010B92 B042                       		cmp.w	d2,d0
00010B94 6500                       		bcs.s	loc_FA58
00010B96                            
00010B96                            loc_FA44:
00010B96 08A9 0003 0022             		bclr	#3,$22(a1)
00010B9C 08A8 0003 0022             		bclr	#3,$22(a0)
00010BA2 4228 0025                  		clr.b	$25(a0)
00010BA6 7800                       		moveq	#0,d4
00010BA8 4E75                       		rts	
00010BAA                            ; ===========================================================================
00010BAA                            
00010BAA                            loc_FA58:
00010BAA 3404                       		move.w	d4,d2
00010BAC                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
00010BAC 7800                       		moveq	#0,d4
00010BAE 4E75                       		rts	
00010BB0                            ; ===========================================================================
00010BB0                            
00010BB0                            SolidObject2F:				; XREF: Obj2F_Solid
00010BB0 43F8 D000                  		lea	($FFFFD000).w,a1
00010BB4 4A28 0001                  		tst.b	1(a0)
00010BB8 6A00 0000                  		bpl.w	loc_FB92
00010BBC 3029 0008                  		move.w	8(a1),d0
00010BC0 9068 0008                  		sub.w	8(a0),d0
00010BC4 D041                       		add.w	d1,d0
00010BC6 6B00 0000                  		bmi.w	loc_FB92
00010BCA 3601                       		move.w	d1,d3
00010BCC D643                       		add.w	d3,d3
00010BCE B043                       		cmp.w	d3,d0
00010BD0 6200 0000                  		bhi.w	loc_FB92
00010BD4 3A00                       		move.w	d0,d5
00010BD6 0828 0000 0001             		btst	#0,1(a0)
00010BDC 6700                       		beq.s	loc_FA94
00010BDE 4645                       		not.w	d5
00010BE0 DA43                       		add.w	d3,d5
00010BE2                            
00010BE2                            loc_FA94:
00010BE2 E24D                       		lsr.w	#1,d5
00010BE4 7600                       		moveq	#0,d3
00010BE6 1632 5000                  		move.b	(a2,d5.w),d3
00010BEA 9612                       		sub.b	(a2),d3
00010BEC 3A28 000C                  		move.w	$C(a0),d5
00010BF0 9A43                       		sub.w	d3,d5
00010BF2 1629 0016                  		move.b	$16(a1),d3
00010BF6 4883                       		ext.w	d3
00010BF8 D443                       		add.w	d3,d2
00010BFA 3629 000C                  		move.w	$C(a1),d3
00010BFE 9645                       		sub.w	d5,d3
00010C00 5843                       		addq.w	#4,d3
00010C02 D642                       		add.w	d2,d3
00010C04 6B00 0000                  		bmi.w	loc_FB92
00010C08 3802                       		move.w	d2,d4
00010C0A D844                       		add.w	d4,d4
00010C0C B644                       		cmp.w	d4,d3
00010C0E 6400 0000                  		bcc.w	loc_FB92
00010C12 6000 0000                  		bra.w	loc_FB0E
00010C16                            ; ===========================================================================
00010C16                            
00010C16                            loc_FAC8:
00010C16 4A28 0001                  		tst.b	1(a0)
00010C1A 6A00 0000                  		bpl.w	loc_FB92
00010C1E                            
00010C1E                            loc_FAD0:
00010C1E 43F8 D000                  		lea	($FFFFD000).w,a1
00010C22 3029 0008                  		move.w	8(a1),d0
00010C26 9068 0008                  		sub.w	8(a0),d0
00010C2A D041                       		add.w	d1,d0
00010C2C 6B00 0000                  		bmi.w	loc_FB92
00010C30 3601                       		move.w	d1,d3
00010C32 D643                       		add.w	d3,d3
00010C34 B043                       		cmp.w	d3,d0
00010C36 6200 0000                  		bhi.w	loc_FB92
00010C3A 1629 0016                  		move.b	$16(a1),d3
00010C3E 4883                       		ext.w	d3
00010C40 D443                       		add.w	d3,d2
00010C42 3629 000C                  		move.w	$C(a1),d3
00010C46 9668 000C                  		sub.w	$C(a0),d3
00010C4A 5843                       		addq.w	#4,d3
00010C4C D642                       		add.w	d2,d3
00010C4E 6B00 0000                  		bmi.w	loc_FB92
00010C52 3802                       		move.w	d2,d4
00010C54 D844                       		add.w	d4,d4
00010C56 B644                       		cmp.w	d4,d3
00010C58 6400 0000                  		bcc.w	loc_FB92
00010C5C                            
00010C5C                            loc_FB0E:
00010C5C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010C60 6B00 0000                  		bmi.w	loc_FB92
00010C64 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010C6A 6400 0000                  		bcc.w	loc_FB92
00010C6E 4A78 FE08                  		tst.w	($FFFFFE08).w
00010C72 6600 0000                  		bne.w	loc_FBAC
00010C76 3A00                       		move.w	d0,d5
00010C78 B240                       		cmp.w	d0,d1
00010C7A 6400                       		bcc.s	loc_FB36
00010C7C D241                       		add.w	d1,d1
00010C7E 9041                       		sub.w	d1,d0
00010C80 3A00                       		move.w	d0,d5
00010C82 4445                       		neg.w	d5
00010C84                            
00010C84                            loc_FB36:
00010C84 3203                       		move.w	d3,d1
00010C86 B443                       		cmp.w	d3,d2
00010C88 6400                       		bcc.s	loc_FB44
00010C8A 5943                       		subq.w	#4,d3
00010C8C 9644                       		sub.w	d4,d3
00010C8E 3203                       		move.w	d3,d1
00010C90 4441                       		neg.w	d1
00010C92                            
00010C92                            loc_FB44:
00010C92 BA41                       		cmp.w	d1,d5
00010C94 6200 0000                  		bhi.w	loc_FBB0
00010C98 0C41 0004                  		cmpi.w	#4,d1
00010C9C 6300                       		bls.s	loc_FB8C
00010C9E 4A40                       		tst.w	d0
00010CA0 6700                       		beq.s	loc_FB70
00010CA2 6B00                       		bmi.s	loc_FB5E
00010CA4 4A69 0010                  		tst.w	$10(a1)
00010CA8 6B00                       		bmi.s	loc_FB70
00010CAA 6000                       		bra.s	loc_FB64
00010CAC                            ; ===========================================================================
00010CAC                            
00010CAC                            loc_FB5E:
00010CAC 4A69 0010                  		tst.w	$10(a1)
00010CB0 6A00                       		bpl.s	loc_FB70
00010CB2                            
00010CB2                            loc_FB64:
00010CB2 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010CB8 337C 0000 0010             		move.w	#0,$10(a1)
00010CBE                            
00010CBE                            loc_FB70:
00010CBE 9169 0008                  		sub.w	d0,8(a1)
00010CC2 0829 0001 0022             		btst	#1,$22(a1)
00010CC8 6600                       		bne.s	loc_FB8C
00010CCA 08E9 0005 0022             		bset	#5,$22(a1)
00010CD0 08E8 0005 0022             		bset	#5,$22(a0)
00010CD6 7801                       		moveq	#1,d4
00010CD8 4E75                       		rts	
00010CDA                            ; ===========================================================================
00010CDA                            
00010CDA                            loc_FB8C:
00010CDA 6100                       		bsr.s	loc_FBA0
00010CDC 7801                       		moveq	#1,d4
00010CDE 4E75                       		rts	
00010CE0                            ; ===========================================================================
00010CE0                            
00010CE0                            loc_FB92:
00010CE0 0828 0005 0022             		btst	#5,$22(a0)
00010CE6 6700                       		beq.s	loc_FBAC
00010CE8 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00010CEE                            
00010CEE                            loc_FBA0:
00010CEE 08A8 0005 0022             		bclr	#5,$22(a0)
00010CF4 08A9 0005 0022             		bclr	#5,$22(a1)
00010CFA                            
00010CFA                            loc_FBAC:
00010CFA 7800                       		moveq	#0,d4
00010CFC 4E75                       		rts	
00010CFE                            ; ===========================================================================
00010CFE                            
00010CFE                            loc_FBB0:
00010CFE 4A43                       		tst.w	d3
00010D00 6B00                       		bmi.s	loc_FBBC
00010D02 0C43 0010                  		cmpi.w	#$10,d3
00010D06 6500                       		bcs.s	loc_FBEE
00010D08 60D6                       		bra.s	loc_FB92
00010D0A                            ; ===========================================================================
00010D0A                            
00010D0A                            loc_FBBC:
00010D0A 4A69 0012                  		tst.w	$12(a1)
00010D0E 6700                       		beq.s	loc_FBD6
00010D10 6A00                       		bpl.s	loc_FBD2
00010D12 4A43                       		tst.w	d3
00010D14 6A00                       		bpl.s	loc_FBD2
00010D16 9769 000C                  		sub.w	d3,$C(a1)
00010D1A 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010D20                            
00010D20                            loc_FBD2:
00010D20 78FF                       		moveq	#-1,d4
00010D22 4E75                       		rts	
00010D24                            ; ===========================================================================
00010D24                            
00010D24                            loc_FBD6:
00010D24 0829 0001 0022             		btst	#1,$22(a1)
00010D2A 66F4                       		bne.s	loc_FBD2
00010D2C 2F08                       		move.l	a0,-(sp)
00010D2E 2049                       		movea.l	a1,a0
00010D30 4EB9 0000 0000             		jsr	KillSonic
00010D36 205F                       		movea.l	(sp)+,a0
00010D38 78FF                       		moveq	#-1,d4
00010D3A 4E75                       		rts	
00010D3C                            ; ===========================================================================
00010D3C                            
00010D3C                            loc_FBEE:
00010D3C 5943                       		subq.w	#4,d3
00010D3E 7200                       		moveq	#0,d1
00010D40 1228 0019                  		move.b	$19(a0),d1
00010D44 3401                       		move.w	d1,d2
00010D46 D442                       		add.w	d2,d2
00010D48 D269 0008                  		add.w	8(a1),d1
00010D4C 9268 0008                  		sub.w	8(a0),d1
00010D50 6B00                       		bmi.s	loc_FC28
00010D52 B242                       		cmp.w	d2,d1
00010D54 6400                       		bcc.s	loc_FC28
00010D56 4A69 0012                  		tst.w	$12(a1)
00010D5A 6B00                       		bmi.s	loc_FC28
00010D5C 9769 000C                  		sub.w	d3,$C(a1)
00010D60 5369 000C                  		subq.w	#1,$C(a1)
00010D64 6100                       		bsr.s	sub_FC2C
00010D66 117C 0002 0025             		move.b	#2,$25(a0)
00010D6C 08E8 0003 0022             		bset	#3,$22(a0)
00010D72 78FF                       		moveq	#-1,d4
00010D74 4E75                       		rts	
00010D76                            ; ===========================================================================
00010D76                            
00010D76                            loc_FC28:
00010D76 7800                       		moveq	#0,d4
00010D78 4E75                       		rts	
00010D7A                            ; End of function SolidObject
00010D7A                            
00010D7A                            
00010D7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010D7A                            
00010D7A                            
00010D7A                            sub_FC2C:				; XREF: SolidObject
00010D7A 0829 0003 0022             		btst	#3,$22(a1)
00010D80 6700                       		beq.s	loc_FC4E
00010D82 7000                       		moveq	#0,d0
00010D84 1029 003D                  		move.b	$3D(a1),d0
00010D88 ED48                       		lsl.w	#6,d0
00010D8A 0680 00FF D000             		addi.l	#$FFD000,d0
00010D90 2440                       		movea.l	d0,a2
00010D92 08AA 0003 0022             		bclr	#3,$22(a2)
00010D98 422A 0025                  		clr.b	$25(a2)
00010D9C                            
00010D9C                            loc_FC4E:
00010D9C 3008                       		move.w	a0,d0
00010D9E 0440 D000                  		subi.w	#-$3000,d0
00010DA2 EC48                       		lsr.w	#6,d0
00010DA4 0240 007F                  		andi.w	#$7F,d0
00010DA8 1340 003D                  		move.b	d0,$3D(a1)
00010DAC 137C 0000 0026             		move.b	#0,$26(a1)
00010DB2 337C 0000 0012             		move.w	#0,$12(a1)
00010DB8 3369 0010 0014             		move.w	$10(a1),$14(a1)
00010DBE 0829 0001 0022             		btst	#1,$22(a1)
00010DC4 6700                       		beq.s	loc_FC84
00010DC6 2F08                       		move.l	a0,-(sp)
00010DC8 2049                       		movea.l	a1,a0
00010DCA 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00010DD0 205F                       		movea.l	(sp)+,a0
00010DD2                            
00010DD2                            loc_FC84:
00010DD2 08E9 0003 0022             		bset	#3,$22(a1)
00010DD8 08E8 0003 0022             		bset	#3,$22(a0)
00010DDE 4E75                       		rts	
00010DE0                            ; End of function sub_FC2C
00010DE0                            
00010DE0                            ; ===========================================================================
00010DE0                            ; ---------------------------------------------------------------------------
00010DE0                            ; Object 51 - smashable	green block (MZ)
00010DE0                            ; ---------------------------------------------------------------------------
00010DE0                            
00010DE0                            Obj51:					; XREF: Obj_Index
00010DE0 7000                       		moveq	#0,d0
00010DE2 1028 0024                  		move.b	$24(a0),d0
00010DE6 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010DEA 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00010DEE 6000 FA0E                  		bra.w	MarkObjGone
00010DF2                            ; ===========================================================================
00010DF2 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010DF4 0000                       		dc.w Obj51_Solid-Obj51_Index
00010DF6 0000                       		dc.w Obj51_Display-Obj51_Index
00010DF8                            ; ===========================================================================
00010DF8                            
00010DF8                            Obj51_Main:				; XREF: Obj51_Index
00010DF8 5428 0024                  		addq.b	#2,$24(a0)
00010DFC 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010E04 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010E0A 117C 0004 0001             		move.b	#4,1(a0)
00010E10 117C 0010 0019             		move.b	#$10,$19(a0)
00010E16 117C 0004 0018             		move.b	#4,$18(a0)
00010E1C 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010E22                            
00010E22                            Obj51_Solid:				; XREF: Obj51_Index
00010E22 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010E28 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010E2E 323C 001B                  		move.w	#$1B,d1
00010E32 343C 0010                  		move.w	#$10,d2
00010E36 363C 0011                  		move.w	#$11,d3
00010E3A 3828 0008                  		move.w	8(a0),d4
00010E3E 6100 FCE6                  		bsr.w	SolidObject
00010E42 0828 0003 0022             		btst	#3,$22(a0)
00010E48 6600                       		bne.s	Obj51_Smash
00010E4A                            
00010E4A                            locret_FCFC:
00010E4A 4E75                       		rts	
00010E4C                            ; ===========================================================================
00010E4C                            
00010E4C                            Obj51_Smash:				; XREF: Obj51_Solid
00010E4C 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010E52 66F6                       		bne.s	locret_FCFC	; if not, branch
00010E54 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010E5A 08E9 0002 0022             		bset	#2,$22(a1)
00010E60 137C 000E 0016             		move.b	#$E,$16(a1)
00010E66 137C 0007 0017             		move.b	#7,$17(a1)
00010E6C 137C 0002 001C             		move.b	#2,$1C(a1)
00010E72 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010E78 08E9 0001 0022             		bset	#1,$22(a1)
00010E7E 08A9 0003 0022             		bclr	#3,$22(a1)
00010E84 137C 0002 0024             		move.b	#2,$24(a1)
00010E8A 08A8 0003 0022             		bclr	#3,$22(a0)
00010E90 4228 0025                  		clr.b	$25(a0)
00010E94 117C 0001 001A             		move.b	#1,$1A(a0)
00010E9A 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00010EA0 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010EA2 343C 0038                  		move.w	#$38,d2
00010EA6 6100 D456                  		bsr.w	SmashObject
00010EAA 6100 DD30                  		bsr.w	SingleObjLoad
00010EAE 6600                       		bne.s	Obj51_Display
00010EB0 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010EB4 3368 0008 0008             		move.w	8(a0),8(a1)
00010EBA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010EC0 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010EC4 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00010EC8 0C42 0006                  		cmpi.w	#6,d2
00010ECC 6500                       		bcs.s	Obj51_Bonus
00010ECE 7406                       		moveq	#6,d2
00010ED0                            
00010ED0                            Obj51_Bonus:
00010ED0 7000                       		moveq	#0,d0
00010ED2 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010ED6 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010EDC 6500                       		bcs.s	loc_FD98	; if not, branch
00010EDE 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010EE2 740A                       		moveq	#10,d2
00010EE4                            
00010EE4                            loc_FD98:
00010EE4 4EB9 0000 0000             		jsr	AddPoints
00010EEA E24A                       		lsr.w	#1,d2
00010EEC 1342 001A                  		move.b	d2,$1A(a1)
00010EF0                            
00010EF0                            Obj51_Display:				; XREF: Obj51_Index
00010EF0 6100 D83E                  		bsr.w	SpeedToPos
00010EF4 0668 0038 0012             		addi.w	#$38,$12(a0)
00010EFA 6100 D85A                  		bsr.w	DisplaySprite
00010EFE 4A28 0001                  		tst.b	1(a0)
00010F02 6A00 D88E                  		bpl.w	DeleteObject
00010F06 4E75                       		rts	
00010F08                            ; ===========================================================================
00010F08 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010F0C FF00 FF00                  		dc.w $FF00, $FF00
00010F10 0200 FE00                  		dc.w $200, $FE00
00010F14 0100 FF00                  		dc.w $100, $FF00
00010F18                            
00010F18 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010F20                            ; ---------------------------------------------------------------------------
00010F20                            ; Sprite mappings - smashable green block (MZ)
00010F20                            ; ---------------------------------------------------------------------------
00010F20                            Map_obj51:
00010F20                            	include "_maps\obj51.asm"
00010F20                            ; ---------------------------------------------------------------------------
00010F20                            ; Sprite mappings - smashable green block (MZ)
00010F20                            ; ---------------------------------------------------------------------------
00010F20 0000                       		dc.w byte_FDD8-Map_obj51
00010F22 0000                       		dc.w byte_FDE3-Map_obj51
00010F24 02                         byte_FDD8:	dc.b 2
00010F25 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010F2A 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010F2F 04                         byte_FDE3:	dc.b 4
00010F30 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010F35 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010F3A F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010F3F 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010F44                            		even
00010F44                            		even
00010F44                            
00010F44                            ; ===========================================================================
00010F44                            ; ---------------------------------------------------------------------------
00010F44                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010F44                            ; ---------------------------------------------------------------------------
00010F44                            
00010F44                            Obj52:					; XREF: Obj_Index
00010F44 7000                       		moveq	#0,d0
00010F46 1028 0024                  		move.b	$24(a0),d0
00010F4A 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010F4E 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010F52                            ; ===========================================================================
00010F52 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010F54 0000                       		dc.w Obj52_Platform-Obj52_Index
00010F56 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010F58                            
00010F58 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010F5A 2001                       		dc.b $20, 1
00010F5C 2002                       		dc.b $20, 2
00010F5E 4003                       		dc.b $40, 3
00010F60 3004                       		dc.b $30, 4
00010F62                            ; ===========================================================================
00010F62                            
00010F62                            Obj52_Main:				; XREF: Obj52_Index
00010F62 5428 0024                  		addq.b	#2,$24(a0)
00010F66 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010F6E 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010F74 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010F7A 6600                       		bne.s	loc_FE44
00010F7C 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010F84 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010F8A 117C 0007 0016             		move.b	#7,$16(a0)
00010F90                            
00010F90                            loc_FE44:
00010F90 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010F96 6600                       		bne.s	loc_FE60
00010F98 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00010F9E 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010FA4 6700                       		beq.s	loc_FE60	; if yes, branch
00010FA6 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00010FAC                            
00010FAC                            loc_FE60:
00010FAC 117C 0004 0001             		move.b	#4,1(a0)
00010FB2 7000                       		moveq	#0,d0
00010FB4 1028 0028                  		move.b	$28(a0),d0
00010FB8 E648                       		lsr.w	#3,d0
00010FBA 0240 001E                  		andi.w	#$1E,d0
00010FBE 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00010FC2 115A 0019                  		move.b	(a2)+,$19(a0)
00010FC6 115A 001A                  		move.b	(a2)+,$1A(a0)
00010FCA 117C 0004 0018             		move.b	#4,$18(a0)
00010FD0 3168 0008 0030             		move.w	8(a0),$30(a0)
00010FD6 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010FDC 0228 000F 0028             		andi.b	#$F,$28(a0)
00010FE2                            
00010FE2                            Obj52_Platform:				; XREF: Obj52_Index
00010FE2 6100 0000                  		bsr.w	Obj52_Move
00010FE6 7200                       		moveq	#0,d1
00010FE8 1228 0019                  		move.b	$19(a0),d1
00010FEC 4EB9 0000 836A             		jsr	(PlatformObject).l
00010FF2 6000                       		bra.s	Obj52_ChkDel
00010FF4                            ; ===========================================================================
00010FF4                            
00010FF4                            Obj52_StandOn:				; XREF: Obj52_Index
00010FF4 7200                       		moveq	#0,d1
00010FF6 1228 0019                  		move.b	$19(a0),d1
00010FFA 4EB9 0000 84DE             		jsr	(ExitPlatform).l
00011000 3F28 0008                  		move.w	8(a0),-(sp)
00011004 6100 0000                  		bsr.w	Obj52_Move
00011008 341F                       		move.w	(sp)+,d2
0001100A 4EB9 0000 8A48             		jsr	(MvSonicOnPtfm2).l
00011010                            
00011010                            Obj52_ChkDel:				; XREF: Obj52_Platform
00011010 3028 0030                  		move.w	$30(a0),d0
00011014 0240 FF80                  		andi.w	#$FF80,d0
00011018 3238 F700                  		move.w	($FFFFF700).w,d1
0001101C 0441 0080                  		subi.w	#$80,d1
00011020 0241 FF80                  		andi.w	#$FF80,d1
00011024 9041                       		sub.w	d1,d0
00011026 0C40 0280                  		cmpi.w	#$280,d0
0001102A 6200 D766                  		bhi.w	DeleteObject
0001102E 6000 D726                  		bra.w	DisplaySprite
00011032                            ; ===========================================================================
00011032                            
00011032                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00011032 7000                       		moveq	#0,d0
00011034 1028 0028                  		move.b	$28(a0),d0
00011038 0240 000F                  		andi.w	#$F,d0
0001103C D040                       		add.w	d0,d0
0001103E 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00011042 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00011046                            ; ===========================================================================
00011046 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
0001104A 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0001104E 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00011052 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00011056 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
0001105A 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
0001105C                            ; ===========================================================================
0001105C                            
0001105C                            Obj52_Type00:				; XREF: Obj52_TypeIndex
0001105C 4E75                       		rts	
0001105E                            ; ===========================================================================
0001105E                            
0001105E                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0001105E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011062 323C 0060                  		move.w	#$60,d1
00011066 0828 0000 0022             		btst	#0,$22(a0)
0001106C 6700                       		beq.s	loc_FF26
0001106E 4440                       		neg.w	d0
00011070 D041                       		add.w	d1,d0
00011072                            
00011072                            loc_FF26:
00011072 3228 0030                  		move.w	$30(a0),d1
00011076 9240                       		sub.w	d0,d1
00011078 3141 0008                  		move.w	d1,8(a0)
0001107C 4E75                       		rts	
0001107E                            ; ===========================================================================
0001107E                            
0001107E                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001107E 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00011084 6600                       		bne.s	Obj52_02_Wait
00011086 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001108A                            
0001108A                            Obj52_02_Wait:
0001108A 4E75                       		rts	
0001108C                            ; ===========================================================================
0001108C                            
0001108C                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0001108C 7600                       		moveq	#0,d3
0001108E 1628 0019                  		move.b	$19(a0),d3
00011092 6100 0000                  		bsr.w	ObjHitWallRight
00011096 4A41                       		tst.w	d1		; has the platform hit a wall?
00011098 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
0001109A 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001109E 3168 0008 0030             		move.w	8(a0),$30(a0)
000110A4 4E75                       		rts	
000110A6                            ; ===========================================================================
000110A6                            
000110A6                            Obj52_03_End:
000110A6 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000110AA 4E75                       		rts	
000110AC                            ; ===========================================================================
000110AC                            
000110AC                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000110AC 7600                       		moveq	#0,d3
000110AE 1628 0019                  		move.b	$19(a0),d3
000110B2 6100 0000                  		bsr.w	ObjHitWallRight
000110B6 4A41                       		tst.w	d1		; has the platform hit a wall?
000110B8 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000110BA 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000110BE 3168 0008 0030             		move.w	8(a0),$30(a0)
000110C4 4E75                       		rts	
000110C6                            ; ===========================================================================
000110C6                            
000110C6                            Obj52_05_End:
000110C6 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000110CA 4E75                       		rts	
000110CC                            ; ===========================================================================
000110CC                            
000110CC                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000110CC 6100 D662                  		bsr.w	SpeedToPos
000110D0 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000110D6 6100 0000                  		bsr.w	ObjHitFloor
000110DA 4A41                       		tst.w	d1		; has platform hit the floor?
000110DC 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000110E0 D368 000C                  		add.w	d1,$C(a0)
000110E4 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000110E8 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000110EC                            
000110EC                            locret_FFA0:
000110EC 4E75                       		rts	
000110EE                            ; ===========================================================================
000110EE                            
000110EE                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000110EE 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000110F2 6700                       		beq.s	Obj52_07_ChkDel
000110F4 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000110F8                            
000110F8                            Obj52_07_ChkDel:
000110F8 588F                       		addq.l	#4,sp
000110FA 3028 0030                  		move.w	$30(a0),d0
000110FE 0240 FF80                  		andi.w	#$FF80,d0
00011102 3238 F700                  		move.w	($FFFFF700).w,d1
00011106 0441 0080                  		subi.w	#$80,d1
0001110A 0241 FF80                  		andi.w	#$FF80,d1
0001110E 9041                       		sub.w	d1,d0
00011110 0C40 0280                  		cmpi.w	#$280,d0
00011114 6200 D67C                  		bhi.w	DeleteObject
00011118 4E75                       		rts	
0001111A                            ; ===========================================================================
0001111A                            
0001111A                            Obj52_Type08:				; XREF: Obj52_TypeIndex
0001111A 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001111E 323C 0080                  		move.w	#$80,d1
00011122 0828 0000 0022             		btst	#0,$22(a0)
00011128 6700                       		beq.s	loc_FFE2
0001112A 4440                       		neg.w	d0
0001112C D041                       		add.w	d1,d0
0001112E                            
0001112E                            loc_FFE2:
0001112E 3228 0032                  		move.w	$32(a0),d1
00011132 9240                       		sub.w	d0,d1
00011134 3141 000C                  		move.w	d1,$C(a0)
00011138 4E75                       		rts	
0001113A                            ; ===========================================================================
0001113A                            
0001113A                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
0001113A 7600                       		moveq	#0,d3
0001113C 1628 0019                  		move.b	$19(a0),d3
00011140 D643                       		add.w	d3,d3
00011142 7208                       		moveq	#8,d1
00011144 0828 0000 0022             		btst	#0,$22(a0)
0001114A 6700                       		beq.s	loc_10004
0001114C 4441                       		neg.w	d1
0001114E 4443                       		neg.w	d3
00011150                            
00011150                            loc_10004:
00011150 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00011154 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00011156 3028 0008                  		move.w	8(a0),d0
0001115A 9068 0030                  		sub.w	$30(a0),d0
0001115E B043                       		cmp.w	d3,d0
00011160 6700                       		beq.s	Obj52_0A_Wait
00011162 D368 0008                  		add.w	d1,8(a0)	; move platform
00011166 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
0001116C 4E75                       		rts	
0001116E                            ; ===========================================================================
0001116E                            
0001116E                            Obj52_0A_Wait:
0001116E 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00011172 6600                       		bne.s	locret_1002E	; if time remains, branch
00011174 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
0001117A                            
0001117A                            locret_1002E:
0001117A 4E75                       		rts	
0001117C                            ; ===========================================================================
0001117C                            
0001117C                            Obj52_0A_Back:
0001117C 3028 0008                  		move.w	8(a0),d0
00011180 9068 0030                  		sub.w	$30(a0),d0
00011184 6700                       		beq.s	Obj52_0A_Reset
00011186 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
0001118A 4E75                       		rts	
0001118C                            ; ===========================================================================
0001118C                            
0001118C                            Obj52_0A_Reset:
0001118C 4268 0036                  		clr.w	$36(a0)
00011190 5328 0028                  		subq.b	#1,$28(a0)
00011194 4E75                       		rts	
00011196                            ; ===========================================================================
00011196                            ; ---------------------------------------------------------------------------
00011196                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011196                            ; ---------------------------------------------------------------------------
00011196                            Map_obj52:
00011196                            	include "_maps\obj52mz.asm"
00011196                            ; ---------------------------------------------------------------------------
00011196                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011196                            ; ---------------------------------------------------------------------------
00011196 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
0001119A 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
0001119E 0000                       		dc.w byte_1008F-Map_obj52
000111A0 01                         byte_10054:	dc.b 1
000111A1 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000111A6 02                         byte_1005A:	dc.b 2
000111A7 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000111AC F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000111B1 04                         byte_10065:	dc.b 4
000111B2 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000111B7 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000111BC F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000111C1 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000111C6 04                         byte_1007A:	dc.b 4
000111C7 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000111CC F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000111D1 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000111D6 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000111DB 03                         byte_1008F:	dc.b 3
000111DC F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000111E1 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000111E6 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000111EC 00                         		even
000111EC 00                         		even
000111EC                            
000111EC                            ; ---------------------------------------------------------------------------
000111EC                            ; Sprite mappings - moving block (LZ)
000111EC                            ; ---------------------------------------------------------------------------
000111EC                            Map_obj52a:
000111EC                            	include "_maps\obj52lz.asm"
000111EC                            ; ---------------------------------------------------------------------------
000111EC                            ; Sprite mappings - moving block (LZ)
000111EC                            ; ---------------------------------------------------------------------------
000111EC 0000                       		dc.w byte_100A2-Map_obj52a
000111EE 01                         byte_100A2:	dc.b 1
000111EF F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000111F4                            		even
000111F4                            		even
000111F4                            
000111F4                            ; ===========================================================================
000111F4                            ; ---------------------------------------------------------------------------
000111F4                            ; Object 55 - Basaran enemy (MZ)
000111F4                            ; ---------------------------------------------------------------------------
000111F4                            
000111F4                            Obj55:					; XREF: Obj_Index
000111F4 7000                       		moveq	#0,d0
000111F6 1028 0024                  		move.b	$24(a0),d0
000111FA 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
000111FE 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00011202                            ; ===========================================================================
00011202 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00011204 0000                       		dc.w Obj55_Action-Obj55_Index
00011206                            ; ===========================================================================
00011206                            
00011206                            Obj55_Main:				; XREF: Obj55_Index
00011206 5428 0024                  		addq.b	#2,$24(a0)
0001120A 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00011212 317C 84B8 0002             		move.w	#$84B8,2(a0)
00011218 117C 0004 0001             		move.b	#4,1(a0)
0001121E 117C 000C 0016             		move.b	#$C,$16(a0)
00011224 117C 0002 0018             		move.b	#2,$18(a0)
0001122A 117C 000B 0020             		move.b	#$B,$20(a0)
00011230 117C 0010 0019             		move.b	#$10,$19(a0)
00011236                            
00011236                            Obj55_Action:				; XREF: Obj55_Index
00011236 7000                       		moveq	#0,d0
00011238 1028 0025                  		move.b	$25(a0),d0
0001123C 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00011240 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00011244 43F9 0000 0000             		lea	(Ani_obj55).l,a1
0001124A 6100 A558                  		bsr.w	AnimateSprite
0001124E 6000 F5AE                  		bra.w	MarkObjGone
00011252                            ; ===========================================================================
00011252 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00011254 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00011256 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00011258 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
0001125A                            ; ===========================================================================
0001125A                            
0001125A                            Obj55_ChkDrop:				; XREF: Obj55_Index2
0001125A 343C 0080                  		move.w	#$80,d2
0001125E 6100 0000                  		bsr.w	Obj55_ChkSonic
00011262 6400                       		bcc.s	Obj55_NoDrop
00011264 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011268 3140 0036                  		move.w	d0,$36(a0)
0001126C 9068 000C                  		sub.w	$C(a0),d0
00011270 6500                       		bcs.s	Obj55_NoDrop
00011272 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00011276 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00011278 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001127C 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
0001127E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011282 D007                       		add.b	d7,d0
00011284 0200 0007                  		andi.b	#7,d0
00011288 6600                       		bne.s	Obj55_NoDrop
0001128A 117C 0001 001C             		move.b	#1,$1C(a0)
00011290 5428 0025                  		addq.b	#2,$25(a0)
00011294                            
00011294                            Obj55_NoDrop:
00011294 4E75                       		rts	
00011296                            ; ===========================================================================
00011296                            
00011296                            Obj55_DropFly:				; XREF: Obj55_Index2
00011296 6100 D498                  		bsr.w	SpeedToPos
0001129A 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000112A0 343C 0080                  		move.w	#$80,d2
000112A4 6100 0000                  		bsr.w	Obj55_ChkSonic
000112A8 3028 0036                  		move.w	$36(a0),d0
000112AC 9068 000C                  		sub.w	$C(a0),d0
000112B0 6500                       		bcs.s	Obj55_ChkDel
000112B2 0C40 0010                  		cmpi.w	#$10,d0
000112B6 6400                       		bcc.s	locret_10180
000112B8 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000112BC 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000112C2 117C 0002 001C             		move.b	#2,$1C(a0)
000112C8 5428 0025                  		addq.b	#2,$25(a0)
000112CC                            
000112CC                            locret_10180:
000112CC 4E75                       		rts	
000112CE                            ; ===========================================================================
000112CE                            
000112CE                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000112CE 4A28 0001                  		tst.b	1(a0)
000112D2 6A00 D4BE                  		bpl.w	DeleteObject
000112D6 4E75                       		rts	
000112D8                            ; ===========================================================================
000112D8                            
000112D8                            Obj55_PlaySnd:				; XREF: Obj55_Index2
000112D8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000112DC 0200 000F                  		andi.b	#$F,d0
000112E0 6600                       		bne.s	loc_101A0
000112E2 303C 00C0                  		move.w	#$C0,d0
000112E6 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play flapping sound
000112EC                            
000112EC                            loc_101A0:
000112EC 6100 D442                  		bsr.w	SpeedToPos
000112F0 3038 D008                  		move.w	($FFFFD008).w,d0
000112F4 9068 0008                  		sub.w	8(a0),d0
000112F8 6400                       		bcc.s	loc_101B0
000112FA 4440                       		neg.w	d0
000112FC                            
000112FC                            loc_101B0:
000112FC 0C40 0080                  		cmpi.w	#$80,d0
00011300 6500                       		bcs.s	locret_101C6
00011302 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00011306 D007                       		add.b	d7,d0
00011308 0200 0007                  		andi.b	#7,d0
0001130C 6600                       		bne.s	locret_101C6
0001130E 5428 0025                  		addq.b	#2,$25(a0)
00011312                            
00011312                            locret_101C6:
00011312 4E75                       		rts	
00011314                            ; ===========================================================================
00011314                            
00011314                            Obj55_FlyUp:				; XREF: Obj55_Index2
00011314 6100 D41A                  		bsr.w	SpeedToPos
00011318 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
0001131E 6100 0000                  		bsr.w	ObjHitCeiling
00011322 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00011324 6A00                       		bpl.s	locret_101F4	; if not, branch
00011326 9368 000C                  		sub.w	d1,$C(a0)
0001132A 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00011330 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00011334 4268 0012                  		clr.w	$12(a0)
00011338 4228 001C                  		clr.b	$1C(a0)
0001133C 4228 0025                  		clr.b	$25(a0)
00011340                            
00011340                            locret_101F4:
00011340 4E75                       		rts	
00011342                            ; ===========================================================================
00011342                            
00011342                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00011342 323C 0100                  		move.w	#$100,d1
00011346 08E8 0000 0022             		bset	#0,$22(a0)
0001134C 3038 D008                  		move.w	($FFFFD008).w,d0
00011350 9068 0008                  		sub.w	8(a0),d0
00011354 6400                       		bcc.s	loc_10214
00011356 4440                       		neg.w	d0
00011358 4441                       		neg.w	d1
0001135A 08A8 0000 0022             		bclr	#0,$22(a0)
00011360                            
00011360                            loc_10214:
00011360 B042                       		cmp.w	d2,d0
00011362 4E75                       		rts	
00011364                            ; ===========================================================================
00011364 6100 D3CA                  		bsr.w	SpeedToPos
00011368 6100 D3EC                  		bsr.w	DisplaySprite
0001136C 4A28 0001                  		tst.b	1(a0)
00011370 6A00 D420                  		bpl.w	DeleteObject
00011374 4E75                       		rts	
00011376                            ; ===========================================================================
00011376                            Ani_obj55:
00011376                            	include "_anim\obj55.asm"
00011376                            ; ---------------------------------------------------------------------------
00011376                            ; Animation script - Basaran enemy
00011376                            ; ---------------------------------------------------------------------------
00011376 0000                       		dc.w byte_10230-Ani_obj55
00011378 0000                       		dc.w byte_10234-Ani_obj55
0001137A 0000                       		dc.w byte_10238-Ani_obj55
0001137C 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00011380 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00011384 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
0001138A                            		even
0001138A                            		even
0001138A                            
0001138A                            ; ---------------------------------------------------------------------------
0001138A                            ; Sprite mappings - Basaran enemy (MZ)
0001138A                            ; ---------------------------------------------------------------------------
0001138A                            Map_obj55:
0001138A                            	include "_maps\obj55.asm"
0001138A                            ; ---------------------------------------------------------------------------
0001138A                            ; Sprite mappings - Basaran enemy (MZ)
0001138A                            ; ---------------------------------------------------------------------------
0001138A 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
0001138E 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00011392 01                         byte_10246:	dc.b 1
00011393 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00011398 03                         byte_1024C:	dc.b 3
00011399 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
0001139E 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
000113A3 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
000113A8 04                         byte_1025C:	dc.b 4
000113A9 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
000113AE 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
000113B3 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
000113B8 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
000113BD 04                         byte_10271:	dc.b 4
000113BE F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
000113C3 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
000113C8 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
000113CD FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
000113D2                            		even
000113D2                            		even
000113D2                            
000113D2                            ; ===========================================================================
000113D2                            ; ---------------------------------------------------------------------------
000113D2                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
000113D2                            ; ---------------------------------------------------------------------------
000113D2                            
000113D2                            Obj56:					; XREF: Obj_Index
000113D2 7000                       		moveq	#0,d0
000113D4 1028 0024                  		move.b	$24(a0),d0
000113D8 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
000113DC 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
000113E0                            ; ===========================================================================
000113E0 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
000113E2 0000                       		dc.w Obj56_Action-Obj56_Index
000113E4                            
000113E4 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
000113E6 2020                       		dc.b  $20, $20
000113E8 1020                       		dc.b  $10, $20
000113EA 201A                       		dc.b  $20, $1A
000113EC 1027                       		dc.b  $10, $27
000113EE 1010                       		dc.b  $10, $10
000113F0 0820                       		dc.b	8, $20
000113F2 4010                       		dc.b  $40, $10
000113F4                            ; ===========================================================================
000113F4                            
000113F4                            Obj56_Main:				; XREF: Obj56_Index
000113F4 5428 0024                  		addq.b	#2,$24(a0)
000113F8 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00011400 317C 4000 0002             		move.w	#$4000,2(a0)
00011406 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001140C 6600                       		bne.s	loc_102C8
0001140E 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00011414                            
00011414                            loc_102C8:
00011414 117C 0004 0001             		move.b	#4,1(a0)
0001141A 117C 0003 0018             		move.b	#3,$18(a0)
00011420 7000                       		moveq	#0,d0
00011422 1028 0028                  		move.b	$28(a0),d0
00011426 E648                       		lsr.w	#3,d0
00011428 0240 000E                  		andi.w	#$E,d0
0001142C 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00011430 115A 0019                  		move.b	(a2)+,$19(a0)
00011434 1152 0016                  		move.b	(a2),$16(a0)
00011438 E248                       		lsr.w	#1,d0
0001143A 1140 001A                  		move.b	d0,$1A(a0)
0001143E 3168 0008 0034             		move.w	8(a0),$34(a0)
00011444 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001144A 7000                       		moveq	#0,d0
0001144C 1012                       		move.b	(a2),d0
0001144E D040                       		add.w	d0,d0
00011450 3140 003A                  		move.w	d0,$3A(a0)
00011454 7000                       		moveq	#0,d0
00011456 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001145C 6700                       		beq.s	loc_10332
0001145E 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00011462 0240 000F                  		andi.w	#$F,d0
00011466 5140                       		subq.w	#8,d0
00011468 6500                       		bcs.s	loc_10332
0001146A E548                       		lsl.w	#2,d0
0001146C 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00011470 45F2 0000                  		lea	(a2,d0.w),a2
00011474 4A52                       		tst.w	(a2)
00011476 6A00                       		bpl.s	loc_10332
00011478 0868 0000 0022             		bchg	#0,$22(a0)
0001147E                            
0001147E                            loc_10332:
0001147E 1028 0028                  		move.b	$28(a0),d0
00011482 6A00                       		bpl.s	Obj56_Action
00011484 0200 000F                  		andi.b	#$F,d0
00011488 1140 003C                  		move.b	d0,$3C(a0)
0001148C 117C 0005 0028             		move.b	#5,$28(a0)
00011492 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00011498 6600                       		bne.s	Obj56_ChkGone
0001149A 117C 000C 0028             		move.b	#$C,$28(a0)
000114A0 317C 0080 003A             		move.w	#$80,$3A(a0)
000114A6                            
000114A6                            Obj56_ChkGone:
000114A6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000114AA 7000                       		moveq	#0,d0
000114AC 1028 0023                  		move.b	$23(a0),d0
000114B0 6700                       		beq.s	Obj56_Action
000114B2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000114B8 0832 0000 0002             		btst	#0,2(a2,d0.w)
000114BE 6700                       		beq.s	Obj56_Action
000114C0 5228 0028                  		addq.b	#1,$28(a0)
000114C4 4268 003A                  		clr.w	$3A(a0)
000114C8                            
000114C8                            Obj56_Action:				; XREF: Obj56_Index
000114C8 3F28 0008                  		move.w	8(a0),-(sp)
000114CC 7000                       		moveq	#0,d0
000114CE 1028 0028                  		move.b	$28(a0),d0	; get object type
000114D2 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000114D6 D040                       		add.w	d0,d0
000114D8 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
000114DC 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
000114E0 381F                       		move.w	(sp)+,d4
000114E2 4A28 0001                  		tst.b	1(a0)
000114E6 6A00                       		bpl.s	Obj56_ChkDel
000114E8 7200                       		moveq	#0,d1
000114EA 1228 0019                  		move.b	$19(a0),d1
000114EE 0641 000B                  		addi.w	#$B,d1
000114F2 7400                       		moveq	#0,d2
000114F4 1428 0016                  		move.b	$16(a0),d2
000114F8 3602                       		move.w	d2,d3
000114FA 5243                       		addq.w	#1,d3
000114FC 6100 F628                  		bsr.w	SolidObject
00011500                            
00011500                            Obj56_ChkDel:
00011500 3028 0034                  		move.w	$34(a0),d0
00011504 0240 FF80                  		andi.w	#$FF80,d0
00011508 3238 F700                  		move.w	($FFFFF700).w,d1
0001150C 0441 0080                  		subi.w	#$80,d1
00011510 0241 FF80                  		andi.w	#$FF80,d1
00011514 9041                       		sub.w	d1,d0
00011516 0C40 0280                  		cmpi.w	#$280,d0
0001151A 6200 D276                  		bhi.w	DeleteObject
0001151E 6000 D236                  		bra.w	DisplaySprite
00011522                            ; ===========================================================================
00011522 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00011526 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
0001152A 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
0001152E 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00011532 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00011536 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
0001153A 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
0001153E                            ; ===========================================================================
0001153E                            
0001153E                            Obj56_Type00:				; XREF: Obj56_TypeIndex
0001153E 4E75                       		rts	
00011540                            ; ===========================================================================
00011540                            
00011540                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00011540 323C 0040                  		move.w	#$40,d1
00011544 7000                       		moveq	#0,d0
00011546 1038 FE68                  		move.b	($FFFFFE68).w,d0
0001154A 6000                       		bra.s	Obj56_Move_LR
0001154C                            ; ===========================================================================
0001154C                            
0001154C                            Obj56_Type02:				; XREF: Obj56_TypeIndex
0001154C 323C 0080                  		move.w	#$80,d1
00011550 7000                       		moveq	#0,d0
00011552 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011556                            
00011556                            Obj56_Move_LR:
00011556 0828 0000 0022             		btst	#0,$22(a0)
0001155C 6700                       		beq.s	loc_10416
0001155E 4440                       		neg.w	d0
00011560 D041                       		add.w	d1,d0
00011562                            
00011562                            loc_10416:
00011562 3228 0034                  		move.w	$34(a0),d1
00011566 9240                       		sub.w	d0,d1
00011568 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001156C 4E75                       		rts	
0001156E                            ; ===========================================================================
0001156E                            
0001156E                            Obj56_Type03:				; XREF: Obj56_TypeIndex
0001156E 323C 0040                  		move.w	#$40,d1
00011572 7000                       		moveq	#0,d0
00011574 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011578 6000                       		bra.s	Obj56_Move_UD
0001157A                            ; ===========================================================================
0001157A                            
0001157A                            Obj56_Type04:				; XREF: Obj56_TypeIndex
0001157A 323C 0080                  		move.w	#$80,d1
0001157E 7000                       		moveq	#0,d0
00011580 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011584                            
00011584                            Obj56_Move_UD:
00011584 0828 0000 0022             		btst	#0,$22(a0)
0001158A 6700                       		beq.s	loc_10444
0001158C 4440                       		neg.w	d0
0001158E D041                       		add.w	d1,d0
00011590                            
00011590                            loc_10444:
00011590 3228 0030                  		move.w	$30(a0),d1
00011594 9240                       		sub.w	d0,d1
00011596 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
0001159A 4E75                       		rts	
0001159C                            ; ===========================================================================
0001159C                            
0001159C                            Obj56_Type05:				; XREF: Obj56_TypeIndex
0001159C 4A28 0038                  		tst.b	$38(a0)
000115A0 6600                       		bne.s	loc_104A4
000115A2 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000115A8 6600                       		bne.s	loc_1047A	; if not, branch
000115AA 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
000115B0 6600                       		bne.s	loc_1047A
000115B2 4238 F7C9                  		clr.b	($FFFFF7C9).w
000115B6 3038 D008                  		move.w	($FFFFD008).w,d0
000115BA B068 0008                  		cmp.w	8(a0),d0
000115BE 6400                       		bcc.s	loc_1047A
000115C0 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
000115C6                            
000115C6                            loc_1047A:
000115C6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000115CA 7000                       		moveq	#0,d0
000115CC 1028 003C                  		move.b	$3C(a0),d0
000115D0 0832 0000 0000             		btst	#0,(a2,d0.w)
000115D6 6700                       		beq.s	loc_104AE
000115D8 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000115DE 6600                       		bne.s	loc_1049E	; if not, branch
000115E0 0C00 0003                  		cmpi.b	#3,d0
000115E4 6600                       		bne.s	loc_1049E
000115E6 4238 F7C9                  		clr.b	($FFFFF7C9).w
000115EA                            
000115EA                            loc_1049E:
000115EA 117C 0001 0038             		move.b	#1,$38(a0)
000115F0                            
000115F0                            loc_104A4:
000115F0 4A68 003A                  		tst.w	$3A(a0)
000115F4 6700                       		beq.s	loc_104C8
000115F6 5568 003A                  		subq.w	#2,$3A(a0)
000115FA                            
000115FA                            loc_104AE:
000115FA 3028 003A                  		move.w	$3A(a0),d0
000115FE 0828 0000 0022             		btst	#0,$22(a0)
00011604 6700                       		beq.s	loc_104BC
00011606 4440                       		neg.w	d0
00011608                            
00011608                            loc_104BC:
00011608 3228 0030                  		move.w	$30(a0),d1
0001160C D240                       		add.w	d0,d1
0001160E 3141 000C                  		move.w	d1,$C(a0)
00011612 4E75                       		rts	
00011614                            ; ===========================================================================
00011614                            
00011614                            loc_104C8:
00011614 5228 0028                  		addq.b	#1,$28(a0)
00011618 4228 0038                  		clr.b	$38(a0)
0001161C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011620 7000                       		moveq	#0,d0
00011622 1028 0023                  		move.b	$23(a0),d0
00011626 67D2                       		beq.s	loc_104AE
00011628 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001162E 60CA                       		bra.s	loc_104AE
00011630                            ; ===========================================================================
00011630                            
00011630                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00011630 4A28 0038                  		tst.b	$38(a0)
00011634 6600                       		bne.s	loc_10500
00011636 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001163A 7000                       		moveq	#0,d0
0001163C 1028 003C                  		move.b	$3C(a0),d0
00011640 4A32 0000                  		tst.b	(a2,d0.w)
00011644 6A00                       		bpl.s	loc_10512
00011646 117C 0001 0038             		move.b	#1,$38(a0)
0001164C                            
0001164C                            loc_10500:
0001164C 7000                       		moveq	#0,d0
0001164E 1028 0016                  		move.b	$16(a0),d0
00011652 D040                       		add.w	d0,d0
00011654 B068 003A                  		cmp.w	$3A(a0),d0
00011658 6700                       		beq.s	loc_1052C
0001165A 5468 003A                  		addq.w	#2,$3A(a0)
0001165E                            
0001165E                            loc_10512:
0001165E 3028 003A                  		move.w	$3A(a0),d0
00011662 0828 0000 0022             		btst	#0,$22(a0)
00011668 6700                       		beq.s	loc_10520
0001166A 4440                       		neg.w	d0
0001166C                            
0001166C                            loc_10520:
0001166C 3228 0030                  		move.w	$30(a0),d1
00011670 D240                       		add.w	d0,d1
00011672 3141 000C                  		move.w	d1,$C(a0)
00011676 4E75                       		rts	
00011678                            ; ===========================================================================
00011678                            
00011678                            loc_1052C:
00011678 5328 0028                  		subq.b	#1,$28(a0)
0001167C 4228 0038                  		clr.b	$38(a0)
00011680 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011684 7000                       		moveq	#0,d0
00011686 1028 0023                  		move.b	$23(a0),d0
0001168A 67D2                       		beq.s	loc_10512
0001168C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011692 60CA                       		bra.s	loc_10512
00011694                            ; ===========================================================================
00011694                            
00011694                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00011694 4A28 0038                  		tst.b	$38(a0)
00011698 6600                       		bne.s	loc_1055E
0001169A 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
0001169E 6700                       		beq.s	locret_10578
000116A0 117C 0001 0038             		move.b	#1,$38(a0)
000116A6 4268 003A                  		clr.w	$3A(a0)
000116AA                            
000116AA                            loc_1055E:
000116AA 5268 0008                  		addq.w	#1,8(a0)
000116AE 3168 0008 0034             		move.w	8(a0),$34(a0)
000116B4 5268 003A                  		addq.w	#1,$3A(a0)
000116B8 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
000116BE 6600                       		bne.s	locret_10578
000116C0 4228 0028                  		clr.b	$28(a0)
000116C4                            
000116C4                            locret_10578:
000116C4 4E75                       		rts	
000116C6                            ; ===========================================================================
000116C6                            
000116C6                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
000116C6 4A28 0038                  		tst.b	$38(a0)
000116CA 6600                       		bne.s	loc_10598
000116CC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000116D0 7000                       		moveq	#0,d0
000116D2 1028 003C                  		move.b	$3C(a0),d0
000116D6 0832 0000 0000             		btst	#0,(a2,d0.w)
000116DC 6700                       		beq.s	loc_105A2
000116DE 117C 0001 0038             		move.b	#1,$38(a0)
000116E4                            
000116E4                            loc_10598:
000116E4 4A68 003A                  		tst.w	$3A(a0)
000116E8 6700                       		beq.s	loc_105C0
000116EA 5568 003A                  		subq.w	#2,$3A(a0)
000116EE                            
000116EE                            loc_105A2:
000116EE 3028 003A                  		move.w	$3A(a0),d0
000116F2 0828 0000 0022             		btst	#0,$22(a0)
000116F8 6700                       		beq.s	loc_105B4
000116FA 4440                       		neg.w	d0
000116FC 0640 0080                  		addi.w	#$80,d0
00011700                            
00011700                            loc_105B4:
00011700 3228 0034                  		move.w	$34(a0),d1
00011704 D240                       		add.w	d0,d1
00011706 3141 0008                  		move.w	d1,8(a0)
0001170A 4E75                       		rts	
0001170C                            ; ===========================================================================
0001170C                            
0001170C                            loc_105C0:
0001170C 5228 0028                  		addq.b	#1,$28(a0)
00011710 4228 0038                  		clr.b	$38(a0)
00011714 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011718 7000                       		moveq	#0,d0
0001171A 1028 0023                  		move.b	$23(a0),d0
0001171E 67CE                       		beq.s	loc_105A2
00011720 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00011726 60C6                       		bra.s	loc_105A2
00011728                            ; ===========================================================================
00011728                            
00011728                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00011728 4A28 0038                  		tst.b	$38(a0)
0001172C 6600                       		bne.s	loc_105F8
0001172E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011732 7000                       		moveq	#0,d0
00011734 1028 003C                  		move.b	$3C(a0),d0
00011738 4A32 0000                  		tst.b	(a2,d0.w)
0001173C 6A00                       		bpl.s	loc_10606
0001173E 117C 0001 0038             		move.b	#1,$38(a0)
00011744                            
00011744                            loc_105F8:
00011744 303C 0080                  		move.w	#$80,d0
00011748 B068 003A                  		cmp.w	$3A(a0),d0
0001174C 6700                       		beq.s	loc_10624
0001174E 5468 003A                  		addq.w	#2,$3A(a0)
00011752                            
00011752                            loc_10606:
00011752 3028 003A                  		move.w	$3A(a0),d0
00011756 0828 0000 0022             		btst	#0,$22(a0)
0001175C 6700                       		beq.s	loc_10618
0001175E 4440                       		neg.w	d0
00011760 0640 0080                  		addi.w	#$80,d0
00011764                            
00011764                            loc_10618:
00011764 3228 0034                  		move.w	$34(a0),d1
00011768 D240                       		add.w	d0,d1
0001176A 3141 0008                  		move.w	d1,8(a0)
0001176E 4E75                       		rts	
00011770                            ; ===========================================================================
00011770                            
00011770                            loc_10624:
00011770 5328 0028                  		subq.b	#1,$28(a0)
00011774 4228 0038                  		clr.b	$38(a0)
00011778 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001177C 7000                       		moveq	#0,d0
0001177E 1028 0023                  		move.b	$23(a0),d0
00011782 67CE                       		beq.s	loc_10606
00011784 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001178A 60C6                       		bra.s	loc_10606
0001178C                            ; ===========================================================================
0001178C                            
0001178C                            Obj56_Type08:				; XREF: Obj56_TypeIndex
0001178C 323C 0010                  		move.w	#$10,d1
00011790 7000                       		moveq	#0,d0
00011792 1038 FE88                  		move.b	($FFFFFE88).w,d0
00011796 E248                       		lsr.w	#1,d0
00011798 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
0001179C 6000                       		bra.s	Obj56_Move_Sqr
0001179E                            ; ===========================================================================
0001179E                            
0001179E                            Obj56_Type09:				; XREF: Obj56_TypeIndex
0001179E 323C 0030                  		move.w	#$30,d1
000117A2 7000                       		moveq	#0,d0
000117A4 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
000117A8 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
000117AC 6000                       		bra.s	Obj56_Move_Sqr
000117AE                            ; ===========================================================================
000117AE                            
000117AE                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
000117AE 323C 0050                  		move.w	#$50,d1
000117B2 7000                       		moveq	#0,d0
000117B4 1038 FE90                  		move.b	($FFFFFE90).w,d0
000117B8 3638 FE92                  		move.w	($FFFFFE92).w,d3
000117BC 6000                       		bra.s	Obj56_Move_Sqr
000117BE                            ; ===========================================================================
000117BE                            
000117BE                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
000117BE 323C 0070                  		move.w	#$70,d1
000117C2 7000                       		moveq	#0,d0
000117C4 1038 FE94                  		move.b	($FFFFFE94).w,d0
000117C8 3638 FE96                  		move.w	($FFFFFE96).w,d3
000117CC                            
000117CC                            Obj56_Move_Sqr:
000117CC 4A43                       		tst.w	d3
000117CE 6600                       		bne.s	loc_1068E
000117D0 5228 0022                  		addq.b	#1,$22(a0)
000117D4 0228 0003 0022             		andi.b	#3,$22(a0)
000117DA                            
000117DA                            loc_1068E:
000117DA 1428 0022                  		move.b	$22(a0),d2
000117DE 0202 0003                  		andi.b	#3,d2
000117E2 6600                       		bne.s	loc_106AE
000117E4 9041                       		sub.w	d1,d0
000117E6 D068 0034                  		add.w	$34(a0),d0
000117EA 3140 0008                  		move.w	d0,8(a0)
000117EE 4441                       		neg.w	d1
000117F0 D268 0030                  		add.w	$30(a0),d1
000117F4 3141 000C                  		move.w	d1,$C(a0)
000117F8 4E75                       		rts	
000117FA                            ; ===========================================================================
000117FA                            
000117FA                            loc_106AE:
000117FA 5302                       		subq.b	#1,d2
000117FC 6600                       		bne.s	loc_106CC
000117FE 5341                       		subq.w	#1,d1
00011800 9041                       		sub.w	d1,d0
00011802 4440                       		neg.w	d0
00011804 D068 0030                  		add.w	$30(a0),d0
00011808 3140 000C                  		move.w	d0,$C(a0)
0001180C 5241                       		addq.w	#1,d1
0001180E D268 0034                  		add.w	$34(a0),d1
00011812 3141 0008                  		move.w	d1,8(a0)
00011816 4E75                       		rts	
00011818                            ; ===========================================================================
00011818                            
00011818                            loc_106CC:
00011818 5302                       		subq.b	#1,d2
0001181A 6600                       		bne.s	loc_106EA
0001181C 5341                       		subq.w	#1,d1
0001181E 9041                       		sub.w	d1,d0
00011820 4440                       		neg.w	d0
00011822 D068 0034                  		add.w	$34(a0),d0
00011826 3140 0008                  		move.w	d0,8(a0)
0001182A 5241                       		addq.w	#1,d1
0001182C D268 0030                  		add.w	$30(a0),d1
00011830 3141 000C                  		move.w	d1,$C(a0)
00011834 4E75                       		rts	
00011836                            ; ===========================================================================
00011836                            
00011836                            loc_106EA:
00011836 9041                       		sub.w	d1,d0
00011838 D068 0030                  		add.w	$30(a0),d0
0001183C 3140 000C                  		move.w	d0,$C(a0)
00011840 4441                       		neg.w	d1
00011842 D268 0034                  		add.w	$34(a0),d1
00011846 3141 0008                  		move.w	d1,8(a0)
0001184A 4E75                       		rts	
0001184C                            ; ===========================================================================
0001184C                            ; ---------------------------------------------------------------------------
0001184C                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0001184C                            ; ---------------------------------------------------------------------------
0001184C                            Map_obj56:
0001184C                            	include "_maps\obj56.asm"
0001184C                            ; ---------------------------------------------------------------------------
0001184C                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
0001184C                            ; ---------------------------------------------------------------------------
0001184C 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00011850 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00011854 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00011858 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
0001185C 01                         byte_10710:	dc.b 1
0001185D F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00011862 04                         byte_10716:	dc.b 4
00011863 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00011868 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
0001186D 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00011872 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00011877 02                         byte_1072B:	dc.b 2
00011878 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
0001187D 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00011882 04                         byte_10736:	dc.b 4
00011883 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00011888 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
0001188D 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00011892 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00011897 03                         byte_1074B:	dc.b 3
00011898 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
0001189D F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
000118A2 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
000118A7 01                         byte_1075B:	dc.b 1
000118A8 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000118AD 02                         byte_10761:	dc.b 2
000118AE E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000118B3 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000118B8 04                         byte_1076C:	dc.b 4
000118B9 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
000118BE F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
000118C3 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
000118C8 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000118CE 00                         		even
000118CE 00                         		even
000118CE                            
000118CE                            ; ===========================================================================
000118CE                            ; ---------------------------------------------------------------------------
000118CE                            ; Object 57 - spiked balls (SYZ, LZ)
000118CE                            ; ---------------------------------------------------------------------------
000118CE                            
000118CE                            Obj57:					; XREF: Obj_Index
000118CE 7000                       		moveq	#0,d0
000118D0 1028 0024                  		move.b	$24(a0),d0
000118D4 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
000118D8 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
000118DC                            ; ===========================================================================
000118DC 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
000118DE 0000                       		dc.w Obj57_Move-Obj57_Index
000118E0 0000                       		dc.w Obj57_Display-Obj57_Index
000118E2                            ; ===========================================================================
000118E2                            
000118E2                            Obj57_Main:				; XREF: Obj57_Index
000118E2 5428 0024                  		addq.b	#2,$24(a0)
000118E6 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
000118EE 317C 03BA 0002             		move.w	#$3BA,2(a0)
000118F4 117C 0004 0001             		move.b	#4,1(a0)
000118FA 117C 0004 0018             		move.b	#4,$18(a0)
00011900 117C 0008 0019             		move.b	#8,$19(a0)
00011906 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001190C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011912 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00011918 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001191E 6600                       		bne.s	loc_107E8
00011920 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00011926 317C 0310 0002             		move.w	#$310,2(a0)
0001192C 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00011934                            
00011934                            loc_107E8:
00011934 1228 0028                  		move.b	$28(a0),d1	; get object type
00011938 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001193C 4881                       		ext.w	d1
0001193E E741                       		asl.w	#3,d1		; multiply by 8
00011940 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00011944 1028 0022                  		move.b	$22(a0),d0
00011948 E418                       		ror.b	#2,d0
0001194A 0200 00C0                  		andi.b	#-$40,d0
0001194E 1140 0026                  		move.b	d0,$26(a0)
00011952 45E8 0029                  		lea	$29(a0),a2
00011956 1228 0028                  		move.b	$28(a0),d1	; get object type
0001195A 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
0001195E 14FC 0000                  		move.b	#0,(a2)+
00011962 3601                       		move.w	d1,d3
00011964 E94B                       		lsl.w	#4,d3
00011966 1143 003C                  		move.b	d3,$3C(a0)
0001196A 5341                       		subq.w	#1,d1		; set chain length (type-1)
0001196C 6500                       		bcs.s	loc_10894
0001196E 0828 0003 0028             		btst	#3,$28(a0)
00011974 6700                       		beq.s	Obj57_MakeChain
00011976 5341                       		subq.w	#1,d1
00011978 6500                       		bcs.s	loc_10894
0001197A                            
0001197A                            Obj57_MakeChain:
0001197A 6100 D260                  		bsr.w	SingleObjLoad
0001197E 6600                       		bne.s	loc_10894
00011980 5228 0029                  		addq.b	#1,$29(a0)
00011984 3A09                       		move.w	a1,d5
00011986 0445 D000                  		subi.w	#-$3000,d5
0001198A EC4D                       		lsr.w	#6,d5
0001198C 0245 007F                  		andi.w	#$7F,d5
00011990 14C5                       		move.b	d5,(a2)+
00011992 137C 0004 0024             		move.b	#4,$24(a1)
00011998 1290                       		move.b	0(a0),0(a1)
0001199A 2368 0004 0004             		move.l	4(a0),4(a1)
000119A0 3368 0002 0002             		move.w	2(a0),2(a1)
000119A6 1368 0001 0001             		move.b	1(a0),1(a1)
000119AC 1368 0018 0018             		move.b	$18(a0),$18(a1)
000119B2 1368 0019 0019             		move.b	$19(a0),$19(a1)
000119B8 1368 0020 0020             		move.b	$20(a0),$20(a1)
000119BE 0403 0010                  		subi.b	#$10,d3
000119C2 1343 003C                  		move.b	d3,$3C(a1)
000119C6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000119CC 6600                       		bne.s	loc_10890
000119CE 4A03                       		tst.b	d3
000119D0 6600                       		bne.s	loc_10890
000119D2 137C 0002 001A             		move.b	#2,$1A(a1)
000119D8                            
000119D8                            loc_10890:
000119D8 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
000119DC                            
000119DC                            loc_10894:
000119DC 3A08                       		move.w	a0,d5
000119DE 0445 D000                  		subi.w	#-$3000,d5
000119E2 EC4D                       		lsr.w	#6,d5
000119E4 0245 007F                  		andi.w	#$7F,d5
000119E8 14C5                       		move.b	d5,(a2)+
000119EA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000119F0 6600                       		bne.s	Obj57_Move
000119F2 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000119F8 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000119FE                            
000119FE                            Obj57_Move:				; XREF: Obj57_Index
000119FE 6100 0000                  		bsr.w	Obj57_MoveSub
00011A02 6000 0000                  		bra.w	Obj57_ChkDel
00011A06                            ; ===========================================================================
00011A06                            
00011A06                            Obj57_MoveSub:				; XREF: Obj57_Move
00011A06 3028 003E                  		move.w	$3E(a0),d0
00011A0A D168 0026                  		add.w	d0,$26(a0)
00011A0E 1028 0026                  		move.b	$26(a0),d0
00011A12 4EB9 0000 3416             		jsr	(CalcSine).l
00011A18 3428 0038                  		move.w	$38(a0),d2
00011A1C 3628 003A                  		move.w	$3A(a0),d3
00011A20 45E8 0029                  		lea	$29(a0),a2
00011A24 7C00                       		moveq	#0,d6
00011A26 1C1A                       		move.b	(a2)+,d6
00011A28                            
00011A28                            Obj57_MoveLoop:
00011A28 7800                       		moveq	#0,d4
00011A2A 181A                       		move.b	(a2)+,d4
00011A2C ED4C                       		lsl.w	#6,d4
00011A2E 0684 00FF D000             		addi.l	#$FFD000,d4
00011A34 2244                       		movea.l	d4,a1
00011A36 7800                       		moveq	#0,d4
00011A38 1829 003C                  		move.b	$3C(a1),d4
00011A3C 2A04                       		move.l	d4,d5
00011A3E C9C0                       		muls.w	d0,d4
00011A40 E084                       		asr.l	#8,d4
00011A42 CBC1                       		muls.w	d1,d5
00011A44 E085                       		asr.l	#8,d5
00011A46 D842                       		add.w	d2,d4
00011A48 DA43                       		add.w	d3,d5
00011A4A 3344 000C                  		move.w	d4,$C(a1)
00011A4E 3345 0008                  		move.w	d5,8(a1)
00011A52 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00011A56 4E75                       		rts	
00011A58                            ; ===========================================================================
00011A58                            
00011A58                            Obj57_ChkDel:				; XREF: Obj57_Move
00011A58 3028 003A                  		move.w	$3A(a0),d0
00011A5C 0240 FF80                  		andi.w	#$FF80,d0
00011A60 3238 F700                  		move.w	($FFFFF700).w,d1
00011A64 0441 0080                  		subi.w	#$80,d1
00011A68 0241 FF80                  		andi.w	#$FF80,d1
00011A6C 9041                       		sub.w	d1,d0
00011A6E 0C40 0280                  		cmpi.w	#$280,d0
00011A72 6200 0000                  		bhi.w	Obj57_Delete
00011A76 6000 CCDE                  		bra.w	DisplaySprite
00011A7A                            ; ===========================================================================
00011A7A                            
00011A7A                            Obj57_Delete:				; XREF: Obj57_ChkDel
00011A7A 7400                       		moveq	#0,d2
00011A7C 45E8 0029                  		lea	$29(a0),a2
00011A80 141A                       		move.b	(a2)+,d2
00011A82                            
00011A82                            Obj57_DelLoop:
00011A82 7000                       		moveq	#0,d0
00011A84 101A                       		move.b	(a2)+,d0
00011A86 ED48                       		lsl.w	#6,d0
00011A88 0680 00FF D000             		addi.l	#$FFD000,d0
00011A8E 2240                       		movea.l	d0,a1
00011A90 6100 CD02                  		bsr.w	DeleteObject2
00011A94 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00011A98                            
00011A98 4E75                       		rts	
00011A9A                            ; ===========================================================================
00011A9A                            
00011A9A                            Obj57_Display:				; XREF: Obj57_Index
00011A9A 6000 CCBA                  		bra.w	DisplaySprite
00011A9E                            ; ===========================================================================
00011A9E                            ; ---------------------------------------------------------------------------
00011A9E                            ; Sprite mappings - chain of spiked balls (SYZ)
00011A9E                            ; ---------------------------------------------------------------------------
00011A9E                            Map_obj57:
00011A9E                            	include "_maps\obj57syz.asm"
00011A9E                            ; ---------------------------------------------------------------------------
00011A9E                            ; Sprite mappings - chain of spiked balls (SYZ)
00011A9E                            ; ---------------------------------------------------------------------------
00011A9E 0000                       		dc.w byte_10958-Map_obj57
00011AA0 01                         byte_10958:	dc.b 1
00011AA1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011AA6                            		even
00011AA6                            		even
00011AA6                            
00011AA6                            ; ---------------------------------------------------------------------------
00011AA6                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011AA6                            ; ---------------------------------------------------------------------------
00011AA6                            Map_obj57a:
00011AA6                            	include "_maps\obj57lz.asm"
00011AA6                            ; ---------------------------------------------------------------------------
00011AA6                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011AA6                            ; ---------------------------------------------------------------------------
00011AA6 0000                       		dc.w byte_10964-Map_obj57a
00011AA8 0000                       		dc.w byte_1096A-Map_obj57a
00011AAA 0000                       		dc.w byte_10970-Map_obj57a
00011AAC 01                         byte_10964:	dc.b 1
00011AAD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011AB2 01                         byte_1096A:	dc.b 1
00011AB3 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00011AB8 01                         byte_10970:	dc.b 1
00011AB9 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00011ABE                            		even
00011ABE                            		even
00011ABE                            
00011ABE                            ; ===========================================================================
00011ABE                            ; ---------------------------------------------------------------------------
00011ABE                            ; Object 58 - giant spiked balls (SYZ)
00011ABE                            ; ---------------------------------------------------------------------------
00011ABE                            
00011ABE                            Obj58:					; XREF: Obj_Index
00011ABE 7000                       		moveq	#0,d0
00011AC0 1028 0024                  		move.b	$24(a0),d0
00011AC4 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00011AC8 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00011ACC                            ; ===========================================================================
00011ACC 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00011ACE 0000                       		dc.w Obj58_Move-Obj58_Index
00011AD0                            ; ===========================================================================
00011AD0                            
00011AD0                            Obj58_Main:				; XREF: Obj58_Index
00011AD0 5428 0024                  		addq.b	#2,$24(a0)
00011AD4 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00011ADC 317C 0396 0002             		move.w	#$396,2(a0)
00011AE2 117C 0004 0001             		move.b	#4,1(a0)
00011AE8 117C 0004 0018             		move.b	#4,$18(a0)
00011AEE 117C 0018 0019             		move.b	#$18,$19(a0)
00011AF4 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011AFA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011B00 117C 0086 0020             		move.b	#$86,$20(a0)
00011B06 1228 0028                  		move.b	$28(a0),d1	; get object type
00011B0A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011B0E 4881                       		ext.w	d1
00011B10 E741                       		asl.w	#3,d1		; multiply by 8
00011B12 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00011B16 1028 0022                  		move.b	$22(a0),d0
00011B1A E418                       		ror.b	#2,d0
00011B1C 0200 00C0                  		andi.b	#$C0,d0
00011B20 1140 0026                  		move.b	d0,$26(a0)
00011B24 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011B2A                            
00011B2A                            Obj58_Move:				; XREF: Obj58_Index
00011B2A 7000                       		moveq	#0,d0
00011B2C 1028 0028                  		move.b	$28(a0),d0	; get object type
00011B30 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00011B34 D040                       		add.w	d0,d0
00011B36 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00011B3A 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00011B3E 3028 003A                  		move.w	$3A(a0),d0
00011B42 0240 FF80                  		andi.w	#$FF80,d0
00011B46 3238 F700                  		move.w	($FFFFF700).w,d1
00011B4A 0441 0080                  		subi.w	#$80,d1
00011B4E 0241 FF80                  		andi.w	#$FF80,d1
00011B52 9041                       		sub.w	d1,d0
00011B54 0C40 0280                  		cmpi.w	#$280,d0
00011B58 6200 CC38                  		bhi.w	DeleteObject
00011B5C 6000 CBF8                  		bra.w	DisplaySprite
00011B60                            ; ===========================================================================
00011B60 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011B62 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011B64 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011B66 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011B68                            ; ===========================================================================
00011B68                            
00011B68                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011B68 4E75                       		rts	
00011B6A                            ; ===========================================================================
00011B6A                            
00011B6A                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011B6A 323C 0060                  		move.w	#$60,d1
00011B6E 7000                       		moveq	#0,d0
00011B70 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011B74 0828 0000 0022             		btst	#0,$22(a0)
00011B7A 6700                       		beq.s	loc_10A38
00011B7C 4440                       		neg.w	d0
00011B7E D041                       		add.w	d1,d0
00011B80                            
00011B80                            loc_10A38:
00011B80 3228 003A                  		move.w	$3A(a0),d1
00011B84 9240                       		sub.w	d0,d1
00011B86 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011B8A 4E75                       		rts	
00011B8C                            ; ===========================================================================
00011B8C                            
00011B8C                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011B8C 323C 0060                  		move.w	#$60,d1
00011B90 7000                       		moveq	#0,d0
00011B92 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011B96 0828 0000 0022             		btst	#0,$22(a0)
00011B9C 6700                       		beq.s	loc_10A5C
00011B9E 4440                       		neg.w	d0
00011BA0 0640 0080                  		addi.w	#$80,d0
00011BA4                            
00011BA4                            loc_10A5C:
00011BA4 3228 0038                  		move.w	$38(a0),d1
00011BA8 9240                       		sub.w	d0,d1
00011BAA 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011BAE 4E75                       		rts	
00011BB0                            ; ===========================================================================
00011BB0                            
00011BB0                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00011BB0 3028 003E                  		move.w	$3E(a0),d0
00011BB4 D168 0026                  		add.w	d0,$26(a0)
00011BB8 1028 0026                  		move.b	$26(a0),d0
00011BBC 4EB9 0000 3416             		jsr	(CalcSine).l
00011BC2 3428 0038                  		move.w	$38(a0),d2
00011BC6 3628 003A                  		move.w	$3A(a0),d3
00011BCA 7800                       		moveq	#0,d4
00011BCC 1828 003C                  		move.b	$3C(a0),d4
00011BD0 2A04                       		move.l	d4,d5
00011BD2 C9C0                       		muls.w	d0,d4
00011BD4 E084                       		asr.l	#8,d4
00011BD6 CBC1                       		muls.w	d1,d5
00011BD8 E085                       		asr.l	#8,d5
00011BDA D842                       		add.w	d2,d4
00011BDC DA43                       		add.w	d3,d5
00011BDE 3144 000C                  		move.w	d4,$C(a0)
00011BE2 3145 0008                  		move.w	d5,8(a0)
00011BE6 4E75                       		rts	
00011BE8                            ; ===========================================================================
00011BE8                            ; ---------------------------------------------------------------------------
00011BE8                            ; Sprite mappings - SBZ	spiked ball on a chain
00011BE8                            ; ---------------------------------------------------------------------------
00011BE8                            Map_obj15b:
00011BE8                            	include "_maps\obj15sbz.asm"
00011BE8                            ; ---------------------------------------------------------------------------
00011BE8                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011BE8                            ; ---------------------------------------------------------------------------
00011BE8 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011BEC 0000                       		dc.w byte_10AC6-Map_obj15b
00011BEE 05                         byte_10AA6:	dc.b 5
00011BEF E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011BF4 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011BF9 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00011BFE F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00011C03 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00011C08 01                         byte_10AC0:	dc.b 1
00011C09 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00011C0E 02                         byte_10AC6:	dc.b 2
00011C0F F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011C14 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011C1A 00                         		even
00011C1A 00                         		even
00011C1A                            
00011C1A                            ; ===========================================================================
00011C1A                            ; ---------------------------------------------------------------------------
00011C1A                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011C1A                            ; ---------------------------------------------------------------------------
00011C1A                            
00011C1A                            Obj59:					; XREF: Obj_Index
00011C1A 7000                       		moveq	#0,d0
00011C1C 1028 0024                  		move.b	$24(a0),d0
00011C20 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011C24 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011C28 3028 0032                  		move.w	$32(a0),d0
00011C2C 0240 FF80                  		andi.w	#$FF80,d0
00011C30 3238 F700                  		move.w	($FFFFF700).w,d1
00011C34 0441 0080                  		subi.w	#$80,d1
00011C38 0241 FF80                  		andi.w	#$FF80,d1
00011C3C 9041                       		sub.w	d1,d0
00011C3E 0C40 0280                  		cmpi.w	#$280,d0
00011C42 6200 CB4E                  		bhi.w	DeleteObject
00011C46 6000 CB0E                  		bra.w	DisplaySprite
00011C4A                            ; ===========================================================================
00011C4A 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011C4C 0000                       		dc.w Obj59_Platform-Obj59_Index
00011C4E 0000                       		dc.w Obj59_Action-Obj59_Index
00011C50 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011C52                            
00011C52 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011C54                            
00011C54 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011C56 2001                       		dc.b $20, 1
00011C58 3401                       		dc.b $34, 1
00011C5A 1003                       		dc.b $10, 3
00011C5C 2003                       		dc.b $20, 3
00011C5E 3403                       		dc.b $34, 3
00011C60 1401                       		dc.b $14, 1
00011C62 2401                       		dc.b $24, 1
00011C64 2C01                       		dc.b $2C, 1
00011C66 1403                       		dc.b $14, 3
00011C68 2403                       		dc.b $24, 3
00011C6A 2C03                       		dc.b $2C, 3
00011C6C 2005                       		dc.b $20, 5
00011C6E 2007                       		dc.b $20, 7
00011C70 3009                       		dc.b $30, 9
00011C72                            ; ===========================================================================
00011C72                            
00011C72                            Obj59_Main:				; XREF: Obj59_Index
00011C72 5428 0024                  		addq.b	#2,$24(a0)
00011C76 7000                       		moveq	#0,d0
00011C78 1028 0028                  		move.b	$28(a0),d0
00011C7C 6A00                       		bpl.s	Obj59_Main2
00011C7E 5828 0024                  		addq.b	#4,$24(a0)
00011C82 0240 007F                  		andi.w	#$7F,d0
00011C86 C0FC 0006                  		mulu.w	#6,d0
00011C8A 3140 003C                  		move.w	d0,$3C(a0)
00011C8E 3140 003E                  		move.w	d0,$3E(a0)
00011C92 588F                       		addq.l	#4,sp
00011C94 4E75                       		rts	
00011C96                            ; ===========================================================================
00011C96                            
00011C96                            Obj59_Main2:
00011C96 E648                       		lsr.w	#3,d0
00011C98 0240 001E                  		andi.w	#$1E,d0
00011C9C 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00011CA0 115A 0019                  		move.b	(a2)+,$19(a0)
00011CA4 115A 001A                  		move.b	(a2)+,$1A(a0)
00011CA8 7000                       		moveq	#0,d0
00011CAA 1028 0028                  		move.b	$28(a0),d0
00011CAE D040                       		add.w	d0,d0
00011CB0 0240 001E                  		andi.w	#$1E,d0
00011CB4 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00011CB8 101A                       		move.b	(a2)+,d0
00011CBA E548                       		lsl.w	#2,d0
00011CBC 3140 003C                  		move.w	d0,$3C(a0)
00011CC0 115A 0028                  		move.b	(a2)+,$28(a0)
00011CC4 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00011CCC 317C 4000 0002             		move.w	#$4000,2(a0)
00011CD2 117C 0004 0001             		move.b	#4,1(a0)
00011CD8 117C 0004 0018             		move.b	#4,$18(a0)
00011CDE 3168 0008 0032             		move.w	8(a0),$32(a0)
00011CE4 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011CEA                            
00011CEA                            Obj59_Platform:				; XREF: Obj59_Index
00011CEA 7200                       		moveq	#0,d1
00011CEC 1228 0019                  		move.b	$19(a0),d1
00011CF0 4EB9 0000 836A             		jsr	(PlatformObject).l
00011CF6 6000 0000                  		bra.w	Obj59_Types
00011CFA                            ; ===========================================================================
00011CFA                            
00011CFA                            Obj59_Action:				; XREF: Obj59_Index
00011CFA 7200                       		moveq	#0,d1
00011CFC 1228 0019                  		move.b	$19(a0),d1
00011D00 4EB9 0000 84DE             		jsr	(ExitPlatform).l
00011D06 3F28 0008                  		move.w	8(a0),-(sp)
00011D0A 6100 0000                  		bsr.w	Obj59_Types
00011D0E 341F                       		move.w	(sp)+,d2
00011D10 4A10                       		tst.b	0(a0)
00011D12 6700                       		beq.s	locret_10BD4
00011D14 4EF9 0000 8A48             		jmp	(MvSonicOnPtfm2).l
00011D1A                            ; ===========================================================================
00011D1A                            
00011D1A                            locret_10BD4:
00011D1A 4E75                       		rts	
00011D1C                            ; ===========================================================================
00011D1C                            
00011D1C                            Obj59_Types:
00011D1C 7000                       		moveq	#0,d0
00011D1E 1028 0028                  		move.b	$28(a0),d0
00011D22 0240 000F                  		andi.w	#$F,d0
00011D26 D040                       		add.w	d0,d0
00011D28 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011D2C 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011D30                            ; ===========================================================================
00011D30 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011D34 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011D38 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011D3C 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011D40 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011D44                            ; ===========================================================================
00011D44                            
00011D44                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011D44 4E75                       		rts	
00011D46                            ; ===========================================================================
00011D46                            
00011D46                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011D46 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011D4C 6600                       		bne.s	locret_10C0C
00011D4E 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011D52                            
00011D52                            locret_10C0C:
00011D52 4E75                       		rts	
00011D54                            ; ===========================================================================
00011D54                            
00011D54                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011D54 6100 0000                  		bsr.w	Obj59_Move
00011D58 3028 0034                  		move.w	$34(a0),d0
00011D5C 4440                       		neg.w	d0
00011D5E D068 0030                  		add.w	$30(a0),d0
00011D62 3140 000C                  		move.w	d0,$C(a0)
00011D66 4E75                       		rts	
00011D68                            ; ===========================================================================
00011D68                            
00011D68                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011D68 6100 0000                  		bsr.w	Obj59_Move
00011D6C 3028 0034                  		move.w	$34(a0),d0
00011D70 D068 0030                  		add.w	$30(a0),d0
00011D74 3140 000C                  		move.w	d0,$C(a0)
00011D78 4E75                       		rts	
00011D7A                            ; ===========================================================================
00011D7A                            
00011D7A                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011D7A 6100 0000                  		bsr.w	Obj59_Move
00011D7E 3028 0034                  		move.w	$34(a0),d0
00011D82 E240                       		asr.w	#1,d0
00011D84 4440                       		neg.w	d0
00011D86 D068 0030                  		add.w	$30(a0),d0
00011D8A 3140 000C                  		move.w	d0,$C(a0)
00011D8E 3028 0034                  		move.w	$34(a0),d0
00011D92 D068 0032                  		add.w	$32(a0),d0
00011D96 3140 0008                  		move.w	d0,8(a0)
00011D9A 4E75                       		rts	
00011D9C                            ; ===========================================================================
00011D9C                            
00011D9C                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00011D9C 6100 0000                  		bsr.w	Obj59_Move
00011DA0 3028 0034                  		move.w	$34(a0),d0
00011DA4 E240                       		asr.w	#1,d0
00011DA6 D068 0030                  		add.w	$30(a0),d0
00011DAA 3140 000C                  		move.w	d0,$C(a0)
00011DAE 3028 0034                  		move.w	$34(a0),d0
00011DB2 4440                       		neg.w	d0
00011DB4 D068 0032                  		add.w	$32(a0),d0
00011DB8 3140 0008                  		move.w	d0,8(a0)
00011DBC 4E75                       		rts	
00011DBE                            ; ===========================================================================
00011DBE                            
00011DBE                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00011DBE 6100 0000                  		bsr.w	Obj59_Move
00011DC2 3028 0034                  		move.w	$34(a0),d0
00011DC6 4440                       		neg.w	d0
00011DC8 D068 0030                  		add.w	$30(a0),d0
00011DCC 3140 000C                  		move.w	d0,$C(a0)
00011DD0 4A28 0028                  		tst.b	$28(a0)
00011DD4 6700 0000                  		beq.w	loc_10C94
00011DD8 4E75                       		rts	
00011DDA                            ; ===========================================================================
00011DDA                            
00011DDA                            loc_10C94:
00011DDA 0828 0003 0022             		btst	#3,$22(a0)
00011DE0 6700                       		beq.s	Obj59_Delete
00011DE2 08E9 0001 0022             		bset	#1,$22(a1)
00011DE8 08A9 0003 0022             		bclr	#3,$22(a1)
00011DEE 137C 0002 0024             		move.b	#2,$24(a1)
00011DF4                            
00011DF4                            Obj59_Delete:
00011DF4 6000 C99C                  		bra.w	DeleteObject
00011DF8                            
00011DF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011DF8                            
00011DF8                            
00011DF8                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011DF8 3028 0038                  		move.w	$38(a0),d0
00011DFC 4A28 003A                  		tst.b	$3A(a0)
00011E00 6600                       		bne.s	loc_10CC8
00011E02 0C40 0800                  		cmpi.w	#$800,d0
00011E06 6400                       		bcc.s	loc_10CD0
00011E08 0640 0010                  		addi.w	#$10,d0
00011E0C 6000                       		bra.s	loc_10CD0
00011E0E                            ; ===========================================================================
00011E0E                            
00011E0E                            loc_10CC8:
00011E0E 4A40                       		tst.w	d0
00011E10 6700                       		beq.s	loc_10CD0
00011E12 0440 0010                  		subi.w	#$10,d0
00011E16                            
00011E16                            loc_10CD0:
00011E16 3140 0038                  		move.w	d0,$38(a0)
00011E1A 48C0                       		ext.l	d0
00011E1C E180                       		asl.l	#8,d0
00011E1E D0A8 0034                  		add.l	$34(a0),d0
00011E22 2140 0034                  		move.l	d0,$34(a0)
00011E26 4840                       		swap	d0
00011E28 3428 003C                  		move.w	$3C(a0),d2
00011E2C B042                       		cmp.w	d2,d0
00011E2E 6300                       		bls.s	loc_10CF0
00011E30 117C 0001 003A             		move.b	#1,$3A(a0)
00011E36                            
00011E36                            loc_10CF0:
00011E36 D442                       		add.w	d2,d2
00011E38 B042                       		cmp.w	d2,d0
00011E3A 6600                       		bne.s	locret_10CFA
00011E3C 4228 0028                  		clr.b	$28(a0)
00011E40                            
00011E40                            locret_10CFA:
00011E40 4E75                       		rts	
00011E42                            ; End of function Obj59_Move
00011E42                            
00011E42                            ; ===========================================================================
00011E42                            
00011E42                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011E42 5368 003C                  		subq.w	#1,$3C(a0)
00011E46 6600                       		bne.s	Obj59_ChkDel
00011E48 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011E4E 6100 CD8C                  		bsr.w	SingleObjLoad
00011E52 6600                       		bne.s	Obj59_ChkDel
00011E54 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011E58 3368 0008 0008             		move.w	8(a0),8(a1)
00011E5E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011E64 137C 000E 0028             		move.b	#$E,$28(a1)
00011E6A                            
00011E6A                            Obj59_ChkDel:
00011E6A 588F                       		addq.l	#4,sp
00011E6C 3028 0008                  		move.w	8(a0),d0
00011E70 0240 FF80                  		andi.w	#$FF80,d0
00011E74 3238 F700                  		move.w	($FFFFF700).w,d1
00011E78 0441 0080                  		subi.w	#$80,d1
00011E7C 0241 FF80                  		andi.w	#$FF80,d1
00011E80 9041                       		sub.w	d1,d0
00011E82 0C40 0280                  		cmpi.w	#$280,d0
00011E86 6200 C90A                  		bhi.w	DeleteObject
00011E8A 4E75                       		rts	
00011E8C                            ; ===========================================================================
00011E8C                            ; ---------------------------------------------------------------------------
00011E8C                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011E8C                            ; ---------------------------------------------------------------------------
00011E8C                            Map_obj59:
00011E8C                            	include "_maps\obj59.asm"
00011E8C                            ; ---------------------------------------------------------------------------
00011E8C                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011E8C                            ; ---------------------------------------------------------------------------
00011E8C 0000                       		dc.w byte_10D4A-Map_obj59
00011E8E 03                         byte_10D4A:	dc.b 3
00011E8F F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011E94 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00011E99 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00011E9E                            		even
00011E9E                            		even
00011E9E                            
00011E9E                            ; ===========================================================================
00011E9E                            ; ---------------------------------------------------------------------------
00011E9E                            ; Object 5A - platforms	moving in circles (SLZ)
00011E9E                            ; ---------------------------------------------------------------------------
00011E9E                            
00011E9E                            Obj5A:					; XREF: Obj_Index
00011E9E 7000                       		moveq	#0,d0
00011EA0 1028 0024                  		move.b	$24(a0),d0
00011EA4 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00011EA8 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00011EAC 3028 0032                  		move.w	$32(a0),d0
00011EB0 0240 FF80                  		andi.w	#$FF80,d0
00011EB4 3238 F700                  		move.w	($FFFFF700).w,d1
00011EB8 0441 0080                  		subi.w	#$80,d1
00011EBC 0241 FF80                  		andi.w	#$FF80,d1
00011EC0 9041                       		sub.w	d1,d0
00011EC2 0C40 0280                  		cmpi.w	#$280,d0
00011EC6 6200 C8CA                  		bhi.w	DeleteObject
00011ECA 6000 C88A                  		bra.w	DisplaySprite
00011ECE                            ; ===========================================================================
00011ECE 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00011ED0 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00011ED2 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011ED4                            ; ===========================================================================
00011ED4                            
00011ED4                            Obj5A_Main:				; XREF: Obj5A_Index
00011ED4 5428 0024                  		addq.b	#2,$24(a0)
00011ED8 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00011EE0 317C 4000 0002             		move.w	#$4000,2(a0)
00011EE6 117C 0004 0001             		move.b	#4,1(a0)
00011EEC 117C 0004 0018             		move.b	#4,$18(a0)
00011EF2 117C 0018 0019             		move.b	#$18,$19(a0)
00011EF8 3168 0008 0032             		move.w	8(a0),$32(a0)
00011EFE 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011F04                            
00011F04                            Obj5A_Platform:				; XREF: Obj5A_Index
00011F04 7200                       		moveq	#0,d1
00011F06 1228 0019                  		move.b	$19(a0),d1
00011F0A 4EB9 0000 836A             		jsr	(PlatformObject).l
00011F10 6000 0000                  		bra.w	Obj5A_Types
00011F14                            ; ===========================================================================
00011F14                            
00011F14                            Obj5A_Action:				; XREF: Obj5A_Index
00011F14 7200                       		moveq	#0,d1
00011F16 1228 0019                  		move.b	$19(a0),d1
00011F1A 4EB9 0000 84DE             		jsr	(ExitPlatform).l
00011F20 3F28 0008                  		move.w	8(a0),-(sp)
00011F24 6100 0000                  		bsr.w	Obj5A_Types
00011F28 341F                       		move.w	(sp)+,d2
00011F2A 4EF9 0000 8A48             		jmp	(MvSonicOnPtfm2).l
00011F30                            ; ===========================================================================
00011F30                            
00011F30                            Obj5A_Types:
00011F30 7000                       		moveq	#0,d0
00011F32 1028 0028                  		move.b	$28(a0),d0
00011F36 0240 000C                  		andi.w	#$C,d0
00011F3A E248                       		lsr.w	#1,d0
00011F3C 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011F40 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011F44                            ; ===========================================================================
00011F44 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011F46 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011F48                            ; ===========================================================================
00011F48                            
00011F48                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011F48 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011F4C 0401 0050                  		subi.b	#$50,d1
00011F50 4881                       		ext.w	d1
00011F52 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011F56 0402 0050                  		subi.b	#$50,d2
00011F5A 4882                       		ext.w	d2
00011F5C 0828 0000 0028             		btst	#0,$28(a0)
00011F62 6700                       		beq.s	loc_10E24
00011F64 4441                       		neg.w	d1
00011F66 4442                       		neg.w	d2
00011F68                            
00011F68                            loc_10E24:
00011F68 0828 0001 0028             		btst	#1,$28(a0)
00011F6E 6700                       		beq.s	loc_10E30
00011F70 4441                       		neg.w	d1
00011F72 C342                       		exg	d1,d2
00011F74                            
00011F74                            loc_10E30:
00011F74 D268 0032                  		add.w	$32(a0),d1
00011F78 3141 0008                  		move.w	d1,8(a0)
00011F7C D468 0030                  		add.w	$30(a0),d2
00011F80 3142 000C                  		move.w	d2,$C(a0)
00011F84 4E75                       		rts	
00011F86                            ; ===========================================================================
00011F86                            
00011F86                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011F86 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011F8A 0401 0050                  		subi.b	#$50,d1
00011F8E 4881                       		ext.w	d1
00011F90 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011F94 0402 0050                  		subi.b	#$50,d2
00011F98 4882                       		ext.w	d2
00011F9A 0828 0000 0028             		btst	#0,$28(a0)
00011FA0 6700                       		beq.s	loc_10E62
00011FA2 4441                       		neg.w	d1
00011FA4 4442                       		neg.w	d2
00011FA6                            
00011FA6                            loc_10E62:
00011FA6 0828 0001 0028             		btst	#1,$28(a0)
00011FAC 6700                       		beq.s	loc_10E6E
00011FAE 4441                       		neg.w	d1
00011FB0 C342                       		exg	d1,d2
00011FB2                            
00011FB2                            loc_10E6E:
00011FB2 4441                       		neg.w	d1
00011FB4 D268 0032                  		add.w	$32(a0),d1
00011FB8 3141 0008                  		move.w	d1,8(a0)
00011FBC D468 0030                  		add.w	$30(a0),d2
00011FC0 3142 000C                  		move.w	d2,$C(a0)
00011FC4 4E75                       		rts	
00011FC6                            ; ===========================================================================
00011FC6                            ; ---------------------------------------------------------------------------
00011FC6                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011FC6                            ; ---------------------------------------------------------------------------
00011FC6                            Map_obj5A:
00011FC6                            	include "_maps\obj5A.asm"
00011FC6                            ; ---------------------------------------------------------------------------
00011FC6                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011FC6                            ; ---------------------------------------------------------------------------
00011FC6 0000                       		dc.w byte_10E84-Map_obj5A
00011FC8 02                         byte_10E84:	dc.b 2
00011FC9 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00011FCE F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011FD4 00                         		even
00011FD4 00                         		even
00011FD4                            
00011FD4                            ; ===========================================================================
00011FD4                            ; ---------------------------------------------------------------------------
00011FD4                            ; Object 5B - blocks that form a staircase (SLZ)
00011FD4                            ; ---------------------------------------------------------------------------
00011FD4                            
00011FD4                            Obj5B:					; XREF: Obj_Index
00011FD4 7000                       		moveq	#0,d0
00011FD6 1028 0024                  		move.b	$24(a0),d0
00011FDA 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00011FDE 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00011FE2 3028 0030                  		move.w	$30(a0),d0
00011FE6 0240 FF80                  		andi.w	#$FF80,d0
00011FEA 3238 F700                  		move.w	($FFFFF700).w,d1
00011FEE 0441 0080                  		subi.w	#$80,d1
00011FF2 0241 FF80                  		andi.w	#$FF80,d1
00011FF6 9041                       		sub.w	d1,d0
00011FF8 0C40 0280                  		cmpi.w	#$280,d0
00011FFC 6200 C794                  		bhi.w	DeleteObject
00012000 6000 C754                  		bra.w	DisplaySprite
00012004                            ; ===========================================================================
00012004 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00012006 0000                       		dc.w Obj5B_Move-Obj5B_Index
00012008 0000                       		dc.w Obj5B_Solid-Obj5B_Index
0001200A                            ; ===========================================================================
0001200A                            
0001200A                            Obj5B_Main:				; XREF: Obj5B_Index
0001200A 5428 0024                  		addq.b	#2,$24(a0)
0001200E 7638                       		moveq	#$38,d3
00012010 7801                       		moveq	#1,d4
00012012 0828 0000 0022             		btst	#0,$22(a0)
00012018 6700                       		beq.s	loc_10EDA
0001201A 763B                       		moveq	#$3B,d3
0001201C 78FF                       		moveq	#-1,d4
0001201E                            
0001201E                            loc_10EDA:
0001201E 3428 0008                  		move.w	8(a0),d2
00012022 2248                       		movea.l	a0,a1
00012024 7203                       		moveq	#3,d1
00012026 6000                       		bra.s	Obj5B_MakeBlocks
00012028                            ; ===========================================================================
00012028                            
00012028                            Obj5B_Loop:
00012028 6100 CBC8                  		bsr.w	SingleObjLoad2
0001202C 6600 0000                  		bne.w	Obj5B_Move
00012030 137C 0004 0024             		move.b	#4,$24(a1)
00012036                            
00012036                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00012036 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
0001203A 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00012042 337C 4000 0002             		move.w	#$4000,2(a1)
00012048 137C 0004 0001             		move.b	#4,1(a1)
0001204E 137C 0003 0018             		move.b	#3,$18(a1)
00012054 137C 0010 0019             		move.b	#$10,$19(a1)
0001205A 1368 0028 0028             		move.b	$28(a0),$28(a1)
00012060 3342 0008                  		move.w	d2,8(a1)
00012064 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001206A 3368 0008 0030             		move.w	8(a0),$30(a1)
00012070 3369 000C 0032             		move.w	$C(a1),$32(a1)
00012076 0642 0020                  		addi.w	#$20,d2
0001207A 1343 0037                  		move.b	d3,$37(a1)
0001207E 2348 003C                  		move.l	a0,$3C(a1)
00012082 D604                       		add.b	d4,d3
00012084 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00012088                            
00012088                            Obj5B_Move:				; XREF: Obj5B_Index
00012088 7000                       		moveq	#0,d0
0001208A 1028 0028                  		move.b	$28(a0),d0
0001208E 0240 0007                  		andi.w	#7,d0
00012092 D040                       		add.w	d0,d0
00012094 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00012098 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
0001209C                            
0001209C                            Obj5B_Solid:				; XREF: Obj5B_Index
0001209C 2468 003C                  		movea.l	$3C(a0),a2
000120A0 7000                       		moveq	#0,d0
000120A2 1028 0037                  		move.b	$37(a0),d0
000120A6 1032 0000                  		move.b	(a2,d0.w),d0
000120AA D068 0032                  		add.w	$32(a0),d0
000120AE 3140 000C                  		move.w	d0,$C(a0)
000120B2 7200                       		moveq	#0,d1
000120B4 1228 0019                  		move.b	$19(a0),d1
000120B8 0641 000B                  		addi.w	#$B,d1
000120BC 343C 0010                  		move.w	#$10,d2
000120C0 363C 0011                  		move.w	#$11,d3
000120C4 3828 0008                  		move.w	8(a0),d4
000120C8 6100 EA5C                  		bsr.w	SolidObject
000120CC 4A04                       		tst.b	d4
000120CE 6A00                       		bpl.s	loc_10F92
000120D0 1544 0036                  		move.b	d4,$36(a2)
000120D4                            
000120D4                            loc_10F92:
000120D4 0828 0003 0022             		btst	#3,$22(a0)
000120DA 6700                       		beq.s	locret_10FA0
000120DC 157C 0001 0036             		move.b	#1,$36(a2)
000120E2                            
000120E2                            locret_10FA0:
000120E2 4E75                       		rts	
000120E4                            ; ===========================================================================
000120E4 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000120E6 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000120E8 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000120EA 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000120EC                            ; ===========================================================================
000120EC                            
000120EC                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000120EC 4A68 0034                  		tst.w	$34(a0)
000120F0 6600                       		bne.s	loc_10FC0
000120F2 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000120F8 6600                       		bne.s	locret_10FBE
000120FA 317C 001E 0034             		move.w	#$1E,$34(a0)
00012100                            
00012100                            locret_10FBE:
00012100 4E75                       		rts	
00012102                            ; ===========================================================================
00012102                            
00012102                            loc_10FC0:
00012102 5368 0034                  		subq.w	#1,$34(a0)
00012106 66F8                       		bne.s	locret_10FBE
00012108 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001210C 4E75                       		rts	
0001210E                            ; ===========================================================================
0001210E                            
0001210E                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
0001210E 4A68 0034                  		tst.w	$34(a0)
00012112 6600                       		bne.s	loc_10FE0
00012114 4A28 0036                  		tst.b	$36(a0)
00012118 6A00                       		bpl.s	locret_10FDE
0001211A 317C 003C 0034             		move.w	#$3C,$34(a0)
00012120                            
00012120                            locret_10FDE:
00012120 4E75                       		rts	
00012122                            ; ===========================================================================
00012122                            
00012122                            loc_10FE0:
00012122 5368 0034                  		subq.w	#1,$34(a0)
00012126 6600                       		bne.s	loc_10FEC
00012128 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001212C 4E75                       		rts	
0001212E                            ; ===========================================================================
0001212E                            
0001212E                            loc_10FEC:
0001212E 43E8 0038                  		lea	$38(a0),a1
00012132 3028 0034                  		move.w	$34(a0),d0
00012136 E408                       		lsr.b	#2,d0
00012138 0200 0001                  		andi.b	#1,d0
0001213C 12C0                       		move.b	d0,(a1)+
0001213E 0A00 0001                  		eori.b	#1,d0
00012142 12C0                       		move.b	d0,(a1)+
00012144 0A00 0001                  		eori.b	#1,d0
00012148 12C0                       		move.b	d0,(a1)+
0001214A 0A00 0001                  		eori.b	#1,d0
0001214E 12C0                       		move.b	d0,(a1)+
00012150 4E75                       		rts	
00012152                            ; ===========================================================================
00012152                            
00012152                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00012152 43E8 0038                  		lea	$38(a0),a1
00012156 0C11 0080                  		cmpi.b	#$80,(a1)
0001215A 6700                       		beq.s	locret_11038
0001215C 5211                       		addq.b	#1,(a1)
0001215E 7200                       		moveq	#0,d1
00012160 1219                       		move.b	(a1)+,d1
00012162 4841                       		swap	d1
00012164 E289                       		lsr.l	#1,d1
00012166 2401                       		move.l	d1,d2
00012168 E289                       		lsr.l	#1,d1
0001216A 2601                       		move.l	d1,d3
0001216C D682                       		add.l	d2,d3
0001216E 4841                       		swap	d1
00012170 4842                       		swap	d2
00012172 4843                       		swap	d3
00012174 12C3                       		move.b	d3,(a1)+
00012176 12C2                       		move.b	d2,(a1)+
00012178 12C1                       		move.b	d1,(a1)+
0001217A                            
0001217A                            locret_11038:
0001217A 4E75                       		rts	
0001217C 4E75                       		rts	
0001217E                            ; ===========================================================================
0001217E                            ; ---------------------------------------------------------------------------
0001217E                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001217E                            ; ---------------------------------------------------------------------------
0001217E                            Map_obj5B:
0001217E                            	include "_maps\obj5B.asm"
0001217E                            ; ---------------------------------------------------------------------------
0001217E                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001217E                            ; ---------------------------------------------------------------------------
0001217E 0000                       		dc.w byte_1103E-Map_obj5B
00012180 01                         byte_1103E:	dc.b 1
00012181 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012186                            		even
00012186                            		even
00012186                            
00012186                            ; ===========================================================================
00012186                            ; ---------------------------------------------------------------------------
00012186                            ; Object 5C - metal girders in foreground (SLZ)
00012186                            ; ---------------------------------------------------------------------------
00012186                            
00012186                            Obj5C:					; XREF: Obj_Index
00012186 7000                       		moveq	#0,d0
00012188 1028 0024                  		move.b	$24(a0),d0
0001218C 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00012190 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00012194                            ; ===========================================================================
00012194 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00012196 0000                       		dc.w Obj5C_Display-Obj5C_Index
00012198                            ; ===========================================================================
00012198                            
00012198                            Obj5C_Main:				; XREF: Obj5C_Index
00012198 5428 0024                  		addq.b	#2,$24(a0)
0001219C 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000121A4 317C 83CC 0002             		move.w	#$83CC,2(a0)
000121AA 117C 0010 0019             		move.b	#$10,$19(a0)
000121B0                            
000121B0                            Obj5C_Display:				; XREF: Obj5C_Index
000121B0 2238 F700                  		move.l	($FFFFF700).w,d1
000121B4 D281                       		add.l	d1,d1
000121B6 4841                       		swap	d1
000121B8 4441                       		neg.w	d1
000121BA 3141 0008                  		move.w	d1,8(a0)
000121BE 2238 F704                  		move.l	($FFFFF704).w,d1
000121C2 D281                       		add.l	d1,d1
000121C4 4841                       		swap	d1
000121C6 0241 003F                  		andi.w	#$3F,d1
000121CA 4441                       		neg.w	d1
000121CC 0641 0100                  		addi.w	#$100,d1
000121D0 3141 000A                  		move.w	d1,$A(a0)
000121D4 6000 C580                  		bra.w	DisplaySprite
000121D8                            ; ===========================================================================
000121D8                            ; ---------------------------------------------------------------------------
000121D8                            ; Sprite mappings - metal girders in foreground	(SLZ)
000121D8                            ; ---------------------------------------------------------------------------
000121D8                            Map_obj5C:
000121D8                            	include "_maps\obj5C.asm"
000121D8                            ; ---------------------------------------------------------------------------
000121D8                            ; Sprite mappings - metal girders in foreground	(SLZ)
000121D8                            ; ---------------------------------------------------------------------------
000121D8 0000                       		dc.w byte_11098-Map_obj5C
000121DA 09                         byte_11098:	dc.b 9
000121DB 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000121E0 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000121E5 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000121EA E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000121EF 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000121F4 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000121F9 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000121FE 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00012203 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00012208                            		even
00012208                            		even
00012208                            
00012208                            ; ===========================================================================
00012208                            ; ---------------------------------------------------------------------------
00012208                            ; Object 1B - water surface (LZ)
00012208                            ; ---------------------------------------------------------------------------
00012208                            
00012208                            Obj1B:					; XREF: Obj_Index
00012208 7000                       		moveq	#0,d0
0001220A 1028 0024                  		move.b	$24(a0),d0
0001220E 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00012212 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00012216                            ; ===========================================================================
00012216 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00012218 0000                       		dc.w Obj1B_Action-Obj1B_Index
0001221A                            ; ===========================================================================
0001221A                            
0001221A                            Obj1B_Main:				; XREF: Obj1B_Index
0001221A 5428 0024                  		addq.b	#2,$24(a0)
0001221E 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00012226 317C C300 0002             		move.w	#$C300,2(a0)
0001222C 117C 0004 0001             		move.b	#4,1(a0)
00012232 117C 0080 0019             		move.b	#$80,$19(a0)
00012238 3168 0008 0030             		move.w	8(a0),$30(a0)
0001223E                            
0001223E                            Obj1B_Action:				; XREF: Obj1B_Index
0001223E 3238 F700                  		move.w	($FFFFF700).w,d1
00012242 0241 FFE0                  		andi.w	#$FFE0,d1
00012246 D268 0030                  		add.w	$30(a0),d1
0001224A 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00012250 6700                       		beq.s	loc_11114
00012252 0641 0020                  		addi.w	#$20,d1
00012256                            
00012256                            loc_11114:
00012256 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
0001225A 3238 F646                  		move.w	($FFFFF646).w,d1
0001225E 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00012262 4A28 0032                  		tst.b	$32(a0)
00012266 6600                       		bne.s	Obj1B_Animate
00012268 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0001226E 6700                       		beq.s	loc_1114A	; if not, branch
00012270 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00012274 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
0001227A 6000                       		bra.s	Obj1B_Display
0001227C                            ; ===========================================================================
0001227C                            
0001227C                            Obj1B_Animate:				; XREF: loc_11114
0001227C 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00012280 6600                       		bne.s	Obj1B_Display	; if yes, branch
00012282 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00012288 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
0001228C                            
0001228C                            loc_1114A:				; XREF: loc_11114
0001228C 5328 001E                  		subq.b	#1,$1E(a0)
00012290 6A00                       		bpl.s	Obj1B_Display
00012292 117C 0007 001E             		move.b	#7,$1E(a0)
00012298 5228 001A                  		addq.b	#1,$1A(a0)
0001229C 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000122A2 6500                       		bcs.s	Obj1B_Display
000122A4 117C 0000 001A             		move.b	#0,$1A(a0)
000122AA                            
000122AA                            Obj1B_Display:
000122AA 6000 C4AA                  		bra.w	DisplaySprite
000122AE                            ; ===========================================================================
000122AE                            ; ---------------------------------------------------------------------------
000122AE                            ; Sprite mappings - water surface (LZ)
000122AE                            ; ---------------------------------------------------------------------------
000122AE                            Map_obj1B:
000122AE                            	include "_maps\obj1B.asm"
000122AE                            ; ---------------------------------------------------------------------------
000122AE                            ; Sprite mappings - water surface (LZ)
000122AE                            ; ---------------------------------------------------------------------------
000122AE 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000122B2 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000122B6 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000122BA 03                         byte_11178:	dc.b 3
000122BB FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000122C0 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000122C5 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000122CA 03                         byte_11188:	dc.b 3
000122CB FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000122D0 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000122D5 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000122DA 03                         byte_11198:	dc.b 3
000122DB FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000122E0 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000122E5 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000122EA 06                         byte_111A8:	dc.b 6
000122EB FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000122F0 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
000122F5 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000122FA FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
000122FF FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00012304 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00012309 06                         byte_111C7:	dc.b 6
0001230A FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001230F FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00012314 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012319 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
0001231E FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00012323 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00012328 06                         byte_111E6:	dc.b 6
00012329 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001232E FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00012333 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012338 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
0001233D FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00012342 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00012348 00                         		even
00012348 00                         		even
00012348                            
00012348                            ; ===========================================================================
00012348                            ; ---------------------------------------------------------------------------
00012348                            ; Object 0B - pole that	breaks (LZ)
00012348                            ; ---------------------------------------------------------------------------
00012348                            
00012348                            Obj0B:					; XREF: Obj_Index
00012348 7000                       		moveq	#0,d0
0001234A 1028 0024                  		move.b	$24(a0),d0
0001234E 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00012352 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00012356                            ; ===========================================================================
00012356 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00012358 0000                       		dc.w Obj0B_Action-Obj0B_Index
0001235A 0000                       		dc.w Obj0B_Display-Obj0B_Index
0001235C                            ; ===========================================================================
0001235C                            
0001235C                            Obj0B_Main:				; XREF: Obj0B_Index
0001235C 5428 0024                  		addq.b	#2,$24(a0)
00012360 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00012368 317C 43DE 0002             		move.w	#$43DE,2(a0)
0001236E 117C 0004 0001             		move.b	#4,1(a0)
00012374 117C 0008 0019             		move.b	#8,$19(a0)
0001237A 117C 0004 0018             		move.b	#4,$18(a0)
00012380 117C 00E1 0020             		move.b	#$E1,$20(a0)
00012386 7000                       		moveq	#0,d0
00012388 1028 0028                  		move.b	$28(a0),d0	; get object type
0001238C C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00012390 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00012394                            
00012394                            Obj0B_Action:				; XREF: Obj0B_Index
00012394 4A28 0032                  		tst.b	$32(a0)
00012398 6700                       		beq.s	Obj0B_Grab
0001239A 4A68 0030                  		tst.w	$30(a0)
0001239E 6700                       		beq.s	Obj0B_MoveUp
000123A0 5368 0030                  		subq.w	#1,$30(a0)
000123A4 6600                       		bne.s	Obj0B_MoveUp
000123A6 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
000123AC 6000                       		bra.s	Obj0B_Release
000123AE                            ; ===========================================================================
000123AE                            
000123AE                            Obj0B_MoveUp:				; XREF: Obj0B_Action
000123AE 43F8 D000                  		lea	($FFFFD000).w,a1
000123B2 3028 000C                  		move.w	$C(a0),d0
000123B6 0440 0018                  		subi.w	#$18,d0
000123BA 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
000123C0 6700                       		beq.s	Obj0B_MoveDown
000123C2 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000123C6 B069 000C                  		cmp.w	$C(a1),d0
000123CA 6500                       		bcs.s	Obj0B_MoveDown
000123CC 3340 000C                  		move.w	d0,$C(a1)
000123D0                            
000123D0                            Obj0B_MoveDown:
000123D0 0640 0024                  		addi.w	#$24,d0
000123D4 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
000123DA 6700                       		beq.s	Obj0B_LetGo
000123DC 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000123E0 B069 000C                  		cmp.w	$C(a1),d0
000123E4 6400                       		bcc.s	Obj0B_LetGo
000123E6 3340 000C                  		move.w	d0,$C(a1)
000123EA                            
000123EA                            Obj0B_LetGo:
000123EA 1038 F603                  		move.b	($FFFFF603).w,d0
000123EE 0240 0070                  		andi.w	#$70,d0
000123F2 6700                       		beq.s	Obj0B_Display
000123F4                            
000123F4                            Obj0B_Release:				; XREF: Obj0B_Action
000123F4 4228 0020                  		clr.b	$20(a0)
000123F8 5428 0024                  		addq.b	#2,$24(a0)
000123FC 4238 F7C8                  		clr.b	($FFFFF7C8).w
00012400 4238 F7C9                  		clr.b	($FFFFF7C9).w
00012404 4228 0032                  		clr.b	$32(a0)
00012408 6000                       		bra.s	Obj0B_Display
0001240A                            ; ===========================================================================
0001240A                            
0001240A                            Obj0B_Grab:				; XREF: Obj0B_Action
0001240A 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
0001240E 6700                       		beq.s	Obj0B_Display	; if not, branch
00012410 43F8 D000                  		lea	($FFFFD000).w,a1
00012414 3028 0008                  		move.w	8(a0),d0
00012418 0640 0014                  		addi.w	#$14,d0
0001241C B069 0008                  		cmp.w	8(a1),d0
00012420 6400                       		bcc.s	Obj0B_Display
00012422 4228 0021                  		clr.b	$21(a0)
00012426 0C29 0004 0024             		cmpi.b	#4,$24(a1)
0001242C 6400                       		bcc.s	Obj0B_Display
0001242E 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00012432 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00012436 3028 0008                  		move.w	8(a0),d0
0001243A 0640 0014                  		addi.w	#$14,d0
0001243E 3340 0008                  		move.w	d0,8(a1)
00012442 08A9 0000 0022             		bclr	#0,$22(a1)
00012448 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
0001244E 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00012454 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
0001245A 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00012460                            
00012460                            Obj0B_Display:				; XREF: Obj0B_Index
00012460 6000 E39C                  		bra.w	MarkObjGone
00012464                            ; ===========================================================================
00012464                            ; ---------------------------------------------------------------------------
00012464                            ; Sprite mappings - pole that breaks (LZ)
00012464                            ; ---------------------------------------------------------------------------
00012464                            Map_obj0B:
00012464                            	include "_maps\obj0B.asm"
00012464                            ; ---------------------------------------------------------------------------
00012464                            ; Sprite mappings - pole that breaks (LZ)
00012464                            ; ---------------------------------------------------------------------------
00012464 0000                       		dc.w byte_11326-Map_obj0B
00012466 0000                       		dc.w byte_11331-Map_obj0B
00012468 02                         byte_11326:	dc.b 2			; normal pole
00012469 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
0001246E 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00012473 04                         byte_11331:	dc.b 4			; broken pole
00012474 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00012479 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
0001247E 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00012483 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00012488                            		even
00012488                            		even
00012488                            
00012488                            ; ===========================================================================
00012488                            ; ---------------------------------------------------------------------------
00012488                            ; Object 0C - flapping door (LZ)
00012488                            ; ---------------------------------------------------------------------------
00012488                            
00012488                            Obj0C:					; XREF: Obj_Index
00012488 7000                       		moveq	#0,d0
0001248A 1028 0024                  		move.b	$24(a0),d0
0001248E 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00012492 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00012496                            ; ===========================================================================
00012496 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00012498 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
0001249A                            ; ===========================================================================
0001249A                            
0001249A                            Obj0C_Main:				; XREF: Obj0C_Index
0001249A 5428 0024                  		addq.b	#2,$24(a0)
0001249E 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
000124A6 317C 4328 0002             		move.w	#$4328,2(a0)
000124AC 0028 0004 0001             		ori.b	#4,1(a0)
000124B2 117C 0028 0019             		move.b	#$28,$19(a0)
000124B8 7000                       		moveq	#0,d0
000124BA 1028 0028                  		move.b	$28(a0),d0	; get object type
000124BE C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000124C2 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
000124C6                            
000124C6                            Obj0C_OpenClose:			; XREF: Obj0C_Index
000124C6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000124CA 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
000124CC 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
000124D2 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
000124D8 4A28 0001                  		tst.b	1(a0)
000124DC 6A00                       		bpl.s	Obj0C_Solid
000124DE 303C 00BB                  		move.w	#$BB,d0
000124E2 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play door sound
000124E8                            
000124E8                            Obj0C_Solid:
000124E8 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
000124EE 6100 92B4                  		bsr.w	AnimateSprite
000124F2 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
000124F6 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
000124FA 6600                       		bne.s	Obj0C_Display	; if yes, branch
000124FC 3038 D008                  		move.w	($FFFFD008).w,d0
00012500 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00012504 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00012506 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
0001250C 323C 0013                  		move.w	#$13,d1
00012510 343C 0020                  		move.w	#$20,d2
00012514 3602                       		move.w	d2,d3
00012516 5243                       		addq.w	#1,d3
00012518 3828 0008                  		move.w	8(a0),d4
0001251C 6100 E608                  		bsr.w	SolidObject	; make the door	solid
00012520                            
00012520                            Obj0C_Display:
00012520 6000 E2DC                  		bra.w	MarkObjGone
00012524                            ; ===========================================================================
00012524                            Ani_obj0C:
00012524                            	include "_anim\obj0C.asm"
00012524                            ; ---------------------------------------------------------------------------
00012524                            ; Animation script - flapping door (LZ)
00012524                            ; ---------------------------------------------------------------------------
00012524 0000                       		dc.w byte_113E6-Ani_obj0C
00012526 0000                       		dc.w byte_113EC-Ani_obj0C
00012528 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
0001252E 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00012534                            		even
00012534                            		even
00012534                            
00012534                            ; ---------------------------------------------------------------------------
00012534                            ; Sprite mappings - flapping door (LZ)
00012534                            ; ---------------------------------------------------------------------------
00012534                            Map_obj0C:
00012534                            	include "_maps\obj0C.asm"
00012534                            ; ---------------------------------------------------------------------------
00012534                            ; Sprite mappings - flapping door (LZ)
00012534                            ; ---------------------------------------------------------------------------
00012534 0000                       		dc.w byte_113F8-Map_obj0C
00012536 0000                       		dc.w byte_11403-Map_obj0C
00012538 0000                       		dc.w byte_1140E-Map_obj0C
0001253A 02                         byte_113F8:	dc.b 2
0001253B E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00012540 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012545 02                         byte_11403:	dc.b 2
00012546 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
0001254B 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00012550 02                         byte_1140E:	dc.b 2
00012551 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00012556 180D 1018 00               		dc.b $18, $D, $10, $18,	0
0001255C 00                         		even
0001255C 00                         		even
0001255C                            
0001255C                            ; ===========================================================================
0001255C                            ; ---------------------------------------------------------------------------
0001255C                            ; Object 71 - invisible	solid blocks
0001255C                            ; ---------------------------------------------------------------------------
0001255C                            
0001255C                            Obj71:					; XREF: Obj_Index
0001255C 7000                       		moveq	#0,d0
0001255E 1028 0024                  		move.b	$24(a0),d0
00012562 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00012566 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
0001256A                            ; ===========================================================================
0001256A 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
0001256C 0000                       		dc.w Obj71_Solid-Obj71_Index
0001256E                            ; ===========================================================================
0001256E                            
0001256E                            Obj71_Main:				; XREF: Obj71_Index
0001256E 5428 0024                  		addq.b	#2,$24(a0)
00012572 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
0001257A 317C 8680 0002             		move.w	#$8680,2(a0)
00012580 0028 0004 0001             		ori.b	#4,1(a0)
00012586 1028 0028                  		move.b	$28(a0),d0	; get object type
0001258A 1200                       		move.b	d0,d1
0001258C 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00012590 0640 0010                  		addi.w	#$10,d0
00012594 E248                       		lsr.w	#1,d0
00012596 1140 0019                  		move.b	d0,$19(a0)	; set object width
0001259A 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
0001259E 5241                       		addq.w	#1,d1
000125A0 E749                       		lsl.w	#3,d1
000125A2 1141 0016                  		move.b	d1,$16(a0)	; set object height
000125A6                            
000125A6                            Obj71_Solid:				; XREF: Obj71_Index
000125A6 6100 C428                  		bsr.w	ChkObjOnScreen
000125AA 6600                       		bne.s	Obj71_ChkDel
000125AC 7200                       		moveq	#0,d1
000125AE 1228 0019                  		move.b	$19(a0),d1
000125B2 0641 000B                  		addi.w	#$B,d1
000125B6 7400                       		moveq	#0,d2
000125B8 1428 0016                  		move.b	$16(a0),d2
000125BC 3602                       		move.w	d2,d3
000125BE 5243                       		addq.w	#1,d3
000125C0 3828 0008                  		move.w	8(a0),d4
000125C4 6100 E5A8                  		bsr.w	SolidObject71
000125C8                            
000125C8                            Obj71_ChkDel:
000125C8 3028 0008                  		move.w	8(a0),d0
000125CC 0240 FF80                  		andi.w	#$FF80,d0
000125D0 3238 F700                  		move.w	($FFFFF700).w,d1
000125D4 0441 0080                  		subi.w	#$80,d1
000125D8 0241 FF80                  		andi.w	#$FF80,d1
000125DC 9041                       		sub.w	d1,d0
000125DE 0C40 0280                  		cmpi.w	#$280,d0
000125E2 6200                       		bhi.s	Obj71_Delete
000125E4 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
000125E8 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
000125EA 4EFA C16A                  		jmp	DisplaySprite	; if yes, display the object
000125EE                            ; ===========================================================================
000125EE                            
000125EE                            Obj71_NoDisplay:
000125EE 4E75                       		rts	
000125F0                            ; ===========================================================================
000125F0                            
000125F0                            Obj71_Delete:
000125F0 4EFA C1A0                  		jmp	DeleteObject
000125F4                            ; ===========================================================================
000125F4                            ; ---------------------------------------------------------------------------
000125F4                            ; Sprite mappings - invisible solid blocks
000125F4                            ; ---------------------------------------------------------------------------
000125F4                            Map_obj71:
000125F4                            	include "_maps\obj71.asm"
000125F4                            ; ---------------------------------------------------------------------------
000125F4                            ; Sprite mappings - invisible solid blocks
000125F4                            ; ---------------------------------------------------------------------------
000125F4 0000                       		dc.w byte_114BC-Map_obj71
000125F6 0000                       		dc.w byte_114D1-Map_obj71
000125F8 0000                       		dc.w byte_114E6-Map_obj71
000125FA 04                         byte_114BC:	dc.b 4
000125FB F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00012600 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00012605 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
0001260A 0005 0018 00               		dc.b 0,	5, 0, $18, 0
0001260F 04                         byte_114D1:	dc.b 4
00012610 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00012615 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
0001261A 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
0001261F 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00012624 04                         byte_114E6:	dc.b 4
00012625 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
0001262A E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
0001262F 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00012634 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
0001263A 00                         		even
0001263A 00                         		even
0001263A                            
0001263A                            ; ===========================================================================
0001263A                            ; ---------------------------------------------------------------------------
0001263A                            ; Object 5D - fans (SLZ)
0001263A                            ; ---------------------------------------------------------------------------
0001263A                            
0001263A                            Obj5D:					; XREF: Obj_Index
0001263A 7000                       		moveq	#0,d0
0001263C 1028 0024                  		move.b	$24(a0),d0
00012640 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00012644 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00012648                            ; ===========================================================================
00012648 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
0001264A 0000                       		dc.w Obj5D_Delay-Obj5D_Index
0001264C                            ; ===========================================================================
0001264C                            
0001264C                            Obj5D_Main:				; XREF: Obj5D_Index
0001264C 5428 0024                  		addq.b	#2,$24(a0)
00012650 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00012658 317C 43A0 0002             		move.w	#$43A0,2(a0)
0001265E 0028 0004 0001             		ori.b	#4,1(a0)
00012664 117C 0010 0019             		move.b	#$10,$19(a0)
0001266A 117C 0004 0018             		move.b	#4,$18(a0)
00012670                            
00012670                            Obj5D_Delay:				; XREF: Obj5D_Index
00012670 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00012676 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00012678 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001267C 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
0001267E 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00012684 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
0001268A 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
0001268C 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00012692                            
00012692                            Obj5D_Blow:
00012692 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00012696 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
0001269A 43F8 D000                  		lea	($FFFFD000).w,a1
0001269E 3029 0008                  		move.w	8(a1),d0
000126A2 9068 0008                  		sub.w	8(a0),d0
000126A6 0828 0000 0022             		btst	#0,$22(a0)
000126AC 6600                       		bne.s	Obj5D_ChkSonic
000126AE 4440                       		neg.w	d0
000126B0                            
000126B0                            Obj5D_ChkSonic:
000126B0 0640 0050                  		addi.w	#$50,d0
000126B4 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
000126B8 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
000126BA 3229 000C                  		move.w	$C(a1),d1
000126BE 0641 0060                  		addi.w	#$60,d1
000126C2 9268 000C                  		sub.w	$C(a0),d1
000126C6 6500                       		bcs.s	Obj5D_Animate
000126C8 0C41 0070                  		cmpi.w	#$70,d1
000126CC 6400                       		bcc.s	Obj5D_Animate
000126CE 0440 0050                  		subi.w	#$50,d0
000126D2 6400                       		bcc.s	loc_1159A
000126D4 4640                       		not.w	d0
000126D6 D040                       		add.w	d0,d0
000126D8                            
000126D8                            loc_1159A:
000126D8 0640 0060                  		addi.w	#$60,d0
000126DC 0828 0000 0022             		btst	#0,$22(a0)
000126E2 6600                       		bne.s	loc_115A8
000126E4 4440                       		neg.w	d0
000126E6                            
000126E6                            loc_115A8:
000126E6 4400                       		neg.b	d0
000126E8 E840                       		asr.w	#4,d0
000126EA 0828 0000 0028             		btst	#0,$28(a0)
000126F0 6700                       		beq.s	Obj5D_MoveSonic
000126F2 4440                       		neg.w	d0
000126F4                            
000126F4                            Obj5D_MoveSonic:
000126F4 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
000126F8                            
000126F8                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
000126F8 5328 001E                  		subq.b	#1,$1E(a0)
000126FC 6A00                       		bpl.s	Obj5D_ChkDel
000126FE 117C 0000 001E             		move.b	#0,$1E(a0)
00012704 5228 001B                  		addq.b	#1,$1B(a0)
00012708 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
0001270E 6500                       		bcs.s	loc_115D8
00012710 117C 0000 001B             		move.b	#0,$1B(a0)
00012716                            
00012716                            loc_115D8:
00012716 7000                       		moveq	#0,d0
00012718 0828 0000 0028             		btst	#0,$28(a0)
0001271E 6700                       		beq.s	loc_115E4
00012720 7002                       		moveq	#2,d0
00012722                            
00012722                            loc_115E4:
00012722 D028 001B                  		add.b	$1B(a0),d0
00012726 1140 001A                  		move.b	d0,$1A(a0)
0001272A                            
0001272A                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
0001272A 6100 C02A                  		bsr.w	DisplaySprite
0001272E 3028 0008                  		move.w	8(a0),d0
00012732 0240 FF80                  		andi.w	#$FF80,d0
00012736 3238 F700                  		move.w	($FFFFF700).w,d1
0001273A 0441 0080                  		subi.w	#$80,d1
0001273E 0241 FF80                  		andi.w	#$FF80,d1
00012742 9041                       		sub.w	d1,d0
00012744 0C40 0280                  		cmpi.w	#$280,d0
00012748 6200 C048                  		bhi.w	DeleteObject
0001274C 4E75                       		rts	
0001274E                            ; ===========================================================================
0001274E                            ; ---------------------------------------------------------------------------
0001274E                            ; Sprite mappings - fans (SLZ)
0001274E                            ; ---------------------------------------------------------------------------
0001274E                            Map_obj5D:
0001274E                            	include "_maps\obj5D.asm"
0001274E                            ; ---------------------------------------------------------------------------
0001274E                            ; Sprite mappings - fans (SLZ)
0001274E                            ; ---------------------------------------------------------------------------
0001274E 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00012752 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00012756 0000                       		dc.w byte_1161A-Map_obj5D
00012758 02                         byte_1161A:	dc.b 2
00012759 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0001275E 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00012763 02                         byte_11625:	dc.b 2
00012764 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00012769 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001276E 02                         byte_11630:	dc.b 2
0001276F F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012774 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
0001277A 00                         		even
0001277A 00                         		even
0001277A                            
0001277A                            ; ===========================================================================
0001277A                            ; ---------------------------------------------------------------------------
0001277A                            ; Object 5E - seesaws (SLZ)
0001277A                            ; ---------------------------------------------------------------------------
0001277A                            
0001277A                            Obj5E:					; XREF: Obj_Index
0001277A 7000                       		moveq	#0,d0
0001277C 1028 0024                  		move.b	$24(a0),d0
00012780 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00012784 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00012788 3028 0030                  		move.w	$30(a0),d0
0001278C 0240 FF80                  		andi.w	#$FF80,d0
00012790 3238 F700                  		move.w	($FFFFF700).w,d1
00012794 0441 0080                  		subi.w	#$80,d1
00012798 0241 FF80                  		andi.w	#$FF80,d1
0001279C 9041                       		sub.w	d1,d0
0001279E 6B00 BFF2                  		bmi.w	DeleteObject
000127A2 0C40 0280                  		cmpi.w	#$280,d0
000127A6 6200 BFEA                  		bhi.w	DeleteObject
000127AA 6000 BFAA                  		bra.w	DisplaySprite
000127AE                            ; ===========================================================================
000127AE 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
000127B0 0000                       		dc.w Obj5E_Slope-Obj5E_Index
000127B2 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
000127B4 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
000127B6 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
000127B8 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
000127BA                            ; ===========================================================================
000127BA                            
000127BA                            Obj5E_Main:				; XREF: Obj5E_Index
000127BA 5428 0024                  		addq.b	#2,$24(a0)
000127BE 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
000127C6 317C 0374 0002             		move.w	#$374,2(a0)
000127CC 0028 0004 0001             		ori.b	#4,1(a0)
000127D2 117C 0004 0018             		move.b	#4,$18(a0)
000127D8 117C 0030 0019             		move.b	#$30,$19(a0)
000127DE 3168 0008 0030             		move.w	8(a0),$30(a0)
000127E4 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
000127E8 6600                       		bne.s	loc_116D2	; if not, branch
000127EA 6100 C406                  		bsr.w	SingleObjLoad2
000127EE 6600                       		bne.s	loc_116D2
000127F0 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
000127F4 5C29 0024                  		addq.b	#6,$24(a1)
000127F8 3368 0008 0008             		move.w	8(a0),8(a1)
000127FE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012804 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001280A 2348 003C                  		move.l	a0,$3C(a1)
0001280E                            
0001280E                            loc_116D2:
0001280E 0828 0000 0022             		btst	#0,$22(a0)
00012814 6700                       		beq.s	loc_116E0
00012816 117C 0002 001A             		move.b	#2,$1A(a0)
0001281C                            
0001281C                            loc_116E0:
0001281C 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00012822                            
00012822                            Obj5E_Slope:				; XREF: Obj5E_Index
00012822 1228 003A                  		move.b	$3A(a0),d1
00012826 6100 0000                  		bsr.w	loc_11766
0001282A 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00012830 0828 0000 001A             		btst	#0,$1A(a0)
00012836 6700                       		beq.s	loc_11702
00012838 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001283E                            
0001283E                            loc_11702:
0001283E 43F8 D000                  		lea	($FFFFD000).w,a1
00012842 3169 0012 0038             		move.w	$12(a1),$38(a0)
00012848 323C 0030                  		move.w	#$30,d1
0001284C 4EB9 0000 843E             		jsr	(SlopeObject).l
00012852 4E75                       		rts	
00012854                            ; ===========================================================================
00012854                            
00012854                            Obj5E_Slope2:				; XREF: Obj5E_Index
00012854 6100 0000                  		bsr.w	loc_1174A
00012858 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001285E 0828 0000 001A             		btst	#0,$1A(a0)
00012864 6700                       		beq.s	loc_11730
00012866 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001286C                            
0001286C                            loc_11730:
0001286C 323C 0030                  		move.w	#$30,d1
00012870 4EB9 0000 84DE             		jsr	(ExitPlatform).l
00012876 323C 0030                  		move.w	#$30,d1
0001287A 3428 0008                  		move.w	8(a0),d2
0001287E 4EB9 0000 94CE             		jsr	SlopeObject2
00012884 4E75                       		rts	
00012886                            ; ===========================================================================
00012886                            
00012886                            loc_1174A:				; XREF: Obj5E_Slope2
00012886 7202                       		moveq	#2,d1
00012888 43F8 D000                  		lea	($FFFFD000).w,a1
0001288C 3028 0008                  		move.w	8(a0),d0
00012890 9069 0008                  		sub.w	8(a1),d0
00012894 6400                       		bcc.s	loc_1175E
00012896 4440                       		neg.w	d0
00012898 7200                       		moveq	#0,d1
0001289A                            
0001289A                            loc_1175E:
0001289A 0C40 0008                  		cmpi.w	#8,d0
0001289E 6400                       		bcc.s	loc_11766
000128A0 7201                       		moveq	#1,d1
000128A2                            
000128A2                            loc_11766:
000128A2 1028 001A                  		move.b	$1A(a0),d0
000128A6 B001                       		cmp.b	d1,d0
000128A8 6700                       		beq.s	locret_11790
000128AA 6400                       		bcc.s	loc_11772
000128AC 5400                       		addq.b	#2,d0
000128AE                            
000128AE                            loc_11772:
000128AE 5300                       		subq.b	#1,d0
000128B0 1140 001A                  		move.b	d0,$1A(a0)
000128B4 1141 003A                  		move.b	d1,$3A(a0)
000128B8 08A8 0000 0001             		bclr	#0,1(a0)
000128BE 0828 0001 001A             		btst	#1,$1A(a0)
000128C4 6700                       		beq.s	locret_11790
000128C6 08E8 0000 0001             		bset	#0,1(a0)
000128CC                            
000128CC                            locret_11790:
000128CC 4E75                       		rts	
000128CE                            ; ===========================================================================
000128CE                            
000128CE                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000128CE 5428 0024                  		addq.b	#2,$24(a0)
000128D2 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000128DA 317C 04F0 0002             		move.w	#$4F0,2(a0)
000128E0 0028 0004 0001             		ori.b	#4,1(a0)
000128E6 117C 0004 0018             		move.b	#4,$18(a0)
000128EC 117C 008B 0020             		move.b	#$8B,$20(a0)
000128F2 117C 000C 0019             		move.b	#$C,$19(a0)
000128F8 3168 0008 0030             		move.w	8(a0),$30(a0)
000128FE 0668 0028 0008             		addi.w	#$28,8(a0)
00012904 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001290A 117C 0001 001A             		move.b	#1,$1A(a0)
00012910 0828 0000 0022             		btst	#0,$22(a0)
00012916 6700                       		beq.s	Obj5E_MoveSpike
00012918 0468 0050 0008             		subi.w	#$50,8(a0)
0001291E 117C 0002 003A             		move.b	#2,$3A(a0)
00012924                            
00012924                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00012924 2268 003C                  		movea.l	$3C(a0),a1
00012928 7000                       		moveq	#0,d0
0001292A 1028 003A                  		move.b	$3A(a0),d0
0001292E 9029 003A                  		sub.b	$3A(a1),d0
00012932 6700                       		beq.s	loc_1183E
00012934 6400                       		bcc.s	loc_117FC
00012936 4400                       		neg.b	d0
00012938                            
00012938                            loc_117FC:
00012938 323C F7E8                  		move.w	#-$818,d1
0001293C 343C FEEC                  		move.w	#-$114,d2
00012940 0C00 0001                  		cmpi.b	#1,d0
00012944 6700                       		beq.s	loc_11822
00012946 323C F510                  		move.w	#-$AF0,d1
0001294A 343C FF34                  		move.w	#-$CC,d2
0001294E 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00012954 6D00                       		blt.s	loc_11822
00012956 323C F200                  		move.w	#-$E00,d1
0001295A 343C FF60                  		move.w	#-$A0,d2
0001295E                            
0001295E                            loc_11822:
0001295E 3141 0012                  		move.w	d1,$12(a0)
00012962 3142 0010                  		move.w	d2,$10(a0)
00012966 3028 0008                  		move.w	8(a0),d0
0001296A 9068 0030                  		sub.w	$30(a0),d0
0001296E 6400                       		bcc.s	loc_11838
00012970 4468 0010                  		neg.w	$10(a0)
00012974                            
00012974                            loc_11838:
00012974 5428 0024                  		addq.b	#2,$24(a0)
00012978 6000                       		bra.s	Obj5E_SpikeFall
0001297A                            ; ===========================================================================
0001297A                            
0001297A                            loc_1183E:				; XREF: Obj5E_MoveSpike
0001297A 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012980 7000                       		moveq	#0,d0
00012982 1029 001A                  		move.b	$1A(a1),d0
00012986 343C 0028                  		move.w	#$28,d2
0001298A 3228 0008                  		move.w	8(a0),d1
0001298E 9268 0030                  		sub.w	$30(a0),d1
00012992 6400                       		bcc.s	loc_1185C
00012994 4442                       		neg.w	d2
00012996 5440                       		addq.w	#2,d0
00012998                            
00012998                            loc_1185C:
00012998 D040                       		add.w	d0,d0
0001299A 3228 0034                  		move.w	$34(a0),d1
0001299E D272 0000                  		add.w	(a2,d0.w),d1
000129A2 3141 000C                  		move.w	d1,$C(a0)
000129A6 D468 0030                  		add.w	$30(a0),d2
000129AA 3142 0008                  		move.w	d2,8(a0)
000129AE 4268 000E                  		clr.w	$E(a0)
000129B2 4268 000A                  		clr.w	$A(a0)
000129B6 4E75                       		rts	
000129B8                            ; ===========================================================================
000129B8                            
000129B8                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000129B8 4A68 0012                  		tst.w	$12(a0)
000129BC 6A00                       		bpl.s	loc_1189A
000129BE 6100 BCFE                  		bsr.w	ObjectFall
000129C2 3028 0034                  		move.w	$34(a0),d0
000129C6 0440 002F                  		subi.w	#$2F,d0
000129CA B068 000C                  		cmp.w	$C(a0),d0
000129CE 6E00                       		bgt.s	locret_11898
000129D0 6100 BCEC                  		bsr.w	ObjectFall
000129D4                            
000129D4                            locret_11898:
000129D4 4E75                       		rts	
000129D6                            ; ===========================================================================
000129D6                            
000129D6                            loc_1189A:				; XREF: Obj5E_SpikeFall
000129D6 6100 BCE6                  		bsr.w	ObjectFall
000129DA 2268 003C                  		movea.l	$3C(a0),a1
000129DE 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000129E4 7000                       		moveq	#0,d0
000129E6 1029 001A                  		move.b	$1A(a1),d0
000129EA 3228 0008                  		move.w	8(a0),d1
000129EE 9268 0030                  		sub.w	$30(a0),d1
000129F2 6400                       		bcc.s	loc_118BA
000129F4 5440                       		addq.w	#2,d0
000129F6                            
000129F6                            loc_118BA:
000129F6 D040                       		add.w	d0,d0
000129F8 3228 0034                  		move.w	$34(a0),d1
000129FC D272 0000                  		add.w	(a2,d0.w),d1
00012A00 B268 000C                  		cmp.w	$C(a0),d1
00012A04 6E00                       		bgt.s	locret_11938
00012A06 2268 003C                  		movea.l	$3C(a0),a1
00012A0A 7202                       		moveq	#2,d1
00012A0C 4A68 0010                  		tst.w	$10(a0)
00012A10 6B00                       		bmi.s	Obj5E_Spring
00012A12 7200                       		moveq	#0,d1
00012A14                            
00012A14                            Obj5E_Spring:
00012A14 1341 003A                  		move.b	d1,$3A(a1)
00012A18 1141 003A                  		move.b	d1,$3A(a0)
00012A1C B229 001A                  		cmp.b	$1A(a1),d1
00012A20 6700                       		beq.s	loc_1192C
00012A22 08A9 0003 0022             		bclr	#3,$22(a1)
00012A28 6700                       		beq.s	loc_1192C
00012A2A 4229 0025                  		clr.b	$25(a1)
00012A2E 137C 0002 0024             		move.b	#2,$24(a1)
00012A34 45F8 D000                  		lea	($FFFFD000).w,a2
00012A38 3568 0012 0012             		move.w	$12(a0),$12(a2)
00012A3E 446A 0012                  		neg.w	$12(a2)
00012A42 08EA 0001 0022             		bset	#1,$22(a2)
00012A48 08AA 0003 0022             		bclr	#3,$22(a2)
00012A4E 422A 003C                  		clr.b	$3C(a2)
00012A52 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00012A58 157C 0002 0024             		move.b	#2,$24(a2)
00012A5E 303C 00CC                  		move.w	#$CC,d0
00012A62 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play spring sound
00012A68                            
00012A68                            loc_1192C:
00012A68 4268 0010                  		clr.w	$10(a0)
00012A6C 4268 0012                  		clr.w	$12(a0)
00012A70 5528 0024                  		subq.b	#2,$24(a0)
00012A74                            
00012A74                            locret_11938:
00012A74 4E75                       		rts	
00012A76                            ; ===========================================================================
00012A76 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00012A80                            
00012A80                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00012AB0                            		even
00012AB0                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00012AE0                            		even
00012AE0                            ; ---------------------------------------------------------------------------
00012AE0                            ; Sprite mappings - seesaws (SLZ)
00012AE0                            ; ---------------------------------------------------------------------------
00012AE0                            Map_obj5E:
00012AE0                            	include "_maps\obj5E.asm"
00012AE0                            ; ---------------------------------------------------------------------------
00012AE0                            ; Sprite mappings - seesaws (SLZ)
00012AE0                            ; ---------------------------------------------------------------------------
00012AE0 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012AE4 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012AE8 07                         byte_119AC:	dc.b 7
00012AE9 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00012AEE DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00012AF3 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00012AF8 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00012AFD FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00012B02 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00012B07 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00012B0C 04                         byte_119D0:	dc.b 4
00012B0D E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00012B12 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00012B17 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00012B1C E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00012B22 00                         		even
00012B22 00                         		even
00012B22                            
00012B22                            ; ---------------------------------------------------------------------------
00012B22                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012B22                            ; ---------------------------------------------------------------------------
00012B22                            Map_obj5Ea:
00012B22                            	include "_maps\obj5Eballs.asm"
00012B22                            ; ---------------------------------------------------------------------------
00012B22                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012B22                            ; ---------------------------------------------------------------------------
00012B22 0000                       		dc.w byte_119EA-Map_obj5Ea
00012B24 0000                       		dc.w byte_119F0-Map_obj5Ea
00012B26 01                         byte_119EA:	dc.b 1
00012B27 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012B2C 01                         byte_119F0:	dc.b 1
00012B2D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00012B32                            		even
00012B32                            		even
00012B32                            
00012B32                            ; ===========================================================================
00012B32                            ; ---------------------------------------------------------------------------
00012B32                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00012B32                            ; ---------------------------------------------------------------------------
00012B32                            
00012B32                            Obj5F:					; XREF: Obj_Index
00012B32 7000                       		moveq	#0,d0
00012B34 1028 0024                  		move.b	$24(a0),d0
00012B38 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00012B3C 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00012B40                            ; ===========================================================================
00012B40 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00012B42 0000                       		dc.w Obj5F_Action-Obj5F_Index
00012B44 0000                       		dc.w Obj5F_Display-Obj5F_Index
00012B46 0000                       		dc.w Obj5F_End-Obj5F_Index
00012B48                            ; ===========================================================================
00012B48                            
00012B48                            Obj5F_Main:				; XREF: Obj5F_Index
00012B48 5428 0024                  		addq.b	#2,$24(a0)
00012B4C 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012B54 317C 0400 0002             		move.w	#$400,2(a0)
00012B5A 0028 0004 0001             		ori.b	#4,1(a0)
00012B60 117C 0003 0018             		move.b	#3,$18(a0)
00012B66 117C 000C 0019             		move.b	#$C,$19(a0)
00012B6C 1028 0028                  		move.b	$28(a0),d0
00012B70 6700                       		beq.s	loc_11A3C
00012B72 1140 0024                  		move.b	d0,$24(a0)
00012B76 4E75                       		rts	
00012B78                            ; ===========================================================================
00012B78                            
00012B78                            loc_11A3C:
00012B78 117C 009A 0020             		move.b	#$9A,$20(a0)
00012B7E 0868 0000 0022             		bchg	#0,$22(a0)
00012B84                            
00012B84                            Obj5F_Action:				; XREF: Obj5F_Index
00012B84 7000                       		moveq	#0,d0
00012B86 1028 0025                  		move.b	$25(a0),d0
00012B8A 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00012B8E 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012B92 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012B98 6100 8C0A                  		bsr.w	AnimateSprite
00012B9C 6000 DC60                  		bra.w	MarkObjGone
00012BA0                            ; ===========================================================================
00012BA0 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00012BA2 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012BA4 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00012BA6                            ; ===========================================================================
00012BA6                            
00012BA6                            Obj5F_Walk:				; XREF: Obj5F_Index2
00012BA6 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012BAA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012BAE 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00012BB0 5428 0025                  		addq.b	#2,$25(a0)
00012BB4 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00012BBA 317C 0010 0010             		move.w	#$10,$10(a0)
00012BC0 117C 0001 001C             		move.b	#1,$1C(a0)
00012BC6 0868 0000 0022             		bchg	#0,$22(a0)
00012BCC 6700                       		beq.s	locret_11A96
00012BCE 4468 0010                  		neg.w	$10(a0)		; change direction
00012BD2                            
00012BD2                            locret_11A96:
00012BD2 4E75                       		rts	
00012BD4                            ; ===========================================================================
00012BD4                            
00012BD4                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012BD4 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012BD8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012BDC 6B00                       		bmi.s	loc_11AA8
00012BDE 6100 BB50                  		bsr.w	SpeedToPos
00012BE2 4E75                       		rts	
00012BE4                            ; ===========================================================================
00012BE4                            
00012BE4                            loc_11AA8:
00012BE4 5528 0025                  		subq.b	#2,$25(a0)
00012BE8 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00012BEE 4268 0010                  		clr.w	$10(a0)		; stop walking
00012BF2 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012BF8 4E75                       		rts	
00012BFA                            ; ===========================================================================
00012BFA                            
00012BFA                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012BFA 5368 0030                  		subq.w	#1,$30(a0)
00012BFE 6A00                       		bpl.s	locret_11AD0
00012C00 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012C04 117C 0000 0024             		move.b	#0,$24(a0)
00012C0A                            
00012C0A                            locret_11AD0:
00012C0A 4E75                       		rts	
00012C0C                            ; ===========================================================================
00012C0C                            
00012C0C                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012C0C 3038 D008                  		move.w	($FFFFD008).w,d0
00012C10 9068 0008                  		sub.w	8(a0),d0
00012C14 6400                       		bcc.s	loc_11ADE
00012C16 4440                       		neg.w	d0
00012C18                            
00012C18                            loc_11ADE:
00012C18 0C40 0060                  		cmpi.w	#$60,d0
00012C1C 6400                       		bcc.s	locret_11B5E
00012C1E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012C22 9068 000C                  		sub.w	$C(a0),d0
00012C26 6400                       		bcc.s	Obj5F_MakeFuse
00012C28 4440                       		neg.w	d0
00012C2A                            
00012C2A                            Obj5F_MakeFuse:
00012C2A 0C40 0060                  		cmpi.w	#$60,d0
00012C2E 6400                       		bcc.s	locret_11B5E
00012C30 4A78 FE08                  		tst.w	($FFFFFE08).w
00012C34 6600                       		bne.s	locret_11B5E
00012C36 117C 0004 0025             		move.b	#4,$25(a0)
00012C3C 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012C42 4268 0010                  		clr.w	$10(a0)
00012C46 117C 0002 001C             		move.b	#2,$1C(a0)
00012C4C 6100 BFA4                  		bsr.w	SingleObjLoad2
00012C50 6600                       		bne.s	locret_11B5E
00012C52 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00012C56 3368 0008 0008             		move.w	8(a0),8(a1)
00012C5C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012C62 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012C68 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012C6E 137C 0004 0028             		move.b	#4,$28(a1)
00012C74 137C 0003 001C             		move.b	#3,$1C(a1)
00012C7A 337C 0010 0012             		move.w	#$10,$12(a1)
00012C80 0828 0001 0022             		btst	#1,$22(a0)
00012C86 6700                       		beq.s	loc_11B54
00012C88 4469 0012                  		neg.w	$12(a1)
00012C8C                            
00012C8C                            loc_11B54:
00012C8C 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012C92 2348 003C                  		move.l	a0,$3C(a1)
00012C96                            
00012C96                            locret_11B5E:
00012C96 4E75                       		rts	
00012C98                            ; ===========================================================================
00012C98                            
00012C98                            Obj5F_Display:				; XREF: Obj5F_Index
00012C98 6100                       		bsr.s	loc_11B70
00012C9A 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012CA0 6100 8B02                  		bsr.w	AnimateSprite
00012CA4 6000 DB58                  		bra.w	MarkObjGone
00012CA8                            ; ===========================================================================
00012CA8                            
00012CA8                            loc_11B70:
00012CA8 5368 0030                  		subq.w	#1,$30(a0)
00012CAC 6B00                       		bmi.s	loc_11B7C
00012CAE 6100 BA80                  		bsr.w	SpeedToPos
00012CB2 4E75                       		rts	
00012CB4                            ; ===========================================================================
00012CB4                            
00012CB4                            loc_11B7C:
00012CB4 4268 0030                  		clr.w	$30(a0)
00012CB8 4228 0024                  		clr.b	$24(a0)
00012CBC 3168 0034 000C             		move.w	$34(a0),$C(a0)
00012CC2 7203                       		moveq	#3,d1
00012CC4 2248                       		movea.l	a0,a1
00012CC6 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00012CCC 6000                       		bra.s	Obj5F_MakeShrap
00012CCE                            ; ===========================================================================
00012CCE                            
00012CCE                            Obj5F_Loop:
00012CCE 6100 BF22                  		bsr.w	SingleObjLoad2
00012CD2 6600                       		bne.s	loc_11BCE
00012CD4                            
00012CD4                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012CD4 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00012CD8 3368 0008 0008             		move.w	8(a0),8(a1)
00012CDE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012CE4 137C 0006 0028             		move.b	#6,$28(a1)
00012CEA 137C 0004 001C             		move.b	#4,$1C(a1)
00012CF0 335A 0010                  		move.w	(a2)+,$10(a1)
00012CF4 335A 0012                  		move.w	(a2)+,$12(a1)
00012CF8 137C 0098 0020             		move.b	#$98,$20(a1)
00012CFE 08E9 0007 0001             		bset	#7,1(a1)
00012D04                            
00012D04                            loc_11BCE:
00012D04 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00012D08                            
00012D08 117C 0006 0024             		move.b	#6,$24(a0)
00012D0E                            
00012D0E                            Obj5F_End:				; XREF: Obj5F_Index
00012D0E 6100 BA20                  		bsr.w	SpeedToPos
00012D12 0668 0018 0012             		addi.w	#$18,$12(a0)
00012D18 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012D1E 6100 8A84                  		bsr.w	AnimateSprite
00012D22 4A28 0001                  		tst.b	1(a0)
00012D26 6A00 BA6A                  		bpl.w	DeleteObject
00012D2A 6000 BA2A                  		bra.w	DisplaySprite
00012D2E                            ; ===========================================================================
00012D2E FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012D3E                            
00012D3E                            Ani_obj5F:
00012D3E                            	include "_anim\obj5F.asm"
00012D3E                            ; ---------------------------------------------------------------------------
00012D3E                            ; Animation script - Bomb enemy
00012D3E                            ; ---------------------------------------------------------------------------
00012D3E 0000                       		dc.w byte_11C12-Ani_obj5F
00012D40 0000                       		dc.w byte_11C16-Ani_obj5F
00012D42 0000                       		dc.w byte_11C1C-Ani_obj5F
00012D44 0000                       		dc.w byte_11C20-Ani_obj5F
00012D46 0000                       		dc.w byte_11C24-Ani_obj5F
00012D48 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012D4C 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012D52 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012D56 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012D5A 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012D5E                            		even
00012D5E                            		even
00012D5E                            
00012D5E                            ; ---------------------------------------------------------------------------
00012D5E                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012D5E                            ; ---------------------------------------------------------------------------
00012D5E                            Map_obj5F:
00012D5E                            	include "_maps\obj5F.asm"
00012D5E                            ; ---------------------------------------------------------------------------
00012D5E                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012D5E                            ; ---------------------------------------------------------------------------
00012D5E 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012D62 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012D66 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012D6A 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012D6E 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012D72 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012D76 03                         byte_11C40:	dc.b 3
00012D77 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012D7C 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012D81 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012D86 03                         byte_11C50:	dc.b 3
00012D87 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012D8C 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012D91 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012D96 03                         byte_11C60:	dc.b 3
00012D97 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012D9C 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00012DA1 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012DA6 03                         byte_11C70:	dc.b 3
00012DA7 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012DAC 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00012DB1 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012DB6 03                         byte_11C80:	dc.b 3
00012DB7 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012DBC 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00012DC1 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012DC6 03                         byte_11C90:	dc.b 3
00012DC7 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012DCC 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00012DD1 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012DD6 02                         byte_11CA0:	dc.b 2
00012DD7 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012DDC 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012DE1 02                         byte_11CAB:	dc.b 2
00012DE2 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012DE7 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012DEC 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012DED E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012DF2 01                         byte_11CBC:	dc.b 1			; fuse
00012DF3 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012DF8 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012DF9 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00012DFE 01                         byte_11CC8:	dc.b 1			; fireball
00012DFF FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012E04                            		even
00012E04                            		even
00012E04                            
00012E04                            ; ===========================================================================
00012E04                            ; ---------------------------------------------------------------------------
00012E04                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012E04                            ; ---------------------------------------------------------------------------
00012E04                            
00012E04                            Obj60:					; XREF: Obj_Index
00012E04 7000                       		moveq	#0,d0
00012E06 1028 0024                  		move.b	$24(a0),d0
00012E0A 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00012E0E 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012E12                            ; ===========================================================================
00012E12 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012E14 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012E16 0000                       		dc.w Obj60_Display-Obj60_Index
00012E18 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012E1A 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012E1C                            ; ===========================================================================
00012E1C                            
00012E1C                            Obj60_Main:				; XREF: Obj60_Index
00012E1C 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012E24 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012E2A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012E30 6700                       		beq.s	loc_11D02
00012E32 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012E38                            
00012E38                            loc_11D02:
00012E38 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012E3E 6600                       		bne.s	loc_11D10
00012E40 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012E46                            
00012E46                            loc_11D10:
00012E46 0028 0004 0001             		ori.b	#4,1(a0)
00012E4C 117C 0004 0018             		move.b	#4,$18(a0)
00012E52 117C 000B 0020             		move.b	#$B,$20(a0)
00012E58 117C 000C 0019             		move.b	#$C,$19(a0)
00012E5E 7400                       		moveq	#0,d2
00012E60 45E8 0037                  		lea	$37(a0),a2
00012E64 264A                       		movea.l	a2,a3
00012E66 524A                       		addq.w	#1,a2
00012E68 7203                       		moveq	#3,d1
00012E6A                            
00012E6A                            Obj60_MakeOrbs:
00012E6A 6100 BD86                  		bsr.w	SingleObjLoad2
00012E6E 6600                       		bne.s	loc_11D90
00012E70 5213                       		addq.b	#1,(a3)
00012E72 3A09                       		move.w	a1,d5
00012E74 0445 D000                  		subi.w	#-$3000,d5
00012E78 EC4D                       		lsr.w	#6,d5
00012E7A 0245 007F                  		andi.w	#$7F,d5
00012E7E 14C5                       		move.b	d5,(a2)+
00012E80 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012E82 137C 0006 0024             		move.b	#6,$24(a1)
00012E88 2368 0004 0004             		move.l	4(a0),4(a1)
00012E8E 3368 0002 0002             		move.w	2(a0),2(a1)
00012E94 0029 0004 0001             		ori.b	#4,1(a1)
00012E9A 137C 0004 0018             		move.b	#4,$18(a1)
00012EA0 137C 0008 0019             		move.b	#8,$19(a1)
00012EA6 137C 0003 001A             		move.b	#3,$1A(a1)
00012EAC 137C 0098 0020             		move.b	#$98,$20(a1)
00012EB2 1342 0026                  		move.b	d2,$26(a1)
00012EB6 0602 0040                  		addi.b	#$40,d2
00012EBA 2348 003C                  		move.l	a0,$3C(a1)
00012EBE 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00012EC2                            
00012EC2                            loc_11D90:
00012EC2 7001                       		moveq	#1,d0
00012EC4 0828 0000 0022             		btst	#0,$22(a0)
00012ECA 6700                       		beq.s	Obj60_Move
00012ECC 4440                       		neg.w	d0
00012ECE                            
00012ECE                            Obj60_Move:
00012ECE 1140 0036                  		move.b	d0,$36(a0)
00012ED2 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012ED8 5428 0024                  		addq.b	#2,$24(a0)
00012EDC 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00012EE2 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012EE8 6700                       		beq.s	locret_11DBC	; if not, branch
00012EEA 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00012EEE                            
00012EEE                            locret_11DBC:
00012EEE 4E75                       		rts	
00012EF0                            ; ===========================================================================
00012EF0                            
00012EF0                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012EF0 3038 D008                  		move.w	($FFFFD008).w,d0
00012EF4 9068 0008                  		sub.w	8(a0),d0
00012EF8 6400                       		bcc.s	loc_11DCA
00012EFA 4440                       		neg.w	d0
00012EFC                            
00012EFC                            loc_11DCA:
00012EFC 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00012F00 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012F02 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012F06 9068 000C                  		sub.w	$C(a0),d0
00012F0A 6400                       		bcc.s	loc_11DDC
00012F0C 4440                       		neg.w	d0
00012F0E                            
00012F0E                            loc_11DDC:
00012F0E 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012F12 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012F14 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012F18 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012F1A 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012F20                            
00012F20                            Obj60_Animate:
00012F20 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012F26 6100 887C                  		bsr.w	AnimateSprite
00012F2A 6000 0000                  		bra.w	Obj60_ChkDel
00012F2E                            ; ===========================================================================
00012F2E                            
00012F2E                            Obj60_Display:				; XREF: Obj60_Index
00012F2E 6100 B800                  		bsr.w	SpeedToPos
00012F32                            
00012F32                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012F32 3028 0008                  		move.w	8(a0),d0
00012F36 0240 FF80                  		andi.w	#$FF80,d0
00012F3A 3238 F700                  		move.w	($FFFFF700).w,d1
00012F3E 0441 0080                  		subi.w	#$80,d1
00012F42 0241 FF80                  		andi.w	#$FF80,d1
00012F46 9041                       		sub.w	d1,d0
00012F48 0C40 0280                  		cmpi.w	#$280,d0
00012F4C 6200 0000                  		bhi.w	Obj60_ChkGone
00012F50 6000 B804                  		bra.w	DisplaySprite
00012F54                            ; ===========================================================================
00012F54                            
00012F54                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012F54 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012F58 7000                       		moveq	#0,d0
00012F5A 1028 0023                  		move.b	$23(a0),d0
00012F5E 6700                       		beq.s	loc_11E34
00012F60 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012F66                            
00012F66                            loc_11E34:
00012F66 45E8 0037                  		lea	$37(a0),a2
00012F6A 7400                       		moveq	#0,d2
00012F6C 141A                       		move.b	(a2)+,d2
00012F6E 5342                       		subq.w	#1,d2
00012F70 6500                       		bcs.s	Obj60_Delete
00012F72                            
00012F72                            loc_11E40:
00012F72 7000                       		moveq	#0,d0
00012F74 101A                       		move.b	(a2)+,d0
00012F76 ED48                       		lsl.w	#6,d0
00012F78 0680 00FF D000             		addi.l	#$FFD000,d0
00012F7E 2240                       		movea.l	d0,a1
00012F80 6100 B812                  		bsr.w	DeleteObject2
00012F84 51CA FFEC                  		dbf	d2,loc_11E40
00012F88                            
00012F88                            Obj60_Delete:
00012F88 6000 B808                  		bra.w	DeleteObject
00012F8C                            ; ===========================================================================
00012F8C                            
00012F8C                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012F8C 2268 003C                  		movea.l	$3C(a0),a1
00012F90 0C11 0060                  		cmpi.b	#$60,0(a1)
00012F94 6600 B7FC                  		bne.w	DeleteObject
00012F98 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00012F9E 6600                       		bne.s	Obj60_Circle
00012FA0 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012FA6 6600                       		bne.s	Obj60_Circle
00012FA8 5428 0024                  		addq.b	#2,$24(a0)
00012FAC 5329 0037                  		subq.b	#1,$37(a1)
00012FB0 6600                       		bne.s	Obj60_FireOrb
00012FB2 5429 0024                  		addq.b	#2,$24(a1)
00012FB6                            
00012FB6                            Obj60_FireOrb:
00012FB6 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00012FBC 0829 0000 0022             		btst	#0,$22(a1)
00012FC2 6700                       		beq.s	Obj60_Display2
00012FC4 4468 0010                  		neg.w	$10(a0)
00012FC8                            
00012FC8                            Obj60_Display2:
00012FC8 6000 B78C                  		bra.w	DisplaySprite
00012FCC                            ; ===========================================================================
00012FCC                            
00012FCC                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00012FCC 1028 0026                  		move.b	$26(a0),d0
00012FD0 4EB9 0000 3416             		jsr	(CalcSine).l
00012FD6 E841                       		asr.w	#4,d1
00012FD8 D269 0008                  		add.w	8(a1),d1
00012FDC 3141 0008                  		move.w	d1,8(a0)
00012FE0 E840                       		asr.w	#4,d0
00012FE2 D069 000C                  		add.w	$C(a1),d0
00012FE6 3140 000C                  		move.w	d0,$C(a0)
00012FEA 1029 0036                  		move.b	$36(a1),d0
00012FEE D128 0026                  		add.b	d0,$26(a0)
00012FF2 6000 B762                  		bra.w	DisplaySprite
00012FF6                            ; ===========================================================================
00012FF6                            
00012FF6                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012FF6 6100 B738                  		bsr.w	SpeedToPos
00012FFA 4A28 0001                  		tst.b	1(a0)
00012FFE 6A00 B792                  		bpl.w	DeleteObject
00013002 6000 B752                  		bra.w	DisplaySprite
00013006                            ; ===========================================================================
00013006                            Ani_obj60:
00013006                            	include "_anim\obj60.asm"
00013006                            ; ---------------------------------------------------------------------------
00013006                            ; Animation script - Orbinaut enemy
00013006                            ; ---------------------------------------------------------------------------
00013006 0000                       		dc.w byte_11EDA-Ani_obj60
00013008 0000                       		dc.w byte_11EDE-Ani_obj60
0001300A 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0001300E 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00013014                            		even
00013014                            		even
00013014                            
00013014                            ; ---------------------------------------------------------------------------
00013014                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00013014                            ; ---------------------------------------------------------------------------
00013014                            Map_obj60:
00013014                            	include "_maps\obj60.asm"
00013014                            ; ---------------------------------------------------------------------------
00013014                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00013014                            ; ---------------------------------------------------------------------------
00013014 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00013018 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
0001301C 01                         byte_11EEC:	dc.b 1
0001301D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00013022 01                         byte_11EF2:	dc.b 1
00013023 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00013028 01                         byte_11EF8:	dc.b 1
00013029 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001302E 01                         byte_11EFE:	dc.b 1
0001302F F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00013034                            		even
00013034                            		even
00013034                            
00013034                            ; ===========================================================================
00013034                            ; ---------------------------------------------------------------------------
00013034                            ; Object 16 - harpoon (LZ)
00013034                            ; ---------------------------------------------------------------------------
00013034                            
00013034                            Obj16:					; XREF: Obj_Index
00013034 7000                       		moveq	#0,d0
00013036 1028 0024                  		move.b	$24(a0),d0
0001303A 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0001303E 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00013042                            ; ===========================================================================
00013042 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00013044 0000                       		dc.w Obj16_Move-Obj16_Index
00013046 0000                       		dc.w Obj16_Wait-Obj16_Index
00013048                            ; ===========================================================================
00013048                            
00013048                            Obj16_Main:				; XREF: Obj16_Index
00013048 5428 0024                  		addq.b	#2,$24(a0)
0001304C 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00013054 317C 03CC 0002             		move.w	#$3CC,2(a0)
0001305A 0028 0004 0001             		ori.b	#4,1(a0)
00013060 117C 0004 0018             		move.b	#4,$18(a0)
00013066 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0001306C 117C 0014 0019             		move.b	#$14,$19(a0)
00013072 317C 003C 0030             		move.w	#60,$30(a0)
00013078                            
00013078                            Obj16_Move:				; XREF: Obj16_Index
00013078 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001307E 6100 8724                  		bsr.w	AnimateSprite
00013082 7000                       		moveq	#0,d0
00013084 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00013088 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
0001308E 6000 D76E                  		bra.w	MarkObjGone
00013092                            ; ===========================================================================
00013092 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00013098                            ; ===========================================================================
00013098                            
00013098                            Obj16_Wait:				; XREF: Obj16_Index
00013098 5368 0030                  		subq.w	#1,$30(a0)
0001309C 6A00                       		bpl.s	Obj16_ChkDel
0001309E 317C 003C 0030             		move.w	#60,$30(a0)
000130A4 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000130A8 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000130AE                            
000130AE                            Obj16_ChkDel:
000130AE 6000 D74E                  		bra.w	MarkObjGone
000130B2                            ; ===========================================================================
000130B2                            Ani_obj16:
000130B2                            	include "_anim\obj16.asm"
000130B2                            ; ---------------------------------------------------------------------------
000130B2                            ; Animation script - harpoon (LZ)
000130B2                            ; ---------------------------------------------------------------------------
000130B2 0000                       		dc.w byte_11F8A-Ani_obj16
000130B4 0000                       		dc.w byte_11F8E-Ani_obj16
000130B6 0000                       		dc.w byte_11F92-Ani_obj16
000130B8 0000                       		dc.w byte_11F96-Ani_obj16
000130BA 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000130BE 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000130C2 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000130C6 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000130CA                            		even
000130CA                            		even
000130CA                            
000130CA                            ; ---------------------------------------------------------------------------
000130CA                            ; Sprite mappings - harpoon (LZ)
000130CA                            ; ---------------------------------------------------------------------------
000130CA                            Map_obj16:
000130CA                            	include "_maps\obj16.asm"
000130CA                            ; ---------------------------------------------------------------------------
000130CA                            ; Sprite mappings - harpoon (LZ)
000130CA                            ; ---------------------------------------------------------------------------
000130CA 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000130CE 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000130D2 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000130D6 01                         byte_11FA6:	dc.b 1
000130D7 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000130DC 01                         byte_11FAC:	dc.b 1
000130DD FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000130E2 02                         byte_11FB2:	dc.b 2
000130E3 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000130E8 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000130ED 01                         byte_11FBD:	dc.b 1
000130EE F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000130F3 01                         byte_11FC3:	dc.b 1
000130F4 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000130F9 02                         byte_11FC9:	dc.b 2
000130FA D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000130FF F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00013104                            		even
00013104                            		even
00013104                            
00013104                            ; ===========================================================================
00013104                            ; ---------------------------------------------------------------------------
00013104                            ; Object 61 - blocks (LZ)
00013104                            ; ---------------------------------------------------------------------------
00013104                            
00013104                            Obj61:					; XREF: Obj_Index
00013104 7000                       		moveq	#0,d0
00013106 1028 0024                  		move.b	$24(a0),d0
0001310A 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
0001310E 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00013112                            ; ===========================================================================
00013112 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00013114 0000                       		dc.w Obj61_Action-Obj61_Index
00013116                            
00013116 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00013118 200C                       		dc.b $20, $C
0001311A 1010                       		dc.b $10, $10
0001311C 1010                       		dc.b $10, $10
0001311E                            ; ===========================================================================
0001311E                            
0001311E                            Obj61_Main:				; XREF: Obj61_Index
0001311E 5428 0024                  		addq.b	#2,$24(a0)
00013122 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
0001312A 317C 43E6 0002             		move.w	#$43E6,2(a0)
00013130 117C 0004 0001             		move.b	#4,1(a0)
00013136 117C 0003 0018             		move.b	#3,$18(a0)
0001313C 7000                       		moveq	#0,d0
0001313E 1028 0028                  		move.b	$28(a0),d0
00013142 E648                       		lsr.w	#3,d0
00013144 0240 000E                  		andi.w	#$E,d0
00013148 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
0001314C 115A 0019                  		move.b	(a2)+,$19(a0)
00013150 1152 0016                  		move.b	(a2),$16(a0)
00013154 E248                       		lsr.w	#1,d0
00013156 1140 001A                  		move.b	d0,$1A(a0)
0001315A 3168 0008 0034             		move.w	8(a0),$34(a0)
00013160 3168 000C 0030             		move.w	$C(a0),$30(a0)
00013166 1028 0028                  		move.b	$28(a0),d0
0001316A 0200 000F                  		andi.b	#$F,d0
0001316E 6700                       		beq.s	Obj61_Action
00013170 0C00 0007                  		cmpi.b	#7,d0
00013174 6700                       		beq.s	Obj61_Action
00013176 117C 0001 0038             		move.b	#1,$38(a0)
0001317C                            
0001317C                            Obj61_Action:				; XREF: Obj61_Index
0001317C 3F28 0008                  		move.w	8(a0),-(sp)
00013180 7000                       		moveq	#0,d0
00013182 1028 0028                  		move.b	$28(a0),d0
00013186 0240 000F                  		andi.w	#$F,d0
0001318A D040                       		add.w	d0,d0
0001318C 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00013190 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00013194 381F                       		move.w	(sp)+,d4
00013196 4A28 0001                  		tst.b	1(a0)
0001319A 6A00                       		bpl.s	Obj61_ChkDel
0001319C 7200                       		moveq	#0,d1
0001319E 1228 0019                  		move.b	$19(a0),d1
000131A2 0641 000B                  		addi.w	#$B,d1
000131A6 7400                       		moveq	#0,d2
000131A8 1428 0016                  		move.b	$16(a0),d2
000131AC 3602                       		move.w	d2,d3
000131AE 5243                       		addq.w	#1,d3
000131B0 6100 D974                  		bsr.w	SolidObject
000131B4 1144 003F                  		move.b	d4,$3F(a0)
000131B8 6100 0000                  		bsr.w	loc_12180
000131BC                            
000131BC                            Obj61_ChkDel:
000131BC 3028 0034                  		move.w	$34(a0),d0
000131C0 0240 FF80                  		andi.w	#$FF80,d0
000131C4 3238 F700                  		move.w	($FFFFF700).w,d1
000131C8 0441 0080                  		subi.w	#$80,d1
000131CC 0241 FF80                  		andi.w	#$FF80,d1
000131D0 9041                       		sub.w	d1,d0
000131D2 0C40 0280                  		cmpi.w	#$280,d0
000131D6 6200 B5BA                  		bhi.w	DeleteObject
000131DA 6000 B57A                  		bra.w	DisplaySprite
000131DE                            ; ===========================================================================
000131DE 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000131E2 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000131E6 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
000131EA 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
000131EE                            ; ===========================================================================
000131EE                            
000131EE                            Obj61_Type00:				; XREF: Obj61_TypeIndex
000131EE 4E75                       		rts	
000131F0                            ; ===========================================================================
000131F0                            
000131F0                            Obj61_Type01:				; XREF: Obj61_TypeIndex
000131F0 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
000131F4 6600                       		bne.s	loc_120D6	; if yes, branch
000131F6 0828 0003 0022             		btst	#3,$22(a0)
000131FC 6700                       		beq.s	locret_120D4
000131FE 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00013204                            
00013204                            locret_120D4:
00013204 4E75                       		rts	
00013206                            ; ===========================================================================
00013206                            
00013206                            loc_120D6:
00013206 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
0001320A 66F8                       		bne.s	locret_120D4	; if time remains, branch
0001320C 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00013210 4228 0038                  		clr.b	$38(a0)
00013214 4E75                       		rts	
00013216                            ; ===========================================================================
00013216                            
00013216                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00013216 6100 B518                  		bsr.w	SpeedToPos
0001321A 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
0001321E 6100 0000                  		bsr.w	ObjHitFloor
00013222 4A41                       		tst.w	d1
00013224 6A00 0000                  		bpl.w	locret_12106
00013228 5241                       		addq.w	#1,d1
0001322A D368 000C                  		add.w	d1,$C(a0)
0001322E 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00013232 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013236                            
00013236                            locret_12106:
00013236 4E75                       		rts	
00013238                            ; ===========================================================================
00013238                            
00013238                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00013238 6100 B4F6                  		bsr.w	SpeedToPos
0001323C 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00013240 6100 0000                  		bsr.w	ObjHitCeiling
00013244 4A41                       		tst.w	d1
00013246 6A00 0000                  		bpl.w	locret_12126
0001324A 9368 000C                  		sub.w	d1,$C(a0)
0001324E 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00013252 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013256                            
00013256                            locret_12126:
00013256 4E75                       		rts	
00013258                            ; ===========================================================================
00013258                            
00013258                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00013258 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
0001325E 6600                       		bne.s	locret_12138	; if not, branch
00013260 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00013264 4228 0038                  		clr.b	$38(a0)
00013268                            
00013268                            locret_12138:
00013268 4E75                       		rts	
0001326A                            ; ===========================================================================
0001326A                            
0001326A                            Obj61_Type07:				; XREF: Obj61_TypeIndex
0001326A 3038 F646                  		move.w	($FFFFF646).w,d0
0001326E 9068 000C                  		sub.w	$C(a0),d0
00013272 6700                       		beq.s	locret_1217E
00013274 6400                       		bcc.s	loc_12162
00013276 0C40 FFFE                  		cmpi.w	#-2,d0
0001327A 6C00                       		bge.s	loc_1214E
0001327C 70FE                       		moveq	#-2,d0
0001327E                            
0001327E                            loc_1214E:
0001327E D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00013282 6100 0000                  		bsr.w	ObjHitCeiling
00013286 4A41                       		tst.w	d1
00013288 6A00 0000                  		bpl.w	locret_12160
0001328C 9368 000C                  		sub.w	d1,$C(a0)
00013290                            
00013290                            locret_12160:
00013290 4E75                       		rts	
00013292                            ; ===========================================================================
00013292                            
00013292                            loc_12162:				; XREF: Obj61_Type07
00013292 0C40 0002                  		cmpi.w	#2,d0
00013296 6F00                       		ble.s	loc_1216A
00013298 7002                       		moveq	#2,d0
0001329A                            
0001329A                            loc_1216A:
0001329A D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
0001329E 6100 0000                  		bsr.w	ObjHitFloor
000132A2 4A41                       		tst.w	d1
000132A4 6A00 0000                  		bpl.w	locret_1217E
000132A8 5241                       		addq.w	#1,d1
000132AA D368 000C                  		add.w	d1,$C(a0)
000132AE                            
000132AE                            locret_1217E:
000132AE 4E75                       		rts	
000132B0                            ; ===========================================================================
000132B0                            
000132B0                            loc_12180:				; XREF: Obj61_Action
000132B0 4A28 0038                  		tst.b	$38(a0)
000132B4 6700                       		beq.s	locret_121C0
000132B6 0828 0003 0022             		btst	#3,$22(a0)
000132BC 6600                       		bne.s	loc_1219A
000132BE 4A28 003E                  		tst.b	$3E(a0)
000132C2 6700                       		beq.s	locret_121C0
000132C4 5928 003E                  		subq.b	#4,$3E(a0)
000132C8 6000                       		bra.s	loc_121A6
000132CA                            ; ===========================================================================
000132CA                            
000132CA                            loc_1219A:
000132CA 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000132D0 6700                       		beq.s	locret_121C0
000132D2 5828 003E                  		addq.b	#4,$3E(a0)
000132D6                            
000132D6                            loc_121A6:
000132D6 1028 003E                  		move.b	$3E(a0),d0
000132DA 4EB9 0000 3416             		jsr	(CalcSine).l
000132E0 323C 0400                  		move.w	#$400,d1
000132E4 C1C1                       		muls.w	d1,d0
000132E6 4840                       		swap	d0
000132E8 D068 0030                  		add.w	$30(a0),d0
000132EC 3140 000C                  		move.w	d0,$C(a0)
000132F0                            
000132F0                            locret_121C0:
000132F0 4E75                       		rts	
000132F2                            ; ===========================================================================
000132F2                            ; ---------------------------------------------------------------------------
000132F2                            ; Sprite mappings - blocks (LZ)
000132F2                            ; ---------------------------------------------------------------------------
000132F2                            Map_obj61:
000132F2                            	include "_maps\obj61.asm"
000132F2                            ; ---------------------------------------------------------------------------
000132F2                            ; Sprite mappings - blocks (LZ)
000132F2                            ; ---------------------------------------------------------------------------
000132F2 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
000132F6 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
000132FA 01                         byte_121CA:	dc.b 1
000132FB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00013300 02                         byte_121D0:	dc.b 2
00013301 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00013306 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
0001330B 01                         byte_121DB:	dc.b 1
0001330C F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00013311 01                         byte_121E1:	dc.b 1
00013312 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00013318 00                         		even
00013318 00                         		even
00013318                            
00013318                            ; ===========================================================================
00013318                            ; ---------------------------------------------------------------------------
00013318                            ; Object 62 - gargoyle head (LZ)
00013318                            ; ---------------------------------------------------------------------------
00013318                            
00013318                            Obj62:					; XREF: Obj_Index
00013318 7000                       		moveq	#0,d0
0001331A 1028 0024                  		move.b	$24(a0),d0
0001331E 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00013322 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00013326 6000 D4D6                  		bra.w	MarkObjGone
0001332A                            ; ===========================================================================
0001332A 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
0001332C 0000                       		dc.w Obj62_MakeFire-Obj62_Index
0001332E 0000                       		dc.w Obj62_FireBall-Obj62_Index
00013330 0000                       		dc.w Obj62_AniFire-Obj62_Index
00013332                            
00013332 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
0001333A                            ; ===========================================================================
0001333A                            
0001333A                            Obj62_Main:				; XREF: Obj62_Index
0001333A 5428 0024                  		addq.b	#2,$24(a0)
0001333E 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013346 317C 42E9 0002             		move.w	#$42E9,2(a0)
0001334C 0028 0004 0001             		ori.b	#4,1(a0)
00013352 117C 0003 0018             		move.b	#3,$18(a0)
00013358 117C 0010 0019             		move.b	#$10,$19(a0)
0001335E 1028 0028                  		move.b	$28(a0),d0	; get object type
00013362 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00013366 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
0001336C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013372 0228 000F 0028             		andi.b	#$F,$28(a0)
00013378                            
00013378                            Obj62_MakeFire:				; XREF: Obj62_Index
00013378 5328 001E                  		subq.b	#1,$1E(a0)
0001337C 6600                       		bne.s	Obj62_NoFire
0001337E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013384 6100 B64A                  		bsr.w	ChkObjOnScreen
00013388 6600                       		bne.s	Obj62_NoFire
0001338A 6100 B850                  		bsr.w	SingleObjLoad
0001338E 6600                       		bne.s	Obj62_NoFire
00013390 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00013394 5829 0024                  		addq.b	#4,$24(a1)
00013398 3368 0008 0008             		move.w	8(a0),8(a1)
0001339E 3368 000C 000C             		move.w	$C(a0),$C(a1)
000133A4 1368 0001 0001             		move.b	1(a0),1(a1)
000133AA 1368 0022 0022             		move.b	$22(a0),$22(a1)
000133B0                            
000133B0                            Obj62_NoFire:
000133B0 4E75                       		rts	
000133B2                            ; ===========================================================================
000133B2                            
000133B2                            Obj62_FireBall:				; XREF: Obj62_Index
000133B2 5428 0024                  		addq.b	#2,$24(a0)
000133B6 117C 0008 0016             		move.b	#8,$16(a0)
000133BC 117C 0008 0017             		move.b	#8,$17(a0)
000133C2 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000133CA 317C 02E9 0002             		move.w	#$2E9,2(a0)
000133D0 0028 0004 0001             		ori.b	#4,1(a0)
000133D6 117C 0004 0018             		move.b	#4,$18(a0)
000133DC 117C 0098 0020             		move.b	#$98,$20(a0)
000133E2 117C 0008 0019             		move.b	#8,$19(a0)
000133E8 117C 0002 001A             		move.b	#2,$1A(a0)
000133EE 5068 000C                  		addq.w	#8,$C(a0)
000133F2 317C 0200 0010             		move.w	#$200,$10(a0)
000133F8 0828 0000 0022             		btst	#0,$22(a0)
000133FE 6600                       		bne.s	Obj62_Sound
00013400 4468 0010                  		neg.w	$10(a0)
00013404                            
00013404                            Obj62_Sound:
00013404 303C 00AE                  		move.w	#$AE,d0
00013408 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play lava ball sound
0001340E                            
0001340E                            Obj62_AniFire:				; XREF: Obj62_Index
0001340E 1038 FE05                  		move.b	($FFFFFE05).w,d0
00013412 0200 0007                  		andi.b	#7,d0
00013416 6600                       		bne.s	Obj62_StopFire
00013418 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
0001341E                            
0001341E                            Obj62_StopFire:
0001341E 6100 B310                  		bsr.w	SpeedToPos
00013422 0828 0000 0022             		btst	#0,$22(a0)
00013428 6600                       		bne.s	Obj62_StopFire2
0001342A 76F8                       		moveq	#-8,d3
0001342C 6100 0000                  		bsr.w	ObjHitWallLeft
00013430 4A41                       		tst.w	d1
00013432 6B00 B35E                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00013436 4E75                       		rts	
00013438                            ; ===========================================================================
00013438                            
00013438                            Obj62_StopFire2:
00013438 7608                       		moveq	#8,d3
0001343A 6100 0000                  		bsr.w	ObjHitWallRight
0001343E 4A41                       		tst.w	d1
00013440 6B00 B350                  		bmi.w	DeleteObject
00013444 4E75                       		rts	
00013446                            ; ===========================================================================
00013446                            ; ---------------------------------------------------------------------------
00013446                            ; Sprite mappings - gargoyle head (LZ)
00013446                            ; ---------------------------------------------------------------------------
00013446                            Map_obj62:
00013446                            	include "_maps\obj62.asm"
00013446                            ; ---------------------------------------------------------------------------
00013446                            ; Sprite mappings - gargoyle head (LZ)
00013446                            ; ---------------------------------------------------------------------------
00013446 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
0001344A 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
0001344E 03                         byte_12320:	dc.b 3
0001344F F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00013454 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00013459 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
0001345E 01                         byte_12330:	dc.b 1
0001345F FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00013464 01                         byte_12336:	dc.b 1
00013465 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
0001346A                            		even
0001346A                            		even
0001346A                            
0001346A                            ; ===========================================================================
0001346A                            ; ---------------------------------------------------------------------------
0001346A                            ; Object 63 - platforms	on a conveyor belt (LZ)
0001346A                            ; ---------------------------------------------------------------------------
0001346A                            
0001346A                            Obj63:					; XREF: Obj_Index
0001346A 7000                       		moveq	#0,d0
0001346C 1028 0024                  		move.b	$24(a0),d0
00013470 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00013474 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00013478 3028 0030                  		move.w	$30(a0),d0
0001347C 0240 FF80                  		andi.w	#$FF80,d0
00013480 3238 F700                  		move.w	($FFFFF700).w,d1
00013484 0441 0080                  		subi.w	#$80,d1
00013488 0241 FF80                  		andi.w	#$FF80,d1
0001348C 9041                       		sub.w	d1,d0
0001348E 0C40 0280                  		cmpi.w	#$280,d0
00013492 6200                       		bhi.s	loc_1236A
00013494                            
00013494                            Obj63_Display:				; XREF: loc_1236A
00013494 6000 B2C0                  		bra.w	DisplaySprite
00013498                            ; ===========================================================================
00013498                            
00013498                            loc_1236A:				; XREF: Obj63
00013498 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
0001349E 6600                       		bne.s	loc_12378
000134A0 0C40 FF80                  		cmpi.w	#-$80,d0
000134A4 64EE                       		bcc.s	Obj63_Display
000134A6                            
000134A6                            loc_12378:
000134A6 1028 002F                  		move.b	$2F(a0),d0
000134AA 6A00 B2E6                  		bpl.w	DeleteObject
000134AE 0240 007F                  		andi.w	#$7F,d0
000134B2 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000134B6 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000134BC 6000 B2D4                  		bra.w	DeleteObject
000134C0                            ; ===========================================================================
000134C0 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
000134C2 0000                       		dc.w loc_124B2-Obj63_Index
000134C4 0000                       		dc.w loc_124C2-Obj63_Index
000134C6 0000                       		dc.w loc_124DE-Obj63_Index
000134C8                            ; ===========================================================================
000134C8                            
000134C8                            Obj63_Main:				; XREF: Obj63_Index
000134C8 1028 0028                  		move.b	$28(a0),d0
000134CC 6B00 0000                  		bmi.w	loc_12460
000134D0 5428 0024                  		addq.b	#2,$24(a0)
000134D4 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
000134DC 317C 43F6 0002             		move.w	#$43F6,2(a0)
000134E2 0028 0004 0001             		ori.b	#4,1(a0)
000134E8 117C 0010 0019             		move.b	#$10,$19(a0)
000134EE 117C 0004 0018             		move.b	#4,$18(a0)
000134F4 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
000134FA 6600                       		bne.s	loc_123E2
000134FC 5828 0024                  		addq.b	#4,$24(a0)
00013500 317C 03F6 0002             		move.w	#$3F6,2(a0)
00013506 117C 0001 0018             		move.b	#1,$18(a0)
0001350C 6000 0000                  		bra.w	loc_124DE
00013510                            ; ===========================================================================
00013510                            
00013510                            loc_123E2:
00013510 117C 0004 001A             		move.b	#4,$1A(a0)
00013516 7000                       		moveq	#0,d0
00013518 1028 0028                  		move.b	$28(a0),d0
0001351C 3200                       		move.w	d0,d1
0001351E E648                       		lsr.w	#3,d0
00013520 0240 001E                  		andi.w	#$1E,d0
00013524 45FA 0000                  		lea	Obj63_Data(pc),a2
00013528 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001352C 315A 0038                  		move.w	(a2)+,$38(a0)
00013530 315A 0030                  		move.w	(a2)+,$30(a0)
00013534 214A 003C                  		move.l	a2,$3C(a0)
00013538 0241 000F                  		andi.w	#$F,d1
0001353C E549                       		lsl.w	#2,d1
0001353E 1141 0038                  		move.b	d1,$38(a0)
00013542 117C 0004 003A             		move.b	#4,$3A(a0)
00013548 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001354C 6700                       		beq.s	loc_1244C
0001354E 117C 0001 003B             		move.b	#1,$3B(a0)
00013554 4428 003A                  		neg.b	$3A(a0)
00013558 7200                       		moveq	#0,d1
0001355A 1228 0038                  		move.b	$38(a0),d1
0001355E D228 003A                  		add.b	$3A(a0),d1
00013562 B228 0039                  		cmp.b	$39(a0),d1
00013566 6500                       		bcs.s	loc_12448
00013568 1001                       		move.b	d1,d0
0001356A 7200                       		moveq	#0,d1
0001356C 4A00                       		tst.b	d0
0001356E 6A00                       		bpl.s	loc_12448
00013570 1228 0039                  		move.b	$39(a0),d1
00013574 5901                       		subq.b	#4,d1
00013576                            
00013576                            loc_12448:
00013576 1141 0038                  		move.b	d1,$38(a0)
0001357A                            
0001357A                            loc_1244C:
0001357A 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00013580 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00013586 6100 0000                  		bsr.w	Obj63_ChangeDir
0001358A 6000 0000                  		bra.w	loc_124B2
0001358E                            ; ===========================================================================
0001358E                            
0001358E                            loc_12460:				; XREF: Obj63_Main
0001358E 1140 002F                  		move.b	d0,$2F(a0)
00013592 0240 007F                  		andi.w	#$7F,d0
00013596 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001359A 08F2 0000 0000             		bset	#0,(a2,d0.w)
000135A0 6600 B1F0                  		bne.w	DeleteObject
000135A4 D040                       		add.w	d0,d0
000135A6 0240 001E                  		andi.w	#$1E,d0
000135AA 45F9 0000 0000             		lea	(ObjPos_LZxpf_Index).l,a2
000135B0 D4F2 0000                  		adda.w	(a2,d0.w),a2
000135B4 321A                       		move.w	(a2)+,d1
000135B6 2248                       		movea.l	a0,a1
000135B8 6000                       		bra.s	Obj63_MakePtfms
000135BA                            ; ===========================================================================
000135BA                            
000135BA                            Obj63_Loop:
000135BA 6100 B620                  		bsr.w	SingleObjLoad
000135BE 6600                       		bne.s	loc_124AA
000135C0                            
000135C0                            Obj63_MakePtfms:			; XREF: loc_12460
000135C0 12BC 0063                  		move.b	#$63,0(a1)
000135C4 335A 0008                  		move.w	(a2)+,8(a1)
000135C8 335A 000C                  		move.w	(a2)+,$C(a1)
000135CC 301A                       		move.w	(a2)+,d0
000135CE 1340 0028                  		move.b	d0,$28(a1)
000135D2                            
000135D2                            loc_124AA:
000135D2 51C9 FFE6                  		dbf	d1,Obj63_Loop
000135D6                            
000135D6 588F                       		addq.l	#4,sp
000135D8 4E75                       		rts	
000135DA                            ; ===========================================================================
000135DA                            
000135DA                            loc_124B2:				; XREF: Obj63_Index
000135DA 7200                       		moveq	#0,d1
000135DC 1228 0019                  		move.b	$19(a0),d1
000135E0 4EB9 0000 836A             		jsr	(PlatformObject).l
000135E6 6000 0000                  		bra.w	sub_12502
000135EA                            ; ===========================================================================
000135EA                            
000135EA                            loc_124C2:				; XREF: Obj63_Index
000135EA 7200                       		moveq	#0,d1
000135EC 1228 0019                  		move.b	$19(a0),d1
000135F0 4EB9 0000 84DE             		jsr	(ExitPlatform).l
000135F6 3F28 0008                  		move.w	8(a0),-(sp)
000135FA 6100 0000                  		bsr.w	sub_12502
000135FE 341F                       		move.w	(sp)+,d2
00013600 4EF9 0000 8A48             		jmp	(MvSonicOnPtfm2).l
00013606                            ; ===========================================================================
00013606                            
00013606                            loc_124DE:				; XREF: Obj63_Index
00013606 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001360A 0240 0003                  		andi.w	#3,d0
0001360E 6600                       		bne.s	loc_124FC
00013610 7201                       		moveq	#1,d1
00013612 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013616 6700                       		beq.s	loc_124F2
00013618 4401                       		neg.b	d1
0001361A                            
0001361A                            loc_124F2:
0001361A D328 001A                  		add.b	d1,$1A(a0)
0001361E 0228 0003 001A             		andi.b	#3,$1A(a0)
00013624                            
00013624                            loc_124FC:
00013624 588F                       		addq.l	#4,sp
00013626 6000 D1D6                  		bra.w	MarkObjGone
0001362A                            
0001362A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001362A                            
0001362A                            
0001362A                            sub_12502:				; XREF: loc_124B2; loc_124C2
0001362A 4A38 F7EE                  		tst.b	($FFFFF7EE).w
0001362E 6700                       		beq.s	loc_12520
00013630 4A28 003B                  		tst.b	$3B(a0)
00013634 6600                       		bne.s	loc_12520
00013636 117C 0001 003B             		move.b	#1,$3B(a0)
0001363C 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00013642 4428 003A                  		neg.b	$3A(a0)
00013646 6000                       		bra.s	loc_12534
00013648                            ; ===========================================================================
00013648                            
00013648                            loc_12520:
00013648 3028 0008                  		move.w	8(a0),d0
0001364C B068 0034                  		cmp.w	$34(a0),d0
00013650 6600                       		bne.s	loc_1256A
00013652 3028 000C                  		move.w	$C(a0),d0
00013656 B068 0036                  		cmp.w	$36(a0),d0
0001365A 6600                       		bne.s	loc_1256A
0001365C                            
0001365C                            loc_12534:
0001365C 7200                       		moveq	#0,d1
0001365E 1228 0038                  		move.b	$38(a0),d1
00013662 D228 003A                  		add.b	$3A(a0),d1
00013666 B228 0039                  		cmp.b	$39(a0),d1
0001366A 6500                       		bcs.s	loc_12552
0001366C 1001                       		move.b	d1,d0
0001366E 7200                       		moveq	#0,d1
00013670 4A00                       		tst.b	d0
00013672 6A00                       		bpl.s	loc_12552
00013674 1228 0039                  		move.b	$39(a0),d1
00013678 5901                       		subq.b	#4,d1
0001367A                            
0001367A                            loc_12552:
0001367A 1141 0038                  		move.b	d1,$38(a0)
0001367E 2268 003C                  		movea.l	$3C(a0),a1
00013682 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00013688 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001368E 6100 0000                  		bsr.w	Obj63_ChangeDir
00013692                            
00013692                            loc_1256A:
00013692 6100 B09C                  		bsr.w	SpeedToPos
00013696 4E75                       		rts	
00013698                            ; End of function sub_12502
00013698                            
00013698                            
00013698                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013698                            
00013698                            
00013698                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00013698 7000                       		moveq	#0,d0
0001369A 343C FF00                  		move.w	#-$100,d2
0001369E 3028 0008                  		move.w	8(a0),d0
000136A2 9068 0034                  		sub.w	$34(a0),d0
000136A6 6400                       		bcc.s	loc_12584
000136A8 4440                       		neg.w	d0
000136AA 4442                       		neg.w	d2
000136AC                            
000136AC                            loc_12584:
000136AC 7200                       		moveq	#0,d1
000136AE 363C FF00                  		move.w	#-$100,d3
000136B2 3228 000C                  		move.w	$C(a0),d1
000136B6 9268 0036                  		sub.w	$36(a0),d1
000136BA 6400                       		bcc.s	loc_12598
000136BC 4441                       		neg.w	d1
000136BE 4443                       		neg.w	d3
000136C0                            
000136C0                            loc_12598:
000136C0 B240                       		cmp.w	d0,d1
000136C2 6500                       		bcs.s	loc_125C2
000136C4 3028 0008                  		move.w	8(a0),d0
000136C8 9068 0034                  		sub.w	$34(a0),d0
000136CC 6700                       		beq.s	loc_125AE
000136CE 48C0                       		ext.l	d0
000136D0 E180                       		asl.l	#8,d0
000136D2 81C1                       		divs.w	d1,d0
000136D4 4440                       		neg.w	d0
000136D6                            
000136D6                            loc_125AE:
000136D6 3140 0010                  		move.w	d0,$10(a0)
000136DA 3143 0012                  		move.w	d3,$12(a0)
000136DE 4840                       		swap	d0
000136E0 3140 000A                  		move.w	d0,$A(a0)
000136E4 4268 000E                  		clr.w	$E(a0)
000136E8 4E75                       		rts	
000136EA                            ; ===========================================================================
000136EA                            
000136EA                            loc_125C2:				; XREF: Obj63_ChangeDir
000136EA 3228 000C                  		move.w	$C(a0),d1
000136EE 9268 0036                  		sub.w	$36(a0),d1
000136F2 6700                       		beq.s	loc_125D4
000136F4 48C1                       		ext.l	d1
000136F6 E181                       		asl.l	#8,d1
000136F8 83C0                       		divs.w	d0,d1
000136FA 4441                       		neg.w	d1
000136FC                            
000136FC                            loc_125D4:
000136FC 3141 0012                  		move.w	d1,$12(a0)
00013700 3142 0010                  		move.w	d2,$10(a0)
00013704 4841                       		swap	d1
00013706 3141 000E                  		move.w	d1,$E(a0)
0001370A 4268 000A                  		clr.w	$A(a0)
0001370E 4E75                       		rts	
00013710                            ; End of function Obj63_ChangeDir
00013710                            
00013710                            ; ===========================================================================
00013710 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00013712 0000                       		dc.w word_12610-Obj63_Data
00013714 0000                       		dc.w word_12628-Obj63_Data
00013716 0000                       		dc.w word_1263C-Obj63_Data
00013718 0000                       		dc.w word_12650-Obj63_Data
0001371A 0000                       		dc.w word_12668-Obj63_Data
0001371C 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
0001372C 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00013738 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00013748 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00013750 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00013764 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013778 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00013790 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000137A4                            
000137A4                            ; ---------------------------------------------------------------------------
000137A4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000137A4                            ; ---------------------------------------------------------------------------
000137A4                            Map_obj63:
000137A4                            	include "_maps\obj63.asm"
000137A4                            ; ---------------------------------------------------------------------------
000137A4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000137A4                            ; ---------------------------------------------------------------------------
000137A4 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
000137A8 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
000137AC 0000                       		dc.w byte_1269E-Map_obj63
000137AE 01                         byte_12686:	dc.b 1
000137AF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000137B4 01                         byte_1268C:	dc.b 1
000137B5 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000137BA 01                         byte_12692:	dc.b 1
000137BB F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000137C0 01                         byte_12698:	dc.b 1
000137C1 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000137C6 01                         byte_1269E:	dc.b 1
000137C7 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000137CC                            		even
000137CC                            		even
000137CC                            
000137CC                            ; ===========================================================================
000137CC                            ; ---------------------------------------------------------------------------
000137CC                            ; Object 64 - bubbles (LZ)
000137CC                            ; ---------------------------------------------------------------------------
000137CC                            
000137CC                            Obj64:					; XREF: Obj_Index
000137CC 7000                       		moveq	#0,d0
000137CE 1028 0024                  		move.b	$24(a0),d0
000137D2 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
000137D6 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
000137DA                            ; ===========================================================================
000137DA 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
000137DC 0000                       		dc.w Obj64_Animate-Obj64_Index
000137DE 0000                       		dc.w Obj64_ChkWater-Obj64_Index
000137E0 0000                       		dc.w Obj64_Display2-Obj64_Index
000137E2 0000                       		dc.w Obj64_Delete3-Obj64_Index
000137E4 0000                       		dc.w Obj64_BblMaker-Obj64_Index
000137E6                            ; ===========================================================================
000137E6                            
000137E6                            Obj64_Main:				; XREF: Obj64_Index
000137E6 5428 0024                  		addq.b	#2,$24(a0)
000137EA 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
000137F2 317C 8348 0002             		move.w	#$8348,2(a0)
000137F8 117C 0084 0001             		move.b	#$84,1(a0)
000137FE 117C 0010 0019             		move.b	#$10,$19(a0)
00013804 117C 0001 0018             		move.b	#1,$18(a0)
0001380A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001380E 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00013810 5028 0024                  		addq.b	#8,$24(a0)
00013814 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00013818 1140 0032                  		move.b	d0,$32(a0)
0001381C 1140 0033                  		move.b	d0,$33(a0)
00013820 117C 0006 001C             		move.b	#6,$1C(a0)
00013826 6000 0000                  		bra.w	Obj64_BblMaker
0001382A                            ; ===========================================================================
0001382A                            
0001382A                            Obj64_Bubble:				; XREF: Obj64_Main
0001382A 1140 001C                  		move.b	d0,$1C(a0)
0001382E 3168 0008 0030             		move.w	8(a0),$30(a0)
00013834 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
0001383A 4EB9 0000 33F0             		jsr	(RandomNumber).l
00013840 1140 0026                  		move.b	d0,$26(a0)
00013844                            
00013844                            Obj64_Animate:				; XREF: Obj64_Index
00013844 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001384A 4EB9 0000 B7A4             		jsr	AnimateSprite
00013850 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00013856 6600                       		bne.s	Obj64_ChkWater
00013858 117C 0001 002E             		move.b	#1,$2E(a0)
0001385E                            
0001385E                            Obj64_ChkWater:				; XREF: Obj64_Index
0001385E 3038 F646                  		move.w	($FFFFF646).w,d0
00013862 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00013866 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00013868                            
00013868                            Obj64_Burst:				; XREF: Obj64_Wobble
00013868 117C 0006 0024             		move.b	#6,$24(a0)
0001386E 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00013872 6000 0000                  		bra.w	Obj64_Display2
00013876                            ; ===========================================================================
00013876                            
00013876                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00013876 1028 0026                  		move.b	$26(a0),d0
0001387A 5228 0026                  		addq.b	#1,$26(a0)
0001387E 0240 007F                  		andi.w	#$7F,d0
00013882 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013888 1031 0000                  		move.b	(a1,d0.w),d0
0001388C 4880                       		ext.w	d0
0001388E D068 0030                  		add.w	$30(a0),d0
00013892 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00013896 4A28 002E                  		tst.b	$2E(a0)
0001389A 6700                       		beq.s	Obj64_Display
0001389C 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
000138A0 6700                       		beq.s	Obj64_Display	; if not, branch
000138A2                            
000138A2 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
000138A6 303C 00AD                  		move.w	#$AD,d0
000138AA 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
000138B0 43F8 D000                  		lea	($FFFFD000).w,a1
000138B4 4269 0010                  		clr.w	$10(a1)
000138B8 4269 0012                  		clr.w	$12(a1)
000138BC 4269 0014                  		clr.w	$14(a1)
000138C0 137C 0015 001C             		move.b	#$15,$1C(a1)
000138C6 337C 0023 003E             		move.w	#$23,$3E(a1)
000138CC 137C 0000 003C             		move.b	#0,$3C(a1)
000138D2 08A9 0005 0022             		bclr	#5,$22(a1)
000138D8 08A9 0004 0022             		bclr	#4,$22(a1)
000138DE 0829 0002 0022             		btst	#2,$22(a1)
000138E4 6700 FF82                  		beq.w	Obj64_Burst
000138E8 08A9 0002 0022             		bclr	#2,$22(a1)
000138EE 137C 0013 0016             		move.b	#$13,$16(a1)
000138F4 137C 0009 0017             		move.b	#9,$17(a1)
000138FA 5B69 000C                  		subq.w	#5,$C(a1)
000138FE 6000 FF68                  		bra.w	Obj64_Burst
00013902                            ; ===========================================================================
00013902                            
00013902                            Obj64_Display:				; XREF: Obj64_Wobble
00013902 6100 AE2C                  		bsr.w	SpeedToPos
00013906 4A28 0001                  		tst.b	1(a0)
0001390A 6A00                       		bpl.s	Obj64_Delete
0001390C 4EFA AE48                  		jmp	DisplaySprite
00013910                            ; ===========================================================================
00013910                            
00013910                            Obj64_Delete:
00013910 4EFA AE80                  		jmp	DeleteObject
00013914                            ; ===========================================================================
00013914                            
00013914                            Obj64_Display2:				; XREF: Obj64_Index
00013914 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001391A 4EB9 0000 B7A4             		jsr	AnimateSprite
00013920 4A28 0001                  		tst.b	1(a0)
00013924 6A00                       		bpl.s	Obj64_Delete2
00013926 4EFA AE2E                  		jmp	DisplaySprite
0001392A                            ; ===========================================================================
0001392A                            
0001392A                            Obj64_Delete2:
0001392A 4EFA AE66                  		jmp	DeleteObject
0001392E                            ; ===========================================================================
0001392E                            
0001392E                            Obj64_Delete3:				; XREF: Obj64_Index
0001392E 6000 AE62                  		bra.w	DeleteObject
00013932                            ; ===========================================================================
00013932                            
00013932                            Obj64_BblMaker:				; XREF: Obj64_Index
00013932 4A68 0036                  		tst.w	$36(a0)
00013936 6600                       		bne.s	loc_12874
00013938 3038 F646                  		move.w	($FFFFF646).w,d0
0001393C B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00013940 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00013944 4A28 0001                  		tst.b	1(a0)
00013948 6A00 0000                  		bpl.w	Obj64_ChkDel
0001394C 5368 0038                  		subq.w	#1,$38(a0)
00013950 6A00 0000                  		bpl.w	loc_12914
00013954 317C 0001 0036             		move.w	#1,$36(a0)
0001395A                            
0001395A                            loc_1283A:
0001395A 4EB9 0000 33F0             		jsr	(RandomNumber).l
00013960 3200                       		move.w	d0,d1
00013962 0240 0007                  		andi.w	#7,d0
00013966 0C40 0006                  		cmpi.w	#6,d0
0001396A 64EE                       		bcc.s	loc_1283A
0001396C                            
0001396C 1140 0034                  		move.b	d0,$34(a0)
00013970 0241 000C                  		andi.w	#$C,d1
00013974 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
0001397A D2C1                       		adda.w	d1,a1
0001397C 2149 003C                  		move.l	a1,$3C(a0)
00013980 5328 0032                  		subq.b	#1,$32(a0)
00013984 6A00                       		bpl.s	loc_12872
00013986 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001398C 08E8 0007 0036             		bset	#7,$36(a0)
00013992                            
00013992                            loc_12872:
00013992 6000                       		bra.s	loc_1287C
00013994                            ; ===========================================================================
00013994                            
00013994                            loc_12874:				; XREF: Obj64_BblMaker
00013994 5368 0038                  		subq.w	#1,$38(a0)
00013998 6A00 0000                  		bpl.w	loc_12914
0001399C                            
0001399C                            loc_1287C:
0001399C 4EB9 0000 33F0             		jsr	(RandomNumber).l
000139A2 0240 001F                  		andi.w	#$1F,d0
000139A6 3140 0038                  		move.w	d0,$38(a0)
000139AA 6100 B230                  		bsr.w	SingleObjLoad
000139AE 6600                       		bne.s	loc_128F8
000139B0 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000139B4 3368 0008 0008             		move.w	8(a0),8(a1)
000139BA 4EB9 0000 33F0             		jsr	(RandomNumber).l
000139C0 0240 000F                  		andi.w	#$F,d0
000139C4 5140                       		subq.w	#8,d0
000139C6 D169 0008                  		add.w	d0,8(a1)
000139CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000139D0 7000                       		moveq	#0,d0
000139D2 1028 0034                  		move.b	$34(a0),d0
000139D6 2468 003C                  		movea.l	$3C(a0),a2
000139DA 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000139E0 0828 0007 0036             		btst	#7,$36(a0)
000139E6 6700                       		beq.s	loc_128F8
000139E8 4EB9 0000 33F0             		jsr	(RandomNumber).l
000139EE 0240 0003                  		andi.w	#3,d0
000139F2 6600                       		bne.s	loc_128E4
000139F4 08E8 0006 0036             		bset	#6,$36(a0)
000139FA 6600                       		bne.s	loc_128F8
000139FC 137C 0002 0028             		move.b	#2,$28(a1)
00013A02                            
00013A02                            loc_128E4:
00013A02 4A28 0034                  		tst.b	$34(a0)
00013A06 6600                       		bne.s	loc_128F8
00013A08 08E8 0006 0036             		bset	#6,$36(a0)
00013A0E 6600                       		bne.s	loc_128F8
00013A10 137C 0002 0028             		move.b	#2,$28(a1)
00013A16                            
00013A16                            loc_128F8:
00013A16 5328 0034                  		subq.b	#1,$34(a0)
00013A1A 6A00                       		bpl.s	loc_12914
00013A1C 4EB9 0000 33F0             		jsr	(RandomNumber).l
00013A22 0240 007F                  		andi.w	#$7F,d0
00013A26 0640 0080                  		addi.w	#$80,d0
00013A2A D168 0038                  		add.w	d0,$38(a0)
00013A2E 4268 0036                  		clr.w	$36(a0)
00013A32                            
00013A32                            loc_12914:
00013A32 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013A38 4EB9 0000 B7A4             		jsr	AnimateSprite
00013A3E                            
00013A3E                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00013A3E 3028 0008                  		move.w	8(a0),d0
00013A42 0240 FF80                  		andi.w	#$FF80,d0
00013A46 3238 F700                  		move.w	($FFFFF700).w,d1
00013A4A 0441 0080                  		subi.w	#$80,d1
00013A4E 0241 FF80                  		andi.w	#$FF80,d1
00013A52 9041                       		sub.w	d1,d0
00013A54 0C40 0280                  		cmpi.w	#$280,d0
00013A58 6200 AD38                  		bhi.w	DeleteObject
00013A5C 3038 F646                  		move.w	($FFFFF646).w,d0
00013A60 B068 000C                  		cmp.w	$C(a0),d0
00013A64 6500 ACF0                  		bcs.w	DisplaySprite
00013A68 4E75                       		rts	
00013A6A                            ; ===========================================================================
00013A6A                            ; bubble production sequence
00013A6A                            
00013A6A                            ; 0 = small bubble, 1 =	large bubble
00013A6A                            
00013A6A 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013A7C                            
00013A7C                            ; ===========================================================================
00013A7C                            
00013A7C                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013A7C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013A80 6B00                       		bmi.s	loc_12998
00013A82 43F8 D000                  		lea	($FFFFD000).w,a1
00013A86 3029 0008                  		move.w	8(a1),d0
00013A8A 3228 0008                  		move.w	8(a0),d1
00013A8E 0441 0010                  		subi.w	#$10,d1
00013A92 B240                       		cmp.w	d0,d1
00013A94 6400                       		bcc.s	loc_12998
00013A96 0641 0020                  		addi.w	#$20,d1
00013A9A B240                       		cmp.w	d0,d1
00013A9C 6500                       		bcs.s	loc_12998
00013A9E 3029 000C                  		move.w	$C(a1),d0
00013AA2 3228 000C                  		move.w	$C(a0),d1
00013AA6 B240                       		cmp.w	d0,d1
00013AA8 6400                       		bcc.s	loc_12998
00013AAA 0641 0010                  		addi.w	#$10,d1
00013AAE B240                       		cmp.w	d0,d1
00013AB0 6500                       		bcs.s	loc_12998
00013AB2 7001                       		moveq	#1,d0
00013AB4 4E75                       		rts	
00013AB6                            ; ===========================================================================
00013AB6                            
00013AB6                            loc_12998:
00013AB6 7000                       		moveq	#0,d0
00013AB8 4E75                       		rts	
00013ABA                            ; ===========================================================================
00013ABA                            Ani_obj64:
00013ABA                            	include "_anim\obj64.asm"
00013ABA                            ; ---------------------------------------------------------------------------
00013ABA                            ; Animation script - bubbles (LZ)
00013ABA                            ; ---------------------------------------------------------------------------
00013ABA 0000                       		dc.w byte_129AA-Ani_obj64
00013ABC 0000                       		dc.w byte_129B0-Ani_obj64
00013ABE 0000                       		dc.w byte_129B6-Ani_obj64
00013AC0 0000                       		dc.w byte_129BE-Ani_obj64
00013AC2 0000                       		dc.w byte_129BE-Ani_obj64
00013AC4 0000                       		dc.w byte_129C0-Ani_obj64
00013AC6 0000                       		dc.w byte_129C6-Ani_obj64
00013AC8 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00013ACE 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00013AD4 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00013ADC 04FC                       byte_129BE:	dc.b 4,	$FC
00013ADE 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00013AE4 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00013AEA 00                         		even
00013AEA 00                         		even
00013AEA                            
00013AEA                            ; ---------------------------------------------------------------------------
00013AEA                            ; Sprite mappings - bubbles (LZ)
00013AEA                            ; ---------------------------------------------------------------------------
00013AEA                            Map_obj64:
00013AEA                            	include "_maps\obj64.asm"
00013AEA                            ; ---------------------------------------------------------------------------
00013AEA                            ; Sprite mappings - bubbles (LZ)
00013AEA                            ; ---------------------------------------------------------------------------
00013AEA 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00013AEE 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00013AF2 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00013AF6 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00013AFA 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00013AFE 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00013B02 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00013B06 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00013B0A 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00013B0E 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00013B12 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013B16 0000                       		dc.w byte_12A9C-Map_obj64
00013B18 01                         byte_129FA:	dc.b 1
00013B19 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00013B1E 01                         byte_12A00:	dc.b 1
00013B1F FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00013B24 01                         byte_12A06:	dc.b 1
00013B25 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00013B2A 01                         byte_12A0C:	dc.b 1
00013B2B F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00013B30 01                         byte_12A12:	dc.b 1
00013B31 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00013B36 01                         byte_12A18:	dc.b 1
00013B37 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00013B3C 01                         byte_12A1E:	dc.b 1
00013B3D F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00013B42 04                         byte_12A24:	dc.b 4
00013B43 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013B48 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00013B4D 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00013B52 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013B57 04                         byte_12A39:	dc.b 4
00013B58 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013B5D F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013B62 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013B67 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013B6C 01                         byte_12A4E:	dc.b 1
00013B6D F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013B72 01                         byte_12A54:	dc.b 1
00013B73 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013B78 01                         byte_12A5A:	dc.b 1
00013B79 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013B7E 01                         byte_12A60:	dc.b 1
00013B7F F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00013B84 01                         byte_12A66:	dc.b 1
00013B85 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013B8A 01                         byte_12A6C:	dc.b 1
00013B8B F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013B90 01                         byte_12A72:	dc.b 1
00013B91 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00013B96 01                         byte_12A78:	dc.b 1
00013B97 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013B9C 01                         byte_12A7E:	dc.b 1
00013B9D F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00013BA2 01                         byte_12A84:	dc.b 1
00013BA3 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00013BA8 01                         byte_12A8A:	dc.b 1
00013BA9 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00013BAE 01                         byte_12A90:	dc.b 1
00013BAF F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00013BB4 01                         byte_12A96:	dc.b 1
00013BB5 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00013BBA 00                         byte_12A9C:	dc.b 0
00013BBC 00                         		even
00013BBC 00                         		even
00013BBC                            
00013BBC                            ; ===========================================================================
00013BBC                            ; ---------------------------------------------------------------------------
00013BBC                            ; Object 65 - waterfalls (LZ)
00013BBC                            ; ---------------------------------------------------------------------------
00013BBC                            
00013BBC                            Obj65:					; XREF: Obj_Index
00013BBC 7000                       		moveq	#0,d0
00013BBE 1028 0024                  		move.b	$24(a0),d0
00013BC2 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00013BC6 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00013BCA                            ; ===========================================================================
00013BCA 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00013BCC 0000                       		dc.w Obj65_Animate-Obj65_Index
00013BCE 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013BD0 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013BD2 0000                       		dc.w loc_12B36-Obj65_Index
00013BD4                            ; ===========================================================================
00013BD4                            
00013BD4                            Obj65_Main:				; XREF: Obj65_Index
00013BD4 5828 0024                  		addq.b	#4,$24(a0)
00013BD8 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013BE0 317C 4259 0002             		move.w	#$4259,2(a0)
00013BE6 0028 0004 0001             		ori.b	#4,1(a0)
00013BEC 117C 0018 0019             		move.b	#$18,$19(a0)
00013BF2 117C 0001 0018             		move.b	#1,$18(a0)
00013BF8 1028 0028                  		move.b	$28(a0),d0	; get object type
00013BFC 6A00                       		bpl.s	loc_12AE6
00013BFE 08E8 0007 0002             		bset	#7,2(a0)
00013C04                            
00013C04                            loc_12AE6:
00013C04 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013C08 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00013C0C 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013C10 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013C12 4228 0018                  		clr.b	$18(a0)
00013C16 5528 0024                  		subq.b	#2,$24(a0)
00013C1A 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013C20 6700                       		beq.s	loc_12B0A	; if not, branch
00013C22 117C 0006 0024             		move.b	#6,$24(a0)
00013C28                            
00013C28                            loc_12B0A:
00013C28 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00013C2E 6700                       		beq.s	Obj65_Animate	; if not, branch
00013C30 117C 0008 0024             		move.b	#8,$24(a0)
00013C36                            
00013C36                            Obj65_Animate:				; XREF: Obj65_Index
00013C36 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013C3C 4EB9 0000 B7A4             		jsr	AnimateSprite
00013C42                            
00013C42                            Obj65_ChkDel:				; XREF: Obj65_Index
00013C42 6000 CBBA                  		bra.w	MarkObjGone
00013C46                            ; ===========================================================================
00013C46                            
00013C46                            Obj65_FixHeight:			; XREF: Obj65_Index
00013C46 3038 F646                  		move.w	($FFFFF646).w,d0
00013C4A 0440 0010                  		subi.w	#$10,d0
00013C4E 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00013C52 60E2                       		bra.s	Obj65_Animate
00013C54                            ; ===========================================================================
00013C54                            
00013C54                            loc_12B36:				; XREF: Obj65_Index
00013C54 08A8 0007 0002             		bclr	#7,2(a0)
00013C5A 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013C60 6600                       		bne.s	Obj65_Animate2
00013C62 08E8 0007 0002             		bset	#7,2(a0)
00013C68                            
00013C68                            Obj65_Animate2:
00013C68 60CC                       		bra.s	Obj65_Animate
00013C6A                            ; ===========================================================================
00013C6A                            Ani_obj65:
00013C6A                            	include "_anim\obj65.asm"
00013C6A                            ; ---------------------------------------------------------------------------
00013C6A                            ; Animation script - waterfall (LZ)
00013C6A                            ; ---------------------------------------------------------------------------
00013C6A 0000                       		dc.w byte_12B4E-Ani_obj65
00013C6C 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013C72 00                         		even
00013C72 00                         		even
00013C72                            
00013C72                            ; ---------------------------------------------------------------------------
00013C72                            ; Sprite mappings - waterfalls (LZ)
00013C72                            ; ---------------------------------------------------------------------------
00013C72                            Map_obj65:
00013C72                            	include "_maps\obj65.asm"
00013C72                            ; ---------------------------------------------------------------------------
00013C72                            ; Sprite mappings - waterfalls (LZ)
00013C72                            ; ---------------------------------------------------------------------------
00013C72 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013C76 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013C7A 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013C7E 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013C82 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00013C86 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013C8A 01                         byte_12B6C:	dc.b 1
00013C8B F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013C90 02                         byte_12B72:	dc.b 2
00013C91 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00013C96 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013C9B 02                         byte_12B7D:	dc.b 2
00013C9C F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013CA1 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013CA6 01                         byte_12B88:	dc.b 1
00013CA7 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013CAC 02                         byte_12B8E:	dc.b 2
00013CAD F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013CB2 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013CB7 01                         byte_12B99:	dc.b 1
00013CB8 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00013CBD 01                         byte_12B9F:	dc.b 1
00013CBE F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013CC3 01                         byte_12BA5:	dc.b 1
00013CC4 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00013CC9 02                         byte_12BAB:	dc.b 2
00013CCA F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00013CCF 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013CD4 02                         byte_12BB6:	dc.b 2
00013CD5 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00013CDA F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00013CDF 02                         byte_12BC1:	dc.b 2
00013CE0 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013CE5 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00013CEA 02                         byte_12BCC:	dc.b 2
00013CEB F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013CF0 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013CF6 00                         		even
00013CF6 00                         		even
00013CF6                            
00013CF6                            ; ===========================================================================
00013CF6                            ; ---------------------------------------------------------------------------
00013CF6                            ; Object 01 - Sonic
00013CF6                            ; ---------------------------------------------------------------------------
00013CF6                            
00013CF6                            Obj01:					; XREF: Obj_Index
00013CF6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00013CFA 6700                       		beq.s	Obj01_Normal	; if not, branch
00013CFC 4EF9 0000 0000             		jmp	DebugMode
00013D02                            ; ===========================================================================
00013D02                            
00013D02                            Obj01_Normal:
00013D02 7000                       		moveq	#0,d0
00013D04 1028 0024                  		move.b	$24(a0),d0
00013D08 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00013D0C 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013D10                            ; ===========================================================================
00013D10 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013D12 0000                       		dc.w Obj01_Control-Obj01_Index
00013D14 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013D16 0000                       		dc.w Obj01_Death-Obj01_Index
00013D18 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013D1A                            ; ===========================================================================
00013D1A                            
00013D1A                            Player_Maps:
00013D1A 0000 0000                  	dc.l	Map_Sonic
00013D1E 0000 0000                  	dc.l	Map_Sonic ; gronic
00013D22 0000 0000                  	dc.l	Map_Sonic ; anakama
00013D26 0000 0000                  	dc.l	Map_Sonic ; LimitedSonic
00013D2A                            	; insert player mapping here
00013D2A                            	
00013D2A                            Obj01_Main:				; XREF: Obj01_Index
00013D2A 5428 0024                  		addq.b	#2,$24(a0)
00013D2E 117C 0013 0016             		move.b	#$13,$16(a0)
00013D34 117C 0009 0017             		move.b	#9,$17(a0)
00013D3A                            		
00013D3A 7000                       		moveq	#0,d0
00013D3C 1038 FFE8                  		move.b	(v_character),d0
00013D40 E548                       		lsl.w	#2,d0
00013D42 43FA FFD6                  		lea 	Player_Maps(pc),a1
00013D46 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
00013D4C                            		
00013D4C 317C 0780 0002             		move.w	#$780,2(a0)
00013D52 117C 0002 0018             		move.b	#2,$18(a0)
00013D58 117C 0018 0019             		move.b	#$18,$19(a0)
00013D5E 117C 0004 0001             		move.b	#4,1(a0)
00013D64 31FC 0FFF F760             		move.w	#$FFF,($FFFFF760).w ; Sonic's top speed
00013D6A 31FC 000F F762             		move.w	#$F,($FFFFF762).w ; Sonic's acceleration
00013D70 31FC 0AAA F764             		move.w	#$AAA,($FFFFF764).w ; Sonic's deceleration
00013D76                            
00013D76                            Obj01_Control:				; XREF: Obj01_Index
00013D76 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013D7A 6700                       		beq.s	loc_12C58	; if not, branch
00013D7C 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013D82 6700                       		beq.s	loc_12C58	; if not, branch
00013D84 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013D8A 4238 F7CC                  		clr.b	($FFFFF7CC).w
00013D8E 4E75                       		rts	
00013D90                            ; ===========================================================================
00013D90                            
00013D90                            loc_12C58:
00013D90 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013D94 6600                       		bne.s	loc_12C64	; if yes, branch
00013D96 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013D9C                            
00013D9C                            loc_12C64:
00013D9C 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00013DA2 6600                       		bne.s	loc_12C7E	; if yes, branch
00013DA4 7000                       		moveq	#0,d0
00013DA6 1028 0022                  		move.b	$22(a0),d0
00013DAA 0240 0006                  		andi.w	#6,d0
00013DAE 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00013DB2 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00013DB6                            
00013DB6                            loc_12C7E:
00013DB6 6100                       		bsr.s	Sonic_Display
00013DB8 6100 0000                  		bsr.w	Sonic_RecordPos
00013DBC 6100 0000                  		bsr.w	Sonic_Water
00013DC0 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00013DC6 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00013DCC 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013DD0 6700                       		beq.s	loc_12CA6
00013DD2 4A28 001C                  		tst.b	$1C(a0)
00013DD6 6600                       		bne.s	loc_12CA6
00013DD8 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00013DDE                            
00013DDE                            loc_12CA6:
00013DDE 6100 0000                  		bsr.w	Sonic_Animate
00013DE2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013DE6 6B00                       		bmi.s	loc_12CB6
00013DE8 4EB9 0000 0000             		jsr	TouchResponse
00013DEE                            
00013DEE                            loc_12CB6:
00013DEE 6100 0000                  		bsr.w	Sonic_Loops
00013DF2 6100 0000                  		bsr.w	LoadSonicDynPLC
00013DF6 4E75                       		rts	
00013DF8                            ; ===========================================================================
00013DF8 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00013DFA 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00013DFC 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00013DFE 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013E00                            ; ---------------------------------------------------------------------------
00013E00                            ; Music	to play	after invincibility wears off
00013E00                            ; ---------------------------------------------------------------------------
00013E00                            ; ===========================================================================
00013E00                            
00013E00                            Sonic_Display:				; XREF: loc_12C7E
00013E00 3028 0030                  		move.w	$30(a0),d0
00013E04 6700                       		beq.s	Obj01_Display
00013E06 5368 0030                  		subq.w	#1,$30(a0)
00013E0A E648                       		lsr.w	#3,d0
00013E0C 6400                       		bcc.s	Obj01_ChkInvin
00013E0E                            
00013E0E                            Obj01_Display:
00013E0E 4EBA A946                  		jsr	DisplaySprite
00013E12                            
00013E12                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013E12                             
00013E12                            Obj01_ChkInvin:
00013E12 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013E16 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
00013E1A 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013E1E 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013E22 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013E26 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00013E2A 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013E2E 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013E32 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013E38 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
00013E3C 7000                       		moveq	#0,d0
00013E3E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013E42                             
00013E42 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013E48 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013E4A 43F9 0000 4492             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013E50 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013E52                             
00013E52                            Obj01_GetBgm2:
00013E52 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013E58 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013E5A 43F9 0000 449A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013E60 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013E62                             
00013E62                            Obj01_GetBgm3:
00013E62 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013E68 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013E6A 43F9 0000 44A2             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013E70 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013E72                             
00013E72                            Obj01_GetBgm4:
00013E72 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013E78 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013E7A 43F9 0000 44AA             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013E80                             
00013E80                            Obj01_PlayMusic:
00013E80 1031 0000                  		move.b	(a1,d0.w),d0
00013E84 4EB9 0000 1C74             		jsr	(PlaySound).l	; play normal music
00013E8A                             
00013E8A                            ; NineKode ends here.
00013E8A                            
00013E8A                            Obj01_RmvInvin:
00013E8A 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013E90                            
00013E90                            Obj01_ChkShoes:
00013E90 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013E94 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013E96 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013E9A 6700                       		beq.s	Obj01_ExitChk
00013E9C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00013EA0 6600                       		bne.s	Obj01_ExitChk
00013EA2 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013EA8 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013EAE 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013EB4 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00013EBA 303C 00E3                  		move.w	#$E3,d0
00013EBE 4EF9 0000 1C74             		jmp	(PlaySound).l	; run music at normal speed
00013EC4                            ; ===========================================================================
00013EC4                            
00013EC4                            Obj01_ExitChk:
00013EC4 4E75                       		rts	
00013EC6                            
00013EC6                            ; ---------------------------------------------------------------------------
00013EC6                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00013EC6                            ; ---------------------------------------------------------------------------
00013EC6                            
00013EC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EC6                            
00013EC6                            
00013EC6                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00013EC6 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00013ECA 43F8 CB00                  		lea	($FFFFCB00).w,a1
00013ECE 43F1 0000                  		lea	(a1,d0.w),a1
00013ED2 32E8 0008                  		move.w	8(a0),(a1)+
00013ED6 32E8 000C                  		move.w	$C(a0),(a1)+
00013EDA 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00013EDE 4E75                       		rts	
00013EE0                            ; End of function Sonic_RecordPos
00013EE0                            
00013EE0                            ; ---------------------------------------------------------------------------
00013EE0                            ; Subroutine for Sonic when he's underwater
00013EE0                            ; ---------------------------------------------------------------------------
00013EE0                            
00013EE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EE0                            
00013EE0                            
00013EE0                            Sonic_Water:				; XREF: loc_12C7E
00013EE0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00013EE6 6700                       		beq.s	Obj01_InWater	; if yes, branch
00013EE8                            
00013EE8                            locret_12D80:
00013EE8 4E75                       		rts	
00013EEA                            ; ===========================================================================
00013EEA                            
00013EEA                            Obj01_InWater:
00013EEA 3038 F646                  		move.w	($FFFFF646).w,d0
00013EEE B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013EF2 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013EF4 08E8 0006 0022             		bset	#6,$22(a0)
00013EFA 66EC                       		bne.s	locret_12D80
00013EFC 6100 0000                  		bsr.w	ResumeMusic
00013F00 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013F06 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013F0C 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013F12 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013F18 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013F1E E0E8 0010                  		asr	$10(a0)
00013F22 E0E8 0012                  		asr	$12(a0)
00013F26 E0E8 0012                  		asr	$12(a0)
00013F2A 67BC                       		beq.s	locret_12D80
00013F2C 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013F32 303C 00AA                  		move.w	#$AA,d0
00013F36 4EF9 0000 1C7A             		jmp	(PlaySound_Special).l ;	play splash sound
00013F3C                            ; ===========================================================================
00013F3C                            
00013F3C                            Obj01_OutWater:
00013F3C 08A8 0006 0022             		bclr	#6,$22(a0)
00013F42 67A4                       		beq.s	locret_12D80
00013F44 6100 0000                  		bsr.w	ResumeMusic
00013F48 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013F4E 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013F54 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013F5A E1E8 0012                  		asl	$12(a0)
00013F5E 6700 FF88                  		beq.w	locret_12D80
00013F62 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013F68 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013F6E 6E00                       		bgt.s	loc_12E0E
00013F70 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013F76                            
00013F76                            loc_12E0E:
00013F76 303C 00AA                  		move.w	#$AA,d0
00013F7A 4EF9 0000 1C7A             		jmp	(PlaySound_Special).l ;	play splash sound
00013F80                            ; End of function Sonic_Water
00013F80                            
00013F80                            ; ===========================================================================
00013F80                            ; ---------------------------------------------------------------------------
00013F80                            ; Modes	for controlling	Sonic
00013F80                            ; ---------------------------------------------------------------------------
00013F80                            
00013F80                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013F80 6100 0000                  		bsr.w	Sonic_Jump
00013F84 6100 0000                  		bsr.w	Sonic_SlopeResist
00013F88 6100 0000                  		bsr.w	Sonic_Move
00013F8C 6100 0000                  		bsr.w	Sonic_Roll
00013F90 6100 0000                  		bsr.w	Sonic_LevelBound
00013F94 4EBA A79A                  		jsr	SpeedToPos
00013F98 6100 0000                  		bsr.w	Sonic_AnglePos
00013F9C 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013FA0 4E75                       		rts	
00013FA2                            ; ===========================================================================
00013FA2                            
00013FA2                            Obj01_MdJump:				; XREF: Obj01_Modes
00013FA2 6100 0000                  		bsr.w	Sonic_JumpHeight
00013FA6 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013FAA 6100 0000                  		bsr.w	Sonic_LevelBound
00013FAE 4EBA A70E                  		jsr	ObjectFall
00013FB2 0828 0006 0022             		btst	#6,$22(a0)
00013FB8 6700                       		beq.s	loc_12E5C
00013FBA 0468 0028 0012             		subi.w	#$28,$12(a0)
00013FC0                            
00013FC0                            loc_12E5C:
00013FC0 6100 0000                  		bsr.w	Sonic_JumpAngle
00013FC4 6100 0000                  		bsr.w	Sonic_Floor
00013FC8 4E75                       		rts	
00013FCA                            ; ===========================================================================
00013FCA                            
00013FCA                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013FCA 6100 0000                  		bsr.w	Sonic_Jump
00013FCE 6100 0000                  		bsr.w	Sonic_RollRepel
00013FD2 6100 0000                  		bsr.w	Sonic_RollSpeed
00013FD6 6100 0000                  		bsr.w	Sonic_LevelBound
00013FDA 4EBA A754                  		jsr	SpeedToPos
00013FDE 6100 0000                  		bsr.w	Sonic_AnglePos
00013FE2 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013FE6 4E75                       		rts	
00013FE8                            ; ===========================================================================
00013FE8                            
00013FE8                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013FE8 6100 0000                  		bsr.w	Sonic_JumpHeight
00013FEC 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013FF0 6100 0000                  		bsr.w	Sonic_LevelBound
00013FF4 6100 0000                  		bsr.w	Sonic_AirUnroll
00013FF8 4EBA A6C4                  		jsr	ObjectFall
00013FFC 0828 0006 0022             		btst	#6,$22(a0)
00014002 6700                       		beq.s	loc_12EA6
00014004 0468 0028 0012             		subi.w	#$28,$12(a0)
0001400A                            
0001400A                            loc_12EA6:
0001400A 6100 0000                  		bsr.w	Sonic_JumpAngle
0001400E 6100 0000                  		bsr.w	Sonic_Floor
00014012 4E75                       		rts	
00014014                            ; ---------------------------------------------------------------------------
00014014                            ; Subroutine to	make Sonic walk/run
00014014                            ; ---------------------------------------------------------------------------
00014014                            
00014014                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014014                            
00014014                            
00014014                            Sonic_Move:				; XREF: Obj01_MdNormal
00014014 3C38 F760                  		move.w	($FFFFF760).w,d6
00014018 3A38 F762                  		move.w	($FFFFF762).w,d5
0001401C 3838 F764                  		move.w	($FFFFF764).w,d4
00014020 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014024 6600 0000                  		bne.w	loc_12FEE
00014028 4A68 003E                  		tst.w	$3E(a0)
0001402C 6600 0000                  		bne.w	Obj01_ResetScr
00014030 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014036 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00014038 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001403E 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00014040 6100 0000                  		bsr.w	Sonic_MoveLeft
00014044                            
00014044                            Obj01_NotLeft:
00014044 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001404A 6700                       		beq.s	Obj01_NotRight	; if not, branch
0001404C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00014052 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00014054 6100 0000                  		bsr.w	Sonic_MoveLeft
00014058 6000                       		bra.s	Obj01_NotRight
0001405A                            
0001405A                            Obj01_MoveRight:
0001405A 6100 0000                  		bsr.w	Sonic_MoveRight
0001405E                            
0001405E                            Obj01_NotRight:
0001405E 1028 0026                  		move.b	$26(a0),d0
00014062 0600 0020                  		addi.b	#$20,d0
00014066 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
0001406A 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001406E 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00014072 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014076 08A8 0005 0022             		bclr	#5,$22(a0)
0001407C 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014082 0828 0003 0022             		btst	#3,$22(a0)
00014088 6700                       		beq.s	Sonic_Balance
0001408A 7000                       		moveq	#0,d0
0001408C 1028 003D                  		move.b	$3D(a0),d0
00014090 ED48                       		lsl.w	#6,d0
00014092 43F8 D000                  		lea	($FFFFD000).w,a1
00014096 43F1 0000                  		lea	(a1,d0.w),a1
0001409A 4A29 0022                  		tst.b	$22(a1)
0001409E 6B00                       		bmi.s	Sonic_LookUp
000140A0 7200                       		moveq	#0,d1
000140A2 1229 0019                  		move.b	$19(a1),d1
000140A6 3401                       		move.w	d1,d2
000140A8 D442                       		add.w	d2,d2
000140AA 5942                       		subq.w	#4,d2
000140AC D268 0008                  		add.w	8(a0),d1
000140B0 9269 0008                  		sub.w	8(a1),d1
000140B4 0C41 0004                  		cmpi.w	#4,d1
000140B8 6D00                       		blt.s	loc_12F6A
000140BA B242                       		cmp.w	d2,d1
000140BC 6C00                       		bge.s	loc_12F5A
000140BE 6000                       		bra.s	Sonic_LookUp
000140C0                            ; ===========================================================================
000140C0                            
000140C0                            Sonic_Balance:
000140C0 4EB9 0000 0000             		jsr	ObjHitFloor
000140C6 0C41 000C                  		cmpi.w	#$C,d1
000140CA 6D00                       		blt.s	Sonic_LookUp
000140CC 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000140D2 6600                       		bne.s	loc_12F62
000140D4                            
000140D4                            loc_12F5A:
000140D4 08A8 0000 0022             		bclr	#0,$22(a0)
000140DA 6000                       		bra.s	loc_12F70
000140DC                            ; ===========================================================================
000140DC                            
000140DC                            loc_12F62:
000140DC 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000140E2 6600                       		bne.s	Sonic_LookUp
000140E4                            
000140E4                            loc_12F6A:
000140E4 08E8 0000 0022             		bset	#0,$22(a0)
000140EA                            
000140EA                            loc_12F70:
000140EA 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000140F0 6000                       		bra.s	Obj01_ResetScr
000140F2                            ; ===========================================================================
000140F2                            
000140F2                            Sonic_LookUp:
000140F2 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000140F8 6700                       		beq.s	Sonic_Duck	; if not, branch
000140FA 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00014100 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00014106 6700                       		beq.s	loc_12FC2
00014108 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001410C 6000                       		bra.s	loc_12FC2
0001410E                            ; ===========================================================================
0001410E                            
0001410E                            Sonic_Duck:
0001410E 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00014114 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00014116 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001411C 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00014122 6700                       		beq.s	loc_12FC2
00014124 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014128 6000                       		bra.s	loc_12FC2
0001412A                            ; ===========================================================================
0001412A                            
0001412A                            Obj01_ResetScr:
0001412A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00014130 6700                       		beq.s	loc_12FC2	; if yes, branch
00014132 6400                       		bcc.s	loc_12FBE
00014134 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00014138                            
00014138                            loc_12FBE:
00014138 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
0001413C                            
0001413C                            loc_12FC2:
0001413C 1038 F602                  		move.b	($FFFFF602).w,d0
00014140 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00014144 6600                       		bne.s	loc_12FEE	; if yes, branch
00014146 3028 0014                  		move.w	$14(a0),d0
0001414A 6700                       		beq.s	loc_12FEE
0001414C 6B00                       		bmi.s	loc_12FE2
0001414E 9045                       		sub.w	d5,d0
00014150 6400                       		bcc.s	loc_12FDC
00014152 303C 0000                  		move.w	#0,d0
00014156                            
00014156                            loc_12FDC:
00014156 3140 0014                  		move.w	d0,$14(a0)
0001415A 6000                       		bra.s	loc_12FEE
0001415C                            ; ===========================================================================
0001415C                            
0001415C                            loc_12FE2:
0001415C D045                       		add.w	d5,d0
0001415E 6400                       		bcc.s	loc_12FEA
00014160 303C 0000                  		move.w	#0,d0
00014164                            
00014164                            loc_12FEA:
00014164 3140 0014                  		move.w	d0,$14(a0)
00014168                            
00014168                            loc_12FEE:
00014168 1028 0026                  		move.b	$26(a0),d0
0001416C 4EB9 0000 3416             		jsr	(CalcSine).l
00014172 C3E8 0014                  		muls.w	$14(a0),d1
00014176 E081                       		asr.l	#8,d1
00014178 3141 0010                  		move.w	d1,$10(a0)
0001417C C1E8 0014                  		muls.w	$14(a0),d0
00014180 E080                       		asr.l	#8,d0
00014182 3140 0012                  		move.w	d0,$12(a0)
00014186                            
00014186                            loc_1300C:
00014186 1028 0026                  		move.b	$26(a0),d0
0001418A 0600 0040                  		addi.b	#$40,d0
0001418E 6B00                       		bmi.s	locret_1307C
00014190 123C 0040                  		move.b	#$40,d1
00014194 4A68 0014                  		tst.w	$14(a0)
00014198 6700                       		beq.s	locret_1307C
0001419A 6B00                       		bmi.s	loc_13024
0001419C 4441                       		neg.w	d1
0001419E                            
0001419E                            loc_13024:
0001419E 1028 0026                  		move.b	$26(a0),d0
000141A2 D001                       		add.b	d1,d0
000141A4 3F00                       		move.w	d0,-(sp)
000141A6 6100 0000                  		bsr.w	Sonic_WalkSpeed
000141AA 301F                       		move.w	(sp)+,d0
000141AC 4A41                       		tst.w	d1
000141AE 6A00                       		bpl.s	locret_1307C
000141B0 E141                       		asl.w	#8,d1
000141B2 0600 0020                  		addi.b	#$20,d0
000141B6 0200 00C0                  		andi.b	#$C0,d0
000141BA 6700                       		beq.s	loc_13078
000141BC 0C00 0040                  		cmpi.b	#$40,d0
000141C0 6700                       		beq.s	loc_13066
000141C2 0C00 0080                  		cmpi.b	#$80,d0
000141C6 6700                       		beq.s	loc_13060
000141C8 D368 0010                  		add.w	d1,$10(a0)
000141CC 08E8 0005 0022             		bset	#5,$22(a0)
000141D2 317C 0000 0014             		move.w	#0,$14(a0)
000141D8 4E75                       		rts	
000141DA                            ; ===========================================================================
000141DA                            
000141DA                            loc_13060:
000141DA 9368 0012                  		sub.w	d1,$12(a0)
000141DE 4E75                       		rts	
000141E0                            ; ===========================================================================
000141E0                            
000141E0                            loc_13066:
000141E0 9368 0010                  		sub.w	d1,$10(a0)
000141E4 08E8 0005 0022             		bset	#5,$22(a0)
000141EA 317C 0000 0014             		move.w	#0,$14(a0)
000141F0 4E75                       		rts	
000141F2                            ; ===========================================================================
000141F2                            
000141F2                            loc_13078:
000141F2 D368 0012                  		add.w	d1,$12(a0)
000141F6                            
000141F6                            locret_1307C:
000141F6 4E75                       		rts	
000141F8                            ; End of function Sonic_Move
000141F8                            
000141F8                            
000141F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141F8                            
000141F8                            
000141F8                            Sonic_MoveLeft:				; XREF: Sonic_Move
000141F8 3028 0014                  		move.w	$14(a0),d0
000141FC 6700                       		beq.s	loc_13086
000141FE 6A00                       		bpl.s	loc_130B2
00014200                            
00014200                            loc_13086:
00014200 08E8 0000 0022             		bset	#0,$22(a0)
00014206 6600                       		bne.s	loc_1309A
00014208 08A8 0005 0022             		bclr	#5,$22(a0)
0001420E 117C 0001 001D             		move.b	#1,$1D(a0)
00014214                            
00014214                            loc_1309A:
00014214 9045                       		sub.w	d5,d0
00014216 3206                       		move.w	d6,d1
00014218 4441                       		neg.w	d1
0001421A B041                       		cmp.w	d1,d0
0001421C 6E00                       		bgt.s	loc_130A6
0001421E 3001                       		move.w	d1,d0
00014220                            
00014220                            loc_130A6:
00014220 3140 0014                  		move.w	d0,$14(a0)
00014224 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001422A 4E75                       		rts	
0001422C                            ; ===========================================================================
0001422C                            
0001422C                            loc_130B2:				; XREF: Sonic_MoveLeft
0001422C 9044                       		sub.w	d4,d0
0001422E 6400                       		bcc.s	loc_130BA
00014230 303C FF80                  		move.w	#-$80,d0
00014234                            
00014234                            loc_130BA:
00014234 3140 0014                  		move.w	d0,$14(a0)
00014238 1028 0026                  		move.b	$26(a0),d0
0001423C 0600 0020                  		addi.b	#$20,d0
00014240 0200 00C0                  		andi.b	#$C0,d0
00014244 6600                       		bne.s	locret_130E8
00014246 0C40 0400                  		cmpi.w	#$400,d0
0001424A 6D00                       		blt.s	locret_130E8
0001424C 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00014252 08A8 0000 0022             		bclr	#0,$22(a0)
00014258 303C 00A4                  		move.w	#$A4,d0
0001425C 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play stopping sound
00014262                            
00014262                            locret_130E8:
00014262 4E75                       		rts	
00014264                            ; End of function Sonic_MoveLeft
00014264                            
00014264                            
00014264                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014264                            
00014264                            
00014264                            Sonic_MoveRight:			; XREF: Sonic_Move
00014264 3028 0014                  		move.w	$14(a0),d0
00014268 6B00                       		bmi.s	loc_13118
0001426A 08A8 0000 0022             		bclr	#0,$22(a0)
00014270 6700                       		beq.s	loc_13104
00014272 08A8 0005 0022             		bclr	#5,$22(a0)
00014278 117C 0001 001D             		move.b	#1,$1D(a0)
0001427E                            
0001427E                            loc_13104:
0001427E D045                       		add.w	d5,d0
00014280 B046                       		cmp.w	d6,d0
00014282 6D00                       		blt.s	loc_1310C
00014284 3006                       		move.w	d6,d0
00014286                            
00014286                            loc_1310C:
00014286 3140 0014                  		move.w	d0,$14(a0)
0001428A 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00014290 4E75                       		rts	
00014292                            ; ===========================================================================
00014292                            
00014292                            loc_13118:				; XREF: Sonic_MoveRight
00014292 D044                       		add.w	d4,d0
00014294 6400                       		bcc.s	loc_13120
00014296 303C 0080                  		move.w	#$80,d0
0001429A                            
0001429A                            loc_13120:
0001429A 3140 0014                  		move.w	d0,$14(a0)
0001429E 1028 0026                  		move.b	$26(a0),d0
000142A2 0600 0020                  		addi.b	#$20,d0
000142A6 0200 00C0                  		andi.b	#$C0,d0
000142AA 6600                       		bne.s	locret_1314E
000142AC 0C40 FC00                  		cmpi.w	#-$400,d0
000142B0 6E00                       		bgt.s	locret_1314E
000142B2 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000142B8 08E8 0000 0022             		bset	#0,$22(a0)
000142BE 303C 00A4                  		move.w	#$A4,d0
000142C2 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play stopping sound
000142C8                            
000142C8                            locret_1314E:
000142C8 4E75                       		rts	
000142CA                            ; End of function Sonic_MoveRight
000142CA                            
000142CA                            ; ---------------------------------------------------------------------------
000142CA                            ; Subroutine to	change Sonic's speed as he rolls
000142CA                            ; ---------------------------------------------------------------------------
000142CA                            
000142CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000142CA                            
000142CA                            
000142CA                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000142CA 3C38 F760                  		move.w	($FFFFF760).w,d6
000142CE E346                       		asl.w	#1,d6
000142D0 3A38 F762                  		move.w	($FFFFF762).w,d5
000142D4 E245                       		asr.w	#1,d5
000142D6 3838 F764                  		move.w	($FFFFF764).w,d4
000142DA E444                       		asr.w	#2,d4
000142DC 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000142E0 6600 0000                  		bne.w	loc_131CC
000142E4 4A68 003E                  		tst.w	$3E(a0)
000142E8 6600                       		bne.s	loc_13188
000142EA 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000142F0 6700                       		beq.s	loc_1317C	; if not, branch
000142F2 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000142F8 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
000142FA 6100 0000                  		bsr.w	Sonic_RollLeft
000142FE                            
000142FE                            loc_1317C:
000142FE 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014304 6700                       		beq.s	loc_13188	; if not, branch
00014306 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001430C 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
0001430E 6100 0000                  		bsr.w	Sonic_RollLeft
00014312 6000                       		bra.s	loc_13188
00014314                            
00014314                            SonicRS_RollRight:
00014314 6100 0000                  		bsr.w	Sonic_RollRight
00014318                            
00014318                            loc_13188:
00014318 3028 0014                  		move.w	$14(a0),d0
0001431C 6700                       		beq.s	loc_131AA
0001431E 6B00                       		bmi.s	loc_1319E
00014320 9045                       		sub.w	d5,d0
00014322 6400                       		bcc.s	loc_13198
00014324 303C 0000                  		move.w	#0,d0
00014328                            
00014328                            loc_13198:
00014328 3140 0014                  		move.w	d0,$14(a0)
0001432C 6000                       		bra.s	loc_131AA
0001432E                            ; ===========================================================================
0001432E                            
0001432E                            loc_1319E:				; XREF: Sonic_RollSpeed
0001432E D045                       		add.w	d5,d0
00014330 6400                       		bcc.s	loc_131A6
00014332 303C 0000                  		move.w	#0,d0
00014336                            
00014336                            loc_131A6:
00014336 3140 0014                  		move.w	d0,$14(a0)
0001433A                            
0001433A                            loc_131AA:
0001433A 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001433E 6600                       		bne.s	loc_131CC	; if yes, branch
00014340 08A8 0002 0022             		bclr	#2,$22(a0)
00014346 117C 0013 0016             		move.b	#$13,$16(a0)
0001434C 117C 0009 0017             		move.b	#9,$17(a0)
00014352 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014358 5B68 000C                  		subq.w	#5,$C(a0)
0001435C                            
0001435C                            loc_131CC:
0001435C 1028 0026                  		move.b	$26(a0),d0
00014360 4EB9 0000 3416             		jsr	(CalcSine).l
00014366 C1E8 0014                  		muls.w	$14(a0),d0
0001436A E080                       		asr.l	#8,d0
0001436C 3140 0012                  		move.w	d0,$12(a0)
00014370 C3E8 0014                  		muls.w	$14(a0),d1
00014374 E081                       		asr.l	#8,d1
00014376 0C41 1000                  		cmpi.w	#$1000,d1
0001437A 6F00                       		ble.s	loc_131F0
0001437C 323C 1000                  		move.w	#$1000,d1
00014380                            
00014380                            loc_131F0:
00014380 0C41 F000                  		cmpi.w	#-$1000,d1
00014384 6C00                       		bge.s	loc_131FA
00014386 323C F000                  		move.w	#-$1000,d1
0001438A                            
0001438A                            loc_131FA:
0001438A 3141 0010                  		move.w	d1,$10(a0)
0001438E 6000 FDF6                  		bra.w	loc_1300C
00014392                            ; End of function Sonic_RollSpeed
00014392                            
00014392                            
00014392                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014392                            
00014392                            
00014392                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00014392 3028 0014                  		move.w	$14(a0),d0
00014396 6700                       		beq.s	loc_1320A
00014398 6A00                       		bpl.s	loc_13218
0001439A                            
0001439A                            loc_1320A:
0001439A 08E8 0000 0022             		bset	#0,$22(a0)
000143A0 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000143A6 4E75                       		rts	
000143A8                            ; ===========================================================================
000143A8                            
000143A8                            loc_13218:
000143A8 9044                       		sub.w	d4,d0
000143AA 6400                       		bcc.s	loc_13220
000143AC 303C FF80                  		move.w	#-$80,d0
000143B0                            
000143B0                            loc_13220:
000143B0 3140 0014                  		move.w	d0,$14(a0)
000143B4 4E75                       		rts	
000143B6                            ; End of function Sonic_RollLeft
000143B6                            
000143B6                            
000143B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000143B6                            
000143B6                            
000143B6                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000143B6 3028 0014                  		move.w	$14(a0),d0
000143BA 6B00                       		bmi.s	loc_1323A
000143BC 08A8 0000 0022             		bclr	#0,$22(a0)
000143C2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000143C8 4E75                       		rts	
000143CA                            ; ===========================================================================
000143CA                            
000143CA                            loc_1323A:
000143CA D044                       		add.w	d4,d0
000143CC 6400                       		bcc.s	loc_13242
000143CE 303C 0080                  		move.w	#$80,d0
000143D2                            
000143D2                            loc_13242:
000143D2 3140 0014                  		move.w	d0,$14(a0)
000143D6 4E75                       		rts	
000143D8                            ; End of function Sonic_RollRight
000143D8                            
000143D8                            Sonic_AirUnroll:
000143D8                            		
000143D8 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
000143DC 6600                       		bne.s	@timer
000143DE 1038 F605                  		move.b	($FFFFF605).w,d0
000143E2 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
000143E6 6700                       		beq.s	@end	; if not, branch
000143E8 08A8 0002 0022             		bclr	#2,$22(a0)
000143EE 117C 0013 0016             		move.b	#$13,$16(a0)
000143F4 117C 0009 0017             		move.b	#9,$17(a0)
000143FA 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00014400 303C 00A5                  		move.w	#$A5,d0
00014404 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play fart sound
0001440A 2028 0010                  		move.l	$10(a0),d0
0001440E D080                       		add.l	d0,d0
00014410 2140 0010                  		move.l	d0,$10(a0)
00014414 5B68 000C                  		subq.w	#5,$C(a0)
00014418                            	@end:
00014418 4E75                       		rts
0001441A                            	@timer:
0001441A 5328 003A                  		subq.b	#1,$3A(a0)
0001441E 4E75                       		rts
00014420                            
00014420                            ; ---------------------------------------------------------------------------
00014420                            ; Subroutine to	change Sonic's direction while jumping
00014420                            ; ---------------------------------------------------------------------------
00014420                            
00014420                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014420                            
00014420                            
00014420                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014420 3C38 F760                  		move.w	($FFFFF760).w,d6
00014424 3A38 F762                  		move.w	($FFFFF762).w,d5
00014428 E345                       		asl.w	#1,d5
0001442A 0828 0004 0022             		btst	#4,$22(a0)
00014430 6600                       		bne.s	Obj01_ResetScr2
00014432 3028 0010                  		move.w	$10(a0),d0
00014436 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001443C 6700                       		beq.s	loc_13278	; if not, branch
0001443E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00014444 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00014446 6100 0000                  		bsr.w	SonicCJD_JumpLeft
0001444A 6E00                       		bgt.s	loc_13278
0001444C 3001                       		move.w	d1,d0
0001444E                            
0001444E                            loc_13278:
0001444E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014454 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00014456 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001445C 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
0001445E 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00014462 6E00                       		bgt.s	Obj01_JumpMove
00014464 3001                       		move.w	d1,d0
00014466 6000                       		bra.s	Obj01_JumpMove
00014468                            
00014468                            SonicCJD_JumpLeft:
00014468 08E8 0000 0022             		bset	#0,$22(a0)
0001446E 9045                       		sub.w	d5,d0
00014470 3206                       		move.w	d6,d1
00014472 4441                       		neg.w	d1
00014474 B041                       		cmp.w	d1,d0
00014476                            		; bgt.s	loc_13278
00014476                            		; move.w	d1,d0
00014476 4E75                       		rts
00014478                            
00014478                            SonicCJD_JumpRight:
00014478 08A8 0000 0022             		bclr	#0,$22(a0)
0001447E D045                       		add.w	d5,d0
00014480 B046                       		cmp.w	d6,d0
00014482 6D00                       		blt.s	Obj01_JumpMove
00014484 3006                       		move.w	d6,d0
00014486                            
00014486                            Obj01_JumpMove:
00014486 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
0001448A                            
0001448A                            Obj01_ResetScr2:
0001448A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00014490 6700                       		beq.s	loc_132A4	; if yes, branch
00014492 6400                       		bcc.s	loc_132A0
00014494 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00014498                            
00014498                            loc_132A0:
00014498 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001449C                            
0001449C                            loc_132A4:
0001449C 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
000144A2 6500                       		bcs.s	locret_132D2	; if yes, branch
000144A4 3028 0010                  		move.w	$10(a0),d0
000144A8 3200                       		move.w	d0,d1
000144AA EA41                       		asr.w	#5,d1
000144AC 6700                       		beq.s	locret_132D2
000144AE 6B00                       		bmi.s	loc_132C6
000144B0 9041                       		sub.w	d1,d0
000144B2 6400                       		bcc.s	loc_132C0
000144B4 303C 0000                  		move.w	#0,d0
000144B8                            
000144B8                            loc_132C0:
000144B8 3140 0010                  		move.w	d0,$10(a0)
000144BC 4E75                       		rts	
000144BE                            ; ===========================================================================
000144BE                            
000144BE                            loc_132C6:
000144BE 9041                       		sub.w	d1,d0
000144C0 6500                       		bcs.s	loc_132CE
000144C2 303C 0000                  		move.w	#0,d0
000144C6                            
000144C6                            loc_132CE:
000144C6 3140 0010                  		move.w	d0,$10(a0)
000144CA                            
000144CA                            locret_132D2:
000144CA 4E75                       		rts	
000144CC                            ; End of function Sonic_ChgJumpDir
000144CC                            
000144CC                            ; ===========================================================================
000144CC                            ; ---------------------------------------------------------------------------
000144CC                            ; Unused subroutine to squash Sonic
000144CC                            ; ---------------------------------------------------------------------------
000144CC 1028 0026                  		move.b	$26(a0),d0
000144D0 0600 0020                  		addi.b	#$20,d0
000144D4 0200 00C0                  		andi.b	#$C0,d0
000144D8 6600                       		bne.s	locret_13302
000144DA 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000144DE 4A41                       		tst.w	d1
000144E0 6A00                       		bpl.s	locret_13302
000144E2 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
000144E8 317C 0000 0010             		move.w	#0,$10(a0)
000144EE 317C 0000 0012             		move.w	#0,$12(a0)
000144F4 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
000144FA                            
000144FA                            locret_13302:
000144FA 4E75                       		rts	
000144FC                            ; ---------------------------------------------------------------------------
000144FC                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000144FC                            ; ---------------------------------------------------------------------------
000144FC                            
000144FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000144FC                            
000144FC                            
000144FC                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
000144FC 2228 0008                  		move.l	8(a0),d1
00014500 3028 0010                  		move.w	$10(a0),d0
00014504 48C0                       		ext.l	d0
00014506 E180                       		asl.l	#8,d0
00014508 D280                       		add.l	d0,d1
0001450A 4841                       		swap	d1
0001450C 3038 F728                  		move.w	($FFFFF728).w,d0
00014510 0640 0010                  		addi.w	#$10,d0
00014514 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014516 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00014518 3038 F72A                  		move.w	($FFFFF72A).w,d0
0001451C 0640 0128                  		addi.w	#$128,d0
00014520 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00014524 6600                       		bne.s	loc_13332
00014526 0640 0040                  		addi.w	#$40,d0
0001452A                            
0001452A                            loc_13332:
0001452A B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001452C 6300                       		bls.s	Boundary_Sides	; if yes, branch
0001452E                            
0001452E                            loc_13336:
0001452E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014532 0640 00E0                  		addi.w	#$E0,d0
00014536 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
0001453A 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
0001453C 4E75                       		rts	
0001453E                            ; ===========================================================================
0001453E                            
0001453E                            Boundary_Bottom:
0001453E 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00014544                            		; bne.w	KillSonic	; if not, kill Sonic
00014544 6600 0000                  		bne.w	CallKillSonic	; GMZ
00014548 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
0001454E                            		; bcs.w	KillSonic
0001454E 6500 0000                  		bcs.w	CallKillSonic	; GMZ
00014552 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00014556 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001455C 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00014562 4E75                       		rts	
00014564                            
00014564                            CallKillSonic:
00014564 4EF9 0000 0000             		jmp	KillSonic	; GMZ
0001456A                            ; ===========================================================================
0001456A                            
0001456A                            Boundary_Sides:
0001456A 3140 0008                  		move.w	d0,8(a0)
0001456E 317C 0000 000A             		move.w	#0,$A(a0)
00014574 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
0001457A 317C 0000 0014             		move.w	#0,$14(a0)
00014580 60AC                       		bra.s	loc_13336
00014582                            ; End of function Sonic_LevelBound
00014582                            
00014582                            ; ---------------------------------------------------------------------------
00014582                            ; Subroutine allowing Sonic to roll when he's moving
00014582                            ; ---------------------------------------------------------------------------
00014582                            
00014582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014582                            
00014582                            
00014582                            Sonic_Roll:				; XREF: Obj01_MdNormal
00014582 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014586 6600                       		bne.s	Obj01_NoRoll
00014588 3028 0014                  		move.w	$14(a0),d0
0001458C 6A00                       		bpl.s	loc_13392
0001458E 4440                       		neg.w	d0
00014590                            
00014590                            loc_13392:
00014590 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00014594 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00014596 1038 F602                  		move.b	($FFFFF602).w,d0
0001459A 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
0001459E 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
000145A0 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000145A6 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
000145A8                            
000145A8                            Obj01_NoRoll:
000145A8 4E75                       		rts	
000145AA                            ; ===========================================================================
000145AA                            
000145AA                            Obj01_ChkRoll:
000145AA 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
000145B0 6700                       		beq.s	Obj01_DoRoll	; if not, branch
000145B2 4E75                       		rts	
000145B4                            ; ===========================================================================
000145B4                            
000145B4                            Obj01_DoRoll:
000145B4 08E8 0002 0022             		bset	#2,$22(a0)
000145BA 117C 000E 0016             		move.b	#$E,$16(a0)
000145C0 117C 0007 0017             		move.b	#7,$17(a0)
000145C6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000145CC 5A68 000C                  		addq.w	#5,$C(a0)
000145D0 303C 00BE                  		move.w	#$BE,d0
000145D4 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play rolling sound
000145DA 4A68 0014                  		tst.w	$14(a0)
000145DE 6600                       		bne.s	locret_133E8
000145E0 317C 0200 0014             		move.w	#$200,$14(a0)
000145E6                            
000145E6                            locret_133E8:
000145E6 4E75                       		rts	
000145E8                            ; End of function Sonic_Roll
000145E8                            
000145E8                            ; ---------------------------------------------------------------------------
000145E8                            ; Subroutine allowing Sonic to jump
000145E8                            ; ---------------------------------------------------------------------------
000145E8                            
000145E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000145E8                            
000145E8                            
000145E8                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000145E8 1038 F603                  		move.b	($FFFFF603).w,d0
000145EC 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000145F0 6700 0000                  		beq.w	locret_1348E	; if not, branch
000145F4 7000                       		moveq	#0,d0
000145F6 1028 0026                  		move.b	$26(a0),d0
000145FA 0600 0080                  		addi.b	#$80,d0
000145FE 6100 0000                  		bsr.w	sub_14D48
00014602 0C41 0006                  		cmpi.w	#6,d1
00014606 6D00 0000                  		blt.w	locret_1348E
0001460A 343C 0680                  		move.w	#$680,d2
0001460E 0828 0006 0022             		btst	#6,$22(a0)
00014614 6700                       		beq.s	loc_1341C
00014616 343C 0380                  		move.w	#$380,d2
0001461A                            
0001461A                            loc_1341C:
0001461A 7000                       		moveq	#0,d0
0001461C 1028 0026                  		move.b	$26(a0),d0
00014620 0400 0040                  		subi.b	#$40,d0
00014624 4EB9 0000 3416             		jsr	(CalcSine).l
0001462A C3C2                       		muls.w	d2,d1
0001462C E081                       		asr.l	#8,d1
0001462E D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00014632 C1C2                       		muls.w	d2,d0
00014634 E080                       		asr.l	#8,d0
00014636 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
0001463A 08E8 0001 0022             		bset	#1,$22(a0)
00014640 08A8 0005 0022             		bclr	#5,$22(a0)
00014646 588F                       		addq.l	#4,sp
00014648 117C 0001 003C             		move.b	#1,$3C(a0)
0001464E 4228 0038                  		clr.b	$38(a0)
00014652 303C 00A0                  		move.w	#$A0,d0
00014656 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play jumping sound
0001465C 117C 0013 0016             		move.b	#$13,$16(a0)
00014662 117C 0009 0017             		move.b	#9,$17(a0)
00014668 0828 0002 0022             		btst	#2,$22(a0)
0001466E 6600                       		bne.s	loc_13490
00014670 117C 000E 0016             		move.b	#$E,$16(a0)
00014676 117C 0007 0017             		move.b	#7,$17(a0)
0001467C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00014682 08E8 0002 0022             		bset	#2,$22(a0)
00014688 5A68 000C                  		addq.w	#5,$C(a0)
0001468C 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00014692                            
00014692                            locret_1348E:
00014692 4E75                       		rts	
00014694                            ; ===========================================================================
00014694                            
00014694                            loc_13490:
00014694 08E8 0004 0022             		bset	#4,$22(a0)
0001469A 4E75                       		rts	
0001469C                            ; End of function Sonic_Jump
0001469C                            
0001469C                            
0001469C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001469C                            
0001469C                            
0001469C                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001469C 4A28 003C                  		tst.b	$3C(a0)
000146A0 6700 0000                  		beq.w	loc_134C4
000146A4 323C FC00                  		move.w	#-$400,d1
000146A8 0828 0006 0022             		btst	#6,$22(a0)
000146AE 6700                       		beq.s	loc_134AE
000146B0 323C FE00                  		move.w	#-$200,d1
000146B4                            
000146B4                            loc_134AE:
000146B4 B268 0012                  		cmp.w	$12(a0),d1
000146B8 6F00                       		ble.s	locret_134C22
000146BA 1038 F602                  		move.b	($FFFFF602).w,d0
000146BE 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000146C2 6600                       		bne.s	locret_134C2	; if yes, branch
000146C4 3141 0012                  		move.w	d1,$12(a0)
000146C8                            locret_134C22:
000146C8                            ;VARIBLES TO NOT MESS UP BUILDING
000146C8 =FFFFD000                  v_player:		equ $FFFFD000	; object variable space for Conic ($40 bytes)
000146C8 =FFFFF760                  v_conspeedmax:		equ $FFFFF760	; Conic's maximum speed (2 bytes)
000146C8 =FFFFF762                  v_conspeedacc:		equ $FFFFF762	; Conic's acceleration (2 bytes)
000146C8 =FFFFF764                  v_conspeeddec:		equ $FFFFF764	; Conic's deceleration (2 bytes)
000146C8 =FFFFF7C8                  f_playerctrl:		equ $FFFFF7C8	; Player control override flags (object ineraction, control enable)
000146C8 =FFFFFE1E                  f_timecount:		equ $FFFFFE1E	; time counter update flag
000146C8 =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
000146C8 =FFFFFE2D                  v_invinc:		equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
000146C8 =FFFFFE57                  v_emeralds:		equ $FFFFFE57	; number of chaos emeralds
000146C8 =FFFFFF48                  f_superconic:		equ $FFFFFF48	; we are so super!
000146C8 =FFFFFF49                  v_superpal:		equ $FFFFFF49
000146C8 =FFFFFF4A                  v_supertime:		equ $FFFFFF4A
000146C8 =FFFFFF4C                  v_superpaltime:		equ $FFFFFF4C
000146C8 =FFFFFF4E                  v_superpalframe:	equ $FFFFFF4E
000146C8 =00000032                  invtime:	equ $32	; time left for invincibility
000146C8                            ;THIS CHECKS SUICIDE BARNEY
000146C8                            ;ignore that its conic lmao
000146C8 4A38 FF48                  	tst.b	(f_superconic).w	; is Conic already Super?
000146CC 6600                       	bne.s	locret_134C2	; if yes, branch
000146CE 0C38 0006 FE57             	cmpi.b	#6,(v_emeralds).w	; does Conic have exactly 6 emeralds?
000146D4 6600                       	bne.s	locret_134C2	; if not, branch
000146D6 0C78 0032 FE20             	cmpi.w	#50,(v_rings).w		; does Conic have at least 50 rings?
000146DC 6500                       	blo.s	locret_134C2	; if not, branch
000146DE 4A38 FE1E                  	tst.b	(f_timecount).w	; has Conic reached the end of the act?
000146E2 6700                       	beq.s	locret_134C2	; if yes, branch
000146E4 11FC 0001 FF49             	move.b	#1,(v_superpal).w
000146EA 11FC 000F FF4C             	move.b	#$F,(v_superpaltime).w
000146F0 11FC 0001 FF48             	move.b	#1,(f_superconic).w
000146F6 11FC 0081 F7C8             	move.b	#$81,(f_playerctrl).w	; lock controls
000146FC 117C 0012 001C             	move.b	#$12,$1C(a0)	; use transformation animation
00014702 31FC 0A00 F760             	move.w	#$A00,(v_conspeedmax).w
00014708 31FC 0030 F762             	move.w	#$30,(v_conspeedacc).w
0001470E 31FC 0100 F764             	move.w	#$100,(v_conspeeddec).w
00014714                            ; change them to your liking
00014714 4238 D032                  	clr.b	(v_player+invtime).w
00014718 08F8 0001 FE2D             	bset	#$1,(v_invinc).w	; make Conic invincible
0001471E                            ;	move.w	#bgm_SuperConic,d0
0001471E                            ;	jsr	(PlaySound).l	; load the Super Conic song and return
0001471E                            ;	move.w	#sfx_Transform,d0
0001471E                            ;	jsr	(PlaySound_SFX).l	; Play transformation sound effect.
0001471E                            
0001471E                            locret_134C2:
0001471E 4E75                       		rts	
00014720                            ; ===========================================================================
00014720                            
00014720                            loc_134C4:
00014720 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00014726 6C00                       		bge.s	locret_134D2
00014728 317C F040 0012             		move.w	#-$FC0,$12(a0)
0001472E                            
0001472E                            locret_134D2:
0001472E 4E75                       		rts	
00014730                            ; End of function Sonic_JumpHeight
00014730                            
00014730                            ; ---------------------------------------------------------------------------
00014730                            ; Subroutine to	slow Sonic walking up a	slope
00014730                            ; ---------------------------------------------------------------------------
00014730                            
00014730                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014730                            
00014730                            
00014730                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00014730 1028 0026                  		move.b	$26(a0),d0
00014734 0600 0060                  		addi.b	#$60,d0
00014738 0C00 00C0                  		cmpi.b	#$C0,d0
0001473C 6400                       		bcc.s	locret_13508
0001473E 1028 0026                  		move.b	$26(a0),d0
00014742 4EB9 0000 3416             		jsr	(CalcSine).l
00014748 C1FC 0020                  		muls.w	#$20,d0
0001474C E080                       		asr.l	#8,d0
0001474E 4A68 0014                  		tst.w	$14(a0)
00014752 6700                       		beq.s	locret_13508
00014754 6B00                       		bmi.s	loc_13504
00014756 4A40                       		tst.w	d0
00014758 6700                       		beq.s	locret_13502
0001475A D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
0001475E                            
0001475E                            locret_13502:
0001475E 4E75                       		rts	
00014760                            ; ===========================================================================
00014760                            
00014760                            loc_13504:
00014760 D168 0014                  		add.w	d0,$14(a0)
00014764                            
00014764                            locret_13508:
00014764 4E75                       		rts	
00014766                            ; End of function Sonic_SlopeResist
00014766                            
00014766                            ; ---------------------------------------------------------------------------
00014766                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00014766                            ; ---------------------------------------------------------------------------
00014766                            
00014766                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014766                            
00014766                            
00014766                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00014766 1028 0026                  		move.b	$26(a0),d0
0001476A 0600 0060                  		addi.b	#$60,d0
0001476E 0C00 00C0                  		cmpi.b	#-$40,d0
00014772 6400                       		bcc.s	locret_13544
00014774 1028 0026                  		move.b	$26(a0),d0
00014778 4EB9 0000 3416             		jsr	(CalcSine).l
0001477E C1FC 0050                  		muls.w	#$50,d0
00014782 E080                       		asr.l	#8,d0
00014784 4A68 0014                  		tst.w	$14(a0)
00014788 6B00                       		bmi.s	loc_1353A
0001478A 4A40                       		tst.w	d0
0001478C 6A00                       		bpl.s	loc_13534
0001478E E480                       		asr.l	#2,d0
00014790                            
00014790                            loc_13534:
00014790 D168 0014                  		add.w	d0,$14(a0)
00014794 4E75                       		rts	
00014796                            ; ===========================================================================
00014796                            
00014796                            loc_1353A:
00014796 4A40                       		tst.w	d0
00014798 6B00                       		bmi.s	loc_13540
0001479A E480                       		asr.l	#2,d0
0001479C                            
0001479C                            loc_13540:
0001479C D168 0014                  		add.w	d0,$14(a0)
000147A0                            
000147A0                            locret_13544:
000147A0 4E75                       		rts	
000147A2                            ; End of function Sonic_RollRepel
000147A2                            
000147A2                            ; ---------------------------------------------------------------------------
000147A2                            ; Subroutine to	push Sonic down	a slope
000147A2                            ; ---------------------------------------------------------------------------
000147A2                            
000147A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000147A2                            
000147A2                            
000147A2                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
000147A2 4E71                       		nop	
000147A4 4A28 0038                  		tst.b	$38(a0)
000147A8 6600                       		bne.s	locret_13580
000147AA 4A68 003E                  		tst.w	$3E(a0)
000147AE 6600                       		bne.s	loc_13582
000147B0 1028 0026                  		move.b	$26(a0),d0
000147B4 0600 0020                  		addi.b	#$20,d0
000147B8 0200 00C0                  		andi.b	#$C0,d0
000147BC 6700                       		beq.s	locret_13580
000147BE 3028 0014                  		move.w	$14(a0),d0
000147C2 6A00                       		bpl.s	loc_1356A
000147C4 4440                       		neg.w	d0
000147C6                            
000147C6                            loc_1356A:
000147C6 0C40 0280                  		cmpi.w	#$280,d0
000147CA 6400                       		bcc.s	locret_13580
000147CC 4268 0014                  		clr.w	$14(a0)
000147D0 08E8 0001 0022             		bset	#1,$22(a0)
000147D6 317C 001E 003E             		move.w	#$1E,$3E(a0)
000147DC                            
000147DC                            locret_13580:
000147DC 4E75                       		rts	
000147DE                            ; ===========================================================================
000147DE                            
000147DE                            loc_13582:
000147DE 5368 003E                  		subq.w	#1,$3E(a0)
000147E2 4E75                       		rts	
000147E4                            ; End of function Sonic_SlopeRepel
000147E4                            
000147E4                            ; ---------------------------------------------------------------------------
000147E4                            ; Subroutine to	return Sonic's angle to 0 as he jumps
000147E4                            ; ---------------------------------------------------------------------------
000147E4                            
000147E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000147E4                            
000147E4                            
000147E4                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
000147E4 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000147E8 6700                       		beq.s	locret_135A2	; if already 0,	branch
000147EA 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
000147EC                            
000147EC 5400                       		addq.b	#2,d0		; increase angle
000147EE 6400                       		bcc.s	loc_13596
000147F0 7000                       		moveq	#0,d0
000147F2                            
000147F2                            loc_13596:
000147F2 6000                       		bra.s	loc_1359E
000147F4                            ; ===========================================================================
000147F4                            
000147F4                            loc_13598:
000147F4 5500                       		subq.b	#2,d0		; decrease angle
000147F6 6400                       		bcc.s	loc_1359E
000147F8 7000                       		moveq	#0,d0
000147FA                            
000147FA                            loc_1359E:
000147FA 1140 0026                  		move.b	d0,$26(a0)
000147FE                            
000147FE                            locret_135A2:
000147FE 4E75                       		rts	
00014800                            ; End of function Sonic_JumpAngle
00014800                            
00014800                            ; ---------------------------------------------------------------------------
00014800                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00014800                            ; ---------------------------------------------------------------------------
00014800                            
00014800                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014800                            
00014800                            
00014800                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00014800 3228 0010                  		move.w	$10(a0),d1
00014804 3428 0012                  		move.w	$12(a0),d2
00014808 4EB9 0000 36E4             		jsr	(CalcAngle).l
0001480E 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00014812 0400 0020                  		subi.b	#$20,d0
00014816 11C0 FFED                  		move.b	d0,($FFFFFFED).w
0001481A 0200 00C0                  		andi.b	#$C0,d0
0001481E 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00014822 0C00 0040                  		cmpi.b	#$40,d0
00014826 6700 0000                  		beq.w	loc_13680
0001482A 0C00 0080                  		cmpi.b	#$80,d0
0001482E 6700 0000                  		beq.w	loc_136E2
00014832 0C00 00C0                  		cmpi.b	#-$40,d0
00014836 6700 0000                  		beq.w	loc_1373E
0001483A 6100 0000                  		bsr.w	Sonic_HitWall
0001483E 4A41                       		tst.w	d1
00014840 6A00                       		bpl.s	loc_135F0
00014842 9368 0008                  		sub.w	d1,8(a0)
00014846 317C 0000 0010             		move.w	#0,$10(a0)
0001484C                            
0001484C                            loc_135F0:
0001484C 6100 0000                  		bsr.w	sub_14EB4
00014850 4A41                       		tst.w	d1
00014852 6A00                       		bpl.s	loc_13602
00014854 D368 0008                  		add.w	d1,8(a0)
00014858 317C 0000 0010             		move.w	#0,$10(a0)
0001485E                            
0001485E                            loc_13602:
0001485E 6100 0000                  		bsr.w	Sonic_HitFloor
00014862 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00014866 4A41                       		tst.w	d1
00014868 6A00                       		bpl.s	locret_1367E
0001486A 1428 0012                  		move.b	$12(a0),d2
0001486E 5002                       		addq.b	#8,d2
00014870 4402                       		neg.b	d2
00014872 B202                       		cmp.b	d2,d1
00014874 6C00                       		bge.s	loc_1361E
00014876 B002                       		cmp.b	d2,d0
00014878 6D00                       		blt.s	locret_1367E
0001487A                            
0001487A                            loc_1361E:
0001487A D368 000C                  		add.w	d1,$C(a0)
0001487E 1143 0026                  		move.b	d3,$26(a0)
00014882 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014886 117C 0000 001C             		move.b	#0,$1C(a0)
0001488C 1003                       		move.b	d3,d0
0001488E 0600 0020                  		addi.b	#$20,d0
00014892 0200 0040                  		andi.b	#$40,d0
00014896 6600                       		bne.s	loc_1365C
00014898 1003                       		move.b	d3,d0
0001489A 0600 0010                  		addi.b	#$10,d0
0001489E 0200 0020                  		andi.b	#$20,d0
000148A2 6700                       		beq.s	loc_1364E
000148A4 E0E8 0012                  		asr	$12(a0)
000148A8 6000                       		bra.s	loc_13670
000148AA                            ; ===========================================================================
000148AA                            
000148AA                            loc_1364E:
000148AA 317C 0000 0012             		move.w	#0,$12(a0)
000148B0 3168 0010 0014             		move.w	$10(a0),$14(a0)
000148B6 4E75                       		rts	
000148B8                            ; ===========================================================================
000148B8                            
000148B8                            loc_1365C:
000148B8 317C 0000 0010             		move.w	#0,$10(a0)
000148BE 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
000148C4 6F00                       		ble.s	loc_13670
000148C6 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
000148CC                            
000148CC                            loc_13670:
000148CC 3168 0012 0014             		move.w	$12(a0),$14(a0)
000148D2 4A03                       		tst.b	d3
000148D4 6A00                       		bpl.s	locret_1367E
000148D6 4468 0014                  		neg.w	$14(a0)
000148DA                            
000148DA                            locret_1367E:
000148DA 4E75                       		rts	
000148DC                            ; ===========================================================================
000148DC                            
000148DC                            loc_13680:
000148DC 6100 0000                  		bsr.w	Sonic_HitWall
000148E0 4A41                       		tst.w	d1
000148E2 6A00                       		bpl.s	loc_1369A
000148E4 9368 0008                  		sub.w	d1,8(a0)
000148E8 317C 0000 0010             		move.w	#0,$10(a0)
000148EE 3168 0012 0014             		move.w	$12(a0),$14(a0)
000148F4 4E75                       		rts	
000148F6                            ; ===========================================================================
000148F6                            
000148F6                            loc_1369A:
000148F6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000148FA 4A41                       		tst.w	d1
000148FC 6A00                       		bpl.s	loc_136B4
000148FE 9368 000C                  		sub.w	d1,$C(a0)
00014902 4A68 0012                  		tst.w	$12(a0)
00014906 6A00                       		bpl.s	locret_136B2
00014908 317C 0000 0012             		move.w	#0,$12(a0)
0001490E                            
0001490E                            locret_136B2:
0001490E 4E75                       		rts	
00014910                            ; ===========================================================================
00014910                            
00014910                            loc_136B4:
00014910 4A68 0012                  		tst.w	$12(a0)
00014914 6B00                       		bmi.s	locret_136E0
00014916 6100 0000                  		bsr.w	Sonic_HitFloor
0001491A 4A41                       		tst.w	d1
0001491C 6A00                       		bpl.s	locret_136E0
0001491E D368 000C                  		add.w	d1,$C(a0)
00014922 1143 0026                  		move.b	d3,$26(a0)
00014926 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001492A 117C 0000 001C             		move.b	#0,$1C(a0)
00014930 317C 0000 0012             		move.w	#0,$12(a0)
00014936 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001493C                            
0001493C                            locret_136E0:
0001493C 4E75                       		rts	
0001493E                            ; ===========================================================================
0001493E                            
0001493E                            loc_136E2:
0001493E 6100 0000                  		bsr.w	Sonic_HitWall
00014942 4A41                       		tst.w	d1
00014944 6A00                       		bpl.s	loc_136F4
00014946 9368 0008                  		sub.w	d1,8(a0)
0001494A 317C 0000 0010             		move.w	#0,$10(a0)
00014950                            
00014950                            loc_136F4:
00014950 6100 0000                  		bsr.w	sub_14EB4
00014954 4A41                       		tst.w	d1
00014956 6A00                       		bpl.s	loc_13706
00014958 D368 0008                  		add.w	d1,8(a0)
0001495C 317C 0000 0010             		move.w	#0,$10(a0)
00014962                            
00014962                            loc_13706:
00014962 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014966 4A41                       		tst.w	d1
00014968 6A00                       		bpl.s	locret_1373C
0001496A 9368 000C                  		sub.w	d1,$C(a0)
0001496E 1003                       		move.b	d3,d0
00014970 0600 0020                  		addi.b	#$20,d0
00014974 0200 0040                  		andi.b	#$40,d0
00014978 6600                       		bne.s	loc_13726
0001497A 317C 0000 0012             		move.w	#0,$12(a0)
00014980 4E75                       		rts	
00014982                            ; ===========================================================================
00014982                            
00014982                            loc_13726:
00014982 1143 0026                  		move.b	d3,$26(a0)
00014986 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001498A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014990 4A03                       		tst.b	d3
00014992 6A00                       		bpl.s	locret_1373C
00014994 4468 0014                  		neg.w	$14(a0)
00014998                            
00014998                            locret_1373C:
00014998 4E75                       		rts	
0001499A                            ; ===========================================================================
0001499A                            
0001499A                            loc_1373E:
0001499A 6100 0000                  		bsr.w	sub_14EB4
0001499E 4A41                       		tst.w	d1
000149A0 6A00                       		bpl.s	loc_13758
000149A2 D368 0008                  		add.w	d1,8(a0)
000149A6 317C 0000 0010             		move.w	#0,$10(a0)
000149AC 3168 0012 0014             		move.w	$12(a0),$14(a0)
000149B2 4E75                       		rts	
000149B4                            ; ===========================================================================
000149B4                            
000149B4                            loc_13758:
000149B4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000149B8 4A41                       		tst.w	d1
000149BA 6A00                       		bpl.s	loc_13772
000149BC 9368 000C                  		sub.w	d1,$C(a0)
000149C0 4A68 0012                  		tst.w	$12(a0)
000149C4 6A00                       		bpl.s	locret_13770
000149C6 317C 0000 0012             		move.w	#0,$12(a0)
000149CC                            
000149CC                            locret_13770:
000149CC 4E75                       		rts	
000149CE                            ; ===========================================================================
000149CE                            
000149CE                            loc_13772:
000149CE 4A68 0012                  		tst.w	$12(a0)
000149D2 6B00                       		bmi.s	locret_1379E
000149D4 6100 0000                  		bsr.w	Sonic_HitFloor
000149D8 4A41                       		tst.w	d1
000149DA 6A00                       		bpl.s	locret_1379E
000149DC D368 000C                  		add.w	d1,$C(a0)
000149E0 1143 0026                  		move.b	d3,$26(a0)
000149E4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000149E8 117C 0000 001C             		move.b	#0,$1C(a0)
000149EE 317C 0000 0012             		move.w	#0,$12(a0)
000149F4 3168 0010 0014             		move.w	$10(a0),$14(a0)
000149FA                            
000149FA                            locret_1379E:
000149FA 4E75                       		rts	
000149FC                            ; End of function Sonic_Floor
000149FC                            
000149FC                            ; ---------------------------------------------------------------------------
000149FC                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000149FC                            ; ---------------------------------------------------------------------------
000149FC                            
000149FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000149FC                            
000149FC                            
000149FC                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000149FC 0828 0004 0022             		btst	#4,$22(a0)
00014A02 6700                       		beq.s	loc_137AE
00014A04 4E71                       		nop	
00014A06 4E71                       		nop	
00014A08 4E71                       		nop	
00014A0A                            
00014A0A                            loc_137AE:
00014A0A 08A8 0005 0022             		bclr	#5,$22(a0)
00014A10 08A8 0001 0022             		bclr	#1,$22(a0)
00014A16 08A8 0004 0022             		bclr	#4,$22(a0)
00014A1C 0828 0002 0022             		btst	#2,$22(a0)
00014A22 6700                       		beq.s	loc_137E4
00014A24 08A8 0002 0022             		bclr	#2,$22(a0)
00014A2A 117C 0013 0016             		move.b	#$13,$16(a0)
00014A30 117C 0009 0017             		move.b	#9,$17(a0)
00014A36 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00014A3C 5B68 000C                  		subq.w	#5,$C(a0)
00014A40                            
00014A40                            loc_137E4:
00014A40 117C 0000 003C             		move.b	#0,$3C(a0)
00014A46 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00014A4C 4E75                       		rts	
00014A4E                            ; End of function Sonic_ResetOnFloor
00014A4E                            
00014A4E                            ; ===========================================================================
00014A4E                            ; ---------------------------------------------------------------------------
00014A4E                            ; Sonic	when he	gets hurt
00014A4E                            ; ---------------------------------------------------------------------------
00014A4E                            
00014A4E                            Obj01_Hurt:				; XREF: Obj01_Index
00014A4E 4EBA 9CE0                  		jsr	SpeedToPos
00014A52 0668 0030 0012             		addi.w	#$30,$12(a0)
00014A58 0828 0006 0022             		btst	#6,$22(a0)
00014A5E 6700                       		beq.s	loc_1380C
00014A60 0468 0020 0012             		subi.w	#$20,$12(a0)
00014A66                            
00014A66                            loc_1380C:
00014A66 6100 0000                  		bsr.w	Sonic_HurtStop
00014A6A 6100 FA90                  		bsr.w	Sonic_LevelBound
00014A6E 6100 F456                  		bsr.w	Sonic_RecordPos
00014A72 6100 0000                  		bsr.w	Sonic_Animate
00014A76 6100 0000                  		bsr.w	LoadSonicDynPLC
00014A7A 4EFA 9CDA                  		jmp	DisplaySprite
00014A7E                            
00014A7E                            ; ---------------------------------------------------------------------------
00014A7E                            ; Subroutine to	stop Sonic falling after he's been hurt
00014A7E                            ; ---------------------------------------------------------------------------
00014A7E                            
00014A7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A7E                            
00014A7E                            
00014A7E                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00014A7E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014A82 0640 00E0                  		addi.w	#$E0,d0
00014A86 B068 000C                  		cmp.w	$C(a0),d0
00014A8A 6500 0000                  		bcs.w	KillSonic
00014A8E 6100 FD70                  		bsr.w	Sonic_Floor
00014A92 0828 0001 0022             		btst	#1,$22(a0)
00014A98 6600                       		bne.s	locret_13860
00014A9A 7000                       		moveq	#0,d0
00014A9C 3140 0012                  		move.w	d0,$12(a0)
00014AA0 3140 0010                  		move.w	d0,$10(a0)
00014AA4 3140 0014                  		move.w	d0,$14(a0)
00014AA8 117C 0000 001C             		move.b	#0,$1C(a0)
00014AAE 5528 0024                  		subq.b	#2,$24(a0)
00014AB2 317C 0078 0030             		move.w	#$78,$30(a0)
00014AB8                            
00014AB8                            locret_13860:
00014AB8 4E75                       		rts	
00014ABA                            ; End of function Sonic_HurtStop
00014ABA                            
00014ABA                            ; ===========================================================================
00014ABA                            ; ---------------------------------------------------------------------------
00014ABA                            ; Sonic	when he	dies
00014ABA                            ; ---------------------------------------------------------------------------
00014ABA                            
00014ABA                            Obj01_Death:				; XREF: Obj01_Index
00014ABA 6100 0000                  		bsr.w	GameOver
00014ABE 4EBA 9BFE                  		jsr	ObjectFall
00014AC2 6100 F402                  		bsr.w	Sonic_RecordPos
00014AC6 6100 0000                  		bsr.w	Sonic_Animate
00014ACA 6100 0000                  		bsr.w	LoadSonicDynPLC
00014ACE 4EFA 9C86                  		jmp	DisplaySprite
00014AD2                            
00014AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014AD2                            
00014AD2                            
00014AD2                            GameOver:				; XREF: Obj01_Death
00014AD2 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014AD6 0640 0100                  		addi.w	#$100,d0
00014ADA B068 000C                  		cmp.w	$C(a0),d0
00014ADE 6400 0000                  		bcc.w	locret_13900
00014AE2 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014AE8 5428 0024                  		addq.b	#2,$24(a0)
00014AEC 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014AF0 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014AF4 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014AF8 6600                       		bne.s	loc_138D4
00014AFA 317C 0000 003A             		move.w	#0,$3A(a0)
00014B00 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00014B06 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014B0C 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00014B12 4238 FE1A                  		clr.b	($FFFFFE1A).w
00014B16                            
00014B16                            loc_138C2:
00014B16 303C 008F                  		move.w	#$8F,d0
00014B1A 4EB9 0000 1C74             		jsr	(PlaySound).l	; play game over music
00014B20 7003                       		moveq	#3,d0
00014B22 4EF9 0000 1E58             		jmp	(LoadPLC).l	; load game over patterns
00014B28                            ; ===========================================================================
00014B28                            
00014B28                            loc_138D4:
00014B28 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00014B2E 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00014B32 6700                       		beq.s	locret_13900	; if not, branch
00014B34 317C 0000 003A             		move.w	#0,$3A(a0)
00014B3A 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00014B40 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014B46 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00014B4C 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014B52 60C2                       		bra.s	loc_138C2
00014B54                            ; ===========================================================================
00014B54                            
00014B54                            locret_13900:
00014B54 4E75                       		rts	
00014B56                            ; End of function GameOver
00014B56                            
00014B56                            ; ===========================================================================
00014B56                            ; ---------------------------------------------------------------------------
00014B56                            ; Sonic	when the level is restarted
00014B56                            ; ---------------------------------------------------------------------------
00014B56                            
00014B56                            Obj01_ResetLevel:			; XREF: Obj01_Index
00014B56 4A68 003A                  		tst.w	$3A(a0)
00014B5A 6700                       		beq.s	locret_13914
00014B5C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014B60 6600                       		bne.s	locret_13914
00014B62 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014B68                            
00014B68                            locret_13914:
00014B68 4E75                       		rts	
00014B6A                            
00014B6A                            ; ---------------------------------------------------------------------------
00014B6A                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00014B6A                            ; ---------------------------------------------------------------------------
00014B6A                            
00014B6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B6A                            
00014B6A                            
00014B6A                            Sonic_Loops:				; XREF: Obj01_Control
00014B6A                            ;		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014B6A                            ;		beq.s	loc_13926	; if yes, branch
00014B6A                            ;		tst.b	($FFFFFE10).w	; is level GHZ ?
00014B6A                            ;		bne.w	locret_139C2	; if not, branch
00014B6A                            ;		this is commented out, please do more plane messups id love that
00014B6A                            ;loc_13926:
00014B6A 3028 000C                  		move.w	$C(a0),d0
00014B6E E248                       		lsr.w	#1,d0
00014B70 0240 0380                  		andi.w	#$380,d0
00014B74 1228 0008                  		move.b	8(a0),d1
00014B78 0241 007F                  		andi.w	#$7F,d1
00014B7C D041                       		add.w	d1,d0
00014B7E 43F8 A400                  		lea	($FFFFA400).w,a1
00014B82 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00014B86 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00014B8A 6700 FA1E                  		beq.w	Obj01_ChkRoll
00014B8E B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014B92 6700 FA16                  		beq.w	Obj01_ChkRoll
00014B96 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00014B9A 6700                       		beq.s	loc_13976
00014B9C B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014BA0 6700                       		beq.s	loc_13966
00014BA2 08A8 0006 0001             		bclr	#6,1(a0)
00014BA8 4E75                       		rts	
00014BAA                            ; ===========================================================================
00014BAA                            
00014BAA                            loc_13966:
00014BAA 0828 0001 0022             		btst	#1,$22(a0)
00014BB0 6700                       		beq.s	loc_13976
00014BB2 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014BB8 4E75                       		rts	
00014BBA                            ; ===========================================================================
00014BBA                            
00014BBA                            loc_13976:
00014BBA 3428 0008                  		move.w	8(a0),d2
00014BBE 0C02 002C                  		cmpi.b	#$2C,d2
00014BC2 6400                       		bcc.s	loc_13988
00014BC4 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014BCA 4E75                       		rts	
00014BCC                            ; ===========================================================================
00014BCC                            
00014BCC                            loc_13988:
00014BCC 0C02 00E0                  		cmpi.b	#-$20,d2
00014BD0 6500                       		bcs.s	loc_13996
00014BD2 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014BD8 4E75                       		rts	
00014BDA                            ; ===========================================================================
00014BDA                            
00014BDA                            loc_13996:
00014BDA 0828 0006 0001             		btst	#6,1(a0)
00014BE0 6600                       		bne.s	loc_139B2
00014BE2 1228 0026                  		move.b	$26(a0),d1
00014BE6 6700                       		beq.s	locret_139C2
00014BE8 0C01 0080                  		cmpi.b	#-$80,d1
00014BEC 6200                       		bhi.s	locret_139C2
00014BEE 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014BF4 4E75                       		rts	
00014BF6                            ; ===========================================================================
00014BF6                            
00014BF6                            loc_139B2:
00014BF6 1228 0026                  		move.b	$26(a0),d1
00014BFA 0C01 0080                  		cmpi.b	#-$80,d1
00014BFE 6300                       		bls.s	locret_139C2
00014C00 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014C06                            
00014C06                            locret_139C2:
00014C06 4E75                       		rts	
00014C08                            ; End of function Sonic_Loops
00014C08                            
00014C08                            ; ---------------------------------------------------------------------------
00014C08                            ; Subroutine to	animate	Sonic's sprites
00014C08                            ; ---------------------------------------------------------------------------
00014C08                            
00014C08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C08                            
00014C08                            Player_Anim:
00014C08 0000 0000                  	dc.l	SonicAniData
00014C0C 0000 0000                  	dc.l	SonicAniData ; gronic
00014C10 0000 0000                  	dc.l	SonicAniData ; anakama
00014C14 0000 0000                  	dc.l	SonicAniData ; LimitedSonic
00014C18                            
00014C18                            	; Insert more animation data for other characters here
00014C18                            	
00014C18                            Sonic_Animate:				; XREF: Obj01_Control; et al
00014C18 7000                       			moveq	#0,d0
00014C1A 1038 FFE8                  		move.b	(v_character),d0
00014C1E E548                       		lsl.w	#2,d0
00014C20 43FA FFE6                  		lea 	Player_Anim(pc),a1
00014C24                            		
00014C24 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
00014C28                            	
00014C28 7000                       		moveq	#0,d0
00014C2A 1028 001C                  		move.b	$1C(a0),d0
00014C2E B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00014C32 6700                       		beq.s	SAnim_Do	; if not, branch
00014C34 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00014C38 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00014C3E 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00014C44                            
00014C44                            SAnim_Do:
00014C44 D040                       		add.w	d0,d0
00014C46 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00014C4A 1011                       		move.b	(a1),d0
00014C4C 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014C4E 1228 0022                  		move.b	$22(a0),d1
00014C52 0201 0001                  		andi.b	#1,d1
00014C56 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014C5C 8328 0001                  		or.b	d1,1(a0)
00014C60 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014C64 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00014C66 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00014C6A                            
00014C6A                            SAnim_Do2:
00014C6A 7200                       		moveq	#0,d1
00014C6C 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00014C70 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00014C74 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00014C76                            
00014C76                            SAnim_Next:
00014C76 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00014C7A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00014C7E                            
00014C7E                            SAnim_Delay:
00014C7E 4E75                       		rts	
00014C80                            ; ===========================================================================
00014C80                            
00014C80                            SAnim_End_FF:
00014C80 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00014C82 6600                       		bne.s	SAnim_End_FE	; if not, branch
00014C84 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00014C8A 1029 0001                  		move.b	1(a1),d0	; read sprite number
00014C8E 60E6                       		bra.s	SAnim_Next
00014C90                            ; ===========================================================================
00014C90                            
00014C90                            SAnim_End_FE:
00014C90 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00014C92 6600                       		bne.s	SAnim_End_FD	; if not, branch
00014C94 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00014C98 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00014C9C 9200                       		sub.b	d0,d1
00014C9E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00014CA2 60D2                       		bra.s	SAnim_Next
00014CA4                            ; ===========================================================================
00014CA4                            
00014CA4                            SAnim_End_FD:
00014CA4 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00014CA6 6600                       		bne.s	SAnim_End	; if not, branch
00014CA8 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00014CAE                            
00014CAE                            SAnim_End:
00014CAE 4E75                       		rts	
00014CB0                            ; ===========================================================================
00014CB0                            
00014CB0                            SAnim_WalkRun:				; XREF: SAnim_Do
00014CB0 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014CB4 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014CB6 5200                       		addq.b	#1,d0		; is animation walking/running?
00014CB8 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014CBC 7200                       		moveq	#0,d1
00014CBE 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014CC2 1428 0022                  		move.b	$22(a0),d2
00014CC6 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014CCA 6600                       		bne.s	loc_13A70	; if yes, branch
00014CCC 4600                       		not.b	d0		; reverse angle
00014CCE                            
00014CCE                            loc_13A70:
00014CCE 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014CD2 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014CD4 7203                       		moveq	#3,d1
00014CD6                            
00014CD6                            loc_13A78:
00014CD6 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014CDC B302                       		eor.b	d1,d2
00014CDE 8528 0001                  		or.b	d2,1(a0)
00014CE2 0828 0005 0022             		btst	#5,$22(a0)
00014CE8 6600 0000                  		bne.w	SAnim_Push
00014CEC E808                       		lsr.b	#4,d0		; divide angle by $10
00014CEE 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00014CF2 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014CF6 6A00                       		bpl.s	loc_13A9C
00014CF8 4442                       		neg.w	d2
00014CFA                            
00014CFA                            loc_13A9C:
00014CFA 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014D00 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00014D04 6400                       		bcc.s	loc_13AB4	; if yes, branch
00014D06 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00014D0C 1200                       		move.b	d0,d1
00014D0E E209                       		lsr.b	#1,d1
00014D10 D001                       		add.b	d1,d0
00014D12                            
00014D12                            loc_13AB4:
00014D12 D000                       		add.b	d0,d0
00014D14 1600                       		move.b	d0,d3
00014D16 4442                       		neg.w	d2
00014D18 0642 0800                  		addi.w	#$800,d2
00014D1C 6A00                       		bpl.s	loc_13AC2
00014D1E 7400                       		moveq	#0,d2
00014D20                            
00014D20                            loc_13AC2:
00014D20 E04A                       		lsr.w	#8,d2
00014D22 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014D26 6100 FF42                  		bsr.w	SAnim_Do2
00014D2A D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00014D2E 4E75                       		rts	
00014D30                            ; ===========================================================================
00014D30                            
00014D30                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00014D30 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00014D32 6600                       		bne.s	SAnim_Push	; if not, branch
00014D34 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014D38 6A00                       		bpl.s	loc_13ADE
00014D3A 4442                       		neg.w	d2
00014D3C                            
00014D3C                            loc_13ADE:
00014D3C 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00014D42 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00014D46 6400                       		bcc.s	loc_13AF0	; if yes, branch
00014D48 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00014D4E                            
00014D4E                            loc_13AF0:
00014D4E 4442                       		neg.w	d2
00014D50 0642 0400                  		addi.w	#$400,d2
00014D54 6A00                       		bpl.s	loc_13AFA
00014D56 7400                       		moveq	#0,d2
00014D58                            
00014D58                            loc_13AFA:
00014D58 E04A                       		lsr.w	#8,d2
00014D5A 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014D5E 1228 0022                  		move.b	$22(a0),d1
00014D62 0201 0001                  		andi.b	#1,d1
00014D66 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014D6C 8328 0001                  		or.b	d1,1(a0)
00014D70 6000 FEF8                  		bra.w	SAnim_Do2
00014D74                            ; ===========================================================================
00014D74                            
00014D74                            SAnim_Push:				; XREF: SAnim_RollJump
00014D74 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014D78 6B00                       		bmi.s	loc_13B1E
00014D7A 4442                       		neg.w	d2
00014D7C                            
00014D7C                            loc_13B1E:
00014D7C 0642 0800                  		addi.w	#$800,d2
00014D80 6A00                       		bpl.s	loc_13B26
00014D82 7400                       		moveq	#0,d2
00014D84                            
00014D84                            loc_13B26:
00014D84 EC4A                       		lsr.w	#6,d2
00014D86 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014D8A 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00014D90 1228 0022                  		move.b	$22(a0),d1
00014D94 0201 0001                  		andi.b	#1,d1
00014D98 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014D9E 8328 0001                  		or.b	d1,1(a0)
00014DA2 6000 FEC6                  		bra.w	SAnim_Do2
00014DA6                            ; End of function Sonic_Animate
00014DA6                            
00014DA6                            ; ===========================================================================
00014DA6                            SonicAniData:
00014DA6                            	include "_anim\Sonic.asm"
00014DA6                            ; ---------------------------------------------------------------------------
00014DA6                            ; Animation script - Sonic
00014DA6                            ; ---------------------------------------------------------------------------
00014DA6 0000                       		dc.w SonAni_Walk-SonicAniData
00014DA8 0000                       		dc.w SonAni_Run-SonicAniData
00014DAA 0000                       		dc.w SonAni_Roll-SonicAniData
00014DAC 0000                       		dc.w SonAni_Roll2-SonicAniData
00014DAE 0000                       		dc.w SonAni_Push-SonicAniData
00014DB0 0000                       		dc.w SonAni_Wait-SonicAniData
00014DB2 0000                       		dc.w SonAni_Balance-SonicAniData
00014DB4 0000                       		dc.w SonAni_LookUp-SonicAniData
00014DB6 0000                       		dc.w SonAni_Duck-SonicAniData
00014DB8 0000                       		dc.w SonAni_Warp1-SonicAniData
00014DBA 0000                       		dc.w SonAni_Warp2-SonicAniData
00014DBC 0000                       		dc.w SonAni_Warp3-SonicAniData
00014DBE 0000                       		dc.w SonAni_Warp4-SonicAniData
00014DC0 0000                       		dc.w SonAni_Stop-SonicAniData
00014DC2 0000                       		dc.w SonAni_Float1-SonicAniData
00014DC4 0000                       		dc.w SonAni_Float2-SonicAniData
00014DC6 0000                       		dc.w SonAni_Spring-SonicAniData
00014DC8 0000                       		dc.w SonAni_LZHang-SonicAniData
00014DCA 0000                       		dc.w SonAni_Leap1-SonicAniData
00014DCC 0000                       		dc.w SonAni_Leap2-SonicAniData
00014DCE 0000                       		dc.w SonAni_Surf-SonicAniData
00014DD0 0000                       		dc.w SonAni_Bubble-SonicAniData
00014DD2 0000                       		dc.w SonAni_Death1-SonicAniData
00014DD4 0000                       		dc.w SonAni_Drown-SonicAniData
00014DD6 0000                       		dc.w SonAni_Death2-SonicAniData
00014DD8 0000                       		dc.w SonAni_Shrink-SonicAniData
00014DDA 0000                       		dc.w SonAni_Hurt-SonicAniData
00014DDC 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014DDE 0000                       		dc.w SonAni_Blank-SonicAniData
00014DE0 0000                       		dc.w SonAni_Float3-SonicAniData
00014DE2 0000                       		dc.w SonAni_Float4-SonicAniData
00014DE4 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
00014DEE FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00014DF6 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014DFE FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00014E06 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00014E0E 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00014E24 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
00014E28 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00014E2C 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00014E30 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014E34 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014E38 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014E3C 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014E40 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00014E44 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00014E48 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00014E50 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00014E54 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00014E58 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00014E5E 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00014E64 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00014E68 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00014E70 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00014E74 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00014E78 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00014E7C 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00014E86 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
00014E8A 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00014E8E 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00014E92 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00014E9A 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00014E9E                            		even
00014E9E                            		even
00014E9E                            
00014E9E                            ; ---------------------------------------------------------------------------
00014E9E                            ; Sonic	pattern	loading	subroutine
00014E9E                            ; ---------------------------------------------------------------------------
00014E9E                            
00014E9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E9E                            Player_DPLC:
00014E9E 0000 0000                  	dc.l	SonicDynPLC
00014EA2 0000 0000                  	dc.l	SonicDynPLC ; gronic
00014EA6 0000 0000                  	dc.l	SonicDynPLC ; anakama
00014EAA 0000 0000                  	dc.l	SonicDynPLC ; LimitedSonic
00014EAE                            	; add pointers for player dplc here
00014EAE                            Player_Art:
00014EAE 0000 0000                  	dc.l	Art_Sonic
00014EB2 0000 0000                  	dc.l	Art_Sonic ; gronic
00014EB6 0000 0000                  	dc.l	Art_Sonic ; anakama
00014EBA 0000 0000                  	dc.l	Art_Sonic ; LimitedSonic
00014EBE                            	; add pointers for player art here
00014EBE                            
00014EBE                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00014EBE 7000                       		moveq	#0,d0
00014EC0 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014EC4 B038 F766                  		cmp.b	($FFFFF766).w,d0
00014EC8 6700                       		beq.s	locret_13C96
00014ECA 11C0 F766                  		move.b	d0,($FFFFF766).w
00014ECE                            		
00014ECE 323C 0000                  		move.w	#0,d1
00014ED2 1238 FFE8                  		move.b	(v_character),d1
00014ED6 E549                       		lsl.w	#2,d1
00014ED8 45FA FFC4                  		lea 	Player_DPLC(pc),a2
00014EDC                            
00014EDC 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
00014EE0                            		
00014EE0 D040                       		add.w	d0,d0
00014EE2 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014EE6 7200                       		moveq	#0,d1
00014EE8 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014EEA 5301                       		subq.b	#1,d1
00014EEC 6B00                       		bmi.s	locret_13C96
00014EEE 47F8 C800                  		lea	($FFFFC800).w,a3
00014EF2 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014EF8                            
00014EF8                            SPLC_ReadEntry:
00014EF8 303C 0000                  		move.w	#0,d0
00014EFC 1038 FFE8                  		move.b	(v_character),d0
00014F00 E548                       		lsl.w	#2,d0
00014F02 43FA FFAA                  		lea 	Player_Art(pc),a1
00014F06                            
00014F06 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
00014F0A                            
00014F0A 7400                       		moveq	#0,d2
00014F0C 141A                       		move.b	(a2)+,d2
00014F0E 3002                       		move.w	d2,d0
00014F10 E808                       		lsr.b	#4,d0
00014F12 E14A                       		lsl.w	#8,d2
00014F14 141A                       		move.b	(a2)+,d2
00014F16 EB4A                       		lsl.w	#5,d2
00014F18 D3C2                       		adda.l	d2,a1
00014F1A                            
00014F1A                            SPLC_LoadTile:
00014F1A 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014F1E 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00014F22 47EB 0020                  		lea	$20(a3),a3	; next tile
00014F26 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00014F2A                            
00014F2A 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014F2E                            
00014F2E                            locret_13C96:
00014F2E 4E75                       		rts	
00014F30                            ; End of function LoadSonicDynPLC
00014F30                            
00014F30                            ; ===========================================================================
00014F30                            ; ---------------------------------------------------------------------------
00014F30                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014F30                            ; ---------------------------------------------------------------------------
00014F30                            
00014F30                            Obj0A:					; XREF: Obj_Index
00014F30 7000                       		moveq	#0,d0
00014F32 1028 0024                  		move.b	$24(a0),d0
00014F36 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00014F3A 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014F3E                            ; ===========================================================================
00014F3E 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00014F42 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00014F46 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014F4A 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014F4E 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014F50                            ; ===========================================================================
00014F50                            
00014F50                            Obj0A_Main:				; XREF: Obj0A_Index
00014F50 5428 0024                  		addq.b	#2,$24(a0)
00014F54 217C 0001 3AEA 0004        		move.l	#Map_obj64,4(a0)
00014F5C 317C 8348 0002             		move.w	#$8348,2(a0)
00014F62 117C 0084 0001             		move.b	#$84,1(a0)
00014F68 117C 0010 0019             		move.b	#$10,$19(a0)
00014F6E 117C 0001 0018             		move.b	#1,$18(a0)
00014F74 1028 0028                  		move.b	$28(a0),d0
00014F78 6A00                       		bpl.s	loc_13D00
00014F7A 5028 0024                  		addq.b	#8,$24(a0)
00014F7E 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014F86 317C 0440 0002             		move.w	#$440,2(a0)
00014F8C 0240 007F                  		andi.w	#$7F,d0
00014F90 1140 0033                  		move.b	d0,$33(a0)
00014F94 6000 0000                  		bra.w	Obj0A_Countdown
00014F98                            ; ===========================================================================
00014F98                            
00014F98                            loc_13D00:
00014F98 1140 001C                  		move.b	d0,$1C(a0)
00014F9C 3168 0008 0030             		move.w	8(a0),$30(a0)
00014FA2 317C FF78 0012             		move.w	#-$88,$12(a0)
00014FA8                            
00014FA8                            Obj0A_Animate:				; XREF: Obj0A_Index
00014FA8 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014FAE 4EB9 0000 B7A4             		jsr	AnimateSprite
00014FB4                            
00014FB4                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014FB4 3038 F646                  		move.w	($FFFFF646).w,d0
00014FB8 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014FBC 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00014FBE 117C 0006 0024             		move.b	#6,$24(a0)
00014FC4 5E28 001C                  		addq.b	#7,$1C(a0)
00014FC8 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014FCE 6700                       		beq.s	Obj0A_Display
00014FD0 6000                       		bra.s	Obj0A_Display
00014FD2                            ; ===========================================================================
00014FD2                            
00014FD2                            Obj0A_Wobble:
00014FD2 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014FD6 6700                       		beq.s	loc_13D44
00014FD8 5868 0030                  		addq.w	#4,$30(a0)
00014FDC                            
00014FDC                            loc_13D44:
00014FDC 1028 0026                  		move.b	$26(a0),d0
00014FE0 5228 0026                  		addq.b	#1,$26(a0)
00014FE4 0240 007F                  		andi.w	#$7F,d0
00014FE8 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014FEE 1031 0000                  		move.b	(a1,d0.w),d0
00014FF2 4880                       		ext.w	d0
00014FF4 D068 0030                  		add.w	$30(a0),d0
00014FF8 3140 0008                  		move.w	d0,8(a0)
00014FFC 6100                       		bsr.s	Obj0A_ShowNumber
00014FFE 4EBA 9730                  		jsr	SpeedToPos
00015002 4A28 0001                  		tst.b	1(a0)
00015006 6A00                       		bpl.s	Obj0A_Delete
00015008 4EFA 974C                  		jmp	DisplaySprite
0001500C                            ; ===========================================================================
0001500C                            
0001500C                            Obj0A_Delete:
0001500C 4EFA 9784                  		jmp	DeleteObject
00015010                            ; ===========================================================================
00015010                            
00015010                            Obj0A_Display:				; XREF: Obj0A_Index
00015010 6100                       		bsr.s	Obj0A_ShowNumber
00015012 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015018 4EB9 0000 B7A4             		jsr	AnimateSprite
0001501E 4EFA 9736                  		jmp	DisplaySprite
00015022                            ; ===========================================================================
00015022                            
00015022                            Obj0A_Delete2:				; XREF: Obj0A_Index
00015022 4EFA 976E                  		jmp	DeleteObject
00015026                            ; ===========================================================================
00015026                            
00015026                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00015026 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
0001502C 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
0001502E 5368 0038                  		subq.w	#1,$38(a0)
00015032 6600                       		bne.s	Obj0A_Display2
00015034 117C 000E 0024             		move.b	#$E,$24(a0)
0001503A 5E28 001C                  		addq.b	#7,$1C(a0)
0001503E 60D0                       		bra.s	Obj0A_Display
00015040                            ; ===========================================================================
00015040                            
00015040                            Obj0A_Display2:
00015040 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00015046 4EB9 0000 B7A4             		jsr	AnimateSprite
0001504C 4A28 0001                  		tst.b	1(a0)
00015050 6A00                       		bpl.s	Obj0A_Delete3
00015052 4EFA 9702                  		jmp	DisplaySprite
00015056                            ; ===========================================================================
00015056                            
00015056                            Obj0A_Delete3:
00015056 4EFA 973A                  		jmp	DeleteObject
0001505A                            ; ===========================================================================
0001505A                            
0001505A                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
0001505A 4A68 0038                  		tst.w	$38(a0)
0001505E 6700                       		beq.s	locret_13E1A
00015060 5368 0038                  		subq.w	#1,$38(a0)
00015064 6600                       		bne.s	locret_13E1A
00015066 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
0001506C 6400                       		bcc.s	locret_13E1A
0001506E 317C 000F 0038             		move.w	#$F,$38(a0)
00015074 4268 0012                  		clr.w	$12(a0)
00015078 117C 0080 0001             		move.b	#$80,1(a0)
0001507E 3028 0008                  		move.w	8(a0),d0
00015082 9078 F700                  		sub.w	($FFFFF700).w,d0
00015086 0640 0080                  		addi.w	#$80,d0
0001508A 3140 0008                  		move.w	d0,8(a0)
0001508E 3028 000C                  		move.w	$C(a0),d0
00015092 9078 F704                  		sub.w	($FFFFF704).w,d0
00015096 0640 0080                  		addi.w	#$80,d0
0001509A 3140 000A                  		move.w	d0,$A(a0)
0001509E 117C 000C 0024             		move.b	#$C,$24(a0)
000150A4                            
000150A4                            locret_13E1A:
000150A4 4E75                       		rts	
000150A6                            ; ===========================================================================
000150A6                            Obj0A_WobbleData:
000150A6 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000150B7 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000150C8 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
000150D9 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
000150E9 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000150F6 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015103 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015110 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
0001511D FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00015126                            ; ===========================================================================
00015126                            
00015126                            Obj0A_Countdown:			; XREF: Obj0A_Index
00015126 4A68 002C                  		tst.w	$2C(a0)
0001512A 6600 0000                  		bne.w	loc_13F86
0001512E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00015134 6400 0000                  		bcc.w	locret_1408C
00015138 0838 0006 D022             		btst	#6,($FFFFD022).w
0001513E 6700 0000                  		beq.w	locret_1408C
00015142 5368 0038                  		subq.w	#1,$38(a0)
00015146 6A00 0000                  		bpl.w	loc_13FAC
0001514A 317C 003B 0038             		move.w	#59,$38(a0)
00015150 317C 0001 0036             		move.w	#1,$36(a0)
00015156 4EB9 0000 33F0             		jsr	(RandomNumber).l
0001515C 0240 0001                  		andi.w	#1,d0
00015160 1140 0034                  		move.b	d0,$34(a0)
00015164 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00015168 0C40 0019                  		cmpi.w	#$19,d0
0001516C 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
0001516E 0C40 0014                  		cmpi.w	#$14,d0
00015172 6700                       		beq.s	Obj0A_WarnSound
00015174 0C40 000F                  		cmpi.w	#$F,d0
00015178 6700                       		beq.s	Obj0A_WarnSound
0001517A 0C40 000C                  		cmpi.w	#$C,d0
0001517E 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00015180 6600                       		bne.s	loc_13F02
00015182 303C 0092                  		move.w	#$92,d0
00015186 4EB9 0000 1C74             		jsr	(PlaySound).l	; play countdown music
0001518C                            
0001518C                            loc_13F02:
0001518C 5328 0032                  		subq.b	#1,$32(a0)
00015190 6A00                       		bpl.s	Obj0A_ReduceAir
00015192 1168 0033 0032             		move.b	$33(a0),$32(a0)
00015198 08E8 0007 0036             		bset	#7,$36(a0)
0001519E 6000                       		bra.s	Obj0A_ReduceAir
000151A0                            ; ===========================================================================
000151A0                            
000151A0                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000151A0 303C 00C2                  		move.w	#$C2,d0
000151A4 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000151AA                            
000151AA                            Obj0A_ReduceAir:
000151AA 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000151AE 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000151B2 6100 0000                  		bsr.w	ResumeMusic
000151B6 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000151BC 303C 00B2                  		move.w	#$B2,d0
000151C0 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play drowning sound
000151C6 117C 000A 0034             		move.b	#$A,$34(a0)
000151CC 317C 0001 0036             		move.w	#1,$36(a0)
000151D2 317C 0078 002C             		move.w	#$78,$2C(a0)
000151D8 2F08                       		move.l	a0,-(sp)
000151DA 41F8 D000                  		lea	($FFFFD000).w,a0
000151DE 6100 F81C                  		bsr.w	Sonic_ResetOnFloor
000151E2 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
000151E8 08E8 0001 0022             		bset	#1,$22(a0)
000151EE 08E8 0007 0002             		bset	#7,2(a0)
000151F4 317C 0000 0012             		move.w	#0,$12(a0)
000151FA 317C 0000 0010             		move.w	#0,$10(a0)
00015200 317C 0000 0014             		move.w	#0,$14(a0)
00015206 11FC 0001 F744             		move.b	#1,($FFFFF744).w
0001520C 205F                       		movea.l	(sp)+,a0
0001520E 4E75                       		rts	
00015210                            ; ===========================================================================
00015210                            
00015210                            loc_13F86:
00015210 5368 002C                  		subq.w	#1,$2C(a0)
00015214 6600                       		bne.s	loc_13F94
00015216 11FC 0006 D024             		move.b	#6,($FFFFD024).w
0001521C 4E75                       		rts	
0001521E                            ; ===========================================================================
0001521E                            
0001521E                            loc_13F94:
0001521E 2F08                       		move.l	a0,-(sp)
00015220 41F8 D000                  		lea	($FFFFD000).w,a0
00015224 4EBA 950A                  		jsr	SpeedToPos
00015228 0668 0010 0012             		addi.w	#$10,$12(a0)
0001522E 205F                       		movea.l	(sp)+,a0
00015230 6000                       		bra.s	loc_13FAC
00015232                            ; ===========================================================================
00015232                            
00015232                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00015232 6000                       		bra.s	Obj0A_MakeItem
00015234                            ; ===========================================================================
00015234                            
00015234                            loc_13FAC:
00015234 4A68 0036                  		tst.w	$36(a0)
00015238 6700 0000                  		beq.w	locret_1408C
0001523C 5368 003A                  		subq.w	#1,$3A(a0)
00015240 6A00 0000                  		bpl.w	locret_1408C
00015244                            
00015244                            Obj0A_MakeItem:
00015244 4EB9 0000 33F0             		jsr	(RandomNumber).l
0001524A 0240 000F                  		andi.w	#$F,d0
0001524E 3140 003A                  		move.w	d0,$3A(a0)
00015252 4EBA 9988                  		jsr	SingleObjLoad
00015256 6600 0000                  		bne.w	locret_1408C
0001525A 12BC 000A                  		move.b	#$A,0(a1)	; load object
0001525E 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00015264 7006                       		moveq	#6,d0
00015266 0838 0000 D022             		btst	#0,($FFFFD022).w
0001526C 6700                       		beq.s	loc_13FF2
0001526E 4440                       		neg.w	d0
00015270 137C 0040 0026             		move.b	#$40,$26(a1)
00015276                            
00015276                            loc_13FF2:
00015276 D169 0008                  		add.w	d0,8(a1)
0001527A 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00015280 137C 0006 0028             		move.b	#6,$28(a1)
00015286 4A68 002C                  		tst.w	$2C(a0)
0001528A 6700 0000                  		beq.w	loc_1403E
0001528E 0268 0007 003A             		andi.w	#7,$3A(a0)
00015294 0668 0000 003A             		addi.w	#0,$3A(a0)
0001529A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001529E 0440 000C                  		subi.w	#$C,d0
000152A2 3340 000C                  		move.w	d0,$C(a1)
000152A6 4EB9 0000 33F0             		jsr	(RandomNumber).l
000152AC 1340 0026                  		move.b	d0,$26(a1)
000152B0 3038 FE04                  		move.w	($FFFFFE04).w,d0
000152B4 0200 0003                  		andi.b	#3,d0
000152B8 6600                       		bne.s	loc_14082
000152BA 137C 000E 0028             		move.b	#$E,$28(a1)
000152C0 6000                       		bra.s	loc_14082
000152C2                            ; ===========================================================================
000152C2                            
000152C2                            loc_1403E:
000152C2 0828 0007 0036             		btst	#7,$36(a0)
000152C8 6700                       		beq.s	loc_14082
000152CA 3438 FE14                  		move.w	($FFFFFE14).w,d2
000152CE E24A                       		lsr.w	#1,d2
000152D0 4EB9 0000 33F0             		jsr	(RandomNumber).l
000152D6 0240 0003                  		andi.w	#3,d0
000152DA 6600                       		bne.s	loc_1406A
000152DC 08E8 0006 0036             		bset	#6,$36(a0)
000152E2 6600                       		bne.s	loc_14082
000152E4 1342 0028                  		move.b	d2,$28(a1)
000152E8 337C 001C 0038             		move.w	#$1C,$38(a1)
000152EE                            
000152EE                            loc_1406A:
000152EE 4A28 0034                  		tst.b	$34(a0)
000152F2 6600                       		bne.s	loc_14082
000152F4 08E8 0006 0036             		bset	#6,$36(a0)
000152FA 6600                       		bne.s	loc_14082
000152FC 1342 0028                  		move.b	d2,$28(a1)
00015300 337C 001C 0038             		move.w	#$1C,$38(a1)
00015306                            
00015306                            loc_14082:
00015306 5328 0034                  		subq.b	#1,$34(a0)
0001530A 6A00                       		bpl.s	locret_1408C
0001530C 4268 0036                  		clr.w	$36(a0)
00015310                            
00015310                            locret_1408C:
00015310 4E75                       		rts	
00015312                            
00015312                            ; ---------------------------------------------------------------------------
00015312                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00015312                            ; ---------------------------------------------------------------------------
00015312                            
00015312                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015312                            
00015312                            
00015312                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00015312 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00015318                             
00015318                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00015318                             
00015318 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
0001531C                             
0001531C 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00015322 6600                       		bne.s	Air_GetBgm2	; if not, branch
00015324 43F9 0000 4492             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001532A 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001532C                             
0001532C                            Air_GetBgm2:
0001532C 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00015332 6600                       		bne.s	Air_GetBgm3	; if not, branch
00015334 43F9 0000 449A             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001533A 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001533C                             
0001533C                            Air_GetBgm3:
0001533C 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00015342 6600                       		bne.s	Air_GetBgm4	; if not, branch
00015344 43F9 0000 44A2             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
0001534A 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
0001534C                             
0001534C                            Air_GetBgm4:
0001534C 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00015352 6600                       		bne.s	Air_PlayMusic	; if not, branch
00015354 43F9 0000 44AA             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001535A                             
0001535A                            Air_PlayMusic:
0001535A 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
0001535E                             
0001535E                            loc_140A6:
0001535E 4EB9 0000 1C74             		jsr	(PlaySound).l
00015364                             
00015364                            ; NineKode ends here
00015364                            
00015364                            loc_140AC:
00015364 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0001536A 4238 D372                  		clr.b	($FFFFD372).w
0001536E 4E75                       		rts	
00015370                            ; End of function ResumeMusic
00015370                            
00015370                            ; ===========================================================================
00015370                            Ani_obj0A:
00015370                            	include "_anim\obj0A.asm"
00015370                            ; ---------------------------------------------------------------------------
00015370                            ; Animation script - countdown numbers and bubbles (LZ)
00015370                            ; ---------------------------------------------------------------------------
00015370 0000                       		dc.w byte_140D6-Ani_obj0A
00015372 0000                       		dc.w byte_140E0-Ani_obj0A
00015374 0000                       		dc.w byte_140EA-Ani_obj0A
00015376 0000                       		dc.w byte_140F4-Ani_obj0A
00015378 0000                       		dc.w byte_140FE-Ani_obj0A
0001537A 0000                       		dc.w byte_14108-Ani_obj0A
0001537C 0000                       		dc.w byte_14112-Ani_obj0A
0001537E 0000                       		dc.w byte_14118-Ani_obj0A
00015380 0000                       		dc.w byte_14120-Ani_obj0A
00015382 0000                       		dc.w byte_14128-Ani_obj0A
00015384 0000                       		dc.w byte_14130-Ani_obj0A
00015386 0000                       		dc.w byte_14138-Ani_obj0A
00015388 0000                       		dc.w byte_14140-Ani_obj0A
0001538A 0000                       		dc.w byte_14148-Ani_obj0A
0001538C 0000                       		dc.w byte_1414A-Ani_obj0A
0001538E 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00015398 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000153A2 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000153AC 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000153B6 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000153C0 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000153CA 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000153D0 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
000153D8 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
000153E0 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
000153E8 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
000153F0 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
000153F8 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00015400 0EFC                       byte_14148:	dc.b $E, $FC
00015402 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00015408                            		even
00015408                            		even
00015408                            
00015408                            ; ---------------------------------------------------------------------------
00015408                            ; Sprite mappings - drowning countdown numbers (LZ)
00015408                            ; ---------------------------------------------------------------------------
00015408                            Map_obj0A:
00015408                            	include "_maps\obj0A.asm"
00015408                            ; ---------------------------------------------------------------------------
00015408                            ; Sprite mappings - drowning countdown numbers (LZ)
00015408                            ; ---------------------------------------------------------------------------
00015408 0000                       		dc.w byte_14152-Map_obj0A
0001540A 01                         byte_14152:	dc.b 1
0001540B E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00015410                            		even
00015410                            		even
00015410                            
00015410                            ; ===========================================================================
00015410                            ; ---------------------------------------------------------------------------
00015410                            ; Object 38 - shield and invincibility stars
00015410                            ; ---------------------------------------------------------------------------
00015410                            
00015410                            Obj38:					; XREF: Obj_Index
00015410 7000                       		moveq	#0,d0
00015412 1028 0024                  		move.b	$24(a0),d0
00015416 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
0001541A 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
0001541E                            ; ===========================================================================
0001541E 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00015420 0000                       		dc.w Obj38_Shield-Obj38_Index
00015422 0000                       		dc.w Obj38_Stars-Obj38_Index
00015424                            ; ===========================================================================
00015424                            
00015424                            Obj38_Main:				; XREF: Obj38_Index
00015424 5428 0024                  		addq.b	#2,$24(a0)
00015428 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00015430 117C 0004 0001             		move.b	#4,1(a0)
00015436 117C 0001 0018             		move.b	#1,$18(a0)
0001543C 117C 0010 0019             		move.b	#$10,$19(a0)
00015442 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00015446 6600                       		bne.s	Obj38_DoStars	; if not, branch
00015448 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
0001544E 4E75                       		rts	
00015450                            ; ===========================================================================
00015450                            
00015450                            Obj38_DoStars:
00015450 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00015454 317C 055C 0002             		move.w	#$55C,2(a0)
0001545A 4E75                       		rts	
0001545C                            ; ===========================================================================
0001545C                            
0001545C                            Obj38_Shield:				; XREF: Obj38_Index
0001545C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015460 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00015462 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00015466 6700                       		beq.s	Obj38_Delete	; if not, branch
00015468 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
0001546E 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00015474 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001547A 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00015480 4EB9 0000 B7A4             		jsr	AnimateSprite
00015486 4EFA 92CE                  		jmp	DisplaySprite
0001548A                            ; ===========================================================================
0001548A                            
0001548A                            Obj38_RmvShield:
0001548A 4E75                       		rts	
0001548C                            ; ===========================================================================
0001548C                            
0001548C                            Obj38_Delete:
0001548C 4EFA 9304                  		jmp	DeleteObject
00015490                            ; ===========================================================================
00015490                            
00015490                            Obj38_Stars:				; XREF: Obj38_Index
00015490 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015494 6700                       		beq.s	Obj38_Delete2	; if not, branch
00015496 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0001549A 1228 001C                  		move.b	$1C(a0),d1
0001549E 5301                       		subq.b	#1,d1
000154A0 6000                       		bra.s	Obj38_StarTrail
000154A2                            ; ===========================================================================
000154A2 E909                       		lsl.b	#4,d1
000154A4 5801                       		addq.b	#4,d1
000154A6 9001                       		sub.b	d1,d0
000154A8 1228 0030                  		move.b	$30(a0),d1
000154AC 9001                       		sub.b	d1,d0
000154AE 5801                       		addq.b	#4,d1
000154B0 0201 000F                  		andi.b	#$F,d1
000154B4 1141 0030                  		move.b	d1,$30(a0)
000154B8 6000                       		bra.s	Obj38_StarTrail2a
000154BA                            ; ===========================================================================
000154BA                            
000154BA                            Obj38_StarTrail:			; XREF: Obj38_Stars
000154BA E709                       		lsl.b	#3,d1
000154BC 1401                       		move.b	d1,d2
000154BE D201                       		add.b	d1,d1
000154C0 D202                       		add.b	d2,d1
000154C2 5801                       		addq.b	#4,d1
000154C4 9001                       		sub.b	d1,d0
000154C6 1228 0030                  		move.b	$30(a0),d1
000154CA 9001                       		sub.b	d1,d0
000154CC 5801                       		addq.b	#4,d1
000154CE 0C01 0018                  		cmpi.b	#$18,d1
000154D2 6500                       		bcs.s	Obj38_StarTrail2
000154D4 7200                       		moveq	#0,d1
000154D6                            
000154D6                            Obj38_StarTrail2:
000154D6 1141 0030                  		move.b	d1,$30(a0)
000154DA                            
000154DA                            Obj38_StarTrail2a:
000154DA 43F8 CB00                  		lea	($FFFFCB00).w,a1
000154DE 43F1 0000                  		lea	(a1,d0.w),a1
000154E2 3159 0008                  		move.w	(a1)+,8(a0)
000154E6 3159 000C                  		move.w	(a1)+,$C(a0)
000154EA 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000154F0 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000154F6 4EB9 0000 B7A4             		jsr	AnimateSprite
000154FC 4EFA 9258                  		jmp	DisplaySprite
00015500                            ; ===========================================================================
00015500                            
00015500                            Obj38_Delete2:				; XREF: Obj38_Stars
00015500 4EFA 9290                  		jmp	DeleteObject
00015504                            ; ===========================================================================
00015504                            ; ---------------------------------------------------------------------------
00015504                            ; Object 4A - special stage entry from beta
00015504                            ; ---------------------------------------------------------------------------
00015504                            
00015504                            Obj4A:					; XREF: Obj_Index
00015504 7000                       		moveq	#0,d0
00015506 1028 0024                  		move.b	$24(a0),d0
0001550A 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
0001550E 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00015512                            ; ===========================================================================
00015512 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00015514 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00015516 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00015518                            ; ===========================================================================
00015518                            
00015518                            Obj4A_Main:				; XREF: Obj4A_Index
00015518 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
0001551C 6700                       		beq.s	Obj4A_Main2	; if yes, branch
0001551E 4E75                       		rts	
00015520                            ; ===========================================================================
00015520                            
00015520                            Obj4A_Main2:
00015520 5428 0024                  		addq.b	#2,$24(a0)
00015524 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
0001552C 117C 0004 0001             		move.b	#4,1(a0)
00015532 117C 0001 0018             		move.b	#1,$18(a0)
00015538 117C 0038 0019             		move.b	#$38,$19(a0)
0001553E 317C 0541 0002             		move.w	#$541,2(a0)
00015544 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
0001554A                            
0001554A                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
0001554A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00015550 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00015556 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001555C 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00015562 4EB9 0000 B7A4             		jsr	AnimateSprite
00015568 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001556E 6600                       		bne.s	Obj4A_Display
00015570 4A38 D000                  		tst.b	($FFFFD000).w
00015574 6700                       		beq.s	Obj4A_Display
00015576 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
0001557C 303C 00A8                  		move.w	#$A8,d0
00015580 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00015586                            
00015586                            Obj4A_Display:
00015586 4EFA 91CE                  		jmp	DisplaySprite
0001558A                            ; ===========================================================================
0001558A                            
0001558A                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
0001558A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0001558E 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00015590 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00015596 4EFA 91FA                  		jmp	DeleteObject
0001559A                            ; ===========================================================================
0001559A                            
0001559A                            Obj4A_Wait:
0001559A 4E75                       		rts	
0001559C                            ; ===========================================================================
0001559C                            ; ---------------------------------------------------------------------------
0001559C                            ; Object 08 - water splash (LZ)
0001559C                            ; ---------------------------------------------------------------------------
0001559C                            
0001559C                            Obj08:					; XREF: Obj_Index
0001559C 7000                       		moveq	#0,d0
0001559E 1028 0024                  		move.b	$24(a0),d0
000155A2 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000155A6 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
000155AA                            ; ===========================================================================
000155AA 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
000155AC 0000                       		dc.w Obj08_Display-Obj08_Index
000155AE 0000                       		dc.w Obj08_Delete-Obj08_Index
000155B0                            ; ===========================================================================
000155B0                            
000155B0                            Obj08_Main:				; XREF: Obj08_Index
000155B0 5428 0024                  		addq.b	#2,$24(a0)
000155B4 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
000155BC 0028 0004 0001             		ori.b	#4,1(a0)
000155C2 117C 0001 0018             		move.b	#1,$18(a0)
000155C8 117C 0010 0019             		move.b	#$10,$19(a0)
000155CE 317C 4259 0002             		move.w	#$4259,2(a0)
000155D4 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
000155DA                            
000155DA                            Obj08_Display:				; XREF: Obj08_Index
000155DA 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
000155E0 43F9 0000 0000             		lea	(Ani_obj08).l,a1
000155E6 4EB9 0000 B7A4             		jsr	AnimateSprite
000155EC 4EFA 9168                  		jmp	DisplaySprite
000155F0                            ; ===========================================================================
000155F0                            
000155F0                            Obj08_Delete:				; XREF: Obj08_Index
000155F0 4EFA 91A0                  		jmp	DeleteObject	; delete when animation	is complete
000155F4                            ; ===========================================================================
000155F4                            Ani_obj38:
000155F4                            	include "_anim\obj38.asm"
000155F4                            ; ---------------------------------------------------------------------------
000155F4                            ; Animation script - shield and invincibility stars
000155F4                            ; ---------------------------------------------------------------------------
000155F4 0000                       		dc.w byte_14356-Ani_obj38
000155F6 0000                       		dc.w byte_1435E-Ani_obj38
000155F8 0000                       		dc.w byte_14364-Ani_obj38
000155FA 0000                       		dc.w byte_1437E-Ani_obj38
000155FC 0000                       		dc.w byte_14398-Ani_obj38
000155FE 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00015606 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
0001560C 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
0001561D 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00015626 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00015637 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00015640 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00015651 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
0001565A                            		even
0001565A                            		even
0001565A                            
0001565A                            ; ---------------------------------------------------------------------------
0001565A                            ; Sprite mappings - shield and invincibility stars
0001565A                            ; ---------------------------------------------------------------------------
0001565A                            Map_obj38:
0001565A                            	include "_maps\obj38.asm"
0001565A                            ; ---------------------------------------------------------------------------
0001565A                            ; Sprite mappings - shield and invincibility stars
0001565A                            ; ---------------------------------------------------------------------------
0001565A 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
0001565E 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00015662 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00015666 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
0001566A 04                         byte_143C2:	dc.b 4
0001566B E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015670 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015675 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
0001567A 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
0001567F 04                         byte_143D7:	dc.b 4
00015680 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00015685 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
0001568A 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
0001568F 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00015694 04                         byte_143EC:	dc.b 4
00015695 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
0001569A E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0001569F 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000156A4 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000156A9 04                         byte_14401:	dc.b 4
000156AA E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000156AF E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000156B4 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
000156B9 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000156BE 04                         byte_14416:	dc.b 4
000156BF E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
000156C4 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000156C9 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000156CE 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
000156D3 04                         byte_1442B:	dc.b 4
000156D4 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000156D9 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000156DE 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000156E3 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000156E8 04                         byte_14440:	dc.b 4
000156E9 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000156EE E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000156F3 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000156F8 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000156FE 00                         		even
000156FE 00                         		even
000156FE                            
000156FE                            Ani_obj4A:
000156FE                            	include "_anim\obj4A.asm"
000156FE                            ; ---------------------------------------------------------------------------
000156FE                            ; Animation script - special stage entry effect from beta
000156FE                            ; ---------------------------------------------------------------------------
000156FE 0000                       		dc.w byte_14458-Ani_obj4A
00015700 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00015714                            		even
00015714                            		even
00015714                            
00015714                            ; ---------------------------------------------------------------------------
00015714                            ; Sprite mappings - special stage entry	from beta
00015714                            ; ---------------------------------------------------------------------------
00015714                            Map_obj4A:
00015714                            	include "_maps\obj4A.asm"
00015714                            ; ---------------------------------------------------------------------------
00015714                            ; Sprite mappings - special stage entry	from beta
00015714                            ; ---------------------------------------------------------------------------
00015714 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00015718 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
0001571C 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00015720 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00015724 03                         byte_1447C:	dc.b 3
00015725 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
0001572A 0004 0001 00               		dc.b 0,	4, 0, 1, 0
0001572F 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00015734 03                         byte_1448C:	dc.b 3
00015735 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
0001573A 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
0001573F 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00015744 05                         byte_1449C:	dc.b 5
00015745 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
0001574A EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
0001574F FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00015754 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00015759 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
0001575E 09                         byte_144B6:	dc.b 9
0001575F F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00015764 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00015769 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
0001576E 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00015773 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00015778 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
0001577D F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015782 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00015787 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
0001578C 12                         byte_144E4:	dc.b $12
0001578D 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00015792 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00015797 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
0001579C 0000 0025 00               		dc.b 0,	0, 0, $25, 0
000157A1 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
000157A6 1000 1026 00               		dc.b $10, 0, $10, $26, 0
000157AB 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
000157B0 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
000157B5 0000 0026 10               		dc.b 0,	0, 0, $26, $10
000157BA 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
000157BF 0800 0826 18               		dc.b 8,	0, 8, $26, $18
000157C4 0800 0029 20               		dc.b 8,	0, 0, $29, $20
000157C9 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
000157CE F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
000157D3 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
000157D8 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
000157DD 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
000157E2 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
000157E7 11                         byte_1453F:	dc.b $11
000157E8 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
000157ED F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
000157F2 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
000157F7 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
000157FC 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00015801 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015806 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
0001580B F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00015810 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00015815 0800 0825 30               		dc.b 8,	0, 8, $25, $30
0001581A 0000 0826 38               		dc.b 0,	0, 8, $26, $38
0001581F 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00015824 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00015829 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
0001582E F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00015833 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00015838 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
0001583D 09                         byte_14595:	dc.b 9
0001583E FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00015843 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00015848 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
0001584D 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00015852 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00015857 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
0001585C 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00015861 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00015866 04                         		dc.b 4
00015867 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
0001586C                            		even
0001586C                            		even
0001586C                            
0001586C                            Ani_obj08:
0001586C                            	include "_anim\obj08.asm"
0001586C                            ; ---------------------------------------------------------------------------
0001586C                            ; Animation script - water splash (LZ)
0001586C                            ; ---------------------------------------------------------------------------
0001586C 0000                       		dc.w byte_145C6-Ani_obj08
0001586E 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00015874                            		even
00015874                            		even
00015874                            
00015874                            ; ---------------------------------------------------------------------------
00015874                            ; Sprite mappings - water splash (LZ)
00015874                            ; ---------------------------------------------------------------------------
00015874                            Map_obj08:
00015874                            	include "_maps\obj08.asm"
00015874                            ; ---------------------------------------------------------------------------
00015874                            ; Sprite mappings - water splash (LZ)
00015874                            ; ---------------------------------------------------------------------------
00015874 0000                       		dc.w byte_145D2-Map_obj08
00015876 0000                       		dc.w byte_145DD-Map_obj08
00015878 0000                       		dc.w byte_145E8-Map_obj08
0001587A 02                         byte_145D2:	dc.b 2
0001587B F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00015880 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00015885 02                         byte_145DD:	dc.b 2
00015886 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
0001588B EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00015890 01                         byte_145E8:	dc.b 1
00015891 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00015896                            		even
00015896                            		even
00015896                            
00015896                            ; ---------------------------------------------------------------------------
00015896                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00015896                            ; ---------------------------------------------------------------------------
00015896                            
00015896                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015896                            
00015896                            
00015896                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00015896 0828 0003 0022             		btst	#3,$22(a0)
0001589C 6700                       		beq.s	loc_14602
0001589E 7000                       		moveq	#0,d0
000158A0 11C0 F768                  		move.b	d0,($FFFFF768).w
000158A4 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000158A8 4E75                       		rts	
000158AA                            ; ===========================================================================
000158AA                            
000158AA                            loc_14602:
000158AA 7003                       		moveq	#3,d0
000158AC 11C0 F768                  		move.b	d0,($FFFFF768).w
000158B0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000158B4 1028 0026                  		move.b	$26(a0),d0
000158B8 0600 0020                  		addi.b	#$20,d0
000158BC 6A00                       		bpl.s	loc_14624
000158BE 1028 0026                  		move.b	$26(a0),d0
000158C2 6A00                       		bpl.s	loc_1461E
000158C4 5300                       		subq.b	#1,d0
000158C6                            
000158C6                            loc_1461E:
000158C6 0600 0020                  		addi.b	#$20,d0
000158CA 6000                       		bra.s	loc_14630
000158CC                            ; ===========================================================================
000158CC                            
000158CC                            loc_14624:
000158CC 1028 0026                  		move.b	$26(a0),d0
000158D0 6A00                       		bpl.s	loc_1462C
000158D2 5200                       		addq.b	#1,d0
000158D4                            
000158D4                            loc_1462C:
000158D4 0600 001F                  		addi.b	#$1F,d0
000158D8                            
000158D8                            loc_14630:
000158D8 0200 00C0                  		andi.b	#$C0,d0
000158DC 0C00 0040                  		cmpi.b	#$40,d0
000158E0 6700 0000                  		beq.w	Sonic_WalkVertL
000158E4 0C00 0080                  		cmpi.b	#$80,d0
000158E8 6700 0000                  		beq.w	Sonic_WalkCeiling
000158EC 0C00 00C0                  		cmpi.b	#$C0,d0
000158F0 6700 0000                  		beq.w	Sonic_WalkVertR
000158F4 3428 000C                  		move.w	$C(a0),d2
000158F8 3628 0008                  		move.w	8(a0),d3
000158FC 7000                       		moveq	#0,d0
000158FE 1028 0016                  		move.b	$16(a0),d0
00015902 4880                       		ext.w	d0
00015904 D440                       		add.w	d0,d2
00015906 1028 0017                  		move.b	$17(a0),d0
0001590A 4880                       		ext.w	d0
0001590C D640                       		add.w	d0,d3
0001590E 49F8 F768                  		lea	($FFFFF768).w,a4
00015912 367C 0010                  		movea.w	#$10,a3
00015916 3C3C 0000                  		move.w	#0,d6
0001591A 7A0D                       		moveq	#$D,d5
0001591C 6100 0000                  		bsr.w	FindFloor
00015920 3F01                       		move.w	d1,-(sp)
00015922 3428 000C                  		move.w	$C(a0),d2
00015926 3628 0008                  		move.w	8(a0),d3
0001592A 7000                       		moveq	#0,d0
0001592C 1028 0016                  		move.b	$16(a0),d0
00015930 4880                       		ext.w	d0
00015932 D440                       		add.w	d0,d2
00015934 1028 0017                  		move.b	$17(a0),d0
00015938 4880                       		ext.w	d0
0001593A 4440                       		neg.w	d0
0001593C D640                       		add.w	d0,d3
0001593E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015942 367C 0010                  		movea.w	#$10,a3
00015946 3C3C 0000                  		move.w	#0,d6
0001594A 7A0D                       		moveq	#$D,d5
0001594C 6100 0000                  		bsr.w	FindFloor
00015950 301F                       		move.w	(sp)+,d0
00015952 6100 0000                  		bsr.w	Sonic_Angle
00015956 4A41                       		tst.w	d1
00015958 6700                       		beq.s	locret_146BE
0001595A 6A00                       		bpl.s	loc_146C0
0001595C 0C41 FFF2                  		cmpi.w	#-$E,d1
00015960 6D00                       		blt.s	locret_146E6
00015962 D368 000C                  		add.w	d1,$C(a0)
00015966                            
00015966                            locret_146BE:
00015966 4E75                       		rts	
00015968                            ; ===========================================================================
00015968                            
00015968                            loc_146C0:
00015968 0C41 000E                  		cmpi.w	#$E,d1
0001596C 6E00                       		bgt.s	loc_146CC
0001596E                            
0001596E                            loc_146C6:
0001596E D368 000C                  		add.w	d1,$C(a0)
00015972 4E75                       		rts	
00015974                            ; ===========================================================================
00015974                            
00015974                            loc_146CC:
00015974 4A28 0038                  		tst.b	$38(a0)
00015978 66F4                       		bne.s	loc_146C6
0001597A 08E8 0001 0022             		bset	#1,$22(a0)
00015980 08A8 0005 0022             		bclr	#5,$22(a0)
00015986 117C 0001 001D             		move.b	#1,$1D(a0)
0001598C 4E75                       		rts	
0001598E                            ; ===========================================================================
0001598E                            
0001598E                            locret_146E6:
0001598E 4E75                       		rts	
00015990                            ; End of function Sonic_AnglePos
00015990                            
00015990                            ; ===========================================================================
00015990 2428 0008                  		move.l	8(a0),d2
00015994 3028 0010                  		move.w	$10(a0),d0
00015998 48C0                       		ext.l	d0
0001599A E180                       		asl.l	#8,d0
0001599C 9480                       		sub.l	d0,d2
0001599E 2142 0008                  		move.l	d2,8(a0)
000159A2 303C 0038                  		move.w	#$38,d0
000159A6 48C0                       		ext.l	d0
000159A8 E180                       		asl.l	#8,d0
000159AA 9680                       		sub.l	d0,d3
000159AC 2143 000C                  		move.l	d3,$C(a0)
000159B0 4E75                       		rts	
000159B2                            ; ===========================================================================
000159B2                            
000159B2                            locret_1470A:
000159B2 4E75                       		rts	
000159B4                            ; ===========================================================================
000159B4 2628 000C                  		move.l	$C(a0),d3
000159B8 3028 0012                  		move.w	$12(a0),d0
000159BC 0440 0038                  		subi.w	#$38,d0
000159C0 3140 0012                  		move.w	d0,$12(a0)
000159C4 48C0                       		ext.l	d0
000159C6 E180                       		asl.l	#8,d0
000159C8 9680                       		sub.l	d0,d3
000159CA 2143 000C                  		move.l	d3,$C(a0)
000159CE 4E75                       		rts	
000159D0 4E75                       		rts	
000159D2                            ; ===========================================================================
000159D2 2428 0008                  		move.l	8(a0),d2
000159D6 2628 000C                  		move.l	$C(a0),d3
000159DA 3028 0010                  		move.w	$10(a0),d0
000159DE 48C0                       		ext.l	d0
000159E0 E180                       		asl.l	#8,d0
000159E2 9480                       		sub.l	d0,d2
000159E4 3028 0012                  		move.w	$12(a0),d0
000159E8 48C0                       		ext.l	d0
000159EA E180                       		asl.l	#8,d0
000159EC 9680                       		sub.l	d0,d3
000159EE 2142 0008                  		move.l	d2,8(a0)
000159F2 2143 000C                  		move.l	d3,$C(a0)
000159F6 4E75                       		rts	
000159F8                            
000159F8                            ; ---------------------------------------------------------------------------
000159F8                            ; Subroutine to	change Sonic's angle as he walks along the floor
000159F8                            ; ---------------------------------------------------------------------------
000159F8                            
000159F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159F8                            
000159F8                            
000159F8                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
000159F8 1438 F76A                  		move.b	($FFFFF76A).w,d2
000159FC B240                       		cmp.w	d0,d1
000159FE 6F00                       		ble.s	loc_1475E
00015A00 1438 F768                  		move.b	($FFFFF768).w,d2
00015A04 3200                       		move.w	d0,d1
00015A06                            
00015A06                            loc_1475E:
00015A06 0802 0000                  		btst	#0,d2
00015A0A 6600                       		bne.s	loc_1476A
00015A0C 1142 0026                  		move.b	d2,$26(a0)
00015A10 4E75                       		rts	
00015A12                            ; ===========================================================================
00015A12                            
00015A12                            loc_1476A:
00015A12 1428 0026                  		move.b	$26(a0),d2
00015A16 0602 0020                  		addi.b	#$20,d2
00015A1A 0202 00C0                  		andi.b	#$C0,d2
00015A1E 1142 0026                  		move.b	d2,$26(a0)
00015A22 4E75                       		rts	
00015A24                            ; End of function Sonic_Angle
00015A24                            
00015A24                            ; ---------------------------------------------------------------------------
00015A24                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00015A24                            ; ---------------------------------------------------------------------------
00015A24                            
00015A24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A24                            
00015A24                            
00015A24                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00015A24 3428 000C                  		move.w	$C(a0),d2
00015A28 3628 0008                  		move.w	8(a0),d3
00015A2C 7000                       		moveq	#0,d0
00015A2E 1028 0017                  		move.b	$17(a0),d0
00015A32 4880                       		ext.w	d0
00015A34 4440                       		neg.w	d0
00015A36 D440                       		add.w	d0,d2
00015A38 1028 0016                  		move.b	$16(a0),d0
00015A3C 4880                       		ext.w	d0
00015A3E D640                       		add.w	d0,d3
00015A40 49F8 F768                  		lea	($FFFFF768).w,a4
00015A44 367C 0010                  		movea.w	#$10,a3
00015A48 3C3C 0000                  		move.w	#0,d6
00015A4C 7A0D                       		moveq	#$D,d5
00015A4E 6100 0000                  		bsr.w	FindWall
00015A52 3F01                       		move.w	d1,-(sp)
00015A54 3428 000C                  		move.w	$C(a0),d2
00015A58 3628 0008                  		move.w	8(a0),d3
00015A5C 7000                       		moveq	#0,d0
00015A5E 1028 0017                  		move.b	$17(a0),d0
00015A62 4880                       		ext.w	d0
00015A64 D440                       		add.w	d0,d2
00015A66 1028 0016                  		move.b	$16(a0),d0
00015A6A 4880                       		ext.w	d0
00015A6C D640                       		add.w	d0,d3
00015A6E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015A72 367C 0010                  		movea.w	#$10,a3
00015A76 3C3C 0000                  		move.w	#0,d6
00015A7A 7A0D                       		moveq	#$D,d5
00015A7C 6100 0000                  		bsr.w	FindWall
00015A80 301F                       		move.w	(sp)+,d0
00015A82 6100 FF74                  		bsr.w	Sonic_Angle
00015A86 4A41                       		tst.w	d1
00015A88 6700                       		beq.s	locret_147F0
00015A8A 6A00                       		bpl.s	loc_147F2
00015A8C 0C41 FFF2                  		cmpi.w	#-$E,d1
00015A90 6D00 FF20                  		blt.w	locret_1470A
00015A94 D368 0008                  		add.w	d1,8(a0)
00015A98                            
00015A98                            locret_147F0:
00015A98 4E75                       		rts	
00015A9A                            ; ===========================================================================
00015A9A                            
00015A9A                            loc_147F2:
00015A9A 0C41 000E                  		cmpi.w	#$E,d1
00015A9E 6E00                       		bgt.s	loc_147FE
00015AA0                            
00015AA0                            loc_147F8:
00015AA0 D368 0008                  		add.w	d1,8(a0)
00015AA4 4E75                       		rts	
00015AA6                            ; ===========================================================================
00015AA6                            
00015AA6                            loc_147FE:
00015AA6 4A28 0038                  		tst.b	$38(a0)
00015AAA 66F4                       		bne.s	loc_147F8
00015AAC 08E8 0001 0022             		bset	#1,$22(a0)
00015AB2 08A8 0005 0022             		bclr	#5,$22(a0)
00015AB8 117C 0001 001D             		move.b	#1,$1D(a0)
00015ABE 4E75                       		rts	
00015AC0                            ; End of function Sonic_WalkVertR
00015AC0                            
00015AC0                            ; ---------------------------------------------------------------------------
00015AC0                            ; Subroutine allowing Sonic to walk upside-down
00015AC0                            ; ---------------------------------------------------------------------------
00015AC0                            
00015AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AC0                            
00015AC0                            
00015AC0                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00015AC0 3428 000C                  		move.w	$C(a0),d2
00015AC4 3628 0008                  		move.w	8(a0),d3
00015AC8 7000                       		moveq	#0,d0
00015ACA 1028 0016                  		move.b	$16(a0),d0
00015ACE 4880                       		ext.w	d0
00015AD0 9440                       		sub.w	d0,d2
00015AD2 0A42 000F                  		eori.w	#$F,d2
00015AD6 1028 0017                  		move.b	$17(a0),d0
00015ADA 4880                       		ext.w	d0
00015ADC D640                       		add.w	d0,d3
00015ADE 49F8 F768                  		lea	($FFFFF768).w,a4
00015AE2 367C FFF0                  		movea.w	#-$10,a3
00015AE6 3C3C 1000                  		move.w	#$1000,d6
00015AEA 7A0D                       		moveq	#$D,d5
00015AEC 6100 0000                  		bsr.w	FindFloor
00015AF0 3F01                       		move.w	d1,-(sp)
00015AF2 3428 000C                  		move.w	$C(a0),d2
00015AF6 3628 0008                  		move.w	8(a0),d3
00015AFA 7000                       		moveq	#0,d0
00015AFC 1028 0016                  		move.b	$16(a0),d0
00015B00 4880                       		ext.w	d0
00015B02 9440                       		sub.w	d0,d2
00015B04 0A42 000F                  		eori.w	#$F,d2
00015B08 1028 0017                  		move.b	$17(a0),d0
00015B0C 4880                       		ext.w	d0
00015B0E 9640                       		sub.w	d0,d3
00015B10 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015B14 367C FFF0                  		movea.w	#-$10,a3
00015B18 3C3C 1000                  		move.w	#$1000,d6
00015B1C 7A0D                       		moveq	#$D,d5
00015B1E 6100 0000                  		bsr.w	FindFloor
00015B22 301F                       		move.w	(sp)+,d0
00015B24 6100 FED2                  		bsr.w	Sonic_Angle
00015B28 4A41                       		tst.w	d1
00015B2A 6700                       		beq.s	locret_14892
00015B2C 6A00                       		bpl.s	loc_14894
00015B2E 0C41 FFF2                  		cmpi.w	#-$E,d1
00015B32 6D00 FE5A                  		blt.w	locret_146E6
00015B36 9368 000C                  		sub.w	d1,$C(a0)
00015B3A                            
00015B3A                            locret_14892:
00015B3A 4E75                       		rts	
00015B3C                            ; ===========================================================================
00015B3C                            
00015B3C                            loc_14894:
00015B3C 0C41 000E                  		cmpi.w	#$E,d1
00015B40 6E00                       		bgt.s	loc_148A0
00015B42                            
00015B42                            loc_1489A:
00015B42 9368 000C                  		sub.w	d1,$C(a0)
00015B46 4E75                       		rts	
00015B48                            ; ===========================================================================
00015B48                            
00015B48                            loc_148A0:
00015B48 4A28 0038                  		tst.b	$38(a0)
00015B4C 66F4                       		bne.s	loc_1489A
00015B4E 08E8 0001 0022             		bset	#1,$22(a0)
00015B54 08A8 0005 0022             		bclr	#5,$22(a0)
00015B5A 117C 0001 001D             		move.b	#1,$1D(a0)
00015B60 4E75                       		rts	
00015B62                            ; End of function Sonic_WalkCeiling
00015B62                            
00015B62                            ; ---------------------------------------------------------------------------
00015B62                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00015B62                            ; ---------------------------------------------------------------------------
00015B62                            
00015B62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B62                            
00015B62                            
00015B62                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00015B62 3428 000C                  		move.w	$C(a0),d2
00015B66 3628 0008                  		move.w	8(a0),d3
00015B6A 7000                       		moveq	#0,d0
00015B6C 1028 0017                  		move.b	$17(a0),d0
00015B70 4880                       		ext.w	d0
00015B72 9440                       		sub.w	d0,d2
00015B74 1028 0016                  		move.b	$16(a0),d0
00015B78 4880                       		ext.w	d0
00015B7A 9640                       		sub.w	d0,d3
00015B7C 0A43 000F                  		eori.w	#$F,d3
00015B80 49F8 F768                  		lea	($FFFFF768).w,a4
00015B84 367C FFF0                  		movea.w	#-$10,a3
00015B88 3C3C 0800                  		move.w	#$800,d6
00015B8C 7A0D                       		moveq	#$D,d5
00015B8E 6100 0000                  		bsr.w	FindWall
00015B92 3F01                       		move.w	d1,-(sp)
00015B94 3428 000C                  		move.w	$C(a0),d2
00015B98 3628 0008                  		move.w	8(a0),d3
00015B9C 7000                       		moveq	#0,d0
00015B9E 1028 0017                  		move.b	$17(a0),d0
00015BA2 4880                       		ext.w	d0
00015BA4 D440                       		add.w	d0,d2
00015BA6 1028 0016                  		move.b	$16(a0),d0
00015BAA 4880                       		ext.w	d0
00015BAC 9640                       		sub.w	d0,d3
00015BAE 0A43 000F                  		eori.w	#$F,d3
00015BB2 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015BB6 367C FFF0                  		movea.w	#-$10,a3
00015BBA 3C3C 0800                  		move.w	#$800,d6
00015BBE 7A0D                       		moveq	#$D,d5
00015BC0 6100 0000                  		bsr.w	FindWall
00015BC4 301F                       		move.w	(sp)+,d0
00015BC6 6100 FE30                  		bsr.w	Sonic_Angle
00015BCA 4A41                       		tst.w	d1
00015BCC 6700                       		beq.s	locret_14934
00015BCE 6A00                       		bpl.s	loc_14936
00015BD0 0C41 FFF2                  		cmpi.w	#-$E,d1
00015BD4 6D00 FDDC                  		blt.w	locret_1470A
00015BD8 9368 0008                  		sub.w	d1,8(a0)
00015BDC                            
00015BDC                            locret_14934:
00015BDC 4E75                       		rts	
00015BDE                            ; ===========================================================================
00015BDE                            
00015BDE                            loc_14936:
00015BDE 0C41 000E                  		cmpi.w	#$E,d1
00015BE2 6E00                       		bgt.s	loc_14942
00015BE4                            
00015BE4                            loc_1493C:
00015BE4 9368 0008                  		sub.w	d1,8(a0)
00015BE8 4E75                       		rts	
00015BEA                            ; ===========================================================================
00015BEA                            
00015BEA                            loc_14942:
00015BEA 4A28 0038                  		tst.b	$38(a0)
00015BEE 66F4                       		bne.s	loc_1493C
00015BF0 08E8 0001 0022             		bset	#1,$22(a0)
00015BF6 08A8 0005 0022             		bclr	#5,$22(a0)
00015BFC 117C 0001 001D             		move.b	#1,$1D(a0)
00015C02 4E75                       		rts	
00015C04                            ; End of function Sonic_WalkVertL
00015C04                            
00015C04                            ; ---------------------------------------------------------------------------
00015C04                            ; Subroutine to	find which tile	the object is standing on
00015C04                            ; ---------------------------------------------------------------------------
00015C04                            
00015C04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C04                            
00015C04                            
00015C04                            Floor_ChkTile:				; XREF: FindFloor; et al
00015C04 3002                       		move.w	d2,d0
00015C06 E248                       		lsr.w	#1,d0
00015C08 0240 0380                  		andi.w	#$380,d0
00015C0C 3203                       		move.w	d3,d1
00015C0E E049                       		lsr.w	#8,d1
00015C10 0241 007F                  		andi.w	#$7F,d1
00015C14 D041                       		add.w	d1,d0
00015C16 72FF                       		moveq	#-1,d1
00015C18 43F8 A400                  		lea	($FFFFA400).w,a1
00015C1C 1231 0000                  		move.b	(a1,d0.w),d1
00015C20 6700                       		beq.s	loc_14996
00015C22 6B00                       		bmi.s	loc_1499A
00015C24 5301                       		subq.b	#1,d1
00015C26 4881                       		ext.w	d1
00015C28 EE59                       		ror.w	#7,d1
00015C2A 3002                       		move.w	d2,d0
00015C2C D040                       		add.w	d0,d0
00015C2E 0240 01E0                  		andi.w	#$1E0,d0
00015C32 D240                       		add.w	d0,d1
00015C34 3003                       		move.w	d3,d0
00015C36 E648                       		lsr.w	#3,d0
00015C38 0240 001E                  		andi.w	#$1E,d0
00015C3C D240                       		add.w	d0,d1
00015C3E                            
00015C3E                            loc_14996:
00015C3E 2241                       		movea.l	d1,a1
00015C40 4E75                       		rts	
00015C42                            ; ===========================================================================
00015C42                            
00015C42                            loc_1499A:
00015C42 0241 007F                  		andi.w	#$7F,d1
00015C46 0828 0006 0001             		btst	#6,1(a0)
00015C4C 6700                       		beq.s	loc_149B2
00015C4E 5241                       		addq.w	#1,d1
00015C50 0C41 0029                  		cmpi.w	#$29,d1
00015C54 6600                       		bne.s	loc_149B2
00015C56 323C 0051                  		move.w	#$51,d1
00015C5A                            
00015C5A                            loc_149B2:
00015C5A 5301                       		subq.b	#1,d1
00015C5C EE59                       		ror.w	#7,d1
00015C5E 3002                       		move.w	d2,d0
00015C60 D040                       		add.w	d0,d0
00015C62 0240 01E0                  		andi.w	#$1E0,d0
00015C66 D240                       		add.w	d0,d1
00015C68 3003                       		move.w	d3,d0
00015C6A E648                       		lsr.w	#3,d0
00015C6C 0240 001E                  		andi.w	#$1E,d0
00015C70 D240                       		add.w	d0,d1
00015C72 2241                       		movea.l	d1,a1
00015C74 4E75                       		rts	
00015C76                            ; End of function Floor_ChkTile
00015C76                            
00015C76                            
00015C76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C76                            
00015C76                            
00015C76                            FindFloor:				; XREF: Sonic_AnglePos; et al
00015C76 618C                       		bsr.s	Floor_ChkTile
00015C78 3011                       		move.w	(a1),d0
00015C7A 3800                       		move.w	d0,d4
00015C7C 0240 07FF                  		andi.w	#$7FF,d0
00015C80 6700                       		beq.s	loc_149DE
00015C82 0B04                       		btst	d5,d4
00015C84 6600                       		bne.s	loc_149EC
00015C86                            
00015C86                            loc_149DE:
00015C86 D44B                       		add.w	a3,d2
00015C88 6100 0000                  		bsr.w	FindFloor2
00015C8C 944B                       		sub.w	a3,d2
00015C8E 0641 0010                  		addi.w	#$10,d1
00015C92 4E75                       		rts	
00015C94                            ; ===========================================================================
00015C94                            
00015C94                            loc_149EC:
00015C94 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00015C98 1032 0000                  		move.b	(a2,d0.w),d0
00015C9C 0240 00FF                  		andi.w	#$FF,d0
00015CA0 67E4                       		beq.s	loc_149DE
00015CA2 45F9 0000 0000             		lea	(AngleMap).l,a2
00015CA8 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015CAC E948                       		lsl.w	#4,d0
00015CAE 3203                       		move.w	d3,d1
00015CB0 0804 000B                  		btst	#$B,d4
00015CB4 6700                       		beq.s	loc_14A12
00015CB6 4641                       		not.w	d1
00015CB8 4414                       		neg.b	(a4)
00015CBA                            
00015CBA                            loc_14A12:
00015CBA 0804 000C                  		btst	#$C,d4
00015CBE 6700                       		beq.s	loc_14A22
00015CC0 0614 0040                  		addi.b	#$40,(a4)
00015CC4 4414                       		neg.b	(a4)
00015CC6 0414 0040                  		subi.b	#$40,(a4)
00015CCA                            
00015CCA                            loc_14A22:
00015CCA 0241 000F                  		andi.w	#$F,d1
00015CCE D240                       		add.w	d0,d1
00015CD0 45F9 0000 0000             		lea	(CollArray1).l,a2
00015CD6 1032 1000                  		move.b	(a2,d1.w),d0
00015CDA 4880                       		ext.w	d0
00015CDC BD44                       		eor.w	d6,d4
00015CDE 0804 000C                  		btst	#$C,d4
00015CE2 6700                       		beq.s	loc_14A3E
00015CE4 4440                       		neg.w	d0
00015CE6                            
00015CE6                            loc_14A3E:
00015CE6 4A40                       		tst.w	d0
00015CE8 679C                       		beq.s	loc_149DE
00015CEA 6B00                       		bmi.s	loc_14A5A
00015CEC 0C00 0010                  		cmpi.b	#$10,d0
00015CF0 6700                       		beq.s	loc_14A66
00015CF2 3202                       		move.w	d2,d1
00015CF4 0241 000F                  		andi.w	#$F,d1
00015CF8 D041                       		add.w	d1,d0
00015CFA 323C 000F                  		move.w	#$F,d1
00015CFE 9240                       		sub.w	d0,d1
00015D00 4E75                       		rts	
00015D02                            ; ===========================================================================
00015D02                            
00015D02                            loc_14A5A:
00015D02 3202                       		move.w	d2,d1
00015D04 0241 000F                  		andi.w	#$F,d1
00015D08 D041                       		add.w	d1,d0
00015D0A 6A00 FF7A                  		bpl.w	loc_149DE
00015D0E                            
00015D0E                            loc_14A66:
00015D0E 944B                       		sub.w	a3,d2
00015D10 6100 0000                  		bsr.w	FindFloor2
00015D14 D44B                       		add.w	a3,d2
00015D16 0441 0010                  		subi.w	#$10,d1
00015D1A 4E75                       		rts	
00015D1C                            ; End of function FindFloor
00015D1C                            
00015D1C                            
00015D1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D1C                            
00015D1C                            
00015D1C                            FindFloor2:				; XREF: FindFloor
00015D1C 6100 FEE6                  		bsr.w	Floor_ChkTile
00015D20 3011                       		move.w	(a1),d0
00015D22 3800                       		move.w	d0,d4
00015D24 0240 07FF                  		andi.w	#$7FF,d0
00015D28 6700                       		beq.s	loc_14A86
00015D2A 0B04                       		btst	d5,d4
00015D2C 6600                       		bne.s	loc_14A94
00015D2E                            
00015D2E                            loc_14A86:
00015D2E 323C 000F                  		move.w	#$F,d1
00015D32 3002                       		move.w	d2,d0
00015D34 0240 000F                  		andi.w	#$F,d0
00015D38 9240                       		sub.w	d0,d1
00015D3A 4E75                       		rts	
00015D3C                            ; ===========================================================================
00015D3C                            
00015D3C                            loc_14A94:
00015D3C 2478 F796                  		movea.l	($FFFFF796).w,a2
00015D40 1032 0000                  		move.b	(a2,d0.w),d0
00015D44 0240 00FF                  		andi.w	#$FF,d0
00015D48 67E4                       		beq.s	loc_14A86
00015D4A 45F9 0000 0000             		lea	(AngleMap).l,a2
00015D50 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015D54 E948                       		lsl.w	#4,d0
00015D56 3203                       		move.w	d3,d1
00015D58 0804 000B                  		btst	#$B,d4
00015D5C 6700                       		beq.s	loc_14ABA
00015D5E 4641                       		not.w	d1
00015D60 4414                       		neg.b	(a4)
00015D62                            
00015D62                            loc_14ABA:
00015D62 0804 000C                  		btst	#$C,d4
00015D66 6700                       		beq.s	loc_14ACA
00015D68 0614 0040                  		addi.b	#$40,(a4)
00015D6C 4414                       		neg.b	(a4)
00015D6E 0414 0040                  		subi.b	#$40,(a4)
00015D72                            
00015D72                            loc_14ACA:
00015D72 0241 000F                  		andi.w	#$F,d1
00015D76 D240                       		add.w	d0,d1
00015D78 45F9 0000 0000             		lea	(CollArray1).l,a2
00015D7E 1032 1000                  		move.b	(a2,d1.w),d0
00015D82 4880                       		ext.w	d0
00015D84 BD44                       		eor.w	d6,d4
00015D86 0804 000C                  		btst	#$C,d4
00015D8A 6700                       		beq.s	loc_14AE6
00015D8C 4440                       		neg.w	d0
00015D8E                            
00015D8E                            loc_14AE6:
00015D8E 4A40                       		tst.w	d0
00015D90 679C                       		beq.s	loc_14A86
00015D92 6B00                       		bmi.s	loc_14AFC
00015D94 3202                       		move.w	d2,d1
00015D96 0241 000F                  		andi.w	#$F,d1
00015D9A D041                       		add.w	d1,d0
00015D9C 323C 000F                  		move.w	#$F,d1
00015DA0 9240                       		sub.w	d0,d1
00015DA2 4E75                       		rts	
00015DA4                            ; ===========================================================================
00015DA4                            
00015DA4                            loc_14AFC:
00015DA4 3202                       		move.w	d2,d1
00015DA6 0241 000F                  		andi.w	#$F,d1
00015DAA D041                       		add.w	d1,d0
00015DAC 6A00 FF80                  		bpl.w	loc_14A86
00015DB0 4641                       		not.w	d1
00015DB2 4E75                       		rts	
00015DB4                            ; End of function FindFloor2
00015DB4                            
00015DB4                            
00015DB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015DB4                            
00015DB4                            
00015DB4                            FindWall:				; XREF: Sonic_WalkVertR; et al
00015DB4 6100 FE4E                  		bsr.w	Floor_ChkTile
00015DB8 3011                       		move.w	(a1),d0
00015DBA 3800                       		move.w	d0,d4
00015DBC 0240 07FF                  		andi.w	#$7FF,d0
00015DC0 6700                       		beq.s	loc_14B1E
00015DC2 0B04                       		btst	d5,d4
00015DC4 6600                       		bne.s	loc_14B2C
00015DC6                            
00015DC6                            loc_14B1E:
00015DC6 D64B                       		add.w	a3,d3
00015DC8 6100 0000                  		bsr.w	FindWall2
00015DCC 964B                       		sub.w	a3,d3
00015DCE 0641 0010                  		addi.w	#$10,d1
00015DD2 4E75                       		rts	
00015DD4                            ; ===========================================================================
00015DD4                            
00015DD4                            loc_14B2C:
00015DD4 2478 F796                  		movea.l	($FFFFF796).w,a2
00015DD8 1032 0000                  		move.b	(a2,d0.w),d0
00015DDC 0240 00FF                  		andi.w	#$FF,d0
00015DE0 67E4                       		beq.s	loc_14B1E
00015DE2 45F9 0000 0000             		lea	(AngleMap).l,a2
00015DE8 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015DEC E948                       		lsl.w	#4,d0
00015DEE 3202                       		move.w	d2,d1
00015DF0 0804 000C                  		btst	#$C,d4
00015DF4 6700                       		beq.s	loc_14B5A
00015DF6 4641                       		not.w	d1
00015DF8 0614 0040                  		addi.b	#$40,(a4)
00015DFC 4414                       		neg.b	(a4)
00015DFE 0414 0040                  		subi.b	#$40,(a4)
00015E02                            
00015E02                            loc_14B5A:
00015E02 0804 000B                  		btst	#$B,d4
00015E06 6700                       		beq.s	loc_14B62
00015E08 4414                       		neg.b	(a4)
00015E0A                            
00015E0A                            loc_14B62:
00015E0A 0241 000F                  		andi.w	#$F,d1
00015E0E D240                       		add.w	d0,d1
00015E10 45F9 0000 0000             		lea	(CollArray2).l,a2
00015E16 1032 1000                  		move.b	(a2,d1.w),d0
00015E1A 4880                       		ext.w	d0
00015E1C BD44                       		eor.w	d6,d4
00015E1E 0804 000B                  		btst	#$B,d4
00015E22 6700                       		beq.s	loc_14B7E
00015E24 4440                       		neg.w	d0
00015E26                            
00015E26                            loc_14B7E:
00015E26 4A40                       		tst.w	d0
00015E28 679C                       		beq.s	loc_14B1E
00015E2A 6B00                       		bmi.s	loc_14B9A
00015E2C 0C00 0010                  		cmpi.b	#$10,d0
00015E30 6700                       		beq.s	loc_14BA6
00015E32 3203                       		move.w	d3,d1
00015E34 0241 000F                  		andi.w	#$F,d1
00015E38 D041                       		add.w	d1,d0
00015E3A 323C 000F                  		move.w	#$F,d1
00015E3E 9240                       		sub.w	d0,d1
00015E40 4E75                       		rts	
00015E42                            ; ===========================================================================
00015E42                            
00015E42                            loc_14B9A:
00015E42 3203                       		move.w	d3,d1
00015E44 0241 000F                  		andi.w	#$F,d1
00015E48 D041                       		add.w	d1,d0
00015E4A 6A00 FF7A                  		bpl.w	loc_14B1E
00015E4E                            
00015E4E                            loc_14BA6:
00015E4E 964B                       		sub.w	a3,d3
00015E50 6100 0000                  		bsr.w	FindWall2
00015E54 D64B                       		add.w	a3,d3
00015E56 0441 0010                  		subi.w	#$10,d1
00015E5A 4E75                       		rts	
00015E5C                            ; End of function FindWall
00015E5C                            
00015E5C                            
00015E5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E5C                            
00015E5C                            
00015E5C                            FindWall2:				; XREF: FindWall
00015E5C 6100 FDA6                  		bsr.w	Floor_ChkTile
00015E60 3011                       		move.w	(a1),d0
00015E62 3800                       		move.w	d0,d4
00015E64 0240 07FF                  		andi.w	#$7FF,d0
00015E68 6700                       		beq.s	loc_14BC6
00015E6A 0B04                       		btst	d5,d4
00015E6C 6600                       		bne.s	loc_14BD4
00015E6E                            
00015E6E                            loc_14BC6:
00015E6E 323C 000F                  		move.w	#$F,d1
00015E72 3003                       		move.w	d3,d0
00015E74 0240 000F                  		andi.w	#$F,d0
00015E78 9240                       		sub.w	d0,d1
00015E7A 4E75                       		rts	
00015E7C                            ; ===========================================================================
00015E7C                            
00015E7C                            loc_14BD4:
00015E7C 2478 F796                  		movea.l	($FFFFF796).w,a2
00015E80 1032 0000                  		move.b	(a2,d0.w),d0
00015E84 0240 00FF                  		andi.w	#$FF,d0
00015E88 67E4                       		beq.s	loc_14BC6
00015E8A 45F9 0000 0000             		lea	(AngleMap).l,a2
00015E90 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015E94 E948                       		lsl.w	#4,d0
00015E96 3202                       		move.w	d2,d1
00015E98 0804 000C                  		btst	#$C,d4
00015E9C 6700                       		beq.s	loc_14C02
00015E9E 4641                       		not.w	d1
00015EA0 0614 0040                  		addi.b	#$40,(a4)
00015EA4 4414                       		neg.b	(a4)
00015EA6 0414 0040                  		subi.b	#$40,(a4)
00015EAA                            
00015EAA                            loc_14C02:
00015EAA 0804 000B                  		btst	#$B,d4
00015EAE 6700                       		beq.s	loc_14C0A
00015EB0 4414                       		neg.b	(a4)
00015EB2                            
00015EB2                            loc_14C0A:
00015EB2 0241 000F                  		andi.w	#$F,d1
00015EB6 D240                       		add.w	d0,d1
00015EB8 45F9 0000 0000             		lea	(CollArray2).l,a2
00015EBE 1032 1000                  		move.b	(a2,d1.w),d0
00015EC2 4880                       		ext.w	d0
00015EC4 BD44                       		eor.w	d6,d4
00015EC6 0804 000B                  		btst	#$B,d4
00015ECA 6700                       		beq.s	loc_14C26
00015ECC 4440                       		neg.w	d0
00015ECE                            
00015ECE                            loc_14C26:
00015ECE 4A40                       		tst.w	d0
00015ED0 679C                       		beq.s	loc_14BC6
00015ED2 6B00                       		bmi.s	loc_14C3C
00015ED4 3203                       		move.w	d3,d1
00015ED6 0241 000F                  		andi.w	#$F,d1
00015EDA D041                       		add.w	d1,d0
00015EDC 323C 000F                  		move.w	#$F,d1
00015EE0 9240                       		sub.w	d0,d1
00015EE2 4E75                       		rts	
00015EE4                            ; ===========================================================================
00015EE4                            
00015EE4                            loc_14C3C:
00015EE4 3203                       		move.w	d3,d1
00015EE6 0241 000F                  		andi.w	#$F,d1
00015EEA D041                       		add.w	d1,d0
00015EEC 6A00 FF80                  		bpl.w	loc_14BC6
00015EF0 4641                       		not.w	d1
00015EF2 4E75                       		rts	
00015EF4                            ; End of function FindWall2
00015EF4                            
00015EF4                            ; ---------------------------------------------------------------------------
00015EF4                            ; Unused floor/wall subroutine - logs something	to do with collision
00015EF4                            ; ---------------------------------------------------------------------------
00015EF4                            
00015EF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015EF4                            
00015EF4                            
00015EF4                            FloorLog_Unk:				; XREF: Level
00015EF4 4E75                       		rts	
00015EF6                            
00015EF6 43F9 0000 0000             		lea	(CollArray1).l,a1
00015EFC 45F9 0000 0000             		lea	(CollArray1).l,a2
00015F02 363C 00FF                  		move.w	#$FF,d3
00015F06                            
00015F06                            loc_14C5E:
00015F06 7A10                       		moveq	#$10,d5
00015F08 343C 000F                  		move.w	#$F,d2
00015F0C                            
00015F0C                            loc_14C64:
00015F0C 7800                       		moveq	#0,d4
00015F0E 323C 000F                  		move.w	#$F,d1
00015F12                            
00015F12                            loc_14C6A:
00015F12 3019                       		move.w	(a1)+,d0
00015F14 EAA8                       		lsr.l	d5,d0
00015F16 D944                       		addx.w	d4,d4
00015F18 51C9 FFF8                  		dbf	d1,loc_14C6A
00015F1C                            
00015F1C 34C4                       		move.w	d4,(a2)+
00015F1E 92FC 0020                  		suba.w	#$20,a1
00015F22 5345                       		subq.w	#1,d5
00015F24 51CA FFE6                  		dbf	d2,loc_14C64
00015F28                            
00015F28 D2FC 0020                  		adda.w	#$20,a1
00015F2C 51CB FFD8                  		dbf	d3,loc_14C5E
00015F30                            
00015F30 43F9 0000 0000             		lea	(CollArray1).l,a1
00015F36 45F9 0000 0000             		lea	(CollArray2).l,a2
00015F3C 6100                       		bsr.s	FloorLog_Unk2
00015F3E 43F9 0000 0000             		lea	(CollArray1).l,a1
00015F44 45F9 0000 0000             		lea	(CollArray1).l,a2
00015F4A                            
00015F4A                            ; End of function FloorLog_Unk
00015F4A                            
00015F4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F4A                            
00015F4A                            
00015F4A                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00015F4A 363C 0FFF                  		move.w	#$FFF,d3
00015F4E                            
00015F4E                            loc_14CA6:
00015F4E 7400                       		moveq	#0,d2
00015F50 323C 000F                  		move.w	#$F,d1
00015F54 3019                       		move.w	(a1)+,d0
00015F56 6700                       		beq.s	loc_14CD4
00015F58 6B00                       		bmi.s	loc_14CBE
00015F5A                            
00015F5A                            loc_14CB2:
00015F5A E248                       		lsr.w	#1,d0
00015F5C 6400                       		bcc.s	loc_14CB8
00015F5E 5202                       		addq.b	#1,d2
00015F60                            
00015F60                            loc_14CB8:
00015F60 51C9 FFF8                  		dbf	d1,loc_14CB2
00015F64                            
00015F64 6000                       		bra.s	loc_14CD6
00015F66                            ; ===========================================================================
00015F66                            
00015F66                            loc_14CBE:
00015F66 0C40 FFFF                  		cmpi.w	#-1,d0
00015F6A 6700                       		beq.s	loc_14CD0
00015F6C                            
00015F6C                            loc_14CC4:
00015F6C E348                       		lsl.w	#1,d0
00015F6E 6400                       		bcc.s	loc_14CCA
00015F70 5302                       		subq.b	#1,d2
00015F72                            
00015F72                            loc_14CCA:
00015F72 51C9 FFF8                  		dbf	d1,loc_14CC4
00015F76                            
00015F76 6000                       		bra.s	loc_14CD6
00015F78                            ; ===========================================================================
00015F78                            
00015F78                            loc_14CD0:
00015F78 303C 0010                  		move.w	#$10,d0
00015F7C                            
00015F7C                            loc_14CD4:
00015F7C 3400                       		move.w	d0,d2
00015F7E                            
00015F7E                            loc_14CD6:
00015F7E 14C2                       		move.b	d2,(a2)+
00015F80 51CB FFCC                  		dbf	d3,loc_14CA6
00015F84                            
00015F84 4E75                       		rts	
00015F86                            
00015F86                            ; End of function FloorLog_Unk2
00015F86                            
00015F86                            
00015F86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F86                            
00015F86                            
00015F86                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015F86 2628 0008                  		move.l	8(a0),d3
00015F8A 2428 000C                  		move.l	$C(a0),d2
00015F8E 3228 0010                  		move.w	$10(a0),d1
00015F92 48C1                       		ext.l	d1
00015F94 E181                       		asl.l	#8,d1
00015F96 D681                       		add.l	d1,d3
00015F98 3228 0012                  		move.w	$12(a0),d1
00015F9C 48C1                       		ext.l	d1
00015F9E E181                       		asl.l	#8,d1
00015FA0 D481                       		add.l	d1,d2
00015FA2 4842                       		swap	d2
00015FA4 4843                       		swap	d3
00015FA6 11C0 F768                  		move.b	d0,($FFFFF768).w
00015FAA 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015FAE 1200                       		move.b	d0,d1
00015FB0 0600 0020                  		addi.b	#$20,d0
00015FB4 6A00                       		bpl.s	loc_14D1A
00015FB6 1001                       		move.b	d1,d0
00015FB8 6A00                       		bpl.s	loc_14D14
00015FBA 5300                       		subq.b	#1,d0
00015FBC                            
00015FBC                            loc_14D14:
00015FBC 0600 0020                  		addi.b	#$20,d0
00015FC0 6000                       		bra.s	loc_14D24
00015FC2                            ; ===========================================================================
00015FC2                            
00015FC2                            loc_14D1A:
00015FC2 1001                       		move.b	d1,d0
00015FC4 6A00                       		bpl.s	loc_14D20
00015FC6 5200                       		addq.b	#1,d0
00015FC8                            
00015FC8                            loc_14D20:
00015FC8 0600 001F                  		addi.b	#$1F,d0
00015FCC                            
00015FCC                            loc_14D24:
00015FCC 0200 00C0                  		andi.b	#$C0,d0
00015FD0 6700 0000                  		beq.w	loc_14DF0
00015FD4 0C00 0080                  		cmpi.b	#$80,d0
00015FD8 6700 0000                  		beq.w	loc_14F7C
00015FDC 0201 0038                  		andi.b	#$38,d1
00015FE0 6600                       		bne.s	loc_14D3C
00015FE2 5042                       		addq.w	#8,d2
00015FE4                            
00015FE4                            loc_14D3C:
00015FE4 0C00 0040                  		cmpi.b	#$40,d0
00015FE8 6700 0000                  		beq.w	loc_1504A
00015FEC 6000 0000                  		bra.w	loc_14EBC
00015FF0                            
00015FF0                            ; End of function Sonic_WalkSpeed
00015FF0                            
00015FF0                            
00015FF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FF0                            
00015FF0                            
00015FF0                            sub_14D48:				; XREF: Sonic_Jump
00015FF0 11C0 F768                  		move.b	d0,($FFFFF768).w
00015FF4 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015FF8 0600 0020                  		addi.b	#$20,d0
00015FFC 0200 00C0                  		andi.b	#$C0,d0
00016000 0C00 0040                  		cmpi.b	#$40,d0
00016004 6700 0000                  		beq.w	loc_14FD6
00016008 0C00 0080                  		cmpi.b	#$80,d0
0001600C 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00016010 0C00 00C0                  		cmpi.b	#$C0,d0
00016014 6700 0000                  		beq.w	sub_14E50
00016018                            
00016018                            ; End of function sub_14D48
00016018                            
00016018                            ; ---------------------------------------------------------------------------
00016018                            ; Subroutine to	make Sonic land	on the floor after jumping
00016018                            ; ---------------------------------------------------------------------------
00016018                            
00016018                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016018                            
00016018                            
00016018                            Sonic_HitFloor:				; XREF: Sonic_Floor
00016018 3428 000C                  		move.w	$C(a0),d2
0001601C 3628 0008                  		move.w	8(a0),d3
00016020 7000                       		moveq	#0,d0
00016022 1028 0016                  		move.b	$16(a0),d0
00016026 4880                       		ext.w	d0
00016028 D440                       		add.w	d0,d2
0001602A 1028 0017                  		move.b	$17(a0),d0
0001602E 4880                       		ext.w	d0
00016030 D640                       		add.w	d0,d3
00016032 49F8 F768                  		lea	($FFFFF768).w,a4
00016036 367C 0010                  		movea.w	#$10,a3
0001603A 3C3C 0000                  		move.w	#0,d6
0001603E 7A0D                       		moveq	#$D,d5
00016040 6100 FC34                  		bsr.w	FindFloor
00016044 3F01                       		move.w	d1,-(sp)
00016046 3428 000C                  		move.w	$C(a0),d2
0001604A 3628 0008                  		move.w	8(a0),d3
0001604E 7000                       		moveq	#0,d0
00016050 1028 0016                  		move.b	$16(a0),d0
00016054 4880                       		ext.w	d0
00016056 D440                       		add.w	d0,d2
00016058 1028 0017                  		move.b	$17(a0),d0
0001605C 4880                       		ext.w	d0
0001605E 9640                       		sub.w	d0,d3
00016060 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016064 367C 0010                  		movea.w	#$10,a3
00016068 3C3C 0000                  		move.w	#0,d6
0001606C 7A0D                       		moveq	#$D,d5
0001606E 6100 FC06                  		bsr.w	FindFloor
00016072 301F                       		move.w	(sp)+,d0
00016074 143C 0000                  		move.b	#0,d2
00016078                            
00016078                            loc_14DD0:
00016078 1638 F76A                  		move.b	($FFFFF76A).w,d3
0001607C B240                       		cmp.w	d0,d1
0001607E 6F00                       		ble.s	loc_14DDE
00016080 1638 F768                  		move.b	($FFFFF768).w,d3
00016084 C141                       		exg	d0,d1
00016086                            
00016086                            loc_14DDE:
00016086 0803 0000                  		btst	#0,d3
0001608A 6700                       		beq.s	locret_14DE6
0001608C 1602                       		move.b	d2,d3
0001608E                            
0001608E                            locret_14DE6:
0001608E 4E75                       		rts	
00016090                            
00016090                            ; End of function Sonic_HitFloor
00016090                            
00016090                            ; ===========================================================================
00016090 3428 000C                  		move.w	$C(a0),d2
00016094 3628 0008                  		move.w	8(a0),d3
00016098                            
00016098                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00016098 0642 000A                  		addi.w	#$A,d2
0001609C 49F8 F768                  		lea	($FFFFF768).w,a4
000160A0 367C 0010                  		movea.w	#$10,a3
000160A4 3C3C 0000                  		move.w	#0,d6
000160A8 7A0E                       		moveq	#$E,d5
000160AA 6100 FBCA                  		bsr.w	FindFloor
000160AE 143C 0000                  		move.b	#0,d2
000160B2                            
000160B2                            loc_14E0A:				; XREF: sub_14EB4
000160B2 1638 F768                  		move.b	($FFFFF768).w,d3
000160B6 0803 0000                  		btst	#0,d3
000160BA 6700                       		beq.s	locret_14E16
000160BC 1602                       		move.b	d2,d3
000160BE                            
000160BE                            locret_14E16:
000160BE 4E75                       		rts	
000160C0                            
000160C0                            ; ---------------------------------------------------------------------------
000160C0                            ; Subroutine allowing objects to interact with the floor
000160C0                            ; ---------------------------------------------------------------------------
000160C0                            
000160C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160C0                            
000160C0                            
000160C0                            ObjHitFloor:
000160C0 3628 0008                  		move.w	8(a0),d3
000160C4                            
000160C4                            ; End of function ObjHitFloor
000160C4                            
000160C4                            
000160C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160C4                            
000160C4                            
000160C4                            ObjHitFloor2:
000160C4 3428 000C                  		move.w	$C(a0),d2
000160C8 7000                       		moveq	#0,d0
000160CA 1028 0016                  		move.b	$16(a0),d0
000160CE 4880                       		ext.w	d0
000160D0 D440                       		add.w	d0,d2
000160D2 49F8 F768                  		lea	($FFFFF768).w,a4
000160D6 18BC 0000                  		move.b	#0,(a4)
000160DA 367C 0010                  		movea.w	#$10,a3
000160DE 3C3C 0000                  		move.w	#0,d6
000160E2 7A0D                       		moveq	#$D,d5
000160E4 6100 FB90                  		bsr.w	FindFloor
000160E8 1638 F768                  		move.b	($FFFFF768).w,d3
000160EC 0803 0000                  		btst	#0,d3
000160F0 6700                       		beq.s	locret_14E4E
000160F2 163C 0000                  		move.b	#0,d3
000160F6                            
000160F6                            locret_14E4E:
000160F6 4E75                       		rts	
000160F8                            ; End of function ObjHitFloor2
000160F8                            
000160F8                            
000160F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160F8                            
000160F8                            
000160F8                            sub_14E50:				; XREF: sub_14D48
000160F8 3428 000C                  		move.w	$C(a0),d2
000160FC 3628 0008                  		move.w	8(a0),d3
00016100 7000                       		moveq	#0,d0
00016102 1028 0017                  		move.b	$17(a0),d0
00016106 4880                       		ext.w	d0
00016108 9440                       		sub.w	d0,d2
0001610A 1028 0016                  		move.b	$16(a0),d0
0001610E 4880                       		ext.w	d0
00016110 D640                       		add.w	d0,d3
00016112 49F8 F768                  		lea	($FFFFF768).w,a4
00016116 367C 0010                  		movea.w	#$10,a3
0001611A 3C3C 0000                  		move.w	#0,d6
0001611E 7A0E                       		moveq	#$E,d5
00016120 6100 FC92                  		bsr.w	FindWall
00016124 3F01                       		move.w	d1,-(sp)
00016126 3428 000C                  		move.w	$C(a0),d2
0001612A 3628 0008                  		move.w	8(a0),d3
0001612E 7000                       		moveq	#0,d0
00016130 1028 0017                  		move.b	$17(a0),d0
00016134 4880                       		ext.w	d0
00016136 D440                       		add.w	d0,d2
00016138 1028 0016                  		move.b	$16(a0),d0
0001613C 4880                       		ext.w	d0
0001613E D640                       		add.w	d0,d3
00016140 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016144 367C 0010                  		movea.w	#$10,a3
00016148 3C3C 0000                  		move.w	#0,d6
0001614C 7A0E                       		moveq	#$E,d5
0001614E 6100 FC64                  		bsr.w	FindWall
00016152 301F                       		move.w	(sp)+,d0
00016154 143C 00C0                  		move.b	#-$40,d2
00016158 6000 FF1E                  		bra.w	loc_14DD0
0001615C                            
0001615C                            ; End of function sub_14E50
0001615C                            
0001615C                            
0001615C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001615C                            
0001615C                            
0001615C                            sub_14EB4:				; XREF: Sonic_Floor
0001615C 3428 000C                  		move.w	$C(a0),d2
00016160 3628 0008                  		move.w	8(a0),d3
00016164                            
00016164                            loc_14EBC:
00016164 0643 000A                  		addi.w	#$A,d3
00016168 49F8 F768                  		lea	($FFFFF768).w,a4
0001616C 367C 0010                  		movea.w	#$10,a3
00016170 3C3C 0000                  		move.w	#0,d6
00016174 7A0E                       		moveq	#$E,d5
00016176 6100 FC3C                  		bsr.w	FindWall
0001617A 143C 00C0                  		move.b	#-$40,d2
0001617E 6000 FF32                  		bra.w	loc_14E0A
00016182                            
00016182                            ; End of function sub_14EB4
00016182                            
00016182                            ; ---------------------------------------------------------------------------
00016182                            ; Subroutine to	detect when an object hits a wall to its right
00016182                            ; ---------------------------------------------------------------------------
00016182                            
00016182                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016182                            
00016182                            
00016182                            ObjHitWallRight:
00016182 D668 0008                  		add.w	8(a0),d3
00016186 3428 000C                  		move.w	$C(a0),d2
0001618A 49F8 F768                  		lea	($FFFFF768).w,a4
0001618E 18BC 0000                  		move.b	#0,(a4)
00016192 367C 0010                  		movea.w	#$10,a3
00016196 3C3C 0000                  		move.w	#0,d6
0001619A 7A0E                       		moveq	#$E,d5
0001619C 6100 FC16                  		bsr.w	FindWall
000161A0 1638 F768                  		move.b	($FFFFF768).w,d3
000161A4 0803 0000                  		btst	#0,d3
000161A8 6700                       		beq.s	locret_14F06
000161AA 163C 00C0                  		move.b	#-$40,d3
000161AE                            
000161AE                            locret_14F06:
000161AE 4E75                       		rts	
000161B0                            
000161B0                            ; End of function ObjHitWallRight
000161B0                            
000161B0                            ; ---------------------------------------------------------------------------
000161B0                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000161B0                            ; touches them
000161B0                            ; ---------------------------------------------------------------------------
000161B0                            
000161B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161B0                            
000161B0                            
000161B0                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000161B0 3428 000C                  		move.w	$C(a0),d2
000161B4 3628 0008                  		move.w	8(a0),d3
000161B8 7000                       		moveq	#0,d0
000161BA 1028 0016                  		move.b	$16(a0),d0
000161BE 4880                       		ext.w	d0
000161C0 9440                       		sub.w	d0,d2
000161C2 0A42 000F                  		eori.w	#$F,d2
000161C6 1028 0017                  		move.b	$17(a0),d0
000161CA 4880                       		ext.w	d0
000161CC D640                       		add.w	d0,d3
000161CE 49F8 F768                  		lea	($FFFFF768).w,a4
000161D2 367C FFF0                  		movea.w	#-$10,a3
000161D6 3C3C 1000                  		move.w	#$1000,d6
000161DA 7A0E                       		moveq	#$E,d5
000161DC 6100 FA98                  		bsr.w	FindFloor
000161E0 3F01                       		move.w	d1,-(sp)
000161E2 3428 000C                  		move.w	$C(a0),d2
000161E6 3628 0008                  		move.w	8(a0),d3
000161EA 7000                       		moveq	#0,d0
000161EC 1028 0016                  		move.b	$16(a0),d0
000161F0 4880                       		ext.w	d0
000161F2 9440                       		sub.w	d0,d2
000161F4 0A42 000F                  		eori.w	#$F,d2
000161F8 1028 0017                  		move.b	$17(a0),d0
000161FC 4880                       		ext.w	d0
000161FE 9640                       		sub.w	d0,d3
00016200 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016204 367C FFF0                  		movea.w	#-$10,a3
00016208 3C3C 1000                  		move.w	#$1000,d6
0001620C 7A0E                       		moveq	#$E,d5
0001620E 6100 FA66                  		bsr.w	FindFloor
00016212 301F                       		move.w	(sp)+,d0
00016214 143C 0080                  		move.b	#-$80,d2
00016218 6000 FE5E                  		bra.w	loc_14DD0
0001621C                            ; End of function Sonic_DontRunOnWalls
0001621C                            
0001621C                            ; ===========================================================================
0001621C 3428 000C                  		move.w	$C(a0),d2
00016220 3628 0008                  		move.w	8(a0),d3
00016224                            
00016224                            loc_14F7C:
00016224 0442 000A                  		subi.w	#$A,d2
00016228 0A42 000F                  		eori.w	#$F,d2
0001622C 49F8 F768                  		lea	($FFFFF768).w,a4
00016230 367C FFF0                  		movea.w	#-$10,a3
00016234 3C3C 1000                  		move.w	#$1000,d6
00016238 7A0E                       		moveq	#$E,d5
0001623A 6100 FA3A                  		bsr.w	FindFloor
0001623E 143C 0080                  		move.b	#-$80,d2
00016242 6000 FE6E                  		bra.w	loc_14E0A
00016246                            
00016246                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016246                            
00016246                            
00016246                            ObjHitCeiling:
00016246 3428 000C                  		move.w	$C(a0),d2
0001624A 3628 0008                  		move.w	8(a0),d3
0001624E 7000                       		moveq	#0,d0
00016250 1028 0016                  		move.b	$16(a0),d0
00016254 4880                       		ext.w	d0
00016256 9440                       		sub.w	d0,d2
00016258 0A42 000F                  		eori.w	#$F,d2
0001625C 49F8 F768                  		lea	($FFFFF768).w,a4
00016260 367C FFF0                  		movea.w	#-$10,a3
00016264 3C3C 1000                  		move.w	#$1000,d6
00016268 7A0E                       		moveq	#$E,d5
0001626A 6100 FA0A                  		bsr.w	FindFloor
0001626E 1638 F768                  		move.b	($FFFFF768).w,d3
00016272 0803 0000                  		btst	#0,d3
00016276 6700                       		beq.s	locret_14FD4
00016278 163C 0080                  		move.b	#-$80,d3
0001627C                            
0001627C                            locret_14FD4:
0001627C 4E75                       		rts	
0001627E                            ; End of function ObjHitCeiling
0001627E                            
0001627E                            ; ===========================================================================
0001627E                            
0001627E                            loc_14FD6:				; XREF: sub_14D48
0001627E 3428 000C                  		move.w	$C(a0),d2
00016282 3628 0008                  		move.w	8(a0),d3
00016286 7000                       		moveq	#0,d0
00016288 1028 0017                  		move.b	$17(a0),d0
0001628C 4880                       		ext.w	d0
0001628E 9440                       		sub.w	d0,d2
00016290 1028 0016                  		move.b	$16(a0),d0
00016294 4880                       		ext.w	d0
00016296 9640                       		sub.w	d0,d3
00016298 0A43 000F                  		eori.w	#$F,d3
0001629C 49F8 F768                  		lea	($FFFFF768).w,a4
000162A0 367C FFF0                  		movea.w	#-$10,a3
000162A4 3C3C 0800                  		move.w	#$800,d6
000162A8 7A0E                       		moveq	#$E,d5
000162AA 6100 FB08                  		bsr.w	FindWall
000162AE 3F01                       		move.w	d1,-(sp)
000162B0 3428 000C                  		move.w	$C(a0),d2
000162B4 3628 0008                  		move.w	8(a0),d3
000162B8 7000                       		moveq	#0,d0
000162BA 1028 0017                  		move.b	$17(a0),d0
000162BE 4880                       		ext.w	d0
000162C0 D440                       		add.w	d0,d2
000162C2 1028 0016                  		move.b	$16(a0),d0
000162C6 4880                       		ext.w	d0
000162C8 9640                       		sub.w	d0,d3
000162CA 0A43 000F                  		eori.w	#$F,d3
000162CE 49F8 F76A                  		lea	($FFFFF76A).w,a4
000162D2 367C FFF0                  		movea.w	#-$10,a3
000162D6 3C3C 0800                  		move.w	#$800,d6
000162DA 7A0E                       		moveq	#$E,d5
000162DC 6100 FAD6                  		bsr.w	FindWall
000162E0 301F                       		move.w	(sp)+,d0
000162E2 143C 0040                  		move.b	#$40,d2
000162E6 6000 FD90                  		bra.w	loc_14DD0
000162EA                            
000162EA                            ; ---------------------------------------------------------------------------
000162EA                            ; Subroutine to	stop Sonic when	he jumps at a wall
000162EA                            ; ---------------------------------------------------------------------------
000162EA                            
000162EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000162EA                            
000162EA                            
000162EA                            Sonic_HitWall:				; XREF: Sonic_Floor
000162EA 3428 000C                  		move.w	$C(a0),d2
000162EE 3628 0008                  		move.w	8(a0),d3
000162F2                            
000162F2                            loc_1504A:
000162F2 0443 000A                  		subi.w	#$A,d3
000162F6 0A43 000F                  		eori.w	#$F,d3
000162FA 49F8 F768                  		lea	($FFFFF768).w,a4
000162FE 367C FFF0                  		movea.w	#-$10,a3
00016302 3C3C 0800                  		move.w	#$800,d6
00016306 7A0E                       		moveq	#$E,d5
00016308 6100 FAAA                  		bsr.w	FindWall
0001630C 143C 0040                  		move.b	#$40,d2
00016310 6000 FDA0                  		bra.w	loc_14E0A
00016314                            ; End of function Sonic_HitWall
00016314                            
00016314                            ; ---------------------------------------------------------------------------
00016314                            ; Subroutine to	detect when an object hits a wall to its left
00016314                            ; ---------------------------------------------------------------------------
00016314                            
00016314                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016314                            
00016314                            
00016314                            ObjHitWallLeft:
00016314 D668 0008                  		add.w	8(a0),d3
00016318 3428 000C                  		move.w	$C(a0),d2
0001631C 49F8 F768                  		lea	($FFFFF768).w,a4
00016320 18BC 0000                  		move.b	#0,(a4)
00016324 367C FFF0                  		movea.w	#-$10,a3
00016328 3C3C 0800                  		move.w	#$800,d6
0001632C 7A0E                       		moveq	#$E,d5
0001632E 6100 FA84                  		bsr.w	FindWall
00016332 1638 F768                  		move.b	($FFFFF768).w,d3
00016336 0803 0000                  		btst	#0,d3
0001633A 6700                       		beq.s	locret_15098
0001633C 163C 0040                  		move.b	#$40,d3
00016340                            
00016340                            locret_15098:
00016340 4E75                       		rts	
00016342                            ; End of function ObjHitWallLeft
00016342                            
00016342                            ; ===========================================================================
00016342                            ; ---------------------------------------------------------------------------
00016342                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00016342                            ; ---------------------------------------------------------------------------
00016342                            
00016342                            Obj66:					; XREF: Obj_Index
00016342 7000                       		moveq	#0,d0
00016344 1028 0024                  		move.b	$24(a0),d0
00016348 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
0001634C 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00016350                            ; ===========================================================================
00016350 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00016352 0000                       		dc.w Obj66_Action-Obj66_Index
00016354 0000                       		dc.w Obj66_Display-Obj66_Index
00016356 0000                       		dc.w Obj66_Release-Obj66_Index
00016358                            ; ===========================================================================
00016358                            
00016358                            Obj66_Main:				; XREF: Obj66_Index
00016358 5428 0024                  		addq.b	#2,$24(a0)
0001635C 323C 0001                  		move.w	#1,d1
00016360 2248                       		movea.l	a0,a1
00016362 6000                       		bra.s	Obj66_MakeItem
00016364                            ; ===========================================================================
00016364                            
00016364                            Obj66_Loop:
00016364 6100 8876                  		bsr.w	SingleObjLoad
00016368 6600                       		bne.s	loc_150FE
0001636A 12BC 0066                  		move.b	#$66,0(a1)
0001636E 5829 0024                  		addq.b	#4,$24(a1)
00016372 3368 0008 0008             		move.w	8(a0),8(a1)
00016378 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001637E 137C 0003 0018             		move.b	#3,$18(a1)
00016384 137C 0010 001A             		move.b	#$10,$1A(a1)
0001638A                            
0001638A                            Obj66_MakeItem:				; XREF: Obj66_Main
0001638A 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00016392 337C 4348 0002             		move.w	#$4348,2(a1)
00016398 0029 0004 0001             		ori.b	#4,1(a1)
0001639E 137C 0038 0019             		move.b	#$38,$19(a1)
000163A4                            
000163A4                            loc_150FE:
000163A4 51C9 FFBE                  		dbf	d1,Obj66_Loop
000163A8                            
000163A8 117C 0030 0019             		move.b	#$30,$19(a0)
000163AE 117C 0004 0018             		move.b	#4,$18(a0)
000163B4 317C 003C 0030             		move.w	#$3C,$30(a0)
000163BA 117C 0001 0034             		move.b	#1,$34(a0)
000163C0 1168 0028 0038             		move.b	$28(a0),$38(a0)
000163C6                            
000163C6                            Obj66_Action:				; XREF: Obj66_Index
000163C6 6100 0000                  		bsr.w	Obj66_ChkSwitch
000163CA 4A28 0001                  		tst.b	1(a0)
000163CE 6A00 0000                  		bpl.w	Obj66_Display
000163D2 323C 0030                  		move.w	#$30,d1
000163D6 3401                       		move.w	d1,d2
000163D8 3602                       		move.w	d2,d3
000163DA 5243                       		addq.w	#1,d3
000163DC 3828 0008                  		move.w	8(a0),d4
000163E0 6100 A744                  		bsr.w	SolidObject
000163E4 0828 0005 0022             		btst	#5,$22(a0)
000163EA 6700 0000                  		beq.w	Obj66_Display
000163EE 43F8 D000                  		lea	($FFFFD000).w,a1
000163F2 720E                       		moveq	#$E,d1
000163F4 3029 0008                  		move.w	8(a1),d0
000163F8 B068 0008                  		cmp.w	8(a0),d0
000163FC 6500                       		bcs.s	Obj66_GrabSonic
000163FE 7207                       		moveq	#7,d1
00016400                            
00016400                            Obj66_GrabSonic:
00016400 B228 001A                  		cmp.b	$1A(a0),d1
00016404 6600                       		bne.s	Obj66_Display
00016406 1141 0032                  		move.b	d1,$32(a0)
0001640A 5828 0024                  		addq.b	#4,$24(a0)
0001640E 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00016414 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
0001641A 337C 0800 0014             		move.w	#$800,$14(a1)
00016420 337C 0000 0010             		move.w	#0,$10(a1)
00016426 337C 0000 0012             		move.w	#0,$12(a1)
0001642C 08A8 0005 0022             		bclr	#5,$22(a0)
00016432 08A9 0005 0022             		bclr	#5,$22(a1)
00016438 08E9 0001 0022             		bset	#1,$22(a1)
0001643E 3429 0008                  		move.w	8(a1),d2
00016442 3629 000C                  		move.w	$C(a1),d3
00016446 6100 0000                  		bsr.w	Obj66_ChgPos
0001644A D569 0008                  		add.w	d2,8(a1)
0001644E D769 000C                  		add.w	d3,$C(a1)
00016452 E0E9 0008                  		asr	8(a1)
00016456 E0E9 000C                  		asr	$C(a1)
0001645A                            
0001645A                            Obj66_Display:				; XREF: Obj66_Index
0001645A 6000 A3A2                  		bra.w	MarkObjGone
0001645E                            ; ===========================================================================
0001645E                            
0001645E                            Obj66_Release:				; XREF: Obj66_Index
0001645E 1028 001A                  		move.b	$1A(a0),d0
00016462 0C00 0004                  		cmpi.b	#4,d0
00016466 6700                       		beq.s	loc_151C8
00016468 0C00 0007                  		cmpi.b	#7,d0
0001646C 6600                       		bne.s	loc_151F8
0001646E                            
0001646E                            loc_151C8:
0001646E B028 0032                  		cmp.b	$32(a0),d0
00016472 6700                       		beq.s	loc_151F8
00016474 43F8 D000                  		lea	($FFFFD000).w,a1
00016478 337C 0000 0010             		move.w	#0,$10(a1)
0001647E 337C 0800 0012             		move.w	#$800,$12(a1)
00016484 0C00 0004                  		cmpi.b	#4,d0
00016488 6700                       		beq.s	loc_151F0
0001648A 337C 0800 0010             		move.w	#$800,$10(a1)
00016490 337C 0800 0012             		move.w	#$800,$12(a1)
00016496                            
00016496                            loc_151F0:
00016496 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
0001649A 5928 0024                  		subq.b	#4,$24(a0)
0001649E                            
0001649E                            loc_151F8:
0001649E 6100                       		bsr.s	Obj66_ChkSwitch
000164A0 6100                       		bsr.s	Obj66_ChgPos
000164A2 6000 A35A                  		bra.w	MarkObjGone
000164A6                            
000164A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164A6                            
000164A6                            
000164A6                            Obj66_ChkSwitch:			; XREF: Obj66_Action
000164A6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000164AA 7000                       		moveq	#0,d0
000164AC 1028 0038                  		move.b	$38(a0),d0
000164B0 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000164B6 6700                       		beq.s	loc_15224	; if not, branch
000164B8 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
000164BC 6600                       		bne.s	Obj66_Animate	; if yes, branch
000164BE 4428 0034                  		neg.b	$34(a0)
000164C2 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
000164C8 6000                       		bra.s	Obj66_Animate
000164CA                            ; ===========================================================================
000164CA                            
000164CA                            loc_15224:
000164CA 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
000164CE                            
000164CE                            Obj66_Animate:
000164CE 5328 001E                  		subq.b	#1,$1E(a0)
000164D2 6A00                       		bpl.s	locret_15246
000164D4 117C 0007 001E             		move.b	#7,$1E(a0)
000164DA 1228 0034                  		move.b	$34(a0),d1
000164DE 1028 001A                  		move.b	$1A(a0),d0
000164E2 D001                       		add.b	d1,d0
000164E4 0200 000F                  		andi.b	#$F,d0
000164E8 1140 001A                  		move.b	d0,$1A(a0)
000164EC                            
000164EC                            locret_15246:
000164EC 4E75                       		rts	
000164EE                            ; End of function Obj66_ChkSwitch
000164EE                            
000164EE                            
000164EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000164EE                            
000164EE                            
000164EE                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
000164EE 43F8 D000                  		lea	($FFFFD000).w,a1
000164F2 7000                       		moveq	#0,d0
000164F4 1028 001A                  		move.b	$1A(a0),d0
000164F8 D040                       		add.w	d0,d0
000164FA 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
000164FE 101A                       		move.b	(a2)+,d0
00016500 4880                       		ext.w	d0
00016502 D068 0008                  		add.w	8(a0),d0
00016506 3340 0008                  		move.w	d0,8(a1)
0001650A 101A                       		move.b	(a2)+,d0
0001650C 4880                       		ext.w	d0
0001650E D068 000C                  		add.w	$C(a0),d0
00016512 3340 000C                  		move.w	d0,$C(a1)
00016516 4E75                       		rts	
00016518                            ; End of function Obj66_ChgPos
00016518                            
00016518                            ; ===========================================================================
00016518 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
0001651C E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00016520 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00016524 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00016528 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
0001652C 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00016530 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00016534 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00016538                            ; ---------------------------------------------------------------------------
00016538                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00016538                            ; ---------------------------------------------------------------------------
00016538                            Map_obj66:
00016538                            	include "_maps\obj66.asm"
00016538                            ; ---------------------------------------------------------------------------
00016538                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00016538                            ; ---------------------------------------------------------------------------
00016538 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
0001653C 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00016540 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00016544 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00016548 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
0001654C 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00016550 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00016554 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00016558 0000                       		dc.w byte_154A4-Map_obj66
0001655A 06                         byte_152B4:	dc.b 6
0001655B E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00016560 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00016565 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
0001656A E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
0001656F 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00016574 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00016579 06                         byte_152D3:	dc.b 6
0001657A F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
0001657F 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00016584 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00016589 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
0001658E 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00016593 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00016598 06                         byte_152F2:	dc.b 6
00016599 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
0001659E 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000165A3 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000165A8 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000165AD 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000165B2 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000165B7 06                         byte_15311:	dc.b 6
000165B8 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000165BD 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000165C2 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000165C7 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
000165CC 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
000165D1 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
000165D6 06                         byte_15330:	dc.b 6
000165D7 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
000165DC 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
000165E1 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
000165E6 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
000165EB 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
000165F0 200A 1800 00               		dc.b $20, $A, $18, 0, 0
000165F5 06                         byte_1534F:	dc.b 6
000165F6 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
000165FB 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00016600 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00016605 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
0001660A 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
0001660F 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00016614 06                         byte_1536E:	dc.b 6
00016615 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
0001661A 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
0001661F 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00016624 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00016629 180A 1000 00               		dc.b $18, $A, $10, 0, 0
0001662E 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00016633 06                         byte_1538D:	dc.b 6
00016634 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00016639 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
0001663E F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00016643 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00016648 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
0001664D 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00016652 06                         byte_153AC:	dc.b 6
00016653 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00016658 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
0001665D E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00016662 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00016667 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
0001666C 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00016671 06                         byte_153CB:	dc.b 6
00016672 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00016677 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
0001667C DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00016681 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00016686 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
0001668B F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00016690 06                         byte_153EA:	dc.b 6
00016691 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00016696 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
0001669B D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
000166A0 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
000166A5 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
000166AA E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
000166AF 06                         byte_15409:	dc.b 6
000166B0 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
000166B5 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
000166BA CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
000166BF CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
000166C4 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
000166C9 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
000166CE 06                         byte_15428:	dc.b 6
000166CF D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
000166D4 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
000166D9 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
000166DE C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
000166E3 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
000166E8 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
000166ED 06                         byte_15447:	dc.b 6
000166EE D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
000166F3 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
000166F8 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
000166FD CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00016702 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00016707 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
0001670C 06                         byte_15466:	dc.b 6
0001670D E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00016712 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00016717 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
0001671C D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00016721 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00016726 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
0001672B 06                         byte_15485:	dc.b 6
0001672C E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00016731 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00016736 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
0001673B DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00016740 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00016745 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
0001674A 0C                         byte_154A4:	dc.b $C
0001674B C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00016750 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00016755 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
0001675A C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
0001675F D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00016764 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00016769 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
0001676E 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00016773 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00016778 280D 1809 00               		dc.b $28, $D, $18, 9, 0
0001677D 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00016782 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00016788 00                         		even
00016788 00                         		even
00016788                            
00016788                            ; ===========================================================================
00016788                            ; ---------------------------------------------------------------------------
00016788                            ; Object 67 - disc that	you run	around (SBZ)
00016788                            ; ---------------------------------------------------------------------------
00016788                            
00016788                            Obj67:					; XREF: Obj_Index
00016788 7000                       		moveq	#0,d0
0001678A 1028 0024                  		move.b	$24(a0),d0
0001678E 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00016792 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00016796                            ; ===========================================================================
00016796 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00016798 0000                       		dc.w Obj67_Action-Obj67_Index
0001679A                            ; ===========================================================================
0001679A                            
0001679A                            Obj67_Main:				; XREF: Obj67_Index
0001679A 5428 0024                  		addq.b	#2,$24(a0)
0001679E 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
000167A6 317C C344 0002             		move.w	#$C344,2(a0)
000167AC 117C 0004 0001             		move.b	#4,1(a0)
000167B2 117C 0004 0018             		move.b	#4,$18(a0)
000167B8 117C 0008 0019             		move.b	#8,$19(a0)
000167BE 3168 0008 0032             		move.w	8(a0),$32(a0)
000167C4 3168 000C 0030             		move.w	$C(a0),$30(a0)
000167CA 117C 0018 0034             		move.b	#$18,$34(a0)
000167D0 117C 0048 0038             		move.b	#$48,$38(a0)
000167D6 1228 0028                  		move.b	$28(a0),d1	; get object type
000167DA 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000167DE 6700                       		beq.s	loc_15546
000167E0 117C 0010 0034             		move.b	#$10,$34(a0)
000167E6 117C 0038 0038             		move.b	#$38,$38(a0)
000167EC                            
000167EC                            loc_15546:
000167EC 1228 0028                  		move.b	$28(a0),d1	; get object type
000167F0 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000167F4 4881                       		ext.w	d1
000167F6 E741                       		asl.w	#3,d1
000167F8 3141 0036                  		move.w	d1,$36(a0)
000167FC 1028 0022                  		move.b	$22(a0),d0
00016800 E418                       		ror.b	#2,d0
00016802 0200 00C0                  		andi.b	#-$40,d0
00016806 1140 0026                  		move.b	d0,$26(a0)
0001680A                            
0001680A                            Obj67_Action:				; XREF: Obj67_Index
0001680A 6100 0000                  		bsr.w	Obj67_MoveSonic
0001680E 6100 0000                  		bsr.w	Obj67_MoveSpot
00016812 6000 0000                  		bra.w	Obj67_ChkDel
00016816                            ; ===========================================================================
00016816                            
00016816                            Obj67_MoveSonic:			; XREF: Obj67_Action
00016816 7400                       		moveq	#0,d2
00016818 1428 0038                  		move.b	$38(a0),d2
0001681C 3602                       		move.w	d2,d3
0001681E D643                       		add.w	d3,d3
00016820 43F8 D000                  		lea	($FFFFD000).w,a1
00016824 3029 0008                  		move.w	8(a1),d0
00016828 9068 0032                  		sub.w	$32(a0),d0
0001682C D042                       		add.w	d2,d0
0001682E B043                       		cmp.w	d3,d0
00016830 6400                       		bcc.s	loc_155A8
00016832 3229 000C                  		move.w	$C(a1),d1
00016836 9268 0030                  		sub.w	$30(a0),d1
0001683A D242                       		add.w	d2,d1
0001683C B243                       		cmp.w	d3,d1
0001683E 6400                       		bcc.s	loc_155A8
00016840 0829 0001 0022             		btst	#1,$22(a1)
00016846 6700                       		beq.s	loc_155B8
00016848 4228 003A                  		clr.b	$3A(a0)
0001684C 4E75                       		rts	
0001684E                            ; ===========================================================================
0001684E                            
0001684E                            loc_155A8:
0001684E 4A28 003A                  		tst.b	$3A(a0)
00016852 6700                       		beq.s	locret_155B6
00016854 4229 0038                  		clr.b	$38(a1)
00016858 4228 003A                  		clr.b	$3A(a0)
0001685C                            
0001685C                            locret_155B6:
0001685C 4E75                       		rts	
0001685E                            ; ===========================================================================
0001685E                            
0001685E                            loc_155B8:
0001685E 4A28 003A                  		tst.b	$3A(a0)
00016862 6600                       		bne.s	loc_155E2
00016864 117C 0001 003A             		move.b	#1,$3A(a0)
0001686A 0829 0002 0022             		btst	#2,$22(a1)
00016870 6600                       		bne.s	loc_155D0
00016872 4229 001C                  		clr.b	$1C(a1)
00016876                            
00016876                            loc_155D0:
00016876 08A9 0005 0022             		bclr	#5,$22(a1)
0001687C 137C 0001 001D             		move.b	#1,$1D(a1)
00016882 137C 0001 0038             		move.b	#1,$38(a1)
00016888                            
00016888                            loc_155E2:
00016888 3029 0014                  		move.w	$14(a1),d0
0001688C 4A68 0036                  		tst.w	$36(a0)
00016890 6A00                       		bpl.s	loc_15608
00016892 0C40 FC00                  		cmpi.w	#-$400,d0
00016896 6F00                       		ble.s	loc_155FA
00016898 337C FC00 0014             		move.w	#-$400,$14(a1)
0001689E 4E75                       		rts	
000168A0                            ; ===========================================================================
000168A0                            
000168A0                            loc_155FA:
000168A0 0C40 F100                  		cmpi.w	#-$F00,d0
000168A4 6C00                       		bge.s	locret_15606
000168A6 337C F100 0014             		move.w	#-$F00,$14(a1)
000168AC                            
000168AC                            locret_15606:
000168AC 4E75                       		rts	
000168AE                            ; ===========================================================================
000168AE                            
000168AE                            loc_15608:
000168AE 0C40 0400                  		cmpi.w	#$400,d0
000168B2 6C00                       		bge.s	loc_15616
000168B4 337C 0400 0014             		move.w	#$400,$14(a1)
000168BA 4E75                       		rts	
000168BC                            ; ===========================================================================
000168BC                            
000168BC                            loc_15616:
000168BC 0C40 0F00                  		cmpi.w	#$F00,d0
000168C0 6F00                       		ble.s	locret_15622
000168C2 337C 0F00 0014             		move.w	#$F00,$14(a1)
000168C8                            
000168C8                            locret_15622:
000168C8 4E75                       		rts	
000168CA                            ; ===========================================================================
000168CA                            
000168CA                            Obj67_MoveSpot:				; XREF: Obj67_Action
000168CA 3028 0036                  		move.w	$36(a0),d0
000168CE D168 0026                  		add.w	d0,$26(a0)
000168D2 1028 0026                  		move.b	$26(a0),d0
000168D6 4EB9 0000 3416             		jsr	(CalcSine).l
000168DC 3428 0030                  		move.w	$30(a0),d2
000168E0 3628 0032                  		move.w	$32(a0),d3
000168E4 7800                       		moveq	#0,d4
000168E6 1828 0034                  		move.b	$34(a0),d4
000168EA E14C                       		lsl.w	#8,d4
000168EC 2A04                       		move.l	d4,d5
000168EE C9C0                       		muls.w	d0,d4
000168F0 4844                       		swap	d4
000168F2 CBC1                       		muls.w	d1,d5
000168F4 4845                       		swap	d5
000168F6 D842                       		add.w	d2,d4
000168F8 DA43                       		add.w	d3,d5
000168FA 3144 000C                  		move.w	d4,$C(a0)
000168FE 3145 0008                  		move.w	d5,8(a0)
00016902 4E75                       		rts	
00016904                            ; ===========================================================================
00016904                            
00016904                            Obj67_ChkDel:				; XREF: Obj67_Action
00016904 3028 0032                  		move.w	$32(a0),d0
00016908 0240 FF80                  		andi.w	#-$80,d0
0001690C 3238 F700                  		move.w	($FFFFF700).w,d1
00016910 0441 0080                  		subi.w	#$80,d1
00016914 0241 FF80                  		andi.w	#-$80,d1
00016918 9041                       		sub.w	d1,d0
0001691A 0C40 0280                  		cmpi.w	#$280,d0
0001691E 6200                       		bhi.s	Obj67_Delete
00016920 4EF9 0000 E756             		jmp	DisplaySprite
00016926                            ; ===========================================================================
00016926                            
00016926                            Obj67_Delete:
00016926 4EF9 0000 E792             		jmp	DeleteObject
0001692C                            ; ===========================================================================
0001692C                            ; ---------------------------------------------------------------------------
0001692C                            ; Sprite mappings - disc that you run around (SBZ)
0001692C                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001692C                            ; part of the level tiles.)
0001692C                            ; ---------------------------------------------------------------------------
0001692C                            Map_obj67:
0001692C                            	include "_maps\obj67.asm"
0001692C                            ; ---------------------------------------------------------------------------
0001692C                            ; Sprite mappings - disc that you run around (SBZ)
0001692C                            ; (It's just a small blob that moves around in a circle. The disc itself is
0001692C                            ; part of the level tiles.)
0001692C                            ; ---------------------------------------------------------------------------
0001692C 0000                       		dc.w byte_15688-Map_obj67
0001692E 01                         byte_15688:	dc.b 1
0001692F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00016934                            		even
00016934                            		even
00016934                            
00016934                            ; ===========================================================================
00016934                            ; ---------------------------------------------------------------------------
00016934                            ; Object 68 - conveyor belts (SBZ)
00016934                            ; ---------------------------------------------------------------------------
00016934                            
00016934                            Obj68:					; XREF: Obj_Index
00016934 7000                       		moveq	#0,d0
00016936 1028 0024                  		move.b	$24(a0),d0
0001693A 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
0001693E 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00016942                            ; ===========================================================================
00016942 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00016944 0000                       		dc.w Obj68_Action-Obj68_Index
00016946                            ; ===========================================================================
00016946                            
00016946                            Obj68_Main:				; XREF: Obj68_Index
00016946 5428 0024                  		addq.b	#2,$24(a0)
0001694A 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00016950 1228 0028                  		move.b	$28(a0),d1	; get object type
00016954 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00016958 6700                       		beq.s	loc_156BA	; if zero, branch
0001695A 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00016960                            
00016960                            loc_156BA:
00016960 1228 0028                  		move.b	$28(a0),d1	; get object type
00016964 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016968 4881                       		ext.w	d1
0001696A E841                       		asr.w	#4,d1
0001696C 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00016970                            
00016970                            Obj68_Action:				; XREF: Obj68_Index
00016970 6100                       		bsr.s	Obj68_MoveSonic
00016972 3028 0008                  		move.w	8(a0),d0
00016976 0240 FF80                  		andi.w	#$FF80,d0
0001697A 3238 F700                  		move.w	($FFFFF700).w,d1
0001697E 0441 0080                  		subi.w	#$80,d1
00016982 0241 FF80                  		andi.w	#$FF80,d1
00016986 9041                       		sub.w	d1,d0
00016988 0C40 0280                  		cmpi.w	#$280,d0
0001698C 6200                       		bhi.s	Obj68_Delete
0001698E 4E75                       		rts	
00016990                            ; ===========================================================================
00016990                            
00016990                            Obj68_Delete:
00016990 4EF9 0000 E792             		jmp	DeleteObject
00016996                            ; ===========================================================================
00016996                            
00016996                            Obj68_MoveSonic:			; XREF: Obj68_Action
00016996 7400                       		moveq	#0,d2
00016998 1428 0038                  		move.b	$38(a0),d2
0001699C 3602                       		move.w	d2,d3
0001699E D643                       		add.w	d3,d3
000169A0 43F8 D000                  		lea	($FFFFD000).w,a1
000169A4 3029 0008                  		move.w	8(a1),d0
000169A8 9068 0008                  		sub.w	8(a0),d0
000169AC D042                       		add.w	d2,d0
000169AE B043                       		cmp.w	d3,d0
000169B0 6400                       		bcc.s	locret_1572E
000169B2 3229 000C                  		move.w	$C(a1),d1
000169B6 9268 000C                  		sub.w	$C(a0),d1
000169BA 0641 0030                  		addi.w	#$30,d1
000169BE 0C41 0030                  		cmpi.w	#$30,d1
000169C2 6400                       		bcc.s	locret_1572E
000169C4 0829 0001 0022             		btst	#1,$22(a1)
000169CA 6600                       		bne.s	locret_1572E
000169CC 3028 0036                  		move.w	$36(a0),d0
000169D0 D169 0008                  		add.w	d0,8(a1)
000169D4                            
000169D4                            locret_1572E:
000169D4 4E75                       		rts	
000169D6                            
000169D6                            ; ===========================================================================
000169D6                            ; ---------------------------------------------------------------------------
000169D6                            ; Object 69 - spinning platforms and trapdoors (SBZ)
000169D6                            ; ---------------------------------------------------------------------------
000169D6                            
000169D6                            Obj69:					; XREF: Obj_Index
000169D6 7000                       		moveq	#0,d0
000169D8 1028 0024                  		move.b	$24(a0),d0
000169DC 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
000169E0 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
000169E4                            ; ===========================================================================
000169E4 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
000169E6 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
000169E8 0000                       		dc.w Obj69_Spinner-Obj69_Index
000169EA                            ; ===========================================================================
000169EA                            
000169EA                            Obj69_Main:				; XREF: Obj69_Index
000169EA 5428 0024                  		addq.b	#2,$24(a0)
000169EE 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
000169F6 317C 4492 0002             		move.w	#$4492,2(a0)
000169FC 0028 0004 0001             		ori.b	#4,1(a0)
00016A02 117C 0080 0019             		move.b	#$80,$19(a0)
00016A08 7000                       		moveq	#0,d0
00016A0A 1028 0028                  		move.b	$28(a0),d0
00016A0E 0240 000F                  		andi.w	#$F,d0
00016A12 C0FC 003C                  		mulu.w	#$3C,d0
00016A16 3140 0032                  		move.w	d0,$32(a0)
00016A1A 4A28 0028                  		tst.b	$28(a0)
00016A1E 6A00                       		bpl.s	Obj69_Trapdoor
00016A20 5428 0024                  		addq.b	#2,$24(a0)
00016A24 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00016A2C 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016A32 117C 0010 0019             		move.b	#$10,$19(a0)
00016A38 117C 0002 001C             		move.b	#2,$1C(a0)
00016A3E 7000                       		moveq	#0,d0
00016A40 1028 0028                  		move.b	$28(a0),d0	; get object type
00016A44 3200                       		move.w	d0,d1
00016A46 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016A4A C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00016A4E 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00016A52 3140 0032                  		move.w	d0,$32(a0)
00016A56 0241 0070                  		andi.w	#$70,d1
00016A5A 0641 0010                  		addi.w	#$10,d1
00016A5E E549                       		lsl.w	#2,d1
00016A60 5341                       		subq.w	#1,d1
00016A62 3141 0036                  		move.w	d1,$36(a0)
00016A66 6000                       		bra.s	Obj69_Spinner
00016A68                            ; ===========================================================================
00016A68                            
00016A68                            Obj69_Trapdoor:				; XREF: Obj69_Index
00016A68 5368 0030                  		subq.w	#1,$30(a0)
00016A6C 6A00                       		bpl.s	Obj69_Animate
00016A6E 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016A74 0868 0000 001C             		bchg	#0,$1C(a0)
00016A7A 4A28 0001                  		tst.b	1(a0)
00016A7E 6A00                       		bpl.s	Obj69_Animate
00016A80 303C 00BB                  		move.w	#$BB,d0
00016A84 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play door sound
00016A8A                            
00016A8A                            Obj69_Animate:
00016A8A 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016A90 4EB9 0000 B7A4             		jsr	AnimateSprite
00016A96 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00016A9A 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00016A9C 323C 004B                  		move.w	#$4B,d1
00016AA0 343C 000C                  		move.w	#$C,d2
00016AA4 3602                       		move.w	d2,d3
00016AA6 5243                       		addq.w	#1,d3
00016AA8 3828 0008                  		move.w	8(a0),d4
00016AAC 6100 A078                  		bsr.w	SolidObject
00016AB0 6000 9D4C                  		bra.w	MarkObjGone
00016AB4                            ; ===========================================================================
00016AB4                            
00016AB4                            Obj69_NotSolid:
00016AB4 0828 0003 0022             		btst	#3,$22(a0)
00016ABA 6700                       		beq.s	Obj69_Display
00016ABC 43F8 D000                  		lea	($FFFFD000).w,a1
00016AC0 08A9 0003 0022             		bclr	#3,$22(a1)
00016AC6 08A8 0003 0022             		bclr	#3,$22(a0)
00016ACC 4228 0025                  		clr.b	$25(a0)
00016AD0                            
00016AD0                            Obj69_Display:
00016AD0 6000 9D2C                  		bra.w	MarkObjGone
00016AD4                            ; ===========================================================================
00016AD4                            
00016AD4                            Obj69_Spinner:				; XREF: Obj69_Index
00016AD4 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016AD8 C068 0036                  		and.w	$36(a0),d0
00016ADC 6600                       		bne.s	Obj69_Delay
00016ADE 117C 0001 0034             		move.b	#1,$34(a0)
00016AE4                            
00016AE4                            Obj69_Delay:
00016AE4 4A28 0034                  		tst.b	$34(a0)
00016AE8 6700                       		beq.s	Obj69_Animate2
00016AEA 5368 0030                  		subq.w	#1,$30(a0)
00016AEE 6A00                       		bpl.s	Obj69_Animate2
00016AF0 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016AF6 4228 0034                  		clr.b	$34(a0)
00016AFA 0868 0000 001C             		bchg	#0,$1C(a0)
00016B00                            
00016B00                            Obj69_Animate2:
00016B00 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016B06 4EB9 0000 B7A4             		jsr	AnimateSprite
00016B0C 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00016B10 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00016B12 323C 001B                  		move.w	#$1B,d1
00016B16 343C 0007                  		move.w	#7,d2
00016B1A 3602                       		move.w	d2,d3
00016B1C 5243                       		addq.w	#1,d3
00016B1E 3828 0008                  		move.w	8(a0),d4
00016B22 6100 A002                  		bsr.w	SolidObject
00016B26 6000 9CD6                  		bra.w	MarkObjGone
00016B2A                            ; ===========================================================================
00016B2A                            
00016B2A                            Obj69_NotSolid2:
00016B2A 0828 0003 0022             		btst	#3,$22(a0)
00016B30 6700                       		beq.s	Obj69_Display2
00016B32 43F8 D000                  		lea	($FFFFD000).w,a1
00016B36 08A9 0003 0022             		bclr	#3,$22(a1)
00016B3C 08A8 0003 0022             		bclr	#3,$22(a0)
00016B42 4228 0025                  		clr.b	$25(a0)
00016B46                            
00016B46                            Obj69_Display2:
00016B46 6000 9CB6                  		bra.w	MarkObjGone
00016B4A                            ; ===========================================================================
00016B4A                            Ani_obj69:
00016B4A                            	include "_anim\obj69.asm"
00016B4A                            ; ---------------------------------------------------------------------------
00016B4A                            ; Animation script - trapdoor (SBZ)
00016B4A                            ; ---------------------------------------------------------------------------
00016B4A 0000                       		dc.w byte_158AC-Ani_obj69
00016B4C 0000                       		dc.w byte_158B2-Ani_obj69
00016B4E 0000                       		dc.w byte_158B8-Ani_obj69
00016B50 0000                       		dc.w byte_158CC-Ani_obj69
00016B52 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00016B58 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00016B5E 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016B6B 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016B72 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016B7F 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016B86                            		even
00016B86                            		even
00016B86                            
00016B86                            ; ---------------------------------------------------------------------------
00016B86                            ; Sprite mappings - trapdoor (SBZ)
00016B86                            ; ---------------------------------------------------------------------------
00016B86                            Map_obj69:
00016B86                            	include "_maps\obj69.asm"
00016B86                            ; ---------------------------------------------------------------------------
00016B86                            ; Sprite mappings - trapdoor (SBZ)
00016B86                            ; ---------------------------------------------------------------------------
00016B86 0000                       		dc.w byte_158E6-Map_obj69
00016B88 0000                       		dc.w byte_158FB-Map_obj69
00016B8A 0000                       		dc.w byte_15924-Map_obj69
00016B8C 04                         byte_158E6:	dc.b 4
00016B8D F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00016B92 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00016B97 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00016B9C F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00016BA1 08                         byte_158FB:	dc.b 8
00016BA2 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00016BA7 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00016BAC 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00016BB1 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00016BB6 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00016BBB 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00016BC0 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00016BC5 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016BCA 04                         byte_15924:	dc.b 4
00016BCB 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00016BD0 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00016BD5 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016BDA 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00016BE0 00                         		even
00016BE0 00                         		even
00016BE0                            
00016BE0                            ; ---------------------------------------------------------------------------
00016BE0                            ; Sprite mappings - spinning platforms (SBZ)
00016BE0                            ; ---------------------------------------------------------------------------
00016BE0                            Map_obj69a:
00016BE0                            	include "_maps\obj69a.asm"
00016BE0                            ; ---------------------------------------------------------------------------
00016BE0                            ; Sprite mappings - spinning platforms (SBZ)
00016BE0                            ; ---------------------------------------------------------------------------
00016BE0 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00016BE4 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00016BE8 0000                       		dc.w byte_15970-Map_obj69a
00016BEA 02                         byte_15944:	dc.b 2
00016BEB F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00016BF0 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00016BF5 02                         byte_1594F:	dc.b 2
00016BF6 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00016BFB 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00016C00 02                         byte_1595A:	dc.b 2
00016C01 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00016C06 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00016C0B 02                         byte_15965:	dc.b 2
00016C0C F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00016C11 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00016C16 02                         byte_15970:	dc.b 2
00016C17 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00016C1C 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00016C22 00                         		even
00016C22 00                         		even
00016C22                            
00016C22                            ; ===========================================================================
00016C22                            ; ---------------------------------------------------------------------------
00016C22                            ; Object 6A - ground saws and pizza cutters (SBZ)
00016C22                            ; ---------------------------------------------------------------------------
00016C22                            
00016C22                            Obj6A:					; XREF: Obj_Index
00016C22 7000                       		moveq	#0,d0
00016C24 1028 0024                  		move.b	$24(a0),d0
00016C28 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00016C2C 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00016C30                            ; ===========================================================================
00016C30 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00016C32 0000                       		dc.w Obj6A_Action-Obj6A_Index
00016C34                            ; ===========================================================================
00016C34                            
00016C34                            Obj6A_Main:				; XREF: Obj6A_Index
00016C34 5428 0024                  		addq.b	#2,$24(a0)
00016C38 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00016C40 317C 43B5 0002             		move.w	#$43B5,2(a0)
00016C46 117C 0004 0001             		move.b	#4,1(a0)
00016C4C 117C 0004 0018             		move.b	#4,$18(a0)
00016C52 117C 0020 0019             		move.b	#$20,$19(a0)
00016C58 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016C5E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00016C64 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00016C6A 6400                       		bcc.s	Obj6A_Action
00016C6C 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016C72                            
00016C72                            Obj6A_Action:				; XREF: Obj6A_Index
00016C72 7000                       		moveq	#0,d0
00016C74 1028 0028                  		move.b	$28(a0),d0
00016C78 0240 0007                  		andi.w	#7,d0
00016C7C D040                       		add.w	d0,d0
00016C7E 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00016C82 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00016C86 3028 003A                  		move.w	$3A(a0),d0
00016C8A 0240 FF80                  		andi.w	#$FF80,d0
00016C8E 3238 F700                  		move.w	($FFFFF700).w,d1
00016C92 0441 0080                  		subi.w	#$80,d1
00016C96 0241 FF80                  		andi.w	#$FF80,d1
00016C9A 9041                       		sub.w	d1,d0
00016C9C 0C40 0280                  		cmpi.w	#$280,d0
00016CA0 6200                       		bhi.s	Obj6A_Delete
00016CA2 4EF9 0000 E756             		jmp	DisplaySprite
00016CA8                            ; ===========================================================================
00016CA8                            
00016CA8                            Obj6A_Delete:
00016CA8 4EF9 0000 E792             		jmp	DeleteObject
00016CAE                            ; ===========================================================================
00016CAE 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00016CB2 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016CB6 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016CB8                            ; ===========================================================================
00016CB8                            
00016CB8                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016CB8 4E75                       		rts	
00016CBA                            ; ===========================================================================
00016CBA                            
00016CBA                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016CBA 323C 0060                  		move.w	#$60,d1
00016CBE 7000                       		moveq	#0,d0
00016CC0 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016CC4 0828 0000 0022             		btst	#0,$22(a0)
00016CCA 6700                       		beq.s	Obj6A_Animate01
00016CCC 4440                       		neg.w	d0
00016CCE D041                       		add.w	d1,d0
00016CD0                            
00016CD0                            Obj6A_Animate01:
00016CD0 3228 003A                  		move.w	$3A(a0),d1
00016CD4 9240                       		sub.w	d0,d1
00016CD6 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016CDA 5328 001E                  		subq.b	#1,$1E(a0)
00016CDE 6A00                       		bpl.s	loc_15A46
00016CE0 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016CE6 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016CEC                            
00016CEC                            loc_15A46:
00016CEC 4A28 0001                  		tst.b	1(a0)
00016CF0 6A00                       		bpl.s	locret_15A60
00016CF2 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016CF6 0240 000F                  		andi.w	#$F,d0
00016CFA 6600                       		bne.s	locret_15A60
00016CFC 303C 00B0                  		move.w	#$B0,d0
00016D00 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play saw sound
00016D06                            
00016D06                            locret_15A60:
00016D06 4E75                       		rts	
00016D08                            ; ===========================================================================
00016D08                            
00016D08                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00016D08 323C 0030                  		move.w	#$30,d1
00016D0C 7000                       		moveq	#0,d0
00016D0E 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016D12 0828 0000 0022             		btst	#0,$22(a0)
00016D18 6700                       		beq.s	Obj6A_Animate02
00016D1A 4440                       		neg.w	d0
00016D1C 0640 0080                  		addi.w	#$80,d0
00016D20                            
00016D20                            Obj6A_Animate02:
00016D20 3228 0038                  		move.w	$38(a0),d1
00016D24 9240                       		sub.w	d0,d1
00016D26 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00016D2A 5328 001E                  		subq.b	#1,$1E(a0)
00016D2E 6A00                       		bpl.s	loc_15A96
00016D30 117C 0002 001E             		move.b	#2,$1E(a0)
00016D36 0868 0000 001A             		bchg	#0,$1A(a0)
00016D3C                            
00016D3C                            loc_15A96:
00016D3C 4A28 0001                  		tst.b	1(a0)
00016D40 6A00                       		bpl.s	locret_15AB0
00016D42 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016D46 0C00 0018                  		cmpi.b	#$18,d0
00016D4A 6600                       		bne.s	locret_15AB0
00016D4C 303C 00B0                  		move.w	#$B0,d0
00016D50 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play saw sound
00016D56                            
00016D56                            locret_15AB0:
00016D56 4E75                       		rts	
00016D58                            ; ===========================================================================
00016D58                            
00016D58                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00016D58 4A28 003D                  		tst.b	$3D(a0)
00016D5C 6600                       		bne.s	Obj6A_Animate03
00016D5E 3038 D008                  		move.w	($FFFFD008).w,d0
00016D62 0440 00C0                  		subi.w	#$C0,d0
00016D66 6500                       		bcs.s	loc_15B02
00016D68 9068 0008                  		sub.w	8(a0),d0
00016D6C 6500                       		bcs.s	loc_15B02
00016D6E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016D72 0440 0080                  		subi.w	#$80,d0
00016D76 B068 000C                  		cmp.w	$C(a0),d0
00016D7A 6400                       		bcc.s	locret_15B04
00016D7C 0640 0100                  		addi.w	#$100,d0
00016D80 B068 000C                  		cmp.w	$C(a0),d0
00016D84 6500                       		bcs.s	locret_15B04
00016D86 117C 0001 003D             		move.b	#1,$3D(a0)
00016D8C 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00016D92 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016D98 117C 0002 001A             		move.b	#2,$1A(a0)
00016D9E 303C 00B0                  		move.w	#$B0,d0
00016DA2 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play saw sound
00016DA8                            
00016DA8                            loc_15B02:
00016DA8 588F                       		addq.l	#4,sp
00016DAA                            
00016DAA                            locret_15B04:
00016DAA 4E75                       		rts	
00016DAC                            ; ===========================================================================
00016DAC                            
00016DAC                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00016DAC 4EB9 0000 E730             		jsr	SpeedToPos
00016DB2 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016DB8 5328 001E                  		subq.b	#1,$1E(a0)
00016DBC 6A00                       		bpl.s	locret_15B24
00016DBE 117C 0002 001E             		move.b	#2,$1E(a0)
00016DC4 0868 0000 001A             		bchg	#0,$1A(a0)
00016DCA                            
00016DCA                            locret_15B24:
00016DCA 4E75                       		rts	
00016DCC                            ; ===========================================================================
00016DCC                            
00016DCC                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016DCC 4A28 003D                  		tst.b	$3D(a0)
00016DD0 6600                       		bne.s	Obj6A_Animate04
00016DD2 3038 D008                  		move.w	($FFFFD008).w,d0
00016DD6 0640 00E0                  		addi.w	#$E0,d0
00016DDA 9068 0008                  		sub.w	8(a0),d0
00016DDE 6400                       		bcc.s	loc_15B74
00016DE0 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016DE4 0440 0080                  		subi.w	#$80,d0
00016DE8 B068 000C                  		cmp.w	$C(a0),d0
00016DEC 6400                       		bcc.s	locret_15B76
00016DEE 0640 0100                  		addi.w	#$100,d0
00016DF2 B068 000C                  		cmp.w	$C(a0),d0
00016DF6 6500                       		bcs.s	locret_15B76
00016DF8 117C 0001 003D             		move.b	#1,$3D(a0)
00016DFE 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00016E04 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016E0A 117C 0002 001A             		move.b	#2,$1A(a0)
00016E10 303C 00B0                  		move.w	#$B0,d0
00016E14 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play saw sound
00016E1A                            
00016E1A                            loc_15B74:
00016E1A 588F                       		addq.l	#4,sp
00016E1C                            
00016E1C                            locret_15B76:
00016E1C 4E75                       		rts	
00016E1E                            ; ===========================================================================
00016E1E                            
00016E1E                            Obj6A_Animate04:
00016E1E 4EB9 0000 E730             		jsr	SpeedToPos
00016E24 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016E2A 5328 001E                  		subq.b	#1,$1E(a0)
00016E2E 6A00                       		bpl.s	locret_15B96
00016E30 117C 0002 001E             		move.b	#2,$1E(a0)
00016E36 0868 0000 001A             		bchg	#0,$1A(a0)
00016E3C                            
00016E3C                            locret_15B96:
00016E3C 4E75                       		rts	
00016E3E                            ; ===========================================================================
00016E3E                            ; ---------------------------------------------------------------------------
00016E3E                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016E3E                            ; ---------------------------------------------------------------------------
00016E3E                            Map_obj6A:
00016E3E                            	include "_maps\obj6A.asm"
00016E3E                            ; ---------------------------------------------------------------------------
00016E3E                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016E3E                            ; ---------------------------------------------------------------------------
00016E3E 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00016E42 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00016E46 07                         byte_15BA0:	dc.b 7
00016E47 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016E4C D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016E51 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016E56 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016E5B E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016E60 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016E65 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016E6A 07                         byte_15BC4:	dc.b 7
00016E6B C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016E70 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016E75 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016E7A E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016E7F E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016E84 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016E89 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016E8E 04                         byte_15BE8:	dc.b 4
00016E8F E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016E94 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016E99 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016E9E 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016EA3 04                         byte_15BFD:	dc.b 4
00016EA4 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016EA9 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016EAE 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016EB3 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016EB8                            		even
00016EB8                            		even
00016EB8                            
00016EB8                            ; ===========================================================================
00016EB8                            ; ---------------------------------------------------------------------------
00016EB8                            ; Object 6B - stomper (SBZ)
00016EB8                            ; ---------------------------------------------------------------------------
00016EB8                            
00016EB8                            Obj6B:					; XREF: Obj_Index
00016EB8 7000                       		moveq	#0,d0
00016EBA 1028 0024                  		move.b	$24(a0),d0
00016EBE 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016EC2 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016EC6                            ; ===========================================================================
00016EC6 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016EC8 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016ECA                            
00016ECA 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016ECE 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016ED2 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016ED6 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016EDA 8040 0005                  		dc.b  $80, $40,	  0,   5
00016EDE                            ; ===========================================================================
00016EDE                            
00016EDE                            Obj6B_Main:				; XREF: Obj6B_Index
00016EDE 5428 0024                  		addq.b	#2,$24(a0)
00016EE2 7000                       		moveq	#0,d0
00016EE4 1028 0028                  		move.b	$28(a0),d0
00016EE8 E448                       		lsr.w	#2,d0
00016EEA 0240 001C                  		andi.w	#$1C,d0
00016EEE 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00016EF2 115B 0019                  		move.b	(a3)+,$19(a0)
00016EF6 115B 0016                  		move.b	(a3)+,$16(a0)
00016EFA E448                       		lsr.w	#2,d0
00016EFC 1140 001A                  		move.b	d0,$1A(a0)
00016F00 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00016F08 317C 22C0 0002             		move.w	#$22C0,2(a0)
00016F0E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00016F14 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00016F16 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016F1C 6700                       		beq.s	Obj6B_SBZ3
00016F1E                            
00016F1E                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016F1E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016F22 7000                       		moveq	#0,d0
00016F24 1028 0023                  		move.b	$23(a0),d0
00016F28 6700                       		beq.s	Obj6B_Delete
00016F2A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016F30                            
00016F30                            Obj6B_Delete:
00016F30 4EF9 0000 E792             		jmp	DeleteObject
00016F36                            ; ===========================================================================
00016F36                            
00016F36                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00016F36 317C 41F0 0002             		move.w	#$41F0,2(a0)
00016F3C 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016F42 6600                       		bne.s	Obj6B_SBZ12
00016F44 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016F48 7000                       		moveq	#0,d0
00016F4A 1028 0023                  		move.b	$23(a0),d0
00016F4E 6700                       		beq.s	Obj6B_SBZ12
00016F50 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016F56 6700                       		beq.s	Obj6B_SBZ12
00016F58 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016F5C 60C0                       		bra.s	Obj6B_ChkGone
00016F5E                            ; ===========================================================================
00016F5E                            
00016F5E                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00016F5E 0028 0004 0001             		ori.b	#4,1(a0)
00016F64 117C 0004 0018             		move.b	#4,$18(a0)
00016F6A 3168 0008 0034             		move.w	8(a0),$34(a0)
00016F70 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016F76 7000                       		moveq	#0,d0
00016F78 101B                       		move.b	(a3)+,d0
00016F7A 3140 003C                  		move.w	d0,$3C(a0)
00016F7E 7000                       		moveq	#0,d0
00016F80 1028 0028                  		move.b	$28(a0),d0
00016F84 6A00                       		bpl.s	Obj6B_Action
00016F86 0200 000F                  		andi.b	#$F,d0
00016F8A 1140 003E                  		move.b	d0,$3E(a0)
00016F8E 1153 0028                  		move.b	(a3),$28(a0)
00016F92 0C13 0005                  		cmpi.b	#5,(a3)
00016F96 6600                       		bne.s	Obj6B_ChkGone2
00016F98 08E8 0004 0001             		bset	#4,1(a0)
00016F9E                            
00016F9E                            Obj6B_ChkGone2:
00016F9E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016FA2 7000                       		moveq	#0,d0
00016FA4 1028 0023                  		move.b	$23(a0),d0
00016FA8 6700                       		beq.s	Obj6B_Action
00016FAA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016FB0                            
00016FB0                            Obj6B_Action:				; XREF: Obj6B_Index
00016FB0 3F28 0008                  		move.w	8(a0),-(sp)
00016FB4 7000                       		moveq	#0,d0
00016FB6 1028 0028                  		move.b	$28(a0),d0
00016FBA 0240 000F                  		andi.w	#$F,d0
00016FBE D040                       		add.w	d0,d0
00016FC0 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016FC4 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016FC8 381F                       		move.w	(sp)+,d4
00016FCA 4A28 0001                  		tst.b	1(a0)
00016FCE 6A00                       		bpl.s	Obj6B_ChkDel
00016FD0 7200                       		moveq	#0,d1
00016FD2 1228 0019                  		move.b	$19(a0),d1
00016FD6 0641 000B                  		addi.w	#$B,d1
00016FDA 7400                       		moveq	#0,d2
00016FDC 1428 0016                  		move.b	$16(a0),d2
00016FE0 3602                       		move.w	d2,d3
00016FE2 5243                       		addq.w	#1,d3
00016FE4 6100 9B40                  		bsr.w	SolidObject
00016FE8                            
00016FE8                            Obj6B_ChkDel:
00016FE8 3028 0034                  		move.w	$34(a0),d0
00016FEC 0240 FF80                  		andi.w	#$FF80,d0
00016FF0 3238 F700                  		move.w	($FFFFF700).w,d1
00016FF4 0441 0080                  		subi.w	#$80,d1
00016FF8 0241 FF80                  		andi.w	#$FF80,d1
00016FFC 9041                       		sub.w	d1,d0
00016FFE 0C40 0280                  		cmpi.w	#$280,d0
00017002 6200                       		bhi.s	loc_15D64
00017004 4EF9 0000 E756             		jmp	DisplaySprite
0001700A                            ; ===========================================================================
0001700A                            
0001700A                            loc_15D64:
0001700A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017010 6600                       		bne.s	Obj6B_Delete2
00017012 4238 F7CB                  		clr.b	($FFFFF7CB).w
00017016 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001701A 7000                       		moveq	#0,d0
0001701C 1028 0023                  		move.b	$23(a0),d0
00017020 6700                       		beq.s	Obj6B_Delete2
00017022 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017028                            
00017028                            Obj6B_Delete2:
00017028 4EF9 0000 E792             		jmp	DeleteObject
0001702E                            ; ===========================================================================
0001702E 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00017032 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00017036 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
0001703A                            ; ===========================================================================
0001703A                            
0001703A                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
0001703A 4E75                       		rts	
0001703C                            ; ===========================================================================
0001703C                            
0001703C                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
0001703C 4A28 0038                  		tst.b	$38(a0)
00017040 6600                       		bne.s	loc_15DB4
00017042 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017046 7000                       		moveq	#0,d0
00017048 1028 003E                  		move.b	$3E(a0),d0
0001704C 0832 0000 0000             		btst	#0,(a2,d0.w)
00017052 6700                       		beq.s	loc_15DC2
00017054 117C 0001 0038             		move.b	#1,$38(a0)
0001705A                            
0001705A                            loc_15DB4:
0001705A 3028 003C                  		move.w	$3C(a0),d0
0001705E B068 003A                  		cmp.w	$3A(a0),d0
00017062 6700                       		beq.s	loc_15DE0
00017064 5468 003A                  		addq.w	#2,$3A(a0)
00017068                            
00017068                            loc_15DC2:
00017068 3028 003A                  		move.w	$3A(a0),d0
0001706C 0828 0000 0022             		btst	#0,$22(a0)
00017072 6700                       		beq.s	loc_15DD4
00017074 4440                       		neg.w	d0
00017076 0640 0080                  		addi.w	#$80,d0
0001707A                            
0001707A                            loc_15DD4:
0001707A 3228 0034                  		move.w	$34(a0),d1
0001707E 9240                       		sub.w	d0,d1
00017080 3141 0008                  		move.w	d1,8(a0)
00017084 4E75                       		rts	
00017086                            ; ===========================================================================
00017086                            
00017086                            loc_15DE0:
00017086 5228 0028                  		addq.b	#1,$28(a0)
0001708A 317C 00B4 0036             		move.w	#$B4,$36(a0)
00017090 4228 0038                  		clr.b	$38(a0)
00017094 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017098 7000                       		moveq	#0,d0
0001709A 1028 0023                  		move.b	$23(a0),d0
0001709E 67C8                       		beq.s	loc_15DC2
000170A0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000170A6 60C0                       		bra.s	loc_15DC2
000170A8                            ; ===========================================================================
000170A8                            
000170A8                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000170A8 4A28 0038                  		tst.b	$38(a0)
000170AC 6600                       		bne.s	loc_15E14
000170AE 5368 0036                  		subq.w	#1,$36(a0)
000170B2 6600                       		bne.s	loc_15E1E
000170B4 117C 0001 0038             		move.b	#1,$38(a0)
000170BA                            
000170BA                            loc_15E14:
000170BA 4A68 003A                  		tst.w	$3A(a0)
000170BE 6700                       		beq.s	loc_15E3C
000170C0 5568 003A                  		subq.w	#2,$3A(a0)
000170C4                            
000170C4                            loc_15E1E:
000170C4 3028 003A                  		move.w	$3A(a0),d0
000170C8 0828 0000 0022             		btst	#0,$22(a0)
000170CE 6700                       		beq.s	loc_15E30
000170D0 4440                       		neg.w	d0
000170D2 0640 0080                  		addi.w	#$80,d0
000170D6                            
000170D6                            loc_15E30:
000170D6 3228 0034                  		move.w	$34(a0),d1
000170DA 9240                       		sub.w	d0,d1
000170DC 3141 0008                  		move.w	d1,8(a0)
000170E0 4E75                       		rts	
000170E2                            ; ===========================================================================
000170E2                            
000170E2                            loc_15E3C:
000170E2 5328 0028                  		subq.b	#1,$28(a0)
000170E6 4228 0038                  		clr.b	$38(a0)
000170EA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000170EE 7000                       		moveq	#0,d0
000170F0 1028 0023                  		move.b	$23(a0),d0
000170F4 67CE                       		beq.s	loc_15E1E
000170F6 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000170FC 60C6                       		bra.s	loc_15E1E
000170FE                            ; ===========================================================================
000170FE                            
000170FE                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
000170FE 4A28 0038                  		tst.b	$38(a0)
00017102 6600                       		bne.s	loc_15E7C
00017104 4A68 003A                  		tst.w	$3A(a0)
00017108 6700                       		beq.s	loc_15E6A
0001710A 5368 003A                  		subq.w	#1,$3A(a0)
0001710E 6000                       		bra.s	loc_15E8E
00017110                            ; ===========================================================================
00017110                            
00017110                            loc_15E6A:
00017110 5368 0036                  		subq.w	#1,$36(a0)
00017114 6A00                       		bpl.s	loc_15E8E
00017116 317C 003C 0036             		move.w	#$3C,$36(a0)
0001711C 117C 0001 0038             		move.b	#1,$38(a0)
00017122                            
00017122                            loc_15E7C:
00017122 5068 003A                  		addq.w	#8,$3A(a0)
00017126 3028 003A                  		move.w	$3A(a0),d0
0001712A B068 003C                  		cmp.w	$3C(a0),d0
0001712E 6600                       		bne.s	loc_15E8E
00017130 4228 0038                  		clr.b	$38(a0)
00017134                            
00017134                            loc_15E8E:
00017134 3028 003A                  		move.w	$3A(a0),d0
00017138 0828 0000 0022             		btst	#0,$22(a0)
0001713E 6700                       		beq.s	loc_15EA0
00017140 4440                       		neg.w	d0
00017142 0640 0038                  		addi.w	#$38,d0
00017146                            
00017146                            loc_15EA0:
00017146 3228 0030                  		move.w	$30(a0),d1
0001714A D240                       		add.w	d0,d1
0001714C 3141 000C                  		move.w	d1,$C(a0)
00017150 4E75                       		rts	
00017152                            ; ===========================================================================
00017152                            
00017152                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00017152 4A28 0038                  		tst.b	$38(a0)
00017156 6600                       		bne.s	loc_15ED0
00017158 4A68 003A                  		tst.w	$3A(a0)
0001715C 6700                       		beq.s	loc_15EBE
0001715E 5168 003A                  		subq.w	#8,$3A(a0)
00017162 6000                       		bra.s	loc_15EF0
00017164                            ; ===========================================================================
00017164                            
00017164                            loc_15EBE:
00017164 5368 0036                  		subq.w	#1,$36(a0)
00017168 6A00                       		bpl.s	loc_15EF0
0001716A 317C 003C 0036             		move.w	#$3C,$36(a0)
00017170 117C 0001 0038             		move.b	#1,$38(a0)
00017176                            
00017176                            loc_15ED0:
00017176 3028 003A                  		move.w	$3A(a0),d0
0001717A B068 003C                  		cmp.w	$3C(a0),d0
0001717E 6700                       		beq.s	loc_15EE0
00017180 5068 003A                  		addq.w	#8,$3A(a0)
00017184 6000                       		bra.s	loc_15EF0
00017186                            ; ===========================================================================
00017186                            
00017186                            loc_15EE0:
00017186 5368 0036                  		subq.w	#1,$36(a0)
0001718A 6A00                       		bpl.s	loc_15EF0
0001718C 317C 003C 0036             		move.w	#$3C,$36(a0)
00017192 4228 0038                  		clr.b	$38(a0)
00017196                            
00017196                            loc_15EF0:
00017196 3028 003A                  		move.w	$3A(a0),d0
0001719A 0828 0000 0022             		btst	#0,$22(a0)
000171A0 6700                       		beq.s	loc_15F02
000171A2 4440                       		neg.w	d0
000171A4 0640 0038                  		addi.w	#$38,d0
000171A8                            
000171A8                            loc_15F02:
000171A8 3228 0030                  		move.w	$30(a0),d1
000171AC D240                       		add.w	d0,d1
000171AE 3141 000C                  		move.w	d1,$C(a0)
000171B2 4E75                       		rts	
000171B4                            ; ===========================================================================
000171B4                            
000171B4                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000171B4 4A28 0038                  		tst.b	$38(a0)
000171B8 6600                       		bne.s	loc_15F3E
000171BA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000171BE 7000                       		moveq	#0,d0
000171C0 1028 003E                  		move.b	$3E(a0),d0
000171C4 0832 0000 0000             		btst	#0,(a2,d0.w)
000171CA 6700                       		beq.s	locret_15F5C
000171CC 117C 0001 0038             		move.b	#1,$38(a0)
000171D2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000171D6 7000                       		moveq	#0,d0
000171D8 1028 0023                  		move.b	$23(a0),d0
000171DC 6700                       		beq.s	loc_15F3E
000171DE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000171E4                            
000171E4                            loc_15F3E:
000171E4 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
000171EC 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
000171F4 3168 0008 0034             		move.w	8(a0),$34(a0)
000171FA 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00017200 6700                       		beq.s	loc_15F5E
00017202                            
00017202                            locret_15F5C:
00017202 4E75                       		rts	
00017204                            ; ===========================================================================
00017204                            
00017204                            loc_15F5E:
00017204 4228 0028                  		clr.b	$28(a0)
00017208 4228 0038                  		clr.b	$38(a0)
0001720C 4E75                       		rts	
0001720E                            ; ===========================================================================
0001720E                            ; ---------------------------------------------------------------------------
0001720E                            ; Sprite mappings - stomper and	platforms (SBZ)
0001720E                            ; ---------------------------------------------------------------------------
0001720E                            Map_obj6B:
0001720E                            	include "_maps\obj6B.asm"
0001720E                            ; ---------------------------------------------------------------------------
0001720E                            ; Sprite mappings - stomper and	platforms (SBZ)
0001720E                            ; ---------------------------------------------------------------------------
0001720E 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00017212 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00017216 0000                       		dc.w byte_15FB0-Map_obj6B
00017218 04                         byte_15F72:	dc.b 4
00017219 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
0001721E F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00017223 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00017228 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
0001722D 08                         byte_15F87:	dc.b 8
0001722E E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00017233 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00017238 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
0001723D E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00017242 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00017247 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
0001724C 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00017251 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00017256 0E                         byte_15FB0:	dc.b $E
00017257 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
0001725C C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00017261 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00017266 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
0001726B C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00017270 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00017275 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
0001727A C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
0001727F E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00017284 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00017289 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
0001728E 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00017293 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00017298 200F 0058 80               		dc.b $20, $F, 0, $58, $80
0001729E 00                         		even
0001729E 00                         		even
0001729E                            
0001729E                            ; ===========================================================================
0001729E                            ; ---------------------------------------------------------------------------
0001729E                            ; Object 6C - vanishing	platforms (SBZ)
0001729E                            ; ---------------------------------------------------------------------------
0001729E                            
0001729E                            Obj6C:					; XREF: Obj_Index
0001729E 7000                       		moveq	#0,d0
000172A0 1028 0024                  		move.b	$24(a0),d0
000172A4 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000172A8 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000172AC                            ; ===========================================================================
000172AC 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000172AE 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000172B0 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000172B2 0000                       		dc.w loc_16068-Obj6C_Index
000172B4                            ; ===========================================================================
000172B4                            
000172B4                            Obj6C_Main:				; XREF: Obj6C_Index
000172B4 5C28 0024                  		addq.b	#6,$24(a0)
000172B8 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000172C0 317C 44C3 0002             		move.w	#$44C3,2(a0)
000172C6 0028 0004 0001             		ori.b	#4,1(a0)
000172CC 117C 0010 0019             		move.b	#$10,$19(a0)
000172D2 117C 0004 0018             		move.b	#4,$18(a0)
000172D8 7000                       		moveq	#0,d0
000172DA 1028 0028                  		move.b	$28(a0),d0	; get object type
000172DE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000172E2 5240                       		addq.w	#1,d0		; add 1
000172E4 EF48                       		lsl.w	#7,d0		; multiply by $80
000172E6 3200                       		move.w	d0,d1
000172E8 5340                       		subq.w	#1,d0
000172EA 3140 0030                  		move.w	d0,$30(a0)
000172EE 3140 0032                  		move.w	d0,$32(a0)
000172F2 7000                       		moveq	#0,d0
000172F4 1028 0028                  		move.b	$28(a0),d0	; get object type
000172F8 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000172FC 0641 0080                  		addi.w	#$80,d1
00017300 C0C1                       		mulu.w	d1,d0
00017302 E088                       		lsr.l	#8,d0
00017304 3140 0036                  		move.w	d0,$36(a0)
00017308 5341                       		subq.w	#1,d1
0001730A 3141 0038                  		move.w	d1,$38(a0)
0001730E                            
0001730E                            loc_16068:				; XREF: Obj6C_Index
0001730E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00017312 9068 0036                  		sub.w	$36(a0),d0
00017316 C068 0038                  		and.w	$38(a0),d0
0001731A 6600                       		bne.s	Obj6C_Animate
0001731C 5928 0024                  		subq.b	#4,$24(a0)
00017320 6000                       		bra.s	Obj6C_Vanish
00017322                            ; ===========================================================================
00017322                            
00017322                            Obj6C_Animate:
00017322 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017328 4EB9 0000 B7A4             		jsr	AnimateSprite
0001732E 6000 94CE                  		bra.w	MarkObjGone
00017332                            ; ===========================================================================
00017332                            
00017332                            Obj6C_Vanish:				; XREF: Obj6C_Index
00017332 5368 0030                  		subq.w	#1,$30(a0)
00017336 6A00                       		bpl.s	loc_160AA
00017338 317C 007F 0030             		move.w	#127,$30(a0)
0001733E 4A28 001C                  		tst.b	$1C(a0)
00017342 6700                       		beq.s	loc_160A4
00017344 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001734A                            
0001734A                            loc_160A4:
0001734A 0868 0000 001C             		bchg	#0,$1C(a0)
00017350                            
00017350                            loc_160AA:
00017350 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00017356 4EB9 0000 B7A4             		jsr	AnimateSprite
0001735C 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00017362 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00017364 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0001736A 6600                       		bne.s	loc_160D6
0001736C 7200                       		moveq	#0,d1
0001736E 1228 0019                  		move.b	$19(a0),d1
00017372 4EB9 0000 836A             		jsr	(PlatformObject).l
00017378 6000 9484                  		bra.w	MarkObjGone
0001737C                            ; ===========================================================================
0001737C                            
0001737C                            loc_160D6:
0001737C 7200                       		moveq	#0,d1
0001737E 1228 0019                  		move.b	$19(a0),d1
00017382 4EB9 0000 84DE             		jsr	(ExitPlatform).l
00017388 3428 0008                  		move.w	8(a0),d2
0001738C 4EB9 0000 8A48             		jsr	(MvSonicOnPtfm2).l
00017392 6000 946A                  		bra.w	MarkObjGone
00017396                            ; ===========================================================================
00017396                            
00017396                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00017396 0828 0003 0022             		btst	#3,$22(a0)
0001739C 6700                       		beq.s	Obj6C_Display
0001739E 43F8 D000                  		lea	($FFFFD000).w,a1
000173A2 08A9 0003 0022             		bclr	#3,$22(a1)
000173A8 08A8 0003 0022             		bclr	#3,$22(a0)
000173AE 117C 0002 0024             		move.b	#2,$24(a0)
000173B4 4228 0025                  		clr.b	$25(a0)
000173B8                            
000173B8                            Obj6C_Display:
000173B8 6000 9444                  		bra.w	MarkObjGone
000173BC                            ; ===========================================================================
000173BC                            Ani_obj6C:
000173BC                            	include "_anim\obj6C.asm"
000173BC                            ; ---------------------------------------------------------------------------
000173BC                            ; Animation script - vanishing platforms (SBZ)
000173BC                            ; ---------------------------------------------------------------------------
000173BC 0000                       		dc.w byte_1611A-Ani_obj6C
000173BE 0000                       		dc.w byte_16122-Ani_obj6C
000173C0 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
000173C8 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
000173D0                            		even
000173D0                            		even
000173D0                            
000173D0                            ; ---------------------------------------------------------------------------
000173D0                            ; Sprite mappings - vanishing platforms	(SBZ)
000173D0                            ; ---------------------------------------------------------------------------
000173D0                            Map_obj6C:
000173D0                            	include "_maps\obj6C.asm"
000173D0                            ; ---------------------------------------------------------------------------
000173D0                            ; Sprite mappings - vanishing platforms	(SBZ)
000173D0                            ; ---------------------------------------------------------------------------
000173D0 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
000173D4 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
000173D8 01                         byte_16132:	dc.b 1
000173D9 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
000173DE 01                         byte_16138:	dc.b 1
000173DF F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
000173E4 01                         byte_1613E:	dc.b 1
000173E5 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
000173EA 00                         byte_16144:	dc.b 0
000173EC 00                         		even
000173EC 00                         		even
000173EC                            
000173EC                            ; ===========================================================================
000173EC                            ; ---------------------------------------------------------------------------
000173EC                            ; Object 6E - electrocution orbs (SBZ)
000173EC                            ; ---------------------------------------------------------------------------
000173EC                            
000173EC                            Obj6E:					; XREF: Obj_Index
000173EC 7000                       		moveq	#0,d0
000173EE 1028 0024                  		move.b	$24(a0),d0
000173F2 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
000173F6 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
000173FA                            ; ===========================================================================
000173FA 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
000173FC 0000                       		dc.w Obj6E_Shock-Obj6E_Index
000173FE                            ; ===========================================================================
000173FE                            
000173FE                            Obj6E_Main:				; XREF: Obj6E_Index
000173FE 5428 0024                  		addq.b	#2,$24(a0)
00017402 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
0001740A 317C 047E 0002             		move.w	#$47E,2(a0)
00017410 0028 0004 0001             		ori.b	#4,1(a0)
00017416 117C 0028 0019             		move.b	#$28,$19(a0)
0001741C 7000                       		moveq	#0,d0
0001741E 1028 0028                  		move.b	$28(a0),d0	; read object type
00017422 E948                       		lsl.w	#4,d0		; multiply by $10
00017424 5340                       		subq.w	#1,d0
00017426 3140 0034                  		move.w	d0,$34(a0)
0001742A                            
0001742A                            Obj6E_Shock:				; XREF: Obj6E_Index
0001742A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001742E C068 0034                  		and.w	$34(a0),d0
00017432 6600                       		bne.s	Obj6E_Animate
00017434 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
0001743A 4A28 0001                  		tst.b	1(a0)
0001743E 6A00                       		bpl.s	Obj6E_Animate
00017440 303C 00B1                  		move.w	#$B1,d0
00017444 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play electricity sound
0001744A                            
0001744A                            Obj6E_Animate:
0001744A 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00017450 4EB9 0000 B7A4             		jsr	AnimateSprite
00017456 117C 0000 0020             		move.b	#0,$20(a0)
0001745C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00017462 6600                       		bne.s	Obj6E_Display	; if not, branch
00017464 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
0001746A                            
0001746A                            Obj6E_Display:
0001746A 6000 9392                  		bra.w	MarkObjGone
0001746E                            ; ===========================================================================
0001746E                            Ani_obj6E:
0001746E                            	include "_anim\obj6E.asm"
0001746E                            ; ---------------------------------------------------------------------------
0001746E                            ; Animation script - electrocution orbs (SBZ)
0001746E                            ; ---------------------------------------------------------------------------
0001746E 0000                       		dc.w byte_161CC-Ani_obj6E
00017470 0000                       		dc.w byte_161D0-Ani_obj6E
00017472 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00017476 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00017486                            		even
00017486                            		even
00017486                            
00017486                            ; ---------------------------------------------------------------------------
00017486                            ; Sprite mappings - electrocution orbs (SBZ)
00017486                            ; ---------------------------------------------------------------------------
00017486                            Map_obj6E:
00017486                            	include "_maps\obj6E.asm"
00017486                            Map_26ed:
00017486 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00017488 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
0001748A 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
0001748C 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
0001748E 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00017490 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00017492 01                         Map_26ed_C: 	dc.b $1
00017493 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00017498 02                         Map_26ed_12: 	dc.b $2
00017499 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
0001749E 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000174A3 06                         Map_26ed_1D: 	dc.b $6
000174A4 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000174A9 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000174AE F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
000174B3 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
000174B8 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
000174BD F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
000174C2 08                         Map_26ed_3C: 	dc.b $8
000174C3 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000174C8 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000174CD F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
000174D2 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
000174D7 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
000174DC F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
000174E1 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
000174E6 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
000174EB 06                         Map_26ed_65: 	dc.b $6
000174EC F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000174F1 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000174F6 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
000174FB F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00017500 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00017505 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
0001750A 04                         Map_26ed_84: 	dc.b $4
0001750B F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00017510 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00017515 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
0001751A F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00017520 00                         	even
00017520 00                         	even
00017520                            
00017520                            ; ===========================================================================
00017520                            ; ---------------------------------------------------------------------------
00017520                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00017520                            ; ---------------------------------------------------------------------------
00017520                            
00017520                            Obj6F:					; XREF: Obj_Index
00017520 7000                       		moveq	#0,d0
00017522 1028 0024                  		move.b	$24(a0),d0
00017526 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
0001752A 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
0001752E 3028 0030                  		move.w	$30(a0),d0
00017532 0240 FF80                  		andi.w	#$FF80,d0
00017536 3238 F700                  		move.w	($FFFFF700).w,d1
0001753A 0441 0080                  		subi.w	#$80,d1
0001753E 0241 FF80                  		andi.w	#$FF80,d1
00017542 9041                       		sub.w	d1,d0
00017544 0C40 0280                  		cmpi.w	#$280,d0
00017548 6200                       		bhi.s	loc_1629A
0001754A                            
0001754A                            Obj6F_Display:
0001754A 4EF9 0000 E756             		jmp	DisplaySprite
00017550                            ; ===========================================================================
00017550                            
00017550                            loc_1629A:
00017550 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00017556 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00017558 0C40 FF80                  		cmpi.w	#-$80,d0
0001755C 64EC                       		bcc.s	Obj6F_Display
0001755E                            
0001755E                            Obj6F_Act1or2:
0001755E 1028 002F                  		move.b	$2F(a0),d0
00017562 6A00                       		bpl.s	Obj6F_Delete
00017564 0240 007F                  		andi.w	#$7F,d0
00017568 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001756C 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00017572                            
00017572                            Obj6F_Delete:
00017572 4EF9 0000 E792             		jmp	DeleteObject
00017578                            ; ===========================================================================
00017578 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
0001757A 0000                       		dc.w loc_163D8-Obj6F_Index
0001757C                            ; ===========================================================================
0001757C                            
0001757C                            Obj6F_Main:				; XREF: Obj6F_Index
0001757C 1028 0028                  		move.b	$28(a0),d0
00017580 6B00 0000                  		bmi.w	loc_16380
00017584 5428 0024                  		addq.b	#2,$24(a0)
00017588 217C 0001 6BE0 0004        		move.l	#Map_obj69a,4(a0)
00017590 317C 04DF 0002             		move.w	#$4DF,2(a0)
00017596 117C 0010 0019             		move.b	#$10,$19(a0)
0001759C 0028 0004 0001             		ori.b	#4,1(a0)
000175A2 117C 0004 0018             		move.b	#4,$18(a0)
000175A8 7000                       		moveq	#0,d0
000175AA 1028 0028                  		move.b	$28(a0),d0
000175AE 3200                       		move.w	d0,d1
000175B0 E648                       		lsr.w	#3,d0
000175B2 0240 001E                  		andi.w	#$1E,d0
000175B6 45FA 0000                  		lea	off_164A6(pc),a2
000175BA D4F2 0000                  		adda.w	(a2,d0.w),a2
000175BE 315A 0038                  		move.w	(a2)+,$38(a0)
000175C2 315A 0030                  		move.w	(a2)+,$30(a0)
000175C6 214A 003C                  		move.l	a2,$3C(a0)
000175CA 0241 000F                  		andi.w	#$F,d1
000175CE E549                       		lsl.w	#2,d1
000175D0 1141 0038                  		move.b	d1,$38(a0)
000175D4 117C 0004 003A             		move.b	#4,$3A(a0)
000175DA 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000175DE 6700                       		beq.s	loc_16356
000175E0 117C 0001 003B             		move.b	#1,$3B(a0)
000175E6 4428 003A                  		neg.b	$3A(a0)
000175EA 7200                       		moveq	#0,d1
000175EC 1228 0038                  		move.b	$38(a0),d1
000175F0 D228 003A                  		add.b	$3A(a0),d1
000175F4 B228 0039                  		cmp.b	$39(a0),d1
000175F8 6500                       		bcs.s	loc_16352
000175FA 1001                       		move.b	d1,d0
000175FC 7200                       		moveq	#0,d1
000175FE 4A00                       		tst.b	d0
00017600 6A00                       		bpl.s	loc_16352
00017602 1228 0039                  		move.b	$39(a0),d1
00017606 5901                       		subq.b	#4,d1
00017608                            
00017608                            loc_16352:
00017608 1141 0038                  		move.b	d1,$38(a0)
0001760C                            
0001760C                            loc_16356:
0001760C 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00017612 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00017618 4A41                       		tst.w	d1
0001761A 6600                       		bne.s	loc_1636C
0001761C 117C 0001 001C             		move.b	#1,$1C(a0)
00017622                            
00017622                            loc_1636C:
00017622 0C41 0008                  		cmpi.w	#8,d1
00017626 6600                       		bne.s	loc_16378
00017628 117C 0000 001C             		move.b	#0,$1C(a0)
0001762E                            
0001762E                            loc_16378:
0001762E 6100 C068                  		bsr.w	Obj63_ChangeDir
00017632 6000 0000                  		bra.w	loc_163D8
00017636                            ; ===========================================================================
00017636                            
00017636                            loc_16380:				; XREF: Obj6F_Main
00017636 1140 002F                  		move.b	d0,$2F(a0)
0001763A 0240 007F                  		andi.w	#$7F,d0
0001763E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00017642 08F2 0000 0000             		bset	#0,(a2,d0.w)
00017648 6700                       		beq.s	loc_1639A
0001764A 4EF9 0000 E792             		jmp	DeleteObject
00017650                            ; ===========================================================================
00017650                            
00017650                            loc_1639A:
00017650 D040                       		add.w	d0,d0
00017652 0240 001E                  		andi.w	#$1E,d0
00017656 45F9 0000 0000             		lea	(ObjPos_SBZ1pf_Index).l,a2
0001765C D4F2 0000                  		adda.w	(a2,d0.w),a2
00017660 321A                       		move.w	(a2)+,d1
00017662 2248                       		movea.l	a0,a1
00017664 6000                       		bra.s	Obj6F_LoadPform
00017666                            ; ===========================================================================
00017666                            
00017666                            Obj6F_Loop:
00017666 4EB9 0000 EBDC             		jsr	SingleObjLoad
0001766C 6600                       		bne.s	loc_163D0
0001766E                            
0001766E                            Obj6F_LoadPform:			; XREF: loc_1639A
0001766E 12BC 006F                  		move.b	#$6F,0(a1)
00017672 335A 0008                  		move.w	(a2)+,8(a1)
00017676 335A 000C                  		move.w	(a2)+,$C(a1)
0001767A 301A                       		move.w	(a2)+,d0
0001767C 1340 0028                  		move.b	d0,$28(a1)
00017680                            
00017680                            loc_163D0:
00017680 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00017684                            
00017684 588F                       		addq.l	#4,sp
00017686 4E75                       		rts	
00017688                            ; ===========================================================================
00017688                            
00017688                            loc_163D8:				; XREF: Obj6F_Index
00017688 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
0001768E 4EB9 0000 B7A4             		jsr	AnimateSprite
00017694 4A28 001A                  		tst.b	$1A(a0)
00017698 6600                       		bne.s	loc_16404
0001769A 3F28 0008                  		move.w	8(a0),-(sp)
0001769E 6100 0000                  		bsr.w	loc_16424
000176A2 323C 001B                  		move.w	#$1B,d1
000176A6 343C 0007                  		move.w	#7,d2
000176AA 3602                       		move.w	d2,d3
000176AC 5243                       		addq.w	#1,d3
000176AE 381F                       		move.w	(sp)+,d4
000176B0 6000 9474                  		bra.w	SolidObject
000176B4                            ; ===========================================================================
000176B4                            
000176B4                            loc_16404:
000176B4 0828 0003 0022             		btst	#3,$22(a0)
000176BA 6700                       		beq.s	loc_16420
000176BC 43F8 D000                  		lea	($FFFFD000).w,a1
000176C0 08A9 0003 0022             		bclr	#3,$22(a1)
000176C6 08A8 0003 0022             		bclr	#3,$22(a0)
000176CC 4228 0025                  		clr.b	$25(a0)
000176D0                            
000176D0                            loc_16420:
000176D0 6000 0002                  		bra.w	*+4
000176D4                            
000176D4                            loc_16424:
000176D4 3028 0008                  		move.w	8(a0),d0
000176D8 B068 0034                  		cmp.w	$34(a0),d0
000176DC 6600                       		bne.s	loc_16484
000176DE 3028 000C                  		move.w	$C(a0),d0
000176E2 B068 0036                  		cmp.w	$36(a0),d0
000176E6 6600                       		bne.s	loc_16484
000176E8 7200                       		moveq	#0,d1
000176EA 1228 0038                  		move.b	$38(a0),d1
000176EE D228 003A                  		add.b	$3A(a0),d1
000176F2 B228 0039                  		cmp.b	$39(a0),d1
000176F6 6500                       		bcs.s	loc_16456
000176F8 1001                       		move.b	d1,d0
000176FA 7200                       		moveq	#0,d1
000176FC 4A00                       		tst.b	d0
000176FE 6A00                       		bpl.s	loc_16456
00017700 1228 0039                  		move.b	$39(a0),d1
00017704 5901                       		subq.b	#4,d1
00017706                            
00017706                            loc_16456:
00017706 1141 0038                  		move.b	d1,$38(a0)
0001770A 2268 003C                  		movea.l	$3C(a0),a1
0001770E 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00017714 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001771A 4A41                       		tst.w	d1
0001771C 6600                       		bne.s	loc_16474
0001771E 117C 0001 001C             		move.b	#1,$1C(a0)
00017724                            
00017724                            loc_16474:
00017724 0C41 0008                  		cmpi.w	#8,d1
00017728 6600                       		bne.s	loc_16480
0001772A 117C 0000 001C             		move.b	#0,$1C(a0)
00017730                            
00017730                            loc_16480:
00017730 6100 BF66                  		bsr.w	Obj63_ChangeDir
00017734                            
00017734                            loc_16484:
00017734 4EF9 0000 E730             		jmp	SpeedToPos
0001773A                            ; ===========================================================================
0001773A                            Ani_obj6F:
0001773A                            	include "_anim\obj6F.asm"
0001773A                            ; ---------------------------------------------------------------------------
0001773A                            ; Animation script - platform on conveyor belt (SBZ)
0001773A                            ; ---------------------------------------------------------------------------
0001773A 0000                       		dc.w byte_1648E-Ani_obj6F
0001773C 0000                       		dc.w byte_164A2-Ani_obj6F
0001773E 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001774B 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00017752 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00017756 00                         		even
00017756 00                         		even
00017756                            
00017756 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
0001775C 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00017762 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00017776 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001778A 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
0001779E 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
000177B2 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
000177C6 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
000177DA                            ; ===========================================================================
000177DA                            ; ---------------------------------------------------------------------------
000177DA                            ; Object 70 - large girder block (SBZ)
000177DA                            ; ---------------------------------------------------------------------------
000177DA                            
000177DA                            Obj70:					; XREF: Obj_Index
000177DA 7000                       		moveq	#0,d0
000177DC 1028 0024                  		move.b	$24(a0),d0
000177E0 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
000177E4 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
000177E8                            ; ===========================================================================
000177E8 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
000177EA 0000                       		dc.w Obj70_Action-Obj70_Index
000177EC                            ; ===========================================================================
000177EC                            
000177EC                            Obj70_Main:				; XREF: Obj70_Index
000177EC 5428 0024                  		addq.b	#2,$24(a0)
000177F0 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
000177F8 317C 42F0 0002             		move.w	#$42F0,2(a0)
000177FE 0028 0004 0001             		ori.b	#4,1(a0)
00017804 117C 0004 0018             		move.b	#4,$18(a0)
0001780A 117C 0060 0019             		move.b	#$60,$19(a0)
00017810 117C 0018 0016             		move.b	#$18,$16(a0)
00017816 3168 0008 0032             		move.w	8(a0),$32(a0)
0001781C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00017822 6100 0000                  		bsr.w	Obj70_Move2
00017826                            
00017826                            Obj70_Action:				; XREF: Obj70_Index
00017826 3F28 0008                  		move.w	8(a0),-(sp)
0001782A 4A68 003A                  		tst.w	$3A(a0)
0001782E 6700                       		beq.s	Obj70_Move
00017830 5368 003A                  		subq.w	#1,$3A(a0)
00017834 6600                       		bne.s	Obj70_Solid
00017836                            
00017836                            Obj70_Move:
00017836 4EB9 0000 E730             		jsr	SpeedToPos
0001783C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00017840 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00017842 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00017846                            
00017846                            Obj70_Solid:
00017846 381F                       		move.w	(sp)+,d4
00017848 4A28 0001                  		tst.b	1(a0)
0001784C 6A00                       		bpl.s	Obj70_ChkDel
0001784E 7200                       		moveq	#0,d1
00017850 1228 0019                  		move.b	$19(a0),d1
00017854 0641 000B                  		addi.w	#$B,d1
00017858 7400                       		moveq	#0,d2
0001785A 1428 0016                  		move.b	$16(a0),d2
0001785E 3602                       		move.w	d2,d3
00017860 5243                       		addq.w	#1,d3
00017862 6100 92C2                  		bsr.w	SolidObject
00017866                            
00017866                            Obj70_ChkDel:
00017866 3028 0032                  		move.w	$32(a0),d0
0001786A 0240 FF80                  		andi.w	#$FF80,d0
0001786E 3238 F700                  		move.w	($FFFFF700).w,d1
00017872 0441 0080                  		subi.w	#$80,d1
00017876 0241 FF80                  		andi.w	#$FF80,d1
0001787A 9041                       		sub.w	d1,d0
0001787C 0C40 0280                  		cmpi.w	#$280,d0
00017880 6200                       		bhi.s	Obj70_Delete
00017882 4EF9 0000 E756             		jmp	DisplaySprite
00017888                            ; ===========================================================================
00017888                            
00017888                            Obj70_Delete:
00017888 4EF9 0000 E792             		jmp	DeleteObject
0001788E                            ; ===========================================================================
0001788E                            
0001788E                            Obj70_Move2:				; XREF: Obj70_Main
0001788E 1028 0038                  		move.b	$38(a0),d0
00017892 0240 0018                  		andi.w	#$18,d0
00017896 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
0001789C 43F1 0000                  		lea	(a1,d0.w),a1
000178A0 3159 0010                  		move.w	(a1)+,$10(a0)
000178A4 3159 0012                  		move.w	(a1)+,$12(a0)
000178A8 3159 0034                  		move.w	(a1)+,$34(a0)
000178AC 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
000178B0 317C 0007 003A             		move.w	#7,$3A(a0)
000178B6 4E75                       		rts	
000178B8                            ; ===========================================================================
000178B8 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
000178C0 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
000178C8 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
000178D0 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
000178D8                            ; ---------------------------------------------------------------------------
000178D8                            ; Sprite mappings - large girder block (SBZ)
000178D8                            ; ---------------------------------------------------------------------------
000178D8                            Map_obj70:
000178D8                            	include "_maps\obj70.asm"
000178D8                            ; ---------------------------------------------------------------------------
000178D8                            ; Sprite mappings - large girder block (SBZ)
000178D8                            ; ---------------------------------------------------------------------------
000178D8 0000                       		dc.w byte_1662A-Map_obj70
000178DA 0C                         byte_1662A:	dc.b $C
000178DB E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
000178E0 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
000178E5 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
000178EA 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
000178EF E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
000178F4 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
000178F9 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
000178FE 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00017903 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00017908 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
0001790D E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00017912 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00017918 00                         		even
00017918 00                         		even
00017918                            
00017918                            ; ===========================================================================
00017918                            ; ---------------------------------------------------------------------------
00017918                            ; Object 72 - teleporter (SBZ)
00017918                            ; ---------------------------------------------------------------------------
00017918                            
00017918                            Obj72:					; XREF: Obj_Index
00017918 7000                       		moveq	#0,d0
0001791A 1028 0024                  		move.b	$24(a0),d0
0001791E 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00017922 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00017926 3028 0008                  		move.w	8(a0),d0
0001792A 0240 FF80                  		andi.w	#$FF80,d0
0001792E 3238 F700                  		move.w	($FFFFF700).w,d1
00017932 0441 0080                  		subi.w	#$80,d1
00017936 0241 FF80                  		andi.w	#$FF80,d1
0001793A 9041                       		sub.w	d1,d0
0001793C 0C40 0280                  		cmpi.w	#$280,d0
00017940 6200                       		bhi.s	Obj72_Delete
00017942 4E75                       		rts	
00017944                            ; ===========================================================================
00017944                            
00017944                            Obj72_Delete:
00017944 4EF9 0000 E792             		jmp	DeleteObject
0001794A                            ; ===========================================================================
0001794A 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
0001794C 0000                       		dc.w loc_166C8-Obj72_Index
0001794E 0000                       		dc.w loc_1675E-Obj72_Index
00017950 0000                       		dc.w loc_16798-Obj72_Index
00017952                            ; ===========================================================================
00017952                            
00017952                            Obj72_Main:				; XREF: Obj72_Index
00017952 5428 0024                  		addq.b	#2,$24(a0)
00017956 1028 0028                  		move.b	$28(a0),d0
0001795A D040                       		add.w	d0,d0
0001795C 0240 001E                  		andi.w	#$1E,d0
00017960 45FA 0000                  		lea	Obj72_Data(pc),a2
00017964 D4F2 0000                  		adda.w	(a2,d0.w),a2
00017968 315A 003A                  		move.w	(a2)+,$3A(a0)
0001796C 214A 003C                  		move.l	a2,$3C(a0)
00017970 315A 0036                  		move.w	(a2)+,$36(a0)
00017974 315A 0038                  		move.w	(a2)+,$38(a0)
00017978                            
00017978                            loc_166C8:				; XREF: Obj72_Index
00017978 43F8 D000                  		lea	($FFFFD000).w,a1
0001797C 3029 0008                  		move.w	8(a1),d0
00017980 9068 0008                  		sub.w	8(a0),d0
00017984 0828 0000 0022             		btst	#0,$22(a0)
0001798A 6700                       		beq.s	loc_166E0
0001798C 0640 000F                  		addi.w	#$F,d0
00017990                            
00017990                            loc_166E0:
00017990 0C40 0010                  		cmpi.w	#$10,d0
00017994 6400                       		bcc.s	locret_1675C
00017996 3229 000C                  		move.w	$C(a1),d1
0001799A 9268 000C                  		sub.w	$C(a0),d1
0001799E 0641 0020                  		addi.w	#$20,d1
000179A2 0C41 0040                  		cmpi.w	#$40,d1
000179A6 6400                       		bcc.s	locret_1675C
000179A8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000179AC 6600                       		bne.s	locret_1675C
000179AE 0C28 0007 0028             		cmpi.b	#7,$28(a0)
000179B4 6600                       		bne.s	loc_1670E
000179B6 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
000179BC 6500                       		bcs.s	locret_1675C
000179BE                            
000179BE                            loc_1670E:
000179BE 5428 0024                  		addq.b	#2,$24(a0)
000179C2 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000179C8 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
000179CE 337C 0800 0014             		move.w	#$800,$14(a1)
000179D4 337C 0000 0010             		move.w	#0,$10(a1)
000179DA 337C 0000 0012             		move.w	#0,$12(a1)
000179E0 08A8 0005 0022             		bclr	#5,$22(a0)
000179E6 08A9 0005 0022             		bclr	#5,$22(a1)
000179EC 08E9 0001 0022             		bset	#1,$22(a1)
000179F2 3368 0008 0008             		move.w	8(a0),8(a1)
000179F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000179FE 4228 0032                  		clr.b	$32(a0)
00017A02 303C 00BE                  		move.w	#$BE,d0
00017A06 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00017A0C                            
00017A0C                            locret_1675C:
00017A0C 4E75                       		rts	
00017A0E                            ; ===========================================================================
00017A0E                            
00017A0E                            loc_1675E:				; XREF: Obj72_Index
00017A0E 43F8 D000                  		lea	($FFFFD000).w,a1
00017A12 1028 0032                  		move.b	$32(a0),d0
00017A16 5428 0032                  		addq.b	#2,$32(a0)
00017A1A 4EB9 0000 3416             		jsr	(CalcSine).l
00017A20 EA40                       		asr.w	#5,d0
00017A22 3428 000C                  		move.w	$C(a0),d2
00017A26 9440                       		sub.w	d0,d2
00017A28 3342 000C                  		move.w	d2,$C(a1)
00017A2C 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00017A32 6600                       		bne.s	locret_16796
00017A34 6100 0000                  		bsr.w	sub_1681C
00017A38 5428 0024                  		addq.b	#2,$24(a0)
00017A3C 303C 00BC                  		move.w	#$BC,d0
00017A40 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play teleport sound
00017A46                            
00017A46                            locret_16796:
00017A46 4E75                       		rts	
00017A48                            ; ===========================================================================
00017A48                            
00017A48                            loc_16798:				; XREF: Obj72_Index
00017A48 588F                       		addq.l	#4,sp
00017A4A 43F8 D000                  		lea	($FFFFD000).w,a1
00017A4E 5328 002E                  		subq.b	#1,$2E(a0)
00017A52 6A00                       		bpl.s	loc_167DA
00017A54 3368 0036 0008             		move.w	$36(a0),8(a1)
00017A5A 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017A60 7200                       		moveq	#0,d1
00017A62 1228 003A                  		move.b	$3A(a0),d1
00017A66 5801                       		addq.b	#4,d1
00017A68 B228 003B                  		cmp.b	$3B(a0),d1
00017A6C 6500                       		bcs.s	loc_167C2
00017A6E 7200                       		moveq	#0,d1
00017A70 6000                       		bra.s	loc_16800
00017A72                            ; ===========================================================================
00017A72                            
00017A72                            loc_167C2:
00017A72 1141 003A                  		move.b	d1,$3A(a0)
00017A76 2468 003C                  		movea.l	$3C(a0),a2
00017A7A 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00017A80 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00017A86 6000 0000                  		bra.w	sub_1681C
00017A8A                            ; ===========================================================================
00017A8A                            
00017A8A                            loc_167DA:
00017A8A 2429 0008                  		move.l	8(a1),d2
00017A8E 2629 000C                  		move.l	$C(a1),d3
00017A92 3029 0010                  		move.w	$10(a1),d0
00017A96 48C0                       		ext.l	d0
00017A98 E180                       		asl.l	#8,d0
00017A9A D480                       		add.l	d0,d2
00017A9C 3029 0012                  		move.w	$12(a1),d0
00017AA0 48C0                       		ext.l	d0
00017AA2 E180                       		asl.l	#8,d0
00017AA4 D680                       		add.l	d0,d3
00017AA6 2342 0008                  		move.l	d2,8(a1)
00017AAA 2343 000C                  		move.l	d3,$C(a1)
00017AAE 4E75                       		rts	
00017AB0                            ; ===========================================================================
00017AB0                            
00017AB0                            loc_16800:
00017AB0 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00017AB6 4228 0024                  		clr.b	$24(a0)
00017ABA 4238 F7C8                  		clr.b	($FFFFF7C8).w
00017ABE 337C 0000 0010             		move.w	#0,$10(a1)
00017AC4 337C 0200 0012             		move.w	#$200,$12(a1)
00017ACA 4E75                       		rts	
00017ACC                            
00017ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017ACC                            
00017ACC                            
00017ACC                            sub_1681C:
00017ACC 7000                       		moveq	#0,d0
00017ACE 343C 1000                  		move.w	#$1000,d2
00017AD2 3028 0036                  		move.w	$36(a0),d0
00017AD6 9069 0008                  		sub.w	8(a1),d0
00017ADA 6C00                       		bge.s	loc_16830
00017ADC 4440                       		neg.w	d0
00017ADE 4442                       		neg.w	d2
00017AE0                            
00017AE0                            loc_16830:
00017AE0 7200                       		moveq	#0,d1
00017AE2 363C 1000                  		move.w	#$1000,d3
00017AE6 3228 0038                  		move.w	$38(a0),d1
00017AEA 9269 000C                  		sub.w	$C(a1),d1
00017AEE 6C00                       		bge.s	loc_16844
00017AF0 4441                       		neg.w	d1
00017AF2 4443                       		neg.w	d3
00017AF4                            
00017AF4                            loc_16844:
00017AF4 B240                       		cmp.w	d0,d1
00017AF6 6500                       		bcs.s	loc_1687A
00017AF8 7200                       		moveq	#0,d1
00017AFA 3228 0038                  		move.w	$38(a0),d1
00017AFE 9269 000C                  		sub.w	$C(a1),d1
00017B02 4841                       		swap	d1
00017B04 83C3                       		divs.w	d3,d1
00017B06 7000                       		moveq	#0,d0
00017B08 3028 0036                  		move.w	$36(a0),d0
00017B0C 9069 0008                  		sub.w	8(a1),d0
00017B10 6700                       		beq.s	loc_16866
00017B12 4840                       		swap	d0
00017B14 81C1                       		divs.w	d1,d0
00017B16                            
00017B16                            loc_16866:
00017B16 3340 0010                  		move.w	d0,$10(a1)
00017B1A 3343 0012                  		move.w	d3,$12(a1)
00017B1E 4A41                       		tst.w	d1
00017B20 6A00                       		bpl.s	loc_16874
00017B22 4441                       		neg.w	d1
00017B24                            
00017B24                            loc_16874:
00017B24 3141 002E                  		move.w	d1,$2E(a0)
00017B28 4E75                       		rts	
00017B2A                            ; ===========================================================================
00017B2A                            
00017B2A                            loc_1687A:
00017B2A 7000                       		moveq	#0,d0
00017B2C 3028 0036                  		move.w	$36(a0),d0
00017B30 9069 0008                  		sub.w	8(a1),d0
00017B34 4840                       		swap	d0
00017B36 81C2                       		divs.w	d2,d0
00017B38 7200                       		moveq	#0,d1
00017B3A 3228 0038                  		move.w	$38(a0),d1
00017B3E 9269 000C                  		sub.w	$C(a1),d1
00017B42 6700                       		beq.s	loc_16898
00017B44 4841                       		swap	d1
00017B46 83C0                       		divs.w	d0,d1
00017B48                            
00017B48                            loc_16898:
00017B48 3341 0012                  		move.w	d1,$12(a1)
00017B4C 3342 0010                  		move.w	d2,$10(a1)
00017B50 4A40                       		tst.w	d0
00017B52 6A00                       		bpl.s	loc_168A6
00017B54 4440                       		neg.w	d0
00017B56                            
00017B56                            loc_168A6:
00017B56 3140 002E                  		move.w	d0,$2E(a0)
00017B5A 4E75                       		rts	
00017B5C                            ; End of function sub_1681C
00017B5C                            
00017B5C                            ; ===========================================================================
00017B5C 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00017B62 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00017B68 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00017B6C 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00017B72 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00017B78 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00017B7E 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00017B84 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00017B8A 0884 0298 0894             		dc.w $884, $298, $894
00017B90 0270 0894 0190             		dc.w $270, $894, $190
00017B96 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00017B9C 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00017BA2 1184 0498 1158             		dc.w $1184, $498, $1158
00017BA8 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00017BAE 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00017BB4 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00017BBA 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00017BC0 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017BC6 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00017BCC FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017BD2 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017BD8 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00017BDE 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017BE4                            ; ===========================================================================
00017BE4                            ; ---------------------------------------------------------------------------
00017BE4                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017BE4                            ; ---------------------------------------------------------------------------
00017BE4                            
00017BE4                            Obj78:					; XREF: Obj_Index
00017BE4 7000                       		moveq	#0,d0
00017BE6 1028 0024                  		move.b	$24(a0),d0
00017BEA 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00017BEE 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00017BF2                            ; ===========================================================================
00017BF2 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00017BF4 0000                       		dc.w Obj78_Action-Obj78_Index
00017BF6 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017BF8 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00017BFA 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017BFC 0000                       		dc.w Obj78_Delete-Obj78_Index
00017BFE 0000                       		dc.w loc_16CC0-Obj78_Index
00017C00                            ; ===========================================================================
00017C00                            
00017C00                            locret_16950:
00017C00 4E75                       		rts	
00017C02                            ; ===========================================================================
00017C02                            
00017C02                            Obj78_Main:				; XREF: Obj78_Index
00017C02 117C 0007 0016             		move.b	#7,$16(a0)
00017C08 117C 0008 0017             		move.b	#8,$17(a0)
00017C0E 4EB9 0000 E6BE             		jsr	ObjectFall
00017C14 4EBA E4AA                  		jsr	ObjHitFloor
00017C18 4A41                       		tst.w	d1
00017C1A 6AE4                       		bpl.s	locret_16950
00017C1C D368 000C                  		add.w	d1,$C(a0)
00017C20 4268 0012                  		clr.w	$12(a0)
00017C24 5428 0024                  		addq.b	#2,$24(a0)
00017C28 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00017C30 317C 22B0 0002             		move.w	#$22B0,2(a0)
00017C36 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00017C3C 6700                       		beq.s	loc_16996
00017C3E 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00017C44                            
00017C44                            loc_16996:
00017C44 0228 0003 0001             		andi.b	#3,1(a0)
00017C4A 0028 0004 0001             		ori.b	#4,1(a0)
00017C50 1168 0001 0022             		move.b	1(a0),$22(a0)
00017C56 117C 0004 0018             		move.b	#4,$18(a0)
00017C5C 117C 0008 0019             		move.b	#8,$19(a0)
00017C62 117C 000B 0020             		move.b	#$B,$20(a0)
00017C68 3428 0008                  		move.w	8(a0),d2
00017C6C 7A0C                       		moveq	#$C,d5
00017C6E 0828 0000 0022             		btst	#0,$22(a0)
00017C74 6700                       		beq.s	loc_169CA
00017C76 4445                       		neg.w	d5
00017C78                            
00017C78                            loc_169CA:
00017C78 1C3C 0004                  		move.b	#4,d6
00017C7C 7600                       		moveq	#0,d3
00017C7E 7804                       		moveq	#4,d4
00017C80 2448                       		movea.l	a0,a2
00017C82 7202                       		moveq	#2,d1
00017C84                            
00017C84                            Obj78_LoadBody:
00017C84 4EB9 0000 EBF2             		jsr	SingleObjLoad2
00017C8A 6600                       		bne.s	Obj78_QuitLoad
00017C8C 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00017C90 1346 0024                  		move.b	d6,$24(a1)
00017C94 5406                       		addq.b	#2,d6
00017C96 2368 0004 0004             		move.l	4(a0),4(a1)
00017C9C 3368 0002 0002             		move.w	2(a0),2(a1)
00017CA2 137C 0005 0018             		move.b	#5,$18(a1)
00017CA8 137C 0008 0019             		move.b	#8,$19(a1)
00017CAE 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017CB4 D445                       		add.w	d5,d2
00017CB6 3342 0008                  		move.w	d2,8(a1)
00017CBA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017CC0 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017CC6 1368 0022 0001             		move.b	$22(a0),1(a1)
00017CCC 137C 0008 001A             		move.b	#8,$1A(a1)
00017CD2 234A 003C                  		move.l	a2,$3C(a1)
00017CD6 1344 003C                  		move.b	d4,$3C(a1)
00017CDA 5804                       		addq.b	#4,d4
00017CDC 2449                       		movea.l	a1,a2
00017CDE                            
00017CDE                            Obj78_QuitLoad:
00017CDE 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017CE2                            
00017CE2 117C 0007 002A             		move.b	#7,$2A(a0)
00017CE8 4228 003C                  		clr.b	$3C(a0)
00017CEC                            
00017CEC                            Obj78_Action:				; XREF: Obj78_Index
00017CEC 4A28 0022                  		tst.b	$22(a0)
00017CF0 6B00 0000                  		bmi.w	loc_16C96
00017CF4 7000                       		moveq	#0,d0
00017CF6 1028 0025                  		move.b	$25(a0),d0
00017CFA 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00017CFE 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00017D02 1228 002B                  		move.b	$2B(a0),d1
00017D06 6A00                       		bpl.s	Obj78_Display
00017D08 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017D0E 1028 0026                  		move.b	$26(a0),d0
00017D12 0240 007F                  		andi.w	#$7F,d0
00017D16 5828 0026                  		addq.b	#4,$26(a0)
00017D1A 1031 0000                  		move.b	(a1,d0.w),d0
00017D1E 6A00                       		bpl.s	Obj78_AniHead
00017D20 08A8 0007 002B             		bclr	#7,$2B(a0)
00017D26 6000                       		bra.s	Obj78_Display
00017D28                            ; ===========================================================================
00017D28                            
00017D28                            Obj78_AniHead:
00017D28 0201 0010                  		andi.b	#$10,d1
00017D2C D001                       		add.b	d1,d0
00017D2E 1140 001A                  		move.b	d0,$1A(a0)
00017D32                            
00017D32                            Obj78_Display:
00017D32 3028 0008                  		move.w	8(a0),d0
00017D36 0240 FF80                  		andi.w	#$FF80,d0
00017D3A 3238 F700                  		move.w	($FFFFF700).w,d1
00017D3E 0441 0080                  		subi.w	#$80,d1
00017D42 0241 FF80                  		andi.w	#$FF80,d1
00017D46 9041                       		sub.w	d1,d0
00017D48 0C40 0280                  		cmpi.w	#$280,d0
00017D4C 6200 0000                  		bhi.w	Obj78_ChkGone
00017D50 4EF9 0000 E756             		jmp	DisplaySprite
00017D56                            ; ===========================================================================
00017D56                            
00017D56                            Obj78_ChkGone:
00017D56 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017D5A 7000                       		moveq	#0,d0
00017D5C 1028 0023                  		move.b	$23(a0),d0
00017D60 6700                       		beq.s	loc_16ABC
00017D62 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017D68                            
00017D68                            loc_16ABC:
00017D68 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00017D6E 4E75                       		rts	
00017D70                            ; ===========================================================================
00017D70                            
00017D70                            Obj78_Delete:				; XREF: Obj78_Index
00017D70 4EF9 0000 E792             		jmp	DeleteObject
00017D76                            ; ===========================================================================
00017D76 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00017D78 0000                       		dc.w loc_16B02-Obj78_Index2
00017D7A                            ; ===========================================================================
00017D7A                            
00017D7A                            Obj78_Move:				; XREF: Obj78_Index2
00017D7A 5328 002A                  		subq.b	#1,$2A(a0)
00017D7E 6B00                       		bmi.s	Obj78_Move2
00017D80 4E75                       		rts	
00017D82                            ; ===========================================================================
00017D82                            
00017D82                            Obj78_Move2:
00017D82 5428 0025                  		addq.b	#2,$25(a0)
00017D86 117C 0010 002A             		move.b	#$10,$2A(a0)
00017D8C 317C FF40 0010             		move.w	#-$C0,$10(a0)
00017D92 317C 0040 0014             		move.w	#$40,$14(a0)
00017D98 0868 0004 002B             		bchg	#4,$2B(a0)
00017D9E 6600                       		bne.s	loc_16AFC
00017DA0 4268 0010                  		clr.w	$10(a0)
00017DA4 4468 0014                  		neg.w	$14(a0)
00017DA8                            
00017DA8                            loc_16AFC:
00017DA8 08E8 0007 002B             		bset	#7,$2B(a0)
00017DAE                            
00017DAE                            loc_16B02:				; XREF: Obj78_Index2
00017DAE 5328 002A                  		subq.b	#1,$2A(a0)
00017DB2 6B00                       		bmi.s	loc_16B5E
00017DB4 2F28 0008                  		move.l	8(a0),-(sp)
00017DB8 2428 0008                  		move.l	8(a0),d2
00017DBC 3028 0010                  		move.w	$10(a0),d0
00017DC0 0828 0000 0022             		btst	#0,$22(a0)
00017DC6 6700                       		beq.s	loc_16B1E
00017DC8 4440                       		neg.w	d0
00017DCA                            
00017DCA                            loc_16B1E:
00017DCA 48C0                       		ext.l	d0
00017DCC E180                       		asl.l	#8,d0
00017DCE D480                       		add.l	d0,d2
00017DD0 2142 0008                  		move.l	d2,8(a0)
00017DD4 4EBA E2EA                  		jsr	ObjHitFloor
00017DD8 241F                       		move.l	(sp)+,d2
00017DDA 0C41 FFF8                  		cmpi.w	#-8,d1
00017DDE 6D00                       		blt.s	loc_16B70
00017DE0 0C41 000C                  		cmpi.w	#$C,d1
00017DE4 6C00                       		bge.s	loc_16B70
00017DE6 D368 000C                  		add.w	d1,$C(a0)
00017DEA 4842                       		swap	d2
00017DEC B468 0008                  		cmp.w	8(a0),d2
00017DF0 6700                       		beq.s	locret_16B5C
00017DF2 7000                       		moveq	#0,d0
00017DF4 1028 003C                  		move.b	$3C(a0),d0
00017DF8 5228 003C                  		addq.b	#1,$3C(a0)
00017DFC 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017E02 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017E06                            
00017E06                            locret_16B5C:
00017E06 4E75                       		rts	
00017E08                            ; ===========================================================================
00017E08                            
00017E08                            loc_16B5E:
00017E08 5528 0025                  		subq.b	#2,$25(a0)
00017E0C 117C 0007 002A             		move.b	#7,$2A(a0)
00017E12 317C 0000 0010             		move.w	#0,$10(a0)
00017E18 4E75                       		rts	
00017E1A                            ; ===========================================================================
00017E1A                            
00017E1A                            loc_16B70:
00017E1A 2142 0008                  		move.l	d2,8(a0)
00017E1E 0868 0000 0022             		bchg	#0,$22(a0)
00017E24 1168 0022 0001             		move.b	$22(a0),1(a0)
00017E2A 7000                       		moveq	#0,d0
00017E2C 1028 003C                  		move.b	$3C(a0),d0
00017E30 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00017E36 5228 003C                  		addq.b	#1,$3C(a0)
00017E3A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017E40 4E75                       		rts	
00017E42                            ; ===========================================================================
00017E42                            
00017E42                            Obj78_BodySeg2:				; XREF: Obj78_Index
00017E42 2268 003C                  		movea.l	$3C(a0),a1
00017E46 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017E4C 6A00                       		bpl.s	Obj78_BodySeg1
00017E4E 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017E54 1028 0026                  		move.b	$26(a0),d0
00017E58 0240 007F                  		andi.w	#$7F,d0
00017E5C 5828 0026                  		addq.b	#4,$26(a0)
00017E60 4A31 0004                  		tst.b	4(a1,d0.w)
00017E64 6A00                       		bpl.s	Obj78_AniBody
00017E66 5828 0026                  		addq.b	#4,$26(a0)
00017E6A                            
00017E6A                            Obj78_AniBody:
00017E6A 1031 0000                  		move.b	(a1,d0.w),d0
00017E6E 5000                       		addq.b	#8,d0
00017E70 1140 001A                  		move.b	d0,$1A(a0)
00017E74                            
00017E74                            Obj78_BodySeg1:				; XREF: Obj78_Index
00017E74 2268 003C                  		movea.l	$3C(a0),a1
00017E78 4A28 0022                  		tst.b	$22(a0)
00017E7C 6B00 0000                  		bmi.w	loc_16C90
00017E80 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017E86 1169 0025 0025             		move.b	$25(a1),$25(a0)
00017E8C 6700 0000                  		beq.w	loc_16C64
00017E90 3169 0014 0014             		move.w	$14(a1),$14(a0)
00017E96 3029 0010                  		move.w	$10(a1),d0
00017E9A D069 0014                  		add.w	$14(a1),d0
00017E9E 3140 0010                  		move.w	d0,$10(a0)
00017EA2 2428 0008                  		move.l	8(a0),d2
00017EA6 2602                       		move.l	d2,d3
00017EA8 3028 0010                  		move.w	$10(a0),d0
00017EAC 0828 0000 0022             		btst	#0,$22(a0)
00017EB2 6700                       		beq.s	loc_16C0C
00017EB4 4440                       		neg.w	d0
00017EB6                            
00017EB6                            loc_16C0C:
00017EB6 48C0                       		ext.l	d0
00017EB8 E180                       		asl.l	#8,d0
00017EBA D480                       		add.l	d0,d2
00017EBC 2142 0008                  		move.l	d2,8(a0)
00017EC0 4843                       		swap	d3
00017EC2 B668 0008                  		cmp.w	8(a0),d3
00017EC6 6700                       		beq.s	loc_16C64
00017EC8 7000                       		moveq	#0,d0
00017ECA 1028 003C                  		move.b	$3C(a0),d0
00017ECE 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017ED2 0C01 0080                  		cmpi.b	#-$80,d1
00017ED6 6600                       		bne.s	loc_16C50
00017ED8 4843                       		swap	d3
00017EDA 2143 0008                  		move.l	d3,8(a0)
00017EDE 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017EE2 0868 0000 0022             		bchg	#0,$22(a0)
00017EE8 1168 0022 0001             		move.b	$22(a0),1(a0)
00017EEE 5228 003C                  		addq.b	#1,$3C(a0)
00017EF2 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017EF8 6000                       		bra.s	loc_16C64
00017EFA                            ; ===========================================================================
00017EFA                            
00017EFA                            loc_16C50:
00017EFA 4881                       		ext.w	d1
00017EFC D368 000C                  		add.w	d1,$C(a0)
00017F00 5228 003C                  		addq.b	#1,$3C(a0)
00017F04 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017F0A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017F0E                            
00017F0E                            loc_16C64:
00017F0E 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00017F14 6700                       		beq.s	loc_16C90
00017F16 0C11 0027                  		cmpi.b	#$27,0(a1)
00017F1A 6700                       		beq.s	loc_16C7C
00017F1C 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00017F22 6600                       		bne.s	loc_16C82
00017F24                            
00017F24                            loc_16C7C:
00017F24 117C 000A 0024             		move.b	#$A,$24(a0)
00017F2A                            
00017F2A                            loc_16C82:
00017F2A 4EF9 0000 E756             		jmp	DisplaySprite
00017F30                            
00017F30                            ; ===========================================================================
00017F30 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017F38                            ; ===========================================================================
00017F38                            
00017F38                            loc_16C90:
00017F38 08E9 0007 0022             		bset	#7,$22(a1)
00017F3E                            
00017F3E                            loc_16C96:
00017F3E 7000                       		moveq	#0,d0
00017F40 1028 0024                  		move.b	$24(a0),d0
00017F44 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00017F48 0828 0000 0022             		btst	#0,$22(a0)
00017F4E 6700                       		beq.s	loc_16CAA
00017F50 4440                       		neg.w	d0
00017F52                            
00017F52                            loc_16CAA:
00017F52 3140 0010                  		move.w	d0,$10(a0)
00017F56 317C FC00 0012             		move.w	#-$400,$12(a0)
00017F5C 117C 000C 0024             		move.b	#$C,$24(a0)
00017F62 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00017F68                            
00017F68                            loc_16CC0:				; XREF: Obj78_Index
00017F68 4EB9 0000 E6BE             		jsr	ObjectFall
00017F6E 4A68 0012                  		tst.w	$12(a0)
00017F72 6B00                       		bmi.s	loc_16CE0
00017F74 4EBA E14A                  		jsr	ObjHitFloor
00017F78 4A41                       		tst.w	d1
00017F7A 6A00                       		bpl.s	loc_16CE0
00017F7C D368 000C                  		add.w	d1,$C(a0)
00017F80 317C FC00 0012             		move.w	#-$400,$12(a0)
00017F86                            
00017F86                            loc_16CE0:
00017F86 4A28 0001                  		tst.b	1(a0)
00017F8A 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00017F8E 4EF9 0000 E756             		jmp	DisplaySprite
00017F94                            ; ===========================================================================
00017F94                            Ani_obj78:
00017F94                            	include "_anim\obj78.asm"
00017F94                            ; ---------------------------------------------------------------------------
00017F94                            ; Animation script - Caterkiller enemy (uses non-standard format)
00017F94                            ; ---------------------------------------------------------------------------
00017F94 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00017FA4 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017FB4 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017FC4 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017FD4 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017FE4 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017FF4 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00018004 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00018014                            	even
00018014                            	even
00018014                            
00018014                            ; ---------------------------------------------------------------------------
00018014                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018014                            ; ---------------------------------------------------------------------------
00018014                            Map_obj78:
00018014                            	include "_maps\obj78.asm"
00018014                            ; ---------------------------------------------------------------------------
00018014                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00018014                            ; ---------------------------------------------------------------------------
00018014 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00018018 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
0001801C 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00018020 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00018024 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00018028 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
0001802C 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00018030 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00018034 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00018038 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
0001803C 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00018040 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00018044 01                         byte_16D9E:	dc.b 1
00018045 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
0001804A 01                         byte_16DA4:	dc.b 1
0001804B F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00018050 01                         byte_16DAA:	dc.b 1
00018051 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00018056 01                         byte_16DB0:	dc.b 1
00018057 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
0001805C 01                         byte_16DB6:	dc.b 1
0001805D EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00018062 01                         byte_16DBC:	dc.b 1
00018063 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00018068 01                         byte_16DC2:	dc.b 1
00018069 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001806E 01                         byte_16DC8:	dc.b 1
0001806F EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00018074 01                         byte_16DCE:	dc.b 1
00018075 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001807A 01                         byte_16DD4:	dc.b 1
0001807B F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00018080 01                         byte_16DDA:	dc.b 1
00018081 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00018086 01                         byte_16DE0:	dc.b 1
00018087 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001808C 01                         byte_16DE6:	dc.b 1
0001808D F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00018092 01                         byte_16DEC:	dc.b 1
00018093 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00018098 01                         byte_16DF2:	dc.b 1
00018099 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001809E 01                         byte_16DF8:	dc.b 1
0001809F F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000180A4 01                         byte_16DFE:	dc.b 1
000180A5 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000180AA 01                         byte_16E04:	dc.b 1
000180AB F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000180B0 01                         byte_16E0A:	dc.b 1
000180B1 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000180B6 01                         byte_16E10:	dc.b 1
000180B7 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000180BC 01                         byte_16E16:	dc.b 1
000180BD EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000180C2 01                         byte_16E1C:	dc.b 1
000180C3 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
000180C8 01                         byte_16E22:	dc.b 1
000180C9 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
000180CE 01                         byte_16E28:	dc.b 1
000180CF EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
000180D4                            		even
000180D4                            		even
000180D4                            
000180D4                            ; ===========================================================================
000180D4                            ; ---------------------------------------------------------------------------
000180D4                            ; Object 79 - lamppost
000180D4                            ; ---------------------------------------------------------------------------
000180D4                            
000180D4                            Obj79:					; XREF: Obj_Index
000180D4 7000                       		moveq	#0,d0
000180D6 1028 0024                  		move.b	$24(a0),d0
000180DA 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
000180DE 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
000180E2 4EFA 871A                  		jmp	MarkObjGone
000180E6                            ; ===========================================================================
000180E6 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
000180E8 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
000180EA 0000                       		dc.w Obj79_AfterHit-Obj79_Index
000180EC 0000                       		dc.w Obj79_Twirl-Obj79_Index
000180EE                            ; ===========================================================================
000180EE                            
000180EE                            Obj79_Main:				; XREF: Obj79_Index
000180EE 5428 0024                  		addq.b	#2,$24(a0)
000180F2 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
000180FA 317C 07A0 0002             		move.w	#$7A0,2(a0)
00018100 117C 0004 0001             		move.b	#4,1(a0)
00018106 117C 0008 0019             		move.b	#8,$19(a0)
0001810C 117C 0005 0018             		move.b	#5,$18(a0)
00018112 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018116 7000                       		moveq	#0,d0
00018118 1028 0023                  		move.b	$23(a0),d0
0001811C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00018122 0832 0000 0002             		btst	#0,2(a2,d0.w)
00018128 6600                       		bne.s	Obj79_RedLamp
0001812A 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001812E 0201 007F                  		andi.b	#$7F,d1
00018132 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00018136 0202 007F                  		andi.b	#$7F,d2
0001813A B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
0001813C 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
0001813E                            
0001813E                            Obj79_RedLamp:
0001813E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018144 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
0001814A 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00018150 4E75                       		rts	
00018152                            ; ===========================================================================
00018152                            
00018152                            Obj79_BlueLamp:				; XREF: Obj79_Index
00018152 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00018156 6600 0000                  		bne.w	locret_16F90	; if yes, branch
0001815A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001815E 6B00 0000                  		bmi.w	locret_16F90
00018162 1238 FE30                  		move.b	($FFFFFE30).w,d1
00018166 0201 007F                  		andi.b	#$7F,d1
0001816A 1428 0028                  		move.b	$28(a0),d2
0001816E 0202 007F                  		andi.b	#$7F,d2
00018172 B202                       		cmp.b	d2,d1
00018174 6500                       		bcs.s	Obj79_HitLamp
00018176 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001817A 7000                       		moveq	#0,d0
0001817C 1028 0023                  		move.b	$23(a0),d0
00018180 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018186 117C 0004 0024             		move.b	#4,$24(a0)
0001818C 117C 0003 001A             		move.b	#3,$1A(a0)
00018192 6000 0000                  		bra.w	locret_16F90
00018196                            ; ===========================================================================
00018196                            
00018196                            Obj79_HitLamp:
00018196 3038 D008                  		move.w	($FFFFD008).w,d0
0001819A 9068 0008                  		sub.w	8(a0),d0
0001819E 5040                       		addq.w	#8,d0
000181A0 0C40 0010                  		cmpi.w	#$10,d0
000181A4 6400 0000                  		bcc.w	locret_16F90
000181A8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000181AC 9068 000C                  		sub.w	$C(a0),d0
000181B0 0640 0040                  		addi.w	#$40,d0
000181B4 0C40 0068                  		cmpi.w	#$68,d0
000181B8 6400                       		bcc.s	locret_16F90
000181BA 303C 00A1                  		move.w	#$A1,d0
000181BE 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play lamppost sound
000181C4 5428 0024                  		addq.b	#2,$24(a0)
000181C8 4EB9 0000 EBDC             		jsr	SingleObjLoad
000181CE 6600                       		bne.s	loc_16F76
000181D0 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
000181D4 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
000181DA 3368 0008 0030             		move.w	8(a0),$30(a1)
000181E0 3368 000C 0032             		move.w	$C(a0),$32(a1)
000181E6 0469 0018 0032             		subi.w	#$18,$32(a1)
000181EC 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
000181F4 337C 07A0 0002             		move.w	#$7A0,2(a1)
000181FA 137C 0004 0001             		move.b	#4,1(a1)
00018200 137C 0008 0019             		move.b	#8,$19(a1)
00018206 137C 0004 0018             		move.b	#4,$18(a1)
0001820C 137C 0002 001A             		move.b	#2,$1A(a1)
00018212 337C 0020 0036             		move.w	#$20,$36(a1)
00018218                            
00018218                            loc_16F76:
00018218 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
0001821E 6100 0000                  		bsr.w	Obj79_StoreInfo
00018222 45F8 FC00                  		lea	($FFFFFC00).w,a2
00018226 7000                       		moveq	#0,d0
00018228 1028 0023                  		move.b	$23(a0),d0
0001822C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00018232                            
00018232                            locret_16F90:
00018232 4E75                       		rts	
00018234                            ; ===========================================================================
00018234                            
00018234                            Obj79_AfterHit:				; XREF: Obj79_Index
00018234 4E75                       		rts	
00018236                            ; ===========================================================================
00018236                            
00018236                            Obj79_Twirl:				; XREF: Obj79_Index
00018236 5368 0036                  		subq.w	#1,$36(a0)
0001823A 6A00                       		bpl.s	loc_16FA0
0001823C 117C 0004 0024             		move.b	#4,$24(a0)
00018242                            
00018242                            loc_16FA0:
00018242 1028 0026                  		move.b	$26(a0),d0
00018246 0428 0010 0026             		subi.b	#$10,$26(a0)
0001824C 0400 0040                  		subi.b	#$40,d0
00018250 4EB9 0000 3416             		jsr	(CalcSine).l
00018256 C3FC 0C00                  		muls.w	#$C00,d1
0001825A 4841                       		swap	d1
0001825C D268 0030                  		add.w	$30(a0),d1
00018260 3141 0008                  		move.w	d1,8(a0)
00018264 C1FC 0C00                  		muls.w	#$C00,d0
00018268 4840                       		swap	d0
0001826A D068 0032                  		add.w	$32(a0),d0
0001826E 3140 000C                  		move.w	d0,$C(a0)
00018272 4E75                       		rts	
00018274                            ; ===========================================================================
00018274                            ; ---------------------------------------------------------------------------
00018274                            ; Subroutine to	store information when you hit a lamppost
00018274                            ; ---------------------------------------------------------------------------
00018274                            
00018274                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00018274 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
0001827A 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00018280 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00018286 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
0001828C 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00018292 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00018298 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
0001829E 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000182A4 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000182AA 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000182B0 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000182B6 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000182BC 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000182C2 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
000182C8 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
000182CE 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
000182D4 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
000182DA 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
000182E0 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
000182E6 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
000182EC 4E75                       		rts	
000182EE                            
000182EE                            ; ---------------------------------------------------------------------------
000182EE                            ; Subroutine to	load stored info when you start	a level	from a lamppost
000182EE                            ; ---------------------------------------------------------------------------
000182EE                            
000182EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000182EE                            
000182EE                            
000182EE                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
000182EE 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
000182F4 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
000182FA 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00018300 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00018306 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
0001830C 4278 FE20                  		clr.w	($FFFFFE20).w
00018310 4238 FE1B                  		clr.b	($FFFFFE1B).w
00018314 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
0001831A 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00018320 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00018324 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
0001832A 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018330 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00018336 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
0001833C 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00018342 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00018348 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
0001834E 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00018354 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
0001835A 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00018360 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00018366 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
0001836C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00018372 6600                       		bne.s	loc_170E4
00018374 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
0001837A 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018380 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00018386                            
00018386                            loc_170E4:
00018386 4A38 FE30                  		tst.b	($FFFFFE30).w
0001838A 6A00                       		bpl.s	locret_170F6
0001838C 3038 FE32                  		move.w	($FFFFFE32).w,d0
00018390 0440 00A0                  		subi.w	#$A0,d0
00018394 31C0 F728                  		move.w	d0,($FFFFF728).w
00018398                            
00018398                            locret_170F6:
00018398 4E75                       		rts	
0001839A                            ; End of function Obj79_LoadInfo
0001839A                            
0001839A                            ; ===========================================================================
0001839A                            ; ---------------------------------------------------------------------------
0001839A                            ; Sprite mappings - lamppost
0001839A                            ; ---------------------------------------------------------------------------
0001839A                            Map_obj79:
0001839A                            	include "_maps\obj79.asm"
0001839A                            ; ---------------------------------------------------------------------------
0001839A                            ; Sprite mappings - lamppost
0001839A                            ; ---------------------------------------------------------------------------
0001839A 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
0001839E 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000183A2 06                         byte_17100:	dc.b 6
000183A3 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000183A8 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000183AD F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000183B2 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000183B7 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
000183BC D401 0806 00               		dc.b $D4, 1, 8,	6, 0
000183C1 04                         byte_1711F:	dc.b 4
000183C2 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000183C7 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000183CC F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000183D1 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000183D6 02                         byte_17134:	dc.b 2
000183D7 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
000183DC F801 0808 00               		dc.b $F8, 1, 8,	8, 0
000183E1 06                         byte_1713F:	dc.b 6
000183E2 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000183E7 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000183EC F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000183F1 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000183F6 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
000183FB D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00018400                            		even
00018400                            		even
00018400                            
00018400                            ; ===========================================================================
00018400                            ; ---------------------------------------------------------------------------
00018400                            ; Object 7D - hidden points at the end of a level
00018400                            ; ---------------------------------------------------------------------------
00018400                            
00018400                            Obj7D:					; XREF: Obj_Index
00018400 7000                       		moveq	#0,d0
00018402 1028 0024                  		move.b	$24(a0),d0
00018406 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
0001840A 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
0001840E                            ; ===========================================================================
0001840E 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00018410 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00018412                            ; ===========================================================================
00018412                            
00018412                            Obj7D_Main:				; XREF: Obj7D_Index
00018412 7410                       		moveq	#$10,d2
00018414 3602                       		move.w	d2,d3
00018416 D643                       		add.w	d3,d3
00018418 43F8 D000                  		lea	($FFFFD000).w,a1
0001841C 3029 0008                  		move.w	8(a1),d0
00018420 9068 0008                  		sub.w	8(a0),d0
00018424 D042                       		add.w	d2,d0
00018426 B043                       		cmp.w	d3,d0
00018428 6400                       		bcc.s	Obj7D_ChkDel
0001842A 3229 000C                  		move.w	$C(a1),d1
0001842E 9268 000C                  		sub.w	$C(a0),d1
00018432 D242                       		add.w	d2,d1
00018434 B243                       		cmp.w	d3,d1
00018436 6400                       		bcc.s	Obj7D_ChkDel
00018438 4A78 FE08                  		tst.w	($FFFFFE08).w
0001843C 6600                       		bne.s	Obj7D_ChkDel
0001843E 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00018442 6600                       		bne.s	Obj7D_ChkDel
00018444 5428 0024                  		addq.b	#2,$24(a0)
00018448 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00018450 317C 84B6 0002             		move.w	#$84B6,2(a0)
00018456 0028 0004 0001             		ori.b	#4,1(a0)
0001845C 117C 0000 0018             		move.b	#0,$18(a0)
00018462 117C 0010 0019             		move.b	#$10,$19(a0)
00018468 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001846E 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00018474 303C 00C9                  		move.w	#$C9,d0
00018478 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play bonus sound
0001847E 7000                       		moveq	#0,d0
00018480 1028 0028                  		move.b	$28(a0),d0
00018484 D040                       		add.w	d0,d0
00018486 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
0001848A 4EB9 0000 0000             		jsr	AddPoints
00018490                            
00018490                            Obj7D_ChkDel:
00018490 3028 0008                  		move.w	8(a0),d0
00018494 0240 FF80                  		andi.w	#$FF80,d0
00018498 3238 F700                  		move.w	($FFFFF700).w,d1
0001849C 0441 0080                  		subi.w	#$80,d1
000184A0 0241 FF80                  		andi.w	#$FF80,d1
000184A4 9041                       		sub.w	d1,d0
000184A6 0C40 0280                  		cmpi.w	#$280,d0
000184AA 6200                       		bhi.s	Obj7D_Delete
000184AC 4E75                       		rts	
000184AE                            ; ===========================================================================
000184AE                            
000184AE                            Obj7D_Delete:
000184AE 4EF9 0000 E792             		jmp	DeleteObject
000184B4                            ; ===========================================================================
000184B4 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
000184B6 03E8                       		dc.w 1000
000184B8 0064                       		dc.w 100
000184BA 0001                       		dc.w 1
000184BC                            ; ===========================================================================
000184BC                            
000184BC                            Obj7D_DelayDel:				; XREF: Obj7D_Index
000184BC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
000184C0 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
000184C2 3028 0008                  		move.w	8(a0),d0
000184C6 0240 FF80                  		andi.w	#-$80,d0
000184CA 3238 F700                  		move.w	($FFFFF700).w,d1
000184CE 0441 0080                  		subi.w	#$80,d1
000184D2 0241 FF80                  		andi.w	#-$80,d1
000184D6 9041                       		sub.w	d1,d0
000184D8 0C40 0280                  		cmpi.w	#$280,d0
000184DC 6200                       		bhi.s	Obj7D_Delete2
000184DE 4EF9 0000 E756             		jmp	DisplaySprite
000184E4                            ; ===========================================================================
000184E4                            
000184E4                            Obj7D_Delete2:
000184E4 4EF9 0000 E792             		jmp	DeleteObject
000184EA                            ; ===========================================================================
000184EA                            ; ---------------------------------------------------------------------------
000184EA                            ; Sprite mappings - hidden points at the end of	a level
000184EA                            ; ---------------------------------------------------------------------------
000184EA                            Map_obj7D:
000184EA                            	include "_maps\obj7D.asm"
000184EA                            ; ---------------------------------------------------------------------------
000184EA                            ; Sprite mappings - hidden points at the end of	a level
000184EA                            ; ---------------------------------------------------------------------------
000184EA 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
000184EE 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
000184F2 00                         byte_17250:	dc.b 0
000184F3 01                         byte_17251:	dc.b 1
000184F4 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
000184F9 01                         byte_17257:	dc.b 1
000184FA F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
000184FF 01                         byte_1725D:	dc.b 1
00018500 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00018506 00                         		even
00018506 00                         		even
00018506                            
00018506                            ; ===========================================================================
00018506                            ; ---------------------------------------------------------------------------
00018506                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00018506                            ; ---------------------------------------------------------------------------
00018506                            
00018506                            Obj8A:					; XREF: Obj_Index
00018506 7000                       		moveq	#0,d0
00018508 1028 0024                  		move.b	$24(a0),d0
0001850C 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00018510 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00018514                            ; ===========================================================================
00018514 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00018516 0000                       		dc.w Obj8A_Display-Obj8A_Index
00018518                            ; ===========================================================================
00018518                            
00018518                            Obj8A_Main:				; XREF: Obj8A_Index
00018518 5428 0024                  		addq.b	#2,$24(a0)
0001851C 317C 0120 0008             		move.w	#$120,8(a0)
00018522 317C 00F0 000A             		move.w	#$F0,$A(a0)
00018528 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00018530 317C 05A0 0002             		move.w	#$5A0,2(a0)
00018536 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
0001853A 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
0001853E 117C 0000 0001             		move.b	#0,1(a0)
00018544 117C 0000 0018             		move.b	#0,$18(a0)
0001854A 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00018550 6600                       		bne.s	Obj8A_Display	; if not, branch
00018552 317C 00A6 0002             		move.w	#$A6,2(a0)
00018558 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
0001855E 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00018562 6700                       		beq.s	Obj8A_Display	; if not, branch
00018564 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
0001856A 6600                       		bne.s	Obj8A_Display	; if not, branch
0001856C 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00018572 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00018578 4EF9 0000 E792             		jmp	DeleteObject
0001857E                            ; ===========================================================================
0001857E                            
0001857E                            Obj8A_Display:				; XREF: Obj8A_Index
0001857E 4EF9 0000 E756             		jmp	DisplaySprite
00018584                            ; ===========================================================================
00018584                            ; ---------------------------------------------------------------------------
00018584                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00018584                            ; ---------------------------------------------------------------------------
00018584                            Map_obj8A:
00018584                            	include "_maps\obj8A.asm"
00018584                            Map_ca8f:
00018584 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
00018586 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
00018588 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
0001858A 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
0001858C 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
0001858E 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
00018590 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
00018592 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
00018594 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
00018596 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
00018598 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
0001859A 0000                       Map_ca8f_tm: 	dc.w Map_ca8f_tmss-Map_ca8f
0001859C 08                         Map_ca8f_16: 	dc.b $8
0001859D CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
000185A2 E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
000185A7 F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
000185AC 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
000185B1 B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
000185B6 B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
000185BB B301 0016 08               	dc.b $B3, $1, $0, $16, $8
000185C0 B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
000185C5 10                         Map_ca8f_3F: 	dc.b $10
000185C6 D805 0000 80               	dc.b $D8, $5, $0, $0, $80
000185CB D805 0004 90               	dc.b $D8, $5, $0, $4, $90
000185D0 D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
000185D5 D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
000185DA D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
000185DF D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
000185E4 D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
000185E9 D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
000185EE 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
000185F3 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
000185F8 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
000185FD 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00018602 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00018607 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
0001860C 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00018611 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00018616 0A                         Map_ca8f_90: 	dc.b $A
00018617 D805 0012 80               	dc.b $D8, $5, $0, $12, $80
0001861C D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00018621 D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00018626 D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
0001862B D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00018630 D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00018635 D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
0001863A 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
0001863F 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00018644 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00018649 18                         Map_ca8f_C3: 	dc.b $18
0001864A D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
0001864F D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00018654 D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00018659 D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
0001865E D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00018663 D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00018668 D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
0001866D D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00018672 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00018677 D805 0042 20               	dc.b $D8, $5, $0, $42, $20
0001867C D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00018681 D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00018686 D801 0046 50               	dc.b $D8, $1, $0, $46, $50
0001868B D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00018690 D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00018695 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
0001869A 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
0001869F 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
000186A4 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
000186A9 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
000186AE 0805 0016 00               	dc.b $8, $5, $0, $16, $0
000186B3 0805 0004 10               	dc.b $8, $5, $0, $4, $10
000186B8 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
000186BD 0805 0042 30               	dc.b $8, $5, $0, $42, $30
000186C2 14                         Map_ca8f_13C: 	dc.b $14
000186C3 D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
000186C8 D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
000186CD D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
000186D2 D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
000186D7 D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
000186DC D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
000186E1 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
000186E6 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
000186EB 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
000186F0 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
000186F5 0005 0004 24               	dc.b $0, $5, $0, $4, $24
000186FA 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
000186FF 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00018704 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00018709 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
0001870E 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00018713 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00018718 2005 0022 30               	dc.b $20, $5, $0, $22, $30
0001871D 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00018722 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00018727 1A                         Map_ca8f_1A1: 	dc.b $1A
00018728 D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
0001872D D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00018732 D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00018737 D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
0001873C D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00018741 D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00018746 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
0001874B D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00018750 D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00018755 D805 0032 38               	dc.b $D8, $5, $0, $32, $38
0001875A D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
0001875F D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00018764 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00018769 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
0001876E 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00018773 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00018778 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
0001877D 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00018782 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00018787 0805 0004 08               	dc.b $8, $5, $0, $4, $8
0001878C 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00018791 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00018796 0809 0008 38               	dc.b $8, $9, $0, $8, $38
0001879B 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
000187A0 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
000187A5 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
000187AA 17                         Map_ca8f_224: 	dc.b $17
000187AB D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
000187B0 D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
000187B5 D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
000187BA D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
000187BF D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
000187C4 D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
000187C9 D005 0022 08               	dc.b $D0, $5, $0, $22, $8
000187CE D005 0026 18               	dc.b $D0, $5, $0, $26, $18
000187D3 D005 0000 28               	dc.b $D0, $5, $0, $0, $28
000187D8 D005 0022 38               	dc.b $D0, $5, $0, $22, $38
000187DD D005 0004 48               	dc.b $D0, $5, $0, $4, $48
000187E2 D009 0008 58               	dc.b $D0, $9, $0, $8, $58
000187E7 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
000187EC 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
000187F1 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
000187F6 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
000187FB 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00018800 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00018805 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
0001880A 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
0001880F 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
00018814 2005 0058 04               	dc.b $20, $5, $0, $58, $4
00018819 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
0001881E 1F                         Map_ca8f_298: 	dc.b $1F
0001881F D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
00018824 D805 0012 90               	dc.b $D8, $5, $0, $12, $90
00018829 D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
0001882E D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
00018833 D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
00018838 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
0001883D D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
00018842 D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
00018847 D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
0001884C D805 0004 18               	dc.b $D8, $5, $0, $4, $18
00018851 D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
00018856 D805 0058 38               	dc.b $D8, $5, $0, $58, $38
0001885B D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
00018860 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
00018865 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
0001886A 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
0001886F 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00018874 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
00018879 0009 0008 00               	dc.b $0, $9, $0, $8, $0
0001887E 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00018883 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00018888 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
0001888D 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00018892 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00018897 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
0001889C 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
000188A1 0001 0046 74               	dc.b $0, $1, $0, $46, $74
000188A6 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
000188AB 2005 0004 08               	dc.b $20, $5, $0, $4, $8
000188B0 2005 0012 18               	dc.b $20, $5, $0, $12, $18
000188B5 2005 0004 28               	dc.b $20, $5, $0, $4, $28
000188BA 0F                         Map_ca8f_334: 	dc.b $F
000188BB F805 0012 80               	dc.b $F8, $5, $0, $12, $80
000188C0 F805 0022 90               	dc.b $F8, $5, $0, $22, $90
000188C5 F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
000188CA F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
000188CF F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
000188D4 F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
000188D9 F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
000188DE F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
000188E3 F805 0042 00               	dc.b $F8, $5, $0, $42, $0
000188E8 F805 0048 18               	dc.b $F8, $5, $0, $48, $18
000188ED F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
000188F2 F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
000188F7 F805 000E 50               	dc.b $F8, $5, $0, $E, $50
000188FC F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00018901 F805 0004 70               	dc.b $F8, $5, $0, $4, $70
00018906 08                         Map_ca8f_380: 	dc.b $8
00018907 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
0001890C 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
00018911 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
00018916 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
0001891B 3005 0000 08               	dc.b $30, $5, $0, $0, $8
00018920 3005 0004 18               	dc.b $30, $5, $0, $4, $18
00018925 3001 0046 28               	dc.b $30, $1, $0, $46, $28
0001892A 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
0001892F 20                         Map_ca8f_3A9: 	dc.b $20
00018930 ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
00018935 ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
0001893A ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
0001893F ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
00018944 ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
00018949 ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
0001894E ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
00018953 FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
00018958 FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
0001895D FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
00018962 FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
00018967 FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
0001896C FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
00018971 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
00018976 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
0001897B 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
00018980 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00018985 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
0001898A 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
0001898F 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00018994 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
00018999 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
0001899E 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
000189A3 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
000189A8 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
000189AD 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
000189B2 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
000189B7 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
000189BC 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
000189C1 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
000189C6 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
000189CB 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
000189D0 1C                         Map_ca8f_tmss:	dc.b 28
00018A5E 00                         	even
00018A5E 00                         	even
00018A5E                            
00018A5E                            ; ===========================================================================
00018A5E                            ; ---------------------------------------------------------------------------
00018A5E                            ; Object 3D - matthew boss - modified by GK89
00018A5E                            ; ---------------------------------------------------------------------------
00018A5E                            
00018A5E                            Obj3D:					; XREF: Obj_Index
00018A5E 7000                       		moveq	#0,d0
00018A60 1028 0024                  		move.b	$24(a0),d0
00018A64 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00018A68 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00018A6C                            ; ===========================================================================
00018A6C 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00018A6E 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00018A70 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00018A72 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00018A74                            
00018A74 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00018A76 0401                       		dc.b 4,	1
00018A78 0607                       		dc.b 6,	7
00018A7A                            ; ===========================================================================
00018A7A                            
00018A7A                            Obj3D_Main:				; XREF: Obj3D_Index
00018A7A 45F9 0001 8A74             		lea	(Obj3D_ObjData).l,a2
00018A80 2248                       		movea.l	a0,a1
00018A82 7202                       		moveq	#2,d1
00018A84 6000                       		bra.s	Obj3D_LoadBoss
00018A86                            ; ===========================================================================
00018A86                            
00018A86                            Obj3D_Loop:
00018A86 4EB9 0000 EBF2             		jsr	SingleObjLoad2
00018A8C 6600                       		bne.s	loc_17772
00018A8E                            
00018A8E                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00018A8E 135A 0024                  		move.b	(a2)+,$24(a1)
00018A92 12BC 003D                  		move.b	#$3D,0(a1)
00018A96 3368 0008 0008             		move.w	8(a0),8(a1)
00018A9C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018AA2 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00018AAA 337C 0400 0002             		move.w	#$400,2(a1)
00018AB0 137C 0004 0001             		move.b	#4,1(a1)
00018AB6 137C 0020 0019             		move.b	#$20,$19(a1)
00018ABC 137C 0003 0018             		move.b	#3,$18(a1)
00018AC2 135A 001C                  		move.b	(a2)+,$1C(a1)
00018AC6 2348 0034                  		move.l	a0,$34(a1)
00018ACA 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00018ACE                            
00018ACE                            loc_17772:
00018ACE 3168 0008 0030             		move.w	8(a0),$30(a0)
00018AD4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018ADA 117C 000F 0020             		move.b	#$F,$20(a0)
00018AE0 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
00018AE6                            
00018AE6                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00018AE6 7000                       		moveq	#0,d0
00018AE8 1028 0025                  		move.b	$25(a0),d0
00018AEC 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00018AF0 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00018AF4 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018AFA 4EB9 0000 B7A4             		jsr	AnimateSprite
00018B00 1028 0022                  		move.b	$22(a0),d0
00018B04 0200 0003                  		andi.b	#3,d0
00018B08 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018B0E 8128 0001                  		or.b	d0,1(a0)
00018B12 4EF9 0000 E756             		jmp	DisplaySprite
00018B18                            ; ===========================================================================
00018B18 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00018B1A 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00018B1C 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00018B1E 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00018B20 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00018B22 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00018B24 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00018B26                            ; ===========================================================================
00018B26                            
00018B26                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00018B26 4EB9 0000 0000             		jsr    Obj3D_ShipMove
00018B2C 6100 0000                  		bsr.w	BossMove
00018B30 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00018B36 6600                       		bne.s	loc_177E6
00018B38 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018B3E 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018B42                            
00018B42                            loc_177E6:
00018B42 1028 003F                  		move.b	$3F(a0),d0
00018B46 4EB9 0000 3416             		jsr	(CalcSine).l
00018B4C EC40                       		asr.w	#6,d0
00018B4E D068 0038                  		add.w	$38(a0),d0
00018B52 3140 000C                  		move.w	d0,$C(a0)
00018B56 3168 0030 0008             		move.w	$30(a0),8(a0)
00018B5C 5428 003F                  		addq.b	#2,$3F(a0)
00018B60 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00018B66 6400                       		bcc.s	locret_1784A
00018B68 4A28 0022                  		tst.b	$22(a0)
00018B6C 6B00                       		bmi.s	loc_1784C
00018B6E 4A28 0020                  		tst.b	$20(a0)
00018B72 6600                       		bne.s	locret_1784A
00018B74 4A28 003E                  		tst.b	$3E(a0)
00018B78 6600                       		bne.s	Obj3D_ShipFlash
00018B7A 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00018B80 303C 00AC                  		move.w	#$AC,d0
00018B84 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018B8A                            
00018B8A                            Obj3D_ShipFlash:
00018B8A 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018B8E 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018B90 4A51                       		tst.w	(a1)
00018B92 6600                       		bne.s	loc_1783C
00018B94 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018B98                            
00018B98                            loc_1783C:
00018B98 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018B9A 5328 003E                  		subq.b	#1,$3E(a0)
00018B9E 6600                       		bne.s	locret_1784A
00018BA0 117C 000F 0020             		move.b	#$F,$20(a0)
00018BA6                            
00018BA6                            locret_1784A:
00018BA6 4E75                       		rts	
00018BA8                            ; ===========================================================================
00018BA8                            
00018BA8                            loc_1784C:				; XREF: loc_177E6
00018BA8 7064                       		moveq	#100,d0
00018BAA 6100 0000                  		bsr.w	AddPoints
00018BAE 117C 0008 0025             		move.b	#8,$25(a0)
00018BB4 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018BBA 4E75                       		rts	
00018BBC                            
00018BBC                            ; ---------------------------------------------------------------------------
00018BBC                            ; Defeated boss	subroutine
00018BBC                            ; ---------------------------------------------------------------------------
00018BBC                            
00018BBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018BBC                            
00018BBC                            
00018BBC                            BossDefeated:
00018BBC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00018BC0 0200 0007                  		andi.b	#7,d0
00018BC4 6600                       		bne.s	locret_178A2
00018BC6 4EB9 0000 EBDC             		jsr	SingleObjLoad
00018BCC 6600                       		bne.s	locret_178A2
00018BCE 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00018BD2 3368 0008 0008             		move.w	8(a0),8(a1)
00018BD8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018BDE 4EB9 0000 33F0             		jsr	(RandomNumber).l
00018BE4 3200                       		move.w	d0,d1
00018BE6 7200                       		moveq	#0,d1
00018BE8 1200                       		move.b	d0,d1
00018BEA E409                       		lsr.b	#2,d1
00018BEC 0441 0020                  		subi.w	#$20,d1
00018BF0 D369 0008                  		add.w	d1,8(a1)
00018BF4 E048                       		lsr.w	#8,d0
00018BF6 E608                       		lsr.b	#3,d0
00018BF8 D169 000C                  		add.w	d0,$C(a1)
00018BFC                            
00018BFC                            locret_178A2:
00018BFC 4E75                       		rts	
00018BFE                            ; End of function BossDefeated
00018BFE                            
00018BFE                            ; ---------------------------------------------------------------------------
00018BFE                            ; Subroutine to	move a boss
00018BFE                            ; ---------------------------------------------------------------------------
00018BFE                            
00018BFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018BFE                            
00018BFE                            
00018BFE                            BossMove:
00018BFE 2428 0030                  		move.l	$30(a0),d2
00018C02 2628 0038                  		move.l	$38(a0),d3
00018C06 3028 0010                  		move.w	$10(a0),d0
00018C0A 48C0                       		ext.l	d0
00018C0C E180                       		asl.l	#8,d0
00018C0E D480                       		add.l	d0,d2
00018C10 3028 0012                  		move.w	$12(a0),d0
00018C14 48C0                       		ext.l	d0
00018C16 E180                       		asl.l	#8,d0
00018C18 D680                       		add.l	d0,d3
00018C1A 2142 0030                  		move.l	d2,$30(a0)
00018C1E 2143 0038                  		move.l	d3,$38(a0)
00018C22 4E75                       		rts	
00018C24                            ; End of function BossMove
00018C24                            
00018C24                            ; ===========================================================================
00018C24                            
00018C24                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
00018C24 6100 FFD8                  		bsr.w	BossMove
00018C28 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00018C2E 6600                       		bne.s	loc_17916
00018C30 317C 0000 0010             		move.w	#0,$10(a0)
00018C36 317C 0000 0012             		move.w	#0,$12(a0)
00018C3C 5428 0025                  		addq.b	#2,$25(a0)
00018C40 4EB9 0000 EBF2             		jsr	SingleObjLoad2
00018C46 6600                       		bne.s	loc_17910
00018C48 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00018C4C 3368 0030 0008             		move.w	$30(a0),8(a1)
00018C52 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018C58 2348 0034                  		move.l	a0,$34(a1)
00018C5C                            
00018C5C                            loc_17910:
00018C5C 317C 0077 003C             		move.w	#$77,$3C(a0)
00018C62                            
00018C62                            loc_17916:
00018C62 6000 FEDE                  		bra.w	loc_177E6
00018C66                            ; ===========================================================================
00018C66                            
00018C66                            Obj3D_ShipMove:				; XREF:  sonic follow move
00018C66 5368 003C                  		subq.w	#1,$3C(a0)
00018C6A 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
00018C70 5428 0025                  		addq.b	#2,$25(a0)
00018C74 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018C7A 3038 D008                  		move.w	($FFFFD008).w,d0	 
00018C7E 9068 0008                  		sub.w	8(a0),d0		 
00018C82 6A00                       		bpl.s	Obj3D_left			 
00018C84 08A8 0000 0022             		bclr	#0,$22(a0)		 
00018C8A 6000                       		bra.s	Obj3D_right		 
00018C8C 08A8 0005 0022             		bclr	#5,$22(a0)
00018C92 4EB9 0000 0000              		jsr     loc_17950
00018C98 4E75                       		rts
00018C9A                            ; ===========================================================================
00018C9A                            
00018C9A                            Obj3D_right:
00018C9A 317C FF00 0010             		move.w	#-$100,$10(a0)	
00018CA0 4E75                       		Rts
00018CA2                            
00018CA2                            Obj3D_left:
00018CA2 317C 0100 0010             		move.w	#$100,$10(a0)	 
00018CA8 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
00018CAE 6600                       		bne.s	RTSboss  	; if not, branch
00018CB0 0868 0000 0022              		bchg	#0,$22(a0)
00018CB6                            
00018CB6                            RTSboss:	    
00018CB6 4E75                       		rts
00018CB8                             ; ===========================================================================
00018CB8                            
00018CB8                            Obj3D_UpStuff:
00018CB8 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
00018CBC 9068 000C                  		sub.w	$C(a0),d0		 
00018CC0 6A00                       		bpl.s	Obj3D_down			 
00018CC2 6000                        		bra.s	Obj3D_up		 
00018CC4 08A8 0005 0022             		bclr	#5,$22(a0)
00018CCA                             
00018CCA                            Obj3D_up:		
00018CCA 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
00018CD0 4E75                        	    rts
00018CD2                            
00018CD2                            Obj3D_down:
00018CD2 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
00018CD8                            
00018CD8                            loc_17950:
00018CD8 6000 FE68                  		bra.w	loc_177E6
00018CDC                            ; ===========================================================================
00018CDC                            
00018CDC                            loc_17954:				; XREF: Obj3D_ShipIndex
00018CDC 5368 003C                  		subq.w	#1,$3C(a0)
00018CE0 6B00                       		bmi.s	loc_17960
00018CE2 6100 FF1A                  		bsr.w	BossMove
00018CE6 6000                       		bra.s	loc_17976
00018CE8                            ; ===========================================================================
00018CE8                            
00018CE8                            loc_17960:
00018CE8 0868 0000 0022             		bchg	#0,$22(a0)
00018CEE 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018CF4 5528 0025                  		subq.b	#2,$25(a0)
00018CF8 317C 0000 0010             		move.w	#0,$10(a0)
00018CFE                            
00018CFE                            loc_17976:
00018CFE 6000 FE42                  		bra.w	loc_177E6
00018D02                            ; ===========================================================================
00018D02                            
00018D02                            loc_1797A:				; XREF: Obj3D_ShipIndex
00018D02 5368 003C                  		subq.w	#1,$3C(a0)
00018D06 6B00                       		bmi.s	loc_17984
00018D08 6000 FEB2                  		bra.w	BossDefeated
00018D0C                            ; ===========================================================================
00018D0C                            
00018D0C                            loc_17984:
00018D0C 08E8 0000 0022             		bset	#0,$22(a0)
00018D12 08A8 0007 0022             		bclr	#7,$22(a0)
00018D18 4268 0010                  		clr.w	$10(a0)
00018D1C 5428 0025                  		addq.b	#2,$25(a0)
00018D20 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018D26 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018D2A 6600                       		bne.s	locret_179AA
00018D2C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018D32 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00018D38 6000 FE82                  		bra.w	BossDefeated
00018D3C                            
00018D3C                            locret_179AA:
00018D3C 4E75                       		rts	
00018D3E                            ; ===========================================================================
00018D3E                            
00018D3E                            loc_179AC:				; XREF: Obj3D_ShipIndex
00018D3E 4EB9 0000 E6BE             		jsr ObjectFall		
00018D44 5268 003C                  		addq.w	#1,$3C(a0)
00018D48 6700                       		beq.s	loc_179BC
00018D4A 6A00                       		bpl.s	loc_179C2
00018D4C 6000                       		bra.s	loc_179EE
00018D4E                            ; ===========================================================================
00018D4E                            
00018D4E                            loc_179BC:
00018D4E 4268 0012                  		clr.w	$12(a0)
00018D52 6000                       		bra.s	loc_179EE
00018D54                            ; ===========================================================================
00018D54                            
00018D54                            loc_179C2:
00018D54 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018D5A 6500                       		bcs.s	loc_179DA
00018D5C 6700                       		beq.s	loc_179E0
00018D5E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018D64 6500                       		bcs.s	loc_179EE
00018D66 5428 0025                  		addq.b	#2,$25(a0)
00018D6A 6000                       		bra.s	loc_179EE
00018D6C                            ; ===========================================================================
00018D6C                            
00018D6C                            loc_179DA:
00018D6C 5168 0012                  		subq.w	#8,$12(a0)
00018D70 6000                       		bra.s	loc_179EE
00018D72 6000 FE48                  		bra.w	BossDefeated
00018D76                            ; ===========================================================================
00018D76                            
00018D76                            loc_179E0:
00018D76 4268 0012                  		clr.w	$12(a0)
00018D7A 303C 0081                  		move.w	#$81,d0
00018D7E 4EB9 0000 1C74             		jsr	(PlaySound).l	; play GHZ music
00018D84                            
00018D84                            loc_179EE:
00018D84 6100 FE78                  		bsr.w	BossMove
00018D88 6000 FDB8                  		bra.w	loc_177E6
00018D8C                            ; ===========================================================================
00018D8C                            
00018D8C                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018D8C 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018D92 6700                       		beq.s	loc_17A10
00018D94 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018D98 6000                       		bra.s	loc_17A16
00018D9A                            ; ===========================================================================
00018D9A                            
00018D9A                            loc_17A10:
00018D9A 4A28 0001                  		tst.b	1(a0)
00018D9E 6A00                       		bpl.s	Obj3D_ShipDel
00018DA0                            
00018DA0                            loc_17A16:
00018DA0 6100 FE5C                  		bsr.w	BossMove
00018DA4 6000 FD9C                  		bra.w	loc_177E6
00018DA8                            ; ===========================================================================
00018DA8                            
00018DA8                            Obj3D_ShipDel:
00018DA8 4EF9 0000 E792             		jmp	DeleteObject
00018DAE                            ; ===========================================================================
00018DAE                            
00018DAE                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018DAE 7000                       		moveq	#0,d0
00018DB0 7201                       		moveq	#1,d1
00018DB2 2268 0034                  		movea.l	$34(a0),a1
00018DB6 1029 0025                  		move.b	$25(a1),d0
00018DBA 5900                       		subq.b	#4,d0
00018DBC 6600                       		bne.s	loc_17A3E
00018DBE 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018DC4 6600                       		bne.s	loc_17A46
00018DC6 7204                       		moveq	#4,d1
00018DC8                            
00018DC8                            loc_17A3E:
00018DC8 5D00                       		subq.b	#6,d0
00018DCA 6B00                       		bmi.s	loc_17A46
00018DCC 720A                       		moveq	#$A,d1
00018DCE 6000                       		bra.s	loc_17A5A
00018DD0                            ; ===========================================================================
00018DD0                            
00018DD0                            loc_17A46:
00018DD0 4A29 0020                  		tst.b	$20(a1)
00018DD4 6600                       		bne.s	loc_17A50
00018DD6 7205                       		moveq	#5,d1
00018DD8 6000                       		bra.s	loc_17A5A
00018DDA                            ; ===========================================================================
00018DDA                            
00018DDA                            loc_17A50:
00018DDA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018DE0 6500                       		bcs.s	loc_17A5A
00018DE2 7204                       		moveq	#4,d1
00018DE4                            
00018DE4                            loc_17A5A:
00018DE4 1141 001C                  		move.b	d1,$1C(a0)
00018DE8 5500                       		subq.b	#2,d0
00018DEA 6600                       		bne.s	Obj3D_FaceDisp
00018DEC 117C 0006 001C             		move.b	#6,$1C(a0)
00018DF2 4A28 0001                  		tst.b	1(a0)
00018DF6 6A00                       		bpl.s	Obj3D_FaceDel
00018DF8                            
00018DF8                            Obj3D_FaceDisp:
00018DF8 6000                       		bra.s	Obj3D_Display
00018DFA                            ; ===========================================================================
00018DFA                            
00018DFA                            Obj3D_FaceDel:
00018DFA 4EF9 0000 E792             		jmp	DeleteObject
00018E00                            ; ===========================================================================
00018E00                            
00018E00                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00018E00 117C 0007 001C             		move.b	#7,$1C(a0)
00018E06 2268 0034                  		movea.l	$34(a0),a1
00018E0A 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00018E10 6600                       		bne.s	loc_17A96
00018E12 117C 000B 001C             		move.b	#$B,$1C(a0)
00018E18 4A28 0001                  		tst.b	1(a0)
00018E1C 6A00                       		bpl.s	Obj3D_FlameDel
00018E1E 6000                       		bra.s	Obj3D_FlameDisp
00018E20                            ; ===========================================================================
00018E20                            
00018E20                            loc_17A96:
00018E20 3029 0010                  		move.w	$10(a1),d0
00018E24 6700                       		beq.s	Obj3D_FlameDisp
00018E26 117C 0008 001C             		move.b	#8,$1C(a0)
00018E2C                            
00018E2C                            Obj3D_FlameDisp:
00018E2C 6000                       		bra.s	Obj3D_Display
00018E2E                            ; ===========================================================================
00018E2E                            
00018E2E                            Obj3D_FlameDel:
00018E2E 4EF9 0000 E792             		jmp	DeleteObject
00018E34                            ; ===========================================================================
00018E34                            
00018E34                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00018E34 2268 0034                  		movea.l	$34(a0),a1
00018E38 3169 0008 0008             		move.w	8(a1),8(a0)
00018E3E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018E44 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018E4A 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018E50 4EB9 0000 B7A4             		jsr	AnimateSprite
00018E56 1028 0022                  		move.b	$22(a0),d0
00018E5A 0200 0003                  		andi.b	#3,d0
00018E5E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018E64 8128 0001                  		or.b	d0,1(a0)
00018E68 4EF9 0000 E756             		jmp	DisplaySprite
00018E6E                            ; ===========================================================================
00018E6E                            ; ---------------------------------------------------------------------------
00018E6E                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00018E6E                            ; ---------------------------------------------------------------------------
00018E6E                            
00018E6E                            Obj48:					; XREF: Obj_Index
00018E6E 7000                       		moveq	#0,d0
00018E70 1028 0024                  		move.b	$24(a0),d0
00018E74 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018E78 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00018E7C                            ; ===========================================================================
00018E7C 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00018E7E 0000                       		dc.w Obj48_Base-Obj48_Index
00018E80 0000                       		dc.w Obj48_Display2-Obj48_Index
00018E82 0000                       		dc.w loc_17C68-Obj48_Index
00018E84 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018E86                            ; ===========================================================================
00018E86                            
00018E86                            Obj48_Main:				; XREF: Obj48_Index
00018E86 5428 0024                  		addq.b	#2,$24(a0)
00018E8A 317C 4080 0026             		move.w	#$4080,$26(a0)
00018E90 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018E96 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018E9E 317C 046C 0002             		move.w	#$46C,2(a0)
00018EA4 45E8 0028                  		lea	$28(a0),a2
00018EA8 14FC 0000                  		move.b	#0,(a2)+
00018EAC 7205                       		moveq	#5,d1
00018EAE 2248                       		movea.l	a0,a1
00018EB0 6000                       		bra.s	loc_17B60
00018EB2                            ; ===========================================================================
00018EB2                            
00018EB2                            Obj48_MakeLinks:
00018EB2 4EB9 0000 EBF2             		jsr	SingleObjLoad2
00018EB8 6600                       		bne.s	Obj48_MakeBall
00018EBA 3368 0008 0008             		move.w	8(a0),8(a1)
00018EC0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018EC6 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018ECA 137C 0006 0024             		move.b	#6,$24(a1)
00018ED0 237C 0000 8B62 0004        		move.l	#Map_obj15,4(a1)
00018ED8 337C 0380 0002             		move.w	#$380,2(a1)
00018EDE 137C 0001 001A             		move.b	#1,$1A(a1)
00018EE4 5228 0028                  		addq.b	#1,$28(a0)
00018EE8                            
00018EE8                            loc_17B60:				; XREF: Obj48_Main
00018EE8 3A09                       		move.w	a1,d5
00018EEA 0445 D000                  		subi.w	#$D000,d5
00018EEE EC4D                       		lsr.w	#6,d5
00018EF0 0245 007F                  		andi.w	#$7F,d5
00018EF4 14C5                       		move.b	d5,(a2)+
00018EF6 137C 0004 0001             		move.b	#4,1(a1)
00018EFC 137C 0008 0019             		move.b	#8,$19(a1)
00018F02 137C 0006 0018             		move.b	#6,$18(a1)
00018F08 2368 0034 0034             		move.l	$34(a0),$34(a1)
00018F0E 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00018F12                            
00018F12                            Obj48_MakeBall:
00018F12 137C 0008 0024             		move.b	#8,$24(a1)
00018F18 237C 0000 9152 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00018F20 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00018F26 137C 0001 001A             		move.b	#1,$1A(a1)
00018F2C 137C 0005 0018             		move.b	#5,$18(a1)
00018F32 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00018F38 4E75                       		rts	
00018F3A                            ; ===========================================================================
00018F3A                            
00018F3A 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00018F40                            
00018F40                            ; ===========================================================================
00018F40                            
00018F40                            Obj48_Base:				; XREF: Obj48_Index
00018F40 47F9 0001 8F3A             		lea	(Obj48_PosData).l,a3
00018F46 45E8 0028                  		lea	$28(a0),a2
00018F4A 7C00                       		moveq	#0,d6
00018F4C 1C1A                       		move.b	(a2)+,d6
00018F4E                            
00018F4E                            loc_17BC6:
00018F4E 7800                       		moveq	#0,d4
00018F50 181A                       		move.b	(a2)+,d4
00018F52 ED4C                       		lsl.w	#6,d4
00018F54 0684 00FF D000             		addi.l	#$FFD000,d4
00018F5A 2244                       		movea.l	d4,a1
00018F5C 101B                       		move.b	(a3)+,d0
00018F5E B029 003C                  		cmp.b	$3C(a1),d0
00018F62 6700                       		beq.s	loc_17BE0
00018F64 5229 003C                  		addq.b	#1,$3C(a1)
00018F68                            
00018F68                            loc_17BE0:
00018F68 51CE FFE4                  		dbf	d6,loc_17BC6
00018F6C                            
00018F6C B029 003C                  		cmp.b	$3C(a1),d0
00018F70 6600                       		bne.s	loc_17BFA
00018F72 2268 0034                  		movea.l	$34(a0),a1
00018F76 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018F7C 6600                       		bne.s	loc_17BFA
00018F7E 5428 0024                  		addq.b	#2,$24(a0)
00018F82                            
00018F82                            loc_17BFA:
00018F82 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018F88 6700                       		beq.s	Obj48_Display
00018F8A 5268 0032                  		addq.w	#1,$32(a0)
00018F8E                            
00018F8E                            Obj48_Display:
00018F8E 6100 0000                  		bsr.w	sub_17C2A
00018F92 1028 0026                  		move.b	$26(a0),d0
00018F96 4EB9 0000 8AD4             		jsr	(Obj15_Move2).l
00018F9C 4EF9 0000 E756             		jmp	DisplaySprite
00018FA2                            ; ===========================================================================
00018FA2                            
00018FA2                            Obj48_Display2:				; XREF: Obj48_Index
00018FA2 6100 0000                  		bsr.w	sub_17C2A
00018FA6 4EB9 0000 8A94             		jsr	(Obj48_Move).l
00018FAC 4EF9 0000 E756             		jmp	DisplaySprite
00018FB2                            
00018FB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018FB2                            
00018FB2                            
00018FB2                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018FB2 2268 0034                  		movea.l	$34(a0),a1
00018FB6 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018FBC 6400                       		bcc.s	loc_17C3C
00018FBE 0868 0000 001A             		bchg	#0,$1A(a0)
00018FC4                            
00018FC4                            loc_17C3C:
00018FC4 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018FCA 3029 000C                  		move.w	$C(a1),d0
00018FCE D068 0032                  		add.w	$32(a0),d0
00018FD2 3140 0038                  		move.w	d0,$38(a0)
00018FD6 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018FDC 4A29 0022                  		tst.b	$22(a1)
00018FE0 6A00                       		bpl.s	locret_17C66
00018FE2 10BC 003F                  		move.b	#$3F,0(a0)
00018FE6 117C 0000 0024             		move.b	#0,$24(a0)
00018FEC                            
00018FEC                            locret_17C66:
00018FEC 4E75                       		rts	
00018FEE                            ; End of function sub_17C2A
00018FEE                            
00018FEE                            ; ===========================================================================
00018FEE                            
00018FEE                            loc_17C68:				; XREF: Obj48_Index
00018FEE 2268 0034                  		movea.l	$34(a0),a1
00018FF2 4A29 0022                  		tst.b	$22(a1)
00018FF6 6A00                       		bpl.s	Obj48_Display3
00018FF8 10BC 003F                  		move.b	#$3F,0(a0)
00018FFC 117C 0000 0024             		move.b	#0,$24(a0)
00019002                            
00019002                            Obj48_Display3:
00019002 4EF9 0000 E756             		jmp	DisplaySprite
00019008                            ; ===========================================================================
00019008                            
00019008                            Obj48_ChkVanish:			; XREF: Obj48_Index
00019008 7000                       		moveq	#0,d0
0001900A 4A28 001A                  		tst.b	$1A(a0)
0001900E 6600                       		bne.s	Obj48_Vanish
00019010 5200                       		addq.b	#1,d0
00019012                            
00019012                            Obj48_Vanish:
00019012 1140 001A                  		move.b	d0,$1A(a0)
00019016 2268 0034                  		movea.l	$34(a0),a1
0001901A 4A29 0022                  		tst.b	$22(a1)
0001901E 6A00                       		bpl.s	Obj48_Display4
00019020 117C 0000 0020             		move.b	#0,$20(a0)
00019026 6100 FB94                  		bsr.w	BossDefeated
0001902A 5328 003C                  		subq.b	#1,$3C(a0)
0001902E 6A00                       		bpl.s	Obj48_Display4
00019030 10BC 003F                  		move.b	#$3F,(a0)
00019034 117C 0000 0024             		move.b	#0,$24(a0)
0001903A                            
0001903A                            Obj48_Display4:
0001903A 4EF9 0000 E756             		jmp	DisplaySprite
00019040                            ; ===========================================================================
00019040                            Ani_Eggman:
00019040                            	include "_anim\Eggman.asm"
00019040                            ; ---------------------------------------------------------------------------
00019040                            ; Animation script - Eggman (bosses)
00019040                            ; ---------------------------------------------------------------------------
00019040 0000                       		dc.w byte_17CD4-Ani_Eggman
00019042 0000                       		dc.w byte_17CD8-Ani_Eggman
00019044 0000                       		dc.w byte_17CDC-Ani_Eggman
00019046 0000                       		dc.w byte_17CE0-Ani_Eggman
00019048 0000                       		dc.w byte_17CE4-Ani_Eggman
0001904A 0000                       		dc.w byte_17CE8-Ani_Eggman
0001904C 0000                       		dc.w byte_17CEC-Ani_Eggman
0001904E 0000                       		dc.w byte_17CF0-Ani_Eggman
00019050 0000                       		dc.w byte_17CF4-Ani_Eggman
00019052 0000                       		dc.w byte_17CF8-Ani_Eggman
00019054 0000                       		dc.w byte_17CFC-Ani_Eggman
00019056 0000                       		dc.w byte_17D00-Ani_Eggman
00019058 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
0001905C 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00019060 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00019064 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00019068 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
0001906C 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00019070 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00019074 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00019078 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
0001907C 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00019080 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00019084 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00019090                            		even
00019090                            		even
00019090                            Ani_TetoB:
00019090                            	include "_anim\TetoB.asm"
00019090                            ; ---------------------------------------------------------------------------
00019090                            ; Animation script - Eggman (bosses)
00019090                            ; ---------------------------------------------------------------------------
00019090 0000                       		dc.w spin-Ani_TetoB
00019092 0000                       		dc.w static-Ani_TetoB
00019094 0000                       		dc.w static2-Ani_TetoB
00019096 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
0001909D 0500 FF                    static:	dc.b 5,	0, $FF
000190A0 0501 FF                    static2:	dc.b 5,	1, $FF
000190A4 00                         		even
000190A4 00                         		even
000190A4                            ; ---------------------------------------------------------------------------
000190A4                            ; Sprite mappings - Eggman (boss levels)
000190A4                            ; ---------------------------------------------------------------------------
000190A4                            Map_Eggman:
000190A4                            	include "_maps\Eggman.asm"
000190A4                            Map_dc7e:
000190A4 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
000190A6 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
000190A8 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
000190AA 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
000190AC 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
000190AE 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
000190B0 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
000190B2 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
000190B4 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
000190B6 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
000190B8 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
000190BA 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
000190BC 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
000190BE 06                         Map_dc7e_1A: 	dc.b $6
000190BF EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
000190C4 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
000190C9 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
000190CE FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
000190D3 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
000190D8 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
000190DD 02                         Map_dc7e_39: 	dc.b $2
000190DE E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000190E3 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
000190E8 02                         Map_dc7e_44: 	dc.b $2
000190E9 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000190EE EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000190F3 03                         Map_dc7e_4F: 	dc.b $3
000190F4 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
000190F9 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
000190FE EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00019103 03                         Map_dc7e_5F: 	dc.b $3
00019104 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
00019109 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
0001910E EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00019113 03                         Map_dc7e_6F: 	dc.b $3
00019114 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00019119 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
0001911E EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00019123 03                         Map_dc7e_7F: 	dc.b $3
00019124 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
00019129 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001912E EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00019133 04                         Map_dc7e_8F: 	dc.b $4
00019134 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
00019139 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
0001913E EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00019143 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00019148 01                         Map_dc7e_A4: 	dc.b $1
00019149 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
0001914E 01                         Map_dc7e_AA: 	dc.b $1
0001914F 0405 0031 22               	dc.b $4, $5, $0, $31, $22
00019154 00                         Map_dc7e_B0: 	dc.b $0
00019155 02                         Map_dc7e_B1: 	dc.b $2
00019156 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
0001915B 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
00019160 02                         Map_dc7e_BC: 	dc.b $2
00019161 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00019166 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
0001916C 00                         	even
0001916C 00                         	even
0001916C                            
0001916C                            ; ---------------------------------------------------------------------------
0001916C                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001916C                            ; ---------------------------------------------------------------------------
0001916C                            Map_BossItems:
0001916C                            	include "_maps\Boss items.asm"
0001916C                            ; ---------------------------------------------------------------------------
0001916C                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001916C                            ; ---------------------------------------------------------------------------
0001916C 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00019170 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00019174 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00019178 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
0001917C 01                         byte_17DE4:	dc.b 1
0001917D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019182 02                         byte_17DEA:	dc.b 2
00019183 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00019188 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001918D 00                         		dc.b 0
0001918E 01                         byte_17DF6:	dc.b 1
0001918F FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00019194 01                         byte_17DFC:	dc.b 1
00019195 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
0001919A 01                         byte_17E02:	dc.b 1
0001919B 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
000191A0 04                         byte_17E08:	dc.b 4
000191A1 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
000191A6 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
000191AB F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000191B0 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000191B5 00                         		dc.b 0
000191B6 02                         byte_17E1E:	dc.b 2
000191B7 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000191BC 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000191C1 00                         		dc.b 0
000191C2 02                         byte_17E2A:	dc.b 2
000191C3 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
000191C8 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
000191CE 00                         		even
000191CE 00                         		even
000191CE                            
000191CE                            ; ===========================================================================
000191CE                            ; ---------------------------------------------------------------------------
000191CE                            ; Object 77 - Fatass teto boss fight in LZ -STDH
000191CE                            ; ---------------------------------------------------------------------------
000191CE                            
000191CE                            
000191CE                            obj77:					; XREF: Obj_Index
000191CE 7000                       		moveq	#0,d0
000191D0 1028 0024                  		move.b	$24(a0),d0
000191D4 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
000191D8 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
000191DC                            ; ===========================================================================
000191DC 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
000191DE 0000                       		dc.w obj77_ShipMain-obj77_Index
000191E0 0000                       		dc.w obj77_FaceMain-obj77_Index
000191E2 0000                       		dc.w obj77_FlameMain-obj77_Index
000191E4                            
000191E4 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
000191E6 0401                       		dc.b 4,	1
000191E8 0607                       		dc.b 6,	7
000191EA                            ; ===========================================================================
000191EA                            
000191EA                            obj77_Main:				; XREF: obj77_Index
000191EA 45F9 0001 91E4             		lea	(obj77_ObjData).l,a2
000191F0 2248                       		movea.l	a0,a1
000191F2 7202                       		moveq	#2,d1
000191F4 6000                       		bra.s	obj77_LoadBoss
000191F6                            ; ===========================================================================
000191F6                            
000191F6                            obj77_Loop:
000191F6 4EB9 0000 EBF2             		jsr	SingleObjLoad2
000191FC 6600                       		bne.s	loc2_17772
000191FE                            
000191FE                            obj77_LoadBoss:				; XREF: obj77_Main
000191FE 135A 0024                  		move.b	(a2)+,$24(a1)
00019202 12BC 0077                  		move.b	#$77,0(a1)
00019206 3368 0008 0008             		move.w	8(a0),8(a1)
0001920C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019212 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
0001921A 337C 0400 0002             		move.w	#$400,2(a1)
00019220 137C 0004 0001             		move.b	#4,1(a1)
00019226 137C 0020 0019             		move.b	#$20,$19(a1)
0001922C 137C 0003 0018             		move.b	#3,$18(a1)
00019232 135A 001C                  		move.b	(a2)+,$1C(a1)
00019236 2348 0034                  		move.l	a0,$34(a1)
0001923A 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
0001923E                            
0001923E                            loc2_17772:
0001923E 3168 0008 0030             		move.w	8(a0),$30(a0)
00019244 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001924A 117C 000F 0020             		move.b	#$F,$20(a0)
00019250 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019256                            
00019256                            obj77_ShipMain:				; XREF: obj77_Index
00019256 7000                       		moveq	#0,d0
00019258 1028 0025                  		move.b	$25(a0),d0
0001925C 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
00019260 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
00019264 43F9 0001 9090             		lea	(Ani_TetoB).l,a1
0001926A 4EB9 0000 B7A4             		jsr	AnimateSprite
00019270 1028 0022                  		move.b	$22(a0),d0
00019274 0200 0003                  		andi.b	#3,d0
00019278 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001927E 8128 0001                  		or.b	d0,1(a0)
00019282 4EF9 0000 E756             		jmp	DisplaySprite
00019288                            ; ===========================================================================
00019288 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
0001928A 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
0001928C 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
0001928E 0000                       		dc.w loc2_17954-obj77_ShipIndex
00019290 0000                       		dc.w fatassruns-obj77_ShipIndex		
00019292 0000                       		dc.w loc2_1797A-obj77_ShipIndex
00019294 0000                       		dc.w loc2_179AC-obj77_ShipIndex
00019296 0000                       		dc.w loc2_179F6-obj77_ShipIndex
00019298                            ; ===========================================================================
00019298                            
00019298                            obj77_ShipStart:			; XREF: obj77_ShipIndex
00019298                            	;	move.w	#$100,$12(a0)	; move ship down
00019298 6100 F964                  		bsr.w	BossMove
0001929C 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
000192A2 6600                       		bne.s	loc2_177E6
000192A4 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000192AA 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000192AE                            
000192AE                            loc2_177E6:
000192AE                            ;		move.b	$3F(a0),d0
000192AE                            ;		jsr	(CalcSine).l
000192AE EC40                       		asr.w	#6,d0
000192B0 D068 0038                  		add.w	$38(a0),d0
000192B4 3140 000C                  		move.w	d0,$C(a0)
000192B8 3168 0030 0008             		move.w	$30(a0),8(a0)
000192BE 5428 003F                  		addq.b	#2,$3F(a0)
000192C2 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
000192C8 6400                       		bcc.s	locret_1784A2
000192CA 4A28 0022                  		tst.b	$22(a0)
000192CE 6B00                       		bmi.s	loc2_1784C
000192D0 4A28 0020                  		tst.b	$20(a0)
000192D4 6600                       		bne.s	locret_1784A2
000192D6 4A28 003E                  		tst.b	$3E(a0)
000192DA 6600                       		bne.s	obj77_ShipFlash
000192DC 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
000192E2 303C 00AC                  		move.w	#$AC,d0
000192E6 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play boss damage sound
000192EC                            
000192EC                            obj77_ShipFlash:
000192EC 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
000192F0 7000                       		moveq	#0,d0		; move 0 (black) to d0
000192F2 4A51                       		tst.w	(a1)
000192F4 6600                       		bne.s	loc2_1783C
000192F6 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
000192FA                            
000192FA                            loc2_1783C:
000192FA 3280                       		move.w	d0,(a1)		; load colour stored in	d0
000192FC 5328 003E                  		subq.b	#1,$3E(a0)
00019300 6600                       		bne.s	locret_1784A2
00019302 117C 000F 0020             		move.b	#$F,$20(a0)
00019308                            
00019308                            locret_1784A2:
00019308 4E75                       		rts	
0001930A                            ; ===========================================================================
0001930A                            
0001930A                            loc2_1784C:				; XREF: loc2_177E6
0001930A 7064                       		moveq	#100,d0
0001930C 6100 0000                  		bsr.w	AddPoints
00019310 117C 000A 0025             		move.b	#$A,$25(a0)
00019316 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001931C 4E75                       		rts	
0001931E                            ; ===========================================================================
0001931E                            
0001931E                            obj77_MakeBall:				; XREF: obj77_ShipIndex
0001931E 317C FF00 0010             		move.w	#-$100,$10(a0)
00019324 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
0001932A 6100 F8D2                  		bsr.w	BossMove
0001932E 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
00019334 6600                       		bne.s	loc2_17916
00019336 317C 0000 0010             		move.w	#0,$10(a0)
0001933C 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
00019342 317C 0000 0012             		move.w	#0,$12(a0)
00019348 5428 0025                  		addq.b	#2,$25(a0)
0001934C                            
0001934C                            loc2_17910:
0001934C 317C 0077 003C             		move.w	#$77,$3C(a0)
00019352                            
00019352                            loc2_17916:
00019352 6000 FF5A                  		bra.w	loc2_177E6
00019356                            ; ===========================================================================
00019356                            
00019356                            obj77_ShipMove:				; XREF: obj77_ShipIndex
00019356 6100 F8A6                  		bsr.w	BossMove
0001935A 5368 003C                  		subq.w	#1,$3C(a0)
0001935E 6A00                       		bpl.s	loc2_17950 ; if time remains go here
00019360 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
00019366 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
0001936C 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
00019372 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
00019378 6600                       		bne.s	loc2_17950 ; if not branch
0001937A                            
0001937A                            fatass_attack:
0001937A 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
00019380 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
00019386 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
0001938C 6600                       		bne.s	loc2_17950    ; if not you know the drill
0001938E 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00019392 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00019398                            
00019398                            loc2_17950:
00019398 6000 FF14                  		bra.w	loc2_177E6
0001939C                            ; ===========================================================================
0001939C                            
0001939C                            loc2_17954:				; XREF: obj77_ShipIndex
0001939C 6100 F860                  		bsr.w	BossMove
000193A0 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
000193A6                            		; i suck at programming
000193A6 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
000193AC 6600                       		bne.s	loc2_17976    ; if not blah blah
000193AE 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
000193B4 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
000193B8 303C 00B9                  		move.w	#$B9,d0
000193BC 4EB9 0000 1C74             		jsr	(PlaySound).l	; play the earthquake sound
000193C2                            
000193C2                            Peartobombs:	
000193C2 4EB9 0000 EBF2                		jsr	SingleObjLoad2
000193C8 6600                       		bne.s	secondone
000193CA 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
000193CE 337C 1D70 0008             		move.w	#$1D70,8(a1)
000193D4 337C 0670 000C             		move.w	#$670,$C(a1)
000193DA                            secondone:		
000193DA 4EB9 0000 EBF2                		jsr	SingleObjLoad2
000193E0 6600                       		bne.s	loc2_17976		
000193E2 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
000193E6 337C 1D20 0008             		move.w	#$1D20,8(a1)
000193EC 337C 0670 000C             		move.w	#$670,$C(a1)
000193F2                            lastone:
000193F2 4EB9 0000 EBF2                		jsr	SingleObjLoad2
000193F8 6600                       		bne.s	loc2_17976		
000193FA 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
000193FE 337C 1E00 0008             		move.w	#$1E00,8(a1)
00019404 337C 0670 000C             		move.w	#$670,$C(a1)
0001940A                            		
0001940A                            loc2_17976:
0001940A 6000 FEA2                  		bra.w	loc2_177E6
0001940E                            		
0001940E                            ; ===========================================================================
0001940E                            Fatassruns:
0001940E 6100 F7EE                   		bsr.w	BossMove
00019412 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
00019418 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
0001941E 6600                       		bne.s	processstuff ; is not go here
00019420 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
00019426 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
0001942C 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
00019430 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
00019436 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
0001943C                            		
0001943C                            		
0001943C                            processstuff:
0001943C 6000 FE70                  		bra.w	loc2_177E6
00019440                            ; ===========================================================================
00019440                            
00019440                            loc2_1797A:				; XREF: obj77_ShipIndex
00019440 5368 003C                  		subq.w	#1,$3C(a0)
00019444 6B00                       		bmi.s	loc2_17984
00019446 6000 F774                  		bra.w	BossDefeated
0001944A                            ; ===========================================================================
0001944A                            
0001944A                            loc2_17984:
0001944A 08E8 0000 0022             		bset	#0,$22(a0)
00019450 08A8 0007 0022             		bclr	#7,$22(a0)
00019456 4268 0010                  		clr.w	$10(a0)
0001945A 5428 0025                  		addq.b	#2,$25(a0)
0001945E 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00019464 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019468 6600                       		bne.s	locret_179AA2
0001946A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019470                            
00019470                            locret_179AA2:
00019470 4E75                       		rts	
00019472                            ; ===========================================================================
00019472                            
00019472                            loc2_179AC:				; XREF: obj77_ShipIndex
00019472 5268 003C                  		addq.w	#1,$3C(a0)
00019476 6700                       		beq.s	loc2_179BC
00019478 6A00                       		bpl.s	loc2_179C2
0001947A 0668 0018 0012             		addi.w	#$18,$12(a0)
00019480 6000                       		bra.s	loc2_179EE
00019482                            ; ===========================================================================
00019482                            
00019482                            loc2_179BC:
00019482 4268 0012                  		clr.w	$12(a0)
00019486 6000                       		bra.s	loc2_179EE
00019488                            ; ===========================================================================
00019488                            
00019488                            loc2_179C2:
00019488 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001948E 6500                       		bcs.s	loc2_179DA
00019490 6700                       		beq.s	loc2_179E0
00019492 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019498 6500                       		bcs.s	loc2_179EE
0001949A 5428 0025                  		addq.b	#2,$25(a0)
0001949E 6000                       		bra.s	loc2_179EE
000194A0                            ; ===========================================================================
000194A0                            
000194A0                            loc2_179DA:
000194A0 5168 0012                  		subq.w	#8,$12(a0)
000194A4 6000                       		bra.s	loc2_179EE
000194A6                            ; ===========================================================================
000194A6                            
000194A6                            loc2_179E0:
000194A6 4268 0012                  		clr.w	$12(a0)
000194AA 303C 0097                  		move.w	#$97,d0
000194AE 4EB9 0000 1C74             		jsr	(PlaySound).l	; play lz3 music
000194B4                            
000194B4                            loc2_179EE:
000194B4 6100 F748                  		bsr.w	BossMove
000194B8 6000 FDF4                  		bra.w	loc2_177E6
000194BC                            ; ===========================================================================
000194BC                            
000194BC                            loc2_179F6:				; XREF: obj77_ShipIndex
000194BC 317C 0400 0010             		move.w	#$400,$10(a0)
000194C2 317C FFC0 0012             		move.w	#-$40,$12(a0)
000194C8 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
000194CE 6700                       		beq.s	loc2_17A10
000194D0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000194D4 6000                       		bra.s	loc2_17A16
000194D6                            ; ===========================================================================
000194D6                            
000194D6                            loc2_17A10:
000194D6 4A28 0001                  		tst.b	1(a0)
000194DA 6A00                       		bpl.s	obj77_ShipDel
000194DC                            
000194DC                            loc2_17A16:
000194DC 6100 F720                  		bsr.w	BossMove
000194E0 6000 FDCC                  		bra.w	loc2_177E6
000194E4                            ; ===========================================================================
000194E4                            
000194E4                            obj77_ShipDel:
000194E4 4EF9 0000 E792             		jmp	DeleteObject
000194EA                            ; ===========================================================================
000194EA                            
000194EA                            obj77_FaceMain:				; XREF: obj77_Index
000194EA 4E75                       		rts
000194EC                            ; ===========================================================================
000194EC                            
000194EC                            obj77_FlameMain:			; XREF: obj77_Index
000194EC 4E75                       		rts
000194EE                            ; ===========================================================================
000194EE                            
000194EE                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
000194EE 43F9 0001 9090             		lea	(Ani_TetoB).l,a1
000194F4 4EB9 0000 B7A4             		jsr	AnimateSprite
000194FA 4EF9 0000 E756             		jmp	DisplaySprite
00019500                            ; ---------------------------------------------------------------------------
00019500                            ; Sprite mappings - Fatass teto boss
00019500                            ; ---------------------------------------------------------------------------
00019500                            Map_TetoBoss:
00019500                            	include "_maps\tetoboss.asm"
00019500                            Map_f09a:
00019500 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00019502 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00019504 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00019506 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00019508 03                         Map_f09a_8: 	dc.b $3
00019509 E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
0001950E 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00019513 DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00019518 06                         Map_f09a_18: 	dc.b $6
00019519 EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
0001951E 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00019523 E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00019528 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
0001952D EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00019532 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00019537 03                         Map_f09a_37: 	dc.b $3
00019538 E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
0001953D 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00019542 DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00019547 06                         Map_f09a_47: 	dc.b $6
00019548 ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
0001954D 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00019552 E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00019557 DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
0001955C ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00019561 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00019566                            	even
00019566                            	even
00019566                            ; ===========================================================================
00019566                            ; ---------------------------------------------------------------------------
00019566                            ; Object 73 - Eggman (MZ)
00019566                            ; ---------------------------------------------------------------------------
00019566                            
00019566                            Obj73:					; XREF: Obj_Index
00019566 7000                       		moveq	#0,d0
00019568 1028 0024                  		move.b	$24(a0),d0
0001956C 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00019570 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00019574                            ; ===========================================================================
00019574 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00019576 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00019578 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001957A 0000                       		dc.w Obj73_FlameMain-Obj73_Index
0001957C 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001957E                            
0001957E 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019581 0401 04                    		dc.b 4,	1, 4
00019584 0607 04                    		dc.b 6,	7, 4
00019587 0800 03                    		dc.b 8,	0, 3
0001958A                            ; ===========================================================================
0001958A                            
0001958A                            Obj73_Main:				; XREF: Obj73_Index
0001958A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019590 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019596 117C 000F 0020             		move.b	#$F,$20(a0)
0001959C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000195A2 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
000195A6 2248                       		movea.l	a0,a1
000195A8 7203                       		moveq	#3,d1
000195AA 6000                       		bra.s	Obj73_LoadBoss
000195AC                            ; ===========================================================================
000195AC                            
000195AC                            Obj73_Loop:
000195AC 4EB9 0000 EBF2             		jsr	SingleObjLoad2
000195B2 6600                       		bne.s	Obj73_ShipMain
000195B4 12BC 0073                  		move.b	#$73,0(a1)
000195B8 3368 0008 0008             		move.w	8(a0),8(a1)
000195BE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000195C4                            
000195C4                            Obj73_LoadBoss:				; XREF: Obj73_Main
000195C4 08A8 0000 0022             		bclr	#0,$22(a0)
000195CA 4229 0025                  		clr.b	$25(a1)
000195CE 135A 0024                  		move.b	(a2)+,$24(a1)
000195D2 135A 001C                  		move.b	(a2)+,$1C(a1)
000195D6 135A 0018                  		move.b	(a2)+,$18(a1)
000195DA 237C 0001 90A4 0004        		move.l	#Map_Eggman,4(a1)
000195E2 337C 0400 0002             		move.w	#$400,2(a1)
000195E8 137C 0004 0001             		move.b	#4,1(a1)
000195EE 137C 0020 0019             		move.b	#$20,$19(a1)
000195F4 2348 0034                  		move.l	a0,$34(a1)
000195F8 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
000195FC                            
000195FC                            Obj73_ShipMain:
000195FC 7000                       		moveq	#0,d0
000195FE 1028 0025                  		move.b	$25(a0),d0
00019602 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00019606 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001960A 43F9 0001 9040             		lea	(Ani_Eggman).l,a1
00019610 4EB9 0000 B7A4             		jsr	AnimateSprite
00019616 7003                       		moveq	#3,d0
00019618 C028 0022                  		and.b	$22(a0),d0
0001961C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019622 8128 0001                  		or.b	d0,1(a0)
00019626 4EF9 0000 E756             		jmp	DisplaySprite
0001962C                            ; ===========================================================================
0001962C 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001962E 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00019630 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00019632 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00019634 0000                       		dc.w loc_18582-Obj73_ShipIndex
00019636                            ; ===========================================================================
00019636                            
00019636                            loc_18302:				; XREF: Obj73_ShipIndex
00019636 1028 003F                  		move.b	$3F(a0),d0
0001963A 5428 003F                  		addq.b	#2,$3F(a0)
0001963E 4EB9 0000 3416             		jsr	(CalcSine).l
00019644 E440                       		asr.w	#2,d0
00019646 3140 0012                  		move.w	d0,$12(a0)
0001964A 317C FF00 0010             		move.w	#-$100,$10(a0)
00019650 6100 F5AC                  		bsr.w	BossMove
00019654 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001965A 6600                       		bne.s	loc_18334
0001965C 5428 0025                  		addq.b	#2,$25(a0)
00019660 4228 0028                  		clr.b	$28(a0)
00019664 42A8 0010                  		clr.l	$10(a0)
00019668                            
00019668                            loc_18334:
00019668 4EB9 0000 33F0             		jsr	(RandomNumber).l
0001966E 1140 0034                  		move.b	d0,$34(a0)
00019672                            
00019672                            loc_1833E:
00019672 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019678 3168 0030 0008             		move.w	$30(a0),8(a0)
0001967E 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00019684 6400                       		bcc.s	locret_18390
00019686 4A28 0022                  		tst.b	$22(a0)
0001968A 6B00                       		bmi.s	loc_18392
0001968C 4A28 0020                  		tst.b	$20(a0)
00019690 6600                       		bne.s	locret_18390
00019692 4A28 003E                  		tst.b	$3E(a0)
00019696 6600                       		bne.s	loc_18374
00019698 117C 0028 003E             		move.b	#$28,$3E(a0)
0001969E 303C 00AC                  		move.w	#$AC,d0
000196A2 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play boss damage sound
000196A8                            
000196A8                            loc_18374:
000196A8 43F8 FB22                  		lea	($FFFFFB22).w,a1
000196AC 7000                       		moveq	#0,d0
000196AE 4A51                       		tst.w	(a1)
000196B0 6600                       		bne.s	loc_18382
000196B2 303C 0EEE                  		move.w	#$EEE,d0
000196B6                            
000196B6                            loc_18382:
000196B6 3280                       		move.w	d0,(a1)
000196B8 5328 003E                  		subq.b	#1,$3E(a0)
000196BC 6600                       		bne.s	locret_18390
000196BE 117C 000F 0020             		move.b	#$F,$20(a0)
000196C4                            
000196C4                            locret_18390:
000196C4 4E75                       		rts	
000196C6                            ; ===========================================================================
000196C6                            
000196C6                            loc_18392:				; XREF: loc_1833E
000196C6 7064                       		moveq	#100,d0
000196C8 6100 0000                  		bsr.w	AddPoints
000196CC 117C 0004 0025             		move.b	#4,$25(a0)
000196D2 317C 00B4 003C             		move.w	#$B4,$3C(a0)
000196D8 4268 0010                  		clr.w	$10(a0)
000196DC 4E75                       		rts	
000196DE                            ; ===========================================================================
000196DE                            
000196DE                            loc_183AA:				; XREF: Obj73_ShipIndex
000196DE 7000                       		moveq	#0,d0
000196E0 1028 0028                  		move.b	$28(a0),d0
000196E4 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
000196E8 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
000196EC 0228 0006 0028             		andi.b	#6,$28(a0)
000196F2 6000 FF7E                  		bra.w	loc_1833E
000196F6                            ; ===========================================================================
000196F6 0000                       off_183C2:	dc.w loc_183CA-off_183C2
000196F8 0000                       		dc.w Obj73_MakeLava2-off_183C2
000196FA 0000                       		dc.w loc_183CA-off_183C2
000196FC 0000                       		dc.w Obj73_MakeLava2-off_183C2
000196FE                            ; ===========================================================================
000196FE                            
000196FE                            loc_183CA:				; XREF: off_183C2
000196FE 4A68 0010                  		tst.w	$10(a0)
00019702 6600                       		bne.s	loc_183FE
00019704 7040                       		moveq	#$40,d0
00019706 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001970C 6700                       		beq.s	loc_183E6
0001970E 6500                       		bcs.s	loc_183DE
00019710 4440                       		neg.w	d0
00019712                            
00019712                            loc_183DE:
00019712 3140 0012                  		move.w	d0,$12(a0)
00019716 6000 F4E6                  		bra.w	BossMove
0001971A                            ; ===========================================================================
0001971A                            
0001971A                            loc_183E6:
0001971A 317C 0200 0010             		move.w	#$200,$10(a0)
00019720 317C 0100 0012             		move.w	#$100,$12(a0)
00019726 0828 0000 0022             		btst	#0,$22(a0)
0001972C 6600                       		bne.s	loc_183FE
0001972E 4468 0010                  		neg.w	$10(a0)
00019732                            
00019732                            loc_183FE:
00019732 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00019738 6400                       		bcc.s	Obj73_MakeLava
0001973A 6100 F4C2                  		bsr.w	BossMove
0001973E 5968 0012                  		subq.w	#4,$12(a0)
00019742                            
00019742                            Obj73_MakeLava:
00019742 5328 0034                  		subq.b	#1,$34(a0)
00019746 6400                       		bcc.s	loc_1845C
00019748 4EB9 0000 EBDC             		jsr	SingleObjLoad
0001974E 6600                       		bne.s	loc_1844A
00019750 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00019754 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
0001975A 4EB9 0000 33F0             		jsr	(RandomNumber).l
00019760 0280 0000 FFFF             		andi.l	#$FFFF,d0
00019766 80FC 0050                  		divu.w	#$50,d0
0001976A 4840                       		swap	d0
0001976C 0640 1878                  		addi.w	#$1878,d0
00019770 3340 0008                  		move.w	d0,8(a1)
00019774 EE09                       		lsr.b	#7,d1
00019776 337C 00FF 0028             		move.w	#$FF,$28(a1)
0001977C                            
0001977C                            loc_1844A:
0001977C 4EB9 0000 33F0             		jsr	(RandomNumber).l
00019782 0200 001F                  		andi.b	#$1F,d0
00019786 0600 0040                  		addi.b	#$40,d0
0001978A 1140 0034                  		move.b	d0,$34(a0)
0001978E                            
0001978E                            loc_1845C:
0001978E 0828 0000 0022             		btst	#0,$22(a0)
00019794 6700                       		beq.s	loc_18474
00019796 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001979C 6D00                       		blt.s	locret_1849C
0001979E 317C 1910 0030             		move.w	#$1910,$30(a0)
000197A4 6000                       		bra.s	loc_18482
000197A6                            ; ===========================================================================
000197A6                            
000197A6                            loc_18474:
000197A6 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
000197AC 6E00                       		bgt.s	locret_1849C
000197AE 317C 1830 0030             		move.w	#$1830,$30(a0)
000197B4                            
000197B4                            loc_18482:
000197B4 4268 0010                  		clr.w	$10(a0)
000197B8 317C FE80 0012             		move.w	#-$180,$12(a0)
000197BE 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000197C4 6400                       		bcc.s	loc_18498
000197C6 4468 0012                  		neg.w	$12(a0)
000197CA                            
000197CA                            loc_18498:
000197CA 5428 0028                  		addq.b	#2,$28(a0)
000197CE                            
000197CE                            locret_1849C:
000197CE 4E75                       		rts	
000197D0                            ; ===========================================================================
000197D0                            
000197D0                            Obj73_MakeLava2:			; XREF: off_183C2
000197D0 6100 F42C                  		bsr.w	BossMove
000197D4 3028 0038                  		move.w	$38(a0),d0
000197D8 0440 022C                  		subi.w	#$22C,d0
000197DC 6E00                       		bgt.s	locret_184F4
000197DE 303C 022C                  		move.w	#$22C,d0
000197E2 4A68 0012                  		tst.w	$12(a0)
000197E6 6700                       		beq.s	loc_184EA
000197E8 4268 0012                  		clr.w	$12(a0)
000197EC 317C 0050 003C             		move.w	#$50,$3C(a0)
000197F2 0868 0000 0022             		bchg	#0,$22(a0)
000197F8 4EB9 0000 EBDC             		jsr	SingleObjLoad
000197FE 6600                       		bne.s	loc_184EA
00019800 3368 0030 0008             		move.w	$30(a0),8(a1)
00019806 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001980C 0669 0018 000C             		addi.w	#$18,$C(a1)
00019812 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00019816 137C 0001 0028             		move.b	#1,$28(a1)
0001981C                            
0001981C                            loc_184EA:
0001981C 5368 003C                  		subq.w	#1,$3C(a0)
00019820 6600                       		bne.s	locret_184F4
00019822 5428 0028                  		addq.b	#2,$28(a0)
00019826                            
00019826                            locret_184F4:
00019826 4E75                       		rts	
00019828                            ; ===========================================================================
00019828                            
00019828                            loc_184F6:				; XREF: Obj73_ShipIndex
00019828 5368 003C                  		subq.w	#1,$3C(a0)
0001982C 6B00                       		bmi.s	loc_18500
0001982E 6000 F38C                  		bra.w	BossDefeated
00019832                            ; ===========================================================================
00019832                            
00019832                            loc_18500:
00019832 08E8 0000 0022             		bset	#0,$22(a0)
00019838 08A8 0007 0022             		bclr	#7,$22(a0)
0001983E 4268 0010                  		clr.w	$10(a0)
00019842 5428 0025                  		addq.b	#2,$25(a0)
00019846 317C FFDA 003C             		move.w	#-$26,$3C(a0)
0001984C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019850 6600                       		bne.s	locret_1852A
00019852 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019858 4268 0012                  		clr.w	$12(a0)
0001985C                            
0001985C                            locret_1852A:
0001985C 4E75                       		rts	
0001985E                            ; ===========================================================================
0001985E                            
0001985E                            loc_1852C:				; XREF: Obj73_ShipIndex
0001985E 5268 003C                  		addq.w	#1,$3C(a0)
00019862 6700                       		beq.s	loc_18544
00019864 6A00                       		bpl.s	loc_1854E
00019866 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
0001986C 6400                       		bcc.s	loc_18544
0001986E 0668 0018 0012             		addi.w	#$18,$12(a0)
00019874 6000                       		bra.s	loc_1857A
00019876                            ; ===========================================================================
00019876                            
00019876                            loc_18544:
00019876 4268 0012                  		clr.w	$12(a0)
0001987A 4268 003C                  		clr.w	$3C(a0)
0001987E 6000                       		bra.s	loc_1857A
00019880                            ; ===========================================================================
00019880                            
00019880                            loc_1854E:
00019880 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019886 6500                       		bcs.s	loc_18566
00019888 6700                       		beq.s	loc_1856C
0001988A 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019890 6500                       		bcs.s	loc_1857A
00019892 5428 0025                  		addq.b	#2,$25(a0)
00019896 6000                       		bra.s	loc_1857A
00019898                            ; ===========================================================================
00019898                            
00019898                            loc_18566:
00019898 5168 0012                  		subq.w	#8,$12(a0)
0001989C 6000                       		bra.s	loc_1857A
0001989E                            ; ===========================================================================
0001989E                            
0001989E                            loc_1856C:
0001989E 4268 0012                  		clr.w	$12(a0)
000198A2 303C 0083                  		move.w	#$83,d0
000198A6 4EB9 0000 1C74             		jsr	(PlaySound).l	; play MZ music
000198AC                            
000198AC                            loc_1857A:
000198AC 6100 F350                  		bsr.w	BossMove
000198B0 6000 FDC0                  		bra.w	loc_1833E
000198B4                            ; ===========================================================================
000198B4                            
000198B4                            loc_18582:				; XREF: Obj73_ShipIndex
000198B4 317C 0500 0010             		move.w	#$500,$10(a0)
000198BA 317C FFC0 0012             		move.w	#-$40,$12(a0)
000198C0 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
000198C6 6400                       		bcc.s	loc_1859C
000198C8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000198CC 6000                       		bra.s	loc_185A2
000198CE                            ; ===========================================================================
000198CE                            
000198CE                            loc_1859C:
000198CE 4A28 0001                  		tst.b	1(a0)
000198D2 6A00                       		bpl.s	Obj73_ShipDel
000198D4                            
000198D4                            loc_185A2:
000198D4 6100 F328                  		bsr.w	BossMove
000198D8 6000 FD98                  		bra.w	loc_1833E
000198DC                            ; ===========================================================================
000198DC                            
000198DC                            Obj73_ShipDel:
000198DC 4EF9 0000 E792             		jmp	DeleteObject
000198E2                            ; ===========================================================================
000198E2                            
000198E2                            Obj73_FaceMain:				; XREF: Obj73_Index
000198E2 7000                       		moveq	#0,d0
000198E4 7201                       		moveq	#1,d1
000198E6 2268 0034                  		movea.l	$34(a0),a1
000198EA 1029 0025                  		move.b	$25(a1),d0
000198EE 5540                       		subq.w	#2,d0
000198F0 6600                       		bne.s	loc_185D2
000198F2 0829 0001 0028             		btst	#1,$28(a1)
000198F8 6700                       		beq.s	loc_185DA
000198FA 4A69 0012                  		tst.w	$12(a1)
000198FE 6600                       		bne.s	loc_185DA
00019900 7204                       		moveq	#4,d1
00019902 6000                       		bra.s	loc_185EE
00019904                            ; ===========================================================================
00019904                            
00019904                            loc_185D2:
00019904 5500                       		subq.b	#2,d0
00019906 6B00                       		bmi.s	loc_185DA
00019908 720A                       		moveq	#$A,d1
0001990A 6000                       		bra.s	loc_185EE
0001990C                            ; ===========================================================================
0001990C                            
0001990C                            loc_185DA:
0001990C 4A29 0020                  		tst.b	$20(a1)
00019910 6600                       		bne.s	loc_185E4
00019912 7205                       		moveq	#5,d1
00019914 6000                       		bra.s	loc_185EE
00019916                            ; ===========================================================================
00019916                            
00019916                            loc_185E4:
00019916 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001991C 6500                       		bcs.s	loc_185EE
0001991E 7204                       		moveq	#4,d1
00019920                            
00019920                            loc_185EE:
00019920 1141 001C                  		move.b	d1,$1C(a0)
00019924 5900                       		subq.b	#4,d0
00019926 6600                       		bne.s	loc_18602
00019928 117C 0006 001C             		move.b	#6,$1C(a0)
0001992E 4A28 0001                  		tst.b	1(a0)
00019932 6A00                       		bpl.s	Obj73_FaceDel
00019934                            
00019934                            loc_18602:
00019934 6000                       		bra.s	Obj73_Display
00019936                            ; ===========================================================================
00019936                            
00019936                            Obj73_FaceDel:
00019936 4EF9 0000 E792             		jmp	DeleteObject
0001993C                            ; ===========================================================================
0001993C                            
0001993C                            Obj73_FlameMain:			; XREF: Obj73_Index
0001993C 117C 0007 001C             		move.b	#7,$1C(a0)
00019942 2268 0034                  		movea.l	$34(a0),a1
00019946 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001994C 6D00                       		blt.s	loc_1862A
0001994E 117C 000B 001C             		move.b	#$B,$1C(a0)
00019954 4A28 0001                  		tst.b	1(a0)
00019958 6A00                       		bpl.s	Obj73_FlameDel
0001995A 6000                       		bra.s	loc_18636
0001995C                            ; ===========================================================================
0001995C                            
0001995C                            loc_1862A:
0001995C 4A69 0010                  		tst.w	$10(a1)
00019960 6700                       		beq.s	loc_18636
00019962 117C 0008 001C             		move.b	#8,$1C(a0)
00019968                            
00019968                            loc_18636:
00019968 6000                       		bra.s	Obj73_Display
0001996A                            ; ===========================================================================
0001996A                            
0001996A                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0001996A 4EF9 0000 E792             		jmp	DeleteObject
00019970                            ; ===========================================================================
00019970                            
00019970                            Obj73_Display:
00019970 43F9 0001 9040             		lea	(Ani_Eggman).l,a1
00019976 4EB9 0000 B7A4             		jsr	AnimateSprite
0001997C                            
0001997C                            loc_1864A:
0001997C 2268 0034                  		movea.l	$34(a0),a1
00019980 3169 0008 0008             		move.w	8(a1),8(a0)
00019986 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001998C 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019992 7003                       		moveq	#3,d0
00019994 C028 0022                  		and.b	$22(a0),d0
00019998 0228 00FC 0001             		andi.b	#-4,1(a0)
0001999E 8128 0001                  		or.b	d0,1(a0)
000199A2 4EF9 0000 E756             		jmp	DisplaySprite
000199A8                            ; ===========================================================================
000199A8                            
000199A8                            Obj73_TubeMain:				; XREF: Obj73_Index
000199A8 2268 0034                  		movea.l	$34(a0),a1
000199AC 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000199B2 6600                       		bne.s	loc_18688
000199B4 4A28 0001                  		tst.b	1(a0)
000199B8 6A00                       		bpl.s	Obj73_TubeDel
000199BA                            
000199BA                            loc_18688:
000199BA 217C 0001 916C 0004        		move.l	#Map_BossItems,4(a0)
000199C2 317C 246C 0002             		move.w	#$246C,2(a0)
000199C8 117C 0004 001A             		move.b	#4,$1A(a0)
000199CE 60AC                       		bra.s	loc_1864A
000199D0                            ; ===========================================================================
000199D0                            
000199D0                            Obj73_TubeDel:
000199D0 4EF9 0000 E792             		jmp	DeleteObject
000199D6                            ; ===========================================================================
000199D6                            ; ---------------------------------------------------------------------------
000199D6                            ; Object 74 - lava that	Eggman drops (MZ)
000199D6                            ; ---------------------------------------------------------------------------
000199D6                            
000199D6                            Obj74:					; XREF: Obj_Index
000199D6 7000                       		moveq	#0,d0
000199D8 1028 0024                  		move.b	$24(a0),d0
000199DC 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
000199E0 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
000199E4 4EF9 0000 E756             		jmp	DisplaySprite
000199EA                            ; ===========================================================================
000199EA 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
000199EC 0000                       		dc.w Obj74_Action-Obj74_Index
000199EE 0000                       		dc.w loc_18886-Obj74_Index
000199F0 0000                       		dc.w Obj74_Delete3-Obj74_Index
000199F2                            ; ===========================================================================
000199F2                            
000199F2                            Obj74_Main:				; XREF: Obj74_Index
000199F2 117C 0008 0016             		move.b	#8,$16(a0)
000199F8 117C 0008 0017             		move.b	#8,$17(a0)
000199FE 217C 0000 C3A2 0004        		move.l	#Map_obj14,4(a0)
00019A06 317C 0345 0002             		move.w	#$345,2(a0)
00019A0C 117C 0004 0001             		move.b	#4,1(a0)
00019A12 117C 0005 0018             		move.b	#5,$18(a0)
00019A18 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019A1E 117C 0008 0019             		move.b	#8,$19(a0)
00019A24 5428 0024                  		addq.b	#2,$24(a0)
00019A28 4A28 0028                  		tst.b	$28(a0)
00019A2C 6600                       		bne.s	loc_1870A
00019A2E 117C 008B 0020             		move.b	#$8B,$20(a0)
00019A34 5428 0024                  		addq.b	#2,$24(a0)
00019A38 6000 0000                  		bra.w	loc_18886
00019A3C                            ; ===========================================================================
00019A3C                            
00019A3C                            loc_1870A:
00019A3C 117C 001E 0029             		move.b	#$1E,$29(a0)
00019A42 303C 00AE                  		move.w	#$AE,d0
00019A46 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play lava sound
00019A4C                            
00019A4C                            Obj74_Action:				; XREF: Obj74_Index
00019A4C 7000                       		moveq	#0,d0
00019A4E 1028 0025                  		move.b	$25(a0),d0
00019A52 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00019A56 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00019A5A 4EB9 0000 E730             		jsr	SpeedToPos
00019A60 43F9 0000 F610             		lea	(Ani_obj14).l,a1
00019A66 4EB9 0000 B7A4             		jsr	AnimateSprite
00019A6C 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00019A72 6200                       		bhi.s	Obj74_Delete
00019A74 4E75                       		rts	
00019A76                            ; ===========================================================================
00019A76                            
00019A76                            Obj74_Delete:
00019A76 4EF9 0000 E792             		jmp	DeleteObject
00019A7C                            ; ===========================================================================
00019A7C 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00019A7E 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00019A80 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00019A82 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00019A84                            ; ===========================================================================
00019A84                            
00019A84                            Obj74_Drop:				; XREF: Obj74_Index2
00019A84 08E8 0001 0022             		bset	#1,$22(a0)
00019A8A 5328 0029                  		subq.b	#1,$29(a0)
00019A8E 6A00                       		bpl.s	locret_18780
00019A90 117C 008B 0020             		move.b	#$8B,$20(a0)
00019A96 4228 0028                  		clr.b	$28(a0)
00019A9A 0668 0018 0012             		addi.w	#$18,$12(a0)
00019AA0 08A8 0001 0022             		bclr	#1,$22(a0)
00019AA6 6100 C618                  		bsr.w	ObjHitFloor
00019AAA 4A41                       		tst.w	d1
00019AAC 6A00                       		bpl.s	locret_18780
00019AAE 5428 0025                  		addq.b	#2,$25(a0)
00019AB2                            
00019AB2                            locret_18780:
00019AB2 4E75                       		rts	
00019AB4                            ; ===========================================================================
00019AB4                            
00019AB4                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00019AB4 5568 000C                  		subq.w	#2,$C(a0)
00019AB8 08E8 0007 0002             		bset	#7,2(a0)
00019ABE 317C 00A0 0010             		move.w	#$A0,$10(a0)
00019AC4 4268 0012                  		clr.w	$12(a0)
00019AC8 3168 0008 0030             		move.w	8(a0),$30(a0)
00019ACE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019AD4 117C 0003 0029             		move.b	#3,$29(a0)
00019ADA 4EB9 0000 EBF2             		jsr	SingleObjLoad2
00019AE0 6600                       		bne.s	loc_187CA
00019AE2 47D1                       		lea	(a1),a3
00019AE4 45D0                       		lea	(a0),a2
00019AE6 7003                       		moveq	#3,d0
00019AE8                            
00019AE8                            Obj74_Loop:
00019AE8 26DA                       		move.l	(a2)+,(a3)+
00019AEA 26DA                       		move.l	(a2)+,(a3)+
00019AEC 26DA                       		move.l	(a2)+,(a3)+
00019AEE 26DA                       		move.l	(a2)+,(a3)+
00019AF0 51C8 FFF6                  		dbf	d0,Obj74_Loop
00019AF4                            
00019AF4 4469 0010                  		neg.w	$10(a1)
00019AF8 5429 0025                  		addq.b	#2,$25(a1)
00019AFC                            
00019AFC                            loc_187CA:
00019AFC 5428 0025                  		addq.b	#2,$25(a0)
00019B00 4E75                       		rts	
00019B02                            
00019B02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019B02                            
00019B02                            
00019B02                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00019B02 4EB9 0000 EBF2             		jsr	SingleObjLoad2
00019B08 6600                       		bne.s	locret_187EE
00019B0A 3368 0008 0008             		move.w	8(a0),8(a1)
00019B10 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019B16 12BC 0074                  		move.b	#$74,(a1)
00019B1A 337C 0067 0028             		move.w	#$67,$28(a1)
00019B20                            
00019B20                            locret_187EE:
00019B20 4E75                       		rts	
00019B22                            ; End of function Obj74_Duplicate2
00019B22                            
00019B22                            ; ===========================================================================
00019B22                            
00019B22                            Obj74_Duplicate:			; XREF: Obj74_Index2
00019B22 6100 C59C                  		bsr.w	ObjHitFloor
00019B26 4A41                       		tst.w	d1
00019B28 6A00                       		bpl.s	loc_18826
00019B2A 3028 0008                  		move.w	8(a0),d0
00019B2E 0C40 1940                  		cmpi.w	#$1940,d0
00019B32 6E00                       		bgt.s	loc_1882C
00019B34 3228 0030                  		move.w	$30(a0),d1
00019B38 B240                       		cmp.w	d0,d1
00019B3A 6700                       		beq.s	loc_1881E
00019B3C 0240 0010                  		andi.w	#$10,d0
00019B40 0241 0010                  		andi.w	#$10,d1
00019B44 B240                       		cmp.w	d0,d1
00019B46 6700                       		beq.s	loc_1881E
00019B48 61B8                       		bsr.s	Obj74_Duplicate2
00019B4A 3168 0008 0032             		move.w	8(a0),$32(a0)
00019B50                            
00019B50                            loc_1881E:
00019B50 3168 0008 0030             		move.w	8(a0),$30(a0)
00019B56 4E75                       		rts	
00019B58                            ; ===========================================================================
00019B58                            
00019B58                            loc_18826:
00019B58 5428 0025                  		addq.b	#2,$25(a0)
00019B5C 4E75                       		rts	
00019B5E                            ; ===========================================================================
00019B5E                            
00019B5E                            loc_1882C:
00019B5E 5428 0024                  		addq.b	#2,$24(a0)
00019B62 4E75                       		rts	
00019B64                            ; ===========================================================================
00019B64                            
00019B64                            Obj74_FallEdge:				; XREF: Obj74_Index2
00019B64 08A8 0001 0022             		bclr	#1,$22(a0)
00019B6A 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00019B70 3028 0008                  		move.w	8(a0),d0
00019B74 9068 0032                  		sub.w	$32(a0),d0
00019B78 6A00                       		bpl.s	loc_1884A
00019B7A 4440                       		neg.w	d0
00019B7C                            
00019B7C                            loc_1884A:
00019B7C 0C40 0012                  		cmpi.w	#$12,d0
00019B80 6600                       		bne.s	loc_18856
00019B82 08A8 0007 0002             		bclr	#7,2(a0)
00019B88                            
00019B88                            loc_18856:
00019B88 6100 C536                  		bsr.w	ObjHitFloor
00019B8C 4A41                       		tst.w	d1
00019B8E 6A00                       		bpl.s	locret_1887E
00019B90 5328 0029                  		subq.b	#1,$29(a0)
00019B94 6700                       		beq.s	Obj74_Delete2
00019B96 4268 0012                  		clr.w	$12(a0)
00019B9A 3168 0032 0008             		move.w	$32(a0),8(a0)
00019BA0 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019BA6 08E8 0007 0002             		bset	#7,2(a0)
00019BAC 5528 0025                  		subq.b	#2,$25(a0)
00019BB0                            
00019BB0                            locret_1887E:
00019BB0 4E75                       		rts	
00019BB2                            ; ===========================================================================
00019BB2                            
00019BB2                            Obj74_Delete2:
00019BB2 4EF9 0000 E792             		jmp	DeleteObject
00019BB8                            ; ===========================================================================
00019BB8                            
00019BB8                            loc_18886:				; XREF: Obj74_Index
00019BB8 08E8 0007 0002             		bset	#7,2(a0)
00019BBE 5328 0029                  		subq.b	#1,$29(a0)
00019BC2 6600                       		bne.s	Obj74_Animate
00019BC4 117C 0001 001C             		move.b	#1,$1C(a0)
00019BCA 5968 000C                  		subq.w	#4,$C(a0)
00019BCE 4228 0020                  		clr.b	$20(a0)
00019BD2                            
00019BD2                            Obj74_Animate:
00019BD2 43F9 0000 F610             		lea	(Ani_obj14).l,a1
00019BD8 4EF9 0000 B7A4             		jmp	AnimateSprite
00019BDE                            ; ===========================================================================
00019BDE                            
00019BDE                            Obj74_Delete3:				; XREF: Obj74_Index
00019BDE 4EF9 0000 E792             		jmp	DeleteObject
00019BE4                            ; ===========================================================================
00019BE4                            
00019BE4                            Obj7A_Delete:
00019BE4 4EF9 0000 E792             		jmp	DeleteObject
00019BEA                            ; ===========================================================================
00019BEA                            ; ---------------------------------------------------------------------------
00019BEA                            ; Object 7A - Eggman (SLZ)
00019BEA                            ; ---------------------------------------------------------------------------
00019BEA                            
00019BEA                            Obj7A:					; XREF: Obj_Index
00019BEA 7000                       		moveq	#0,d0
00019BEC 1028 0024                  		move.b	$24(a0),d0
00019BF0 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00019BF4 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00019BF8                            ; ===========================================================================
00019BF8 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00019BFA 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00019BFC 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00019BFE 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00019C00 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00019C02                            
00019C02 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019C05 0401 04                    		dc.b 4,	1, 4
00019C08 0607 04                    		dc.b 6,	7, 4
00019C0B 0800 03                    		dc.b 8,	0, 3
00019C0E                            ; ===========================================================================
00019C0E                            
00019C0E                            Obj7A_Main:				; XREF: Obj7A_Index
00019C0E 317C 2188 0008             		move.w	#$2188,8(a0)
00019C14 317C 0228 000C             		move.w	#$228,$C(a0)
00019C1A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019C20 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019C26 117C 000F 0020             		move.b	#$F,$20(a0)
00019C2C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019C32 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00019C36 2248                       		movea.l	a0,a1
00019C38 7203                       		moveq	#3,d1
00019C3A 6000                       		bra.s	Obj7A_LoadBoss
00019C3C                            ; ===========================================================================
00019C3C                            
00019C3C                            Obj7A_Loop:
00019C3C 4EB9 0000 EBF2             		jsr	SingleObjLoad2
00019C42 6600                       		bne.s	loc_1895C
00019C44 12BC 007A                  		move.b	#$7A,0(a1)
00019C48 3368 0008 0008             		move.w	8(a0),8(a1)
00019C4E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C54                            
00019C54                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00019C54 08A8 0000 0022             		bclr	#0,$22(a0)
00019C5A 4229 0025                  		clr.b	$25(a1)
00019C5E 135A 0024                  		move.b	(a2)+,$24(a1)
00019C62 135A 001C                  		move.b	(a2)+,$1C(a1)
00019C66 135A 0018                  		move.b	(a2)+,$18(a1)
00019C6A 237C 0001 90A4 0004        		move.l	#Map_Eggman,4(a1)
00019C72 337C 0400 0002             		move.w	#$400,2(a1)
00019C78 137C 0004 0001             		move.b	#4,1(a1)
00019C7E 137C 0020 0019             		move.b	#$20,$19(a1)
00019C84 2348 0034                  		move.l	a0,$34(a1)
00019C88 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00019C8C                            
00019C8C                            loc_1895C:
00019C8C 43F8 D040                  		lea	($FFFFD040).w,a1
00019C90 45E8 002A                  		lea	$2A(a0),a2
00019C94 705E                       		moveq	#$5E,d0
00019C96 723E                       		moveq	#$3E,d1
00019C98                            
00019C98                            loc_18968:
00019C98 B011                       		cmp.b	(a1),d0
00019C9A 6600                       		bne.s	loc_18974
00019C9C 4A29 0028                  		tst.b	$28(a1)
00019CA0 6700                       		beq.s	loc_18974
00019CA2 34C9                       		move.w	a1,(a2)+
00019CA4                            
00019CA4                            loc_18974:
00019CA4 D2FC 0040                  		adda.w	#$40,a1
00019CA8 51C9 FFEE                  		dbf	d1,loc_18968
00019CAC                            
00019CAC                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00019CAC 7000                       		moveq	#0,d0
00019CAE 1028 0025                  		move.b	$25(a0),d0
00019CB2 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00019CB6 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00019CBA 43F9 0001 9040             		lea	(Ani_Eggman).l,a1
00019CC0 4EB9 0000 B7A4             		jsr	AnimateSprite
00019CC6 7003                       		moveq	#3,d0
00019CC8 C028 0022                  		and.b	$22(a0),d0
00019CCC 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019CD2 8128 0001                  		or.b	d0,1(a0)
00019CD6 4EF9 0000 E756             		jmp	DisplaySprite
00019CDC                            ; ===========================================================================
00019CDC 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00019CDE 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00019CE0 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00019CE2 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00019CE4 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00019CE6 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00019CE8                            ; ===========================================================================
00019CE8                            
00019CE8                            loc_189B8:				; XREF: Obj7A_ShipIndex
00019CE8 317C FF00 0010             		move.w	#-$100,$10(a0)
00019CEE 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00019CF4 6400                       		bcc.s	loc_189CA
00019CF6 5428 0025                  		addq.b	#2,$25(a0)
00019CFA                            
00019CFA                            loc_189CA:
00019CFA 6100 EF02                  		bsr.w	BossMove
00019CFE 1028 003F                  		move.b	$3F(a0),d0
00019D02 5428 003F                  		addq.b	#2,$3F(a0)
00019D06 4EB9 0000 3416             		jsr	(CalcSine).l
00019D0C EC40                       		asr.w	#6,d0
00019D0E D068 0038                  		add.w	$38(a0),d0
00019D12 3140 000C                  		move.w	d0,$C(a0)
00019D16 3168 0030 0008             		move.w	$30(a0),8(a0)
00019D1C 6000                       		bra.s	loc_189FE
00019D1E                            ; ===========================================================================
00019D1E                            
00019D1E                            loc_189EE:
00019D1E 6100 EEDE                  		bsr.w	BossMove
00019D22 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019D28 3168 0030 0008             		move.w	$30(a0),8(a0)
00019D2E                            
00019D2E                            loc_189FE:
00019D2E 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019D34 6400                       		bcc.s	locret_18A44
00019D36 4A28 0022                  		tst.b	$22(a0)
00019D3A 6B00                       		bmi.s	loc_18A46
00019D3C 4A28 0020                  		tst.b	$20(a0)
00019D40 6600                       		bne.s	locret_18A44
00019D42 4A28 003E                  		tst.b	$3E(a0)
00019D46 6600                       		bne.s	loc_18A28
00019D48 117C 0020 003E             		move.b	#$20,$3E(a0)
00019D4E 303C 00AC                  		move.w	#$AC,d0
00019D52 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019D58                            
00019D58                            loc_18A28:
00019D58 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019D5C 7000                       		moveq	#0,d0
00019D5E 4A51                       		tst.w	(a1)
00019D60 6600                       		bne.s	loc_18A36
00019D62 303C 0EEE                  		move.w	#$EEE,d0
00019D66                            
00019D66                            loc_18A36:
00019D66 3280                       		move.w	d0,(a1)
00019D68 5328 003E                  		subq.b	#1,$3E(a0)
00019D6C 6600                       		bne.s	locret_18A44
00019D6E 117C 000F 0020             		move.b	#$F,$20(a0)
00019D74                            
00019D74                            locret_18A44:
00019D74 4E75                       		rts	
00019D76                            ; ===========================================================================
00019D76                            
00019D76                            loc_18A46:
00019D76 7064                       		moveq	#100,d0
00019D78 6100 0000                  		bsr.w	AddPoints
00019D7C 117C 0006 0025             		move.b	#6,$25(a0)
00019D82 117C 0078 003C             		move.b	#$78,$3C(a0)
00019D88 4268 0010                  		clr.w	$10(a0)
00019D8C 4E75                       		rts	
00019D8E                            ; ===========================================================================
00019D8E                            
00019D8E                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019D8E 3028 0030                  		move.w	$30(a0),d0
00019D92 317C 0200 0010             		move.w	#$200,$10(a0)
00019D98 0828 0000 0022             		btst	#0,$22(a0)
00019D9E 6600                       		bne.s	loc_18A7C
00019DA0 4468 0010                  		neg.w	$10(a0)
00019DA4 0C40 2008                  		cmpi.w	#$2008,d0
00019DA8 6E00                       		bgt.s	loc_18A88
00019DAA 6000                       		bra.s	loc_18A82
00019DAC                            ; ===========================================================================
00019DAC                            
00019DAC                            loc_18A7C:
00019DAC 0C40 2138                  		cmpi.w	#$2138,d0
00019DB0 6D00                       		blt.s	loc_18A88
00019DB2                            
00019DB2                            loc_18A82:
00019DB2 0868 0000 0022             		bchg	#0,$22(a0)
00019DB8                            
00019DB8                            loc_18A88:
00019DB8 3028 0008                  		move.w	8(a0),d0
00019DBC 72FF                       		moveq	#-1,d1
00019DBE 7402                       		moveq	#2,d2
00019DC0 45E8 002A                  		lea	$2A(a0),a2
00019DC4 7828                       		moveq	#$28,d4
00019DC6 4A68 0010                  		tst.w	$10(a0)
00019DCA 6A00                       		bpl.s	loc_18A9E
00019DCC 4444                       		neg.w	d4
00019DCE                            
00019DCE                            loc_18A9E:
00019DCE 321A                       		move.w	(a2)+,d1
00019DD0 2641                       		movea.l	d1,a3
00019DD2 082B 0003 0022             		btst	#3,$22(a3)
00019DD8 6600                       		bne.s	loc_18AB4
00019DDA 362B 0008                  		move.w	8(a3),d3
00019DDE D644                       		add.w	d4,d3
00019DE0 9640                       		sub.w	d0,d3
00019DE2 6700                       		beq.s	loc_18AC0
00019DE4                            
00019DE4                            loc_18AB4:
00019DE4 51CA FFE8                  		dbf	d2,loc_18A9E
00019DE8                            
00019DE8 1142 0028                  		move.b	d2,$28(a0)
00019DEC 6000 FF0C                  		bra.w	loc_189CA
00019DF0                            ; ===========================================================================
00019DF0                            
00019DF0                            loc_18AC0:
00019DF0 1142 0028                  		move.b	d2,$28(a0)
00019DF4 5428 0025                  		addq.b	#2,$25(a0)
00019DF8 117C 0028 003C             		move.b	#$28,$3C(a0)
00019DFE 6000 FEFA                  		bra.w	loc_189CA
00019E02                            ; ===========================================================================
00019E02                            
00019E02                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00019E02 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00019E08 6600                       		bne.s	loc_18B36
00019E0A 70FF                       		moveq	#-1,d0
00019E0C 1028 0028                  		move.b	$28(a0),d0
00019E10 4880                       		ext.w	d0
00019E12 6B00                       		bmi.s	loc_18B40
00019E14 5540                       		subq.w	#2,d0
00019E16 4440                       		neg.w	d0
00019E18 D040                       		add.w	d0,d0
00019E1A 43E8 002A                  		lea	$2A(a0),a1
00019E1E 3031 0000                  		move.w	(a1,d0.w),d0
00019E22 2440                       		movea.l	d0,a2
00019E24 43F8 D040                  		lea	($FFFFD040).w,a1
00019E28 723E                       		moveq	#$3E,d1
00019E2A                            
00019E2A                            loc_18AFA:
00019E2A B0A9 003C                  		cmp.l	$3C(a1),d0
00019E2E 6700                       		beq.s	loc_18B40
00019E30 D2FC 0040                  		adda.w	#$40,a1
00019E34 51C9 FFF4                  		dbf	d1,loc_18AFA
00019E38                            
00019E38 2F08                       		move.l	a0,-(sp)
00019E3A 41D2                       		lea	(a2),a0
00019E3C 4EB9 0000 EBF2             		jsr	SingleObjLoad2
00019E42 205F                       		movea.l	(sp)+,a0
00019E44 6600                       		bne.s	loc_18B40
00019E46 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019E4A 3368 0008 0008             		move.w	8(a0),8(a1)
00019E50 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019E56 0669 0020 000C             		addi.w	#$20,$C(a1)
00019E5C 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019E62 234A 003C                  		move.l	a2,$3C(a1)
00019E66                            
00019E66                            loc_18B36:
00019E66 5328 003C                  		subq.b	#1,$3C(a0)
00019E6A 6700                       		beq.s	loc_18B40
00019E6C 6000 FEC0                  		bra.w	loc_189FE
00019E70                            ; ===========================================================================
00019E70                            
00019E70                            loc_18B40:
00019E70 5528 0025                  		subq.b	#2,$25(a0)
00019E74 6000 FE84                  		bra.w	loc_189CA
00019E78                            ; ===========================================================================
00019E78                            
00019E78                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019E78 5328 003C                  		subq.b	#1,$3C(a0)
00019E7C 6B00                       		bmi.s	loc_18B52
00019E7E 6000 ED3C                  		bra.w	BossDefeated
00019E82                            ; ===========================================================================
00019E82                            
00019E82                            loc_18B52:
00019E82 5428 0025                  		addq.b	#2,$25(a0)
00019E86 4268 0012                  		clr.w	$12(a0)
00019E8A 08E8 0000 0022             		bset	#0,$22(a0)
00019E90 08A8 0007 0022             		bclr	#7,$22(a0)
00019E96 4268 0010                  		clr.w	$10(a0)
00019E9A 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00019EA0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019EA4 6600                       		bne.s	loc_18B7C
00019EA6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019EAC                            
00019EAC                            loc_18B7C:
00019EAC 6000 FE80                  		bra.w	loc_189FE
00019EB0                            ; ===========================================================================
00019EB0                            
00019EB0                            loc_18B80:				; XREF: Obj7A_ShipIndex
00019EB0 5228 003C                  		addq.b	#1,$3C(a0)
00019EB4 6700                       		beq.s	loc_18B90
00019EB6 6A00                       		bpl.s	loc_18B96
00019EB8 0668 0018 0012             		addi.w	#$18,$12(a0)
00019EBE 6000                       		bra.s	loc_18BC2
00019EC0                            ; ===========================================================================
00019EC0                            
00019EC0                            loc_18B90:
00019EC0 4268 0012                  		clr.w	$12(a0)
00019EC4 6000                       		bra.s	loc_18BC2
00019EC6                            ; ===========================================================================
00019EC6                            
00019EC6                            loc_18B96:
00019EC6 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00019ECC 6500                       		bcs.s	loc_18BAE
00019ECE 6700                       		beq.s	loc_18BB4
00019ED0 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00019ED6 6500                       		bcs.s	loc_18BC2
00019ED8 5428 0025                  		addq.b	#2,$25(a0)
00019EDC 6000                       		bra.s	loc_18BC2
00019EDE                            ; ===========================================================================
00019EDE                            
00019EDE                            loc_18BAE:
00019EDE 5168 0012                  		subq.w	#8,$12(a0)
00019EE2 6000                       		bra.s	loc_18BC2
00019EE4                            ; ===========================================================================
00019EE4                            
00019EE4                            loc_18BB4:
00019EE4 4268 0012                  		clr.w	$12(a0)
00019EE8 303C 0084                  		move.w	#$84,d0
00019EEC 4EB9 0000 1C74             		jsr	(PlaySound).l	; play SLZ music
00019EF2                            
00019EF2                            loc_18BC2:
00019EF2 6000 FE2A                  		bra.w	loc_189EE
00019EF6                            ; ===========================================================================
00019EF6                            
00019EF6                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00019EF6 317C 0400 0010             		move.w	#$400,$10(a0)
00019EFC 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019F02 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00019F08 6400                       		bcc.s	loc_18BE0
00019F0A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019F0E 6000                       		bra.s	loc_18BE8
00019F10                            ; ===========================================================================
00019F10                            
00019F10                            loc_18BE0:
00019F10 4A28 0001                  		tst.b	1(a0)
00019F14 6A00 FCCE                  		bpl.w	Obj7A_Delete
00019F18                            
00019F18                            loc_18BE8:
00019F18 6100 ECE4                  		bsr.w	BossMove
00019F1C 6000 FDDC                  		bra.w	loc_189CA
00019F20                            ; ===========================================================================
00019F20                            
00019F20                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00019F20 7000                       		moveq	#0,d0
00019F22 7201                       		moveq	#1,d1
00019F24 2268 0034                  		movea.l	$34(a0),a1
00019F28 1029 0025                  		move.b	$25(a1),d0
00019F2C 0C00 0006                  		cmpi.b	#6,d0
00019F30 6B00                       		bmi.s	loc_18C06
00019F32 720A                       		moveq	#$A,d1
00019F34 6000                       		bra.s	loc_18C1A
00019F36                            ; ===========================================================================
00019F36                            
00019F36                            loc_18C06:
00019F36 4A29 0020                  		tst.b	$20(a1)
00019F3A 6600                       		bne.s	loc_18C10
00019F3C 7205                       		moveq	#5,d1
00019F3E 6000                       		bra.s	loc_18C1A
00019F40                            ; ===========================================================================
00019F40                            
00019F40                            loc_18C10:
00019F40 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019F46 6500                       		bcs.s	loc_18C1A
00019F48 7204                       		moveq	#4,d1
00019F4A                            
00019F4A                            loc_18C1A:
00019F4A 1141 001C                  		move.b	d1,$1C(a0)
00019F4E 0C00 000A                  		cmpi.b	#$A,d0
00019F52 6600                       		bne.s	loc_18C32
00019F54 117C 0006 001C             		move.b	#6,$1C(a0)
00019F5A 4A28 0001                  		tst.b	1(a0)
00019F5E 6A00 FC84                  		bpl.w	Obj7A_Delete
00019F62                            
00019F62                            loc_18C32:
00019F62 6000                       		bra.s	loc_18C6C
00019F64                            ; ===========================================================================
00019F64                            
00019F64                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019F64 117C 0008 001C             		move.b	#8,$1C(a0)
00019F6A 2268 0034                  		movea.l	$34(a0),a1
00019F6E 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019F74 6600                       		bne.s	loc_18C56
00019F76 4A28 0001                  		tst.b	1(a0)
00019F7A 6A00 FC68                  		bpl.w	Obj7A_Delete
00019F7E 117C 000B 001C             		move.b	#$B,$1C(a0)
00019F84 6000                       		bra.s	loc_18C6C
00019F86                            ; ===========================================================================
00019F86                            
00019F86                            loc_18C56:
00019F86 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019F8C 6E00                       		bgt.s	loc_18C6C
00019F8E 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019F94 6D00                       		blt.s	loc_18C6C
00019F96 117C 0007 001C             		move.b	#7,$1C(a0)
00019F9C                            
00019F9C                            loc_18C6C:
00019F9C 43F9 0001 9040             		lea	(Ani_Eggman).l,a1
00019FA2 4EB9 0000 B7A4             		jsr	AnimateSprite
00019FA8                            
00019FA8                            loc_18C78:
00019FA8 2268 0034                  		movea.l	$34(a0),a1
00019FAC 3169 0008 0008             		move.w	8(a1),8(a0)
00019FB2 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019FB8 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019FBE 7003                       		moveq	#3,d0
00019FC0 C028 0022                  		and.b	$22(a0),d0
00019FC4 0228 00FC 0001             		andi.b	#-4,1(a0)
00019FCA 8128 0001                  		or.b	d0,1(a0)
00019FCE 4EF9 0000 E756             		jmp	DisplaySprite
00019FD4                            ; ===========================================================================
00019FD4                            
00019FD4                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00019FD4 2268 0034                  		movea.l	$34(a0),a1
00019FD8 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019FDE 6600                       		bne.s	loc_18CB8
00019FE0 4A28 0001                  		tst.b	1(a0)
00019FE4 6A00 FBFE                  		bpl.w	Obj7A_Delete
00019FE8                            
00019FE8                            loc_18CB8:
00019FE8 217C 0001 916C 0004        		move.l	#Map_BossItems,4(a0)
00019FF0 317C 246C 0002             		move.w	#$246C,2(a0)
00019FF6 117C 0003 001A             		move.b	#3,$1A(a0)
00019FFC 60AA                       		bra.s	loc_18C78
00019FFE                            ; ===========================================================================
00019FFE                            ; ---------------------------------------------------------------------------
00019FFE                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00019FFE                            ; ---------------------------------------------------------------------------
00019FFE                            
00019FFE                            Obj7B:					; XREF: Obj_Index
00019FFE 7000                       		moveq	#0,d0
0001A000 1028 0024                  		move.b	$24(a0),d0
0001A004 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
0001A008 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001A00C 3028 0030                  		move.w	$30(a0),d0
0001A010 0240 FF80                  		andi.w	#$FF80,d0
0001A014 3238 F700                  		move.w	($FFFFF700).w,d1
0001A018 0441 0080                  		subi.w	#$80,d1
0001A01C 0241 FF80                  		andi.w	#$FF80,d1
0001A020 9041                       		sub.w	d1,d0
0001A022 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001A026 0C40 0280                  		cmpi.w	#$280,d0
0001A02A 6200 FBB8                  		bhi.w	Obj7A_Delete
0001A02E 4EF9 0000 E756             		jmp	DisplaySprite
0001A034                            ; ===========================================================================
0001A034 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001A036 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001A038 0000                       		dc.w loc_18DC6-Obj7B_Index
0001A03A 0000                       		dc.w loc_18EAA-Obj7B_Index
0001A03C 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001A03E 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001A040                            ; ===========================================================================
0001A040                            
0001A040                            Obj7B_Main:				; XREF: Obj7B_Index
0001A040 217C 0001 2B22 0004        		move.l	#Map_obj5Ea,4(a0)
0001A048 317C 0518 0002             		move.w	#$518,2(a0)
0001A04E 117C 0001 001A             		move.b	#1,$1A(a0)
0001A054 0028 0004 0001             		ori.b	#4,1(a0)
0001A05A 117C 0004 0018             		move.b	#4,$18(a0)
0001A060 117C 008B 0020             		move.b	#$8B,$20(a0)
0001A066 117C 000C 0019             		move.b	#$C,$19(a0)
0001A06C 2268 003C                  		movea.l	$3C(a0),a1
0001A070 3169 0008 0030             		move.w	8(a1),$30(a0)
0001A076 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001A07C 08E8 0000 0022             		bset	#0,$22(a0)
0001A082 3028 0008                  		move.w	8(a0),d0
0001A086 B069 0008                  		cmp.w	8(a1),d0
0001A08A 6E00                       		bgt.s	loc_18D68
0001A08C 08A8 0000 0022             		bclr	#0,$22(a0)
0001A092 117C 0002 003A             		move.b	#2,$3A(a0)
0001A098                            
0001A098                            loc_18D68:
0001A098 5428 0024                  		addq.b	#2,$24(a0)
0001A09C                            
0001A09C                            Obj7B_Fall:				; XREF: Obj7B_Index
0001A09C 4EB9 0000 E6BE             		jsr	ObjectFall
0001A0A2 2268 003C                  		movea.l	$3C(a0),a1
0001A0A6 45F9 0000 0000             		lea	(word_19018).l,a2
0001A0AC 7000                       		moveq	#0,d0
0001A0AE 1029 001A                  		move.b	$1A(a1),d0
0001A0B2 3228 0008                  		move.w	8(a0),d1
0001A0B6 9268 0030                  		sub.w	$30(a0),d1
0001A0BA 6400                       		bcc.s	loc_18D8E
0001A0BC 5440                       		addq.w	#2,d0
0001A0BE                            
0001A0BE                            loc_18D8E:
0001A0BE D040                       		add.w	d0,d0
0001A0C0 3228 0034                  		move.w	$34(a0),d1
0001A0C4 D272 0000                  		add.w	(a2,d0.w),d1
0001A0C8 B268 000C                  		cmp.w	$C(a0),d1
0001A0CC 6E00                       		bgt.s	locret_18DC4
0001A0CE 2268 003C                  		movea.l	$3C(a0),a1
0001A0D2 7202                       		moveq	#2,d1
0001A0D4 0828 0000 0022             		btst	#0,$22(a0)
0001A0DA 6700                       		beq.s	loc_18DAE
0001A0DC 7200                       		moveq	#0,d1
0001A0DE                            
0001A0DE                            loc_18DAE:
0001A0DE 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001A0E4 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001A0EA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001A0F0 6000 0000                  		bra.w	loc_18FA2
0001A0F4                            ; ===========================================================================
0001A0F4                            
0001A0F4                            locret_18DC4:
0001A0F4 4E75                       		rts	
0001A0F6                            ; ===========================================================================
0001A0F6                            
0001A0F6                            loc_18DC6:				; XREF: Obj7B_Index
0001A0F6 2268 003C                  		movea.l	$3C(a0),a1
0001A0FA 7000                       		moveq	#0,d0
0001A0FC 1028 003A                  		move.b	$3A(a0),d0
0001A100 9029 003A                  		sub.b	$3A(a1),d0
0001A104 6700                       		beq.s	loc_18E2A
0001A106 6400                       		bcc.s	loc_18DDA
0001A108 4400                       		neg.b	d0
0001A10A                            
0001A10A                            loc_18DDA:
0001A10A 323C F7E8                  		move.w	#-$818,d1
0001A10E 343C FEEC                  		move.w	#-$114,d2
0001A112 0C00 0001                  		cmpi.b	#1,d0
0001A116 6700                       		beq.s	loc_18E00
0001A118 323C F6A0                  		move.w	#-$960,d1
0001A11C 343C FF0C                  		move.w	#-$F4,d2
0001A120 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001A126 6D00                       		blt.s	loc_18E00
0001A128 323C F5E0                  		move.w	#-$A20,d1
0001A12C 343C FF80                  		move.w	#-$80,d2
0001A130                            
0001A130                            loc_18E00:
0001A130 3141 0012                  		move.w	d1,$12(a0)
0001A134 3142 0010                  		move.w	d2,$10(a0)
0001A138 3028 0008                  		move.w	8(a0),d0
0001A13C 9068 0030                  		sub.w	$30(a0),d0
0001A140 6400                       		bcc.s	loc_18E16
0001A142 4468 0010                  		neg.w	$10(a0)
0001A146                            
0001A146                            loc_18E16:
0001A146 117C 0001 001A             		move.b	#1,$1A(a0)
0001A14C 317C 0020 0028             		move.w	#$20,$28(a0)
0001A152 5428 0024                  		addq.b	#2,$24(a0)
0001A156 6000 0000                  		bra.w	loc_18EAA
0001A15A                            ; ===========================================================================
0001A15A                            
0001A15A                            loc_18E2A:				; XREF: loc_18DC6
0001A15A 45F9 0000 0000             		lea	(word_19018).l,a2
0001A160 7000                       		moveq	#0,d0
0001A162 1029 001A                  		move.b	$1A(a1),d0
0001A166 343C 0028                  		move.w	#$28,d2
0001A16A 3228 0008                  		move.w	8(a0),d1
0001A16E 9268 0030                  		sub.w	$30(a0),d1
0001A172 6400                       		bcc.s	loc_18E48
0001A174 4442                       		neg.w	d2
0001A176 5440                       		addq.w	#2,d0
0001A178                            
0001A178                            loc_18E48:
0001A178 D040                       		add.w	d0,d0
0001A17A 3228 0034                  		move.w	$34(a0),d1
0001A17E D272 0000                  		add.w	(a2,d0.w),d1
0001A182 3141 000C                  		move.w	d1,$C(a0)
0001A186 D468 0030                  		add.w	$30(a0),d2
0001A18A 3142 0008                  		move.w	d2,8(a0)
0001A18E 4268 000E                  		clr.w	$E(a0)
0001A192 4268 000A                  		clr.w	$A(a0)
0001A196 5368 0028                  		subq.w	#1,$28(a0)
0001A19A 6600                       		bne.s	loc_18E7A
0001A19C 317C 0020 0028             		move.w	#$20,$28(a0)
0001A1A2 117C 0008 0024             		move.b	#8,$24(a0)
0001A1A8 4E75                       		rts	
0001A1AA                            ; ===========================================================================
0001A1AA                            
0001A1AA                            loc_18E7A:
0001A1AA 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001A1B0 6600                       		bne.s	loc_18E88
0001A1B2 117C 0005 001F             		move.b	#5,$1F(a0)
0001A1B8                            
0001A1B8                            loc_18E88:
0001A1B8 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001A1BE 6600                       		bne.s	loc_18E96
0001A1C0 117C 0002 001F             		move.b	#2,$1F(a0)
0001A1C6                            
0001A1C6                            loc_18E96:
0001A1C6 5328 001E                  		subq.b	#1,$1E(a0)
0001A1CA 6E00                       		bgt.s	locret_18EA8
0001A1CC 0868 0000 001A             		bchg	#0,$1A(a0)
0001A1D2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001A1D8                            
0001A1D8                            locret_18EA8:
0001A1D8 4E75                       		rts	
0001A1DA                            ; ===========================================================================
0001A1DA                            
0001A1DA                            loc_18EAA:				; XREF: Obj7B_Index
0001A1DA 43F8 D040                  		lea	($FFFFD040).w,a1
0001A1DE 707A                       		moveq	#$7A,d0
0001A1E0 7240                       		moveq	#$40,d1
0001A1E2 743E                       		moveq	#$3E,d2
0001A1E4                            
0001A1E4                            loc_18EB4:
0001A1E4 B011                       		cmp.b	(a1),d0
0001A1E6 6700                       		beq.s	loc_18EC0
0001A1E8 D2C1                       		adda.w	d1,a1
0001A1EA 51CA FFF8                  		dbf	d2,loc_18EB4
0001A1EE                            
0001A1EE 6000                       		bra.s	loc_18F38
0001A1F0                            ; ===========================================================================
0001A1F0                            
0001A1F0                            loc_18EC0:
0001A1F0 3029 0008                  		move.w	8(a1),d0
0001A1F4 3229 000C                  		move.w	$C(a1),d1
0001A1F8 3428 0008                  		move.w	8(a0),d2
0001A1FC 3628 000C                  		move.w	$C(a0),d3
0001A200 45FA 0000                  		lea	byte_19022(pc),a2
0001A204 47FA 0000                  		lea	byte_19026(pc),a3
0001A208 181A                       		move.b	(a2)+,d4
0001A20A 4884                       		ext.w	d4
0001A20C D044                       		add.w	d4,d0
0001A20E 181B                       		move.b	(a3)+,d4
0001A210 4884                       		ext.w	d4
0001A212 D444                       		add.w	d4,d2
0001A214 B440                       		cmp.w	d0,d2
0001A216 6500                       		bcs.s	loc_18F38
0001A218 181A                       		move.b	(a2)+,d4
0001A21A 4884                       		ext.w	d4
0001A21C D044                       		add.w	d4,d0
0001A21E 181B                       		move.b	(a3)+,d4
0001A220 4884                       		ext.w	d4
0001A222 D444                       		add.w	d4,d2
0001A224 B042                       		cmp.w	d2,d0
0001A226 6500                       		bcs.s	loc_18F38
0001A228 181A                       		move.b	(a2)+,d4
0001A22A 4884                       		ext.w	d4
0001A22C D244                       		add.w	d4,d1
0001A22E 181B                       		move.b	(a3)+,d4
0001A230 4884                       		ext.w	d4
0001A232 D644                       		add.w	d4,d3
0001A234 B641                       		cmp.w	d1,d3
0001A236 6500                       		bcs.s	loc_18F38
0001A238 181A                       		move.b	(a2)+,d4
0001A23A 4884                       		ext.w	d4
0001A23C D244                       		add.w	d4,d1
0001A23E 181B                       		move.b	(a3)+,d4
0001A240 4884                       		ext.w	d4
0001A242 D644                       		add.w	d4,d3
0001A244 B243                       		cmp.w	d3,d1
0001A246 6500                       		bcs.s	loc_18F38
0001A248 5428 0024                  		addq.b	#2,$24(a0)
0001A24C 4268 0028                  		clr.w	$28(a0)
0001A250 4229 0020                  		clr.b	$20(a1)
0001A254 5329 0021                  		subq.b	#1,$21(a1)
0001A258 6600                       		bne.s	loc_18F38
0001A25A 08E9 0007 0022             		bset	#7,$22(a1)
0001A260 4268 0010                  		clr.w	$10(a0)
0001A264 4268 0012                  		clr.w	$12(a0)
0001A268                            
0001A268                            loc_18F38:
0001A268 4A68 0012                  		tst.w	$12(a0)
0001A26C 6A00                       		bpl.s	loc_18F5C
0001A26E 4EB9 0000 E6BE             		jsr	ObjectFall
0001A274 3028 0034                  		move.w	$34(a0),d0
0001A278 0440 002F                  		subi.w	#$2F,d0
0001A27C B068 000C                  		cmp.w	$C(a0),d0
0001A280 6E00                       		bgt.s	loc_18F58
0001A282 4EB9 0000 E6BE             		jsr	ObjectFall
0001A288                            
0001A288                            loc_18F58:
0001A288 6000 FF20                  		bra.w	loc_18E7A
0001A28C                            ; ===========================================================================
0001A28C                            
0001A28C                            loc_18F5C:
0001A28C 4EB9 0000 E6BE             		jsr	ObjectFall
0001A292 2268 003C                  		movea.l	$3C(a0),a1
0001A296 45F9 0000 0000             		lea	(word_19018).l,a2
0001A29C 7000                       		moveq	#0,d0
0001A29E 1029 001A                  		move.b	$1A(a1),d0
0001A2A2 3228 0008                  		move.w	8(a0),d1
0001A2A6 9268 0030                  		sub.w	$30(a0),d1
0001A2AA 6400                       		bcc.s	loc_18F7E
0001A2AC 5440                       		addq.w	#2,d0
0001A2AE                            
0001A2AE                            loc_18F7E:
0001A2AE D040                       		add.w	d0,d0
0001A2B0 3228 0034                  		move.w	$34(a0),d1
0001A2B4 D272 0000                  		add.w	(a2,d0.w),d1
0001A2B8 B268 000C                  		cmp.w	$C(a0),d1
0001A2BC 6ECA                       		bgt.s	loc_18F58
0001A2BE 2268 003C                  		movea.l	$3C(a0),a1
0001A2C2 7202                       		moveq	#2,d1
0001A2C4 4A68 0010                  		tst.w	$10(a0)
0001A2C8 6B00                       		bmi.s	loc_18F9C
0001A2CA 7200                       		moveq	#0,d1
0001A2CC                            
0001A2CC                            loc_18F9C:
0001A2CC 317C 0000 0028             		move.w	#0,$28(a0)
0001A2D2                            
0001A2D2                            loc_18FA2:
0001A2D2 1341 003A                  		move.b	d1,$3A(a1)
0001A2D6 1141 003A                  		move.b	d1,$3A(a0)
0001A2DA B229 001A                  		cmp.b	$1A(a1),d1
0001A2DE 6700                       		beq.s	loc_19008
0001A2E0 08A9 0003 0022             		bclr	#3,$22(a1)
0001A2E6 6700                       		beq.s	loc_19008
0001A2E8 4229 0025                  		clr.b	$25(a1)
0001A2EC 137C 0002 0024             		move.b	#2,$24(a1)
0001A2F2 45F8 D000                  		lea	($FFFFD000).w,a2
0001A2F6 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001A2FC 446A 0012                  		neg.w	$12(a2)
0001A300 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001A306 6600                       		bne.s	loc_18FDC
0001A308 E0EA 0012                  		asr	$12(a2)
0001A30C                            
0001A30C                            loc_18FDC:
0001A30C 08EA 0001 0022             		bset	#1,$22(a2)
0001A312 08AA 0003 0022             		bclr	#3,$22(a2)
0001A318 422A 003C                  		clr.b	$3C(a2)
0001A31C 2F08                       		move.l	a0,-(sp)
0001A31E 41D2                       		lea	(a2),a0
0001A320 4EBA A288                  		jsr	Obj01_ChkRoll
0001A324 205F                       		movea.l	(sp)+,a0
0001A326 157C 0002 0024             		move.b	#2,$24(a2)
0001A32C 303C 00CC                  		move.w	#$CC,d0
0001A330 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001A336                            
0001A336                            loc_19008:
0001A336 4268 0010                  		clr.w	$10(a0)
0001A33A 4268 0012                  		clr.w	$12(a0)
0001A33E 5428 0024                  		addq.b	#2,$24(a0)
0001A342 6000 FE66                  		bra.w	loc_18E7A
0001A346                            ; ===========================================================================
0001A346 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001A350                            		even
0001A350 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001A354                            		even
0001A354 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001A358                            		even
0001A358                            ; ===========================================================================
0001A358                            
0001A358                            Obj7B_Explode:				; XREF: Obj7B_Index
0001A358 10BC 003F                  		move.b	#$3F,(a0)
0001A35C 4228 0024                  		clr.b	$24(a0)
0001A360 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001A366 6700                       		beq.s	Obj7B_MakeFrag
0001A368 4E75                       		rts	
0001A36A                            ; ===========================================================================
0001A36A                            
0001A36A                            Obj7B_MakeFrag:
0001A36A 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001A370 7203                       		moveq	#3,d1
0001A372 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001A376                            
0001A376                            Obj7B_Loop:
0001A376 4EB9 0000 EBDC             		jsr	SingleObjLoad
0001A37C 6600                       		bne.s	loc_1909A
0001A37E 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001A382 137C 000A 0024             		move.b	#$A,$24(a1)
0001A388 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001A390 137C 0003 0018             		move.b	#3,$18(a1)
0001A396 337C 0518 0002             		move.w	#$518,2(a1)
0001A39C 3368 0008 0008             		move.w	8(a0),8(a1)
0001A3A2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A3A8 335A 0010                  		move.w	(a2)+,$10(a1)
0001A3AC 335A 0012                  		move.w	(a2)+,$12(a1)
0001A3B0 137C 0098 0020             		move.b	#$98,$20(a1)
0001A3B6 0029 0004 0001             		ori.b	#4,1(a1)
0001A3BC 08E9 0007 0001             		bset	#7,1(a1)
0001A3C2 137C 000C 0019             		move.b	#$C,$19(a1)
0001A3C8                            
0001A3C8                            loc_1909A:
0001A3C8 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001A3CC                            
0001A3CC 4E75                       		rts	
0001A3CE                            ; ===========================================================================
0001A3CE FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001A3D2 FF60 FDC0                  		dc.w $FF60, $FDC0
0001A3D6 0100 FCC0                  		dc.w $100, $FCC0
0001A3DA 00A0 FDC0                  		dc.w $A0, $FDC0
0001A3DE                            ; ===========================================================================
0001A3DE                            
0001A3DE                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001A3DE 4EB9 0000 E730             		jsr	SpeedToPos
0001A3E4 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A3EA 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001A3F0 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A3F6 7004                       		moveq	#4,d0
0001A3F8 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A3FC E448                       		lsr.w	#2,d0
0001A3FE 1140 001A                  		move.b	d0,$1A(a0)
0001A402 4A28 0001                  		tst.b	1(a0)
0001A406 6A00 F7DC                  		bpl.w	Obj7A_Delete
0001A40A 4E75                       		rts	
0001A40C                            ; ===========================================================================
0001A40C                            ; ---------------------------------------------------------------------------
0001A40C                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001A40C                            ; ---------------------------------------------------------------------------
0001A40C                            Map_obj7B:
0001A40C                            	include "_maps\obj7B.asm"
0001A40C                            ; ---------------------------------------------------------------------------
0001A40C                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001A40C                            ; ---------------------------------------------------------------------------
0001A40C 0000                       		dc.w byte_190E2-Map_obj7B
0001A40E 0000                       		dc.w byte_190E8-Map_obj7B
0001A410 01                         byte_190E2:	dc.b 1
0001A411 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001A416 01                         byte_190E8:	dc.b 1
0001A417 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001A41C                            		even
0001A41C                            		even
0001A41C                            
0001A41C                            ; ===========================================================================
0001A41C                            ; ---------------------------------------------------------------------------
0001A41C                            ; Object 75 - Eggman (SYZ)
0001A41C                            ; ---------------------------------------------------------------------------
0001A41C                            
0001A41C                            Obj75:					; XREF: Obj_Index
0001A41C 7000                       		moveq	#0,d0
0001A41E 1028 0024                  		move.b	$24(a0),d0
0001A422 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001A426 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001A42A                            ; ===========================================================================
0001A42A 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001A42C 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001A42E 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001A430 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001A432 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001A434                            
0001A434 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001A437 0401 05                    		dc.b 4,	1, 5
0001A43A 0607 05                    		dc.b 6,	7, 5
0001A43D 0800 05                    		dc.b 8,	0, 5
0001A440                            ; ===========================================================================
0001A440                            
0001A440                            Obj75_Main:				; XREF: Obj75_Index
0001A440 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001A446 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001A44C 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A452 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A458 117C 000F 0020             		move.b	#$F,$20(a0)
0001A45E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A464 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001A468 2248                       		movea.l	a0,a1
0001A46A 7203                       		moveq	#3,d1
0001A46C 6000                       		bra.s	Obj75_LoadBoss
0001A46E                            ; ===========================================================================
0001A46E                            
0001A46E                            Obj75_Loop:
0001A46E 4EB9 0000 EBF2             		jsr	SingleObjLoad2
0001A474 6600                       		bne.s	Obj75_ShipMain
0001A476 12BC 0075                  		move.b	#$75,(a1)
0001A47A 3368 0008 0008             		move.w	8(a0),8(a1)
0001A480 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A486                            
0001A486                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001A486 08A8 0000 0022             		bclr	#0,$22(a0)
0001A48C 4229 0025                  		clr.b	$25(a1)
0001A490 135A 0024                  		move.b	(a2)+,$24(a1)
0001A494 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A498 135A 0018                  		move.b	(a2)+,$18(a1)
0001A49C 237C 0001 90A4 0004        		move.l	#Map_Eggman,4(a1)
0001A4A4 337C 0400 0002             		move.w	#$400,2(a1)
0001A4AA 137C 0004 0001             		move.b	#4,1(a1)
0001A4B0 137C 0020 0019             		move.b	#$20,$19(a1)
0001A4B6 2348 0034                  		move.l	a0,$34(a1)
0001A4BA 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001A4BE                            
0001A4BE                            Obj75_ShipMain:				; XREF: Obj75_Index
0001A4BE 7000                       		moveq	#0,d0
0001A4C0 1028 0025                  		move.b	$25(a0),d0
0001A4C4 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001A4C8 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001A4CC 43F9 0001 9040             		lea	(Ani_Eggman).l,a1
0001A4D2 4EB9 0000 B7A4             		jsr	AnimateSprite
0001A4D8 7003                       		moveq	#3,d0
0001A4DA C028 0022                  		and.b	$22(a0),d0
0001A4DE 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A4E4 8128 0001                  		or.b	d0,1(a0)
0001A4E8 4EF9 0000 E756             		jmp	DisplaySprite
0001A4EE                            ; ===========================================================================
0001A4EE 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001A4F2 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001A4F6 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001A4FA                            ; ===========================================================================
0001A4FA                            
0001A4FA                            loc_191CC:				; XREF: Obj75_ShipIndex
0001A4FA 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A500 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001A506 6400                       		bcc.s	loc_191DE
0001A508 5428 0025                  		addq.b	#2,$25(a0)
0001A50C                            
0001A50C                            loc_191DE:
0001A50C 1028 003F                  		move.b	$3F(a0),d0
0001A510 5428 003F                  		addq.b	#2,$3F(a0)
0001A514 4EB9 0000 3416             		jsr	(CalcSine).l
0001A51A E440                       		asr.w	#2,d0
0001A51C 3140 0012                  		move.w	d0,$12(a0)
0001A520                            
0001A520                            loc_191F2:
0001A520 6100 E6DC                  		bsr.w	BossMove
0001A524 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A52A 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A530                            
0001A530                            loc_19202:
0001A530 3028 0008                  		move.w	8(a0),d0
0001A534 0440 2C00                  		subi.w	#$2C00,d0
0001A538 EA48                       		lsr.w	#5,d0
0001A53A 1140 0034                  		move.b	d0,$34(a0)
0001A53E 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001A544 6400                       		bcc.s	locret_19256
0001A546 4A28 0022                  		tst.b	$22(a0)
0001A54A 6B00                       		bmi.s	loc_19258
0001A54C 4A28 0020                  		tst.b	$20(a0)
0001A550 6600                       		bne.s	locret_19256
0001A552 4A28 003E                  		tst.b	$3E(a0)
0001A556 6600                       		bne.s	loc_1923A
0001A558 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A55E 303C 00AC                  		move.w	#$AC,d0
0001A562 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A568                            
0001A568                            loc_1923A:
0001A568 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A56C 7000                       		moveq	#0,d0
0001A56E 4A51                       		tst.w	(a1)
0001A570 6600                       		bne.s	loc_19248
0001A572 303C 0EEE                  		move.w	#$EEE,d0
0001A576                            
0001A576                            loc_19248:
0001A576 3280                       		move.w	d0,(a1)
0001A578 5328 003E                  		subq.b	#1,$3E(a0)
0001A57C 6600                       		bne.s	locret_19256
0001A57E 117C 000F 0020             		move.b	#$F,$20(a0)
0001A584                            
0001A584                            locret_19256:
0001A584 4E75                       		rts	
0001A586                            ; ===========================================================================
0001A586                            
0001A586                            loc_19258:				; XREF: loc_19202
0001A586 7064                       		moveq	#100,d0
0001A588 6100 0000                  		bsr.w	AddPoints
0001A58C 117C 0006 0025             		move.b	#6,$25(a0)
0001A592 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001A598 4268 0010                  		clr.w	$10(a0)
0001A59C 4E75                       		rts	
0001A59E                            ; ===========================================================================
0001A59E                            
0001A59E                            loc_19270:				; XREF: Obj75_ShipIndex
0001A59E 3028 0030                  		move.w	$30(a0),d0
0001A5A2 317C 0140 0010             		move.w	#$140,$10(a0)
0001A5A8 0828 0000 0022             		btst	#0,$22(a0)
0001A5AE 6600                       		bne.s	loc_1928E
0001A5B0 4468 0010                  		neg.w	$10(a0)
0001A5B4 0C40 2C08                  		cmpi.w	#$2C08,d0
0001A5B8 6E00                       		bgt.s	loc_1929E
0001A5BA 6000                       		bra.s	loc_19294
0001A5BC                            ; ===========================================================================
0001A5BC                            
0001A5BC                            loc_1928E:
0001A5BC 0C40 2D38                  		cmpi.w	#$2D38,d0
0001A5C0 6D00                       		blt.s	loc_1929E
0001A5C2                            
0001A5C2                            loc_19294:
0001A5C2 0868 0000 0022             		bchg	#0,$22(a0)
0001A5C8 4228 003D                  		clr.b	$3D(a0)
0001A5CC                            
0001A5CC                            loc_1929E:
0001A5CC 0440 2C10                  		subi.w	#$2C10,d0
0001A5D0 0240 001F                  		andi.w	#$1F,d0
0001A5D4 0440 001F                  		subi.w	#$1F,d0
0001A5D8 6A00                       		bpl.s	loc_192AE
0001A5DA 4440                       		neg.w	d0
0001A5DC                            
0001A5DC                            loc_192AE:
0001A5DC 5340                       		subq.w	#1,d0
0001A5DE 6E00                       		bgt.s	loc_192E8
0001A5E0 4A28 003D                  		tst.b	$3D(a0)
0001A5E4 6600                       		bne.s	loc_192E8
0001A5E6 3238 D008                  		move.w	($FFFFD008).w,d1
0001A5EA 0441 2C00                  		subi.w	#$2C00,d1
0001A5EE EA41                       		asr.w	#5,d1
0001A5F0 B228 0034                  		cmp.b	$34(a0),d1
0001A5F4 6600                       		bne.s	loc_192E8
0001A5F6 7000                       		moveq	#0,d0
0001A5F8 1028 0034                  		move.b	$34(a0),d0
0001A5FC EB40                       		asl.w	#5,d0
0001A5FE 0640 2C10                  		addi.w	#$2C10,d0
0001A602 3140 0030                  		move.w	d0,$30(a0)
0001A606 6100 0000                  		bsr.w	Obj75_FindBlocks
0001A60A 5428 0025                  		addq.b	#2,$25(a0)
0001A60E 4268 0028                  		clr.w	$28(a0)
0001A612 4268 0010                  		clr.w	$10(a0)
0001A616                            
0001A616                            loc_192E8:
0001A616 6000 FEF4                  		bra.w	loc_191DE
0001A61A                            ; ===========================================================================
0001A61A                            
0001A61A                            loc_192EC:				; XREF: Obj75_ShipIndex
0001A61A 7000                       		moveq	#0,d0
0001A61C 1028 0028                  		move.b	$28(a0),d0
0001A620 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001A624 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001A628                            ; ===========================================================================
0001A628 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001A62A 0000                       		dc.w loc_19348-off_192FA
0001A62C 0000                       		dc.w loc_1938E-off_192FA
0001A62E 0000                       		dc.w loc_193D0-off_192FA
0001A630                            ; ===========================================================================
0001A630                            
0001A630                            loc_19302:				; XREF: off_192FA
0001A630 317C 0180 0012             		move.w	#$180,$12(a0)
0001A636 3028 0038                  		move.w	$38(a0),d0
0001A63A 0C40 0556                  		cmpi.w	#$556,d0
0001A63E 6500                       		bcs.s	loc_19344
0001A640 317C 0556 0038             		move.w	#$556,$38(a0)
0001A646 4268 003C                  		clr.w	$3C(a0)
0001A64A 70FF                       		moveq	#-1,d0
0001A64C 3028 0036                  		move.w	$36(a0),d0
0001A650 6700                       		beq.s	loc_1933C
0001A652 2240                       		movea.l	d0,a1
0001A654 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A65A 117C 00FF 0029             		move.b	#-1,$29(a0)
0001A660 2348 0034                  		move.l	a0,$34(a1)
0001A664 317C 0032 003C             		move.w	#$32,$3C(a0)
0001A66A                            
0001A66A                            loc_1933C:
0001A66A 4268 0012                  		clr.w	$12(a0)
0001A66E 5428 0028                  		addq.b	#2,$28(a0)
0001A672                            
0001A672                            loc_19344:
0001A672 6000 FEAC                  		bra.w	loc_191F2
0001A676                            ; ===========================================================================
0001A676                            
0001A676                            loc_19348:				; XREF: off_192FA
0001A676 5368 003C                  		subq.w	#1,$3C(a0)
0001A67A 6A00                       		bpl.s	loc_19366
0001A67C 5428 0028                  		addq.b	#2,$28(a0)
0001A680 317C F800 0012             		move.w	#-$800,$12(a0)
0001A686 4A68 0036                  		tst.w	$36(a0)
0001A68A 6600                       		bne.s	loc_19362
0001A68C E0E8 0012                  		asr	$12(a0)
0001A690                            
0001A690                            loc_19362:
0001A690 7000                       		moveq	#0,d0
0001A692 6000                       		bra.s	loc_1937C
0001A694                            ; ===========================================================================
0001A694                            
0001A694                            loc_19366:
0001A694 7000                       		moveq	#0,d0
0001A696 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001A69C 6E00                       		bgt.s	loc_1937C
0001A69E 7002                       		moveq	#2,d0
0001A6A0 0828 0001 003D             		btst	#1,$3D(a0)
0001A6A6 6700                       		beq.s	loc_1937C
0001A6A8 4440                       		neg.w	d0
0001A6AA                            
0001A6AA                            loc_1937C:
0001A6AA D068 0038                  		add.w	$38(a0),d0
0001A6AE 3140 000C                  		move.w	d0,$C(a0)
0001A6B2 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A6B8 6000 FE76                  		bra.w	loc_19202
0001A6BC                            ; ===========================================================================
0001A6BC                            
0001A6BC                            loc_1938E:				; XREF: off_192FA
0001A6BC 303C 04DA                  		move.w	#$4DA,d0
0001A6C0 4A68 0036                  		tst.w	$36(a0)
0001A6C4 6700                       		beq.s	loc_1939C
0001A6C6 0440 0018                  		subi.w	#$18,d0
0001A6CA                            
0001A6CA                            loc_1939C:
0001A6CA B068 0038                  		cmp.w	$38(a0),d0
0001A6CE 6D00                       		blt.s	loc_193BE
0001A6D0 317C 0008 003C             		move.w	#8,$3C(a0)
0001A6D6 4A68 0036                  		tst.w	$36(a0)
0001A6DA 6700                       		beq.s	loc_193B4
0001A6DC 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001A6E2                            
0001A6E2                            loc_193B4:
0001A6E2 5428 0028                  		addq.b	#2,$28(a0)
0001A6E6 4268 0012                  		clr.w	$12(a0)
0001A6EA 6000                       		bra.s	loc_193CC
0001A6EC                            ; ===========================================================================
0001A6EC                            
0001A6EC                            loc_193BE:
0001A6EC 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001A6F2 6C00                       		bge.s	loc_193CC
0001A6F4 0668 000C 0012             		addi.w	#$C,$12(a0)
0001A6FA                            
0001A6FA                            loc_193CC:
0001A6FA 6000 FE24                  		bra.w	loc_191F2
0001A6FE                            ; ===========================================================================
0001A6FE                            
0001A6FE                            loc_193D0:				; XREF: off_192FA
0001A6FE 5368 003C                  		subq.w	#1,$3C(a0)
0001A702 6E00                       		bgt.s	loc_19406
0001A704 6B00                       		bmi.s	loc_193EE
0001A706 70FF                       		moveq	#-1,d0
0001A708 3028 0036                  		move.w	$36(a0),d0
0001A70C 6700                       		beq.s	loc_193E8
0001A70E 2240                       		movea.l	d0,a1
0001A710 137C 000A 0029             		move.b	#$A,$29(a1)
0001A716                            
0001A716                            loc_193E8:
0001A716 4268 0036                  		clr.w	$36(a0)
0001A71A 6000                       		bra.s	loc_19406
0001A71C                            ; ===========================================================================
0001A71C                            
0001A71C                            loc_193EE:
0001A71C 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001A722 6600                       		bne.s	loc_19406
0001A724 4228 0029                  		clr.b	$29(a0)
0001A728 5528 0025                  		subq.b	#2,$25(a0)
0001A72C 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001A732 6000                       		bra.s	loc_19446
0001A734                            ; ===========================================================================
0001A734                            
0001A734                            loc_19406:
0001A734 7001                       		moveq	#1,d0
0001A736 4A68 0036                  		tst.w	$36(a0)
0001A73A 6700                       		beq.s	loc_19410
0001A73C 7002                       		moveq	#2,d0
0001A73E                            
0001A73E                            loc_19410:
0001A73E 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001A744 6700                       		beq.s	loc_19424
0001A746 6D00                       		blt.s	loc_1941C
0001A748 4440                       		neg.w	d0
0001A74A                            
0001A74A                            loc_1941C:
0001A74A 4A68 0036                  		tst.w	$36(a0)
0001A74E D168 0038                  		add.w	d0,$38(a0)
0001A752                            
0001A752                            loc_19424:
0001A752 7000                       		moveq	#0,d0
0001A754 4A68 0036                  		tst.w	$36(a0)
0001A758 6700                       		beq.s	loc_19438
0001A75A 7002                       		moveq	#2,d0
0001A75C 0828 0000 003D             		btst	#0,$3D(a0)
0001A762 6700                       		beq.s	loc_19438
0001A764 4440                       		neg.w	d0
0001A766                            
0001A766                            loc_19438:
0001A766 D068 0038                  		add.w	$38(a0),d0
0001A76A 3140 000C                  		move.w	d0,$C(a0)
0001A76E 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A774                            
0001A774                            loc_19446:
0001A774 6000 FDBA                  		bra.w	loc_19202
0001A778                            
0001A778                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A778                            
0001A778                            
0001A778                            Obj75_FindBlocks:			; XREF: loc_192AE
0001A778 4268 0036                  		clr.w	$36(a0)
0001A77C 43F8 D040                  		lea	($FFFFD040).w,a1
0001A780 703E                       		moveq	#$3E,d0
0001A782 7276                       		moveq	#$76,d1
0001A784 1428 0034                  		move.b	$34(a0),d2
0001A788                            
0001A788                            Obj75_FindLoop:
0001A788 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001A78A 6600                       		bne.s	loc_1946A	; if not, branch
0001A78C B429 0028                  		cmp.b	$28(a1),d2
0001A790 6600                       		bne.s	loc_1946A
0001A792 3149 0036                  		move.w	a1,$36(a0)
0001A796 6000                       		bra.s	locret_19472
0001A798                            ; ===========================================================================
0001A798                            
0001A798                            loc_1946A:
0001A798 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001A79C 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001A7A0                            
0001A7A0                            locret_19472:
0001A7A0 4E75                       		rts	
0001A7A2                            ; End of function Obj75_FindBlocks
0001A7A2                            
0001A7A2                            ; ===========================================================================
0001A7A2                            
0001A7A2                            loc_19474:				; XREF: Obj75_ShipIndex
0001A7A2 5368 003C                  		subq.w	#1,$3C(a0)
0001A7A6 6B00                       		bmi.s	loc_1947E
0001A7A8 6000 E412                  		bra.w	BossDefeated
0001A7AC                            ; ===========================================================================
0001A7AC                            
0001A7AC                            loc_1947E:
0001A7AC 5428 0025                  		addq.b	#2,$25(a0)
0001A7B0 4268 0012                  		clr.w	$12(a0)
0001A7B4 08E8 0000 0022             		bset	#0,$22(a0)
0001A7BA 08A8 0007 0022             		bclr	#7,$22(a0)
0001A7C0 4268 0010                  		clr.w	$10(a0)
0001A7C4 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001A7CA 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A7CE 6600                       		bne.s	loc_194A8
0001A7D0 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A7D6                            
0001A7D6                            loc_194A8:
0001A7D6 6000 FD58                  		bra.w	loc_19202
0001A7DA                            ; ===========================================================================
0001A7DA                            
0001A7DA                            loc_194AC:				; XREF: Obj75_ShipIndex
0001A7DA 5268 003C                  		addq.w	#1,$3C(a0)
0001A7DE 6700                       		beq.s	loc_194BC
0001A7E0 6A00                       		bpl.s	loc_194C2
0001A7E2 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A7E8 6000                       		bra.s	loc_194EE
0001A7EA                            ; ===========================================================================
0001A7EA                            
0001A7EA                            loc_194BC:
0001A7EA 4268 0012                  		clr.w	$12(a0)
0001A7EE 6000                       		bra.s	loc_194EE
0001A7F0                            ; ===========================================================================
0001A7F0                            
0001A7F0                            loc_194C2:
0001A7F0 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001A7F6 6500                       		bcs.s	loc_194DA
0001A7F8 6700                       		beq.s	loc_194E0
0001A7FA 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001A800 6500                       		bcs.s	loc_194EE
0001A802 5428 0025                  		addq.b	#2,$25(a0)
0001A806 6000                       		bra.s	loc_194EE
0001A808                            ; ===========================================================================
0001A808                            
0001A808                            loc_194DA:
0001A808 5168 0012                  		subq.w	#8,$12(a0)
0001A80C 6000                       		bra.s	loc_194EE
0001A80E                            ; ===========================================================================
0001A80E                            
0001A80E                            loc_194E0:
0001A80E 4268 0012                  		clr.w	$12(a0)
0001A812 303C 0085                  		move.w	#$85,d0
0001A816 4EB9 0000 1C74             		jsr	(PlaySound).l	; play SYZ music
0001A81C                            
0001A81C                            loc_194EE:
0001A81C 6000 FD02                  		bra.w	loc_191F2
0001A820                            ; ===========================================================================
0001A820                            
0001A820                            loc_194F2:				; XREF: Obj75_ShipIndex
0001A820 317C 0400 0010             		move.w	#$400,$10(a0)
0001A826 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A82C 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001A832 6400                       		bcc.s	loc_1950C
0001A834 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A838 6000                       		bra.s	loc_19512
0001A83A                            ; ===========================================================================
0001A83A                            
0001A83A                            loc_1950C:
0001A83A 4A28 0001                  		tst.b	1(a0)
0001A83E 6A00                       		bpl.s	Obj75_ShipDelete
0001A840                            
0001A840                            loc_19512:
0001A840 6100 E3BC                  		bsr.w	BossMove
0001A844 6000 FCC6                  		bra.w	loc_191DE
0001A848                            ; ===========================================================================
0001A848                            
0001A848                            Obj75_ShipDelete:
0001A848 4EF9 0000 E792             		jmp	DeleteObject
0001A84E                            ; ===========================================================================
0001A84E                            
0001A84E                            Obj75_FaceMain:				; XREF: Obj75_Index
0001A84E 7201                       		moveq	#1,d1
0001A850 2268 0034                  		movea.l	$34(a0),a1
0001A854 7000                       		moveq	#0,d0
0001A856 1029 0025                  		move.b	$25(a1),d0
0001A85A 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001A85E 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001A862 1141 001C                  		move.b	d1,$1C(a0)
0001A866 1010                       		move.b	(a0),d0
0001A868 B011                       		cmp.b	(a1),d0
0001A86A 6600                       		bne.s	Obj75_FaceDelete
0001A86C 6000                       		bra.s	loc_195BE
0001A86E                            ; ===========================================================================
0001A86E                            
0001A86E                            Obj75_FaceDelete:
0001A86E 4EF9 0000 E792             		jmp	DeleteObject
0001A874                            ; ===========================================================================
0001A874 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001A878 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001A87C 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001A880                            ; ===========================================================================
0001A880                            
0001A880                            loc_19552:				; XREF: off_19546
0001A880 720A                       		moveq	#$A,d1
0001A882 4E75                       		rts	
0001A884                            ; ===========================================================================
0001A884                            
0001A884                            loc_19556:				; XREF: off_19546
0001A884 7206                       		moveq	#6,d1
0001A886 4E75                       		rts	
0001A888                            ; ===========================================================================
0001A888                            
0001A888                            loc_1955A:				; XREF: off_19546
0001A888 7000                       		moveq	#0,d0
0001A88A 1029 0028                  		move.b	$28(a1),d0
0001A88E 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001A892 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001A896                            ; ===========================================================================
0001A896 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001A89A 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001A89E                            ; ===========================================================================
0001A89E                            
0001A89E                            loc_19570:				; XREF: off_19568
0001A89E 6000                       		bra.s	loc_19574
0001A8A0                            ; ===========================================================================
0001A8A0                            
0001A8A0                            loc_19572:				; XREF: off_19568
0001A8A0 7206                       		moveq	#6,d1
0001A8A2                            
0001A8A2                            loc_19574:				; XREF: off_19546
0001A8A2 4A29 0020                  		tst.b	$20(a1)
0001A8A6 6600                       		bne.s	loc_1957E
0001A8A8 7205                       		moveq	#5,d1
0001A8AA 4E75                       		rts	
0001A8AC                            ; ===========================================================================
0001A8AC                            
0001A8AC                            loc_1957E:
0001A8AC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A8B2 6500                       		bcs.s	locret_19588
0001A8B4 7204                       		moveq	#4,d1
0001A8B6                            
0001A8B6                            locret_19588:
0001A8B6 4E75                       		rts	
0001A8B8                            ; ===========================================================================
0001A8B8                            
0001A8B8                            Obj75_FlameMain:			; XREF: Obj75_Index
0001A8B8 117C 0007 001C             		move.b	#7,$1C(a0)
0001A8BE 2268 0034                  		movea.l	$34(a0),a1
0001A8C2 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A8C8 6600                       		bne.s	loc_195AA
0001A8CA 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A8D0 4A28 0001                  		tst.b	1(a0)
0001A8D4 6A00                       		bpl.s	Obj75_FlameDelete
0001A8D6 6000                       		bra.s	loc_195B6
0001A8D8                            ; ===========================================================================
0001A8D8                            
0001A8D8                            loc_195AA:
0001A8D8 4A69 0010                  		tst.w	$10(a1)
0001A8DC 6700                       		beq.s	loc_195B6
0001A8DE 117C 0008 001C             		move.b	#8,$1C(a0)
0001A8E4                            
0001A8E4                            loc_195B6:
0001A8E4 6000                       		bra.s	loc_195BE
0001A8E6                            ; ===========================================================================
0001A8E6                            
0001A8E6                            Obj75_FlameDelete:
0001A8E6 4EF9 0000 E792             		jmp	DeleteObject
0001A8EC                            ; ===========================================================================
0001A8EC                            
0001A8EC                            loc_195BE:
0001A8EC 43F9 0001 9040             		lea	(Ani_Eggman).l,a1
0001A8F2 4EB9 0000 B7A4             		jsr	AnimateSprite
0001A8F8 2268 0034                  		movea.l	$34(a0),a1
0001A8FC 3169 0008 0008             		move.w	8(a1),8(a0)
0001A902 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A908                            
0001A908                            loc_195DA:
0001A908 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A90E 7003                       		moveq	#3,d0
0001A910 C028 0022                  		and.b	$22(a0),d0
0001A914 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A91A 8128 0001                  		or.b	d0,1(a0)
0001A91E 4EF9 0000 E756             		jmp	DisplaySprite
0001A924                            ; ===========================================================================
0001A924                            
0001A924                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001A924 217C 0001 916C 0004        		move.l	#Map_BossItems,4(a0)
0001A92C 317C 246C 0002             		move.w	#$246C,2(a0)
0001A932 117C 0005 001A             		move.b	#5,$1A(a0)
0001A938 2268 0034                  		movea.l	$34(a0),a1
0001A93C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A942 6600                       		bne.s	loc_1961C
0001A944 4A28 0001                  		tst.b	1(a0)
0001A948 6A00                       		bpl.s	Obj75_SpikeDelete
0001A94A                            
0001A94A                            loc_1961C:
0001A94A 3169 0008 0008             		move.w	8(a1),8(a0)
0001A950 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A956 3028 003C                  		move.w	$3C(a0),d0
0001A95A 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A960 6600                       		bne.s	loc_19652
0001A962 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001A968 6700                       		beq.s	loc_1964C
0001A96A 4A29 0028                  		tst.b	$28(a1)
0001A96E 6600                       		bne.s	loc_19658
0001A970 0C40 0094                  		cmpi.w	#$94,d0
0001A974 6C00                       		bge.s	loc_19658
0001A976 5E40                       		addq.w	#7,d0
0001A978 6000                       		bra.s	loc_19658
0001A97A                            ; ===========================================================================
0001A97A                            
0001A97A                            loc_1964C:
0001A97A 4A69 003C                  		tst.w	$3C(a1)
0001A97E 6A00                       		bpl.s	loc_19658
0001A980                            
0001A980                            loc_19652:
0001A980 4A40                       		tst.w	d0
0001A982 6F00                       		ble.s	loc_19658
0001A984 5B40                       		subq.w	#5,d0
0001A986                            
0001A986                            loc_19658:
0001A986 3140 003C                  		move.w	d0,$3C(a0)
0001A98A E440                       		asr.w	#2,d0
0001A98C D168 000C                  		add.w	d0,$C(a0)
0001A990 117C 0008 0019             		move.b	#8,$19(a0)
0001A996 117C 000C 0016             		move.b	#$C,$16(a0)
0001A99C 4228 0020                  		clr.b	$20(a0)
0001A9A0 2268 0034                  		movea.l	$34(a0),a1
0001A9A4 4A29 0020                  		tst.b	$20(a1)
0001A9A8 6700                       		beq.s	loc_19688
0001A9AA 4A29 0029                  		tst.b	$29(a1)
0001A9AE 6600                       		bne.s	loc_19688
0001A9B0 117C 0084 0020             		move.b	#$84,$20(a0)
0001A9B6                            
0001A9B6                            loc_19688:
0001A9B6 6000 FF50                  		bra.w	loc_195DA
0001A9BA                            ; ===========================================================================
0001A9BA                            
0001A9BA                            Obj75_SpikeDelete:
0001A9BA 4EF9 0000 E792             		jmp	DeleteObject
0001A9C0                            ; ===========================================================================
0001A9C0                            ; ---------------------------------------------------------------------------
0001A9C0                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001A9C0                            ; ---------------------------------------------------------------------------
0001A9C0                            
0001A9C0                            Obj76:					; XREF: Obj_Index
0001A9C0 7000                       		moveq	#0,d0
0001A9C2 1028 0024                  		move.b	$24(a0),d0
0001A9C6 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001A9CA 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001A9CE                            ; ===========================================================================
0001A9CE 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001A9D0 0000                       		dc.w Obj76_Action-Obj76_Index
0001A9D2 0000                       		dc.w loc_19762-Obj76_Index
0001A9D4                            ; ===========================================================================
0001A9D4                            
0001A9D4                            Obj76_Main:				; XREF: Obj76_Index
0001A9D4 7800                       		moveq	#0,d4
0001A9D6 3A3C 2C10                  		move.w	#$2C10,d5
0001A9DA 7C09                       		moveq	#9,d6
0001A9DC 43D0                       		lea	(a0),a1
0001A9DE 6000                       		bra.s	Obj76_MakeBlock
0001A9E0                            ; ===========================================================================
0001A9E0                            
0001A9E0                            Obj76_Loop:
0001A9E0 4EB9 0000 EBDC             		jsr	SingleObjLoad
0001A9E6 6600                       		bne.s	Obj76_ExitLoop
0001A9E8                            
0001A9E8                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001A9E8 12BC 0076                  		move.b	#$76,(a1)
0001A9EC 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001A9F4 337C 4000 0002             		move.w	#$4000,2(a1)
0001A9FA 137C 0004 0001             		move.b	#4,1(a1)
0001AA00 137C 0010 0019             		move.b	#$10,$19(a1)
0001AA06 137C 0010 0016             		move.b	#$10,$16(a1)
0001AA0C 137C 0003 0018             		move.b	#3,$18(a1)
0001AA12 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001AA16 337C 0582 000C             		move.w	#$582,$C(a1)
0001AA1C 3344 0028                  		move.w	d4,$28(a1)
0001AA20 0644 0101                  		addi.w	#$101,d4
0001AA24 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001AA28 5429 0024                  		addq.b	#2,$24(a1)
0001AA2C 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001AA30                            
0001AA30                            Obj76_ExitLoop:
0001AA30 4E75                       		rts	
0001AA32                            ; ===========================================================================
0001AA32                            
0001AA32                            Obj76_Action:				; XREF: Obj76_Index
0001AA32 1028 0029                  		move.b	$29(a0),d0
0001AA36 B028 0028                  		cmp.b	$28(a0),d0
0001AA3A 6700                       		beq.s	Obj76_Solid
0001AA3C 4A00                       		tst.b	d0
0001AA3E 6B00                       		bmi.s	loc_19718
0001AA40                            
0001AA40                            loc_19712:
0001AA40 6100 0000                  		bsr.w	Obj76_Break
0001AA44 6000                       		bra.s	Obj76_Display
0001AA46                            ; ===========================================================================
0001AA46                            
0001AA46                            loc_19718:
0001AA46 2268 0034                  		movea.l	$34(a0),a1
0001AA4A 4A29 0021                  		tst.b	$21(a1)
0001AA4E 67F0                       		beq.s	loc_19712
0001AA50 3169 0008 0008             		move.w	8(a1),8(a0)
0001AA56 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AA5C 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001AA62 B2C8                       		cmpa.w	a0,a1
0001AA64 6500                       		bcs.s	Obj76_Display
0001AA66 3029 0012                  		move.w	$12(a1),d0
0001AA6A 48C0                       		ext.l	d0
0001AA6C E080                       		asr.l	#8,d0
0001AA6E D168 000C                  		add.w	d0,$C(a0)
0001AA72 6000                       		bra.s	Obj76_Display
0001AA74                            ; ===========================================================================
0001AA74                            
0001AA74                            Obj76_Solid:				; XREF: Obj76_Action
0001AA74 323C 001B                  		move.w	#$1B,d1
0001AA78 343C 0010                  		move.w	#$10,d2
0001AA7C 363C 0011                  		move.w	#$11,d3
0001AA80 3828 0008                  		move.w	8(a0),d4
0001AA84 4EB9 0001 0B26             		jsr	SolidObject
0001AA8A                            
0001AA8A                            Obj76_Display:				; XREF: Obj76_Action
0001AA8A 4EF9 0000 E756             		jmp	DisplaySprite
0001AA90                            ; ===========================================================================
0001AA90                            
0001AA90                            loc_19762:				; XREF: Obj76_Index
0001AA90 4A28 0001                  		tst.b	1(a0)
0001AA94 6A00                       		bpl.s	Obj76_Delete
0001AA96 4EB9 0000 E6BE             		jsr	ObjectFall
0001AA9C 4EF9 0000 E756             		jmp	DisplaySprite
0001AAA2                            ; ===========================================================================
0001AAA2                            
0001AAA2                            Obj76_Delete:
0001AAA2 4EF9 0000 E792             		jmp	DeleteObject
0001AAA8                            
0001AAA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AAA8                            
0001AAA8                            
0001AAA8                            Obj76_Break:				; XREF: Obj76_Action
0001AAA8 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001AAAC 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001AAB0 7801                       		moveq	#1,d4
0001AAB2 7203                       		moveq	#3,d1
0001AAB4 7438                       		moveq	#$38,d2
0001AAB6 5428 0024                  		addq.b	#2,$24(a0)
0001AABA 117C 0008 0019             		move.b	#8,$19(a0)
0001AAC0 117C 0008 0016             		move.b	#8,$16(a0)
0001AAC6 43D0                       		lea	(a0),a1
0001AAC8 6000                       		bra.s	Obj76_MakeFrag
0001AACA                            ; ===========================================================================
0001AACA                            
0001AACA                            Obj76_LoopFrag:
0001AACA 4EB9 0000 EBF2             		jsr	SingleObjLoad2
0001AAD0 6600                       		bne.s	loc_197D4
0001AAD2                            
0001AAD2                            Obj76_MakeFrag:
0001AAD2 45D0                       		lea	(a0),a2
0001AAD4 47D1                       		lea	(a1),a3
0001AAD6 7603                       		moveq	#3,d3
0001AAD8                            
0001AAD8                            loc_197AA:
0001AAD8 26DA                       		move.l	(a2)+,(a3)+
0001AADA 26DA                       		move.l	(a2)+,(a3)+
0001AADC 26DA                       		move.l	(a2)+,(a3)+
0001AADE 26DA                       		move.l	(a2)+,(a3)+
0001AAE0 51CB FFF6                  		dbf	d3,loc_197AA
0001AAE4                            
0001AAE4 335C 0010                  		move.w	(a4)+,$10(a1)
0001AAE8 335C 0012                  		move.w	(a4)+,$12(a1)
0001AAEC 361D                       		move.w	(a5)+,d3
0001AAEE D769 0008                  		add.w	d3,8(a1)
0001AAF2 361D                       		move.w	(a5)+,d3
0001AAF4 D769 000C                  		add.w	d3,$C(a1)
0001AAF8 1344 001A                  		move.b	d4,$1A(a1)
0001AAFC 5244                       		addq.w	#1,d4
0001AAFE 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001AB02                            
0001AB02                            loc_197D4:
0001AB02 303C 00CB                  		move.w	#$CB,d0
0001AB06 4EF9 0000 1C7A             		jmp	(PlaySound_Special).l ;	play smashing sound
0001AB0C                            ; End of function Obj76_Break
0001AB0C                            
0001AB0C                            ; ===========================================================================
0001AB0C FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001AB10 0180 FE00                  		dc.w $180, $FE00
0001AB14 FF00 FF00                  		dc.w $FF00, $FF00
0001AB18 0100 FF00                  		dc.w $100, $FF00
0001AB1C FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001AB20 0010 0000                  		dc.w $10, 0
0001AB24 0000 0010                  		dc.w 0,	$10
0001AB28 0010 0010                  		dc.w $10, $10
0001AB2C                            ; ---------------------------------------------------------------------------
0001AB2C                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001AB2C                            ; ---------------------------------------------------------------------------
0001AB2C                            Map_obj76:
0001AB2C                            	include "_maps\obj76.asm"
0001AB2C                            ; ---------------------------------------------------------------------------
0001AB2C                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001AB2C                            ; ---------------------------------------------------------------------------
0001AB2C 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001AB30 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001AB34 0000                       		dc.w byte_19826-Map_obj76
0001AB36 02                         byte_19808:	dc.b 2
0001AB37 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001AB3C 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001AB41 00                         		dc.b 0
0001AB42 01                         byte_19814:	dc.b 1
0001AB43 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001AB48 01                         byte_1981A:	dc.b 1
0001AB49 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001AB4E 01                         byte_19820:	dc.b 1
0001AB4F F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001AB54 01                         byte_19826:	dc.b 1
0001AB55 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001AB5A                            		even
0001AB5A                            		even
0001AB5A                            
0001AB5A                            ; ===========================================================================
0001AB5A                            
0001AB5A                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001AB5A 4EF9 0000 E792             		jmp	DeleteObject
0001AB60                            ; ===========================================================================
0001AB60                            ; ---------------------------------------------------------------------------
0001AB60                            ; Object 82 - Eggman (SBZ2)
0001AB60                            ; ---------------------------------------------------------------------------
0001AB60                            
0001AB60                            Obj82:					; XREF: Obj_Index
0001AB60 7000                       		moveq	#0,d0
0001AB62 1028 0024                  		move.b	$24(a0),d0
0001AB66 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001AB6A 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001AB6E                            ; ===========================================================================
0001AB6E 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001AB70 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001AB72 0000                       		dc.w Obj82_Switch-Obj82_Index
0001AB74                            
0001AB74 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001AB77 0400 03                    		dc.b 4,	0, 3
0001AB7A                            ; ===========================================================================
0001AB7A                            
0001AB7A                            Obj82_Main:				; XREF: Obj82_Index
0001AB7A 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001AB7E 317C 2160 0008             		move.w	#$2160,8(a0)
0001AB84 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001AB8A 117C 000F 0020             		move.b	#$F,$20(a0)
0001AB90 117C 0010 0021             		move.b	#$10,$21(a0)
0001AB96 08A8 0000 0022             		bclr	#0,$22(a0)
0001AB9C 4228 0025                  		clr.b	$25(a0)
0001ABA0 115A 0024                  		move.b	(a2)+,$24(a0)
0001ABA4 115A 001C                  		move.b	(a2)+,$1C(a0)
0001ABA8 115A 0018                  		move.b	(a2)+,$18(a0)
0001ABAC 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001ABB4 317C 0400 0002             		move.w	#$400,2(a0)
0001ABBA 117C 0004 0001             		move.b	#4,1(a0)
0001ABC0 08E8 0007 0001             		bset	#7,1(a0)
0001ABC6 117C 0020 0019             		move.b	#$20,$19(a0)
0001ABCC 4EB9 0000 EBF2             		jsr	SingleObjLoad2
0001ABD2 6600                       		bne.s	Obj82_Eggman
0001ABD4 2348 0034                  		move.l	a0,$34(a1)
0001ABD8 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001ABDC 337C 2130 0008             		move.w	#$2130,8(a1)
0001ABE2 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001ABE8 4228 0025                  		clr.b	$25(a0)
0001ABEC 135A 0024                  		move.b	(a2)+,$24(a1)
0001ABF0 135A 001C                  		move.b	(a2)+,$1C(a1)
0001ABF4 135A 0018                  		move.b	(a2)+,$18(a1)
0001ABF8 237C 0000 CED8 0004        		move.l	#Map_obj32,4(a1)
0001AC00 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001AC06 137C 0004 0001             		move.b	#4,1(a1)
0001AC0C 08E9 0007 0001             		bset	#7,1(a1)
0001AC12 137C 0010 0019             		move.b	#$10,$19(a1)
0001AC18 137C 0000 001A             		move.b	#0,$1A(a1)
0001AC1E                            
0001AC1E                            Obj82_Eggman:				; XREF: Obj82_Index
0001AC1E 7000                       		moveq	#0,d0
0001AC20 1028 0025                  		move.b	$25(a0),d0
0001AC24 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001AC28 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001AC2C 43FA 0000                  		lea	Ani_obj82(pc),a1
0001AC30 4EB9 0000 B7A4             		jsr	AnimateSprite
0001AC36 4EF9 0000 E756             		jmp	DisplaySprite
0001AC3C                            ; ===========================================================================
0001AC3C 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001AC3E 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001AC40 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001AC42 0000                       		dc.w loc_19934-Obj82_EggIndex
0001AC44                            ; ===========================================================================
0001AC44                            
0001AC44                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001AC44 3028 0008                  		move.w	8(a0),d0
0001AC48 9078 D008                  		sub.w	($FFFFD008).w,d0
0001AC4C 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001AC50 6400                       		bcc.s	loc_19934	; if not, branch
0001AC52 5428 0025                  		addq.b	#2,$25(a0)
0001AC56 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001AC5C 117C 0001 001C             		move.b	#1,$1C(a0)
0001AC62                            
0001AC62                            loc_19934:				; XREF: Obj82_EggIndex
0001AC62 4EF9 0000 E730             		jmp	SpeedToPos
0001AC68                            ; ===========================================================================
0001AC68                            
0001AC68                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001AC68 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001AC6C 6600                       		bne.s	loc_19954	; if time remains, branch
0001AC6E 5428 0025                  		addq.b	#2,$25(a0)
0001AC72 117C 0002 001C             		move.b	#2,$1C(a0)
0001AC78 5868 000C                  		addq.w	#4,$C(a0)
0001AC7C 317C 000F 003C             		move.w	#15,$3C(a0)
0001AC82                            
0001AC82                            loc_19954:
0001AC82 60DE                       		bra.s	loc_19934
0001AC84                            ; ===========================================================================
0001AC84                            
0001AC84                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001AC84 5368 003C                  		subq.w	#1,$3C(a0)
0001AC88 6E00                       		bgt.s	loc_199D0
0001AC8A 6600                       		bne.s	loc_1996A
0001AC8C 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001AC92 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001AC98                            
0001AC98                            loc_1996A:
0001AC98 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001AC9E 6E00                       		bgt.s	loc_19976
0001ACA0 4268 0010                  		clr.w	$10(a0)
0001ACA4                            
0001ACA4                            loc_19976:
0001ACA4 0668 0024 0012             		addi.w	#$24,$12(a0)
0001ACAA 4A68 0012                  		tst.w	$12(a0)
0001ACAE 6B00                       		bmi.s	Obj82_FindBlocks
0001ACB0 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001ACB6 6500                       		bcs.s	Obj82_FindBlocks
0001ACB8 317C 5357 0028             		move.w	#$5357,$28(a0)
0001ACBE 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001ACC4 6500                       		bcs.s	Obj82_FindBlocks
0001ACC6 317C 059B 000C             		move.w	#$59B,$C(a0)
0001ACCC 4268 0012                  		clr.w	$12(a0)
0001ACD0                            
0001ACD0                            Obj82_FindBlocks:
0001ACD0 3028 0010                  		move.w	$10(a0),d0
0001ACD4 8068 0012                  		or.w	$12(a0),d0
0001ACD8 6600                       		bne.s	loc_199D0
0001ACDA 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001ACDE 703E                       		moveq	#$3E,d0
0001ACE0 7240                       		moveq	#$40,d1
0001ACE2                            
0001ACE2                            Obj82_FindLoop:	
0001ACE2 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001ACE4 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001ACE8 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001ACEC                            
0001ACEC 6600                       		bne.s	loc_199D0
0001ACEE 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001ACF4 5428 0025                  		addq.b	#2,$25(a0)
0001ACF8 117C 0001 001C             		move.b	#1,$1C(a0)
0001ACFE                            
0001ACFE                            loc_199D0:
0001ACFE 6000 FF62                  		bra.w	loc_19934
0001AD02                            ; ===========================================================================
0001AD02                            
0001AD02                            Obj82_Switch:				; XREF: Obj82_Index
0001AD02 7000                       		moveq	#0,d0
0001AD04 1028 0025                  		move.b	$25(a0),d0
0001AD08 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001AD0C 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001AD10                            ; ===========================================================================
0001AD10 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001AD12 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001AD14                            ; ===========================================================================
0001AD14                            
0001AD14                            loc_199E6:				; XREF: Obj82_SwIndex
0001AD14 2268 0034                  		movea.l	$34(a0),a1
0001AD18 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001AD1E 6600                       		bne.s	Obj82_SwDisplay
0001AD20 117C 0001 001A             		move.b	#1,$1A(a0)
0001AD26 5428 0025                  		addq.b	#2,$25(a0)
0001AD2A                            
0001AD2A                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001AD2A 4EF9 0000 E756             		jmp	DisplaySprite
0001AD30                            ; ===========================================================================
0001AD30                            Ani_obj82:
0001AD30                            	include "_anim\obj82.asm"
0001AD30                            ; ---------------------------------------------------------------------------
0001AD30                            ; Animation script - Eggman (SBZ2)
0001AD30                            ; ---------------------------------------------------------------------------
0001AD30 0000                       		dc.w byte_19A10-Ani_obj82
0001AD32 0000                       		dc.w byte_19A14-Ani_obj82
0001AD34 0000                       		dc.w byte_19A18-Ani_obj82
0001AD36 0000                       		dc.w byte_19A20-Ani_obj82
0001AD38 0000                       		dc.w byte_19A24-Ani_obj82
0001AD3A 0000                       		dc.w byte_19A2A-Ani_obj82
0001AD3C 0000                       		dc.w byte_19A30-Ani_obj82
0001AD3E 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001AD42 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001AD46 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001AD4E 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001AD52 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001AD58 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001AD5E 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001AD62                            		even
0001AD62                            		even
0001AD62                            
0001AD62                            ; ---------------------------------------------------------------------------
0001AD62                            ; Sprite mappings - Eggman (SBZ2)
0001AD62                            ; ---------------------------------------------------------------------------
0001AD62                            Map_obj82:
0001AD62                            	include "_maps\obj82.asm"
0001AD62                            ; ================================================================================
0001AD62                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001AD62                            ; ================================================================================
0001AD62                            
0001AD62                            DATAA16Z12RYSAF:
0001AD62 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001AD66 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001AD6A 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001AD6E 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001AD72 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001AD76 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001AD78 03                         DATAA16Z12RYSAF_0: dc.b $3
0001AD79 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001AD7E E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001AD83 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001AD88 04                         DATAA16Z12RYSAF_1: dc.b $4
0001AD89 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001AD8E E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001AD93 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001AD98 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001AD9D 04                         DATAA16Z12RYSAF_2: dc.b $4
0001AD9E E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001ADA3 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001ADA8 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001ADAD FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001ADB2 03                         DATAA16Z12RYSAF_3: dc.b $3
0001ADB3 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001ADB8 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001ADBD F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001ADC2 04                         DATAA16Z12RYSAF_4: dc.b $4
0001ADC3 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001ADC8 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001ADCD 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001ADD2 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001ADD7 04                         DATAA16Z12RYSAF_5: dc.b $4
0001ADD8 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001ADDD E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001ADE2 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001ADE7 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001ADEC 07                         DATAA16Z12RYSAF_6: dc.b $7
0001ADED E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001ADF2 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001ADF7 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001ADFC 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001AE01 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001AE06 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001AE0B F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001AE10 04                         DATAA16Z12RYSAF_7: dc.b $4
0001AE11 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001AE16 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001AE1B 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001AE20 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001AE25 05                         DATAA16Z12RYSAF_8: dc.b $5
0001AE26 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001AE2B E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001AE30 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001AE35 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001AE3A EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001AE3F 08                         DATAA16Z12RYSAF_9: dc.b $8
0001AE40 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001AE45 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001AE4A E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001AE4F 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001AE54 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001AE59 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001AE5E 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001AE63 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001AE68 03                         DATAA16Z12RYSAF_A: dc.b $3
0001AE69 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001AE6E F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001AE73 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001AE78                            	even
0001AE78                            	even
0001AE78                            
0001AE78                            ; ===========================================================================
0001AE78                            ; ---------------------------------------------------------------------------
0001AE78                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001AE78                            ; ---------------------------------------------------------------------------
0001AE78                            
0001AE78                            Obj83:					; XREF: Obj_Index
0001AE78 7000                       		moveq	#0,d0
0001AE7A 1028 0024                  		move.b	$24(a0),d0
0001AE7E 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001AE82 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001AE86                            ; ===========================================================================
0001AE86 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001AE88 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001AE8A 0000                       		dc.w loc_19C36-Obj83_Index
0001AE8C 0000                       		dc.w loc_19C62-Obj83_Index
0001AE8E 0000                       		dc.w loc_19C72-Obj83_Index
0001AE90 0000                       		dc.w loc_19C80-Obj83_Index
0001AE92                            ; ===========================================================================
0001AE92                            
0001AE92                            Obj83_Main:				; XREF: Obj83_Index
0001AE92 317C 2080 0008             		move.w	#$2080,8(a0)
0001AE98 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001AE9E 117C 0080 0019             		move.b	#$80,$19(a0)
0001AEA4 117C 0010 0016             		move.b	#$10,$16(a0)
0001AEAA 117C 0004 0001             		move.b	#4,1(a0)
0001AEB0 08E8 0007 0001             		bset	#7,1(a0)
0001AEB6 7800                       		moveq	#0,d4
0001AEB8 3A3C 2010                  		move.w	#$2010,d5
0001AEBC 7C07                       		moveq	#7,d6
0001AEBE 45E8 0030                  		lea	$30(a0),a2
0001AEC2                            
0001AEC2                            Obj83_MakeBlock:
0001AEC2 4EB9 0000 EBDC             		jsr	SingleObjLoad
0001AEC8 6600                       		bne.s	Obj83_ExitMake
0001AECA 34C9                       		move.w	a1,(a2)+
0001AECC 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001AED0 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001AED8 337C 4518 0002             		move.w	#$4518,2(a1)
0001AEDE 137C 0004 0001             		move.b	#4,1(a1)
0001AEE4 137C 0010 0019             		move.b	#$10,$19(a1)
0001AEEA 137C 0010 0016             		move.b	#$10,$16(a1)
0001AEF0 137C 0003 0018             		move.b	#3,$18(a1)
0001AEF6 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001AEFA 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001AF00 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001AF04 137C 0008 0024             		move.b	#8,$24(a1)
0001AF0A 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001AF0E                            
0001AF0E                            Obj83_ExitMake:
0001AF0E 5428 0024                  		addq.b	#2,$24(a0)
0001AF12 4E75                       		rts	
0001AF14                            ; ===========================================================================
0001AF14                            
0001AF14                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001AF14 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001AF1A 6600                       		bne.s	Obj83_Solid	; if not, branch
0001AF1C 4228 001A                  		clr.b	$1A(a0)
0001AF20 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001AF24                            
0001AF24                            Obj83_Solid:
0001AF24 7000                       		moveq	#0,d0
0001AF26 1028 001A                  		move.b	$1A(a0),d0
0001AF2A 4400                       		neg.b	d0
0001AF2C 4880                       		ext.w	d0
0001AF2E 5040                       		addq.w	#8,d0
0001AF30 E940                       		asl.w	#4,d0
0001AF32 383C 2100                  		move.w	#$2100,d4
0001AF36 9840                       		sub.w	d0,d4
0001AF38 1140 0019                  		move.b	d0,$19(a0)
0001AF3C 3144 0008                  		move.w	d4,8(a0)
0001AF40 720B                       		moveq	#$B,d1
0001AF42 D240                       		add.w	d0,d1
0001AF44 7410                       		moveq	#$10,d2
0001AF46 7611                       		moveq	#$11,d3
0001AF48 4EF9 0001 0B26             		jmp	SolidObject
0001AF4E                            ; ===========================================================================
0001AF4E                            
0001AF4E                            loc_19C36:				; XREF: Obj83_Index
0001AF4E 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001AF54 6400                       		bcc.s	Obj83_Solid2
0001AF56 70FF                       		moveq	#-1,d0
0001AF58 1028 001A                  		move.b	$1A(a0),d0
0001AF5C 4880                       		ext.w	d0
0001AF5E D040                       		add.w	d0,d0
0001AF60 3030 0030                  		move.w	$30(a0,d0.w),d0
0001AF64 2240                       		movea.l	d0,a1
0001AF66 337C 474F 0028             		move.w	#$474F,$28(a1)
0001AF6C 5228 001A                  		addq.b	#1,$1A(a0)
0001AF70 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001AF76 6700                       		beq.s	loc_19C62
0001AF78                            
0001AF78                            Obj83_Solid2:
0001AF78 60AA                       		bra.s	Obj83_Solid
0001AF7A                            ; ===========================================================================
0001AF7A                            
0001AF7A                            loc_19C62:				; XREF: Obj83_Index
0001AF7A 08A8 0003 0022             		bclr	#3,$22(a0)
0001AF80 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001AF86 6000 FBD2                  		bra.w	loc_1982C
0001AF8A                            ; ===========================================================================
0001AF8A                            
0001AF8A                            loc_19C72:				; XREF: Obj83_Index
0001AF8A 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001AF90 6700                       		beq.s	Obj83_Break	; if yes, branch
0001AF92 4EF9 0000 E756             		jmp	DisplaySprite
0001AF98                            ; ===========================================================================
0001AF98                            
0001AF98                            loc_19C80:				; XREF: Obj83_Index
0001AF98 4A28 0001                  		tst.b	1(a0)
0001AF9C 6A00 FBBC                  		bpl.w	loc_1982C
0001AFA0 4EB9 0000 E6BE             		jsr	ObjectFall
0001AFA6 4EF9 0000 E756             		jmp	DisplaySprite
0001AFAC                            ; ===========================================================================
0001AFAC                            
0001AFAC                            Obj83_Break:				; XREF: loc_19C72
0001AFAC 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001AFB0 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001AFB4 7801                       		moveq	#1,d4
0001AFB6 7203                       		moveq	#3,d1
0001AFB8 7438                       		moveq	#$38,d2
0001AFBA 5428 0024                  		addq.b	#2,$24(a0)
0001AFBE 117C 0008 0019             		move.b	#8,$19(a0)
0001AFC4 117C 0008 0016             		move.b	#8,$16(a0)
0001AFCA 43D0                       		lea	(a0),a1
0001AFCC 6000                       		bra.s	Obj83_MakeFrag
0001AFCE                            ; ===========================================================================
0001AFCE                            
0001AFCE                            Obj83_LoopFrag:
0001AFCE 4EB9 0000 EBF2             		jsr	SingleObjLoad2
0001AFD4 6600                       		bne.s	Obj83_BreakSnd
0001AFD6                            
0001AFD6                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001AFD6 45D0                       		lea	(a0),a2
0001AFD8 47D1                       		lea	(a1),a3
0001AFDA 7603                       		moveq	#3,d3
0001AFDC                            
0001AFDC                            loc_19CC4:
0001AFDC 26DA                       		move.l	(a2)+,(a3)+
0001AFDE 26DA                       		move.l	(a2)+,(a3)+
0001AFE0 26DA                       		move.l	(a2)+,(a3)+
0001AFE2 26DA                       		move.l	(a2)+,(a3)+
0001AFE4 51CB FFF6                  		dbf	d3,loc_19CC4
0001AFE8                            
0001AFE8 335C 0012                  		move.w	(a4)+,$12(a1)
0001AFEC 361D                       		move.w	(a5)+,d3
0001AFEE D769 0008                  		add.w	d3,8(a1)
0001AFF2 361D                       		move.w	(a5)+,d3
0001AFF4 D769 000C                  		add.w	d3,$C(a1)
0001AFF8 1344 001A                  		move.b	d4,$1A(a1)
0001AFFC 5244                       		addq.w	#1,d4
0001AFFE 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001B002                            
0001B002                            Obj83_BreakSnd:
0001B002 303C 00CB                  		move.w	#$CB,d0
0001B006 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play smashing sound
0001B00C 4EF9 0000 E756             		jmp	DisplaySprite
0001B012                            ; ===========================================================================
0001B012 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001B016 0120 00C0                  		dc.w $120, $C0
0001B01A FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001B01E 0010 0000                  		dc.w $10, 0
0001B022 0000 0010                  		dc.w 0,	$10
0001B026 0010 0010                  		dc.w $10, $10
0001B02A                            ; ---------------------------------------------------------------------------
0001B02A                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001B02A                            ; ---------------------------------------------------------------------------
0001B02A                            Map_obj83:
0001B02A                            	include "_maps\obj83.asm"
0001B02A                            ; ---------------------------------------------------------------------------
0001B02A                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001B02A                            ; ---------------------------------------------------------------------------
0001B02A 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001B02E 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001B032 0000                       		dc.w byte_19D46-Map_obj83
0001B034 01                         byte_19D1C:	dc.b 1
0001B035 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001B03A 02                         byte_19D22:	dc.b 2
0001B03B F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001B040 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001B045 00                         		dc.b 0
0001B046 02                         byte_19D2E:	dc.b 2
0001B047 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001B04C F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001B051 00                         		dc.b 0
0001B052 02                         byte_19D3A:	dc.b 2
0001B053 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001B058 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001B05D 00                         		dc.b 0
0001B05E 02                         byte_19D46:	dc.b 2
0001B05F F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001B064 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001B06A 00                         		even
0001B06A 00                         		even
0001B06A                            
0001B06A                            ; ===========================================================================
0001B06A                            ; ---------------------------------------------------------------------------
0001B06A                            ; Object 85 - Eggman (FZ)
0001B06A                            ; ---------------------------------------------------------------------------
0001B06A                            
0001B06A                            Obj85_Delete:
0001B06A 4EF9 0000 E792             		jmp	DeleteObject
0001B070                            ; ===========================================================================
0001B070                            
0001B070                            Obj85:					; XREF: Obj_Index
0001B070 7000                       		moveq	#0,d0
0001B072 1028 0024                  		move.b	$24(a0),d0
0001B076 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001B07A 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001B07E                            ; ===========================================================================
0001B07E 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001B080 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001B082 0000                       		dc.w loc_1A38E-Obj85_Index
0001B084 0000                       		dc.w loc_1A346-Obj85_Index
0001B086 0000                       		dc.w loc_1A2C6-Obj85_Index
0001B088 0000                       		dc.w loc_1A3AC-Obj85_Index
0001B08A 0000                       		dc.w loc_1A264-Obj85_Index
0001B08C                            
0001B08C 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001B092 0001 AD62                  		dc.l Map_obj82		; mappings pointer
0001B096 25B0 0590 0300             		dc.w $25B0, $590, $300
0001B09C 0000 0000                  		dc.l Map_obj84
0001B0A0 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001B0A6 0000 0000                  		dc.l Map_FZBoss
0001B0AA 26E0 0596 0470             		dc.w $26E0, $596, $470
0001B0B0 0001 AD62                  		dc.l Map_obj82
0001B0B4 26E0 0596 0400             		dc.w $26E0, $596, $400
0001B0BA 0001 90A4                  		dc.l Map_Eggman
0001B0BE 26E0 0596 0400             		dc.w $26E0, $596, $400
0001B0C4 0001 90A4                  		dc.l Map_Eggman
0001B0C8                            
0001B0C8 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001B0CD 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001B0D2 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001B0D7 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001B0DC 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001B0E1 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001B0E6                            ; ===========================================================================
0001B0E6                            
0001B0E6                            Obj85_Main:				; XREF: Obj85_Index
0001B0E6 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001B0EA 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001B0EE 2248                       		movea.l	a0,a1
0001B0F0 7205                       		moveq	#5,d1
0001B0F2 6000                       		bra.s	Obj85_LoadBoss
0001B0F4                            ; ===========================================================================
0001B0F4                            
0001B0F4                            Obj85_Loop:
0001B0F4 4EB9 0000 EBF2             		jsr	SingleObjLoad2
0001B0FA 6600                       		bne.s	loc_19E20
0001B0FC                            
0001B0FC                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001B0FC 12BC 0085                  		move.b	#$85,(a1)
0001B100 335A 0008                  		move.w	(a2)+,8(a1)
0001B104 335A 000C                  		move.w	(a2)+,$C(a1)
0001B108 335A 0002                  		move.w	(a2)+,2(a1)
0001B10C 235A 0004                  		move.l	(a2)+,4(a1)
0001B110 135B 0024                  		move.b	(a3)+,$24(a1)
0001B114 135B 001C                  		move.b	(a3)+,$1C(a1)
0001B118 135B 0018                  		move.b	(a3)+,$18(a1)
0001B11C 135B 0017                  		move.b	(a3)+,$17(a1)
0001B120 135B 0016                  		move.b	(a3)+,$16(a1)
0001B124 137C 0004 0001             		move.b	#4,1(a1)
0001B12A 08E8 0007 0001             		bset	#7,1(a0)
0001B130 2348 0034                  		move.l	a0,$34(a1)
0001B134 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001B138                            
0001B138                            loc_19E20:
0001B138 45E8 0036                  		lea	$36(a0),a2
0001B13C 4EB9 0000 EBDC             		jsr	SingleObjLoad
0001B142 6600                       		bne.s	loc_19E5A
0001B144 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001B148 3489                       		move.w	a1,(a2)
0001B14A 2348 0034                  		move.l	a0,$34(a1)
0001B14E 45E8 0038                  		lea	$38(a0),a2
0001B152 7400                       		moveq	#0,d2
0001B154 7203                       		moveq	#3,d1
0001B156                            
0001B156                            loc_19E3E:
0001B156 4EB9 0000 EBF2             		jsr	SingleObjLoad2
0001B15C 6600                       		bne.s	loc_19E5A
0001B15E 34C9                       		move.w	a1,(a2)+
0001B160 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001B164 2348 0034                  		move.l	a0,$34(a1)
0001B168 1342 0028                  		move.b	d2,$28(a1)
0001B16C 5442                       		addq.w	#2,d2
0001B16E 51C9 FFE6                  		dbf	d1,loc_19E3E
0001B172                            
0001B172                            loc_19E5A:
0001B172 317C 0000 0034             		move.w	#0,$34(a0)
0001B178 4EB8 33F0                  		jsr	RandomNumber	; get a number between 0 and 250
0001B17C 4240                       		clr.w	d0
0001B17E 4840                       		swap	d0
0001B180 80FC 00FB                  		divu.w	#251,d0
0001B184 4840                       		swap	d0
0001B186 0640 0118                  		add.w	#280,d0		; add 280
0001B18A 33C0 00FF 7FFE             		move.w	d0,($FF7FFE).l	; that's the number of hits
0001B190 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B196                            
0001B196                            Obj85_Eggman:				; XREF: Obj85_Index
0001B196 7000                       		moveq	#0,d0
0001B198 1028 0034                  		move.b	$34(a0),d0
0001B19C 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001B1A0 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001B1A4 4EF9 0000 E756             		jmp	DisplaySprite
0001B1AA                            ; ===========================================================================
0001B1AA 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001B1AE 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001B1B2 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001B1B6 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001B1BA                            ; ===========================================================================
0001B1BA                            
0001B1BA                            loc_19E90:				; XREF: off_19E80
0001B1BA 4AB8 F680                  		tst.l	($FFFFF680).w
0001B1BE 6600                       		bne.s	loc_19EA2
0001B1C0 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001B1C6 6500                       		bcs.s	loc_19EA2
0001B1C8 5428 0034                  		addq.b	#2,$34(a0)
0001B1CC                            
0001B1CC                            loc_19EA2:
0001B1CC 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001B1D0 4E75                       		rts	
0001B1D2                            ; ===========================================================================
0001B1D2                            
0001B1D2                            loc_19EA8:				; XREF: off_19E80
0001B1D2 4A68 0030                  		tst.w	$30(a0)
0001B1D6 6A00                       		bpl.s	loc_19F10
0001B1D8 4268 0030                  		clr.w	$30(a0)
0001B1DC 4EB9 0000 33F0             		jsr	(RandomNumber).l
0001B1E2 0240 000C                  		andi.w	#$C,d0
0001B1E6 3200                       		move.w	d0,d1
0001B1E8 5441                       		addq.w	#2,d1
0001B1EA 4A80                       		tst.l	d0
0001B1EC 6A00                       		bpl.s	loc_19EC6
0001B1EE C141                       		exg	d1,d0
0001B1F0                            
0001B1F0                            loc_19EC6:
0001B1F0 43FA 0000                  		lea	word_19FD6(pc),a1
0001B1F4 3031 0000                  		move.w	(a1,d0.w),d0
0001B1F8 3231 1000                  		move.w	(a1,d1.w),d1
0001B1FC 3140 0030                  		move.w	d0,$30(a0)
0001B200 74FF                       		moveq	#-1,d2
0001B202 3430 0038                  		move.w	$38(a0,d0.w),d2
0001B206 2242                       		movea.l	d2,a1
0001B208 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B20E 337C FFFF 0030             		move.w	#-1,$30(a1)
0001B214 3430 1038                  		move.w	$38(a0,d1.w),d2
0001B218 2242                       		movea.l	d2,a1
0001B21A 137C 0001 0029             		move.b	#1,$29(a1)
0001B220 337C 0000 0030             		move.w	#0,$30(a1)
0001B226 317C 0001 0032             		move.w	#1,$32(a0)
0001B22C 4228 0035                  		clr.b	$35(a0)
0001B230 303C 00B7                  		move.w	#$B7,d0
0001B234 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001B23A                            
0001B23A                            loc_19F10:
0001B23A 4A68 0032                  		tst.w	$32(a0)
0001B23E 6B00 0000                  		bmi.w	loc_19FA6
0001B242 08A8 0000 0022             		bclr	#0,$22(a0)
0001B248 3038 D008                  		move.w	($FFFFD008).w,d0
0001B24C 9068 0008                  		sub.w	8(a0),d0
0001B250 6500                       		bcs.s	loc_19F2E
0001B252 08E8 0000 0022             		bset	#0,$22(a0)
0001B258                            
0001B258                            loc_19F2E:
0001B258 323C 002B                  		move.w	#$2B,d1
0001B25C 343C 0014                  		move.w	#$14,d2
0001B260 363C 0014                  		move.w	#$14,d3
0001B264 3828 0008                  		move.w	8(a0),d4
0001B268 4EB9 0001 0B26             		jsr	SolidObject
0001B26E 4A44                       		tst.w	d4
0001B270 6E00                       		bgt.s	loc_19F50
0001B272                            
0001B272                            loc_19F48:
0001B272 4A28 0035                  		tst.b	$35(a0)
0001B276 6600                       		bne.s	loc_19F88
0001B278 6000                       		bra.s	loc_19F96
0001B27A                            ; ===========================================================================
0001B27A                            
0001B27A                            loc_19F50:
0001B27A 5E78 F636                  		addq.w	#7,($FFFFF636).w	; add 7 to... the rng seed?
0001B27E                            ;		cmpi.b	#2,($FFFFD01C).w	; check if player is in ball form (nah)
0001B27E                            ;		bne.s	loc_19F48
0001B27E                            ;		move.w	#$300,d0		; knock player back (nah)
0001B27E                            ;		btst	#0,$22(a0)
0001B27E                            ;		bne.s	loc_19F6A
0001B27E                            ;		neg.w	d0
0001B27E                            ;
0001B27E                            ;loc_19F6A:
0001B27E                            ;		move.w	d0,($FFFFD010).w
0001B27E 4A28 0035                  		tst.b	$35(a0)
0001B282 6600                       		bne.s	loc_19F88
0001B284 5379 00FF 7FFE             		subq.w	#1,($FF7FFE).l		; no overflowing! dumbass glitch finish the boss again looking ass
0001B28A 6400                       		bcc.s	@notoverflown
0001B28C 4279 00FF 7FFE             		clr.w	($FF7FFE).l
0001B292                            @notoverflown:
0001B292 117C 0001 0035             		move.b	#1,$35(a0)		; eye-frame timer
0001B298 303C 00AC                  		move.w	#$AC,d0
0001B29C 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B2A2                            
0001B2A2                            loc_19F88:
0001B2A2 5328 0035                  		subq.b	#1,$35(a0)
0001B2A6 6700                       		beq.s	loc_19F96
0001B2A8 117C 0003 001C             		move.b	#3,$1C(a0)
0001B2AE 6000                       		bra.s	loc_19F9C
0001B2B0                            ; ===========================================================================
0001B2B0                            
0001B2B0                            loc_19F96:
0001B2B0 117C 0001 001C             		move.b	#1,$1C(a0)
0001B2B6                            
0001B2B6                            loc_19F9C:
0001B2B6 43FA FA78                  		lea	Ani_obj82(pc),a1
0001B2BA 4EF9 0000 B7A4             		jmp	AnimateSprite
0001B2C0                            ; ===========================================================================
0001B2C0                            
0001B2C0                            loc_19FA6:
0001B2C0 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B2C6 6700                       		beq.s	loc_19FBC
0001B2C8 5428 0034                  		addq.b	#2,$34(a0)
0001B2CC 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B2D2 4268 0032                  		clr.w	$32(a0)
0001B2D6 4E75                       		rts	
0001B2D8                            ; ===========================================================================
0001B2D8                            
0001B2D8                            loc_19FBC:
0001B2D8 117C 0006 0034             		move.b	#6,$34(a0)
0001B2DE 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001B2E4 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B2EA 117C 0014 0016             		move.b	#$14,$16(a0)
0001B2F0 4E75                       		rts	
0001B2F2                            ; ===========================================================================
0001B2F2 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001B302                            ; ===========================================================================
0001B302                            
0001B302                            loc_19FE6:				; XREF: off_19E80
0001B302 70FF                       		moveq	#-1,d0
0001B304 3028 0036                  		move.w	$36(a0),d0
0001B308 2240                       		movea.l	d0,a1
0001B30A 4A68 0030                  		tst.w	$30(a0)
0001B30E 6A00                       		bpl.s	loc_1A000
0001B310 4268 0030                  		clr.w	$30(a0)
0001B314 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B31A 6100                       		bsr.s	loc_1A020
0001B31C                            
0001B31C                            loc_1A000:
0001B31C 700F                       		moveq	#$F,d0
0001B31E C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001B322 6600                       		bne.s	loc_1A00A
0001B324 6100                       		bsr.s	loc_1A020
0001B326                            
0001B326                            loc_1A00A:
0001B326 4A68 0032                  		tst.w	$32(a0)
0001B32A 6700                       		beq.s	locret_1A01E
0001B32C 5528 0034                  		subq.b	#2,$34(a0)
0001B330 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B336 4268 0032                  		clr.w	$32(a0)
0001B33A                            
0001B33A                            locret_1A01E:
0001B33A 4E75                       		rts	
0001B33C                            ; ===========================================================================
0001B33C                            
0001B33C                            loc_1A020:
0001B33C 303C 00B1                  		move.w	#$B1,d0
0001B340 4EF9 0000 1C7A             		jmp	(PlaySound_Special).l ;	play electricity sound
0001B346                            ; ===========================================================================
0001B346                            
0001B346                            loc_1A02A:				; XREF: off_19E80
0001B346 117C 0030 0017             		move.b	#$30,$17(a0)
0001B34C 08E8 0000 0022             		bset	#0,$22(a0)
0001B352 4EB9 0000 E730             		jsr	SpeedToPos
0001B358 117C 0006 001A             		move.b	#6,$1A(a0)
0001B35E 0668 0010 0012             		addi.w	#$10,$12(a0)
0001B364 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001B36A 6500                       		bcs.s	loc_1A070
0001B36C 317C 059C 000C             		move.w	#$59C,$C(a0)
0001B372 5428 0034                  		addq.b	#2,$34(a0)
0001B376 117C 0020 0017             		move.b	#$20,$17(a0)
0001B37C 317C 0100 0010             		move.w	#$100,$10(a0)
0001B382 317C FF00 0012             		move.w	#-$100,$12(a0)
0001B388 5438 F742                  		addq.b	#2,($FFFFF742).w
0001B38C                            
0001B38C                            loc_1A070:
0001B38C 6000 0000                  		bra.w	loc_1A166
0001B390                            ; ===========================================================================
0001B390                            
0001B390                            loc_1A074:				; XREF: off_19E80
0001B390 08E8 0000 0022             		bset	#0,$22(a0)
0001B396 117C 0004 001C             		move.b	#4,$1C(a0)
0001B39C 4EB9 0000 E730             		jsr	SpeedToPos
0001B3A2 0668 0010 0012             		addi.w	#$10,$12(a0)
0001B3A8 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001B3AE 6500                       		bcs.s	loc_1A09A
0001B3B0 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001B3B6                            
0001B3B6                            loc_1A09A:
0001B3B6 317C 0400 0010             		move.w	#$400,$10(a0)
0001B3BC 3028 0008                  		move.w	8(a0),d0
0001B3C0 9078 D008                  		sub.w	($FFFFD008).w,d0
0001B3C4 6A00                       		bpl.s	loc_1A0B4
0001B3C6 317C 0500 0010             		move.w	#$500,$10(a0)
0001B3CC 6000 0000                  		bra.w	loc_1A0F2
0001B3D0                            ; ===========================================================================
0001B3D0                            
0001B3D0                            loc_1A0B4:
0001B3D0 0440 0070                  		subi.w	#$70,d0
0001B3D4 6500                       		bcs.s	loc_1A0F2
0001B3D6 0468 0100 0010             		subi.w	#$100,$10(a0)
0001B3DC 5140                       		subq.w	#8,d0
0001B3DE 6500                       		bcs.s	loc_1A0F2
0001B3E0 0468 0100 0010             		subi.w	#$100,$10(a0)
0001B3E6 5140                       		subq.w	#8,d0
0001B3E8 6500                       		bcs.s	loc_1A0F2
0001B3EA 0468 0080 0010             		subi.w	#$80,$10(a0)
0001B3F0 5140                       		subq.w	#8,d0
0001B3F2 6500                       		bcs.s	loc_1A0F2
0001B3F4 0468 0080 0010             		subi.w	#$80,$10(a0)
0001B3FA 5140                       		subq.w	#8,d0
0001B3FC 6500                       		bcs.s	loc_1A0F2
0001B3FE 0468 0080 0010             		subi.w	#$80,$10(a0)
0001B404 0440 0038                  		subi.w	#$38,d0
0001B408 6500                       		bcs.s	loc_1A0F2
0001B40A 4268 0010                  		clr.w	$10(a0)
0001B40E                            
0001B40E                            loc_1A0F2:
0001B40E 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001B414 6500                       		bcs.s	loc_1A110
0001B416 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001B41C 317C 0240 0010             		move.w	#$240,$10(a0)
0001B422 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001B428 5428 0034                  		addq.b	#2,$34(a0)
0001B42C                            
0001B42C                            loc_1A110:
0001B42C 6000                       		bra.s	loc_1A15C
0001B42E                            ; ===========================================================================
0001B42E                            
0001B42E                            loc_1A112:				; XREF: off_19E80
0001B42E 4EB9 0000 E730             		jsr	SpeedToPos
0001B434 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001B43A 6500                       		bcs.s	loc_1A124
0001B43C 4268 0010                  		clr.w	$10(a0)
0001B440                            
0001B440                            loc_1A124:
0001B440 0668 0034 0012             		addi.w	#$34,$12(a0)
0001B446 4A68 0012                  		tst.w	$12(a0)
0001B44A 6B00                       		bmi.s	loc_1A142
0001B44C 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001B452 6500                       		bcs.s	loc_1A142
0001B454 317C 0592 000C             		move.w	#$592,$C(a0)
0001B45A 4268 0012                  		clr.w	$12(a0)
0001B45E                            
0001B45E                            loc_1A142:
0001B45E 3028 0010                  		move.w	$10(a0),d0
0001B462 8068 0012                  		or.w	$12(a0),d0
0001B466 6600                       		bne.s	loc_1A15C
0001B468 5428 0034                  		addq.b	#2,$34(a0)
0001B46C 317C FE80 0012             		move.w	#-$180,$12(a0)
0001B472 117C 0001 0021             		move.b	#1,$21(a0)
0001B478                            
0001B478                            loc_1A15C:
0001B478 43FA F8B6                  		lea	Ani_obj82(pc),a1
0001B47C 4EB9 0000 B7A4             		jsr	AnimateSprite
0001B482                            
0001B482                            loc_1A166:
0001B482 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001B488 6C00                       		bge.s	loc_1A172
0001B48A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001B48E                            
0001B48E                            loc_1A172:
0001B48E 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001B494 6C00                       		bge.s	locret_1A190
0001B496 323C 001B                  		move.w	#$1B,d1
0001B49A 343C 0070                  		move.w	#$70,d2
0001B49E 363C 0071                  		move.w	#$71,d3
0001B4A2 3828 0008                  		move.w	8(a0),d4
0001B4A6 4EF9 0001 0B26             		jmp	SolidObject
0001B4AC                            ; ===========================================================================
0001B4AC                            
0001B4AC                            locret_1A190:
0001B4AC 4E75                       		rts	
0001B4AE                            ; ===========================================================================
0001B4AE                            
0001B4AE                            loc_1A192:				; XREF: off_19E80
0001B4AE 217C 0001 90A4 0004        		move.l	#Map_Eggman,4(a0)
0001B4B6 317C 0400 0002             		move.w	#$400,2(a0)
0001B4BC 117C 0000 001C             		move.b	#0,$1C(a0)
0001B4C2 08E8 0000 0022             		bset	#0,$22(a0)
0001B4C8 4EB9 0000 E730             		jsr	SpeedToPos
0001B4CE 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001B4D4 6400                       		bcc.s	loc_1A1D0
0001B4D6 317C 0180 0010             		move.w	#$180,$10(a0)
0001B4DC 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001B4E2 117C 000F 0020             		move.b	#$F,$20(a0)
0001B4E8 5428 0034                  		addq.b	#2,$34(a0)
0001B4EC                            
0001B4EC                            loc_1A1D0:
0001B4EC 6000 FF8A                  		bra.w	loc_1A15C
0001B4F0                            ; ===========================================================================
0001B4F0                            
0001B4F0                            loc_1A1D4:				; XREF: off_19E80
0001B4F0 08E8 0000 0022             		bset	#0,$22(a0)
0001B4F6 4EB9 0000 E730             		jsr	SpeedToPos
0001B4FC 4A68 0030                  		tst.w	$30(a0)
0001B500 6600                       		bne.s	loc_1A1FC
0001B502 4A28 0020                  		tst.b	$20(a0)
0001B506 6600                       		bne.s	loc_1A216
0001B508 317C 001E 0030             		move.w	#$1E,$30(a0)
0001B50E 303C 00AC                  		move.w	#$AC,d0
0001B512 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B518                            
0001B518                            loc_1A1FC:
0001B518 5368 0030                  		subq.w	#1,$30(a0)
0001B51C 6600                       		bne.s	loc_1A216
0001B51E 4A28 0022                  		tst.b	$22(a0)
0001B522 6A00                       		bpl.s	loc_1A210
0001B524 317C 0060 0012             		move.w	#$60,$12(a0)
0001B52A 6000                       		bra.s	loc_1A216
0001B52C                            ; ===========================================================================
0001B52C                            
0001B52C                            loc_1A210:
0001B52C 117C 000F 0020             		move.b	#$F,$20(a0)
0001B532                            
0001B532                            loc_1A216:
0001B532 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001B538 6D00                       		blt.s	loc_1A23A
0001B53A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001B540 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001B546 4278 D014                  		clr.w	($FFFFD014).w
0001B54A 4A68 0012                  		tst.w	$12(a0)
0001B54E 6A00                       		bpl.s	loc_1A248
0001B550 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001B556                            
0001B556                            loc_1A23A:
0001B556 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001B55C 6D00                       		blt.s	loc_1A248
0001B55E 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001B564                            
0001B564                            loc_1A248:
0001B564 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001B56A 6500                       		bcs.s	loc_1A260
0001B56C 4A28 0001                  		tst.b	1(a0)
0001B570 6B00                       		bmi.s	loc_1A260
0001B572 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001B578 6000 FAF0                  		bra.w	Obj85_Delete
0001B57C                            ; ===========================================================================
0001B57C                            
0001B57C                            loc_1A260:
0001B57C 6000 FEFA                  		bra.w	loc_1A15C
0001B580                            ; ===========================================================================
0001B580                            
0001B580                            loc_1A264:				; XREF: Obj85_Index
0001B580 2268 0034                  		movea.l	$34(a0),a1
0001B584 1011                       		move.b	(a1),d0
0001B586 B010                       		cmp.b	(a0),d0
0001B588 6600 FAE0                  		bne.w	Obj85_Delete
0001B58C 117C 0007 001C             		move.b	#7,$1C(a0)
0001B592 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001B598 6C00                       		bge.s	loc_1A280
0001B59A 6000                       		bra.s	loc_1A2A6
0001B59C                            ; ===========================================================================
0001B59C                            
0001B59C                            loc_1A280:
0001B59C 4A69 0010                  		tst.w	$10(a1)
0001B5A0 6700                       		beq.s	loc_1A28C
0001B5A2 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B5A8                            
0001B5A8                            loc_1A28C:
0001B5A8 43FA DA96                  		lea	Ani_Eggman(pc),a1
0001B5AC 4EB9 0000 B7A4             		jsr	AnimateSprite
0001B5B2                            
0001B5B2                            loc_1A296:
0001B5B2 2268 0034                  		movea.l	$34(a0),a1
0001B5B6 3169 0008 0008             		move.w	8(a1),8(a0)
0001B5BC 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B5C2                            
0001B5C2                            loc_1A2A6:
0001B5C2 2268 0034                  		movea.l	$34(a0),a1
0001B5C6 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B5CC 7003                       		moveq	#3,d0
0001B5CE C028 0022                  		and.b	$22(a0),d0
0001B5D2 0228 00FC 0001             		andi.b	#-4,1(a0)
0001B5D8 8128 0001                  		or.b	d0,1(a0)
0001B5DC 4EF9 0000 E756             		jmp	DisplaySprite
0001B5E2                            ; ===========================================================================
0001B5E2                            
0001B5E2                            loc_1A2C6:				; XREF: Obj85_Index
0001B5E2 2268 0034                  		movea.l	$34(a0),a1
0001B5E6 1011                       		move.b	(a1),d0
0001B5E8 B010                       		cmp.b	(a0),d0
0001B5EA 6600 FA7E                  		bne.w	Obj85_Delete
0001B5EE 0CA9 0001 90A4 0004        		cmpi.l	#Map_Eggman,4(a1)
0001B5F6 6700                       		beq.s	loc_1A2E4
0001B5F8 117C 000A 001A             		move.b	#$A,$1A(a0)
0001B5FE 60C2                       		bra.s	loc_1A2A6
0001B600                            ; ===========================================================================
0001B600                            
0001B600                            loc_1A2E4:
0001B600 117C 0001 001C             		move.b	#1,$1C(a0)
0001B606 4A29 0021                  		tst.b	$21(a1)
0001B60A 6F00                       		ble.s	loc_1A312
0001B60C 117C 0006 001C             		move.b	#6,$1C(a0)
0001B612 217C 0001 90A4 0004        		move.l	#Map_Eggman,4(a0)
0001B61A 317C 0400 0002             		move.w	#$400,2(a0)
0001B620 43FA DA1E                  		lea	Ani_Eggman(pc),a1
0001B624 4EB9 0000 B7A4             		jsr	AnimateSprite
0001B62A 6000 FF86                  		bra.w	loc_1A296
0001B62E                            ; ===========================================================================
0001B62E                            
0001B62E                            loc_1A312:
0001B62E 4A28 0001                  		tst.b	1(a0)
0001B632 6A00 FA36                  		bpl.w	Obj85_Delete
0001B636 6100 D584                  		bsr.w	BossDefeated
0001B63A 117C 0002 0018             		move.b	#2,$18(a0)
0001B640 117C 0000 001C             		move.b	#0,$1C(a0)
0001B646 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001B64E 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001B654 43FA 0000                  		lea	Ani_obj85(pc),a1
0001B658 4EB9 0000 B7A4             		jsr	AnimateSprite
0001B65E 6000 FF52                  		bra.w	loc_1A296
0001B662                            ; ===========================================================================
0001B662                            
0001B662                            loc_1A346:				; XREF: Obj85_Index
0001B662 08E8 0000 0022             		bset	#0,$22(a0)
0001B668 2268 0034                  		movea.l	$34(a0),a1
0001B66C 0CA9 0001 90A4 0004        		cmpi.l	#Map_Eggman,4(a1)
0001B674 6700                       		beq.s	loc_1A35E
0001B676 6000 FF4A                  		bra.w	loc_1A2A6
0001B67A                            ; ===========================================================================
0001B67A                            
0001B67A                            loc_1A35E:
0001B67A 3169 0008 0008             		move.w	8(a1),8(a0)
0001B680 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B686 4A28 001E                  		tst.b	$1E(a0)
0001B68A 6600                       		bne.s	loc_1A376
0001B68C 117C 0014 001E             		move.b	#$14,$1E(a0)
0001B692                            
0001B692                            loc_1A376:
0001B692 5328 001E                  		subq.b	#1,$1E(a0)
0001B696 6E00                       		bgt.s	loc_1A38A
0001B698 5228 001A                  		addq.b	#1,$1A(a0)
0001B69C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001B6A2 6E00 F9C6                  		bgt.w	Obj85_Delete
0001B6A6                            
0001B6A6                            loc_1A38A:
0001B6A6 6000 FF0A                  		bra.w	loc_1A296
0001B6AA                            ; ===========================================================================
0001B6AA                            
0001B6AA                            loc_1A38E:				; XREF: Obj85_Index
0001B6AA 117C 000B 001A             		move.b	#$B,$1A(a0)
0001B6B0 3038 D008                  		move.w	($FFFFD008).w,d0
0001B6B4 9068 0008                  		sub.w	8(a0),d0
0001B6B8 6500                       		bcs.s	loc_1A3A6
0001B6BA 4A28 0001                  		tst.b	1(a0)
0001B6BE 6A00 F9AA                  		bpl.w	Obj85_Delete
0001B6C2                            
0001B6C2                            loc_1A3A6:
0001B6C2 4EF9 0000 E756             		jmp	DisplaySprite
0001B6C8                            ; ===========================================================================
0001B6C8                            
0001B6C8                            loc_1A3AC:				; XREF: Obj85_Index
0001B6C8 117C 0000 001A             		move.b	#0,$1A(a0)
0001B6CE 08E8 0000 0022             		bset	#0,$22(a0)
0001B6D4 2268 0034                  		movea.l	$34(a0),a1
0001B6D8 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001B6DE 6600                       		bne.s	loc_1A3D0
0001B6E0 0CA9 0001 90A4 0004        		cmpi.l	#Map_Eggman,4(a1)
0001B6E8 6700 F980                  		beq.w	Obj85_Delete
0001B6EC                            
0001B6EC                            loc_1A3D0:
0001B6EC 6000 FED4                  		bra.w	loc_1A2A6
0001B6F0                            ; ===========================================================================
0001B6F0                            Ani_obj85:
0001B6F0                            	include "_anim\obj85.asm"
0001B6F0                            ; ---------------------------------------------------------------------------
0001B6F0                            ; Animation script - Eggman (FZ)
0001B6F0                            ; ---------------------------------------------------------------------------
0001B6F0 0000                       		dc.w byte_1A3D6-Ani_obj85
0001B6F2 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001B6F6                            		even
0001B6F6                            		even
0001B6F6                            
0001B6F6                            Map_Eggman2:
0001B6F6                            	include "_maps\Eggman2.asm"
0001B6F6                            ; ---------------------------------------------------------------------------
0001B6F6                            ; Sprite mappings - Eggman (FZ)
0001B6F6                            ; ---------------------------------------------------------------------------
0001B6F6 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001B6F8 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001B6FA 06                         byte_1A3DE:	dc.b 6
0001B6FB E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001B700 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001B705 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001B70A FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001B70F FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001B714 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001B719 06                         byte_1A3FD:	dc.b 6
0001B71A E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001B71F EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001B724 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001B729 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001B72E FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001B733 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001B738                            		even
0001B738                            		even
0001B738                            
0001B738                            Map_FZBoss:
0001B738                            	include "_maps\FZ boss.asm"
0001B738                            ; ---------------------------------------------------------------------------
0001B738                            ; Sprite mappings - boss (FZ)
0001B738                            ; ---------------------------------------------------------------------------
0001B738 0000                       		dc.w byte_1A422-Map_FZBoss
0001B73A 0000                       		dc.w byte_1A42D-Map_FZBoss
0001B73C 0000                       		dc.w byte_1A43D-Map_FZBoss
0001B73E 02                         byte_1A422:	dc.b 2
0001B73F 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001B744 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001B749 03                         byte_1A42D:	dc.b 3
0001B74A 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001B74F 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001B754 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001B759 02                         byte_1A43D:	dc.b 2
0001B75A 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001B75F 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001B764                            		even
0001B764                            		even
0001B764                            
0001B764                            ; ===========================================================================
0001B764                            
0001B764                            Obj84_Delete:
0001B764 4EF9 0000 E792             		jmp	DeleteObject
0001B76A                            ; ===========================================================================
0001B76A                            ; ---------------------------------------------------------------------------
0001B76A                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001B76A                            ; ---------------------------------------------------------------------------
0001B76A                            
0001B76A                            Obj84:					; XREF: Obj_Index
0001B76A 7000                       		moveq	#0,d0
0001B76C 1028 0024                  		move.b	$24(a0),d0
0001B770 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001B774 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001B778                            ; ===========================================================================
0001B778 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001B77A 0000                       		dc.w loc_1A4CE-Obj84_Index
0001B77C 0000                       		dc.w loc_1A57E-Obj84_Index
0001B77E                            
0001B77E 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001B782 2550 0620                  		dc.w $2550, $620
0001B786 2490 04C0                  		dc.w $2490, $4C0
0001B78A 2510 04C0                  		dc.w $2510, $4C0
0001B78E                            ; ===========================================================================
0001B78E                            
0001B78E                            Obj84_Main:				; XREF: Obj84_Index
0001B78E 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001B792 7000                       		moveq	#0,d0
0001B794 1028 0028                  		move.b	$28(a0),d0
0001B798 D040                       		add.w	d0,d0
0001B79A D2C0                       		adda.w	d0,a1
0001B79C 117C 0004 0001             		move.b	#4,1(a0)
0001B7A2 08E8 0007 0001             		bset	#7,1(a0)
0001B7A8 08E8 0004 0001             		bset	#4,1(a0)
0001B7AE 317C 0300 0002             		move.w	#$300,2(a0)
0001B7B4 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001B7BC 3159 0008                  		move.w	(a1)+,8(a0)
0001B7C0 3151 000C                  		move.w	(a1),$C(a0)
0001B7C4 3159 0038                  		move.w	(a1)+,$38(a0)
0001B7C8 117C 0020 0016             		move.b	#$20,$16(a0)
0001B7CE 117C 0060 0017             		move.b	#$60,$17(a0)
0001B7D4 117C 0020 0019             		move.b	#$20,$19(a0)
0001B7DA 117C 0060 0016             		move.b	#$60,$16(a0)
0001B7E0 117C 0003 0018             		move.b	#3,$18(a0)
0001B7E6 5428 0024                  		addq.b	#2,$24(a0)
0001B7EA                            
0001B7EA                            loc_1A4CE:				; XREF: Obj84_Index
0001B7EA 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B7F0 6F00                       		ble.s	loc_1A4DC
0001B7F2 08E8 0001 0001             		bset	#1,1(a0)
0001B7F8                            
0001B7F8                            loc_1A4DC:
0001B7F8 42A8 003C                  		clr.l	$3C(a0)
0001B7FC 4A28 0029                  		tst.b	$29(a0)
0001B800 6700                       		beq.s	loc_1A4EA
0001B802 5428 0024                  		addq.b	#2,$24(a0)
0001B806                            
0001B806                            loc_1A4EA:
0001B806 2028 003C                  		move.l	$3C(a0),d0
0001B80A 2228 0038                  		move.l	$38(a0),d1
0001B80E D280                       		add.l	d0,d1
0001B810 4841                       		swap	d1
0001B812 3141 000C                  		move.w	d1,$C(a0)
0001B816 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001B81C 6600                       		bne.s	loc_1A524
0001B81E 4A68 0030                  		tst.w	$30(a0)
0001B822 6A00                       		bpl.s	loc_1A524
0001B824 70F6                       		moveq	#-$A,d0
0001B826 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B82C 6F00                       		ble.s	loc_1A514
0001B82E 700E                       		moveq	#$E,d0
0001B830                            
0001B830                            loc_1A514:
0001B830 D240                       		add.w	d0,d1
0001B832 2268 0034                  		movea.l	$34(a0),a1
0001B836 3341 000C                  		move.w	d1,$C(a1)
0001B83A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B840                            
0001B840                            loc_1A524:
0001B840 323C 002B                  		move.w	#$2B,d1
0001B844 343C 0060                  		move.w	#$60,d2
0001B848 363C 0061                  		move.w	#$61,d3
0001B84C 3828 0008                  		move.w	8(a0),d4
0001B850 4EB9 0001 0B26             		jsr	SolidObject
0001B856 7000                       		moveq	#0,d0
0001B858 3228 003C                  		move.w	$3C(a0),d1
0001B85C 6A00                       		bpl.s	loc_1A550
0001B85E 4441                       		neg.w	d1
0001B860 5141                       		subq.w	#8,d1
0001B862 6500                       		bcs.s	loc_1A55C
0001B864 5200                       		addq.b	#1,d0
0001B866 E841                       		asr.w	#4,d1
0001B868 D041                       		add.w	d1,d0
0001B86A 6000                       		bra.s	loc_1A55C
0001B86C                            ; ===========================================================================
0001B86C                            
0001B86C                            loc_1A550:
0001B86C 0441 0027                  		subi.w	#$27,d1
0001B870 6500                       		bcs.s	loc_1A55C
0001B872 5200                       		addq.b	#1,d0
0001B874 E841                       		asr.w	#4,d1
0001B876 D041                       		add.w	d1,d0
0001B878                            
0001B878                            loc_1A55C:
0001B878 1140 001A                  		move.b	d0,$1A(a0)
0001B87C 3038 D008                  		move.w	($FFFFD008).w,d0
0001B880 9068 0008                  		sub.w	8(a0),d0
0001B884 6B00                       		bmi.s	loc_1A578
0001B886 0440 0140                  		subi.w	#$140,d0
0001B88A 6B00                       		bmi.s	loc_1A578
0001B88C 4A28 0001                  		tst.b	1(a0)
0001B890 6A00 FED2                  		bpl.w	Obj84_Delete
0001B894                            
0001B894                            loc_1A578:
0001B894 4EF9 0000 E756             		jmp	DisplaySprite
0001B89A                            ; ===========================================================================
0001B89A                            
0001B89A                            loc_1A57E:				; XREF: Obj84_Index
0001B89A 7000                       		moveq	#0,d0
0001B89C 1028 0028                  		move.b	$28(a0),d0
0001B8A0 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001B8A4 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001B8A8 6000 FF5C                  		bra.w	loc_1A4EA
0001B8AC                            ; ===========================================================================
0001B8AC 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001B8AE 0000                       		dc.w loc_1A598-off_1A590
0001B8B0 0000                       		dc.w loc_1A604-off_1A590
0001B8B2 0000                       		dc.w loc_1A604-off_1A590
0001B8B4                            ; ===========================================================================
0001B8B4                            
0001B8B4                            loc_1A598:				; XREF: off_1A590
0001B8B4 4A28 0029                  		tst.b	$29(a0)
0001B8B8 6600                       		bne.s	loc_1A5D4
0001B8BA 2268 0034                  		movea.l	$34(a0),a1
0001B8BE 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B8C4 6600                       		bne.s	loc_1A5B4
0001B8C6 6100 D2F4                  		bsr.w	BossDefeated
0001B8CA 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001B8D2                            
0001B8D2                            loc_1A5B4:
0001B8D2 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001B8DA 6400                       		bcc.s	locret_1A602
0001B8DC 42A8 003C                  		clr.l	$3C(a0)
0001B8E0 2268 0034                  		movea.l	$34(a0),a1
0001B8E4 5369 0032                  		subq.w	#1,$32(a1)
0001B8E8 4269 0030                  		clr.w	$30(a1)
0001B8EC 5528 0024                  		subq.b	#2,$24(a0)
0001B8F0 4E75                       		rts	
0001B8F2                            ; ===========================================================================
0001B8F2                            
0001B8F2                            loc_1A5D4:
0001B8F2 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001B8F8 6C00                       		bge.s	loc_1A5E4
0001B8FA 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001B902                            
0001B902                            loc_1A5E4:
0001B902 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001B90A 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001B910 6E00                       		bgt.s	locret_1A602
0001B912 4268 003E                  		clr.w	$3E(a0)
0001B916 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001B91C 4228 0029                  		clr.b	$29(a0)
0001B920                            
0001B920                            locret_1A602:
0001B920 4E75                       		rts	
0001B922                            ; ===========================================================================
0001B922                            
0001B922                            loc_1A604:				; XREF: off_1A590
0001B922 08E8 0001 0001             		bset	#1,1(a0)
0001B928 4A28 0029                  		tst.b	$29(a0)
0001B92C 6600                       		bne.s	loc_1A646
0001B92E 2268 0034                  		movea.l	$34(a0),a1
0001B932 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B938 6600                       		bne.s	loc_1A626
0001B93A 6100 D280                  		bsr.w	BossDefeated
0001B93E 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001B946                            
0001B946                            loc_1A626:
0001B946 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001B94E 6400                       		bcc.s	locret_1A674
0001B950 42A8 003C                  		clr.l	$3C(a0)
0001B954 2268 0034                  		movea.l	$34(a0),a1
0001B958 5369 0032                  		subq.w	#1,$32(a1)
0001B95C 4269 0030                  		clr.w	$30(a1)
0001B960 5528 0024                  		subq.b	#2,$24(a0)
0001B964 4E75                       		rts	
0001B966                            ; ===========================================================================
0001B966                            
0001B966                            loc_1A646:
0001B966 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001B96C 6D00                       		blt.s	loc_1A656
0001B96E 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001B976                            
0001B976                            loc_1A656:
0001B976 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001B97E 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001B984 6D00                       		blt.s	locret_1A674
0001B986 4268 003E                  		clr.w	$3E(a0)
0001B98A 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001B990 4228 0029                  		clr.b	$29(a0)
0001B994                            
0001B994                            locret_1A674:
0001B994 4E75                       		rts	
0001B996                            ; ===========================================================================
0001B996                            ; ---------------------------------------------------------------------------
0001B996                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B996                            ; ---------------------------------------------------------------------------
0001B996                            Map_obj84:
0001B996                            	include "_maps\obj84.asm"
0001B996                            ; ---------------------------------------------------------------------------
0001B996                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B996                            ; ---------------------------------------------------------------------------
0001B996 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001B99A 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001B99E 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001B9A2 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B9A6 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B9AA 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001B9AE 06                         byte_1A68E:	dc.b 6
0001B9AF A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B9B4 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B9B9 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B9BE B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B9C3 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B9C8 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B9CD 08                         byte_1A6AD:	dc.b 8
0001B9CE A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B9D3 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B9D8 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B9DD B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B9E2 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B9E7 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B9EC D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B9F1 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B9F6 0A                         byte_1A6D6:	dc.b $A
0001B9F7 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B9FC A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001BA01 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001BA06 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001BA0B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001BA10 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001BA15 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001BA1A D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001BA1F F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001BA24 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001BA29 0C                         byte_1A709:	dc.b $C
0001BA2A A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001BA2F A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001BA34 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001BA39 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001BA3E B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001BA43 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001BA48 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001BA4D D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001BA52 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001BA57 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001BA5C 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001BA61 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001BA66 0D                         byte_1A746:	dc.b $D
0001BA67 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001BA6C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001BA71 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001BA76 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001BA7B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001BA80 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001BA85 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001BA8A D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001BA8F F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001BA94 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001BA99 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001BA9E 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001BAA3 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001BAA8 0E                         byte_1A788:	dc.b $E
0001BAA9 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001BAAE A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001BAB3 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001BAB8 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001BABD B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001BAC2 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001BAC7 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001BACC D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001BAD1 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001BAD6 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001BADB 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001BAE0 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001BAE5 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001BAEA 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001BAEF 02                         byte_1A7CF:	dc.b 2
0001BAF0 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001BAF5 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001BAFA                            		even
0001BAFA                            		even
0001BAFA                            
0001BAFA                            ; ===========================================================================
0001BAFA                            ; ---------------------------------------------------------------------------
0001BAFA                            ; Object 86 - energy balls (FZ)
0001BAFA                            ; ---------------------------------------------------------------------------
0001BAFA                            
0001BAFA                            Obj86:					; XREF: Obj_Index
0001BAFA 7000                       		moveq	#0,d0
0001BAFC 1028 0024                  		move.b	$24(a0),d0
0001BB00 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001BB04 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001BB08                            ; ===========================================================================
0001BB08 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001BB0A 0000                       		dc.w Obj86_Generator-Obj86_Index
0001BB0C 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001BB0E 0000                       		dc.w loc_1A962-Obj86_Index
0001BB10 0000                       		dc.w loc_1A982-Obj86_Index
0001BB12                            ; ===========================================================================
0001BB12                            
0001BB12                            Obj86_Main:				; XREF: Obj86_Index
0001BB12 317C 2588 0008             		move.w	#$2588,8(a0)
0001BB18 317C 053C 000C             		move.w	#$53C,$C(a0)
0001BB1E 317C 0300 0002             		move.w	#$300,2(a0)
0001BB24 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001BB2C 117C 0000 001C             		move.b	#0,$1C(a0)
0001BB32 117C 0003 0018             		move.b	#3,$18(a0)
0001BB38 117C 0008 0017             		move.b	#8,$17(a0)
0001BB3E 117C 0008 0016             		move.b	#8,$16(a0)
0001BB44 117C 0004 0001             		move.b	#4,1(a0)
0001BB4A 08E8 0007 0001             		bset	#7,1(a0)
0001BB50 5428 0024                  		addq.b	#2,$24(a0)
0001BB54                            
0001BB54                            Obj86_Generator:			; XREF: Obj86_Index
0001BB54 2268 0034                  		movea.l	$34(a0),a1
0001BB58 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001BB5E 6600                       		bne.s	loc_1A850
0001BB60 10BC 003F                  		move.b	#$3F,(a0)
0001BB64 117C 0000 0024             		move.b	#0,$24(a0)
0001BB6A 4EF9 0000 E756             		jmp	DisplaySprite
0001BB70                            ; ===========================================================================
0001BB70                            
0001BB70                            loc_1A850:
0001BB70 117C 0000 001C             		move.b	#0,$1C(a0)
0001BB76 4A28 0029                  		tst.b	$29(a0)
0001BB7A 6700                       		beq.s	loc_1A86C
0001BB7C 5428 0024                  		addq.b	#2,$24(a0)
0001BB80 117C 0001 001C             		move.b	#1,$1C(a0)
0001BB86 117C 003E 0028             		move.b	#$3E,$28(a0)
0001BB8C                            
0001BB8C                            loc_1A86C:
0001BB8C 323C 0013                  		move.w	#$13,d1
0001BB90 343C 0008                  		move.w	#8,d2
0001BB94 363C 0011                  		move.w	#$11,d3
0001BB98 3828 0008                  		move.w	8(a0),d4
0001BB9C 4EB9 0001 0B26             		jsr	SolidObject
0001BBA2 3038 D008                  		move.w	($FFFFD008).w,d0
0001BBA6 9068 0008                  		sub.w	8(a0),d0
0001BBAA 6B00                       		bmi.s	loc_1A89A
0001BBAC 0440 0140                  		subi.w	#$140,d0
0001BBB0 6B00                       		bmi.s	loc_1A89A
0001BBB2 4A28 0001                  		tst.b	1(a0)
0001BBB6 6A00 FBAC                  		bpl.w	Obj84_Delete
0001BBBA                            
0001BBBA                            loc_1A89A:
0001BBBA 43FA 0000                  		lea	Ani_obj86(pc),a1
0001BBBE 4EB9 0000 B7A4             		jsr	AnimateSprite
0001BBC4 4EF9 0000 E756             		jmp	DisplaySprite
0001BBCA                            ; ===========================================================================
0001BBCA                            
0001BBCA                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001BBCA 4A28 0029                  		tst.b	$29(a0)
0001BBCE 6700 0000                  		beq.w	loc_1A954
0001BBD2 4228 0029                  		clr.b	$29(a0)
0001BBD6 D068 0030                  		add.w	$30(a0),d0
0001BBDA 0240 001E                  		andi.w	#$1E,d0
0001BBDE D4C0                       		adda.w	d0,a2
0001BBE0 5868 0030                  		addq.w	#4,$30(a0)
0001BBE4 4268 0032                  		clr.w	$32(a0)
0001BBE8 7403                       		moveq	#3,d2
0001BBEA                            
0001BBEA                            Obj86_Loop:
0001BBEA 4EB9 0000 EBF2             		jsr	SingleObjLoad2
0001BBF0 6600 0000                  		bne.w	loc_1A954
0001BBF4 12BC 0086                  		move.b	#$86,(a1)
0001BBF8 3368 0008 0008             		move.w	8(a0),8(a1)
0001BBFE 337C 053C 000C             		move.w	#$53C,$C(a1)
0001BC04 137C 0008 0024             		move.b	#8,$24(a1)
0001BC0A 337C 2300 0002             		move.w	#$2300,2(a1)
0001BC10 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001BC18 137C 000C 0016             		move.b	#$C,$16(a1)
0001BC1E 137C 000C 0017             		move.b	#$C,$17(a1)
0001BC24 137C 0000 0020             		move.b	#0,$20(a1)
0001BC2A 137C 0003 0018             		move.b	#3,$18(a1)
0001BC30 337C 003E 0028             		move.w	#$3E,$28(a1)
0001BC36 137C 0004 0001             		move.b	#4,1(a1)
0001BC3C 08E9 0007 0001             		bset	#7,1(a1)
0001BC42 2348 0034                  		move.l	a0,$34(a1)
0001BC46 4EB9 0000 33F0             		jsr	(RandomNumber).l
0001BC4C 3228 0032                  		move.w	$32(a0),d1
0001BC50 C3FC FFB1                  		muls.w	#-$4F,d1
0001BC54 0641 2578                  		addi.w	#$2578,d1
0001BC58 0240 001F                  		andi.w	#$1F,d0
0001BC5C 0440 0010                  		subi.w	#$10,d0
0001BC60 D041                       		add.w	d1,d0
0001BC62 3340 0030                  		move.w	d0,$30(a1)
0001BC66 5268 0032                  		addq.w	#1,$32(a0)
0001BC6A 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001BC70 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001BC74                            
0001BC74                            loc_1A954:
0001BC74 4A68 0032                  		tst.w	$32(a0)
0001BC78 6600                       		bne.s	loc_1A95E
0001BC7A 5428 0024                  		addq.b	#2,$24(a0)
0001BC7E                            
0001BC7E                            loc_1A95E:
0001BC7E 6000 FF0C                  		bra.w	loc_1A86C
0001BC82                            ; ===========================================================================
0001BC82                            
0001BC82                            loc_1A962:				; XREF: Obj86_Index
0001BC82 117C 0002 001C             		move.b	#2,$1C(a0)
0001BC88 4A68 0038                  		tst.w	$38(a0)
0001BC8C 6600                       		bne.s	loc_1A97E
0001BC8E 117C 0002 0024             		move.b	#2,$24(a0)
0001BC94 2268 0034                  		movea.l	$34(a0),a1
0001BC98 337C FFFF 0032             		move.w	#-1,$32(a1)
0001BC9E                            
0001BC9E                            loc_1A97E:
0001BC9E 6000 FEEC                  		bra.w	loc_1A86C
0001BCA2                            ; ===========================================================================
0001BCA2                            
0001BCA2                            loc_1A982:				; XREF: Obj86_Index
0001BCA2 7000                       		moveq	#0,d0
0001BCA4 1028 0025                  		move.b	$25(a0),d0
0001BCA8 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001BCAC 4EFB 0000                  		jmp	Obj86_Index2(pc,d0.w)
0001BCB0                            ; ===========================================================================
0001BCB0 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001BCB2 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001BCB4 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2	; orb random 1
0001BCB6 0000                       		dc.w Obj86_Ball_Sine-Obj86_Index2	; rob random 2
0001BCB8 0000                       		dc.w Obj86_Ball_Explode-Obj86_Index2	; orb random 3
0001BCBA 0000                       		dc.w Obj86_Ball_Speed-Obj86_Index2	; yeah you get it
0001BCBC 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001BCBE 0000                       		dc.w Obj86_Ball_Homing-Obj86_Index2
0001BCC0 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001BCC2 0000                       		dc.w Obj86_Ball_Static-Obj86_Index2
0001BCC4                            ; ===========================================================================
0001BCC4                            
0001BCC4                            loc_1A9A6:				; XREF: Obj86_Index2
0001BCC4 3028 0030                  		move.w	$30(a0),d0
0001BCC8 9068 0008                  		sub.w	8(a0),d0
0001BCCC E940                       		asl.w	#4,d0
0001BCCE 3140 0010                  		move.w	d0,$10(a0)
0001BCD2 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001BCD8 5428 0025                  		addq.b	#2,$25(a0)
0001BCDC                            
0001BCDC                            Obj86_Ball_Animate:
0001BCDC 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001BCE0 4EB9 0000 B7A4             		jsr	AnimateSprite
0001BCE6 4EF9 0000 E756             		jmp	DisplaySprite
0001BCEC                            ; ===========================================================================
0001BCEC                            
0001BCEC                            loc_1A9C0:				; XREF: Obj86_Index2
0001BCEC 4A68 0010                  		tst.w	$10(a0)
0001BCF0 6700                       		beq.s	loc_1A9E6
0001BCF2 4EB9 0000 E730             		jsr	SpeedToPos
0001BCF8 3028 0008                  		move.w	8(a0),d0
0001BCFC 9068 0030                  		sub.w	$30(a0),d0
0001BD00 6400                       		bcc.s	loc_1A9E6
0001BD02 4268 0010                  		clr.w	$10(a0)
0001BD06 D168 0008                  		add.w	d0,8(a0)
0001BD0A 2268 0034                  		movea.l	$34(a0),a1
0001BD0E 5369 0032                  		subq.w	#1,$32(a1)
0001BD12                            
0001BD12                            loc_1A9E6:
0001BD12 117C 0000 001C             		move.b	#0,$1C(a0)
0001BD18 5368 0028                  		subq.w	#1,$28(a0)
0001BD1C 6600                       		bne.s	locret_1AA1C
0001BD1E 4EB8 33F0                  		jsr	RandomNumber
0001BD22 0240 000E                  		and.w	#7*2,d0
0001BD26 5840                       		addq.w	#2*2,d0
0001BD28 1140 0025                  		move.b	d0,$25(a0)	; set routine
0001BD2C 4840                       		swap	d0
0001BD2E 3140 0028                  		move.w	d0,$28(a0)	; set other number
0001BD32 117C 0001 001C             		move.b	#1,$1C(a0)
0001BD38 117C 009A 0020             		move.b	#$9A,$20(a0)
0001BD3E 3038 D008                  		move.w	($FFFFD008).w,d0
0001BD42 9068 0008                  		sub.w	8(a0),d0
0001BD46 3140 0010                  		move.w	d0,$10(a0)
0001BD4A 317C 0140 0012             		move.w	#$140,$12(a0)
0001BD50                            
0001BD50                            locret_1AA1C:
0001BD50 6000 FF8A                  		bra.w	Obj86_Ball_Animate
0001BD54                            ; ===========================================================================
0001BD54                            
0001BD54                            Obj86_Ball_Explode:
0001BD54 5328 0028                  		subq.b	#1,$28(a0)
0001BD58 6A00 FF82                  		bpl.w	Obj86_Ball_Animate
0001BD5C 2268 0034                  		movea.l	$34(a0),a1
0001BD60 5369 0038                  		subq.w	#1,$38(a1)
0001BD64 2248                       		move.l	a0,a1
0001BD66 7400                       		moveq	#0,d2	; GMZ
0001BD68 720F                       		moveq	#16-1,d1	; GMZ: Amount of explosion objects
0001BD6A 6000                       		bra.s	@start
0001BD6C                            @loop:
0001BD6C 4EB9 0000 EBDC             		jsr	SingleObjLoad
0001BD72 6600                       		bne.s	@exit
0001BD74 3368 0008 0008             		move.w	8(a0),8(a1)
0001BD7A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BD80                            @start:
0001BD80 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001BD84 137C 0002 0024             		move.b	#2,$24(a1)	; ML: no animal
0001BD8A 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype:
0001BD8E 5802                       		addq.b	#4,d2
0001BD90 51C9 FFDA                  		dbf	d1,@loop
0001BD94                            @exit:
0001BD94 6000 FF46                  		bra.w	Obj86_Ball_Animate
0001BD98                            ; ===========================================================================
0001BD98                            
0001BD98                            Obj86_Ball_Sine:
0001BD98 1028 0028                  		move.b	$28(a0),d0
0001BD9C 5828 0028                  		addq.b	#4,$28(a0)
0001BDA0 4EB8 3416                  		jsr	CalcSine
0001BDA4 C1FC 0002                  		muls.w	#2,d0
0001BDA8 3140 0010                  		move.w	d0,$10(a0)
0001BDAC                            
0001BDAC 1028 0029                  		move.b	$29(a0),d0
0001BDB0 5828 0029                  		addq.b	#4,$29(a0)
0001BDB4 4EB8 3416                  		jsr	CalcSine
0001BDB8 4A40                       		tst.w	d0
0001BDBA 6B00                       		bmi.s	@upwards
0001BDBC E548                       		lsl.w	#2,d0		; x4 go down faster
0001BDBE                            @upwards:
0001BDBE 3140 0012                  		move.w	d0,$12(a0)
0001BDC2 6000 0000                  		bra.w	loc_1AA1E
0001BDC6                            ; ===========================================================================
0001BDC6                            
0001BDC6                            Obj86_Ball_Homing:
0001BDC6 0C28 00F0 0028             		cmp.b	#$F0,$28(a0)
0001BDCC 6400                       		bhs.s	@homer
0001BDCE 0C28 00E0 0028             		cmp.b	#$E0,$28(a0)
0001BDD4 6400                       		bhs.s	Obj86_Ball_Vanish
0001BDD6 5328 0028                  		subq.b	#1,$28(a0)
0001BDDA 6400                       		bcc.s	@nomorehoming
0001BDDC 3038 D008                  		move.w	($FFFFD008).w,d0
0001BDE0 9068 0008                  		sub.w	8(a0),d0
0001BDE4 D168 0010                  		add.w	d0,$10(a0)
0001BDE8 D168 0010                  		add.w	d0,$10(a0)
0001BDEC                            @nomorehoming:
0001BDEC 6000 0000                  		bra.w	loc_1AA1E
0001BDF0                            @homer:
0001BDF0 0C28 00DF 0028             		cmp.b	#$DF,$28(a0)
0001BDF6 60F4                       		bra.s	@nomorehoming	; next frame ig
0001BDF8                            ; ===========================================================================
0001BDF8                            
0001BDF8                            Obj86_Ball_Speed:
0001BDF8 4268 0010                  		clr.w	$10(a0)
0001BDFC 7000                       		moveq	#0,d0
0001BDFE 1028 0028                  		move.b	$28(a0),d0
0001BE02 E448                       		lsr.w	#2,d0
0001BE04 D168 0012                  		add.w	d0,$12(a0)
0001BE08 1028 0029                  		move.b	$29(a0),d0
0001BE0C D128 0028                  		add.b	d0,$28(a0)
0001BE10 6000 0000                  		bra.w	loc_1AA1E
0001BE14                            ; ===========================================================================
0001BE14                            
0001BE14                            Obj86_Ball_Vanish:
0001BE14 303C 00E1                  		move.w	#$E1,d0
0001BE18 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l
0001BE1E 6000 0000                  		bra.w	loc_1AA34
0001BE22                            ; ===========================================================================
0001BE22                            
0001BE22                            Obj86_Ball_Static:
0001BE22 4268 0010                  		clr.w	$10(a0)
0001BE26 7000                       		moveq	#0,d0
0001BE28 7200                       		moveq	#0,d1
0001BE2A 1028 0028                  		move.b	$28(a0),d0
0001BE2E 1228 0029                  		move.b	$29(a0),d1
0001BE32 D041                       		add.w	d1,d0
0001BE34 3140 0012                  		move.w	d0,$12(a0)
0001BE38 6000 0000                  		bra.w	loc_1AA1E
0001BE3C                            ; ===========================================================================
0001BE3C                            
0001BE3C                            Obj86_Ball_Standard:
0001BE3C                            loc_1AA1E:
0001BE3C 4EB9 0000 E730             		jsr	SpeedToPos
0001BE42 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001BE48 6500 FE92                  		blo.w	Obj86_Ball_Animate
0001BE4C                            loc_1AA34:
0001BE4C 2268 0034                  		movea.l	$34(a0),a1
0001BE50 5369 0038                  		subq.w	#1,$38(a1)
0001BE54 6000 F90E                  		bra.w	Obj84_Delete
0001BE58                            ; ===========================================================================
0001BE58                            Ani_obj86:
0001BE58                            	include "_anim\obj86.asm"
0001BE58                            ; ---------------------------------------------------------------------------
0001BE58                            ; Animation script - energy ball launcher (FZ)
0001BE58                            ; ---------------------------------------------------------------------------
0001BE58 0000                       		dc.w byte_1AA46-Ani_obj86
0001BE5A 0000                       		dc.w byte_1AA4A-Ani_obj86
0001BE5C 0000                       		dc.w byte_1AA50-Ani_obj86
0001BE5E 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001BE62 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001BE68 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001BE6E                            		even
0001BE6E                            		even
0001BE6E                            
0001BE6E                            ; ---------------------------------------------------------------------------
0001BE6E                            ; Sprite mappings - energy ball	launcher (FZ)
0001BE6E                            ; ---------------------------------------------------------------------------
0001BE6E                            Map_obj86:
0001BE6E                            	include "_maps\obj86.asm"
0001BE6E                            ; ---------------------------------------------------------------------------
0001BE6E                            ; Sprite mappings - energy ball	launcher (FZ)
0001BE6E                            ; ---------------------------------------------------------------------------
0001BE6E 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001BE72 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001BE76 01                         byte_1AA5E:	dc.b 1
0001BE77 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001BE7C 01                         byte_1AA64:	dc.b 1
0001BE7D F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001BE82 01                         byte_1AA6A:	dc.b 1
0001BE83 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001BE88 01                         byte_1AA70:	dc.b 1
0001BE89 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001BE8E                            		even
0001BE8E                            		even
0001BE8E                            
0001BE8E                            Ani_obj86a:
0001BE8E                            	include "_anim\obj86a.asm"
0001BE8E                            ; ---------------------------------------------------------------------------
0001BE8E                            ; Animation script - energy balls (FZ)
0001BE8E                            ; ---------------------------------------------------------------------------
0001BE8E 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001BE90 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001BE92 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001BEA1 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001BEB0 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001BEB4 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001BEBE                            		even
0001BEBE                            		even
0001BEBE                            
0001BEBE                            ; ---------------------------------------------------------------------------
0001BEBE                            ; Sprite mappings - energy balls (FZ)
0001BEBE                            ; ---------------------------------------------------------------------------
0001BEBE                            Map_obj86a:
0001BEBE                            	include "_maps\obj86a.asm"
0001BEBE                            ; ---------------------------------------------------------------------------
0001BEBE                            ; Sprite mappings - energy balls (FZ)
0001BEBE                            ; ---------------------------------------------------------------------------
0001BEBE 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001BEC2 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001BEC6 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001BECA 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001BECE 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001BED2 0000                       		dc.w byte_1AB20-Map_obj86a
0001BED4 02                         byte_1AABC:	dc.b 2
0001BED5 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001BEDA 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001BEDF 02                         byte_1AAC7:	dc.b 2
0001BEE0 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001BEE5 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001BEEA 02                         byte_1AAD2:	dc.b 2
0001BEEB F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001BEF0 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001BEF5 02                         byte_1AADD:	dc.b 2
0001BEF6 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001BEFB 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001BF00 02                         byte_1AAE8:	dc.b 2
0001BF01 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001BF06 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001BF0B 02                         byte_1AAF3:	dc.b 2
0001BF0C F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001BF11 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001BF16 01                         byte_1AAFE:	dc.b 1
0001BF17 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001BF1C 01                         byte_1AB04:	dc.b 1
0001BF1D F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001BF22 02                         byte_1AB0A:	dc.b 2
0001BF23 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001BF28 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001BF2D 02                         byte_1AB15:	dc.b 2
0001BF2E F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001BF33 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001BF38 00                         byte_1AB20:	dc.b 0
0001BF3A 00                         		even
0001BF3A 00                         		even
0001BF3A                            
0001BF3A                            ; ===========================================================================
0001BF3A                            ; ---------------------------------------------------------------------------
0001BF3A                            ; Object 3E - prison capsule
0001BF3A                            ; ---------------------------------------------------------------------------
0001BF3A                            
0001BF3A                            Obj3E:					; XREF: Obj_Index
0001BF3A 7000                       		moveq	#0,d0
0001BF3C 1028 0024                  		move.b	$24(a0),d0
0001BF40 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001BF44 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001BF48 3028 0008                  		move.w	8(a0),d0
0001BF4C 0240 FF80                  		andi.w	#$FF80,d0
0001BF50 3238 F700                  		move.w	($FFFFF700).w,d1
0001BF54 0441 0080                  		subi.w	#$80,d1
0001BF58 0241 FF80                  		andi.w	#$FF80,d1
0001BF5C 9041                       		sub.w	d1,d0
0001BF5E 0C40 0280                  		cmpi.w	#$280,d0
0001BF62 6200                       		bhi.s	Obj3E_Delete
0001BF64 4EF9 0000 E756             		jmp	DisplaySprite
0001BF6A                            ; ===========================================================================
0001BF6A                            
0001BF6A                            Obj3E_Delete:
0001BF6A 4EF9 0000 E792             		jmp	DeleteObject
0001BF70                            ; ===========================================================================
0001BF70 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001BF72 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001BF74 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001BF76 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001BF78 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001BF7A 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001BF7C 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001BF7E 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001BF80                            
0001BF80 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001BF84 040C 0501                  		dc.b 4,	$C, 5, 1
0001BF88 0610 0403                  		dc.b 6,	$10, 4,	3
0001BF8C 0810 0305                  		dc.b 8,	$10, 3,	5
0001BF90                            ; ===========================================================================
0001BF90                            
0001BF90                            Obj3E_Main:				; XREF: Obj3E_Index
0001BF90 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001BF98 317C 049D 0002             		move.w	#$49D,2(a0)
0001BF9E 117C 0004 0001             		move.b	#4,1(a0)
0001BFA4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001BFAA 7000                       		moveq	#0,d0
0001BFAC 1028 0028                  		move.b	$28(a0),d0
0001BFB0 E548                       		lsl.w	#2,d0
0001BFB2 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001BFB6 1159 0024                  		move.b	(a1)+,$24(a0)
0001BFBA 1159 0019                  		move.b	(a1)+,$19(a0)
0001BFBE 1159 0018                  		move.b	(a1)+,$18(a0)
0001BFC2 1159 001A                  		move.b	(a1)+,$1A(a0)
0001BFC6 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001BFCA 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001BFCC 117C 0006 0020             		move.b	#6,$20(a0)
0001BFD2 117C 0008 0021             		move.b	#8,$21(a0)
0001BFD8                            
0001BFD8                            Obj3E_Not02:
0001BFD8 4E75                       		rts	
0001BFDA                            ; ===========================================================================
0001BFDA                            
0001BFDA                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001BFDA 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001BFE0 6700                       		beq.s	Obj3E_ChkOpened
0001BFE2 323C 002B                  		move.w	#$2B,d1
0001BFE6 343C 0018                  		move.w	#$18,d2
0001BFEA 363C 0018                  		move.w	#$18,d3
0001BFEE 3828 0008                  		move.w	8(a0),d4
0001BFF2 4EF9 0001 0B26             		jmp	SolidObject
0001BFF8                            ; ===========================================================================
0001BFF8                            
0001BFF8                            Obj3E_ChkOpened:
0001BFF8 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001BFFC 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001BFFE 4228 0025                  		clr.b	$25(a0)
0001C002 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001C008 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001C00E                            
0001C00E                            Obj3E_DoOpen:
0001C00E 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001C014 4E75                       		rts	
0001C016                            ; ===========================================================================
0001C016                            
0001C016                            Obj3E_Switched:				; XREF: Obj3E_Index
0001C016 323C 0017                  		move.w	#$17,d1
0001C01A 343C 0008                  		move.w	#8,d2
0001C01E 363C 0008                  		move.w	#8,d3
0001C022 3828 0008                  		move.w	8(a0),d4
0001C026 4EB9 0001 0B26             		jsr	SolidObject
0001C02C 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001C032 4EB9 0000 B7A4             		jsr	AnimateSprite
0001C038 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001C03E 4A28 0025                  		tst.b	$25(a0)
0001C042 6700                       		beq.s	locret_1AC60
0001C044 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001C048 6600                       		bne.s	Obj3E_SkipScrPosChk	; GMZ: If not, branch
0001C04A 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w	; GMZ: Is screen X pos 2AC0?
0001C050 6600                       		bne.s	locret_1AC60	; GMZ: If not, branch
0001C052                            
0001C052                            Obj3E_SkipScrPosChk:
0001C052 5068 000C                  		addq.w	#8,$C(a0)
0001C056 117C 000A 0024             		move.b	#$A,$24(a0)
0001C05C                            		; move.w	#$3C,$1E(a0)
0001C05C 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001C060 6600                       		bne.s	Obj3E_SetNormalTimer	; GMZ: If not, branch
0001C062 317C 0100 001E             		move.w	#$100,$1E(a0)	; GMZ: Timer for "Sonic Got Through"
0001C068 6000                       		bra.s	Obj3E_LockCtrl	; GMZ
0001C06A                            
0001C06A                            Obj3E_SetNormalTimer:	; GMZ
0001C06A 317C 003C 001E             		move.w	#$3C,$1E(a0)	; GMZ
0001C070                            
0001C070                            Obj3E_LockCtrl:	; GMZ
0001C070 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001C074 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001C078 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001C07E 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001C082 6700                       		beq.s	Obj3E_NoCtrl	; GMZ: If yes, branch
0001C084 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001C08A 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001C08C 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001C092 6000                       		bra.s	Obj3E_ContinueCode
0001C094                            
0001C094                            Obj3E_MoveLeft:
0001C094 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001C09A                            
0001C09A                            Obj3E_NoCtrl:	; GMZ
0001C09A                            Obj3E_ContinueCode:
0001C09A 4228 0025                  		clr.b	$25(a0)
0001C09E 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001C0A2 6700                       		beq.s	Obj3E_LoadTruthNuke	; GMZ: If yes, branch
0001C0A4 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001C0AA 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001C0B0                            
0001C0B0                            locret_1AC60:
0001C0B0 4E75                       		rts	
0001C0B2                            
0001C0B2                            Obj3E_LoadTruthNuke:	; GMZ
0001C0B2 2448                       		move.l	a0,a2	; GMZ
0001C0B4 207C FFFF D000             		move.l	#$FFFFD000,a0
0001C0BA 4EB9 0000 E792             		jsr	DeleteObject	; GMZ: Delete Sonic's object
0001C0C0 207C FFFF D040             		move.l	#$FFFFD040,a0
0001C0C6 4EB9 0000 E792             		jsr	DeleteObject	; GMZ: Delete the HUD object
0001C0CC 204A                       		move.l	a2,a0
0001C0CE 303C 00E4                  		move.w	#$E4,d0
0001C0D2 4EB8 1C7A                  		jsr	PlaySound_Special	; GMZ: Stop music
0001C0D6 303C 00CD                  		move.w	#$CD,d0
0001C0DA 4EB8 1C74                  		jsr	PlaySound	; GMZ: Play a button sound
0001C0DE 11FC 0001 FFF9             		move.b	#1,($FFFFFFF9).w	; GMZ: Set truth nuke flag
0001C0E4 48E7 FF80                  		movem.l	d0-d7/a0,-(sp)
0001C0E8 4EB8 2828                  		jsr	Pal_MakeFlash
0001C0EC 4CDF 01FF                  		movem.l	(sp)+,d0-d7/a0
0001C0F0 31FC 0000 FBC0             		move.w	#$0000,($FFFFFBC0).w	; GMZ: Make BG color black
0001C0F6                            		; lea	(Obj3E_TNScrPos).l,a1
0001C0F6                            		; moveq	#0,d2
0001C0F6                            		; move.b	($FFFFFE10).w,d2
0001C0F6                            		; lsl.l	#3,d2
0001C0F6                            		; move.l	(a1,d2.w),d0
0001C0F6                            		; move.l	4(a1,d2.w),d1
0001C0F6                            		; move.l	d0,($FFFFF700).w
0001C0F6                            		; move.l	d1,($FFFFF704).w
0001C0F6                            		; cmpi.b	#8,d2
0001C0F6                            		; ; beq.s	Obj3E_IsLZ
0001C0F6                            		; ; move.l	#$00000000,($FFFFF704).w	; GMZ: Set camera to the top of the stage
0001C0F6                            		; ; bra.s	Obj3E_IsntLZ
0001C0F6                            		; bne.s	Obj3E_IsntLZ
0001C0F6                            
0001C0F6                            ; Obj3E_IsLZ:
0001C0F6                            		; move.l	#$01600000,($FFFFD00C).w
0001C0F6                            		; move.l	#$01000000,($FFFFF704).w
0001C0F6                            		; move.l	#$20300000,($FFFFF700).w
0001C0F6                            		; move.l	#0,($FFFFF646).w
0001C0F6                            		; move.l	#0,($FFFFF64A).w
0001C0F6                            		; move.b	#0,($FFFFF64E).w
0001C0F6 21FC 2AC0 0000 F700        		move.l	#$2AC00000,($FFFFF700).w	; GMZ
0001C0FE 21FC 0000 0000 F704        		move.l	#$00000000,($FFFFF704).w	; GMZ
0001C106                            
0001C106                            Obj3E_IsntLZ:
0001C106 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C10C 7000                       		moveq	#0,d0
0001C10E 7200                       		moveq	#0,d1
0001C110 303C 0A40                  		move.w	#$A40,d0
0001C114                            
0001C114                            Obj3E_ClearChunks:
0001C114 22C1                       		move.l	d1,(a1)+
0001C116 22C1                       		move.l	d1,(a1)+
0001C118 22C1                       		move.l	d1,(a1)+
0001C11A 22C1                       		move.l	d1,(a1)+	; GMZ: Clear chunks to prevent garbage from appearing
0001C11C 51C8 FFF6                  		dbf	d0,Obj3E_ClearChunks
0001C120 43F9 00FF A400             		lea	($FFA400).l,a1
0001C126 303C 0100                  		move.w	#$100,d0
0001C12A                            
0001C12A                            Obj3E_ClearLayout:
0001C12A 22C1                       		move.l	d1,(a1)+	; GMZ: Clear layout to prevent garbage from appearing
0001C12C 51C8 FFFC                  		dbf	d0,Obj3E_ClearLayout
0001C130                            
0001C130 4EB8 1BA0                  		jsr	ClearScreen
0001C134 4EB8 1EB6                  		jsr	ClearPLC
0001C138 7023                       		moveq	#$23,d0
0001C13A 4EB8 1E58                  		jsr	LoadPLC	; GMZ: Load art
0001C13E 2448                       		move.l	a0,a2	; Save a0 to a2
0001C140 43F9 00FF B010             		lea	($FFB010).l,a1
0001C146 41F9 0000 0000             		lea	(Eni_TruthNuke).l,a0
0001C14C 303C 0000                  		move.w	#0,d0
0001C150 4EB8 1FF6                  		jsr	EniDec
0001C154 43F9 00FF B010             		lea	($FFB010).l,a1
0001C15A 203C 4000 0003             		move.l	#$40000003,d0
0001C160 7200                       		moveq	#0,d1
0001C162 3238 F700                  		move.w	($FFFFF700).w,d1
0001C166 0241 01F8                  		andi.w	#$1F8,d1
0001C16A E189                       		lsl.l	#8,d1
0001C16C ED89                       		lsl.l	#6,d1
0001C16E D081                       		add.l	d1,d0	; GMZ: Get correct plane position
0001C170 7227                       		moveq	#$27,d1
0001C172 741B                       		moveq	#$1B,d2
0001C174 4EB8 1CF8                  		jsr	ShowVDPGraphics	; GMZ: Load plane mappings
0001C178 204A                       		move.l	a2,a0	; GMZ: Recover a0 from a2
0001C17A 4E75                       		rts	
0001C17C                            ; ===========================================================================
0001C17C                            
0001C17C                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001C17C 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001C180 6700                       		beq.s	Obj3E_TNExplosion	; GMZ: If yes, branch
0001C182 7007                       		moveq	#7,d0
0001C184 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001C188 6600                       		bne.s	loc_1ACA0
0001C18A 4EB9 0000 EBDC             		jsr	SingleObjLoad
0001C190 6600                       		bne.s	loc_1ACA0
0001C192 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001C196 3368 0008 0008             		move.w	8(a0),8(a1)
0001C19C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C1A2 4EB9 0000 33F0             		jsr	(RandomNumber).l
0001C1A8 7200                       		moveq	#0,d1
0001C1AA 1200                       		move.b	d0,d1
0001C1AC E409                       		lsr.b	#2,d1
0001C1AE 0441 0020                  		subi.w	#$20,d1
0001C1B2 D369 0008                  		add.w	d1,8(a1)
0001C1B6 E048                       		lsr.w	#8,d0
0001C1B8 E608                       		lsr.b	#3,d0
0001C1BA D169 000C                  		add.w	d0,$C(a1)
0001C1BE                            
0001C1BE                            loc_1ACA0:
0001C1BE 5368 001E                  		subq.w	#1,$1E(a0)
0001C1C2 6700                       		beq.s	Obj3E_MakeAnimal
0001C1C4 4E75                       		rts	
0001C1C6                            
0001C1C6                            Obj3E_TNExplosion:
0001C1C6 303C 00C1                  		move.w	#$C1,d0
0001C1CA 4EB8 1C74                  		jsr	PlaySound	; GMZ: Play multiple explosion sounds while we wait
0001C1CE 5368 001E                  		subq.w	#1,$1E(a0)
0001C1D2 6700 0000                  		beq.w	Obj3E_TNExplTimerOver	; GMZ: If timer is 0, branch
0001C1D6 4E75                       		rts
0001C1D8                            
0001C1D8                            Obj3E_TNExplTimerOver:	; GMZ
0001C1D8 48E7 FF80                  		movem.l	d0-d7/a0,-(sp)
0001C1DC 4EB8 277C                  		jsr	Pal_MakeWhite	; GMZ: Fade out from black
0001C1E0 4CDF 01FF                  		movem.l	(sp)+,d0-d7/a0
0001C1E4 317C 0080 001E             		move.w	#$80,$1E(a0)	; GMZ: Set new timer
0001C1EA 117C 000E 0024             		move.b	#$E,$24(a0)	; GMZ: Set routine to 0E (End Act)
0001C1F0 4E75                       		rts	
0001C1F2                            ; ===========================================================================
0001C1F2                            
0001C1F2                            Obj3E_MakeAnimal:
0001C1F2 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001C1F8 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001C1FE 117C 0006 001A             		move.b	#6,$1A(a0)
0001C204 317C 0096 001E             		move.w	#$96,$1E(a0)
0001C20A 0668 0020 000C             		addi.w	#$20,$C(a0)
0001C210 7C07                       		moveq	#7,d6
0001C212 3A3C 009A                  		move.w	#$9A,d5
0001C216 78E4                       		moveq	#-$1C,d4
0001C218                            
0001C218                            Obj3E_Loop:
0001C218 4EB9 0000 EBDC             		jsr	SingleObjLoad
0001C21E 6600                       		bne.s	locret_1ACF8
0001C220 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001C224 3368 0008 0008             		move.w	8(a0),8(a1)
0001C22A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C230 D969 0008                  		add.w	d4,8(a1)
0001C234 5E44                       		addq.w	#7,d4
0001C236 3345 0036                  		move.w	d5,$36(a1)
0001C23A 5145                       		subq.w	#8,d5
0001C23C 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001C240                            
0001C240                            locret_1ACF8:
0001C240 4E75                       		rts	
0001C242                            ; ===========================================================================
0001C242                            
0001C242                            Obj3E_Animals:				; XREF: Obj3E_Index
0001C242 7007                       		moveq	#7,d0
0001C244 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001C248 6600                       		bne.s	loc_1AD38
0001C24A 4EB9 0000 EBDC             		jsr	SingleObjLoad
0001C250 6600                       		bne.s	loc_1AD38
0001C252 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001C256 3368 0008 0008             		move.w	8(a0),8(a1)
0001C25C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C262 4EB9 0000 33F0             		jsr	(RandomNumber).l
0001C268 0240 001F                  		andi.w	#$1F,d0
0001C26C 5D40                       		subq.w	#6,d0
0001C26E 4A41                       		tst.w	d1
0001C270 6A00                       		bpl.s	loc_1AD2E
0001C272 4440                       		neg.w	d0
0001C274                            
0001C274                            loc_1AD2E:
0001C274 D169 0008                  		add.w	d0,8(a1)
0001C278 337C 000C 0036             		move.w	#$C,$36(a1)
0001C27E                            
0001C27E                            loc_1AD38:
0001C27E 5368 001E                  		subq.w	#1,$1E(a0)
0001C282 6600                       		bne.s	locret_1AD48
0001C284 5428 0024                  		addq.b	#2,$24(a0)
0001C288 317C 00B4 001E             		move.w	#180,$1E(a0)
0001C28E                            
0001C28E                            locret_1AD48:
0001C28E 4E75                       		rts	
0001C290                            ; ===========================================================================
0001C290                            
0001C290                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001C290 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001C294 6700                       		beq.s	Obj3E_TNEndAct	; GMZ: If yes, branch
0001C296 703E                       		moveq	#$3E,d0
0001C298 7228                       		moveq	#$28,d1
0001C29A 7440                       		moveq	#$40,d2
0001C29C 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001C2A0                            
0001C2A0                            Obj3E_FindObj28:
0001C2A0 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001C2A2 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001C2A4 D2C2                       		adda.w	d2,a1		; next object RAM
0001C2A6 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001C2AA                            
0001C2AA 4EB9 0000 FDE2             		jsr	GotThroughAct
0001C2B0 4EF9 0000 E792             		jmp	DeleteObject
0001C2B6                            
0001C2B6                            Obj3E_TNEndAct:
0001C2B6 5368 001E                  		subq.w	#1,$1E(a0)	; GMZ: Wait some frames
0001C2BA 6600                       		bne.s	Obj3E_Obj28Found	; GMZ: If timer isn't 0, branch
0001C2BC                            
0001C2BC 4EB9 0000 FDE2             		jsr	GotThroughAct
0001C2C2 4EF9 0000 E792             		jmp	DeleteObject
0001C2C8                            ; ===========================================================================
0001C2C8                            
0001C2C8                            Obj3E_Obj28Found:
0001C2C8 4E75                       		rts	
0001C2CA                            ; ===========================================================================
0001C2CA                            Ani_obj3E:
0001C2CA                            	include "_anim\obj3E.asm"
0001C2CA                            ; ---------------------------------------------------------------------------
0001C2CA                            ; Animation script - prison capsule
0001C2CA                            ; ---------------------------------------------------------------------------
0001C2CA 0000                       		dc.w byte_1AD70-Ani_obj3E
0001C2CC 0000                       		dc.w byte_1AD70-Ani_obj3E
0001C2CE 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001C2D2                            		even
0001C2D2                            		even
0001C2D2                            
0001C2D2                            ; ---------------------------------------------------------------------------
0001C2D2                            ; Sprite mappings - prison capsule
0001C2D2                            ; ---------------------------------------------------------------------------
0001C2D2                            Map_obj3E:
0001C2D2                            	include "_maps\obj3E.asm"
0001C2D2                            ; ---------------------------------------------------------------------------
0001C2D2                            ; Sprite mappings - prison capsule
0001C2D2                            ; ---------------------------------------------------------------------------
0001C2D2 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001C2D6 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001C2DA 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001C2DE 0000                       		dc.w byte_1ADE2-Map_obj3E
0001C2E0 07                         byte_1AD82:	dc.b 7
0001C2E1 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001C2E6 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001C2EB E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001C2F0 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001C2F5 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001C2FA 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001C2FF 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001C304 01                         byte_1ADA6:	dc.b 1
0001C305 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001C30A 06                         byte_1ADAC:	dc.b 6
0001C30B 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001C310 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001C315 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001C31A 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001C31F 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001C324 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001C329 01                         byte_1ADCB:	dc.b 1
0001C32A F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001C32F 02                         byte_1ADD1:	dc.b 2
0001C330 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001C335 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001C33A 01                         byte_1ADDC:	dc.b 1
0001C33B F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001C340 00                         byte_1ADE2:	dc.b 0
0001C342 00                         		even
0001C342 00                         		even
0001C342                            
0001C342                            ; ---------------------------------------------------------------------------
0001C342                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001C342                            ; ---------------------------------------------------------------------------
0001C342                            
0001C342                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C342                            
0001C342                            
0001C342                            TouchResponse:				; XREF: Obj01
0001C342 4E71                       		nop	
0001C344 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001C348 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001C34C 5142                       		subq.w	#8,d2
0001C34E 7A00                       		moveq	#0,d5
0001C350 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001C354 5705                       		subq.b	#3,d5
0001C356 9645                       		sub.w	d5,d3
0001C358 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001C35E 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001C360 0643 000C                  		addi.w	#$C,d3
0001C364 7A0A                       		moveq	#$A,d5
0001C366                            
0001C366                            Touch_NoDuck:
0001C366 383C 0010                  		move.w	#$10,d4
0001C36A DA45                       		add.w	d5,d5
0001C36C 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001C370 3C3C 005F                  		move.w	#$5F,d6
0001C374                            
0001C374                            Touch_Loop:
0001C374 4A29 0001                  		tst.b	1(a1)
0001C378 6A00                       		bpl.s	Touch_NextObj
0001C37A 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001C37E 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001C380                            
0001C380                            Touch_NextObj:
0001C380 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001C384 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001C388                            
0001C388 7000                       		moveq	#0,d0
0001C38A 4E75                       		rts	
0001C38C                            ; ===========================================================================
0001C38C 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001C38E 0C14                       		dc.b   $C, $14
0001C390 140C                       		dc.b  $14,  $C
0001C392 0410                       		dc.b	4, $10
0001C394 0C12                       		dc.b   $C, $12
0001C396 1010                       		dc.b  $10, $10
0001C398 0606                       		dc.b	6,   6
0001C39A 180C                       		dc.b  $18,  $C
0001C39C 0C10                       		dc.b   $C, $10
0001C39E 100C                       		dc.b  $10,  $C
0001C3A0 0808                       		dc.b	8,   8
0001C3A2 1410                       		dc.b  $14, $10
0001C3A4 1408                       		dc.b  $14,   8
0001C3A6 0E0E                       		dc.b   $E,  $E
0001C3A8 1818                       		dc.b  $18, $18
0001C3AA 2810                       		dc.b  $28, $10
0001C3AC 1018                       		dc.b  $10, $18
0001C3AE 0810                       		dc.b	8, $10
0001C3B0 2070                       		dc.b  $20, $70
0001C3B2 4020                       		dc.b  $40, $20
0001C3B4 8020                       		dc.b  $80, $20
0001C3B6 2020                       		dc.b  $20, $20
0001C3B8 0808                       		dc.b	8,   8
0001C3BA 0404                       		dc.b	4,   4
0001C3BC 2008                       		dc.b  $20,   8
0001C3BE 0C0C                       		dc.b   $C,  $C
0001C3C0 0804                       		dc.b	8,   4
0001C3C2 1804                       		dc.b  $18,   4
0001C3C4 2804                       		dc.b  $28,   4
0001C3C6 0408                       		dc.b	4,   8
0001C3C8 0418                       		dc.b	4, $18
0001C3CA 0428                       		dc.b	4, $28
0001C3CC 0420                       		dc.b	4, $20
0001C3CE 1818                       		dc.b  $18, $18
0001C3D0 0C18                       		dc.b   $C, $18
0001C3D2 4808                       		dc.b  $48,   8
0001C3D4                            ; ===========================================================================
0001C3D4                            
0001C3D4                            Touch_Height:				; XREF: TouchResponse
0001C3D4 0240 003F                  		andi.w	#$3F,d0
0001C3D8 D040                       		add.w	d0,d0
0001C3DA 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001C3DE 7200                       		moveq	#0,d1
0001C3E0 121A                       		move.b	(a2)+,d1
0001C3E2 3029 0008                  		move.w	8(a1),d0
0001C3E6 9041                       		sub.w	d1,d0
0001C3E8 9042                       		sub.w	d2,d0
0001C3EA 6400                       		bcc.s	loc_1AE98
0001C3EC D241                       		add.w	d1,d1
0001C3EE D041                       		add.w	d1,d0
0001C3F0 6500                       		bcs.s	Touch_Width
0001C3F2 6000 FF8C                  		bra.w	Touch_NextObj
0001C3F6                            ; ===========================================================================
0001C3F6                            
0001C3F6                            loc_1AE98:
0001C3F6 B044                       		cmp.w	d4,d0
0001C3F8 6200 FF86                  		bhi.w	Touch_NextObj
0001C3FC                            
0001C3FC                            Touch_Width:
0001C3FC 7200                       		moveq	#0,d1
0001C3FE 121A                       		move.b	(a2)+,d1
0001C400 3029 000C                  		move.w	$C(a1),d0
0001C404 9041                       		sub.w	d1,d0
0001C406 9043                       		sub.w	d3,d0
0001C408 6400                       		bcc.s	loc_1AEB6
0001C40A D241                       		add.w	d1,d1
0001C40C D240                       		add.w	d0,d1
0001C40E 6500                       		bcs.s	Touch_ChkValue
0001C410 6000 FF6E                  		bra.w	Touch_NextObj
0001C414                            ; ===========================================================================
0001C414                            
0001C414                            loc_1AEB6:
0001C414 B045                       		cmp.w	d5,d0
0001C416 6200 FF68                  		bhi.w	Touch_NextObj
0001C41A                            
0001C41A                            Touch_ChkValue:
0001C41A 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001C41E 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001C422 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001C426 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001C42A 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001C42E 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001C430 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001C434                            
0001C434                            ; touch	response is $40-$7F
0001C434                            
0001C434 1029 0020                  		move.b	$20(a1),d0
0001C438 0200 003F                  		andi.b	#$3F,d0
0001C43C 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001C440 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001C442 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001C448 6400 0000                  		bcc.w	locret_1AEF2
0001C44C 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001C450                            
0001C450                            locret_1AEF2:
0001C450 4E75                       		rts	
0001C452                            ; ===========================================================================
0001C452                            
0001C452                            Touch_Monitor:
0001C452 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001C456 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001C458 3028 000C                  		move.w	$C(a0),d0
0001C45C 0440 0010                  		subi.w	#$10,d0
0001C460 B069 000C                  		cmp.w	$C(a1),d0
0001C464 6500                       		bcs.s	locret_1AF2E
0001C466 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001C46A 337C FE80 0012             		move.w	#-$180,$12(a1)
0001C470 4A29 0025                  		tst.b	$25(a1)
0001C474 6600                       		bne.s	locret_1AF2E
0001C476 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001C47A 4E75                       		rts	
0001C47C                            ; ===========================================================================
0001C47C                            
0001C47C                            loc_1AF1E:
0001C47C 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001C482 6600                       		bne.s	locret_1AF2E
0001C484 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001C488 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001C48C                            
0001C48C                            locret_1AF2E:
0001C48C 4E75                       		rts	
0001C48E                            ; ===========================================================================
0001C48E                            
0001C48E                            Touch_Enemy:				; XREF: Touch_ChkValue
0001C48E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001C492 6600                       		bne.s	loc_1AF40	; if yes, branch
0001C494 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001C49A 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001C49E                            
0001C49E                            loc_1AF40:
0001C49E 4A29 0021                  		tst.b	$21(a1)
0001C4A2 6700                       		beq.s	Touch_KillEnemy
0001C4A4 4468 0010                  		neg.w	$10(a0)
0001C4A8 4468 0012                  		neg.w	$12(a0)
0001C4AC E0E8 0010                  		asr	$10(a0)
0001C4B0 E0E8 0012                  		asr	$12(a0)
0001C4B4 137C 0000 0020             		move.b	#0,$20(a1)
0001C4BA 5329 0021                  		subq.b	#1,$21(a1)
0001C4BE 6600                       		bne.s	locret_1AF68
0001C4C0 08E9 0007 0022             		bset	#7,$22(a1)
0001C4C6                            
0001C4C6                            locret_1AF68:
0001C4C6 4E75                       		rts	
0001C4C8                            ; ===========================================================================
0001C4C8                            
0001C4C8                            Touch_KillEnemy:
0001C4C8 08E9 0007 0022             		bset	#7,$22(a1)
0001C4CE 7000                       		moveq	#0,d0
0001C4D0 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001C4D4 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001C4D8 0C40 0006                  		cmpi.w	#6,d0
0001C4DC 6500                       		bcs.s	loc_1AF82
0001C4DE 7006                       		moveq	#6,d0
0001C4E0                            
0001C4E0                            loc_1AF82:
0001C4E0 3340 003E                  		move.w	d0,$3E(a1)
0001C4E4 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001C4E8 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001C4EE 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001C4F0 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001C4F4 337C 000A 003E             		move.w	#$A,$3E(a1)
0001C4FA                            
0001C4FA                            loc_1AF9C:
0001C4FA 6100 0000                  		bsr.w	AddPoints
0001C4FE 7400                       		moveq	#0,d2	; GMZ
0001C500 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001C502 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001C504                            
0001C504                            TouchKE_Explode:
0001C504 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001C508 137C 0000 0024             		move.b	#0,$24(a1)
0001C50E 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001C512                            
0001C512                            TouchKE_NextExplosion:
0001C512 5802                       		addq.b	#4,d2
0001C514 4EB9 0000 EBDC             		jsr	SingleObjLoad
0001C51A 6600                       		bne.s	TouchKE_NoExplosion
0001C51C 336A 0008 0008             		move.w	8(a2),8(a1)
0001C522 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001C528 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001C52C                            
0001C52C                            TouchKE_NoExplosion:
0001C52C 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001C52E 4A68 0012                  		tst.w	$12(a0)
0001C532 6B00                       		bmi.s	loc_1AFC2
0001C534 3028 000C                  		move.w	$C(a0),d0
0001C538 B069 000C                  		cmp.w	$C(a1),d0
0001C53C 6400                       		bcc.s	loc_1AFCA
0001C53E 4468 0012                  		neg.w	$12(a0)
0001C542 4E75                       		rts	
0001C544                            ; ===========================================================================
0001C544                            
0001C544                            loc_1AFC2:
0001C544 0668 0100 0012             		addi.w	#$100,$12(a0)
0001C54A 4E75                       		rts	
0001C54C                            ; ===========================================================================
0001C54C                            
0001C54C                            loc_1AFCA:
0001C54C 0468 0100 0012             		subi.w	#$100,$12(a0)
0001C552 4E75                       		rts	
0001C554                            ; ===========================================================================
0001C554 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001C55C                            ; ===========================================================================
0001C55C                            
0001C55C                            loc_1AFDA:				; XREF: Touch_CatKiller
0001C55C 08E9 0007 0022             		bset	#7,$22(a1)
0001C562                            
0001C562                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001C562 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001C566 6700                       		beq.s	Touch_Hurt	; if not, branch
0001C568                            
0001C568                            loc_1AFE6:				; XREF: Touch_Hurt
0001C568 70FF                       		moveq	#-1,d0
0001C56A 4E75                       		rts	
0001C56C                            ; ===========================================================================
0001C56C                            
0001C56C                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001C56C 4E71                       		nop	
0001C56E 4A68 0030                  		tst.w	$30(a0)
0001C572 66F4                       		bne.s	loc_1AFE6
0001C574 2449                       		movea.l	a1,a2
0001C576                            
0001C576                            ; End of function TouchResponse
0001C576                            ; continue straight to HurtSonic
0001C576                            
0001C576                            ; ---------------------------------------------------------------------------
0001C576                            ; Hurting Sonic	subroutine
0001C576                            ; ---------------------------------------------------------------------------
0001C576                            
0001C576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C576                            
0001C576                            
0001C576                            HurtSonic:
0001C576 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001C57A 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001C57C 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001C580 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001C584 4EB9 0000 EBDC             		jsr	SingleObjLoad
0001C58A 6600                       		bne.s	Hurt_Shield
0001C58C 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001C590 3368 0008 0008             		move.w	8(a0),8(a1)
0001C596 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C59C                            
0001C59C                            Hurt_Shield:
0001C59C 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001C5A2 117C 0004 0024             		move.b	#4,$24(a0)
0001C5A8 6100 8452                  		bsr.w	Sonic_ResetOnFloor
0001C5AC 08E8 0001 0022             		bset	#1,$22(a0)
0001C5B2 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001C5B8 317C FE00 0010             		move.w	#-$200,$10(a0)
0001C5BE 0828 0006 0022             		btst	#6,$22(a0)
0001C5C4 6700                       		beq.s	Hurt_Reverse
0001C5C6 317C FE00 0012             		move.w	#-$200,$12(a0)
0001C5CC 317C FF00 0010             		move.w	#-$100,$10(a0)
0001C5D2                            
0001C5D2                            Hurt_Reverse:
0001C5D2 3028 0008                  		move.w	8(a0),d0
0001C5D6 B06A 0008                  		cmp.w	8(a2),d0
0001C5DA 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001C5DC 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001C5E0                            
0001C5E0                            Hurt_ChkSpikes:
0001C5E0 317C 0000 0014             		move.w	#0,$14(a0)
0001C5E6 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001C5EC 317C 0078 0030             		move.w	#$78,$30(a0)
0001C5F2 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001C5F6 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001C5FA 6600                       		bne.s	Hurt_Sound	; if not, branch
0001C5FC 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001C600 6600                       		bne.s	Hurt_Sound	; if not, branch
0001C602 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001C606                            
0001C606                            Hurt_Sound:
0001C606 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l
0001C60C 70FF                       		moveq	#-1,d0
0001C60E 4E75                       		rts	
0001C610                            ; ===========================================================================
0001C610                            
0001C610                            Hurt_NoRings:
0001C610 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001C614 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001C618                            ; End of function HurtSonic
0001C618                            
0001C618                            ; ---------------------------------------------------------------------------
0001C618                            ; Subroutine to	kill Sonic
0001C618                            ; ---------------------------------------------------------------------------
0001C618                            
0001C618                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C618                            
0001C618                            
0001C618                            KillSonic:
0001C618 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001C61C 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001C61E 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001C624 117C 0006 0024             		move.b	#6,$24(a0)
0001C62A 6100 83D0                  		bsr.w	Sonic_ResetOnFloor
0001C62E 08E8 0001 0022             		bset	#1,$22(a0)
0001C634 317C F900 0012             		move.w	#-$700,$12(a0)
0001C63A 317C 0000 0010             		move.w	#0,$10(a0)
0001C640 317C 0000 0014             		move.w	#0,$14(a0)
0001C646 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001C64C 117C 0018 001C             		move.b	#$18,$1C(a0)
0001C652 08E8 0007 0002             		bset	#7,2(a0)
0001C658 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001C65C 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001C660 6600                       		bne.s	Kill_Sound
0001C662 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001C666                            
0001C666                            Kill_Sound:
0001C666 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l
0001C66C                            
0001C66C                            Kill_NoDeath:
0001C66C 70FF                       		moveq	#-1,d0
0001C66E 4E75                       		rts	
0001C670                            ; End of function KillSonic
0001C670                            
0001C670                            
0001C670                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C670                            
0001C670                            
0001C670                            Touch_Special:				; XREF: Touch_ChkValue
0001C670 1229 0020                  		move.b	$20(a1),d1
0001C674 0201 003F                  		andi.b	#$3F,d1
0001C678 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001C67C 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001C67E 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001C682 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001C684 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001C688 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001C68A 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001C68E 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001C690 4E75                       		rts	
0001C692                            ; ===========================================================================
0001C692                            
0001C692                            Touch_CatKiller:			; XREF: Touch_Special
0001C692 6000 FEC8                  		bra.w	loc_1AFDA
0001C696                            ; ===========================================================================
0001C696                            
0001C696                            Touch_Yadrin:				; XREF: Touch_Special
0001C696 9A40                       		sub.w	d0,d5
0001C698 0C45 0008                  		cmpi.w	#8,d5
0001C69C 6400                       		bcc.s	loc_1B144
0001C69E 3029 0008                  		move.w	8(a1),d0
0001C6A2 5940                       		subq.w	#4,d0
0001C6A4 0829 0000 0022             		btst	#0,$22(a1)
0001C6AA 6700                       		beq.s	loc_1B130
0001C6AC 0440 0010                  		subi.w	#$10,d0
0001C6B0                            
0001C6B0                            loc_1B130:
0001C6B0 9042                       		sub.w	d2,d0
0001C6B2 6400                       		bcc.s	loc_1B13C
0001C6B4 0640 0018                  		addi.w	#$18,d0
0001C6B8 6500                       		bcs.s	loc_1B140
0001C6BA 6000                       		bra.s	loc_1B144
0001C6BC                            ; ===========================================================================
0001C6BC                            
0001C6BC                            loc_1B13C:
0001C6BC B044                       		cmp.w	d4,d0
0001C6BE 6200                       		bhi.s	loc_1B144
0001C6C0                            
0001C6C0                            loc_1B140:
0001C6C0 6000 FEA0                  		bra.w	Touch_ChkHurt
0001C6C4                            ; ===========================================================================
0001C6C4                            
0001C6C4                            loc_1B144:
0001C6C4 6000 FDC8                  		bra.w	Touch_Enemy
0001C6C8                            ; ===========================================================================
0001C6C8                            
0001C6C8                            Touch_D7orE1:				; XREF: Touch_Special
0001C6C8 5229 0021                  		addq.b	#1,$21(a1)
0001C6CC 4E75                       		rts	
0001C6CE                            ; End of function Touch_Special
0001C6CE                            
0001C6CE                            ; ---------------------------------------------------------------------------
0001C6CE                            ; Subroutine to	show the special stage layout
0001C6CE                            ; ---------------------------------------------------------------------------
0001C6CE                            
0001C6CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6CE                            
0001C6CE                            
0001C6CE                            SS_ShowLayout:				; XREF: SpecialStage
0001C6CE 6100 0000                  		bsr.w	SS_AniWallsRings
0001C6D2 6100 0000                  		bsr.w	SS_AniItems
0001C6D6 3F05                       		move.w	d5,-(sp)
0001C6D8 43F8 8000                  		lea	($FFFF8000).w,a1
0001C6DC 1038 F780                  		move.b	($FFFFF780).w,d0
0001C6E0 0200 00FC                  		andi.b	#$FC,d0
0001C6E4 4EB9 0000 3416             		jsr	(CalcSine).l
0001C6EA 3800                       		move.w	d0,d4
0001C6EC 3A01                       		move.w	d1,d5
0001C6EE C9FC 0018                  		muls.w	#$18,d4
0001C6F2 CBFC 0018                  		muls.w	#$18,d5
0001C6F6 7400                       		moveq	#0,d2
0001C6F8 3438 F700                  		move.w	($FFFFF700).w,d2
0001C6FC 84FC 0018                  		divu.w	#$18,d2
0001C700 4842                       		swap	d2
0001C702 4442                       		neg.w	d2
0001C704 0642 FF4C                  		addi.w	#-$B4,d2
0001C708 7600                       		moveq	#0,d3
0001C70A 3638 F704                  		move.w	($FFFFF704).w,d3
0001C70E 86FC 0018                  		divu.w	#$18,d3
0001C712 4843                       		swap	d3
0001C714 4443                       		neg.w	d3
0001C716 0643 FF4C                  		addi.w	#-$B4,d3
0001C71A 3E3C 000F                  		move.w	#$F,d7
0001C71E                            
0001C71E                            loc_1B19E:
0001C71E 48A7 E000                  		movem.w	d0-d2,-(sp)
0001C722 48A7 C000                  		movem.w	d0-d1,-(sp)
0001C726 4440                       		neg.w	d0
0001C728 C3C2                       		muls.w	d2,d1
0001C72A C1C3                       		muls.w	d3,d0
0001C72C 2C00                       		move.l	d0,d6
0001C72E DC81                       		add.l	d1,d6
0001C730 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001C734 C1C2                       		muls.w	d2,d0
0001C736 C3C3                       		muls.w	d3,d1
0001C738 D280                       		add.l	d0,d1
0001C73A 2406                       		move.l	d6,d2
0001C73C 3C3C 000F                  		move.w	#$F,d6
0001C740                            
0001C740                            loc_1B1C0:
0001C740 2002                       		move.l	d2,d0
0001C742 E080                       		asr.l	#8,d0
0001C744 32C0                       		move.w	d0,(a1)+
0001C746 2001                       		move.l	d1,d0
0001C748 E080                       		asr.l	#8,d0
0001C74A 32C0                       		move.w	d0,(a1)+
0001C74C D485                       		add.l	d5,d2
0001C74E D284                       		add.l	d4,d1
0001C750 51CE FFEE                  		dbf	d6,loc_1B1C0
0001C754                            
0001C754 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001C758 0643 0018                  		addi.w	#$18,d3
0001C75C 51CF FFC0                  		dbf	d7,loc_1B19E
0001C760                            
0001C760 3A1F                       		move.w	(sp)+,d5
0001C762 41F9 00FF 0000             		lea	($FF0000).l,a0
0001C768 7000                       		moveq	#0,d0
0001C76A 3038 F704                  		move.w	($FFFFF704).w,d0
0001C76E 80FC 0018                  		divu.w	#$18,d0
0001C772 C0FC 0080                  		mulu.w	#$80,d0
0001C776 D1C0                       		adda.l	d0,a0
0001C778 7000                       		moveq	#0,d0
0001C77A 3038 F700                  		move.w	($FFFFF700).w,d0
0001C77E 80FC 0018                  		divu.w	#$18,d0
0001C782 D0C0                       		adda.w	d0,a0
0001C784 49F8 8000                  		lea	($FFFF8000).w,a4
0001C788 3E3C 000F                  		move.w	#$F,d7
0001C78C                            
0001C78C                            loc_1B20C:
0001C78C 3C3C 000F                  		move.w	#$F,d6
0001C790                            
0001C790                            loc_1B210:
0001C790 7000                       		moveq	#0,d0
0001C792 1018                       		move.b	(a0)+,d0
0001C794 6700                       		beq.s	loc_1B268
0001C796 0C00 004E                  		cmpi.b	#$4E,d0
0001C79A 6200                       		bhi.s	loc_1B268
0001C79C 3614                       		move.w	(a4),d3
0001C79E 0643 0120                  		addi.w	#$120,d3
0001C7A2 0C43 0070                  		cmpi.w	#$70,d3
0001C7A6 6500                       		bcs.s	loc_1B268
0001C7A8 0C43 01D0                  		cmpi.w	#$1D0,d3
0001C7AC 6400                       		bcc.s	loc_1B268
0001C7AE 342C 0002                  		move.w	2(a4),d2
0001C7B2 0642 00F0                  		addi.w	#$F0,d2
0001C7B6 0C42 0070                  		cmpi.w	#$70,d2
0001C7BA 6500                       		bcs.s	loc_1B268
0001C7BC 0C42 0170                  		cmpi.w	#$170,d2
0001C7C0 6400                       		bcc.s	loc_1B268
0001C7C2 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001C7C8 E748                       		lsl.w	#3,d0
0001C7CA 4BF5 0000                  		lea	(a5,d0.w),a5
0001C7CE 225D                       		movea.l	(a5)+,a1
0001C7D0 321D                       		move.w	(a5)+,d1
0001C7D2 D241                       		add.w	d1,d1
0001C7D4 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001C7D8 365D                       		movea.w	(a5)+,a3
0001C7DA 7200                       		moveq	#0,d1
0001C7DC 1219                       		move.b	(a1)+,d1
0001C7DE 5301                       		subq.b	#1,d1
0001C7E0 6B00                       		bmi.s	loc_1B268
0001C7E2 4EB9 0000 E8B4             		jsr	sub_D762
0001C7E8                            
0001C7E8                            loc_1B268:
0001C7E8 584C                       		addq.w	#4,a4
0001C7EA 51CE FFA4                  		dbf	d6,loc_1B210
0001C7EE                            
0001C7EE 41E8 0070                  		lea	$70(a0),a0
0001C7F2 51CF FF98                  		dbf	d7,loc_1B20C
0001C7F6                            
0001C7F6 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001C7FA 0C05 0050                  		cmpi.b	#$50,d5
0001C7FE 6700                       		beq.s	loc_1B288
0001C800 24BC 0000 0000             		move.l	#0,(a2)
0001C806 4E75                       		rts	
0001C808                            ; ===========================================================================
0001C808                            
0001C808                            loc_1B288:
0001C808 157C 0000 FFFB             		move.b	#0,-5(a2)
0001C80E 4E75                       		rts	
0001C810                            ; End of function SS_ShowLayout
0001C810                            
0001C810                            ; ---------------------------------------------------------------------------
0001C810                            ; Subroutine to	animate	walls and rings	in the special stage
0001C810                            ; ---------------------------------------------------------------------------
0001C810                            
0001C810                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C810                            
0001C810                            
0001C810                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001C810 43F9 00FF 400C             		lea	($FF400C).l,a1
0001C816 7000                       		moveq	#0,d0
0001C818 1038 F780                  		move.b	($FFFFF780).w,d0
0001C81C E408                       		lsr.b	#2,d0
0001C81E 0240 000F                  		andi.w	#$F,d0
0001C822 7223                       		moveq	#$23,d1
0001C824                            
0001C824                            loc_1B2A4:
0001C824 3280                       		move.w	d0,(a1)
0001C826 5049                       		addq.w	#8,a1
0001C828 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001C82C                            
0001C82C 43F9 00FF 4005             		lea	($FF4005).l,a1
0001C832 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001C836 6A00                       		bpl.s	loc_1B2C8
0001C838 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001C83E 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001C842 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001C848                            
0001C848                            loc_1B2C8:
0001C848 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001C84E 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001C852 6A00                       		bpl.s	loc_1B2E4
0001C854 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001C85A 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001C85E 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001C864                            
0001C864                            loc_1B2E4:
0001C864 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001C868 1340 0138                  		move.b	d0,$138(a1)
0001C86C 1340 0160                  		move.b	d0,$160(a1)
0001C870 1340 0148                  		move.b	d0,$148(a1)
0001C874 1340 0150                  		move.b	d0,$150(a1)
0001C878 1340 01D8                  		move.b	d0,$1D8(a1)
0001C87C 1340 01E0                  		move.b	d0,$1E0(a1)
0001C880 1340 01E8                  		move.b	d0,$1E8(a1)
0001C884 1340 01F0                  		move.b	d0,$1F0(a1)
0001C888 1340 01F8                  		move.b	d0,$1F8(a1)
0001C88C 1340 0200                  		move.b	d0,$200(a1)
0001C890 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001C894 6A00                       		bpl.s	loc_1B326
0001C896 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001C89C 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001C8A0 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001C8A6                            
0001C8A6                            loc_1B326:
0001C8A6 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001C8AA 1340 0168                  		move.b	d0,$168(a1)
0001C8AE 1340 0170                  		move.b	d0,$170(a1)
0001C8B2 1340 0178                  		move.b	d0,$178(a1)
0001C8B6 1340 0180                  		move.b	d0,$180(a1)
0001C8BA 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001C8BE 6A00                       		bpl.s	loc_1B350
0001C8C0 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001C8C6 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001C8CA 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001C8D0                            
0001C8D0                            loc_1B350:
0001C8D0 43F9 00FF 4016             		lea	($FF4016).l,a1
0001C8D6 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001C8DC 7000                       		moveq	#0,d0
0001C8DE 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001C8E2 D040                       		add.w	d0,d0
0001C8E4 41F0 0000                  		lea	(a0,d0.w),a0
0001C8E8 3290                       		move.w	(a0),(a1)
0001C8EA 3368 0002 0008             		move.w	2(a0),8(a1)
0001C8F0 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C8F6 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C8FC 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C902 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C908 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C90E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C914 D0FC 0020                  		adda.w	#$20,a0
0001C918 D2FC 0048                  		adda.w	#$48,a1
0001C91C 3290                       		move.w	(a0),(a1)
0001C91E 3368 0002 0008             		move.w	2(a0),8(a1)
0001C924 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C92A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C930 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C936 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C93C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C942 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C948 D0FC 0020                  		adda.w	#$20,a0
0001C94C D2FC 0048                  		adda.w	#$48,a1
0001C950 3290                       		move.w	(a0),(a1)
0001C952 3368 0002 0008             		move.w	2(a0),8(a1)
0001C958 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C95E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C964 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C96A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C970 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C976 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C97C D0FC 0020                  		adda.w	#$20,a0
0001C980 D2FC 0048                  		adda.w	#$48,a1
0001C984 3290                       		move.w	(a0),(a1)
0001C986 3368 0002 0008             		move.w	2(a0),8(a1)
0001C98C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C992 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C998 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C99E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C9A4 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C9AA 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C9B0 D0FC 0020                  		adda.w	#$20,a0
0001C9B4 D2FC 0048                  		adda.w	#$48,a1
0001C9B8 4E75                       		rts	
0001C9BA                            ; End of function SS_AniWallsRings
0001C9BA                            
0001C9BA                            ; ===========================================================================
0001C9BA 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C9CA 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C9DA 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C9EA 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C9FA 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001CA0A 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001CA1A 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001CA2A 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001CA3A                            ; ---------------------------------------------------------------------------
0001CA3A                            ; Subroutine to	remove items when you collect them in the special stage
0001CA3A                            ; ---------------------------------------------------------------------------
0001CA3A                            
0001CA3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA3A                            
0001CA3A                            
0001CA3A                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001CA3A 45F9 00FF 4400             		lea	($FF4400).l,a2
0001CA40 303C 001F                  		move.w	#$1F,d0
0001CA44                            
0001CA44                            loc_1B4C4:
0001CA44 4A12                       		tst.b	(a2)
0001CA46 6700                       		beq.s	locret_1B4CE
0001CA48 504A                       		addq.w	#8,a2
0001CA4A 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001CA4E                            
0001CA4E                            locret_1B4CE:
0001CA4E 4E75                       		rts	
0001CA50                            ; End of function SS_RemoveCollectedItem
0001CA50                            
0001CA50                            ; ---------------------------------------------------------------------------
0001CA50                            ; Subroutine to	animate	special	stage items when you touch them
0001CA50                            ; ---------------------------------------------------------------------------
0001CA50                            
0001CA50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA50                            
0001CA50                            
0001CA50                            SS_AniItems:				; XREF: SS_ShowLayout
0001CA50 41F9 00FF 4400             		lea	($FF4400).l,a0
0001CA56 3E3C 001F                  		move.w	#$1F,d7
0001CA5A                            
0001CA5A                            loc_1B4DA:
0001CA5A 7000                       		moveq	#0,d0
0001CA5C 1010                       		move.b	(a0),d0
0001CA5E 6700                       		beq.s	loc_1B4E8
0001CA60 E548                       		lsl.w	#2,d0
0001CA62 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001CA66 4E91                       		jsr	(a1)
0001CA68                            
0001CA68                            loc_1B4E8:
0001CA68 5048                       		addq.w	#8,a0
0001CA6A                            
0001CA6A                            loc_1B4EA:
0001CA6A 51CF FFEE                  		dbf	d7,loc_1B4DA
0001CA6E                            
0001CA6E 4E75                       		rts	
0001CA70                            ; End of function SS_AniItems
0001CA70                            
0001CA70                            ; ===========================================================================
0001CA70 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001CA74 0000 0000                  		dc.l SS_AniBumper
0001CA78 0000 0000                  		dc.l SS_Ani1Up
0001CA7C 0000 0000                  		dc.l SS_AniReverse
0001CA80 0000 0000                  		dc.l SS_AniEmeraldSparks
0001CA84 0000 0000                  		dc.l SS_AniGlassBlock
0001CA88                            ; ===========================================================================
0001CA88                            
0001CA88                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001CA88 5328 0002                  		subq.b	#1,2(a0)
0001CA8C 6A00                       		bpl.s	locret_1B530
0001CA8E 117C 0005 0002             		move.b	#5,2(a0)
0001CA94 7000                       		moveq	#0,d0
0001CA96 1028 0003                  		move.b	3(a0),d0
0001CA9A 5228 0003                  		addq.b	#1,3(a0)
0001CA9E 2268 0004                  		movea.l	4(a0),a1
0001CAA2 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001CAA6 1280                       		move.b	d0,(a1)
0001CAA8 6600                       		bne.s	locret_1B530
0001CAAA 4290                       		clr.l	(a0)
0001CAAC 42A8 0004                  		clr.l	4(a0)
0001CAB0                            
0001CAB0                            locret_1B530:
0001CAB0 4E75                       		rts	
0001CAB2                            ; ===========================================================================
0001CAB2 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001CAB8                            ; ===========================================================================
0001CAB8                            
0001CAB8                            SS_AniBumper:				; XREF: SS_AniIndex
0001CAB8 5328 0002                  		subq.b	#1,2(a0)
0001CABC 6A00                       		bpl.s	locret_1B566
0001CABE 117C 0007 0002             		move.b	#7,2(a0)
0001CAC4 7000                       		moveq	#0,d0
0001CAC6 1028 0003                  		move.b	3(a0),d0
0001CACA 5228 0003                  		addq.b	#1,3(a0)
0001CACE 2268 0004                  		movea.l	4(a0),a1
0001CAD2 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001CAD6 6600                       		bne.s	loc_1B564
0001CAD8 4290                       		clr.l	(a0)
0001CADA 42A8 0004                  		clr.l	4(a0)
0001CADE 12BC 0025                  		move.b	#$25,(a1)
0001CAE2 4E75                       		rts	
0001CAE4                            ; ===========================================================================
0001CAE4                            
0001CAE4                            loc_1B564:
0001CAE4 1280                       		move.b	d0,(a1)
0001CAE6                            
0001CAE6                            locret_1B566:
0001CAE6 4E75                       		rts	
0001CAE8                            ; ===========================================================================
0001CAE8 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001CAEE                            ; ===========================================================================
0001CAEE                            
0001CAEE                            SS_Ani1Up:				; XREF: SS_AniIndex
0001CAEE 5328 0002                  		subq.b	#1,2(a0)
0001CAF2 6A00                       		bpl.s	locret_1B596
0001CAF4 117C 0005 0002             		move.b	#5,2(a0)
0001CAFA 7000                       		moveq	#0,d0
0001CAFC 1028 0003                  		move.b	3(a0),d0
0001CB00 5228 0003                  		addq.b	#1,3(a0)
0001CB04 2268 0004                  		movea.l	4(a0),a1
0001CB08 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001CB0C 1280                       		move.b	d0,(a1)
0001CB0E 6600                       		bne.s	locret_1B596
0001CB10 4290                       		clr.l	(a0)
0001CB12 42A8 0004                  		clr.l	4(a0)
0001CB16                            
0001CB16                            locret_1B596:
0001CB16 4E75                       		rts	
0001CB18                            ; ===========================================================================
0001CB18 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001CB1E                            ; ===========================================================================
0001CB1E                            
0001CB1E                            SS_AniReverse:				; XREF: SS_AniIndex
0001CB1E 5328 0002                  		subq.b	#1,2(a0)
0001CB22 6A00                       		bpl.s	locret_1B5CC
0001CB24 117C 0007 0002             		move.b	#7,2(a0)
0001CB2A 7000                       		moveq	#0,d0
0001CB2C 1028 0003                  		move.b	3(a0),d0
0001CB30 5228 0003                  		addq.b	#1,3(a0)
0001CB34 2268 0004                  		movea.l	4(a0),a1
0001CB38 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001CB3C 6600                       		bne.s	loc_1B5CA
0001CB3E 4290                       		clr.l	(a0)
0001CB40 42A8 0004                  		clr.l	4(a0)
0001CB44 12BC 002B                  		move.b	#$2B,(a1)
0001CB48 4E75                       		rts	
0001CB4A                            ; ===========================================================================
0001CB4A                            
0001CB4A                            loc_1B5CA:
0001CB4A 1280                       		move.b	d0,(a1)
0001CB4C                            
0001CB4C                            locret_1B5CC:
0001CB4C 4E75                       		rts	
0001CB4E                            ; ===========================================================================
0001CB4E 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001CB54                            ; ===========================================================================
0001CB54                            
0001CB54                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001CB54 5328 0002                  		subq.b	#1,2(a0)
0001CB58 6A00                       		bpl.s	locret_1B60C
0001CB5A 117C 0005 0002             		move.b	#5,2(a0)
0001CB60 7000                       		moveq	#0,d0
0001CB62 1028 0003                  		move.b	3(a0),d0
0001CB66 5228 0003                  		addq.b	#1,3(a0)
0001CB6A 2268 0004                  		movea.l	4(a0),a1
0001CB6E 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001CB72 1280                       		move.b	d0,(a1)
0001CB74 6600                       		bne.s	locret_1B60C
0001CB76 4290                       		clr.l	(a0)
0001CB78 42A8 0004                  		clr.l	4(a0)
0001CB7C 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001CB82 303C 00A8                  		move.w	#$A8,d0
0001CB86 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001CB8C                            
0001CB8C                            locret_1B60C:
0001CB8C 4E75                       		rts	
0001CB8E                            ; ===========================================================================
0001CB8E 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001CB94                            ; ===========================================================================
0001CB94                            
0001CB94                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001CB94 5328 0002                  		subq.b	#1,2(a0)
0001CB98 6A00                       		bpl.s	locret_1B640
0001CB9A 117C 0001 0002             		move.b	#1,2(a0)
0001CBA0 7000                       		moveq	#0,d0
0001CBA2 1028 0003                  		move.b	3(a0),d0
0001CBA6 5228 0003                  		addq.b	#1,3(a0)
0001CBAA 2268 0004                  		movea.l	4(a0),a1
0001CBAE 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001CBB2 1280                       		move.b	d0,(a1)
0001CBB4 6600                       		bne.s	locret_1B640
0001CBB6 12A8 0004                  		move.b	4(a0),(a1)
0001CBBA 4290                       		clr.l	(a0)
0001CBBC 42A8 0004                  		clr.l	4(a0)
0001CBC0                            
0001CBC0                            locret_1B640:
0001CBC0 4E75                       		rts	
0001CBC2                            ; ===========================================================================
0001CBC2 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001CBCC                            ; ---------------------------------------------------------------------------
0001CBCC                            ; Special stage	layout pointers
0001CBCC                            ; ---------------------------------------------------------------------------
0001CBCC                            SS_LayoutIndex:
0001CBCC                            	include "_inc\Special stage layout pointers.asm"
0001CBCC                            ; ---------------------------------------------------------------------------
0001CBCC                            ; Special stage	layout pointers
0001CBCC                            ; ---------------------------------------------------------------------------
0001CBCC 0000 0000                  	dc.l SS_1
0001CBD0 0000 0000                  	dc.l SS_2
0001CBD4 0000 0000                  	dc.l SS_3
0001CBD8 0000 0000                  	dc.l SS_4
0001CBDC 0000 0000                  	dc.l SS_5
0001CBE0 0000 0000                  	dc.l SS_6
0001CBE4                            	even
0001CBE4                            	even
0001CBE4                            
0001CBE4                            ; ---------------------------------------------------------------------------
0001CBE4                            ; Special stage	start locations
0001CBE4                            ; ---------------------------------------------------------------------------
0001CBE4                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001CBFC                            		even
0001CBFC                            
0001CBFC                            ; ---------------------------------------------------------------------------
0001CBFC                            ; Subroutine to	load special stage layout
0001CBFC                            ; ---------------------------------------------------------------------------
0001CBFC                            
0001CBFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CBFC                            
0001CBFC                            
0001CBFC                            SS_Load:				; XREF: SpecialStage
0001CBFC 7000                       		moveq	#0,d0
0001CBFE 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001CC02 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001CC06 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001CC0C 6500                       		bcs.s	SS_ChkEmldNum
0001CC0E 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001CC14                            
0001CC14                            SS_ChkEmldNum:
0001CC14 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001CC1A 6700                       		beq.s	SS_LoadData	; if yes, branch
0001CC1C 7200                       		moveq	#0,d1
0001CC1E 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001CC22 5301                       		subq.b	#1,d1
0001CC24 6500                       		bcs.s	SS_LoadData
0001CC26 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001CC2A                            
0001CC2A                            SS_ChkEmldLoop:	
0001CC2A B033 1000                  		cmp.b	(a3,d1.w),d0
0001CC2E 6600                       		bne.s	SS_ChkEmldRepeat
0001CC30 60CA                       		bra.s	SS_Load
0001CC32                            ; ===========================================================================
0001CC32                            
0001CC32                            SS_ChkEmldRepeat:
0001CC32 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001CC36                            
0001CC36                            SS_LoadData:
0001CC36 E548                       		lsl.w	#2,d0
0001CC38 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001CC3C 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001CC40 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001CC44 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001CC48 43F9 00FF 4000             		lea	($FF4000).l,a1
0001CC4E 303C 0000                  		move.w	#0,d0
0001CC52 4EB9 0000 1FF6             		jsr	(EniDec).l
0001CC58 43F9 00FF 0000             		lea	($FF0000).l,a1
0001CC5E 303C 0FFF                  		move.w	#$FFF,d0
0001CC62                            
0001CC62                            SS_ClrRAM3:
0001CC62 4299                       		clr.l	(a1)+
0001CC64 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001CC68                            
0001CC68 43F9 00FF 1020             		lea	($FF1020).l,a1
0001CC6E 41F9 00FF 4000             		lea	($FF4000).l,a0
0001CC74 723F                       		moveq	#$3F,d1
0001CC76                            
0001CC76                            loc_1B6F6:
0001CC76 743F                       		moveq	#$3F,d2
0001CC78                            
0001CC78                            loc_1B6F8:
0001CC78 12D8                       		move.b	(a0)+,(a1)+
0001CC7A 51CA FFFC                  		dbf	d2,loc_1B6F8
0001CC7E                            
0001CC7E 43E9 0040                  		lea	$40(a1),a1
0001CC82 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001CC86                            
0001CC86 43F9 00FF 4008             		lea	($FF4008).l,a1
0001CC8C 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001CC92 724D                       		moveq	#$4D,d1
0001CC94                            
0001CC94                            loc_1B714:
0001CC94 22D8                       		move.l	(a0)+,(a1)+
0001CC96 32FC 0000                  		move.w	#0,(a1)+
0001CC9A 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001CCA0 32D8                       		move.w	(a0)+,(a1)+
0001CCA2 51C9 FFF0                  		dbf	d1,loc_1B714
0001CCA6                            
0001CCA6 43F9 00FF 4400             		lea	($FF4400).l,a1
0001CCAC 323C 003F                  		move.w	#$3F,d1
0001CCB0                            
0001CCB0                            loc_1B730:
0001CCB0                            
0001CCB0 4299                       		clr.l	(a1)+
0001CCB2 51C9 FFFC                  		dbf	d1,loc_1B730
0001CCB6                            
0001CCB6 4E75                       		rts	
0001CCB8                            ; End of function SS_Load
0001CCB8                            
0001CCB8                            ; ===========================================================================
0001CCB8                            ; ---------------------------------------------------------------------------
0001CCB8                            ; Special stage	mappings and VRAM pointers
0001CCB8                            ; ---------------------------------------------------------------------------
0001CCB8                            SS_MapIndex:
0001CCB8                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001CCB8                            ; ---------------------------------------------------------------------------
0001CCB8                            ; Special stage	mappings and VRAM pointers
0001CCB8                            ; ---------------------------------------------------------------------------
0001CCB8 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001CCBC 0142                       	dc.w $142		; VRAM setting
0001CCBE 0000 0000                  	dc.l Map_SSWalls
0001CCC2 0142                       	dc.w $142
0001CCC4 0000 0000                  	dc.l Map_SSWalls
0001CCC8 0142                       	dc.w $142
0001CCCA 0000 0000                  	dc.l Map_SSWalls
0001CCCE 0142                       	dc.w $142
0001CCD0 0000 0000                  	dc.l Map_SSWalls
0001CCD4 0142                       	dc.w $142
0001CCD6 0000 0000                  	dc.l Map_SSWalls
0001CCDA 0142                       	dc.w $142
0001CCDC 0000 0000                  	dc.l Map_SSWalls
0001CCE0 0142                       	dc.w $142
0001CCE2 0000 0000                  	dc.l Map_SSWalls
0001CCE6 0142                       	dc.w $142
0001CCE8 0000 0000                  	dc.l Map_SSWalls
0001CCEC 0142                       	dc.w $142
0001CCEE 0000 0000                  	dc.l Map_SSWalls
0001CCF2 2142                       	dc.w $2142
0001CCF4 0000 0000                  	dc.l Map_SSWalls
0001CCF8 2142                       	dc.w $2142
0001CCFA 0000 0000                  	dc.l Map_SSWalls
0001CCFE 2142                       	dc.w $2142
0001CD00 0000 0000                  	dc.l Map_SSWalls
0001CD04 2142                       	dc.w $2142
0001CD06 0000 0000                  	dc.l Map_SSWalls
0001CD0A 2142                       	dc.w $2142
0001CD0C 0000 0000                  	dc.l Map_SSWalls
0001CD10 2142                       	dc.w $2142
0001CD12 0000 0000                  	dc.l Map_SSWalls
0001CD16 2142                       	dc.w $2142
0001CD18 0000 0000                  	dc.l Map_SSWalls
0001CD1C 2142                       	dc.w $2142
0001CD1E 0000 0000                  	dc.l Map_SSWalls
0001CD22 2142                       	dc.w $2142
0001CD24 0000 0000                  	dc.l Map_SSWalls
0001CD28 4142                       	dc.w $4142
0001CD2A 0000 0000                  	dc.l Map_SSWalls
0001CD2E 4142                       	dc.w $4142
0001CD30 0000 0000                  	dc.l Map_SSWalls
0001CD34 4142                       	dc.w $4142
0001CD36 0000 0000                  	dc.l Map_SSWalls
0001CD3A 4142                       	dc.w $4142
0001CD3C 0000 0000                  	dc.l Map_SSWalls
0001CD40 4142                       	dc.w $4142
0001CD42 0000 0000                  	dc.l Map_SSWalls
0001CD46 4142                       	dc.w $4142
0001CD48 0000 0000                  	dc.l Map_SSWalls
0001CD4C 4142                       	dc.w $4142
0001CD4E 0000 0000                  	dc.l Map_SSWalls
0001CD52 4142                       	dc.w $4142
0001CD54 0000 0000                  	dc.l Map_SSWalls
0001CD58 4142                       	dc.w $4142
0001CD5A 0000 0000                  	dc.l Map_SSWalls
0001CD5E 6142                       	dc.w $6142
0001CD60 0000 0000                  	dc.l Map_SSWalls
0001CD64 6142                       	dc.w $6142
0001CD66 0000 0000                  	dc.l Map_SSWalls
0001CD6A 6142                       	dc.w $6142
0001CD6C 0000 0000                  	dc.l Map_SSWalls
0001CD70 6142                       	dc.w $6142
0001CD72 0000 0000                  	dc.l Map_SSWalls
0001CD76 6142                       	dc.w $6142
0001CD78 0000 0000                  	dc.l Map_SSWalls
0001CD7C 6142                       	dc.w $6142
0001CD7E 0000 0000                  	dc.l Map_SSWalls
0001CD82 6142                       	dc.w $6142
0001CD84 0000 0000                  	dc.l Map_SSWalls
0001CD88 6142                       	dc.w $6142
0001CD8A 0000 0000                  	dc.l Map_SSWalls
0001CD8E 6142                       	dc.w $6142
0001CD90 0000 FC4A                  	dc.l Map_obj47
0001CD94 023B                       	dc.w $23B
0001CD96 0000 0000                  	dc.l Map_SS_R
0001CD9A 0570                       	dc.w $570
0001CD9C 0000 0000                  	dc.l Map_SS_R
0001CDA0 0251                       	dc.w $251
0001CDA2 0000 0000                  	dc.l Map_SS_R
0001CDA6 0370                       	dc.w $370
0001CDA8 0000 0000                  	dc.l Map_SS_Up
0001CDAC 0263                       	dc.w $263
0001CDAE 0000 0000                  	dc.l Map_SS_Down
0001CDB2 0263                       	dc.w $263
0001CDB4 0000 0000                  	dc.l Map_SS_R
0001CDB8 22F0                       	dc.w $22F0
0001CDBA 0000 0000                  	dc.l Map_SS_Glass
0001CDBE 0470                       	dc.w $470
0001CDC0 0000 0000                  	dc.l Map_SS_Glass
0001CDC4 05F0                       	dc.w $5F0
0001CDC6 0000 0000                  	dc.l Map_SS_Glass
0001CDCA 65F0                       	dc.w $65F0
0001CDCC 0000 0000                  	dc.l Map_SS_Glass
0001CDD0 25F0                       	dc.w $25F0
0001CDD2 0000 0000                  	dc.l Map_SS_Glass
0001CDD6 45F0                       	dc.w $45F0
0001CDD8 0000 0000                  	dc.l Map_SS_R
0001CDDC 02F0                       	dc.w $2F0
0001CDDE 0100 FC4A                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001CDE2 023B                       	dc.w $23B
0001CDE4 0200 FC4A                  	dc.l Map_obj47+$2000000
0001CDE8 023B                       	dc.w $23B
0001CDEA 0000 0000                  	dc.l Map_SS_R
0001CDEE 0797                       	dc.w $797
0001CDF0 0000 0000                  	dc.l Map_SS_R
0001CDF4 07A0                       	dc.w $7A0
0001CDF6 0000 0000                  	dc.l Map_SS_R
0001CDFA 07A9                       	dc.w $7A9
0001CDFC 0000 0000                  	dc.l Map_SS_R
0001CE00 0797                       	dc.w $797
0001CE02 0000 0000                  	dc.l Map_SS_R
0001CE06 07A0                       	dc.w $7A0
0001CE08 0000 0000                  	dc.l Map_SS_R
0001CE0C 07A9                       	dc.w $7A9
0001CE0E 0000 AF42                  	dc.l Map_obj25
0001CE12 27B2                       	dc.w $27B2
0001CE14 0000 0000                  	dc.l Map_SS_Chaos3
0001CE18 0770                       	dc.w $770
0001CE1A 0000 0000                  	dc.l Map_SS_Chaos3
0001CE1E 2770                       	dc.w $2770
0001CE20 0000 0000                  	dc.l Map_SS_Chaos3
0001CE24 4770                       	dc.w $4770
0001CE26 0000 0000                  	dc.l Map_SS_Chaos3
0001CE2A 6770                       	dc.w $6770
0001CE2C 0000 0000                  	dc.l Map_SS_Chaos1
0001CE30 0770                       	dc.w $770
0001CE32 0000 0000                  	dc.l Map_SS_Chaos2
0001CE36 0770                       	dc.w $770
0001CE38 0000 0000                  	dc.l Map_SS_R
0001CE3C 04F0                       	dc.w $4F0
0001CE3E 0400 AF42                  	dc.l Map_obj25+$4000000
0001CE42 27B2                       	dc.w $27B2
0001CE44 0500 AF42                  	dc.l Map_obj25+$5000000
0001CE48 27B2                       	dc.w $27B2
0001CE4A 0600 AF42                  	dc.l Map_obj25+$6000000
0001CE4E 27B2                       	dc.w $27B2
0001CE50 0700 AF42                  	dc.l Map_obj25+$7000000
0001CE54 27B2                       	dc.w $27B2
0001CE56 0000 0000                  	dc.l Map_SS_Glass
0001CE5A 23F0                       	dc.w $23F0
0001CE5C 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001CE60 23F0                       	dc.w $23F0
0001CE62 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001CE66 23F0                       	dc.w $23F0
0001CE68 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001CE6C 23F0                       	dc.w $23F0
0001CE6E 0000 0000                  	dc.l Map_SS_R+$2000000
0001CE72 04F0                       	dc.w $4F0
0001CE74 0000 0000                  	dc.l Map_SS_Glass
0001CE78 05F0                       	dc.w $5F0
0001CE7A 0000 0000                  	dc.l Map_SS_Glass
0001CE7E 65F0                       	dc.w $65F0
0001CE80 0000 0000                  	dc.l Map_SS_Glass
0001CE84 25F0                       	dc.w $25F0
0001CE86 0000 0000                  	dc.l Map_SS_Glass
0001CE8A 45F0                       	dc.w $45F0
0001CE8A 45F0                       	dc.w $45F0
0001CE8C                            
0001CE8C                            ; ---------------------------------------------------------------------------
0001CE8C                            ; Sprite mappings - special stage "R" block
0001CE8C                            ; ---------------------------------------------------------------------------
0001CE8C                            Map_SS_R:
0001CE8C                            	include "_maps\SSRblock.asm"
0001CE8C                            ; ---------------------------------------------------------------------------
0001CE8C                            ; Sprite mappings - special stage "R" block
0001CE8C                            ; ---------------------------------------------------------------------------
0001CE8C 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001CE90 0000                       		dc.w byte_1B91E-Map_SS_R
0001CE92 01                         byte_1B912:	dc.b 1
0001CE93 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001CE98 01                         byte_1B918:	dc.b 1
0001CE99 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001CE9E 00                         byte_1B91E:	dc.b 0
0001CEA0 00                         		even
0001CEA0 00                         		even
0001CEA0                            
0001CEA0                            ; ---------------------------------------------------------------------------
0001CEA0                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001CEA0                            ; ---------------------------------------------------------------------------
0001CEA0                            Map_SS_Glass:
0001CEA0                            	include "_maps\SSglassblock.asm"
0001CEA0                            ; ---------------------------------------------------------------------------
0001CEA0                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001CEA0                            ; ---------------------------------------------------------------------------
0001CEA0 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001CEA4 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001CEA8 01                         byte_1B928:	dc.b 1
0001CEA9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001CEAE 01                         byte_1B92E:	dc.b 1
0001CEAF F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001CEB4 01                         byte_1B934:	dc.b 1
0001CEB5 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001CEBA 01                         byte_1B93A:	dc.b 1
0001CEBB F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001CEC0                            		even
0001CEC0                            		even
0001CEC0                            
0001CEC0                            ; ---------------------------------------------------------------------------
0001CEC0                            ; Sprite mappings - special stage "UP" block
0001CEC0                            ; ---------------------------------------------------------------------------
0001CEC0                            Map_SS_Up:
0001CEC0                            	include "_maps\SSUPblock.asm"
0001CEC0                            ; ---------------------------------------------------------------------------
0001CEC0                            ; Sprite mappings - special stage "UP" block
0001CEC0                            ; ---------------------------------------------------------------------------
0001CEC0 0000                       		dc.w byte_1B944-Map_SS_Up
0001CEC2 0000                       		dc.w byte_1B94A-Map_SS_Up
0001CEC4 01                         byte_1B944:	dc.b 1
0001CEC5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001CECA 01                         byte_1B94A:	dc.b 1
0001CECB F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001CED0                            		even
0001CED0                            		even
0001CED0                            
0001CED0                            ; ---------------------------------------------------------------------------
0001CED0                            ; Sprite mappings - special stage "DOWN" block
0001CED0                            ; ---------------------------------------------------------------------------
0001CED0                            Map_SS_Down:
0001CED0                            	include "_maps\SSDOWNblock.asm"
0001CED0                            ; ---------------------------------------------------------------------------
0001CED0                            ; Sprite mappings - special stage "DOWN" block
0001CED0                            ; ---------------------------------------------------------------------------
0001CED0 0000                       		dc.w byte_1B954-Map_SS_Down
0001CED2 0000                       		dc.w byte_1B95A-Map_SS_Down
0001CED4 01                         byte_1B954:	dc.b 1
0001CED5 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001CEDA 01                         byte_1B95A:	dc.b 1
0001CEDB F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001CEE0                            		even
0001CEE0                            		even
0001CEE0                            
0001CEE0                            ; ---------------------------------------------------------------------------
0001CEE0                            ; Sprite mappings - special stage chaos	emeralds
0001CEE0                            ; ---------------------------------------------------------------------------
0001CEE0 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001CEE2 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001CEE4 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001CEE6 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001CEE8 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001CEEA 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001CEEC 01                         byte_1B96C:	dc.b 1
0001CEED F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001CEF2 01                         byte_1B972:	dc.b 1
0001CEF3 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001CEF8 01                         byte_1B978:	dc.b 1
0001CEF9 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001CEFE 01                         byte_1B97E:	dc.b 1
0001CEFF F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001CF04                            		even
0001CF04                            ; ===========================================================================
0001CF04                            ; ---------------------------------------------------------------------------
0001CF04                            ; Object 09 - Sonic (special stage)
0001CF04                            ; ---------------------------------------------------------------------------
0001CF04                            
0001CF04                            Obj09:					; XREF: Obj_Index
0001CF04                            ;		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001CF04                            ;		beq.s	Obj09_Normal	; if not, branch
0001CF04 6100 0000                  		bsr.w	SS_FixCamera
0001CF08                            ;		bra.w	DebugMode
0001CF08                            ; ===========================================================================
0001CF08                            
0001CF08                            Obj09_Normal:
0001CF08 7000                       		moveq	#0,d0
0001CF0A 1028 0024                  		move.b	$24(a0),d0
0001CF0E 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001CF12 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001CF16                            ; ===========================================================================
0001CF16 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001CF18 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001CF1A 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001CF1C 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001CF1E                            ; ===========================================================================
0001CF1E                            
0001CF1E                            Obj09_Main:				; XREF: Obj09_Index
0001CF1E 5428 0024                  		addq.b	#2,$24(a0)
0001CF22 117C 000E 0016             		move.b	#$E,$16(a0)
0001CF28 117C 0007 0017             		move.b	#7,$17(a0)
0001CF2E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001CF36 317C 0780 0002             		move.w	#$780,2(a0)
0001CF3C 117C 0004 0001             		move.b	#4,1(a0)
0001CF42 117C 0000 0018             		move.b	#0,$18(a0)
0001CF48 117C 0002 001C             		move.b	#2,$1C(a0)
0001CF4E 08E8 0002 0022             		bset	#2,$22(a0)
0001CF54 08E8 0001 0022             		bset	#1,$22(a0)
0001CF5A                            
0001CF5A                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001CF5A                            ;		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001CF5A                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001CF5A                            ;		btst	#4,($FFFFF605).w ; is button B pressed?
0001CF5A                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001CF5A                            ;		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001CF5A                            
0001CF5A                            Obj09_NoDebug:
0001CF5A 117C 0000 0030             		move.b	#0,$30(a0)
0001CF60 7000                       		moveq	#0,d0
0001CF62 1028 0022                  		move.b	$22(a0),d0
0001CF66 0240 0002                  		andi.w	#2,d0
0001CF6A 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001CF6E 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001CF72 4EB9 0001 4EBE             		jsr	LoadSonicDynPLC
0001CF78 4EF9 0000 E756             		jmp	DisplaySprite
0001CF7E                            ; ===========================================================================
0001CF7E 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001CF80 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001CF82                            ; ===========================================================================
0001CF82                            
0001CF82                            Obj09_OnWall:				; XREF: Obj09_Modes
0001CF82 6100 0000                  		bsr.w	Obj09_Rise
0001CF86 6100 0000                  		bsr.w	Obj09_Move
0001CF8A 6100 0000                  		bsr.w	Obj09_Fall
0001CF8E 6000                       		bra.s	Obj09_Display
0001CF90                            ; ===========================================================================
0001CF90                            
0001CF90                            Obj09_InAir:				; XREF: Obj09_Modes
0001CF90 6100 0000                  		bsr.w	Obj09_Rise
0001CF94 6100 0000                  		bsr.w	Obj09_Move
0001CF98 6100 0000                  		bsr.w	Obj09_Fall
0001CF9C                            
0001CF9C                            Obj09_Display:				; XREF: Obj09_OnWall
0001CF9C 6100 0000                  		bsr.w	Obj09_ChkItems
0001CFA0 6100 0000                  		bsr.w	Obj09_ChkItems2
0001CFA4 4EB9 0000 E730             		jsr	SpeedToPos
0001CFAA 6100 0000                  		bsr.w	SS_FixCamera
0001CFAE 3038 F780                  		move.w	($FFFFF780).w,d0
0001CFB2 D078 F782                  		add.w	($FFFFF782).w,d0
0001CFB6 31C0 F780                  		move.w	d0,($FFFFF780).w
0001CFBA 4EB9 0001 4C18             		jsr	Sonic_Animate
0001CFC0 4E75                       		rts	
0001CFC2                            
0001CFC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFC2                            
0001CFC2                            
0001CFC2                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001CFC2 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001CFC8 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001CFCA 4A78 F784                          tst.w   ($FFFFF784).w
0001CFCE 6600                               bne.s   @corereverse1
0001CFD0 6100 0000                  		bsr.w	Obj09_MoveLeft
0001CFD4 6000                               bra.s   Obj09_ChkRight          
0001CFD6                            
0001CFD6                            @corereverse1:
0001CFD6 6100 0000                          bsr.w	Obj09_MoveRight
0001CFDA                            
0001CFDA                            Obj09_ChkRight:
0001CFDA 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001CFE0 6700                       		beq.s	Obj09_MoveSpeed	; if not, branch
0001CFE2 4A78 F784                          tst.w   ($FFFFF784).w
0001CFE6 6600                               bne.s   @corereverse2
0001CFE8 6100 0000                  		bsr.w	Obj09_MoveRight
0001CFEC 6000                               bra.s   Obj09_MoveSpeed 
0001CFEE                            
0001CFEE                            @corereverse2:
0001CFEE 6100 0000                  		bsr.w	Obj09_MoveLeft			;	branch to right movement subroutine
0001CFF2                            
0001CFF2                            Obj09_MoveSpeed:
0001CFF2 1038 F602                  		move.b	($FFFFF602).w,d0
0001CFF6 0200 000C                  		andi.b	#$C,d0
0001CFFA 6600                       		bne.s	Obj09_MoveCollision
0001CFFC 3028 0010                  		move.w	$10(a0),d0
0001D000 6700                       		beq.s	Obj09_MoveCollision
0001D002 317C 0000 0010             		move.w	#0,$10(a0)
0001D008                            
0001D008                            Obj09_MoveCollision:
0001D008 1038 F780                  		move.b	($FFFFF780).w,d0
0001D00C 0600 0020                  		addi.b	#$20,d0
0001D010 0200 00C0                  		andi.b	#$C0,d0
0001D014 4400                       		neg.b	d0
0001D016 4EB9 0000 3416             		jsr	(CalcSine).l
0001D01C C3E8 0010                  		muls.w	$10(a0),d1
0001D020 D3A8 0008                  		add.l	d1,8(a0)
0001D024 C1E8 0012                  		muls.w	$12(a0),d0
0001D028 D1A8 000C                  		add.l	d0,$C(a0)
0001D02C 48E7 C000                  		movem.l	d0-d1,-(sp)
0001D030 2428 000C                  		move.l	$C(a0),d2
0001D034 2628 0008                  		move.l	8(a0),d3
0001D038 6100 0000                  		bsr.w	sub_1BCE8
0001D03C 6700                       		beq.s	loc_1BAF2
0001D03E 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001D042 93A8 0008                  		sub.l	d1,8(a0)
0001D046 91A8 000C                  		sub.l	d0,$C(a0)
0001D04A 317C 0000 0010             		move.w	#0,$10(a0)
0001D050 4E75                       		rts	
0001D052                            ; ===========================================================================
0001D052                            
0001D052                            loc_1BAF2:
0001D052 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001D056 4E75                       		rts	
0001D058                            ; End of function Obj09_Move
0001D058                            
0001D058                            
0001D058                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D058                            
0001D058                            
0001D058                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001D058 08E8 0000 0022             		bset	#0,$22(a0)
0001D05E 4240                               clr.w   d0
0001D060 3038 F786                          move.w  ($FFFFF786).w,d0
0001D064 D040                               add.w   d0,d0
0001D066 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001D06C 4468 0010                          neg.w   $10(a0)
0001D070 4E75                               rts
0001D072                            
0001D072                            ; End of function Obj09_MoveLeft
0001D072                            
0001D072                            
0001D072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D072                            
0001D072                            
0001D072                            Obj09_MoveRight:
0001D072 08A8 0000 0022             		bclr	#0,$22(a0)
0001D078 4240                               clr.w   d0
0001D07A 3038 F786                          move.w  ($FFFFF786).w,d0
0001D07E D040                               add.w   d0,d0
0001D080 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001D086 4E75                       		rts
0001D088                            
0001D088                            ; End of function Obj09_MoveRight
0001D088                            
0001D088                            ; ---------------------------------------------------------------------------
0001D088                            
0001D088                            SS_XSpdIndex:
0001D088 0032                       		dc.w 50
0001D08A 0064                       		dc.w 100
0001D08C 0096                       		dc.w 150
0001D08E 00C8                       		dc.w 200
0001D090 00FA                       		dc.w 250
0001D092                            
0001D092                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D092                            
0001D092                            
0001D092                            Obj09_Rise:				; XREF: Obj09_OnWall
0001D092 0838 0000 F602             		btst	#0,($FFFFF602).w
0001D098 6700                       		beq.s	Obj09_NoRise	; if not, branch
0001D09A 4A78 F784                          tst.w   ($FFFFF784).w
0001D09E 6600 0000                          bne.w   @corereverse1
0001D0A2 6100 0000                  		bsr.w	Obj09_MoveUp
0001D0A6 6000                               bra.s   Obj09_NoRise
0001D0A8                            
0001D0A8                            @corereverse1:
0001D0A8 6100 0000                  		bsr.w	Obj09_Falling 
0001D0AC                                    
0001D0AC                            Obj09_NoRise:
0001D0AC 0838 0001 F602             		btst	#1,($FFFFF602).w	;	is Dn Pressed?
0001D0B2 6700                       		beq.s	Obj09_MoveYSpeed		;	
0001D0B4 4A78 F784                          tst.w   ($FFFFF784).w
0001D0B8 6600 0000                          bne.w   @corereverse2
0001D0BC 6100 0000                  		bsr.w	Obj09_Falling			;	
0001D0C0 6000                               bra.s   Obj09_MoveYSpeed
0001D0C2                            
0001D0C2                            @corereverse2:
0001D0C2 6100 0000                  		bsr.w	Obj09_MoveUp
0001D0C6                            		
0001D0C6                            Obj09_MoveYSpeed:
0001D0C6 1038 F602                  		move.b	($FFFFF602).w,d0
0001D0CA 0200 0003                  		andi.b	#3,d0
0001D0CE 6600                       		bne.s	Obj09_MoveYCollision
0001D0D0 3028 0012                  		move.w	$12(a0),d0
0001D0D4 6700                       		beq.s	Obj09_MoveYCollision
0001D0D6 317C 0000 0012             		move.w	#0,$12(a0)
0001D0DC                            
0001D0DC                            Obj09_MoveYCollision:		;	CODE TO CHECK STAGE COLLISION ON X-AXIS
0001D0DC 1038 F780                  		move.b	($FFFFF780).w,d0		;	check the Special Stage Angle
0001D0E0 0600 0020                  		addi.b	#$20,d0					;	?
0001D0E4 0200 00C0                  		andi.b	#$C0,d0					;	
0001D0E8 4400                       		neg.b	d0						;	?
0001D0EA 4EB9 0000 3416             		jsr	(CalcSine).l				;	load speed trajectory algorithms
0001D0F0 C3E8 0010                  		muls.w	$10(a0),d1			;	calculate x-speed trajectory
0001D0F4 D3A8 0008                  		add.l	d1,8(a0)				;	calculate Sonic's next x position
0001D0F8 C1E8 0012                  		muls.w	$12(a0),d0			;	calculate y-speed trajectory
0001D0FC D1A8 000C                  		add.l	d0,$C(a0)				;	calculate Sonic's next y position
0001D100 48E7 C000                  		movem.l	d0-d1,-(sp)				;	save trajectory values
0001D104 2428 000C                  		move.l	$C(a0),d2				;	move sonic's next y-position into d2
0001D108 2628 0008                  		move.l	8(a0),d3				;	move sonic's next x-position into d3
0001D10C 6100 0000                  		bsr.w	sub_1BCE8				;	branch to the collision detection routine
0001D110 6700 FF40                  		beq.w	loc_1BAF2				;	if Sonic's not colliding with anything branch
0001D114 4CDF 0003                  		movem.l	(sp)+,d0-d1				;	remove x and y speed trajectory from the stack
0001D118 93A8 0008                  		sub.l	d1,8(a0)				;	cancel out Sonic's next x-position
0001D11C 91A8 000C                  		sub.l	d0,$C(a0)				;	cancel out Sonic's next y-position
0001D120 317C 0000 0012             		move.w	#0,$12(a0)           ;	Make Sonic Stop
0001D126 4E75                       		rts								;	end routine
0001D128                            
0001D128                            Obj09_MoveUp:
0001D128 4240                               clr.w   d0
0001D12A 3038 F786                          move.w  ($FFFFF786).w,d0
0001D12E D040                               add.w   d0,d0
0001D130 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001D136 4468 0012                          neg.w   $12(a0)
0001D13A 4E75                               rts
0001D13C                            
0001D13C                            Obj09_Falling:
0001D13C 4240                               clr.w   d0
0001D13E 3038 F786                          move.w  ($FFFFF786).w,d0
0001D142 D040                               add.w   d0,d0
0001D144 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001D14A 4E75                       		rts
0001D14C                            ; End of function Obj09_Jump
0001D14C                            
0001D14C                            ; ---------------------------------------------------------------------------
0001D14C                            SS_YSpdIndex:
0001D14C 0080                       		dc.w $80
0001D14E 0100                       		dc.w $100
0001D150 0180                       		dc.w $180
0001D152 0200                       		dc.w $200
0001D154 0280                       		dc.w $280
0001D156                            
0001D156                            
0001D156                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D156                            
0001D156                            
0001D156                            nullsub_2:				; XREF: Obj09_InAir
0001D156 4E75                       		rts	
0001D158                            ; End of function nullsub_2
0001D158                            
0001D158                            ; ===========================================================================
0001D158                            ; ---------------------------------------------------------------------------
0001D158                            ; unused subroutine to limit Sonic's upward vertical speed
0001D158                            ; ---------------------------------------------------------------------------
0001D158 323C FC00                  		move.w	#-$400,d1
0001D15C B268 0012                  		cmp.w	$12(a0),d1
0001D160 6F00                       		ble.s	locret_1BBB4
0001D162 1038 F602                  		move.b	($FFFFF602).w,d0
0001D166 0200 0070                  		andi.b	#$70,d0
0001D16A 6600                       		bne.s	locret_1BBB4
0001D16C 3141 0012                  		move.w	d1,$12(a0)
0001D170                            
0001D170                            locret_1BBB4:
0001D170 4E75                       		rts	
0001D172                            ; ---------------------------------------------------------------------------
0001D172                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001D172                            ; ---------------------------------------------------------------------------
0001D172                            
0001D172                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D172                            
0001D172                            
0001D172                            SS_FixCamera:				; XREF: Obj09
0001D172 3428 000C                  		move.w	$C(a0),d2
0001D176 3628 0008                  		move.w	8(a0),d3
0001D17A 3038 F700                  		move.w	($FFFFF700).w,d0
0001D17E 0443 00A0                  		subi.w	#$A0,d3
0001D182 6500                       		bcs.s	loc_1BBCE
0001D184 9043                       		sub.w	d3,d0
0001D186 9178 F700                  		sub.w	d0,($FFFFF700).w
0001D18A                            
0001D18A                            loc_1BBCE:
0001D18A 3038 F704                  		move.w	($FFFFF704).w,d0
0001D18E 0442 0070                  		subi.w	#$70,d2
0001D192 6500                       		bcs.s	locret_1BBDE
0001D194 9042                       		sub.w	d2,d0
0001D196 9178 F704                  		sub.w	d0,($FFFFF704).w
0001D19A                            
0001D19A                            locret_1BBDE:
0001D19A 4E75                       		rts	
0001D19C                            ; End of function SS_FixCamera
0001D19C                            
0001D19C                            ; ===========================================================================
0001D19C                            
0001D19C                            Obj09_ExitStage:			; XREF: Obj09_Index
0001D19C 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001D1A2 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001D1A8 6600                       		bne.s	loc_1BBF4
0001D1AA 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001D1B0                            
0001D1B0                            loc_1BBF4:
0001D1B0 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001D1B6 6D00                       		blt.s	loc_1BC12
0001D1B8 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001D1BE                            ;		move.w	#$4000,($FFFFF780).w
0001D1BE 5428 0024                  		addq.b	#2,$24(a0)
0001D1C2 317C 003C 0038             		move.w	#$3C,$38(a0)
0001D1C8                            
0001D1C8                            loc_1BC12:
0001D1C8                            ;		move.w	($FFFFF780).w,d0
0001D1C8                            ;		add.w	($FFFFF782).w,d0
0001D1C8                            ;		move.w	d0,($FFFFF780).w
0001D1C8 4EB9 0001 4C18             		jsr	Sonic_Animate
0001D1CE 4EB9 0001 4EBE             		jsr	LoadSonicDynPLC
0001D1D4 6100 FF9C                  		bsr.w	SS_FixCamera
0001D1D8 4EF9 0000 E756             		jmp	DisplaySprite
0001D1DE                            ; ===========================================================================
0001D1DE                            
0001D1DE                            Obj09_Exit2:				; XREF: Obj09_Index
0001D1DE 5368 0038                  		subq.w	#1,$38(a0)
0001D1E2 6600                       		bne.s	loc_1BC40
0001D1E4 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001D1EA                            
0001D1EA                            loc_1BC40:
0001D1EA 4EB9 0001 4C18             		jsr	Sonic_Animate
0001D1F0 4EB9 0001 4EBE             		jsr	LoadSonicDynPLC
0001D1F6 6100 FF7A                  		bsr.w	SS_FixCamera
0001D1FA 4EF9 0000 E756             		jmp	DisplaySprite
0001D200                            
0001D200                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D200                            
0001D200                            
0001D200                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001D200 2428 000C                  		move.l	$C(a0),d2
0001D204 2628 0008                  		move.l	8(a0),d3
0001D208 1038 F780                  		move.b	($FFFFF780).w,d0
0001D20C 0200 00FC                  		andi.b	#$FC,d0
0001D210 4EB9 0000 3416             		jsr	(CalcSine).l
0001D216 3828 0010                  		move.w	$10(a0),d4
0001D21A 48C4                       		ext.l	d4
0001D21C E184                       		asl.l	#8,d4
0001D21E C1FC 002A                  		muls.w	#$2A,d0
0001D222 D084                       		add.l	d4,d0
0001D224 3828 0012                  		move.w	$12(a0),d4
0001D228 48C4                       		ext.l	d4
0001D22A E184                       		asl.l	#8,d4
0001D22C C3FC 002A                  		muls.w	#$2A,d1
0001D230 D284                       		add.l	d4,d1
0001D232 7A00                       		moveq	#0,d5
0001D234 3A28 0010                  		move.w	$10(a0),d5
0001D238 6700                       		beq.s	Obj09_NoXFall
0001D23A D680                       		add.l	d0,d3
0001D23C 6100 0000                  		bsr.w	sub_1BCE8
0001D240 6700                       		beq.s	loc_1BCB0
0001D242 9680                       		sub.l	d0,d3
0001D244 7000                       		moveq	#0,d0
0001D246 3140 0010                  		move.w	d0,$10(a0)
0001D24A 08A8 0001 0022             		bclr	#1,$22(a0)
0001D250                            
0001D250                            Obj09_NoXFall
0001D250 7C00                       		moveq	#0,d6
0001D252 3C28 0012                  		move.w	$12(a0),d6
0001D256 6700                       		beq.s	Obj09_NoYFall
0001D258 D481                       		add.l	d1,d2
0001D25A 6100 0000                  		bsr.w	sub_1BCE8
0001D25E 6700                       		beq.s	loc_1BCC6
0001D260 9481                       		sub.l	d1,d2
0001D262 7200                       		moveq	#0,d1
0001D264 3141 0012                  		move.w	d1,$12(a0)
0001D268 4E75                       		rts	
0001D26A                            ; ===========================================================================
0001D26A                            
0001D26A                            loc_1BCB0:
0001D26A 7C00                       		moveq	#0,d6
0001D26C 3C28 0012                  		move.w	$12(a0),d6
0001D270 6700                       		beq.s	Obj09_NoYFall
0001D272 D481                       		add.l	d1,d2
0001D274 6100 0000                  		bsr.w	sub_1BCE8
0001D278 6700                       		beq.s	loc_1BCD4
0001D27A 9481                       		sub.l	d1,d2
0001D27C 7200                       		moveq	#0,d1
0001D27E 3141 0012                  		move.w	d1,$12(a0)
0001D282 08A8 0001 0022             		bclr	#1,$22(a0)
0001D288                            
0001D288                            loc_1BCC6:
0001D288 E080                       		asr.l	#8,d0
0001D28A E081                       		asr.l	#8,d1
0001D28C 3140 0010                  		move.w	d0,$10(a0)
0001D290 3141 0012                  		move.w	d1,$12(a0)
0001D294 4E75                       		rts	
0001D296                            ; ===========================================================================
0001D296                            
0001D296                            loc_1BCD4:
0001D296 E080                       		asr.l	#8,d0
0001D298 E081                       		asr.l	#8,d1
0001D29A 3140 0010                  		move.w	d0,$10(a0)
0001D29E 3141 0012                  		move.w	d1,$12(a0)
0001D2A2 08E8 0001 0022             		bset	#1,$22(a0)
0001D2A8 4E75                       		rts	
0001D2AA                            
0001D2AA                            Obj09_NoYFall:
0001D2AA 4E75                       		rts
0001D2AC                            ; End of function Obj09_Fall
0001D2AC                            
0001D2AC                            
0001D2AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2AC                            
0001D2AC                            
0001D2AC                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001D2AC 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D2B2 7800                       		moveq	#0,d4
0001D2B4 4842                       		swap	d2
0001D2B6 3802                       		move.w	d2,d4
0001D2B8 4842                       		swap	d2
0001D2BA 0644 0044                  		addi.w	#$44,d4
0001D2BE 88FC 0018                  		divu.w	#$18,d4
0001D2C2 C8FC 0080                  		mulu.w	#$80,d4
0001D2C6 D3C4                       		adda.l	d4,a1
0001D2C8 7800                       		moveq	#0,d4
0001D2CA 4843                       		swap	d3
0001D2CC 3803                       		move.w	d3,d4
0001D2CE 4843                       		swap	d3
0001D2D0 0644 0014                  		addi.w	#$14,d4
0001D2D4 88FC 0018                  		divu.w	#$18,d4
0001D2D8 D2C4                       		adda.w	d4,a1
0001D2DA 7A00                       		moveq	#0,d5
0001D2DC 1819                       		move.b	(a1)+,d4
0001D2DE 6100                       		bsr.s	sub_1BD30
0001D2E0 1819                       		move.b	(a1)+,d4
0001D2E2 6100                       		bsr.s	sub_1BD30
0001D2E4 D2FC 007E                  		adda.w	#$7E,a1
0001D2E8 1819                       		move.b	(a1)+,d4
0001D2EA 6100                       		bsr.s	sub_1BD30
0001D2EC 1819                       		move.b	(a1)+,d4
0001D2EE 6100                       		bsr.s	sub_1BD30
0001D2F0 4A05                       		tst.b	d5
0001D2F2 4E75                       		rts	
0001D2F4                            ; End of function sub_1BCE8
0001D2F4                            
0001D2F4                            
0001D2F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2F4                            
0001D2F4                            
0001D2F4                            sub_1BD30:				; XREF: sub_1BCE8
0001D2F4 6700                       		beq.s	locret_1BD44
0001D2F6 0C04 0028                  		cmpi.b	#$28,d4
0001D2FA 6500                       		blo.s	loc_1BD46
0001D2FC 0C04 004B                  		cmpi.b	#$4B,d4
0001D300 6400                       		bhs.s	loc_1BD46
0001D302 0C04 003A                  		cmpi.b	#$3A,d4
0001D306 6400                       		bhs.s	locret_1BD44
0001D308 0C04 002C                  		cmpi.b	#$2C,d4
0001D30C 6400                       		bhs.s	loc_1BD46
0001D30E                            
0001D30E                            locret_1BD44:
0001D30E 4E75                       		rts	
0001D310                            ; ===========================================================================
0001D310                            
0001D310                            loc_1BD46:
0001D310 1144 0030                  		move.b	d4,$30(a0)
0001D314 2149 0032                  		move.l	a1,$32(a0)
0001D318 7AFF                       		moveq	#-1,d5
0001D31A 4E75                       		rts	
0001D31C                            ; End of function sub_1BD30
0001D31C                            
0001D31C                            
0001D31C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D31C                            
0001D31C                            
0001D31C                            Obj09_ChkItems:				; XREF: Obj09_Display
0001D31C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D322 7800                       		moveq	#0,d4
0001D324 3828 000C                  		move.w	$C(a0),d4
0001D328 0644 0050                  		addi.w	#$50,d4
0001D32C 88FC 0018                  		divu.w	#$18,d4
0001D330 C8FC 0080                  		mulu.w	#$80,d4
0001D334 D3C4                       		adda.l	d4,a1
0001D336 7800                       		moveq	#0,d4
0001D338 3828 0008                  		move.w	8(a0),d4
0001D33C 0644 0020                  		addi.w	#$20,d4
0001D340 88FC 0018                  		divu.w	#$18,d4
0001D344 D2C4                       		adda.w	d4,a1
0001D346 1811                       		move.b	(a1),d4
0001D348 6600                       		bne.s	Obj09_ChkCont
0001D34A 4A28 003A                  		tst.b	$3A(a0)
0001D34E 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001D352 7800                       		moveq	#0,d4
0001D354 4E75                       		rts	
0001D356                            ; ===========================================================================
0001D356                            
0001D356                            Obj09_ChkCont:
0001D356 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001D35A 6600                       		bne.s	Obj09_Chk1Up
0001D35C 6100 F6DC                  		bsr.w	SS_RemoveCollectedItem
0001D360 6600                       		bne.s	Obj09_GetCont
0001D362 14BC 0001                  		move.b	#1,(a2)
0001D366 2549 0004                  		move.l	a1,4(a2)
0001D36A                            
0001D36A                            Obj09_GetCont:
0001D36A 4EB9 0000 AC34             		jsr	CollectRing
0001D370 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001D376 6500                       		bcs.s	Obj09_NoCont
0001D378 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001D37E 6600                       		bne.s	Obj09_NoCont
0001D380 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001D384 303C 00BF                  		move.w	#$BF,d0
0001D388 4EB9 0000 1C74             		jsr	(PlaySound).l	; play extra continue sound
0001D38E                            
0001D38E                            Obj09_NoCont:
0001D38E 7800                       		moveq	#0,d4
0001D390 4E75                       		rts	
0001D392                            ; ===========================================================================
0001D392                            
0001D392                            Obj09_Chk1Up:
0001D392 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001D396 6600                       		bne.s	Obj09_ChkEmer
0001D398 6100 F6A0                  		bsr.w	SS_RemoveCollectedItem
0001D39C 6600                       		bne.s	Obj09_Get1Up
0001D39E 14BC 0003                  		move.b	#3,(a2)
0001D3A2 2549 0004                  		move.l	a1,4(a2)
0001D3A6                            
0001D3A6                            Obj09_Get1Up:
0001D3A6 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001D3AA 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001D3AE 303C 0088                  		move.w	#$88,d0
0001D3B2 4EB9 0000 1C74             		jsr	(PlaySound).l	; play extra life music
0001D3B8 7800                       		moveq	#0,d4
0001D3BA 4E75                       		rts	
0001D3BC                            ; ===========================================================================
0001D3BC                            
0001D3BC                            Obj09_ChkEmer:
0001D3BC 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001D3C0 6500                       		bcs.s	Obj09_UPblock
0001D3C2 0C04 0040                  		cmpi.b	#$40,d4
0001D3C6 6200                       		bhi.s	Obj09_UPblock
0001D3C8 6100 F670                  		bsr.w	SS_RemoveCollectedItem
0001D3CC 6600                       		bne.s	Obj09_GetEmer
0001D3CE 14BC 0005                  		move.b	#5,(a2)
0001D3D2 2549 0004                  		move.l	a1,4(a2)
0001D3D6                            
0001D3D6                            Obj09_GetEmer:
0001D3D6 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001D3DC 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001D3DE 0404 003B                  		subi.b	#$3B,d4
0001D3E2 7000                       		moveq	#0,d0
0001D3E4 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001D3E8 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001D3EC 1584 0000                  		move.b	d4,(a2,d0.w)
0001D3F0 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001D3F4                            
0001D3F4                            Obj09_NoEmer:
0001D3F4 303C 0093                  		move.w	#$93,d0
0001D3F8 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play emerald music
0001D3FE 7800                       		moveq	#0,d4
0001D400 4E75                       		rts	
0001D402                            
0001D402                            ; ===========================================================================
0001D402                            
0001D402                            Obj09_UPblock:
0001D402 0C04 0029                  		cmpi.b	#$29,d4		; is the item an "UP" block?
0001D406 6600                       		bne.s	Obj09_DOWNblock
0001D408 6100 F630                  		bsr.w	SS_RemoveCollectedItem
0001D40C 6600                       		bne.s	Obj09_SpeedUp
0001D40E 14BC 0001                  		move.b	#1,(a2)
0001D412 2549 0004                  		move.l	a1,4(a2)
0001D416                            
0001D416                            Obj09_SpeedUp:
0001D416 0C78 0004 F786             		cmpi.w	#4,($FFFFF786).w
0001D41C 6400                       		bhs.s	Obj09_UPsnd
0001D41E 5278 F786                  		addi.w	#1,($FFFFF786).w	; increase stage rotation speed
0001D422                            
0001D422                            Obj09_UPsnd:
0001D422 303C 00A9                  		move.w	#$A9,d0
0001D426 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l	; play up/down sound
0001D42C 7800                       		moveq	#0,d4
0001D42E 4E75                       		rts	
0001D430                            ; ===========================================================================
0001D430                            
0001D430                            Obj09_DOWNblock:
0001D430 0C04 002A                  		cmpi.b	#$2A,d4		; is the item a	"DOWN" block?
0001D434 6600                       		bne.s	Obj09_Rblock
0001D436 6100 F602                  		bsr.w	SS_RemoveCollectedItem
0001D43A 6600                       		bne.s	Obj09_SpeedDown
0001D43C 14BC 0001                  		move.b	#1,(a2)
0001D440 2549 0004                  		move.l	a1,4(a2)
0001D444                            
0001D444                            Obj09_SpeedDown:
0001D444 4A78 F786                  		tst.w 	($FFFFF786).w
0001D448 6700                       		beq.s	Obj09_DOWNsnd
0001D44A 5378 F786                  		subi.w	#1,($FFFFF786).w	; reduce stage rotation speed
0001D44E                            
0001D44E                            Obj09_DOWNsnd:
0001D44E 303C 00A9                  		move.w	#$A9,d0
0001D452 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l	; play up/down sound
0001D458 7800                       		moveq	#0,d4
0001D45A 4E75                       		rts	
0001D45C                            ; ===========================================================================
0001D45C                            
0001D45C                            Obj09_Rblock:
0001D45C 0C04 002B                  		cmpi.b	#$2B,d4		; is the item an "R" block?
0001D460 6600                       		bne.s	Obj09_ChkGhost
0001D462 6100 F5D6                  		bsr.w	SS_RemoveCollectedItem
0001D466 6600                       		bne.s	Obj09_RevStage
0001D468 14BC 0001                  		move.b	#1,(a2)
0001D46C 2549 0004                  		move.l	a1,4(a2)
0001D470                            
0001D470                            Obj09_RevStage:
0001D470 31FC 012C F784                     move.w  #300,($FFFFF784).w
0001D476 103C 00A9                  		move.b	#$A9,d0
0001D47A 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l	; play sound
0001D480 7800                       		moveq	#0,d4
0001D482 4E75                       		rts	
0001D484                            
0001D484                            ; ===========================================================================
0001D484                            
0001D484                            Obj09_ChkGhost:
0001D484 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001D488 6600                       		bne.s	Obj09_ChkGhostTag
0001D48A 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001D490                            
0001D490                            Obj09_ChkGhostTag:
0001D490 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001D494 6600                       		bne.s	Obj09_NoGhost
0001D496 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001D49C 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001D49E 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001D4A4                            
0001D4A4                            Obj09_NoGhost:
0001D4A4 78FF                       		moveq	#-1,d4
0001D4A6 4E75                       		rts	
0001D4A8                            ; ===========================================================================
0001D4A8                            
0001D4A8                            Obj09_MakeGhostSolid:
0001D4A8 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001D4AE 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001D4B0 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D4B6 723F                       		moveq	#$3F,d1
0001D4B8                            
0001D4B8                            Obj09_GhostLoop2:
0001D4B8 743F                       		moveq	#$3F,d2
0001D4BA                            
0001D4BA                            Obj09_GhostLoop:
0001D4BA 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001D4BE 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001D4C0 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001D4C4                            
0001D4C4                            Obj09_NoReplace:
0001D4C4 5249                       		addq.w	#1,a1
0001D4C6 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001D4CA 43E9 0040                  		lea	$40(a1),a1
0001D4CE 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001D4D2                            
0001D4D2                            Obj09_GhostNotSolid:
0001D4D2 4228 003A                  		clr.b	$3A(a0)
0001D4D6 7800                       		moveq	#0,d4
0001D4D8 4E75                       		rts	
0001D4DA                            ; End of function Obj09_ChkItems
0001D4DA                            
0001D4DA                            
0001D4DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4DA                            
0001D4DA                            
0001D4DA                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001D4DA 1028 0030                  		move.b	$30(a0),d0
0001D4DE 6600                       		bne.s	Obj09_GOAL
0001D4E0 5328 0036                  		subq.b	#1,$36(a0)
0001D4E4 6A00                       		bpl.s	loc_1BEA0
0001D4E6 117C 0000 0036             		move.b	#0,$36(a0)
0001D4EC                            
0001D4EC                            loc_1BEA0:
0001D4EC 5328 0037                  		subq.b	#1,$37(a0)
0001D4F0 6A00                       		bpl.s	locret_1BEAC
0001D4F2 117C 0000 0037             		move.b	#0,$37(a0)
0001D4F8                            
0001D4F8                            locret_1BEAC:
0001D4F8 4E75                       		rts	
0001D4FA                            ; ===========================================================================
0001D4FA                            
0001D4FA                            ; ===========================================================================
0001D4FA                            
0001D4FA                            Obj09_GOAL:
0001D4FA 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001D4FE 6600                       		bne.s	Obj09_ChkGlass
0001D500 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001D504 303C 00A8                  		move.w	#$A8,d0		; change item
0001D508 4EB9 0000 1C7A             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001D50E 4E75                       		rts	
0001D510                            ; ===========================================================================
0001D510                            
0001D510                            ; ===========================================================================
0001D510                            
0001D510                            Obj09_ChkGlass:
0001D510 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001D514 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001D516 0C00 002E                  		cmpi.b	#$2E,d0
0001D51A 6700                       		beq.s	Obj09_Glass
0001D51C 0C00 002F                  		cmpi.b	#$2F,d0
0001D520 6700                       		beq.s	Obj09_Glass
0001D522 0C00 0030                  		cmpi.b	#$30,d0
0001D526 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001D528                            
0001D528                            Obj09_Glass:
0001D528 6100 F510                  		bsr.w	SS_RemoveCollectedItem
0001D52C 6600                       		bne.s	Obj09_GlassSnd
0001D52E 14BC 0006                  		move.b	#6,(a2)
0001D532 2268 0032                  		movea.l	$32(a0),a1
0001D536 5389                       		subq.l	#1,a1
0001D538 2549 0004                  		move.l	a1,4(a2)
0001D53C 1011                       		move.b	(a1),d0
0001D53E 5200                       		addq.b	#1,d0		; change glass type when touched
0001D540 0C00 0030                  		cmpi.b	#$30,d0
0001D544 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001D546 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001D548                            
0001D548                            Obj09_GlassUpdate:
0001D548 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001D54C                            
0001D54C                            Obj09_GlassSnd:
0001D54C 303C 00BA                  		move.w	#$BA,d0
0001D550 4EF9 0000 1C7A             		jmp	(PlaySound_Special).l ;	play glass block sound
0001D556                            ; ===========================================================================
0001D556                            
0001D556                            Obj09_NoGlass:
0001D556 4E75                       		rts	
0001D558                            ; End of function Obj09_ChkItems2
0001D558                            
0001D558                            ; ===========================================================================
0001D558                            ; ---------------------------------------------------------------------------
0001D558                            ; Object 10 - blank
0001D558                            ; ---------------------------------------------------------------------------
0001D558                            
0001D558                            Obj10:					; XREF: Obj_Index
0001D558 4E75                       		rts	
0001D55A                            ; ---------------------------------------------------------------------------
0001D55A                            ; Subroutine to	animate	level graphics
0001D55A                            ; ---------------------------------------------------------------------------
0001D55A                            
0001D55A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D55A                            
0001D55A                            
0001D55A                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001D55A 4A38 FFF9                  		tst.b	($FFFFFFF9).w	; GMZ: Is truth nuke flag enabled?
0001D55E 6600                       		bne.s	AniArt_Pause	; GMZ: If yes, branch
0001D560 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D564 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001D566 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D56C 6100 0000                  		bsr.w	AniArt_GiantRing
0001D570 7000                       		moveq	#0,d0
0001D572 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D576 D040                       		add.w	d0,d0
0001D578 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001D57C 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001D580                            ; ===========================================================================
0001D580                            
0001D580                            AniArt_Pause:
0001D580 4E75                       		rts	
0001D582                            ; End of function AniArt_Load
0001D582                            
0001D582                            ; ===========================================================================
0001D582 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001D586 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001D58A 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001D58E 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_GHZ-AniArt_Index
0001D592                            ; ===========================================================================
0001D592                            ; ---------------------------------------------------------------------------
0001D592                            ; Animated pattern routine - Green Hill
0001D592                            ; ---------------------------------------------------------------------------
0001D592                            
0001D592                            AniArt_GHZ:				; XREF: AniArt_Index
0001D592 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001D596 6A00                       		bpl.s	loc_1C08A
0001D598 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001D59E 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001D5A4 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D5A8 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001D5AC 0240 0001                  		andi.w	#1,d0
0001D5B0 6700                       		beq.s	loc_1C078
0001D5B2 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001D5B6                            
0001D5B6                            loc_1C078:
0001D5B6 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001D5C0 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001D5C4 6000 0000                  		bra.w	LoadTiles
0001D5C8                            ; ===========================================================================
0001D5C8                            
0001D5C8                            loc_1C08A:
0001D5C8 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D5CC 6A00                       		bpl.s	loc_1C0C0
0001D5CE 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001D5D4 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001D5DA 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001D5DE 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D5E2 0240 0001                  		andi.w	#1,d0
0001D5E6 6700                       		beq.s	loc_1C0AE
0001D5E8 43E9 0200                  		lea	$200(a1),a1
0001D5EC                            
0001D5EC                            loc_1C0AE:
0001D5EC 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001D5F6 323C 000F                  		move.w	#$F,d1
0001D5FA 6000 0000                  		bra.w	LoadTiles
0001D5FE                            ; ===========================================================================
0001D5FE                            
0001D5FE                            loc_1C0C0:
0001D5FE 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D602 6A00                       		bpl.s	locret_1C10C
0001D604 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001D60A 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001D60E 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001D612 0240 0003                  		andi.w	#3,d0
0001D616 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001D61A 0800 0000                  		btst	#0,d0
0001D61E 6600                       		bne.s	loc_1C0E8
0001D620 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001D626                            
0001D626                            loc_1C0E8:
0001D626 EF48                       		lsl.w	#7,d0
0001D628 3200                       		move.w	d0,d1
0001D62A D040                       		add.w	d0,d0
0001D62C D041                       		add.w	d1,d0
0001D62E 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001D638 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001D63E 43F1 0000                  		lea	(a1,d0.w),a1
0001D642 323C 000B                  		move.w	#$B,d1
0001D646 6100 0000                  		bsr.w	LoadTiles
0001D64A                            
0001D64A                            locret_1C10C:
0001D64A 4E75                       		rts	
0001D64C                            ; ===========================================================================
0001D64C 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001D650                            ; ===========================================================================
0001D650                            ; ---------------------------------------------------------------------------
0001D650                            ; Animated pattern routine - Marble
0001D650                            ; ---------------------------------------------------------------------------
0001D650                            
0001D650                            AniArt_MZ:				; XREF: AniArt_Index
0001D650 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001D654 6A00                       		bpl.s	loc_1C150
0001D656 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001D65C 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001D662 7000                       		moveq	#0,d0
0001D664 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D668 5200                       		addq.b	#1,d0
0001D66A 0C00 0003                  		cmpi.b	#3,d0
0001D66E 6600                       		bne.s	loc_1C134
0001D670 7000                       		moveq	#0,d0
0001D672                            
0001D672                            loc_1C134:
0001D672 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001D676 C0FC 0100                  		mulu.w	#$100,d0
0001D67A D2C0                       		adda.w	d0,a1
0001D67C 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001D686 323C 0007                  		move.w	#7,d1
0001D68A 6100 0000                  		bsr.w	LoadTiles
0001D68E                            
0001D68E                            loc_1C150:
0001D68E 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D692 6A00                       		bpl.s	loc_1C1AE
0001D694 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001D69A 7000                       		moveq	#0,d0
0001D69C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D6A0 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001D6A6 EE58                       		ror.w	#7,d0
0001D6A8 D8C0                       		adda.w	d0,a4
0001D6AA 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001D6B4 7600                       		moveq	#0,d3
0001D6B6 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001D6BA 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D6BE 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001D6C2 343C 0003                  		move.w	#3,d2
0001D6C6                            
0001D6C6                            loc_1C188:
0001D6C6 3003                       		move.w	d3,d0
0001D6C8 D040                       		add.w	d0,d0
0001D6CA 0240 001E                  		andi.w	#$1E,d0
0001D6CE 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001D6D4 3033 0000                  		move.w	(a3,d0.w),d0
0001D6D8 47F3 0000                  		lea	(a3,d0.w),a3
0001D6DC 224C                       		movea.l	a4,a1
0001D6DE 323C 001F                  		move.w	#$1F,d1
0001D6E2 4E93                       		jsr	(a3)
0001D6E4 5843                       		addq.w	#4,d3
0001D6E6 51CA FFDE                  		dbf	d2,loc_1C188
0001D6EA 4E75                       		rts	
0001D6EC                            ; ===========================================================================
0001D6EC                            
0001D6EC                            loc_1C1AE:
0001D6EC 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D6F0 6A00 0000                  		bpl.w	locret_1C1EA
0001D6F4 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001D6FA 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001D700 7000                       		moveq	#0,d0
0001D702 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001D706 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001D70A 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001D710 C0FC 00C0                  		mulu.w	#$C0,d0
0001D714 D2C0                       		adda.w	d0,a1
0001D716 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001D720 323C 0005                  		move.w	#5,d1
0001D724 6000 0000                  		bra.w	LoadTiles
0001D728                            ; ===========================================================================
0001D728                            
0001D728                            locret_1C1EA:
0001D728 4E75                       		rts	
0001D72A                            ; ===========================================================================
0001D72A                            ; ---------------------------------------------------------------------------
0001D72A                            ; Animated pattern routine - Scrap Brain
0001D72A                            ; ---------------------------------------------------------------------------
0001D72A                            
0001D72A                            AniArt_SBZ:				; XREF: AniArt_Index
0001D72A 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001D72E 6700                       		beq.s	loc_1C1F8
0001D730 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001D734 6000                       		bra.s	loc_1C250
0001D736                            ; ===========================================================================
0001D736                            
0001D736                            loc_1C1F8:
0001D736 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001D73A 6A00                       		bpl.s	loc_1C250
0001D73C 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001D742 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001D748 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001D752 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D756 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001D75A 0240 0007                  		andi.w	#7,d0
0001D75E 6700                       		beq.s	loc_1C234
0001D760 5340                       		subq.w	#1,d0
0001D762 C0FC 0180                  		mulu.w	#$180,d0
0001D766 43F1 0000                  		lea	(a1,d0.w),a1
0001D76A 323C 000B                  		move.w	#$B,d1
0001D76E 6000 0000                  		bra.w	LoadTiles
0001D772                            ; ===========================================================================
0001D772                            
0001D772                            loc_1C234:
0001D772 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001D778                            
0001D778                            loc_1C23A:
0001D778 323C 0005                  		move.w	#5,d1
0001D77C 6100 0000                  		bsr.w	LoadTiles
0001D780 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001D786 323C 0005                  		move.w	#5,d1
0001D78A 6000 0000                  		bra.w	LoadTiles
0001D78E                            ; ===========================================================================
0001D78E                            
0001D78E                            loc_1C250:
0001D78E 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001D792 6700                       		beq.s	loc_1C25C
0001D794 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D798 6000                       		bra.s	locret_1C2A0
0001D79A                            ; ===========================================================================
0001D79A                            
0001D79A                            loc_1C25C:
0001D79A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D79E 6A00                       		bpl.s	locret_1C2A0
0001D7A0 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001D7A6 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001D7AC 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001D7B6 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001D7BA 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D7BE 0240 0007                  		andi.w	#7,d0
0001D7C2 6700                       		beq.s	loc_1C298
0001D7C4 5340                       		subq.w	#1,d0
0001D7C6 C0FC 0180                  		mulu.w	#$180,d0
0001D7CA 43F1 0000                  		lea	(a1,d0.w),a1
0001D7CE 323C 000B                  		move.w	#$B,d1
0001D7D2 6000 0000                  		bra.w	LoadTiles
0001D7D6                            ; ===========================================================================
0001D7D6                            
0001D7D6                            loc_1C298:
0001D7D6 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001D7DC 609A                       		bra.s	loc_1C23A
0001D7DE                            ; ===========================================================================
0001D7DE                            
0001D7DE                            locret_1C2A0:
0001D7DE 4E75                       		rts	
0001D7E0                            ; ===========================================================================
0001D7E0                            ; ---------------------------------------------------------------------------
0001D7E0                            ; Animated pattern routine - ending sequence
0001D7E0                            ; ---------------------------------------------------------------------------
0001D7E0                            
0001D7E0                            AniArt_Ending:				; XREF: AniArt_Index
0001D7E0 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D7E4 6A00                       		bpl.s	loc_1C2F4
0001D7E6 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001D7EC 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001D7F2 45F8 9400                  		lea	($FFFF9400).w,a2
0001D7F6 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001D7FA 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D7FE 0240 0001                  		andi.w	#1,d0
0001D802 6700                       		beq.s	loc_1C2CE
0001D804 43E9 0200                  		lea	$200(a1),a1
0001D808 45EA 0200                  		lea	$200(a2),a2
0001D80C                            
0001D80C                            loc_1C2CE:
0001D80C 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001D816 323C 000F                  		move.w	#$F,d1
0001D81A 6100 0000                  		bsr.w	LoadTiles
0001D81E 224A                       		movea.l	a2,a1
0001D820 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001D82A 323C 000F                  		move.w	#$F,d1
0001D82E 6000 0000                  		bra.w	LoadTiles
0001D832                            ; ===========================================================================
0001D832                            
0001D832                            loc_1C2F4:
0001D832 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D836 6A00                       		bpl.s	loc_1C33C
0001D838 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001D83E 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001D842 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001D846 0240 0007                  		andi.w	#7,d0
0001D84A 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001D84E EF48                       		lsl.w	#7,d0
0001D850 3200                       		move.w	d0,d1
0001D852 D040                       		add.w	d0,d0
0001D854 D041                       		add.w	d1,d0
0001D856 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001D860 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001D866 43F1 0000                  		lea	(a1,d0.w),a1
0001D86A 323C 000B                  		move.w	#$B,d1
0001D86E 6000 0000                  		bra.w	LoadTiles
0001D872                            ; ===========================================================================
0001D872 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001D87A                            ; ===========================================================================
0001D87A                            
0001D87A                            loc_1C33C:
0001D87A 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001D87E 6A00                       		bpl.s	loc_1C37A
0001D880 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001D886 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001D88A 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001D88E 0240 0003                  		andi.w	#3,d0
0001D892 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001D896 E148                       		lsl.w	#8,d0
0001D898 D040                       		add.w	d0,d0
0001D89A 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001D8A4 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001D8A8 43F1 0000                  		lea	(a1,d0.w),a1
0001D8AC 323C 000F                  		move.w	#$F,d1
0001D8B0 6000 0000                  		bra.w	LoadTiles
0001D8B4                            ; ===========================================================================
0001D8B4 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001D8B8                            ; ===========================================================================
0001D8B8                            
0001D8B8                            loc_1C37A:
0001D8B8 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001D8BC 6A00                       		bpl.s	locret_1C3B4
0001D8BE 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001D8C4 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001D8C8 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001D8CC 0240 0003                  		andi.w	#3,d0
0001D8D0 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001D8D4 E148                       		lsl.w	#8,d0
0001D8D6 D040                       		add.w	d0,d0
0001D8D8 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001D8E2 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001D8E6 43F1 0000                  		lea	(a1,d0.w),a1
0001D8EA 323C 000F                  		move.w	#$F,d1
0001D8EE 6000 0000                  		bra.w	LoadTiles
0001D8F2                            ; ===========================================================================
0001D8F2                            
0001D8F2                            locret_1C3B4:
0001D8F2 4E75                       		rts	
0001D8F4                            ; ===========================================================================
0001D8F4                            
0001D8F4                            AniArt_none:				; XREF: AniArt_Index
0001D8F4 4E75                       		rts	
0001D8F6                            
0001D8F6                            ; ---------------------------------------------------------------------------
0001D8F6                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001D8F6                            ; ---------------------------------------------------------------------------
0001D8F6                            
0001D8F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D8F6                            
0001D8F6                            
0001D8F6                            LoadTiles:
0001D8F6 2C99                       		move.l	(a1)+,(a6)
0001D8F8 2C99                       		move.l	(a1)+,(a6)
0001D8FA 2C99                       		move.l	(a1)+,(a6)
0001D8FC 2C99                       		move.l	(a1)+,(a6)
0001D8FE 2C99                       		move.l	(a1)+,(a6)
0001D900 2C99                       		move.l	(a1)+,(a6)
0001D902 2C99                       		move.l	(a1)+,(a6)
0001D904 2C99                       		move.l	(a1)+,(a6)
0001D906 51C9 FFEE                  		dbf	d1,LoadTiles
0001D90A 4E75                       		rts	
0001D90C                            ; End of function LoadTiles
0001D90C                            
0001D90C                            ; ===========================================================================
0001D90C                            ; ---------------------------------------------------------------------------
0001D90C                            ; Animated pattern routine - more Marble Zone
0001D90C                            ; ---------------------------------------------------------------------------
0001D90C 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001D910 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001D914 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001D918 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001D91C 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001D920 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001D924 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001D928 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001D92C                            ; ===========================================================================
0001D92C                            
0001D92C                            loc_1C3EE:				; XREF: AniArt_MZextra
0001D92C 2C91                       		move.l	(a1),(a6)
0001D92E 43E9 0010                  		lea	$10(a1),a1
0001D932 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001D936 4E75                       		rts	
0001D938                            ; ===========================================================================
0001D938                            
0001D938                            loc_1C3FA:				; XREF: AniArt_MZextra
0001D938 2029 0002                  		move.l	2(a1),d0
0001D93C 1029 0001                  		move.b	1(a1),d0
0001D940 E098                       		ror.l	#8,d0
0001D942 2C80                       		move.l	d0,(a6)
0001D944 43E9 0010                  		lea	$10(a1),a1
0001D948 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001D94C 4E75                       		rts	
0001D94E                            ; ===========================================================================
0001D94E                            
0001D94E                            loc_1C410:				; XREF: AniArt_MZextra
0001D94E 2CA9 0002                  		move.l	2(a1),(a6)
0001D952 43E9 0010                  		lea	$10(a1),a1
0001D956 51C9 FFF6                  		dbf	d1,loc_1C410
0001D95A 4E75                       		rts	
0001D95C                            ; ===========================================================================
0001D95C                            
0001D95C                            loc_1C41E:				; XREF: AniArt_MZextra
0001D95C 2029 0004                  		move.l	4(a1),d0
0001D960 1029 0003                  		move.b	3(a1),d0
0001D964 E098                       		ror.l	#8,d0
0001D966 2C80                       		move.l	d0,(a6)
0001D968 43E9 0010                  		lea	$10(a1),a1
0001D96C 51C9 FFEE                  		dbf	d1,loc_1C41E
0001D970 4E75                       		rts	
0001D972                            ; ===========================================================================
0001D972                            
0001D972                            loc_1C434:				; XREF: AniArt_MZextra
0001D972 2CA9 0004                  		move.l	4(a1),(a6)
0001D976 43E9 0010                  		lea	$10(a1),a1
0001D97A 51C9 FFF6                  		dbf	d1,loc_1C434
0001D97E 4E75                       		rts	
0001D980                            ; ===========================================================================
0001D980                            
0001D980                            loc_1C442:				; XREF: AniArt_MZextra
0001D980 2029 0006                  		move.l	6(a1),d0
0001D984 1029 0005                  		move.b	5(a1),d0
0001D988 E098                       		ror.l	#8,d0
0001D98A 2C80                       		move.l	d0,(a6)
0001D98C 43E9 0010                  		lea	$10(a1),a1
0001D990 51C9 FFEE                  		dbf	d1,loc_1C442
0001D994 4E75                       		rts	
0001D996                            ; ===========================================================================
0001D996                            
0001D996                            loc_1C458:				; XREF: AniArt_MZextra
0001D996 2CA9 0006                  		move.l	6(a1),(a6)
0001D99A 43E9 0010                  		lea	$10(a1),a1
0001D99E 51C9 FFF6                  		dbf	d1,loc_1C458
0001D9A2 4E75                       		rts	
0001D9A4                            ; ===========================================================================
0001D9A4                            
0001D9A4                            loc_1C466:				; XREF: AniArt_MZextra
0001D9A4 2029 0008                  		move.l	8(a1),d0
0001D9A8 1029 0007                  		move.b	7(a1),d0
0001D9AC E098                       		ror.l	#8,d0
0001D9AE 2C80                       		move.l	d0,(a6)
0001D9B0 43E9 0010                  		lea	$10(a1),a1
0001D9B4 51C9 FFEE                  		dbf	d1,loc_1C466
0001D9B8 4E75                       		rts	
0001D9BA                            ; ===========================================================================
0001D9BA                            
0001D9BA                            loc_1C47C:				; XREF: AniArt_MZextra
0001D9BA 2CA9 0008                  		move.l	8(a1),(a6)
0001D9BE 43E9 0010                  		lea	$10(a1),a1
0001D9C2 51C9 FFF6                  		dbf	d1,loc_1C47C
0001D9C6 4E75                       		rts	
0001D9C8                            ; ===========================================================================
0001D9C8                            
0001D9C8                            loc_1C48A:				; XREF: AniArt_MZextra
0001D9C8 2029 000A                  		move.l	$A(a1),d0
0001D9CC 1029 0009                  		move.b	9(a1),d0
0001D9D0 E098                       		ror.l	#8,d0
0001D9D2 2C80                       		move.l	d0,(a6)
0001D9D4 43E9 0010                  		lea	$10(a1),a1
0001D9D8 51C9 FFEE                  		dbf	d1,loc_1C48A
0001D9DC 4E75                       		rts	
0001D9DE                            ; ===========================================================================
0001D9DE                            
0001D9DE                            loc_1C4A0:				; XREF: AniArt_MZextra
0001D9DE 2CA9 000A                  		move.l	$A(a1),(a6)
0001D9E2 43E9 0010                  		lea	$10(a1),a1
0001D9E6 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001D9EA 4E75                       		rts	
0001D9EC                            ; ===========================================================================
0001D9EC                            
0001D9EC                            loc_1C4AE:				; XREF: AniArt_MZextra
0001D9EC 2029 000C                  		move.l	$C(a1),d0
0001D9F0 1029 000B                  		move.b	$B(a1),d0
0001D9F4 E098                       		ror.l	#8,d0
0001D9F6 2C80                       		move.l	d0,(a6)
0001D9F8 43E9 0010                  		lea	$10(a1),a1
0001D9FC 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001DA00 4E75                       		rts	
0001DA02                            ; ===========================================================================
0001DA02                            
0001DA02                            loc_1C4C4:				; XREF: AniArt_MZextra
0001DA02 2CA9 000C                  		move.l	$C(a1),(a6)
0001DA06 43E9 0010                  		lea	$10(a1),a1
0001DA0A 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001DA0E 4E75                       		rts	
0001DA10                            ; ===========================================================================
0001DA10                            
0001DA10                            loc_1C4D2:				; XREF: AniArt_MZextra
0001DA10 2029 000C                  		move.l	$C(a1),d0
0001DA14 E198                       		rol.l	#8,d0
0001DA16 1011                       		move.b	0(a1),d0
0001DA18 2C80                       		move.l	d0,(a6)
0001DA1A 43E9 0010                  		lea	$10(a1),a1
0001DA1E 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001DA22 4E75                       		rts	
0001DA24                            ; ===========================================================================
0001DA24                            
0001DA24                            loc_1C4E8:				; XREF: AniArt_MZextra
0001DA24 3CA9 000E                  		move.w	$E(a1),(a6)
0001DA28 3C91                       		move.w	0(a1),(a6)
0001DA2A 43E9 0010                  		lea	$10(a1),a1
0001DA2E 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001DA32 4E75                       		rts	
0001DA34                            ; ===========================================================================
0001DA34                            
0001DA34                            loc_1C4FA:				; XREF: AniArt_MZextra
0001DA34 2011                       		move.l	0(a1),d0
0001DA36 1029 000F                  		move.b	$F(a1),d0
0001DA3A E098                       		ror.l	#8,d0
0001DA3C 2C80                       		move.l	d0,(a6)
0001DA3E 43E9 0010                  		lea	$10(a1),a1
0001DA42 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001DA46 4E75                       		rts	
0001DA48                            
0001DA48                            ; ---------------------------------------------------------------------------
0001DA48                            ; Animated pattern routine - giant ring
0001DA48                            ; ---------------------------------------------------------------------------
0001DA48                            
0001DA48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DA48                            
0001DA48                            
0001DA48                            AniArt_GiantRing:			; XREF: AniArt_Load
0001DA48 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001DA4C 6600                       		bne.s	loc_1C518
0001DA4E 4E75                       		rts	
0001DA50                            ; ===========================================================================
0001DA50                            
0001DA50                            loc_1C518:
0001DA50 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001DA56 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001DA5C 7000                       		moveq	#0,d0
0001DA5E 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001DA62 43F1 0000                  		lea	(a1,d0.w),a1
0001DA66 0640 8000                  		addi.w	#$8000,d0
0001DA6A E588                       		lsl.l	#2,d0
0001DA6C E448                       		lsr.w	#2,d0
0001DA6E 0040 4000                  		ori.w	#$4000,d0
0001DA72 4840                       		swap	d0
0001DA74 2D40 0004                  		move.l	d0,4(a6)
0001DA78 323C 000D                  		move.w	#$D,d1
0001DA7C 6000 FE78                  		bra.w	LoadTiles
0001DA80                            ; End of function AniArt_GiantRing
0001DA80                            
0001DA80                            ; ===========================================================================
0001DA80                            ; ---------------------------------------------------------------------------
0001DA80                            ; Object 21 - SCORE, TIME, RINGS
0001DA80                            ; ---------------------------------------------------------------------------
0001DA80                            
0001DA80                            Obj21:					; XREF: Obj_Index
0001DA80 7000                       		moveq	#0,d0
0001DA82 1028 0024                  		move.b	$24(a0),d0
0001DA86 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001DA8A 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001DA8E                            ; ===========================================================================
0001DA8E 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001DA90 0000                       		dc.w Obj21_Flash-Obj21_Index
0001DA92                            ; ===========================================================================
0001DA92                            
0001DA92                            Obj21_Main:				; XREF: Obj21_Main
0001DA92 5428 0024                  		addq.b	#2,$24(a0)
0001DA96 317C 0090 0008             		move.w	#$90,8(a0)
0001DA9C 317C 0108 000A             		move.w	#$108,$A(a0)
0001DAA2 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001DAAA 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001DAB0 117C 0000 0001             		move.b	#0,1(a0)
0001DAB6 117C 0000 0018             		move.b	#0,$18(a0)
0001DABC                            
0001DABC                            Obj21_Flash:				; XREF: Obj21_Main
0001DABC 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001DAC0 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001DAC2 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001DAC6 4EF9 0000 E756             		jmp	DisplaySprite
0001DACC                            ; ===========================================================================
0001DACC                            
0001DACC                            Obj21_Flash2:
0001DACC 7000                       		moveq	#0,d0
0001DACE 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001DAD4 6600                       		bne.s	Obj21_Display
0001DAD6 5240                       		addq.w	#1,d0		; make ring counter flash red
0001DAD8 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001DADE 6600                       		bne.s	Obj21_Display	; if not, branch
0001DAE0 5440                       		addq.w	#2,d0		; make time counter flash red
0001DAE2                            
0001DAE2                            Obj21_Display:
0001DAE2 1140 001A                  		move.b	d0,$1A(a0)
0001DAE6 4EF9 0000 E756             		jmp	DisplaySprite
0001DAEC                            ; ===========================================================================
0001DAEC                            ; ---------------------------------------------------------------------------
0001DAEC                            ; Sprite mappings - SCORE, TIME, RINGS
0001DAEC                            ; ---------------------------------------------------------------------------
0001DAEC                            Map_obj21:
0001DAEC                            	include "_maps\obj21.asm"
0001DAEC                            Map_549d:
0001DAEC 0000                       Map_549d_0: 	dc.w Map_549d_8-Map_549d
0001DAEE 0000                       Map_549d_2: 	dc.w Map_549d_36-Map_549d
0001DAF0 0000                       Map_549d_4: 	dc.w Map_549d_64-Map_549d
0001DAF2 0000                       Map_549d_6: 	dc.w Map_549d_92-Map_549d
0001DAF4 09                         Map_549d_8: 	dc.b $9
0001DAF5 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001DAFA 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001DAFF 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001DB04 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001DB09 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001DB0E A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001DB13 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001DB18 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001DB1D 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001DB22 09                         Map_549d_36: 	dc.b $9
0001DB23 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001DB28 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001DB2D 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001DB32 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001DB37 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001DB3C A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001DB41 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001DB46 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001DB4B 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001DB50 09                         Map_549d_64: 	dc.b $9
0001DB51 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001DB56 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001DB5B 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001DB60 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001DB65 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001DB6A A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001DB6F 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001DB74 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001DB79 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001DB7E 09                         Map_549d_92: 	dc.b $9
0001DB7F 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001DB84 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001DB89 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001DB8E 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001DB93 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001DB98 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001DB9D 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001DBA2 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001DBA7 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001DBAC                            	even
0001DBAC                            	even
0001DBAC                            
0001DBAC                            ; ---------------------------------------------------------------------------
0001DBAC                            ; Add points subroutine
0001DBAC                            ; ---------------------------------------------------------------------------
0001DBAC                            
0001DBAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DBAC                            
0001DBAC                            
0001DBAC                            AddPoints:
0001DBAC 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001DBB2 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001DBB6 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001DBBA D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001DBBC 223C 000F 423F             		move.l	#999999,d1
0001DBC2 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001DBC4 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001DBC8 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001DBCA 2481                       		move.l	d1,(a2)
0001DBCC                            
0001DBCC                            loc_1C6AC:
0001DBCC 2013                       		move.l	(a3),d0
0001DBCE B092                       		cmp.l	(a2),d0
0001DBD0 6500 0000                  		bcs.w	locret_1C6B6
0001DBD4 2480                       		move.l	d0,(a2)
0001DBD6                            
0001DBD6                            locret_1C6B6:
0001DBD6 4E75                       		rts	
0001DBD8                            ; End of function AddPoints
0001DBD8                            
0001DBD8                            ; ---------------------------------------------------------------------------
0001DBD8                            ; Subroutine to	update the HUD
0001DBD8                            ; ---------------------------------------------------------------------------
0001DBD8                            
0001DBD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DBD8                            
0001DBD8                            
0001DBD8                            HudUpdate:
0001DBD8 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001DBDC 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001DBE0 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001DBE4 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001DBE6 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001DBEA 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001DBF0 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001DBF4 6100 0000                  		bsr.w	Hud_Score
0001DBF8                            
0001DBF8                            Hud_ChkRings:
0001DBF8 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001DBFC 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001DBFE 6A00                       		bpl.s	loc_1C6E4
0001DC00 6100 0000                  		bsr.w	Hud_LoadZero
0001DC04                            
0001DC04                            loc_1C6E4:
0001DC04 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001DC08 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001DC0E 7200                       		moveq	#0,d1
0001DC10 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001DC14 6100 0000                  		bsr.w	Hud_Rings
0001DC18                            
0001DC18                            Hud_ChkTime:
0001DC18 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001DC1C 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001DC1E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001DC22 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001DC24 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001DC28 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001DC2E 6700                       		beq.s	TimeOver	; if yes, branch
0001DC30 5221                       		addq.b	#1,-(a1)
0001DC32 0C11 003C                  		cmpi.b	#60,(a1)
0001DC36 6500                       		bcs.s	Hud_ChkLives
0001DC38 12BC 0000                  		move.b	#0,(a1)
0001DC3C 5221                       		addq.b	#1,-(a1)
0001DC3E 0C11 003C                  		cmpi.b	#60,(a1)
0001DC42 6500                       		bcs.s	loc_1C734
0001DC44 12BC 0000                  		move.b	#0,(a1)
0001DC48 5221                       		addq.b	#1,-(a1)
0001DC4A 0C11 0009                  		cmpi.b	#9,(a1)
0001DC4E 6500                       		bcs.s	loc_1C734
0001DC50 12BC 0009                  		move.b	#9,(a1)
0001DC54                            
0001DC54                            loc_1C734:
0001DC54 203C 5E40 0003             		move.l	#$5E400003,d0
0001DC5A 7200                       		moveq	#0,d1
0001DC5C 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001DC60 6100 0000                  		bsr.w	Hud_Mins
0001DC64 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001DC6A 7200                       		moveq	#0,d1
0001DC6C 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001DC70 6100 0000                  		bsr.w	Hud_Secs
0001DC74                            
0001DC74                            Hud_ChkLives:
0001DC74 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001DC78 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001DC7A 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001DC7E 6100 0000                  		bsr.w	Hud_Lives
0001DC82                            
0001DC82                            Hud_ChkBonus:
0001DC82 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001DC86 6700                       		beq.s	Hud_End		; if not, branch
0001DC88 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001DC8C 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001DC96 7200                       		moveq	#0,d1
0001DC98 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001DC9C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001DCA0 7200                       		moveq	#0,d1
0001DCA2 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001DCA6 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001DCAA                            
0001DCAA                            Hud_End:
0001DCAA 4E75                       		rts	
0001DCAC                            ; ===========================================================================
0001DCAC                            
0001DCAC                            TimeOver:				; XREF: Hud_ChkTime
0001DCAC 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001DCB0 41F8 D000                  		lea	($FFFFD000).w,a0
0001DCB4 2448                       		movea.l	a0,a2
0001DCB6 6100 E960                  		bsr.w	KillSonic
0001DCBA 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001DCC0 4E75                       		rts	
0001DCC2                            ; ===========================================================================
0001DCC2                            
0001DCC2                            HudDebug:				; XREF: HudUpdate
0001DCC2 6100 0000                  		bsr.w	HudDb_XY
0001DCC6 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001DCCA 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001DCCC 6A00                       		bpl.s	HudDb_Rings
0001DCCE 6100 0000                  		bsr.w	Hud_LoadZero
0001DCD2                            
0001DCD2                            HudDb_Rings:
0001DCD2 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001DCD6 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001DCDC 7200                       		moveq	#0,d1
0001DCDE 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001DCE2 6100 0000                  		bsr.w	Hud_Rings
0001DCE6                            
0001DCE6                            HudDb_ObjCount:
0001DCE6 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001DCEC 7200                       		moveq	#0,d1
0001DCEE 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001DCF2 6100 0000                  		bsr.w	Hud_Secs
0001DCF6 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001DCFA 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001DCFC 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001DD00 6100 0000                  		bsr.w	Hud_Lives
0001DD04                            
0001DD04                            HudDb_ChkBonus:
0001DD04 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001DD08 6700                       		beq.s	HudDb_End	; if not, branch
0001DD0A 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001DD0E 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001DD18 7200                       		moveq	#0,d1
0001DD1A 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001DD1E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001DD22 7200                       		moveq	#0,d1
0001DD24 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001DD28 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001DD2C                            
0001DD2C                            HudDb_End:
0001DD2C 4E75                       		rts	
0001DD2E                            ; End of function HudUpdate
0001DD2E                            
0001DD2E                            ; ---------------------------------------------------------------------------
0001DD2E                            ; Subroutine to	load "0" on the	HUD
0001DD2E                            ; ---------------------------------------------------------------------------
0001DD2E                            
0001DD2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD2E                            
0001DD2E                            
0001DD2E                            Hud_LoadZero:				; XREF: HudUpdate
0001DD2E 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001DD38 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001DD3C 343C 0002                  		move.w	#2,d2
0001DD40 6000                       		bra.s	loc_1C83E
0001DD42                            ; End of function Hud_LoadZero
0001DD42                            
0001DD42                            ; ---------------------------------------------------------------------------
0001DD42                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001DD42                            ; ---------------------------------------------------------------------------
0001DD42                            
0001DD42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD42                            
0001DD42                            
0001DD42                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001DD42 4DF9 00C0 0000             		lea	($C00000).l,a6
0001DD48 6100 0000                  		bsr.w	Hud_Lives
0001DD4C 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001DD56 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001DD5A 343C 000E                  		move.w	#$E,d2
0001DD5E                            
0001DD5E                            loc_1C83E:				; XREF: Hud_LoadZero
0001DD5E 43FA 0000                  		lea	Art_Hud(pc),a1
0001DD62                            
0001DD62                            loc_1C842:
0001DD62 323C 000F                  		move.w	#$F,d1
0001DD66 101A                       		move.b	(a2)+,d0
0001DD68 6B00                       		bmi.s	loc_1C85E
0001DD6A 4880                       		ext.w	d0
0001DD6C EB48                       		lsl.w	#5,d0
0001DD6E 47F1 0000                  		lea	(a1,d0.w),a3
0001DD72                            
0001DD72                            loc_1C852:
0001DD72 2C9B                       		move.l	(a3)+,(a6)
0001DD74 51C9 FFFC                  		dbf	d1,loc_1C852
0001DD78                            
0001DD78                            loc_1C858:
0001DD78 51CA FFE8                  		dbf	d2,loc_1C842
0001DD7C                            
0001DD7C 4E75                       		rts	
0001DD7E                            ; ===========================================================================
0001DD7E                            
0001DD7E                            loc_1C85E:
0001DD7E 2CBC 0000 0000             		move.l	#0,(a6)
0001DD84 51C9 FFF8                  		dbf	d1,loc_1C85E
0001DD88                            
0001DD88 60EE                       		bra.s	loc_1C858
0001DD8A                            ; End of function Hud_Base
0001DD8A                            
0001DD8A                            ; ===========================================================================
0001DD8A 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001DD96 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001DD9A                            ; ---------------------------------------------------------------------------
0001DD9A                            ; Subroutine to	load debug mode	numbers	patterns
0001DD9A                            ; ---------------------------------------------------------------------------
0001DD9A                            
0001DD9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD9A                            
0001DD9A                            
0001DD9A                            HudDb_XY:				; XREF: HudDebug
0001DD9A 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001DDA4 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001DDA8 4841                       		swap	d1
0001DDAA 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001DDAE 6100                       		bsr.s	HudDb_XY2
0001DDB0 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001DDB4 4841                       		swap	d1
0001DDB6 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001DDBA                            ; End of function HudDb_XY
0001DDBA                            
0001DDBA                            
0001DDBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DDBA                            
0001DDBA                            
0001DDBA                            HudDb_XY2:
0001DDBA 7C07                       		moveq	#7,d6
0001DDBC 43F9 0000 0D66             		lea	(Art_Text).l,a1
0001DDC2                            
0001DDC2                            HudDb_XYLoop:
0001DDC2 E959                       		rol.w	#4,d1
0001DDC4 3401                       		move.w	d1,d2
0001DDC6 0242 000F                  		andi.w	#$F,d2
0001DDCA 0C42 000A                  		cmpi.w	#$A,d2
0001DDCE 6500                       		bcs.s	loc_1C8B2
0001DDD0 5E42                       		addq.w	#7,d2
0001DDD2                            
0001DDD2                            loc_1C8B2:
0001DDD2 EB4A                       		lsl.w	#5,d2
0001DDD4 47F1 2000                  		lea	(a1,d2.w),a3
0001DDD8 2C9B                       		move.l	(a3)+,(a6)
0001DDDA 2C9B                       		move.l	(a3)+,(a6)
0001DDDC 2C9B                       		move.l	(a3)+,(a6)
0001DDDE 2C9B                       		move.l	(a3)+,(a6)
0001DDE0 2C9B                       		move.l	(a3)+,(a6)
0001DDE2 2C9B                       		move.l	(a3)+,(a6)
0001DDE4 2C9B                       		move.l	(a3)+,(a6)
0001DDE6 2C9B                       		move.l	(a3)+,(a6)
0001DDE8 4841                       		swap	d1
0001DDEA 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001DDEE                            
0001DDEE 4E75                       		rts	
0001DDF0                            ; End of function HudDb_XY2
0001DDF0                            
0001DDF0                            ; ---------------------------------------------------------------------------
0001DDF0                            ; Subroutine to	load rings numbers patterns
0001DDF0                            ; ---------------------------------------------------------------------------
0001DDF0                            
0001DDF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DDF0                            
0001DDF0                            
0001DDF0                            Hud_Rings:				; XREF: HudUpdate
0001DDF0 45F9 0000 0000             		lea	(Hud_100).l,a2
0001DDF6 7C02                       		moveq	#2,d6
0001DDF8 6000                       		bra.s	Hud_LoadArt
0001DDFA                            ; End of function Hud_Rings
0001DDFA                            
0001DDFA                            ; ---------------------------------------------------------------------------
0001DDFA                            ; Subroutine to	load score numbers patterns
0001DDFA                            ; ---------------------------------------------------------------------------
0001DDFA                            
0001DDFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DDFA                            
0001DDFA                            
0001DDFA                            Hud_Score:				; XREF: HudUpdate
0001DDFA 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001DE00 7C05                       		moveq	#5,d6
0001DE02                            
0001DE02                            Hud_LoadArt:
0001DE02 7800                       		moveq	#0,d4
0001DE04 43FA 0000                  		lea	Art_Hud(pc),a1
0001DE08                            
0001DE08                            Hud_ScoreLoop:
0001DE08 7400                       		moveq	#0,d2
0001DE0A 261A                       		move.l	(a2)+,d3
0001DE0C                            
0001DE0C                            loc_1C8EC:
0001DE0C 9283                       		sub.l	d3,d1
0001DE0E 6500                       		bcs.s	loc_1C8F4
0001DE10 5242                       		addq.w	#1,d2
0001DE12 60F8                       		bra.s	loc_1C8EC
0001DE14                            ; ===========================================================================
0001DE14                            
0001DE14                            loc_1C8F4:
0001DE14 D283                       		add.l	d3,d1
0001DE16 4A42                       		tst.w	d2
0001DE18 6700                       		beq.s	loc_1C8FE
0001DE1A 383C 0001                  		move.w	#1,d4
0001DE1E                            
0001DE1E                            loc_1C8FE:
0001DE1E 4A44                       		tst.w	d4
0001DE20 6700                       		beq.s	loc_1C92C
0001DE22 ED4A                       		lsl.w	#6,d2
0001DE24 2D40 0004                  		move.l	d0,4(a6)
0001DE28 47F1 2000                  		lea	(a1,d2.w),a3
0001DE2C 2C9B                       		move.l	(a3)+,(a6)
0001DE2E 2C9B                       		move.l	(a3)+,(a6)
0001DE30 2C9B                       		move.l	(a3)+,(a6)
0001DE32 2C9B                       		move.l	(a3)+,(a6)
0001DE34 2C9B                       		move.l	(a3)+,(a6)
0001DE36 2C9B                       		move.l	(a3)+,(a6)
0001DE38 2C9B                       		move.l	(a3)+,(a6)
0001DE3A 2C9B                       		move.l	(a3)+,(a6)
0001DE3C 2C9B                       		move.l	(a3)+,(a6)
0001DE3E 2C9B                       		move.l	(a3)+,(a6)
0001DE40 2C9B                       		move.l	(a3)+,(a6)
0001DE42 2C9B                       		move.l	(a3)+,(a6)
0001DE44 2C9B                       		move.l	(a3)+,(a6)
0001DE46 2C9B                       		move.l	(a3)+,(a6)
0001DE48 2C9B                       		move.l	(a3)+,(a6)
0001DE4A 2C9B                       		move.l	(a3)+,(a6)
0001DE4C                            
0001DE4C                            loc_1C92C:
0001DE4C 0680 0040 0000             		addi.l	#$400000,d0
0001DE52 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001DE56                            
0001DE56 4E75                       		rts	
0001DE58                            ; End of function Hud_Score
0001DE58                            
0001DE58                            ; ---------------------------------------------------------------------------
0001DE58                            ; Subroutine to	load countdown numbers on the continue screen
0001DE58                            ; ---------------------------------------------------------------------------
0001DE58                            
0001DE58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE58                            
0001DE58                            
0001DE58                            ContScrCounter:				; XREF: ContinueScreen
0001DE58 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001DE62 4DF9 00C0 0000             		lea	($C00000).l,a6
0001DE68 45F9 0000 0000             		lea	(Hud_10).l,a2
0001DE6E 7C01                       		moveq	#1,d6
0001DE70 7800                       		moveq	#0,d4
0001DE72 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001DE76                            
0001DE76                            ContScr_Loop:
0001DE76 7400                       		moveq	#0,d2
0001DE78 261A                       		move.l	(a2)+,d3
0001DE7A                            
0001DE7A                            loc_1C95A:
0001DE7A 9283                       		sub.l	d3,d1
0001DE7C 6500                       		bcs.s	loc_1C962
0001DE7E 5242                       		addq.w	#1,d2
0001DE80 60F8                       		bra.s	loc_1C95A
0001DE82                            ; ===========================================================================
0001DE82                            
0001DE82                            loc_1C962:
0001DE82 D283                       		add.l	d3,d1
0001DE84 ED4A                       		lsl.w	#6,d2
0001DE86 47F1 2000                  		lea	(a1,d2.w),a3
0001DE8A 2C9B                       		move.l	(a3)+,(a6)
0001DE8C 2C9B                       		move.l	(a3)+,(a6)
0001DE8E 2C9B                       		move.l	(a3)+,(a6)
0001DE90 2C9B                       		move.l	(a3)+,(a6)
0001DE92 2C9B                       		move.l	(a3)+,(a6)
0001DE94 2C9B                       		move.l	(a3)+,(a6)
0001DE96 2C9B                       		move.l	(a3)+,(a6)
0001DE98 2C9B                       		move.l	(a3)+,(a6)
0001DE9A 2C9B                       		move.l	(a3)+,(a6)
0001DE9C 2C9B                       		move.l	(a3)+,(a6)
0001DE9E 2C9B                       		move.l	(a3)+,(a6)
0001DEA0 2C9B                       		move.l	(a3)+,(a6)
0001DEA2 2C9B                       		move.l	(a3)+,(a6)
0001DEA4 2C9B                       		move.l	(a3)+,(a6)
0001DEA6 2C9B                       		move.l	(a3)+,(a6)
0001DEA8 2C9B                       		move.l	(a3)+,(a6)
0001DEAA 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001DEAE                            
0001DEAE 4E75                       		rts	
0001DEB0                            ; End of function ContScrCounter
0001DEB0                            
0001DEB0                            ; ===========================================================================
0001DEB0                            ; ---------------------------------------------------------------------------
0001DEB0                            ; HUD counter sizes
0001DEB0                            ; ---------------------------------------------------------------------------
0001DEB0 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001DEB4 0000 2710                  Hud_10000:	dc.l 10000
0001DEB8 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001DEBC 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001DEC0 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001DEC4 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001DEC8                            
0001DEC8                            ; ---------------------------------------------------------------------------
0001DEC8                            ; Subroutine to	load time numbers patterns
0001DEC8                            ; ---------------------------------------------------------------------------
0001DEC8                            
0001DEC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DEC8                            
0001DEC8                            
0001DEC8                            Hud_Mins:				; XREF: Hud_ChkTime
0001DEC8 45F9 0001 DEC4             		lea	(Hud_1).l,a2
0001DECE 7C00                       		moveq	#0,d6
0001DED0 6000                       		bra.s	loc_1C9BA
0001DED2                            ; End of function Hud_Mins
0001DED2                            
0001DED2                            
0001DED2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DED2                            
0001DED2                            
0001DED2                            Hud_Secs:				; XREF: Hud_ChkTime
0001DED2 45F9 0001 DEC0             		lea	(Hud_10).l,a2
0001DED8 7C01                       		moveq	#1,d6
0001DEDA                            
0001DEDA                            loc_1C9BA:
0001DEDA 7800                       		moveq	#0,d4
0001DEDC 43FA 0000                  		lea	Art_Hud(pc),a1
0001DEE0                            
0001DEE0                            Hud_TimeLoop:
0001DEE0 7400                       		moveq	#0,d2
0001DEE2 261A                       		move.l	(a2)+,d3
0001DEE4                            
0001DEE4                            loc_1C9C4:
0001DEE4 9283                       		sub.l	d3,d1
0001DEE6 6500                       		bcs.s	loc_1C9CC
0001DEE8 5242                       		addq.w	#1,d2
0001DEEA 60F8                       		bra.s	loc_1C9C4
0001DEEC                            ; ===========================================================================
0001DEEC                            
0001DEEC                            loc_1C9CC:
0001DEEC D283                       		add.l	d3,d1
0001DEEE 4A42                       		tst.w	d2
0001DEF0 6700                       		beq.s	loc_1C9D6
0001DEF2 383C 0001                  		move.w	#1,d4
0001DEF6                            
0001DEF6                            loc_1C9D6:
0001DEF6 ED4A                       		lsl.w	#6,d2
0001DEF8 2D40 0004                  		move.l	d0,4(a6)
0001DEFC 47F1 2000                  		lea	(a1,d2.w),a3
0001DF00 2C9B                       		move.l	(a3)+,(a6)
0001DF02 2C9B                       		move.l	(a3)+,(a6)
0001DF04 2C9B                       		move.l	(a3)+,(a6)
0001DF06 2C9B                       		move.l	(a3)+,(a6)
0001DF08 2C9B                       		move.l	(a3)+,(a6)
0001DF0A 2C9B                       		move.l	(a3)+,(a6)
0001DF0C 2C9B                       		move.l	(a3)+,(a6)
0001DF0E 2C9B                       		move.l	(a3)+,(a6)
0001DF10 2C9B                       		move.l	(a3)+,(a6)
0001DF12 2C9B                       		move.l	(a3)+,(a6)
0001DF14 2C9B                       		move.l	(a3)+,(a6)
0001DF16 2C9B                       		move.l	(a3)+,(a6)
0001DF18 2C9B                       		move.l	(a3)+,(a6)
0001DF1A 2C9B                       		move.l	(a3)+,(a6)
0001DF1C 2C9B                       		move.l	(a3)+,(a6)
0001DF1E 2C9B                       		move.l	(a3)+,(a6)
0001DF20 0680 0040 0000             		addi.l	#$400000,d0
0001DF26 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001DF2A                            
0001DF2A 4E75                       		rts	
0001DF2C                            ; End of function Hud_Secs
0001DF2C                            
0001DF2C                            ; ---------------------------------------------------------------------------
0001DF2C                            ; Subroutine to	load time/ring bonus numbers patterns
0001DF2C                            ; ---------------------------------------------------------------------------
0001DF2C                            
0001DF2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DF2C                            
0001DF2C                            
0001DF2C                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001DF2C 45F9 0001 DEB8             		lea	(Hud_1000).l,a2
0001DF32 7C03                       		moveq	#3,d6
0001DF34 7800                       		moveq	#0,d4
0001DF36 43FA 0000                  		lea	Art_Hud(pc),a1
0001DF3A                            
0001DF3A                            Hud_BonusLoop:
0001DF3A 7400                       		moveq	#0,d2
0001DF3C 261A                       		move.l	(a2)+,d3
0001DF3E                            
0001DF3E                            loc_1CA1E:
0001DF3E 9283                       		sub.l	d3,d1
0001DF40 6500                       		bcs.s	loc_1CA26
0001DF42 5242                       		addq.w	#1,d2
0001DF44 60F8                       		bra.s	loc_1CA1E
0001DF46                            ; ===========================================================================
0001DF46                            
0001DF46                            loc_1CA26:
0001DF46 D283                       		add.l	d3,d1
0001DF48 4A42                       		tst.w	d2
0001DF4A 6700                       		beq.s	loc_1CA30
0001DF4C 383C 0001                  		move.w	#1,d4
0001DF50                            
0001DF50                            loc_1CA30:
0001DF50 4A44                       		tst.w	d4
0001DF52 6700                       		beq.s	Hud_ClrBonus
0001DF54 ED4A                       		lsl.w	#6,d2
0001DF56 47F1 2000                  		lea	(a1,d2.w),a3
0001DF5A 2C9B                       		move.l	(a3)+,(a6)
0001DF5C 2C9B                       		move.l	(a3)+,(a6)
0001DF5E 2C9B                       		move.l	(a3)+,(a6)
0001DF60 2C9B                       		move.l	(a3)+,(a6)
0001DF62 2C9B                       		move.l	(a3)+,(a6)
0001DF64 2C9B                       		move.l	(a3)+,(a6)
0001DF66 2C9B                       		move.l	(a3)+,(a6)
0001DF68 2C9B                       		move.l	(a3)+,(a6)
0001DF6A 2C9B                       		move.l	(a3)+,(a6)
0001DF6C 2C9B                       		move.l	(a3)+,(a6)
0001DF6E 2C9B                       		move.l	(a3)+,(a6)
0001DF70 2C9B                       		move.l	(a3)+,(a6)
0001DF72 2C9B                       		move.l	(a3)+,(a6)
0001DF74 2C9B                       		move.l	(a3)+,(a6)
0001DF76 2C9B                       		move.l	(a3)+,(a6)
0001DF78 2C9B                       		move.l	(a3)+,(a6)
0001DF7A                            
0001DF7A                            loc_1CA5A:
0001DF7A 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001DF7E                            
0001DF7E 4E75                       		rts	
0001DF80                            ; ===========================================================================
0001DF80                            
0001DF80                            Hud_ClrBonus:
0001DF80 7A0F                       		moveq	#$F,d5
0001DF82                            
0001DF82                            Hud_ClrBonusLoop:
0001DF82 2CBC 0000 0000             		move.l	#0,(a6)
0001DF88 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001DF8C                            
0001DF8C 60EC                       		bra.s	loc_1CA5A
0001DF8E                            ; End of function Hud_TimeRingBonus
0001DF8E                            
0001DF8E                            ; ---------------------------------------------------------------------------
0001DF8E                            ; Subroutine to	load uncompressed lives	counter	patterns
0001DF8E                            ; ---------------------------------------------------------------------------
0001DF8E                            
0001DF8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DF8E                            
0001DF8E                            
0001DF8E                            Hud_Lives:				; XREF: Hud_ChkLives
0001DF8E 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001DF94 7200                       		moveq	#0,d1
0001DF96 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001DF9A 45F9 0001 DEC0             		lea	(Hud_10).l,a2
0001DFA0 7C01                       		moveq	#1,d6
0001DFA2 7800                       		moveq	#0,d4
0001DFA4 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001DFA8                            
0001DFA8                            Hud_LivesLoop:
0001DFA8 2D40 0004                  		move.l	d0,4(a6)
0001DFAC 7400                       		moveq	#0,d2
0001DFAE 261A                       		move.l	(a2)+,d3
0001DFB0                            
0001DFB0                            loc_1CA90:
0001DFB0 9283                       		sub.l	d3,d1
0001DFB2 6500                       		bcs.s	loc_1CA98
0001DFB4 5242                       		addq.w	#1,d2
0001DFB6 60F8                       		bra.s	loc_1CA90
0001DFB8                            ; ===========================================================================
0001DFB8                            
0001DFB8                            loc_1CA98:
0001DFB8 D283                       		add.l	d3,d1
0001DFBA 4A42                       		tst.w	d2
0001DFBC 6700                       		beq.s	loc_1CAA2
0001DFBE 383C 0001                  		move.w	#1,d4
0001DFC2                            
0001DFC2                            loc_1CAA2:
0001DFC2 4A44                       		tst.w	d4
0001DFC4 6700                       		beq.s	Hud_ClrLives
0001DFC6                            
0001DFC6                            loc_1CAA6:
0001DFC6 EB4A                       		lsl.w	#5,d2
0001DFC8 47F1 2000                  		lea	(a1,d2.w),a3
0001DFCC 2C9B                       		move.l	(a3)+,(a6)
0001DFCE 2C9B                       		move.l	(a3)+,(a6)
0001DFD0 2C9B                       		move.l	(a3)+,(a6)
0001DFD2 2C9B                       		move.l	(a3)+,(a6)
0001DFD4 2C9B                       		move.l	(a3)+,(a6)
0001DFD6 2C9B                       		move.l	(a3)+,(a6)
0001DFD8 2C9B                       		move.l	(a3)+,(a6)
0001DFDA 2C9B                       		move.l	(a3)+,(a6)
0001DFDC                            
0001DFDC                            loc_1CABC:
0001DFDC 0680 0040 0000             		addi.l	#$400000,d0
0001DFE2 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001DFE6                            
0001DFE6 4E75                       		rts	
0001DFE8                            ; ===========================================================================
0001DFE8                            
0001DFE8                            Hud_ClrLives:
0001DFE8 4A46                       		tst.w	d6
0001DFEA 67DA                       		beq.s	loc_1CAA6
0001DFEC 7A07                       		moveq	#7,d5
0001DFEE                            
0001DFEE                            Hud_ClrLivesLoop:
0001DFEE 2CBC 0000 0000             		move.l	#0,(a6)
0001DFF4 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001DFF8 60E2                       		bra.s	loc_1CABC
0001DFFA                            ; End of function Hud_Lives
0001DFFA                            
0001DFFA                            ; ===========================================================================
0001DFFA                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001E2FA                            		even
0001E2FA                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001E43A                            		even
0001E43A                            ; ===========================================================================
0001E43A                            ; ---------------------------------------------------------------------------
0001E43A                            ; When debug mode is currently in use
0001E43A                            ; ---------------------------------------------------------------------------
0001E43A                            
0001E43A                            DebugMode:				; XREF: Obj01; Obj09
0001E43A 7000                       		moveq	#0,d0
0001E43C 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001E440 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001E444 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001E448                            ; ===========================================================================
0001E448 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001E44A 0000                       		dc.w Debug_Skip-Debug_Index
0001E44C                            ; ===========================================================================
0001E44C                            
0001E44C                            Debug_Main:				; XREF: Debug_Index
0001E44C 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001E450 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001E456 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001E45C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001E462 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001E468 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001E46E 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001E474 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001E47A 117C 0000 001A             		move.b	#0,$1A(a0)
0001E480 117C 0000 001C             		move.b	#0,$1C(a0)
0001E486 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001E48C 6600                       		bne.s	Debug_Zone	; if not, branch
0001E48E 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001E494 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001E49A 7006                       		moveq	#6,d0		; use 6th debug	item list
0001E49C 6000                       		bra.s	Debug_UseList
0001E49E                            ; ===========================================================================
0001E49E                            
0001E49E                            Debug_Zone:
0001E49E 7000                       		moveq	#0,d0
0001E4A0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E4A4                            
0001E4A4                            Debug_UseList:
0001E4A4 45F9 0000 0000             		lea	(DebugList).l,a2
0001E4AA D040                       		add.w	d0,d0
0001E4AC D4F2 0000                  		adda.w	(a2,d0.w),a2
0001E4B0 3C1A                       		move.w	(a2)+,d6
0001E4B2 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001E4B6 6200                       		bhi.s	loc_1CF9E
0001E4B8 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001E4BE                            
0001E4BE                            loc_1CF9E:
0001E4BE 6100 0000                  		bsr.w	Debug_ShowItem
0001E4C2 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001E4C8 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001E4CE                            
0001E4CE                            Debug_Skip:				; XREF: Debug_Index
0001E4CE 7006                       		moveq	#6,d0
0001E4D0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001E4D6 6700                       		beq.s	loc_1CFBE
0001E4D8 7000                       		moveq	#0,d0
0001E4DA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E4DE                            
0001E4DE                            loc_1CFBE:
0001E4DE 45F9 0000 0000             		lea	(DebugList).l,a2
0001E4E4 D040                       		add.w	d0,d0
0001E4E6 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001E4EA 3C1A                       		move.w	(a2)+,d6
0001E4EC 6100 0000                  		bsr.w	Debug_Control
0001E4F0 4EF9 0000 E756             		jmp	DisplaySprite
0001E4F6                            
0001E4F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E4F6                            
0001E4F6                            
0001E4F6                            Debug_Control:
0001E4F6 7800                       		moveq	#0,d4
0001E4F8 323C 0001                  		move.w	#1,d1
0001E4FC 1838 F605                  		move.b	($FFFFF605).w,d4
0001E500 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001E504 6600                       		bne.s	loc_1D018	; if yes, branch
0001E506 1038 F604                  		move.b	($FFFFF604).w,d0
0001E50A 0240 000F                  		andi.w	#$F,d0
0001E50E 6600                       		bne.s	loc_1D000
0001E510 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001E516 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001E51C 6000 0000                  		bra.w	Debug_BackItem
0001E520                            ; ===========================================================================
0001E520                            
0001E520                            loc_1D000:
0001E520 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001E524 6600                       		bne.s	loc_1D01C
0001E526 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001E52C 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001E530 6600                       		bne.s	loc_1D018
0001E532 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001E538                            
0001E538                            loc_1D018:
0001E538 1838 F604                  		move.b	($FFFFF604).w,d4
0001E53C                            
0001E53C                            loc_1D01C:
0001E53C 7200                       		moveq	#0,d1
0001E53E 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001E542 5241                       		addq.w	#1,d1
0001E544 4841                       		swap	d1
0001E546 E881                       		asr.l	#4,d1
0001E548 2428 000C                  		move.l	$C(a0),d2
0001E54C 2628 0008                  		move.l	8(a0),d3
0001E550 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001E554 6700                       		beq.s	loc_1D03C	; if not, branch
0001E556 9481                       		sub.l	d1,d2
0001E558 6400                       		bcc.s	loc_1D03C
0001E55A 7400                       		moveq	#0,d2
0001E55C                            
0001E55C                            loc_1D03C:
0001E55C 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001E560 6700                       		beq.s	loc_1D052	; if not, branch
0001E562 D481                       		add.l	d1,d2
0001E564 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001E56A 6500                       		bcs.s	loc_1D052
0001E56C 243C 07FF 0000             		move.l	#$7FF0000,d2
0001E572                            
0001E572                            loc_1D052:
0001E572 0804 0002                  		btst	#2,d4
0001E576 6700                       		beq.s	loc_1D05E
0001E578 9681                       		sub.l	d1,d3
0001E57A 6400                       		bcc.s	loc_1D05E
0001E57C 7600                       		moveq	#0,d3
0001E57E                            
0001E57E                            loc_1D05E:
0001E57E 0804 0003                  		btst	#3,d4
0001E582 6700                       		beq.s	loc_1D066
0001E584 D681                       		add.l	d1,d3
0001E586                            
0001E586                            loc_1D066:
0001E586 2142 000C                  		move.l	d2,$C(a0)
0001E58A 2143 0008                  		move.l	d3,8(a0)
0001E58E                            
0001E58E                            Debug_BackItem:
0001E58E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001E594 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001E596 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001E59C 6700                       		beq.s	Debug_NextItem	; if not, branch
0001E59E 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001E5A2 6400                       		bcc.s	Debug_NoLoop
0001E5A4 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001E5A8 6000                       		bra.s	Debug_NoLoop
0001E5AA                            ; ===========================================================================
0001E5AA                            
0001E5AA                            Debug_NextItem:
0001E5AA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001E5B0 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001E5B2 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001E5B6 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001E5BA 6200                       		bhi.s	Debug_NoLoop
0001E5BC 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001E5C2                            
0001E5C2                            Debug_NoLoop:
0001E5C2 6000 0000                  		bra.w	Debug_ShowItem
0001E5C6                            ; ===========================================================================
0001E5C6                            
0001E5C6                            Debug_MakeItem:
0001E5C6 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001E5CC 6700                       		beq.s	Debug_Exit	; if not, branch
0001E5CE 4EB9 0000 EBDC             		jsr	SingleObjLoad
0001E5D4 6600                       		bne.s	Debug_Exit
0001E5D6 3368 0008 0008             		move.w	8(a0),8(a1)
0001E5DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001E5E2 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001E5E6 1368 0001 0001             		move.b	1(a0),1(a1)
0001E5EC 1368 0001 0022             		move.b	1(a0),$22(a1)
0001E5F2 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001E5F8 7000                       		moveq	#0,d0
0001E5FA 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001E5FE E748                       		lsl.w	#3,d0
0001E600 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001E606 4E75                       		rts	
0001E608                            ; ===========================================================================
0001E608                            
0001E608                            Debug_Exit:
0001E608 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001E60E 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001E610 7000                       		moveq	#0,d0
0001E612 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001E616 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001E61E 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001E624 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001E628 3140 000A                  		move.w	d0,$A(a0)
0001E62C 3140 000E                  		move.w	d0,$E(a0)
0001E630 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001E636 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001E63C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001E642 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001E644 4278 F780                  		clr.w	($FFFFF780).w
0001E648 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001E64E 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001E656 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001E65C 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001E662 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001E668 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001E66E                            
0001E66E                            Debug_DoNothing:
0001E66E 4E75                       		rts	
0001E670                            ; End of function Debug_Control
0001E670                            
0001E670                            
0001E670                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E670                            
0001E670                            
0001E670                            Debug_ShowItem:				; XREF: Debug_Main
0001E670 7000                       		moveq	#0,d0
0001E672 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001E676 E748                       		lsl.w	#3,d0
0001E678 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001E67E 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001E684 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001E68A 4E75                       		rts	
0001E68C                            ; End of function Debug_ShowItem
0001E68C                            
0001E68C                            ; ===========================================================================
0001E68C                            ; ---------------------------------------------------------------------------
0001E68C                            ; Debug	list pointers
0001E68C                            ; ---------------------------------------------------------------------------
0001E68C                            DebugList:
0001E68C                            	include "_inc\Debug list pointers.asm"
0001E68C                            ; ---------------------------------------------------------------------------
0001E68C                            ; Debug	list pointers
0001E68C                            ; ---------------------------------------------------------------------------
0001E68C 0000                       	dc.w Debug_GHZ-DebugList
0001E68E 0000                       	dc.w Debug_LZ-DebugList
0001E690 0000                       	dc.w Debug_MZ-DebugList
0001E692 0000                       	dc.w Debug_SLZ-DebugList
0001E694 0000                       	dc.w Debug_SYZ-DebugList
0001E696 0000                       	dc.w Debug_SBZ-DebugList
0001E698 0000                       	dc.w Debug_Ending-DebugList
0001E69A 0000                       	dc.w Debug_GHZ-DebugList
0001E69A 0000                       	dc.w Debug_GHZ-DebugList
0001E69C                            
0001E69C                            ; ---------------------------------------------------------------------------
0001E69C                            ; Debug	list - Green Hill
0001E69C                            ; ---------------------------------------------------------------------------
0001E69C                            Debug_GHZ:
0001E69C                            	include "_inc\Debug list - GHZ.asm"
0001E69C                            ; ---------------------------------------------------------------------------
0001E69C                            ; Debug	list - Green Hill
0001E69C                            ; ---------------------------------------------------------------------------
0001E69C 0010                       	dc.w $10			; number of items in list
0001E69E 2500 AF42                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001E6A2 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001E6A6 2600 B548                  	dc.l Map_obj26+$26000000
0001E6AA 0000 0680                  	dc.b 0,	0, 6, $80
0001E6AE 1F00 A744                  	dc.l Map_obj1F+$1F000000
0001E6B2 0000 0400                  	dc.b 0,	0, 4, 0
0001E6B6 2200 AA00                  	dc.l Map_obj22+$22000000
0001E6BA 0000 0444                  	dc.b 0,	0, 4, $44
0001E6BE 2B00 BBBC                  	dc.l Map_obj2B+$2B000000
0001E6C2 0000 047B                  	dc.b 0,	0, 4, $7B
0001E6C6 3600 E0F8                  	dc.l Map_obj36+$36000000
0001E6CA 0000 051B                  	dc.b 0,	0, 5, $1B
0001E6CE 1800 9052                  	dc.l Map_obj18+$18000000
0001E6D2 0000 4000                  	dc.b 0,	0, $40,	0
0001E6D6 3B00 E21E                  	dc.l Map_obj3B+$3B000000
0001E6DA 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001E6DE 4001 08F0                  	dc.l Map_obj40+$40000000
0001E6E2 0000 04F0                  	dc.b 0,	0, 4, $F0
0001E6E6 4100 EE6A                  	dc.l Map_obj41+$41000000
0001E6EA 0000 0523                  	dc.b 0,	0, 5, $23
0001E6EE 4200 F090                  	dc.l Map_obj42+$42000000
0001E6F2 0000 249B                  	dc.b 0,	0, $24,	$9B
0001E6F6 4400 F39E                  	dc.l Map_obj44+$44000000
0001E6FA 0000 434C                  	dc.b 0,	0, $43,	$4C
0001E6FE 1900 9152                  	dc.l Map_obj48+$19000000
0001E702 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001E706 7901 839A                  	dc.l Map_obj79+$79000000
0001E70A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E70E 4B00 AF82                  	dc.l Map_obj4B+$4B000000
0001E712 0000 2400                  	dc.b 0,	0, $24,	0
0001E716 7D01 84EA                  	dc.l Map_obj7D+$7D000000
0001E71A 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001E71E                            	even
0001E71E                            	even
0001E71E                            
0001E71E                            ; ---------------------------------------------------------------------------
0001E71E                            ; Debug	list - Labyrinth
0001E71E                            ; ---------------------------------------------------------------------------
0001E71E                            Debug_LZ:
0001E71E                            	include "_inc\Debug list - LZ.asm"
0001E71E                            ; ---------------------------------------------------------------------------
0001E71E                            ; Debug	list - Labyrinth
0001E71E                            ; ---------------------------------------------------------------------------
0001E71E 0019                       	dc.w $19
0001E720 2500 AF42                  	dc.l Map_obj25+$25000000
0001E724 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E728 2600 B548                  	dc.l Map_obj26+$26000000
0001E72C 0000 0680                  	dc.b 0,	0, 6, $80
0001E730 4100 EE6A                  	dc.l Map_obj41+$41000000
0001E734 0000 0523                  	dc.b 0,	0, 5, $23
0001E738 2C00 BC6C                  	dc.l Map_obj2C+$2C000000
0001E73C 0800 2486                  	dc.b 8,	0, $24,	$86
0001E740 2D00 BE60                  	dc.l Map_obj2D+$2D000000
0001E744 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001E748 1601 30CA                  	dc.l Map_obj16+$16000000
0001E74C 0000 03CC                  	dc.b 0,	0, 3, $CC
0001E750 1601 30CA                  	dc.l Map_obj16+$16000000
0001E754 0203 03CC                  	dc.b 2,	3, 3, $CC
0001E758 3300 D318                  	dc.l Map_obj33+$33000000
0001E75C 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001E760 3200 CED8                  	dc.l Map_obj32+$32000000
0001E764 0000 0513                  	dc.b 0,	0, 5, $13
0001E768 3600 E0F8                  	dc.l Map_obj36+$36000000
0001E76C 0000 051B                  	dc.b 0,	0, 5, $1B
0001E770 5201 11EC                  	dc.l Map_obj52a+$52000000
0001E774 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001E778 6101 32F2                  	dc.l Map_obj61+$61000000
0001E77C 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001E780 6101 32F2                  	dc.l Map_obj61+$61000000
0001E784 1301 43E6                  	dc.b $13, 1, $43, $E6
0001E788 6101 32F2                  	dc.l Map_obj61+$61000000
0001E78C 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001E790 6201 3446                  	dc.l Map_obj62+$62000000
0001E794 0000 443E                  	dc.b 0,	0, $44,	$3E
0001E798 6101 32F2                  	dc.l Map_obj61+$61000000
0001E79C 2702 43E6                  	dc.b $27, 2, $43, $E6
0001E7A0 6101 32F2                  	dc.l Map_obj61+$61000000
0001E7A4 3003 43E6                  	dc.b $30, 3, $43, $E6
0001E7A8 6301 37A4                  	dc.l Map_obj63+$63000000
0001E7AC 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001E7B0 6001 3014                  	dc.l Map_obj60+$60000000
0001E7B4 0000 0467                  	dc.b 0,	0, 4, $67
0001E7B8 6401 3AEA                  	dc.l Map_obj64+$64000000
0001E7BC 8413 8348                  	dc.b $84, $13, $83, $48
0001E7C0 6501 3C72                  	dc.l Map_obj65+$65000000
0001E7C4 0202 C259                  	dc.b 2,	2, $C2,	$59
0001E7C8 6501 3C72                  	dc.l Map_obj65+$65000000
0001E7CC 0909 C259                  	dc.b 9,	9, $C2,	$59
0001E7D0 0B01 2464                  	dc.l Map_obj0B+$B000000
0001E7D4 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001E7D8 0C01 2534                  	dc.l Map_obj0C+$C000000
0001E7DC 0200 4328                  	dc.b 2,	0, $43,	$28
0001E7E0 7901 839A                  	dc.l Map_obj79+$79000000
0001E7E4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E7E8                            	even
0001E7E8                            	even
0001E7E8                            
0001E7E8                            ; ---------------------------------------------------------------------------
0001E7E8                            ; Debug	list - Marble
0001E7E8                            ; ---------------------------------------------------------------------------
0001E7E8                            Debug_MZ:
0001E7E8                            	include "_inc\Debug list - MZ.asm"
0001E7E8                            ; ---------------------------------------------------------------------------
0001E7E8                            ; Debug	list - Marble
0001E7E8                            ; ---------------------------------------------------------------------------
0001E7E8 0012                       	dc.w $12
0001E7EA 2500 AF42                  	dc.l Map_obj25+$25000000
0001E7EE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E7F2 2600 B548                  	dc.l Map_obj26+$26000000
0001E7F6 0000 0680                  	dc.b 0,	0, 6, $80
0001E7FA 2200 AA00                  	dc.l Map_obj22+$22000000
0001E7FE 0000 0444                  	dc.b 0,	0, 4, $44
0001E802 3600 E0F8                  	dc.l Map_obj36+$36000000
0001E806 0000 051B                  	dc.b 0,	0, 5, $1B
0001E80A 4100 EE6A                  	dc.l Map_obj41+$41000000
0001E80E 0000 0523                  	dc.b 0,	0, 5, $23
0001E812 1300 C3A2                  	dc.l Map_obj14+$13000000
0001E816 0000 0345                  	dc.b 0,	0, 3, $45
0001E81A 4600 FA50                  	dc.l Map_obj46+$46000000
0001E81E 0000 4000                  	dc.b 0,	0, $40,	0
0001E822 4C01 039C                  	dc.l Map_obj4C+$4C000000
0001E826 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001E82A 4E01 0680                  	dc.l Map_obj4E+$4E000000
0001E82E 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001E832 3300 D318                  	dc.l Map_obj33+$33000000
0001E836 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001E83A 5001 0A7E                  	dc.l Map_obj50+$50000000
0001E83E 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E842 5101 0F20                  	dc.l Map_obj51+$51000000
0001E846 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001E84A 5201 1196                  	dc.l Map_obj52+$52000000
0001E84E 0000 02B8                  	dc.b 0,	0, 2, $B8
0001E852 5300 96EA                  	dc.l Map_obj53+$53000000
0001E856 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001E85A 5401 0362                  	dc.l Map_obj54+$54000000
0001E85E 0000 8680                  	dc.b 0,	0, $86,	$80
0001E862 5501 138A                  	dc.l Map_obj55+$55000000
0001E866 0000 04B8                  	dc.b 0,	0, 4, $B8
0001E86A 7801 8014                  	dc.l Map_obj78+$78000000
0001E86E 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E872 7901 839A                  	dc.l Map_obj79+$79000000
0001E876 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E87A                            	even
0001E87A                            	even
0001E87A                            
0001E87A                            ; ---------------------------------------------------------------------------
0001E87A                            ; Debug	list - Star Light
0001E87A                            ; ---------------------------------------------------------------------------
0001E87A                            Debug_SLZ:
0001E87A                            	include "_inc\Debug list - SLZ.asm"
0001E87A                            ; ---------------------------------------------------------------------------
0001E87A                            ; Debug	list - Star Light
0001E87A                            ; ---------------------------------------------------------------------------
0001E87A 000F                       	dc.w $F
0001E87C 2500 AF42                  	dc.l Map_obj25+$25000000
0001E880 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E884 2600 B548                  	dc.l Map_obj26+$26000000
0001E888 0000 0680                  	dc.b 0,	0, 6, $80
0001E88C 5901 1E8C                  	dc.l Map_obj59+$59000000
0001E890 0000 4000                  	dc.b 0,	0, $40,	0
0001E894 5300 96EA                  	dc.l Map_obj53+$53000000
0001E898 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001E89C 1800 90B0                  	dc.l Map_obj18b+$18000000
0001E8A0 0000 4000                  	dc.b 0,	0, $40,	0
0001E8A4 5A01 1FC6                  	dc.l Map_obj5A+$5A000000
0001E8A8 0000 4000                  	dc.b 0,	0, $40,	0
0001E8AC 5B01 217E                  	dc.l Map_obj5B+$5B000000
0001E8B0 0000 4000                  	dc.b 0,	0, $40,	0
0001E8B4 5D01 274E                  	dc.l Map_obj5D+$5D000000
0001E8B8 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001E8BC 5E01 2AE0                  	dc.l Map_obj5E+$5E000000
0001E8C0 0000 0374                  	dc.b 0,	0, 3, $74
0001E8C4 4100 EE6A                  	dc.l Map_obj41+$41000000
0001E8C8 0000 0523                  	dc.b 0,	0, 5, $23
0001E8CC 1300 C3A2                  	dc.l Map_obj14+$13000000
0001E8D0 0000 0480                  	dc.b 0,	0, 4, $80
0001E8D4 1C00 97FA                  	dc.l Map_obj1C+$1C000000
0001E8D8 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001E8DC 5F01 2D5E                  	dc.l Map_obj5F+$5F000000
0001E8E0 0000 0400                  	dc.b 0,	0, 4, 0
0001E8E4 6001 3014                  	dc.l Map_obj60+$60000000
0001E8E8 0000 2429                  	dc.b 0,	0, $24,	$29
0001E8EC 7901 839A                  	dc.l Map_obj79+$79000000
0001E8F0 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E8F4                            	even
0001E8F4                            	even
0001E8F4                            
0001E8F4                            ; ---------------------------------------------------------------------------
0001E8F4                            ; Debug	list - Spring Yard
0001E8F4                            ; ---------------------------------------------------------------------------
0001E8F4                            Debug_SYZ:
0001E8F4                            	include "_inc\Debug list - SYZ.asm"
0001E8F4                            ; ---------------------------------------------------------------------------
0001E8F4                            ; Debug	list - Spring Yard
0001E8F4                            ; ---------------------------------------------------------------------------
0001E8F4 000F                       	dc.w $F
0001E8F6 2500 AF42                  	dc.l Map_obj25+$25000000
0001E8FA 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E8FE 2600 B548                  	dc.l Map_obj26+$26000000
0001E902 0000 0680                  	dc.b 0,	0, 6, $80
0001E906 3600 E0F8                  	dc.l Map_obj36+$36000000
0001E90A 0000 051B                  	dc.b 0,	0, 5, $1B
0001E90E 4100 EE6A                  	dc.l Map_obj41+$41000000
0001E912 0000 0523                  	dc.b 0,	0, 5, $23
0001E916 4300 F2F0                  	dc.l Map_obj43+$43000000
0001E91A 0000 04B8                  	dc.b 0,	0, 4, $B8
0001E91E 1200 FACE                  	dc.l Map_obj12+$12000000
0001E922 0000 0000                  	dc.b 0,	0, 0, 0
0001E926 4700 FC4A                  	dc.l Map_obj47+$47000000
0001E92A 0000 0380                  	dc.b 0,	0, 3, $80
0001E92E 1F00 A744                  	dc.l Map_obj1F+$1F000000
0001E932 0000 0400                  	dc.b 0,	0, 4, 0
0001E936 2200 AA00                  	dc.l Map_obj22+$22000000
0001E93A 0000 0444                  	dc.b 0,	0, 4, $44
0001E93E 5001 0A7E                  	dc.l Map_obj50+$50000000
0001E942 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E946 1800 909E                  	dc.l Map_obj18a+$18000000
0001E94A 0000 4000                  	dc.b 0,	0, $40,	0
0001E94E 5601 184C                  	dc.l Map_obj56+$56000000
0001E952 0000 4000                  	dc.b 0,	0, $40,	0
0001E956 3200 CED8                  	dc.l Map_obj32+$32000000
0001E95A 0000 0513                  	dc.b 0,	0, 5, $13
0001E95E 7801 8014                  	dc.l Map_obj78+$78000000
0001E962 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E966 7901 839A                  	dc.l Map_obj79+$79000000
0001E96A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E96E                            	even
0001E96E                            	even
0001E96E                            
0001E96E                            ; ---------------------------------------------------------------------------
0001E96E                            ; Debug	list - Scrap Brain
0001E96E                            ; ---------------------------------------------------------------------------
0001E96E                            Debug_SBZ:
0001E96E                            	include "_inc\Debug list - SBZ.asm"
0001E96E                            ; ---------------------------------------------------------------------------
0001E96E                            ; Debug	list - Scrap Brain
0001E96E                            ; ---------------------------------------------------------------------------
0001E96E 001D                       	dc.w $1D
0001E970 2500 AF42                  	dc.l Map_obj25+$25000000
0001E974 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E978 2600 B548                  	dc.l Map_obj26+$26000000
0001E97C 0000 0680                  	dc.b 0,	0, 6, $80
0001E980 5F01 2D5E                  	dc.l Map_obj5F+$5F000000
0001E984 0000 0400                  	dc.b 0,	0, 4, 0
0001E988 6001 3014                  	dc.l Map_obj60+$60000000
0001E98C 0000 0429                  	dc.b 0,	0, 4, $29
0001E990 7801 8014                  	dc.l Map_obj78+$78000000
0001E994 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001E998 1501 1BE8                  	dc.l Map_obj15b+$15000000
0001E99C 0702 4391                  	dc.b 7,	2, $43,	$91
0001E9A0 6701 692C                  	dc.l Map_obj67+$67000000
0001E9A4 E000 C344                  	dc.b $E0, 0, $C3, $44
0001E9A8 5201 1196                  	dc.l Map_obj52+$52000000
0001E9AC 2802 22C0                  	dc.b $28, 2, $22, $C0
0001E9B0 3200 CED8                  	dc.l Map_obj32+$32000000
0001E9B4 0000 0513                  	dc.b 0,	0, 5, $13
0001E9B8 6901 6B86                  	dc.l Map_obj69+$69000000
0001E9BC 0300 4492                  	dc.b 3,	0, $44,	$92
0001E9C0 6901 6BE0                  	dc.l Map_obj69a+$69000000
0001E9C4 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001E9C8 6A01 6E3E                  	dc.l Map_obj6A+$6A000000
0001E9CC 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001E9D0 5300 96EA                  	dc.l Map_obj53+$53000000
0001E9D4 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001E9D8 5201 1196                  	dc.l Map_obj52+$52000000
0001E9DC 3903 4460                  	dc.b $39, 3, $44, $60
0001E9E0 6B01 720E                  	dc.l Map_obj6B+$6B000000
0001E9E4 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001E9E8 2A00 9990                  	dc.l Map_obj2A+$2A000000
0001E9EC 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001E9F0 6B01 720E                  	dc.l Map_obj6B+$6B000000
0001E9F4 1301 22C0                  	dc.b $13, 1, $22, $C0
0001E9F8 6A01 6E3E                  	dc.l Map_obj6A+$6A000000
0001E9FC 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001EA00 6B01 720E                  	dc.l Map_obj6B+$6B000000
0001EA04 2401 22C0                  	dc.b $24, 1, $22, $C0
0001EA08 6A01 6E3E                  	dc.l Map_obj6A+$6A000000
0001EA0C 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001EA10 6B01 720E                  	dc.l Map_obj6B+$6B000000
0001EA14 3401 22C0                  	dc.b $34, 1, $22, $C0
0001EA18 6C01 73D0                  	dc.l Map_obj6C+$6C000000
0001EA1C 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001EA20 6D00 F740                  	dc.l Map_obj6D+$6D000000
0001EA24 6400 83D9                  	dc.b $64, 0, $83, $D9
0001EA28 6D00 F740                  	dc.l Map_obj6D+$6D000000
0001EA2C 640B 83D9                  	dc.b $64, $B, $83, $D9
0001EA30 6E01 7486                  	dc.l Map_obj6E+$6E000000
0001EA34 0400 047E                  	dc.b 4,	0, 4, $7E
0001EA38 7001 78D8                  	dc.l Map_obj70+$70000000
0001EA3C 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001EA40 7101 25F4                  	dc.l Map_obj71+$71000000
0001EA44 1100 8680                  	dc.b $11, 0, $86, $80
0001EA48 1E00 9E4E                  	dc.l Map_obj1E+$1E000000
0001EA4C 0400 2302                  	dc.b 4,	0, $23,	2
0001EA50 7901 839A                  	dc.l Map_obj79+$79000000
0001EA54 0100 07A0                  	dc.b 1,	0, 7, $A0
0001EA58                            	even
0001EA58                            	even
0001EA58                            
0001EA58                            ; ---------------------------------------------------------------------------
0001EA58                            ; Debug	list - ending sequence / special stage
0001EA58                            ; ---------------------------------------------------------------------------
0001EA58                            Debug_Ending:
0001EA58                            	include "_inc\Debug list - Ending and SS.asm"
0001EA58                            ; ---------------------------------------------------------------------------
0001EA58                            ; Debug	list - ending sequence / special stage
0001EA58                            ; ---------------------------------------------------------------------------
0001EA58 000D                       	dc.w $D
0001EA5A 2500 AF42                  	dc.l Map_obj25+$25000000
0001EA5E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001EA62 4700 FC4A                  	dc.l Map_obj47+$47000000
0001EA66 0000 0380                  	dc.b 0,	0, 3, $80
0001EA6A 2800 A476                  	dc.l Map_obj28a+$28000000
0001EA6E 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001EA72 2800 A476                  	dc.l Map_obj28a+$28000000
0001EA76 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001EA7A 2800 A476                  	dc.l Map_obj28a+$28000000
0001EA7E 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001EA82 2800 A45E                  	dc.l Map_obj28+$28000000
0001EA86 0D00 0553                  	dc.b $D, 0, 5, $53
0001EA8A 2800 A45E                  	dc.l Map_obj28+$28000000
0001EA8E 0E00 0553                  	dc.b $E, 0, 5, $53
0001EA92 2800 A45E                  	dc.l Map_obj28+$28000000
0001EA96 0F00 0573                  	dc.b $F, 0, 5, $73
0001EA9A 2800 A45E                  	dc.l Map_obj28+$28000000
0001EA9E 1000 0573                  	dc.b $10, 0, 5,	$73
0001EAA2 2800 A476                  	dc.l Map_obj28a+$28000000
0001EAA6 1100 0585                  	dc.b $11, 0, 5,	$85
0001EAAA 2800 A48E                  	dc.l Map_obj28b+$28000000
0001EAAE 1200 0593                  	dc.b $12, 0, 5,	$93
0001EAB2 2800 A476                  	dc.l Map_obj28a+$28000000
0001EAB6 1300 0565                  	dc.b $13, 0, 5,	$65
0001EABA 2800 A48E                  	dc.l Map_obj28b+$28000000
0001EABE 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001EAC2                            	even
0001EAC2                            	even
0001EAC2                            
0001EAC2                            ; ---------------------------------------------------------------------------
0001EAC2                            ; Main level load blocks
0001EAC2                            ; ---------------------------------------------------------------------------
0001EAC2                            MainLoadBlocks:
0001EAC2                            	include "_inc\Main level load blocks.asm"
0001EAC2                            ; ---------------------------------------------------------------------------
0001EAC2                            ; Main level load blocks
0001EAC2                            ;
0001EAC2                            ; ===FORMAT===
0001EAC2                            ; level	patterns + (1st	PLC num	* 10^6)
0001EAC2                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001EAC2                            ; 256x256 mappings
0001EAC2                            ; blank, music (unused), pal index (unused), pal index
0001EAC2                            ; ---------------------------------------------------------------------------
0001EAC2 0000 0000                  	dc.l Nem_GHZ_2nd|4<<24
0001EAC6 0000 0000                  	dc.l Blk16_GHZ|5<<24
0001EACA 0000 0000                  	dc.l Blk256_GHZ
0001EACE 0081 0404                  	dc.b 0,	$81, 4,	4
0001EAD2 0000 0000                  	dc.l Nem_LZ|6<<24
0001EAD6 0000 0000                  	dc.l Blk16_LZ|7<<24
0001EADA 0000 0000                  	dc.l Blk256_LZ
0001EADE 0082 0505                  	dc.b 0,	$82, 5,	5
0001EAE2 0000 0000                  	dc.l Nem_MZ|8<<24
0001EAE6 0000 0000                  	dc.l Blk16_MZ|9<<24
0001EAEA 0000 0000                  	dc.l Blk256_MZ
0001EAEE 0083 0606                  	dc.b 0,	$83, 6,	6
0001EAF2 0000 0000                  	dc.l Nem_SLZ|$A<<24
0001EAF6 0000 0000                  	dc.l Blk16_SLZ|$B<<24
0001EAFA 0000 0000                  	dc.l Blk256_SLZ
0001EAFE 0084 0707                  	dc.b 0,	$84, 7,	7
0001EB02 0000 0000                  	dc.l Nem_SYZ|$C<<24
0001EB06 0000 0000                  	dc.l Blk16_SYZ|$D<<24
0001EB0A 0000 0000                  	dc.l Blk256_SYZ
0001EB0E 0085 0808                  	dc.b 0,	$85, 8,	8
0001EB12 0000 0000                  	dc.l Nem_SBZ|$E<<24
0001EB16 0000 0000                  	dc.l Blk16_SBZ|$F<<24
0001EB1A 0000 0000                  	dc.l Blk256_SBZ
0001EB1E 0086 0909                  	dc.b 0,	$86, 9,	9
0001EB22 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001EB26 0000 0000                  	dc.l Blk16_GHZ
0001EB2A 0000 0000                  	dc.l Blk256_GHZ
0001EB2E 0086 1313                  	dc.b 0,	$86, $13, $13
0001EB32                            ; there you go lol
0001EB32 0000 0000                  	dc.l Nem_BHZ|$20<<24 ; MAKOTO ZONE
0001EB36 0000 0000                  	dc.l Blk16_BHZ|$21<<24
0001EB3A 0000 0000                  	dc.l Blk256_BHZ
0001EB3E 009E 1515                  	dc.b 0,	$9E, $15, $15
0001EB42                            	even
0001EB42                            	even
0001EB42                            
0001EB42                            ; ---------------------------------------------------------------------------
0001EB42                            ; Pattern load cues
0001EB42                            ; ---------------------------------------------------------------------------
0001EB42                            ArtLoadCues:
0001EB42                            	include "_inc\Pattern load cues.asm"
0001EB42                            ; ---------------------------------------------------------------------------
0001EB42                            ; Pattern load cues - index
0001EB42                            ; ---------------------------------------------------------------------------
0001EB42 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues	; 0
0001EB46 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues	; 2
0001EB4A 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues		; 4
0001EB4E 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001EB52 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001EB56 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001EB5A 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001EB5E 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001EB62 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues	; $10
0001EB66 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001EB6A 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001EB6E 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001EB72 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001EB76 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001EB7A 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001EB7E 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001EB82                            
0001EB82 0000 0000                  	dc.w PLC_BHZ-ArtLoadCues, PLC_BHZ2-ArtLoadCues		; $20
0001EB86 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001EB88 0000                       	dc.w PLC_TruthNuke-ArtLoadCues	; GMZ
0001EB8A                            ; ---------------------------------------------------------------------------
0001EB8A                            ; Pattern load cues - standard block 1
0001EB8A                            ; ---------------------------------------------------------------------------
0001EB8A 0004                       PLC_Main:	dc.w 4
0001EB8C 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001EB90 F400                       		dc.w $F400
0001EB92 0000 0000                  		dc.l Nem_Hud		; HUD
0001EB96 D940                       		dc.w $D940
0001EB98 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001EB9C FA80                       		dc.w $FA80
0001EB9E 0000 0000                  		dc.l Nem_Ring		; rings
0001EBA2 F640                       		dc.w $F640
0001EBA4 0000 0000                  		dc.l Nem_Points		; points from enemy
0001EBA8 F2E0                       		dc.w $F2E0
0001EBAA                            ; ---------------------------------------------------------------------------
0001EBAA                            ; Pattern load cues - standard block 2
0001EBAA                            ; ---------------------------------------------------------------------------
0001EBAA 0002                       PLC_Main2:	dc.w 2
0001EBAC 0000 0000                  		dc.l Nem_Monitors	; monitors
0001EBB0 D000                       		dc.w $D000
0001EBB2 0000 0000                  		dc.l Nem_Shield		; shield
0001EBB6 A820                       		dc.w $A820
0001EBB8 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001EBBC AB80                       		dc.w $AB80
0001EBBE                            ; ---------------------------------------------------------------------------
0001EBBE                            ; Pattern load cues - explosion
0001EBBE                            ; ---------------------------------------------------------------------------
0001EBBE 0000                       PLC_Explode:	dc.w 0
0001EBC0 0000 0000                  		dc.l Nem_Explode	; explosion
0001EBC4 B400                       		dc.w $B400
0001EBC6                            ; ---------------------------------------------------------------------------
0001EBC6                            ; Pattern load cues - game/time	over
0001EBC6                            ; ---------------------------------------------------------------------------
0001EBC6 0000                       PLC_GameOver:	dc.w 0
0001EBC8 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001EBCC ABC0                       		dc.w $ABC0
0001EBCE                            ; ---------------------------------------------------------------------------
0001EBCE                            ; Pattern load cues - Green Hill
0001EBCE                            ; ---------------------------------------------------------------------------
0001EBCE 000B                       PLC_GHZ:	dc.w $B
0001EBD0 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001EBD4 0000                       		dc.w 0
0001EBD6 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001EBDA 39A0                       		dc.w $39A0
0001EBDC 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001EBE0 6B00                       		dc.w $6B00
0001EBE2 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001EBE6 7A00                       		dc.w $7A00
0001EBE8 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001EBEC 8000                       		dc.w $8000
0001EBEE 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001EBF2 8880                       		dc.w $8880
0001EBF4 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001EBF8 8F60                       		dc.w $8F60
0001EBFA 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001EBFE 9360                       		dc.w $9360
0001EC00 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001EC04 9E00                       		dc.w $9E00
0001EC06 0000 0000                  		dc.l Nem_Spikes		; spikes
0001EC0A A360                       		dc.w $A360
0001EC0C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001EC10 A460                       		dc.w $A460
0001EC12 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001EC16 A660                       		dc.w $A660
0001EC18 0005                       PLC_GHZ2:	dc.w 5
0001EC1A 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001EC1E 7000                       		dc.w $7000
0001EC20 0000 0000                  		dc.l Nem_Bridge		; bridge
0001EC24 71C0                       		dc.w $71C0
0001EC26 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001EC2A 7300                       		dc.w $7300
0001EC2C 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001EC30 7540                       		dc.w $7540
0001EC32 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001EC36 A1E0                       		dc.w $A1E0
0001EC38 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001EC3C 6980                       		dc.w $6980
0001EC3E                            ; ---------------------------------------------------------------------------
0001EC3E                            ; Pattern load cues - Labyrinth
0001EC3E                            ; ---------------------------------------------------------------------------
0001EC3E 000B                       PLC_LZ:		dc.w $B
0001EC40 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001EC44 0000                       		dc.w 0
0001EC46 0000 0000                  		dc.l Nem_LzBlock1	; block
0001EC4A 3C00                       		dc.w $3C00
0001EC4C 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001EC50 3E00                       		dc.w $3E00
0001EC52 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001EC56 4B20                       		dc.w $4B20
0001EC58 0000 0000                  		dc.l Nem_Water		; water	surface
0001EC5C 6000                       		dc.w $6000
0001EC5E 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001EC62 6200                       		dc.w $6200
0001EC64 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001EC68 6500                       		dc.w $6500
0001EC6A 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001EC6E 6900                       		dc.w $6900
0001EC70 0000 0000                  		dc.l Nem_LzBlock3	; block
0001EC74 7780                       		dc.w $7780
0001EC76 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001EC7A 7880                       		dc.w $7880
0001EC7C 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001EC80 7980                       		dc.w $7980
0001EC82 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001EC86 94C0                       		dc.w $94C0
0001EC88 000C                       PLC_LZ2:	dc.w $C
0001EC8A 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001EC8E 7BC0                       		dc.w $7BC0
0001EC90 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001EC94 7CC0                       		dc.w $7CC0
0001EC96 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001EC9A 7EC0                       		dc.w $7EC0
0001EC9C 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001ECA0 5D20                       		dc.w $5D20
0001ECA2 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001ECA6 8800                       		dc.w $8800
0001ECA8 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001ECAC 89E0                       		dc.w $89E0
0001ECAE 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001ECB2 8CE0                       		dc.w $8CE0
0001ECB4 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001ECB8 90C0                       		dc.w $90C0
0001ECBA 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001ECBE A1E0                       		dc.w $A1E0
0001ECC0 0000 0000                  		dc.l Nem_Cork		; cork block
0001ECC4 A000                       		dc.w $A000
0001ECC6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001ECCA A360                       		dc.w $A360
0001ECCC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001ECD0 A460                       		dc.w $A460
0001ECD2 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001ECD6 A660                       		dc.w $A660
0001ECD8                            ; ---------------------------------------------------------------------------
0001ECD8                            ; Pattern load cues - Marble
0001ECD8                            ; ---------------------------------------------------------------------------
0001ECD8 0009                       PLC_MZ:		dc.w 9
0001ECDA 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001ECDE 0000                       		dc.w 0
0001ECE0 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001ECE4 6000                       		dc.w $6000
0001ECE6 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001ECEA 68A0                       		dc.w $68A0
0001ECEC 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001ECF0 7000                       		dc.w $7000
0001ECF2 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001ECF6 71C0                       		dc.w $71C0
0001ECF8 0000 0000                  		dc.l Nem_Lava		; lava
0001ECFC 7500                       		dc.w $7500
0001ECFE 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001ED02 8880                       		dc.w $8880
0001ED04 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001ED08 8F60                       		dc.w $8F60
0001ED0A 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001ED0E 9700                       		dc.w $9700
0001ED10 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001ED14 9FE0                       		dc.w $9FE0
0001ED16 0004                       PLC_MZ2:	dc.w 4
0001ED18 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001ED1C A260                       		dc.w $A260
0001ED1E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001ED22 A360                       		dc.w $A360
0001ED24 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001ED28 A460                       		dc.w $A460
0001ED2A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001ED2E A660                       		dc.w $A660
0001ED30 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001ED34 5700                       		dc.w $5700
0001ED36                            ; ---------------------------------------------------------------------------
0001ED36                            ; Pattern load cues - Star Light
0001ED36                            ; ---------------------------------------------------------------------------
0001ED36 0008                       PLC_SLZ:	dc.w 8
0001ED38 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001ED3C 0000                       		dc.w 0
0001ED3E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001ED42 8000                       		dc.w $8000
0001ED44 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001ED48 8520                       		dc.w $8520
0001ED4A 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001ED4E 9000                       		dc.w $9000
0001ED50 0000 0000                  		dc.l Nem_SlzBlock	; block
0001ED54 9C00                       		dc.w $9C00
0001ED56 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001ED5A A260                       		dc.w $A260
0001ED5C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001ED60 A360                       		dc.w $A360
0001ED62 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001ED66 A460                       		dc.w $A460
0001ED68 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001ED6C A660                       		dc.w $A660
0001ED6E 0005                       PLC_SLZ2:	dc.w 5
0001ED70 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001ED74 6E80                       		dc.w $6E80
0001ED76 0000 0000                  		dc.l Nem_Fan		; fan
0001ED7A 7400                       		dc.w $7400
0001ED7C 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001ED80 7980                       		dc.w $7980
0001ED82 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001ED86 7B80                       		dc.w $7B80
0001ED88 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001ED8C 9B00                       		dc.w $9B00
0001ED8E 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001ED92 9E00                       		dc.w $9E00
0001ED94                            ; ---------------------------------------------------------------------------
0001ED94                            ; Pattern load cues - Spring Yard
0001ED94                            ; ---------------------------------------------------------------------------
0001ED94 0004                       PLC_SYZ:	dc.w 4
0001ED96 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001ED9A 0000                       		dc.w 0
0001ED9C 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001EDA0 8000                       		dc.w $8000
0001EDA2 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001EDA6 8880                       		dc.w $8880
0001EDA8 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001EDAC 8F60                       		dc.w $8F60
0001EDAE 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001EDB2 9700                       		dc.w $9700
0001EDB4 0007                       PLC_SYZ2:	dc.w 7
0001EDB6 0000 0000                  		dc.l Nem_Bumper		; bumper
0001EDBA 7000                       		dc.w $7000
0001EDBC 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001EDC0 72C0                       		dc.w $72C0
0001EDC2 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001EDC6 7740                       		dc.w $7740
0001EDC8 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001EDCC 9FE0                       		dc.w $9FE0
0001EDCE 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001EDD2 A1E0                       		dc.w $A1E0
0001EDD4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001EDD8 A360                       		dc.w $A360
0001EDDA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001EDDE A460                       		dc.w $A460
0001EDE0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001EDE4 A660                       		dc.w $A660
0001EDE6                            ; ---------------------------------------------------------------------------
0001EDE6                            ; Pattern load cues - Scrap Brain
0001EDE6                            ; ---------------------------------------------------------------------------
0001EDE6 000B                       PLC_SBZ:	dc.w $B
0001EDE8 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001EDEC 0000                       		dc.w 0
0001EDEE 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001EDF2 5800                       		dc.w $5800
0001EDF4 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001EDF8 5D00                       		dc.w $5D00
0001EDFA 0000 0000                  		dc.l Nem_Girder		; girder
0001EDFE 5E00                       		dc.w $5E00
0001EE00 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001EE04 6040                       		dc.w $6040
0001EE06 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001EE0A 6880                       		dc.w $6880
0001EE0C 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001EE10 6900                       		dc.w $6900
0001EE12 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001EE16 7220                       		dc.w $7220
0001EE18 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001EE1C 76A0                       		dc.w $76A0
0001EE1E 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001EE22 7B20                       		dc.w $7B20
0001EE24 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001EE28 7EA0                       		dc.w $7EA0
0001EE2A 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001EE2E 9860                       		dc.w $9860
0001EE30 000C                       PLC_SBZ2:	dc.w $C
0001EE32 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001EE36 5600                       		dc.w $5600
0001EE38 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001EE3C 8000                       		dc.w $8000
0001EE3E 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001EE42 8520                       		dc.w $8520
0001EE44 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001EE48 8C00                       		dc.w $8C00
0001EE4A 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001EE4E 8DE0                       		dc.w $8DE0
0001EE50 0000 0000                  		dc.l Nem_Electric	; electric orb
0001EE54 8FC0                       		dc.w $8FC0
0001EE56 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001EE5A 9240                       		dc.w $9240
0001EE5C 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001EE60 7F20                       		dc.w $7F20
0001EE62 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001EE66 9BE0                       		dc.w $9BE0
0001EE68 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001EE6C A1E0                       		dc.w $A1E0
0001EE6E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001EE72 A360                       		dc.w $A360
0001EE74 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001EE78 A460                       		dc.w $A460
0001EE7A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001EE7E A660                       		dc.w $A660
0001EE80                            ; ---------------------------------------------------------------------------
0001EE80                            ; Pattern load cues - DR. Breen Hill
0001EE80                            ; ---------------------------------------------------------------------------
0001EE80 000A                       PLC_BHZ:	dc.w $A
0001EE82 0000 0000                  		dc.l Nem_BHZ	; GHZ main patterns
0001EE86 0000                       		dc.w 0
0001EE88 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001EE8C 6B00                       		dc.w $6B00
0001EE8E 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001EE92 7A00                       		dc.w $7A00
0001EE94 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001EE98 8000                       		dc.w $8000
0001EE9A 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001EE9E 8880                       		dc.w $8880
0001EEA0 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001EEA4 8F60                       		dc.w $8F60
0001EEA6 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001EEAA 9360                       		dc.w $9360
0001EEAC 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001EEB0 9E00                       		dc.w $9E00
0001EEB2 0000 0000                  		dc.l Nem_Spikes		; spikes
0001EEB6 A360                       		dc.w $A360
0001EEB8 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001EEBC A460                       		dc.w $A460
0001EEBE 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001EEC2 A660                       		dc.w $A660
0001EEC4 0005                       PLC_BHZ2:	dc.w 5
0001EEC6 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001EECA 7000                       		dc.w $7000
0001EECC 0000 0000                  		dc.l Nem_Bridge		; bridge
0001EED0 71C0                       		dc.w $71C0
0001EED2 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001EED6 7300                       		dc.w $7300
0001EED8 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001EEDC 7540                       		dc.w $7540
0001EEDE 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001EEE2 A1E0                       		dc.w $A1E0
0001EEE4 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001EEE8 6980                       		dc.w $6980
0001EEEA                            ; ---------------------------------------------------------------------------
0001EEEA                            ; Pattern load cues - title card
0001EEEA                            ; ---------------------------------------------------------------------------
0001EEEA 0000                       PLC_TitleCard:	dc.w 0
0001EEEC 0000 0000                  		dc.l Nem_TitleCard
0001EEF0 B000                       		dc.w $B000
0001EEF2                            ; ---------------------------------------------------------------------------
0001EEF2                            ; Pattern load cues - act 3 boss
0001EEF2                            ; ---------------------------------------------------------------------------
0001EEF2 0005                       PLC_Boss:	dc.w 5
0001EEF4 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001EEF8 8000                       		dc.w $8000
0001EEFA 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001EEFE 8D80                       		dc.w $8D80
0001EF00 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001EF04 93A0                       		dc.w $93A0
0001EF06 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001EF0A A300                       		dc.w $A300
0001EF0C 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001EF10 A300                       		dc.w $A300
0001EF12 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001EF16 A540                       		dc.w $A540
0001EF18                            ; ---------------------------------------------------------------------------
0001EF18                            ; Pattern load cues - act 1/2 signpost
0001EF18                            ; ---------------------------------------------------------------------------
0001EF18 0002                       PLC_Signpost:	dc.w 2
0001EF1A 0000 0000                  		dc.l Nem_SignPost	; signpost
0001EF1E D000                       		dc.w $D000
0001EF20 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001EF24 96C0                       		dc.w $96C0
0001EF26 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001EF2A 8C40                       		dc.w $8C40
0001EF2C                            ; ---------------------------------------------------------------------------
0001EF2C                            ; Pattern load cues - beta special stage warp effect
0001EF2C                            ; ---------------------------------------------------------------------------
0001EF2C 0000                       PLC_Warp:	dc.w 0
0001EF2E 0000 0000                  		dc.l Nem_Warp
0001EF32 A820                       		dc.w $A820
0001EF34                            ; ---------------------------------------------------------------------------
0001EF34                            ; Pattern load cues - special stage
0001EF34                            ; ---------------------------------------------------------------------------
0001EF34 0010                       PLC_SpeStage:	dc.w $10
0001EF36 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001EF3A 0000                       		dc.w 0
0001EF3C 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001EF40 0A20                       		dc.w $A20
0001EF42 0000 0000                  		dc.l Nem_SSWalls	; walls
0001EF46 2840                       		dc.w $2840
0001EF48 0000 0000                  		dc.l Nem_Bumper		; bumper
0001EF4C 4760                       		dc.w $4760
0001EF4E 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001EF52 4A20                       		dc.w $4A20
0001EF54 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001EF58 4C60                       		dc.w $4C60
0001EF5A 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001EF5E 5E00                       		dc.w $5E00
0001EF60 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001EF64 6E00                       		dc.w $6E00
0001EF66 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001EF6A 7E00                       		dc.w $7E00
0001EF6C 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001EF70 8E00                       		dc.w $8E00
0001EF72 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001EF76 9E00                       		dc.w $9E00
0001EF78 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001EF7C AE00                       		dc.w $AE00
0001EF7E 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001EF82 BE00                       		dc.w $BE00
0001EF84 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001EF88 EE00                       		dc.w $EE00
0001EF8A 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001EF8E F2E0                       		dc.w $F2E0
0001EF90 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001EF94 F400                       		dc.w $F400
0001EF96 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001EF9A F520                       		dc.w $F520
0001EF9C 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001EFA0 F2E0                       		dc.w $F2E0
0001EFA2 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001EFA6 F400                       		dc.w $F400
0001EFA8 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001EFAC F520                       		dc.w $F520
0001EFAE                            ; ---------------------------------------------------------------------------
0001EFAE                            ; Pattern load cues - GHZ animals
0001EFAE                            ; ---------------------------------------------------------------------------
0001EFAE 0001                       PLC_GHZAnimals:	dc.w 1
0001EFB0 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001EFB4 B000                       		dc.w $B000
0001EFB6 0000 0000                  		dc.l Nem_Flicky		; flicky
0001EFBA B240                       		dc.w $B240
0001EFBC                            ; ---------------------------------------------------------------------------
0001EFBC                            ; Pattern load cues - LZ animals
0001EFBC                            ; ---------------------------------------------------------------------------
0001EFBC 0001                       PLC_LZAnimals:	dc.w 1
0001EFBE 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001EFC2 B000                       		dc.w $B000
0001EFC4 0000 0000                  		dc.l Nem_Seal		; seal
0001EFC8 B240                       		dc.w $B240
0001EFCA                            ; ---------------------------------------------------------------------------
0001EFCA                            ; Pattern load cues - MZ animals
0001EFCA                            ; ---------------------------------------------------------------------------
0001EFCA 0001                       PLC_MZAnimals:	dc.w 1
0001EFCC 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001EFD0 B000                       		dc.w $B000
0001EFD2 0000 0000                  		dc.l Nem_Seal		; seal
0001EFD6 B240                       		dc.w $B240
0001EFD8                            ; ---------------------------------------------------------------------------
0001EFD8                            ; Pattern load cues - SLZ animals
0001EFD8                            ; ---------------------------------------------------------------------------
0001EFD8 0001                       PLC_SLZAnimals:	dc.w 1
0001EFDA 0000 0000                  		dc.l Nem_Pig		; pig
0001EFDE B000                       		dc.w $B000
0001EFE0 0000 0000                  		dc.l Nem_Flicky		; flicky
0001EFE4 B240                       		dc.w $B240
0001EFE6                            ; ---------------------------------------------------------------------------
0001EFE6                            ; Pattern load cues - SYZ animals
0001EFE6                            ; ---------------------------------------------------------------------------
0001EFE6 0001                       PLC_SYZAnimals:	dc.w 1
0001EFE8 0000 0000                  		dc.l Nem_Pig		; pig
0001EFEC B000                       		dc.w $B000
0001EFEE 0000 0000                  		dc.l Nem_Chicken	; chicken
0001EFF2 B240                       		dc.w $B240
0001EFF4                            ; ---------------------------------------------------------------------------
0001EFF4                            ; Pattern load cues - SBZ animals
0001EFF4                            ; ---------------------------------------------------------------------------
0001EFF4 0001                       PLC_SBZAnimals:	dc.w 1
0001EFF6 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001EFFA B000                       		dc.w $B000
0001EFFC 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F000 B240                       		dc.w $B240
0001F002                            ; ---------------------------------------------------------------------------
0001F002                            ; Pattern load cues - special stage results screen
0001F002                            ; ---------------------------------------------------------------------------
0001F002 0001                       PLC_SpeStResult:dc.w 1
0001F004 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001F008 A820                       		dc.w $A820
0001F00A 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001F00E AA20                       		dc.w $AA20
0001F010                            ; ---------------------------------------------------------------------------
0001F010                            ; Pattern load cues - ending sequence
0001F010                            ; ---------------------------------------------------------------------------
0001F010 000E                       PLC_Ending:	dc.w $E
0001F012 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001F016 0000                       		dc.w 0
0001F018 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001F01C 39A0                       		dc.w $39A0
0001F01E 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001F022 6B00                       		dc.w $6B00
0001F024 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001F028 7400                       		dc.w $7400
0001F02A 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001F02E 78A0                       		dc.w $78A0
0001F030 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001F034 7C20                       		dc.w $7C20
0001F036 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001F03A A480                       		dc.w $A480
0001F03C 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001F040 AA60                       		dc.w $AA60
0001F042 0000 0000                  		dc.l Nem_Chicken	; chicken
0001F046 ACA0                       		dc.w $ACA0
0001F048 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001F04C AE60                       		dc.w $AE60
0001F04E 0000 0000                  		dc.l Nem_Seal		; seal
0001F052 B0A0                       		dc.w $B0A0
0001F054 0000 0000                  		dc.l Nem_Pig		; pig
0001F058 B260                       		dc.w $B260
0001F05A 0000 0000                  		dc.l Nem_Flicky		; flicky
0001F05E B4A0                       		dc.w $B4A0
0001F060 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001F064 B660                       		dc.w $B660
0001F066 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001F06A B8A0                       		dc.w $B8A0
0001F06C                            ; ---------------------------------------------------------------------------
0001F06C                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001F06C                            ; ---------------------------------------------------------------------------
0001F06C 0002                       PLC_TryAgain:	dc.w 2
0001F06E 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001F072 78A0                       		dc.w $78A0
0001F074 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001F078 7C20                       		dc.w $7C20
0001F07A 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001F07E B400                       		dc.w $B400
0001F080                            ; ---------------------------------------------------------------------------
0001F080                            ; Pattern load cues - Eggman on SBZ 2
0001F080                            ; ---------------------------------------------------------------------------
0001F080 0002                       PLC_EggmanSBZ2:	dc.w 2
0001F082 0000 0000                  		dc.l Nem_SbzBlock	; block
0001F086 A300                       		dc.w $A300
0001F088 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001F08C 8000                       		dc.w $8000
0001F08E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F092 9400                       		dc.w $9400
0001F094                            ; ---------------------------------------------------------------------------
0001F094                            ; Pattern load cues - final boss
0001F094                            ; ---------------------------------------------------------------------------
0001F094 0004                       PLC_FZBoss:	dc.w 4
0001F096 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001F09A 7400                       		dc.w $7400
0001F09C 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001F0A0 6000                       		dc.w $6000
0001F0A2 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001F0A6 8000                       		dc.w $8000
0001F0A8 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001F0AC 8E00                       		dc.w $8E00
0001F0AE 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001F0B2 A540                       		dc.w $A540
0001F0B4                            ; ---------------------------------------------------------------------------
0001F0B4                            ; Pattern load cues - Teto boss
0001F0B4                            ; ---------------------------------------------------------------------------
0001F0B4 0002                       PLC_TetoBoss:	dc.w 2
0001F0B6 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001F0BA 8000                       		dc.w $8000
0001F0BC 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001F0C0 93A0                       		dc.w $93A0
0001F0C2 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001F0C6 9000                       		dc.w $9000
0001F0C8                            		; even
0001F0C8                            ; ---------------------------------------------------------------------------
0001F0C8                            ; Pattern load cues - Truth Nuke
0001F0C8                            ; ---------------------------------------------------------------------------
0001F0C8 0000                       PLC_TruthNuke:	dc.w 0
0001F0CA 0000 0000                  		dc.l Nem_TruthNuke	; GMZ
0001F0CE 0000                       		dc.w 0
0001F0D0                            		even
0001F0D0                            		even
0001F0D0                            
0001F0D0                            		incbin	misc\padding.bin
0001F1BE                            		even
0001F1BE                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001F614                            		even
0001F614                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001F6AC                            		even
0001F6AC                            Nem_Gomer:	incbin	artnem\gomer.bin
0001F7EE                            		even
0001F7EE                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001F83C                            		even
0001F83C                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001F950                            		even
0001F950                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0002081A                            		even
0002081A                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00024920                            		even
00024920                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00024954                            		even
00024954                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00024A12                            		even
00024A12                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00024EBA                            		even
00024EBA                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
00024F18                            		even
00024F18                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00025B1E                            		even
00025B1E                            Eni_TruthNuke:	incbin	mapeni\truthnuke.bin	; GMZ
00025BFC                            		even
00025BFC                            Nem_TruthNuke:	incbin	artnem\truthnuke.bin	; GMZ: TRVTH NVKE
000290C6                            		even
000290C6                            ; ---------------------------------------------------------------------------
000290C6                            ; Sprite mappings - Sonic
000290C6                            ; ---------------------------------------------------------------------------
000290C6                            Map_Sonic:
000290C6                            	include "_maps\Sonic.asm"
000290C6                            Map_a933:
000290C6 0000                       Map_a933_0: 	dc.w Map_a933_E0-Map_a933
000290C8 0000                       Map_a933_2: 	dc.w Map_a933_E1-Map_a933
000290CA 0000                       Map_a933_4: 	dc.w Map_a933_EC-Map_a933
000290CC 0000                       Map_a933_6: 	dc.w Map_a933_FC-Map_a933
000290CE 0000                       Map_a933_8: 	dc.w Map_a933_10C-Map_a933
000290D0 0000                       Map_a933_A: 	dc.w Map_a933_11C-Map_a933
000290D2 0000                       Map_a933_C: 	dc.w Map_a933_12C-Map_a933
000290D4 0000                       Map_a933_E: 	dc.w Map_a933_141-Map_a933
000290D6 0000                       Map_a933_10: 	dc.w Map_a933_14C-Map_a933
000290D8 0000                       Map_a933_12: 	dc.w Map_a933_157-Map_a933
000290DA 0000                       Map_a933_14: 	dc.w Map_a933_16C-Map_a933
000290DC 0000                       Map_a933_16: 	dc.w Map_a933_177-Map_a933
000290DE 0000                       Map_a933_18: 	dc.w Map_a933_187-Map_a933
000290E0 0000                       Map_a933_1A: 	dc.w Map_a933_1A1-Map_a933
000290E2 0000                       Map_a933_1C: 	dc.w Map_a933_1C0-Map_a933
000290E4 0000                       Map_a933_1E: 	dc.w Map_a933_1D5-Map_a933
000290E6 0000                       Map_a933_20: 	dc.w Map_a933_1EF-Map_a933
000290E8 0000                       Map_a933_22: 	dc.w Map_a933_204-Map_a933
000290EA 0000                       Map_a933_24: 	dc.w Map_a933_21E-Map_a933
000290EC 0000                       Map_a933_26: 	dc.w Map_a933_233-Map_a933
000290EE 0000                       Map_a933_28: 	dc.w Map_a933_23E-Map_a933
000290F0 0000                       Map_a933_2A: 	dc.w Map_a933_249-Map_a933
000290F2 0000                       Map_a933_2C: 	dc.w Map_a933_25E-Map_a933
000290F4 0000                       Map_a933_2E: 	dc.w Map_a933_269-Map_a933
000290F6 0000                       Map_a933_30: 	dc.w Map_a933_279-Map_a933
000290F8 0000                       Map_a933_32: 	dc.w Map_a933_298-Map_a933
000290FA 0000                       Map_a933_34: 	dc.w Map_a933_2B7-Map_a933
000290FC 0000                       Map_a933_36: 	dc.w Map_a933_2CC-Map_a933
000290FE 0000                       Map_a933_38: 	dc.w Map_a933_2E6-Map_a933
00029100 0000                       Map_a933_3A: 	dc.w Map_a933_2FB-Map_a933
00029102 0000                       Map_a933_3C: 	dc.w Map_a933_315-Map_a933
00029104 0000                       Map_a933_3E: 	dc.w Map_a933_320-Map_a933
00029106 0000                       Map_a933_40: 	dc.w Map_a933_32B-Map_a933
00029108 0000                       Map_a933_42: 	dc.w Map_a933_336-Map_a933
0002910A 0000                       Map_a933_44: 	dc.w Map_a933_341-Map_a933
0002910C 0000                       Map_a933_46: 	dc.w Map_a933_356-Map_a933
0002910E 0000                       Map_a933_48: 	dc.w Map_a933_366-Map_a933
00029110 0000                       Map_a933_4A: 	dc.w Map_a933_37B-Map_a933
00029112 0000                       Map_a933_4C: 	dc.w Map_a933_38B-Map_a933
00029114 0000                       Map_a933_4E: 	dc.w Map_a933_396-Map_a933
00029116 0000                       Map_a933_50: 	dc.w Map_a933_3A1-Map_a933
00029118 0000                       Map_a933_52: 	dc.w Map_a933_3AC-Map_a933
0002911A 0000                       Map_a933_54: 	dc.w Map_a933_3B7-Map_a933
0002911C 0000                       Map_a933_56: 	dc.w Map_a933_3CC-Map_a933
0002911E 0000                       Map_a933_58: 	dc.w Map_a933_3D7-Map_a933
00029120 0000                       Map_a933_5A: 	dc.w Map_a933_3EC-Map_a933
00029122 0000                       Map_a933_5C: 	dc.w Map_a933_3F7-Map_a933
00029124 0000                       Map_a933_5E: 	dc.w Map_a933_3FD-Map_a933
00029126 0000                       Map_a933_60: 	dc.w Map_a933_403-Map_a933
00029128 0000                       Map_a933_62: 	dc.w Map_a933_409-Map_a933
0002912A 0000                       Map_a933_64: 	dc.w Map_a933_40F-Map_a933
0002912C 0000                       Map_a933_66: 	dc.w Map_a933_415-Map_a933
0002912E 0000                       Map_a933_68: 	dc.w Map_a933_420-Map_a933
00029130 0000                       Map_a933_6A: 	dc.w Map_a933_426-Map_a933
00029132 0000                       Map_a933_6C: 	dc.w Map_a933_431-Map_a933
00029134 0000                       Map_a933_6E: 	dc.w Map_a933_437-Map_a933
00029136 0000                       Map_a933_70: 	dc.w Map_a933_442-Map_a933
00029138 0000                       Map_a933_72: 	dc.w Map_a933_457-Map_a933
0002913A 0000                       Map_a933_74: 	dc.w Map_a933_476-Map_a933
0002913C 0000                       Map_a933_76: 	dc.w Map_a933_481-Map_a933
0002913E 0000                       Map_a933_78: 	dc.w Map_a933_48C-Map_a933
00029140 0000                       Map_a933_7A: 	dc.w Map_a933_4A1-Map_a933
00029142 0000                       Map_a933_7C: 	dc.w Map_a933_4AC-Map_a933
00029144 0000                       Map_a933_7E: 	dc.w Map_a933_4BC-Map_a933
00029146 0000                       Map_a933_80: 	dc.w Map_a933_4D1-Map_a933
00029148 0000                       Map_a933_82: 	dc.w Map_a933_4DC-Map_a933
0002914A 0000                       Map_a933_84: 	dc.w Map_a933_4F1-Map_a933
0002914C 0000                       Map_a933_86: 	dc.w Map_a933_506-Map_a933
0002914E 0000                       Map_a933_88: 	dc.w Map_a933_520-Map_a933
00029150 0000                       Map_a933_8A: 	dc.w Map_a933_53A-Map_a933
00029152 0000                       Map_a933_8C: 	dc.w Map_a933_545-Map_a933
00029154 0000                       Map_a933_8E: 	dc.w Map_a933_555-Map_a933
00029156 0000                       Map_a933_90: 	dc.w Map_a933_560-Map_a933
00029158 0000                       Map_a933_92: 	dc.w Map_a933_570-Map_a933
0002915A 0000                       Map_a933_94: 	dc.w Map_a933_57B-Map_a933
0002915C 0000                       Map_a933_96: 	dc.w Map_a933_58B-Map_a933
0002915E 0000                       Map_a933_98: 	dc.w Map_a933_59B-Map_a933
00029160 0000                       Map_a933_9A: 	dc.w Map_a933_5B5-Map_a933
00029162 0000                       Map_a933_9C: 	dc.w Map_a933_5CF-Map_a933
00029164 0000                       Map_a933_9E: 	dc.w Map_a933_5DA-Map_a933
00029166 0000                       Map_a933_A0: 	dc.w Map_a933_5EA-Map_a933
00029168 0000                       Map_a933_A2: 	dc.w Map_a933_5F0-Map_a933
0002916A 0000                       Map_a933_A4: 	dc.w Map_a933_5F6-Map_a933
0002916C 0000                       Map_a933_A6: 	dc.w Map_a933_5FC-Map_a933
0002916E 0000                       Map_a933_A8: 	dc.w Map_a933_611-Map_a933
00029170 0000                       Map_a933_AA: 	dc.w Map_a933_621-Map_a933
00029172 0000                       Map_a933_AC: 	dc.w Map_a933_631-Map_a933
00029174 0000                       Map_a933_AE: 	dc.w Map_a933_641-Map_a933
00029176 0000                       Map_a933_B0: 	dc.w Map_a933_64C-Map_a933
00029178 0000                       Map_a933_B2: 	dc.w Map_a933_657-Map_a933
0002917A 0000                       Map_a933_B4: 	dc.w Map_a933_667-Map_a933
0002917C 0000                       Map_a933_B6: 	dc.w Map_a933_672-Map_a933
0002917E 0000                       Map_a933_B8: 	dc.w Map_a933_687-Map_a933
00029180 0000                       Map_a933_BA: 	dc.w Map_a933_688-Map_a933
00029182 0000                       Map_a933_BC: 	dc.w Map_a933_689-Map_a933
00029184 0000                       Map_a933_BE: 	dc.w Map_a933_68A-Map_a933
00029186 0000                       Map_a933_C0: 	dc.w Map_a933_68B-Map_a933
00029188 0000                       Map_a933_C2: 	dc.w Map_a933_696-Map_a933
0002918A 0000                       Map_a933_C4: 	dc.w Map_a933_697-Map_a933
0002918C 0000                       Map_a933_C6: 	dc.w Map_a933_6A2-Map_a933
0002918E 0000                       Map_a933_C8: 	dc.w Map_a933_6A3-Map_a933
00029190 0000                       Map_a933_CA: 	dc.w Map_a933_6A4-Map_a933
00029192 0000                       Map_a933_CC: 	dc.w Map_a933_6A5-Map_a933
00029194 0000                       Map_a933_CE: 	dc.w Map_a933_6B0-Map_a933
00029196 0000                       Map_a933_D0: 	dc.w Map_a933_6B1-Map_a933
00029198 0000                       Map_a933_D2: 	dc.w Map_a933_6BC-Map_a933
0002919A 0000                       Map_a933_D4: 	dc.w Map_a933_6BD-Map_a933
0002919C 0000                       Map_a933_D6: 	dc.w Map_a933_6BE-Map_a933
0002919E 0000                       Map_a933_D8: 	dc.w Map_a933_6BF-Map_a933
000291A0 0000                       Map_a933_DA: 	dc.w Map_a933_6CA-Map_a933
000291A2 0000                       Map_a933_DC: 	dc.w Map_a933_6CB-Map_a933
000291A4 0000                       Map_a933_DE: 	dc.w Map_a933_6D6-Map_a933
000291A6 00                         Map_a933_E0: 	dc.b $0
000291A7 02                         Map_a933_E1: 	dc.b $2
000291A8 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
000291AD 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
000291B2 03                         Map_a933_EC: 	dc.b $3
000291B3 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000291B8 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000291BD 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000291C2 03                         Map_a933_FC: 	dc.b $3
000291C3 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000291C8 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000291CD 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000291D2 03                         Map_a933_10C: 	dc.b $3
000291D3 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000291D8 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000291DD 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000291E2 03                         Map_a933_11C: 	dc.b $3
000291E3 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000291E8 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
000291ED 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000291F2 04                         Map_a933_12C: 	dc.b $4
000291F3 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
000291F8 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
000291FD FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00029202 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00029207 02                         Map_a933_141: 	dc.b $2
00029208 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
0002920D FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00029212 02                         Map_a933_14C: 	dc.b $2
00029213 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00029218 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
0002921D 04                         Map_a933_157: 	dc.b $4
0002921E EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00029223 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00029228 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
0002922D 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00029232 02                         Map_a933_16C: 	dc.b $2
00029233 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00029238 EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
0002923D 03                         Map_a933_177: 	dc.b $3
0002923E ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00029243 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00029248 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
0002924D 05                         Map_a933_187: 	dc.b $5
0002924E EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00029253 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00029258 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
0002925D 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00029262 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00029267 06                         Map_a933_1A1: 	dc.b $6
00029268 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
0002926D EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00029272 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00029277 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
0002927C FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00029281 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00029286 04                         Map_a933_1C0: 	dc.b $4
00029287 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
0002928C ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00029291 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00029296 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
0002929B 05                         Map_a933_1D5: 	dc.b $5
0002929C EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
000292A1 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
000292A6 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
000292AB 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
000292B0 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
000292B5 04                         Map_a933_1EF: 	dc.b $4
000292B6 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
000292BB EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
000292C0 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
000292C5 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
000292CA 05                         Map_a933_204: 	dc.b $5
000292CB ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000292D0 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000292D5 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
000292DA FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
000292DF 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
000292E4 04                         Map_a933_21E: 	dc.b $4
000292E5 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
000292EA EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
000292EF FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
000292F4 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
000292F9 02                         Map_a933_233: 	dc.b $2
000292FA F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
000292FF EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00029304 02                         Map_a933_23E: 	dc.b $2
00029305 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
0002930A F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
0002930F 04                         Map_a933_249: 	dc.b $4
00029310 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00029315 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
0002931A FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
0002931F 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00029324 02                         Map_a933_25E: 	dc.b $2
00029325 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
0002932A F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
0002932F 03                         Map_a933_269: 	dc.b $3
00029330 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00029335 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
0002933A F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
0002933F 06                         Map_a933_279: 	dc.b $6
00029340 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00029345 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
0002934A F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
0002934F F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00029354 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00029359 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
0002935E 06                         Map_a933_298: 	dc.b $6
0002935F FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00029364 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00029369 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
0002936E F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00029373 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00029378 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
0002937D 04                         Map_a933_2B7: 	dc.b $4
0002937E FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00029383 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00029388 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
0002938D 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00029392 05                         Map_a933_2CC: 	dc.b $5
00029393 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00029398 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
0002939D F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
000293A2 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
000293A7 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
000293AC 04                         Map_a933_2E6: 	dc.b $4
000293AD FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000293B2 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
000293B7 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
000293BC 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
000293C1 05                         Map_a933_2FB: 	dc.b $5
000293C2 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000293C7 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
000293CC F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
000293D1 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000293D6 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
000293DB 02                         Map_a933_315: 	dc.b $2
000293DC EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000293E1 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000293E6 02                         Map_a933_320: 	dc.b $2
000293E7 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000293EC FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000293F1 02                         Map_a933_32B: 	dc.b $2
000293F2 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000293F7 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000293FC 02                         Map_a933_336: 	dc.b $2
000293FD EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00029402 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00029407 04                         Map_a933_341: 	dc.b $4
00029408 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002940D EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00029412 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00029417 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
0002941C 03                         Map_a933_356: 	dc.b $3
0002941D EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00029422 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00029427 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002942C 04                         Map_a933_366: 	dc.b $4
0002942D EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00029432 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00029437 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002943C FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00029441 03                         Map_a933_37B: 	dc.b $3
00029442 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00029447 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002944C FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00029451 02                         Map_a933_38B: 	dc.b $2
00029452 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00029457 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002945C 02                         Map_a933_396: 	dc.b $2
0002945D F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00029462 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00029467 02                         Map_a933_3A1: 	dc.b $2
00029468 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002946D F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00029472 02                         Map_a933_3AC: 	dc.b $2
00029473 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00029478 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002947D 04                         Map_a933_3B7: 	dc.b $4
0002947E FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00029483 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00029488 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002948D 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00029492 02                         Map_a933_3CC: 	dc.b $2
00029493 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00029498 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002949D 04                         Map_a933_3D7: 	dc.b $4
0002949E FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000294A3 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000294A8 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000294AD 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000294B2 02                         Map_a933_3EC: 	dc.b $2
000294B3 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000294B8 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000294BD 01                         Map_a933_3F7: 	dc.b $1
000294BE F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000294C3 01                         Map_a933_3FD: 	dc.b $1
000294C4 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000294C9 01                         Map_a933_403: 	dc.b $1
000294CA F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000294CF 01                         Map_a933_409: 	dc.b $1
000294D0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000294D5 01                         Map_a933_40F: 	dc.b $1
000294D6 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000294DB 02                         Map_a933_415: 	dc.b $2
000294DC F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
000294E1 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
000294E6 01                         Map_a933_420: 	dc.b $1
000294E7 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000294EC 02                         Map_a933_426: 	dc.b $2
000294ED EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000294F2 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
000294F7 01                         Map_a933_431: 	dc.b $1
000294F8 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000294FD 02                         Map_a933_437: 	dc.b $2
000294FE ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00029503 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
00029508 04                         Map_a933_442: 	dc.b $4
00029509 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
0002950E FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00029513 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
00029518 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
0002951D 06                         Map_a933_457: 	dc.b $6
0002951E F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00029523 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
00029528 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
0002952D 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00029532 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
00029537 F400 0011 04               	dc.b $F4, $0, $0, $11, $4
0002953C 02                         Map_a933_476: 	dc.b $2
0002953D 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00029542 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
00029547 02                         Map_a933_481: 	dc.b $2
00029548 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
0002954D EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00029552 04                         Map_a933_48C: 	dc.b $4
00029553 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00029558 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
0002955D 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00029562 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00029567 02                         Map_a933_4A1: 	dc.b $2
00029568 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
0002956D F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00029572 03                         Map_a933_4AC: 	dc.b $3
00029573 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
00029578 FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
0002957D 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00029582 04                         Map_a933_4BC: 	dc.b $4
00029583 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00029588 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
0002958D 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00029592 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00029597 02                         Map_a933_4D1: 	dc.b $2
00029598 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
0002959D 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
000295A2 04                         Map_a933_4DC: 	dc.b $4
000295A3 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000295A8 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000295AD F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000295B2 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000295B7 04                         Map_a933_4F1: 	dc.b $4
000295B8 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000295BD 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000295C2 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000295C7 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000295CC 05                         Map_a933_506: 	dc.b $5
000295CD E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000295D2 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
000295D7 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000295DC 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000295E1 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000295E6 05                         Map_a933_520: 	dc.b $5
000295E7 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000295EC E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000295F1 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000295F6 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000295FB 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00029600 02                         Map_a933_53A: 	dc.b $2
00029601 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00029606 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
0002960B 03                         Map_a933_545: 	dc.b $3
0002960C EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00029611 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00029616 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
0002961B 02                         Map_a933_555: 	dc.b $2
0002961C ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00029621 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00029626 03                         Map_a933_560: 	dc.b $3
00029627 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
0002962C 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00029631 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00029636 02                         Map_a933_570: 	dc.b $2
00029637 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002963C FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00029641 03                         Map_a933_57B: 	dc.b $3
00029642 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00029647 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
0002964C E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00029651 03                         Map_a933_58B: 	dc.b $3
00029652 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00029657 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002965C F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00029661 05                         Map_a933_59B: 	dc.b $5
00029662 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00029667 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002966C F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00029671 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00029676 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002967B 05                         Map_a933_5B5: 	dc.b $5
0002967C E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00029681 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00029686 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002968B 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00029690 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00029695 02                         Map_a933_5CF: 	dc.b $2
00029696 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002969B F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
000296A0 03                         Map_a933_5DA: 	dc.b $3
000296A1 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000296A6 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
000296AB 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
000296B0 01                         Map_a933_5EA: 	dc.b $1
000296B1 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
000296B6 01                         Map_a933_5F0: 	dc.b $1
000296B7 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
000296BC 01                         Map_a933_5F6: 	dc.b $1
000296BD F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000296C2 04                         Map_a933_5FC: 	dc.b $4
000296C3 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
000296C8 F705 0808 04               	dc.b $F7, $5, $8, $8, $4
000296CD 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
000296D2 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
000296D7 03                         Map_a933_611: 	dc.b $3
000296D8 F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
000296DD FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
000296E2 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
000296E7 03                         Map_a933_621: 	dc.b $3
000296E8 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
000296ED F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000296F2 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
000296F7 03                         Map_a933_631: 	dc.b $3
000296F8 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000296FD FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
00029702 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
00029707 02                         Map_a933_641: 	dc.b $2
00029708 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
0002970D F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
00029712 02                         Map_a933_64C: 	dc.b $2
00029713 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00029718 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002971D 03                         Map_a933_657: 	dc.b $3
0002971E ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
00029723 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
00029728 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
0002972D 02                         Map_a933_667: 	dc.b $2
0002972E F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
00029733 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
00029738 04                         Map_a933_672: 	dc.b $4
00029739 ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
0002973E F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
00029743 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
00029748 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
0002974D 00                         Map_a933_687: 	dc.b $0
0002974E 00                         Map_a933_688: 	dc.b $0
0002974F 00                         Map_a933_689: 	dc.b $0
00029750 00                         Map_a933_68A: 	dc.b $0
00029751 02                         Map_a933_68B: 	dc.b $2
00029752 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00029757 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002975C 00                         Map_a933_696: 	dc.b $0
0002975D 02                         Map_a933_697: 	dc.b $2
0002975E F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00029763 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00029768 00                         Map_a933_6A2: 	dc.b $0
00029769 00                         Map_a933_6A3: 	dc.b $0
0002976A 00                         Map_a933_6A4: 	dc.b $0
0002976B 02                         Map_a933_6A5: 	dc.b $2
0002976C F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00029771 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00029776 00                         Map_a933_6B0: 	dc.b $0
00029777 02                         Map_a933_6B1: 	dc.b $2
00029778 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002977D EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00029782 00                         Map_a933_6BC: 	dc.b $0
00029783 00                         Map_a933_6BD: 	dc.b $0
00029784 00                         Map_a933_6BE: 	dc.b $0
00029785 02                         Map_a933_6BF: 	dc.b $2
00029786 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002978B EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00029790 00                         Map_a933_6CA: 	dc.b $0
00029791 02                         Map_a933_6CB: 	dc.b $2
00029792 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00029797 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002979C 00                         Map_a933_6D6: 	dc.b $0
0002979E 00                         	even
0002979E 00                         	even
0002979E                            
0002979E                            ; ---------------------------------------------------------------------------
0002979E                            ; Uncompressed graphics	loading	array for Sonic
0002979E                            ; ---------------------------------------------------------------------------
0002979E                            SonicDynPLC:
0002979E                            	include "_inc\Sonic dynamic pattern load cues.asm"
0002979E                            DPLC_33c5:
0002979E 0000                       DPLC_33c5_0: 	dc.w DPLC_33c5_E0-DPLC_33c5
000297A0 0000                       DPLC_33c5_2: 	dc.w DPLC_33c5_E1-DPLC_33c5
000297A2 0000                       DPLC_33c5_4: 	dc.w DPLC_33c5_E6-DPLC_33c5
000297A4 0000                       DPLC_33c5_6: 	dc.w DPLC_33c5_ED-DPLC_33c5
000297A6 0000                       DPLC_33c5_8: 	dc.w DPLC_33c5_F4-DPLC_33c5
000297A8 0000                       DPLC_33c5_A: 	dc.w DPLC_33c5_FB-DPLC_33c5
000297AA 0000                       DPLC_33c5_C: 	dc.w DPLC_33c5_102-DPLC_33c5
000297AC 0000                       DPLC_33c5_E: 	dc.w DPLC_33c5_10B-DPLC_33c5
000297AE 0000                       DPLC_33c5_10: 	dc.w DPLC_33c5_110-DPLC_33c5
000297B0 0000                       DPLC_33c5_12: 	dc.w DPLC_33c5_115-DPLC_33c5
000297B2 0000                       DPLC_33c5_14: 	dc.w DPLC_33c5_11E-DPLC_33c5
000297B4 0000                       DPLC_33c5_16: 	dc.w DPLC_33c5_123-DPLC_33c5
000297B6 0000                       DPLC_33c5_18: 	dc.w DPLC_33c5_12A-DPLC_33c5
000297B8 0000                       DPLC_33c5_1A: 	dc.w DPLC_33c5_135-DPLC_33c5
000297BA 0000                       DPLC_33c5_1C: 	dc.w DPLC_33c5_142-DPLC_33c5
000297BC 0000                       DPLC_33c5_1E: 	dc.w DPLC_33c5_14B-DPLC_33c5
000297BE 0000                       DPLC_33c5_20: 	dc.w DPLC_33c5_156-DPLC_33c5
000297C0 0000                       DPLC_33c5_22: 	dc.w DPLC_33c5_15F-DPLC_33c5
000297C2 0000                       DPLC_33c5_24: 	dc.w DPLC_33c5_16A-DPLC_33c5
000297C4 0000                       DPLC_33c5_26: 	dc.w DPLC_33c5_173-DPLC_33c5
000297C6 0000                       DPLC_33c5_28: 	dc.w DPLC_33c5_178-DPLC_33c5
000297C8 0000                       DPLC_33c5_2A: 	dc.w DPLC_33c5_17D-DPLC_33c5
000297CA 0000                       DPLC_33c5_2C: 	dc.w DPLC_33c5_186-DPLC_33c5
000297CC 0000                       DPLC_33c5_2E: 	dc.w DPLC_33c5_18B-DPLC_33c5
000297CE 0000                       DPLC_33c5_30: 	dc.w DPLC_33c5_192-DPLC_33c5
000297D0 0000                       DPLC_33c5_32: 	dc.w DPLC_33c5_19F-DPLC_33c5
000297D2 0000                       DPLC_33c5_34: 	dc.w DPLC_33c5_1AC-DPLC_33c5
000297D4 0000                       DPLC_33c5_36: 	dc.w DPLC_33c5_1B5-DPLC_33c5
000297D6 0000                       DPLC_33c5_38: 	dc.w DPLC_33c5_1C0-DPLC_33c5
000297D8 0000                       DPLC_33c5_3A: 	dc.w DPLC_33c5_1C9-DPLC_33c5
000297DA 0000                       DPLC_33c5_3C: 	dc.w DPLC_33c5_1D4-DPLC_33c5
000297DC 0000                       DPLC_33c5_3E: 	dc.w DPLC_33c5_1D9-DPLC_33c5
000297DE 0000                       DPLC_33c5_40: 	dc.w DPLC_33c5_1DE-DPLC_33c5
000297E0 0000                       DPLC_33c5_42: 	dc.w DPLC_33c5_1E3-DPLC_33c5
000297E2 0000                       DPLC_33c5_44: 	dc.w DPLC_33c5_1E8-DPLC_33c5
000297E4 0000                       DPLC_33c5_46: 	dc.w DPLC_33c5_1F1-DPLC_33c5
000297E6 0000                       DPLC_33c5_48: 	dc.w DPLC_33c5_1F8-DPLC_33c5
000297E8 0000                       DPLC_33c5_4A: 	dc.w DPLC_33c5_201-DPLC_33c5
000297EA 0000                       DPLC_33c5_4C: 	dc.w DPLC_33c5_208-DPLC_33c5
000297EC 0000                       DPLC_33c5_4E: 	dc.w DPLC_33c5_20D-DPLC_33c5
000297EE 0000                       DPLC_33c5_50: 	dc.w DPLC_33c5_212-DPLC_33c5
000297F0 0000                       DPLC_33c5_52: 	dc.w DPLC_33c5_217-DPLC_33c5
000297F2 0000                       DPLC_33c5_54: 	dc.w DPLC_33c5_21C-DPLC_33c5
000297F4 0000                       DPLC_33c5_56: 	dc.w DPLC_33c5_225-DPLC_33c5
000297F6 0000                       DPLC_33c5_58: 	dc.w DPLC_33c5_22A-DPLC_33c5
000297F8 0000                       DPLC_33c5_5A: 	dc.w DPLC_33c5_233-DPLC_33c5
000297FA 0000                       DPLC_33c5_5C: 	dc.w DPLC_33c5_238-DPLC_33c5
000297FC 0000                       DPLC_33c5_5E: 	dc.w DPLC_33c5_23B-DPLC_33c5
000297FE 0000                       DPLC_33c5_60: 	dc.w DPLC_33c5_23E-DPLC_33c5
00029800 0000                       DPLC_33c5_62: 	dc.w DPLC_33c5_241-DPLC_33c5
00029802 0000                       DPLC_33c5_64: 	dc.w DPLC_33c5_244-DPLC_33c5
00029804 0000                       DPLC_33c5_66: 	dc.w DPLC_33c5_247-DPLC_33c5
00029806 0000                       DPLC_33c5_68: 	dc.w DPLC_33c5_24C-DPLC_33c5
00029808 0000                       DPLC_33c5_6A: 	dc.w DPLC_33c5_24F-DPLC_33c5
0002980A 0000                       DPLC_33c5_6C: 	dc.w DPLC_33c5_254-DPLC_33c5
0002980C 0000                       DPLC_33c5_6E: 	dc.w DPLC_33c5_257-DPLC_33c5
0002980E 0000                       DPLC_33c5_70: 	dc.w DPLC_33c5_25C-DPLC_33c5
00029810 0000                       DPLC_33c5_72: 	dc.w DPLC_33c5_265-DPLC_33c5
00029812 0000                       DPLC_33c5_74: 	dc.w DPLC_33c5_26A-DPLC_33c5
00029814 0000                       DPLC_33c5_76: 	dc.w DPLC_33c5_26F-DPLC_33c5
00029816 0000                       DPLC_33c5_78: 	dc.w DPLC_33c5_274-DPLC_33c5
00029818 0000                       DPLC_33c5_7A: 	dc.w DPLC_33c5_279-DPLC_33c5
0002981A 0000                       DPLC_33c5_7C: 	dc.w DPLC_33c5_27C-DPLC_33c5
0002981C 0000                       DPLC_33c5_7E: 	dc.w DPLC_33c5_283-DPLC_33c5
0002981E 0000                       DPLC_33c5_80: 	dc.w DPLC_33c5_288-DPLC_33c5
00029820 0000                       DPLC_33c5_82: 	dc.w DPLC_33c5_28B-DPLC_33c5
00029822 0000                       DPLC_33c5_84: 	dc.w DPLC_33c5_294-DPLC_33c5
00029824 0000                       DPLC_33c5_86: 	dc.w DPLC_33c5_29D-DPLC_33c5
00029826 0000                       DPLC_33c5_88: 	dc.w DPLC_33c5_2A8-DPLC_33c5
00029828 0000                       DPLC_33c5_8A: 	dc.w DPLC_33c5_2B3-DPLC_33c5
0002982A 0000                       DPLC_33c5_8C: 	dc.w DPLC_33c5_2B8-DPLC_33c5
0002982C 0000                       DPLC_33c5_8E: 	dc.w DPLC_33c5_2BF-DPLC_33c5
0002982E 0000                       DPLC_33c5_90: 	dc.w DPLC_33c5_2C4-DPLC_33c5
00029830 0000                       DPLC_33c5_92: 	dc.w DPLC_33c5_2CB-DPLC_33c5
00029832 0000                       DPLC_33c5_94: 	dc.w DPLC_33c5_2D0-DPLC_33c5
00029834 0000                       DPLC_33c5_96: 	dc.w DPLC_33c5_2D7-DPLC_33c5
00029836 0000                       DPLC_33c5_98: 	dc.w DPLC_33c5_2DE-DPLC_33c5
00029838 0000                       DPLC_33c5_9A: 	dc.w DPLC_33c5_2E9-DPLC_33c5
0002983A 0000                       DPLC_33c5_9C: 	dc.w DPLC_33c5_2F4-DPLC_33c5
0002983C 0000                       DPLC_33c5_9E: 	dc.w DPLC_33c5_2F9-DPLC_33c5
0002983E 0000                       DPLC_33c5_A0: 	dc.w DPLC_33c5_300-DPLC_33c5
00029840 0000                       DPLC_33c5_A2: 	dc.w DPLC_33c5_303-DPLC_33c5
00029842 0000                       DPLC_33c5_A4: 	dc.w DPLC_33c5_306-DPLC_33c5
00029844 0000                       DPLC_33c5_A6: 	dc.w DPLC_33c5_309-DPLC_33c5
00029846 0000                       DPLC_33c5_A8: 	dc.w DPLC_33c5_30E-DPLC_33c5
00029848 0000                       DPLC_33c5_AA: 	dc.w DPLC_33c5_315-DPLC_33c5
0002984A 0000                       DPLC_33c5_AC: 	dc.w DPLC_33c5_31C-DPLC_33c5
0002984C 0000                       DPLC_33c5_AE: 	dc.w DPLC_33c5_323-DPLC_33c5
0002984E 0000                       DPLC_33c5_B0: 	dc.w DPLC_33c5_328-DPLC_33c5
00029850 0000                       DPLC_33c5_B2: 	dc.w DPLC_33c5_32D-DPLC_33c5
00029852 0000                       DPLC_33c5_B4: 	dc.w DPLC_33c5_332-DPLC_33c5
00029854 0000                       DPLC_33c5_B6: 	dc.w DPLC_33c5_337-DPLC_33c5
00029856 0000                       DPLC_33c5_B8: 	dc.w DPLC_33c5_33C-DPLC_33c5
00029858 0000                       DPLC_33c5_BA: 	dc.w DPLC_33c5_33D-DPLC_33c5
0002985A 0000                       DPLC_33c5_BC: 	dc.w DPLC_33c5_33E-DPLC_33c5
0002985C 0000                       DPLC_33c5_BE: 	dc.w DPLC_33c5_33F-DPLC_33c5
0002985E 0000                       DPLC_33c5_C0: 	dc.w DPLC_33c5_340-DPLC_33c5
00029860 0000                       DPLC_33c5_C2: 	dc.w DPLC_33c5_345-DPLC_33c5
00029862 0000                       DPLC_33c5_C4: 	dc.w DPLC_33c5_346-DPLC_33c5
00029864 0000                       DPLC_33c5_C6: 	dc.w DPLC_33c5_34B-DPLC_33c5
00029866 0000                       DPLC_33c5_C8: 	dc.w DPLC_33c5_34C-DPLC_33c5
00029868 0000                       DPLC_33c5_CA: 	dc.w DPLC_33c5_34D-DPLC_33c5
0002986A 0000                       DPLC_33c5_CC: 	dc.w DPLC_33c5_34E-DPLC_33c5
0002986C 0000                       DPLC_33c5_CE: 	dc.w DPLC_33c5_353-DPLC_33c5
0002986E 0000                       DPLC_33c5_D0: 	dc.w DPLC_33c5_354-DPLC_33c5
00029870 0000                       DPLC_33c5_D2: 	dc.w DPLC_33c5_359-DPLC_33c5
00029872 0000                       DPLC_33c5_D4: 	dc.w DPLC_33c5_35A-DPLC_33c5
00029874 0000                       DPLC_33c5_D6: 	dc.w DPLC_33c5_35B-DPLC_33c5
00029876 0000                       DPLC_33c5_D8: 	dc.w DPLC_33c5_35C-DPLC_33c5
00029878 0000                       DPLC_33c5_DA: 	dc.w DPLC_33c5_361-DPLC_33c5
0002987A 0000                       DPLC_33c5_DC: 	dc.w DPLC_33c5_362-DPLC_33c5
0002987C 0000                       DPLC_33c5_DE: 	dc.w DPLC_33c5_367-DPLC_33c5
0002987E 00                         DPLC_33c5_E0: 	dc.b $0
0002987F 02                         DPLC_33c5_E1: 	dc.b $2
00029880 F000                       	dc.b $F0, $0
00029882 1010                       	dc.b $10, $10
00029884 03                         DPLC_33c5_E6: 	dc.b $3
00029885 5012                       	dc.b $50, $12
00029887 5018                       	dc.b $50, $18
00029889 201E                       	dc.b $20, $1E
0002988B 03                         DPLC_33c5_ED: 	dc.b $3
0002988C 5021                       	dc.b $50, $21
0002988E 5018                       	dc.b $50, $18
00029890 201E                       	dc.b $20, $1E
00029892 03                         DPLC_33c5_F4: 	dc.b $3
00029893 5021                       	dc.b $50, $21
00029895 5018                       	dc.b $50, $18
00029897 2027                       	dc.b $20, $27
00029899 03                         DPLC_33c5_FB: 	dc.b $3
0002989A 802A                       	dc.b $80, $2A
0002989C 2033                       	dc.b $20, $33
0002989E 2036                       	dc.b $20, $36
000298A0 04                         DPLC_33c5_102: 	dc.b $4
000298A1 7039                       	dc.b $70, $39
000298A3 5041                       	dc.b $50, $41
000298A5 5047                       	dc.b $50, $47
000298A7 104D                       	dc.b $10, $4D
000298A9 02                         DPLC_33c5_10B: 	dc.b $2
000298AA 7039                       	dc.b $70, $39
000298AC B04F                       	dc.b $B0, $4F
000298AE 02                         DPLC_33c5_110: 	dc.b $2
000298AF 505B                       	dc.b $50, $5B
000298B1 8061                       	dc.b $80, $61
000298B3 04                         DPLC_33c5_115: 	dc.b $4
000298B4 505B                       	dc.b $50, $5B
000298B6 506A                       	dc.b $50, $6A
000298B8 5070                       	dc.b $50, $70
000298BA 1076                       	dc.b $10, $76
000298BC 02                         DPLC_33c5_11E: 	dc.b $2
000298BD F4F0                       	dc.b $F4, $F0
000298BF 1500                       	dc.b $15, $0
000298C1 03                         DPLC_33c5_123: 	dc.b $3
000298C2 7039                       	dc.b $70, $39
000298C4 3078                       	dc.b $30, $78
000298C6 507C                       	dc.b $50, $7C
000298C8 05                         DPLC_33c5_12A: 	dc.b $5
000298C9 5082                       	dc.b $50, $82
000298CB 5088                       	dc.b $50, $88
000298CD 208E                       	dc.b $20, $8E
000298CF 5091                       	dc.b $50, $91
000298D1 0097                       	dc.b $0, $97
000298D3 06                         DPLC_33c5_135: 	dc.b $6
000298D4 5082                       	dc.b $50, $82
000298D6 1098                       	dc.b $10, $98
000298D8 309A                       	dc.b $30, $9A
000298DA 509E                       	dc.b $50, $9E
000298DC 30A4                       	dc.b $30, $A4
000298DE 00A8                       	dc.b $0, $A8
000298E0 04                         DPLC_33c5_142: 	dc.b $4
000298E1 50A9                       	dc.b $50, $A9
000298E3 10AF                       	dc.b $10, $AF
000298E5 70B1                       	dc.b $70, $B1
000298E7 20B9                       	dc.b $20, $B9
000298E9 05                         DPLC_33c5_14B: 	dc.b $5
000298EA 50BC                       	dc.b $50, $BC
000298EC 30C2                       	dc.b $30, $C2
000298EE 70C6                       	dc.b $70, $C6
000298F0 20CE                       	dc.b $20, $CE
000298F2 10D1                       	dc.b $10, $D1
000298F4 04                         DPLC_33c5_156: 	dc.b $4
000298F5 50BC                       	dc.b $50, $BC
000298F7 10D3                       	dc.b $10, $D3
000298F9 70D5                       	dc.b $70, $D5
000298FB 20DD                       	dc.b $20, $DD
000298FD 05                         DPLC_33c5_15F: 	dc.b $5
000298FE 5082                       	dc.b $50, $82
00029900 1098                       	dc.b $10, $98
00029902 008E                       	dc.b $0, $8E
00029904 70E0                       	dc.b $70, $E0
00029906 20E8                       	dc.b $20, $E8
00029908 04                         DPLC_33c5_16A: 	dc.b $4
00029909 70EB                       	dc.b $70, $EB
0002990B 50F3                       	dc.b $50, $F3
0002990D 10F9                       	dc.b $10, $F9
0002990F 50FB                       	dc.b $50, $FB
00029911 02                         DPLC_33c5_173: 	dc.b $2
00029912 70EB                       	dc.b $70, $EB
00029914 B101                       	dc.b $B1, $1
00029916 02                         DPLC_33c5_178: 	dc.b $2
00029917 510D                       	dc.b $51, $D
00029919 8113                       	dc.b $81, $13
0002991B 04                         DPLC_33c5_17D: 	dc.b $4
0002991C 510D                       	dc.b $51, $D
0002991E 511C                       	dc.b $51, $1C
00029920 1122                       	dc.b $11, $22
00029922 5124                       	dc.b $51, $24
00029924 02                         DPLC_33c5_186: 	dc.b $2
00029925 510D                       	dc.b $51, $D
00029927 B12A                       	dc.b $B1, $2A
00029929 03                         DPLC_33c5_18B: 	dc.b $3
0002992A 70EB                       	dc.b $70, $EB
0002992C 0101                       	dc.b $1, $1
0002992E 8136                       	dc.b $81, $36
00029930 06                         DPLC_33c5_192: 	dc.b $6
00029931 513F                       	dc.b $51, $3F
00029933 1145                       	dc.b $11, $45
00029935 1147                       	dc.b $11, $47
00029937 8149                       	dc.b $81, $49
00029939 0152                       	dc.b $1, $52
0002993B 0153                       	dc.b $1, $53
0002993D 06                         DPLC_33c5_19F: 	dc.b $6
0002993E 513F                       	dc.b $51, $3F
00029940 2154                       	dc.b $21, $54
00029942 1157                       	dc.b $11, $57
00029944 1159                       	dc.b $11, $59
00029946 815B                       	dc.b $81, $5B
00029948 0152                       	dc.b $1, $52
0002994A 04                         DPLC_33c5_1AC: 	dc.b $4
0002994B 5164                       	dc.b $51, $64
0002994D 116A                       	dc.b $11, $6A
0002994F 816C                       	dc.b $81, $6C
00029951 1175                       	dc.b $11, $75
00029953 05                         DPLC_33c5_1B5: 	dc.b $5
00029954 5177                       	dc.b $51, $77
00029956 217D                       	dc.b $21, $7D
00029958 1180                       	dc.b $11, $80
0002995A 7182                       	dc.b $71, $82
0002995C 218A                       	dc.b $21, $8A
0002995E 04                         DPLC_33c5_1C0: 	dc.b $4
0002995F 5177                       	dc.b $51, $77
00029961 118D                       	dc.b $11, $8D
00029963 818F                       	dc.b $81, $8F
00029965 1198                       	dc.b $11, $98
00029967 05                         DPLC_33c5_1C9: 	dc.b $5
00029968 513F                       	dc.b $51, $3F
0002996A 819A                       	dc.b $81, $9A
0002996C 1159                       	dc.b $11, $59
0002996E 11A3                       	dc.b $11, $A3
00029970 0152                       	dc.b $1, $52
00029972 02                         DPLC_33c5_1D4: 	dc.b $2
00029973 51A5                       	dc.b $51, $A5
00029975 B1AB                       	dc.b $B1, $AB
00029977 02                         DPLC_33c5_1D9: 	dc.b $2
00029978 505B                       	dc.b $50, $5B
0002997A B1B7                       	dc.b $B1, $B7
0002997C 02                         DPLC_33c5_1DE: 	dc.b $2
0002997D 51A5                       	dc.b $51, $A5
0002997F B1C3                       	dc.b $B1, $C3
00029981 02                         DPLC_33c5_1E3: 	dc.b $2
00029982 505B                       	dc.b $50, $5B
00029984 B1CF                       	dc.b $B1, $CF
00029986 04                         DPLC_33c5_1E8: 	dc.b $4
00029987 51DB                       	dc.b $51, $DB
00029989 11E1                       	dc.b $11, $E1
0002998B B1E3                       	dc.b $B1, $E3
0002998D 01EF                       	dc.b $1, $EF
0002998F 03                         DPLC_33c5_1F1: 	dc.b $3
00029990 51F0                       	dc.b $51, $F0
00029992 11F6                       	dc.b $11, $F6
00029994 B1F8                       	dc.b $B1, $F8
00029996 04                         DPLC_33c5_1F8: 	dc.b $4
00029997 51DB                       	dc.b $51, $DB
00029999 1204                       	dc.b $12, $4
0002999B B206                       	dc.b $B2, $6
0002999D 01EF                       	dc.b $1, $EF
0002999F 03                         DPLC_33c5_201: 	dc.b $3
000299A0 51F0                       	dc.b $51, $F0
000299A2 11F6                       	dc.b $11, $F6
000299A4 B212                       	dc.b $B2, $12
000299A6 02                         DPLC_33c5_208: 	dc.b $2
000299A7 521E                       	dc.b $52, $1E
000299A9 B224                       	dc.b $B2, $24
000299AB 02                         DPLC_33c5_20D: 	dc.b $2
000299AC 510D                       	dc.b $51, $D
000299AE B230                       	dc.b $B2, $30
000299B0 02                         DPLC_33c5_212: 	dc.b $2
000299B1 521E                       	dc.b $52, $1E
000299B3 B23C                       	dc.b $B2, $3C
000299B5 02                         DPLC_33c5_217: 	dc.b $2
000299B6 510D                       	dc.b $51, $D
000299B8 B248                       	dc.b $B2, $48
000299BA 04                         DPLC_33c5_21C: 	dc.b $4
000299BB 5254                       	dc.b $52, $54
000299BD 125A                       	dc.b $12, $5A
000299BF B25C                       	dc.b $B2, $5C
000299C1 0268                       	dc.b $2, $68
000299C3 02                         DPLC_33c5_225: 	dc.b $2
000299C4 7269                       	dc.b $72, $69
000299C6 B271                       	dc.b $B2, $71
000299C8 04                         DPLC_33c5_22A: 	dc.b $4
000299C9 5254                       	dc.b $52, $54
000299CB 127D                       	dc.b $12, $7D
000299CD B27F                       	dc.b $B2, $7F
000299CF 0268                       	dc.b $2, $68
000299D1 02                         DPLC_33c5_233: 	dc.b $2
000299D2 7269                       	dc.b $72, $69
000299D4 B28B                       	dc.b $B2, $8B
000299D6 01                         DPLC_33c5_238: 	dc.b $1
000299D7 F297                       	dc.b $F2, $97
000299D9 01                         DPLC_33c5_23B: 	dc.b $1
000299DA F2A7                       	dc.b $F2, $A7
000299DC 01                         DPLC_33c5_23E: 	dc.b $1
000299DD F2B7                       	dc.b $F2, $B7
000299DF 01                         DPLC_33c5_241: 	dc.b $1
000299E0 F2C7                       	dc.b $F2, $C7
000299E2 01                         DPLC_33c5_244: 	dc.b $1
000299E3 F2D7                       	dc.b $F2, $D7
000299E5 02                         DPLC_33c5_247: 	dc.b $2
000299E6 B2E7                       	dc.b $B2, $E7
000299E8 22F3                       	dc.b $22, $F3
000299EA 01                         DPLC_33c5_24C: 	dc.b $1
000299EB F2F6                       	dc.b $F2, $F6
000299ED 02                         DPLC_33c5_24F: 	dc.b $2
000299EE B306                       	dc.b $B3, $6
000299F0 2312                       	dc.b $23, $12
000299F2 01                         DPLC_33c5_254: 	dc.b $1
000299F3 F315                       	dc.b $F3, $15
000299F5 02                         DPLC_33c5_257: 	dc.b $2
000299F6 5325                       	dc.b $53, $25
000299F8 B32B                       	dc.b $B3, $2B
000299FA 04                         DPLC_33c5_25C: 	dc.b $4
000299FB 5337                       	dc.b $53, $37
000299FD 733D                       	dc.b $73, $3D
000299FF 1345                       	dc.b $13, $45
00029A01 0347                       	dc.b $3, $47
00029A03 02                         DPLC_33c5_265: 	dc.b $2
00029A04 D348                       	dc.b $D3, $48
00029A06 34EC                       	dc.b $34, $EC
00029A08 02                         DPLC_33c5_26A: 	dc.b $2
00029A09 F528                       	dc.b $F5, $28
00029A0B 0538                       	dc.b $5, $38
00029A0D 02                         DPLC_33c5_26F: 	dc.b $2
00029A0E F539                       	dc.b $F5, $39
00029A10 0549                       	dc.b $5, $49
00029A12 02                         DPLC_33c5_274: 	dc.b $2
00029A13 E356                       	dc.b $E3, $56
00029A15 054A                       	dc.b $5, $4A
00029A17 01                         DPLC_33c5_279: 	dc.b $1
00029A18 8365                       	dc.b $83, $65
00029A1A 03                         DPLC_33c5_27C: 	dc.b $3
00029A1B 736E                       	dc.b $73, $6E
00029A1D 0376                       	dc.b $3, $76
00029A1F 3377                       	dc.b $33, $77
00029A21 02                         DPLC_33c5_283: 	dc.b $2
00029A22 E37B                       	dc.b $E3, $7B
00029A24 054A                       	dc.b $5, $4A
00029A26 01                         DPLC_33c5_288: 	dc.b $1
00029A27 D561                       	dc.b $D5, $61
00029A29 04                         DPLC_33c5_28B: 	dc.b $4
00029A2A B399                       	dc.b $B3, $99
00029A2C 33A5                       	dc.b $33, $A5
00029A2E 03A9                       	dc.b $3, $A9
00029A30 03AA                       	dc.b $3, $AA
00029A32 04                         DPLC_33c5_294: 	dc.b $4
00029A33 B3AB                       	dc.b $B3, $AB
00029A35 33B7                       	dc.b $33, $B7
00029A37 03BB                       	dc.b $3, $BB
00029A39 03BC                       	dc.b $3, $BC
00029A3B 05                         DPLC_33c5_29D: 	dc.b $5
00029A3C 83BD                       	dc.b $83, $BD
00029A3E 13C6                       	dc.b $13, $C6
00029A40 53C8                       	dc.b $53, $C8
00029A42 13CE                       	dc.b $13, $CE
00029A44 03D0                       	dc.b $3, $D0
00029A46 05                         DPLC_33c5_2A8: 	dc.b $5
00029A47 83D1                       	dc.b $83, $D1
00029A49 13DA                       	dc.b $13, $DA
00029A4B 53C8                       	dc.b $53, $C8
00029A4D 13CE                       	dc.b $13, $CE
00029A4F 03D0                       	dc.b $3, $D0
00029A51 02                         DPLC_33c5_2B3: 	dc.b $2
00029A52 83DC                       	dc.b $83, $DC
00029A54 73E5                       	dc.b $73, $E5
00029A56 03                         DPLC_33c5_2B8: 	dc.b $3
00029A57 83ED                       	dc.b $83, $ED
00029A59 23F6                       	dc.b $23, $F6
00029A5B 13F9                       	dc.b $13, $F9
00029A5D 02                         DPLC_33c5_2BF: 	dc.b $2
00029A5E 83FB                       	dc.b $83, $FB
00029A60 7404                       	dc.b $74, $4
00029A62 03                         DPLC_33c5_2C4: 	dc.b $3
00029A63 83ED                       	dc.b $83, $ED
00029A65 240C                       	dc.b $24, $C
00029A67 140F                       	dc.b $14, $F
00029A69 02                         DPLC_33c5_2CB: 	dc.b $2
00029A6A 5411                       	dc.b $54, $11
00029A6C B417                       	dc.b $B4, $17
00029A6E 03                         DPLC_33c5_2D0: 	dc.b $3
00029A6F 8423                       	dc.b $84, $23
00029A71 342C                       	dc.b $34, $2C
00029A73 0430                       	dc.b $4, $30
00029A75 03                         DPLC_33c5_2D7: 	dc.b $3
00029A76 7431                       	dc.b $74, $31
00029A78 1439                       	dc.b $14, $39
00029A7A B43B                       	dc.b $B4, $3B
00029A7C 05                         DPLC_33c5_2DE: 	dc.b $5
00029A7D 7447                       	dc.b $74, $47
00029A7F 144F                       	dc.b $14, $4F
00029A81 5451                       	dc.b $54, $51
00029A83 3457                       	dc.b $34, $57
00029A85 045B                       	dc.b $4, $5B
00029A87 05                         DPLC_33c5_2E9: 	dc.b $5
00029A88 745C                       	dc.b $74, $5C
00029A8A 144F                       	dc.b $14, $4F
00029A8C 5464                       	dc.b $54, $64
00029A8E 3457                       	dc.b $34, $57
00029A90 045B                       	dc.b $4, $5B
00029A92 02                         DPLC_33c5_2F4: 	dc.b $2
00029A93 246A                       	dc.b $24, $6A
00029A95 F46D                       	dc.b $F4, $6D
00029A97 03                         DPLC_33c5_2F9: 	dc.b $3
00029A98 247D                       	dc.b $24, $7D
00029A9A B480                       	dc.b $B4, $80
00029A9C 248C                       	dc.b $24, $8C
00029A9E 01                         DPLC_33c5_300: 	dc.b $1
00029A9F B48F                       	dc.b $B4, $8F
00029AA1 01                         DPLC_33c5_303: 	dc.b $1
00029AA2 549B                       	dc.b $54, $9B
00029AA4 01                         DPLC_33c5_306: 	dc.b $1
00029AA5 14A1                       	dc.b $14, $A1
00029AA7 02                         DPLC_33c5_309: 	dc.b $2
00029AA8 E356                       	dc.b $E3, $56
00029AAA 054A                       	dc.b $5, $4A
00029AAC 03                         DPLC_33c5_30E: 	dc.b $3
00029AAD 736E                       	dc.b $73, $6E
00029AAF 0376                       	dc.b $3, $76
00029AB1 3377                       	dc.b $33, $77
00029AB3 03                         DPLC_33c5_315: 	dc.b $3
00029AB4 B4A3                       	dc.b $B4, $A3
00029AB6 14AF                       	dc.b $14, $AF
00029AB8 34B1                       	dc.b $34, $B1
00029ABA 03                         DPLC_33c5_31C: 	dc.b $3
00029ABB 54B5                       	dc.b $54, $B5
00029ABD B4BB                       	dc.b $B4, $BB
00029ABF 1074                       	dc.b $10, $74
00029AC1 02                         DPLC_33c5_323: 	dc.b $2
00029AC2 F4C7                       	dc.b $F4, $C7
00029AC4 24D7                       	dc.b $24, $D7
00029AC6 02                         DPLC_33c5_328: 	dc.b $2
00029AC7 F4DA                       	dc.b $F4, $DA
00029AC9 14EA                       	dc.b $14, $EA
00029ACB 02                         DPLC_33c5_32D: 	dc.b $2
00029ACC F502                       	dc.b $F5, $2
00029ACE 2512                       	dc.b $25, $12
00029AD0 02                         DPLC_33c5_332: 	dc.b $2
00029AD1 F515                       	dc.b $F5, $15
00029AD3 2525                       	dc.b $25, $25
00029AD5 02                         DPLC_33c5_337: 	dc.b $2
00029AD6 F54B                       	dc.b $F5, $4B
00029AD8 755B                       	dc.b $75, $5B
00029ADA 00                         DPLC_33c5_33C: 	dc.b $0
00029ADB 00                         DPLC_33c5_33D: 	dc.b $0
00029ADC 00                         DPLC_33c5_33E: 	dc.b $0
00029ADD 00                         DPLC_33c5_33F: 	dc.b $0
00029ADE 02                         DPLC_33c5_340: 	dc.b $2
00029ADF F4DA                       	dc.b $F4, $DA
00029AE1 14EA                       	dc.b $14, $EA
00029AE3 00                         DPLC_33c5_345: 	dc.b $0
00029AE4 02                         DPLC_33c5_346: 	dc.b $2
00029AE5 F4DA                       	dc.b $F4, $DA
00029AE7 14EA                       	dc.b $14, $EA
00029AE9 00                         DPLC_33c5_34B: 	dc.b $0
00029AEA 00                         DPLC_33c5_34C: 	dc.b $0
00029AEB 00                         DPLC_33c5_34D: 	dc.b $0
00029AEC 02                         DPLC_33c5_34E: 	dc.b $2
00029AED F4DA                       	dc.b $F4, $DA
00029AEF 14EA                       	dc.b $14, $EA
00029AF1 00                         DPLC_33c5_353: 	dc.b $0
00029AF2 02                         DPLC_33c5_354: 	dc.b $2
00029AF3 F4DA                       	dc.b $F4, $DA
00029AF5 14EA                       	dc.b $14, $EA
00029AF7 00                         DPLC_33c5_359: 	dc.b $0
00029AF8 00                         DPLC_33c5_35A: 	dc.b $0
00029AF9 00                         DPLC_33c5_35B: 	dc.b $0
00029AFA 02                         DPLC_33c5_35C: 	dc.b $2
00029AFB F4DA                       	dc.b $F4, $DA
00029AFD 14EA                       	dc.b $14, $EA
00029AFF 00                         DPLC_33c5_361: 	dc.b $0
00029B00 02                         DPLC_33c5_362: 	dc.b $2
00029B01 F4DA                       	dc.b $F4, $DA
00029B03 14EA                       	dc.b $14, $EA
00029B05 00                         DPLC_33c5_367: 	dc.b $0
00029B06                            	even
00029B06                            	even
00029B06                            
00029B06                            ; ---------------------------------------------------------------------------
00029B06                            ; Uncompressed graphics	- Sonic
00029B06                            ; ---------------------------------------------------------------------------
00029B06                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
000348E6                            		even
000348E6                            ; ---------------------------------------------------------------------------
000348E6                            ; Compressed graphics - various
000348E6                            ; ---------------------------------------------------------------------------
000348E6                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
000349EA                            		even
000349EA                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00034A24                            		even
00034A24                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00034BBA                            		even
00034BBA                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00034D02                            		even
00034D02                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00034E0C                            		even
00034E0C                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00034E5E                            		even
00034E5E                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
000350A6                            		even
000350A6                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0003522C                            		even
0003522C                            ; ---------------------------------------------------------------------------
0003522C                            ; Sprite mappings - walls of the special stage
0003522C                            ; ---------------------------------------------------------------------------
0003522C                            Map_SSWalls:
0003522C                            	include "_maps\SSwalls.asm"
0003522C                            ; ---------------------------------------------------------------------------
0003522C                            ; Sprite mappings - walls of the special stage
0003522C                            ; ---------------------------------------------------------------------------
0003522C 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00035230 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00035234 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00035238 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0003523C 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00035240 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00035244 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00035248 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0003524C 01                         byte_2C584:	dc.b 1
0003524D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00035252 01                         byte_2C58A:	dc.b 1
00035253 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00035258 01                         byte_2C590:	dc.b 1
00035259 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0003525E 01                         byte_2C596:	dc.b 1
0003525F F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00035264 01                         byte_2C59C:	dc.b 1
00035265 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003526A 01                         byte_2C5A2:	dc.b 1
0003526B F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00035270 01                         byte_2C5A8:	dc.b 1
00035271 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00035276 01                         byte_2C5AE:	dc.b 1
00035277 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003527C 01                         byte_2C5B4:	dc.b 1
0003527D F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00035282 01                         byte_2C5BA:	dc.b 1
00035283 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00035288 01                         byte_2C5C0:	dc.b 1
00035289 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0003528E 01                         byte_2C5C6:	dc.b 1
0003528F F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00035294 01                         byte_2C5CC:	dc.b 1
00035295 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003529A 01                         byte_2C5D2:	dc.b 1
0003529B F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
000352A0 01                         byte_2C5D8:	dc.b 1
000352A1 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
000352A6 01                         byte_2C5DE:	dc.b 1
000352A7 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
000352AC                            		even
000352AC                            		even
000352AC                            ; ---------------------------------------------------------------------------
000352AC                            ; Compressed graphics - special stage
000352AC                            ; ---------------------------------------------------------------------------
000352AC                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00035BE4                            		even
00035BE4                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00035D32                            		even
00035D32                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
000371C4                            		even
000371C4                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
000374C4                            		even
000374C4                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
000379B8                            		even
000379B8                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00037AA6                            		even
00037AA6                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00037B76                            		even
00037B76                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00037C6C                            		even
00037C6C                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00037CCA                            		even
00037CCA                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00037D5C                            		even
00037D5C                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00037E1E                            		even
00037E1E                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00037EEC                            		even
00037EEC                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00037FB8                            		even
00037FB8                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00038080                            		even
00038080                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0003814A                            		even
0003814A                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
0003821A                            		even
0003821A                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
0003840E                            		even
0003840E                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00038576                            		even
00038576                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00038626                            		even
00038626                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00038700                            		even
00038700                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00038784                            		even
00038784                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00038902                            		even
00038902                            ; ---------------------------------------------------------------------------
00038902                            ; Compressed graphics - GHZ stuff
00038902                            ; ---------------------------------------------------------------------------
00038902                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
0003894C                            		even
0003894C                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00038A66                            		even
00038A66                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00038B52                            		even
00038B52                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00038B9A                            		even
00038B9A                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00038D38                            		even
00038D38                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00038DF4                            		even
00038DF4                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00039008                            		even
00039008                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00039134                            		even
00039134                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00039262                            		even
00039262                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00039300                            		even
00039300                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00039360                            		even
00039360                            ; ---------------------------------------------------------------------------
00039360                            ; Compressed graphics - LZ stuff
00039360                            ; ---------------------------------------------------------------------------
00039360                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00039484                            		even
00039484                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00039C78                            		even
00039C78                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00039DF8                            		even
00039DF8                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00039F62                            		even
00039F62                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003A5B8                            		even
0003A5B8                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
0003A66E                            		even
0003A66E                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003A710                            		even
0003A710                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0003A86C                            		even
0003A86C                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0003A8D0                            		even
0003A8D0                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003AA22                            		even
0003AA22                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003AF04                            		even
0003AF04                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003B074                            		even
0003B074                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0003B32C                            		even
0003B32C                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0003B464                            		even
0003B464                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0003B58E                            		even
0003B58E                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
0003B69E                            		even
0003B69E                            ; ---------------------------------------------------------------------------
0003B69E                            ; Compressed graphics - MZ stuff
0003B69E                            ; ---------------------------------------------------------------------------
0003B69E                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0003B92C                            		even
0003B92C                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
0003B9EA                            		even
0003B9EA                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
0003BAA2                            		even
0003BAA2                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0003BAF6                            		even
0003BAF6                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
0003BDC8 00                         		even
0003BDC8                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
0003C6DE                            		even
0003C6DE                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0003C842                            		even
0003C842                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
0003C8CA                            		even
0003C8CA                            ; ---------------------------------------------------------------------------
0003C8CA                            ; Compressed graphics - SLZ stuff
0003C8CA                            ; ---------------------------------------------------------------------------
0003C8CA                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0003CB06                            		even
0003CB06                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
0003CC4C                            		even
0003CC4C                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0003CE90                            		even
0003CE90                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
0003CEF2                            		even
0003CEF2                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0003CFD4                            		even
0003CFD4                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
0003D1B6                            		even
0003D1B6                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
0003D2C2                            		even
0003D2C2                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0003D366                            		even
0003D366                            ; ---------------------------------------------------------------------------
0003D366                            ; Compressed graphics - SYZ stuff
0003D366                            ; ---------------------------------------------------------------------------
0003D366                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
0003D4D0                            		even
0003D4D0                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
0003D532                            		even
0003D532                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0003D614                            		even
0003D614                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
0003D8A2                            		even
0003D8A2                            ; ---------------------------------------------------------------------------
0003D8A2                            ; Compressed graphics - SBZ stuff
0003D8A2                            ; ---------------------------------------------------------------------------
0003D8A2                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0003D8F6                            		even
0003D8F6                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0003DB92                            		even
0003DB92                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0003DD96                            		even
0003DD96                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003DF34                            		even
0003DF34                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003E264                            		even
0003E264                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003E442                            		even
0003E442                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003E49A                            		even
0003E49A                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003E664 00                         		even
0003E664                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003E762                            		even
0003E762                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003E8EE                            		even
0003E8EE                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003E93E                            		even
0003E93E                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003E996                            		even
0003E996                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003EA92                            		even
0003EA92                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003EBA8                            		even
0003EBA8                            ; ---------------------------------------------------------------------------
0003EBA8                            ; Compressed graphics - enemies
0003EBA8                            ; ---------------------------------------------------------------------------
0003EBA8                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003F016 00                         		even
0003F016                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003F1C0 00                         		even
0003F1C0                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003F582 00                         		even
0003F582                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003F76A                            		even
0003F76A                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003F922 00                         		even
0003F922                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003FA6C                            		even
0003FA6C                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003FCF6                            		even
0003FCF6                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0004031A                            		even
0004031A                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
00040510                            		even
00040510                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
00040B2E                            		even
00040B2E                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
00040F2E 00                         		even
00040F2E                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0004122A                            		even
0004122A                            Nem_Splats:	incbin	artnem\splats.bin	; splats
00041472                            		even
00041472                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0004170A                            		even
0004170A                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
000418E8                            		even
000418E8                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
00041A76                            		even
00041A76                            ; ---------------------------------------------------------------------------
00041A76                            ; Compressed graphics - various
00041A76                            ; ---------------------------------------------------------------------------
00041A76                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
00041FA6                            		even
00041FA6                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0004209C                            		even
0004209C                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
000421A2                            		even
000421A2                            Nem_Ring:	incbin	artnem\rings.bin	; rings
00042296                            		even
00042296                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
000427DA                            		even
000427DA                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
00042E40                            		even
00042E40                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
00042EF0                            		even
00042EF0                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
00043082                            		even
00043082                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
00043196                            		even
00043196                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
00043268                            		even
00043268                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
000436E4                            		even
000436E4                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
000437A4                            		even
000437A4                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
00043918                            		even
00043918                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
00043C1A                            		even
00043C1A                            ; ---------------------------------------------------------------------------
00043C1A                            ; Compressed graphics - continue screen
00043C1A                            ; ---------------------------------------------------------------------------
00043C1A                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
00043ECA                            		even
00043ECA                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
00044104                            		even
00044104                            ; ---------------------------------------------------------------------------
00044104                            ; Compressed graphics - animals
00044104                            ; ---------------------------------------------------------------------------
00044104                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0004425C                            		even
0004425C                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
000443B8                            		even
000443B8                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00044534                            		even
00044534                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00044650                            		even
00044650                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00044786                            		even
00044786                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
000448C0                            		even
000448C0                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00044A1C                            		even
00044A1C                            ; ---------------------------------------------------------------------------
00044A1C                            ; Compressed graphics - primary patterns and block mappings
00044A1C                            ; ---------------------------------------------------------------------------
00044A1C                            Blk16_GHZ:	incbin	map16\ghz.bin
00045330                            		even
00045330                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00046C3E                            		even
00046C3E                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00047FBE                            		even
00047FBE                            Blk256_GHZ:	incbin	map256\ghz.bin
0004A3F8                            		even
0004A3F8                            Blk16_LZ:	incbin	map16\lz.bin
0004AB32                            		even
0004AB32                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
0004CF86                            		even
0004CF86                            Blk256_LZ:	incbin	map256\lz.bin
0004F906                            		even
0004F906                            Blk16_MZ:	incbin	map16\mz.bin
0005006E                            		even
0005006E                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
000529AA                            		even
000529AA                            Blk256_MZ:	incbin	map256\mz.bin
000541C0                            		even
000541C0                            Blk16_SLZ:	incbin	map16\slz.bin
0005488A                            		even
0005488A                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
000567DE                            		even
000567DE                            Blk256_SLZ:	incbin	map256\slz.bin
00056E58                            		even
00056E58                            Blk16_SYZ:	incbin	map16\syz.bin
00057A7E                            		even
00057A7E                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0005C010                            		even
0005C010                            Blk256_SYZ:	incbin	map256\syz.bin
0005E06C                            		even
0005E06C                            Blk16_SBZ:	incbin	map16\sbz.bin
0005EFB4                            		even
0005EFB4                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
00061978                            		even
00061978                            Blk256_SBZ:	incbin	map256\sbz.bin
0006446E                            		even
0006446E                            Blk16_BHZ:	incbin	map16\bhz.bin
00064CFC                            		even
00064CFC                            Nem_BHZ:	incbin	artnem\8x8bhz.bin	; GHZ primary patterns
00067AFA                            		even
00067AFA                            Blk256_BHZ:	incbin	map256\bhz.bin
00069728                            		even
00069728                            ; ---------------------------------------------------------------------------
00069728                            ; Compressed graphics - bosses and ending sequence
00069728                            ; ---------------------------------------------------------------------------
00069728                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00069F42 00                         		even
00069F42                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
0006A590                            		even
0006A590                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
0006A60A                            		even
0006A60A                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0006A8F4                            		even
0006A8F4                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006B178                            		even
0006B178                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0006BECE 00                         		even
0006BECE                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0006C636                            		even
0006C636                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0006CBB6                            		even
0006CBB6                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0006CCD6                            		even
0006CCD6                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0006CED4                            		even
0006CED4                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0006E0B2                            		even
0006E0B2                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0006E9F6                            		even
0006E9F6                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006EDCC                            		even
0006EDCC                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006F35C                            		even
0006F35C                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006F5E4                            		even
0006F5E4                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006FBD2 00                         		even
0006FBD2                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006FE5A                            		even
0006FE5A                            		incbin	misc\padding2.bin
0006FF5E                            		even
0006FF5E                            ; ---------------------------------------------------------------------------
0006FF5E                            ; Collision data
0006FF5E                            ; ---------------------------------------------------------------------------
0006FF5E                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0007005E                            		even
0007005E                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
0007105E                            		even
0007105E                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0007205E                            		even
0007205E                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00072216 00                         		even
00072216                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0007237E                            		even
0007237E                            Col_MZ:		incbin	collide\mz.bin		; MZ index
0007250E 00                         		even
0007250E                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00072702                            		even
00072702                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00072908                            		even
00072908                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00072BA6                            		even
00072BA6                            Col_BHZ:	incbin	collide\bhz.bin		; GHZ index
00072D32                            		even
00072D32                            ; ---------------------------------------------------------------------------
00072D32                            ; Special layouts
00072D32                            ; ---------------------------------------------------------------------------
00072D32                            SS_1:		incbin	sslayout\1.bin
00072F7A                            		even
00072F7A                            SS_2:		incbin	sslayout\2.bin
00073332                            		even
00073332                            SS_3:		incbin	sslayout\3.bin
0007368E                            		even
0007368E                            SS_4:		incbin	sslayout\4.bin
00073B68                            		even
00073B68                            SS_5:		incbin	sslayout\5.bin
00074018                            		even
00074018                            SS_6:		incbin	sslayout\6.bin
0007430A                            		even
0007430A                            ; ---------------------------------------------------------------------------
0007430A                            ; Animated uncompressed graphics
0007430A                            ; ---------------------------------------------------------------------------
0007430A                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0007450A                            		even
0007450A                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0007490A                            		even
0007490A                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00074D8A                            		even
00074D8A                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0007508A                            		even
0007508A                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0007568A                            		even
0007568A                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0007598A                            		even
0007598A                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0007640A                            		even
0007640A                            
0007640A                            ; ---------------------------------------------------------------------------
0007640A                            ; Level	layout index
0007640A                            ; ---------------------------------------------------------------------------
0007640A 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00076410 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00076416 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0007641C 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00076422 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00076428 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0007642E 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00076434 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0007643A 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00076440 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00076446 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0007644C 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00076452 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00076458 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007645E 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00076464 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0007646A 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00076470 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00076476 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0007647C 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00076482 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00076488 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0007648E 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00076494 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0007649A 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000764A0 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
000764A6 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000764AC 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
000764B2 0000 0000 0000             		dc.w Level_BHZ1-Level_Index, Level_BHZbg-Level_Index, byte_68D70-Level_Index
000764B8 0000 0000 0000             		dc.w Level_BHZ2-Level_Index, Level_BHZbg-Level_Index, byte_68E3C-Level_Index
000764BE 0000 0000 0000             		dc.w Level_BHZ3-Level_Index, Level_BHZbg-Level_Index, byte_68F84-Level_Index
000764C4 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
000764CA                            
000764CA                            Level_GHZ1:	incbin	levels\ghz1.bin
000765BC                            		even
000765BC 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
000765C0                            Level_GHZ2:	incbin	levels\ghz2.bin
00076688                            		even
00076688 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0007668C                            Level_GHZ3:	incbin	levels\ghz3.bin
000767AE                            		even
000767AE                            Level_GHZbg:	incbin	levels\ghzbg.bin
000767D0                            		even
000767D0 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
000767D4 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
000767D8                            
000767D8                            Level_LZ1:	incbin	levels\lz1.bin
000768DA                            		even
000768DA                            Level_LZbg:	incbin	levels\lzbg.bin
000769DC                            		even
000769DC 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
000769E0                            Level_LZ2:	incbin	levels\lz2.bin
00076A7A                            		even
00076A7A 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00076A7E                            Level_LZ3:	incbin	levels\lz3.bin
00076B98                            		even
00076B98 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00076B9C                            Level_SBZ3:	incbin	levels\sbz3.bin
00076C56                            		even
00076C56 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00076C5A                            
00076C5A                            Level_MZ1:	incbin	levels\mz1.bin
00076CF8                            		even
00076CF8                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00076D72                            		even
00076D72                            Level_MZ2:	incbin	levels\mz2.bin
00076E16                            		even
00076E16                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00076EA8                            		even
00076EA8 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00076EAC                            Level_MZ3:	incbin	levels\mz3.bin
00076F8E                            		even
00076F8E                            Level_MZ3bg:	incbin	levels\mz3bg.bin
00077032 00                         		even
00077032 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
00077036 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0007703A                            
0007703A                            Level_SLZ1:	incbin	levels\slz1.bin
0007714C                            		even
0007714C                            Level_SLZbg:	incbin	levels\slzbg.bin
00077166                            		even
00077166                            Level_SLZ2:	incbin	levels\slz2.bin
00077256                            		even
00077256                            Level_SLZ3:	incbin	levels\slz3.bin
00077370                            		even
00077370 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00077374                            
00077374                            Level_SYZ1:	incbin	levels\syz1.bin
00077430 00                         		even
00077430                            Level_SYZbg:	incbin	levels\syzbg.bin
0007746A                            		even
0007746A 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007746E                            Level_SYZ2:	incbin	levels\syz2.bin
00077572                            		even
00077572 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00077576                            Level_SYZ3:	incbin	levels\syz3.bin
000776D0 00                         		even
000776D0 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
000776D4 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
000776D8                            
000776D8                            Level_SBZ1:	incbin	levels\sbz1.bin
000777FA                            		even
000777FA                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00077838                            		even
00077838                            Level_SBZ2:	incbin	levels\sbz2.bin
0007797A                            		even
0007797A                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00077AE4                            		even
00077AE4 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00077AE8 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00077AEC                            Level_End:	incbin	levels\ending.bin
00077B1C 00                         		even
00077B1C 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00077B20                            Level_BHZ1:	incbin	levels\bhz1.bin
00077C12                            		even
00077C12                            
00077C12                            Level_BHZ2:	incbin	levels\bhz2.bin
00077CDA                            		even
00077CDA                            
00077CDA                            Level_BHZ3:	incbin	levels\bhz3.bin
00077DFC                            		even
00077DFC                            Level_BHZbg:	incbin	levels\bhzbg.bin
00077EFE                            		even
00077EFE                            ; ---------------------------------------------------------------------------
00077EFE                            ; Animated uncompressed giant ring graphics
00077EFE                            ; ---------------------------------------------------------------------------
00077EFE                            Art_BigRing:	incbin	artunc\bigring.bin
00078B3E                            		even
00078B3E                            
00078B3E                            		incbin	misc\padding3.bin
00078BDA                            		even
00078BDA                            
00078BDA                            ; ---------------------------------------------------------------------------
00078BDA                            ; Sprite locations index
00078BDA                            ; ---------------------------------------------------------------------------
00078BDA 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BDE 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BE2 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BE6 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BEA 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BEE 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BF2 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BF6 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BFA 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BFE 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C02 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C06 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C0A 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C0E 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C12 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C16 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C1A 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C1E 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C22 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C26 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C2A 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C2E 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C32 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C36 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C3A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C3E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C42 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C46 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C4A 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C4E 0000 0000                  		dc.w ObjPos_BHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C52 0000 0000                  		dc.w ObjPos_BHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C56 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078C5A                            ObjPos_LZxpf_Index:
00078C5A 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
00078C5E 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_LZxpf_Index, ObjPos_LZ2pf2-ObjPos_LZxpf_Index
00078C62 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_LZxpf_Index, ObjPos_LZ3pf2-ObjPos_LZxpf_Index
00078C66 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
00078C6A                            
00078C6A                            ObjPos_SBZ1pf_Index:
00078C6A 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
00078C6E 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf4-ObjPos_SBZ1pf_Index
00078C72 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf6-ObjPos_SBZ1pf_Index
00078C76 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
00078C7A FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00078C80                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
000794F0                            		even
000794F0                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
000797C0                            		even
000797C0                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0007A1A4                            		even
0007A1A4                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0007A54C                            		even
0007A54C                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0007A882                            		even
0007A882                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0007AD98                            		even
0007AD98                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0007B230                            		even
0007B230                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0007B262                            		even
0007B262                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0007B294                            		even
0007B294                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0007B2C6                            		even
0007B2C6                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0007B2F8                            		even
0007B2F8                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0007B342                            		even
0007B342                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0007B380                            		even
0007B380                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0007B68C                            		even
0007B68C                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0007BB4E                            		even
0007BB4E                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0007C0D6                            		even
0007C0D6                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0007C100                            		even
0007C100                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0007C568                            		even
0007C568                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0007CB4A                            		even
0007CB4A                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0007D1BC                            		even
0007D1BC                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0007D726                            		even
0007D726                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0007DD2C                            		even
0007DD2C                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0007E46A                            		even
0007E46A                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0007EB48                            		even
0007EB48                            ObjPos_FZ:	incbin	objpos\fz.bin
0007EB90                            		even
0007EB90                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0007EBC2                            		even
0007EBC2                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0007EBF4                            		even
0007EBF4                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0007EC26                            		even
0007EC26                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0007EC58                            		even
0007EC58                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007EC8A                            		even
0007EC8A                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0007ECC2                            		even
0007ECC2                            ObjPos_End:	incbin	objpos\ending.bin
0007EE1E                            		even
0007EE1E                            ObjPos_BHZ1:	incbin	objpos\bhz1.bin
0007F430                            		even
0007F430                            ObjPos_BHZ2:	incbin	objpos\bhz2.bin
0007F9F4                            		even
0007F9F4                            ObjPos_BHZ3:	incbin	objpos\bhz3.bin
000800AE                            		even
000800AE FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
000800B4                            ; ---------------------------------------------------------------------------
000800B4                            		incbin	misc\padding4.bin
000806DE                            		even
000806DE                            
000806DE                                            include "MegaPCM.asm"                   ; ++ ADD THIS LINE
000806DE                            
000806DE                            ; ==============================================================================
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            ; Mega PCM 2.0 - DAC Sound Driver
000806DE                            ;
000806DE                            ; Documentation, examples and source code are available at:
000806DE                            ; - https://github.com/vladikcomper/MegaPCM/tree/2.x
000806DE                            ;
000806DE                            ; (c) 2012-2024, Vladikcomper
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            
000806DE                            ; ==============================================================================
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            ; Constants
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            
000806DE                            
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            ; Definitions for sample table
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            
000806DE =00000001                  FLAGS_SFX:		equ	$01		; sample is SFX, normal drums cannot interrupt it
000806DE =00000002                  FLAGS_LOOP:		equ	$02		; loop sample indefinitely
000806DE                            
000806DE =00000000                  TYPE_NONE:		equ	$00
000806DE =00000050                  TYPE_PCM:		equ	'P'
000806DE =00000054                  TYPE_PCM_TURBO:	equ	'T'
000806DE =00000044                  TYPE_DPCM:		equ	'D'
000806DE                            
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            ; Maximum playback rates:
000806DE =00007D00                  TYPE_PCM_TURBO_MAX_RATE:	equ	32000 ; Hz
000806DE =0000620C                  TYPE_PCM_MAX_RATE:			equ	25100 ; Hz
000806DE =00005078                  TYPE_DPCM_MAX_RATE:			equ	20600 ; Hz
000806DE                            
000806DE                            ; Internal driver's base rates for pitched playback.
000806DE                            ; NOTICE: Actual max rates are slightly lower,
000806DE                            ; because the highest pitch is 255/256, not 256/256.
000806DE =00006278                  TYPE_PCM_BASE_RATE:			equ	25208 ; Hz
000806DE =000050D3                  TYPE_DPCM_BASE_RATE:		equ	20691 ; Hz
000806DE                            
000806DE                            
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            ; Return error codes for `MegaPCM_LoadSampleTable`
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            
000806DE =00000001                  MPCM_ST_TOO_MANY_SAMPLES:			equ	$01
000806DE =00000002                  MPCM_ST_UNKNOWN_SAMPLE_TYPE:		equ	$02
000806DE                            
000806DE =00000010                  MPCM_ST_PITCH_NOT_SET:				equ	$10
000806DE                            
000806DE =00000020                  MPCM_ST_WAVE_INVALID_HEADER:		equ	$20
000806DE =00000021                  MPCM_ST_WAVE_BAD_AUDIO_FORMAT:		equ	$21
000806DE =00000022                  MPCM_ST_WAVE_NOT_MONO:				equ	$22
000806DE =00000023                  MPCM_ST_WAVE_NOT_8BIT:				equ	$23
000806DE =00000024                  MPCM_ST_WAVE_BAD_SAMPLE_RATE:		equ	$24
000806DE =00000025                  MPCM_ST_WAVE_MISSING_DATA_CHUNK:	equ	$25
000806DE                            
000806DE                            
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            ; System Ports used by Mega PCM
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            
000806DE =00A00000                  MPCM_Z80_RAM:		equ		$A00000
000806DE =00A11100                  MPCM_Z80_BUSREQ:	equ		$A11100
000806DE =00A11200                  MPCM_Z80_RESET:		equ		$A11200
000806DE                            
000806DE =00A04000                  MPCM_YM2612_A0:		equ		$A04000
000806DE =00A04001                  MPCM_YM2612_D0:		equ		$A04001
000806DE =00A04002                  MPCM_YM2612_A1:		equ		$A04002
000806DE =00A04003                  MPCM_YM2612_D1:		equ		$A04003
000806DE                            
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            ; Z80 equates
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            
000806DE =00001FC3                  Z_MPCM_DriverReady:	equ $1fc3
000806DE =00001FC2                  Z_MPCM_CommandInput:	equ $1fc2
000806DE =00001FC4                  Z_MPCM_VolumeInput:	equ $1fc4
000806DE =00001FC5                  Z_MPCM_SFXVolumeInput:	equ $1fc5
000806DE =00001FC6                  Z_MPCM_PanInput:	equ $1fc6
000806DE =00001FC7                  Z_MPCM_SFXPanInput:	equ $1fc7
000806DE =00001FDD                  Z_MPCM_LoopId:	equ $1fdd
000806DE =00001FDC                  Z_MPCM_ActiveSamplePitch:	equ $1fdc
000806DE =00001FE2                  Z_MPCM_VBlankActive:	equ $1fe2
000806DE =00001FE3                  Z_MPCM_CalibrationApplied:	equ $1fe3
000806DE =00001FE4                  Z_MPCM_CalibrationScore_ROM:	equ $1fe4
000806DE =00001FE6                  Z_MPCM_CalibrationScore_RAM:	equ $1fe6
000806DE =00001FE8                  Z_MPCM_LastErrorCode:	equ $1fe8
000806DE =00001976                  Z_MPCM_SampleTable:	equ $1976
000806DE =00000001                  Z_MPCM_COMMAND_STOP:	equ $1
000806DE =00000002                  Z_MPCM_COMMAND_PAUSE:	equ $2
000806DE =00000001                  Z_MPCM_LOOP_IDLE:	equ $1
000806DE =00000002                  Z_MPCM_LOOP_PAUSE:	equ $2
000806DE =00000010                  Z_MPCM_LOOP_PCM:	equ $10
000806DE =00000018                  Z_MPCM_LOOP_PCM_TURBO:	equ $18
000806DE =00000020                  Z_MPCM_LOOP_DPCM:	equ $20
000806DE =00000080                  Z_MPCM_LOOP_CALIBRATION:	equ $80
000806DE =00000002                  Z_MPCM_ERROR__BAD_INTERRUPT:	equ $2
000806DE =00000001                  Z_MPCM_ERROR__BAD_SAMPLE_TYPE:	equ $1
000806DE =00000080                  Z_MPCM_ERROR__UNKNOWN_COMMAND:	equ $80
000806DE                            
000806DE                            ; ==============================================================================
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            ; Macros
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            ; Macro to generate sample record in a sample table
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            ; ARGUMENTS:
000806DE                            ;	type - Sample type (TYPE_PCM, TYPE_DPCM, TYPE_PCM_TURBO or TYPE_NONE)
000806DE                            ;	samplePtr - Sample pointer/name (assigned via `incdac` macro)
000806DE                            ;	sampleRateHz? - (Optional) Playback rate in Hz, auto-detected for .WAV
000806DE                            ;	flags? - (Optional) Additional flags (e.g. FLAGS_SFX or FLAGS_LOOP)
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            
000806DE                            dcSample: macro	type, samplePtr, sampleRateHz, flags
000806DE                            	if narg>4
000806DE                            		inform 2, "Too many arguments. USAGE: dcSample type, samplePtr, sampleRateHz, flags"
000806DE                            	endif
000806DE                            	dc.b	\type					; $00	- type
000806DE                            	if \type=TYPE_PCM
000806DE                            		if \sampleRateHz+0>TYPE_PCM_MAX_RATE
000806DE                            			inform 2, "Invalid sample rate: \sampleRateHz\. TYPE_PCM only supports sample rates <= \#TYPE_PCM_MAX_RATE Hz"
000806DE                            		endif
000806DE                            		dc.b	\flags+0								; $01	- flags (optional)
000806DE                            		dc.b	(\sampleRateHz+0)*256/TYPE_PCM_BASE_RATE; $02	- pitch (optional for .WAV files)
000806DE                            		dc.b	0										; $03	- <RESERVED>
000806DE                            		dc.l	\samplePtr								; $04	- start offset
000806DE                            		dc.l	\samplePtr\_End							; $08	- end offset
000806DE                            	elseif \type=TYPE_PCM_TURBO
000806DE                            		if (\sampleRateHz+0<>TYPE_PCM_TURBO_MAX_RATE)&(\sampleRateHz+0<>0)
000806DE                            			inform 2, "Invalid sample rate: \sampleRateHz\. TYPE_PCM_TURBO only supports sample rate of \#TYPE_PCM_TURBO_MAX_RATE Hz"
000806DE                            		endif
000806DE                            		dc.b	\flags+0								; $01	- flags (optional)
000806DE                            		dc.b	$FF										; $02	- pitch (optional for .WAV files)
000806DE                            		dc.b	0										; $03	- <RESERVED>
000806DE                            		dc.l	\samplePtr								; $04	- start offset
000806DE                            		dc.l	\samplePtr\_End							; $08	- end offset
000806DE                            	elseif \type=TYPE_DPCM
000806DE                            		if \sampleRateHz>TYPE_DPCM_MAX_RATE
000806DE                            			inform 2, "Invalid sample rate: \sampleRateHz\. TYPE_DPCM only supports sample rates <= \#TYPE_DPCM_MAX_RATE Hz"
000806DE                            		endif
000806DE                            		dc.b	\flags+0								; $01	- flags (optional)
000806DE                            		dc.b	(\sampleRateHz)*256/TYPE_DPCM_BASE_RATE	; $02	- pitch
000806DE                            		dc.b	0										; $03	- <RESERVED>
000806DE                            		dc.l	\samplePtr								; $04	- start offset
000806DE                            		dc.l	\samplePtr\_End							; $08	- end offset
000806DE                            	elseif \type=TYPE_NONE
000806DE                            		dc.b	0, 0, 0
000806DE                            		dc.l	0, 0
000806DE                            	else
000806DE                            		inform 2, "Unknown sample type. Please use one of: TYPE_PCM, TYPE_DPCM, TYPE_PCM_TURBO, TYPE_NONE"
000806DE                            	endif
000806DE                            	endm
000806DE                            
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            ; Macro to include a sample file
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            ; ARGUMENTS:
000806DE                            ;	name - Name assigned to the sample (label)
000806DE                            ;	path - Sample's include path (string)
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            
000806DE                            incdac:	macro name, path
000806DE                            		even
000806DE                            	\name:
000806DE                            		incbin	\path
000806DE                            	\name\_End:
000806DE                            	endm
000806DE                            
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            ; Macro to stop Z80 and take over its bus
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            ; ARGUMENTS:
000806DE                            ;	opBusReq? - (Optional) Custom operand for Z80_BUSREQ
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            
000806DE                            MPCM_stopZ80:	macro opBusReq
000806DE                            	pusho
000806DE                            	opt		l-		; make sure "@" marks local labels
000806DE                            	if narg=1
000806DE                            		move.w	#$100, \opBusReq
000806DE                            		@wait\@:
000806DE                            			btst	#0, \opBusReq
000806DE                            			bne.s	@wait\@
000806DE                            	else
000806DE                            		move.w	#$100, MPCM_Z80_BUSREQ
000806DE                            		@wait\@:
000806DE                            			btst	#0, MPCM_Z80_BUSREQ
000806DE                            			bne.s	@wait\@
000806DE                            	endif
000806DE                            	popo
000806DE                            	endm
000806DE                            
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            ; Macro to start Z80 and release its bus
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            ; ARGUMENTS:
000806DE                            ;	opBusReq? - (Optional) Custom operand for Z80_BUSREQ
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            
000806DE                            MPCM_startZ80:	macro opBusReq
000806DE                            	if narg=1
000806DE                            		move.w	#0, \opBusReq
000806DE                            	else
000806DE                            		move.w	#0, MPCM_Z80_BUSREQ
000806DE                            	endif
000806DE                            	endm
000806DE                            
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            ; Ensures Mega PCM 2 isn't busy writing to YM (other than DAC output obviously)
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            ; ARGUMENTS:
000806DE                            ;	opBusReq? - (Optional) Custom operand for Z80_BUSREQ
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            
000806DE                            MPCM_ensureYMWriteReady:	macro opBusReq
000806DE                            	pusho
000806DE                            	opt		l-		; make sure "@" marks local labels
000806DE                            	@chk_ready\@:
000806DE                            		tst.b	(MPCM_Z80_RAM+Z_MPCM_DriverReady).l
000806DE                            		bne.s	@ready\@
000806DE                            		MPCM_startZ80 \opBusReq
000806DE                            		move.w	d0, -(sp)
000806DE                            		moveq	#10, d0
000806DE                            		dbf		d0, *						; waste 100+ cycles
000806DE                            		move.w	(sp)+, d0
000806DE                            		MPCM_stopZ80 \opBusReq
000806DE                            		bra.s	@chk_ready\@
000806DE                            	@ready\@:
000806DE                            	popo
000806DE                            	endm
000806DE                            
000806DE                            ; ==============================================================================
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            ; Mega PCM library blob
000806DE                            ; ------------------------------------------------------------------------------
000806DE                            
000806DE                            MegaPCMLibraryBlob:
000806DE                            
000806DE 40E7 46FC 2700 2F0B 47F9+  	dc.l	$40E746FC, $27002F0B, $47F900A1, $1100303C, $01003680, $37400100, $41FA0346, $43F900A0
000806FE 0000 323C 1975 12D8 51C9+  	dc.l	$0000323C, $197512D8, $51C9FFFC, $72003741, $010041F9, $00A01FC3, $4E714E71, $37400100
0008071E 3681 6016 36BC 0100 0813+  	dc.l	$36816016, $36BC0100, $08130000, $66FA1210, $36BC0000, $0C010052, $670A303C, $0FFF51C8
0008073E FFFE 60E0 265F 46DF 4E75+  	dc.l	$FFFE60E0, $265F46DF, $4E7548E7, $3C3847F9, $00A11100, $43F900A0, $1976594F, $747E1A18
0008075E 6700 0174 6B00 0160 1818+  	dc.l	$67000174, $6B000160, $18181618, $52482458, $28580C05, $00446700, $00F80C05, $00506708
0008077E 0C05 0054 6600 0184 2012+  	dc.l	$0C050054, $66000184, $20120C80, $52494646, $67180C80, $41494646, $67000174, $0C804E49
0008079E 5354 6600 00C4 6000 0166+  	dc.l	$53546600, $00C46000, $01660CAA, $57415645, $00086600, $015A45EA, $000C0C92, $666D7420
000807BE 6600 014C 0C6A 0100 0008+  	dc.l	$6600014C, $0C6A0100, $00086700, $000C0C6A, $FEFF0008, $6600013C, $0C6A0100, $000A6600
000807DE 0136 0C6A 0800 0016 6600+  	dc.l	$01360C6A, $08000016, $66000130, $4A036630, $1EAA000D, $1F6A000C, $00013017, $0C050054
000807FE 660C 0C40 7D00 6600 0116+  	dc.l	$660C0C40, $7D006600, $011676FF, $60120C40, $620C6200, $010A48C0, $E18880FC, $62781600
0008081E B5CC 6400 00FE 1EAA 0007+  	dc.l	$B5CC6400, $00FE1EAA, $00071F6A, $00060001, $1F6A0005, $00021F6A, $00040003, $201745F2
0008083E 0808 0C92 6461 7461 66D6+  	dc.l	$08080C92, $64617461, $66D61EAA, $00071F6A, $00060001, $1F6A0005, $00021F6A, $00040003
0008085E 2017 49F2 0808 504A 300C+  	dc.l	$201749F2, $0808504A, $300C0240, $000198C0, $4A036700, $00B2200A, $D0805240, $E2583E80
0008087E 4840 220C D281 5241 E259+  	dc.l	$4840220C, $D2815241, $E2593F41, $00024841, $40E746FC, $270036BC, $01000813, $000066FA
0008089E 12C5 12C4 12C3 12C0 12C1+  	dc.l	$12C512C4, $12C312C0, $12C112EF, $000312EF, $000212EF, $000512EF, $000436BC, $000046DF
000808BE 51CA FE9C 6040 5348 7000+  	dc.l	$51CAFE9C, $60405348, $700041E8, $FFF4584F, $4CDF1C3C, $4E7540E7, $46FC2700, $36BC0100
000808DE 0813 0000 66FA 12C5 12C5+  	dc.l	$08130000, $66FA12C5, $12C512C5, $12C512C5, $12C512C5, $12C512C5, $36BC0000, $46DF41E8
000808FE 000B 51CA FE5A 7001 60C0+  	dc.l	$000B51CA, $FE5A7001, $60C07002, $60BC7020, $60B87021, $60B47022, $60B07023, $60AC7024
0008091E 60A8 7025 60A4 7010 60A0+  	dc.l	$60A87025, $60A47010, $60A033FC, $010000A1, $11000839, $000000A1, $110066F6, $13C000A0
0008093E 1FC2 33FC 0000 00A1 1100+  	dc.l	$1FC233FC, $000000A1, $11004E75, $33FC0100, $00A11100, $08390000, $00A11100, $66F613FC
0008095E 0002 00A0 1FC2 33FC 0000+  	dc.l	$000200A0, $1FC233FC, $000000A1, $11004E75, $33FC0100, $00A11100, $08390000, $00A11100
0008097E 66F6 13FC 0000 00A0 1FC2+  	dc.l	$66F613FC, $000000A0, $1FC233FC, $000000A1, $11004E75, $33FC0100, $00A11100, $08390000
0008099E 00A1 1100 66F6 13FC 0001+  	dc.l	$00A11100, $66F613FC, $000100A0, $1FC233FC, $000000A1, $11004E75, $33FC0100, $00A11100
000809BE 0839 0000 00A1 1100 66F6+  	dc.l	$08390000, $00A11100, $66F613C0, $00A01FC4, $33FC0000, $00A11100, $4E7533FC, $010000A1
000809DE 1100 0839 0000 00A1 1100+  	dc.l	$11000839, $000000A1, $110066F6, $13C000A0, $1FC533FC, $000000A1, $11004E75, $33FC0100
000809FE 00A1 1100 0839 0000 00A1+  	dc.l	$00A11100, $08390000, $00A11100, $66F613C0, $00A01FC6, $33FC0000, $00A11100, $4E7533FC
00080A1E 0100 00A1 1100 0839 0000+  	dc.l	$010000A1, $11000839, $000000A1, $110066F6, $13C000A0, $1FC733FC, $000000A1, $11004E75
00080A3E F3ED 56C3 D118 0000 FEFF+  	dc.l	$F3ED56C3, $D1180000, $FEFFC210, $00C90000, $320900E5, $21006077, $0F770F77, $0F770F77
00080A5E 0F77 0F77 0F77 75E1 C94D+  	dc.l	$0F770F77, $0F7775E1, $C94D6567, $6150434D, $20762E32, $2E300000, $C33B00F5, $3E0232E8
00080A7E 1FF1 C9F3 3E10 32DD 1F21+  	dc.l	$1FF1C9F3, $3E1032DD, $1F214301, $223900ED, $73DE1FDD, $F933F1C1, $E1D131DD, $1FF508CB
00080A9E FCCB 85E5 7AE6 7F57 CB83+  	dc.l	$FCCB85E5, $7AE67F57, $CB83B320, $03051680, $D578B920, $0BDA6919, $CBBCEBED, $52C38700
00080ABE AF95 5F9C 8557 EBE5 C521+  	dc.l	$AF955F9C, $8557EBE5, $C521C41F, $0830012C, $E5ED7BDE, $1FDD21D1, $1F3AD31F, $CFF32AD9
00080ADE 1FED 4BD5 1F11 0003 D908+  	dc.l	$1FED4BD5, $1F110003, $D908AF08, $ED4BD11F, $0AE60FC6, $04473ADC, $1FFD6F21, $00031101
00080AFE 40D9 FB00 3E00 F3ED A0ED+  	dc.l	$40D9FB00, $3E00F3ED, $A0EDA016, $03E2EE00, $D94E0A12, $08FD8530, $012C087D, $D9FB9392
00080B1E D2C6 00F5 3E00 0000 0000+  	dc.l	$D2C600F5, $3E000000, $0000F1F3, $18E2FB3A, $0900DDBE, $032025F3, $7BD9BD28, $154E0A12
00080B3E 08FD 8530 012C 08D9 FBC5+  	dc.l	$08FD8530, $012C08D9, $FBC50303, $030303C1, $18E5D9FB, $DDCB0A4E, $C29900C9, $3A09003C
00080B5E 2100 8044 DDBE 0320 04ED+  	dc.l	$21008044, $DDBE0320, $04ED4BD7, $1FD7C3C6, $0021E100, $36C42336, $00C9D900, $030B030B
00080B7E 0018 14F5 C506 8E7B D9BD+  	dc.l	$001814F5, $C5068E7B, $D9BD28EE, $4E0A1208, $FD853001, $2C08D93E, $FF32E21F, $E52329E1
00080B9E 10E5 7BD9 BD28 0A4E 0A12+  	dc.l	$10E57BD9, $BD280A4E, $0A1208FD, $8530012C, $08D9D9ED, $4BD11F0A, $E60FC604, $47D9007B
00080BBE D9BD 280A 4E0A 1208 FD85+  	dc.l	$D9BD280A, $4E0A1208, $FD853001, $2C08D93A, $DC1FFD6F, $3AC21FB7, $280EF2BF, $01DDCB0A
00080BDE 46CA F118 AF32 C21F 32E2+  	dc.l	$46CAF118, $AF32C21F, $32E21F7B, $D9BD280A, $4E0A1208, $FD853001, $2C08D9C1, $F1FBC93D
00080BFE CA69 193D 2005 FD2E 0018+  	dc.l	$CA69193D, $2005FD2E, $0018DD3E, $8032E81F, $18D2F33E, $1832DD1F, $21A00222, $3900ED73
00080C1E DE1F DDF9 33F1 C1E1 D131+  	dc.l	$DE1FDDF9, $33F1C1E1, $D131DD1F, $F5CBFCCB, $85E57AE6, $7F57CB83, $B3200305, $1680D578
00080C3E B920 0BDA 6919 CBBC EBED+  	dc.l	$B9200BDA, $6919CBBC, $EBED52C3, $1502AF95, $5F9C8557, $EBE5C5ED, $7BDE1FDD, $21D11F3A
00080C5E D31F CFF3 1100 032A D91F+  	dc.l	$D31FCFF3, $1100032A, $D91FED4B, $D51FD921, $00031101, $40D93E00, $F3EDA0ED, $A01603E2
00080C7E 5602 D97E 122C 7DD9 FB93+  	dc.l	$5602D97E, $122C7DD9, $FB9392D2, $3802E523, $2309E1F3, $18ECFB3A, $0900DDBE, $03201DF3
00080C9E 7BD9 BD28 0D7E 122C D9FB+  	dc.l	$7BD9BD28, $0D7E122C, $D9FBE5C5, $09C1E1C3, $5F02D9FB, $DDCB0A4E, $C21F02C9, $3A09003C
00080CBE 2100 8044 DDBE 0320 04ED+  	dc.l	$21008044, $DDBE0320, $04ED4BD7, $1FD7C338, $02214C02, $36362336, $02C9D93E, $00C3AD02
00080CDE F5C5 06BF 7BD9 BD28 F17E+  	dc.l	$F5C506BF, $7BD9BD28, $F17E122C, $D93EFF32, $E21F3E00, $C5010000, $C110E900, $7BD9BD28
00080CFE 037E 122C D93A C21F B728+  	dc.l	$037E122C, $D93AC21F, $B7280EF2, $E002DDCB, $0A46CAF1, $18AF32C2, $1F32E21F, $C1F1FBC9
00080D1E 3DCA 6919 3D20 06CD 5C18+  	dc.l	$3DCA6919, $3D2006CD, $5C18AF18, $EC3E8032, $E81F18E1, $00000000, $00000000, $00000000
00080D3E 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080D5E 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080D7E 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080D9E 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080DBE 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080DDE 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080DFE 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080E1E 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080E3E 0001 0203 0405 0607 0809+  	dc.l	$00010203, $04050607, $08090A0B, $0C0D0E0F, $10111213, $14151617, $18191A1B, $1C1D1E1F
00080E5E 2021 2223 2425 2627 2829+  	dc.l	$20212223, $24252627, $28292A2B, $2C2D2E2F, $30313233, $34353637, $38393A3B, $3C3D3E3F
00080E7E 4041 4243 4445 4647 4849+  	dc.l	$40414243, $44454647, $48494A4B, $4C4D4E4F, $50515253, $54555657, $58595A5B, $5C5D5E5F
00080E9E 6061 6263 6465 6667 6869+  	dc.l	$60616263, $64656667, $68696A6B, $6C6D6E6F, $70717273, $74757677, $78797A7B, $7C7D7E7F
00080EBE 8081 8283 8485 8687 8889+  	dc.l	$80818283, $84858687, $88898A8B, $8C8D8E8F, $90919293, $94959697, $98999A9B, $9C9D9E9F
00080EDE A0A1 A2A3 A4A5 A6A7 A8A9+  	dc.l	$A0A1A2A3, $A4A5A6A7, $A8A9AAAB, $ACADAEAF, $B0B1B2B3, $B4B5B6B7, $B8B9BABB, $BCBDBEBF
00080EFE C0C1 C2C3 C4C5 C6C7 C8C9+  	dc.l	$C0C1C2C3, $C4C5C6C7, $C8C9CACB, $CCCDCECF, $D0D1D2D3, $D4D5D6D7, $D8D9DADB, $DCDDDEDF
00080F1E E0E1 E2E3 E4E5 E6E7 E8E9+  	dc.l	$E0E1E2E3, $E4E5E6E7, $E8E9EAEB, $ECEDEEEF, $F0F1F2F3, $F4F5F6F7, $F8F9FAFB, $FCFDFEFF
00080F3E 0809 0A0B 0C0D 0E0F 1010+  	dc.l	$08090A0B, $0C0D0E0F, $10101112, $13141516, $1718191A, $1B1C1D1E, $1E1F2021, $22232425
00080F5E 2627 2829 2A2B 2C2C 2D2E+  	dc.l	$26272829, $2A2B2C2C, $2D2E2F30, $31323334, $35363738, $393A3A3B, $3C3D3E3F, $40414243
00080F7E 4445 4647 4848 494A 4B4C+  	dc.l	$44454647, $4848494A, $4B4C4D4E, $4F505152, $53545556, $56575859, $5A5B5C5D, $5E5F6061
00080F9E 6263 6464 6566 6768 696A+  	dc.l	$62636464, $65666768, $696A6B6C, $6D6E6F70, $71727273, $74757677, $78797A7B, $7C7D7E7F
00080FBE 8080 8182 8384 8586 8788+  	dc.l	$80808182, $83848586, $8788898A, $8B8C8D8E, $8E8F9091, $92939495, $96979899, $9A9B9C9C
00080FDE 9D9E 9FA0 A1A2 A3A4 A5A6+  	dc.l	$9D9E9FA0, $A1A2A3A4, $A5A6A7A8, $A9AAAAAB, $ACADAEAF, $B0B1B2B3, $B4B5B6B7, $B8B8B9BA
00080FFE BBBC BDBE BFC0 C1C2 C3C4+  	dc.l	$BBBCBDBE, $BFC0C1C2, $C3C4C5C6, $C6C7C8C9, $CACBCCCD, $CECFD0D1, $D2D3D4D4, $D5D6D7D8
0008101E D9DA DBDC DDDE DFE0 E1E2+  	dc.l	$D9DADBDC, $DDDEDFE0, $E1E2E2E3, $E4E5E6E7, $E8E9EAEB, $ECEDEEEF, $F0F0F1F2, $F3F4F5F6
0008103E 1111 1213 1415 1617 1818+  	dc.l	$11111213, $14151617, $1818191A, $1B1C1D1E, $1E1F2021, $22232425, $25262728, $292A2B2B
0008105E 2C2D 2E2F 3031 3232 3334+  	dc.l	$2C2D2E2F, $30313232, $33343536, $37383839, $3A3B3C3D, $3E3F3F40, $41424344, $45454647
0008107E 4849 4A4B 4C4C 4D4E 4F50+  	dc.l	$48494A4B, $4C4C4D4E, $4F505152, $52535455, $56575859, $595A5B5C, $5D5E5F5F, $60616263
0008109E 6465 6666 6768 696A 6B6C+  	dc.l	$64656666, $6768696A, $6B6C6C6D, $6E6F7071, $72737374, $75767778, $79797A7B, $7C7D7E7F
000810BE 8080 8182 8384 8586 8687+  	dc.l	$80808182, $83848586, $86878889, $8A8B8C8D, $8D8E8F90, $91929393, $94959697, $98999A9A
000810DE 9B9C 9D9E 9FA0 A0A1 A2A3+  	dc.l	$9B9C9D9E, $9FA0A0A1, $A2A3A4A5, $A6A7A7A8, $A9AAABAC, $ADADAEAF, $B0B1B2B3, $B4B4B5B6
000810FE B7B8 B9BA BABB BCBD BEBF+  	dc.l	$B7B8B9BA, $BABBBCBD, $BEBFC0C1, $C1C2C3C4, $C5C6C7C7, $C8C9CACB, $CCCDCECE, $CFD0D1D2
0008111E D3D4 D4D5 D6D7 D8D9 DADB+  	dc.l	$D3D4D4D5, $D6D7D8D9, $DADBDBDC, $DDDEDFE0, $E1E1E2E3, $E4E5E6E7, $E8E8E9EA, $EBECEDEE
0008113E 191A 1B1C 1C1D 1E1F 2020+  	dc.l	$191A1B1C, $1C1D1E1F, $20202122, $23242425, $26272828, $292A2B2C, $2C2D2E2F, $30303132
0008115E 3334 3435 3637 3838 393A+  	dc.l	$33343435, $36373838, $393A3B3C, $3C3D3E3F, $40404142, $43444445, $46474848, $494A4B4C
0008117E 4C4D 4E4F 5050 5152 5354+  	dc.l	$4C4D4E4F, $50505152, $53545455, $56575858, $595A5B5C, $5C5D5E5F, $60606162, $63646465
0008119E 6667 6868 696A 6B6C 6C6D+  	dc.l	$66676868, $696A6B6C, $6C6D6E6F, $70707172, $73747475, $76777878, $797A7B7C, $7C7D7E7F
000811BE 8080 8182 8384 8485 8687+  	dc.l	$80808182, $83848485, $86878888, $898A8B8C, $8C8D8E8F, $90909192, $93949495, $96979898
000811DE 999A 9B9C 9C9D 9E9F A0A0+  	dc.l	$999A9B9C, $9C9D9E9F, $A0A0A1A2, $A3A4A4A5, $A6A7A8A8, $A9AAABAC, $ACADAEAF, $B0B0B1B2
000811FE B3B4 B4B5 B6B7 B8B8 B9BA+  	dc.l	$B3B4B4B5, $B6B7B8B8, $B9BABBBC, $BCBDBEBF, $C0C0C1C2, $C3C4C4C5, $C6C7C8C8, $C9CACBCC
0008121E CCCD CECF D0D0 D1D2 D3D4+  	dc.l	$CCCDCECF, $D0D0D1D2, $D3D4D4D5, $D6D7D8D8, $D9DADBDC, $DCDDDEDF, $E0E0E1E2, $E3E4E4E5
0008123E 2222 2324 2525 2627 2828+  	dc.l	$22222324, $25252627, $2828292A, $2A2B2C2D, $2D2E2F30, $30313233, $33343535, $36373838
0008125E 393A 3B3B 3C3D 3E3E 3F40+  	dc.l	$393A3B3B, $3C3D3E3E, $3F404041, $42434344, $45464647, $4849494A, $4B4B4C4D, $4E4E4F50
0008127E 5151 5253 5454 5556 5657+  	dc.l	$51515253, $54545556, $56575859, $595A5B5C, $5C5D5E5F, $5F606161, $62636464, $65666767
0008129E 6869 6A6A 6B6C 6C6D 6E6F+  	dc.l	$68696A6A, $6B6C6C6D, $6E6F6F70, $71727273, $74757576, $77777879, $7A7A7B7C, $7D7D7E7F
000812BE 8080 8182 8283 8485 8586+  	dc.l	$80808182, $82838485, $85868788, $88898A8B, $8B8C8D8D, $8E8F9090, $91929393, $94959696
000812DE 9798 9899 9A9B 9B9C 9D9E+  	dc.l	$97989899, $9A9B9B9C, $9D9E9E9F, $A0A1A1A2, $A3A3A4A5, $A6A6A7A8, $A9A9AAAB, $ACACADAE
000812FE AEAF B0B1 B1B2 B3B4 B4B5+  	dc.l	$AEAFB0B1, $B1B2B3B4, $B4B5B6B7, $B7B8B9B9, $BABBBCBC, $BDBEBFBF, $C0C1C2C2, $C3C4C4C5
0008131E C6C7 C7C8 C9CA CACB CCCD+  	dc.l	$C6C7C7C8, $C9CACACB, $CCCDCDCE, $CFCFD0D1, $D2D2D3D4, $D5D5D6D7, $D8D8D9DA, $DADBDCDD
0008133E 2A2B 2C2C 2D2E 2E2F 3030+  	dc.l	$2A2B2C2C, $2D2E2E2F, $30303132, $32333434, $35363637, $3838393A, $3A3B3C3C, $3D3E3E3F
0008135E 4040 4142 4243 4444 4546+  	dc.l	$40404142, $42434444, $45464647, $4848494A, $4A4B4C4C, $4D4E4E4F, $50505152, $52535454
0008137E 5556 5657 5858 595A 5A5B+  	dc.l	$55565657, $5858595A, $5A5B5C5C, $5D5E5E5F, $60606162, $62636464, $65666667, $6868696A
0008139E 6A6B 6C6C 6D6E 6E6F 7070+  	dc.l	$6A6B6C6C, $6D6E6E6F, $70707172, $72737474, $75767677, $7878797A, $7A7B7C7C, $7D7E7E7F
000813BE 8080 8182 8283 8484 8586+  	dc.l	$80808182, $82838484, $85868687, $8888898A, $8A8B8C8C, $8D8E8E8F, $90909192, $92939494
000813DE 9596 9697 9898 999A 9A9B+  	dc.l	$95969697, $9898999A, $9A9B9C9C, $9D9E9E9F, $A0A0A1A2, $A2A3A4A4, $A5A6A6A7, $A8A8A9AA
000813FE AAAB ACAC ADAE AEAF B0B0+  	dc.l	$AAABACAC, $ADAEAEAF, $B0B0B1B2, $B2B3B4B4, $B5B6B6B7, $B8B8B9BA, $BABBBCBC, $BDBEBEBF
0008141E C0C0 C1C2 C2C3 C4C4 C5C6+  	dc.l	$C0C0C1C2, $C2C3C4C4, $C5C6C6C7, $C8C8C9CA, $CACBCCCC, $CDCECECF, $D0D0D1D2, $D2D3D4D4
0008143E 3333 3435 3536 3637 3838+  	dc.l	$33333435, $35363637, $38383939, $3A3B3B3C, $3C3D3E3E, $3F3F4041, $41424243, $44444545
0008145E 4647 4748 4849 4A4A 4B4B+  	dc.l	$46474748, $48494A4A, $4B4B4C4D, $4D4E4E4F, $50505151, $52535354, $54555656, $57575859
0008147E 595A 5A5B 5C5C 5D5D 5E5F+  	dc.l	$595A5A5B, $5C5C5D5D, $5E5F5F60, $60616262, $63636465, $65666667, $68686969, $6A6B6B6C
0008149E 6C6D 6E6E 6F6F 7071 7172+  	dc.l	$6C6D6E6E, $6F6F7071, $71727273, $74747575, $76777778, $78797A7A, $7B7B7C7D, $7D7E7E7F
000814BE 8080 8181 8283 8384 8485+  	dc.l	$80808181, $82838384, $84858686, $87878889, $898A8A8B, $8C8C8D8D, $8E8F8F90, $90919292
000814DE 9393 9495 9596 9697 9898+  	dc.l	$93939495, $95969697, $98989999, $9A9B9B9C, $9C9D9E9E, $9F9FA0A1, $A1A2A2A3, $A4A4A5A5
000814FE A6A7 A7A8 A8A9 AAAA ABAB+  	dc.l	$A6A7A7A8, $A8A9AAAA, $ABABACAD, $ADAEAEAF, $B0B0B1B1, $B2B3B3B4, $B4B5B6B6, $B7B7B8B9
0008151E B9BA BABB BCBC BDBD BEBF+  	dc.l	$B9BABABB, $BCBCBDBD, $BEBFBFC0, $C0C1C2C2, $C3C3C4C5, $C5C6C6C7, $C8C8C9C9, $CACBCBCC
0008153E 3B3C 3C3D 3D3E 3E3F 4040+  	dc.l	$3B3C3C3D, $3D3E3E3F, $40404141, $42424343, $44444545, $46464748, $4849494A, $4A4B4B4C
0008155E 4C4D 4D4E 4E4F 5050 5151+  	dc.l	$4C4D4D4E, $4E4F5050, $51515252, $53535454, $55555656, $57585859, $595A5A5B, $5B5C5C5D
0008157E 5D5E 5E5F 6060 6161 6262+  	dc.l	$5D5E5E5F, $60606161, $62626363, $64646565, $66666768, $6869696A, $6A6B6B6C, $6C6D6D6E
0008159E 6E6F 7070 7171 7272 7373+  	dc.l	$6E6F7070, $71717272, $73737474, $75757676, $77787879, $797A7A7B, $7B7C7C7D, $7D7E7E7F
000815BE 8080 8181 8282 8383 8484+  	dc.l	$80808181, $82828383, $84848585, $86868788, $8889898A, $8A8B8B8C, $8C8D8D8E, $8E8F9090
000815DE 9191 9292 9393 9494 9595+  	dc.l	$91919292, $93939494, $95959696, $97989899, $999A9A9B, $9B9C9C9D, $9D9E9E9F, $A0A0A1A1
000815FE A2A2 A3A3 A4A4 A5A5 A6A6+  	dc.l	$A2A2A3A3, $A4A4A5A5, $A6A6A7A8, $A8A9A9AA, $AAABABAC, $ACADADAE, $AEAFB0B0, $B1B1B2B2
0008161E B3B3 B4B4 B5B5 B6B6 B7B8+  	dc.l	$B3B3B4B4, $B5B5B6B6, $B7B8B8B9, $B9BABABB, $BBBCBCBD, $BDBEBEBF, $C0C0C1C1, $C2C2C3C3
0008163E 4444 4545 4646 4747 4848+  	dc.l	$44444545, $46464747, $48484849, $494A4A4B, $4B4C4C4D, $4D4E4E4F, $4F4F5050, $51515252
0008165E 5353 5454 5555 5656 5657+  	dc.l	$53535454, $55555656, $56575758, $5859595A, $5A5B5B5C, $5C5D5D5D, $5E5E5F5F, $60606161
0008167E 6262 6363 6464 6465 6566+  	dc.l	$62626363, $64646465, $65666667, $67686869, $696A6A6B, $6B6B6C6C, $6D6D6E6E, $6F6F7070
0008169E 7171 7272 7273 7374 7475+  	dc.l	$71717272, $72737374, $74757576, $76777778, $78797979, $7A7A7B7B, $7C7C7D7D, $7E7E7F7F
000816BE 8080 8081 8182 8283 8384+  	dc.l	$80808081, $81828283, $83848485, $85868687, $87878888, $89898A8A, $8B8B8C8C, $8D8D8E8E
000816DE 8E8F 8F90 9091 9192 9293+  	dc.l	$8E8F8F90, $90919192, $92939394, $94959595, $96969797, $98989999, $9A9A9B9B, $9C9C9C9D
000816FE 9D9E 9E9F 9FA0 A0A1 A1A2+  	dc.l	$9D9E9E9F, $9FA0A0A1, $A1A2A2A3, $A3A3A4A4, $A5A5A6A6, $A7A7A8A8, $A9A9AAAA, $AAABABAC
0008171E ACAD ADAE AEAF AFB0 B0B1+  	dc.l	$ACADADAE, $AEAFAFB0, $B0B1B1B1, $B2B2B3B3, $B4B4B5B5, $B6B6B7B7, $B8B8B8B9, $B9BABABB
0008173E 4C4D 4D4E 4E4E 4F4F 5050+  	dc.l	$4C4D4D4E, $4E4E4F4F, $50505051, $51525252, $53535454, $54555556, $56565757, $58585859
0008175E 595A 5A5A 5B5B 5C5C 5C5D+  	dc.l	$595A5A5A, $5B5B5C5C, $5C5D5D5E, $5E5E5F5F, $60606061, $61626262, $63636464, $64656566
0008177E 6666 6767 6868 6869 696A+  	dc.l	$66666767, $68686869, $696A6A6A, $6B6B6C6C, $6C6D6D6E, $6E6E6F6F, $70707071, $71727272
0008179E 7373 7474 7475 7576 7676+  	dc.l	$73737474, $74757576, $76767777, $78787879, $797A7A7A, $7B7B7C7C, $7C7D7D7E, $7E7E7F7F
000817BE 8080 8081 8182 8282 8383+  	dc.l	$80808081, $81828282, $83838484, $84858586, $86868787, $88888889, $898A8A8A, $8B8B8C8C
000817DE 8C8D 8D8E 8E8E 8F8F 9090+  	dc.l	$8C8D8D8E, $8E8E8F8F, $90909091, $91929292, $93939494, $94959596, $96969797, $98989899
000817FE 999A 9A9A 9B9B 9C9C 9C9D+  	dc.l	$999A9A9A, $9B9B9C9C, $9C9D9D9E, $9E9E9F9F, $A0A0A0A1, $A1A2A2A2, $A3A3A4A4, $A4A5A5A6
0008181E A6A6 A7A7 A8A8 A8A9 A9AA+  	dc.l	$A6A6A7A7, $A8A8A8A9, $A9AAAAAA, $ABABACAC, $ACADADAE, $AEAEAFAF, $B0B0B0B1, $B1B2B2B2
0008183E 5555 5656 5657 5757 5858+  	dc.l	$55555656, $56575757, $58585859, $59595A5A, $5A5B5B5B, $5C5C5C5D, $5D5D5E5E, $5E5F5F5F
0008185E 6060 6061 6161 6262 6263+  	dc.l	$60606061, $61616262, $62636363, $64646465, $65656666, $66676767, $68686869, $69696A6A
0008187E 6A6B 6B6B 6C6C 6C6D 6D6D+  	dc.l	$6A6B6B6B, $6C6C6C6D, $6D6D6E6E, $6E6F6F6F, $70707071, $71717272, $72737373, $74747475
0008189E 7575 7676 7677 7777 7878+  	dc.l	$75757676, $76777777, $78787879, $79797A7A, $7A7B7B7B, $7C7C7C7D, $7D7D7E7E, $7E7F7F7F
000818BE 8080 8081 8181 8282 8283+  	dc.l	$80808081, $81818282, $82838383, $84848485, $85858686, $86878787, $88888889, $89898A8A
000818DE 8A8B 8B8B 8C8C 8C8D 8D8D+  	dc.l	$8A8B8B8B, $8C8C8C8D, $8D8D8E8E, $8E8F8F8F, $90909091, $91919292, $92939393, $94949495
000818FE 9595 9696 9697 9797 9898+  	dc.l	$95959696, $96979797, $98989899, $99999A9A, $9A9B9B9B, $9C9C9C9D, $9D9D9E9E, $9E9F9F9F
0008191E A0A0 A0A1 A1A1 A2A2 A2A3+  	dc.l	$A0A0A0A1, $A1A1A2A2, $A2A3A3A3, $A4A4A4A5, $A5A5A6A6, $A6A7A7A7, $A8A8A8A9, $A9A9AAAA
0008193E 5D5E 5E5E 5E5F 5F5F 6060+  	dc.l	$5D5E5E5E, $5E5F5F5F, $60606060, $61616161, $62626262, $63636364, $64646465, $65656566
0008195E 6666 6667 6767 6868 6868+  	dc.l	$66666667, $67676868, $68686969, $69696A6A, $6A6A6B6B, $6B6C6C6C, $6C6D6D6D, $6D6E6E6E
0008197E 6E6F 6F6F 7070 7070 7171+  	dc.l	$6E6F6F6F, $70707070, $71717171, $72727272, $73737374, $74747475, $75757576, $76767677
0008199E 7777 7878 7878 7979 7979+  	dc.l	$77777878, $78787979, $79797A7A, $7A7A7B7B, $7B7C7C7C, $7C7D7D7D, $7D7E7E7E, $7E7F7F7F
000819BE 8080 8080 8181 8181 8282+  	dc.l	$80808080, $81818181, $82828282, $83838384, $84848485, $85858586, $86868687, $87878888
000819DE 8888 8989 8989 8A8A 8A8A+  	dc.l	$88888989, $89898A8A, $8A8A8B8B, $8B8C8C8C, $8C8D8D8D, $8D8E8E8E, $8E8F8F8F, $90909090
000819FE 9191 9191 9292 9292 9393+  	dc.l	$91919191, $92929292, $93939394, $94949495, $95959596, $96969697, $97979898, $98989999
00081A1E 9999 9A9A 9A9A 9B9B 9B9C+  	dc.l	$99999A9A, $9A9A9B9B, $9B9C9C9C, $9C9D9D9D, $9D9E9E9E, $9E9F9F9F, $A0A0A0A0, $A1A1A1A1
00081A3E 6666 6667 6767 6767 6868+  	dc.l	$66666667, $67676767, $68686868, $68696969, $69696A6A, $6A6A6A6B, $6B6B6B6B, $6C6C6C6C
00081A5E 6C6D 6D6D 6D6D 6E6E 6E6E+  	dc.l	$6C6D6D6D, $6D6D6E6E, $6E6E6E6F, $6F6F6F6F, $70707070, $70717171, $71717272, $72727273
00081A7E 7373 7373 7474 7474 7475+  	dc.l	$73737373, $74747474, $74757575, $75757676, $76767677, $77777777, $78787878, $78797979
00081A9E 7979 7A7A 7A7A 7A7B 7B7B+  	dc.l	$79797A7A, $7A7A7A7B, $7B7B7B7B, $7C7C7C7C, $7C7D7D7D, $7D7D7E7E, $7E7E7E7F, $7F7F7F7F
00081ABE 8080 8080 8081 8181 8181+  	dc.l	$80808080, $80818181, $81818282, $82828283, $83838383, $84848484, $84858585, $85858686
00081ADE 8686 8687 8787 8787 8888+  	dc.l	$86868687, $87878787, $88888888, $88898989, $89898A8A, $8A8A8A8B, $8B8B8B8B, $8C8C8C8C
00081AFE 8C8D 8D8D 8D8D 8E8E 8E8E+  	dc.l	$8C8D8D8D, $8D8D8E8E, $8E8E8E8F, $8F8F8F8F, $90909090, $90919191, $91919292, $92929293
00081B1E 9393 9393 9494 9494 9495+  	dc.l	$93939393, $94949494, $94959595, $95959696, $96969697, $97979797, $98989898, $98999999
00081B3E 6E6F 6F6F 6F6F 6F6F 7070+  	dc.l	$6E6F6F6F, $6F6F6F6F, $70707070, $70707070, $71717171, $71717172, $72727272, $72727273
00081B5E 7373 7373 7373 7474 7474+  	dc.l	$73737373, $73737474, $74747474, $74747575, $75757575, $75767676, $76767676, $76777777
00081B7E 7777 7777 7878 7878 7878+  	dc.l	$77777777, $78787878, $78787878, $79797979, $7979797A, $7A7A7A7A, $7A7A7A7B, $7B7B7B7B
00081B9E 7B7B 7C7C 7C7C 7C7C 7C7C+  	dc.l	$7B7B7C7C, $7C7C7C7C, $7C7C7D7D, $7D7D7D7D, $7D7E7E7E, $7E7E7E7E, $7E7F7F7F, $7F7F7F7F
00081BBE 8080 8080 8080 8080 8181+  	dc.l	$80808080, $80808080, $81818181, $81818182, $82828282, $82828283, $83838383, $83838484
00081BDE 8484 8484 8484 8585 8585+  	dc.l	$84848484, $84848585, $85858585, $85868686, $86868686, $86878787, $87878787, $88888888
00081BFE 8888 8888 8989 8989 8989+  	dc.l	$88888888, $89898989, $8989898A, $8A8A8A8A, $8A8A8A8B, $8B8B8B8B, $8B8B8C8C, $8C8C8C8C
00081C1E 8C8C 8D8D 8D8D 8D8D 8D8E+  	dc.l	$8C8C8D8D, $8D8D8D8D, $8D8E8E8E, $8E8E8E8E, $8E8F8F8F, $8F8F8F8F, $90909090, $90909090
00081C3E 7777 7777 7777 7777 7878+  	dc.l	$77777777, $77777777, $78787878, $78787878, $78787878, $78787879, $79797979, $79797979
00081C5E 7979 7979 7979 7A7A 7A7A+  	dc.l	$79797979, $79797A7A, $7A7A7A7A, $7A7A7A7A, $7A7A7A7A, $7A7B7B7B, $7B7B7B7B, $7B7B7B7B
00081C7E 7B7B 7B7B 7C7C 7C7C 7C7C+  	dc.l	$7B7B7B7B, $7C7C7C7C, $7C7C7C7C, $7C7C7C7C, $7C7C7C7D, $7D7D7D7D, $7D7D7D7D, $7D7D7D7D
00081C9E 7D7D 7E7E 7E7E 7E7E 7E7E+  	dc.l	$7D7D7E7E, $7E7E7E7E, $7E7E7E7E, $7E7E7E7E, $7E7F7F7F, $7F7F7F7F, $7F7F7F7F, $7F7F7F7F
00081CBE 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808081, $81818181, $81818181, $81818181, $81818282
00081CDE 8282 8282 8282 8282 8282+  	dc.l	$82828282, $82828282, $82828282, $82838383, $83838383, $83838383, $83838383, $84848484
00081CFE 8484 8484 8484 8484 8484+  	dc.l	$84848484, $84848484, $84848485, $85858585, $85858585, $85858585, $85858686, $86868686
00081D1E 8686 8686 8686 8686 8687+  	dc.l	$86868686, $86868686, $86878787, $87878787, $87878787, $87878787, $88888888, $88888888
00081D3E 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081D5E 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081D7E 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081D9E 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081DBE 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081DDE 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081DFE 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081E1E 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081E3E 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $01010101, $01010101, $01010101, $01010101
00081E5E 0202 0202 0202 0202 0202+  	dc.l	$02020202, $02020202, $02020202, $02020202, $04040404, $04040404, $04040404, $04040404
00081E7E 0808 0808 0808 0808 0808+  	dc.l	$08080808, $08080808, $08080808, $08080808, $10101010, $10101010, $10101010, $10101010
00081E9E 2020 2020 2020 2020 2020+  	dc.l	$20202020, $20202020, $20202020, $20202020, $40404040, $40404040, $40404040, $40404040
00081EBE 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $FFFFFFFF, $FFFFFFFF, $FFFFFFFF, $FFFFFFFF
00081EDE FEFE FEFE FEFE FEFE FEFE+  	dc.l	$FEFEFEFE, $FEFEFEFE, $FEFEFEFE, $FEFEFEFE, $FCFCFCFC, $FCFCFCFC, $FCFCFCFC, $FCFCFCFC
00081EFE F8F8 F8F8 F8F8 F8F8 F8F8+  	dc.l	$F8F8F8F8, $F8F8F8F8, $F8F8F8F8, $F8F8F8F8, $F0F0F0F0, $F0F0F0F0, $F0F0F0F0, $F0F0F0F0
00081F1E E0E0 E0E0 E0E0 E0E0 E0E0+  	dc.l	$E0E0E0E0, $E0E0E0E0, $E0E0E0E0, $E0E0E0E0, $C0C0C0C0, $C0C0C0C0, $C0C0C0C0, $C0C0C0C0
00081F3E 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081F5E 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081F7E 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081F9E 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081FBE 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081FDE 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081FFE 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
0008201E 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
0008203E 0000 0000 0000 00D1 C9D5+  	dc.l	$00000000, $000000D1, $C9D511A0, $00B7ED52, $112000ED, $52280FD2, $13167DED, $440F0FE6
0008205E 0721 0016 6FE9 D1D5 1329+  	dc.l	$07210016, $6FE9D1D5, $132918D4, $F33E2032, $DD1F2140, $17223900, $ED73DE1F, $DDF933F1
0008207E C1E1 D131 DD1F F508 CBFC+  	dc.l	$C1E1D131, $DD1FF508, $CBFCE5CB, $BA1B7AA3, $3C200305, $167F141C, $D5151D78, $B9200BDA
0008209E 6919 CBBC EBED 52C3 7216+  	dc.l	$6919CBBC, $EBED52C3, $7216AF95, $5F9C8557, $EB2B242C, $E5C521C4, $1F083001, $2CE5ED7B
000820BE DE1F 3AD3 1FCF F301 0003+  	dc.l	$DE1F3AD3, $1FCFF301, $00032614, $ED5BD91F, $DD2AD51F, $D908AF08, $ED4BD11F, $0AE60FC6
000820DE 0447 3ADC 1FFD 6F21 0003+  	dc.l	$04473ADC, $1FFD6F21, $00031101, $40D9FB0D, $3E800200, $1A136F0A, $0C8624F3, $020C8625
000820FE 02DD 2D28 1DD9 4E0A 1208+  	dc.l	$02DD2D28, $1DD94E0A, $1208FD85, $30012C08, $7DD9FB91, $90D2B416, $F5F1F5F1, $E509E1F3
0008211E 18E3 DD25 C2C5 16FB 3A09+  	dc.l	$18E3DD25, $C2C516FB, $3A090021, $D41FBE20, $28F379D9, $BD28174E, $0A1208FD, $8530012C
0008213E 08D9 FBF5 F1F5 F1E5 2323+  	dc.l	$08D9FBF5, $F1F5F1E5, $232323E1, $18E3D9FB, $3ADB1FE6, $02C28216, $C93C1100, $80DD2100
0008215E 80BE 2004 DD2A D71F 2614+  	dc.l	$80BE2004, $DD2AD71F, $2614D7C3, $B41621D6, $1636B323, $3616C9D9, $00030B03, $0B001814
0008217E F5C5 0672 79D9 BD28 EE4E+  	dc.l	$F5C50672, $79D9BD28, $EE4E0A12, $08FD8530, $012C08D9, $3EFF32E2, $1FC5C1E5, $2929E100
0008219E 10E2 79D9 BD28 0A4E 0A12+  	dc.l	$10E279D9, $BD280A4E, $0A1208FD, $8530012C, $08D9D9ED, $4BD11F0A, $E60FC604, $47D93ADC
000821BE 1FFD 6F3A C21F B728 0DF2+  	dc.l	$1FFD6F3A, $C21FB728, $0DF2AE17, $3ADB1F0F, $3028AF32, $C21F79D9, $BD280A4E, $0A1208FD
000821DE 8530 012C 08D9 AF32 E21F+  	dc.l	$8530012C, $08D9AF32, $E21FC1F1, $FBC93DCA, $69193D20, $0BFD2E00, $18DC3AC2, $1FC3F118
000821FE 3E80 32E8 1F18 CBF3 3E80+  	dc.l	$3E8032E8, $1F18CBF3, $3E8032DD, $1F21DC17, $223900D9, $0E00D9FB, $000018FC, $D921834D
0008221E CD09 1621 F517 790C D1E6+  	dc.l	$CD091621, $F517790C, $D1E60387, $16005F19, $5E2356EB, $E9FB170B, $181B18D9, $010000ED
0008223E 43E4 1F11 0080 214B 18FB+  	dc.l	$43E41F11, $0080214B, $18FBE9D9, $ED43E41F, $01000011, $0000214B, $18FBE9D9, $ED43E61F
0008225E 6069 ED5B E41F AFED 52FA+  	dc.l	$6069ED5B, $E41FAFED, $52FA3C18, $7BCB2A1F, $CB2A1FCB, $2A1F5FAF, $ED52300E, $CD3101CD
0008227E 9102 CD2E 173E 0132 E31F+  	dc.l	$9102CD2E, $173E0132, $E31FC91A, $031A031A, $031A031A, $031A031A, $031A03E9, $F33E0232
0008229E DD1F E52A 3900 22E0 1F21+  	dc.l	$DD1FE52A, $390022E0, $1F217518, $223900E1, $FB000018, $FCE52172, $4DCD0916, $E13AC21F
000822BE B728 23F2 9818 3ADB 1F0F+  	dc.l	$B72823F2, $98183ADB, $1F0F3006, $AF32C21F, $FBC93AC2, $1FC3F118, $3DCA6919, $3D28F13E
000822DE 8032 E81F 18E6 E52A E01F+  	dc.l	$8032E81F, $18E6E52A, $E01F2239, $00E13333, $C9F33E01, $32DD1F21, $C2182239, $00FB0000
000822FE 18FC 2187 4DCD 0916 3AC2+  	dc.l	$18FC2187, $4DCD0916, $3AC21FB7, $FAF118FB, $C931EA1F, $21000006, $15E510FD, $31C01FCD
0008231E C717 21C6 1F3E C077 2C77+  	dc.l	$C71721C6, $1F3EC077, $2C773E52, $32C31F18, $C031C01F, $21C21F36, $00CDFF18, $C3B118D6
0008233E 8028 134F 0600 8760 6F29+  	dc.l	$8028134F, $06008760, $6F292909, $DD216D19, $EBDD19C3, $1A19DD21, $C81F21C6, $1FDDCB01
0008235E 4628 012C 4E21 C31F 1100+  	dc.l	$4628012C, $4E21C31F, $11004043, $3E5270EB, $362B2C36, $802C36B6, $2C716836, $2A12CD52
0008237E 1921 C31F 1100 403E 5273+  	dc.l	$1921C31F, $1100403E, $5273EB36, $2B2C3600, $12C9DD7E, $00FE50CA, $4300FE54, $CAD201FE
0008239E 44CA 2C16 3E01 32E8 1FAF+  	dc.l	$44CA2C16, $3E0132E8, $1FAF32C2, $1F31C01F, $CD4119C3
000823B2 B118                       	dc.w	$B118
000823B4                            
000823B4                            ; ------------------------------------------------------------------------------
000823B4                            ; Exported symbols
000823B4                            ; ------------------------------------------------------------------------------
000823B4                            
000823B4 =000806DE                  MegaPCM_LoadDriver:	equ	MegaPCMLibraryBlob+$0
000823B4 =00080748                  MegaPCM_LoadSampleTable:	equ	MegaPCMLibraryBlob+$6A
000823B4 =00080928                  MegaPCM_PlaySample:	equ	MegaPCMLibraryBlob+$24A
000823B4 =0008094A                  MegaPCM_PausePlayback:	equ	MegaPCMLibraryBlob+$26C
000823B4 =0008096E                  MegaPCM_UnpausePlayback:	equ	MegaPCMLibraryBlob+$290
000823B4 =00080992                  MegaPCM_StopPlayback:	equ	MegaPCMLibraryBlob+$2B4
000823B4 =000809B6                  MegaPCM_SetVolume:	equ	MegaPCMLibraryBlob+$2D8
000823B4 =000809D8                  MegaPCM_SetSFXVolume:	equ	MegaPCMLibraryBlob+$2FA
000823B4 =000809FA                  MegaPCM_SetPan:	equ	MegaPCMLibraryBlob+$31C
000823B4 =00080A1C                  MegaPCM_SetSFXPan:	equ	MegaPCMLibraryBlob+$33E
000823B4 =00080A3E                  MegaPCM:	equ	MegaPCMLibraryBlob+$360
000823B4 =000823B4                  MegaPCM_End:	equ	MegaPCMLibraryBlob+$1CD6
000823B4                            
000823B4                            
000823B4                            ; ------------------------------------------------------------------------------
000823B4                            ; MIT License
000823B4                            ;
000823B4                            ; Copyright (c) 2012-2024 Vladikcomper
000823B4                            ; 
000823B4                            ; Permission is hereby granted, free of charge, to any person obtaining a copy
000823B4                            ; of this software and associated documentation files (the "Software"), to deal
000823B4                            ; in the Software without restriction, including without limitation the rights
000823B4                            ; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
000823B4                            ; copies of the Software, and to permit persons to whom the Software is
000823B4                            ; furnished to do so, subject to the following conditions:
000823B4                            ; 
000823B4                            ; The above copyright notice and this permission notice shall be included in all
000823B4                            ; copies or substantial portions of the Software.
000823B4                            ; 
000823B4                            ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
000823B4                            ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
000823B4                            ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
000823B4                            ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
000823B4                            ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
000823B4                            ; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
000823B4                            ; SOFTWARE.
000823B4                            ; ------------------------------------------------------------------------------
000823B4                            ; ------------------------------------------------------------------------------
000823B4                                            include "SampleTable.asm"               ; ++ ADD THIS LINE
000823B4                            
000823B4                            ; ---------------------------------------------------------------
000823B4                            SampleTable:
000823B4                            	;			type			pointer		Hz
000823B4                            ;	dcSample	TYPE_PCM, 		VeryDumb, 	0				; idiocrity test
0008245C FFFF                       	dc.w	-1	; end marker
0008245E                            
0008245E                            ; ---------------------------------------------------------------
0008245E                            ;	incdac	VeryDumb, "superbowl.mp4"
0008245E                            	incdac	Kick, "sound/dac/kick.dpcm"
000827B0                            	incdac	Snare, "sound/dac/snare.pcm"
00083690                            	incdac	Timpani, "sound/dac/timpani.dpcm"
000846A6                            	incdac	SegaPCM, "sound/dac/sega.wav"
0009E7FC                            	incdac	BeeBush1, "sound/dac/beebush_smp1.wav"
000ACE2E                            	incdac	BeeBush2, "sound/dac/beebush_smp2.wav"
000C64B4                            	even
000C64B4                            	even
000C64B4                            
000C64B4 0000 0000                  Go_SoundTypes:		dc.l SoundTypes		; XREF: Sound_Play
000C64B8 0000 0000                  Go_SoundD0:		dc.l SoundD0Index	; XREF: Sound_D0
000C64BC 0000 0000                  Go_MusicIndex:		dc.l MusicIndex-4		; XREF: Sound_Music
000C64C0 0000 0000                  Go_MusicIndex80:	dc.l MusicIndex80-4		; XREF: Sound_Music
000C64C4 0000 0000                  Go_SoundIndex:		dc.l SoundIndex		; XREF: Sound_SFX
000C64C8 0000 0000                  off_719A0:		dc.l byte_71A94		; XREF: Sound_Music
000C64CC 0000 0000                  Go_PSGIndex:		dc.l PSG_Index		; XREF: sub_72926
000C64D0                            ; ---------------------------------------------------------------------------
000C64D0                            ; PSG instruments used in music
000C64D0                            ; ---------------------------------------------------------------------------
000C64D0 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
000C64DC 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000C64E8 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000C64F4                            
000C64F4 0000 0001 0101 0202 0203+  PSG1:		dc.b    0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5
000C6504 0505 0606 0607 80                      dc.b    5, 5, 6, 6, 6, 7, $80
000C650B                            
000C650B 0002 0406 0810 80          PSG2:		dc.b    0, 2, 4, 6, 8, $10, $80
000C6512                            
000C6512 0000 0101 0202 0303 0404+  PSG3:		dc.b    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
000C6522 80                                     dc.b    $80
000C6523                            
000C6523 0000 0203 0404 0505 0506+  PSG4:		dc.b    0, 0, 2, 3, 4, 4, 5, 5, 5, 6, $80
000C652E                            
000C652E 0000 0000 0000 0000 0000+  PSG5:		dc.b    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1
000C653E 0101 0101 0101 0101 0202+              dc.b    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
000C654E 0303 0303 0303 0303 0480               dc.b    3, 3, 3, 3, 3, 3, 3, 3, 4, $80
000C6558                            
000C6558 0303 0302 0202 0201 0101+  PSG6:		dc.b    3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, $80
000C6567                            
000C6567 0000 0000 0000 0101 0101+  PSG7:		dc.b    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
000C6577 0303 0304 0404 0505 0506+              dc.b    3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, $80
000C6583                            
000C6583 0000 0000 0001 0101 0101+  PSG8:		dc.b    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2
000C6593 0303 0303 0304 0404 0404+              dc.b    3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6
000C65A3 0606 0606 0707 0780                    dc.b    6, 6, 6, 6, 7, 7, 7, $80
000C65AB                            
000C65AB 0001 0203 0405 0607 0809+  PSG9:		dc.b    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $A, $B, $C, $D, $E, $F
000C65BB 80                                     dc.b    $80
000C65BC                            
000C65BC 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
000C65C4                            ; ---------------------------------------------------------------------------
000C65C4                            ; Music	Pointers
000C65C4                            ; ---------------------------------------------------------------------------
000C65C4                            MusicIndex:	
000C65C4 0000 0000                  		dc.l Music9F ; test
000C65C8 0000 0000                  		dc.l Music92 ; test
000C65CC                            
000C65CC                            MusicIndex80:
000C65CC 0000 0000 0000 0000        		dc.l Music81, Music82
000C65D4 0000 0000 0000 0000        		dc.l Music83, Music84
000C65DC 0000 0000 0000 0000        		dc.l Music85, Music86
000C65E4 0000 0000 0000 0000        		dc.l Music87, Music88
000C65EC 0000 0000 0000 0000        		dc.l Music89, Music8A
000C65F4 0000 0000 0000 0000        		dc.l Music8B, Music8C
000C65FC 0000 0000 0000 0000        		dc.l Music8D, Music8E
000C6604 0000 0000 0000 0000        		dc.l Music8F, Music90
000C660C 0000 0000 0000 0000        		dc.l Music91, Music92
000C6614 0000 0000 0000 0000        		dc.l Music93, Music94
000C661C 0000 0000 0000 0000        		dc.l Music95, Music96
000C6624 0000 0000 0000 0000        		dc.l Music97, Music98
000C662C 0000 0000 0000 0000        		dc.l Music99, Music9A
000C6634 0000 0000 0000 0000        		dc.l Music9B, Music9C
000C663C 0000 0000 0000 0000        		dc.l Music9D, Music9E
000C6644 0000 0000                  		dc.l Music9F
000C6648                            ; ---------------------------------------------------------------------------
000C6648                            ; Type of sound	being played ($00 = music; $70 = normal	sound effect)
000C6648                            ; ---------------------------------------------------------------------------
000C6648                            SoundTypes:			
000C6648 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $01
000C6657 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $10
000C6667 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $20
000C6677 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $30
000C6687 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $40
000C6697 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $50
000C66A7 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $60
000C66B7 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $70
000C66C7 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $80
000C66D7 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
000C66E7 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
000C66F7 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
000C6707 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
000C6717 7070 7070 7070 7070 7070+  		dc.b $70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $D0
000C6727 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $E0
000C6737 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $F0
000C6746                            		even
000C6746                            
000C6746                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C6746                            
000C6746                            
000C6746                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
000C6746                            ; every 5th frame, update a second time (same technique as most SMPS versions, but more scuffed)
000C6746 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; if in an NTSC region(!), branch ; TODO: use the VDP pal value instead
000C674C 6700                       		beq.s	@main
000C674E 7000                       		moveq	#0,d0			; PAL song timer "optimization"
000C6750 3038 FE0E                  		move.w	($FFFFFE0E).w,d0	; TODO: proper timer, this is prone to overflow and cause slight variations
000C6754 80FC 0005                  		divu.w	#5,d0			;       also divisions are generally slow
000C6758 4840                       		swap	d0
000C675A 4A40                       		tst.w	d0
000C675C 6600                       		bne.s	@main
000C675E 6100 0000                  		bsr.w	@main
000C6762                            @main:
000C6762                            ;		move.w	#$100,($A11100).l ; stop the Z80
000C6762                            ;		nop
000C6762                            ;		nop
000C6762                            ;		nop
000C6762                            ; loc_71B5A:
000C6762                            @wait:
000C6762                            ;		btst	#0,($A11100).l
000C6762                            ;		bne.s	@wait
000C6762                            
000C6762                            ;		btst	#7,($A01FFD).l
000C6762                            ;		beq.s	loc_71B82
000C6762                            ;		move.w	#0,($A11100).l	; start	the Z80
000C6762                            ;		nop
000C6762                            ;		nop
000C6762                            ;		nop
000C6762                            ;		nop
000C6762                            ;		nop
000C6762                            ;		bra.s	@main		; if you want really funky sound, use sub_71B4C instead ;)
000C6762                            ; ===========================================================================
000C6762                            
000C6762                            ; loc_71B82:
000C6762 4DF9 00FF F000             		lea	($FFF000).l,a6
000C6768 422E 000E                  		clr.b	$E(a6)
000C676C 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000C6770 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000C6774 532E 0001                  		subq.b	#1,1(a6)
000C6778 6600                       		bne.s	loc_71B9E
000C677A 4EBA 0000                  		jsr	sub_7260C(pc)
000C677E                            
000C677E                            loc_71B9E:
000C677E 102E 0004                  		move.b	4(a6),d0
000C6782 6700                       		beq.s	loc_71BA8
000C6784 4EBA 0000                  		jsr	sub_72504(pc)
000C6788                            
000C6788                            loc_71BA8:
000C6788 4A2E 0024                  		tst.b	$24(a6)
000C678C 6700                       		beq.s	loc_71BB2
000C678E 4EBA 0000                  		jsr	sub_7267C(pc)
000C6792                            
000C6792                            loc_71BB2:
000C6792 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
000C6796 6700                       		beq.s	loc_71BBC	; if not, branch
000C6798 4EBA 0000                  		jsr	Sound_Play(pc)
000C679C                            
000C679C                            loc_71BBC:
000C679C 4BEE 0040                  		lea	$40(a6),a5
000C67A0 4A15                       		tst.b	(a5)
000C67A2 6A00                       		bpl.s	loc_71BD4
000C67A4 4EBA 0000                  		jsr	sub_71C4E(pc)
000C67A8                            
000C67A8                            loc_71BD4:
000C67A8 422E 0008                  		clr.b	8(a6)
000C67AC 7E05                       		moveq	#5,d7
000C67AE                            
000C67AE                            loc_71BDA:
000C67AE DAFC 0030                  		adda.w	#$30,a5
000C67B2 4A15                       		tst.b	(a5)
000C67B4 6A00                       		bpl.s	loc_71BE6
000C67B6 4EBA 0000                  		jsr	sub_71CCA(pc)
000C67BA                            
000C67BA                            loc_71BE6:
000C67BA 51CF FFF2                  		dbf	d7,loc_71BDA
000C67BE                            
000C67BE 7E02                       		moveq	#2,d7
000C67C0                            
000C67C0                            loc_71BEC:
000C67C0 DAFC 0030                  		adda.w	#$30,a5
000C67C4 4A15                       		tst.b	(a5)
000C67C6 6A00                       		bpl.s	loc_71BF8
000C67C8 4EBA 0000                  		jsr	sub_72850(pc)
000C67CC                            
000C67CC                            loc_71BF8:
000C67CC 51CF FFF2                  		dbf	d7,loc_71BEC
000C67D0                            
000C67D0 1D7C 0080 000E             		move.b	#$80,$E(a6)
000C67D6 7E02                       		moveq	#2,d7
000C67D8                            
000C67D8                            loc_71C04:
000C67D8 DAFC 0030                  		adda.w	#$30,a5
000C67DC 4A15                       		tst.b	(a5)
000C67DE 6A00                       		bpl.s	loc_71C10
000C67E0 4EBA 0000                  		jsr	sub_71CCA(pc)
000C67E4                            
000C67E4                            loc_71C10:
000C67E4 51CF FFF2                  		dbf	d7,loc_71C04
000C67E8                            
000C67E8 7E02                       		moveq	#2,d7
000C67EA                            
000C67EA                            loc_71C16:
000C67EA DAFC 0030                  		adda.w	#$30,a5
000C67EE 4A15                       		tst.b	(a5)
000C67F0 6A00                       		bpl.s	loc_71C22
000C67F2 4EBA 0000                  		jsr	sub_72850(pc)
000C67F6                            
000C67F6                            loc_71C22:
000C67F6 51CF FFF2                  		dbf	d7,loc_71C16
000C67FA 1D7C 0040 000E             		move.b	#$40,$E(a6)
000C6800 DAFC 0030                  		adda.w	#$30,a5
000C6804 4A15                       		tst.b	(a5)
000C6806 6A00                       		bpl.s	loc_71C38
000C6808 4EBA 0000                  		jsr	sub_71CCA(pc)
000C680C                            
000C680C                            loc_71C38:
000C680C DAFC 0030                  		adda.w	#$30,a5
000C6810 4A15                       		tst.b	(a5)
000C6812 6A00                       		bpl.s	loc_71C44
000C6814 4EBA 0000                  		jsr	sub_72850(pc)
000C6818                            
000C6818                            loc_71C44:
000C6818                            ;		move.w	#0,($A11100).l	; start	the Z80
000C6818 4E75                       		rts	
000C681A                            ; End of function sub_71B4C
000C681A                            
000C681A                            
000C681A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C681A                            
000C681A                            
000C681A                            sub_71C4E:				; XREF: sub_71B4C
000C681A 532D 000E                  		subq.b	#1,$E(a5)
000C681E 6600                       		bne.s	locret_71CAA
000C6820 1D7C 0080 0008             		move.b	#$80,8(a6)
000C6826 286D 0004                  		movea.l	4(a5),a4
000C682A                            
000C682A                            loc_71C5E:
000C682A 7A00                       		moveq	#0,d5
000C682C 1A1C                       		move.b	(a4)+,d5
000C682E 0C05 00E0                  		cmpi.b	#-$20,d5
000C6832 6500                       		bcs.s	loc_71C6E
000C6834 4EBA 0000                  		jsr	sub_72A5A(pc)
000C6838 60F0                       		bra.s	loc_71C5E
000C683A                            ; ===========================================================================
000C683A                            
000C683A                            loc_71C6E:
000C683A 4A05                       		tst.b	d5
000C683C 6A00                       		bpl.s	loc_71C84
000C683E 1B45 0010                  		move.b	d5,$10(a5)
000C6842 1A1C                       		move.b	(a4)+,d5
000C6844 6A00                       		bpl.s	loc_71C84
000C6846 534C                       		subq.w	#1,a4
000C6848 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000C684E 6000                       		bra.s	loc_71C88
000C6850                            ; ===========================================================================
000C6850                            
000C6850                            loc_71C84:
000C6850 4EBA 0000                  		jsr	sub_71D40(pc)
000C6854                            
000C6854                            loc_71C88:
000C6854 2B4C 0004                  		move.l	a4,4(a5)
000C6858 0815 0002                  		btst	#2,(a5)
000C685C 6600                       		bne.s	locret_71CAA
000C685E 7000                       		moveq	#0,d0
000C6860 102D 0010                  		move.b	$10(a5),d0
000C6864 0C00 0080                  		cmpi.b	#$80,d0
000C6868 6700                       		beq.s	locret_71CAA
000C686A                            		;btst	#3,d0
000C686A                            		;bne.s	loc_71CAC
000C686A                            		;move.b	d0,($A01FFF).l
000C687C 13C0 00A0 1FC2                             move.b  d0, $A00000+Z_MPCM_CommandInput ; ++ send DAC sample to Mega PCM
000C688A                            locret_71CAA:
000C688A 4E75                       		rts	
000C688C                            ; ===========================================================================
000C688C                            ; UNIMPLEMENTED --- MEGAPCM2 GUIDE
000C688C                            ;loc_71CAC:
000C688C                            ;		subi.b	#$88,d0
000C688C                            ;		move.b	byte_71CC4(pc,d0.w),d0
000C688C                            ;		move.b	d0,($A000EA).l
000C688C                            ;		move.b	#$83,($A01FFF).l
000C688C                            ;		rts	
000C688C                            ; End of function sub_71C4E
000C688C                            
000C688C                            ; ===========================================================================
000C688C 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
000C6892                            
000C6892                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C6892                            
000C6892                            
000C6892                            sub_71CCA:				; XREF: sub_71B4C
000C6892 532D 000E                  		subq.b	#1,$E(a5)
000C6896 6600                       		bne.s	loc_71CE0
000C6898 0895 0004                  		bclr	#4,(a5)
000C689C 4EBA 0000                  		jsr	sub_71CEC(pc)
000C68A0 4EBA 0000                  		jsr	sub_71E18(pc)
000C68A4 6000 0000                  		bra.w	loc_726E2
000C68A8                            ; ===========================================================================
000C68A8                            
000C68A8                            loc_71CE0:
000C68A8 4EBA 0000                  		jsr	sub_71D9E(pc)
000C68AC 4EBA 0000                  		jsr	sub_71DC6(pc)
000C68B0 6000 0000                  		bra.w	loc_71E24
000C68B4                            ; End of function sub_71CCA
000C68B4                            
000C68B4                            
000C68B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C68B4                            
000C68B4                            
000C68B4                            sub_71CEC:				; XREF: sub_71CCA
000C68B4 286D 0004                  		movea.l	4(a5),a4
000C68B8 0895 0001                  		bclr	#1,(a5)
000C68BC                            
000C68BC                            loc_71CF4:
000C68BC 7A00                       		moveq	#0,d5
000C68BE 1A1C                       		move.b	(a4)+,d5
000C68C0 0C05 00E0                  		cmpi.b	#-$20,d5
000C68C4 6500                       		bcs.s	loc_71D04
000C68C6 4EBA 0000                  		jsr	sub_72A5A(pc)
000C68CA 60F0                       		bra.s	loc_71CF4
000C68CC                            ; ===========================================================================
000C68CC                            
000C68CC                            loc_71D04:
000C68CC 4EBA 0000                  		jsr	sub_726FE(pc)
000C68D0 4A05                       		tst.b	d5
000C68D2 6A00                       		bpl.s	loc_71D1A
000C68D4 4EBA 0000                  		jsr	sub_71D22(pc)
000C68D8 1A1C                       		move.b	(a4)+,d5
000C68DA 6A00                       		bpl.s	loc_71D1A
000C68DC 534C                       		subq.w	#1,a4
000C68DE 6000 0000                  		bra.w	sub_71D60
000C68E2                            ; ===========================================================================
000C68E2                            
000C68E2                            loc_71D1A:
000C68E2 4EBA 0000                  		jsr	sub_71D40(pc)
000C68E6 6000 0000                  		bra.w	sub_71D60
000C68EA                            ; End of function sub_71CEC
000C68EA                            
000C68EA                            
000C68EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C68EA                            
000C68EA                            
000C68EA                            sub_71D22:				; XREF: sub_71CEC
000C68EA 0405 0080                  		subi.b	#$80,d5
000C68EE 6700                       		beq.s	loc_71D58
000C68F0 DA2D 0008                  		add.b	8(a5),d5
000C68F4 0245 007F                  		andi.w	#$7F,d5
000C68F8 E34D                       		lsl.w	#1,d5
000C68FA 41FA 0000                  		lea	word_72790(pc),a0
000C68FE 3C30 5000                  		move.w	(a0,d5.w),d6
000C6902 3B46 0010                  		move.w	d6,$10(a5)
000C6906 4E75                       		rts	
000C6908                            ; End of function sub_71D22
000C6908                            
000C6908                            
000C6908                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C6908                            
000C6908                            
000C6908                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000C6908 1005                       		move.b	d5,d0
000C690A 122D 0002                  		move.b	2(a5),d1
000C690E                            
000C690E                            loc_71D46:
000C690E 5301                       		subq.b	#1,d1
000C6910 6700                       		beq.s	loc_71D4E
000C6912 D005                       		add.b	d5,d0
000C6914 60F8                       		bra.s	loc_71D46
000C6916                            ; ===========================================================================
000C6916                            
000C6916                            loc_71D4E:
000C6916 1B40 000F                  		move.b	d0,$F(a5)
000C691A 1B40 000E                  		move.b	d0,$E(a5)
000C691E 4E75                       		rts	
000C6920                            ; End of function sub_71D40
000C6920                            
000C6920                            ; ===========================================================================
000C6920                            
000C6920                            loc_71D58:				; XREF: sub_71D22
000C6920 08D5 0001                  		bset	#1,(a5)
000C6924 426D 0010                  		clr.w	$10(a5)
000C6928                            
000C6928                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C6928                            
000C6928                            
000C6928                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
000C6928 2B4C 0004                  		move.l	a4,4(a5)
000C692C 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000C6932 0815 0004                  		btst	#4,(a5)
000C6936 6600                       		bne.s	locret_71D9C
000C6938 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
000C693E 422D 000C                  		clr.b	$C(a5)
000C6942 0815 0003                  		btst	#3,(a5)
000C6946 6700                       		beq.s	locret_71D9C
000C6948 206D 0014                  		movea.l	$14(a5),a0
000C694C 1B58 0018                  		move.b	(a0)+,$18(a5)
000C6950 1B58 0019                  		move.b	(a0)+,$19(a5)
000C6954 1B58 001A                  		move.b	(a0)+,$1A(a5)
000C6958 1018                       		move.b	(a0)+,d0
000C695A E208                       		lsr.b	#1,d0
000C695C 1B40 001B                  		move.b	d0,$1B(a5)
000C6960 426D 001C                  		clr.w	$1C(a5)
000C6964                            
000C6964                            locret_71D9C:
000C6964 4E75                       		rts	
000C6966                            ; End of function sub_71D60
000C6966                            
000C6966                            
000C6966                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C6966                            
000C6966                            
000C6966                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000C6966 4A2D 0012                  		tst.b	$12(a5)
000C696A 6700                       		beq.s	locret_71DC4
000C696C 532D 0012                  		subq.b	#1,$12(a5)
000C6970 6600                       		bne.s	locret_71DC4
000C6972 08D5 0001                  		bset	#1,(a5)
000C6976 4A2D 0001                  		tst.b	1(a5)
000C697A 6B00 0000                  		bmi.w	loc_71DBE
000C697E 4EBA 0000                  		jsr	sub_726FE(pc)
000C6982 584F                       		addq.w	#4,sp
000C6984 4E75                       		rts	
000C6986                            ; ===========================================================================
000C6986                            
000C6986                            loc_71DBE:
000C6986 4EBA 0000                  		jsr	sub_729A0(pc)
000C698A 584F                       		addq.w	#4,sp
000C698C                            
000C698C                            locret_71DC4:
000C698C 4E75                       		rts	
000C698E                            ; End of function sub_71D9E
000C698E                            
000C698E                            
000C698E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C698E                            
000C698E                            
000C698E                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000C698E 584F                       		addq.w	#4,sp
000C6990 0815 0003                  		btst	#3,(a5)
000C6994 6700                       		beq.s	locret_71E16
000C6996 4A2D 0018                  		tst.b	$18(a5)
000C699A 6700                       		beq.s	loc_71DDA
000C699C 532D 0018                  		subq.b	#1,$18(a5)
000C69A0 4E75                       		rts	
000C69A2                            ; ===========================================================================
000C69A2                            
000C69A2                            loc_71DDA:
000C69A2 532D 0019                  		subq.b	#1,$19(a5)
000C69A6 6700                       		beq.s	loc_71DE2
000C69A8 4E75                       		rts	
000C69AA                            ; ===========================================================================
000C69AA                            
000C69AA                            loc_71DE2:
000C69AA 206D 0014                  		movea.l	$14(a5),a0
000C69AE 1B68 0001 0019             		move.b	1(a0),$19(a5)
000C69B4 4A2D 001B                  		tst.b	$1B(a5)
000C69B8 6600                       		bne.s	loc_71DFE
000C69BA 1B68 0003 001B             		move.b	3(a0),$1B(a5)
000C69C0 442D 001A                  		neg.b	$1A(a5)
000C69C4 4E75                       		rts	
000C69C6                            ; ===========================================================================
000C69C6                            
000C69C6                            loc_71DFE:
000C69C6 532D 001B                  		subq.b	#1,$1B(a5)
000C69CA 1C2D 001A                  		move.b	$1A(a5),d6
000C69CE 4886                       		ext.w	d6
000C69D0 DC6D 001C                  		add.w	$1C(a5),d6
000C69D4 3B46 001C                  		move.w	d6,$1C(a5)
000C69D8 DC6D 0010                  		add.w	$10(a5),d6
000C69DC 594F                       		subq.w	#4,sp
000C69DE                            
000C69DE                            locret_71E16:
000C69DE 4E75                       		rts	
000C69E0                            ; End of function sub_71DC6
000C69E0                            
000C69E0                            
000C69E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C69E0                            
000C69E0                            
000C69E0                            sub_71E18:				; XREF: sub_71CCA
000C69E0 0815 0001                  		btst	#1,(a5)
000C69E4 6600                       		bne.s	locret_71E48
000C69E6 3C2D 0010                  		move.w	$10(a5),d6
000C69EA 6700                       		beq.s	loc_71E4A
000C69EC                            
000C69EC                            loc_71E24:				; XREF: sub_71CCA
000C69EC 102D 001E                  		move.b	$1E(a5),d0
000C69F0 4880                       		ext.w	d0
000C69F2 DC40                       		add.w	d0,d6
000C69F4 0815 0002                  		btst	#2,(a5)
000C69F8 6600                       		bne.s	locret_71E48
000C69FA 3206                       		move.w	d6,d1
000C69FC E049                       		lsr.w	#8,d1
000C69FE 103C 00A4                  		move.b	#-$5C,d0
000C6A02 4EBA 0000                  		jsr	sub_72722(pc)
000C6A06 1206                       		move.b	d6,d1
000C6A08 103C 00A0                  		move.b	#-$60,d0
000C6A0C 4EBA 0000                  		jsr	sub_72722(pc)
000C6A10                            
000C6A10                            locret_71E48:
000C6A10 4E75                       		rts	
000C6A12                            ; ===========================================================================
000C6A12                            
000C6A12                            loc_71E4A:
000C6A12 08D5 0001                  		bset	#1,(a5)
000C6A16 4E75                       		rts	
000C6A18                            ; End of function sub_71E18
000C6A18                            
000C6A18                            ; ===========================================================================
000C6A18                            
000C6A18                            loc_71E50:				; XREF: sub_71B4C
000C6A18 6B00                       		bmi.s	loc_71E94
000C6A1A 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000C6A20 6700 0000                  		beq.w	loc_71EFE
000C6A24 1D7C 0002 0003             		move.b	#2,3(a6)
000C6A2A 7602                       		moveq	#2,d3
000C6A2C 103C 00B4                  		move.b	#-$4C,d0
000C6A30 7200                       		moveq	#0,d1
000C6A32                            
000C6A32                            loc_71E6A:
000C6A32 4EBA 0000                  		jsr	sub_7272E(pc)
000C6A36 4EBA 0000                  		jsr	sub_72764(pc)
000C6A3A 5200                       		addq.b	#1,d0
000C6A3C 51CB FFF4                  		dbf	d3,loc_71E6A
000C6A40                            
000C6A40 7602                       		moveq	#2,d3
000C6A42 7028                       		moveq	#$28,d0
000C6A44                            
000C6A44                            loc_71E7C:
000C6A44 1203                       		move.b	d3,d1
000C6A46 4EBA 0000                  		jsr	sub_7272E(pc)
000C6A4A 5801                       		addq.b	#4,d1
000C6A4C 4EBA 0000                  		jsr	sub_7272E(pc)
000C6A50 51CB FFF2                  		dbf	d3,loc_71E7C
000C6A54                            
000C6A54 4EBA 0000                  		jsr	sub_729B6(pc)
000C6A58 6000 FDBE                  		bra.w	loc_71C44
000C6A5C                            ; ===========================================================================
000C6A5C                            
000C6A5C                            loc_71E94:				; XREF: loc_71E50
000C6A5C 422E 0003                  		clr.b	3(a6)
000C6A60 7630                       		moveq	#$30,d3
000C6A62 4BEE 0040                  		lea	$40(a6),a5
000C6A66 7806                       		moveq	#6,d4
000C6A68                            
000C6A68                            loc_71EA0:
000C6A68 0815 0007                  		btst	#7,(a5)
000C6A6C 6700                       		beq.s	loc_71EB8
000C6A6E 0815 0002                  		btst	#2,(a5)
000C6A72 6600                       		bne.s	loc_71EB8
000C6A74 103C 00B4                  		move.b	#-$4C,d0
000C6A78 122D 000A                  		move.b	$A(a5),d1
000C6A7C 4EBA 0000                  		jsr	sub_72722(pc)
000C6A80                            
000C6A80                            loc_71EB8:
000C6A80 DAC3                       		adda.w	d3,a5
000C6A82 51CC FFE4                  		dbf	d4,loc_71EA0
000C6A86                            
000C6A86 4BEE 0220                  		lea	$220(a6),a5
000C6A8A 7802                       		moveq	#2,d4
000C6A8C                            
000C6A8C                            loc_71EC4:
000C6A8C 0815 0007                  		btst	#7,(a5)
000C6A90 6700                       		beq.s	loc_71EDC
000C6A92 0815 0002                  		btst	#2,(a5)
000C6A96 6600                       		bne.s	loc_71EDC
000C6A98 103C 00B4                  		move.b	#-$4C,d0
000C6A9C 122D 000A                  		move.b	$A(a5),d1
000C6AA0 4EBA 0000                  		jsr	sub_72722(pc)
000C6AA4                            
000C6AA4                            loc_71EDC:
000C6AA4 DAC3                       		adda.w	d3,a5
000C6AA6 51CC FFE4                  		dbf	d4,loc_71EC4
000C6AAA                            
000C6AAA 4BEE 0340                  		lea	$340(a6),a5
000C6AAE 0815 0007                  		btst	#7,(a5)
000C6AB2 6700                       		beq.s	loc_71EFE
000C6AB4 0815 0002                  		btst	#2,(a5)
000C6AB8 6600                       		bne.s	loc_71EFE
000C6ABA 103C 00B4                  		move.b	#-$4C,d0
000C6ABE 122D 000A                  		move.b	$A(a5),d1
000C6AC2 4EBA 0000                  		jsr	sub_72722(pc)
000C6AC6                            
000C6AC6                            loc_71EFE:
000C6AC6 6000 FD50                  		bra.w	loc_71C44
000C6ACA                            
000C6ACA                            ; ---------------------------------------------------------------------------
000C6ACA                            ; Subroutine to	play a sound or	music track
000C6ACA                            ; ---------------------------------------------------------------------------
000C6ACA                            
000C6ACA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C6ACA                            
000C6ACA                            
000C6ACA                            Sound_Play:				; XREF: sub_71B4C
000C6ACA 2079 000C 64B4             		movea.l	(Go_SoundTypes).l,a0
000C6AD0 43EE 000A                  		lea	$A(a6),a1	; load music track number
000C6AD4 1616                       		move.b	0(a6),d3
000C6AD6 7802                       		moveq	#2,d4
000C6AD8                            
000C6AD8                            loc_71F12:
000C6AD8 1011                       		move.b	(a1),d0		; move track number to d0
000C6ADA 1200                       		move.b	d0,d1
000C6ADC 4219                       		clr.b	(a1)+
000C6ADE 0400 0081                  		subi.b	#$81,d0
000C6AE2 6500                       		bcs.s	loc_71F3E
000C6AE4                            ; ===========================================================================
000C6AE4                            
000C6AE4                            loc_71F2C:
000C6AE4 1430 0000                  		move.b	(a0,d0.w),d2
000C6AE8 B403                       		cmp.b	d3,d2
000C6AEA 6500                       		bcs.s	loc_71F3E
000C6AEC 1602                       		move.b	d2,d3
000C6AEE 1D41 0009                  		move.b	d1,9(a6)	; set music flag
000C6AF2                            
000C6AF2                            loc_71F3E:
000C6AF2 51CC FFE4                  		dbf	d4,loc_71F12
000C6AF6                            
000C6AF6 4A03                       		tst.b	d3
000C6AF8 6B00                       		bmi.s	Sound_ChkValue
000C6AFA 1C83                       		move.b	d3,0(a6)
000C6AFC                            ; End of function Sound_Play
000C6AFC                            
000C6AFC                            
000C6AFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C6AFC                            
000C6AFC                            ; no checks if you play something fucked up it's your fault
000C6AFC                            Sound_ChkValue:				; XREF: sub_71B4C
000C6AFC 7E00                       		moveq	#0,d7
000C6AFE 1E2E 0009                  		move.b	9(a6),d7
000C6B02                            		
000C6B02 6700 0000                  		beq.w	Sound_E4
000C6B06 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
000C6B0C 0C07 00A0                  		cmpi.b	#$A0,d7
000C6B10 6500 0000                  		blo.w	Sound_Music	; music	$81-$9F
000C6B14                            		
000C6B14 0C07 00D0                  		cmpi.b	#$D0,d7
000C6B18 6700 0000                  		beq.w	Sound_D0
000C6B1C 0C07 00E0                  		cmpi.b	#$E0,d7
000C6B20 6500 0000                  		blo.w	Sound_SFX	; sound	$A0-$CF
000C6B24                            		
000C6B24                            		; falls to command
000C6B24                            ; ===========================================================================
000C6B24                            
000C6B24                            Sound_Command				; XREF: Sound_ChkValue
000C6B24 0407 00E0                  		subi.b	#$E0,d7
000C6B28 E54F                       		lsl.w	#2,d7
000C6B2A 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000C6B2E                            ; ===========================================================================
000C6B2E                            
000C6B2E                            Sound_ExIndex:
000C6B2E 6000 0000                  		bra.w	Sound_E0
000C6B32                            ; ===========================================================================
000C6B32 6000 0000                  		bra.w	Sound_E1
000C6B36                            ; ===========================================================================
000C6B36 6000 0000                  		bra.w	Sound_E2
000C6B3A                            ; ===========================================================================
000C6B3A 6000 0000                  		bra.w	Sound_E3
000C6B3E                            ; ===========================================================================
000C6B3E 6000 0000                  		bra.w	Sound_E4
000C6B42                            ; ===========================================================================
000C6B42 6000 0000                  		bra.w	Sound_E5
000C6B46                            ; ===========================================================================
000C6B46                            ; ---------------------------------------------------------------------------
000C6B46                            ; Play "Say-gaa" PCM sound
000C6B46                            ; ---------------------------------------------------------------------------
000C6B46                            
000C6B46                            Sound_E1:	
000C6B46                            
000C6B46 708C                                       moveq   #$FFFFFF8C, d0          ; ++ request SEGA PCM sample
000C6B48 4EF9 0008 0928                             jmp     MegaPCM_PlaySample      ; ++
000C6B4E                            
000C6B4E                            Sound_E1_old:               			  
000C6B4E 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
000C6B56 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
000C6B5E 303C 007F                  		move.w	#127,d0				; delay so the YM doesn't crap itself
000C6B62 51C8 FFFE                  		dbf	d0,*
000C6B66 45F9 0008 46A6             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000C6B6C 263C 0001 A156             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
000C6B72 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000C6B7A                            PlayPCM_Loop:	  
000C6B7A 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000C6B80 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
000C6B84 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
000C6B88 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
000C6B8A 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
000C6B8C 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
000C6B90 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
000C6B96 4EB8 1AC4                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
000C6B9A 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
000C6BA0 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
000C6BA2 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
000C6BA4                            return_PlayPCM: 
000C6BA4 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; silence PCM to avoid an awful sounding click
000C6BAC 584F                       		addq.w	#4,sp 
000C6BAE 4E75                       		rts
000C6BB0                            		
000C6BB0                            ; ---------------------------------------------------------------------------
000C6BB0                            ; Play you are an idiot pcm sound
000C6BB0                            ; since the sfx already crashes the game forever load it here :V
000C6BB0                            ; ---------------------------------------------------------------------------
000C6BB0                            
000C6BB0                            Sound_E5: 
000C6BB0 46FC 2700                  		move	#$2700,sr
000C6BB4 4EB8 1BA0                  		jsr	ClearScreen
000C6BB8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l		; stop Z80 so MegaPCM2 isn't idiot-proof
000C6BC0 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
000C6BC8 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
000C6BD0                            
000C6BD0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000C6BD4 0000 0040                  		ori.b	#$40,d0
000C6BD8 3A80                       		move.w	d0,(a5)
000C6BDA                            
000C6BDA                            		;control port on a5
000C6BDA 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
000C6BE0 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
000C6BE6 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
000C6BEA 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
000C6BEE 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
000C6BF2                            		
000C6BF2 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
000C6BF6                            		
000C6BF6 2ABC 4000 0000             		move.l	#$40000000,(a5)
000C6BFC 41F9 0002 4F18             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
000C6C02 4EB8 1D18                  		jsr	NemDec
000C6C06 43F9 00FF 0000             		lea	($FF0000).l,a1
000C6C0C 41F9 0002 4EBA             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
000C6C12 303C 0000                  		move.w	#0,d0
000C6C16 4EB8 1FF6                  		jsr	EniDec
000C6C1A 43F9 00FF 0000             		lea	($FF0000).l,a1
000C6C20 203C 4304 0003             		move.l	#$43040003,d0
000C6C26 7223                       		moveq	#35,d1
000C6C28 740D                       		moveq	#13,d2
000C6C2A 4EB8 1CF8                  		jsr	ShowVDPGraphics
000C6C2E 7014                       		moveq	#20,d0
000C6C30 4EB8 29C4                  		jsr	PalLoad2	; load pallet
000C6C34                            
000C6C34                            
000C6C34 4BF9 00C0 0004             		lea	($C00004).l,a5
000C6C3A 50F8 FE25                  		st.b	($FFFFFE25).w			; start with -1, so the NOT makes it 0
000C6C3E 7600                       		moveq	#0,d3				; make @palett jump to @start when done
000C6C40 6000                       		bra.s	@palett
000C6C42                            @start:
000C6C42 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000C6C48 263C 0000 0000             		move.l	#IdiotPCM_End-IdiotPCM,d3	; Load the size of the idiot PCM sample into d3 
000C6C4E 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel
000C6C56                            @loop:
000C6C56 44D5                       		move.w	(a5),ccr
000C6C58 6B00                       		bmi.s	@vblank
000C6C5A                            
000C6C5A 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000C6C60 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
000C6C64 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
000C6C68 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
000C6C6A 66EA                       		bne.s	@loop				; if not zero, loop
000C6C6C 60D4                       		bra.s	@start
000C6C6E                            @vblank:
000C6C6E 0C38 000F FE24             		cmp.b	#15,($FFFFFE24).w
000C6C74 6700                       		beq.s	@palett
000C6C76 5238 FE24                  		addq.b	#1,($FFFFFE24).w
000C6C7A                            @loop_vblank:
000C6C7A 44D5                       		move.w	(a5),ccr
000C6C7C 6AD8                       		bpl.s	@loop
000C6C7E                            
000C6C7E 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000C6C84 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
000C6C88 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
000C6C8C 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
000C6C8E 66EA                       		bne.s	@loop_vblank			; if not zero, loop
000C6C90 60B0                       		bra.s	@start
000C6C92                            @palett:
000C6C92 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
000C6C98                            
000C6C98 4238 FE24                  		clr.b	($FFFFFE24).w
000C6C9C 4638 FE25                  		not.b	($FFFFFE25).w
000C6CA0 6700                       		beq.s	@not_black
000C6CA2 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
000C6CA8 6000                       		bra.s	@merge
000C6CAA                            	@not_black:
000C6CAA 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
000C6CB0                            	@merge:
000C6CB0 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
000C6CB4 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
000C6CB8 3F3C 0080                  		move.w	#$80+((0&$C000)>>14),-(sp) ;dest
000C6CBC 3A9F                       		move.w	(sp)+,(a5)
000C6CBE                            		
000C6CBE 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
000C6CC2 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
000C6CC6 4A83                       		tst.l	d3
000C6CC8 66B0                       		bne.s	@loop_vblank
000C6CCA 6000 FF76                  		bra.w	@start
000C6CCE                            ; ===========================================================================
000C6CCE                            ; ---------------------------------------------------------------------------
000C6CCE                            ; Play music track $81-$9F
000C6CCE                            ; ---------------------------------------------------------------------------
000C6CCE                            
000C6CCE                            Sound_Music:				; XREF: Sound_ChkValue
000C6CCE 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000C6CD2 6600                       		bne.s	loc_72024	; if not, branch
000C6CD4 4A2E 0027                  		tst.b	$27(a6)
000C6CD8 6600 0000                  		bne.w	loc_721B6
000C6CDC 4BEE 0040                  		lea	$40(a6),a5
000C6CE0 7009                       		moveq	#9,d0
000C6CE2                            
000C6CE2                            loc_71FE6:
000C6CE2 0895 0002                  		bclr	#2,(a5)
000C6CE6 DAFC 0030                  		adda.w	#$30,a5
000C6CEA 51C8 FFF6                  		dbf	d0,loc_71FE6
000C6CEE                            
000C6CEE 4BEE 0220                  		lea	$220(a6),a5
000C6CF2 7005                       		moveq	#5,d0
000C6CF4                            
000C6CF4                            loc_71FF8:
000C6CF4 0895 0007                  		bclr	#7,(a5)
000C6CF8 DAFC 0030                  		adda.w	#$30,a5
000C6CFC 51C8 FFF6                  		dbf	d0,loc_71FF8
000C6D00 4216                       		clr.b	0(a6)
000C6D02 204E                       		movea.l	a6,a0
000C6D04 43EE 03A0                  		lea	$3A0(a6),a1
000C6D08 303C 0087                  		move.w	#$87,d0
000C6D0C                            
000C6D0C                            loc_72012:
000C6D0C 22D8                       		move.l	(a0)+,(a1)+
000C6D0E 51C8 FFFC                  		dbf	d0,loc_72012
000C6D12                            
000C6D12 1D7C 0080 0027             		move.b	#$80,$27(a6)
000C6D18 4216                       		clr.b	0(a6)
000C6D1A 6000                       		bra.s	loc_7202C
000C6D1C                            ; ===========================================================================
000C6D1C                            
000C6D1C                            loc_72024:
000C6D1C 422E 0027                  		clr.b	$27(a6)
000C6D20 422E 0026                  		clr.b	$26(a6)
000C6D24                            
000C6D24                            loc_7202C:
000C6D24 4EBA 0000                  		jsr	sub_725CA(pc)
000C6D28 2879 000C 64C8             		movea.l	(off_719A0).l,a4
000C6D2E 0C07 0080                  		cmpi.b	#$80,d7
000C6D32 6500                       		blo.s	@zeroindex
000C6D34                            		
000C6D34 0407 0080                  		subi.b	#$80,d7
000C6D38 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000C6D3E 2879 000C 64C0             		movea.l	(Go_MusicIndex80).l,a4
000C6D44 6000                       		bra.s @continue
000C6D46                            	@zeroindex:
000C6D46 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000C6D4C 2879 000C 64BC             		movea.l	(Go_MusicIndex).l,a4
000C6D52                            	@continue:
000C6D52 E54F                       		lsl.w	#2,d7
000C6D54 2874 7000                  		movea.l	(a4,d7.w),a4
000C6D58 7000                       		moveq	#0,d0
000C6D5A 3014                       		move.w	(a4),d0
000C6D5C D08C                       		add.l	a4,d0
000C6D5E 2D40 0018                  		move.l	d0,$18(a6)
000C6D62 102C 0005                  		move.b	5(a4),d0
000C6D66 1D40 0028                  		move.b	d0,$28(a6)
000C6D6A 4A2E 002A                  		tst.b	$2A(a6)
000C6D6E 6700                       		beq.s	loc_72068
000C6D70 102E 0029                  		move.b	$29(a6),d0
000C6D74                            
000C6D74                            loc_72068:
000C6D74 1D40 0002                  		move.b	d0,2(a6)
000C6D78 1D40 0001                  		move.b	d0,1(a6)
000C6D7C 7200                       		moveq	#0,d1
000C6D7E 264C                       		movea.l	a4,a3
000C6D80 5C4C                       		addq.w	#6,a4
000C6D82 7E00                       		moveq	#0,d7
000C6D84 1E2B 0002                  		move.b	2(a3),d7
000C6D88 6700 0000                  		beq.w	loc_72114
000C6D8C 5307                       		subq.b	#1,d7
000C6D8E 123C 00C0                  		move.b	#-$40,d1
000C6D92 182B 0004                  		move.b	4(a3),d4
000C6D96 7C30                       		moveq	#$30,d6
000C6D98 1A3C 0001                  		move.b	#1,d5
000C6D9C 43EE 0040                  		lea	$40(a6),a1
000C6DA0 45FA 0000                  		lea	byte_721BA(pc),a2
000C6DA4                            
000C6DA4                            loc_72098:
000C6DA4 08D1 0007                  		bset	#7,(a1)
000C6DA8 135A 0001                  		move.b	(a2)+,1(a1)
000C6DAC 1344 0002                  		move.b	d4,2(a1)
000C6DB0 1346 000D                  		move.b	d6,$D(a1)
000C6DB4 1341 000A                  		move.b	d1,$A(a1)
000C6DB8 1345 000E                  		move.b	d5,$E(a1)
000C6DBC 7000                       		moveq	#0,d0
000C6DBE 301C                       		move.w	(a4)+,d0
000C6DC0 D08B                       		add.l	a3,d0
000C6DC2 2340 0004                  		move.l	d0,4(a1)
000C6DC6 335C 0008                  		move.w	(a4)+,8(a1)
000C6DCA D2C6                       		adda.w	d6,a1
000C6DCC 51CF FFD6                  		dbf	d7,loc_72098
000C6DD0 0C2B 0007 0002             		cmpi.b	#7,2(a3)
000C6DD6 6600                       		bne.s	loc_720D8
000C6DD8 702B                       		moveq	#$2B,d0
000C6DDA 7200                       		moveq	#0,d1
000C6DDC 4EBA 0000                  		jsr	sub_7272E(pc)
000C6DE0 6000 0000                  		bra.w	loc_72114
000C6DE4                            ; ===========================================================================
000C6DE4                            
000C6DE4                            loc_720D8:
000C6DE4 7028                       		moveq	#$28,d0
000C6DE6 7206                       		moveq	#6,d1
000C6DE8 4EBA 0000                  		jsr	sub_7272E(pc)
000C6DEC 103C 0042                  		move.b	#$42,d0
000C6DF0 727F                       		moveq	#$7F,d1
000C6DF2 4EBA 0000                  		jsr	sub_72764(pc)
000C6DF6 103C 004A                  		move.b	#$4A,d0
000C6DFA 727F                       		moveq	#$7F,d1
000C6DFC 4EBA 0000                  		jsr	sub_72764(pc)
000C6E00 103C 0046                  		move.b	#$46,d0
000C6E04 727F                       		moveq	#$7F,d1
000C6E06 4EBA 0000                  		jsr	sub_72764(pc)
000C6E0A 103C 004E                  		move.b	#$4E,d0
000C6E0E 727F                       		moveq	#$7F,d1
000C6E10 4EBA 0000                  		jsr	sub_72764(pc)
000C6E14 103C 00B6                  		move.b	#-$4A,d0
000C6E18 123C 00C0                  		move.b	#-$40,d1
000C6E1C 4EBA 0000                  		jsr	sub_72764(pc)
000C6E20                            
000C6E20                            loc_72114:
000C6E20 7E00                       		moveq	#0,d7
000C6E22 1E2B 0003                  		move.b	3(a3),d7
000C6E26 6700                       		beq.s	loc_72154
000C6E28 5307                       		subq.b	#1,d7
000C6E2A 43EE 0190                  		lea	$190(a6),a1
000C6E2E 45FA 0000                  		lea	byte_721C2(pc),a2
000C6E32                            
000C6E32                            loc_72126:
000C6E32 08D1 0007                  		bset	#7,(a1)
000C6E36 135A 0001                  		move.b	(a2)+,1(a1)
000C6E3A 1344 0002                  		move.b	d4,2(a1)
000C6E3E 1346 000D                  		move.b	d6,$D(a1)
000C6E42 1345 000E                  		move.b	d5,$E(a1)
000C6E46 7000                       		moveq	#0,d0
000C6E48 301C                       		move.w	(a4)+,d0
000C6E4A D08B                       		add.l	a3,d0
000C6E4C 2340 0004                  		move.l	d0,4(a1)
000C6E50 335C 0008                  		move.w	(a4)+,8(a1)
000C6E54 101C                       		move.b	(a4)+,d0
000C6E56 135C 000B                  		move.b	(a4)+,$B(a1)
000C6E5A D2C6                       		adda.w	d6,a1
000C6E5C 51CF FFD4                  		dbf	d7,loc_72126
000C6E60                            
000C6E60                            loc_72154:
000C6E60 43EE 0220                  		lea	$220(a6),a1
000C6E64 7E05                       		moveq	#5,d7
000C6E66                            
000C6E66                            loc_7215A:
000C6E66 4A11                       		tst.b	(a1)
000C6E68 6A00 0000                  		bpl.w	loc_7217C
000C6E6C 7000                       		moveq	#0,d0
000C6E6E 1029 0001                  		move.b	1(a1),d0
000C6E72 6B00                       		bmi.s	loc_7216E
000C6E74 5500                       		subq.b	#2,d0
000C6E76 E508                       		lsl.b	#2,d0
000C6E78 6000                       		bra.s	loc_72170
000C6E7A                            ; ===========================================================================
000C6E7A                            
000C6E7A                            loc_7216E:
000C6E7A E608                       		lsr.b	#3,d0
000C6E7C                            
000C6E7C                            loc_72170:
000C6E7C 41FA 0000                  		lea	dword_722CC(pc),a0
000C6E80 2070 0000                  		movea.l	(a0,d0.w),a0
000C6E84 08D0 0002                  		bset	#2,(a0)
000C6E88                            
000C6E88                            loc_7217C:
000C6E88 D2C6                       		adda.w	d6,a1
000C6E8A 51CF FFDA                  		dbf	d7,loc_7215A
000C6E8E                            
000C6E8E 4A6E 0340                  		tst.w	$340(a6)
000C6E92 6A00                       		bpl.s	loc_7218E
000C6E94 08EE 0002 0100             		bset	#2,$100(a6)
000C6E9A                            
000C6E9A                            loc_7218E:
000C6E9A 4A6E 0370                  		tst.w	$370(a6)
000C6E9E 6A00                       		bpl.s	loc_7219A
000C6EA0 08EE 0002 01F0             		bset	#2,$1F0(a6)
000C6EA6                            
000C6EA6                            loc_7219A:
000C6EA6 4BEE 0070                  		lea	$70(a6),a5
000C6EAA 7805                       		moveq	#5,d4
000C6EAC                            
000C6EAC                            loc_721A0:
000C6EAC 4EBA 0000                  		jsr	sub_726FE(pc)
000C6EB0 DAC6                       		adda.w	d6,a5
000C6EB2 51CC FFF8                  		dbf	d4,loc_721A0
000C6EB6 7802                       		moveq	#2,d4
000C6EB8                            
000C6EB8                            loc_721AC:
000C6EB8 4EBA 0000                  		jsr	sub_729A0(pc)
000C6EBC DAC6                       		adda.w	d6,a5
000C6EBE 51CC FFF8                  		dbf	d4,loc_721AC
000C6EC2                            
000C6EC2                            loc_721B6:
000C6EC2 584F                       		addq.w	#4,sp
000C6EC4 4E75                       		rts	
000C6EC6                            ; ===========================================================================
000C6EC6 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
000C6ECE                            		even
000C6ECE 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
000C6ED2                            		even
000C6ED2                            ; ===========================================================================
000C6ED2                            ; ---------------------------------------------------------------------------
000C6ED2                            ; Play normal sound effect
000C6ED2                            ; ---------------------------------------------------------------------------
000C6ED2                            
000C6ED2                            Sound_SFX:				; XREF: Sound_ChkValue
000C6ED2 4A2E 0027                  		tst.b	$27(a6)
000C6ED6 6600 0000                  		bne.w	loc_722C6
000C6EDA 4A2E 0004                  		tst.b	4(a6)
000C6EDE 6600 0000                  		bne.w	loc_722C6
000C6EE2 4A2E 0024                  		tst.b	$24(a6)
000C6EE6 6600 0000                  		bne.w	loc_722C6
000C6EEA 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000C6EEE 6600                       		bne.s	Sound_notB5	; if not, branch
000C6EF0 4A2E 002B                  		tst.b	$2B(a6)
000C6EF4 6600                       		bne.s	loc_721EE
000C6EF6 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000C6EFA                            
000C6EFA                            loc_721EE:
000C6EFA 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000C6F00                            
000C6F00                            Sound_notB5:
000C6F00 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000C6F04 6600                       		bne.s	Sound_notA7	; if not, branch
000C6F06 4A2E 002C                  		tst.b	$2C(a6)
000C6F0A 6600 0000                  		bne.w	locret_722C4
000C6F0E 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000C6F14                            
000C6F14                            Sound_notA7:
000C6F14 2079 000C 64C4             		movea.l	(Go_SoundIndex).l,a0
000C6F1A 0407 00A0                  		subi.b	#$A0,d7
000C6F1E E54F                       		lsl.w	#2,d7
000C6F20 2670 7000                  		movea.l	(a0,d7.w),a3
000C6F24 224B                       		movea.l	a3,a1
000C6F26 7200                       		moveq	#0,d1
000C6F28 3219                       		move.w	(a1)+,d1
000C6F2A D28B                       		add.l	a3,d1
000C6F2C 1A19                       		move.b	(a1)+,d5
000C6F2E 1E19                       		move.b	(a1)+,d7
000C6F30 5307                       		subq.b	#1,d7
000C6F32 7C30                       		moveq	#$30,d6
000C6F34                            
000C6F34                            loc_72228:
000C6F34 7600                       		moveq	#0,d3
000C6F36 1629 0001                  		move.b	1(a1),d3
000C6F3A 1803                       		move.b	d3,d4
000C6F3C 6B00                       		bmi.s	loc_72244
000C6F3E 5543                       		subq.w	#2,d3
000C6F40 E54B                       		lsl.w	#2,d3
000C6F42 4BFA 0000                  		lea	dword_722CC(pc),a5
000C6F46 2A75 3000                  		movea.l	(a5,d3.w),a5
000C6F4A 08D5 0002                  		bset	#2,(a5)
000C6F4E 6000                       		bra.s	loc_7226E
000C6F50                            ; ===========================================================================
000C6F50                            
000C6F50                            loc_72244:
000C6F50 E64B                       		lsr.w	#3,d3
000C6F52 4BFA 0000                  		lea	dword_722CC(pc),a5
000C6F56 2A75 3000                  		movea.l	(a5,d3.w),a5
000C6F5A 08D5 0002                  		bset	#2,(a5)
000C6F5E 0C04 00C0                  		cmpi.b	#$C0,d4
000C6F62 6600                       		bne.s	loc_7226E
000C6F64 1004                       		move.b	d4,d0
000C6F66 0000 001F                  		ori.b	#$1F,d0
000C6F6A 13C0 00C0 0011             		move.b	d0,($C00011).l
000C6F70 0840 0005                  		bchg	#5,d0
000C6F74 13C0 00C0 0011             		move.b	d0,($C00011).l
000C6F7A                            
000C6F7A                            loc_7226E:
000C6F7A 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
000C6F7E 244D                       		movea.l	a5,a2
000C6F80 700B                       		moveq	#$B,d0
000C6F82                            
000C6F82                            loc_72276:
000C6F82 429A                       		clr.l	(a2)+
000C6F84 51C8 FFFC                  		dbf	d0,loc_72276
000C6F88                            
000C6F88 3A99                       		move.w	(a1)+,(a5)
000C6F8A 1B45 0002                  		move.b	d5,2(a5)
000C6F8E 7000                       		moveq	#0,d0
000C6F90 3019                       		move.w	(a1)+,d0
000C6F92 D08B                       		add.l	a3,d0
000C6F94 2B40 0004                  		move.l	d0,4(a5)
000C6F98 3B59 0008                  		move.w	(a1)+,8(a5)
000C6F9C 1B7C 0001 000E             		move.b	#1,$E(a5)
000C6FA2 1B46 000D                  		move.b	d6,$D(a5)
000C6FA6 4A04                       		tst.b	d4
000C6FA8 6B00                       		bmi.s	loc_722A8
000C6FAA 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000C6FB0 2B41 0020                  		move.l	d1,$20(a5)
000C6FB4                            
000C6FB4                            loc_722A8:
000C6FB4 51CF FF7E                  		dbf	d7,loc_72228
000C6FB8                            
000C6FB8 4A2E 0250                  		tst.b	$250(a6)
000C6FBC 6A00                       		bpl.s	loc_722B8
000C6FBE 08EE 0002 0340             		bset	#2,$340(a6)
000C6FC4                            
000C6FC4                            loc_722B8:
000C6FC4 4A2E 0310                  		tst.b	$310(a6)
000C6FC8 6A00                       		bpl.s	locret_722C4
000C6FCA 08EE 0002 0370             		bset	#2,$370(a6)
000C6FD0                            
000C6FD0                            locret_722C4:
000C6FD0 4E75                       		rts	
000C6FD2                            ; ===========================================================================
000C6FD2                            
000C6FD2                            loc_722C6:
000C6FD2 4216                       		clr.b	0(a6)
000C6FD4 4E75                       		rts	
000C6FD6                            ; ===========================================================================
000C6FD6 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
000C6FDA 0000 0000                  		dc.l 0
000C6FDE 00FF F100                  		dc.l $FFF100
000C6FE2 00FF F130                  		dc.l $FFF130
000C6FE6 00FF F190                  		dc.l $FFF190
000C6FEA 00FF F1C0                  		dc.l $FFF1C0
000C6FEE 00FF F1F0                  		dc.l $FFF1F0
000C6FF2 00FF F1F0                  		dc.l $FFF1F0
000C6FF6 00FF F220                  dword_722EC:	dc.l $FFF220
000C6FFA 0000 0000                  		dc.l 0
000C6FFE 00FF F250                  		dc.l $FFF250
000C7002 00FF F280                  		dc.l $FFF280
000C7006 00FF F2B0                  		dc.l $FFF2B0
000C700A 00FF F2E0                  		dc.l $FFF2E0
000C700E 00FF F310                  		dc.l $FFF310
000C7012 00FF F310                  		dc.l $FFF310
000C7016                            ; ===========================================================================
000C7016                            ; ---------------------------------------------------------------------------
000C7016                            ; Play GHZ waterfall sound
000C7016                            ; ---------------------------------------------------------------------------
000C7016                            
000C7016                            Sound_D0:				; XREF: Sound_ChkValue
000C7016 4A2E 0027                  		tst.b	$27(a6)
000C701A 6600 0000                  		bne.w	locret_723C6
000C701E 4A2E 0004                  		tst.b	4(a6)
000C7022 6600 0000                  		bne.w	locret_723C6
000C7026 4A2E 0024                  		tst.b	$24(a6)
000C702A 6600 0000                  		bne.w	locret_723C6
000C702E 2079 000C 64B8             		movea.l	(Go_SoundD0).l,a0
000C7034 0407 00D0                  		subi.b	#$D0,d7
000C7038 E54F                       		lsl.w	#2,d7
000C703A 2670 7000                  		movea.l	(a0,d7.w),a3
000C703E 224B                       		movea.l	a3,a1
000C7040 7000                       		moveq	#0,d0
000C7042 3019                       		move.w	(a1)+,d0
000C7044 D08B                       		add.l	a3,d0
000C7046 2D40 0020                  		move.l	d0,$20(a6)
000C704A 1A19                       		move.b	(a1)+,d5
000C704C 1E19                       		move.b	(a1)+,d7
000C704E 5307                       		subq.b	#1,d7
000C7050 7C30                       		moveq	#$30,d6
000C7052                            
000C7052                            loc_72348:
000C7052 1829 0001                  		move.b	1(a1),d4
000C7056 6B00                       		bmi.s	loc_7235A
000C7058 08EE 0002 0100             		bset	#2,$100(a6)
000C705E 4BEE 0340                  		lea	$340(a6),a5
000C7062 6000                       		bra.s	loc_72364
000C7064                            ; ===========================================================================
000C7064                            
000C7064                            loc_7235A:
000C7064 08EE 0002 01F0             		bset	#2,$1F0(a6)
000C706A 4BEE 0370                  		lea	$370(a6),a5
000C706E                            
000C706E                            loc_72364:
000C706E 244D                       		movea.l	a5,a2
000C7070 700B                       		moveq	#$B,d0
000C7072                            
000C7072                            loc_72368:
000C7072 429A                       		clr.l	(a2)+
000C7074 51C8 FFFC                  		dbf	d0,loc_72368
000C7078                            
000C7078 3A99                       		move.w	(a1)+,(a5)
000C707A 1B45 0002                  		move.b	d5,2(a5)
000C707E 7000                       		moveq	#0,d0
000C7080 3019                       		move.w	(a1)+,d0
000C7082 D08B                       		add.l	a3,d0
000C7084 2B40 0004                  		move.l	d0,4(a5)
000C7088 3B59 0008                  		move.w	(a1)+,8(a5)
000C708C 1B7C 0001 000E             		move.b	#1,$E(a5)
000C7092 1B46 000D                  		move.b	d6,$D(a5)
000C7096 4A04                       		tst.b	d4
000C7098 6B00                       		bmi.s	loc_72396
000C709A 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000C70A0                            
000C70A0                            loc_72396:
000C70A0 51CF FFB0                  		dbf	d7,loc_72348
000C70A4                            
000C70A4 4A2E 0250                  		tst.b	$250(a6)
000C70A8 6A00                       		bpl.s	loc_723A6
000C70AA 08EE 0002 0340             		bset	#2,$340(a6)
000C70B0                            
000C70B0                            loc_723A6:
000C70B0 4A2E 0310                  		tst.b	$310(a6)
000C70B4 6A00                       		bpl.s	locret_723C6
000C70B6 08EE 0002 0370             		bset	#2,$370(a6)
000C70BC 0004 001F                  		ori.b	#$1F,d4
000C70C0 13C4 00C0 0011             		move.b	d4,($C00011).l
000C70C6 0844 0005                  		bchg	#5,d4
000C70CA 13C4 00C0 0011             		move.b	d4,($C00011).l
000C70D0                            
000C70D0                            locret_723C6:
000C70D0 4E75                       		rts	
000C70D2                            ; End of function Sound_ChkValue
000C70D2                            
000C70D2                            ; ===========================================================================
000C70D2 00FF F100                  		dc.l $FFF100
000C70D6 00FF F1F0                  		dc.l $FFF1F0
000C70DA 00FF F250                  		dc.l $FFF250
000C70DE 00FF F310                  		dc.l $FFF310
000C70E2 00FF F340                  		dc.l $FFF340
000C70E6 00FF F370                  		dc.l $FFF370
000C70EA                            
000C70EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C70EA                            
000C70EA                            
000C70EA                            Snd_FadeOut1:				; XREF: Sound_E0
000C70EA 4216                       		clr.b	0(a6)
000C70EC 4BEE 0220                  		lea	$220(a6),a5
000C70F0 7E05                       		moveq	#5,d7
000C70F2                            
000C70F2                            loc_723EA:
000C70F2 4A15                       		tst.b	(a5)
000C70F4 6A00 0000                  		bpl.w	loc_72472
000C70F8 0895 0007                  		bclr	#7,(a5)
000C70FC 7600                       		moveq	#0,d3
000C70FE 162D 0001                  		move.b	1(a5),d3
000C7102 6B00                       		bmi.s	loc_7243C
000C7104 4EBA 0000                  		jsr	sub_726FE(pc)
000C7108 0C03 0004                  		cmpi.b	#4,d3
000C710C 6600                       		bne.s	loc_72416
000C710E 4A2E 0340                  		tst.b	$340(a6)
000C7112 6A00                       		bpl.s	loc_72416
000C7114 4BEE 0340                  		lea	$340(a6),a5
000C7118 226E 0020                  		movea.l	$20(a6),a1
000C711C 6000                       		bra.s	loc_72428
000C711E                            ; ===========================================================================
000C711E                            
000C711E                            loc_72416:
000C711E 5503                       		subq.b	#2,d3
000C7120 E50B                       		lsl.b	#2,d3
000C7122 41FA FEB2                  		lea	dword_722CC(pc),a0
000C7126 264D                       		movea.l	a5,a3
000C7128 2A70 3000                  		movea.l	(a0,d3.w),a5
000C712C 226E 0018                  		movea.l	$18(a6),a1
000C7130                            
000C7130                            loc_72428:
000C7130 0895 0002                  		bclr	#2,(a5)
000C7134 08D5 0001                  		bset	#1,(a5)
000C7138 102D 000B                  		move.b	$B(a5),d0
000C713C 4EBA 0000                  		jsr	sub_72C4E(pc)
000C7140 2A4B                       		movea.l	a3,a5
000C7142 6000                       		bra.s	loc_72472
000C7144                            ; ===========================================================================
000C7144                            
000C7144                            loc_7243C:
000C7144 4EBA 0000                  		jsr	sub_729A0(pc)
000C7148 41EE 0370                  		lea	$370(a6),a0
000C714C 0C03 00E0                  		cmpi.b	#$E0,d3
000C7150 6700                       		beq.s	loc_7245A
000C7152 0C03 00C0                  		cmpi.b	#$C0,d3
000C7156 6700                       		beq.s	loc_7245A
000C7158 E60B                       		lsr.b	#3,d3
000C715A 41FA FE7A                  		lea	dword_722CC(pc),a0
000C715E 2070 3000                  		movea.l	(a0,d3.w),a0
000C7162                            
000C7162                            loc_7245A:
000C7162 0890 0002                  		bclr	#2,(a0)
000C7166 08D0 0001                  		bset	#1,(a0)
000C716A 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000C7170 6600                       		bne.s	loc_72472
000C7172 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000C717A                            
000C717A                            loc_72472:
000C717A DAFC 0030                  		adda.w	#$30,a5
000C717E 51CF FF72                  		dbf	d7,loc_723EA
000C7182                            
000C7182 4E75                       		rts	
000C7184                            ; End of function Snd_FadeOut1
000C7184                            
000C7184                            
000C7184                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C7184                            
000C7184                            
000C7184                            Snd_FadeOut2:				; XREF: Sound_E0
000C7184 4BEE 0340                  		lea	$340(a6),a5
000C7188 4A15                       		tst.b	(a5)
000C718A 6A00                       		bpl.s	loc_724AE
000C718C 0895 0007                  		bclr	#7,(a5)
000C7190 0815 0002                  		btst	#2,(a5)
000C7194 6600                       		bne.s	loc_724AE
000C7196 4EBA 0000                  		jsr	loc_7270A(pc)
000C719A 4BEE 0100                  		lea	$100(a6),a5
000C719E 0895 0002                  		bclr	#2,(a5)
000C71A2 08D5 0001                  		bset	#1,(a5)
000C71A6 4A15                       		tst.b	(a5)
000C71A8 6A00                       		bpl.s	loc_724AE
000C71AA 226E 0018                  		movea.l	$18(a6),a1
000C71AE 102D 000B                  		move.b	$B(a5),d0
000C71B2 4EBA 0000                  		jsr	sub_72C4E(pc)
000C71B6                            
000C71B6                            loc_724AE:
000C71B6 4BEE 0370                  		lea	$370(a6),a5
000C71BA 4A15                       		tst.b	(a5)
000C71BC 6A00                       		bpl.s	locret_724E4
000C71BE 0895 0007                  		bclr	#7,(a5)
000C71C2 0815 0002                  		btst	#2,(a5)
000C71C6 6600                       		bne.s	locret_724E4
000C71C8 4EBA 0000                  		jsr	loc_729A6(pc)
000C71CC 4BEE 01F0                  		lea	$1F0(a6),a5
000C71D0 0895 0002                  		bclr	#2,(a5)
000C71D4 08D5 0001                  		bset	#1,(a5)
000C71D8 4A15                       		tst.b	(a5)
000C71DA 6A00                       		bpl.s	locret_724E4
000C71DC 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000C71E2 6600                       		bne.s	locret_724E4
000C71E4 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000C71EC                            
000C71EC                            locret_724E4:
000C71EC 4E75                       		rts	
000C71EE                            ; End of function Snd_FadeOut2
000C71EE                            
000C71EE                            ; ===========================================================================
000C71EE                            ; ---------------------------------------------------------------------------
000C71EE                            ; Fade out music
000C71EE                            ; ---------------------------------------------------------------------------
000C71EE                            
000C71EE                            Sound_E0:				; XREF: Sound_ExIndex
000C71EE 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
000C71F2 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
000C71F6 1D7C 0003 0006             		move.b	#3,6(a6)
000C71FC 1D7C 0028 0004             		move.b	#$28,4(a6)
000C7202 422E 0040                  		clr.b	$40(a6)
000C7206 422E 002A                  		clr.b	$2A(a6)
000C720A 4E75                       		rts	
000C720C                            
000C720C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C720C                            
000C720C                            
000C720C                            sub_72504:				; XREF: sub_71B4C
000C720C 102E 0006                  		move.b	6(a6),d0
000C7210 6700                       		beq.s	loc_72510
000C7212 532E 0006                  		subq.b	#1,6(a6)
000C7216 4E75                       		rts	
000C7218                            ; ===========================================================================
000C7218                            
000C7218                            loc_72510:
000C7218 532E 0004                  		subq.b	#1,4(a6)
000C721C 6700 0000                  		beq.w	Sound_E4
000C7220 1D7C 0003 0006             		move.b	#3,6(a6)
000C7226 4BEE 0070                  		lea	$70(a6),a5
000C722A 7E05                       		moveq	#5,d7
000C722C                            
000C722C                            loc_72524:
000C722C 4A15                       		tst.b	(a5)
000C722E 6A00                       		bpl.s	loc_72538
000C7230 522D 0009                  		addq.b	#1,9(a5)
000C7234 6A00                       		bpl.s	loc_72534
000C7236 0895 0007                  		bclr	#7,(a5)
000C723A 6000                       		bra.s	loc_72538
000C723C                            ; ===========================================================================
000C723C                            
000C723C                            loc_72534:
000C723C 4EBA 0000                  		jsr	sub_72CB4(pc)
000C7240                            
000C7240                            loc_72538:
000C7240 DAFC 0030                  		adda.w	#$30,a5
000C7244 51CF FFE6                  		dbf	d7,loc_72524
000C7248                            
000C7248 7E02                       		moveq	#2,d7
000C724A                            
000C724A                            loc_72542:
000C724A 4A15                       		tst.b	(a5)
000C724C 6A00                       		bpl.s	loc_72560
000C724E 522D 0009                  		addq.b	#1,9(a5)
000C7252 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000C7258 6500                       		bcs.s	loc_72558
000C725A 0895 0007                  		bclr	#7,(a5)
000C725E 6000                       		bra.s	loc_72560
000C7260                            ; ===========================================================================
000C7260                            
000C7260                            loc_72558:
000C7260 1C2D 0009                  		move.b	9(a5),d6
000C7264 4EBA 0000                  		jsr	sub_7296A(pc)
000C7268                            
000C7268                            loc_72560:
000C7268 DAFC 0030                  		adda.w	#$30,a5
000C726C 51CF FFDC                  		dbf	d7,loc_72542
000C7270                            
000C7270 4E75                       		rts	
000C7272                            ; End of function sub_72504
000C7272                            
000C7272                            
000C7272                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C7272                            
000C7272                            
000C7272                            sub_7256A:				; XREF: Sound_E4; sub_725CA
000C7272 7602                       		moveq	#2,d3
000C7274 7028                       		moveq	#$28,d0
000C7276                            
000C7276                            loc_7256E:
000C7276 1203                       		move.b	d3,d1
000C7278 4EBA 0000                  		jsr	sub_7272E(pc)
000C727C 5801                       		addq.b	#4,d1
000C727E 4EBA 0000                  		jsr	sub_7272E(pc)
000C7282 51CB FFF2                  		dbf	d3,loc_7256E
000C7286                            
000C7286 7040                       		moveq	#$40,d0
000C7288 727F                       		moveq	#$7F,d1
000C728A 7802                       		moveq	#2,d4
000C728C                            
000C728C                            loc_72584:
000C728C 7603                       		moveq	#3,d3
000C728E                            
000C728E                            loc_72586:
000C728E 4EBA 0000                  		jsr	sub_7272E(pc)
000C7292 4EBA 0000                  		jsr	sub_72764(pc)
000C7296 5840                       		addq.w	#4,d0
000C7298 51CB FFF4                  		dbf	d3,loc_72586
000C729C                            
000C729C 0400 000F                  		subi.b	#$F,d0
000C72A0 51CC FFEA                  		dbf	d4,loc_72584
000C72A4                            
000C72A4 4E75                       		rts	
000C72A6                            ; End of function sub_7256A
000C72A6                            
000C72A6                            ; ===========================================================================
000C72A6                            ; ---------------------------------------------------------------------------
000C72A6                            ; Stop music
000C72A6                            ; ---------------------------------------------------------------------------
000C72A6                            
000C72A6                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
000C72A6 702B                       		moveq	#$2B,d0
000C72A8 123C 0080                  		move.b	#$80,d1
000C72AC 4EBA 0000                  		jsr	sub_7272E(pc)
000C72B0 7027                       		moveq	#$27,d0
000C72B2 7200                       		moveq	#0,d1
000C72B4 4EBA 0000                  		jsr	sub_7272E(pc)
000C72B8 204E                       		movea.l	a6,a0
000C72BA 303C 00E3                  		move.w	#$E3,d0
000C72BE                            
000C72BE                            loc_725B6:
000C72BE 4298                       		clr.l	(a0)+
000C72C0 51C8 FFFC                  		dbf	d0,loc_725B6
000C72C4                            
000C72C4 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
000C72CA 4EBA FFA6                  		jsr	sub_7256A(pc)
000C72CE 6000 0000                  		bra.w	sub_729B6
000C72D2                            
000C72D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C72D2                            
000C72D2                            
000C72D2                            sub_725CA:				; XREF: Sound_ChkValue
000C72D2 204E                       		movea.l	a6,a0
000C72D4 1216                       		move.b	0(a6),d1
000C72D6 142E 0027                  		move.b	$27(a6),d2
000C72DA 162E 002A                  		move.b	$2A(a6),d3
000C72DE 182E 0026                  		move.b	$26(a6),d4
000C72E2 3A2E 000A                  		move.w	$A(a6),d5
000C72E6 303C 0087                  		move.w	#$87,d0
000C72EA                            
000C72EA                            loc_725E4:
000C72EA 4298                       		clr.l	(a0)+
000C72EC 51C8 FFFC                  		dbf	d0,loc_725E4
000C72F0                            
000C72F0 1C81                       		move.b	d1,0(a6)
000C72F2 1D42 0027                  		move.b	d2,$27(a6)
000C72F6 1D43 002A                  		move.b	d3,$2A(a6)
000C72FA 1D44 0026                  		move.b	d4,$26(a6)
000C72FE 3D45 000A                  		move.w	d5,$A(a6)
000C7302 1D7C 0080 0009             		move.b	#$80,9(a6)
000C7308 4EBA FF68                  		jsr	sub_7256A(pc)
000C730C 6000 0000                  		bra.w	sub_729B6
000C7310                            ; End of function sub_725CA
000C7310                            
000C7310                            
000C7310                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C7310                            
000C7310                            
000C7310                            sub_7260C:				; XREF: sub_71B4C
000C7310 1D6E 0002 0001             		move.b	2(a6),1(a6)
000C7316 41EE 004E                  		lea	$4E(a6),a0
000C731A 7030                       		moveq	#$30,d0
000C731C 7209                       		moveq	#9,d1
000C731E                            
000C731E                            loc_7261A:
000C731E 5210                       		addq.b	#1,(a0)
000C7320 D0C0                       		adda.w	d0,a0
000C7322 51C9 FFFA                  		dbf	d1,loc_7261A
000C7326                            
000C7326 4E75                       		rts	
000C7328                            ; End of function sub_7260C
000C7328                            
000C7328                            ; ===========================================================================
000C7328                            ; ---------------------------------------------------------------------------
000C7328                            ; Speed	up music
000C7328                            ; ---------------------------------------------------------------------------
000C7328                            
000C7328                            Sound_E2:				; XREF: Sound_ExIndex
000C7328 4A2E 0027                  		tst.b	$27(a6)
000C732C 6600                       		bne.s	loc_7263E
000C732E 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000C7334 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000C733A 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000C7340 4E75                       		rts	
000C7342                            ; ===========================================================================
000C7342                            
000C7342                            loc_7263E:
000C7342 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
000C7348 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
000C734E 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
000C7354 4E75                       		rts	
000C7356                            ; ===========================================================================
000C7356                            ; ---------------------------------------------------------------------------
000C7356                            ; Change music back to normal speed
000C7356                            ; ---------------------------------------------------------------------------
000C7356                            
000C7356                            Sound_E3:				; XREF: Sound_ExIndex
000C7356 4A2E 0027                  		tst.b	$27(a6)
000C735A 6600                       		bne.s	loc_7266A
000C735C 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000C7362 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000C7368 422E 002A                  		clr.b	$2A(a6)
000C736C 4E75                       		rts	
000C736E                            ; ===========================================================================
000C736E                            
000C736E                            loc_7266A:
000C736E 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
000C7374 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
000C737A 422E 03CA                  		clr.b	$3CA(a6)
000C737E 4E75                       		rts	
000C7380                            
000C7380                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C7380                            
000C7380                            
000C7380                            sub_7267C:				; XREF: sub_71B4C
000C7380 4A2E 0025                  		tst.b	$25(a6)
000C7384 6700                       		beq.s	loc_72688
000C7386 532E 0025                  		subq.b	#1,$25(a6)
000C738A 4E75                       		rts	
000C738C                            ; ===========================================================================
000C738C                            
000C738C                            loc_72688:
000C738C 4A2E 0026                  		tst.b	$26(a6)
000C7390 6700                       		beq.s	loc_726D6
000C7392 532E 0026                  		subq.b	#1,$26(a6)
000C7396 1D7C 0002 0025             		move.b	#2,$25(a6)
000C739C 4BEE 0070                  		lea	$70(a6),a5
000C73A0 7E05                       		moveq	#5,d7
000C73A2                            
000C73A2                            loc_7269E:
000C73A2 4A15                       		tst.b	(a5)
000C73A4 6A00                       		bpl.s	loc_726AA
000C73A6 532D 0009                  		subq.b	#1,9(a5)
000C73AA 4EBA 0000                  		jsr	sub_72CB4(pc)
000C73AE                            
000C73AE                            loc_726AA:
000C73AE DAFC 0030                  		adda.w	#$30,a5
000C73B2 51CF FFEE                  		dbf	d7,loc_7269E
000C73B6 7E02                       		moveq	#2,d7
000C73B8                            
000C73B8                            loc_726B4:
000C73B8 4A15                       		tst.b	(a5)
000C73BA 6A00                       		bpl.s	loc_726CC
000C73BC 532D 0009                  		subq.b	#1,9(a5)
000C73C0 1C2D 0009                  		move.b	9(a5),d6
000C73C4 0C06 0010                  		cmpi.b	#$10,d6
000C73C8 6500                       		bcs.s	loc_726C8
000C73CA 7C0F                       		moveq	#$F,d6
000C73CC                            
000C73CC                            loc_726C8:
000C73CC 4EBA 0000                  		jsr	sub_7296A(pc)
000C73D0                            
000C73D0                            loc_726CC:
000C73D0 DAFC 0030                  		adda.w	#$30,a5
000C73D4 51CF FFE2                  		dbf	d7,loc_726B4
000C73D8 4E75                       		rts	
000C73DA                            ; ===========================================================================
000C73DA                            
000C73DA                            loc_726D6:
000C73DA 08AE 0002 0040             		bclr	#2,$40(a6)
000C73E0 422E 0024                  		clr.b	$24(a6)
000C73E4 4E75                       		rts	
000C73E6                            ; End of function sub_7267C
000C73E6                            
000C73E6                            ; ===========================================================================
000C73E6                            
000C73E6                            loc_726E2:				; XREF: sub_71CCA
000C73E6 0815 0001                  		btst	#1,(a5)
000C73EA 6600                       		bne.s	locret_726FC
000C73EC 0815 0002                  		btst	#2,(a5)
000C73F0 6600                       		bne.s	locret_726FC
000C73F2 7028                       		moveq	#$28,d0
000C73F4 122D 0001                  		move.b	1(a5),d1
000C73F8 0001 00F0                  		ori.b	#-$10,d1
000C73FC 6000 0000                  		bra.w	sub_7272E
000C7400                            ; ===========================================================================
000C7400                            
000C7400                            locret_726FC:
000C7400 4E75                       		rts	
000C7402                            
000C7402                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C7402                            
000C7402                            
000C7402                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000C7402 0815 0004                  		btst	#4,(a5)
000C7406 6600                       		bne.s	locret_72714
000C7408 0815 0002                  		btst	#2,(a5)
000C740C 6600                       		bne.s	locret_72714
000C740E                            
000C740E                            loc_7270A:				; XREF: Snd_FadeOut2
000C740E 7028                       		moveq	#$28,d0
000C7410 122D 0001                  		move.b	1(a5),d1
000C7414 6000 0000                  		bra.w	sub_7272E
000C7418                            ; ===========================================================================
000C7418                            
000C7418                            locret_72714:
000C7418 4E75                       		rts	
000C741A                            ; End of function sub_726FE
000C741A                            
000C741A                            ; ===========================================================================
000C741A                            ; ===========================================================================
000C741A                            loc_72716:
000C741A 0815 0002                                  btst    #2,(a5)                         ; Is track being overriden by sfx?
000C741E 6600                                       bne.s   @locret                         ; Return if yes
000C7420 6000 0000                                  bra.w   sub_72722
000C7424                            ; ===========================================================================
000C7424                            ; locret_72720:
000C7424                            @locret:
000C7424 4E75                                       rts     
000C7426                            
000C7426                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000C7426                            
000C7426                            sub_72722:
000C7426 142D 0001                                  move.b  1(a5), d2
000C742A 5902                                       subq.b  #4, d2                          ; Is this bound for part I or II?
000C742C 6400                                       bcc.s   loc_7275A                       ; If part II, branch
000C742E 5802                                       addq.b  #4, d2                          ; Add in voice control bits
000C7430 D002                                       add.b   d2, d0                          ;
000C7432                            
000C7432                            ; ---------------------------------------------------------------------------
000C7432                            sub_7272E:
000C7472 4A39 00A0 4000             @waitLoop:      tst.b   ($A04000).l             ; is FM busy?
000C7478 6BF8                                       bmi.s   @waitLoop               ; branch if yes
000C747A 13C0 00A0 4000                             move.b  d0, ($A04000).l
000C7480 4E71                                       nop
000C7482 13C1 00A0 4001                             move.b  d1, ($A04001).l
000C7488 4E71                                       nop
000C748A 4E71                                       nop
000C748C 4A39 00A0 4000             @waitLoop2:     tst.b   ($A04000).l             ; is FM busy?
000C7492 6BF8                                       bmi.s   @waitLoop2              ; branch if yes
000C7494 13FC 002A 00A0 4000                        move.b  #$2A, ($A04000).l       ; restore DAC output for Mega PCM
000C74A4 4E75                                       rts
000C74A6                            ; End of function sub_7272E
000C74A6                            
000C74A6                            ; ===========================================================================
000C74A6                            loc_7275A:
000C74A6 D002                                       add.b   d2,d0                   ; Add in to destination register
000C74A8                            
000C74A8                            ; ---------------------------------------------------------------------------
000C74A8                            sub_72764:
000C74E8 4A39 00A0 4000             @waitLoop:      tst.b   ($A04000).l             ; is FM busy?
000C74EE 6BF8                                       bmi.s   @waitLoop               ; branch if yes
000C74F0 13C0 00A0 4002                             move.b  d0, ($A04002).l
000C74F6 4E71                                       nop
000C74F8 13C1 00A0 4003                             move.b  d1, ($A04003).l
000C74FE 4E71                                       nop
000C7500 4E71                                       nop
000C7502 4A39 00A0 4000             @waitLoop2:     tst.b   ($A04000).l             ; is FM busy?
000C7508 6BF8                                       bmi.s   @waitLoop2              ; branch if yes
000C750A 13FC 002A 00A0 4000                        move.b  #$2A, ($A04000).l       ; restore DAC output for Mega PCM
000C751A 4E75                                       rts
000C751C                            ; End of function sub_72764
000C751C                            ;loc_72716:				; XREF: sub_72A5A
000C751C                            ;		btst	#2,(a5)
000C751C                            ;		bne.s	locret_72720
000C751C                            ;		bra.w	sub_72722
000C751C                            ; ===========================================================================
000C751C                            
000C751C                            ;locret_72720:
000C751C                            ;		rts	
000C751C                            
000C751C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C751C                            
000C751C                            
000C751C                            ;sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000C751C                            ;		btst	#2,1(a5)
000C751C                            ;		bne.s	loc_7275A
000C751C                            ;		add.b	1(a5),d0
000C751C                            ; End of function sub_72722
000C751C                            
000C751C                            
000C751C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C751C                            
000C751C                            
000C751C                            ;sub_7272E:				; XREF: loc_71E6A
000C751C                            ;		move.b	($A04000).l,d2
000C751C                            ;		btst	#7,d2
000C751C                            ;		bne.s	sub_7272E
000C751C                            ;		move.b	d0,($A04000).l
000C751C                            ;		nop	
000C751C                            ;		nop	
000C751C                            ;		nop	
000C751C                            
000C751C                            ;loc_72746:
000C751C                            ;		move.b	($A04000).l,d2
000C751C                            ;		btst	#7,d2
000C751C                            ;		bne.s	loc_72746
000C751C                            ;
000C751C                            ;		move.b	d1,($A04001).l
000C751C                            ;		rts	
000C751C                            ; End of function sub_7272E
000C751C                            
000C751C                            ; ===========================================================================
000C751C                            
000C751C                            ;loc_7275A:				; XREF: sub_72722
000C751C                            ;		move.b	1(a5),d2
000C751C                            ;		bclr	#2,d2
000C751C                            ;		add.b	d2,d0
000C751C                            
000C751C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C751C                            
000C751C                            
000C751C                            ;sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
000C751C                            ;		move.b	($A04000).l,d2
000C751C                            ;		btst	#7,d2
000C751C                            ;		bne.s	sub_72764
000C751C                            ;		move.b	d0,($A04002).l
000C751C                            ;		nop	
000C751C                            ;		nop	
000C751C                            ;		nop	
000C751C                            ;
000C751C                            ;loc_7277C:
000C751C                            ;		move.b	($A04000).l,d2
000C751C                            ;		btst	#7,d2
000C751C                            ;		bne.s	loc_7277C
000C751C                            ;
000C751C                            ;		move.b	d1,($A04003).l
000C751C                            ;		rts	
000C751C                            ; End of function sub_72764
000C751C                            
000C751C                            ; ===========================================================================
000C751C 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
000C752E 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
000C7540 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
000C7550 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000C7560 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000C7570 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000C7580 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000C7590 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000C75A0 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000C75B0 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000C75C0 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000C75D0 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000C75DC                            
000C75DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C75DC                            
000C75DC                            
000C75DC                            sub_72850:				; XREF: sub_71B4C
000C75DC 532D 000E                  		subq.b	#1,$E(a5)
000C75E0 6600                       		bne.s	loc_72866
000C75E2 0895 0004                  		bclr	#4,(a5)
000C75E6 4EBA 0000                  		jsr	sub_72878(pc)
000C75EA 4EBA 0000                  		jsr	sub_728DC(pc)
000C75EE 6000 0000                  		bra.w	loc_7292E
000C75F2                            ; ===========================================================================
000C75F2                            
000C75F2                            loc_72866:
000C75F2 4EBA F372                  		jsr	sub_71D9E(pc)
000C75F6 4EBA 0000                  		jsr	sub_72926(pc)
000C75FA 4EBA F392                  		jsr	sub_71DC6(pc)
000C75FE 4EBA 0000                  		jsr	sub_728E2(pc)
000C7602 4E75                       		rts	
000C7604                            ; End of function sub_72850
000C7604                            
000C7604                            
000C7604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C7604                            
000C7604                            
000C7604                            sub_72878:				; XREF: sub_72850
000C7604 0895 0001                  		bclr	#1,(a5)
000C7608 286D 0004                  		movea.l	4(a5),a4
000C760C                            
000C760C                            loc_72880:
000C760C 7A00                       		moveq	#0,d5
000C760E 1A1C                       		move.b	(a4)+,d5
000C7610 0C05 00E0                  		cmpi.b	#$E0,d5
000C7614 6500                       		bcs.s	loc_72890
000C7616 4EBA 0000                  		jsr	sub_72A5A(pc)
000C761A 60F0                       		bra.s	loc_72880
000C761C                            ; ===========================================================================
000C761C                            
000C761C                            loc_72890:
000C761C 4A05                       		tst.b	d5
000C761E 6A00                       		bpl.s	loc_728A4
000C7620 4EBA 0000                  		jsr	sub_728AC(pc)
000C7624 1A1C                       		move.b	(a4)+,d5
000C7626 4A05                       		tst.b	d5
000C7628 6A00                       		bpl.s	loc_728A4
000C762A 534C                       		subq.w	#1,a4
000C762C 6000 F2FA                  		bra.w	sub_71D60
000C7630                            ; ===========================================================================
000C7630                            
000C7630                            loc_728A4:
000C7630 4EBA F2D6                  		jsr	sub_71D40(pc)
000C7634 6000 F2F2                  		bra.w	sub_71D60
000C7638                            ; End of function sub_72878
000C7638                            
000C7638                            
000C7638                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C7638                            
000C7638                            
000C7638                            sub_728AC:				; XREF: sub_72878
000C7638 0405 0081                  		subi.b	#$81,d5
000C763C 6500                       		bcs.s	loc_728CA
000C763E DA2D 0008                  		add.b	8(a5),d5
000C7642 0245 007F                  		andi.w	#$7F,d5
000C7646 E34D                       		lsl.w	#1,d5
000C7648 41FA 0000                  		lea	word_729CE(pc),a0
000C764C 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
000C7652 6000 F2D4                  		bra.w	sub_71D60
000C7656                            ; ===========================================================================
000C7656                            
000C7656                            loc_728CA:
000C7656 08D5 0001                  		bset	#1,(a5)
000C765A 3B7C FFFF 0010             		move.w	#-1,$10(a5)
000C7660 4EBA F2C6                  		jsr	sub_71D60(pc)
000C7664 6000 0000                  		bra.w	sub_729A0
000C7668                            ; End of function sub_728AC
000C7668                            
000C7668                            
000C7668                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C7668                            
000C7668                            
000C7668                            sub_728DC:				; XREF: sub_72850
000C7668 3C2D 0010                  		move.w	$10(a5),d6
000C766C 6B00                       		bmi.s	loc_72920
000C766E                            ; End of function sub_728DC
000C766E                            
000C766E                            
000C766E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C766E                            
000C766E                            
000C766E                            sub_728E2:				; XREF: sub_72850
000C766E 102D 001E                  		move.b	$1E(a5),d0
000C7672 4880                       		ext.w	d0
000C7674 DC40                       		add.w	d0,d6
000C7676 0815 0002                  		btst	#2,(a5)
000C767A 6600                       		bne.s	locret_7291E
000C767C 0815 0001                  		btst	#1,(a5)
000C7680 6600                       		bne.s	locret_7291E
000C7682 102D 0001                  		move.b	1(a5),d0
000C7686 0C00 00E0                  		cmpi.b	#$E0,d0
000C768A 6600                       		bne.s	loc_72904
000C768C 103C 00C0                  		move.b	#$C0,d0
000C7690                            
000C7690                            loc_72904:
000C7690 3206                       		move.w	d6,d1
000C7692 0201 000F                  		andi.b	#$F,d1
000C7696 8001                       		or.b	d1,d0
000C7698 E84E                       		lsr.w	#4,d6
000C769A 0206 003F                  		andi.b	#$3F,d6
000C769E 13C0 00C0 0011             		move.b	d0,($C00011).l
000C76A4 13C6 00C0 0011             		move.b	d6,($C00011).l
000C76AA                            
000C76AA                            locret_7291E:
000C76AA 4E75                       		rts	
000C76AC                            ; End of function sub_728E2
000C76AC                            
000C76AC                            ; ===========================================================================
000C76AC                            
000C76AC                            loc_72920:				; XREF: sub_728DC
000C76AC 08D5 0001                  		bset	#1,(a5)
000C76B0 4E75                       		rts	
000C76B2                            
000C76B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C76B2                            
000C76B2                            
000C76B2                            sub_72926:				; XREF: sub_72850
000C76B2 4A2D 000B                  		tst.b	$B(a5)
000C76B6 6700 0000                  		beq.w	locret_7298A
000C76BA                            
000C76BA                            loc_7292E:				; XREF: sub_72850
000C76BA 1C2D 0009                  		move.b	9(a5),d6
000C76BE 7000                       		moveq	#0,d0
000C76C0 102D 000B                  		move.b	$B(a5),d0
000C76C4 6700                       		beq.s	sub_7296A
000C76C6 2079 000C 64CC             		movea.l	(Go_PSGIndex).l,a0
000C76CC 5340                       		subq.w	#1,d0
000C76CE E548                       		lsl.w	#2,d0
000C76D0 2070 0000                  		movea.l	(a0,d0.w),a0
000C76D4 102D 000C                  		move.b	$C(a5),d0
000C76D8 1030 0000                  		move.b	(a0,d0.w),d0
000C76DC 522D 000C                  		addq.b	#1,$C(a5)
000C76E0 0800 0007                  		btst	#7,d0
000C76E4 6700                       		beq.s	loc_72960
000C76E6 0C00 0080                  		cmpi.b	#$80,d0
000C76EA 6700                       		beq.s	loc_7299A
000C76EC                            
000C76EC                            loc_72960:
000C76EC DC40                       		add.w	d0,d6
000C76EE 0C06 0010                  		cmpi.b	#$10,d6
000C76F2 6500                       		bcs.s	sub_7296A
000C76F4 7C0F                       		moveq	#$F,d6
000C76F6                            ; End of function sub_72926
000C76F6                            
000C76F6                            
000C76F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C76F6                            
000C76F6                            
000C76F6                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
000C76F6 0815 0001                  		btst	#1,(a5)
000C76FA 6600                       		bne.s	locret_7298A
000C76FC 0815 0002                  		btst	#2,(a5)
000C7700 6600                       		bne.s	locret_7298A
000C7702 0815 0004                  		btst	#4,(a5)
000C7706 6600                       		bne.s	loc_7298C
000C7708                            
000C7708                            loc_7297C:
000C7708 8C2D 0001                  		or.b	1(a5),d6
000C770C 0606 0010                  		addi.b	#$10,d6
000C7710 13C6 00C0 0011             		move.b	d6,($C00011).l
000C7716                            
000C7716                            locret_7298A:
000C7716 4E75                       		rts	
000C7718                            ; ===========================================================================
000C7718                            
000C7718                            loc_7298C:
000C7718 4A2D 0013                  		tst.b	$13(a5)
000C771C 67EA                       		beq.s	loc_7297C
000C771E 4A2D 0012                  		tst.b	$12(a5)
000C7722 66E4                       		bne.s	loc_7297C
000C7724 4E75                       		rts	
000C7726                            ; End of function sub_7296A
000C7726                            
000C7726                            ; ===========================================================================
000C7726                            
000C7726                            loc_7299A:				; XREF: sub_72926
000C7726 532D 000C                  		subq.b	#1,$C(a5)
000C772A 4E75                       		rts	
000C772C                            
000C772C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C772C                            
000C772C                            
000C772C                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
000C772C 0815 0002                  		btst	#2,(a5)
000C7730 6600                       		bne.s	locret_729B4
000C7732                            
000C7732                            loc_729A6:				; XREF: Snd_FadeOut2
000C7732 102D 0001                  		move.b	1(a5),d0
000C7736 0000 001F                  		ori.b	#$1F,d0
000C773A 13C0 00C0 0011             		move.b	d0,($C00011).l
000C7740                            
000C7740                            locret_729B4:
000C7740 4E75                       		rts	
000C7742                            ; End of function sub_729A0
000C7742                            
000C7742                            
000C7742                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C7742                            
000C7742                            
000C7742                            sub_729B6:				; XREF: loc_71E7C
000C7742 41F9 00C0 0011             		lea	($C00011).l,a0
000C7748 10BC 009F                  		move.b	#$9F,(a0)
000C774C 10BC 00BF                  		move.b	#$BF,(a0)
000C7750 10BC 00DF                  		move.b	#$DF,(a0)
000C7754 10BC 00FF                  		move.b	#$FF,(a0)
000C7758 4E75                       		rts	
000C775A                            ; End of function sub_729B6
000C775A                            
000C775A                            ; ===========================================================================
000C775A 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000C776C 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000C777E 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000C7792 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000C77A6 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000C77BA 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
000C77CE 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
000C77E2 0011 0000                  		dc.w $11, 0
000C77E6                            
000C77E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C77E6                            
000C77E6                            
000C77E6                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000C77E6 0445 00E0                  		subi.w	#$E0,d5
000C77EA E54D                       		lsl.w	#2,d5
000C77EC 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
000C77F0                            ; End of function sub_72A5A
000C77F0                            
000C77F0                            ; ===========================================================================
000C77F0                            
000C77F0                            loc_72A64:
000C77F0 6000 0000                  		bra.w	loc_72ACC
000C77F4                            ; ===========================================================================
000C77F4 6000 0000                  		bra.w	loc_72AEC
000C77F8                            ; ===========================================================================
000C77F8 6000 0000                  		bra.w	loc_72AF2
000C77FC                            ; ===========================================================================
000C77FC 6000 0000                  		bra.w	loc_72AF8
000C7800                            ; ===========================================================================
000C7800 6000 0000                  		bra.w	loc_72B14
000C7804                            ; ===========================================================================
000C7804 6000 0000                  		bra.w	loc_72B9E
000C7808                            ; ===========================================================================
000C7808 6000 0000                  		bra.w	loc_72BA4
000C780C                            ; ===========================================================================
000C780C 6000 0000                  		bra.w	loc_72BAE
000C7810                            ; ===========================================================================
000C7810 6000 0000                  		bra.w	loc_72BB4
000C7814                            ; ===========================================================================
000C7814 6000 0000                  		bra.w	loc_72BBE
000C7818                            ; ===========================================================================
000C7818 6000 0000                  		bra.w	loc_72BC6
000C781C                            ; ===========================================================================
000C781C 6000 0000                  		bra.w	loc_72BD0
000C7820                            ; ===========================================================================
000C7820 6000 0000                  		bra.w	loc_72BE6
000C7824                            ; ===========================================================================
000C7824 6000 0000                  		bra.w	loc_72BEE
000C7828                            ; ===========================================================================
000C7828 6000 0000                  		bra.w	loc_72BF4
000C782C                            ; ===========================================================================
000C782C 6000 0000                  		bra.w	loc_72C26
000C7830                            ; ===========================================================================
000C7830 6000 0000                  		bra.w	loc_72D30
000C7834                            ; ===========================================================================
000C7834 6000 0000                  		bra.w	loc_72D52
000C7838                            ; ===========================================================================
000C7838 6000 0000                  		bra.w	loc_72D58
000C783C                            ; ===========================================================================
000C783C 6000 0000                  		bra.w	loc_72E06
000C7840                            ; ===========================================================================
000C7840 6000 0000                  		bra.w	loc_72E20
000C7844                            ; ===========================================================================
000C7844 6000 0000                  		bra.w	loc_72E26
000C7848                            ; ===========================================================================
000C7848 6000 0000                  		bra.w	loc_72E2C
000C784C                            ; ===========================================================================
000C784C 6000 0000                  		bra.w	loc_72E38
000C7850                            ; ===========================================================================
000C7850 6000 0000                  		bra.w	loc_72E52
000C7854                            ; ===========================================================================
000C7854 6000 0000                  		bra.w	loc_72E64
000C7858                            ; ===========================================================================
000C7858                            
000C7858                            loc_72ACC:				; XREF: loc_72A64
000C7858 121C                       		move.b	(a4)+,d1
000C785A 4A2D 0001                  		tst.b	1(a5)
000C785E 6B00                       		bmi.s	locret_72AEA
000C7860 102D 000A                  		move.b	$A(a5),d0
000C7864 0200 0037                  		andi.b	#$37,d0
000C7868 8200                       		or.b	d0,d1
000C786A 1B41 000A                  		move.b	d1,$A(a5)
000C786E 103C 00B4                  		move.b	#$B4,d0
000C7872 6000 FBA6                  		bra.w	loc_72716
000C7876                            ; ===========================================================================
000C7876                            
000C7876                            locret_72AEA:
000C7876 4E75                       		rts	
000C7878                            ; ===========================================================================
000C7878                            
000C7878                            loc_72AEC:				; XREF: loc_72A64
000C7878 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000C787C 4E75                       		rts	
000C787E                            ; ===========================================================================
000C787E                            
000C787E                            loc_72AF2:				; XREF: loc_72A64
000C787E 1D5C 0007                  		move.b	(a4)+,7(a6)
000C7882 4E75                       		rts	
000C7884                            ; ===========================================================================
000C7884                            
000C7884                            loc_72AF8:				; XREF: loc_72A64
000C7884 7000                       		moveq	#0,d0
000C7886 102D 000D                  		move.b	$D(a5),d0
000C788A 2875 0000                  		movea.l	(a5,d0.w),a4
000C788E 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000C7896 544C                       		addq.w	#2,a4
000C7898 5800                       		addq.b	#4,d0
000C789A 1B40 000D                  		move.b	d0,$D(a5)
000C789E 4E75                       		rts	
000C78A0                            ; ===========================================================================
000C78A0                            
000C78A0                            loc_72B14:				; XREF: loc_72A64
000C78A0 204E                       		movea.l	a6,a0
000C78A2 43EE 03A0                  		lea	$3A0(a6),a1
000C78A6 303C 0087                  		move.w	#$87,d0
000C78AA                            
000C78AA                            loc_72B1E:
000C78AA 20D9                       		move.l	(a1)+,(a0)+
000C78AC 51C8 FFFC                  		dbf	d0,loc_72B1E
000C78B0                            
000C78B0 08EE 0002 0040             		bset	#2,$40(a6)
000C78B6 264D                       		movea.l	a5,a3
000C78B8 1C3C 0028                  		move.b	#$28,d6
000C78BC 9C2E 0026                  		sub.b	$26(a6),d6
000C78C0 7E05                       		moveq	#5,d7
000C78C2 4BEE 0070                  		lea	$70(a6),a5
000C78C6                            
000C78C6                            loc_72B3A:
000C78C6 0815 0007                  		btst	#7,(a5)
000C78CA 6700                       		beq.s	loc_72B5C
000C78CC 08D5 0001                  		bset	#1,(a5)
000C78D0 DD2D 0009                  		add.b	d6,9(a5)
000C78D4 0815 0002                  		btst	#2,(a5)
000C78D8 6600                       		bne.s	loc_72B5C
000C78DA 7000                       		moveq	#0,d0
000C78DC 102D 000B                  		move.b	$B(a5),d0
000C78E0 226E 0018                  		movea.l	$18(a6),a1
000C78E4 4EBA 0000                  		jsr	sub_72C4E(pc)
000C78E8                            
000C78E8                            loc_72B5C:
000C78E8 DAFC 0030                  		adda.w	#$30,a5
000C78EC 51CF FFD8                  		dbf	d7,loc_72B3A
000C78F0                            
000C78F0 7E02                       		moveq	#2,d7
000C78F2                            
000C78F2                            loc_72B66:
000C78F2 0815 0007                  		btst	#7,(a5)
000C78F6 6700                       		beq.s	loc_72B78
000C78F8 08D5 0001                  		bset	#1,(a5)
000C78FC 4EBA FE2E                  		jsr	sub_729A0(pc)
000C7900 DD2D 0009                  		add.b	d6,9(a5)
000C7904                            
000C7904                            loc_72B78:
000C7904 DAFC 0030                  		adda.w	#$30,a5
000C7908 51CF FFE8                  		dbf	d7,loc_72B66
000C790C 2A4B                       		movea.l	a3,a5
000C790E 1D7C 0080 0024             		move.b	#$80,$24(a6)
000C7914 1D7C 0028 0026             		move.b	#$28,$26(a6)
000C791A 422E 0027                  		clr.b	$27(a6)
000C791E                            ;		move.w	#0,($A11100).l
000C791E 504F                       		addq.w	#8,sp
000C7920 4E75                       		rts	
000C7922                            ; ===========================================================================
000C7922                            
000C7922                            loc_72B9E:				; XREF: loc_72A64
000C7922 1B5C 0002                  		move.b	(a4)+,2(a5)
000C7926 4E75                       		rts	
000C7928                            ; ===========================================================================
000C7928                            
000C7928                            loc_72BA4:				; XREF: loc_72A64
000C7928 101C                       		move.b	(a4)+,d0
000C792A D12D 0009                  		add.b	d0,9(a5)
000C792E 6000 0000                  		bra.w	sub_72CB4
000C7932                            ; ===========================================================================
000C7932                            
000C7932                            loc_72BAE:				; XREF: loc_72A64
000C7932 08D5 0004                  		bset	#4,(a5)
000C7936 4E75                       		rts	
000C7938                            ; ===========================================================================
000C7938                            
000C7938                            loc_72BB4:				; XREF: loc_72A64
000C7938 1B54 0012                  		move.b	(a4),$12(a5)
000C793C 1B5C 0013                  		move.b	(a4)+,$13(a5)
000C7940 4E75                       		rts	
000C7942                            ; ===========================================================================
000C7942                            
000C7942                            loc_72BBE:				; XREF: loc_72A64
000C7942 101C                       		move.b	(a4)+,d0
000C7944 D12D 0008                  		add.b	d0,8(a5)
000C7948 4E75                       		rts	
000C794A                            ; ===========================================================================
000C794A                            
000C794A                            loc_72BC6:				; XREF: loc_72A64
000C794A 1D54 0002                  		move.b	(a4),2(a6)
000C794E 1D5C 0001                  		move.b	(a4)+,1(a6)
000C7952 4E75                       		rts	
000C7954                            ; ===========================================================================
000C7954                            
000C7954                            loc_72BD0:				; XREF: loc_72A64
000C7954 41EE 0040                  		lea	$40(a6),a0
000C7958 101C                       		move.b	(a4)+,d0
000C795A 7230                       		moveq	#$30,d1
000C795C 7409                       		moveq	#9,d2
000C795E                            
000C795E                            loc_72BDA:
000C795E 1140 0002                  		move.b	d0,2(a0)
000C7962 D0C1                       		adda.w	d1,a0
000C7964 51CA FFF8                  		dbf	d2,loc_72BDA
000C7968                            
000C7968 4E75                       		rts	
000C796A                            ; ===========================================================================
000C796A                            
000C796A                            loc_72BE6:				; XREF: loc_72A64
000C796A 101C                       		move.b	(a4)+,d0
000C796C D12D 0009                  		add.b	d0,9(a5)
000C7970 4E75                       		rts	
000C7972                            ; ===========================================================================
000C7972                            
000C7972                            loc_72BEE:				; XREF: loc_72A64
000C7972 422E 002C                  		clr.b	$2C(a6)
000C7976 4E75                       		rts	
000C7978                            ; ===========================================================================
000C7978                            
000C7978                            loc_72BF4:				; XREF: loc_72A64
000C7978 0895 0007                  		bclr	#7,(a5)
000C797C 0895 0004                  		bclr	#4,(a5)
000C7980 4EBA FA80                  		jsr	sub_726FE(pc)
000C7984 4A2E 0250                  		tst.b	$250(a6)
000C7988 6B00                       		bmi.s	loc_72C22
000C798A 264D                       		movea.l	a5,a3
000C798C 4BEE 0100                  		lea	$100(a6),a5
000C7990 226E 0018                  		movea.l	$18(a6),a1
000C7994 0895 0002                  		bclr	#2,(a5)
000C7998 08D5 0001                  		bset	#1,(a5)
000C799C 102D 000B                  		move.b	$B(a5),d0
000C79A0 4EBA 0000                  		jsr	sub_72C4E(pc)
000C79A4 2A4B                       		movea.l	a3,a5
000C79A6                            
000C79A6                            loc_72C22:
000C79A6 504F                       		addq.w	#8,sp
000C79A8 4E75                       		rts	
000C79AA                            ; ===========================================================================
000C79AA                            
000C79AA                            loc_72C26:				; XREF: loc_72A64
000C79AA 7000                       		moveq	#0,d0
000C79AC 101C                       		move.b	(a4)+,d0
000C79AE 1B40 000B                  		move.b	d0,$B(a5)
000C79B2 0815 0002                  		btst	#2,(a5)
000C79B6 6600 0000                  		bne.w	locret_72CAA
000C79BA 226E 0018                  		movea.l	$18(a6),a1
000C79BE 4A2E 000E                  		tst.b	$E(a6)
000C79C2 6700                       		beq.s	sub_72C4E
000C79C4 226D 0020                  		movea.l	$20(a5),a1
000C79C8 4A2E 000E                  		tst.b	$E(a6)
000C79CC 6B00                       		bmi.s	sub_72C4E
000C79CE 226E 0020                  		movea.l	$20(a6),a1
000C79D2                            
000C79D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C79D2                            
000C79D2                            
000C79D2                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000C79D2 5340                       		subq.w	#1,d0
000C79D4 6B00                       		bmi.s	loc_72C5C
000C79D6 323C 0019                  		move.w	#$19,d1
000C79DA                            
000C79DA                            loc_72C56:
000C79DA D2C1                       		adda.w	d1,a1
000C79DC 51C8 FFFC                  		dbf	d0,loc_72C56
000C79E0                            
000C79E0                            loc_72C5C:
000C79E0 1219                       		move.b	(a1)+,d1
000C79E2 1B41 001F                  		move.b	d1,$1F(a5)
000C79E6 1801                       		move.b	d1,d4
000C79E8 103C 00B0                  		move.b	#$B0,d0
000C79EC 4EBA FA38                  		jsr	sub_72722(pc)
000C79F0 45FA 0000                  		lea	byte_72D18(pc),a2
000C79F4 7613                       		moveq	#$13,d3
000C79F6                            
000C79F6                            loc_72C72:
000C79F6 101A                       		move.b	(a2)+,d0
000C79F8 1219                       		move.b	(a1)+,d1
000C79FA 4EBA FA2A                  		jsr	sub_72722(pc)
000C79FE 51CB FFF6                  		dbf	d3,loc_72C72
000C7A02 7A03                       		moveq	#3,d5
000C7A04 0244 0007                  		andi.w	#7,d4
000C7A08 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
000C7A0C 162D 0009                  		move.b	9(a5),d3
000C7A10                            
000C7A10                            loc_72C8C:
000C7A10 101A                       		move.b	(a2)+,d0
000C7A12 1219                       		move.b	(a1)+,d1
000C7A14 E20C                       		lsr.b	#1,d4
000C7A16 6400                       		bcc.s	loc_72C96
000C7A18 D203                       		add.b	d3,d1
000C7A1A                            
000C7A1A                            loc_72C96:
000C7A1A 4EBA FA0A                  		jsr	sub_72722(pc)
000C7A1E 51CD FFF0                  		dbf	d5,loc_72C8C
000C7A22 103C 00B4                  		move.b	#$B4,d0
000C7A26 122D 000A                  		move.b	$A(a5),d1
000C7A2A 4EBA F9FA                  		jsr	sub_72722(pc)
000C7A2E                            
000C7A2E                            locret_72CAA:
000C7A2E 4E75                       		rts	
000C7A30                            ; End of function sub_72C4E
000C7A30                            
000C7A30                            ; ===========================================================================
000C7A30 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000C7A38                            
000C7A38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C7A38                            
000C7A38                            
000C7A38                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
000C7A38 0815 0002                  		btst	#2,(a5)
000C7A3C 6600                       		bne.s	locret_72D16
000C7A3E 7000                       		moveq	#0,d0
000C7A40 102D 000B                  		move.b	$B(a5),d0
000C7A44 226E 0018                  		movea.l	$18(a6),a1
000C7A48 4A2E 000E                  		tst.b	$E(a6)
000C7A4C 6700                       		beq.s	loc_72CD8
000C7A4E 226E 0020                  		movea.l	$20(a6),a1
000C7A52 4A2E 000E                  		tst.b	$E(a6)
000C7A56 6B00                       		bmi.s	loc_72CD8
000C7A58 226E 0020                  		movea.l	$20(a6),a1
000C7A5C                            
000C7A5C                            loc_72CD8:
000C7A5C 5340                       		subq.w	#1,d0
000C7A5E 6B00                       		bmi.s	loc_72CE6
000C7A60 323C 0019                  		move.w	#$19,d1
000C7A64                            
000C7A64                            loc_72CE0:
000C7A64 D2C1                       		adda.w	d1,a1
000C7A66 51C8 FFFC                  		dbf	d0,loc_72CE0
000C7A6A                            
000C7A6A                            loc_72CE6:
000C7A6A D2FC 0015                  		adda.w	#$15,a1
000C7A6E 45FA 0000                  		lea	byte_72D2C(pc),a2
000C7A72 102D 001F                  		move.b	$1F(a5),d0
000C7A76 0240 0007                  		andi.w	#7,d0
000C7A7A 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
000C7A7E 162D 0009                  		move.b	9(a5),d3
000C7A82 6B00                       		bmi.s	locret_72D16
000C7A84 7A03                       		moveq	#3,d5
000C7A86                            
000C7A86                            loc_72D02:
000C7A86 101A                       		move.b	(a2)+,d0
000C7A88 1219                       		move.b	(a1)+,d1
000C7A8A E20C                       		lsr.b	#1,d4
000C7A8C 6400                       		bcc.s	loc_72D12
000C7A8E D203                       		add.b	d3,d1
000C7A90 6500                       		bcs.s	loc_72D12
000C7A92 4EBA F992                  		jsr	sub_72722(pc)
000C7A96                            
000C7A96                            loc_72D12:
000C7A96 51CD FFEE                  		dbf	d5,loc_72D02
000C7A9A                            
000C7A9A                            locret_72D16:
000C7A9A 4E75                       		rts	
000C7A9C                            ; End of function sub_72CB4
000C7A9C                            
000C7A9C                            ; ===========================================================================
000C7A9C 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000C7AA6 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000C7AB0 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000C7AB4                            ; ===========================================================================
000C7AB4                            
000C7AB4                            loc_72D30:				; XREF: loc_72A64
000C7AB4 08D5 0003                  		bset	#3,(a5)
000C7AB8 2B4C 0014                  		move.l	a4,$14(a5)
000C7ABC 1B5C 0018                  		move.b	(a4)+,$18(a5)
000C7AC0 1B5C 0019                  		move.b	(a4)+,$19(a5)
000C7AC4 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000C7AC8 101C                       		move.b	(a4)+,d0
000C7ACA E208                       		lsr.b	#1,d0
000C7ACC 1B40 001B                  		move.b	d0,$1B(a5)
000C7AD0 426D 001C                  		clr.w	$1C(a5)
000C7AD4 4E75                       		rts	
000C7AD6                            ; ===========================================================================
000C7AD6                            
000C7AD6                            loc_72D52:				; XREF: loc_72A64
000C7AD6 08D5 0003                  		bset	#3,(a5)
000C7ADA 4E75                       		rts	
000C7ADC                            ; ===========================================================================
000C7ADC                            
000C7ADC                            loc_72D58:				; XREF: loc_72A64
000C7ADC 0895 0007                  		bclr	#7,(a5)
000C7AE0 0895 0004                  		bclr	#4,(a5)
000C7AE4 4A2D 0001                  		tst.b	1(a5)
000C7AE8 6B00                       		bmi.s	loc_72D74
000C7AEA 4A2E 0008                  		tst.b	8(a6)
000C7AEE 6B00 0000                  		bmi.w	loc_72E02
000C7AF2 4EBA F90E                  		jsr	sub_726FE(pc)
000C7AF6 6000                       		bra.s	loc_72D78
000C7AF8                            ; ===========================================================================
000C7AF8                            
000C7AF8                            loc_72D74:
000C7AF8 4EBA FC32                  		jsr	sub_729A0(pc)
000C7AFC                            
000C7AFC                            loc_72D78:
000C7AFC 4A2E 000E                  		tst.b	$E(a6)
000C7B00 6A00 0000                  		bpl.w	loc_72E02
000C7B04 4216                       		clr.b	0(a6)
000C7B06 7000                       		moveq	#0,d0
000C7B08 102D 0001                  		move.b	1(a5),d0
000C7B0C 6B00                       		bmi.s	loc_72DCC
000C7B0E 41FA F4C6                  		lea	dword_722CC(pc),a0
000C7B12 264D                       		movea.l	a5,a3
000C7B14 0C00 0004                  		cmpi.b	#4,d0
000C7B18 6600                       		bne.s	loc_72DA8
000C7B1A 4A2E 0340                  		tst.b	$340(a6)
000C7B1E 6A00                       		bpl.s	loc_72DA8
000C7B20 4BEE 0340                  		lea	$340(a6),a5
000C7B24 226E 0020                  		movea.l	$20(a6),a1
000C7B28 6000                       		bra.s	loc_72DB8
000C7B2A                            ; ===========================================================================
000C7B2A                            
000C7B2A                            loc_72DA8:
000C7B2A 5500                       		subq.b	#2,d0
000C7B2C E508                       		lsl.b	#2,d0
000C7B2E 2A70 0000                  		movea.l	(a0,d0.w),a5
000C7B32 4A15                       		tst.b	(a5)
000C7B34 6A00                       		bpl.s	loc_72DC8
000C7B36 226E 0018                  		movea.l	$18(a6),a1
000C7B3A                            
000C7B3A                            loc_72DB8:
000C7B3A 0895 0002                  		bclr	#2,(a5)
000C7B3E 08D5 0001                  		bset	#1,(a5)
000C7B42 102D 000B                  		move.b	$B(a5),d0
000C7B46 4EBA FE8A                  		jsr	sub_72C4E(pc)
000C7B4A                            
000C7B4A                            loc_72DC8:
000C7B4A 2A4B                       		movea.l	a3,a5
000C7B4C 6000                       		bra.s	loc_72E02
000C7B4E                            ; ===========================================================================
000C7B4E                            
000C7B4E                            loc_72DCC:
000C7B4E 41EE 0370                  		lea	$370(a6),a0
000C7B52 4A10                       		tst.b	(a0)
000C7B54 6A00                       		bpl.s	loc_72DE0
000C7B56 0C00 00E0                  		cmpi.b	#$E0,d0
000C7B5A 6700                       		beq.s	loc_72DEA
000C7B5C 0C00 00C0                  		cmpi.b	#$C0,d0
000C7B60 6700                       		beq.s	loc_72DEA
000C7B62                            
000C7B62                            loc_72DE0:
000C7B62 41FA F472                  		lea	dword_722CC(pc),a0
000C7B66 E608                       		lsr.b	#3,d0
000C7B68 2070 0000                  		movea.l	(a0,d0.w),a0
000C7B6C                            
000C7B6C                            loc_72DEA:
000C7B6C 0890 0002                  		bclr	#2,(a0)
000C7B70 08D0 0001                  		bset	#1,(a0)
000C7B74 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000C7B7A 6600                       		bne.s	loc_72E02
000C7B7C 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000C7B84                            
000C7B84                            loc_72E02:
000C7B84 504F                       		addq.w	#8,sp
000C7B86 4E75                       		rts	
000C7B88                            ; ===========================================================================
000C7B88                            
000C7B88                            loc_72E06:				; XREF: loc_72A64
000C7B88 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000C7B8E 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000C7B92 0815 0002                  		btst	#2,(a5)
000C7B96 6600                       		bne.s	locret_72E1E
000C7B98 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
000C7BA0                            
000C7BA0                            locret_72E1E:
000C7BA0 4E75                       		rts	
000C7BA2                            ; ===========================================================================
000C7BA2                            
000C7BA2                            loc_72E20:				; XREF: loc_72A64
000C7BA2 0895 0003                  		bclr	#3,(a5)
000C7BA6 4E75                       		rts	
000C7BA8                            ; ===========================================================================
000C7BA8                            
000C7BA8                            loc_72E26:				; XREF: loc_72A64
000C7BA8 1B5C 000B                  		move.b	(a4)+,$B(a5)
000C7BAC 4E75                       		rts	
000C7BAE                            ; ===========================================================================
000C7BAE                            
000C7BAE                            loc_72E2C:				; XREF: loc_72A64
000C7BAE 101C                       		move.b	(a4)+,d0
000C7BB0 E148                       		lsl.w	#8,d0
000C7BB2 101C                       		move.b	(a4)+,d0
000C7BB4 D8C0                       		adda.w	d0,a4
000C7BB6 534C                       		subq.w	#1,a4
000C7BB8 4E75                       		rts	
000C7BBA                            ; ===========================================================================
000C7BBA                            
000C7BBA                            loc_72E38:				; XREF: loc_72A64
000C7BBA 7000                       		moveq	#0,d0
000C7BBC 101C                       		move.b	(a4)+,d0
000C7BBE 121C                       		move.b	(a4)+,d1
000C7BC0 4A35 0024                  		tst.b	$24(a5,d0.w)
000C7BC4 6600                       		bne.s	loc_72E48
000C7BC6 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000C7BCA                            
000C7BCA                            loc_72E48:
000C7BCA 5335 0024                  		subq.b	#1,$24(a5,d0.w)
000C7BCE 66DE                       		bne.s	loc_72E2C
000C7BD0 544C                       		addq.w	#2,a4
000C7BD2 4E75                       		rts	
000C7BD4                            ; ===========================================================================
000C7BD4                            
000C7BD4                            loc_72E52:				; XREF: loc_72A64
000C7BD4 7000                       		moveq	#0,d0
000C7BD6 102D 000D                  		move.b	$D(a5),d0
000C7BDA 5900                       		subq.b	#4,d0
000C7BDC 2B8C 0000                  		move.l	a4,(a5,d0.w)
000C7BE0 1B40 000D                  		move.b	d0,$D(a5)
000C7BE4 60C8                       		bra.s	loc_72E2C
000C7BE6                            ; ===========================================================================
000C7BE6                            
000C7BE6                            loc_72E64:				; XREF: loc_72A64
000C7BE6 103C 0088                  		move.b	#$88,d0
000C7BEA 123C 000F                  		move.b	#$F,d1
000C7BEE 4EBA F842                  		jsr	sub_7272E(pc)
000C7BF2 103C 008C                  		move.b	#$8C,d0
000C7BF6 123C 000F                  		move.b	#$F,d1
000C7BFA 6000 F836                  		bra.w	sub_7272E
000C7BFE                            ; ===========================================================================
000C7BFE                            Kos_Z80:	incbin	sound\z80_1.bin
000C7CAE A646                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
000C7CB0 21                         		dc.b $21
000C7CB1 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
000C7CB3                            		incbin	sound\z80_2.bin
000C935E                            		even
000C935E                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
000CFB5E                            		even
000CFB5E                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
000D93FC                            		even
000D93FC                            Music83:	incbin	sound\music83.bin ; Marble Act 1
000DD01C 00                         		even
000DD01C                            Music84:	include	sound\music84.asm ; Star Light Act 1
000DD01C                            music84_Header:
000DD01C =00000001                  smpsHeaderStartSong = 1
000DD01C 0000                       	smpsHeaderVoice     music84_Voices
000DD01E 0603                       	smpsHeaderChan      $06, $03
000DD020 0205                       	smpsHeaderTempo     $02, $05
000DD022                            
000DD026 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
000DD02A 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
000DD02E 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
000DD032 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
000DD036 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
000DD03A 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
000DD040 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
000DD046 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
000DD04C                            
000DD04C                            ; FM1 Data
000DD04C                            music84_FM1:
000DD04C E0C0                       	smpsPan             panCenter, $00
000DD050 E107                       	smpsAlterNote       $07
000DD052 9B03 8007                  	dc.b	nD2, $03, nRst, $07
000DD056 E106                       	smpsAlterNote       $06
000DD058 9903 800B                  	dc.b	nC2, $03, nRst, $0B
000DD05C E10B                       	smpsAlterNote       $0B
000DD05E 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
000DD064 E10C                       	smpsAlterNote       $0C
000DD066 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000DD069 E10B                       	smpsAlterNote       $0B
000DD06B E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000DD06E E109                       	smpsAlterNote       $09
000DD070 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
000DD075 E108                       	smpsAlterNote       $08
000DD077 8001                       	dc.b	nRst, $01
000DD079 E10B                       	smpsAlterNote       $0B
000DD07B 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
000DD081 E107                       	smpsAlterNote       $07
000DD083 9B03                       	dc.b	nD2, $03
000DD085                            
000DD085                            music84_Jump04:
000DD085 E107                       	smpsAlterNote       $07
000DD087 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DD08B E10B                       	smpsAlterNote       $0B
000DD08D A202 8001                  	dc.b	nA2, $02, nRst, $01
000DD091 E107                       	smpsAlterNote       $07
000DD093 9B03                       	dc.b	nD2, $03
000DD095 E11A                       	smpsAlterNote       $1A
000DD097 A301                       	dc.b	nBb2, $01
000DD099 E1F2                       	smpsAlterNote       $F2
000DD09B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD09E E1FF                       	smpsAlterNote       $FF
000DD0A0 E701                       	dc.b	smpsNoAttack, $01
000DD0A2 E111                       	smpsAlterNote       $11
000DD0A4 E701                       	dc.b	smpsNoAttack, $01
000DD0A6 E106                       	smpsAlterNote       $06
000DD0A8 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000DD0AB E107                       	smpsAlterNote       $07
000DD0AD 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DD0B1 E108                       	smpsAlterNote       $08
000DD0B3 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
000DD0BB E109                       	smpsAlterNote       $09
000DD0BD A003                       	dc.b	nG2, $03
000DD0BF E10C                       	smpsAlterNote       $0C
000DD0C1 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000DD0C5 E1FD                       	smpsAlterNote       $FD
000DD0C7 A401                       	dc.b	nB2, $01
000DD0C9 E109                       	smpsAlterNote       $09
000DD0CB E701                       	dc.b	smpsNoAttack, $01
000DD0CD E106                       	smpsAlterNote       $06
000DD0CF E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DD0D2 E109                       	smpsAlterNote       $09
000DD0D4 A007                       	dc.b	nG2, $07
000DD0D6 E108                       	smpsAlterNote       $08
000DD0D8 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000DD0DC E107                       	smpsAlterNote       $07
000DD0DE 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000DD0E4 E10B                       	smpsAlterNote       $0B
000DD0E6 A203 8001                  	dc.b	nA2, $03, nRst, $01
000DD0EA E107                       	smpsAlterNote       $07
000DD0EC 9B03                       	dc.b	nD2, $03
000DD0EE E11A                       	smpsAlterNote       $1A
000DD0F0 A301                       	dc.b	nBb2, $01
000DD0F2 E1F9                       	smpsAlterNote       $F9
000DD0F4 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD0F7 E107                       	smpsAlterNote       $07
000DD0F9 E701                       	dc.b	smpsNoAttack, $01
000DD0FB E111                       	smpsAlterNote       $11
000DD0FD E701                       	dc.b	smpsNoAttack, $01
000DD0FF E106                       	smpsAlterNote       $06
000DD101 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000DD106 E107                       	smpsAlterNote       $07
000DD108 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000DD110 E1EC                       	smpsAlterNote       $EC
000DD112 A101                       	dc.b	nAb2, $01
000DD114 E108                       	smpsAlterNote       $08
000DD116 E701                       	dc.b	smpsNoAttack, $01
000DD118 E116                       	smpsAlterNote       $16
000DD11A E701                       	dc.b	smpsNoAttack, $01
000DD11C E1F5                       	smpsAlterNote       $F5
000DD11E E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000DD121 E10B                       	smpsAlterNote       $0B
000DD123 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DD127 E107                       	smpsAlterNote       $07
000DD129 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000DD12F E109                       	smpsAlterNote       $09
000DD131 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000DD135 E10B                       	smpsAlterNote       $0B
000DD137 9603                       	dc.b	nA1, $03
000DD139 E107                       	smpsAlterNote       $07
000DD13B 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000DD141 E10B                       	smpsAlterNote       $0B
000DD143 A203 8001                  	dc.b	nA2, $03, nRst, $01
000DD147 E107                       	smpsAlterNote       $07
000DD149 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000DD14D E11A                       	smpsAlterNote       $1A
000DD14F A301                       	dc.b	nBb2, $01
000DD151 E1F9                       	smpsAlterNote       $F9
000DD153 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD156 E107                       	smpsAlterNote       $07
000DD158 E701                       	dc.b	smpsNoAttack, $01
000DD15A E1FB                       	smpsAlterNote       $FB
000DD15C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DD15F E106                       	smpsAlterNote       $06
000DD161 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DD165 E107                       	smpsAlterNote       $07
000DD167 9B03                       	dc.b	nD2, $03
000DD169 E108                       	smpsAlterNote       $08
000DD16B 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000DD171 E109                       	smpsAlterNote       $09
000DD173 A002 8001                  	dc.b	nG2, $02, nRst, $01
000DD177 E10C                       	smpsAlterNote       $0C
000DD179 A303                       	dc.b	nBb2, $03
000DD17B E1F0                       	smpsAlterNote       $F0
000DD17D A401                       	dc.b	nB2, $01
000DD17F E1FD                       	smpsAlterNote       $FD
000DD181 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
000DD186 E106                       	smpsAlterNote       $06
000DD188 8001                       	dc.b	nRst, $01
000DD18A E109                       	smpsAlterNote       $09
000DD18C A006 8001                  	dc.b	nG2, $06, nRst, $01
000DD190 E108                       	smpsAlterNote       $08
000DD192 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
000DD196 E107                       	smpsAlterNote       $07
000DD198 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000DD19E E10B                       	smpsAlterNote       $0B
000DD1A0 A203                       	dc.b	nA2, $03
000DD1A2 E107                       	smpsAlterNote       $07
000DD1A4 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DD1A8 E1F2                       	smpsAlterNote       $F2
000DD1AA A401                       	dc.b	nB2, $01
000DD1AC E1FF                       	smpsAlterNote       $FF
000DD1AE E701                       	dc.b	smpsNoAttack, $01
000DD1B0 E107                       	smpsAlterNote       $07
000DD1B2 E701                       	dc.b	smpsNoAttack, $01
000DD1B4 E1FB                       	smpsAlterNote       $FB
000DD1B6 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DD1B9 E106                       	smpsAlterNote       $06
000DD1BB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DD1BF E107                       	smpsAlterNote       $07
000DD1C1 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
000DD1CB E117                       	smpsAlterNote       $17
000DD1CD A001                       	dc.b	nG2, $01
000DD1CF E1FA                       	smpsAlterNote       $FA
000DD1D1 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000DD1D4 E108                       	smpsAlterNote       $08
000DD1D6 E701                       	dc.b	smpsNoAttack, $01
000DD1D8 E1E7                       	smpsAlterNote       $E7
000DD1DA E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000DD1DD E103                       	smpsAlterNote       $03
000DD1DF E701                       	dc.b	smpsNoAttack, $01
000DD1E1 E10B                       	smpsAlterNote       $0B
000DD1E3 E702                       	dc.b	smpsNoAttack, $02
000DD1E5 E107                       	smpsAlterNote       $07
000DD1E7 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
000DD1EF E106                       	smpsAlterNote       $06
000DD1F1 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
000DD1F7 E10C                       	smpsAlterNote       $0C
000DD1F9 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
000DD1FF E109                       	smpsAlterNote       $09
000DD201 9E03                       	dc.b	nF2, $03
000DD203 E10C                       	smpsAlterNote       $0C
000DD205 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000DD209 E1EA                       	smpsAlterNote       $EA
000DD20B A201                       	dc.b	nA2, $01
000DD20D E106                       	smpsAlterNote       $06
000DD20F E701                       	dc.b	smpsNoAttack, $01
000DD211 E1E2                       	smpsAlterNote       $E2
000DD213 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000DD216 E1F0                       	smpsAlterNote       $F0
000DD218 E701                       	dc.b	smpsNoAttack, $01
000DD21A E10C                       	smpsAlterNote       $0C
000DD21C E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000DD228 E116                       	smpsAlterNote       $16
000DD22A 9C01                       	dc.b	nEb2, $01
000DD22C E105                       	smpsAlterNote       $05
000DD22E E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000DD231 E1F1                       	smpsAlterNote       $F1
000DD233 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000DD236 E1FF                       	smpsAlterNote       $FF
000DD238 E701                       	dc.b	smpsNoAttack, $01
000DD23A E109                       	smpsAlterNote       $09
000DD23C E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DD240 E10C                       	smpsAlterNote       $0C
000DD242 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000DD24E 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
000DD254 E109                       	smpsAlterNote       $09
000DD256 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000DD25A E10C                       	smpsAlterNote       $0C
000DD25C 9703                       	dc.b	nBb1, $03
000DD25E E11A                       	smpsAlterNote       $1A
000DD260 A101                       	dc.b	nAb2, $01
000DD262 E1FB                       	smpsAlterNote       $FB
000DD264 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000DD267 E10A                       	smpsAlterNote       $0A
000DD269 E701                       	dc.b	smpsNoAttack, $01
000DD26B E1E8                       	smpsAlterNote       $E8
000DD26D E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000DD270 E106                       	smpsAlterNote       $06
000DD272 E701                       	dc.b	smpsNoAttack, $01
000DD274 E10C                       	smpsAlterNote       $0C
000DD276 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
000DD282 E1F9                       	smpsAlterNote       $F9
000DD284 9D01                       	dc.b	nE2, $01
000DD286 E108                       	smpsAlterNote       $08
000DD288 E701                       	dc.b	smpsNoAttack, $01
000DD28A E1F6                       	smpsAlterNote       $F6
000DD28C E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000DD28F E109                       	smpsAlterNote       $09
000DD291 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
000DD295 E10C                       	smpsAlterNote       $0C
000DD297 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
000DD2A3 E108                       	smpsAlterNote       $08
000DD2A5 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000DD2AB E106                       	smpsAlterNote       $06
000DD2AD A403 8001                  	dc.b	nB2, $03, nRst, $01
000DD2B1 E108                       	smpsAlterNote       $08
000DD2B3 9D03                       	dc.b	nE2, $03
000DD2B5 E1EB                       	smpsAlterNote       $EB
000DD2B7 A801                       	dc.b	nEb3, $01
000DD2B9 E109                       	smpsAlterNote       $09
000DD2BB E701                       	dc.b	smpsNoAttack, $01
000DD2BD E1FA                       	smpsAlterNote       $FA
000DD2BF E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000DD2C2 E108                       	smpsAlterNote       $08
000DD2C4 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
000DD2D0 E1E9                       	smpsAlterNote       $E9
000DD2D2 A301                       	dc.b	nBb2, $01
000DD2D4 E107                       	smpsAlterNote       $07
000DD2D6 E701                       	dc.b	smpsNoAttack, $01
000DD2D8 E1F0                       	smpsAlterNote       $F0
000DD2DA E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD2DD E1F7                       	smpsAlterNote       $F7
000DD2DF E701                       	dc.b	smpsNoAttack, $01
000DD2E1 E107                       	smpsAlterNote       $07
000DD2E3 E701                       	dc.b	smpsNoAttack, $01
000DD2E5 E106                       	smpsAlterNote       $06
000DD2E7 E701                       	dc.b	smpsNoAttack, $01
000DD2E9 E108                       	smpsAlterNote       $08
000DD2EB 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000DD2F1 E106                       	smpsAlterNote       $06
000DD2F3 A403 8001                  	dc.b	nB2, $03, nRst, $01
000DD2F7 E108                       	smpsAlterNote       $08
000DD2F9 9D03                       	dc.b	nE2, $03
000DD2FB E10B                       	smpsAlterNote       $0B
000DD2FD 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
000DD305 E108                       	smpsAlterNote       $08
000DD307 9D03                       	dc.b	nE2, $03
000DD309 E10B                       	smpsAlterNote       $0B
000DD30B 9603 8001                  	dc.b	nA1, $03, nRst, $01
000DD30F E113                       	smpsAlterNote       $13
000DD311 A001                       	dc.b	nG2, $01
000DD313 E118                       	smpsAlterNote       $18
000DD315 E701                       	dc.b	smpsNoAttack, $01
000DD317 E1E9                       	smpsAlterNote       $E9
000DD319 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000DD31C E1F3                       	smpsAlterNote       $F3
000DD31E E701                       	dc.b	smpsNoAttack, $01
000DD320 E1FD                       	smpsAlterNote       $FD
000DD322 E701                       	dc.b	smpsNoAttack, $01
000DD324 E102                       	smpsAlterNote       $02
000DD326 E701                       	dc.b	smpsNoAttack, $01
000DD328 E107                       	smpsAlterNote       $07
000DD32A 8001                       	dc.b	nRst, $01
000DD32C E10B                       	smpsAlterNote       $0B
000DD32E 9603                       	dc.b	nA1, $03
000DD330 E10C                       	smpsAlterNote       $0C
000DD332 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
000DD338 E10B                       	smpsAlterNote       $0B
000DD33A 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000DD346 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
000DD34C E107                       	smpsAlterNote       $07
000DD34E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000DD354 E10B                       	smpsAlterNote       $0B
000DD356 A203                       	dc.b	nA2, $03
000DD358 E107                       	smpsAlterNote       $07
000DD35A 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DD35E E1F2                       	smpsAlterNote       $F2
000DD360 A401                       	dc.b	nB2, $01
000DD362 E1FF                       	smpsAlterNote       $FF
000DD364 E701                       	dc.b	smpsNoAttack, $01
000DD366 E107                       	smpsAlterNote       $07
000DD368 E701                       	dc.b	smpsNoAttack, $01
000DD36A E1FB                       	smpsAlterNote       $FB
000DD36C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DD36F E106                       	smpsAlterNote       $06
000DD371 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DD375 E107                       	smpsAlterNote       $07
000DD377 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000DD37B E108                       	smpsAlterNote       $08
000DD37D 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000DD383 E109                       	smpsAlterNote       $09
000DD385 A003 8001                  	dc.b	nG2, $03, nRst, $01
000DD389 E10C                       	smpsAlterNote       $0C
000DD38B A302 8001                  	dc.b	nBb2, $02, nRst, $01
000DD38F E1F0                       	smpsAlterNote       $F0
000DD391 A401                       	dc.b	nB2, $01
000DD393 E109                       	smpsAlterNote       $09
000DD395 E701                       	dc.b	smpsNoAttack, $01
000DD397 E106                       	smpsAlterNote       $06
000DD399 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DD39C E109                       	smpsAlterNote       $09
000DD39E A007                       	dc.b	nG2, $07
000DD3A0 E108                       	smpsAlterNote       $08
000DD3A2 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000DD3A6 E107                       	smpsAlterNote       $07
000DD3A8 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000DD3AE E10B                       	smpsAlterNote       $0B
000DD3B0 A202 8001                  	dc.b	nA2, $02, nRst, $01
000DD3B4 E107                       	smpsAlterNote       $07
000DD3B6 9B03                       	dc.b	nD2, $03
000DD3B8 E11A                       	smpsAlterNote       $1A
000DD3BA A301                       	dc.b	nBb2, $01
000DD3BC E1F2                       	smpsAlterNote       $F2
000DD3BE E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD3C1 E1FF                       	smpsAlterNote       $FF
000DD3C3 E701                       	dc.b	smpsNoAttack, $01
000DD3C5 E111                       	smpsAlterNote       $11
000DD3C7 E701                       	dc.b	smpsNoAttack, $01
000DD3C9 E106                       	smpsAlterNote       $06
000DD3CB E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000DD3CE E107                       	smpsAlterNote       $07
000DD3D0 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000DD3DC E117                       	smpsAlterNote       $17
000DD3DE A001                       	dc.b	nG2, $01
000DD3E0 E1FA                       	smpsAlterNote       $FA
000DD3E2 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000DD3E5 E116                       	smpsAlterNote       $16
000DD3E7 E701                       	dc.b	smpsNoAttack, $01
000DD3E9 E1F5                       	smpsAlterNote       $F5
000DD3EB E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000DD3EE E103                       	smpsAlterNote       $03
000DD3F0 E701                       	dc.b	smpsNoAttack, $01
000DD3F2 E10B                       	smpsAlterNote       $0B
000DD3F4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DD3F8 E107                       	smpsAlterNote       $07
000DD3FA 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000DD400 E109                       	smpsAlterNote       $09
000DD402 9E03                       	dc.b	nF2, $03
000DD404 E10B                       	smpsAlterNote       $0B
000DD406 9603 8001                  	dc.b	nA1, $03, nRst, $01
000DD40A E107                       	smpsAlterNote       $07
000DD40C 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000DD412 E10B                       	smpsAlterNote       $0B
000DD414 A203 8001                  	dc.b	nA2, $03, nRst, $01
000DD418 E107                       	smpsAlterNote       $07
000DD41A 9B03                       	dc.b	nD2, $03
000DD41C E11A                       	smpsAlterNote       $1A
000DD41E A301                       	dc.b	nBb2, $01
000DD420 E1F9                       	smpsAlterNote       $F9
000DD422 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD425 E107                       	smpsAlterNote       $07
000DD427 E701                       	dc.b	smpsNoAttack, $01
000DD429 E111                       	smpsAlterNote       $11
000DD42B E701                       	dc.b	smpsNoAttack, $01
000DD42D E106                       	smpsAlterNote       $06
000DD42F E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000DD434 E107                       	smpsAlterNote       $07
000DD436 9B03                       	dc.b	nD2, $03
000DD438 E108                       	smpsAlterNote       $08
000DD43A 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000DD440 E109                       	smpsAlterNote       $09
000DD442 A003                       	dc.b	nG2, $03
000DD444 E10C                       	smpsAlterNote       $0C
000DD446 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000DD44A E1FD                       	smpsAlterNote       $FD
000DD44C A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
000DD451 E106                       	smpsAlterNote       $06
000DD453 8001                       	dc.b	nRst, $01
000DD455 E109                       	smpsAlterNote       $09
000DD457 A006 8001                  	dc.b	nG2, $06, nRst, $01
000DD45B E108                       	smpsAlterNote       $08
000DD45D 9C03                       	dc.b	nEb2, $03
000DD45F E107                       	smpsAlterNote       $07
000DD461 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000DD467 E10B                       	smpsAlterNote       $0B
000DD469 A203 8001                  	dc.b	nA2, $03, nRst, $01
000DD46D E107                       	smpsAlterNote       $07
000DD46F 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000DD473 E11A                       	smpsAlterNote       $1A
000DD475 A301                       	dc.b	nBb2, $01
000DD477 E1F9                       	smpsAlterNote       $F9
000DD479 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD47C E107                       	smpsAlterNote       $07
000DD47E E701                       	dc.b	smpsNoAttack, $01
000DD480 E1FB                       	smpsAlterNote       $FB
000DD482 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DD485 E106                       	smpsAlterNote       $06
000DD487 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DD48B E107                       	smpsAlterNote       $07
000DD48D 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000DD495 E1EC                       	smpsAlterNote       $EC
000DD497 A101                       	dc.b	nAb2, $01
000DD499 E108                       	smpsAlterNote       $08
000DD49B E701                       	dc.b	smpsNoAttack, $01
000DD49D E1E7                       	smpsAlterNote       $E7
000DD49F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000DD4A2 E1F5                       	smpsAlterNote       $F5
000DD4A4 E701                       	dc.b	smpsNoAttack, $01
000DD4A6 E10B                       	smpsAlterNote       $0B
000DD4A8 E702                       	dc.b	smpsNoAttack, $02
000DD4AA E107                       	smpsAlterNote       $07
000DD4AC 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
000DD4B2 E106                       	smpsAlterNote       $06
000DD4B4 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
000DD4BA E10C                       	smpsAlterNote       $0C
000DD4BC 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
000DD4C4 E109                       	smpsAlterNote       $09
000DD4C6 9E03                       	dc.b	nF2, $03
000DD4C8 E10C                       	smpsAlterNote       $0C
000DD4CA 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000DD4CE E1EA                       	smpsAlterNote       $EA
000DD4D0 A201                       	dc.b	nA2, $01
000DD4D2 E106                       	smpsAlterNote       $06
000DD4D4 E701                       	dc.b	smpsNoAttack, $01
000DD4D6 E114                       	smpsAlterNote       $14
000DD4D8 E701                       	dc.b	smpsNoAttack, $01
000DD4DA E1F0                       	smpsAlterNote       $F0
000DD4DC E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000DD4DF E10C                       	smpsAlterNote       $0C
000DD4E1 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000DD4ED 9703                       	dc.b	nBb1, $03
000DD4EF E116                       	smpsAlterNote       $16
000DD4F1 9C01                       	dc.b	nEb2, $01
000DD4F3 E105                       	smpsAlterNote       $05
000DD4F5 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000DD4F8 E113                       	smpsAlterNote       $13
000DD4FA E701                       	dc.b	smpsNoAttack, $01
000DD4FC E1FF                       	smpsAlterNote       $FF
000DD4FE E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000DD501 E109                       	smpsAlterNote       $09
000DD503 E703                       	dc.b	smpsNoAttack, $03
000DD505 E10C                       	smpsAlterNote       $0C
000DD507 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
000DD513 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000DD51B E109                       	smpsAlterNote       $09
000DD51D 9E03                       	dc.b	nF2, $03
000DD51F E10C                       	smpsAlterNote       $0C
000DD521 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000DD525 E1EC                       	smpsAlterNote       $EC
000DD527 A201                       	dc.b	nA2, $01
000DD529 E10A                       	smpsAlterNote       $0A
000DD52B E701                       	dc.b	smpsNoAttack, $01
000DD52D E1E8                       	smpsAlterNote       $E8
000DD52F E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000DD532 E1F7                       	smpsAlterNote       $F7
000DD534 E701                       	dc.b	smpsNoAttack, $01
000DD536 E10C                       	smpsAlterNote       $0C
000DD538 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000DD544 E1EA                       	smpsAlterNote       $EA
000DD546 9D01                       	dc.b	nE2, $01
000DD548 E108                       	smpsAlterNote       $08
000DD54A E701                       	dc.b	smpsNoAttack, $01
000DD54C E1F6                       	smpsAlterNote       $F6
000DD54E E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000DD551 E105                       	smpsAlterNote       $05
000DD553 E701                       	dc.b	smpsNoAttack, $01
000DD555 E109                       	smpsAlterNote       $09
000DD557 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DD55B E10C                       	smpsAlterNote       $0C
000DD55D 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000DD569 E108                       	smpsAlterNote       $08
000DD56B 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
000DD571 E106                       	smpsAlterNote       $06
000DD573 A403 8001                  	dc.b	nB2, $03, nRst, $01
000DD577 E108                       	smpsAlterNote       $08
000DD579 9D03                       	dc.b	nE2, $03
000DD57B E1EB                       	smpsAlterNote       $EB
000DD57D A801                       	dc.b	nEb3, $01
000DD57F E109                       	smpsAlterNote       $09
000DD581 E701                       	dc.b	smpsNoAttack, $01
000DD583 E1EB                       	smpsAlterNote       $EB
000DD585 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000DD588 E108                       	smpsAlterNote       $08
000DD58A E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
000DD596 E1E9                       	smpsAlterNote       $E9
000DD598 A301                       	dc.b	nBb2, $01
000DD59A E1F8                       	smpsAlterNote       $F8
000DD59C E701                       	dc.b	smpsNoAttack, $01
000DD59E E116                       	smpsAlterNote       $16
000DD5A0 E701                       	dc.b	smpsNoAttack, $01
000DD5A2 E1F7                       	smpsAlterNote       $F7
000DD5A4 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD5A7 E107                       	smpsAlterNote       $07
000DD5A9 E701                       	dc.b	smpsNoAttack, $01
000DD5AB E1EE                       	smpsAlterNote       $EE
000DD5AD E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DD5B0 E106                       	smpsAlterNote       $06
000DD5B2 8001                       	dc.b	nRst, $01
000DD5B4 E108                       	smpsAlterNote       $08
000DD5B6 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
000DD5BC E106                       	smpsAlterNote       $06
000DD5BE A402 8001                  	dc.b	nB2, $02, nRst, $01
000DD5C2 E108                       	smpsAlterNote       $08
000DD5C4 9D03                       	dc.b	nE2, $03
000DD5C6 E10B                       	smpsAlterNote       $0B
000DD5C8 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
000DD5CE E108                       	smpsAlterNote       $08
000DD5D0 9D03 8001                  	dc.b	nE2, $03, nRst, $01
000DD5D4 E10B                       	smpsAlterNote       $0B
000DD5D6 9603                       	dc.b	nA1, $03
000DD5D8 E10E                       	smpsAlterNote       $0E
000DD5DA A001                       	dc.b	nG2, $01
000DD5DC E118                       	smpsAlterNote       $18
000DD5DE E701                       	dc.b	smpsNoAttack, $01
000DD5E0 E1E9                       	smpsAlterNote       $E9
000DD5E2 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000DD5E5 E1EE                       	smpsAlterNote       $EE
000DD5E7 E701                       	dc.b	smpsNoAttack, $01
000DD5E9 E1F8                       	smpsAlterNote       $F8
000DD5EB E701                       	dc.b	smpsNoAttack, $01
000DD5ED E102                       	smpsAlterNote       $02
000DD5EF E701                       	dc.b	smpsNoAttack, $01
000DD5F1 E107                       	smpsAlterNote       $07
000DD5F3 8001                       	dc.b	nRst, $01
000DD5F5 E10B                       	smpsAlterNote       $0B
000DD5F7 9603                       	dc.b	nA1, $03
000DD5F9 E10C                       	smpsAlterNote       $0C
000DD5FB 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
000DD601 E10B                       	smpsAlterNote       $0B
000DD603 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000DD60F 8001 9603                  	dc.b	nRst, $01, nA1, $03
000DD613 E10C                       	smpsAlterNote       $0C
000DD615 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
000DD621 8001                       	dc.b	nRst, $01
000DD623 E10B                       	smpsAlterNote       $0B
000DD625 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
000DD62D E107                       	smpsAlterNote       $07
000DD62F 9B06 8001                  	dc.b	nD2, $06, nRst, $01
000DD633 E10B                       	smpsAlterNote       $0B
000DD635 9603                       	dc.b	nA1, $03
000DD637 E109                       	smpsAlterNote       $09
000DD639 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000DD63D E108                       	smpsAlterNote       $08
000DD63F 9D06                       	dc.b	nE2, $06
000DD641 E107                       	smpsAlterNote       $07
000DD643 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DD647 E106                       	smpsAlterNote       $06
000DD649 9903                       	dc.b	nC2, $03
000DD64B E10C                       	smpsAlterNote       $0C
000DD64D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000DD651 E10B                       	smpsAlterNote       $0B
000DD653 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
000DD65F 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000DD669 E10C                       	smpsAlterNote       $0C
000DD66B 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
000DD677 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000DD683 8001                       	dc.b	nRst, $01
000DD685 E10B                       	smpsAlterNote       $0B
000DD687 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000DD693 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
000DD69F 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
000DD6AB 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000DD6B5 E10C                       	smpsAlterNote       $0C
000DD6B7 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
000DD6C3 E10B                       	smpsAlterNote       $0B
000DD6C5 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
000DD6CD E107                       	smpsAlterNote       $07
000DD6CF 9B06 8001                  	dc.b	nD2, $06, nRst, $01
000DD6D3 E10B                       	smpsAlterNote       $0B
000DD6D5 9603                       	dc.b	nA1, $03
000DD6D7 E109                       	smpsAlterNote       $09
000DD6D9 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000DD6DD E108                       	smpsAlterNote       $08
000DD6DF 9D06 8001                  	dc.b	nE2, $06, nRst, $01
000DD6E3 E107                       	smpsAlterNote       $07
000DD6E5 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000DD6E9 E106                       	smpsAlterNote       $06
000DD6EB 9903                       	dc.b	nC2, $03
000DD6ED E10C                       	smpsAlterNote       $0C
000DD6EF 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000DD6F3 E10B                       	smpsAlterNote       $0B
000DD6F5 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000DD701 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000DD70B E10C                       	smpsAlterNote       $0C
000DD70D 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
000DD719 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000DD725 8001                       	dc.b	nRst, $01
000DD727 E10B                       	smpsAlterNote       $0B
000DD729 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000DD735 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000DD73F E10C                       	smpsAlterNote       $0C
000DD741 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000DD74D 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
000DD759 E10B                       	smpsAlterNote       $0B
000DD75B 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000DD767 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
000DD771 E10C                       	smpsAlterNote       $0C
000DD773 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000DD77F 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
000DD78B E10B                       	smpsAlterNote       $0B
000DD78D 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
000DD799 8001                       	dc.b	nRst, $01
000DD79B E1EC                       	smpsAlterNote       $EC
000DD79D A101                       	dc.b	nAb2, $01
000DD79F E1FA                       	smpsAlterNote       $FA
000DD7A1 E701                       	dc.b	smpsNoAttack, $01
000DD7A3 E116                       	smpsAlterNote       $16
000DD7A5 E701                       	dc.b	smpsNoAttack, $01
000DD7A7 E1F5                       	smpsAlterNote       $F5
000DD7A9 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000DD7AC E10B                       	smpsAlterNote       $0B
000DD7AE E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
000DD7BA 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
000DD7C6 E107                       	smpsAlterNote       $07
000DD7C8 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000DD7CE E10B                       	smpsAlterNote       $0B
000DD7D0 A203                       	dc.b	nA2, $03
000DD7D2 E107                       	smpsAlterNote       $07
000DD7D4 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DD7D8 E1F3                       	smpsAlterNote       $F3
000DD7DA A401                       	dc.b	nB2, $01
000DD7DC E102                       	smpsAlterNote       $02
000DD7DE E701                       	dc.b	smpsNoAttack, $01
000DD7E0 E109                       	smpsAlterNote       $09
000DD7E2 E701                       	dc.b	smpsNoAttack, $01
000DD7E4 E102                       	smpsAlterNote       $02
000DD7E6 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DD7E9 E106                       	smpsAlterNote       $06
000DD7EB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DD7EF E107                       	smpsAlterNote       $07
000DD7F1 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000DD7F5 E108                       	smpsAlterNote       $08
000DD7F7 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000DD7FD E109                       	smpsAlterNote       $09
000DD7FF A003 8001                  	dc.b	nG2, $03, nRst, $01
000DD803 E1F2                       	smpsAlterNote       $F2
000DD805 A401                       	dc.b	nB2, $01
000DD807 E1FF                       	smpsAlterNote       $FF
000DD809 E701                       	dc.b	smpsNoAttack, $01
000DD80B E111                       	smpsAlterNote       $11
000DD80D E701                       	dc.b	smpsNoAttack, $01
000DD80F E1FB                       	smpsAlterNote       $FB
000DD811 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DD814 E106                       	smpsAlterNote       $06
000DD816 E702                       	dc.b	smpsNoAttack, $02
000DD818 E109                       	smpsAlterNote       $09
000DD81A A007                       	dc.b	nG2, $07
000DD81C E108                       	smpsAlterNote       $08
000DD81E 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000DD822 E107                       	smpsAlterNote       $07
000DD824 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000DD82A E10B                       	smpsAlterNote       $0B
000DD82C A202 8001                  	dc.b	nA2, $02, nRst, $01
000DD830 E107                       	smpsAlterNote       $07
000DD832 9B03                       	dc.b	nD2, $03
000DD834 E11A                       	smpsAlterNote       $1A
000DD836 A301                       	dc.b	nBb2, $01
000DD838 E1F2                       	smpsAlterNote       $F2
000DD83A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD83D E1FF                       	smpsAlterNote       $FF
000DD83F E701                       	dc.b	smpsNoAttack, $01
000DD841 E111                       	smpsAlterNote       $11
000DD843 E701                       	dc.b	smpsNoAttack, $01
000DD845 E106                       	smpsAlterNote       $06
000DD847 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000DD84A E107                       	smpsAlterNote       $07
000DD84C 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000DD858 E117                       	smpsAlterNote       $17
000DD85A A001                       	dc.b	nG2, $01
000DD85C E1FA                       	smpsAlterNote       $FA
000DD85E E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000DD861 E116                       	smpsAlterNote       $16
000DD863 E701                       	dc.b	smpsNoAttack, $01
000DD865 E1F5                       	smpsAlterNote       $F5
000DD867 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000DD86A E103                       	smpsAlterNote       $03
000DD86C E701                       	dc.b	smpsNoAttack, $01
000DD86E E10B                       	smpsAlterNote       $0B
000DD870 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DD874 E107                       	smpsAlterNote       $07
000DD876 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000DD87C E109                       	smpsAlterNote       $09
000DD87E 9E03                       	dc.b	nF2, $03
000DD880 E10B                       	smpsAlterNote       $0B
000DD882 9603 8001                  	dc.b	nA1, $03, nRst, $01
000DD886 E107                       	smpsAlterNote       $07
000DD888 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000DD88E E10B                       	smpsAlterNote       $0B
000DD890 A203 8001                  	dc.b	nA2, $03, nRst, $01
000DD894 E107                       	smpsAlterNote       $07
000DD896 9B03                       	dc.b	nD2, $03
000DD898 E11A                       	smpsAlterNote       $1A
000DD89A A301                       	dc.b	nBb2, $01
000DD89C E1F9                       	smpsAlterNote       $F9
000DD89E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD8A1 E1FF                       	smpsAlterNote       $FF
000DD8A3 E701                       	dc.b	smpsNoAttack, $01
000DD8A5 E111                       	smpsAlterNote       $11
000DD8A7 E701                       	dc.b	smpsNoAttack, $01
000DD8A9 E106                       	smpsAlterNote       $06
000DD8AB E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000DD8AE E107                       	smpsAlterNote       $07
000DD8B0 9B03                       	dc.b	nD2, $03
000DD8B2 E108                       	smpsAlterNote       $08
000DD8B4 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000DD8BA E109                       	smpsAlterNote       $09
000DD8BC A003                       	dc.b	nG2, $03
000DD8BE E1F0                       	smpsAlterNote       $F0
000DD8C0 A501                       	dc.b	nC3, $01
000DD8C2 E106                       	smpsAlterNote       $06
000DD8C4 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
000DD8C8 E109                       	smpsAlterNote       $09
000DD8CA A006 8001                  	dc.b	nG2, $06, nRst, $01
000DD8CE E108                       	smpsAlterNote       $08
000DD8D0 9C03                       	dc.b	nEb2, $03
000DD8D2 E107                       	smpsAlterNote       $07
000DD8D4 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000DD8DA E10B                       	smpsAlterNote       $0B
000DD8DC A203 8001                  	dc.b	nA2, $03, nRst, $01
000DD8E0 E107                       	smpsAlterNote       $07
000DD8E2 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000DD8E6 E11A                       	smpsAlterNote       $1A
000DD8E8 A301                       	dc.b	nBb2, $01
000DD8EA E1F9                       	smpsAlterNote       $F9
000DD8EC E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD8EF E107                       	smpsAlterNote       $07
000DD8F1 E701                       	dc.b	smpsNoAttack, $01
000DD8F3 E1FB                       	smpsAlterNote       $FB
000DD8F5 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DD8F8 E106                       	smpsAlterNote       $06
000DD8FA E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DD8FE E107                       	smpsAlterNote       $07
000DD900 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000DD908 E1EC                       	smpsAlterNote       $EC
000DD90A A101                       	dc.b	nAb2, $01
000DD90C E108                       	smpsAlterNote       $08
000DD90E E701                       	dc.b	smpsNoAttack, $01
000DD910 E1E7                       	smpsAlterNote       $E7
000DD912 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000DD915 E1F5                       	smpsAlterNote       $F5
000DD917 E701                       	dc.b	smpsNoAttack, $01
000DD919 E10B                       	smpsAlterNote       $0B
000DD91B E702                       	dc.b	smpsNoAttack, $02
000DD91D E107                       	smpsAlterNote       $07
000DD91F 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
000DD925 E106                       	smpsAlterNote       $06
000DD927 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
000DD92D E10C                       	smpsAlterNote       $0C
000DD92F 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
000DD937 E109                       	smpsAlterNote       $09
000DD939 9E03                       	dc.b	nF2, $03
000DD93B E10C                       	smpsAlterNote       $0C
000DD93D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000DD941 E1EA                       	smpsAlterNote       $EA
000DD943 A201                       	dc.b	nA2, $01
000DD945 E106                       	smpsAlterNote       $06
000DD947 E701                       	dc.b	smpsNoAttack, $01
000DD949 E114                       	smpsAlterNote       $14
000DD94B E701                       	dc.b	smpsNoAttack, $01
000DD94D E1F0                       	smpsAlterNote       $F0
000DD94F E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000DD952 E10C                       	smpsAlterNote       $0C
000DD954 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000DD960 9703                       	dc.b	nBb1, $03
000DD962 E116                       	smpsAlterNote       $16
000DD964 9C01                       	dc.b	nEb2, $01
000DD966 E105                       	smpsAlterNote       $05
000DD968 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000DD96B E113                       	smpsAlterNote       $13
000DD96D E701                       	dc.b	smpsNoAttack, $01
000DD96F E1FF                       	smpsAlterNote       $FF
000DD971 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000DD974 E109                       	smpsAlterNote       $09
000DD976 E703                       	dc.b	smpsNoAttack, $03
000DD978 E10C                       	smpsAlterNote       $0C
000DD97A 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
000DD986 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000DD98E E109                       	smpsAlterNote       $09
000DD990 9E03                       	dc.b	nF2, $03
000DD992 E10C                       	smpsAlterNote       $0C
000DD994 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000DD998 E1EA                       	smpsAlterNote       $EA
000DD99A A201                       	dc.b	nA2, $01
000DD99C E106                       	smpsAlterNote       $06
000DD99E E701                       	dc.b	smpsNoAttack, $01
000DD9A0 E1E2                       	smpsAlterNote       $E2
000DD9A2 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000DD9A5 E1F0                       	smpsAlterNote       $F0
000DD9A7 E701                       	dc.b	smpsNoAttack, $01
000DD9A9 E10C                       	smpsAlterNote       $0C
000DD9AB E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000DD9B7 E116                       	smpsAlterNote       $16
000DD9B9 9C01                       	dc.b	nEb2, $01
000DD9BB E105                       	smpsAlterNote       $05
000DD9BD E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000DD9C0 E1F1                       	smpsAlterNote       $F1
000DD9C2 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000DD9C5 E1FF                       	smpsAlterNote       $FF
000DD9C7 E701                       	dc.b	smpsNoAttack, $01
000DD9C9 E109                       	smpsAlterNote       $09
000DD9CB E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DD9CF E10C                       	smpsAlterNote       $0C
000DD9D1 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
000DD9DD E106                       	smpsAlterNote       $06
000DD9DF 9903                       	dc.b	nC2, $03
000DD9E1 E107                       	smpsAlterNote       $07
000DD9E3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DD9E7 E109                       	smpsAlterNote       $09
000DD9E9 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
000DD9EF E107                       	smpsAlterNote       $07
000DD9F1 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DD9F5 E108                       	smpsAlterNote       $08
000DD9F7 9D03                       	dc.b	nE2, $03
000DD9F9 E10B                       	smpsAlterNote       $0B
000DD9FB 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
000DDA01 E109                       	smpsAlterNote       $09
000DDA03 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
000DDA09 E10C                       	smpsAlterNote       $0C
000DDA0B 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
000DDA11 E106                       	smpsAlterNote       $06
000DDA13 9903                       	dc.b	nC2, $03
000DDA15 E11A                       	smpsAlterNote       $1A
000DDA17 A301                       	dc.b	nBb2, $01
000DDA19 E1F9                       	smpsAlterNote       $F9
000DDA1B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DDA1E E1FF                       	smpsAlterNote       $FF
000DDA20 E701                       	dc.b	smpsNoAttack, $01
000DDA22 E111                       	smpsAlterNote       $11
000DDA24 E701                       	dc.b	smpsNoAttack, $01
000DDA26 E106                       	smpsAlterNote       $06
000DDA28 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
000DDA2F E109                       	smpsAlterNote       $09
000DDA31 A003                       	dc.b	nG2, $03
000DDA33 E106                       	smpsAlterNote       $06
000DDA35 9907                       	dc.b	nC2, $07
000DDA37 E107                       	smpsAlterNote       $07
000DDA39 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
000DDA41 E10B                       	smpsAlterNote       $0B
000DDA43 A203                       	dc.b	nA2, $03
000DDA45 E107                       	smpsAlterNote       $07
000DDA47 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DDA4B E1F2                       	smpsAlterNote       $F2
000DDA4D A401                       	dc.b	nB2, $01
000DDA4F E1F9                       	smpsAlterNote       $F9
000DDA51 E701                       	dc.b	smpsNoAttack, $01
000DDA53 E107                       	smpsAlterNote       $07
000DDA55 E701                       	dc.b	smpsNoAttack, $01
000DDA57 E1FB                       	smpsAlterNote       $FB
000DDA59 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DDA5C E106                       	smpsAlterNote       $06
000DDA5E E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DDA62 E107                       	smpsAlterNote       $07
000DDA64 9B03                       	dc.b	nD2, $03
000DDA66 E108                       	smpsAlterNote       $08
000DDA68 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
000DDA6E E109                       	smpsAlterNote       $09
000DDA70 A003 8001                  	dc.b	nG2, $03, nRst, $01
000DDA74 E1F2                       	smpsAlterNote       $F2
000DDA76 A401                       	dc.b	nB2, $01
000DDA78 E1F9                       	smpsAlterNote       $F9
000DDA7A E701                       	dc.b	smpsNoAttack, $01
000DDA7C E107                       	smpsAlterNote       $07
000DDA7E E701                       	dc.b	smpsNoAttack, $01
000DDA80 E1FB                       	smpsAlterNote       $FB
000DDA82 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DDA85 E106                       	smpsAlterNote       $06
000DDA87 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DDA8B E108                       	smpsAlterNote       $08
000DDA8D 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
000DDA91 E10C                       	smpsAlterNote       $0C
000DDA93 A302 8001                  	dc.b	nBb2, $02, nRst, $01
000DDA97 E107                       	smpsAlterNote       $07
000DDA99 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000DDA9F E10B                       	smpsAlterNote       $0B
000DDAA1 A203                       	dc.b	nA2, $03
000DDAA3 E107                       	smpsAlterNote       $07
000DDAA5 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DDAA9 E1F2                       	smpsAlterNote       $F2
000DDAAB A401                       	dc.b	nB2, $01
000DDAAD E1FF                       	smpsAlterNote       $FF
000DDAAF E701                       	dc.b	smpsNoAttack, $01
000DDAB1 E107                       	smpsAlterNote       $07
000DDAB3 E701                       	dc.b	smpsNoAttack, $01
000DDAB5 E1FB                       	smpsAlterNote       $FB
000DDAB7 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DDABA E106                       	smpsAlterNote       $06
000DDABC E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DDAC0 E107                       	smpsAlterNote       $07
000DDAC2 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000DDAC6 E108                       	smpsAlterNote       $08
000DDAC8 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
000DDACE E109                       	smpsAlterNote       $09
000DDAD0 A003 8001                  	dc.b	nG2, $03, nRst, $01
000DDAD4 E1F2                       	smpsAlterNote       $F2
000DDAD6 A401                       	dc.b	nB2, $01
000DDAD8 E1FF                       	smpsAlterNote       $FF
000DDADA E701                       	dc.b	smpsNoAttack, $01
000DDADC E111                       	smpsAlterNote       $11
000DDADE E701                       	dc.b	smpsNoAttack, $01
000DDAE0 E1FB                       	smpsAlterNote       $FB
000DDAE2 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DDAE5 E106                       	smpsAlterNote       $06
000DDAE7 E702                       	dc.b	smpsNoAttack, $02
000DDAE9 E108                       	smpsAlterNote       $08
000DDAEB 9C07                       	dc.b	nEb2, $07
000DDAED E10C                       	smpsAlterNote       $0C
000DDAEF A303 8001                  	dc.b	nBb2, $03, nRst, $01
000DDAF3 E107                       	smpsAlterNote       $07
000DDAF5 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000DDAFB E10B                       	smpsAlterNote       $0B
000DDAFD A202 8001                  	dc.b	nA2, $02, nRst, $01
000DDB01 E107                       	smpsAlterNote       $07
000DDB03 9B03                       	dc.b	nD2, $03
000DDB05 E11A                       	smpsAlterNote       $1A
000DDB07 A301                       	dc.b	nBb2, $01
000DDB09 E1F2                       	smpsAlterNote       $F2
000DDB0B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DDB0E E1FF                       	smpsAlterNote       $FF
000DDB10 E701                       	dc.b	smpsNoAttack, $01
000DDB12 E111                       	smpsAlterNote       $11
000DDB14 E701                       	dc.b	smpsNoAttack, $01
000DDB16 E106                       	smpsAlterNote       $06
000DDB18 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000DDB1B E107                       	smpsAlterNote       $07
000DDB1D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DDB21 E108                       	smpsAlterNote       $08
000DDB23 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
000DDB2B E109                       	smpsAlterNote       $09
000DDB2D A003                       	dc.b	nG2, $03
000DDB2F E11A                       	smpsAlterNote       $1A
000DDB31 A301                       	dc.b	nBb2, $01
000DDB33 E1F2                       	smpsAlterNote       $F2
000DDB35 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DDB38 E1FF                       	smpsAlterNote       $FF
000DDB3A E701                       	dc.b	smpsNoAttack, $01
000DDB3C E111                       	smpsAlterNote       $11
000DDB3E E701                       	dc.b	smpsNoAttack, $01
000DDB40 E106                       	smpsAlterNote       $06
000DDB42 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000DDB45 E108                       	smpsAlterNote       $08
000DDB47 9C07                       	dc.b	nEb2, $07
000DDB49 E10C                       	smpsAlterNote       $0C
000DDB4B A303 8001                  	dc.b	nBb2, $03, nRst, $01
000DDB4F E107                       	smpsAlterNote       $07
000DDB51 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
000DDB5D 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
000DDB67 E108                       	smpsAlterNote       $08
000DDB69 9C06                       	dc.b	nEb2, $06
000DDB6B E10C                       	smpsAlterNote       $0C
000DDB6D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000DDB71 E108                       	smpsAlterNote       $08
000DDB73 9C03                       	dc.b	nEb2, $03
000DDB75 E109                       	smpsAlterNote       $09
000DDB77 A003 8001                  	dc.b	nG2, $03, nRst, $01
000DDB7B E10C                       	smpsAlterNote       $0C
000DDB7D A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
000DDB85 E107                       	smpsAlterNote       $07
000DDB87 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DDB8B F6F4 F8                    	smpsJump            music84_Jump04
000DDB8E                            
000DDB8E                            ; FM2 Data
000DDB8E                            music84_FM2:
000DDB8E E0C0                       	smpsPan             panCenter, $00
000DDB92 E10B                       	smpsAlterNote       $0B
000DDB94 C603 8007                  	dc.b	nA5, $03, nRst, $07
000DDB98 E109                       	smpsAlterNote       $09
000DDB9A C403 800B                  	dc.b	nG5, $03, nRst, $0B
000DDB9E E108                       	smpsAlterNote       $08
000DDBA0 C103 8004                  	dc.b	nE5, $03, nRst, $04
000DDBA6 E080                       	smpsPan             panLeft, $00
000DDBA8 E10C                       	smpsAlterNote       $0C
000DDBAA E6F9                       	smpsAlterVol        $F9
000DDBAC C703                       	dc.b	nBb5, $03
000DDBAE E10B                       	smpsAlterNote       $0B
000DDBB0 C603 8001                  	dc.b	nA5, $03, nRst, $01
000DDBB4 E109                       	smpsAlterNote       $09
000DDBB6 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
000DDBBC E108                       	smpsAlterNote       $08
000DDBBE C103 8001                  	dc.b	nE5, $03, nRst, $01
000DDBC2 E106                       	smpsAlterNote       $06
000DDBC4 BD03                       	dc.b	nC5, $03
000DDBC6 E10B                       	smpsAlterNote       $0B
000DDBC8 BA03 8001                  	dc.b	nA4, $03, nRst, $01
000DDBCE E0C0                       	smpsPan             panCenter, $00
000DDBD0 E107                       	smpsAlterNote       $07
000DDBD2 E606                       	smpsAlterVol        $06
000DDBD4 BF03                       	dc.b	nD5, $03
000DDBD6                            
000DDBD6                            music84_Jump03:
000DDBD6 E108                       	smpsAlterNote       $08
000DDBD8 C103 8001                  	dc.b	nE5, $03, nRst, $01
000DDBDC E109                       	smpsAlterNote       $09
000DDBDE C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
000DDBE4 E10B                       	smpsAlterNote       $0B
000DDBE6 C607                       	dc.b	nA5, $07
000DDBE8 E107                       	smpsAlterNote       $07
000DDBEA BF03 8001                  	dc.b	nD5, $03, nRst, $01
000DDBEE E106                       	smpsAlterNote       $06
000DDBF0 C90D                       	dc.b	nC6, $0D
000DDBF2 E100                       	smpsAlterNote       $00
000DDBF4 E701                       	dc.b	smpsNoAttack, $01
000DDBF6 E1FF                       	smpsAlterNote       $FF
000DDBF8 E701                       	dc.b	smpsNoAttack, $01
000DDBFA E103                       	smpsAlterNote       $03
000DDBFC E701                       	dc.b	smpsNoAttack, $01
000DDBFE E109                       	smpsAlterNote       $09
000DDC00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDC04 E106                       	smpsAlterNote       $06
000DDC06 E701                       	dc.b	smpsNoAttack, $01
000DDC08 E100                       	smpsAlterNote       $00
000DDC0A E701                       	dc.b	smpsNoAttack, $01
000DDC0C E10C                       	smpsAlterNote       $0C
000DDC0E C703 8001                  	dc.b	nBb5, $03, nRst, $01
000DDC12 E10B                       	smpsAlterNote       $0B
000DDC14 C603                       	dc.b	nA5, $03
000DDC16 E109                       	smpsAlterNote       $09
000DDC18 C403 8001                  	dc.b	nG5, $03, nRst, $01
000DDC1C E10B                       	smpsAlterNote       $0B
000DDC1E C60D                       	dc.b	nA5, $0D
000DDC20 E105                       	smpsAlterNote       $05
000DDC22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDC26 E10B                       	smpsAlterNote       $0B
000DDC28 E701                       	dc.b	smpsNoAttack, $01
000DDC2A E10E                       	smpsAlterNote       $0E
000DDC2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDC30 E108                       	smpsAlterNote       $08
000DDC32 E701                       	dc.b	smpsNoAttack, $01
000DDC34 E104                       	smpsAlterNote       $04
000DDC36 E701                       	dc.b	smpsNoAttack, $01
000DDC38 E105                       	smpsAlterNote       $05
000DDC3A E701                       	dc.b	smpsNoAttack, $01
000DDC3C E10B                       	smpsAlterNote       $0B
000DDC3E E701                       	dc.b	smpsNoAttack, $01
000DDC40 E10F                       	smpsAlterNote       $0F
000DDC42 E701                       	dc.b	smpsNoAttack, $01
000DDC44 E10B                       	smpsAlterNote       $0B
000DDC46 E701                       	dc.b	smpsNoAttack, $01
000DDC48 E108                       	smpsAlterNote       $08
000DDC4A E701                       	dc.b	smpsNoAttack, $01
000DDC4C E104                       	smpsAlterNote       $04
000DDC4E E701                       	dc.b	smpsNoAttack, $01
000DDC50 E108                       	smpsAlterNote       $08
000DDC52 E701                       	dc.b	smpsNoAttack, $01
000DDC54 E10E                       	smpsAlterNote       $0E
000DDC56 E701                       	dc.b	smpsNoAttack, $01
000DDC58 E10F                       	smpsAlterNote       $0F
000DDC5A E701                       	dc.b	smpsNoAttack, $01
000DDC5C E10B                       	smpsAlterNote       $0B
000DDC5E E701                       	dc.b	smpsNoAttack, $01
000DDC60 E105                       	smpsAlterNote       $05
000DDC62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDC66 E108                       	smpsAlterNote       $08
000DDC68 E701                       	dc.b	smpsNoAttack, $01
000DDC6A E10E                       	smpsAlterNote       $0E
000DDC6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDC70 E108                       	smpsAlterNote       $08
000DDC72 E701                       	dc.b	smpsNoAttack, $01
000DDC74 E105                       	smpsAlterNote       $05
000DDC76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDC7A E10B                       	smpsAlterNote       $0B
000DDC7C E701                       	dc.b	smpsNoAttack, $01
000DDC7E E10F                       	smpsAlterNote       $0F
000DDC80 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000DDC84 E107                       	smpsAlterNote       $07
000DDC86 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000DDC8A E108                       	smpsAlterNote       $08
000DDC8C C103                       	dc.b	nE5, $03
000DDC8E E109                       	smpsAlterNote       $09
000DDC90 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
000DDC98 E10B                       	smpsAlterNote       $0B
000DDC9A C606 8001                  	dc.b	nA5, $06, nRst, $01
000DDC9E E107                       	smpsAlterNote       $07
000DDCA0 BF03                       	dc.b	nD5, $03
000DDCA2 E106                       	smpsAlterNote       $06
000DDCA4 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
000DDCA8 E107                       	smpsAlterNote       $07
000DDCAA CB03                       	dc.b	nD6, $03
000DDCAC E10C                       	smpsAlterNote       $0C
000DDCAE C704 8001                  	dc.b	nBb5, $04, nRst, $01
000DDCB2 E10B                       	smpsAlterNote       $0B
000DDCB4 C604 8001                  	dc.b	nA5, $04, nRst, $01
000DDCB8 E109                       	smpsAlterNote       $09
000DDCBA C404                       	dc.b	nG5, $04
000DDCBC E10B                       	smpsAlterNote       $0B
000DDCBE C60D                       	dc.b	nA5, $0D
000DDCC0 E108                       	smpsAlterNote       $08
000DDCC2 E701                       	dc.b	smpsNoAttack, $01
000DDCC4 E104                       	smpsAlterNote       $04
000DDCC6 E701                       	dc.b	smpsNoAttack, $01
000DDCC8 E108                       	smpsAlterNote       $08
000DDCCA E701                       	dc.b	smpsNoAttack, $01
000DDCCC E10B                       	smpsAlterNote       $0B
000DDCCE E701                       	dc.b	smpsNoAttack, $01
000DDCD0 E10F                       	smpsAlterNote       $0F
000DDCD2 E701                       	dc.b	smpsNoAttack, $01
000DDCD4 E10B                       	smpsAlterNote       $0B
000DDCD6 E701                       	dc.b	smpsNoAttack, $01
000DDCD8 E105                       	smpsAlterNote       $05
000DDCDA E701                       	dc.b	smpsNoAttack, $01
000DDCDC E104                       	smpsAlterNote       $04
000DDCDE E701                       	dc.b	smpsNoAttack, $01
000DDCE0 E108                       	smpsAlterNote       $08
000DDCE2 E701                       	dc.b	smpsNoAttack, $01
000DDCE4 E10E                       	smpsAlterNote       $0E
000DDCE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDCEA E10B                       	smpsAlterNote       $0B
000DDCEC E701                       	dc.b	smpsNoAttack, $01
000DDCEE E105                       	smpsAlterNote       $05
000DDCF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDCF4 E10B                       	smpsAlterNote       $0B
000DDCF6 E701                       	dc.b	smpsNoAttack, $01
000DDCF8 E10E                       	smpsAlterNote       $0E
000DDCFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDCFE E108                       	smpsAlterNote       $08
000DDD00 E701                       	dc.b	smpsNoAttack, $01
000DDD02 E104                       	smpsAlterNote       $04
000DDD04 E701                       	dc.b	smpsNoAttack, $01
000DDD06 E105                       	smpsAlterNote       $05
000DDD08 E701                       	dc.b	smpsNoAttack, $01
000DDD0A E10B                       	smpsAlterNote       $0B
000DDD0C E701                       	dc.b	smpsNoAttack, $01
000DDD0E E10F                       	smpsAlterNote       $0F
000DDD10 E701                       	dc.b	smpsNoAttack, $01
000DDD12 E10B                       	smpsAlterNote       $0B
000DDD14 E701                       	dc.b	smpsNoAttack, $01
000DDD16 E108                       	smpsAlterNote       $08
000DDD18 E701                       	dc.b	smpsNoAttack, $01
000DDD1A E105                       	smpsAlterNote       $05
000DDD1C 8001                       	dc.b	nRst, $01
000DDD1E E109                       	smpsAlterNote       $09
000DDD20 C401                       	dc.b	nG5, $01
000DDD22 E10B                       	smpsAlterNote       $0B
000DDD24 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
000DDD2D E109                       	smpsAlterNote       $09
000DDD2F C404 8001                  	dc.b	nG5, $04, nRst, $01
000DDD33 E10B                       	smpsAlterNote       $0B
000DDD35 C604 8001                  	dc.b	nA5, $04, nRst, $01
000DDD39 E107                       	smpsAlterNote       $07
000DDD3B BF0D                       	dc.b	nD5, $0D
000DDD3D E101                       	smpsAlterNote       $01
000DDD3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDD43 E104                       	smpsAlterNote       $04
000DDD45 E701                       	dc.b	smpsNoAttack, $01
000DDD47 E10A                       	smpsAlterNote       $0A
000DDD49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDD4D E104                       	smpsAlterNote       $04
000DDD4F E701                       	dc.b	smpsNoAttack, $01
000DDD51 E101                       	smpsAlterNote       $01
000DDD53 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDD57 E107                       	smpsAlterNote       $07
000DDD59 E701                       	dc.b	smpsNoAttack, $01
000DDD5B E10B                       	smpsAlterNote       $0B
000DDD5D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DDD61 E108                       	smpsAlterNote       $08
000DDD63 C101                       	dc.b	nE5, $01
000DDD65 E109                       	smpsAlterNote       $09
000DDD67 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000DDD6C E10B                       	smpsAlterNote       $0B
000DDD6E C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000DDD76 E108                       	smpsAlterNote       $08
000DDD78 CD06                       	dc.b	nE6, $06
000DDD7A E109                       	smpsAlterNote       $09
000DDD7C CE07                       	dc.b	nF6, $07
000DDD7E E108                       	smpsAlterNote       $08
000DDD80 CD03 8001                  	dc.b	nE6, $03, nRst, $01
000DDD84 E106                       	smpsAlterNote       $06
000DDD86 C903                       	dc.b	nC6, $03
000DDD88 E109                       	smpsAlterNote       $09
000DDD8A C403 8001                  	dc.b	nG5, $03, nRst, $01
000DDD8E E10C                       	smpsAlterNote       $0C
000DDD90 C70D                       	dc.b	nBb5, $0D
000DDD92 E106                       	smpsAlterNote       $06
000DDD94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDD98 E109                       	smpsAlterNote       $09
000DDD9A E701                       	dc.b	smpsNoAttack, $01
000DDD9C E10F                       	smpsAlterNote       $0F
000DDD9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDDA2 E109                       	smpsAlterNote       $09
000DDDA4 E701                       	dc.b	smpsNoAttack, $01
000DDDA6 E106                       	smpsAlterNote       $06
000DDDA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDDAC E10C                       	smpsAlterNote       $0C
000DDDAE E701                       	dc.b	smpsNoAttack, $01
000DDDB0 E110                       	smpsAlterNote       $10
000DDDB2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DDDB6 E10B                       	smpsAlterNote       $0B
000DDDB8 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
000DDDBC E105                       	smpsAlterNote       $05
000DDDBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDDC2 E10B                       	smpsAlterNote       $0B
000DDDC4 E701                       	dc.b	smpsNoAttack, $01
000DDDC6 E10E                       	smpsAlterNote       $0E
000DDDC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDDCC E108                       	smpsAlterNote       $08
000DDDCE E701                       	dc.b	smpsNoAttack, $01
000DDDD0 E104                       	smpsAlterNote       $04
000DDDD2 E701                       	dc.b	smpsNoAttack, $01
000DDDD4 E105                       	smpsAlterNote       $05
000DDDD6 E701                       	dc.b	smpsNoAttack, $01
000DDDD8 E10B                       	smpsAlterNote       $0B
000DDDDA E701                       	dc.b	smpsNoAttack, $01
000DDDDC E10F                       	smpsAlterNote       $0F
000DDDDE E701                       	dc.b	smpsNoAttack, $01
000DDDE0 E10B                       	smpsAlterNote       $0B
000DDDE2 E701                       	dc.b	smpsNoAttack, $01
000DDDE4 E108                       	smpsAlterNote       $08
000DDDE6 E701                       	dc.b	smpsNoAttack, $01
000DDDE8 E104                       	smpsAlterNote       $04
000DDDEA E701                       	dc.b	smpsNoAttack, $01
000DDDEC E108                       	smpsAlterNote       $08
000DDDEE E701                       	dc.b	smpsNoAttack, $01
000DDDF0 E10E                       	smpsAlterNote       $0E
000DDDF2 E701                       	dc.b	smpsNoAttack, $01
000DDDF4 E10F                       	smpsAlterNote       $0F
000DDDF6 E701                       	dc.b	smpsNoAttack, $01
000DDDF8 E10B                       	smpsAlterNote       $0B
000DDDFA E701                       	dc.b	smpsNoAttack, $01
000DDDFC E105                       	smpsAlterNote       $05
000DDDFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDE02 E108                       	smpsAlterNote       $08
000DDE04 E701                       	dc.b	smpsNoAttack, $01
000DDE06 E10E                       	smpsAlterNote       $0E
000DDE08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDE0C E108                       	smpsAlterNote       $08
000DDE0E E701                       	dc.b	smpsNoAttack, $01
000DDE10 E105                       	smpsAlterNote       $05
000DDE12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDE16 E10B                       	smpsAlterNote       $0B
000DDE18 E701                       	dc.b	smpsNoAttack, $01
000DDE1A E10F                       	smpsAlterNote       $0F
000DDE1C E701                       	dc.b	smpsNoAttack, $01
000DDE1E E10E                       	smpsAlterNote       $0E
000DDE20 E701                       	dc.b	smpsNoAttack, $01
000DDE22 E108                       	smpsAlterNote       $08
000DDE24 E701                       	dc.b	smpsNoAttack, $01
000DDE26 E104                       	smpsAlterNote       $04
000DDE28 E701                       	dc.b	smpsNoAttack, $01
000DDE2A E108                       	smpsAlterNote       $08
000DDE2C E701                       	dc.b	smpsNoAttack, $01
000DDE2E E10E                       	smpsAlterNote       $0E
000DDE30 E701                       	dc.b	smpsNoAttack, $01
000DDE32 E10F                       	smpsAlterNote       $0F
000DDE34 E701                       	dc.b	smpsNoAttack, $01
000DDE36 E10B                       	smpsAlterNote       $0B
000DDE38 E701                       	dc.b	smpsNoAttack, $01
000DDE3A E105                       	smpsAlterNote       $05
000DDE3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDE40 E108                       	smpsAlterNote       $08
000DDE42 E701                       	dc.b	smpsNoAttack, $01
000DDE44 E10E                       	smpsAlterNote       $0E
000DDE46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDE4A E108                       	smpsAlterNote       $08
000DDE4C E701                       	dc.b	smpsNoAttack, $01
000DDE4E E105                       	smpsAlterNote       $05
000DDE50 E701                       	dc.b	smpsNoAttack, $01
000DDE52 E10B                       	smpsAlterNote       $0B
000DDE54 C60D                       	dc.b	nA5, $0D
000DDE56 E108                       	smpsAlterNote       $08
000DDE58 E701                       	dc.b	smpsNoAttack, $01
000DDE5A E104                       	smpsAlterNote       $04
000DDE5C E701                       	dc.b	smpsNoAttack, $01
000DDE5E E105                       	smpsAlterNote       $05
000DDE60 E701                       	dc.b	smpsNoAttack, $01
000DDE62 E10B                       	smpsAlterNote       $0B
000DDE64 E701                       	dc.b	smpsNoAttack, $01
000DDE66 E10F                       	smpsAlterNote       $0F
000DDE68 E701                       	dc.b	smpsNoAttack, $01
000DDE6A E10B                       	smpsAlterNote       $0B
000DDE6C E701                       	dc.b	smpsNoAttack, $01
000DDE6E E108                       	smpsAlterNote       $08
000DDE70 E701                       	dc.b	smpsNoAttack, $01
000DDE72 E104                       	smpsAlterNote       $04
000DDE74 E701                       	dc.b	smpsNoAttack, $01
000DDE76 E108                       	smpsAlterNote       $08
000DDE78 E701                       	dc.b	smpsNoAttack, $01
000DDE7A E10E                       	smpsAlterNote       $0E
000DDE7C E701                       	dc.b	smpsNoAttack, $01
000DDE7E E10F                       	smpsAlterNote       $0F
000DDE80 E701                       	dc.b	smpsNoAttack, $01
000DDE84 E109                       	smpsAlterNote       $09
000DDE86 E6FF                       	smpsAlterVol        $FF
000DDE88 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
000DDE92 E108                       	smpsAlterNote       $08
000DDE94 C103 800E                  	dc.b	nE5, $03, nRst, $0E
000DDE9A E107                       	smpsAlterNote       $07
000DDE9C E601                       	smpsAlterVol        $01
000DDE9E BF03                       	dc.b	nD5, $03
000DDEA0 E108                       	smpsAlterNote       $08
000DDEA2 C103 8001                  	dc.b	nE5, $03, nRst, $01
000DDEA6 E109                       	smpsAlterNote       $09
000DDEA8 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
000DDEAE E10B                       	smpsAlterNote       $0B
000DDEB0 C606 8001                  	dc.b	nA5, $06, nRst, $01
000DDEB4 E107                       	smpsAlterNote       $07
000DDEB6 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000DDEBA E106                       	smpsAlterNote       $06
000DDEBC C90D                       	dc.b	nC6, $0D
000DDEBE E103                       	smpsAlterNote       $03
000DDEC0 E701                       	dc.b	smpsNoAttack, $01
000DDEC2 E1FF                       	smpsAlterNote       $FF
000DDEC4 E701                       	dc.b	smpsNoAttack, $01
000DDEC6 E103                       	smpsAlterNote       $03
000DDEC8 E701                       	dc.b	smpsNoAttack, $01
000DDECA E109                       	smpsAlterNote       $09
000DDECC E701                       	dc.b	smpsNoAttack, $01
000DDECE E10A                       	smpsAlterNote       $0A
000DDED0 E701                       	dc.b	smpsNoAttack, $01
000DDED2 E106                       	smpsAlterNote       $06
000DDED4 E701                       	dc.b	smpsNoAttack, $01
000DDED6 E100                       	smpsAlterNote       $00
000DDED8 E701                       	dc.b	smpsNoAttack, $01
000DDEDA E10C                       	smpsAlterNote       $0C
000DDEDC C703 8001                  	dc.b	nBb5, $03, nRst, $01
000DDEE0 E10B                       	smpsAlterNote       $0B
000DDEE2 C603                       	dc.b	nA5, $03
000DDEE4 E109                       	smpsAlterNote       $09
000DDEE6 C403 8001                  	dc.b	nG5, $03, nRst, $01
000DDEEA E10B                       	smpsAlterNote       $0B
000DDEEC C60D                       	dc.b	nA5, $0D
000DDEEE E105                       	smpsAlterNote       $05
000DDEF0 E701                       	dc.b	smpsNoAttack, $01
000DDEF2 E104                       	smpsAlterNote       $04
000DDEF4 E701                       	dc.b	smpsNoAttack, $01
000DDEF6 E108                       	smpsAlterNote       $08
000DDEF8 E701                       	dc.b	smpsNoAttack, $01
000DDEFA E10E                       	smpsAlterNote       $0E
000DDEFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDF00 E10B                       	smpsAlterNote       $0B
000DDF02 E701                       	dc.b	smpsNoAttack, $01
000DDF04 E105                       	smpsAlterNote       $05
000DDF06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDF0A E10B                       	smpsAlterNote       $0B
000DDF0C E701                       	dc.b	smpsNoAttack, $01
000DDF0E E10E                       	smpsAlterNote       $0E
000DDF10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDF14 E108                       	smpsAlterNote       $08
000DDF16 E701                       	dc.b	smpsNoAttack, $01
000DDF18 E104                       	smpsAlterNote       $04
000DDF1A E701                       	dc.b	smpsNoAttack, $01
000DDF1C E105                       	smpsAlterNote       $05
000DDF1E E701                       	dc.b	smpsNoAttack, $01
000DDF20 E10B                       	smpsAlterNote       $0B
000DDF22 E701                       	dc.b	smpsNoAttack, $01
000DDF24 E10F                       	smpsAlterNote       $0F
000DDF26 E701                       	dc.b	smpsNoAttack, $01
000DDF28 E10B                       	smpsAlterNote       $0B
000DDF2A E701                       	dc.b	smpsNoAttack, $01
000DDF2C E108                       	smpsAlterNote       $08
000DDF2E E701                       	dc.b	smpsNoAttack, $01
000DDF30 E104                       	smpsAlterNote       $04
000DDF32 E701                       	dc.b	smpsNoAttack, $01
000DDF34 E108                       	smpsAlterNote       $08
000DDF36 E701                       	dc.b	smpsNoAttack, $01
000DDF38 E10E                       	smpsAlterNote       $0E
000DDF3A E701                       	dc.b	smpsNoAttack, $01
000DDF3C E10F                       	smpsAlterNote       $0F
000DDF3E E701                       	dc.b	smpsNoAttack, $01
000DDF40 E10B                       	smpsAlterNote       $0B
000DDF42 E701                       	dc.b	smpsNoAttack, $01
000DDF44 E105                       	smpsAlterNote       $05
000DDF46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDF4A E108                       	smpsAlterNote       $08
000DDF4C E701                       	dc.b	smpsNoAttack, $01
000DDF4E E10E                       	smpsAlterNote       $0E
000DDF50 E701                       	dc.b	smpsNoAttack, $01
000DDF52 E10F                       	smpsAlterNote       $0F
000DDF54 800F                       	dc.b	nRst, $0F
000DDF56 E107                       	smpsAlterNote       $07
000DDF58 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000DDF5C E108                       	smpsAlterNote       $08
000DDF5E C103                       	dc.b	nE5, $03
000DDF60 E109                       	smpsAlterNote       $09
000DDF62 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000DDF68 E10B                       	smpsAlterNote       $0B
000DDF6A C606 8001                  	dc.b	nA5, $06, nRst, $01
000DDF6E E107                       	smpsAlterNote       $07
000DDF70 BF03                       	dc.b	nD5, $03
000DDF72 E106                       	smpsAlterNote       $06
000DDF74 C90E                       	dc.b	nC6, $0E
000DDF76 E107                       	smpsAlterNote       $07
000DDF78 CB03 8001                  	dc.b	nD6, $03, nRst, $01
000DDF7C E10C                       	smpsAlterNote       $0C
000DDF7E C704                       	dc.b	nBb5, $04
000DDF80 E10B                       	smpsAlterNote       $0B
000DDF82 C604 8001                  	dc.b	nA5, $04, nRst, $01
000DDF86 E109                       	smpsAlterNote       $09
000DDF88 C404                       	dc.b	nG5, $04
000DDF8A E10B                       	smpsAlterNote       $0B
000DDF8C C60D                       	dc.b	nA5, $0D
000DDF8E E108                       	smpsAlterNote       $08
000DDF90 E701                       	dc.b	smpsNoAttack, $01
000DDF92 E105                       	smpsAlterNote       $05
000DDF94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDF98 E10B                       	smpsAlterNote       $0B
000DDF9A E701                       	dc.b	smpsNoAttack, $01
000DDF9C E10F                       	smpsAlterNote       $0F
000DDF9E E701                       	dc.b	smpsNoAttack, $01
000DDFA0 E10E                       	smpsAlterNote       $0E
000DDFA2 E701                       	dc.b	smpsNoAttack, $01
000DDFA4 E108                       	smpsAlterNote       $08
000DDFA6 E701                       	dc.b	smpsNoAttack, $01
000DDFA8 E104                       	smpsAlterNote       $04
000DDFAA E701                       	dc.b	smpsNoAttack, $01
000DDFAC E108                       	smpsAlterNote       $08
000DDFAE E701                       	dc.b	smpsNoAttack, $01
000DDFB0 E10B                       	smpsAlterNote       $0B
000DDFB2 E701                       	dc.b	smpsNoAttack, $01
000DDFB4 E10F                       	smpsAlterNote       $0F
000DDFB6 E701                       	dc.b	smpsNoAttack, $01
000DDFB8 E10B                       	smpsAlterNote       $0B
000DDFBA E701                       	dc.b	smpsNoAttack, $01
000DDFBC E105                       	smpsAlterNote       $05
000DDFBE E701                       	dc.b	smpsNoAttack, $01
000DDFC0 E104                       	smpsAlterNote       $04
000DDFC2 E701                       	dc.b	smpsNoAttack, $01
000DDFC4 E108                       	smpsAlterNote       $08
000DDFC6 E701                       	dc.b	smpsNoAttack, $01
000DDFC8 E10E                       	smpsAlterNote       $0E
000DDFCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDFCE E10B                       	smpsAlterNote       $0B
000DDFD0 E701                       	dc.b	smpsNoAttack, $01
000DDFD2 E105                       	smpsAlterNote       $05
000DDFD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDFD8 E10B                       	smpsAlterNote       $0B
000DDFDA E701                       	dc.b	smpsNoAttack, $01
000DDFDC E10E                       	smpsAlterNote       $0E
000DDFDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDFE2 E108                       	smpsAlterNote       $08
000DDFE4 E701                       	dc.b	smpsNoAttack, $01
000DDFE6 E105                       	smpsAlterNote       $05
000DDFE8 8001                       	dc.b	nRst, $01
000DDFEA E109                       	smpsAlterNote       $09
000DDFEC C402                       	dc.b	nG5, $02
000DDFEE E10B                       	smpsAlterNote       $0B
000DDFF0 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
000DDFF9 E109                       	smpsAlterNote       $09
000DDFFB C404                       	dc.b	nG5, $04
000DDFFD E10B                       	smpsAlterNote       $0B
000DDFFF C604 8001                  	dc.b	nA5, $04, nRst, $01
000DE003 E107                       	smpsAlterNote       $07
000DE005 BF0D                       	dc.b	nD5, $0D
000DE007 E101                       	smpsAlterNote       $01
000DE009 E701                       	dc.b	smpsNoAttack, $01
000DE00B E100                       	smpsAlterNote       $00
000DE00D E701                       	dc.b	smpsNoAttack, $01
000DE00F E104                       	smpsAlterNote       $04
000DE011 E701                       	dc.b	smpsNoAttack, $01
000DE013 E10A                       	smpsAlterNote       $0A
000DE015 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE019 E107                       	smpsAlterNote       $07
000DE01B E701                       	dc.b	smpsNoAttack, $01
000DE01D E101                       	smpsAlterNote       $01
000DE01F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE023 E107                       	smpsAlterNote       $07
000DE025 E701                       	dc.b	smpsNoAttack, $01
000DE027 E10A                       	smpsAlterNote       $0A
000DE029 E701                       	dc.b	smpsNoAttack, $01
000DE02B E10B                       	smpsAlterNote       $0B
000DE02D 8001                       	dc.b	nRst, $01
000DE02F E108                       	smpsAlterNote       $08
000DE031 C101                       	dc.b	nE5, $01
000DE033 E109                       	smpsAlterNote       $09
000DE035 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000DE03A E10B                       	smpsAlterNote       $0B
000DE03C C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000DE044 E108                       	smpsAlterNote       $08
000DE046 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000DE04A E109                       	smpsAlterNote       $09
000DE04C CE06 8001                  	dc.b	nF6, $06, nRst, $01
000DE050 E108                       	smpsAlterNote       $08
000DE052 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000DE056 E106                       	smpsAlterNote       $06
000DE058 C903                       	dc.b	nC6, $03
000DE05A E109                       	smpsAlterNote       $09
000DE05C C403 8001                  	dc.b	nG5, $03, nRst, $01
000DE060 E10C                       	smpsAlterNote       $0C
000DE062 C70D                       	dc.b	nBb5, $0D
000DE064 E109                       	smpsAlterNote       $09
000DE066 E701                       	dc.b	smpsNoAttack, $01
000DE068 E105                       	smpsAlterNote       $05
000DE06A E701                       	dc.b	smpsNoAttack, $01
000DE06C E109                       	smpsAlterNote       $09
000DE06E E701                       	dc.b	smpsNoAttack, $01
000DE070 E10F                       	smpsAlterNote       $0F
000DE072 E701                       	dc.b	smpsNoAttack, $01
000DE074 E110                       	smpsAlterNote       $10
000DE076 E701                       	dc.b	smpsNoAttack, $01
000DE078 E10C                       	smpsAlterNote       $0C
000DE07A E701                       	dc.b	smpsNoAttack, $01
000DE07C E106                       	smpsAlterNote       $06
000DE07E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE082 E109                       	smpsAlterNote       $09
000DE084 E701                       	dc.b	smpsNoAttack, $01
000DE086 E10F                       	smpsAlterNote       $0F
000DE088 E701                       	dc.b	smpsNoAttack, $01
000DE08A E110                       	smpsAlterNote       $10
000DE08C 8001                       	dc.b	nRst, $01
000DE08E E10B                       	smpsAlterNote       $0B
000DE090 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
000DE096 E105                       	smpsAlterNote       $05
000DE098 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE09C E108                       	smpsAlterNote       $08
000DE09E E701                       	dc.b	smpsNoAttack, $01
000DE0A0 E10E                       	smpsAlterNote       $0E
000DE0A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE0A6 E108                       	smpsAlterNote       $08
000DE0A8 E701                       	dc.b	smpsNoAttack, $01
000DE0AA E105                       	smpsAlterNote       $05
000DE0AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE0B0 E10B                       	smpsAlterNote       $0B
000DE0B2 E701                       	dc.b	smpsNoAttack, $01
000DE0B4 E10F                       	smpsAlterNote       $0F
000DE0B6 E701                       	dc.b	smpsNoAttack, $01
000DE0B8 E10E                       	smpsAlterNote       $0E
000DE0BA E701                       	dc.b	smpsNoAttack, $01
000DE0BC E108                       	smpsAlterNote       $08
000DE0BE E701                       	dc.b	smpsNoAttack, $01
000DE0C0 E104                       	smpsAlterNote       $04
000DE0C2 E701                       	dc.b	smpsNoAttack, $01
000DE0C4 E108                       	smpsAlterNote       $08
000DE0C6 E701                       	dc.b	smpsNoAttack, $01
000DE0C8 E10B                       	smpsAlterNote       $0B
000DE0CA E701                       	dc.b	smpsNoAttack, $01
000DE0CC E10F                       	smpsAlterNote       $0F
000DE0CE E701                       	dc.b	smpsNoAttack, $01
000DE0D0 E10B                       	smpsAlterNote       $0B
000DE0D2 E701                       	dc.b	smpsNoAttack, $01
000DE0D4 E105                       	smpsAlterNote       $05
000DE0D6 E701                       	dc.b	smpsNoAttack, $01
000DE0D8 E104                       	smpsAlterNote       $04
000DE0DA E701                       	dc.b	smpsNoAttack, $01
000DE0DC E108                       	smpsAlterNote       $08
000DE0DE E701                       	dc.b	smpsNoAttack, $01
000DE0E0 E10E                       	smpsAlterNote       $0E
000DE0E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE0E6 E10B                       	smpsAlterNote       $0B
000DE0E8 E701                       	dc.b	smpsNoAttack, $01
000DE0EA E105                       	smpsAlterNote       $05
000DE0EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE0F0 E10B                       	smpsAlterNote       $0B
000DE0F2 E701                       	dc.b	smpsNoAttack, $01
000DE0F4 E10E                       	smpsAlterNote       $0E
000DE0F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE0FA E108                       	smpsAlterNote       $08
000DE0FC E701                       	dc.b	smpsNoAttack, $01
000DE0FE E104                       	smpsAlterNote       $04
000DE100 E701                       	dc.b	smpsNoAttack, $01
000DE102 E105                       	smpsAlterNote       $05
000DE104 E701                       	dc.b	smpsNoAttack, $01
000DE106 E10B                       	smpsAlterNote       $0B
000DE108 E701                       	dc.b	smpsNoAttack, $01
000DE10A E10F                       	smpsAlterNote       $0F
000DE10C E701                       	dc.b	smpsNoAttack, $01
000DE10E E10B                       	smpsAlterNote       $0B
000DE110 E701                       	dc.b	smpsNoAttack, $01
000DE112 E108                       	smpsAlterNote       $08
000DE114 E701                       	dc.b	smpsNoAttack, $01
000DE116 E104                       	smpsAlterNote       $04
000DE118 E701                       	dc.b	smpsNoAttack, $01
000DE11A E108                       	smpsAlterNote       $08
000DE11C E701                       	dc.b	smpsNoAttack, $01
000DE11E E10E                       	smpsAlterNote       $0E
000DE120 E701                       	dc.b	smpsNoAttack, $01
000DE122 E10F                       	smpsAlterNote       $0F
000DE124 E701                       	dc.b	smpsNoAttack, $01
000DE126 E10B                       	smpsAlterNote       $0B
000DE128 E701                       	dc.b	smpsNoAttack, $01
000DE12A E105                       	smpsAlterNote       $05
000DE12C E701                       	dc.b	smpsNoAttack, $01
000DE12E E10B                       	smpsAlterNote       $0B
000DE130 C60E                       	dc.b	nA5, $0E
000DE132 E105                       	smpsAlterNote       $05
000DE134 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE138 E10B                       	smpsAlterNote       $0B
000DE13A E701                       	dc.b	smpsNoAttack, $01
000DE13C E10E                       	smpsAlterNote       $0E
000DE13E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE142 E108                       	smpsAlterNote       $08
000DE144 E701                       	dc.b	smpsNoAttack, $01
000DE146 E104                       	smpsAlterNote       $04
000DE148 E701                       	dc.b	smpsNoAttack, $01
000DE14A E105                       	smpsAlterNote       $05
000DE14C E701                       	dc.b	smpsNoAttack, $01
000DE14E E10B                       	smpsAlterNote       $0B
000DE150 E701                       	dc.b	smpsNoAttack, $01
000DE152 E10F                       	smpsAlterNote       $0F
000DE154 E701                       	dc.b	smpsNoAttack, $01
000DE156 E10B                       	smpsAlterNote       $0B
000DE158 E701                       	dc.b	smpsNoAttack, $01
000DE15A E108                       	smpsAlterNote       $08
000DE15C E701                       	dc.b	smpsNoAttack, $01
000DE15E E104                       	smpsAlterNote       $04
000DE160 E701                       	dc.b	smpsNoAttack, $01
000DE162 E108                       	smpsAlterNote       $08
000DE164 E701                       	dc.b	smpsNoAttack, $01
000DE166 E10E                       	smpsAlterNote       $0E
000DE168 E701                       	dc.b	smpsNoAttack, $01
000DE16A E10F                       	smpsAlterNote       $0F
000DE16C E701                       	dc.b	smpsNoAttack, $01
000DE16E E10B                       	smpsAlterNote       $0B
000DE170 E701                       	dc.b	smpsNoAttack, $01
000DE172 E105                       	smpsAlterNote       $05
000DE174 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE178 E108                       	smpsAlterNote       $08
000DE17A E701                       	dc.b	smpsNoAttack, $01
000DE17C E10E                       	smpsAlterNote       $0E
000DE17E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE182 E108                       	smpsAlterNote       $08
000DE184 E701                       	dc.b	smpsNoAttack, $01
000DE186 E105                       	smpsAlterNote       $05
000DE188 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE18C E10B                       	smpsAlterNote       $0B
000DE18E E701                       	dc.b	smpsNoAttack, $01
000DE190 E10F                       	smpsAlterNote       $0F
000DE192 E701                       	dc.b	smpsNoAttack, $01
000DE194 E10E                       	smpsAlterNote       $0E
000DE196 E701                       	dc.b	smpsNoAttack, $01
000DE198 E108                       	smpsAlterNote       $08
000DE19A E701                       	dc.b	smpsNoAttack, $01
000DE19C E104                       	smpsAlterNote       $04
000DE19E E701                       	dc.b	smpsNoAttack, $01
000DE1A0 E108                       	smpsAlterNote       $08
000DE1A2 E701                       	dc.b	smpsNoAttack, $01
000DE1A4 E10E                       	smpsAlterNote       $0E
000DE1A6 E701                       	dc.b	smpsNoAttack, $01
000DE1A8 E10F                       	smpsAlterNote       $0F
000DE1AA E701                       	dc.b	smpsNoAttack, $01
000DE1AC E10B                       	smpsAlterNote       $0B
000DE1AE E701                       	dc.b	smpsNoAttack, $01
000DE1B0 E105                       	smpsAlterNote       $05
000DE1B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE1B6 E108                       	smpsAlterNote       $08
000DE1B8 E701                       	dc.b	smpsNoAttack, $01
000DE1BA E10E                       	smpsAlterNote       $0E
000DE1BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE1C0 E108                       	smpsAlterNote       $08
000DE1C2 E701                       	dc.b	smpsNoAttack, $01
000DE1C4 E105                       	smpsAlterNote       $05
000DE1C6 E701                       	dc.b	smpsNoAttack, $01
000DE1CA E10B                       	smpsAlterNote       $0B
000DE1CC E6FD                       	smpsAlterVol        $FD
000DE1CE C604 8001                  	dc.b	nA5, $04, nRst, $01
000DE1D2 E109                       	smpsAlterNote       $09
000DE1D4 C404                       	dc.b	nG5, $04
000DE1D6 E10B                       	smpsAlterNote       $0B
000DE1D8 C604 8001                  	dc.b	nA5, $04, nRst, $01
000DE1DC E107                       	smpsAlterNote       $07
000DE1DE BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000DE1E4 E10B                       	smpsAlterNote       $0B
000DE1E6 C604                       	dc.b	nA5, $04
000DE1E8 E109                       	smpsAlterNote       $09
000DE1EA C404 8001                  	dc.b	nG5, $04, nRst, $01
000DE1EE E10B                       	smpsAlterNote       $0B
000DE1F0 C604                       	dc.b	nA5, $04
000DE1F2 E108                       	smpsAlterNote       $08
000DE1F4 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
000DE1FC E106                       	smpsAlterNote       $06
000DE1FE C904 8001                  	dc.b	nC6, $04, nRst, $01
000DE202 E10C                       	smpsAlterNote       $0C
000DE204 C704                       	dc.b	nBb5, $04
000DE206 E10B                       	smpsAlterNote       $0B
000DE208 C604 8001                  	dc.b	nA5, $04, nRst, $01
000DE20C E109                       	smpsAlterNote       $09
000DE20E C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000DE218 E10B                       	smpsAlterNote       $0B
000DE21A C60D                       	dc.b	nA5, $0D
000DE21C E108                       	smpsAlterNote       $08
000DE21E E701                       	dc.b	smpsNoAttack, $01
000DE220 E104                       	smpsAlterNote       $04
000DE222 E701                       	dc.b	smpsNoAttack, $01
000DE224 E108                       	smpsAlterNote       $08
000DE226 E701                       	dc.b	smpsNoAttack, $01
000DE228 E10E                       	smpsAlterNote       $0E
000DE22A E701                       	dc.b	smpsNoAttack, $01
000DE22C E10F                       	smpsAlterNote       $0F
000DE22E E701                       	dc.b	smpsNoAttack, $01
000DE230 E10B                       	smpsAlterNote       $0B
000DE232 E701                       	dc.b	smpsNoAttack, $01
000DE234 E105                       	smpsAlterNote       $05
000DE236 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE23A E108                       	smpsAlterNote       $08
000DE23C E701                       	dc.b	smpsNoAttack, $01
000DE23E E10E                       	smpsAlterNote       $0E
000DE240 E701                       	dc.b	smpsNoAttack, $01
000DE242 E10F                       	smpsAlterNote       $0F
000DE244 8001                       	dc.b	nRst, $01
000DE246 E109                       	smpsAlterNote       $09
000DE248 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000DE24E E108                       	smpsAlterNote       $08
000DE250 C10D                       	dc.b	nE5, $0D
000DE252 E102                       	smpsAlterNote       $02
000DE254 E701                       	dc.b	smpsNoAttack, $01
000DE256 E101                       	smpsAlterNote       $01
000DE258 E701                       	dc.b	smpsNoAttack, $01
000DE25A E105                       	smpsAlterNote       $05
000DE25C E701                       	dc.b	smpsNoAttack, $01
000DE25E E10B                       	smpsAlterNote       $0B
000DE260 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE264 E108                       	smpsAlterNote       $08
000DE266 E701                       	dc.b	smpsNoAttack, $01
000DE268 E102                       	smpsAlterNote       $02
000DE26A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE26E E108                       	smpsAlterNote       $08
000DE270 E701                       	dc.b	smpsNoAttack, $01
000DE272 E10B                       	smpsAlterNote       $0B
000DE274 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE278 E105                       	smpsAlterNote       $05
000DE27A E701                       	dc.b	smpsNoAttack, $01
000DE27C E101                       	smpsAlterNote       $01
000DE27E E701                       	dc.b	smpsNoAttack, $01
000DE280 E102                       	smpsAlterNote       $02
000DE282 E701                       	dc.b	smpsNoAttack, $01
000DE284 E108                       	smpsAlterNote       $08
000DE286 E701                       	dc.b	smpsNoAttack, $01
000DE288 E10C                       	smpsAlterNote       $0C
000DE28A E701                       	dc.b	smpsNoAttack, $01
000DE28C E108                       	smpsAlterNote       $08
000DE28E E701                       	dc.b	smpsNoAttack, $01
000DE290 E105                       	smpsAlterNote       $05
000DE292 E701                       	dc.b	smpsNoAttack, $01
000DE294 E101                       	smpsAlterNote       $01
000DE296 E701                       	dc.b	smpsNoAttack, $01
000DE298 E105                       	smpsAlterNote       $05
000DE29A E701                       	dc.b	smpsNoAttack, $01
000DE29C E10B                       	smpsAlterNote       $0B
000DE29E E701                       	dc.b	smpsNoAttack, $01
000DE2A0 E10C                       	smpsAlterNote       $0C
000DE2A2 E701                       	dc.b	smpsNoAttack, $01
000DE2A4 E108                       	smpsAlterNote       $08
000DE2A6 E701                       	dc.b	smpsNoAttack, $01
000DE2A8 E102                       	smpsAlterNote       $02
000DE2AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE2AE E105                       	smpsAlterNote       $05
000DE2B0 E701                       	dc.b	smpsNoAttack, $01
000DE2B2 E10B                       	smpsAlterNote       $0B
000DE2B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE2B8 E105                       	smpsAlterNote       $05
000DE2BA E701                       	dc.b	smpsNoAttack, $01
000DE2BC E102                       	smpsAlterNote       $02
000DE2BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE2C2 E108                       	smpsAlterNote       $08
000DE2C4 E701                       	dc.b	smpsNoAttack, $01
000DE2C6 E10C                       	smpsAlterNote       $0C
000DE2C8 E701                       	dc.b	smpsNoAttack, $01
000DE2CA E10B                       	smpsAlterNote       $0B
000DE2CC E701                       	dc.b	smpsNoAttack, $01
000DE2CE E105                       	smpsAlterNote       $05
000DE2D0 E701                       	dc.b	smpsNoAttack, $01
000DE2D2 E101                       	smpsAlterNote       $01
000DE2D4 E701                       	dc.b	smpsNoAttack, $01
000DE2D6 E105                       	smpsAlterNote       $05
000DE2D8 E701                       	dc.b	smpsNoAttack, $01
000DE2DA E108                       	smpsAlterNote       $08
000DE2DC E701                       	dc.b	smpsNoAttack, $01
000DE2DE E10C                       	smpsAlterNote       $0C
000DE2E0 E701                       	dc.b	smpsNoAttack, $01
000DE2E2 E108                       	smpsAlterNote       $08
000DE2E4 E701                       	dc.b	smpsNoAttack, $01
000DE2E6 E102                       	smpsAlterNote       $02
000DE2E8 E701                       	dc.b	smpsNoAttack, $01
000DE2EA E101                       	smpsAlterNote       $01
000DE2EC E701                       	dc.b	smpsNoAttack, $01
000DE2EE E105                       	smpsAlterNote       $05
000DE2F0 E701                       	dc.b	smpsNoAttack, $01
000DE2F2 E10B                       	smpsAlterNote       $0B
000DE2F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE2F8 E108                       	smpsAlterNote       $08
000DE2FA E701                       	dc.b	smpsNoAttack, $01
000DE2FC E102                       	smpsAlterNote       $02
000DE2FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE302 E108                       	smpsAlterNote       $08
000DE304 E701                       	dc.b	smpsNoAttack, $01
000DE306 E10B                       	smpsAlterNote       $0B
000DE308 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE30C E105                       	smpsAlterNote       $05
000DE30E E701                       	dc.b	smpsNoAttack, $01
000DE310 E101                       	smpsAlterNote       $01
000DE312 E701                       	dc.b	smpsNoAttack, $01
000DE314 E102                       	smpsAlterNote       $02
000DE316 E701                       	dc.b	smpsNoAttack, $01
000DE318 E108                       	smpsAlterNote       $08
000DE31A E701                       	dc.b	smpsNoAttack, $01
000DE31C E10C                       	smpsAlterNote       $0C
000DE31E E701                       	dc.b	smpsNoAttack, $01
000DE320 E108                       	smpsAlterNote       $08
000DE322 E701                       	dc.b	smpsNoAttack, $01
000DE324 E105                       	smpsAlterNote       $05
000DE326 E701                       	dc.b	smpsNoAttack, $01
000DE328 E101                       	smpsAlterNote       $01
000DE32A E701                       	dc.b	smpsNoAttack, $01
000DE32C E105                       	smpsAlterNote       $05
000DE32E E701                       	dc.b	smpsNoAttack, $01
000DE330 E10B                       	smpsAlterNote       $0B
000DE332 E701                       	dc.b	smpsNoAttack, $01
000DE334 E10C                       	smpsAlterNote       $0C
000DE336 E701                       	dc.b	smpsNoAttack, $01
000DE338 E108                       	smpsAlterNote       $08
000DE33A E701                       	dc.b	smpsNoAttack, $01
000DE33C E102                       	smpsAlterNote       $02
000DE33E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE342 E105                       	smpsAlterNote       $05
000DE344 E701                       	dc.b	smpsNoAttack, $01
000DE346 E10B                       	smpsAlterNote       $0B
000DE348 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE34C E105                       	smpsAlterNote       $05
000DE34E E701                       	dc.b	smpsNoAttack, $01
000DE350 E101                       	smpsAlterNote       $01
000DE352 E701                       	dc.b	smpsNoAttack, $01
000DE354 E102                       	smpsAlterNote       $02
000DE356 E701                       	dc.b	smpsNoAttack, $01
000DE358 E108                       	smpsAlterNote       $08
000DE35A E701                       	dc.b	smpsNoAttack, $01
000DE35C E10C                       	smpsAlterNote       $0C
000DE35E E701                       	dc.b	smpsNoAttack, $01
000DE360 E108                       	smpsAlterNote       $08
000DE362 E701                       	dc.b	smpsNoAttack, $01
000DE364 E105                       	smpsAlterNote       $05
000DE366 E701                       	dc.b	smpsNoAttack, $01
000DE368 E101                       	smpsAlterNote       $01
000DE36A E701                       	dc.b	smpsNoAttack, $01
000DE36C E105                       	smpsAlterNote       $05
000DE36E E701                       	dc.b	smpsNoAttack, $01
000DE370 E10B                       	smpsAlterNote       $0B
000DE372 E701                       	dc.b	smpsNoAttack, $01
000DE374 E10C                       	smpsAlterNote       $0C
000DE376 E701                       	dc.b	smpsNoAttack, $01
000DE378 E108                       	smpsAlterNote       $08
000DE37A E701                       	dc.b	smpsNoAttack, $01
000DE37C E102                       	smpsAlterNote       $02
000DE37E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE382 E105                       	smpsAlterNote       $05
000DE384 E701                       	dc.b	smpsNoAttack, $01
000DE386 E10B                       	smpsAlterNote       $0B
000DE388 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE38C E105                       	smpsAlterNote       $05
000DE38E E701                       	dc.b	smpsNoAttack, $01
000DE390 E102                       	smpsAlterNote       $02
000DE392 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE396 E108                       	smpsAlterNote       $08
000DE398 E701                       	dc.b	smpsNoAttack, $01
000DE39A E10C                       	smpsAlterNote       $0C
000DE39C E701                       	dc.b	smpsNoAttack, $01
000DE39E E10B                       	smpsAlterNote       $0B
000DE3A0 E701                       	dc.b	smpsNoAttack, $01
000DE3A2 E105                       	smpsAlterNote       $05
000DE3A4 E701                       	dc.b	smpsNoAttack, $01
000DE3A6 E101                       	smpsAlterNote       $01
000DE3A8 E701                       	dc.b	smpsNoAttack, $01
000DE3AA E105                       	smpsAlterNote       $05
000DE3AC E701                       	dc.b	smpsNoAttack, $01
000DE3AE E108                       	smpsAlterNote       $08
000DE3B0 E701                       	dc.b	smpsNoAttack, $01
000DE3B2 E10C                       	smpsAlterNote       $0C
000DE3B4 E701                       	dc.b	smpsNoAttack, $01
000DE3B8 E10B                       	smpsAlterNote       $0B
000DE3BA C604 8001                  	dc.b	nA5, $04, nRst, $01
000DE3BE E109                       	smpsAlterNote       $09
000DE3C0 C404                       	dc.b	nG5, $04
000DE3C2 E10B                       	smpsAlterNote       $0B
000DE3C4 C604 8001                  	dc.b	nA5, $04, nRst, $01
000DE3C8 E107                       	smpsAlterNote       $07
000DE3CA BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000DE3D0 E10B                       	smpsAlterNote       $0B
000DE3D2 C604                       	dc.b	nA5, $04
000DE3D4 E109                       	smpsAlterNote       $09
000DE3D6 C404 8001                  	dc.b	nG5, $04, nRst, $01
000DE3DA E10B                       	smpsAlterNote       $0B
000DE3DC C604                       	dc.b	nA5, $04
000DE3DE E108                       	smpsAlterNote       $08
000DE3E0 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
000DE3E6 E106                       	smpsAlterNote       $06
000DE3E8 C904 8001                  	dc.b	nC6, $04, nRst, $01
000DE3EC E10C                       	smpsAlterNote       $0C
000DE3EE C704                       	dc.b	nBb5, $04
000DE3F0 E10B                       	smpsAlterNote       $0B
000DE3F2 C604 8001                  	dc.b	nA5, $04, nRst, $01
000DE3F6 E109                       	smpsAlterNote       $09
000DE3F8 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000DE402 E10B                       	smpsAlterNote       $0B
000DE404 C60D                       	dc.b	nA5, $0D
000DE406 E108                       	smpsAlterNote       $08
000DE408 E701                       	dc.b	smpsNoAttack, $01
000DE40A E104                       	smpsAlterNote       $04
000DE40C E701                       	dc.b	smpsNoAttack, $01
000DE40E E108                       	smpsAlterNote       $08
000DE410 E701                       	dc.b	smpsNoAttack, $01
000DE412 E10B                       	smpsAlterNote       $0B
000DE414 E701                       	dc.b	smpsNoAttack, $01
000DE416 E10F                       	smpsAlterNote       $0F
000DE418 E701                       	dc.b	smpsNoAttack, $01
000DE41A E10B                       	smpsAlterNote       $0B
000DE41C E701                       	dc.b	smpsNoAttack, $01
000DE41E E105                       	smpsAlterNote       $05
000DE420 E701                       	dc.b	smpsNoAttack, $01
000DE422 E104                       	smpsAlterNote       $04
000DE424 E701                       	dc.b	smpsNoAttack, $01
000DE426 E108                       	smpsAlterNote       $08
000DE428 E701                       	dc.b	smpsNoAttack, $01
000DE42A E10E                       	smpsAlterNote       $0E
000DE42C E701                       	dc.b	smpsNoAttack, $01
000DE42E E10F                       	smpsAlterNote       $0F
000DE430 8001                       	dc.b	nRst, $01
000DE432 E109                       	smpsAlterNote       $09
000DE434 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000DE43A E108                       	smpsAlterNote       $08
000DE43C C10D                       	dc.b	nE5, $0D
000DE43E E105                       	smpsAlterNote       $05
000DE440 E701                       	dc.b	smpsNoAttack, $01
000DE442 E101                       	smpsAlterNote       $01
000DE444 E701                       	dc.b	smpsNoAttack, $01
000DE446 E105                       	smpsAlterNote       $05
000DE448 E701                       	dc.b	smpsNoAttack, $01
000DE44A E10B                       	smpsAlterNote       $0B
000DE44C E701                       	dc.b	smpsNoAttack, $01
000DE44E E10C                       	smpsAlterNote       $0C
000DE450 E701                       	dc.b	smpsNoAttack, $01
000DE452 E108                       	smpsAlterNote       $08
000DE454 E701                       	dc.b	smpsNoAttack, $01
000DE456 E102                       	smpsAlterNote       $02
000DE458 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE45C E105                       	smpsAlterNote       $05
000DE45E E701                       	dc.b	smpsNoAttack, $01
000DE460 E10B                       	smpsAlterNote       $0B
000DE462 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE466 E105                       	smpsAlterNote       $05
000DE468 E701                       	dc.b	smpsNoAttack, $01
000DE46A E102                       	smpsAlterNote       $02
000DE46C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE470 E108                       	smpsAlterNote       $08
000DE472 E701                       	dc.b	smpsNoAttack, $01
000DE474 E10C                       	smpsAlterNote       $0C
000DE476 E701                       	dc.b	smpsNoAttack, $01
000DE478 E10B                       	smpsAlterNote       $0B
000DE47A E701                       	dc.b	smpsNoAttack, $01
000DE47C E105                       	smpsAlterNote       $05
000DE47E E701                       	dc.b	smpsNoAttack, $01
000DE480 E101                       	smpsAlterNote       $01
000DE482 E701                       	dc.b	smpsNoAttack, $01
000DE484 E105                       	smpsAlterNote       $05
000DE486 E701                       	dc.b	smpsNoAttack, $01
000DE488 E108                       	smpsAlterNote       $08
000DE48A E701                       	dc.b	smpsNoAttack, $01
000DE48C E10C                       	smpsAlterNote       $0C
000DE48E E701                       	dc.b	smpsNoAttack, $01
000DE490 E108                       	smpsAlterNote       $08
000DE492 E701                       	dc.b	smpsNoAttack, $01
000DE494 E102                       	smpsAlterNote       $02
000DE496 E701                       	dc.b	smpsNoAttack, $01
000DE498 E101                       	smpsAlterNote       $01
000DE49A E701                       	dc.b	smpsNoAttack, $01
000DE49C E105                       	smpsAlterNote       $05
000DE49E E701                       	dc.b	smpsNoAttack, $01
000DE4A0 E10B                       	smpsAlterNote       $0B
000DE4A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE4A6 E108                       	smpsAlterNote       $08
000DE4A8 E701                       	dc.b	smpsNoAttack, $01
000DE4AA E102                       	smpsAlterNote       $02
000DE4AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE4B0 E108                       	smpsAlterNote       $08
000DE4B2 E701                       	dc.b	smpsNoAttack, $01
000DE4B4 E10B                       	smpsAlterNote       $0B
000DE4B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE4BA E105                       	smpsAlterNote       $05
000DE4BC E701                       	dc.b	smpsNoAttack, $01
000DE4BE E101                       	smpsAlterNote       $01
000DE4C0 E701                       	dc.b	smpsNoAttack, $01
000DE4C2 E102                       	smpsAlterNote       $02
000DE4C4 E701                       	dc.b	smpsNoAttack, $01
000DE4C6 E108                       	smpsAlterNote       $08
000DE4C8 E701                       	dc.b	smpsNoAttack, $01
000DE4CA E10C                       	smpsAlterNote       $0C
000DE4CC E701                       	dc.b	smpsNoAttack, $01
000DE4CE E108                       	smpsAlterNote       $08
000DE4D0 E701                       	dc.b	smpsNoAttack, $01
000DE4D2 E105                       	smpsAlterNote       $05
000DE4D4 E701                       	dc.b	smpsNoAttack, $01
000DE4D6 E101                       	smpsAlterNote       $01
000DE4D8 E701                       	dc.b	smpsNoAttack, $01
000DE4DA E105                       	smpsAlterNote       $05
000DE4DC E701                       	dc.b	smpsNoAttack, $01
000DE4DE E10B                       	smpsAlterNote       $0B
000DE4E0 E701                       	dc.b	smpsNoAttack, $01
000DE4E2 E10C                       	smpsAlterNote       $0C
000DE4E4 E701                       	dc.b	smpsNoAttack, $01
000DE4E6 E108                       	smpsAlterNote       $08
000DE4E8 E701                       	dc.b	smpsNoAttack, $01
000DE4EA E102                       	smpsAlterNote       $02
000DE4EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE4F0 E108                       	smpsAlterNote       $08
000DE4F2 E701                       	dc.b	smpsNoAttack, $01
000DE4F4 E10B                       	smpsAlterNote       $0B
000DE4F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE4FA E105                       	smpsAlterNote       $05
000DE4FC E701                       	dc.b	smpsNoAttack, $01
000DE4FE E101                       	smpsAlterNote       $01
000DE500 E701                       	dc.b	smpsNoAttack, $01
000DE502 E102                       	smpsAlterNote       $02
000DE504 E701                       	dc.b	smpsNoAttack, $01
000DE506 E108                       	smpsAlterNote       $08
000DE508 E701                       	dc.b	smpsNoAttack, $01
000DE50A E10C                       	smpsAlterNote       $0C
000DE50C E701                       	dc.b	smpsNoAttack, $01
000DE50E E108                       	smpsAlterNote       $08
000DE510 E701                       	dc.b	smpsNoAttack, $01
000DE512 E105                       	smpsAlterNote       $05
000DE514 E701                       	dc.b	smpsNoAttack, $01
000DE516 E101                       	smpsAlterNote       $01
000DE518 E701                       	dc.b	smpsNoAttack, $01
000DE51A E105                       	smpsAlterNote       $05
000DE51C E701                       	dc.b	smpsNoAttack, $01
000DE51E E10B                       	smpsAlterNote       $0B
000DE520 E701                       	dc.b	smpsNoAttack, $01
000DE522 E10C                       	smpsAlterNote       $0C
000DE524 E701                       	dc.b	smpsNoAttack, $01
000DE526 E108                       	smpsAlterNote       $08
000DE528 E701                       	dc.b	smpsNoAttack, $01
000DE52A E102                       	smpsAlterNote       $02
000DE52C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE530 E105                       	smpsAlterNote       $05
000DE532 E701                       	dc.b	smpsNoAttack, $01
000DE534 E10B                       	smpsAlterNote       $0B
000DE536 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE53A E105                       	smpsAlterNote       $05
000DE53C E701                       	dc.b	smpsNoAttack, $01
000DE53E E102                       	smpsAlterNote       $02
000DE540 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE544 E108                       	smpsAlterNote       $08
000DE546 E701                       	dc.b	smpsNoAttack, $01
000DE548 E10C                       	smpsAlterNote       $0C
000DE54A E701                       	dc.b	smpsNoAttack, $01
000DE54C E10B                       	smpsAlterNote       $0B
000DE54E E701                       	dc.b	smpsNoAttack, $01
000DE550 E105                       	smpsAlterNote       $05
000DE552 E701                       	dc.b	smpsNoAttack, $01
000DE554 E101                       	smpsAlterNote       $01
000DE556 E701                       	dc.b	smpsNoAttack, $01
000DE558 E105                       	smpsAlterNote       $05
000DE55A E701                       	dc.b	smpsNoAttack, $01
000DE55C E108                       	smpsAlterNote       $08
000DE55E E701                       	dc.b	smpsNoAttack, $01
000DE560 E10C                       	smpsAlterNote       $0C
000DE562 E701                       	dc.b	smpsNoAttack, $01
000DE564 E108                       	smpsAlterNote       $08
000DE566 E701                       	dc.b	smpsNoAttack, $01
000DE568 E102                       	smpsAlterNote       $02
000DE56A E701                       	dc.b	smpsNoAttack, $01
000DE56C E101                       	smpsAlterNote       $01
000DE56E E701                       	dc.b	smpsNoAttack, $01
000DE570 E105                       	smpsAlterNote       $05
000DE572 E701                       	dc.b	smpsNoAttack, $01
000DE574 E10B                       	smpsAlterNote       $0B
000DE576 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE57A E108                       	smpsAlterNote       $08
000DE57C E701                       	dc.b	smpsNoAttack, $01
000DE57E E102                       	smpsAlterNote       $02
000DE580 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE584 E108                       	smpsAlterNote       $08
000DE586 E701                       	dc.b	smpsNoAttack, $01
000DE588 E10B                       	smpsAlterNote       $0B
000DE58A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE58E E105                       	smpsAlterNote       $05
000DE590 E701                       	dc.b	smpsNoAttack, $01
000DE592 E102                       	smpsAlterNote       $02
000DE594 8001                       	dc.b	nRst, $01
000DE596 E107                       	smpsAlterNote       $07
000DE598 BF01 8001                  	dc.b	nD5, $01, nRst, $01
000DE59C E108                       	smpsAlterNote       $08
000DE59E C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
000DE5A2 E102                       	smpsAlterNote       $02
000DE5A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE5A8 E108                       	smpsAlterNote       $08
000DE5AA E701                       	dc.b	smpsNoAttack, $01
000DE5AC E10B                       	smpsAlterNote       $0B
000DE5AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE5B2 E105                       	smpsAlterNote       $05
000DE5B4 E701                       	dc.b	smpsNoAttack, $01
000DE5B6 E101                       	smpsAlterNote       $01
000DE5B8 E701                       	dc.b	smpsNoAttack, $01
000DE5BA E102                       	smpsAlterNote       $02
000DE5BC E701                       	dc.b	smpsNoAttack, $01
000DE5BE E108                       	smpsAlterNote       $08
000DE5C0 E701                       	dc.b	smpsNoAttack, $01
000DE5C2 E10C                       	smpsAlterNote       $0C
000DE5C4 E701                       	dc.b	smpsNoAttack, $01
000DE5C6 E108                       	smpsAlterNote       $08
000DE5C8 E701                       	dc.b	smpsNoAttack, $01
000DE5CA E105                       	smpsAlterNote       $05
000DE5CC E701                       	dc.b	smpsNoAttack, $01
000DE5CE E101                       	smpsAlterNote       $01
000DE5D0 E701                       	dc.b	smpsNoAttack, $01
000DE5D2 E105                       	smpsAlterNote       $05
000DE5D4 E701                       	dc.b	smpsNoAttack, $01
000DE5D6 E10B                       	smpsAlterNote       $0B
000DE5D8 E701                       	dc.b	smpsNoAttack, $01
000DE5DA E10C                       	smpsAlterNote       $0C
000DE5DC E701                       	dc.b	smpsNoAttack, $01
000DE5DE E108                       	smpsAlterNote       $08
000DE5E0 E701                       	dc.b	smpsNoAttack, $01
000DE5E2 E102                       	smpsAlterNote       $02
000DE5E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE5E8 E105                       	smpsAlterNote       $05
000DE5EA E701                       	dc.b	smpsNoAttack, $01
000DE5EC E10B                       	smpsAlterNote       $0B
000DE5EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE5F2 E105                       	smpsAlterNote       $05
000DE5F4 E701                       	dc.b	smpsNoAttack, $01
000DE5F6 E102                       	smpsAlterNote       $02
000DE5F8 E701                       	dc.b	smpsNoAttack, $01
000DE5FA E109                       	smpsAlterNote       $09
000DE5FC C40A C207                  	dc.b	nG5, $0A, nF5, $07
000DE600 E108                       	smpsAlterNote       $08
000DE602 C10D                       	dc.b	nE5, $0D
000DE604 E105                       	smpsAlterNote       $05
000DE606 E701                       	dc.b	smpsNoAttack, $01
000DE608 E101                       	smpsAlterNote       $01
000DE60A E701                       	dc.b	smpsNoAttack, $01
000DE60C E102                       	smpsAlterNote       $02
000DE60E E701                       	dc.b	smpsNoAttack, $01
000DE610 E108                       	smpsAlterNote       $08
000DE612 E701                       	dc.b	smpsNoAttack, $01
000DE614 E10C                       	smpsAlterNote       $0C
000DE616 E701                       	dc.b	smpsNoAttack, $01
000DE618 E108                       	smpsAlterNote       $08
000DE61A E701                       	dc.b	smpsNoAttack, $01
000DE61C E105                       	smpsAlterNote       $05
000DE61E E701                       	dc.b	smpsNoAttack, $01
000DE620 E101                       	smpsAlterNote       $01
000DE622 E701                       	dc.b	smpsNoAttack, $01
000DE624 E105                       	smpsAlterNote       $05
000DE626 E701                       	dc.b	smpsNoAttack, $01
000DE628 E10B                       	smpsAlterNote       $0B
000DE62A E701                       	dc.b	smpsNoAttack, $01
000DE62C E10C                       	smpsAlterNote       $0C
000DE62E E701                       	dc.b	smpsNoAttack, $01
000DE630 E108                       	smpsAlterNote       $08
000DE632 E701                       	dc.b	smpsNoAttack, $01
000DE634 E102                       	smpsAlterNote       $02
000DE636 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
000DE63E E10B                       	smpsAlterNote       $0B
000DE640 BA01 8001                  	dc.b	nA4, $01, nRst, $01
000DE644 E10C                       	smpsAlterNote       $0C
000DE646 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000DE64A E10B                       	smpsAlterNote       $0B
000DE64C BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
000DE652 E107                       	smpsAlterNote       $07
000DE654 BF03                       	dc.b	nD5, $03
000DE656 E108                       	smpsAlterNote       $08
000DE658 C103 8001                  	dc.b	nE5, $03, nRst, $01
000DE65C E109                       	smpsAlterNote       $09
000DE65E C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
000DE664 E10B                       	smpsAlterNote       $0B
000DE666 C606 8001                  	dc.b	nA5, $06, nRst, $01
000DE66A E107                       	smpsAlterNote       $07
000DE66C BF02 8001                  	dc.b	nD5, $02, nRst, $01
000DE670 E106                       	smpsAlterNote       $06
000DE672 C90D                       	dc.b	nC6, $0D
000DE674 E103                       	smpsAlterNote       $03
000DE676 E701                       	dc.b	smpsNoAttack, $01
000DE678 E1FF                       	smpsAlterNote       $FF
000DE67A E701                       	dc.b	smpsNoAttack, $01
000DE67C E103                       	smpsAlterNote       $03
000DE67E E701                       	dc.b	smpsNoAttack, $01
000DE680 E109                       	smpsAlterNote       $09
000DE682 E701                       	dc.b	smpsNoAttack, $01
000DE684 E10A                       	smpsAlterNote       $0A
000DE686 E701                       	dc.b	smpsNoAttack, $01
000DE688 E106                       	smpsAlterNote       $06
000DE68A E701                       	dc.b	smpsNoAttack, $01
000DE68C E100                       	smpsAlterNote       $00
000DE68E E701                       	dc.b	smpsNoAttack, $01
000DE690 E10C                       	smpsAlterNote       $0C
000DE692 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000DE696 E10B                       	smpsAlterNote       $0B
000DE698 C603                       	dc.b	nA5, $03
000DE69A E109                       	smpsAlterNote       $09
000DE69C C403 8001                  	dc.b	nG5, $03, nRst, $01
000DE6A0 E10B                       	smpsAlterNote       $0B
000DE6A2 C60D                       	dc.b	nA5, $0D
000DE6A4 E105                       	smpsAlterNote       $05
000DE6A6 E701                       	dc.b	smpsNoAttack, $01
000DE6A8 E104                       	smpsAlterNote       $04
000DE6AA E701                       	dc.b	smpsNoAttack, $01
000DE6AC E108                       	smpsAlterNote       $08
000DE6AE E701                       	dc.b	smpsNoAttack, $01
000DE6B0 E10E                       	smpsAlterNote       $0E
000DE6B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE6B6 E10B                       	smpsAlterNote       $0B
000DE6B8 E701                       	dc.b	smpsNoAttack, $01
000DE6BA E105                       	smpsAlterNote       $05
000DE6BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE6C0 E10B                       	smpsAlterNote       $0B
000DE6C2 E701                       	dc.b	smpsNoAttack, $01
000DE6C4 E10E                       	smpsAlterNote       $0E
000DE6C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE6CA E108                       	smpsAlterNote       $08
000DE6CC E701                       	dc.b	smpsNoAttack, $01
000DE6CE E104                       	smpsAlterNote       $04
000DE6D0 E701                       	dc.b	smpsNoAttack, $01
000DE6D2 E105                       	smpsAlterNote       $05
000DE6D4 E701                       	dc.b	smpsNoAttack, $01
000DE6D6 E10B                       	smpsAlterNote       $0B
000DE6D8 E701                       	dc.b	smpsNoAttack, $01
000DE6DA E10F                       	smpsAlterNote       $0F
000DE6DC E701                       	dc.b	smpsNoAttack, $01
000DE6DE E10B                       	smpsAlterNote       $0B
000DE6E0 E701                       	dc.b	smpsNoAttack, $01
000DE6E2 E108                       	smpsAlterNote       $08
000DE6E4 E701                       	dc.b	smpsNoAttack, $01
000DE6E6 E104                       	smpsAlterNote       $04
000DE6E8 E701                       	dc.b	smpsNoAttack, $01
000DE6EA E108                       	smpsAlterNote       $08
000DE6EC E701                       	dc.b	smpsNoAttack, $01
000DE6EE E10E                       	smpsAlterNote       $0E
000DE6F0 E701                       	dc.b	smpsNoAttack, $01
000DE6F2 E10F                       	smpsAlterNote       $0F
000DE6F4 E701                       	dc.b	smpsNoAttack, $01
000DE6F6 E10B                       	smpsAlterNote       $0B
000DE6F8 E701                       	dc.b	smpsNoAttack, $01
000DE6FA E105                       	smpsAlterNote       $05
000DE6FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE700 E108                       	smpsAlterNote       $08
000DE702 E701                       	dc.b	smpsNoAttack, $01
000DE704 E10E                       	smpsAlterNote       $0E
000DE706 E701                       	dc.b	smpsNoAttack, $01
000DE708 E10F                       	smpsAlterNote       $0F
000DE70A 800F                       	dc.b	nRst, $0F
000DE70C E107                       	smpsAlterNote       $07
000DE70E BF02 8001                  	dc.b	nD5, $02, nRst, $01
000DE712 E108                       	smpsAlterNote       $08
000DE714 C103                       	dc.b	nE5, $03
000DE716 E109                       	smpsAlterNote       $09
000DE718 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000DE71E E10B                       	smpsAlterNote       $0B
000DE720 C607                       	dc.b	nA5, $07
000DE722 E107                       	smpsAlterNote       $07
000DE724 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000DE728 E106                       	smpsAlterNote       $06
000DE72A C90D                       	dc.b	nC6, $0D
000DE72C E107                       	smpsAlterNote       $07
000DE72E CB03 8001                  	dc.b	nD6, $03, nRst, $01
000DE732 E10C                       	smpsAlterNote       $0C
000DE734 C704                       	dc.b	nBb5, $04
000DE736 E10B                       	smpsAlterNote       $0B
000DE738 C604 8001                  	dc.b	nA5, $04, nRst, $01
000DE73C E109                       	smpsAlterNote       $09
000DE73E C404                       	dc.b	nG5, $04
000DE740 E10B                       	smpsAlterNote       $0B
000DE742 C60D                       	dc.b	nA5, $0D
000DE744 E108                       	smpsAlterNote       $08
000DE746 E701                       	dc.b	smpsNoAttack, $01
000DE748 E105                       	smpsAlterNote       $05
000DE74A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE74E E10B                       	smpsAlterNote       $0B
000DE750 E701                       	dc.b	smpsNoAttack, $01
000DE752 E10F                       	smpsAlterNote       $0F
000DE754 E701                       	dc.b	smpsNoAttack, $01
000DE756 E10E                       	smpsAlterNote       $0E
000DE758 E701                       	dc.b	smpsNoAttack, $01
000DE75A E108                       	smpsAlterNote       $08
000DE75C E701                       	dc.b	smpsNoAttack, $01
000DE75E E104                       	smpsAlterNote       $04
000DE760 E701                       	dc.b	smpsNoAttack, $01
000DE762 E108                       	smpsAlterNote       $08
000DE764 E701                       	dc.b	smpsNoAttack, $01
000DE766 E10B                       	smpsAlterNote       $0B
000DE768 E701                       	dc.b	smpsNoAttack, $01
000DE76A E10F                       	smpsAlterNote       $0F
000DE76C E701                       	dc.b	smpsNoAttack, $01
000DE76E E10B                       	smpsAlterNote       $0B
000DE770 E701                       	dc.b	smpsNoAttack, $01
000DE772 E105                       	smpsAlterNote       $05
000DE774 E701                       	dc.b	smpsNoAttack, $01
000DE776 E104                       	smpsAlterNote       $04
000DE778 E701                       	dc.b	smpsNoAttack, $01
000DE77A E108                       	smpsAlterNote       $08
000DE77C E701                       	dc.b	smpsNoAttack, $01
000DE77E E10E                       	smpsAlterNote       $0E
000DE780 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE784 E10B                       	smpsAlterNote       $0B
000DE786 E701                       	dc.b	smpsNoAttack, $01
000DE788 E105                       	smpsAlterNote       $05
000DE78A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE78E E10B                       	smpsAlterNote       $0B
000DE790 E701                       	dc.b	smpsNoAttack, $01
000DE792 E10E                       	smpsAlterNote       $0E
000DE794 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE798 E108                       	smpsAlterNote       $08
000DE79A E701                       	dc.b	smpsNoAttack, $01
000DE79C E105                       	smpsAlterNote       $05
000DE79E 8001                       	dc.b	nRst, $01
000DE7A0 E109                       	smpsAlterNote       $09
000DE7A2 C401 8001                  	dc.b	nG5, $01, nRst, $01
000DE7A6 E10B                       	smpsAlterNote       $0B
000DE7A8 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
000DE7B0 E109                       	smpsAlterNote       $09
000DE7B2 C404                       	dc.b	nG5, $04
000DE7B4 E10B                       	smpsAlterNote       $0B
000DE7B6 C604 8001                  	dc.b	nA5, $04, nRst, $01
000DE7BA E107                       	smpsAlterNote       $07
000DE7BC BF0D                       	dc.b	nD5, $0D
000DE7BE E101                       	smpsAlterNote       $01
000DE7C0 E701                       	dc.b	smpsNoAttack, $01
000DE7C2 E100                       	smpsAlterNote       $00
000DE7C4 E701                       	dc.b	smpsNoAttack, $01
000DE7C6 E104                       	smpsAlterNote       $04
000DE7C8 E701                       	dc.b	smpsNoAttack, $01
000DE7CA E10A                       	smpsAlterNote       $0A
000DE7CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE7D0 E107                       	smpsAlterNote       $07
000DE7D2 E701                       	dc.b	smpsNoAttack, $01
000DE7D4 E101                       	smpsAlterNote       $01
000DE7D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE7DA E107                       	smpsAlterNote       $07
000DE7DC E701                       	dc.b	smpsNoAttack, $01
000DE7DE E10A                       	smpsAlterNote       $0A
000DE7E0 E701                       	dc.b	smpsNoAttack, $01
000DE7E2 E10B                       	smpsAlterNote       $0B
000DE7E4 8001                       	dc.b	nRst, $01
000DE7E6 E108                       	smpsAlterNote       $08
000DE7E8 8001                       	dc.b	nRst, $01
000DE7EA E109                       	smpsAlterNote       $09
000DE7EC 8001 C401                  	dc.b	nRst, $01, nG5, $01
000DE7F0 E10B                       	smpsAlterNote       $0B
000DE7F2 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000DE7FA E108                       	smpsAlterNote       $08
000DE7FC CD06 8001                  	dc.b	nE6, $06, nRst, $01
000DE800 E109                       	smpsAlterNote       $09
000DE802 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000DE806 E108                       	smpsAlterNote       $08
000DE808 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000DE80C E106                       	smpsAlterNote       $06
000DE80E C903                       	dc.b	nC6, $03
000DE810 E109                       	smpsAlterNote       $09
000DE812 C403 8001                  	dc.b	nG5, $03, nRst, $01
000DE816 E10C                       	smpsAlterNote       $0C
000DE818 C70D                       	dc.b	nBb5, $0D
000DE81A E109                       	smpsAlterNote       $09
000DE81C E701                       	dc.b	smpsNoAttack, $01
000DE81E E105                       	smpsAlterNote       $05
000DE820 E701                       	dc.b	smpsNoAttack, $01
000DE822 E109                       	smpsAlterNote       $09
000DE824 E701                       	dc.b	smpsNoAttack, $01
000DE826 E10F                       	smpsAlterNote       $0F
000DE828 E701                       	dc.b	smpsNoAttack, $01
000DE82A E110                       	smpsAlterNote       $10
000DE82C E701                       	dc.b	smpsNoAttack, $01
000DE82E E10C                       	smpsAlterNote       $0C
000DE830 E701                       	dc.b	smpsNoAttack, $01
000DE832 E106                       	smpsAlterNote       $06
000DE834 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE838 E109                       	smpsAlterNote       $09
000DE83A E701                       	dc.b	smpsNoAttack, $01
000DE83C E10F                       	smpsAlterNote       $0F
000DE83E E701                       	dc.b	smpsNoAttack, $01
000DE840 E110                       	smpsAlterNote       $10
000DE842 8001                       	dc.b	nRst, $01
000DE844 E10B                       	smpsAlterNote       $0B
000DE846 C606 8001                  	dc.b	nA5, $06, nRst, $01
000DE84A E109                       	smpsAlterNote       $09
000DE84C C40D                       	dc.b	nG5, $0D
000DE84E E103                       	smpsAlterNote       $03
000DE850 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE854 E106                       	smpsAlterNote       $06
000DE856 E701                       	dc.b	smpsNoAttack, $01
000DE858 E10C                       	smpsAlterNote       $0C
000DE85A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE85E E106                       	smpsAlterNote       $06
000DE860 E701                       	dc.b	smpsNoAttack, $01
000DE862 E103                       	smpsAlterNote       $03
000DE864 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE868 E109                       	smpsAlterNote       $09
000DE86A E701                       	dc.b	smpsNoAttack, $01
000DE86C E10D                       	smpsAlterNote       $0D
000DE86E E701                       	dc.b	smpsNoAttack, $01
000DE870 E10C                       	smpsAlterNote       $0C
000DE872 E701                       	dc.b	smpsNoAttack, $01
000DE874 E106                       	smpsAlterNote       $06
000DE876 E701                       	dc.b	smpsNoAttack, $01
000DE878 E102                       	smpsAlterNote       $02
000DE87A E701                       	dc.b	smpsNoAttack, $01
000DE87C E103                       	smpsAlterNote       $03
000DE87E 8001                       	dc.b	nRst, $01
000DE880 E10B                       	smpsAlterNote       $0B
000DE882 C60D                       	dc.b	nA5, $0D
000DE884 E108                       	smpsAlterNote       $08
000DE886 E701                       	dc.b	smpsNoAttack, $01
000DE888 E104                       	smpsAlterNote       $04
000DE88A E701                       	dc.b	smpsNoAttack, $01
000DE88C E108                       	smpsAlterNote       $08
000DE88E E701                       	dc.b	smpsNoAttack, $01
000DE890 E10B                       	smpsAlterNote       $0B
000DE892 E701                       	dc.b	smpsNoAttack, $01
000DE894 E10F                       	smpsAlterNote       $0F
000DE896 E701                       	dc.b	smpsNoAttack, $01
000DE898 E10B                       	smpsAlterNote       $0B
000DE89A E701                       	dc.b	smpsNoAttack, $01
000DE89C E105                       	smpsAlterNote       $05
000DE89E E701                       	dc.b	smpsNoAttack, $01
000DE8A0 E104                       	smpsAlterNote       $04
000DE8A2 E701                       	dc.b	smpsNoAttack, $01
000DE8A4 E108                       	smpsAlterNote       $08
000DE8A6 E701                       	dc.b	smpsNoAttack, $01
000DE8A8 E10E                       	smpsAlterNote       $0E
000DE8AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE8AE E10B                       	smpsAlterNote       $0B
000DE8B0 E701                       	dc.b	smpsNoAttack, $01
000DE8B2 E105                       	smpsAlterNote       $05
000DE8B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE8B8 E10C                       	smpsAlterNote       $0C
000DE8BA C70E                       	dc.b	nBb5, $0E
000DE8BC E106                       	smpsAlterNote       $06
000DE8BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE8C2 E10C                       	smpsAlterNote       $0C
000DE8C4 E701                       	dc.b	smpsNoAttack, $01
000DE8C6 E10F                       	smpsAlterNote       $0F
000DE8C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE8CC E109                       	smpsAlterNote       $09
000DE8CE E701                       	dc.b	smpsNoAttack, $01
000DE8D0 E105                       	smpsAlterNote       $05
000DE8D2 E701                       	dc.b	smpsNoAttack, $01
000DE8D4 E106                       	smpsAlterNote       $06
000DE8D6 E701                       	dc.b	smpsNoAttack, $01
000DE8D8 E10C                       	smpsAlterNote       $0C
000DE8DA E701                       	dc.b	smpsNoAttack, $01
000DE8DC E110                       	smpsAlterNote       $10
000DE8DE E701                       	dc.b	smpsNoAttack, $01
000DE8E0 E10C                       	smpsAlterNote       $0C
000DE8E2 E701                       	dc.b	smpsNoAttack, $01
000DE8E4 E109                       	smpsAlterNote       $09
000DE8E6 E701                       	dc.b	smpsNoAttack, $01
000DE8E8 E105                       	smpsAlterNote       $05
000DE8EA E701                       	dc.b	smpsNoAttack, $01
000DE8EC E106                       	smpsAlterNote       $06
000DE8EE 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
000DE8F2 E107                       	smpsAlterNote       $07
000DE8F4 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
000DE8F9 E108                       	smpsAlterNote       $08
000DE8FB CD0D                       	dc.b	nE6, $0D
000DE8FD E107                       	smpsAlterNote       $07
000DE8FF CB0D                       	dc.b	nD6, $0D
000DE901 E104                       	smpsAlterNote       $04
000DE903 E701                       	dc.b	smpsNoAttack, $01
000DE905 E100                       	smpsAlterNote       $00
000DE907 E701                       	dc.b	smpsNoAttack, $01
000DE909 E101                       	smpsAlterNote       $01
000DE90B E701                       	dc.b	smpsNoAttack, $01
000DE90D E107                       	smpsAlterNote       $07
000DE90F E701                       	dc.b	smpsNoAttack, $01
000DE911 E10B                       	smpsAlterNote       $0B
000DE913 E701                       	dc.b	smpsNoAttack, $01
000DE915 E107                       	smpsAlterNote       $07
000DE917 E701                       	dc.b	smpsNoAttack, $01
000DE919 E104                       	smpsAlterNote       $04
000DE91B E701                       	dc.b	smpsNoAttack, $01
000DE91D E100                       	smpsAlterNote       $00
000DE91F E701                       	dc.b	smpsNoAttack, $01
000DE921 E104                       	smpsAlterNote       $04
000DE923 E701                       	dc.b	smpsNoAttack, $01
000DE925 E10A                       	smpsAlterNote       $0A
000DE927 E701                       	dc.b	smpsNoAttack, $01
000DE929 E10B                       	smpsAlterNote       $0B
000DE92B E701                       	dc.b	smpsNoAttack, $01
000DE92D E108                       	smpsAlterNote       $08
000DE92F CC0D                       	dc.b	nEb6, $0D
000DE931 E105                       	smpsAlterNote       $05
000DE933 E701                       	dc.b	smpsNoAttack, $01
000DE935 E101                       	smpsAlterNote       $01
000DE937 E701                       	dc.b	smpsNoAttack, $01
000DE939 E102                       	smpsAlterNote       $02
000DE93B E701                       	dc.b	smpsNoAttack, $01
000DE93D E108                       	smpsAlterNote       $08
000DE93F E701                       	dc.b	smpsNoAttack, $01
000DE941 E106                       	smpsAlterNote       $06
000DE943 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
000DE94F 8001                       	dc.b	nRst, $01
000DE951 E107                       	smpsAlterNote       $07
000DE953 CB0D                       	dc.b	nD6, $0D
000DE955 E104                       	smpsAlterNote       $04
000DE957 E701                       	dc.b	smpsNoAttack, $01
000DE959 E100                       	smpsAlterNote       $00
000DE95B E701                       	dc.b	smpsNoAttack, $01
000DE95D E104                       	smpsAlterNote       $04
000DE95F E701                       	dc.b	smpsNoAttack, $01
000DE961 E107                       	smpsAlterNote       $07
000DE963 E701                       	dc.b	smpsNoAttack, $01
000DE965 E10B                       	smpsAlterNote       $0B
000DE967 E701                       	dc.b	smpsNoAttack, $01
000DE969 E107                       	smpsAlterNote       $07
000DE96B E701                       	dc.b	smpsNoAttack, $01
000DE96D E101                       	smpsAlterNote       $01
000DE96F E701                       	dc.b	smpsNoAttack, $01
000DE971 E100                       	smpsAlterNote       $00
000DE973 E701                       	dc.b	smpsNoAttack, $01
000DE975 E104                       	smpsAlterNote       $04
000DE977 E701                       	dc.b	smpsNoAttack, $01
000DE979 E10A                       	smpsAlterNote       $0A
000DE97B E701                       	dc.b	smpsNoAttack, $01
000DE97D E10B                       	smpsAlterNote       $0B
000DE97F 8001                       	dc.b	nRst, $01
000DE981 E109                       	smpsAlterNote       $09
000DE983 CE0A                       	dc.b	nF6, $0A
000DE985 E108                       	smpsAlterNote       $08
000DE987 CC07                       	dc.b	nEb6, $07
000DE989 E106                       	smpsAlterNote       $06
000DE98B C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
000DE997 E107                       	smpsAlterNote       $07
000DE999 CB0D                       	dc.b	nD6, $0D
000DE99B E101                       	smpsAlterNote       $01
000DE99D E701                       	dc.b	smpsNoAttack, $01
000DE99F E100                       	smpsAlterNote       $00
000DE9A1 E701                       	dc.b	smpsNoAttack, $01
000DE9A3 E104                       	smpsAlterNote       $04
000DE9A5 E701                       	dc.b	smpsNoAttack, $01
000DE9A7 E10A                       	smpsAlterNote       $0A
000DE9A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE9AD E107                       	smpsAlterNote       $07
000DE9AF E701                       	dc.b	smpsNoAttack, $01
000DE9B1 E101                       	smpsAlterNote       $01
000DE9B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE9B7 E107                       	smpsAlterNote       $07
000DE9B9 E701                       	dc.b	smpsNoAttack, $01
000DE9BB E10A                       	smpsAlterNote       $0A
000DE9BD E701                       	dc.b	smpsNoAttack, $01
000DE9BF E10B                       	smpsAlterNote       $0B
000DE9C1 8001                       	dc.b	nRst, $01
000DE9C3 E108                       	smpsAlterNote       $08
000DE9C5 CC0D                       	dc.b	nEb6, $0D
000DE9C7 E102                       	smpsAlterNote       $02
000DE9C9 E701                       	dc.b	smpsNoAttack, $01
000DE9CB E101                       	smpsAlterNote       $01
000DE9CD E701                       	dc.b	smpsNoAttack, $01
000DE9CF E105                       	smpsAlterNote       $05
000DE9D1 E701                       	dc.b	smpsNoAttack, $01
000DE9D3 E108                       	smpsAlterNote       $08
000DE9D5 8001                       	dc.b	nRst, $01
000DE9D7 E106                       	smpsAlterNote       $06
000DE9D9 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
000DE9E5 8001                       	dc.b	nRst, $01
000DE9E7 E107                       	smpsAlterNote       $07
000DE9E9 CB0D                       	dc.b	nD6, $0D
000DE9EB E101                       	smpsAlterNote       $01
000DE9ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE9F1 E104                       	smpsAlterNote       $04
000DE9F3 E701                       	dc.b	smpsNoAttack, $01
000DE9F5 E10A                       	smpsAlterNote       $0A
000DE9F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE9FB E104                       	smpsAlterNote       $04
000DE9FD E701                       	dc.b	smpsNoAttack, $01
000DE9FF E101                       	smpsAlterNote       $01
000DEA01 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEA05 E107                       	smpsAlterNote       $07
000DEA07 E701                       	dc.b	smpsNoAttack, $01
000DEA09 E10B                       	smpsAlterNote       $0B
000DEA0B E701                       	dc.b	smpsNoAttack, $01
000DEA0D E10A                       	smpsAlterNote       $0A
000DEA0F E701                       	dc.b	smpsNoAttack, $01
000DEA11 E104                       	smpsAlterNote       $04
000DEA13 E701                       	dc.b	smpsNoAttack, $01
000DEA15 E100                       	smpsAlterNote       $00
000DEA17 E701                       	dc.b	smpsNoAttack, $01
000DEA19 E101                       	smpsAlterNote       $01
000DEA1B 801C                       	dc.b	nRst, $1C
000DEA1F E107                       	smpsAlterNote       $07
000DEA21 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000DEA25 E603                       	smpsAlterVol        $03
000DEA27 F6F1 AD                    	smpsJump            music84_Jump03
000DEA2A                            
000DEA2A                            ; FM3 Data
000DEA2A                            music84_FM3:
000DEA2A E0C0                       	smpsPan             panCenter, $00
000DEA2E E109                       	smpsAlterNote       $09
000DEA30 C203 8007                  	dc.b	nF5, $03, nRst, $07
000DEA34 E108                       	smpsAlterNote       $08
000DEA36 C103 800B                  	dc.b	nE5, $03, nRst, $0B
000DEA3A E10B                       	smpsAlterNote       $0B
000DEA3C BA03 8006                  	dc.b	nA4, $03, nRst, $06
000DEA42 E040                       	smpsPan             panRight, $00
000DEA44 E110                       	smpsAlterNote       $10
000DEA46 E6F9                       	smpsAlterVol        $F9
000DEA48 C702 8001                  	dc.b	nBb5, $02, nRst, $01
000DEA4C E10F                       	smpsAlterNote       $0F
000DEA4E C603                       	dc.b	nA5, $03
000DEA50 E10D                       	smpsAlterNote       $0D
000DEA52 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000DEA58 E10C                       	smpsAlterNote       $0C
000DEA5A C103 8001                  	dc.b	nE5, $03, nRst, $01
000DEA5E E10A                       	smpsAlterNote       $0A
000DEA60 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000DEA64 E10F                       	smpsAlterNote       $0F
000DEA66 BA01 8001                  	dc.b	nA4, $01, nRst, $01
000DEA6A E0C0                       	smpsPan             panCenter, $00
000DEA6E E109                       	smpsAlterNote       $09
000DEA70 E609                       	smpsAlterVol        $09
000DEA72 B603                       	dc.b	nF4, $03
000DEA74                            
000DEA74                            music84_Jump02:
000DEA74 E70A                       	dc.b	smpsNoAttack, $0A
000DEA76 E103                       	smpsAlterNote       $03
000DEA78 E701                       	dc.b	smpsNoAttack, $01
000DEA7A E102                       	smpsAlterNote       $02
000DEA7C E701                       	dc.b	smpsNoAttack, $01
000DEA7E E106                       	smpsAlterNote       $06
000DEA80 E701                       	dc.b	smpsNoAttack, $01
000DEA82 E10C                       	smpsAlterNote       $0C
000DEA84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEA88 E109                       	smpsAlterNote       $09
000DEA8A E701                       	dc.b	smpsNoAttack, $01
000DEA8C E103                       	smpsAlterNote       $03
000DEA8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEA92 E109                       	smpsAlterNote       $09
000DEA94 E701                       	dc.b	smpsNoAttack, $01
000DEA96 E10C                       	smpsAlterNote       $0C
000DEA98 E701                       	dc.b	smpsNoAttack, $01
000DEA9A E10D                       	smpsAlterNote       $0D
000DEA9C 8001                       	dc.b	nRst, $01
000DEA9E E109                       	smpsAlterNote       $09
000DEAA0 B80D                       	dc.b	nG4, $0D
000DEAA2 E103                       	smpsAlterNote       $03
000DEAA4 E701                       	dc.b	smpsNoAttack, $01
000DEAA6 E102                       	smpsAlterNote       $02
000DEAA8 E701                       	dc.b	smpsNoAttack, $01
000DEAAA E106                       	smpsAlterNote       $06
000DEAAC E701                       	dc.b	smpsNoAttack, $01
000DEAAE E10C                       	smpsAlterNote       $0C
000DEAB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEAB4 E109                       	smpsAlterNote       $09
000DEAB6 E701                       	dc.b	smpsNoAttack, $01
000DEAB8 E103                       	smpsAlterNote       $03
000DEABA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEABE E109                       	smpsAlterNote       $09
000DEAC0 E701                       	dc.b	smpsNoAttack, $01
000DEAC2 E10C                       	smpsAlterNote       $0C
000DEAC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEAC8 E106                       	smpsAlterNote       $06
000DEACA E701                       	dc.b	smpsNoAttack, $01
000DEACC E102                       	smpsAlterNote       $02
000DEACE E701                       	dc.b	smpsNoAttack, $01
000DEAD0 E103                       	smpsAlterNote       $03
000DEAD2 E701                       	dc.b	smpsNoAttack, $01
000DEAD4 E109                       	smpsAlterNote       $09
000DEAD6 E701                       	dc.b	smpsNoAttack, $01
000DEAD8 E10D                       	smpsAlterNote       $0D
000DEADA E701                       	dc.b	smpsNoAttack, $01
000DEADC E109                       	smpsAlterNote       $09
000DEADE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DEAE2 E10B                       	smpsAlterNote       $0B
000DEAE4 BA0D                       	dc.b	nA4, $0D
000DEAE6 E105                       	smpsAlterNote       $05
000DEAE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEAEC E108                       	smpsAlterNote       $08
000DEAEE E701                       	dc.b	smpsNoAttack, $01
000DEAF0 E10E                       	smpsAlterNote       $0E
000DEAF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEAF6 E108                       	smpsAlterNote       $08
000DEAF8 E701                       	dc.b	smpsNoAttack, $01
000DEAFA E104                       	smpsAlterNote       $04
000DEAFC E701                       	dc.b	smpsNoAttack, $01
000DEAFE E105                       	smpsAlterNote       $05
000DEB00 E701                       	dc.b	smpsNoAttack, $01
000DEB02 E10B                       	smpsAlterNote       $0B
000DEB04 E701                       	dc.b	smpsNoAttack, $01
000DEB06 E10F                       	smpsAlterNote       $0F
000DEB08 E701                       	dc.b	smpsNoAttack, $01
000DEB0A E10B                       	smpsAlterNote       $0B
000DEB0C E701                       	dc.b	smpsNoAttack, $01
000DEB0E E108                       	smpsAlterNote       $08
000DEB10 E701                       	dc.b	smpsNoAttack, $01
000DEB12 E104                       	smpsAlterNote       $04
000DEB14 E701                       	dc.b	smpsNoAttack, $01
000DEB16 E108                       	smpsAlterNote       $08
000DEB18 E701                       	dc.b	smpsNoAttack, $01
000DEB1A E10E                       	smpsAlterNote       $0E
000DEB1C E701                       	dc.b	smpsNoAttack, $01
000DEB1E E10F                       	smpsAlterNote       $0F
000DEB20 E701                       	dc.b	smpsNoAttack, $01
000DEB22 E10B                       	smpsAlterNote       $0B
000DEB24 E701                       	dc.b	smpsNoAttack, $01
000DEB26 E105                       	smpsAlterNote       $05
000DEB28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEB2C E108                       	smpsAlterNote       $08
000DEB2E E701                       	dc.b	smpsNoAttack, $01
000DEB30 E10E                       	smpsAlterNote       $0E
000DEB32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEB36 E108                       	smpsAlterNote       $08
000DEB38 E701                       	dc.b	smpsNoAttack, $01
000DEB3A E105                       	smpsAlterNote       $05
000DEB3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEB40 E10B                       	smpsAlterNote       $0B
000DEB42 E701                       	dc.b	smpsNoAttack, $01
000DEB44 E10F                       	smpsAlterNote       $0F
000DEB46 E701                       	dc.b	smpsNoAttack, $01
000DEB48 E10E                       	smpsAlterNote       $0E
000DEB4A E701                       	dc.b	smpsNoAttack, $01
000DEB4C E108                       	smpsAlterNote       $08
000DEB4E E701                       	dc.b	smpsNoAttack, $01
000DEB50 E104                       	smpsAlterNote       $04
000DEB52 E701                       	dc.b	smpsNoAttack, $01
000DEB54 E105                       	smpsAlterNote       $05
000DEB56 8001                       	dc.b	nRst, $01
000DEB58 E108                       	smpsAlterNote       $08
000DEB5A B50A                       	dc.b	nE4, $0A
000DEB5C E109                       	smpsAlterNote       $09
000DEB5E B60D                       	dc.b	nF4, $0D
000DEB60 E106                       	smpsAlterNote       $06
000DEB62 E701                       	dc.b	smpsNoAttack, $01
000DEB64 E103                       	smpsAlterNote       $03
000DEB66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEB6A E109                       	smpsAlterNote       $09
000DEB6C E701                       	dc.b	smpsNoAttack, $01
000DEB6E E10D                       	smpsAlterNote       $0D
000DEB70 E701                       	dc.b	smpsNoAttack, $01
000DEB72 E10C                       	smpsAlterNote       $0C
000DEB74 E701                       	dc.b	smpsNoAttack, $01
000DEB76 E106                       	smpsAlterNote       $06
000DEB78 E701                       	dc.b	smpsNoAttack, $01
000DEB7A E102                       	smpsAlterNote       $02
000DEB7C E701                       	dc.b	smpsNoAttack, $01
000DEB7E E106                       	smpsAlterNote       $06
000DEB80 E701                       	dc.b	smpsNoAttack, $01
000DEB82 E109                       	smpsAlterNote       $09
000DEB84 E701                       	dc.b	smpsNoAttack, $01
000DEB86 E10D                       	smpsAlterNote       $0D
000DEB88 E701                       	dc.b	smpsNoAttack, $01
000DEB8A E109                       	smpsAlterNote       $09
000DEB8C B80D                       	dc.b	nG4, $0D
000DEB8E E106                       	smpsAlterNote       $06
000DEB90 E701                       	dc.b	smpsNoAttack, $01
000DEB92 E103                       	smpsAlterNote       $03
000DEB94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEB98 E109                       	smpsAlterNote       $09
000DEB9A E701                       	dc.b	smpsNoAttack, $01
000DEB9C E10D                       	smpsAlterNote       $0D
000DEB9E E701                       	dc.b	smpsNoAttack, $01
000DEBA0 E10C                       	smpsAlterNote       $0C
000DEBA2 E701                       	dc.b	smpsNoAttack, $01
000DEBA4 E106                       	smpsAlterNote       $06
000DEBA6 E701                       	dc.b	smpsNoAttack, $01
000DEBA8 E102                       	smpsAlterNote       $02
000DEBAA E701                       	dc.b	smpsNoAttack, $01
000DEBAC E106                       	smpsAlterNote       $06
000DEBAE E701                       	dc.b	smpsNoAttack, $01
000DEBB0 E109                       	smpsAlterNote       $09
000DEBB2 E701                       	dc.b	smpsNoAttack, $01
000DEBB4 E10D                       	smpsAlterNote       $0D
000DEBB6 E701                       	dc.b	smpsNoAttack, $01
000DEBB8 E109                       	smpsAlterNote       $09
000DEBBA E701                       	dc.b	smpsNoAttack, $01
000DEBBC E103                       	smpsAlterNote       $03
000DEBBE E701                       	dc.b	smpsNoAttack, $01
000DEBC0 E102                       	smpsAlterNote       $02
000DEBC2 E701                       	dc.b	smpsNoAttack, $01
000DEBC4 E106                       	smpsAlterNote       $06
000DEBC6 E701                       	dc.b	smpsNoAttack, $01
000DEBC8 E10C                       	smpsAlterNote       $0C
000DEBCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEBCE E109                       	smpsAlterNote       $09
000DEBD0 E701                       	dc.b	smpsNoAttack, $01
000DEBD2 E10B                       	smpsAlterNote       $0B
000DEBD4 BA0D                       	dc.b	nA4, $0D
000DEBD6 E108                       	smpsAlterNote       $08
000DEBD8 E701                       	dc.b	smpsNoAttack, $01
000DEBDA E104                       	smpsAlterNote       $04
000DEBDC E701                       	dc.b	smpsNoAttack, $01
000DEBDE E108                       	smpsAlterNote       $08
000DEBE0 E701                       	dc.b	smpsNoAttack, $01
000DEBE2 E10B                       	smpsAlterNote       $0B
000DEBE4 E701                       	dc.b	smpsNoAttack, $01
000DEBE6 E10F                       	smpsAlterNote       $0F
000DEBE8 E701                       	dc.b	smpsNoAttack, $01
000DEBEA E10B                       	smpsAlterNote       $0B
000DEBEC E701                       	dc.b	smpsNoAttack, $01
000DEBEE E105                       	smpsAlterNote       $05
000DEBF0 E701                       	dc.b	smpsNoAttack, $01
000DEBF2 E104                       	smpsAlterNote       $04
000DEBF4 E701                       	dc.b	smpsNoAttack, $01
000DEBF6 E108                       	smpsAlterNote       $08
000DEBF8 E701                       	dc.b	smpsNoAttack, $01
000DEBFA E10E                       	smpsAlterNote       $0E
000DEBFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEC00 E10B                       	smpsAlterNote       $0B
000DEC02 E701                       	dc.b	smpsNoAttack, $01
000DEC04 E105                       	smpsAlterNote       $05
000DEC06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEC0A E10B                       	smpsAlterNote       $0B
000DEC0C E701                       	dc.b	smpsNoAttack, $01
000DEC0E E10E                       	smpsAlterNote       $0E
000DEC10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEC14 E108                       	smpsAlterNote       $08
000DEC16 E701                       	dc.b	smpsNoAttack, $01
000DEC18 E104                       	smpsAlterNote       $04
000DEC1A E701                       	dc.b	smpsNoAttack, $01
000DEC1C E105                       	smpsAlterNote       $05
000DEC1E E701                       	dc.b	smpsNoAttack, $01
000DEC20 E10B                       	smpsAlterNote       $0B
000DEC22 E701                       	dc.b	smpsNoAttack, $01
000DEC24 E10F                       	smpsAlterNote       $0F
000DEC26 E701                       	dc.b	smpsNoAttack, $01
000DEC28 E10B                       	smpsAlterNote       $0B
000DEC2A E701                       	dc.b	smpsNoAttack, $01
000DEC2C E108                       	smpsAlterNote       $08
000DEC2E E701                       	dc.b	smpsNoAttack, $01
000DEC30 E105                       	smpsAlterNote       $05
000DEC32 8001                       	dc.b	nRst, $01
000DEC34 E109                       	smpsAlterNote       $09
000DEC36 B609 8001                  	dc.b	nF4, $09, nRst, $01
000DEC3A E108                       	smpsAlterNote       $08
000DEC3C B506 8001                  	dc.b	nE4, $06, nRst, $01
000DEC40 E107                       	smpsAlterNote       $07
000DEC42 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000DEC46 E108                       	smpsAlterNote       $08
000DEC48 B502 8001                  	dc.b	nE4, $02, nRst, $01
000DEC4C E109                       	smpsAlterNote       $09
000DEC4E B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
000DEC54 E10B                       	smpsAlterNote       $0B
000DEC56 BA0D                       	dc.b	nA4, $0D
000DEC58 E108                       	smpsAlterNote       $08
000DEC5A E701                       	dc.b	smpsNoAttack, $01
000DEC5C E104                       	smpsAlterNote       $04
000DEC5E E701                       	dc.b	smpsNoAttack, $01
000DEC60 E108                       	smpsAlterNote       $08
000DEC62 E701                       	dc.b	smpsNoAttack, $01
000DEC64 E10E                       	smpsAlterNote       $0E
000DEC66 E701                       	dc.b	smpsNoAttack, $01
000DEC68 E10F                       	smpsAlterNote       $0F
000DEC6A E701                       	dc.b	smpsNoAttack, $01
000DEC6C E10B                       	smpsAlterNote       $0B
000DEC6E E701                       	dc.b	smpsNoAttack, $01
000DEC70 E105                       	smpsAlterNote       $05
000DEC72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEC76 E108                       	smpsAlterNote       $08
000DEC78 E701                       	dc.b	smpsNoAttack, $01
000DEC7A E10E                       	smpsAlterNote       $0E
000DEC7C E701                       	dc.b	smpsNoAttack, $01
000DEC7E E10F                       	smpsAlterNote       $0F
000DEC80 8001                       	dc.b	nRst, $01
000DEC82 E109                       	smpsAlterNote       $09
000DEC84 C20D                       	dc.b	nF5, $0D
000DEC86 E103                       	smpsAlterNote       $03
000DEC88 E701                       	dc.b	smpsNoAttack, $01
000DEC8A E102                       	smpsAlterNote       $02
000DEC8C E701                       	dc.b	smpsNoAttack, $01
000DEC8E E106                       	smpsAlterNote       $06
000DEC90 E701                       	dc.b	smpsNoAttack, $01
000DEC92 E10C                       	smpsAlterNote       $0C
000DEC94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEC98 E109                       	smpsAlterNote       $09
000DEC9A E701                       	dc.b	smpsNoAttack, $01
000DEC9C E103                       	smpsAlterNote       $03
000DEC9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DECA2 E109                       	smpsAlterNote       $09
000DECA4 E701                       	dc.b	smpsNoAttack, $01
000DECA6 E10C                       	smpsAlterNote       $0C
000DECA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DECAC E106                       	smpsAlterNote       $06
000DECAE E701                       	dc.b	smpsNoAttack, $01
000DECB0 E102                       	smpsAlterNote       $02
000DECB2 E701                       	dc.b	smpsNoAttack, $01
000DECB4 E103                       	smpsAlterNote       $03
000DECB6 E701                       	dc.b	smpsNoAttack, $01
000DECB8 E109                       	smpsAlterNote       $09
000DECBA E701                       	dc.b	smpsNoAttack, $01
000DECBC E10D                       	smpsAlterNote       $0D
000DECBE E701                       	dc.b	smpsNoAttack, $01
000DECC0 E109                       	smpsAlterNote       $09
000DECC2 E701                       	dc.b	smpsNoAttack, $01
000DECC4 E106                       	smpsAlterNote       $06
000DECC6 E701                       	dc.b	smpsNoAttack, $01
000DECC8 E102                       	smpsAlterNote       $02
000DECCA E701                       	dc.b	smpsNoAttack, $01
000DECCC E106                       	smpsAlterNote       $06
000DECCE E701                       	dc.b	smpsNoAttack, $01
000DECD0 E10C                       	smpsAlterNote       $0C
000DECD2 E701                       	dc.b	smpsNoAttack, $01
000DECD4 E10D                       	smpsAlterNote       $0D
000DECD6 E701                       	dc.b	smpsNoAttack, $01
000DECD8 E109                       	smpsAlterNote       $09
000DECDA E701                       	dc.b	smpsNoAttack, $01
000DECDC E103                       	smpsAlterNote       $03
000DECDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DECE2 E106                       	smpsAlterNote       $06
000DECE4 E701                       	dc.b	smpsNoAttack, $01
000DECE6 E10C                       	smpsAlterNote       $0C
000DECE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DECEC E106                       	smpsAlterNote       $06
000DECEE E701                       	dc.b	smpsNoAttack, $01
000DECF0 E103                       	smpsAlterNote       $03
000DECF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DECF6 E109                       	smpsAlterNote       $09
000DECF8 E701                       	dc.b	smpsNoAttack, $01
000DECFA E10D                       	smpsAlterNote       $0D
000DECFC E701                       	dc.b	smpsNoAttack, $01
000DECFE E10C                       	smpsAlterNote       $0C
000DED00 E701                       	dc.b	smpsNoAttack, $01
000DED02 E106                       	smpsAlterNote       $06
000DED04 E701                       	dc.b	smpsNoAttack, $01
000DED06 E102                       	smpsAlterNote       $02
000DED08 E701                       	dc.b	smpsNoAttack, $01
000DED0A E106                       	smpsAlterNote       $06
000DED0C E701                       	dc.b	smpsNoAttack, $01
000DED0E E109                       	smpsAlterNote       $09
000DED10 E701                       	dc.b	smpsNoAttack, $01
000DED12 E10D                       	smpsAlterNote       $0D
000DED14 E701                       	dc.b	smpsNoAttack, $01
000DED16 E109                       	smpsAlterNote       $09
000DED18 E701                       	dc.b	smpsNoAttack, $01
000DED1A E103                       	smpsAlterNote       $03
000DED1C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DED20 E109                       	smpsAlterNote       $09
000DED22 C206                       	dc.b	nF5, $06
000DED24 E108                       	smpsAlterNote       $08
000DED26 C10E                       	dc.b	nE5, $0E
000DED28 E102                       	smpsAlterNote       $02
000DED2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DED2E E108                       	smpsAlterNote       $08
000DED30 E701                       	dc.b	smpsNoAttack, $01
000DED32 E10B                       	smpsAlterNote       $0B
000DED34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DED38 E105                       	smpsAlterNote       $05
000DED3A E701                       	dc.b	smpsNoAttack, $01
000DED3C E101                       	smpsAlterNote       $01
000DED3E E701                       	dc.b	smpsNoAttack, $01
000DED40 E102                       	smpsAlterNote       $02
000DED42 E701                       	dc.b	smpsNoAttack, $01
000DED44 E108                       	smpsAlterNote       $08
000DED46 E701                       	dc.b	smpsNoAttack, $01
000DED48 E10C                       	smpsAlterNote       $0C
000DED4A E701                       	dc.b	smpsNoAttack, $01
000DED4C E107                       	smpsAlterNote       $07
000DED4E BF0E                       	dc.b	nD5, $0E
000DED50 E101                       	smpsAlterNote       $01
000DED52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DED56 E107                       	smpsAlterNote       $07
000DED58 E701                       	dc.b	smpsNoAttack, $01
000DED5A E10A                       	smpsAlterNote       $0A
000DED5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DED60 E104                       	smpsAlterNote       $04
000DED62 E701                       	dc.b	smpsNoAttack, $01
000DED64 E100                       	smpsAlterNote       $00
000DED66 E701                       	dc.b	smpsNoAttack, $01
000DED68 E104                       	smpsAlterNote       $04
000DED6A E701                       	dc.b	smpsNoAttack, $01
000DED6C E107                       	smpsAlterNote       $07
000DED6E E701                       	dc.b	smpsNoAttack, $01
000DED70 E10B                       	smpsAlterNote       $0B
000DED72 E701                       	dc.b	smpsNoAttack, $01
000DED74 E107                       	smpsAlterNote       $07
000DED76 E701                       	dc.b	smpsNoAttack, $01
000DED78 E101                       	smpsAlterNote       $01
000DED7A E701                       	dc.b	smpsNoAttack, $01
000DED7C E100                       	smpsAlterNote       $00
000DED7E E701                       	dc.b	smpsNoAttack, $01
000DED80 E104                       	smpsAlterNote       $04
000DED82 E701                       	dc.b	smpsNoAttack, $01
000DED84 E10A                       	smpsAlterNote       $0A
000DED86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DED8A E107                       	smpsAlterNote       $07
000DED8C E701                       	dc.b	smpsNoAttack, $01
000DED8E E101                       	smpsAlterNote       $01
000DED90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DED94 E107                       	smpsAlterNote       $07
000DED96 E701                       	dc.b	smpsNoAttack, $01
000DED98 E10A                       	smpsAlterNote       $0A
000DED9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DED9E E104                       	smpsAlterNote       $04
000DEDA0 E701                       	dc.b	smpsNoAttack, $01
000DEDA2 E100                       	smpsAlterNote       $00
000DEDA4 E701                       	dc.b	smpsNoAttack, $01
000DEDA6 E101                       	smpsAlterNote       $01
000DEDA8 E701                       	dc.b	smpsNoAttack, $01
000DEDAA E107                       	smpsAlterNote       $07
000DEDAC E701                       	dc.b	smpsNoAttack, $01
000DEDAE E10B                       	smpsAlterNote       $0B
000DEDB0 E701                       	dc.b	smpsNoAttack, $01
000DEDB2 E107                       	smpsAlterNote       $07
000DEDB4 E701                       	dc.b	smpsNoAttack, $01
000DEDB6 E104                       	smpsAlterNote       $04
000DEDB8 E701                       	dc.b	smpsNoAttack, $01
000DEDBA E100                       	smpsAlterNote       $00
000DEDBC E701                       	dc.b	smpsNoAttack, $01
000DEDBE E104                       	smpsAlterNote       $04
000DEDC0 E701                       	dc.b	smpsNoAttack, $01
000DEDC2 E10A                       	smpsAlterNote       $0A
000DEDC4 E701                       	dc.b	smpsNoAttack, $01
000DEDC6 E10B                       	smpsAlterNote       $0B
000DEDC8 E701                       	dc.b	smpsNoAttack, $01
000DEDCA E107                       	smpsAlterNote       $07
000DEDCC E701                       	dc.b	smpsNoAttack, $01
000DEDCE E101                       	smpsAlterNote       $01
000DEDD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEDD4 E104                       	smpsAlterNote       $04
000DEDD6 E701                       	dc.b	smpsNoAttack, $01
000DEDD8 E10A                       	smpsAlterNote       $0A
000DEDDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEDDE E104                       	smpsAlterNote       $04
000DEDE0 E701                       	dc.b	smpsNoAttack, $01
000DEDE2 E101                       	smpsAlterNote       $01
000DEDE4 E701                       	dc.b	smpsNoAttack, $01
000DEDE8 E107                       	smpsAlterNote       $07
000DEDEA E6FF                       	smpsAlterVol        $FF
000DEDEC BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
000DEDF8 8004                       	dc.b	nRst, $04
000DEDFC E109                       	smpsAlterNote       $09
000DEDFE E602                       	smpsAlterVol        $02
000DEE00 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
000DEE06 E108                       	smpsAlterNote       $08
000DEE08 B502 8001                  	dc.b	nE4, $02, nRst, $01
000DEE0C E109                       	smpsAlterNote       $09
000DEE0E B60D                       	dc.b	nF4, $0D
000DEE10 E106                       	smpsAlterNote       $06
000DEE12 E701                       	dc.b	smpsNoAttack, $01
000DEE14 E102                       	smpsAlterNote       $02
000DEE16 E701                       	dc.b	smpsNoAttack, $01
000DEE18 E106                       	smpsAlterNote       $06
000DEE1A E701                       	dc.b	smpsNoAttack, $01
000DEE1C E109                       	smpsAlterNote       $09
000DEE1E E701                       	dc.b	smpsNoAttack, $01
000DEE20 E10D                       	smpsAlterNote       $0D
000DEE22 E701                       	dc.b	smpsNoAttack, $01
000DEE24 E109                       	smpsAlterNote       $09
000DEE26 E701                       	dc.b	smpsNoAttack, $01
000DEE28 E103                       	smpsAlterNote       $03
000DEE2A E701                       	dc.b	smpsNoAttack, $01
000DEE2C E102                       	smpsAlterNote       $02
000DEE2E E701                       	dc.b	smpsNoAttack, $01
000DEE30 E106                       	smpsAlterNote       $06
000DEE32 E701                       	dc.b	smpsNoAttack, $01
000DEE34 E10C                       	smpsAlterNote       $0C
000DEE36 E701                       	dc.b	smpsNoAttack, $01
000DEE38 E10D                       	smpsAlterNote       $0D
000DEE3A 8001                       	dc.b	nRst, $01
000DEE3C E109                       	smpsAlterNote       $09
000DEE3E B80D                       	dc.b	nG4, $0D
000DEE40 E106                       	smpsAlterNote       $06
000DEE42 E701                       	dc.b	smpsNoAttack, $01
000DEE44 E102                       	smpsAlterNote       $02
000DEE46 E701                       	dc.b	smpsNoAttack, $01
000DEE48 E106                       	smpsAlterNote       $06
000DEE4A E701                       	dc.b	smpsNoAttack, $01
000DEE4C E10C                       	smpsAlterNote       $0C
000DEE4E E701                       	dc.b	smpsNoAttack, $01
000DEE50 E10D                       	smpsAlterNote       $0D
000DEE52 E701                       	dc.b	smpsNoAttack, $01
000DEE54 E109                       	smpsAlterNote       $09
000DEE56 E701                       	dc.b	smpsNoAttack, $01
000DEE58 E103                       	smpsAlterNote       $03
000DEE5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEE5E E106                       	smpsAlterNote       $06
000DEE60 E701                       	dc.b	smpsNoAttack, $01
000DEE62 E10C                       	smpsAlterNote       $0C
000DEE64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEE68 E106                       	smpsAlterNote       $06
000DEE6A E701                       	dc.b	smpsNoAttack, $01
000DEE6C E103                       	smpsAlterNote       $03
000DEE6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEE72 E109                       	smpsAlterNote       $09
000DEE74 E701                       	dc.b	smpsNoAttack, $01
000DEE76 E10D                       	smpsAlterNote       $0D
000DEE78 E701                       	dc.b	smpsNoAttack, $01
000DEE7A E10C                       	smpsAlterNote       $0C
000DEE7C E701                       	dc.b	smpsNoAttack, $01
000DEE7E E109                       	smpsAlterNote       $09
000DEE80 8001                       	dc.b	nRst, $01
000DEE82 E10B                       	smpsAlterNote       $0B
000DEE84 BA03                       	dc.b	nA4, $03
000DEE86 E10C                       	smpsAlterNote       $0C
000DEE88 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
000DEE8C E10B                       	smpsAlterNote       $0B
000DEE8E BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
000DEE94 E10C                       	smpsAlterNote       $0C
000DEE96 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000DEE9A E10B                       	smpsAlterNote       $0B
000DEE9C C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
000DEEA2 E10C                       	smpsAlterNote       $0C
000DEEA4 D303                       	dc.b	nBb6, $03
000DEEA6 E10B                       	smpsAlterNote       $0B
000DEEA8 D20D                       	dc.b	nA6, $0D
000DEEAA E108                       	smpsAlterNote       $08
000DEEAC E701                       	dc.b	smpsNoAttack, $01
000DEEAE E104                       	smpsAlterNote       $04
000DEEB0 E701                       	dc.b	smpsNoAttack, $01
000DEEB2 E105                       	smpsAlterNote       $05
000DEEB4 E701                       	dc.b	smpsNoAttack, $01
000DEEB6 E10B                       	smpsAlterNote       $0B
000DEEB8 E701                       	dc.b	smpsNoAttack, $01
000DEEBA E10F                       	smpsAlterNote       $0F
000DEEBC E701                       	dc.b	smpsNoAttack, $01
000DEEBE E10B                       	smpsAlterNote       $0B
000DEEC0 E701                       	dc.b	smpsNoAttack, $01
000DEEC2 E108                       	smpsAlterNote       $08
000DEEC4 E701                       	dc.b	smpsNoAttack, $01
000DEEC6 E104                       	smpsAlterNote       $04
000DEEC8 E701                       	dc.b	smpsNoAttack, $01
000DEECA E108                       	smpsAlterNote       $08
000DEECC E701                       	dc.b	smpsNoAttack, $01
000DEECE E10E                       	smpsAlterNote       $0E
000DEED0 E701                       	dc.b	smpsNoAttack, $01
000DEED2 E10F                       	smpsAlterNote       $0F
000DEED4 E701                       	dc.b	smpsNoAttack, $01
000DEED6 E10B                       	smpsAlterNote       $0B
000DEED8 E701                       	dc.b	smpsNoAttack, $01
000DEEDA E105                       	smpsAlterNote       $05
000DEEDC E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
000DEEE2 E109                       	smpsAlterNote       $09
000DEEE4 CE07                       	dc.b	nF6, $07
000DEEE6 E108                       	smpsAlterNote       $08
000DEEE8 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000DEEEC E109                       	smpsAlterNote       $09
000DEEEE CE03 8001                  	dc.b	nF6, $03, nRst, $01
000DEEF2 E108                       	smpsAlterNote       $08
000DEEF4 CC0D                       	dc.b	nEb6, $0D
000DEEF6 E102                       	smpsAlterNote       $02
000DEEF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEEFC E108                       	smpsAlterNote       $08
000DEEFE E701                       	dc.b	smpsNoAttack, $01
000DEF00 E10B                       	smpsAlterNote       $0B
000DEF02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEF06 E105                       	smpsAlterNote       $05
000DEF08 E701                       	dc.b	smpsNoAttack, $01
000DEF0A E101                       	smpsAlterNote       $01
000DEF0C E701                       	dc.b	smpsNoAttack, $01
000DEF0E E102                       	smpsAlterNote       $02
000DEF10 E701                       	dc.b	smpsNoAttack, $01
000DEF12 E108                       	smpsAlterNote       $08
000DEF14 E701                       	dc.b	smpsNoAttack, $01
000DEF16 E10C                       	smpsAlterNote       $0C
000DEF18 E701                       	dc.b	smpsNoAttack, $01
000DEF1A E108                       	smpsAlterNote       $08
000DEF1C E701                       	dc.b	smpsNoAttack, $01
000DEF1E E105                       	smpsAlterNote       $05
000DEF20 E701                       	dc.b	smpsNoAttack, $01
000DEF22 E101                       	smpsAlterNote       $01
000DEF24 E701                       	dc.b	smpsNoAttack, $01
000DEF26 E105                       	smpsAlterNote       $05
000DEF28 E701                       	dc.b	smpsNoAttack, $01
000DEF2A E10B                       	smpsAlterNote       $0B
000DEF2C E701                       	dc.b	smpsNoAttack, $01
000DEF2E E10C                       	smpsAlterNote       $0C
000DEF30 E701                       	dc.b	smpsNoAttack, $01
000DEF32 E108                       	smpsAlterNote       $08
000DEF34 E701                       	dc.b	smpsNoAttack, $01
000DEF36 E107                       	smpsAlterNote       $07
000DEF38 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
000DEF42 E10B                       	smpsAlterNote       $0B
000DEF44 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000DEF4E E109                       	smpsAlterNote       $09
000DEF50 C203                       	dc.b	nF5, $03
000DEF52 E108                       	smpsAlterNote       $08
000DEF54 C103 8001                  	dc.b	nE5, $03, nRst, $01
000DEF58 E109                       	smpsAlterNote       $09
000DEF5A C20D                       	dc.b	nF5, $0D
000DEF5C E108                       	smpsAlterNote       $08
000DEF5E C10E                       	dc.b	nE5, $0E
000DEF60 E107                       	smpsAlterNote       $07
000DEF62 BF0D                       	dc.b	nD5, $0D
000DEF64 E104                       	smpsAlterNote       $04
000DEF66 E701                       	dc.b	smpsNoAttack, $01
000DEF68 E100                       	smpsAlterNote       $00
000DEF6A E701                       	dc.b	smpsNoAttack, $01
000DEF6C E104                       	smpsAlterNote       $04
000DEF6E E701                       	dc.b	smpsNoAttack, $01
000DEF70 E107                       	smpsAlterNote       $07
000DEF72 E701                       	dc.b	smpsNoAttack, $01
000DEF74 E10B                       	smpsAlterNote       $0B
000DEF76 E701                       	dc.b	smpsNoAttack, $01
000DEF78 E107                       	smpsAlterNote       $07
000DEF7A E701                       	dc.b	smpsNoAttack, $01
000DEF7C E101                       	smpsAlterNote       $01
000DEF7E E701                       	dc.b	smpsNoAttack, $01
000DEF80 E100                       	smpsAlterNote       $00
000DEF82 E701                       	dc.b	smpsNoAttack, $01
000DEF84 E104                       	smpsAlterNote       $04
000DEF86 E701                       	dc.b	smpsNoAttack, $01
000DEF88 E10A                       	smpsAlterNote       $0A
000DEF8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEF8E E107                       	smpsAlterNote       $07
000DEF90 E701                       	dc.b	smpsNoAttack, $01
000DEF92 E101                       	smpsAlterNote       $01
000DEF94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEF98 E107                       	smpsAlterNote       $07
000DEF9A E701                       	dc.b	smpsNoAttack, $01
000DEF9C E10A                       	smpsAlterNote       $0A
000DEF9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEFA2 E104                       	smpsAlterNote       $04
000DEFA4 E701                       	dc.b	smpsNoAttack, $01
000DEFA6 E100                       	smpsAlterNote       $00
000DEFA8 E701                       	dc.b	smpsNoAttack, $01
000DEFAA E101                       	smpsAlterNote       $01
000DEFAC E701                       	dc.b	smpsNoAttack, $01
000DEFAE E107                       	smpsAlterNote       $07
000DEFB0 E701                       	dc.b	smpsNoAttack, $01
000DEFB2 E10B                       	smpsAlterNote       $0B
000DEFB4 E701                       	dc.b	smpsNoAttack, $01
000DEFB6 E107                       	smpsAlterNote       $07
000DEFB8 E701                       	dc.b	smpsNoAttack, $01
000DEFBA E104                       	smpsAlterNote       $04
000DEFBC E701                       	dc.b	smpsNoAttack, $01
000DEFBE E100                       	smpsAlterNote       $00
000DEFC0 E701                       	dc.b	smpsNoAttack, $01
000DEFC2 E104                       	smpsAlterNote       $04
000DEFC4 E701                       	dc.b	smpsNoAttack, $01
000DEFC6 E10A                       	smpsAlterNote       $0A
000DEFC8 E701                       	dc.b	smpsNoAttack, $01
000DEFCA E10B                       	smpsAlterNote       $0B
000DEFCC E701                       	dc.b	smpsNoAttack, $01
000DEFCE E107                       	smpsAlterNote       $07
000DEFD0 E701                       	dc.b	smpsNoAttack, $01
000DEFD2 E101                       	smpsAlterNote       $01
000DEFD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEFD8 E104                       	smpsAlterNote       $04
000DEFDA E701                       	dc.b	smpsNoAttack, $01
000DEFDC E10A                       	smpsAlterNote       $0A
000DEFDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEFE2 E104                       	smpsAlterNote       $04
000DEFE4 E701                       	dc.b	smpsNoAttack, $01
000DEFE6 E101                       	smpsAlterNote       $01
000DEFE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEFEC E107                       	smpsAlterNote       $07
000DEFEE E701                       	dc.b	smpsNoAttack, $01
000DEFF0 E10B                       	smpsAlterNote       $0B
000DEFF2 E701                       	dc.b	smpsNoAttack, $01
000DEFF4 E10A                       	smpsAlterNote       $0A
000DEFF6 E701                       	dc.b	smpsNoAttack, $01
000DEFF8 E104                       	smpsAlterNote       $04
000DEFFA E701                       	dc.b	smpsNoAttack, $01
000DEFFC E100                       	smpsAlterNote       $00
000DEFFE E701                       	dc.b	smpsNoAttack, $01
000DF000 E104                       	smpsAlterNote       $04
000DF002 E701                       	dc.b	smpsNoAttack, $01
000DF004 E107                       	smpsAlterNote       $07
000DF006 E701                       	dc.b	smpsNoAttack, $01
000DF008 E10B                       	smpsAlterNote       $0B
000DF00A E701                       	dc.b	smpsNoAttack, $01
000DF00C E107                       	smpsAlterNote       $07
000DF00E E701                       	dc.b	smpsNoAttack, $01
000DF010 E101                       	smpsAlterNote       $01
000DF012 E701                       	dc.b	smpsNoAttack, $01
000DF014 E100                       	smpsAlterNote       $00
000DF016 E701                       	dc.b	smpsNoAttack, $01
000DF018 E104                       	smpsAlterNote       $04
000DF01A E701                       	dc.b	smpsNoAttack, $01
000DF01C E10A                       	smpsAlterNote       $0A
000DF01E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF022 E107                       	smpsAlterNote       $07
000DF024 E701                       	dc.b	smpsNoAttack, $01
000DF026 E101                       	smpsAlterNote       $01
000DF028 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF02C E107                       	smpsAlterNote       $07
000DF02E E701                       	dc.b	smpsNoAttack, $01
000DF030 E10A                       	smpsAlterNote       $0A
000DF032 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF036 E104                       	smpsAlterNote       $04
000DF038 E701                       	dc.b	smpsNoAttack, $01
000DF03A E100                       	smpsAlterNote       $00
000DF03C E701                       	dc.b	smpsNoAttack, $01
000DF03E E101                       	smpsAlterNote       $01
000DF040 E701                       	dc.b	smpsNoAttack, $01
000DF042 E107                       	smpsAlterNote       $07
000DF044 E701                       	dc.b	smpsNoAttack, $01
000DF046 E10B                       	smpsAlterNote       $0B
000DF048 E701                       	dc.b	smpsNoAttack, $01
000DF04A E107                       	smpsAlterNote       $07
000DF04C E701                       	dc.b	smpsNoAttack, $01
000DF04E E104                       	smpsAlterNote       $04
000DF050 E701                       	dc.b	smpsNoAttack, $01
000DF052 E100                       	smpsAlterNote       $00
000DF054 E701                       	dc.b	smpsNoAttack, $01
000DF056 E101                       	smpsAlterNote       $01
000DF058 8001                       	dc.b	nRst, $01
000DF05A E109                       	smpsAlterNote       $09
000DF05C C20D                       	dc.b	nF5, $0D
000DF05E E106                       	smpsAlterNote       $06
000DF060 E701                       	dc.b	smpsNoAttack, $01
000DF062 E102                       	smpsAlterNote       $02
000DF064 E701                       	dc.b	smpsNoAttack, $01
000DF066 E106                       	smpsAlterNote       $06
000DF068 E701                       	dc.b	smpsNoAttack, $01
000DF06A E10C                       	smpsAlterNote       $0C
000DF06C E701                       	dc.b	smpsNoAttack, $01
000DF06E E10D                       	smpsAlterNote       $0D
000DF070 E701                       	dc.b	smpsNoAttack, $01
000DF072 E109                       	smpsAlterNote       $09
000DF074 E701                       	dc.b	smpsNoAttack, $01
000DF076 E103                       	smpsAlterNote       $03
000DF078 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF07C E106                       	smpsAlterNote       $06
000DF07E E701                       	dc.b	smpsNoAttack, $01
000DF080 E10C                       	smpsAlterNote       $0C
000DF082 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF086 E106                       	smpsAlterNote       $06
000DF088 E701                       	dc.b	smpsNoAttack, $01
000DF08A E103                       	smpsAlterNote       $03
000DF08C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF090 E109                       	smpsAlterNote       $09
000DF092 E701                       	dc.b	smpsNoAttack, $01
000DF094 E10D                       	smpsAlterNote       $0D
000DF096 E701                       	dc.b	smpsNoAttack, $01
000DF098 E10C                       	smpsAlterNote       $0C
000DF09A E701                       	dc.b	smpsNoAttack, $01
000DF09C E109                       	smpsAlterNote       $09
000DF09E 8001                       	dc.b	nRst, $01
000DF0A0 E108                       	smpsAlterNote       $08
000DF0A2 C10D                       	dc.b	nE5, $0D
000DF0A4 E109                       	smpsAlterNote       $09
000DF0A6 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
000DF0AA E108                       	smpsAlterNote       $08
000DF0AC C10D                       	dc.b	nE5, $0D
000DF0AE E102                       	smpsAlterNote       $02
000DF0B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF0B4 E105                       	smpsAlterNote       $05
000DF0B6 E701                       	dc.b	smpsNoAttack, $01
000DF0B8 E108                       	smpsAlterNote       $08
000DF0BA 8001                       	dc.b	nRst, $01
000DF0BC E107                       	smpsAlterNote       $07
000DF0BE BF0D                       	dc.b	nD5, $0D
000DF0C0 E108                       	smpsAlterNote       $08
000DF0C2 C107                       	dc.b	nE5, $07
000DF0C4 E109                       	smpsAlterNote       $09
000DF0C6 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
000DF0CC E10B                       	smpsAlterNote       $0B
000DF0CE C603                       	dc.b	nA5, $03
000DF0D0 E10C                       	smpsAlterNote       $0C
000DF0D2 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
000DF0D8 E10B                       	smpsAlterNote       $0B
000DF0DA C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
000DF0E0 E109                       	smpsAlterNote       $09
000DF0E2 D003                       	dc.b	nG6, $03
000DF0E4 E108                       	smpsAlterNote       $08
000DF0E6 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000DF0EA E10B                       	smpsAlterNote       $0B
000DF0EC C601 8001                  	dc.b	nA5, $01, nRst, $01
000DF0F0 E108                       	smpsAlterNote       $08
000DF0F2 C102                       	dc.b	nE5, $02
000DF0F6 E10C                       	smpsAlterNote       $0C
000DF0F8 E6FB                       	smpsAlterVol        $FB
000DF0FA A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
000DF106 8001                       	dc.b	nRst, $01
000DF108 E10B                       	smpsAlterNote       $0B
000DF10A A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000DF112 E107                       	smpsAlterNote       $07
000DF114 A706 8001                  	dc.b	nD3, $06, nRst, $01
000DF118 E10B                       	smpsAlterNote       $0B
000DF11A A203                       	dc.b	nA2, $03
000DF11C E109                       	smpsAlterNote       $09
000DF11E AA03 8001                  	dc.b	nF3, $03, nRst, $01
000DF122 E108                       	smpsAlterNote       $08
000DF124 A906                       	dc.b	nE3, $06
000DF126 E107                       	smpsAlterNote       $07
000DF128 A703 8001                  	dc.b	nD3, $03, nRst, $01
000DF12C E106                       	smpsAlterNote       $06
000DF12E A503                       	dc.b	nC3, $03
000DF130 E10C                       	smpsAlterNote       $0C
000DF132 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000DF136 E10B                       	smpsAlterNote       $0B
000DF138 A203 8004                  	dc.b	nA2, $03, nRst, $04
000DF13C E11B                       	smpsAlterNote       $1B
000DF13E C401                       	dc.b	nG5, $01
000DF140 E1F4                       	smpsAlterNote       $F4
000DF142 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000DF145 E106                       	smpsAlterNote       $06
000DF147 E701                       	dc.b	smpsNoAttack, $01
000DF149 E10F                       	smpsAlterNote       $0F
000DF14B E701                       	dc.b	smpsNoAttack, $01
000DF14D E1E4                       	smpsAlterNote       $E4
000DF14F E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000DF152 E1F6                       	smpsAlterNote       $F6
000DF154 E701                       	dc.b	smpsNoAttack, $01
000DF156 E108                       	smpsAlterNote       $08
000DF158 E701                       	dc.b	smpsNoAttack, $01
000DF15A E10B                       	smpsAlterNote       $0B
000DF15C E706                       	dc.b	smpsNoAttack, $06
000DF15E E105                       	smpsAlterNote       $05
000DF160 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF164 E108                       	smpsAlterNote       $08
000DF166 E701                       	dc.b	smpsNoAttack, $01
000DF168 E10E                       	smpsAlterNote       $0E
000DF16A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF16E E108                       	smpsAlterNote       $08
000DF170 E701                       	dc.b	smpsNoAttack, $01
000DF172 E105                       	smpsAlterNote       $05
000DF174 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF178 E10B                       	smpsAlterNote       $0B
000DF17A E701                       	dc.b	smpsNoAttack, $01
000DF17C E10F                       	smpsAlterNote       $0F
000DF17E E701                       	dc.b	smpsNoAttack, $01
000DF180 E10E                       	smpsAlterNote       $0E
000DF182 E701                       	dc.b	smpsNoAttack, $01
000DF184 E108                       	smpsAlterNote       $08
000DF186 E701                       	dc.b	smpsNoAttack, $01
000DF188 E104                       	smpsAlterNote       $04
000DF18A E701                       	dc.b	smpsNoAttack, $01
000DF18C E108                       	smpsAlterNote       $08
000DF18E E701                       	dc.b	smpsNoAttack, $01
000DF190 E10B                       	smpsAlterNote       $0B
000DF192 E701                       	dc.b	smpsNoAttack, $01
000DF194 E10F                       	smpsAlterNote       $0F
000DF196 E701                       	dc.b	smpsNoAttack, $01
000DF198 E10B                       	smpsAlterNote       $0B
000DF19A E701                       	dc.b	smpsNoAttack, $01
000DF19C E105                       	smpsAlterNote       $05
000DF19E E701                       	dc.b	smpsNoAttack, $01
000DF1A0 E104                       	smpsAlterNote       $04
000DF1A2 E701                       	dc.b	smpsNoAttack, $01
000DF1A4 E108                       	smpsAlterNote       $08
000DF1A6 E701                       	dc.b	smpsNoAttack, $01
000DF1A8 E10E                       	smpsAlterNote       $0E
000DF1AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF1AE E10B                       	smpsAlterNote       $0B
000DF1B0 E701                       	dc.b	smpsNoAttack, $01
000DF1B2 E105                       	smpsAlterNote       $05
000DF1B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF1B8 E10B                       	smpsAlterNote       $0B
000DF1BA E701                       	dc.b	smpsNoAttack, $01
000DF1BC E10E                       	smpsAlterNote       $0E
000DF1BE E701                       	dc.b	smpsNoAttack, $01
000DF1C0 E10F                       	smpsAlterNote       $0F
000DF1C2 8001                       	dc.b	nRst, $01
000DF1C4 E109                       	smpsAlterNote       $09
000DF1C6 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000DF1CC E108                       	smpsAlterNote       $08
000DF1CE C101 8001                  	dc.b	nE5, $01, nRst, $01
000DF1D2 E109                       	smpsAlterNote       $09
000DF1D4 C202                       	dc.b	nF5, $02
000DF1D6 E108                       	smpsAlterNote       $08
000DF1D8 C102                       	dc.b	nE5, $02
000DF1DA E107                       	smpsAlterNote       $07
000DF1DC BF02 8001                  	dc.b	nD5, $02, nRst, $01
000DF1E0 E108                       	smpsAlterNote       $08
000DF1E2 C101 8001                  	dc.b	nE5, $01, nRst, $01
000DF1E6 E107                       	smpsAlterNote       $07
000DF1E8 BF02                       	dc.b	nD5, $02
000DF1EA E106                       	smpsAlterNote       $06
000DF1EC BD02 8001                  	dc.b	nC5, $02, nRst, $01
000DF1F0 E107                       	smpsAlterNote       $07
000DF1F2 BF01 8001                  	dc.b	nD5, $01, nRst, $01
000DF1F6 E106                       	smpsAlterNote       $06
000DF1F8 BD02                       	dc.b	nC5, $02
000DF1FA E10C                       	smpsAlterNote       $0C
000DF1FC BB02                       	dc.b	nBb4, $02
000DF1FE E106                       	smpsAlterNote       $06
000DF200 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000DF204 E10C                       	smpsAlterNote       $0C
000DF206 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000DF20A E10B                       	smpsAlterNote       $0B
000DF20C BA02                       	dc.b	nA4, $02
000DF20E E10C                       	smpsAlterNote       $0C
000DF210 BB02                       	dc.b	nBb4, $02
000DF212 E10B                       	smpsAlterNote       $0B
000DF214 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000DF21E E108                       	smpsAlterNote       $08
000DF220 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
000DF228 E107                       	smpsAlterNote       $07
000DF22A BE02                       	dc.b	nCs5, $02
000DF22C E10B                       	smpsAlterNote       $0B
000DF22E BA02                       	dc.b	nA4, $02
000DF230 E109                       	smpsAlterNote       $09
000DF232 B802 8001                  	dc.b	nG4, $02, nRst, $01
000DF236 E108                       	smpsAlterNote       $08
000DF238 B501 8001                  	dc.b	nE4, $01, nRst, $01
000DF23C E10B                       	smpsAlterNote       $0B
000DF23E AE02                       	dc.b	nA3, $02
000DF240 E10C                       	smpsAlterNote       $0C
000DF242 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
000DF24E E10B                       	smpsAlterNote       $0B
000DF250 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000DF258 E107                       	smpsAlterNote       $07
000DF25A A706 8001                  	dc.b	nD3, $06, nRst, $01
000DF25E E10B                       	smpsAlterNote       $0B
000DF260 A203                       	dc.b	nA2, $03
000DF262 E109                       	smpsAlterNote       $09
000DF264 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000DF268 E108                       	smpsAlterNote       $08
000DF26A A906 8001                  	dc.b	nE3, $06, nRst, $01
000DF26E E107                       	smpsAlterNote       $07
000DF270 A702 8001                  	dc.b	nD3, $02, nRst, $01
000DF274 E106                       	smpsAlterNote       $06
000DF276 A503                       	dc.b	nC3, $03
000DF278 E10C                       	smpsAlterNote       $0C
000DF27A A303 8001                  	dc.b	nBb2, $03, nRst, $01
000DF280 E107                       	smpsAlterNote       $07
000DF282 B20D                       	dc.b	nCs4, $0D
000DF284 E104                       	smpsAlterNote       $04
000DF286 E701                       	dc.b	smpsNoAttack, $01
000DF288 E100                       	smpsAlterNote       $00
000DF28A E701                       	dc.b	smpsNoAttack, $01
000DF28C E104                       	smpsAlterNote       $04
000DF28E E701                       	dc.b	smpsNoAttack, $01
000DF290 E10A                       	smpsAlterNote       $0A
000DF292 E701                       	dc.b	smpsNoAttack, $01
000DF294 E10B                       	smpsAlterNote       $0B
000DF296 E701                       	dc.b	smpsNoAttack, $01
000DF298 E107                       	smpsAlterNote       $07
000DF29A E701                       	dc.b	smpsNoAttack, $01
000DF29C E101                       	smpsAlterNote       $01
000DF29E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF2A2 E104                       	smpsAlterNote       $04
000DF2A4 E701                       	dc.b	smpsNoAttack, $01
000DF2A6 E10A                       	smpsAlterNote       $0A
000DF2A8 E701                       	dc.b	smpsNoAttack, $01
000DF2AA E10B                       	smpsAlterNote       $0B
000DF2AC 8001                       	dc.b	nRst, $01
000DF2AE E107                       	smpsAlterNote       $07
000DF2B0 B30D                       	dc.b	nD4, $0D
000DF2B2 E104                       	smpsAlterNote       $04
000DF2B4 E701                       	dc.b	smpsNoAttack, $01
000DF2B6 E100                       	smpsAlterNote       $00
000DF2B8 E701                       	dc.b	smpsNoAttack, $01
000DF2BA E104                       	smpsAlterNote       $04
000DF2BC E701                       	dc.b	smpsNoAttack, $01
000DF2BE E10A                       	smpsAlterNote       $0A
000DF2C0 E701                       	dc.b	smpsNoAttack, $01
000DF2C2 E10B                       	smpsAlterNote       $0B
000DF2C4 E701                       	dc.b	smpsNoAttack, $01
000DF2C6 E107                       	smpsAlterNote       $07
000DF2C8 E701                       	dc.b	smpsNoAttack, $01
000DF2CA E101                       	smpsAlterNote       $01
000DF2CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF2D0 E104                       	smpsAlterNote       $04
000DF2D2 E701                       	dc.b	smpsNoAttack, $01
000DF2D4 E10A                       	smpsAlterNote       $0A
000DF2D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF2DA E104                       	smpsAlterNote       $04
000DF2DC E701                       	dc.b	smpsNoAttack, $01
000DF2DE E101                       	smpsAlterNote       $01
000DF2E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF2E4 E107                       	smpsAlterNote       $07
000DF2E6 E701                       	dc.b	smpsNoAttack, $01
000DF2E8 E10B                       	smpsAlterNote       $0B
000DF2EA E701                       	dc.b	smpsNoAttack, $01
000DF2EC E10A                       	smpsAlterNote       $0A
000DF2EE E701                       	dc.b	smpsNoAttack, $01
000DF2F0 E107                       	smpsAlterNote       $07
000DF2F2 8001                       	dc.b	nRst, $01
000DF2F4 E108                       	smpsAlterNote       $08
000DF2F6 B50D                       	dc.b	nE4, $0D
000DF2F8 E102                       	smpsAlterNote       $02
000DF2FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF2FE E105                       	smpsAlterNote       $05
000DF300 E701                       	dc.b	smpsNoAttack, $01
000DF302 E10B                       	smpsAlterNote       $0B
000DF304 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF308 E105                       	smpsAlterNote       $05
000DF30A E701                       	dc.b	smpsNoAttack, $01
000DF30C E102                       	smpsAlterNote       $02
000DF30E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF312 E108                       	smpsAlterNote       $08
000DF314 E701                       	dc.b	smpsNoAttack, $01
000DF316 E10C                       	smpsAlterNote       $0C
000DF318 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DF31C E107                       	smpsAlterNote       $07
000DF31E B30D                       	dc.b	nD4, $0D
000DF320 E101                       	smpsAlterNote       $01
000DF322 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF326 E104                       	smpsAlterNote       $04
000DF328 E701                       	dc.b	smpsNoAttack, $01
000DF32A E10A                       	smpsAlterNote       $0A
000DF32C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF330 E104                       	smpsAlterNote       $04
000DF332 E701                       	dc.b	smpsNoAttack, $01
000DF334 E101                       	smpsAlterNote       $01
000DF336 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF33A E107                       	smpsAlterNote       $07
000DF33C E701                       	dc.b	smpsNoAttack, $01
000DF33E E10B                       	smpsAlterNote       $0B
000DF340 E701                       	dc.b	smpsNoAttack, $01
000DF342 E10A                       	smpsAlterNote       $0A
000DF344 E701                       	dc.b	smpsNoAttack, $01
000DF346 E104                       	smpsAlterNote       $04
000DF348 E701                       	dc.b	smpsNoAttack, $01
000DF34A E100                       	smpsAlterNote       $00
000DF34C E701                       	dc.b	smpsNoAttack, $01
000DF34E E104                       	smpsAlterNote       $04
000DF350 E701                       	dc.b	smpsNoAttack, $01
000DF352 E107                       	smpsAlterNote       $07
000DF354 E701                       	dc.b	smpsNoAttack, $01
000DF356 E10B                       	smpsAlterNote       $0B
000DF358 E701                       	dc.b	smpsNoAttack, $01
000DF35A E107                       	smpsAlterNote       $07
000DF35C E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
000DF360 E101                       	smpsAlterNote       $01
000DF362 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF366 E107                       	smpsAlterNote       $07
000DF368 E701                       	dc.b	smpsNoAttack, $01
000DF36A E10A                       	smpsAlterNote       $0A
000DF36C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF370 E104                       	smpsAlterNote       $04
000DF372 E701                       	dc.b	smpsNoAttack, $01
000DF374 E100                       	smpsAlterNote       $00
000DF376 E701                       	dc.b	smpsNoAttack, $01
000DF378 E101                       	smpsAlterNote       $01
000DF37A E701                       	dc.b	smpsNoAttack, $01
000DF37C E107                       	smpsAlterNote       $07
000DF37E E701                       	dc.b	smpsNoAttack, $01
000DF380 E10B                       	smpsAlterNote       $0B
000DF382 E701                       	dc.b	smpsNoAttack, $01
000DF384 E107                       	smpsAlterNote       $07
000DF386 B30E                       	dc.b	nD4, $0E
000DF388 E101                       	smpsAlterNote       $01
000DF38A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF38E E107                       	smpsAlterNote       $07
000DF390 E701                       	dc.b	smpsNoAttack, $01
000DF392 E10A                       	smpsAlterNote       $0A
000DF394 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF398 E104                       	smpsAlterNote       $04
000DF39A E701                       	dc.b	smpsNoAttack, $01
000DF39C E100                       	smpsAlterNote       $00
000DF39E E701                       	dc.b	smpsNoAttack, $01
000DF3A0 E101                       	smpsAlterNote       $01
000DF3A2 E701                       	dc.b	smpsNoAttack, $01
000DF3A4 E107                       	smpsAlterNote       $07
000DF3A6 E701                       	dc.b	smpsNoAttack, $01
000DF3A8 E10B                       	smpsAlterNote       $0B
000DF3AA E701                       	dc.b	smpsNoAttack, $01
000DF3AC E107                       	smpsAlterNote       $07
000DF3AE E701                       	dc.b	smpsNoAttack, $01
000DF3B0 E104                       	smpsAlterNote       $04
000DF3B2 E701                       	dc.b	smpsNoAttack, $01
000DF3B4 E100                       	smpsAlterNote       $00
000DF3B6 E701                       	dc.b	smpsNoAttack, $01
000DF3B8 E104                       	smpsAlterNote       $04
000DF3BA E701                       	dc.b	smpsNoAttack, $01
000DF3BC E10A                       	smpsAlterNote       $0A
000DF3BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF3C2 E107                       	smpsAlterNote       $07
000DF3C4 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000DF3C8 E104                       	smpsAlterNote       $04
000DF3CA E701                       	dc.b	smpsNoAttack, $01
000DF3CC E100                       	smpsAlterNote       $00
000DF3CE E701                       	dc.b	smpsNoAttack, $01
000DF3D0 E101                       	smpsAlterNote       $01
000DF3D2 E701                       	dc.b	smpsNoAttack, $01
000DF3D4 E107                       	smpsAlterNote       $07
000DF3D6 E701                       	dc.b	smpsNoAttack, $01
000DF3D8 E10B                       	smpsAlterNote       $0B
000DF3DA E701                       	dc.b	smpsNoAttack, $01
000DF3DC E107                       	smpsAlterNote       $07
000DF3DE E701                       	dc.b	smpsNoAttack, $01
000DF3E0 E104                       	smpsAlterNote       $04
000DF3E2 E701                       	dc.b	smpsNoAttack, $01
000DF3E4 E100                       	smpsAlterNote       $00
000DF3E6 E701                       	dc.b	smpsNoAttack, $01
000DF3E8 E104                       	smpsAlterNote       $04
000DF3EA E701                       	dc.b	smpsNoAttack, $01
000DF3EC E10A                       	smpsAlterNote       $0A
000DF3EE E701                       	dc.b	smpsNoAttack, $01
000DF3F0 E10B                       	smpsAlterNote       $0B
000DF3F2 E701                       	dc.b	smpsNoAttack, $01
000DF3F6 E6FF                       	smpsAlterVol        $FF
000DF3F8 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
000DF404 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
000DF40C E109                       	smpsAlterNote       $09
000DF40E E601                       	smpsAlterVol        $01
000DF410 B60D                       	dc.b	nF4, $0D
000DF412 E106                       	smpsAlterNote       $06
000DF414 E701                       	dc.b	smpsNoAttack, $01
000DF416 E102                       	smpsAlterNote       $02
000DF418 E701                       	dc.b	smpsNoAttack, $01
000DF41A E106                       	smpsAlterNote       $06
000DF41C E701                       	dc.b	smpsNoAttack, $01
000DF41E E109                       	smpsAlterNote       $09
000DF420 E701                       	dc.b	smpsNoAttack, $01
000DF422 E10D                       	smpsAlterNote       $0D
000DF424 E701                       	dc.b	smpsNoAttack, $01
000DF426 E109                       	smpsAlterNote       $09
000DF428 E701                       	dc.b	smpsNoAttack, $01
000DF42A E103                       	smpsAlterNote       $03
000DF42C E701                       	dc.b	smpsNoAttack, $01
000DF42E E102                       	smpsAlterNote       $02
000DF430 E701                       	dc.b	smpsNoAttack, $01
000DF432 E106                       	smpsAlterNote       $06
000DF434 E701                       	dc.b	smpsNoAttack, $01
000DF436 E10C                       	smpsAlterNote       $0C
000DF438 E701                       	dc.b	smpsNoAttack, $01
000DF43A E10D                       	smpsAlterNote       $0D
000DF43C 8001                       	dc.b	nRst, $01
000DF43E E109                       	smpsAlterNote       $09
000DF440 B80D                       	dc.b	nG4, $0D
000DF442 E106                       	smpsAlterNote       $06
000DF444 E701                       	dc.b	smpsNoAttack, $01
000DF446 E102                       	smpsAlterNote       $02
000DF448 E701                       	dc.b	smpsNoAttack, $01
000DF44A E106                       	smpsAlterNote       $06
000DF44C E701                       	dc.b	smpsNoAttack, $01
000DF44E E109                       	smpsAlterNote       $09
000DF450 E701                       	dc.b	smpsNoAttack, $01
000DF452 E10D                       	smpsAlterNote       $0D
000DF454 E701                       	dc.b	smpsNoAttack, $01
000DF456 E109                       	smpsAlterNote       $09
000DF458 E701                       	dc.b	smpsNoAttack, $01
000DF45A E103                       	smpsAlterNote       $03
000DF45C E701                       	dc.b	smpsNoAttack, $01
000DF45E E102                       	smpsAlterNote       $02
000DF460 E701                       	dc.b	smpsNoAttack, $01
000DF462 E106                       	smpsAlterNote       $06
000DF464 E701                       	dc.b	smpsNoAttack, $01
000DF466 E10C                       	smpsAlterNote       $0C
000DF468 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF46C E106                       	smpsAlterNote       $06
000DF46E E701                       	dc.b	smpsNoAttack, $01
000DF470 E103                       	smpsAlterNote       $03
000DF472 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF476 E109                       	smpsAlterNote       $09
000DF478 E701                       	dc.b	smpsNoAttack, $01
000DF47A E10D                       	smpsAlterNote       $0D
000DF47C E701                       	dc.b	smpsNoAttack, $01
000DF47E E10C                       	smpsAlterNote       $0C
000DF480 E701                       	dc.b	smpsNoAttack, $01
000DF482 E109                       	smpsAlterNote       $09
000DF484 8001                       	dc.b	nRst, $01
000DF486 E10B                       	smpsAlterNote       $0B
000DF488 BA0D                       	dc.b	nA4, $0D
000DF48A E105                       	smpsAlterNote       $05
000DF48C E701                       	dc.b	smpsNoAttack, $01
000DF48E E104                       	smpsAlterNote       $04
000DF490 E701                       	dc.b	smpsNoAttack, $01
000DF492 E108                       	smpsAlterNote       $08
000DF494 E701                       	dc.b	smpsNoAttack, $01
000DF496 E10E                       	smpsAlterNote       $0E
000DF498 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF49C E10B                       	smpsAlterNote       $0B
000DF49E E701                       	dc.b	smpsNoAttack, $01
000DF4A0 E105                       	smpsAlterNote       $05
000DF4A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF4A6 E10B                       	smpsAlterNote       $0B
000DF4A8 E701                       	dc.b	smpsNoAttack, $01
000DF4AA E10E                       	smpsAlterNote       $0E
000DF4AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF4B0 E108                       	smpsAlterNote       $08
000DF4B2 E701                       	dc.b	smpsNoAttack, $01
000DF4B4 E104                       	smpsAlterNote       $04
000DF4B6 E701                       	dc.b	smpsNoAttack, $01
000DF4B8 E105                       	smpsAlterNote       $05
000DF4BA E701                       	dc.b	smpsNoAttack, $01
000DF4BC E10B                       	smpsAlterNote       $0B
000DF4BE E701                       	dc.b	smpsNoAttack, $01
000DF4C0 E10F                       	smpsAlterNote       $0F
000DF4C2 E701                       	dc.b	smpsNoAttack, $01
000DF4C4 E10B                       	smpsAlterNote       $0B
000DF4C6 E701                       	dc.b	smpsNoAttack, $01
000DF4C8 E108                       	smpsAlterNote       $08
000DF4CA E701                       	dc.b	smpsNoAttack, $01
000DF4CC E104                       	smpsAlterNote       $04
000DF4CE E701                       	dc.b	smpsNoAttack, $01
000DF4D0 E108                       	smpsAlterNote       $08
000DF4D2 E701                       	dc.b	smpsNoAttack, $01
000DF4D4 E10E                       	smpsAlterNote       $0E
000DF4D6 E701                       	dc.b	smpsNoAttack, $01
000DF4D8 E10F                       	smpsAlterNote       $0F
000DF4DA E701                       	dc.b	smpsNoAttack, $01
000DF4DC E10B                       	smpsAlterNote       $0B
000DF4DE E701                       	dc.b	smpsNoAttack, $01
000DF4E0 E105                       	smpsAlterNote       $05
000DF4E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF4E6 E108                       	smpsAlterNote       $08
000DF4E8 E701                       	dc.b	smpsNoAttack, $01
000DF4EA E10E                       	smpsAlterNote       $0E
000DF4EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF4F0 E108                       	smpsAlterNote       $08
000DF4F2 E701                       	dc.b	smpsNoAttack, $01
000DF4F4 E105                       	smpsAlterNote       $05
000DF4F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF4FA E108                       	smpsAlterNote       $08
000DF4FC B50A 8001                  	dc.b	nE4, $0A, nRst, $01
000DF500 E109                       	smpsAlterNote       $09
000DF502 B60D                       	dc.b	nF4, $0D
000DF504 E103                       	smpsAlterNote       $03
000DF506 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF50A E106                       	smpsAlterNote       $06
000DF50C E701                       	dc.b	smpsNoAttack, $01
000DF50E E10C                       	smpsAlterNote       $0C
000DF510 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF514 E106                       	smpsAlterNote       $06
000DF516 E701                       	dc.b	smpsNoAttack, $01
000DF518 E103                       	smpsAlterNote       $03
000DF51A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF51E E109                       	smpsAlterNote       $09
000DF520 E701                       	dc.b	smpsNoAttack, $01
000DF522 E10D                       	smpsAlterNote       $0D
000DF524 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DF528 E109                       	smpsAlterNote       $09
000DF52A B80D                       	dc.b	nG4, $0D
000DF52C E103                       	smpsAlterNote       $03
000DF52E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF532 E109                       	smpsAlterNote       $09
000DF534 E701                       	dc.b	smpsNoAttack, $01
000DF536 E10C                       	smpsAlterNote       $0C
000DF538 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF53C E106                       	smpsAlterNote       $06
000DF53E E701                       	dc.b	smpsNoAttack, $01
000DF540 E102                       	smpsAlterNote       $02
000DF542 E701                       	dc.b	smpsNoAttack, $01
000DF544 E103                       	smpsAlterNote       $03
000DF546 E701                       	dc.b	smpsNoAttack, $01
000DF548 E109                       	smpsAlterNote       $09
000DF54A E701                       	dc.b	smpsNoAttack, $01
000DF54C E10D                       	smpsAlterNote       $0D
000DF54E E701                       	dc.b	smpsNoAttack, $01
000DF550 E109                       	smpsAlterNote       $09
000DF552 E701                       	dc.b	smpsNoAttack, $01
000DF554 E106                       	smpsAlterNote       $06
000DF556 E701                       	dc.b	smpsNoAttack, $01
000DF558 E102                       	smpsAlterNote       $02
000DF55A E701                       	dc.b	smpsNoAttack, $01
000DF55C E106                       	smpsAlterNote       $06
000DF55E E701                       	dc.b	smpsNoAttack, $01
000DF560 E10C                       	smpsAlterNote       $0C
000DF562 E701                       	dc.b	smpsNoAttack, $01
000DF564 E10D                       	smpsAlterNote       $0D
000DF566 E701                       	dc.b	smpsNoAttack, $01
000DF568 E109                       	smpsAlterNote       $09
000DF56A E701                       	dc.b	smpsNoAttack, $01
000DF56C E10B                       	smpsAlterNote       $0B
000DF56E BA0D                       	dc.b	nA4, $0D
000DF570 E108                       	smpsAlterNote       $08
000DF572 E701                       	dc.b	smpsNoAttack, $01
000DF574 E105                       	smpsAlterNote       $05
000DF576 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF57A E10B                       	smpsAlterNote       $0B
000DF57C E701                       	dc.b	smpsNoAttack, $01
000DF57E E10F                       	smpsAlterNote       $0F
000DF580 E701                       	dc.b	smpsNoAttack, $01
000DF582 E10E                       	smpsAlterNote       $0E
000DF584 E701                       	dc.b	smpsNoAttack, $01
000DF586 E108                       	smpsAlterNote       $08
000DF588 E701                       	dc.b	smpsNoAttack, $01
000DF58A E104                       	smpsAlterNote       $04
000DF58C E701                       	dc.b	smpsNoAttack, $01
000DF58E E108                       	smpsAlterNote       $08
000DF590 E701                       	dc.b	smpsNoAttack, $01
000DF592 E10B                       	smpsAlterNote       $0B
000DF594 E701                       	dc.b	smpsNoAttack, $01
000DF596 E10F                       	smpsAlterNote       $0F
000DF598 E701                       	dc.b	smpsNoAttack, $01
000DF59A E10B                       	smpsAlterNote       $0B
000DF59C E701                       	dc.b	smpsNoAttack, $01
000DF59E E105                       	smpsAlterNote       $05
000DF5A0 E701                       	dc.b	smpsNoAttack, $01
000DF5A2 E104                       	smpsAlterNote       $04
000DF5A4 E701                       	dc.b	smpsNoAttack, $01
000DF5A6 E108                       	smpsAlterNote       $08
000DF5A8 E701                       	dc.b	smpsNoAttack, $01
000DF5AA E10E                       	smpsAlterNote       $0E
000DF5AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF5B0 E10B                       	smpsAlterNote       $0B
000DF5B2 E701                       	dc.b	smpsNoAttack, $01
000DF5B4 E105                       	smpsAlterNote       $05
000DF5B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF5BA E10B                       	smpsAlterNote       $0B
000DF5BC E701                       	dc.b	smpsNoAttack, $01
000DF5BE E10E                       	smpsAlterNote       $0E
000DF5C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF5C4 E108                       	smpsAlterNote       $08
000DF5C6 E701                       	dc.b	smpsNoAttack, $01
000DF5C8 E105                       	smpsAlterNote       $05
000DF5CA 8001                       	dc.b	nRst, $01
000DF5CC E109                       	smpsAlterNote       $09
000DF5CE B60A                       	dc.b	nF4, $0A
000DF5D0 E108                       	smpsAlterNote       $08
000DF5D2 B507                       	dc.b	nE4, $07
000DF5D4 E107                       	smpsAlterNote       $07
000DF5D6 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000DF5DA E108                       	smpsAlterNote       $08
000DF5DC B503                       	dc.b	nE4, $03
000DF5DE E109                       	smpsAlterNote       $09
000DF5E0 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
000DF5E8 E10B                       	smpsAlterNote       $0B
000DF5EA BA0D                       	dc.b	nA4, $0D
000DF5EC E108                       	smpsAlterNote       $08
000DF5EE E701                       	dc.b	smpsNoAttack, $01
000DF5F0 E104                       	smpsAlterNote       $04
000DF5F2 E701                       	dc.b	smpsNoAttack, $01
000DF5F4 E108                       	smpsAlterNote       $08
000DF5F6 E701                       	dc.b	smpsNoAttack, $01
000DF5F8 E10B                       	smpsAlterNote       $0B
000DF5FA E701                       	dc.b	smpsNoAttack, $01
000DF5FC E10F                       	smpsAlterNote       $0F
000DF5FE E701                       	dc.b	smpsNoAttack, $01
000DF600 E10B                       	smpsAlterNote       $0B
000DF602 E701                       	dc.b	smpsNoAttack, $01
000DF604 E105                       	smpsAlterNote       $05
000DF606 E701                       	dc.b	smpsNoAttack, $01
000DF608 E104                       	smpsAlterNote       $04
000DF60A E701                       	dc.b	smpsNoAttack, $01
000DF60C E108                       	smpsAlterNote       $08
000DF60E E701                       	dc.b	smpsNoAttack, $01
000DF610 E10E                       	smpsAlterNote       $0E
000DF612 E701                       	dc.b	smpsNoAttack, $01
000DF614 E10F                       	smpsAlterNote       $0F
000DF616 8001                       	dc.b	nRst, $01
000DF618 E109                       	smpsAlterNote       $09
000DF61A C20D                       	dc.b	nF5, $0D
000DF61C E106                       	smpsAlterNote       $06
000DF61E E701                       	dc.b	smpsNoAttack, $01
000DF620 E102                       	smpsAlterNote       $02
000DF622 E701                       	dc.b	smpsNoAttack, $01
000DF624 E106                       	smpsAlterNote       $06
000DF626 E701                       	dc.b	smpsNoAttack, $01
000DF628 E109                       	smpsAlterNote       $09
000DF62A E701                       	dc.b	smpsNoAttack, $01
000DF62C E10D                       	smpsAlterNote       $0D
000DF62E E701                       	dc.b	smpsNoAttack, $01
000DF630 E109                       	smpsAlterNote       $09
000DF632 E701                       	dc.b	smpsNoAttack, $01
000DF634 E103                       	smpsAlterNote       $03
000DF636 E701                       	dc.b	smpsNoAttack, $01
000DF638 E102                       	smpsAlterNote       $02
000DF63A E701                       	dc.b	smpsNoAttack, $01
000DF63C E106                       	smpsAlterNote       $06
000DF63E E701                       	dc.b	smpsNoAttack, $01
000DF640 E10C                       	smpsAlterNote       $0C
000DF642 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF646 E109                       	smpsAlterNote       $09
000DF648 E701                       	dc.b	smpsNoAttack, $01
000DF64A E103                       	smpsAlterNote       $03
000DF64C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF650 E109                       	smpsAlterNote       $09
000DF652 E701                       	dc.b	smpsNoAttack, $01
000DF654 E10C                       	smpsAlterNote       $0C
000DF656 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF65A E106                       	smpsAlterNote       $06
000DF65C E701                       	dc.b	smpsNoAttack, $01
000DF65E E102                       	smpsAlterNote       $02
000DF660 E701                       	dc.b	smpsNoAttack, $01
000DF662 E103                       	smpsAlterNote       $03
000DF664 E701                       	dc.b	smpsNoAttack, $01
000DF666 E109                       	smpsAlterNote       $09
000DF668 E701                       	dc.b	smpsNoAttack, $01
000DF66A E10D                       	smpsAlterNote       $0D
000DF66C E701                       	dc.b	smpsNoAttack, $01
000DF66E E109                       	smpsAlterNote       $09
000DF670 E701                       	dc.b	smpsNoAttack, $01
000DF672 E106                       	smpsAlterNote       $06
000DF674 E701                       	dc.b	smpsNoAttack, $01
000DF676 E102                       	smpsAlterNote       $02
000DF678 E701                       	dc.b	smpsNoAttack, $01
000DF67A E106                       	smpsAlterNote       $06
000DF67C E701                       	dc.b	smpsNoAttack, $01
000DF67E E10C                       	smpsAlterNote       $0C
000DF680 E701                       	dc.b	smpsNoAttack, $01
000DF682 E10D                       	smpsAlterNote       $0D
000DF684 E701                       	dc.b	smpsNoAttack, $01
000DF686 E109                       	smpsAlterNote       $09
000DF688 E701                       	dc.b	smpsNoAttack, $01
000DF68A E103                       	smpsAlterNote       $03
000DF68C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF690 E106                       	smpsAlterNote       $06
000DF692 E701                       	dc.b	smpsNoAttack, $01
000DF694 E10C                       	smpsAlterNote       $0C
000DF696 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF69A E106                       	smpsAlterNote       $06
000DF69C E701                       	dc.b	smpsNoAttack, $01
000DF69E E103                       	smpsAlterNote       $03
000DF6A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF6A4 E109                       	smpsAlterNote       $09
000DF6A6 E701                       	dc.b	smpsNoAttack, $01
000DF6A8 E10D                       	smpsAlterNote       $0D
000DF6AA E701                       	dc.b	smpsNoAttack, $01
000DF6AC E10C                       	smpsAlterNote       $0C
000DF6AE E701                       	dc.b	smpsNoAttack, $01
000DF6B0 E106                       	smpsAlterNote       $06
000DF6B2 E701                       	dc.b	smpsNoAttack, $01
000DF6B4 E103                       	smpsAlterNote       $03
000DF6B6 8001                       	dc.b	nRst, $01
000DF6B8 E109                       	smpsAlterNote       $09
000DF6BA C206 8001                  	dc.b	nF5, $06, nRst, $01
000DF6C0 E10C                       	smpsAlterNote       $0C
000DF6C2 E601                       	smpsAlterVol        $01
000DF6C4 BB0D                       	dc.b	nBb4, $0D
000DF6C6 E106                       	smpsAlterNote       $06
000DF6C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF6CC E109                       	smpsAlterNote       $09
000DF6CE E701                       	dc.b	smpsNoAttack, $01
000DF6D0 E10F                       	smpsAlterNote       $0F
000DF6D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF6D6 E109                       	smpsAlterNote       $09
000DF6D8 E701                       	dc.b	smpsNoAttack, $01
000DF6DA E106                       	smpsAlterNote       $06
000DF6DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF6E0 E10C                       	smpsAlterNote       $0C
000DF6E2 E701                       	dc.b	smpsNoAttack, $01
000DF6E4 E110                       	smpsAlterNote       $10
000DF6E6 E701                       	dc.b	smpsNoAttack, $01
000DF6E8 E10F                       	smpsAlterNote       $0F
000DF6EA E701                       	dc.b	smpsNoAttack, $01
000DF6EC E109                       	smpsAlterNote       $09
000DF6EE E701                       	dc.b	smpsNoAttack, $01
000DF6F0 E105                       	smpsAlterNote       $05
000DF6F2 E701                       	dc.b	smpsNoAttack, $01
000DF6F4 E106                       	smpsAlterNote       $06
000DF6F6 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
000DF6FA E103                       	smpsAlterNote       $03
000DF6FC E701                       	dc.b	smpsNoAttack, $01
000DF6FE E1FF                       	smpsAlterNote       $FF
000DF700 E701                       	dc.b	smpsNoAttack, $01
000DF702 E103                       	smpsAlterNote       $03
000DF704 E701                       	dc.b	smpsNoAttack, $01
000DF706 E106                       	smpsAlterNote       $06
000DF708 E701                       	dc.b	smpsNoAttack, $01
000DF70A E10A                       	smpsAlterNote       $0A
000DF70C E701                       	dc.b	smpsNoAttack, $01
000DF70E E106                       	smpsAlterNote       $06
000DF710 E701                       	dc.b	smpsNoAttack, $01
000DF712 E100                       	smpsAlterNote       $00
000DF714 E701                       	dc.b	smpsNoAttack, $01
000DF716 E1FF                       	smpsAlterNote       $FF
000DF718 E701                       	dc.b	smpsNoAttack, $01
000DF71A E103                       	smpsAlterNote       $03
000DF71C E701                       	dc.b	smpsNoAttack, $01
000DF71E E109                       	smpsAlterNote       $09
000DF720 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF724 E106                       	smpsAlterNote       $06
000DF726 E701                       	dc.b	smpsNoAttack, $01
000DF728 E100                       	smpsAlterNote       $00
000DF72A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF72E E107                       	smpsAlterNote       $07
000DF730 BF0E                       	dc.b	nD5, $0E
000DF732 E101                       	smpsAlterNote       $01
000DF734 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF738 E107                       	smpsAlterNote       $07
000DF73A E701                       	dc.b	smpsNoAttack, $01
000DF73C E10A                       	smpsAlterNote       $0A
000DF73E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF742 E104                       	smpsAlterNote       $04
000DF744 E701                       	dc.b	smpsNoAttack, $01
000DF746 E100                       	smpsAlterNote       $00
000DF748 E701                       	dc.b	smpsNoAttack, $01
000DF74A E101                       	smpsAlterNote       $01
000DF74C E701                       	dc.b	smpsNoAttack, $01
000DF74E E107                       	smpsAlterNote       $07
000DF750 E701                       	dc.b	smpsNoAttack, $01
000DF752 E10B                       	smpsAlterNote       $0B
000DF754 E701                       	dc.b	smpsNoAttack, $01
000DF756 E107                       	smpsAlterNote       $07
000DF758 E701                       	dc.b	smpsNoAttack, $01
000DF75A E104                       	smpsAlterNote       $04
000DF75C E701                       	dc.b	smpsNoAttack, $01
000DF75E E100                       	smpsAlterNote       $00
000DF760 E701                       	dc.b	smpsNoAttack, $01
000DF762 E101                       	smpsAlterNote       $01
000DF764 8001                       	dc.b	nRst, $01
000DF766 E108                       	smpsAlterNote       $08
000DF768 C10C                       	dc.b	nE5, $0C
000DF76A E109                       	smpsAlterNote       $09
000DF76C C201 8001                  	dc.b	nF5, $01, nRst, $01
000DF770 E10A                       	smpsAlterNote       $0A
000DF772 8001                       	dc.b	nRst, $01
000DF774 E109                       	smpsAlterNote       $09
000DF776 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
000DF77A E106                       	smpsAlterNote       $06
000DF77C E701                       	dc.b	smpsNoAttack, $01
000DF77E E102                       	smpsAlterNote       $02
000DF780 E701                       	dc.b	smpsNoAttack, $01
000DF782 E103                       	smpsAlterNote       $03
000DF784 E701                       	dc.b	smpsNoAttack, $01
000DF786 E109                       	smpsAlterNote       $09
000DF788 E701                       	dc.b	smpsNoAttack, $01
000DF78A E10D                       	smpsAlterNote       $0D
000DF78C E701                       	dc.b	smpsNoAttack, $01
000DF78E E109                       	smpsAlterNote       $09
000DF790 E701                       	dc.b	smpsNoAttack, $01
000DF792 E106                       	smpsAlterNote       $06
000DF794 E701                       	dc.b	smpsNoAttack, $01
000DF796 E102                       	smpsAlterNote       $02
000DF798 E701                       	dc.b	smpsNoAttack, $01
000DF79A E106                       	smpsAlterNote       $06
000DF79C E701                       	dc.b	smpsNoAttack, $01
000DF79E E10C                       	smpsAlterNote       $0C
000DF7A0 E701                       	dc.b	smpsNoAttack, $01
000DF7A2 E10D                       	smpsAlterNote       $0D
000DF7A4 E701                       	dc.b	smpsNoAttack, $01
000DF7A6 E109                       	smpsAlterNote       $09
000DF7A8 C40D                       	dc.b	nG5, $0D
000DF7AA E106                       	smpsAlterNote       $06
000DF7AC E701                       	dc.b	smpsNoAttack, $01
000DF7AE E102                       	smpsAlterNote       $02
000DF7B0 E701                       	dc.b	smpsNoAttack, $01
000DF7B2 E103                       	smpsAlterNote       $03
000DF7B4 E701                       	dc.b	smpsNoAttack, $01
000DF7B6 E109                       	smpsAlterNote       $09
000DF7B8 E701                       	dc.b	smpsNoAttack, $01
000DF7BA E108                       	smpsAlterNote       $08
000DF7BC C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
000DF7C8 E109                       	smpsAlterNote       $09
000DF7CA C20D                       	dc.b	nF5, $0D
000DF7CC E106                       	smpsAlterNote       $06
000DF7CE E701                       	dc.b	smpsNoAttack, $01
000DF7D0 E102                       	smpsAlterNote       $02
000DF7D2 E701                       	dc.b	smpsNoAttack, $01
000DF7D4 E106                       	smpsAlterNote       $06
000DF7D6 E701                       	dc.b	smpsNoAttack, $01
000DF7D8 E109                       	smpsAlterNote       $09
000DF7DA E701                       	dc.b	smpsNoAttack, $01
000DF7DC E10D                       	smpsAlterNote       $0D
000DF7DE E701                       	dc.b	smpsNoAttack, $01
000DF7E0 E109                       	smpsAlterNote       $09
000DF7E2 E701                       	dc.b	smpsNoAttack, $01
000DF7E4 E103                       	smpsAlterNote       $03
000DF7E6 E701                       	dc.b	smpsNoAttack, $01
000DF7E8 E102                       	smpsAlterNote       $02
000DF7EA E701                       	dc.b	smpsNoAttack, $01
000DF7EC E106                       	smpsAlterNote       $06
000DF7EE E701                       	dc.b	smpsNoAttack, $01
000DF7F0 E10C                       	smpsAlterNote       $0C
000DF7F2 E701                       	dc.b	smpsNoAttack, $01
000DF7F4 E10D                       	smpsAlterNote       $0D
000DF7F6 8001                       	dc.b	nRst, $01
000DF7F8 E112                       	smpsAlterNote       $12
000DF7FA C401                       	dc.b	nG5, $01
000DF7FC E1EB                       	smpsAlterNote       $EB
000DF7FE E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000DF801 E1FD                       	smpsAlterNote       $FD
000DF803 E701                       	dc.b	smpsNoAttack, $01
000DF805 E10F                       	smpsAlterNote       $0F
000DF807 E701                       	dc.b	smpsNoAttack, $01
000DF809 E118                       	smpsAlterNote       $18
000DF80B E701                       	dc.b	smpsNoAttack, $01
000DF80D E1ED                       	smpsAlterNote       $ED
000DF80F E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000DF812 E1FF                       	smpsAlterNote       $FF
000DF814 E701                       	dc.b	smpsNoAttack, $01
000DF816 E10B                       	smpsAlterNote       $0B
000DF818 E703                       	dc.b	smpsNoAttack, $03
000DF81A E109                       	smpsAlterNote       $09
000DF81C C407                       	dc.b	nG5, $07
000DF81E E108                       	smpsAlterNote       $08
000DF820 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
000DF82C E109                       	smpsAlterNote       $09
000DF82E C20D                       	dc.b	nF5, $0D
000DF830 E103                       	smpsAlterNote       $03
000DF832 E701                       	dc.b	smpsNoAttack, $01
000DF834 E102                       	smpsAlterNote       $02
000DF836 E701                       	dc.b	smpsNoAttack, $01
000DF838 E106                       	smpsAlterNote       $06
000DF83A E701                       	dc.b	smpsNoAttack, $01
000DF83C E10C                       	smpsAlterNote       $0C
000DF83E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF842 E109                       	smpsAlterNote       $09
000DF844 E701                       	dc.b	smpsNoAttack, $01
000DF846 E103                       	smpsAlterNote       $03
000DF848 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF84C E109                       	smpsAlterNote       $09
000DF84E E701                       	dc.b	smpsNoAttack, $01
000DF850 E10C                       	smpsAlterNote       $0C
000DF852 E701                       	dc.b	smpsNoAttack, $01
000DF854 E10D                       	smpsAlterNote       $0D
000DF856 8001                       	dc.b	nRst, $01
000DF858 E10B                       	smpsAlterNote       $0B
000DF85A C609 8001                  	dc.b	nA5, $09, nRst, $01
000DF85E E109                       	smpsAlterNote       $09
000DF860 B806 8001                  	dc.b	nG4, $06, nRst, $01
000DF864 E108                       	smpsAlterNote       $08
000DF866 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000DF872 8001                       	dc.b	nRst, $01
000DF874 E109                       	smpsAlterNote       $09
000DF876 C20D                       	dc.b	nF5, $0D
000DF878 E103                       	smpsAlterNote       $03
000DF87A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF87E E106                       	smpsAlterNote       $06
000DF880 E701                       	dc.b	smpsNoAttack, $01
000DF882 E10C                       	smpsAlterNote       $0C
000DF884 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF888 E106                       	smpsAlterNote       $06
000DF88A E701                       	dc.b	smpsNoAttack, $01
000DF88C E103                       	smpsAlterNote       $03
000DF88E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF892 E109                       	smpsAlterNote       $09
000DF894 E701                       	dc.b	smpsNoAttack, $01
000DF896 E10D                       	smpsAlterNote       $0D
000DF898 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DF89E E108                       	smpsAlterNote       $08
000DF8A0 E6FF                       	smpsAlterVol        $FF
000DF8A2 A806                       	dc.b	nEb3, $06
000DF8A4 E10C                       	smpsAlterNote       $0C
000DF8A6 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000DF8AA E108                       	smpsAlterNote       $08
000DF8AC A803                       	dc.b	nEb3, $03
000DF8AE E109                       	smpsAlterNote       $09
000DF8B0 AC03 8001                  	dc.b	nG3, $03, nRst, $01
000DF8B4 E10C                       	smpsAlterNote       $0C
000DF8B6 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
000DF8C0 E109                       	smpsAlterNote       $09
000DF8C2 E602                       	smpsAlterVol        $02
000DF8C4 B604                       	dc.b	nF4, $04
000DF8C6 E602                       	smpsAlterVol        $02
000DF8C8 F6F1 AA                    	smpsJump            music84_Jump02
000DF8CB                            
000DF8CB                            ; FM4 Data
000DF8CB                            music84_FM4:
000DF8CD E040                       	smpsPan             panRight, $00
000DF8CF 8003                       	dc.b	nRst, $03
000DF8D1 E10F                       	smpsAlterNote       $0F
000DF8D3 C603 8008                  	dc.b	nA5, $03, nRst, $08
000DF8D7 E10D                       	smpsAlterNote       $0D
000DF8D9 C403 800A                  	dc.b	nG5, $03, nRst, $0A
000DF8DD E10C                       	smpsAlterNote       $0C
000DF8DF C103 8004                  	dc.b	nE5, $03, nRst, $04
000DF8E5 E6FE                       	smpsAlterVol        $FE
000DF8E7 E110                       	smpsAlterNote       $10
000DF8E9 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000DF8ED E10F                       	smpsAlterNote       $0F
000DF8EF C602 8001                  	dc.b	nA5, $02, nRst, $01
000DF8F3 E10D                       	smpsAlterNote       $0D
000DF8F5 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
000DF8FE E10C                       	smpsAlterNote       $0C
000DF900 C103                       	dc.b	nE5, $03
000DF902 E10A                       	smpsAlterNote       $0A
000DF904 BD03 8001                  	dc.b	nC5, $03, nRst, $01
000DF90A 03                         	dc.b	$03
000DF90B                            
000DF90B                            music84_Jump01:
000DF90B E10B                       	smpsAlterNote       $0B
000DF90D BF03 8001                  	dc.b	nD5, $03, nRst, $01
000DF911 E10C                       	smpsAlterNote       $0C
000DF913 C102 8001                  	dc.b	nE5, $02, nRst, $01
000DF917 E10D                       	smpsAlterNote       $0D
000DF919 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000DF923 E10B                       	smpsAlterNote       $0B
000DF925 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
000DF929 E107                       	smpsAlterNote       $07
000DF92B E701                       	dc.b	smpsNoAttack, $01
000DF92D E103                       	smpsAlterNote       $03
000DF92F E701                       	dc.b	smpsNoAttack, $01
000DF931 E104                       	smpsAlterNote       $04
000DF933 E701                       	dc.b	smpsNoAttack, $01
000DF935 E10A                       	smpsAlterNote       $0A
000DF937 E701                       	dc.b	smpsNoAttack, $01
000DF939 E10E                       	smpsAlterNote       $0E
000DF93B E701                       	dc.b	smpsNoAttack, $01
000DF93D E10A                       	smpsAlterNote       $0A
000DF93F E701                       	dc.b	smpsNoAttack, $01
000DF941 E107                       	smpsAlterNote       $07
000DF943 E701                       	dc.b	smpsNoAttack, $01
000DF945 E104                       	smpsAlterNote       $04
000DF947 8001                       	dc.b	nRst, $01
000DF949 E110                       	smpsAlterNote       $10
000DF94B C703                       	dc.b	nBb5, $03
000DF94D E10F                       	smpsAlterNote       $0F
000DF94F C603 8001                  	dc.b	nA5, $03, nRst, $01
000DF953 E10D                       	smpsAlterNote       $0D
000DF955 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
000DF95B E10C                       	smpsAlterNote       $0C
000DF95D E701                       	dc.b	smpsNoAttack, $01
000DF95F E108                       	smpsAlterNote       $08
000DF961 E701                       	dc.b	smpsNoAttack, $01
000DF963 E10C                       	smpsAlterNote       $0C
000DF965 E701                       	dc.b	smpsNoAttack, $01
000DF967 E10F                       	smpsAlterNote       $0F
000DF969 E701                       	dc.b	smpsNoAttack, $01
000DF96B E113                       	smpsAlterNote       $13
000DF96D E701                       	dc.b	smpsNoAttack, $01
000DF96F E10F                       	smpsAlterNote       $0F
000DF971 E701                       	dc.b	smpsNoAttack, $01
000DF973 E109                       	smpsAlterNote       $09
000DF975 E701                       	dc.b	smpsNoAttack, $01
000DF977 E108                       	smpsAlterNote       $08
000DF979 E701                       	dc.b	smpsNoAttack, $01
000DF97B E10C                       	smpsAlterNote       $0C
000DF97D E701                       	dc.b	smpsNoAttack, $01
000DF97F E112                       	smpsAlterNote       $12
000DF981 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF985 E10C                       	smpsAlterNote       $0C
000DF987 E701                       	dc.b	smpsNoAttack, $01
000DF989 E109                       	smpsAlterNote       $09
000DF98B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF98F E10F                       	smpsAlterNote       $0F
000DF991 E701                       	dc.b	smpsNoAttack, $01
000DF993 E113                       	smpsAlterNote       $13
000DF995 E701                       	dc.b	smpsNoAttack, $01
000DF997 E112                       	smpsAlterNote       $12
000DF999 E701                       	dc.b	smpsNoAttack, $01
000DF99B E10C                       	smpsAlterNote       $0C
000DF99D E701                       	dc.b	smpsNoAttack, $01
000DF99F E108                       	smpsAlterNote       $08
000DF9A1 E701                       	dc.b	smpsNoAttack, $01
000DF9A3 E10C                       	smpsAlterNote       $0C
000DF9A5 E701                       	dc.b	smpsNoAttack, $01
000DF9A7 E10F                       	smpsAlterNote       $0F
000DF9A9 E701                       	dc.b	smpsNoAttack, $01
000DF9AB E113                       	smpsAlterNote       $13
000DF9AD E701                       	dc.b	smpsNoAttack, $01
000DF9AF E10F                       	smpsAlterNote       $0F
000DF9B1 E701                       	dc.b	smpsNoAttack, $01
000DF9B3 E109                       	smpsAlterNote       $09
000DF9B5 E701                       	dc.b	smpsNoAttack, $01
000DF9B7 E108                       	smpsAlterNote       $08
000DF9B9 E701                       	dc.b	smpsNoAttack, $01
000DF9BB E10C                       	smpsAlterNote       $0C
000DF9BD E701                       	dc.b	smpsNoAttack, $01
000DF9BF E112                       	smpsAlterNote       $12
000DF9C1 E701                       	dc.b	smpsNoAttack, $01
000DF9C3 E113                       	smpsAlterNote       $13
000DF9C5 800F                       	dc.b	nRst, $0F
000DF9C7 E10B                       	smpsAlterNote       $0B
000DF9C9 BF03                       	dc.b	nD5, $03
000DF9CB E10C                       	smpsAlterNote       $0C
000DF9CD C103 8001                  	dc.b	nE5, $03, nRst, $01
000DF9D1 E10D                       	smpsAlterNote       $0D
000DF9D3 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
000DF9DB E10B                       	smpsAlterNote       $0B
000DF9DD BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
000DF9E7 E110                       	smpsAlterNote       $10
000DF9E9 C704                       	dc.b	nBb5, $04
000DF9EB E10F                       	smpsAlterNote       $0F
000DF9ED C604 8001                  	dc.b	nA5, $04, nRst, $01
000DF9F1 E10D                       	smpsAlterNote       $0D
000DF9F3 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000DF9F9 E109                       	smpsAlterNote       $09
000DF9FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF9FF E10F                       	smpsAlterNote       $0F
000DFA01 E701                       	dc.b	smpsNoAttack, $01
000DFA03 E112                       	smpsAlterNote       $12
000DFA05 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFA09 E10C                       	smpsAlterNote       $0C
000DFA0B E701                       	dc.b	smpsNoAttack, $01
000DFA0D E108                       	smpsAlterNote       $08
000DFA0F E701                       	dc.b	smpsNoAttack, $01
000DFA11 E109                       	smpsAlterNote       $09
000DFA13 E701                       	dc.b	smpsNoAttack, $01
000DFA15 E10F                       	smpsAlterNote       $0F
000DFA17 E701                       	dc.b	smpsNoAttack, $01
000DFA19 E113                       	smpsAlterNote       $13
000DFA1B E701                       	dc.b	smpsNoAttack, $01
000DFA1D E10F                       	smpsAlterNote       $0F
000DFA1F E701                       	dc.b	smpsNoAttack, $01
000DFA21 E10C                       	smpsAlterNote       $0C
000DFA23 E701                       	dc.b	smpsNoAttack, $01
000DFA25 E108                       	smpsAlterNote       $08
000DFA27 E701                       	dc.b	smpsNoAttack, $01
000DFA29 E10C                       	smpsAlterNote       $0C
000DFA2B E701                       	dc.b	smpsNoAttack, $01
000DFA2D E112                       	smpsAlterNote       $12
000DFA2F E701                       	dc.b	smpsNoAttack, $01
000DFA31 E113                       	smpsAlterNote       $13
000DFA33 E701                       	dc.b	smpsNoAttack, $01
000DFA35 E10F                       	smpsAlterNote       $0F
000DFA37 E701                       	dc.b	smpsNoAttack, $01
000DFA39 E109                       	smpsAlterNote       $09
000DFA3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFA3F E10C                       	smpsAlterNote       $0C
000DFA41 E701                       	dc.b	smpsNoAttack, $01
000DFA43 E112                       	smpsAlterNote       $12
000DFA45 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFA49 E10C                       	smpsAlterNote       $0C
000DFA4B E701                       	dc.b	smpsNoAttack, $01
000DFA4D E109                       	smpsAlterNote       $09
000DFA4F E701                       	dc.b	smpsNoAttack, $01
000DFA51 E10D                       	smpsAlterNote       $0D
000DFA53 C401 8001                  	dc.b	nG5, $01, nRst, $01
000DFA57 E10F                       	smpsAlterNote       $0F
000DFA59 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
000DFA63 E10D                       	smpsAlterNote       $0D
000DFA65 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000DFA6B E10B                       	smpsAlterNote       $0B
000DFA6D BF0D                       	dc.b	nD5, $0D
000DFA6F E108                       	smpsAlterNote       $08
000DFA71 E701                       	dc.b	smpsNoAttack, $01
000DFA73 E104                       	smpsAlterNote       $04
000DFA75 E701                       	dc.b	smpsNoAttack, $01
000DFA77 E108                       	smpsAlterNote       $08
000DFA79 E701                       	dc.b	smpsNoAttack, $01
000DFA7B E10B                       	smpsAlterNote       $0B
000DFA7D E701                       	dc.b	smpsNoAttack, $01
000DFA7F E10F                       	smpsAlterNote       $0F
000DFA81 E701                       	dc.b	smpsNoAttack, $01
000DFA83 E10B                       	smpsAlterNote       $0B
000DFA85 E701                       	dc.b	smpsNoAttack, $01
000DFA87 E105                       	smpsAlterNote       $05
000DFA89 E701                       	dc.b	smpsNoAttack, $01
000DFA8B E104                       	smpsAlterNote       $04
000DFA8D E701                       	dc.b	smpsNoAttack, $01
000DFA8F E108                       	smpsAlterNote       $08
000DFA91 E701                       	dc.b	smpsNoAttack, $01
000DFA93 E10E                       	smpsAlterNote       $0E
000DFA95 E701                       	dc.b	smpsNoAttack, $01
000DFA97 E10F                       	smpsAlterNote       $0F
000DFA99 8001                       	dc.b	nRst, $01
000DFA9B E10C                       	smpsAlterNote       $0C
000DFA9D C101                       	dc.b	nE5, $01
000DFA9F E10D                       	smpsAlterNote       $0D
000DFAA1 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
000DFAA7 E10F                       	smpsAlterNote       $0F
000DFAA9 C606 8001                  	dc.b	nA5, $06, nRst, $01
000DFAAD E10C                       	smpsAlterNote       $0C
000DFAAF CD06 8001                  	dc.b	nE6, $06, nRst, $01
000DFAB3 E10D                       	smpsAlterNote       $0D
000DFAB5 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000DFAB9 E10C                       	smpsAlterNote       $0C
000DFABB CD03                       	dc.b	nE6, $03
000DFABD E10A                       	smpsAlterNote       $0A
000DFABF C903 8001                  	dc.b	nC6, $03, nRst, $01
000DFAC3 E10D                       	smpsAlterNote       $0D
000DFAC5 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
000DFACD E109                       	smpsAlterNote       $09
000DFACF E701                       	dc.b	smpsNoAttack, $01
000DFAD1 E10D                       	smpsAlterNote       $0D
000DFAD3 E701                       	dc.b	smpsNoAttack, $01
000DFAD5 E110                       	smpsAlterNote       $10
000DFAD7 E701                       	dc.b	smpsNoAttack, $01
000DFAD9 E114                       	smpsAlterNote       $14
000DFADB E701                       	dc.b	smpsNoAttack, $01
000DFADD E110                       	smpsAlterNote       $10
000DFADF E701                       	dc.b	smpsNoAttack, $01
000DFAE1 E10A                       	smpsAlterNote       $0A
000DFAE3 E701                       	dc.b	smpsNoAttack, $01
000DFAE5 E109                       	smpsAlterNote       $09
000DFAE7 E701                       	dc.b	smpsNoAttack, $01
000DFAE9 E10D                       	smpsAlterNote       $0D
000DFAEB E701                       	dc.b	smpsNoAttack, $01
000DFAED E113                       	smpsAlterNote       $13
000DFAEF E701                       	dc.b	smpsNoAttack, $01
000DFAF1 E114                       	smpsAlterNote       $14
000DFAF3 8001                       	dc.b	nRst, $01
000DFAF5 E10F                       	smpsAlterNote       $0F
000DFAF7 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
000DFAFD E10C                       	smpsAlterNote       $0C
000DFAFF E701                       	dc.b	smpsNoAttack, $01
000DFB01 E108                       	smpsAlterNote       $08
000DFB03 E701                       	dc.b	smpsNoAttack, $01
000DFB05 E10C                       	smpsAlterNote       $0C
000DFB07 E701                       	dc.b	smpsNoAttack, $01
000DFB09 E112                       	smpsAlterNote       $12
000DFB0B E701                       	dc.b	smpsNoAttack, $01
000DFB0D E113                       	smpsAlterNote       $13
000DFB0F E701                       	dc.b	smpsNoAttack, $01
000DFB11 E10F                       	smpsAlterNote       $0F
000DFB13 E701                       	dc.b	smpsNoAttack, $01
000DFB15 E109                       	smpsAlterNote       $09
000DFB17 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFB1B E10C                       	smpsAlterNote       $0C
000DFB1D E701                       	dc.b	smpsNoAttack, $01
000DFB1F E112                       	smpsAlterNote       $12
000DFB21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFB25 E10C                       	smpsAlterNote       $0C
000DFB27 E701                       	dc.b	smpsNoAttack, $01
000DFB29 E109                       	smpsAlterNote       $09
000DFB2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFB2F E10F                       	smpsAlterNote       $0F
000DFB31 E701                       	dc.b	smpsNoAttack, $01
000DFB33 E113                       	smpsAlterNote       $13
000DFB35 E701                       	dc.b	smpsNoAttack, $01
000DFB37 E112                       	smpsAlterNote       $12
000DFB39 E701                       	dc.b	smpsNoAttack, $01
000DFB3B E10C                       	smpsAlterNote       $0C
000DFB3D E701                       	dc.b	smpsNoAttack, $01
000DFB3F E108                       	smpsAlterNote       $08
000DFB41 E701                       	dc.b	smpsNoAttack, $01
000DFB43 E10C                       	smpsAlterNote       $0C
000DFB45 E701                       	dc.b	smpsNoAttack, $01
000DFB47 E10F                       	smpsAlterNote       $0F
000DFB49 E701                       	dc.b	smpsNoAttack, $01
000DFB4B E113                       	smpsAlterNote       $13
000DFB4D E701                       	dc.b	smpsNoAttack, $01
000DFB4F E10F                       	smpsAlterNote       $0F
000DFB51 E701                       	dc.b	smpsNoAttack, $01
000DFB53 E109                       	smpsAlterNote       $09
000DFB55 E701                       	dc.b	smpsNoAttack, $01
000DFB57 E108                       	smpsAlterNote       $08
000DFB59 E701                       	dc.b	smpsNoAttack, $01
000DFB5B E10C                       	smpsAlterNote       $0C
000DFB5D E701                       	dc.b	smpsNoAttack, $01
000DFB5F E112                       	smpsAlterNote       $12
000DFB61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFB65 E10F                       	smpsAlterNote       $0F
000DFB67 E701                       	dc.b	smpsNoAttack, $01
000DFB69 E109                       	smpsAlterNote       $09
000DFB6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFB6F E10F                       	smpsAlterNote       $0F
000DFB71 E701                       	dc.b	smpsNoAttack, $01
000DFB73 E113                       	smpsAlterNote       $13
000DFB75 E701                       	dc.b	smpsNoAttack, $01
000DFB77 E112                       	smpsAlterNote       $12
000DFB79 E701                       	dc.b	smpsNoAttack, $01
000DFB7B E10C                       	smpsAlterNote       $0C
000DFB7D E701                       	dc.b	smpsNoAttack, $01
000DFB7F E108                       	smpsAlterNote       $08
000DFB81 E701                       	dc.b	smpsNoAttack, $01
000DFB83 E10C                       	smpsAlterNote       $0C
000DFB85 E701                       	dc.b	smpsNoAttack, $01
000DFB87 E10F                       	smpsAlterNote       $0F
000DFB89 E701                       	dc.b	smpsNoAttack, $01
000DFB8B E113                       	smpsAlterNote       $13
000DFB8D E701                       	dc.b	smpsNoAttack, $01
000DFB8F E10F                       	smpsAlterNote       $0F
000DFB91 E701                       	dc.b	smpsNoAttack, $01
000DFB93 E109                       	smpsAlterNote       $09
000DFB95 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DFB99 E10F                       	smpsAlterNote       $0F
000DFB9B C60D                       	dc.b	nA5, $0D
000DFB9D E109                       	smpsAlterNote       $09
000DFB9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFBA3 E10C                       	smpsAlterNote       $0C
000DFBA5 E701                       	dc.b	smpsNoAttack, $01
000DFBA7 E112                       	smpsAlterNote       $12
000DFBA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFBAD E10C                       	smpsAlterNote       $0C
000DFBAF E701                       	dc.b	smpsNoAttack, $01
000DFBB1 E109                       	smpsAlterNote       $09
000DFBB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFBB7 E10F                       	smpsAlterNote       $0F
000DFBB9 E701                       	dc.b	smpsNoAttack, $01
000DFBBB E113                       	smpsAlterNote       $13
000DFBBD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DFBC3 E10D                       	smpsAlterNote       $0D
000DFBC5 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
000DFBCD E10C                       	smpsAlterNote       $0C
000DFBCF C103 800E                  	dc.b	nE5, $03, nRst, $0E
000DFBD5 E6FF                       	smpsAlterVol        $FF
000DFBD7 E10B                       	smpsAlterNote       $0B
000DFBD9 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000DFBDD E10C                       	smpsAlterNote       $0C
000DFBDF C103                       	dc.b	nE5, $03
000DFBE1 E10D                       	smpsAlterNote       $0D
000DFBE3 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
000DFBED E10B                       	smpsAlterNote       $0B
000DFBEF BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
000DFBF3 E107                       	smpsAlterNote       $07
000DFBF5 E701                       	dc.b	smpsNoAttack, $01
000DFBF7 E104                       	smpsAlterNote       $04
000DFBF9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFBFD E10A                       	smpsAlterNote       $0A
000DFBFF E701                       	dc.b	smpsNoAttack, $01
000DFC01 E10D                       	smpsAlterNote       $0D
000DFC03 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFC07 E107                       	smpsAlterNote       $07
000DFC09 E701                       	dc.b	smpsNoAttack, $01
000DFC0B E104                       	smpsAlterNote       $04
000DFC0D 8001                       	dc.b	nRst, $01
000DFC0F E110                       	smpsAlterNote       $10
000DFC11 C703                       	dc.b	nBb5, $03
000DFC13 E10F                       	smpsAlterNote       $0F
000DFC15 C603 8001                  	dc.b	nA5, $03, nRst, $01
000DFC19 E10D                       	smpsAlterNote       $0D
000DFC1B C403 C60D                  	dc.b	nG5, $03, nA5, $0D
000DFC1F E10C                       	smpsAlterNote       $0C
000DFC21 E701                       	dc.b	smpsNoAttack, $01
000DFC23 E108                       	smpsAlterNote       $08
000DFC25 E701                       	dc.b	smpsNoAttack, $01
000DFC27 E109                       	smpsAlterNote       $09
000DFC29 E701                       	dc.b	smpsNoAttack, $01
000DFC2B E10F                       	smpsAlterNote       $0F
000DFC2D E701                       	dc.b	smpsNoAttack, $01
000DFC2F E113                       	smpsAlterNote       $13
000DFC31 E701                       	dc.b	smpsNoAttack, $01
000DFC33 E10F                       	smpsAlterNote       $0F
000DFC35 E701                       	dc.b	smpsNoAttack, $01
000DFC37 E10C                       	smpsAlterNote       $0C
000DFC39 E701                       	dc.b	smpsNoAttack, $01
000DFC3B E108                       	smpsAlterNote       $08
000DFC3D E701                       	dc.b	smpsNoAttack, $01
000DFC3F E10C                       	smpsAlterNote       $0C
000DFC41 E701                       	dc.b	smpsNoAttack, $01
000DFC43 E112                       	smpsAlterNote       $12
000DFC45 E701                       	dc.b	smpsNoAttack, $01
000DFC47 E113                       	smpsAlterNote       $13
000DFC49 E701                       	dc.b	smpsNoAttack, $01
000DFC4B E10F                       	smpsAlterNote       $0F
000DFC4D E701                       	dc.b	smpsNoAttack, $01
000DFC4F E109                       	smpsAlterNote       $09
000DFC51 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFC55 E10C                       	smpsAlterNote       $0C
000DFC57 E701                       	dc.b	smpsNoAttack, $01
000DFC59 E112                       	smpsAlterNote       $12
000DFC5B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFC5F E10C                       	smpsAlterNote       $0C
000DFC61 E701                       	dc.b	smpsNoAttack, $01
000DFC63 E109                       	smpsAlterNote       $09
000DFC65 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFC69 E10F                       	smpsAlterNote       $0F
000DFC6B E701                       	dc.b	smpsNoAttack, $01
000DFC6D E113                       	smpsAlterNote       $13
000DFC6F E701                       	dc.b	smpsNoAttack, $01
000DFC71 E112                       	smpsAlterNote       $12
000DFC73 E701                       	dc.b	smpsNoAttack, $01
000DFC75 E10C                       	smpsAlterNote       $0C
000DFC77 E701                       	dc.b	smpsNoAttack, $01
000DFC79 E108                       	smpsAlterNote       $08
000DFC7B E701                       	dc.b	smpsNoAttack, $01
000DFC7D E10C                       	smpsAlterNote       $0C
000DFC7F E701                       	dc.b	smpsNoAttack, $01
000DFC81 E10F                       	smpsAlterNote       $0F
000DFC83 E701                       	dc.b	smpsNoAttack, $01
000DFC85 E113                       	smpsAlterNote       $13
000DFC87 E701                       	dc.b	smpsNoAttack, $01
000DFC89 E10F                       	smpsAlterNote       $0F
000DFC8B BA03 8001                  	dc.b	nA4, $03, nRst, $01
000DFC8F E110                       	smpsAlterNote       $10
000DFC91 BB03                       	dc.b	nBb4, $03
000DFC93 E10F                       	smpsAlterNote       $0F
000DFC95 BA06 8001                  	dc.b	nA4, $06, nRst, $01
000DFC99 E10B                       	smpsAlterNote       $0B
000DFC9B BF03                       	dc.b	nD5, $03
000DFC9D E10C                       	smpsAlterNote       $0C
000DFC9F C103 8001                  	dc.b	nE5, $03, nRst, $01
000DFCA3 E10D                       	smpsAlterNote       $0D
000DFCA5 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000DFCAF E10B                       	smpsAlterNote       $0B
000DFCB1 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
000DFCBD E110                       	smpsAlterNote       $10
000DFCBF C704 8001                  	dc.b	nBb5, $04, nRst, $01
000DFCC3 E10F                       	smpsAlterNote       $0F
000DFCC5 C604                       	dc.b	nA5, $04
000DFCC7 E10D                       	smpsAlterNote       $0D
000DFCC9 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000DFCCF E109                       	smpsAlterNote       $09
000DFCD1 E701                       	dc.b	smpsNoAttack, $01
000DFCD3 E108                       	smpsAlterNote       $08
000DFCD5 E701                       	dc.b	smpsNoAttack, $01
000DFCD7 E10C                       	smpsAlterNote       $0C
000DFCD9 E701                       	dc.b	smpsNoAttack, $01
000DFCDB E112                       	smpsAlterNote       $12
000DFCDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFCE1 E10F                       	smpsAlterNote       $0F
000DFCE3 E701                       	dc.b	smpsNoAttack, $01
000DFCE5 E109                       	smpsAlterNote       $09
000DFCE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFCEB E10F                       	smpsAlterNote       $0F
000DFCED E701                       	dc.b	smpsNoAttack, $01
000DFCEF E112                       	smpsAlterNote       $12
000DFCF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFCF5 E10C                       	smpsAlterNote       $0C
000DFCF7 E701                       	dc.b	smpsNoAttack, $01
000DFCF9 E108                       	smpsAlterNote       $08
000DFCFB E701                       	dc.b	smpsNoAttack, $01
000DFCFD E109                       	smpsAlterNote       $09
000DFCFF E701                       	dc.b	smpsNoAttack, $01
000DFD01 E10F                       	smpsAlterNote       $0F
000DFD03 E701                       	dc.b	smpsNoAttack, $01
000DFD05 E113                       	smpsAlterNote       $13
000DFD07 E701                       	dc.b	smpsNoAttack, $01
000DFD09 E10F                       	smpsAlterNote       $0F
000DFD0B E701                       	dc.b	smpsNoAttack, $01
000DFD0D E10C                       	smpsAlterNote       $0C
000DFD0F E701                       	dc.b	smpsNoAttack, $01
000DFD11 E108                       	smpsAlterNote       $08
000DFD13 E701                       	dc.b	smpsNoAttack, $01
000DFD15 E10C                       	smpsAlterNote       $0C
000DFD17 E701                       	dc.b	smpsNoAttack, $01
000DFD19 E112                       	smpsAlterNote       $12
000DFD1B E701                       	dc.b	smpsNoAttack, $01
000DFD1D E113                       	smpsAlterNote       $13
000DFD1F E701                       	dc.b	smpsNoAttack, $01
000DFD21 E10F                       	smpsAlterNote       $0F
000DFD23 E701                       	dc.b	smpsNoAttack, $01
000DFD25 E109                       	smpsAlterNote       $09
000DFD27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFD2B E10C                       	smpsAlterNote       $0C
000DFD2D E701                       	dc.b	smpsNoAttack, $01
000DFD2F E112                       	smpsAlterNote       $12
000DFD31 E701                       	dc.b	smpsNoAttack, $01
000DFD33 E113                       	smpsAlterNote       $13
000DFD35 8001                       	dc.b	nRst, $01
000DFD37 E10F                       	smpsAlterNote       $0F
000DFD39 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
000DFD45 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
000DFD4D E10D                       	smpsAlterNote       $0D
000DFD4F C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000DFD55 E10B                       	smpsAlterNote       $0B
000DFD57 BF0D                       	dc.b	nD5, $0D
000DFD59 E108                       	smpsAlterNote       $08
000DFD5B E701                       	dc.b	smpsNoAttack, $01
000DFD5D E104                       	smpsAlterNote       $04
000DFD5F E701                       	dc.b	smpsNoAttack, $01
000DFD61 E105                       	smpsAlterNote       $05
000DFD63 E701                       	dc.b	smpsNoAttack, $01
000DFD65 E10B                       	smpsAlterNote       $0B
000DFD67 E701                       	dc.b	smpsNoAttack, $01
000DFD69 E10F                       	smpsAlterNote       $0F
000DFD6B E701                       	dc.b	smpsNoAttack, $01
000DFD6D E10B                       	smpsAlterNote       $0B
000DFD6F E701                       	dc.b	smpsNoAttack, $01
000DFD71 E108                       	smpsAlterNote       $08
000DFD73 E701                       	dc.b	smpsNoAttack, $01
000DFD75 E104                       	smpsAlterNote       $04
000DFD77 E701                       	dc.b	smpsNoAttack, $01
000DFD79 E108                       	smpsAlterNote       $08
000DFD7B E701                       	dc.b	smpsNoAttack, $01
000DFD7D E10E                       	smpsAlterNote       $0E
000DFD7F E701                       	dc.b	smpsNoAttack, $01
000DFD81 E10F                       	smpsAlterNote       $0F
000DFD83 E701                       	dc.b	smpsNoAttack, $01
000DFD85 E10C                       	smpsAlterNote       $0C
000DFD87 C101                       	dc.b	nE5, $01
000DFD89 E10D                       	smpsAlterNote       $0D
000DFD8B C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
000DFD93 E10F                       	smpsAlterNote       $0F
000DFD95 C607                       	dc.b	nA5, $07
000DFD97 E10C                       	smpsAlterNote       $0C
000DFD99 CD07                       	dc.b	nE6, $07
000DFD9B E10D                       	smpsAlterNote       $0D
000DFD9D CE06 8001                  	dc.b	nF6, $06, nRst, $01
000DFDA1 E10C                       	smpsAlterNote       $0C
000DFDA3 CD03                       	dc.b	nE6, $03
000DFDA5 E10A                       	smpsAlterNote       $0A
000DFDA7 C903 8001                  	dc.b	nC6, $03, nRst, $01
000DFDAB E10D                       	smpsAlterNote       $0D
000DFDAD C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
000DFDB3 E10A                       	smpsAlterNote       $0A
000DFDB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFDB9 E110                       	smpsAlterNote       $10
000DFDBB E701                       	dc.b	smpsNoAttack, $01
000DFDBD E114                       	smpsAlterNote       $14
000DFDBF E701                       	dc.b	smpsNoAttack, $01
000DFDC1 E113                       	smpsAlterNote       $13
000DFDC3 E701                       	dc.b	smpsNoAttack, $01
000DFDC5 E10D                       	smpsAlterNote       $0D
000DFDC7 E701                       	dc.b	smpsNoAttack, $01
000DFDC9 E109                       	smpsAlterNote       $09
000DFDCB E701                       	dc.b	smpsNoAttack, $01
000DFDCD E10D                       	smpsAlterNote       $0D
000DFDCF E701                       	dc.b	smpsNoAttack, $01
000DFDD1 E110                       	smpsAlterNote       $10
000DFDD3 E701                       	dc.b	smpsNoAttack, $01
000DFDD5 E114                       	smpsAlterNote       $14
000DFDD7 E701                       	dc.b	smpsNoAttack, $01
000DFDD9 E10F                       	smpsAlterNote       $0F
000DFDDB C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
000DFDDF E10C                       	smpsAlterNote       $0C
000DFDE1 E701                       	dc.b	smpsNoAttack, $01
000DFDE3 E108                       	smpsAlterNote       $08
000DFDE5 E701                       	dc.b	smpsNoAttack, $01
000DFDE7 E10C                       	smpsAlterNote       $0C
000DFDE9 E701                       	dc.b	smpsNoAttack, $01
000DFDEB E10F                       	smpsAlterNote       $0F
000DFDED E701                       	dc.b	smpsNoAttack, $01
000DFDEF E113                       	smpsAlterNote       $13
000DFDF1 E701                       	dc.b	smpsNoAttack, $01
000DFDF3 E10F                       	smpsAlterNote       $0F
000DFDF5 E701                       	dc.b	smpsNoAttack, $01
000DFDF7 E109                       	smpsAlterNote       $09
000DFDF9 E701                       	dc.b	smpsNoAttack, $01
000DFDFB E108                       	smpsAlterNote       $08
000DFDFD E701                       	dc.b	smpsNoAttack, $01
000DFDFF E10C                       	smpsAlterNote       $0C
000DFE01 E701                       	dc.b	smpsNoAttack, $01
000DFE03 E112                       	smpsAlterNote       $12
000DFE05 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFE09 E10F                       	smpsAlterNote       $0F
000DFE0B E701                       	dc.b	smpsNoAttack, $01
000DFE0D E109                       	smpsAlterNote       $09
000DFE0F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFE13 E10F                       	smpsAlterNote       $0F
000DFE15 E701                       	dc.b	smpsNoAttack, $01
000DFE17 E112                       	smpsAlterNote       $12
000DFE19 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFE1D E10C                       	smpsAlterNote       $0C
000DFE1F E701                       	dc.b	smpsNoAttack, $01
000DFE21 E108                       	smpsAlterNote       $08
000DFE23 E701                       	dc.b	smpsNoAttack, $01
000DFE25 E109                       	smpsAlterNote       $09
000DFE27 E701                       	dc.b	smpsNoAttack, $01
000DFE29 E10F                       	smpsAlterNote       $0F
000DFE2B E701                       	dc.b	smpsNoAttack, $01
000DFE2D E113                       	smpsAlterNote       $13
000DFE2F E701                       	dc.b	smpsNoAttack, $01
000DFE31 E10F                       	smpsAlterNote       $0F
000DFE33 E701                       	dc.b	smpsNoAttack, $01
000DFE35 E10C                       	smpsAlterNote       $0C
000DFE37 E701                       	dc.b	smpsNoAttack, $01
000DFE39 E108                       	smpsAlterNote       $08
000DFE3B E701                       	dc.b	smpsNoAttack, $01
000DFE3D E10C                       	smpsAlterNote       $0C
000DFE3F E701                       	dc.b	smpsNoAttack, $01
000DFE41 E112                       	smpsAlterNote       $12
000DFE43 E701                       	dc.b	smpsNoAttack, $01
000DFE45 E113                       	smpsAlterNote       $13
000DFE47 E701                       	dc.b	smpsNoAttack, $01
000DFE49 E10F                       	smpsAlterNote       $0F
000DFE4B E701                       	dc.b	smpsNoAttack, $01
000DFE4D E109                       	smpsAlterNote       $09
000DFE4F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFE53 E10C                       	smpsAlterNote       $0C
000DFE55 E701                       	dc.b	smpsNoAttack, $01
000DFE57 E112                       	smpsAlterNote       $12
000DFE59 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFE5D E10C                       	smpsAlterNote       $0C
000DFE5F E701                       	dc.b	smpsNoAttack, $01
000DFE61 E109                       	smpsAlterNote       $09
000DFE63 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFE67 E10F                       	smpsAlterNote       $0F
000DFE69 E701                       	dc.b	smpsNoAttack, $01
000DFE6B E113                       	smpsAlterNote       $13
000DFE6D E701                       	dc.b	smpsNoAttack, $01
000DFE6F E112                       	smpsAlterNote       $12
000DFE71 E701                       	dc.b	smpsNoAttack, $01
000DFE73 E10C                       	smpsAlterNote       $0C
000DFE75 E701                       	dc.b	smpsNoAttack, $01
000DFE77 E109                       	smpsAlterNote       $09
000DFE79 8001                       	dc.b	nRst, $01
000DFE7B E10F                       	smpsAlterNote       $0F
000DFE7D C60D                       	dc.b	nA5, $0D
000DFE7F E10C                       	smpsAlterNote       $0C
000DFE81 E701                       	dc.b	smpsNoAttack, $01
000DFE83 E108                       	smpsAlterNote       $08
000DFE85 E701                       	dc.b	smpsNoAttack, $01
000DFE87 E10C                       	smpsAlterNote       $0C
000DFE89 E701                       	dc.b	smpsNoAttack, $01
000DFE8B E112                       	smpsAlterNote       $12
000DFE8D E701                       	dc.b	smpsNoAttack, $01
000DFE8F E113                       	smpsAlterNote       $13
000DFE91 E701                       	dc.b	smpsNoAttack, $01
000DFE93 E10F                       	smpsAlterNote       $0F
000DFE95 E701                       	dc.b	smpsNoAttack, $01
000DFE97 E109                       	smpsAlterNote       $09
000DFE99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFE9D E10C                       	smpsAlterNote       $0C
000DFE9F E701                       	dc.b	smpsNoAttack, $01
000DFEA1 E112                       	smpsAlterNote       $12
000DFEA3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFEA7 E10C                       	smpsAlterNote       $0C
000DFEA9 E701                       	dc.b	smpsNoAttack, $01
000DFEAB E109                       	smpsAlterNote       $09
000DFEAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFEB1 E10F                       	smpsAlterNote       $0F
000DFEB3 E701                       	dc.b	smpsNoAttack, $01
000DFEB5 E113                       	smpsAlterNote       $13
000DFEB7 E701                       	dc.b	smpsNoAttack, $01
000DFEB9 E112                       	smpsAlterNote       $12
000DFEBB E701                       	dc.b	smpsNoAttack, $01
000DFEBD E10C                       	smpsAlterNote       $0C
000DFEBF E701                       	dc.b	smpsNoAttack, $01
000DFEC1 E108                       	smpsAlterNote       $08
000DFEC3 E701                       	dc.b	smpsNoAttack, $01
000DFEC5 E10C                       	smpsAlterNote       $0C
000DFEC7 E701                       	dc.b	smpsNoAttack, $01
000DFEC9 E10F                       	smpsAlterNote       $0F
000DFECB E701                       	dc.b	smpsNoAttack, $01
000DFECD E113                       	smpsAlterNote       $13
000DFECF E701                       	dc.b	smpsNoAttack, $01
000DFED1 E10F                       	smpsAlterNote       $0F
000DFED3 E701                       	dc.b	smpsNoAttack, $01
000DFED5 E109                       	smpsAlterNote       $09
000DFED7 E701                       	dc.b	smpsNoAttack, $01
000DFED9 E108                       	smpsAlterNote       $08
000DFEDB E701                       	dc.b	smpsNoAttack, $01
000DFEDD E10C                       	smpsAlterNote       $0C
000DFEDF E701                       	dc.b	smpsNoAttack, $01
000DFEE1 E112                       	smpsAlterNote       $12
000DFEE3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFEE7 E10F                       	smpsAlterNote       $0F
000DFEE9 E701                       	dc.b	smpsNoAttack, $01
000DFEEB E109                       	smpsAlterNote       $09
000DFEED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFEF1 E10F                       	smpsAlterNote       $0F
000DFEF3 E701                       	dc.b	smpsNoAttack, $01
000DFEF5 E112                       	smpsAlterNote       $12
000DFEF7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFEFB E10C                       	smpsAlterNote       $0C
000DFEFD E701                       	dc.b	smpsNoAttack, $01
000DFEFF E108                       	smpsAlterNote       $08
000DFF01 E701                       	dc.b	smpsNoAttack, $01
000DFF03 E10C                       	smpsAlterNote       $0C
000DFF05 E701                       	dc.b	smpsNoAttack, $01
000DFF07 E10F                       	smpsAlterNote       $0F
000DFF09 E701                       	dc.b	smpsNoAttack, $01
000DFF0B E113                       	smpsAlterNote       $13
000DFF0D E701                       	dc.b	smpsNoAttack, $01
000DFF0F E10F                       	smpsAlterNote       $0F
000DFF11 E701                       	dc.b	smpsNoAttack, $01
000DFF13 E109                       	smpsAlterNote       $09
000DFF15 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DFF1B E601                       	smpsAlterVol        $01
000DFF1D E10F                       	smpsAlterNote       $0F
000DFF1F C604                       	dc.b	nA5, $04
000DFF21 E10D                       	smpsAlterNote       $0D
000DFF23 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000DFF29 E10B                       	smpsAlterNote       $0B
000DFF2B BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
000DFF33 E10F                       	smpsAlterNote       $0F
000DFF35 C604 8001                  	dc.b	nA5, $04, nRst, $01
000DFF39 E10D                       	smpsAlterNote       $0D
000DFF3B C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000DFF41 E10C                       	smpsAlterNote       $0C
000DFF43 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
000DFF49 E10A                       	smpsAlterNote       $0A
000DFF4B C904 8001                  	dc.b	nC6, $04, nRst, $01
000DFF4F E110                       	smpsAlterNote       $10
000DFF51 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000DFF55 E10F                       	smpsAlterNote       $0F
000DFF57 C604                       	dc.b	nA5, $04
000DFF59 E10D                       	smpsAlterNote       $0D
000DFF5B C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000DFF67 E109                       	smpsAlterNote       $09
000DFF69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFF6D E10F                       	smpsAlterNote       $0F
000DFF6F E701                       	dc.b	smpsNoAttack, $01
000DFF71 E112                       	smpsAlterNote       $12
000DFF73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFF77 E10C                       	smpsAlterNote       $0C
000DFF79 E701                       	dc.b	smpsNoAttack, $01
000DFF7B E108                       	smpsAlterNote       $08
000DFF7D E701                       	dc.b	smpsNoAttack, $01
000DFF7F E10C                       	smpsAlterNote       $0C
000DFF81 E701                       	dc.b	smpsNoAttack, $01
000DFF83 E10F                       	smpsAlterNote       $0F
000DFF85 E701                       	dc.b	smpsNoAttack, $01
000DFF87 E113                       	smpsAlterNote       $13
000DFF89 E701                       	dc.b	smpsNoAttack, $01
000DFF8B E10D                       	smpsAlterNote       $0D
000DFF8D C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000DFF93 E10C                       	smpsAlterNote       $0C
000DFF95 C10D                       	dc.b	nE5, $0D
000DFF97 E109                       	smpsAlterNote       $09
000DFF99 E701                       	dc.b	smpsNoAttack, $01
000DFF9B E105                       	smpsAlterNote       $05
000DFF9D E701                       	dc.b	smpsNoAttack, $01
000DFF9F E106                       	smpsAlterNote       $06
000DFFA1 E701                       	dc.b	smpsNoAttack, $01
000DFFA3 E10C                       	smpsAlterNote       $0C
000DFFA5 E701                       	dc.b	smpsNoAttack, $01
000DFFA7 E110                       	smpsAlterNote       $10
000DFFA9 E701                       	dc.b	smpsNoAttack, $01
000DFFAB E10C                       	smpsAlterNote       $0C
000DFFAD E701                       	dc.b	smpsNoAttack, $01
000DFFAF E109                       	smpsAlterNote       $09
000DFFB1 E701                       	dc.b	smpsNoAttack, $01
000DFFB3 E105                       	smpsAlterNote       $05
000DFFB5 E701                       	dc.b	smpsNoAttack, $01
000DFFB7 E109                       	smpsAlterNote       $09
000DFFB9 E701                       	dc.b	smpsNoAttack, $01
000DFFBB E10F                       	smpsAlterNote       $0F
000DFFBD E701                       	dc.b	smpsNoAttack, $01
000DFFBF E110                       	smpsAlterNote       $10
000DFFC1 E701                       	dc.b	smpsNoAttack, $01
000DFFC3 E10C                       	smpsAlterNote       $0C
000DFFC5 E701                       	dc.b	smpsNoAttack, $01
000DFFC7 E106                       	smpsAlterNote       $06
000DFFC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFFCD E109                       	smpsAlterNote       $09
000DFFCF E701                       	dc.b	smpsNoAttack, $01
000DFFD1 E10F                       	smpsAlterNote       $0F
000DFFD3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFFD7 E109                       	smpsAlterNote       $09
000DFFD9 E701                       	dc.b	smpsNoAttack, $01
000DFFDB E106                       	smpsAlterNote       $06
000DFFDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFFE1 E10C                       	smpsAlterNote       $0C
000DFFE3 E701                       	dc.b	smpsNoAttack, $01
000DFFE5 E110                       	smpsAlterNote       $10
000DFFE7 E701                       	dc.b	smpsNoAttack, $01
000DFFE9 E10F                       	smpsAlterNote       $0F
000DFFEB E701                       	dc.b	smpsNoAttack, $01
000DFFED E109                       	smpsAlterNote       $09
000DFFEF E701                       	dc.b	smpsNoAttack, $01
000DFFF1 E105                       	smpsAlterNote       $05
000DFFF3 E701                       	dc.b	smpsNoAttack, $01
000DFFF5 E109                       	smpsAlterNote       $09
000DFFF7 E701                       	dc.b	smpsNoAttack, $01
000DFFF9 E10C                       	smpsAlterNote       $0C
000DFFFB E701                       	dc.b	smpsNoAttack, $01
000DFFFD E110                       	smpsAlterNote       $10
000DFFFF E701                       	dc.b	smpsNoAttack, $01
000E0001 E10C                       	smpsAlterNote       $0C
000E0003 E701                       	dc.b	smpsNoAttack, $01
000E0005 E106                       	smpsAlterNote       $06
000E0007 E701                       	dc.b	smpsNoAttack, $01
000E0009 E105                       	smpsAlterNote       $05
000E000B E701                       	dc.b	smpsNoAttack, $01
000E000D E109                       	smpsAlterNote       $09
000E000F E701                       	dc.b	smpsNoAttack, $01
000E0011 E10F                       	smpsAlterNote       $0F
000E0013 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0017 E10C                       	smpsAlterNote       $0C
000E0019 E701                       	dc.b	smpsNoAttack, $01
000E001B E106                       	smpsAlterNote       $06
000E001D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0021 E10C                       	smpsAlterNote       $0C
000E0023 E701                       	dc.b	smpsNoAttack, $01
000E0025 E10F                       	smpsAlterNote       $0F
000E0027 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E002B E109                       	smpsAlterNote       $09
000E002D E701                       	dc.b	smpsNoAttack, $01
000E002F E105                       	smpsAlterNote       $05
000E0031 E701                       	dc.b	smpsNoAttack, $01
000E0033 E106                       	smpsAlterNote       $06
000E0035 E701                       	dc.b	smpsNoAttack, $01
000E0037 E10C                       	smpsAlterNote       $0C
000E0039 E701                       	dc.b	smpsNoAttack, $01
000E003B E110                       	smpsAlterNote       $10
000E003D E701                       	dc.b	smpsNoAttack, $01
000E003F E10C                       	smpsAlterNote       $0C
000E0041 E701                       	dc.b	smpsNoAttack, $01
000E0043 E109                       	smpsAlterNote       $09
000E0045 E701                       	dc.b	smpsNoAttack, $01
000E0047 E105                       	smpsAlterNote       $05
000E0049 E701                       	dc.b	smpsNoAttack, $01
000E004B E109                       	smpsAlterNote       $09
000E004D E701                       	dc.b	smpsNoAttack, $01
000E004F E10F                       	smpsAlterNote       $0F
000E0051 E701                       	dc.b	smpsNoAttack, $01
000E0053 E110                       	smpsAlterNote       $10
000E0055 E701                       	dc.b	smpsNoAttack, $01
000E0057 E10C                       	smpsAlterNote       $0C
000E0059 E701                       	dc.b	smpsNoAttack, $01
000E005B E106                       	smpsAlterNote       $06
000E005D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0061 E109                       	smpsAlterNote       $09
000E0063 E701                       	dc.b	smpsNoAttack, $01
000E0065 E10F                       	smpsAlterNote       $0F
000E0067 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E006B E109                       	smpsAlterNote       $09
000E006D E701                       	dc.b	smpsNoAttack, $01
000E006F E106                       	smpsAlterNote       $06
000E0071 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0075 E10C                       	smpsAlterNote       $0C
000E0077 E701                       	dc.b	smpsNoAttack, $01
000E0079 E110                       	smpsAlterNote       $10
000E007B E701                       	dc.b	smpsNoAttack, $01
000E007D E10F                       	smpsAlterNote       $0F
000E007F E701                       	dc.b	smpsNoAttack, $01
000E0081 E109                       	smpsAlterNote       $09
000E0083 E701                       	dc.b	smpsNoAttack, $01
000E0085 E105                       	smpsAlterNote       $05
000E0087 E701                       	dc.b	smpsNoAttack, $01
000E0089 E109                       	smpsAlterNote       $09
000E008B E701                       	dc.b	smpsNoAttack, $01
000E008D E10C                       	smpsAlterNote       $0C
000E008F E701                       	dc.b	smpsNoAttack, $01
000E0091 E110                       	smpsAlterNote       $10
000E0093 E701                       	dc.b	smpsNoAttack, $01
000E0095 E10C                       	smpsAlterNote       $0C
000E0097 E701                       	dc.b	smpsNoAttack, $01
000E0099 E106                       	smpsAlterNote       $06
000E009B E701                       	dc.b	smpsNoAttack, $01
000E009D E105                       	smpsAlterNote       $05
000E009F E701                       	dc.b	smpsNoAttack, $01
000E00A1 E109                       	smpsAlterNote       $09
000E00A3 E701                       	dc.b	smpsNoAttack, $01
000E00A5 E10F                       	smpsAlterNote       $0F
000E00A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E00AB E109                       	smpsAlterNote       $09
000E00AD E701                       	dc.b	smpsNoAttack, $01
000E00AF E106                       	smpsAlterNote       $06
000E00B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E00B5 E10C                       	smpsAlterNote       $0C
000E00B7 E701                       	dc.b	smpsNoAttack, $01
000E00B9 E110                       	smpsAlterNote       $10
000E00BB E701                       	dc.b	smpsNoAttack, $01
000E00BD E10F                       	smpsAlterNote       $0F
000E00BF E701                       	dc.b	smpsNoAttack, $01
000E00C1 E109                       	smpsAlterNote       $09
000E00C3 E701                       	dc.b	smpsNoAttack, $01
000E00C5 E105                       	smpsAlterNote       $05
000E00C7 E701                       	dc.b	smpsNoAttack, $01
000E00C9 E109                       	smpsAlterNote       $09
000E00CB E701                       	dc.b	smpsNoAttack, $01
000E00CD E10C                       	smpsAlterNote       $0C
000E00CF E701                       	dc.b	smpsNoAttack, $01
000E00D1 E110                       	smpsAlterNote       $10
000E00D3 E701                       	dc.b	smpsNoAttack, $01
000E00D5 E10C                       	smpsAlterNote       $0C
000E00D7 E701                       	dc.b	smpsNoAttack, $01
000E00D9 E106                       	smpsAlterNote       $06
000E00DB E701                       	dc.b	smpsNoAttack, $01
000E00DD E105                       	smpsAlterNote       $05
000E00DF E701                       	dc.b	smpsNoAttack, $01
000E00E1 E109                       	smpsAlterNote       $09
000E00E3 E701                       	dc.b	smpsNoAttack, $01
000E00E5 E10F                       	smpsAlterNote       $0F
000E00E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E00EB E10C                       	smpsAlterNote       $0C
000E00ED E701                       	dc.b	smpsNoAttack, $01
000E00EF E106                       	smpsAlterNote       $06
000E00F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E00F5 E10C                       	smpsAlterNote       $0C
000E00F7 E701                       	dc.b	smpsNoAttack, $01
000E00F9 E10F                       	smpsAlterNote       $0F
000E00FB E701                       	dc.b	smpsNoAttack, $01
000E00FD E110                       	smpsAlterNote       $10
000E00FF 8001                       	dc.b	nRst, $01
000E0101 E10F                       	smpsAlterNote       $0F
000E0103 C604                       	dc.b	nA5, $04
000E0105 E10D                       	smpsAlterNote       $0D
000E0107 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000E010D E10B                       	smpsAlterNote       $0B
000E010F BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
000E0115 E10F                       	smpsAlterNote       $0F
000E0117 C604 8001                  	dc.b	nA5, $04, nRst, $01
000E011B E10D                       	smpsAlterNote       $0D
000E011D C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000E0123 E10C                       	smpsAlterNote       $0C
000E0125 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
000E012B E10A                       	smpsAlterNote       $0A
000E012D C904                       	dc.b	nC6, $04
000E012F E110                       	smpsAlterNote       $10
000E0131 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000E0135 E10F                       	smpsAlterNote       $0F
000E0137 C604                       	dc.b	nA5, $04
000E0139 E10D                       	smpsAlterNote       $0D
000E013B C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000E0147 E109                       	smpsAlterNote       $09
000E0149 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E014D E10F                       	smpsAlterNote       $0F
000E014F E701                       	dc.b	smpsNoAttack, $01
000E0151 E112                       	smpsAlterNote       $12
000E0153 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0157 E10C                       	smpsAlterNote       $0C
000E0159 E701                       	dc.b	smpsNoAttack, $01
000E015B E108                       	smpsAlterNote       $08
000E015D E701                       	dc.b	smpsNoAttack, $01
000E015F E109                       	smpsAlterNote       $09
000E0161 E701                       	dc.b	smpsNoAttack, $01
000E0163 E10F                       	smpsAlterNote       $0F
000E0165 E701                       	dc.b	smpsNoAttack, $01
000E0167 E113                       	smpsAlterNote       $13
000E0169 E701                       	dc.b	smpsNoAttack, $01
000E016B E10D                       	smpsAlterNote       $0D
000E016D C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000E0173 E10C                       	smpsAlterNote       $0C
000E0175 C10D                       	dc.b	nE5, $0D
000E0177 E109                       	smpsAlterNote       $09
000E0179 E701                       	dc.b	smpsNoAttack, $01
000E017B E106                       	smpsAlterNote       $06
000E017D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0181 E10C                       	smpsAlterNote       $0C
000E0183 E701                       	dc.b	smpsNoAttack, $01
000E0185 E110                       	smpsAlterNote       $10
000E0187 E701                       	dc.b	smpsNoAttack, $01
000E0189 E10F                       	smpsAlterNote       $0F
000E018B E701                       	dc.b	smpsNoAttack, $01
000E018D E109                       	smpsAlterNote       $09
000E018F E701                       	dc.b	smpsNoAttack, $01
000E0191 E105                       	smpsAlterNote       $05
000E0193 E701                       	dc.b	smpsNoAttack, $01
000E0195 E109                       	smpsAlterNote       $09
000E0197 E701                       	dc.b	smpsNoAttack, $01
000E0199 E10C                       	smpsAlterNote       $0C
000E019B E701                       	dc.b	smpsNoAttack, $01
000E019D E110                       	smpsAlterNote       $10
000E019F E701                       	dc.b	smpsNoAttack, $01
000E01A1 E10C                       	smpsAlterNote       $0C
000E01A3 E701                       	dc.b	smpsNoAttack, $01
000E01A5 E106                       	smpsAlterNote       $06
000E01A7 E701                       	dc.b	smpsNoAttack, $01
000E01A9 E105                       	smpsAlterNote       $05
000E01AB E701                       	dc.b	smpsNoAttack, $01
000E01AD E109                       	smpsAlterNote       $09
000E01AF E701                       	dc.b	smpsNoAttack, $01
000E01B1 E10F                       	smpsAlterNote       $0F
000E01B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E01B7 E10C                       	smpsAlterNote       $0C
000E01B9 E701                       	dc.b	smpsNoAttack, $01
000E01BB E106                       	smpsAlterNote       $06
000E01BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E01C1 E10C                       	smpsAlterNote       $0C
000E01C3 E701                       	dc.b	smpsNoAttack, $01
000E01C5 E10F                       	smpsAlterNote       $0F
000E01C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E01CB E109                       	smpsAlterNote       $09
000E01CD E701                       	dc.b	smpsNoAttack, $01
000E01CF E105                       	smpsAlterNote       $05
000E01D1 E701                       	dc.b	smpsNoAttack, $01
000E01D3 E106                       	smpsAlterNote       $06
000E01D5 E701                       	dc.b	smpsNoAttack, $01
000E01D7 E10C                       	smpsAlterNote       $0C
000E01D9 E701                       	dc.b	smpsNoAttack, $01
000E01DB E110                       	smpsAlterNote       $10
000E01DD E701                       	dc.b	smpsNoAttack, $01
000E01DF E10C                       	smpsAlterNote       $0C
000E01E1 E701                       	dc.b	smpsNoAttack, $01
000E01E3 E109                       	smpsAlterNote       $09
000E01E5 E701                       	dc.b	smpsNoAttack, $01
000E01E7 E105                       	smpsAlterNote       $05
000E01E9 E701                       	dc.b	smpsNoAttack, $01
000E01EB E109                       	smpsAlterNote       $09
000E01ED E701                       	dc.b	smpsNoAttack, $01
000E01EF E10F                       	smpsAlterNote       $0F
000E01F1 E701                       	dc.b	smpsNoAttack, $01
000E01F3 E110                       	smpsAlterNote       $10
000E01F5 E701                       	dc.b	smpsNoAttack, $01
000E01F7 E10C                       	smpsAlterNote       $0C
000E01F9 E701                       	dc.b	smpsNoAttack, $01
000E01FB E106                       	smpsAlterNote       $06
000E01FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0201 E109                       	smpsAlterNote       $09
000E0203 E701                       	dc.b	smpsNoAttack, $01
000E0205 E10F                       	smpsAlterNote       $0F
000E0207 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E020B E109                       	smpsAlterNote       $09
000E020D E701                       	dc.b	smpsNoAttack, $01
000E020F E106                       	smpsAlterNote       $06
000E0211 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0215 E10C                       	smpsAlterNote       $0C
000E0217 E701                       	dc.b	smpsNoAttack, $01
000E0219 E110                       	smpsAlterNote       $10
000E021B E701                       	dc.b	smpsNoAttack, $01
000E021D E10F                       	smpsAlterNote       $0F
000E021F E701                       	dc.b	smpsNoAttack, $01
000E0221 E109                       	smpsAlterNote       $09
000E0223 E701                       	dc.b	smpsNoAttack, $01
000E0225 E105                       	smpsAlterNote       $05
000E0227 E701                       	dc.b	smpsNoAttack, $01
000E0229 E109                       	smpsAlterNote       $09
000E022B E701                       	dc.b	smpsNoAttack, $01
000E022D E10F                       	smpsAlterNote       $0F
000E022F E701                       	dc.b	smpsNoAttack, $01
000E0231 E110                       	smpsAlterNote       $10
000E0233 E701                       	dc.b	smpsNoAttack, $01
000E0235 E10C                       	smpsAlterNote       $0C
000E0237 E701                       	dc.b	smpsNoAttack, $01
000E0239 E106                       	smpsAlterNote       $06
000E023B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E023F E109                       	smpsAlterNote       $09
000E0241 E701                       	dc.b	smpsNoAttack, $01
000E0243 E10F                       	smpsAlterNote       $0F
000E0245 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0249 E109                       	smpsAlterNote       $09
000E024B E701                       	dc.b	smpsNoAttack, $01
000E024D E106                       	smpsAlterNote       $06
000E024F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0253 E10C                       	smpsAlterNote       $0C
000E0255 E701                       	dc.b	smpsNoAttack, $01
000E0257 E110                       	smpsAlterNote       $10
000E0259 E701                       	dc.b	smpsNoAttack, $01
000E025B E10F                       	smpsAlterNote       $0F
000E025D E701                       	dc.b	smpsNoAttack, $01
000E025F E109                       	smpsAlterNote       $09
000E0261 E701                       	dc.b	smpsNoAttack, $01
000E0263 E105                       	smpsAlterNote       $05
000E0265 E701                       	dc.b	smpsNoAttack, $01
000E0267 E109                       	smpsAlterNote       $09
000E0269 E701                       	dc.b	smpsNoAttack, $01
000E026B E10C                       	smpsAlterNote       $0C
000E026D E701                       	dc.b	smpsNoAttack, $01
000E026F E110                       	smpsAlterNote       $10
000E0271 E701                       	dc.b	smpsNoAttack, $01
000E0273 E10C                       	smpsAlterNote       $0C
000E0275 E701                       	dc.b	smpsNoAttack, $01
000E0277 E106                       	smpsAlterNote       $06
000E0279 E701                       	dc.b	smpsNoAttack, $01
000E027B E105                       	smpsAlterNote       $05
000E027D E701                       	dc.b	smpsNoAttack, $01
000E027F E109                       	smpsAlterNote       $09
000E0281 E701                       	dc.b	smpsNoAttack, $01
000E0283 E10F                       	smpsAlterNote       $0F
000E0285 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0289 E10C                       	smpsAlterNote       $0C
000E028B E701                       	dc.b	smpsNoAttack, $01
000E028D E106                       	smpsAlterNote       $06
000E028F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0293 E10C                       	smpsAlterNote       $0C
000E0295 E701                       	dc.b	smpsNoAttack, $01
000E0297 E10F                       	smpsAlterNote       $0F
000E0299 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E029D E109                       	smpsAlterNote       $09
000E029F E701                       	dc.b	smpsNoAttack, $01
000E02A1 E105                       	smpsAlterNote       $05
000E02A3 E701                       	dc.b	smpsNoAttack, $01
000E02A5 E106                       	smpsAlterNote       $06
000E02A7 E701                       	dc.b	smpsNoAttack, $01
000E02A9 E10C                       	smpsAlterNote       $0C
000E02AB E701                       	dc.b	smpsNoAttack, $01
000E02AD E110                       	smpsAlterNote       $10
000E02AF E701                       	dc.b	smpsNoAttack, $01
000E02B1 E10C                       	smpsAlterNote       $0C
000E02B3 E701                       	dc.b	smpsNoAttack, $01
000E02B5 E109                       	smpsAlterNote       $09
000E02B7 E701                       	dc.b	smpsNoAttack, $01
000E02B9 E105                       	smpsAlterNote       $05
000E02BB E701                       	dc.b	smpsNoAttack, $01
000E02BD E109                       	smpsAlterNote       $09
000E02BF E701                       	dc.b	smpsNoAttack, $01
000E02C1 E10F                       	smpsAlterNote       $0F
000E02C3 E701                       	dc.b	smpsNoAttack, $01
000E02C5 E110                       	smpsAlterNote       $10
000E02C7 E701                       	dc.b	smpsNoAttack, $01
000E02C9 E10C                       	smpsAlterNote       $0C
000E02CB E701                       	dc.b	smpsNoAttack, $01
000E02CD E106                       	smpsAlterNote       $06
000E02CF E701                       	dc.b	smpsNoAttack, $01
000E02D1 E10B                       	smpsAlterNote       $0B
000E02D3 BF02                       	dc.b	nD5, $02
000E02D5 E10C                       	smpsAlterNote       $0C
000E02D7 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
000E02DD E109                       	smpsAlterNote       $09
000E02DF E701                       	dc.b	smpsNoAttack, $01
000E02E1 E105                       	smpsAlterNote       $05
000E02E3 E701                       	dc.b	smpsNoAttack, $01
000E02E5 E109                       	smpsAlterNote       $09
000E02E7 E701                       	dc.b	smpsNoAttack, $01
000E02E9 E10F                       	smpsAlterNote       $0F
000E02EB E701                       	dc.b	smpsNoAttack, $01
000E02ED E110                       	smpsAlterNote       $10
000E02EF E701                       	dc.b	smpsNoAttack, $01
000E02F1 E10C                       	smpsAlterNote       $0C
000E02F3 E701                       	dc.b	smpsNoAttack, $01
000E02F5 E106                       	smpsAlterNote       $06
000E02F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E02FB E109                       	smpsAlterNote       $09
000E02FD E701                       	dc.b	smpsNoAttack, $01
000E02FF E10F                       	smpsAlterNote       $0F
000E0301 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0305 E109                       	smpsAlterNote       $09
000E0307 E701                       	dc.b	smpsNoAttack, $01
000E0309 E106                       	smpsAlterNote       $06
000E030B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E030F E10C                       	smpsAlterNote       $0C
000E0311 E701                       	dc.b	smpsNoAttack, $01
000E0313 E110                       	smpsAlterNote       $10
000E0315 E701                       	dc.b	smpsNoAttack, $01
000E0317 E10F                       	smpsAlterNote       $0F
000E0319 E701                       	dc.b	smpsNoAttack, $01
000E031B E109                       	smpsAlterNote       $09
000E031D E701                       	dc.b	smpsNoAttack, $01
000E031F E105                       	smpsAlterNote       $05
000E0321 E701                       	dc.b	smpsNoAttack, $01
000E0323 E109                       	smpsAlterNote       $09
000E0325 E701                       	dc.b	smpsNoAttack, $01
000E0327 E10C                       	smpsAlterNote       $0C
000E0329 E701                       	dc.b	smpsNoAttack, $01
000E032B E110                       	smpsAlterNote       $10
000E032D E701                       	dc.b	smpsNoAttack, $01
000E032F E10C                       	smpsAlterNote       $0C
000E0331 E701                       	dc.b	smpsNoAttack, $01
000E0333 E106                       	smpsAlterNote       $06
000E0335 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E0339 E10D                       	smpsAlterNote       $0D
000E033B C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
000E0343 E10C                       	smpsAlterNote       $0C
000E0345 C10D                       	dc.b	nE5, $0D
000E0347 E106                       	smpsAlterNote       $06
000E0349 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E034D E109                       	smpsAlterNote       $09
000E034F E701                       	dc.b	smpsNoAttack, $01
000E0351 E10F                       	smpsAlterNote       $0F
000E0353 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0357 E109                       	smpsAlterNote       $09
000E0359 E701                       	dc.b	smpsNoAttack, $01
000E035B E106                       	smpsAlterNote       $06
000E035D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0361 E10C                       	smpsAlterNote       $0C
000E0363 E701                       	dc.b	smpsNoAttack, $01
000E0365 E110                       	smpsAlterNote       $10
000E0367 E701                       	dc.b	smpsNoAttack, $01
000E0369 E10F                       	smpsAlterNote       $0F
000E036B E701                       	dc.b	smpsNoAttack, $01
000E036D E109                       	smpsAlterNote       $09
000E036F E701                       	dc.b	smpsNoAttack, $01
000E0371 E105                       	smpsAlterNote       $05
000E0373 E701                       	dc.b	smpsNoAttack, $01
000E0375 E106                       	smpsAlterNote       $06
000E0377 800F                       	dc.b	nRst, $0F
000E037B E6FF                       	smpsAlterVol        $FF
000E037D E10F                       	smpsAlterNote       $0F
000E037F BA01                       	dc.b	nA4, $01
000E0381 E110                       	smpsAlterNote       $10
000E0383 BB02                       	dc.b	nBb4, $02
000E0385 E10F                       	smpsAlterNote       $0F
000E0387 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
000E038D E10B                       	smpsAlterNote       $0B
000E038F BF03 8001                  	dc.b	nD5, $03, nRst, $01
000E0393 E10C                       	smpsAlterNote       $0C
000E0395 C103                       	dc.b	nE5, $03
000E0397 E10D                       	smpsAlterNote       $0D
000E0399 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
000E03A3 E10B                       	smpsAlterNote       $0B
000E03A5 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
000E03A9 E104                       	smpsAlterNote       $04
000E03AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E03AF E10A                       	smpsAlterNote       $0A
000E03B1 E701                       	dc.b	smpsNoAttack, $01
000E03B3 E10D                       	smpsAlterNote       $0D
000E03B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E03B9 E107                       	smpsAlterNote       $07
000E03BB E701                       	dc.b	smpsNoAttack, $01
000E03BD E104                       	smpsAlterNote       $04
000E03BF 8001                       	dc.b	nRst, $01
000E03C1 E110                       	smpsAlterNote       $10
000E03C3 C703                       	dc.b	nBb5, $03
000E03C5 E10F                       	smpsAlterNote       $0F
000E03C7 C603 8001                  	dc.b	nA5, $03, nRst, $01
000E03CB E10D                       	smpsAlterNote       $0D
000E03CD C403 C60D                  	dc.b	nG5, $03, nA5, $0D
000E03D1 E10C                       	smpsAlterNote       $0C
000E03D3 E701                       	dc.b	smpsNoAttack, $01
000E03D5 E108                       	smpsAlterNote       $08
000E03D7 E701                       	dc.b	smpsNoAttack, $01
000E03D9 E109                       	smpsAlterNote       $09
000E03DB E701                       	dc.b	smpsNoAttack, $01
000E03DD E10F                       	smpsAlterNote       $0F
000E03DF E701                       	dc.b	smpsNoAttack, $01
000E03E1 E113                       	smpsAlterNote       $13
000E03E3 E701                       	dc.b	smpsNoAttack, $01
000E03E5 E10F                       	smpsAlterNote       $0F
000E03E7 E701                       	dc.b	smpsNoAttack, $01
000E03E9 E10C                       	smpsAlterNote       $0C
000E03EB E701                       	dc.b	smpsNoAttack, $01
000E03ED E108                       	smpsAlterNote       $08
000E03EF E701                       	dc.b	smpsNoAttack, $01
000E03F1 E10C                       	smpsAlterNote       $0C
000E03F3 E701                       	dc.b	smpsNoAttack, $01
000E03F5 E112                       	smpsAlterNote       $12
000E03F7 E701                       	dc.b	smpsNoAttack, $01
000E03F9 E113                       	smpsAlterNote       $13
000E03FB E701                       	dc.b	smpsNoAttack, $01
000E03FD E10F                       	smpsAlterNote       $0F
000E03FF E701                       	dc.b	smpsNoAttack, $01
000E0401 E109                       	smpsAlterNote       $09
000E0403 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0407 E10C                       	smpsAlterNote       $0C
000E0409 E701                       	dc.b	smpsNoAttack, $01
000E040B E112                       	smpsAlterNote       $12
000E040D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0411 E10C                       	smpsAlterNote       $0C
000E0413 E701                       	dc.b	smpsNoAttack, $01
000E0415 E109                       	smpsAlterNote       $09
000E0417 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E041B E10F                       	smpsAlterNote       $0F
000E041D E701                       	dc.b	smpsNoAttack, $01
000E041F E113                       	smpsAlterNote       $13
000E0421 E701                       	dc.b	smpsNoAttack, $01
000E0423 E112                       	smpsAlterNote       $12
000E0425 E701                       	dc.b	smpsNoAttack, $01
000E0427 E10C                       	smpsAlterNote       $0C
000E0429 E701                       	dc.b	smpsNoAttack, $01
000E042B E108                       	smpsAlterNote       $08
000E042D E701                       	dc.b	smpsNoAttack, $01
000E042F E10C                       	smpsAlterNote       $0C
000E0431 E701                       	dc.b	smpsNoAttack, $01
000E0433 E10F                       	smpsAlterNote       $0F
000E0435 E701                       	dc.b	smpsNoAttack, $01
000E0437 E113                       	smpsAlterNote       $13
000E0439 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000E043D E10B                       	smpsAlterNote       $0B
000E043F BF03                       	dc.b	nD5, $03
000E0441 E10C                       	smpsAlterNote       $0C
000E0443 C103 8001                  	dc.b	nE5, $03, nRst, $01
000E0447 E10D                       	smpsAlterNote       $0D
000E0449 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000E0453 E10B                       	smpsAlterNote       $0B
000E0455 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
000E0461 E110                       	smpsAlterNote       $10
000E0463 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000E0467 E10F                       	smpsAlterNote       $0F
000E0469 C604                       	dc.b	nA5, $04
000E046B E10D                       	smpsAlterNote       $0D
000E046D C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000E0473 E109                       	smpsAlterNote       $09
000E0475 E701                       	dc.b	smpsNoAttack, $01
000E0477 E108                       	smpsAlterNote       $08
000E0479 E701                       	dc.b	smpsNoAttack, $01
000E047B E10C                       	smpsAlterNote       $0C
000E047D E701                       	dc.b	smpsNoAttack, $01
000E047F E112                       	smpsAlterNote       $12
000E0481 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0485 E10F                       	smpsAlterNote       $0F
000E0487 E701                       	dc.b	smpsNoAttack, $01
000E0489 E109                       	smpsAlterNote       $09
000E048B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E048F E10F                       	smpsAlterNote       $0F
000E0491 E701                       	dc.b	smpsNoAttack, $01
000E0493 E112                       	smpsAlterNote       $12
000E0495 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0499 E10C                       	smpsAlterNote       $0C
000E049B E701                       	dc.b	smpsNoAttack, $01
000E049D E108                       	smpsAlterNote       $08
000E049F E701                       	dc.b	smpsNoAttack, $01
000E04A1 E109                       	smpsAlterNote       $09
000E04A3 E701                       	dc.b	smpsNoAttack, $01
000E04A5 E10F                       	smpsAlterNote       $0F
000E04A7 E701                       	dc.b	smpsNoAttack, $01
000E04A9 E113                       	smpsAlterNote       $13
000E04AB E701                       	dc.b	smpsNoAttack, $01
000E04AD E10F                       	smpsAlterNote       $0F
000E04AF E701                       	dc.b	smpsNoAttack, $01
000E04B1 E10C                       	smpsAlterNote       $0C
000E04B3 E701                       	dc.b	smpsNoAttack, $01
000E04B5 E108                       	smpsAlterNote       $08
000E04B7 E701                       	dc.b	smpsNoAttack, $01
000E04B9 E10C                       	smpsAlterNote       $0C
000E04BB E701                       	dc.b	smpsNoAttack, $01
000E04BD E112                       	smpsAlterNote       $12
000E04BF E701                       	dc.b	smpsNoAttack, $01
000E04C1 E113                       	smpsAlterNote       $13
000E04C3 E701                       	dc.b	smpsNoAttack, $01
000E04C5 E10F                       	smpsAlterNote       $0F
000E04C7 E701                       	dc.b	smpsNoAttack, $01
000E04C9 E109                       	smpsAlterNote       $09
000E04CB E701                       	dc.b	smpsNoAttack, $01
000E04CD E10D                       	smpsAlterNote       $0D
000E04CF C402                       	dc.b	nG5, $02
000E04D1 E10F                       	smpsAlterNote       $0F
000E04D3 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
000E04DD E10D                       	smpsAlterNote       $0D
000E04DF C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000E04E5 E10B                       	smpsAlterNote       $0B
000E04E7 BF0D                       	dc.b	nD5, $0D
000E04E9 E108                       	smpsAlterNote       $08
000E04EB E701                       	dc.b	smpsNoAttack, $01
000E04ED E104                       	smpsAlterNote       $04
000E04EF E701                       	dc.b	smpsNoAttack, $01
000E04F1 E105                       	smpsAlterNote       $05
000E04F3 E701                       	dc.b	smpsNoAttack, $01
000E04F5 E10B                       	smpsAlterNote       $0B
000E04F7 E701                       	dc.b	smpsNoAttack, $01
000E04F9 E10F                       	smpsAlterNote       $0F
000E04FB E701                       	dc.b	smpsNoAttack, $01
000E04FD E10B                       	smpsAlterNote       $0B
000E04FF E701                       	dc.b	smpsNoAttack, $01
000E0501 E108                       	smpsAlterNote       $08
000E0503 E701                       	dc.b	smpsNoAttack, $01
000E0505 E104                       	smpsAlterNote       $04
000E0507 E701                       	dc.b	smpsNoAttack, $01
000E0509 E108                       	smpsAlterNote       $08
000E050B E701                       	dc.b	smpsNoAttack, $01
000E050D E10E                       	smpsAlterNote       $0E
000E050F E701                       	dc.b	smpsNoAttack, $01
000E0511 E10F                       	smpsAlterNote       $0F
000E0513 E701                       	dc.b	smpsNoAttack, $01
000E0515 E10C                       	smpsAlterNote       $0C
000E0517 C101                       	dc.b	nE5, $01
000E0519 E10D                       	smpsAlterNote       $0D
000E051B C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
000E0523 E10F                       	smpsAlterNote       $0F
000E0525 C607                       	dc.b	nA5, $07
000E0527 E10C                       	smpsAlterNote       $0C
000E0529 CD07                       	dc.b	nE6, $07
000E052B E10D                       	smpsAlterNote       $0D
000E052D CE06 8001                  	dc.b	nF6, $06, nRst, $01
000E0531 E10C                       	smpsAlterNote       $0C
000E0533 CD03                       	dc.b	nE6, $03
000E0535 E10A                       	smpsAlterNote       $0A
000E0537 C903 8001                  	dc.b	nC6, $03, nRst, $01
000E053B E10D                       	smpsAlterNote       $0D
000E053D C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
000E0543 E10A                       	smpsAlterNote       $0A
000E0545 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0549 E110                       	smpsAlterNote       $10
000E054B E701                       	dc.b	smpsNoAttack, $01
000E054D E114                       	smpsAlterNote       $14
000E054F E701                       	dc.b	smpsNoAttack, $01
000E0551 E113                       	smpsAlterNote       $13
000E0553 E701                       	dc.b	smpsNoAttack, $01
000E0555 E10D                       	smpsAlterNote       $0D
000E0557 E701                       	dc.b	smpsNoAttack, $01
000E0559 E109                       	smpsAlterNote       $09
000E055B E701                       	dc.b	smpsNoAttack, $01
000E055D E10D                       	smpsAlterNote       $0D
000E055F E701                       	dc.b	smpsNoAttack, $01
000E0561 E110                       	smpsAlterNote       $10
000E0563 E701                       	dc.b	smpsNoAttack, $01
000E0565 E114                       	smpsAlterNote       $14
000E0567 E701                       	dc.b	smpsNoAttack, $01
000E0569 E10F                       	smpsAlterNote       $0F
000E056B C607                       	dc.b	nA5, $07
000E056D E10D                       	smpsAlterNote       $0D
000E056F C40D                       	dc.b	nG5, $0D
000E0571 E10A                       	smpsAlterNote       $0A
000E0573 E701                       	dc.b	smpsNoAttack, $01
000E0575 E106                       	smpsAlterNote       $06
000E0577 E701                       	dc.b	smpsNoAttack, $01
000E0579 E10A                       	smpsAlterNote       $0A
000E057B E701                       	dc.b	smpsNoAttack, $01
000E057D E10D                       	smpsAlterNote       $0D
000E057F E701                       	dc.b	smpsNoAttack, $01
000E0581 E111                       	smpsAlterNote       $11
000E0583 E701                       	dc.b	smpsNoAttack, $01
000E0585 E10D                       	smpsAlterNote       $0D
000E0587 E701                       	dc.b	smpsNoAttack, $01
000E0589 E107                       	smpsAlterNote       $07
000E058B E701                       	dc.b	smpsNoAttack, $01
000E058D E106                       	smpsAlterNote       $06
000E058F E701                       	dc.b	smpsNoAttack, $01
000E0591 E10A                       	smpsAlterNote       $0A
000E0593 E701                       	dc.b	smpsNoAttack, $01
000E0595 E110                       	smpsAlterNote       $10
000E0597 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E059B E10D                       	smpsAlterNote       $0D
000E059D E701                       	dc.b	smpsNoAttack, $01
000E059F E107                       	smpsAlterNote       $07
000E05A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E05A5 E10F                       	smpsAlterNote       $0F
000E05A7 C60E                       	dc.b	nA5, $0E
000E05A9 E109                       	smpsAlterNote       $09
000E05AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E05AF E10F                       	smpsAlterNote       $0F
000E05B1 E701                       	dc.b	smpsNoAttack, $01
000E05B3 E112                       	smpsAlterNote       $12
000E05B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E05B9 E10C                       	smpsAlterNote       $0C
000E05BB E701                       	dc.b	smpsNoAttack, $01
000E05BD E108                       	smpsAlterNote       $08
000E05BF E701                       	dc.b	smpsNoAttack, $01
000E05C1 E109                       	smpsAlterNote       $09
000E05C3 E701                       	dc.b	smpsNoAttack, $01
000E05C5 E10F                       	smpsAlterNote       $0F
000E05C7 E701                       	dc.b	smpsNoAttack, $01
000E05C9 E113                       	smpsAlterNote       $13
000E05CB E701                       	dc.b	smpsNoAttack, $01
000E05CD E10F                       	smpsAlterNote       $0F
000E05CF E701                       	dc.b	smpsNoAttack, $01
000E05D1 E10C                       	smpsAlterNote       $0C
000E05D3 E701                       	dc.b	smpsNoAttack, $01
000E05D5 E108                       	smpsAlterNote       $08
000E05D7 E701                       	dc.b	smpsNoAttack, $01
000E05D9 E109                       	smpsAlterNote       $09
000E05DB 8001                       	dc.b	nRst, $01
000E05DD E110                       	smpsAlterNote       $10
000E05DF C70D                       	dc.b	nBb5, $0D
000E05E1 E10D                       	smpsAlterNote       $0D
000E05E3 E701                       	dc.b	smpsNoAttack, $01
000E05E5 E109                       	smpsAlterNote       $09
000E05E7 E701                       	dc.b	smpsNoAttack, $01
000E05E9 E10D                       	smpsAlterNote       $0D
000E05EB E701                       	dc.b	smpsNoAttack, $01
000E05ED E113                       	smpsAlterNote       $13
000E05EF E701                       	dc.b	smpsNoAttack, $01
000E05F1 E114                       	smpsAlterNote       $14
000E05F3 E701                       	dc.b	smpsNoAttack, $01
000E05F5 E110                       	smpsAlterNote       $10
000E05F7 E701                       	dc.b	smpsNoAttack, $01
000E05F9 E10A                       	smpsAlterNote       $0A
000E05FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E05FF E10D                       	smpsAlterNote       $0D
000E0601 E701                       	dc.b	smpsNoAttack, $01
000E0603 E113                       	smpsAlterNote       $13
000E0605 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0609 E10D                       	smpsAlterNote       $0D
000E060B E701                       	dc.b	smpsNoAttack, $01
000E060D E10A                       	smpsAlterNote       $0A
000E060F E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
000E0619 E10B                       	smpsAlterNote       $0B
000E061B 8001                       	dc.b	nRst, $01
000E061D E10C                       	smpsAlterNote       $0C
000E061F CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
000E0623 E10B                       	smpsAlterNote       $0B
000E0625 CB0D                       	dc.b	nD6, $0D
000E0627 E105                       	smpsAlterNote       $05
000E0629 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E062D E108                       	smpsAlterNote       $08
000E062F E701                       	dc.b	smpsNoAttack, $01
000E0631 E10E                       	smpsAlterNote       $0E
000E0633 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0637 E108                       	smpsAlterNote       $08
000E0639 E701                       	dc.b	smpsNoAttack, $01
000E063B E105                       	smpsAlterNote       $05
000E063D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0641 E10B                       	smpsAlterNote       $0B
000E0643 E701                       	dc.b	smpsNoAttack, $01
000E0645 E10F                       	smpsAlterNote       $0F
000E0647 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E064B E10C                       	smpsAlterNote       $0C
000E064D CC0D                       	dc.b	nEb6, $0D
000E064F E106                       	smpsAlterNote       $06
000E0651 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0655 E109                       	smpsAlterNote       $09
000E0657 E701                       	dc.b	smpsNoAttack, $01
000E0659 E10C                       	smpsAlterNote       $0C
000E065B 8001                       	dc.b	nRst, $01
000E065D E10A                       	smpsAlterNote       $0A
000E065F C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
000E066B CB0E                       	dc.b	nD6, $0E
000E066D E105                       	smpsAlterNote       $05
000E066F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0673 E10B                       	smpsAlterNote       $0B
000E0675 E701                       	dc.b	smpsNoAttack, $01
000E0677 E10E                       	smpsAlterNote       $0E
000E0679 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E067D E108                       	smpsAlterNote       $08
000E067F E701                       	dc.b	smpsNoAttack, $01
000E0681 E104                       	smpsAlterNote       $04
000E0683 E701                       	dc.b	smpsNoAttack, $01
000E0685 E105                       	smpsAlterNote       $05
000E0687 E701                       	dc.b	smpsNoAttack, $01
000E0689 E10B                       	smpsAlterNote       $0B
000E068B E701                       	dc.b	smpsNoAttack, $01
000E068D E10F                       	smpsAlterNote       $0F
000E068F E701                       	dc.b	smpsNoAttack, $01
000E0691 E10D                       	smpsAlterNote       $0D
000E0693 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
000E0697 E10C                       	smpsAlterNote       $0C
000E0699 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
000E069D E10A                       	smpsAlterNote       $0A
000E069F C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
000E06AB CB0D                       	dc.b	nD6, $0D
000E06AD E108                       	smpsAlterNote       $08
000E06AF E701                       	dc.b	smpsNoAttack, $01
000E06B1 E104                       	smpsAlterNote       $04
000E06B3 E701                       	dc.b	smpsNoAttack, $01
000E06B5 E105                       	smpsAlterNote       $05
000E06B7 E701                       	dc.b	smpsNoAttack, $01
000E06B9 E10B                       	smpsAlterNote       $0B
000E06BB E701                       	dc.b	smpsNoAttack, $01
000E06BD E10F                       	smpsAlterNote       $0F
000E06BF E701                       	dc.b	smpsNoAttack, $01
000E06C1 E10B                       	smpsAlterNote       $0B
000E06C3 E701                       	dc.b	smpsNoAttack, $01
000E06C5 E108                       	smpsAlterNote       $08
000E06C7 E701                       	dc.b	smpsNoAttack, $01
000E06C9 E104                       	smpsAlterNote       $04
000E06CB E701                       	dc.b	smpsNoAttack, $01
000E06CD E108                       	smpsAlterNote       $08
000E06CF E701                       	dc.b	smpsNoAttack, $01
000E06D1 E10E                       	smpsAlterNote       $0E
000E06D3 E701                       	dc.b	smpsNoAttack, $01
000E06D5 E10F                       	smpsAlterNote       $0F
000E06D7 E701                       	dc.b	smpsNoAttack, $01
000E06D9 E10C                       	smpsAlterNote       $0C
000E06DB CC0D                       	dc.b	nEb6, $0D
000E06DD E109                       	smpsAlterNote       $09
000E06DF E701                       	dc.b	smpsNoAttack, $01
000E06E1 E105                       	smpsAlterNote       $05
000E06E3 E701                       	dc.b	smpsNoAttack, $01
000E06E5 E106                       	smpsAlterNote       $06
000E06E7 E701                       	dc.b	smpsNoAttack, $01
000E06E9 E10C                       	smpsAlterNote       $0C
000E06EB E701                       	dc.b	smpsNoAttack, $01
000E06ED E10A                       	smpsAlterNote       $0A
000E06EF C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
000E06FB CB0D                       	dc.b	nD6, $0D
000E06FD E108                       	smpsAlterNote       $08
000E06FF E701                       	dc.b	smpsNoAttack, $01
000E0701 E104                       	smpsAlterNote       $04
000E0703 E701                       	dc.b	smpsNoAttack, $01
000E0705 E108                       	smpsAlterNote       $08
000E0707 E701                       	dc.b	smpsNoAttack, $01
000E0709 E10B                       	smpsAlterNote       $0B
000E070B E701                       	dc.b	smpsNoAttack, $01
000E070D E10F                       	smpsAlterNote       $0F
000E070F E701                       	dc.b	smpsNoAttack, $01
000E0711 E10B                       	smpsAlterNote       $0B
000E0713 E701                       	dc.b	smpsNoAttack, $01
000E0715 E105                       	smpsAlterNote       $05
000E0717 E701                       	dc.b	smpsNoAttack, $01
000E0719 E104                       	smpsAlterNote       $04
000E071B E701                       	dc.b	smpsNoAttack, $01
000E071D E108                       	smpsAlterNote       $08
000E071F E701                       	dc.b	smpsNoAttack, $01
000E0721 E10E                       	smpsAlterNote       $0E
000E0723 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0727 E10B                       	smpsAlterNote       $0B
000E0729 E701                       	dc.b	smpsNoAttack, $01
000E072B E105                       	smpsAlterNote       $05
000E072D E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
000E0735 03                         	dc.b	$03
000E0736 E601                       	smpsAlterVol        $01
000E0738 F6F1 D1                    	smpsJump            music84_Jump01
000E073B                            
000E073B                            ; FM5 Data
000E073B                            music84_FM5:
000E073D E080                       	smpsPan             panLeft, $00
000E073F 8003                       	dc.b	nRst, $03
000E0741 E10D                       	smpsAlterNote       $0D
000E0743 C203 8008                  	dc.b	nF5, $03, nRst, $08
000E0747 E10C                       	smpsAlterNote       $0C
000E0749 C103 800A                  	dc.b	nE5, $03, nRst, $0A
000E074D E10F                       	smpsAlterNote       $0F
000E074F BA03 8006                  	dc.b	nA4, $03, nRst, $06
000E0755 E6FE                       	smpsAlterVol        $FE
000E0757 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
000E075D E10D                       	smpsAlterNote       $0D
000E075F C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000E0765 E10C                       	smpsAlterNote       $0C
000E0767 C102 8001                  	dc.b	nE5, $02, nRst, $01
000E076B E10A                       	smpsAlterNote       $0A
000E076D BD01 8001                  	dc.b	nC5, $01, nRst, $01
000E0773 03                         	dc.b	$03
000E0774                            
000E0774                            music84_Jump00:
000E0774 8004                       	dc.b	nRst, $04
000E0776 E602                       	smpsAlterVol        $02
000E0778 E10D                       	smpsAlterNote       $0D
000E077A B60D                       	dc.b	nF4, $0D
000E077C E107                       	smpsAlterNote       $07
000E077E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0782 E10A                       	smpsAlterNote       $0A
000E0784 E701                       	dc.b	smpsNoAttack, $01
000E0786 E110                       	smpsAlterNote       $10
000E0788 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E078C E10A                       	smpsAlterNote       $0A
000E078E E701                       	dc.b	smpsNoAttack, $01
000E0790 E107                       	smpsAlterNote       $07
000E0792 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0796 E10D                       	smpsAlterNote       $0D
000E0798 E701                       	dc.b	smpsNoAttack, $01
000E079A E111                       	smpsAlterNote       $11
000E079C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E07A0 E10D                       	smpsAlterNote       $0D
000E07A2 B80D                       	dc.b	nG4, $0D
000E07A4 E107                       	smpsAlterNote       $07
000E07A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E07AA E10A                       	smpsAlterNote       $0A
000E07AC E701                       	dc.b	smpsNoAttack, $01
000E07AE E110                       	smpsAlterNote       $10
000E07B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E07B4 E10A                       	smpsAlterNote       $0A
000E07B6 E701                       	dc.b	smpsNoAttack, $01
000E07B8 E107                       	smpsAlterNote       $07
000E07BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E07BE E10D                       	smpsAlterNote       $0D
000E07C0 E701                       	dc.b	smpsNoAttack, $01
000E07C2 E111                       	smpsAlterNote       $11
000E07C4 E701                       	dc.b	smpsNoAttack, $01
000E07C6 E110                       	smpsAlterNote       $10
000E07C8 E701                       	dc.b	smpsNoAttack, $01
000E07CA E10A                       	smpsAlterNote       $0A
000E07CC E701                       	dc.b	smpsNoAttack, $01
000E07CE E106                       	smpsAlterNote       $06
000E07D0 E701                       	dc.b	smpsNoAttack, $01
000E07D2 E10A                       	smpsAlterNote       $0A
000E07D4 E701                       	dc.b	smpsNoAttack, $01
000E07D6 E10D                       	smpsAlterNote       $0D
000E07D8 E701                       	dc.b	smpsNoAttack, $01
000E07DA E111                       	smpsAlterNote       $11
000E07DC E701                       	dc.b	smpsNoAttack, $01
000E07DE E10D                       	smpsAlterNote       $0D
000E07E0 E701                       	dc.b	smpsNoAttack, $01
000E07E2 E10F                       	smpsAlterNote       $0F
000E07E4 BA0E                       	dc.b	nA4, $0E
000E07E6 E109                       	smpsAlterNote       $09
000E07E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E07EC E10F                       	smpsAlterNote       $0F
000E07EE E701                       	dc.b	smpsNoAttack, $01
000E07F0 E112                       	smpsAlterNote       $12
000E07F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E07F6 E10C                       	smpsAlterNote       $0C
000E07F8 E701                       	dc.b	smpsNoAttack, $01
000E07FA E108                       	smpsAlterNote       $08
000E07FC E701                       	dc.b	smpsNoAttack, $01
000E07FE E109                       	smpsAlterNote       $09
000E0800 E701                       	dc.b	smpsNoAttack, $01
000E0802 E10F                       	smpsAlterNote       $0F
000E0804 E701                       	dc.b	smpsNoAttack, $01
000E0806 E113                       	smpsAlterNote       $13
000E0808 E701                       	dc.b	smpsNoAttack, $01
000E080A E10F                       	smpsAlterNote       $0F
000E080C E701                       	dc.b	smpsNoAttack, $01
000E080E E109                       	smpsAlterNote       $09
000E0810 E701                       	dc.b	smpsNoAttack, $01
000E0812 E108                       	smpsAlterNote       $08
000E0814 E701                       	dc.b	smpsNoAttack, $01
000E0816 E10C                       	smpsAlterNote       $0C
000E0818 E701                       	dc.b	smpsNoAttack, $01
000E081A E112                       	smpsAlterNote       $12
000E081C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0820 E10F                       	smpsAlterNote       $0F
000E0822 E701                       	dc.b	smpsNoAttack, $01
000E0824 E109                       	smpsAlterNote       $09
000E0826 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E082A E10F                       	smpsAlterNote       $0F
000E082C E701                       	dc.b	smpsNoAttack, $01
000E082E E112                       	smpsAlterNote       $12
000E0830 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0834 E10C                       	smpsAlterNote       $0C
000E0836 E701                       	dc.b	smpsNoAttack, $01
000E0838 E108                       	smpsAlterNote       $08
000E083A E701                       	dc.b	smpsNoAttack, $01
000E083C E109                       	smpsAlterNote       $09
000E083E E701                       	dc.b	smpsNoAttack, $01
000E0840 E10F                       	smpsAlterNote       $0F
000E0842 E701                       	dc.b	smpsNoAttack, $01
000E0844 E113                       	smpsAlterNote       $13
000E0846 E701                       	dc.b	smpsNoAttack, $01
000E0848 E10F                       	smpsAlterNote       $0F
000E084A E701                       	dc.b	smpsNoAttack, $01
000E084C E10C                       	smpsAlterNote       $0C
000E084E E701                       	dc.b	smpsNoAttack, $01
000E0850 E108                       	smpsAlterNote       $08
000E0852 E701                       	dc.b	smpsNoAttack, $01
000E0854 E109                       	smpsAlterNote       $09
000E0856 8001                       	dc.b	nRst, $01
000E0858 E10C                       	smpsAlterNote       $0C
000E085A B50A                       	dc.b	nE4, $0A
000E085C E10D                       	smpsAlterNote       $0D
000E085E B60D                       	dc.b	nF4, $0D
000E0860 E10A                       	smpsAlterNote       $0A
000E0862 E701                       	dc.b	smpsNoAttack, $01
000E0864 E106                       	smpsAlterNote       $06
000E0866 E701                       	dc.b	smpsNoAttack, $01
000E0868 E107                       	smpsAlterNote       $07
000E086A E701                       	dc.b	smpsNoAttack, $01
000E086C E10D                       	smpsAlterNote       $0D
000E086E E701                       	dc.b	smpsNoAttack, $01
000E0870 E111                       	smpsAlterNote       $11
000E0872 E701                       	dc.b	smpsNoAttack, $01
000E0874 E10D                       	smpsAlterNote       $0D
000E0876 E701                       	dc.b	smpsNoAttack, $01
000E0878 E10A                       	smpsAlterNote       $0A
000E087A E701                       	dc.b	smpsNoAttack, $01
000E087C E106                       	smpsAlterNote       $06
000E087E E701                       	dc.b	smpsNoAttack, $01
000E0880 E10A                       	smpsAlterNote       $0A
000E0882 E701                       	dc.b	smpsNoAttack, $01
000E0884 E110                       	smpsAlterNote       $10
000E0886 E701                       	dc.b	smpsNoAttack, $01
000E0888 E111                       	smpsAlterNote       $11
000E088A E701                       	dc.b	smpsNoAttack, $01
000E088C E10D                       	smpsAlterNote       $0D
000E088E B80D                       	dc.b	nG4, $0D
000E0890 E10A                       	smpsAlterNote       $0A
000E0892 E701                       	dc.b	smpsNoAttack, $01
000E0894 E106                       	smpsAlterNote       $06
000E0896 E701                       	dc.b	smpsNoAttack, $01
000E0898 E107                       	smpsAlterNote       $07
000E089A E701                       	dc.b	smpsNoAttack, $01
000E089C E10D                       	smpsAlterNote       $0D
000E089E E701                       	dc.b	smpsNoAttack, $01
000E08A0 E111                       	smpsAlterNote       $11
000E08A2 E701                       	dc.b	smpsNoAttack, $01
000E08A4 E10D                       	smpsAlterNote       $0D
000E08A6 E701                       	dc.b	smpsNoAttack, $01
000E08A8 E10A                       	smpsAlterNote       $0A
000E08AA E701                       	dc.b	smpsNoAttack, $01
000E08AC E106                       	smpsAlterNote       $06
000E08AE E701                       	dc.b	smpsNoAttack, $01
000E08B0 E10A                       	smpsAlterNote       $0A
000E08B2 E701                       	dc.b	smpsNoAttack, $01
000E08B4 E110                       	smpsAlterNote       $10
000E08B6 E701                       	dc.b	smpsNoAttack, $01
000E08B8 E111                       	smpsAlterNote       $11
000E08BA E701                       	dc.b	smpsNoAttack, $01
000E08BC E10D                       	smpsAlterNote       $0D
000E08BE E701                       	dc.b	smpsNoAttack, $01
000E08C0 E107                       	smpsAlterNote       $07
000E08C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E08C6 E10A                       	smpsAlterNote       $0A
000E08C8 E701                       	dc.b	smpsNoAttack, $01
000E08CA E110                       	smpsAlterNote       $10
000E08CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E08D0 E10D                       	smpsAlterNote       $0D
000E08D2 8001                       	dc.b	nRst, $01
000E08D4 E10F                       	smpsAlterNote       $0F
000E08D6 BA0D                       	dc.b	nA4, $0D
000E08D8 E10C                       	smpsAlterNote       $0C
000E08DA E701                       	dc.b	smpsNoAttack, $01
000E08DC E108                       	smpsAlterNote       $08
000E08DE E701                       	dc.b	smpsNoAttack, $01
000E08E0 E10C                       	smpsAlterNote       $0C
000E08E2 E701                       	dc.b	smpsNoAttack, $01
000E08E4 E112                       	smpsAlterNote       $12
000E08E6 E701                       	dc.b	smpsNoAttack, $01
000E08E8 E113                       	smpsAlterNote       $13
000E08EA E701                       	dc.b	smpsNoAttack, $01
000E08EC E10F                       	smpsAlterNote       $0F
000E08EE E701                       	dc.b	smpsNoAttack, $01
000E08F0 E109                       	smpsAlterNote       $09
000E08F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E08F6 E10C                       	smpsAlterNote       $0C
000E08F8 E701                       	dc.b	smpsNoAttack, $01
000E08FA E112                       	smpsAlterNote       $12
000E08FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0900 E10C                       	smpsAlterNote       $0C
000E0902 E701                       	dc.b	smpsNoAttack, $01
000E0904 E109                       	smpsAlterNote       $09
000E0906 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E090A E10F                       	smpsAlterNote       $0F
000E090C E701                       	dc.b	smpsNoAttack, $01
000E090E E113                       	smpsAlterNote       $13
000E0910 E701                       	dc.b	smpsNoAttack, $01
000E0912 E112                       	smpsAlterNote       $12
000E0914 E701                       	dc.b	smpsNoAttack, $01
000E0916 E10C                       	smpsAlterNote       $0C
000E0918 E701                       	dc.b	smpsNoAttack, $01
000E091A E108                       	smpsAlterNote       $08
000E091C E701                       	dc.b	smpsNoAttack, $01
000E091E E10C                       	smpsAlterNote       $0C
000E0920 E701                       	dc.b	smpsNoAttack, $01
000E0922 E10F                       	smpsAlterNote       $0F
000E0924 E701                       	dc.b	smpsNoAttack, $01
000E0926 E113                       	smpsAlterNote       $13
000E0928 E701                       	dc.b	smpsNoAttack, $01
000E092A E10F                       	smpsAlterNote       $0F
000E092C E701                       	dc.b	smpsNoAttack, $01
000E092E E109                       	smpsAlterNote       $09
000E0930 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E0934 E10D                       	smpsAlterNote       $0D
000E0936 B609 8001                  	dc.b	nF4, $09, nRst, $01
000E093A E10C                       	smpsAlterNote       $0C
000E093C B506 8001                  	dc.b	nE4, $06, nRst, $01
000E0940 E10B                       	smpsAlterNote       $0B
000E0942 B30D                       	dc.b	nD4, $0D
000E0944 E10C                       	smpsAlterNote       $0C
000E0946 B503 8001                  	dc.b	nE4, $03, nRst, $01
000E094A E10D                       	smpsAlterNote       $0D
000E094C B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
000E0954 E109                       	smpsAlterNote       $09
000E0956 E701                       	dc.b	smpsNoAttack, $01
000E0958 E108                       	smpsAlterNote       $08
000E095A E701                       	dc.b	smpsNoAttack, $01
000E095C E10C                       	smpsAlterNote       $0C
000E095E E701                       	dc.b	smpsNoAttack, $01
000E0960 E112                       	smpsAlterNote       $12
000E0962 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0966 E10F                       	smpsAlterNote       $0F
000E0968 E701                       	dc.b	smpsNoAttack, $01
000E096A E109                       	smpsAlterNote       $09
000E096C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0970 E10F                       	smpsAlterNote       $0F
000E0972 E701                       	dc.b	smpsNoAttack, $01
000E0974 E112                       	smpsAlterNote       $12
000E0976 E701                       	dc.b	smpsNoAttack, $01
000E0978 E113                       	smpsAlterNote       $13
000E097A 8001                       	dc.b	nRst, $01
000E097C E10D                       	smpsAlterNote       $0D
000E097E C20D                       	dc.b	nF5, $0D
000E0980 E107                       	smpsAlterNote       $07
000E0982 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0986 E10A                       	smpsAlterNote       $0A
000E0988 E701                       	dc.b	smpsNoAttack, $01
000E098A E110                       	smpsAlterNote       $10
000E098C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0990 E10A                       	smpsAlterNote       $0A
000E0992 E701                       	dc.b	smpsNoAttack, $01
000E0994 E107                       	smpsAlterNote       $07
000E0996 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E099A E10D                       	smpsAlterNote       $0D
000E099C E701                       	dc.b	smpsNoAttack, $01
000E099E E111                       	smpsAlterNote       $11
000E09A0 E701                       	dc.b	smpsNoAttack, $01
000E09A2 E110                       	smpsAlterNote       $10
000E09A4 E701                       	dc.b	smpsNoAttack, $01
000E09A6 E10A                       	smpsAlterNote       $0A
000E09A8 E701                       	dc.b	smpsNoAttack, $01
000E09AA E106                       	smpsAlterNote       $06
000E09AC E701                       	dc.b	smpsNoAttack, $01
000E09AE E10A                       	smpsAlterNote       $0A
000E09B0 E701                       	dc.b	smpsNoAttack, $01
000E09B2 E10D                       	smpsAlterNote       $0D
000E09B4 E701                       	dc.b	smpsNoAttack, $01
000E09B6 E111                       	smpsAlterNote       $11
000E09B8 E701                       	dc.b	smpsNoAttack, $01
000E09BA E10D                       	smpsAlterNote       $0D
000E09BC E701                       	dc.b	smpsNoAttack, $01
000E09BE E107                       	smpsAlterNote       $07
000E09C0 E701                       	dc.b	smpsNoAttack, $01
000E09C2 E106                       	smpsAlterNote       $06
000E09C4 E701                       	dc.b	smpsNoAttack, $01
000E09C6 E10A                       	smpsAlterNote       $0A
000E09C8 E701                       	dc.b	smpsNoAttack, $01
000E09CA E110                       	smpsAlterNote       $10
000E09CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E09D0 E10D                       	smpsAlterNote       $0D
000E09D2 E701                       	dc.b	smpsNoAttack, $01
000E09D4 E107                       	smpsAlterNote       $07
000E09D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E09DA E10D                       	smpsAlterNote       $0D
000E09DC E701                       	dc.b	smpsNoAttack, $01
000E09DE E110                       	smpsAlterNote       $10
000E09E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E09E4 E10A                       	smpsAlterNote       $0A
000E09E6 E701                       	dc.b	smpsNoAttack, $01
000E09E8 E106                       	smpsAlterNote       $06
000E09EA E701                       	dc.b	smpsNoAttack, $01
000E09EC E107                       	smpsAlterNote       $07
000E09EE E701                       	dc.b	smpsNoAttack, $01
000E09F0 E10D                       	smpsAlterNote       $0D
000E09F2 E701                       	dc.b	smpsNoAttack, $01
000E09F4 E111                       	smpsAlterNote       $11
000E09F6 E701                       	dc.b	smpsNoAttack, $01
000E09F8 E10D                       	smpsAlterNote       $0D
000E09FA E701                       	dc.b	smpsNoAttack, $01
000E09FC E10A                       	smpsAlterNote       $0A
000E09FE E701                       	dc.b	smpsNoAttack, $01
000E0A00 E106                       	smpsAlterNote       $06
000E0A02 E701                       	dc.b	smpsNoAttack, $01
000E0A04 E10A                       	smpsAlterNote       $0A
000E0A06 E701                       	dc.b	smpsNoAttack, $01
000E0A08 E110                       	smpsAlterNote       $10
000E0A0A E701                       	dc.b	smpsNoAttack, $01
000E0A0C E111                       	smpsAlterNote       $11
000E0A0E E701                       	dc.b	smpsNoAttack, $01
000E0A10 E10D                       	smpsAlterNote       $0D
000E0A12 E701                       	dc.b	smpsNoAttack, $01
000E0A14 E107                       	smpsAlterNote       $07
000E0A16 E701                       	dc.b	smpsNoAttack, $01
000E0A18 E10D                       	smpsAlterNote       $0D
000E0A1A C207                       	dc.b	nF5, $07
000E0A1C E10C                       	smpsAlterNote       $0C
000E0A1E C10D                       	dc.b	nE5, $0D
000E0A20 E109                       	smpsAlterNote       $09
000E0A22 E701                       	dc.b	smpsNoAttack, $01
000E0A24 E106                       	smpsAlterNote       $06
000E0A26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0A2A E10C                       	smpsAlterNote       $0C
000E0A2C E701                       	dc.b	smpsNoAttack, $01
000E0A2E E110                       	smpsAlterNote       $10
000E0A30 E701                       	dc.b	smpsNoAttack, $01
000E0A32 E10F                       	smpsAlterNote       $0F
000E0A34 E701                       	dc.b	smpsNoAttack, $01
000E0A36 E109                       	smpsAlterNote       $09
000E0A38 E701                       	dc.b	smpsNoAttack, $01
000E0A3A E105                       	smpsAlterNote       $05
000E0A3C E701                       	dc.b	smpsNoAttack, $01
000E0A3E E109                       	smpsAlterNote       $09
000E0A40 E701                       	dc.b	smpsNoAttack, $01
000E0A42 E10C                       	smpsAlterNote       $0C
000E0A44 E701                       	dc.b	smpsNoAttack, $01
000E0A46 E110                       	smpsAlterNote       $10
000E0A48 E701                       	dc.b	smpsNoAttack, $01
000E0A4A E10B                       	smpsAlterNote       $0B
000E0A4C BF0D                       	dc.b	nD5, $0D
000E0A4E E108                       	smpsAlterNote       $08
000E0A50 E701                       	dc.b	smpsNoAttack, $01
000E0A52 E105                       	smpsAlterNote       $05
000E0A54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0A58 E10B                       	smpsAlterNote       $0B
000E0A5A E701                       	dc.b	smpsNoAttack, $01
000E0A5C E10F                       	smpsAlterNote       $0F
000E0A5E E701                       	dc.b	smpsNoAttack, $01
000E0A60 E10E                       	smpsAlterNote       $0E
000E0A62 E701                       	dc.b	smpsNoAttack, $01
000E0A64 E108                       	smpsAlterNote       $08
000E0A66 E701                       	dc.b	smpsNoAttack, $01
000E0A68 E104                       	smpsAlterNote       $04
000E0A6A E701                       	dc.b	smpsNoAttack, $01
000E0A6C E108                       	smpsAlterNote       $08
000E0A6E E701                       	dc.b	smpsNoAttack, $01
000E0A70 E10E                       	smpsAlterNote       $0E
000E0A72 E701                       	dc.b	smpsNoAttack, $01
000E0A74 E10F                       	smpsAlterNote       $0F
000E0A76 E701                       	dc.b	smpsNoAttack, $01
000E0A78 E10B                       	smpsAlterNote       $0B
000E0A7A E701                       	dc.b	smpsNoAttack, $01
000E0A7C E105                       	smpsAlterNote       $05
000E0A7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0A82 E108                       	smpsAlterNote       $08
000E0A84 E701                       	dc.b	smpsNoAttack, $01
000E0A86 E10E                       	smpsAlterNote       $0E
000E0A88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0A8C E108                       	smpsAlterNote       $08
000E0A8E E701                       	dc.b	smpsNoAttack, $01
000E0A90 E105                       	smpsAlterNote       $05
000E0A92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0A96 E10B                       	smpsAlterNote       $0B
000E0A98 E701                       	dc.b	smpsNoAttack, $01
000E0A9A E10F                       	smpsAlterNote       $0F
000E0A9C E701                       	dc.b	smpsNoAttack, $01
000E0A9E E10E                       	smpsAlterNote       $0E
000E0AA0 E701                       	dc.b	smpsNoAttack, $01
000E0AA2 E108                       	smpsAlterNote       $08
000E0AA4 E701                       	dc.b	smpsNoAttack, $01
000E0AA6 E104                       	smpsAlterNote       $04
000E0AA8 E701                       	dc.b	smpsNoAttack, $01
000E0AAA E108                       	smpsAlterNote       $08
000E0AAC E701                       	dc.b	smpsNoAttack, $01
000E0AAE E10B                       	smpsAlterNote       $0B
000E0AB0 E701                       	dc.b	smpsNoAttack, $01
000E0AB2 E10F                       	smpsAlterNote       $0F
000E0AB4 E701                       	dc.b	smpsNoAttack, $01
000E0AB6 E10B                       	smpsAlterNote       $0B
000E0AB8 E701                       	dc.b	smpsNoAttack, $01
000E0ABA E105                       	smpsAlterNote       $05
000E0ABC E701                       	dc.b	smpsNoAttack, $01
000E0ABE E104                       	smpsAlterNote       $04
000E0AC0 E701                       	dc.b	smpsNoAttack, $01
000E0AC2 E108                       	smpsAlterNote       $08
000E0AC4 E701                       	dc.b	smpsNoAttack, $01
000E0AC6 E10E                       	smpsAlterNote       $0E
000E0AC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0ACC E10B                       	smpsAlterNote       $0B
000E0ACE E701                       	dc.b	smpsNoAttack, $01
000E0AD0 E105                       	smpsAlterNote       $05
000E0AD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0AD6 E10B                       	smpsAlterNote       $0B
000E0AD8 E701                       	dc.b	smpsNoAttack, $01
000E0ADA E10E                       	smpsAlterNote       $0E
000E0ADC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0AE0 E108                       	smpsAlterNote       $08
000E0AE2 E701                       	dc.b	smpsNoAttack, $01
000E0AE4 E105                       	smpsAlterNote       $05
000E0AE6 8001                       	dc.b	nRst, $01
000E0AEA E601                       	smpsAlterVol        $01
000E0AEC E10B                       	smpsAlterNote       $0B
000E0AEE BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
000E0AFA 8004                       	dc.b	nRst, $04
000E0AFE E6FF                       	smpsAlterVol        $FF
000E0B00 E10D                       	smpsAlterNote       $0D
000E0B02 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
000E0B0A E10C                       	smpsAlterNote       $0C
000E0B0C E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
000E0B11 E10D                       	smpsAlterNote       $0D
000E0B13 B60D                       	dc.b	nF4, $0D
000E0B15 E10A                       	smpsAlterNote       $0A
000E0B17 E701                       	dc.b	smpsNoAttack, $01
000E0B19 E106                       	smpsAlterNote       $06
000E0B1B E701                       	dc.b	smpsNoAttack, $01
000E0B1D E10A                       	smpsAlterNote       $0A
000E0B1F E701                       	dc.b	smpsNoAttack, $01
000E0B21 E110                       	smpsAlterNote       $10
000E0B23 E701                       	dc.b	smpsNoAttack, $01
000E0B25 E111                       	smpsAlterNote       $11
000E0B27 E701                       	dc.b	smpsNoAttack, $01
000E0B29 E10D                       	smpsAlterNote       $0D
000E0B2B E701                       	dc.b	smpsNoAttack, $01
000E0B2D E107                       	smpsAlterNote       $07
000E0B2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0B33 E10A                       	smpsAlterNote       $0A
000E0B35 E701                       	dc.b	smpsNoAttack, $01
000E0B37 E110                       	smpsAlterNote       $10
000E0B39 E701                       	dc.b	smpsNoAttack, $01
000E0B3B E111                       	smpsAlterNote       $11
000E0B3D 8001                       	dc.b	nRst, $01
000E0B3F E10D                       	smpsAlterNote       $0D
000E0B41 B80D                       	dc.b	nG4, $0D
000E0B43 E10A                       	smpsAlterNote       $0A
000E0B45 E701                       	dc.b	smpsNoAttack, $01
000E0B47 E106                       	smpsAlterNote       $06
000E0B49 E701                       	dc.b	smpsNoAttack, $01
000E0B4B E10A                       	smpsAlterNote       $0A
000E0B4D E701                       	dc.b	smpsNoAttack, $01
000E0B4F E110                       	smpsAlterNote       $10
000E0B51 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0B55 E10D                       	smpsAlterNote       $0D
000E0B57 E701                       	dc.b	smpsNoAttack, $01
000E0B59 E107                       	smpsAlterNote       $07
000E0B5B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0B5F E10D                       	smpsAlterNote       $0D
000E0B61 E701                       	dc.b	smpsNoAttack, $01
000E0B63 E110                       	smpsAlterNote       $10
000E0B65 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0B69 E10A                       	smpsAlterNote       $0A
000E0B6B E701                       	dc.b	smpsNoAttack, $01
000E0B6D E106                       	smpsAlterNote       $06
000E0B6F E701                       	dc.b	smpsNoAttack, $01
000E0B71 E107                       	smpsAlterNote       $07
000E0B73 E701                       	dc.b	smpsNoAttack, $01
000E0B75 E10D                       	smpsAlterNote       $0D
000E0B77 E701                       	dc.b	smpsNoAttack, $01
000E0B79 E111                       	smpsAlterNote       $11
000E0B7B E701                       	dc.b	smpsNoAttack, $01
000E0B7D E10D                       	smpsAlterNote       $0D
000E0B7F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E0B83 E10F                       	smpsAlterNote       $0F
000E0B85 BA02 8001                  	dc.b	nA4, $02, nRst, $01
000E0B89 E110                       	smpsAlterNote       $10
000E0B8B BB03                       	dc.b	nBb4, $03
000E0B8D E10F                       	smpsAlterNote       $0F
000E0B8F BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
000E0B95 E110                       	smpsAlterNote       $10
000E0B97 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000E0B9B E10F                       	smpsAlterNote       $0F
000E0B9D C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
000E0BA3 E110                       	smpsAlterNote       $10
000E0BA5 D302 8001                  	dc.b	nBb6, $02, nRst, $01
000E0BA9 E10F                       	smpsAlterNote       $0F
000E0BAB D20D                       	dc.b	nA6, $0D
000E0BAD E10C                       	smpsAlterNote       $0C
000E0BAF E701                       	dc.b	smpsNoAttack, $01
000E0BB1 E108                       	smpsAlterNote       $08
000E0BB3 E701                       	dc.b	smpsNoAttack, $01
000E0BB5 E10C                       	smpsAlterNote       $0C
000E0BB7 E701                       	dc.b	smpsNoAttack, $01
000E0BB9 E10F                       	smpsAlterNote       $0F
000E0BBB E701                       	dc.b	smpsNoAttack, $01
000E0BBD E113                       	smpsAlterNote       $13
000E0BBF E701                       	dc.b	smpsNoAttack, $01
000E0BC1 E10F                       	smpsAlterNote       $0F
000E0BC3 E701                       	dc.b	smpsNoAttack, $01
000E0BC5 E109                       	smpsAlterNote       $09
000E0BC7 E701                       	dc.b	smpsNoAttack, $01
000E0BC9 E108                       	smpsAlterNote       $08
000E0BCB E701                       	dc.b	smpsNoAttack, $01
000E0BCD E10C                       	smpsAlterNote       $0C
000E0BCF E701                       	dc.b	smpsNoAttack, $01
000E0BD1 E112                       	smpsAlterNote       $12
000E0BD3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0BD7 E10F                       	smpsAlterNote       $0F
000E0BD9 E701                       	dc.b	smpsNoAttack, $01
000E0BDB E109                       	smpsAlterNote       $09
000E0BDD E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
000E0BE3 E10D                       	smpsAlterNote       $0D
000E0BE5 CE07                       	dc.b	nF6, $07
000E0BE7 E10C                       	smpsAlterNote       $0C
000E0BE9 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000E0BED E10D                       	smpsAlterNote       $0D
000E0BEF CE03                       	dc.b	nF6, $03
000E0BF1 E10C                       	smpsAlterNote       $0C
000E0BF3 CC0D                       	dc.b	nEb6, $0D
000E0BF5 E109                       	smpsAlterNote       $09
000E0BF7 E701                       	dc.b	smpsNoAttack, $01
000E0BF9 E106                       	smpsAlterNote       $06
000E0BFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0BFF E10C                       	smpsAlterNote       $0C
000E0C01 E701                       	dc.b	smpsNoAttack, $01
000E0C03 E110                       	smpsAlterNote       $10
000E0C05 E701                       	dc.b	smpsNoAttack, $01
000E0C07 E10F                       	smpsAlterNote       $0F
000E0C09 E701                       	dc.b	smpsNoAttack, $01
000E0C0B E109                       	smpsAlterNote       $09
000E0C0D E701                       	dc.b	smpsNoAttack, $01
000E0C0F E105                       	smpsAlterNote       $05
000E0C11 E701                       	dc.b	smpsNoAttack, $01
000E0C13 E109                       	smpsAlterNote       $09
000E0C15 E701                       	dc.b	smpsNoAttack, $01
000E0C17 E10C                       	smpsAlterNote       $0C
000E0C19 E701                       	dc.b	smpsNoAttack, $01
000E0C1B E110                       	smpsAlterNote       $10
000E0C1D E701                       	dc.b	smpsNoAttack, $01
000E0C1F E10C                       	smpsAlterNote       $0C
000E0C21 E701                       	dc.b	smpsNoAttack, $01
000E0C23 E106                       	smpsAlterNote       $06
000E0C25 E701                       	dc.b	smpsNoAttack, $01
000E0C27 E105                       	smpsAlterNote       $05
000E0C29 E701                       	dc.b	smpsNoAttack, $01
000E0C2B E109                       	smpsAlterNote       $09
000E0C2D E701                       	dc.b	smpsNoAttack, $01
000E0C2F E10F                       	smpsAlterNote       $0F
000E0C31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0C35 E10C                       	smpsAlterNote       $0C
000E0C37 E701                       	dc.b	smpsNoAttack, $01
000E0C39 E10B                       	smpsAlterNote       $0B
000E0C3B CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
000E0C45 E10F                       	smpsAlterNote       $0F
000E0C47 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000E0C51 E10D                       	smpsAlterNote       $0D
000E0C53 C203                       	dc.b	nF5, $03
000E0C55 E10C                       	smpsAlterNote       $0C
000E0C57 C103 8001                  	dc.b	nE5, $03, nRst, $01
000E0C5B E10D                       	smpsAlterNote       $0D
000E0C5D C20D                       	dc.b	nF5, $0D
000E0C5F E10C                       	smpsAlterNote       $0C
000E0C61 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
000E0C65 E10B                       	smpsAlterNote       $0B
000E0C67 BF0D                       	dc.b	nD5, $0D
000E0C69 E108                       	smpsAlterNote       $08
000E0C6B E701                       	dc.b	smpsNoAttack, $01
000E0C6D E104                       	smpsAlterNote       $04
000E0C6F E701                       	dc.b	smpsNoAttack, $01
000E0C71 E108                       	smpsAlterNote       $08
000E0C73 E701                       	dc.b	smpsNoAttack, $01
000E0C75 E10E                       	smpsAlterNote       $0E
000E0C77 E701                       	dc.b	smpsNoAttack, $01
000E0C79 E10F                       	smpsAlterNote       $0F
000E0C7B E701                       	dc.b	smpsNoAttack, $01
000E0C7D E10B                       	smpsAlterNote       $0B
000E0C7F E701                       	dc.b	smpsNoAttack, $01
000E0C81 E105                       	smpsAlterNote       $05
000E0C83 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0C87 E108                       	smpsAlterNote       $08
000E0C89 E701                       	dc.b	smpsNoAttack, $01
000E0C8B E10E                       	smpsAlterNote       $0E
000E0C8D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0C91 E108                       	smpsAlterNote       $08
000E0C93 E701                       	dc.b	smpsNoAttack, $01
000E0C95 E105                       	smpsAlterNote       $05
000E0C97 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0C9B E10B                       	smpsAlterNote       $0B
000E0C9D E701                       	dc.b	smpsNoAttack, $01
000E0C9F E10F                       	smpsAlterNote       $0F
000E0CA1 E701                       	dc.b	smpsNoAttack, $01
000E0CA3 E10E                       	smpsAlterNote       $0E
000E0CA5 E701                       	dc.b	smpsNoAttack, $01
000E0CA7 E108                       	smpsAlterNote       $08
000E0CA9 E701                       	dc.b	smpsNoAttack, $01
000E0CAB E104                       	smpsAlterNote       $04
000E0CAD E701                       	dc.b	smpsNoAttack, $01
000E0CAF E108                       	smpsAlterNote       $08
000E0CB1 E701                       	dc.b	smpsNoAttack, $01
000E0CB3 E10B                       	smpsAlterNote       $0B
000E0CB5 E701                       	dc.b	smpsNoAttack, $01
000E0CB7 E10F                       	smpsAlterNote       $0F
000E0CB9 E701                       	dc.b	smpsNoAttack, $01
000E0CBB E10B                       	smpsAlterNote       $0B
000E0CBD E701                       	dc.b	smpsNoAttack, $01
000E0CBF E105                       	smpsAlterNote       $05
000E0CC1 E701                       	dc.b	smpsNoAttack, $01
000E0CC3 E104                       	smpsAlterNote       $04
000E0CC5 E701                       	dc.b	smpsNoAttack, $01
000E0CC7 E108                       	smpsAlterNote       $08
000E0CC9 E701                       	dc.b	smpsNoAttack, $01
000E0CCB E10E                       	smpsAlterNote       $0E
000E0CCD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0CD1 E10B                       	smpsAlterNote       $0B
000E0CD3 E701                       	dc.b	smpsNoAttack, $01
000E0CD5 E105                       	smpsAlterNote       $05
000E0CD7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0CDB E10B                       	smpsAlterNote       $0B
000E0CDD E701                       	dc.b	smpsNoAttack, $01
000E0CDF E10E                       	smpsAlterNote       $0E
000E0CE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0CE5 E108                       	smpsAlterNote       $08
000E0CE7 E701                       	dc.b	smpsNoAttack, $01
000E0CE9 E104                       	smpsAlterNote       $04
000E0CEB E701                       	dc.b	smpsNoAttack, $01
000E0CED E105                       	smpsAlterNote       $05
000E0CEF E701                       	dc.b	smpsNoAttack, $01
000E0CF1 E10B                       	smpsAlterNote       $0B
000E0CF3 E701                       	dc.b	smpsNoAttack, $01
000E0CF5 E10F                       	smpsAlterNote       $0F
000E0CF7 E701                       	dc.b	smpsNoAttack, $01
000E0CF9 E10B                       	smpsAlterNote       $0B
000E0CFB E701                       	dc.b	smpsNoAttack, $01
000E0CFD E108                       	smpsAlterNote       $08
000E0CFF E701                       	dc.b	smpsNoAttack, $01
000E0D01 E104                       	smpsAlterNote       $04
000E0D03 E701                       	dc.b	smpsNoAttack, $01
000E0D05 E108                       	smpsAlterNote       $08
000E0D07 E701                       	dc.b	smpsNoAttack, $01
000E0D09 E10E                       	smpsAlterNote       $0E
000E0D0B E701                       	dc.b	smpsNoAttack, $01
000E0D0D E10F                       	smpsAlterNote       $0F
000E0D0F E701                       	dc.b	smpsNoAttack, $01
000E0D11 E10B                       	smpsAlterNote       $0B
000E0D13 E701                       	dc.b	smpsNoAttack, $01
000E0D15 E105                       	smpsAlterNote       $05
000E0D17 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0D1B E108                       	smpsAlterNote       $08
000E0D1D E701                       	dc.b	smpsNoAttack, $01
000E0D1F E10E                       	smpsAlterNote       $0E
000E0D21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0D25 E108                       	smpsAlterNote       $08
000E0D27 E701                       	dc.b	smpsNoAttack, $01
000E0D29 E105                       	smpsAlterNote       $05
000E0D2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0D2F E10B                       	smpsAlterNote       $0B
000E0D31 E701                       	dc.b	smpsNoAttack, $01
000E0D33 E10F                       	smpsAlterNote       $0F
000E0D35 E701                       	dc.b	smpsNoAttack, $01
000E0D37 E10E                       	smpsAlterNote       $0E
000E0D39 E701                       	dc.b	smpsNoAttack, $01
000E0D3B E108                       	smpsAlterNote       $08
000E0D3D E701                       	dc.b	smpsNoAttack, $01
000E0D3F E104                       	smpsAlterNote       $04
000E0D41 E701                       	dc.b	smpsNoAttack, $01
000E0D43 E108                       	smpsAlterNote       $08
000E0D45 E701                       	dc.b	smpsNoAttack, $01
000E0D47 E10B                       	smpsAlterNote       $0B
000E0D49 E701                       	dc.b	smpsNoAttack, $01
000E0D4B E10F                       	smpsAlterNote       $0F
000E0D4D E701                       	dc.b	smpsNoAttack, $01
000E0D4F E10B                       	smpsAlterNote       $0B
000E0D51 E701                       	dc.b	smpsNoAttack, $01
000E0D53 E105                       	smpsAlterNote       $05
000E0D55 E701                       	dc.b	smpsNoAttack, $01
000E0D57 E104                       	smpsAlterNote       $04
000E0D59 E701                       	dc.b	smpsNoAttack, $01
000E0D5B E105                       	smpsAlterNote       $05
000E0D5D 8001                       	dc.b	nRst, $01
000E0D5F E10D                       	smpsAlterNote       $0D
000E0D61 C20D                       	dc.b	nF5, $0D
000E0D63 E107                       	smpsAlterNote       $07
000E0D65 E701                       	dc.b	smpsNoAttack, $01
000E0D67 E106                       	smpsAlterNote       $06
000E0D69 E701                       	dc.b	smpsNoAttack, $01
000E0D6B E10A                       	smpsAlterNote       $0A
000E0D6D E701                       	dc.b	smpsNoAttack, $01
000E0D6F E110                       	smpsAlterNote       $10
000E0D71 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0D75 E10D                       	smpsAlterNote       $0D
000E0D77 E701                       	dc.b	smpsNoAttack, $01
000E0D79 E107                       	smpsAlterNote       $07
000E0D7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0D7F E10D                       	smpsAlterNote       $0D
000E0D81 E701                       	dc.b	smpsNoAttack, $01
000E0D83 E110                       	smpsAlterNote       $10
000E0D85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0D89 E10A                       	smpsAlterNote       $0A
000E0D8B E701                       	dc.b	smpsNoAttack, $01
000E0D8D E106                       	smpsAlterNote       $06
000E0D8F E701                       	dc.b	smpsNoAttack, $01
000E0D91 E107                       	smpsAlterNote       $07
000E0D93 E701                       	dc.b	smpsNoAttack, $01
000E0D95 E10D                       	smpsAlterNote       $0D
000E0D97 E701                       	dc.b	smpsNoAttack, $01
000E0D99 E111                       	smpsAlterNote       $11
000E0D9B E701                       	dc.b	smpsNoAttack, $01
000E0D9D E10D                       	smpsAlterNote       $0D
000E0D9F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E0DA3 E10C                       	smpsAlterNote       $0C
000E0DA5 C10D                       	dc.b	nE5, $0D
000E0DA7 E10D                       	smpsAlterNote       $0D
000E0DA9 C20A                       	dc.b	nF5, $0A
000E0DAB E10C                       	smpsAlterNote       $0C
000E0DAD C10E                       	dc.b	nE5, $0E
000E0DAF E106                       	smpsAlterNote       $06
000E0DB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0DB5 E10C                       	smpsAlterNote       $0C
000E0DB7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E0DBB E10B                       	smpsAlterNote       $0B
000E0DBD BF0D                       	dc.b	nD5, $0D
000E0DBF E10C                       	smpsAlterNote       $0C
000E0DC1 C107                       	dc.b	nE5, $07
000E0DC3 E10D                       	smpsAlterNote       $0D
000E0DC5 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
000E0DCF E110                       	smpsAlterNote       $10
000E0DD1 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
000E0DD7 E10F                       	smpsAlterNote       $0F
000E0DD9 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
000E0DE1 E10D                       	smpsAlterNote       $0D
000E0DE3 D003                       	dc.b	nG6, $03
000E0DE7 E0C0                       	smpsPan             panCenter, $00
000E0DE9 E6FF                       	smpsAlterVol        $FF
000E0DEB AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
000E0DF7 8001                       	dc.b	nRst, $01
000E0DF9 E10C                       	smpsAlterNote       $0C
000E0DFB A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
000E0E05 E604                       	smpsAlterVol        $04
000E0E07 E10B                       	smpsAlterNote       $0B
000E0E09 B306 8001                  	dc.b	nD4, $06, nRst, $01
000E0E0D E10F                       	smpsAlterNote       $0F
000E0E0F AE03                       	dc.b	nA3, $03
000E0E11 E10D                       	smpsAlterNote       $0D
000E0E13 B603 8001                  	dc.b	nF4, $03, nRst, $01
000E0E17 E10C                       	smpsAlterNote       $0C
000E0E19 B506 8001                  	dc.b	nE4, $06, nRst, $01
000E0E1D E10B                       	smpsAlterNote       $0B
000E0E1F B302 8001                  	dc.b	nD4, $02, nRst, $01
000E0E23 E10A                       	smpsAlterNote       $0A
000E0E25 B103                       	dc.b	nC4, $03
000E0E27 E110                       	smpsAlterNote       $10
000E0E29 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000E0E2D E10F                       	smpsAlterNote       $0F
000E0E2F AE03 800A                  	dc.b	nA3, $03, nRst, $0A
000E0E33 E080                       	smpsPan             panLeft, $00
000E0E35 01                         	dc.b	$01
000E0E38 E6FB                       	smpsAlterVol        $FB
000E0E3A E1E4                       	smpsAlterNote       $E4
000E0E3C C501                       	dc.b	nAb5, $01
000E0E3E E1F4                       	smpsAlterNote       $F4
000E0E40 E701                       	dc.b	smpsNoAttack, $01
000E0E42 E104                       	smpsAlterNote       $04
000E0E44 E701                       	dc.b	smpsNoAttack, $01
000E0E46 E114                       	smpsAlterNote       $14
000E0E48 E701                       	dc.b	smpsNoAttack, $01
000E0E4A E11C                       	smpsAlterNote       $1C
000E0E4C E701                       	dc.b	smpsNoAttack, $01
000E0E4E E1EF                       	smpsAlterNote       $EF
000E0E50 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000E0E53 E1FF                       	smpsAlterNote       $FF
000E0E55 E701                       	dc.b	smpsNoAttack, $01
000E0E57 E10F                       	smpsAlterNote       $0F
000E0E59 C606                       	dc.b	nA5, $06
000E0E5B E109                       	smpsAlterNote       $09
000E0E5D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0E61 E10F                       	smpsAlterNote       $0F
000E0E63 E701                       	dc.b	smpsNoAttack, $01
000E0E65 E112                       	smpsAlterNote       $12
000E0E67 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0E6B E10C                       	smpsAlterNote       $0C
000E0E6D E701                       	dc.b	smpsNoAttack, $01
000E0E6F E108                       	smpsAlterNote       $08
000E0E71 E701                       	dc.b	smpsNoAttack, $01
000E0E73 E109                       	smpsAlterNote       $09
000E0E75 E701                       	dc.b	smpsNoAttack, $01
000E0E77 E10F                       	smpsAlterNote       $0F
000E0E79 E701                       	dc.b	smpsNoAttack, $01
000E0E7B E113                       	smpsAlterNote       $13
000E0E7D E701                       	dc.b	smpsNoAttack, $01
000E0E7F E10F                       	smpsAlterNote       $0F
000E0E81 E701                       	dc.b	smpsNoAttack, $01
000E0E83 E10C                       	smpsAlterNote       $0C
000E0E85 E701                       	dc.b	smpsNoAttack, $01
000E0E87 E108                       	smpsAlterNote       $08
000E0E89 E701                       	dc.b	smpsNoAttack, $01
000E0E8B E10C                       	smpsAlterNote       $0C
000E0E8D E701                       	dc.b	smpsNoAttack, $01
000E0E8F E112                       	smpsAlterNote       $12
000E0E91 E701                       	dc.b	smpsNoAttack, $01
000E0E93 E113                       	smpsAlterNote       $13
000E0E95 E701                       	dc.b	smpsNoAttack, $01
000E0E97 E10F                       	smpsAlterNote       $0F
000E0E99 E701                       	dc.b	smpsNoAttack, $01
000E0E9B E109                       	smpsAlterNote       $09
000E0E9D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0EA1 E10C                       	smpsAlterNote       $0C
000E0EA3 E701                       	dc.b	smpsNoAttack, $01
000E0EA5 E112                       	smpsAlterNote       $12
000E0EA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0EAB E10C                       	smpsAlterNote       $0C
000E0EAD E701                       	dc.b	smpsNoAttack, $01
000E0EAF E109                       	smpsAlterNote       $09
000E0EB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0EB5 E10F                       	smpsAlterNote       $0F
000E0EB7 E701                       	dc.b	smpsNoAttack, $01
000E0EB9 E113                       	smpsAlterNote       $13
000E0EBB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E0EBF E10D                       	smpsAlterNote       $0D
000E0EC1 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
000E0EC7 E10C                       	smpsAlterNote       $0C
000E0EC9 C102 8001                  	dc.b	nE5, $02, nRst, $01
000E0ECD E10D                       	smpsAlterNote       $0D
000E0ECF C201 8001                  	dc.b	nF5, $01, nRst, $01
000E0ED3 E10C                       	smpsAlterNote       $0C
000E0ED5 C102                       	dc.b	nE5, $02
000E0ED7 E10B                       	smpsAlterNote       $0B
000E0ED9 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000E0EDD E10C                       	smpsAlterNote       $0C
000E0EDF C101 8001                  	dc.b	nE5, $01, nRst, $01
000E0EE3 E10B                       	smpsAlterNote       $0B
000E0EE5 BF02                       	dc.b	nD5, $02
000E0EE7 E10A                       	smpsAlterNote       $0A
000E0EE9 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
000E0EF3 E110                       	smpsAlterNote       $10
000E0EF5 BB02                       	dc.b	nBb4, $02
000E0EF7 E10A                       	smpsAlterNote       $0A
000E0EF9 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000E0EFD E110                       	smpsAlterNote       $10
000E0EFF BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000E0F03 E10F                       	smpsAlterNote       $0F
000E0F05 BA01 8001                  	dc.b	nA4, $01, nRst, $01
000E0F09 E110                       	smpsAlterNote       $10
000E0F0B BB02                       	dc.b	nBb4, $02
000E0F0D E10F                       	smpsAlterNote       $0F
000E0F0F BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000E0F19 E10C                       	smpsAlterNote       $0C
000E0F1B B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
000E0F23 E10B                       	smpsAlterNote       $0B
000E0F25 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
000E0F29 E10F                       	smpsAlterNote       $0F
000E0F2B BA02                       	dc.b	nA4, $02
000E0F2F E0C0                       	smpsPan             panCenter, $00
000E0F31 E601                       	smpsAlterVol        $01
000E0F33 E109                       	smpsAlterNote       $09
000E0F35 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
000E0F41 E108                       	smpsAlterNote       $08
000E0F43 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
000E0F49 E107                       	smpsAlterNote       $07
000E0F4B B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
000E0F51 E109                       	smpsAlterNote       $09
000E0F53 B603 8001                  	dc.b	nF4, $03, nRst, $01
000E0F57 E108                       	smpsAlterNote       $08
000E0F59 B506 8001                  	dc.b	nE4, $06, nRst, $01
000E0F5D E107                       	smpsAlterNote       $07
000E0F5F B302 8001                  	dc.b	nD4, $02, nRst, $01
000E0F63 E106                       	smpsAlterNote       $06
000E0F65 B103                       	dc.b	nC4, $03
000E0F67 E10C                       	smpsAlterNote       $0C
000E0F69 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000E0F6F E080                       	smpsPan             panLeft, $00
000E0F71 07                         	dc.b	$07
000E0F72 E6FE                       	smpsAlterVol        $FE
000E0F74 E10B                       	smpsAlterNote       $0B
000E0F76 B20D                       	dc.b	nCs4, $0D
000E0F78 E105                       	smpsAlterNote       $05
000E0F7A E701                       	dc.b	smpsNoAttack, $01
000E0F7C E104                       	smpsAlterNote       $04
000E0F7E E701                       	dc.b	smpsNoAttack, $01
000E0F80 E108                       	smpsAlterNote       $08
000E0F82 E701                       	dc.b	smpsNoAttack, $01
000E0F84 E10E                       	smpsAlterNote       $0E
000E0F86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0F8A E10B                       	smpsAlterNote       $0B
000E0F8C E701                       	dc.b	smpsNoAttack, $01
000E0F8E E105                       	smpsAlterNote       $05
000E0F90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0F94 E10B                       	smpsAlterNote       $0B
000E0F96 E701                       	dc.b	smpsNoAttack, $01
000E0F98 E10E                       	smpsAlterNote       $0E
000E0F9A E701                       	dc.b	smpsNoAttack, $01
000E0F9C E10F                       	smpsAlterNote       $0F
000E0F9E 8001                       	dc.b	nRst, $01
000E0FA0 E10B                       	smpsAlterNote       $0B
000E0FA2 B30D                       	dc.b	nD4, $0D
000E0FA4 E105                       	smpsAlterNote       $05
000E0FA6 E701                       	dc.b	smpsNoAttack, $01
000E0FA8 E104                       	smpsAlterNote       $04
000E0FAA E701                       	dc.b	smpsNoAttack, $01
000E0FAC E108                       	smpsAlterNote       $08
000E0FAE E701                       	dc.b	smpsNoAttack, $01
000E0FB0 E10E                       	smpsAlterNote       $0E
000E0FB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0FB6 E10B                       	smpsAlterNote       $0B
000E0FB8 E701                       	dc.b	smpsNoAttack, $01
000E0FBA E105                       	smpsAlterNote       $05
000E0FBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0FC0 E10B                       	smpsAlterNote       $0B
000E0FC2 E701                       	dc.b	smpsNoAttack, $01
000E0FC4 E10E                       	smpsAlterNote       $0E
000E0FC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0FCA E108                       	smpsAlterNote       $08
000E0FCC E701                       	dc.b	smpsNoAttack, $01
000E0FCE E104                       	smpsAlterNote       $04
000E0FD0 E701                       	dc.b	smpsNoAttack, $01
000E0FD2 E105                       	smpsAlterNote       $05
000E0FD4 E701                       	dc.b	smpsNoAttack, $01
000E0FD6 E10B                       	smpsAlterNote       $0B
000E0FD8 E701                       	dc.b	smpsNoAttack, $01
000E0FDA E10F                       	smpsAlterNote       $0F
000E0FDC E701                       	dc.b	smpsNoAttack, $01
000E0FDE E10B                       	smpsAlterNote       $0B
000E0FE0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E0FE4 E10C                       	smpsAlterNote       $0C
000E0FE6 B50D                       	dc.b	nE4, $0D
000E0FE8 E106                       	smpsAlterNote       $06
000E0FEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0FEE E10C                       	smpsAlterNote       $0C
000E0FF0 E701                       	dc.b	smpsNoAttack, $01
000E0FF2 E10F                       	smpsAlterNote       $0F
000E0FF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0FF8 E109                       	smpsAlterNote       $09
000E0FFA E701                       	dc.b	smpsNoAttack, $01
000E0FFC E105                       	smpsAlterNote       $05
000E0FFE E701                       	dc.b	smpsNoAttack, $01
000E1000 E106                       	smpsAlterNote       $06
000E1002 E701                       	dc.b	smpsNoAttack, $01
000E1004 E10C                       	smpsAlterNote       $0C
000E1006 E701                       	dc.b	smpsNoAttack, $01
000E1008 E110                       	smpsAlterNote       $10
000E100A E701                       	dc.b	smpsNoAttack, $01
000E100C E10B                       	smpsAlterNote       $0B
000E100E B30E                       	dc.b	nD4, $0E
000E1010 E105                       	smpsAlterNote       $05
000E1012 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1016 E10B                       	smpsAlterNote       $0B
000E1018 E701                       	dc.b	smpsNoAttack, $01
000E101A E10E                       	smpsAlterNote       $0E
000E101C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1020 E108                       	smpsAlterNote       $08
000E1022 E701                       	dc.b	smpsNoAttack, $01
000E1024 E104                       	smpsAlterNote       $04
000E1026 E701                       	dc.b	smpsNoAttack, $01
000E1028 E105                       	smpsAlterNote       $05
000E102A E701                       	dc.b	smpsNoAttack, $01
000E102C E10B                       	smpsAlterNote       $0B
000E102E E701                       	dc.b	smpsNoAttack, $01
000E1030 E10F                       	smpsAlterNote       $0F
000E1032 E701                       	dc.b	smpsNoAttack, $01
000E1034 E10B                       	smpsAlterNote       $0B
000E1036 E701                       	dc.b	smpsNoAttack, $01
000E1038 E108                       	smpsAlterNote       $08
000E103A E701                       	dc.b	smpsNoAttack, $01
000E103C E104                       	smpsAlterNote       $04
000E103E E701                       	dc.b	smpsNoAttack, $01
000E1040 E108                       	smpsAlterNote       $08
000E1042 E701                       	dc.b	smpsNoAttack, $01
000E1044 E10E                       	smpsAlterNote       $0E
000E1046 E701                       	dc.b	smpsNoAttack, $01
000E1048 E10F                       	smpsAlterNote       $0F
000E104A E701                       	dc.b	smpsNoAttack, $01
000E104C E10B                       	smpsAlterNote       $0B
000E104E E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000E1052 E108                       	smpsAlterNote       $08
000E1054 E701                       	dc.b	smpsNoAttack, $01
000E1056 E105                       	smpsAlterNote       $05
000E1058 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E105C E10B                       	smpsAlterNote       $0B
000E105E E701                       	dc.b	smpsNoAttack, $01
000E1060 E10F                       	smpsAlterNote       $0F
000E1062 E701                       	dc.b	smpsNoAttack, $01
000E1064 E10E                       	smpsAlterNote       $0E
000E1066 E701                       	dc.b	smpsNoAttack, $01
000E1068 E108                       	smpsAlterNote       $08
000E106A E701                       	dc.b	smpsNoAttack, $01
000E106C E104                       	smpsAlterNote       $04
000E106E E701                       	dc.b	smpsNoAttack, $01
000E1070 E108                       	smpsAlterNote       $08
000E1072 E701                       	dc.b	smpsNoAttack, $01
000E1074 E10B                       	smpsAlterNote       $0B
000E1076 E701                       	dc.b	smpsNoAttack, $01
000E1078 E10F                       	smpsAlterNote       $0F
000E107A E701                       	dc.b	smpsNoAttack, $01
000E107C E10B                       	smpsAlterNote       $0B
000E107E B30D                       	dc.b	nD4, $0D
000E1080 E108                       	smpsAlterNote       $08
000E1082 E701                       	dc.b	smpsNoAttack, $01
000E1084 E105                       	smpsAlterNote       $05
000E1086 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E108A E10B                       	smpsAlterNote       $0B
000E108C E701                       	dc.b	smpsNoAttack, $01
000E108E E10F                       	smpsAlterNote       $0F
000E1090 E701                       	dc.b	smpsNoAttack, $01
000E1092 E10E                       	smpsAlterNote       $0E
000E1094 E701                       	dc.b	smpsNoAttack, $01
000E1096 E108                       	smpsAlterNote       $08
000E1098 E701                       	dc.b	smpsNoAttack, $01
000E109A E104                       	smpsAlterNote       $04
000E109C E701                       	dc.b	smpsNoAttack, $01
000E109E E108                       	smpsAlterNote       $08
000E10A0 E701                       	dc.b	smpsNoAttack, $01
000E10A2 E10B                       	smpsAlterNote       $0B
000E10A4 E701                       	dc.b	smpsNoAttack, $01
000E10A6 E10F                       	smpsAlterNote       $0F
000E10A8 E701                       	dc.b	smpsNoAttack, $01
000E10AA E10B                       	smpsAlterNote       $0B
000E10AC E701                       	dc.b	smpsNoAttack, $01
000E10AE E105                       	smpsAlterNote       $05
000E10B0 E701                       	dc.b	smpsNoAttack, $01
000E10B2 E104                       	smpsAlterNote       $04
000E10B4 E701                       	dc.b	smpsNoAttack, $01
000E10B6 E108                       	smpsAlterNote       $08
000E10B8 E701                       	dc.b	smpsNoAttack, $01
000E10BA E10E                       	smpsAlterNote       $0E
000E10BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E10C0 E10B                       	smpsAlterNote       $0B
000E10C2 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
000E10C6 E108                       	smpsAlterNote       $08
000E10C8 E701                       	dc.b	smpsNoAttack, $01
000E10CA E104                       	smpsAlterNote       $04
000E10CC E701                       	dc.b	smpsNoAttack, $01
000E10CE E108                       	smpsAlterNote       $08
000E10D0 E701                       	dc.b	smpsNoAttack, $01
000E10D2 E10B                       	smpsAlterNote       $0B
000E10D4 E701                       	dc.b	smpsNoAttack, $01
000E10D8 E0C0                       	smpsPan             panCenter, $00
000E10DA E601                       	smpsAlterVol        $01
000E10DC E108                       	smpsAlterNote       $08
000E10DE A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
000E10EA 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
000E10F2 E080                       	smpsPan             panLeft, $00
000E10F4 07                         	dc.b	$07
000E10F5 E6FF                       	smpsAlterVol        $FF
000E10F7 E10D                       	smpsAlterNote       $0D
000E10F9 B60D                       	dc.b	nF4, $0D
000E10FB E10A                       	smpsAlterNote       $0A
000E10FD E701                       	dc.b	smpsNoAttack, $01
000E10FF E106                       	smpsAlterNote       $06
000E1101 E701                       	dc.b	smpsNoAttack, $01
000E1103 E10A                       	smpsAlterNote       $0A
000E1105 E701                       	dc.b	smpsNoAttack, $01
000E1107 E110                       	smpsAlterNote       $10
000E1109 E701                       	dc.b	smpsNoAttack, $01
000E110B E111                       	smpsAlterNote       $11
000E110D E701                       	dc.b	smpsNoAttack, $01
000E110F E10D                       	smpsAlterNote       $0D
000E1111 E701                       	dc.b	smpsNoAttack, $01
000E1113 E107                       	smpsAlterNote       $07
000E1115 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1119 E10A                       	smpsAlterNote       $0A
000E111B E701                       	dc.b	smpsNoAttack, $01
000E111D E110                       	smpsAlterNote       $10
000E111F E701                       	dc.b	smpsNoAttack, $01
000E1121 E111                       	smpsAlterNote       $11
000E1123 8001                       	dc.b	nRst, $01
000E1125 E10D                       	smpsAlterNote       $0D
000E1127 B80D                       	dc.b	nG4, $0D
000E1129 E10A                       	smpsAlterNote       $0A
000E112B E701                       	dc.b	smpsNoAttack, $01
000E112D E106                       	smpsAlterNote       $06
000E112F E701                       	dc.b	smpsNoAttack, $01
000E1131 E10A                       	smpsAlterNote       $0A
000E1133 E701                       	dc.b	smpsNoAttack, $01
000E1135 E110                       	smpsAlterNote       $10
000E1137 E701                       	dc.b	smpsNoAttack, $01
000E1139 E111                       	smpsAlterNote       $11
000E113B E701                       	dc.b	smpsNoAttack, $01
000E113D E10D                       	smpsAlterNote       $0D
000E113F E701                       	dc.b	smpsNoAttack, $01
000E1141 E107                       	smpsAlterNote       $07
000E1143 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1147 E10D                       	smpsAlterNote       $0D
000E1149 E701                       	dc.b	smpsNoAttack, $01
000E114B E110                       	smpsAlterNote       $10
000E114D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1151 E10A                       	smpsAlterNote       $0A
000E1153 E701                       	dc.b	smpsNoAttack, $01
000E1155 E106                       	smpsAlterNote       $06
000E1157 E701                       	dc.b	smpsNoAttack, $01
000E1159 E107                       	smpsAlterNote       $07
000E115B E701                       	dc.b	smpsNoAttack, $01
000E115D E10D                       	smpsAlterNote       $0D
000E115F E701                       	dc.b	smpsNoAttack, $01
000E1161 E111                       	smpsAlterNote       $11
000E1163 E701                       	dc.b	smpsNoAttack, $01
000E1165 E10D                       	smpsAlterNote       $0D
000E1167 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E116B E10F                       	smpsAlterNote       $0F
000E116D BA0D                       	dc.b	nA4, $0D
000E116F E109                       	smpsAlterNote       $09
000E1171 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1175 E10C                       	smpsAlterNote       $0C
000E1177 E701                       	dc.b	smpsNoAttack, $01
000E1179 E112                       	smpsAlterNote       $12
000E117B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E117F E10C                       	smpsAlterNote       $0C
000E1181 E701                       	dc.b	smpsNoAttack, $01
000E1183 E109                       	smpsAlterNote       $09
000E1185 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1189 E10F                       	smpsAlterNote       $0F
000E118B E701                       	dc.b	smpsNoAttack, $01
000E118D E113                       	smpsAlterNote       $13
000E118F E701                       	dc.b	smpsNoAttack, $01
000E1191 E112                       	smpsAlterNote       $12
000E1193 E701                       	dc.b	smpsNoAttack, $01
000E1195 E10C                       	smpsAlterNote       $0C
000E1197 E701                       	dc.b	smpsNoAttack, $01
000E1199 E108                       	smpsAlterNote       $08
000E119B E701                       	dc.b	smpsNoAttack, $01
000E119D E10C                       	smpsAlterNote       $0C
000E119F E701                       	dc.b	smpsNoAttack, $01
000E11A1 E10F                       	smpsAlterNote       $0F
000E11A3 E701                       	dc.b	smpsNoAttack, $01
000E11A5 E113                       	smpsAlterNote       $13
000E11A7 E701                       	dc.b	smpsNoAttack, $01
000E11A9 E10F                       	smpsAlterNote       $0F
000E11AB E701                       	dc.b	smpsNoAttack, $01
000E11AD E109                       	smpsAlterNote       $09
000E11AF E701                       	dc.b	smpsNoAttack, $01
000E11B1 E108                       	smpsAlterNote       $08
000E11B3 E701                       	dc.b	smpsNoAttack, $01
000E11B5 E10C                       	smpsAlterNote       $0C
000E11B7 E701                       	dc.b	smpsNoAttack, $01
000E11B9 E112                       	smpsAlterNote       $12
000E11BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E11BF E10F                       	smpsAlterNote       $0F
000E11C1 E701                       	dc.b	smpsNoAttack, $01
000E11C3 E109                       	smpsAlterNote       $09
000E11C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E11C9 E10F                       	smpsAlterNote       $0F
000E11CB E701                       	dc.b	smpsNoAttack, $01
000E11CD E112                       	smpsAlterNote       $12
000E11CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E11D3 E10C                       	smpsAlterNote       $0C
000E11D5 E701                       	dc.b	smpsNoAttack, $01
000E11D7 E108                       	smpsAlterNote       $08
000E11D9 E701                       	dc.b	smpsNoAttack, $01
000E11DB E109                       	smpsAlterNote       $09
000E11DD E701                       	dc.b	smpsNoAttack, $01
000E11DF E10C                       	smpsAlterNote       $0C
000E11E1 B50A                       	dc.b	nE4, $0A
000E11E3 E10D                       	smpsAlterNote       $0D
000E11E5 B60E                       	dc.b	nF4, $0E
000E11E7 E107                       	smpsAlterNote       $07
000E11E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E11ED E10D                       	smpsAlterNote       $0D
000E11EF E701                       	dc.b	smpsNoAttack, $01
000E11F1 E110                       	smpsAlterNote       $10
000E11F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E11F7 E10A                       	smpsAlterNote       $0A
000E11F9 E701                       	dc.b	smpsNoAttack, $01
000E11FB E106                       	smpsAlterNote       $06
000E11FD E701                       	dc.b	smpsNoAttack, $01
000E11FF E107                       	smpsAlterNote       $07
000E1201 E701                       	dc.b	smpsNoAttack, $01
000E1203 E10D                       	smpsAlterNote       $0D
000E1205 E701                       	dc.b	smpsNoAttack, $01
000E1207 E111                       	smpsAlterNote       $11
000E1209 E701                       	dc.b	smpsNoAttack, $01
000E120B E10D                       	smpsAlterNote       $0D
000E120D B80D                       	dc.b	nG4, $0D
000E120F E10A                       	smpsAlterNote       $0A
000E1211 E701                       	dc.b	smpsNoAttack, $01
000E1213 E107                       	smpsAlterNote       $07
000E1215 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1219 E10D                       	smpsAlterNote       $0D
000E121B E701                       	dc.b	smpsNoAttack, $01
000E121D E111                       	smpsAlterNote       $11
000E121F E701                       	dc.b	smpsNoAttack, $01
000E1221 E110                       	smpsAlterNote       $10
000E1223 E701                       	dc.b	smpsNoAttack, $01
000E1225 E10A                       	smpsAlterNote       $0A
000E1227 E701                       	dc.b	smpsNoAttack, $01
000E1229 E106                       	smpsAlterNote       $06
000E122B E701                       	dc.b	smpsNoAttack, $01
000E122D E10A                       	smpsAlterNote       $0A
000E122F E701                       	dc.b	smpsNoAttack, $01
000E1231 E10D                       	smpsAlterNote       $0D
000E1233 E701                       	dc.b	smpsNoAttack, $01
000E1235 E111                       	smpsAlterNote       $11
000E1237 E701                       	dc.b	smpsNoAttack, $01
000E1239 E10D                       	smpsAlterNote       $0D
000E123B E701                       	dc.b	smpsNoAttack, $01
000E123D E107                       	smpsAlterNote       $07
000E123F E701                       	dc.b	smpsNoAttack, $01
000E1241 E106                       	smpsAlterNote       $06
000E1243 E701                       	dc.b	smpsNoAttack, $01
000E1245 E10A                       	smpsAlterNote       $0A
000E1247 E701                       	dc.b	smpsNoAttack, $01
000E1249 E110                       	smpsAlterNote       $10
000E124B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E124F E10D                       	smpsAlterNote       $0D
000E1251 E701                       	dc.b	smpsNoAttack, $01
000E1253 E10F                       	smpsAlterNote       $0F
000E1255 BA0D                       	dc.b	nA4, $0D
000E1257 E10C                       	smpsAlterNote       $0C
000E1259 E701                       	dc.b	smpsNoAttack, $01
000E125B E108                       	smpsAlterNote       $08
000E125D E701                       	dc.b	smpsNoAttack, $01
000E125F E109                       	smpsAlterNote       $09
000E1261 E701                       	dc.b	smpsNoAttack, $01
000E1263 E10F                       	smpsAlterNote       $0F
000E1265 E701                       	dc.b	smpsNoAttack, $01
000E1267 E113                       	smpsAlterNote       $13
000E1269 E701                       	dc.b	smpsNoAttack, $01
000E126B E10F                       	smpsAlterNote       $0F
000E126D E701                       	dc.b	smpsNoAttack, $01
000E126F E10C                       	smpsAlterNote       $0C
000E1271 E701                       	dc.b	smpsNoAttack, $01
000E1273 E108                       	smpsAlterNote       $08
000E1275 E701                       	dc.b	smpsNoAttack, $01
000E1277 E10C                       	smpsAlterNote       $0C
000E1279 E701                       	dc.b	smpsNoAttack, $01
000E127B E112                       	smpsAlterNote       $12
000E127D E701                       	dc.b	smpsNoAttack, $01
000E127F E113                       	smpsAlterNote       $13
000E1281 E701                       	dc.b	smpsNoAttack, $01
000E1283 E10F                       	smpsAlterNote       $0F
000E1285 E701                       	dc.b	smpsNoAttack, $01
000E1287 E109                       	smpsAlterNote       $09
000E1289 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E128D E10C                       	smpsAlterNote       $0C
000E128F E701                       	dc.b	smpsNoAttack, $01
000E1291 E112                       	smpsAlterNote       $12
000E1293 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1297 E10C                       	smpsAlterNote       $0C
000E1299 E701                       	dc.b	smpsNoAttack, $01
000E129B E109                       	smpsAlterNote       $09
000E129D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E12A1 E10F                       	smpsAlterNote       $0F
000E12A3 E701                       	dc.b	smpsNoAttack, $01
000E12A5 E113                       	smpsAlterNote       $13
000E12A7 E701                       	dc.b	smpsNoAttack, $01
000E12A9 E112                       	smpsAlterNote       $12
000E12AB E701                       	dc.b	smpsNoAttack, $01
000E12AD E10C                       	smpsAlterNote       $0C
000E12AF E701                       	dc.b	smpsNoAttack, $01
000E12B1 E109                       	smpsAlterNote       $09
000E12B3 8001                       	dc.b	nRst, $01
000E12B5 E10D                       	smpsAlterNote       $0D
000E12B7 B60A                       	dc.b	nF4, $0A
000E12B9 E10C                       	smpsAlterNote       $0C
000E12BB B506 8001                  	dc.b	nE4, $06, nRst, $01
000E12BF E10B                       	smpsAlterNote       $0B
000E12C1 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000E12C5 E10C                       	smpsAlterNote       $0C
000E12C7 B503                       	dc.b	nE4, $03
000E12C9 E10D                       	smpsAlterNote       $0D
000E12CB B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
000E12D5 E10C                       	smpsAlterNote       $0C
000E12D7 E701                       	dc.b	smpsNoAttack, $01
000E12D9 E108                       	smpsAlterNote       $08
000E12DB E701                       	dc.b	smpsNoAttack, $01
000E12DD E10C                       	smpsAlterNote       $0C
000E12DF E701                       	dc.b	smpsNoAttack, $01
000E12E1 E112                       	smpsAlterNote       $12
000E12E3 E701                       	dc.b	smpsNoAttack, $01
000E12E5 E113                       	smpsAlterNote       $13
000E12E7 E701                       	dc.b	smpsNoAttack, $01
000E12E9 E10F                       	smpsAlterNote       $0F
000E12EB E701                       	dc.b	smpsNoAttack, $01
000E12ED E109                       	smpsAlterNote       $09
000E12EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E12F3 E10C                       	smpsAlterNote       $0C
000E12F5 E701                       	dc.b	smpsNoAttack, $01
000E12F7 E112                       	smpsAlterNote       $12
000E12F9 E701                       	dc.b	smpsNoAttack, $01
000E12FB E113                       	smpsAlterNote       $13
000E12FD 8001                       	dc.b	nRst, $01
000E12FF E10D                       	smpsAlterNote       $0D
000E1301 C20D                       	dc.b	nF5, $0D
000E1303 E10A                       	smpsAlterNote       $0A
000E1305 E701                       	dc.b	smpsNoAttack, $01
000E1307 E106                       	smpsAlterNote       $06
000E1309 E701                       	dc.b	smpsNoAttack, $01
000E130B E10A                       	smpsAlterNote       $0A
000E130D E701                       	dc.b	smpsNoAttack, $01
000E130F E110                       	smpsAlterNote       $10
000E1311 E701                       	dc.b	smpsNoAttack, $01
000E1313 E111                       	smpsAlterNote       $11
000E1315 E701                       	dc.b	smpsNoAttack, $01
000E1317 E10D                       	smpsAlterNote       $0D
000E1319 E701                       	dc.b	smpsNoAttack, $01
000E131B E107                       	smpsAlterNote       $07
000E131D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1321 E10A                       	smpsAlterNote       $0A
000E1323 E701                       	dc.b	smpsNoAttack, $01
000E1325 E110                       	smpsAlterNote       $10
000E1327 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E132B E10A                       	smpsAlterNote       $0A
000E132D E701                       	dc.b	smpsNoAttack, $01
000E132F E107                       	smpsAlterNote       $07
000E1331 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1335 E10D                       	smpsAlterNote       $0D
000E1337 E701                       	dc.b	smpsNoAttack, $01
000E1339 E111                       	smpsAlterNote       $11
000E133B E701                       	dc.b	smpsNoAttack, $01
000E133D E110                       	smpsAlterNote       $10
000E133F E701                       	dc.b	smpsNoAttack, $01
000E1341 E10A                       	smpsAlterNote       $0A
000E1343 E701                       	dc.b	smpsNoAttack, $01
000E1345 E106                       	smpsAlterNote       $06
000E1347 E701                       	dc.b	smpsNoAttack, $01
000E1349 E10A                       	smpsAlterNote       $0A
000E134B E701                       	dc.b	smpsNoAttack, $01
000E134D E10D                       	smpsAlterNote       $0D
000E134F E701                       	dc.b	smpsNoAttack, $01
000E1351 E111                       	smpsAlterNote       $11
000E1353 E701                       	dc.b	smpsNoAttack, $01
000E1355 E10D                       	smpsAlterNote       $0D
000E1357 E701                       	dc.b	smpsNoAttack, $01
000E1359 E107                       	smpsAlterNote       $07
000E135B E701                       	dc.b	smpsNoAttack, $01
000E135D E106                       	smpsAlterNote       $06
000E135F E701                       	dc.b	smpsNoAttack, $01
000E1361 E10A                       	smpsAlterNote       $0A
000E1363 E701                       	dc.b	smpsNoAttack, $01
000E1365 E110                       	smpsAlterNote       $10
000E1367 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E136B E10D                       	smpsAlterNote       $0D
000E136D E701                       	dc.b	smpsNoAttack, $01
000E136F E107                       	smpsAlterNote       $07
000E1371 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1375 E10D                       	smpsAlterNote       $0D
000E1377 E701                       	dc.b	smpsNoAttack, $01
000E1379 E110                       	smpsAlterNote       $10
000E137B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E137F E10A                       	smpsAlterNote       $0A
000E1381 E701                       	dc.b	smpsNoAttack, $01
000E1383 E106                       	smpsAlterNote       $06
000E1385 E701                       	dc.b	smpsNoAttack, $01
000E1387 E107                       	smpsAlterNote       $07
000E1389 E701                       	dc.b	smpsNoAttack, $01
000E138B E10D                       	smpsAlterNote       $0D
000E138D E701                       	dc.b	smpsNoAttack, $01
000E138F E111                       	smpsAlterNote       $11
000E1391 E701                       	dc.b	smpsNoAttack, $01
000E1393 E10D                       	smpsAlterNote       $0D
000E1395 E701                       	dc.b	smpsNoAttack, $01
000E1397 E10A                       	smpsAlterNote       $0A
000E1399 E701                       	dc.b	smpsNoAttack, $01
000E139B E107                       	smpsAlterNote       $07
000E139D 8001                       	dc.b	nRst, $01
000E139F E10D                       	smpsAlterNote       $0D
000E13A1 C206 8001                  	dc.b	nF5, $06, nRst, $01
000E13A7 E601                       	smpsAlterVol        $01
000E13A9 E110                       	smpsAlterNote       $10
000E13AB BB0D                       	dc.b	nBb4, $0D
000E13AD E10A                       	smpsAlterNote       $0A
000E13AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E13B3 E110                       	smpsAlterNote       $10
000E13B5 E701                       	dc.b	smpsNoAttack, $01
000E13B7 E113                       	smpsAlterNote       $13
000E13B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E13BD E10D                       	smpsAlterNote       $0D
000E13BF E701                       	dc.b	smpsNoAttack, $01
000E13C1 E109                       	smpsAlterNote       $09
000E13C3 E701                       	dc.b	smpsNoAttack, $01
000E13C5 E10A                       	smpsAlterNote       $0A
000E13C7 E701                       	dc.b	smpsNoAttack, $01
000E13C9 E110                       	smpsAlterNote       $10
000E13CB E701                       	dc.b	smpsNoAttack, $01
000E13CD E114                       	smpsAlterNote       $14
000E13CF E701                       	dc.b	smpsNoAttack, $01
000E13D1 E110                       	smpsAlterNote       $10
000E13D3 E701                       	dc.b	smpsNoAttack, $01
000E13D5 E10D                       	smpsAlterNote       $0D
000E13D7 E701                       	dc.b	smpsNoAttack, $01
000E13D9 E109                       	smpsAlterNote       $09
000E13DB E701                       	dc.b	smpsNoAttack, $01
000E13DD E10A                       	smpsAlterNote       $0A
000E13DF 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
000E13E3 E107                       	smpsAlterNote       $07
000E13E5 E701                       	dc.b	smpsNoAttack, $01
000E13E7 E103                       	smpsAlterNote       $03
000E13E9 E701                       	dc.b	smpsNoAttack, $01
000E13EB E107                       	smpsAlterNote       $07
000E13ED E701                       	dc.b	smpsNoAttack, $01
000E13EF E10D                       	smpsAlterNote       $0D
000E13F1 E701                       	dc.b	smpsNoAttack, $01
000E13F3 E10E                       	smpsAlterNote       $0E
000E13F5 E701                       	dc.b	smpsNoAttack, $01
000E13F7 E10A                       	smpsAlterNote       $0A
000E13F9 E701                       	dc.b	smpsNoAttack, $01
000E13FB E104                       	smpsAlterNote       $04
000E13FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1401 E107                       	smpsAlterNote       $07
000E1403 E701                       	dc.b	smpsNoAttack, $01
000E1405 E10D                       	smpsAlterNote       $0D
000E1407 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E140B E107                       	smpsAlterNote       $07
000E140D E701                       	dc.b	smpsNoAttack, $01
000E140F E104                       	smpsAlterNote       $04
000E1411 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1415 E10B                       	smpsAlterNote       $0B
000E1417 BF0D                       	dc.b	nD5, $0D
000E1419 E108                       	smpsAlterNote       $08
000E141B E701                       	dc.b	smpsNoAttack, $01
000E141D E105                       	smpsAlterNote       $05
000E141F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1423 E10B                       	smpsAlterNote       $0B
000E1425 E701                       	dc.b	smpsNoAttack, $01
000E1427 E10F                       	smpsAlterNote       $0F
000E1429 E701                       	dc.b	smpsNoAttack, $01
000E142B E10E                       	smpsAlterNote       $0E
000E142D E701                       	dc.b	smpsNoAttack, $01
000E142F E108                       	smpsAlterNote       $08
000E1431 E701                       	dc.b	smpsNoAttack, $01
000E1433 E104                       	smpsAlterNote       $04
000E1435 E701                       	dc.b	smpsNoAttack, $01
000E1437 E108                       	smpsAlterNote       $08
000E1439 E701                       	dc.b	smpsNoAttack, $01
000E143B E10B                       	smpsAlterNote       $0B
000E143D E701                       	dc.b	smpsNoAttack, $01
000E143F E10F                       	smpsAlterNote       $0F
000E1441 E701                       	dc.b	smpsNoAttack, $01
000E1443 E10B                       	smpsAlterNote       $0B
000E1445 E701                       	dc.b	smpsNoAttack, $01
000E1447 E105                       	smpsAlterNote       $05
000E1449 E701                       	dc.b	smpsNoAttack, $01
000E144B E104                       	smpsAlterNote       $04
000E144D E701                       	dc.b	smpsNoAttack, $01
000E144F E105                       	smpsAlterNote       $05
000E1451 8001                       	dc.b	nRst, $01
000E1453 E10C                       	smpsAlterNote       $0C
000E1455 C10C                       	dc.b	nE5, $0C
000E1457 E10D                       	smpsAlterNote       $0D
000E1459 C201                       	dc.b	nF5, $01
000E145B E10E                       	smpsAlterNote       $0E
000E145D C301 8001                  	dc.b	nFs5, $01, nRst, $01
000E1461 E10D                       	smpsAlterNote       $0D
000E1463 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
000E1467 E10A                       	smpsAlterNote       $0A
000E1469 E701                       	dc.b	smpsNoAttack, $01
000E146B E106                       	smpsAlterNote       $06
000E146D E701                       	dc.b	smpsNoAttack, $01
000E146F E10A                       	smpsAlterNote       $0A
000E1471 E701                       	dc.b	smpsNoAttack, $01
000E1473 E10D                       	smpsAlterNote       $0D
000E1475 E701                       	dc.b	smpsNoAttack, $01
000E1477 E111                       	smpsAlterNote       $11
000E1479 E701                       	dc.b	smpsNoAttack, $01
000E147B E10D                       	smpsAlterNote       $0D
000E147D E701                       	dc.b	smpsNoAttack, $01
000E147F E107                       	smpsAlterNote       $07
000E1481 E701                       	dc.b	smpsNoAttack, $01
000E1483 E106                       	smpsAlterNote       $06
000E1485 E701                       	dc.b	smpsNoAttack, $01
000E1487 E10A                       	smpsAlterNote       $0A
000E1489 E701                       	dc.b	smpsNoAttack, $01
000E148B E110                       	smpsAlterNote       $10
000E148D E701                       	dc.b	smpsNoAttack, $01
000E148F E111                       	smpsAlterNote       $11
000E1491 8001                       	dc.b	nRst, $01
000E1493 E10D                       	smpsAlterNote       $0D
000E1495 C40D                       	dc.b	nG5, $0D
000E1497 E10A                       	smpsAlterNote       $0A
000E1499 E701                       	dc.b	smpsNoAttack, $01
000E149B E106                       	smpsAlterNote       $06
000E149D E701                       	dc.b	smpsNoAttack, $01
000E149F E10A                       	smpsAlterNote       $0A
000E14A1 E701                       	dc.b	smpsNoAttack, $01
000E14A3 E10D                       	smpsAlterNote       $0D
000E14A5 E701                       	dc.b	smpsNoAttack, $01
000E14A7 E10C                       	smpsAlterNote       $0C
000E14A9 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
000E14B5 8001                       	dc.b	nRst, $01
000E14B7 E10D                       	smpsAlterNote       $0D
000E14B9 C20D                       	dc.b	nF5, $0D
000E14BB E10A                       	smpsAlterNote       $0A
000E14BD E701                       	dc.b	smpsNoAttack, $01
000E14BF E106                       	smpsAlterNote       $06
000E14C1 E701                       	dc.b	smpsNoAttack, $01
000E14C3 E10A                       	smpsAlterNote       $0A
000E14C5 E701                       	dc.b	smpsNoAttack, $01
000E14C7 E110                       	smpsAlterNote       $10
000E14C9 E701                       	dc.b	smpsNoAttack, $01
000E14CB E111                       	smpsAlterNote       $11
000E14CD E701                       	dc.b	smpsNoAttack, $01
000E14CF E10D                       	smpsAlterNote       $0D
000E14D1 E701                       	dc.b	smpsNoAttack, $01
000E14D3 E107                       	smpsAlterNote       $07
000E14D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E14D9 E10A                       	smpsAlterNote       $0A
000E14DB E701                       	dc.b	smpsNoAttack, $01
000E14DD E110                       	smpsAlterNote       $10
000E14DF E701                       	dc.b	smpsNoAttack, $01
000E14E1 E111                       	smpsAlterNote       $11
000E14E3 8001                       	dc.b	nRst, $01
000E14E5 E10F                       	smpsAlterNote       $0F
000E14E7 C60A                       	dc.b	nA5, $0A
000E14E9 E10D                       	smpsAlterNote       $0D
000E14EB C406 8001                  	dc.b	nG5, $06, nRst, $01
000E14EF E10C                       	smpsAlterNote       $0C
000E14F1 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000E14FD 8001                       	dc.b	nRst, $01
000E14FF E10D                       	smpsAlterNote       $0D
000E1501 C20D                       	dc.b	nF5, $0D
000E1503 E107                       	smpsAlterNote       $07
000E1505 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1509 E10A                       	smpsAlterNote       $0A
000E150B E701                       	dc.b	smpsNoAttack, $01
000E150D E110                       	smpsAlterNote       $10
000E150F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1513 E10A                       	smpsAlterNote       $0A
000E1515 E701                       	dc.b	smpsNoAttack, $01
000E1517 E107                       	smpsAlterNote       $07
000E1519 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E151D E10D                       	smpsAlterNote       $0D
000E151F E701                       	dc.b	smpsNoAttack, $01
000E1521 E111                       	smpsAlterNote       $11
000E1523 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E1527 E10D                       	smpsAlterNote       $0D
000E1529 C40D                       	dc.b	nG5, $0D
000E152B E107                       	smpsAlterNote       $07
000E152D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1531 E10A                       	smpsAlterNote       $0A
000E1533 E701                       	dc.b	smpsNoAttack, $01
000E1535 E10D                       	smpsAlterNote       $0D
000E1537 8001                       	dc.b	nRst, $01
000E1539 E10C                       	smpsAlterNote       $0C
000E153B C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000E1547 E10D                       	smpsAlterNote       $0D
000E1549 C20E                       	dc.b	nF5, $0E
000E154B E107                       	smpsAlterNote       $07
000E154D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1551 E10D                       	smpsAlterNote       $0D
000E1553 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E1559 E0C0                       	smpsPan             panCenter, $00
000E155B E603                       	smpsAlterVol        $03
000E155D E108                       	smpsAlterNote       $08
000E155F B406                       	dc.b	nEb4, $06
000E1561 E10C                       	smpsAlterNote       $0C
000E1563 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000E1567 E108                       	smpsAlterNote       $08
000E1569 B403                       	dc.b	nEb4, $03
000E156B E109                       	smpsAlterNote       $09
000E156D B803 8001                  	dc.b	nG4, $03, nRst, $01
000E1571 E10C                       	smpsAlterNote       $0C
000E1573 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
000E157B 03                         	dc.b	$03
000E157C E6FD                       	smpsAlterVol        $FD
000E157E F6F1 F4                    	smpsJump            music84_Jump00
000E1581                            
000E1581                            ; PSG1 Data
000E1581                            music84_PSG1:
000E1581 E1FD                       	smpsAlterNote       $FD
000E1583 EC04                       	smpsPSGAlterVol     $04
000E1585 9203                       	dc.b	nF1, $03
000E1587 E1FE                       	smpsAlterNote       $FE
000E1589 9603                       	dc.b	nA1, $03
000E158B EC04                       	smpsPSGAlterVol     $04
000E158D E701                       	dc.b	smpsNoAttack, $01
000E158F E1FF                       	smpsAlterNote       $FF
000E1591 ECFC                       	smpsPSGAlterVol     $FC
000E1593 9B03                       	dc.b	nD2, $03
000E1595 E1FD                       	smpsAlterNote       $FD
000E1597 9403                       	dc.b	nG1, $03
000E1599 EC04                       	smpsPSGAlterVol     $04
000E159B E701                       	dc.b	smpsNoAttack, $01
000E159D E1FE                       	smpsAlterNote       $FE
000E159F ECFC                       	smpsPSGAlterVol     $FC
000E15A1 9703                       	dc.b	nBb1, $03
000E15A3 E1FF                       	smpsAlterNote       $FF
000E15A5 9B03                       	dc.b	nD2, $03
000E15A7 EC04                       	smpsPSGAlterVol     $04
000E15A9 E701                       	dc.b	smpsNoAttack, $01
000E15AB E1FE                       	smpsAlterNote       $FE
000E15AD ECFC                       	smpsPSGAlterVol     $FC
000E15AF A002                       	dc.b	nG2, $02
000E15B1 EC04                       	smpsPSGAlterVol     $04
000E15B3 E701                       	dc.b	smpsNoAttack, $01
000E15B5 E1FF                       	smpsAlterNote       $FF
000E15B7 ECFC                       	smpsPSGAlterVol     $FC
000E15B9 A203                       	dc.b	nA2, $03
000E15BB EC0B                       	smpsPSGAlterVol     $0B
000E15BD 800A                       	dc.b	nRst, $0A
000E15BF E105                       	smpsAlterNote       $05
000E15C1 01                         	dc.b	$01
000E15C2 E1FC                       	smpsAlterNote       $FC
000E15C4 01                         	dc.b	$01
000E15C5 E105                       	smpsAlterNote       $05
000E15C7 01                         	dc.b	$01
000E15C8 E1FD                       	smpsAlterNote       $FD
000E15CA 01                         	dc.b	$01
000E15CB E105                       	smpsAlterNote       $05
000E15CD 01                         	dc.b	$01
000E15CE E1FD                       	smpsAlterNote       $FD
000E15D0 01                         	dc.b	$01
000E15D1 E1FA                       	smpsAlterNote       $FA
000E15D3 01                         	dc.b	$01
000E15D4 E1FC                       	smpsAlterNote       $FC
000E15D6 01                         	dc.b	$01
000E15D7 E105                       	smpsAlterNote       $05
000E15D9 01                         	dc.b	$01
000E15DA E108                       	smpsAlterNote       $08
000E15DC 0101                       	dc.b	$01, $01
000E15DE E105                       	smpsAlterNote       $05
000E15E0 01                         	dc.b	$01
000E15E1 E1FA                       	smpsAlterNote       $FA
000E15E3 0101                       	dc.b	$01, $01
000E15E5 E1FD                       	smpsAlterNote       $FD
000E15E7 01                         	dc.b	$01
000E15E8 E105                       	smpsAlterNote       $05
000E15EA 01                         	dc.b	$01
000E15EB E108                       	smpsAlterNote       $08
000E15ED 01                         	dc.b	$01
000E15EE E105                       	smpsAlterNote       $05
000E15F0 01                         	dc.b	$01
000E15F1 E1FC                       	smpsAlterNote       $FC
000E15F3 01                         	dc.b	$01
000E15F4 E105                       	smpsAlterNote       $05
000E15F6 01                         	dc.b	$01
000E15F7 E1FD                       	smpsAlterNote       $FD
000E15F9 01                         	dc.b	$01
000E15FA                            
000E15FA                            music84_Jump07:
000E15FA E105                       	smpsAlterNote       $05
000E15FC 8001                       	dc.b	nRst, $01
000E15FE E1FD                       	smpsAlterNote       $FD
000E1600 01                         	dc.b	$01
000E1601 E1FA                       	smpsAlterNote       $FA
000E1603 01                         	dc.b	$01
000E1604 E1FC                       	smpsAlterNote       $FC
000E1606 01                         	dc.b	$01
000E1607 E1FD                       	smpsAlterNote       $FD
000E1609 ECF5                       	smpsPSGAlterVol     $F5
000E160B 9206                       	dc.b	nF1, $06
000E160D EC04                       	smpsPSGAlterVol     $04
000E160F E701                       	dc.b	smpsNoAttack, $01
000E1611 EC07                       	smpsPSGAlterVol     $07
000E1613 8003                       	dc.b	nRst, $03
000E1615 ECF5                       	smpsPSGAlterVol     $F5
000E1617 9206                       	dc.b	nF1, $06
000E1619 EC04                       	smpsPSGAlterVol     $04
000E161B E701                       	dc.b	smpsNoAttack, $01
000E161D EC07                       	smpsPSGAlterVol     $07
000E161F 8006                       	dc.b	nRst, $06
000E1621 E100                       	smpsAlterNote       $00
000E1623 01                         	dc.b	$01
000E1624 E104                       	smpsAlterNote       $04
000E1626 01                         	dc.b	$01
000E1627 E100                       	smpsAlterNote       $00
000E1629 01                         	dc.b	$01
000E162A E1FB                       	smpsAlterNote       $FB
000E162C 01                         	dc.b	$01
000E162D E1FD                       	smpsAlterNote       $FD
000E162F ECF5                       	smpsPSGAlterVol     $F5
000E1631 9406                       	dc.b	nG1, $06
000E1633 EC04                       	smpsPSGAlterVol     $04
000E1635 E701                       	dc.b	smpsNoAttack, $01
000E1637 EC07                       	smpsPSGAlterVol     $07
000E1639 8003                       	dc.b	nRst, $03
000E163B ECF5                       	smpsPSGAlterVol     $F5
000E163D 9407                       	dc.b	nG1, $07
000E163F EC0B                       	smpsPSGAlterVol     $0B
000E1641 8006                       	dc.b	nRst, $06
000E1643 E100                       	smpsAlterNote       $00
000E1645 01                         	dc.b	$01
000E1646 E103                       	smpsAlterNote       $03
000E1648 0101                       	dc.b	$01, $01
000E164A E1FD                       	smpsAlterNote       $FD
000E164C 01                         	dc.b	$01
000E164D ECF5                       	smpsPSGAlterVol     $F5
000E164F 9207                       	dc.b	nF1, $07
000E1651 EC0B                       	smpsPSGAlterVol     $0B
000E1653 8004                       	dc.b	nRst, $04
000E1655 ECF5                       	smpsPSGAlterVol     $F5
000E1657 9206                       	dc.b	nF1, $06
000E1659 EC04                       	smpsPSGAlterVol     $04
000E165B E701                       	dc.b	smpsNoAttack, $01
000E165D EC07                       	smpsPSGAlterVol     $07
000E165F 8006                       	dc.b	nRst, $06
000E1661 E103                       	smpsAlterNote       $03
000E1663 01                         	dc.b	$01
000E1664 E104                       	smpsAlterNote       $04
000E1666 01                         	dc.b	$01
000E1667 E100                       	smpsAlterNote       $00
000E1669 01                         	dc.b	$01
000E166A E1FA                       	smpsAlterNote       $FA
000E166C 01                         	dc.b	$01
000E166D E1FD                       	smpsAlterNote       $FD
000E166F ECF5                       	smpsPSGAlterVol     $F5
000E1671 9206                       	dc.b	nF1, $06
000E1673 EC04                       	smpsPSGAlterVol     $04
000E1675 E701                       	dc.b	smpsNoAttack, $01
000E1677 EC07                       	smpsPSGAlterVol     $07
000E1679 8003                       	dc.b	nRst, $03
000E167B ECF5                       	smpsPSGAlterVol     $F5
000E167D 9106                       	dc.b	nE1, $06
000E167F EC04                       	smpsPSGAlterVol     $04
000E1681 E701                       	dc.b	smpsNoAttack, $01
000E1683 EC07                       	smpsPSGAlterVol     $07
000E1685 8006                       	dc.b	nRst, $06
000E1687 E100                       	smpsAlterNote       $00
000E1689 01                         	dc.b	$01
000E168A E104                       	smpsAlterNote       $04
000E168C 01                         	dc.b	$01
000E168D E100                       	smpsAlterNote       $00
000E168F 01                         	dc.b	$01
000E1690 E1FD                       	smpsAlterNote       $FD
000E1692 01                         	dc.b	$01
000E1693 ECF5                       	smpsPSGAlterVol     $F5
000E1695 9206                       	dc.b	nF1, $06
000E1697 EC04                       	smpsPSGAlterVol     $04
000E1699 E701                       	dc.b	smpsNoAttack, $01
000E169B EC07                       	smpsPSGAlterVol     $07
000E169D 8003                       	dc.b	nRst, $03
000E169F ECF5                       	smpsPSGAlterVol     $F5
000E16A1 9207                       	dc.b	nF1, $07
000E16A3 EC0B                       	smpsPSGAlterVol     $0B
000E16A5 8007                       	dc.b	nRst, $07
000E16A7 E103                       	smpsAlterNote       $03
000E16A9 0101                       	dc.b	$01, $01
000E16AB E1FD                       	smpsAlterNote       $FD
000E16AD 01                         	dc.b	$01
000E16AE E1FB                       	smpsAlterNote       $FB
000E16B0 01                         	dc.b	$01
000E16B1 E1FD                       	smpsAlterNote       $FD
000E16B3 ECF5                       	smpsPSGAlterVol     $F5
000E16B5 9406                       	dc.b	nG1, $06
000E16B7 EC0B                       	smpsPSGAlterVol     $0B
000E16B9 8004                       	dc.b	nRst, $04
000E16BB ECF5                       	smpsPSGAlterVol     $F5
000E16BD 9406                       	dc.b	nG1, $06
000E16BF EC04                       	smpsPSGAlterVol     $04
000E16C1 E701                       	dc.b	smpsNoAttack, $01
000E16C3 EC07                       	smpsPSGAlterVol     $07
000E16C5 8006                       	dc.b	nRst, $06
000E16C7 E100                       	smpsAlterNote       $00
000E16C9 01                         	dc.b	$01
000E16CA E104                       	smpsAlterNote       $04
000E16CC 01                         	dc.b	$01
000E16CD E100                       	smpsAlterNote       $00
000E16CF 01                         	dc.b	$01
000E16D0 E1F9                       	smpsAlterNote       $F9
000E16D2 01                         	dc.b	$01
000E16D3 E1FD                       	smpsAlterNote       $FD
000E16D5 ECF5                       	smpsPSGAlterVol     $F5
000E16D7 9206                       	dc.b	nF1, $06
000E16D9 EC04                       	smpsPSGAlterVol     $04
000E16DB E701                       	dc.b	smpsNoAttack, $01
000E16DD EC07                       	smpsPSGAlterVol     $07
000E16DF 8003                       	dc.b	nRst, $03
000E16E1 ECF5                       	smpsPSGAlterVol     $F5
000E16E3 9207                       	dc.b	nF1, $07
000E16E5 EC0B                       	smpsPSGAlterVol     $0B
000E16E7 8006                       	dc.b	nRst, $06
000E16E9 E100                       	smpsAlterNote       $00
000E16EB 01                         	dc.b	$01
000E16EC E104                       	smpsAlterNote       $04
000E16EE 01                         	dc.b	$01
000E16EF E103                       	smpsAlterNote       $03
000E16F1 01                         	dc.b	$01
000E16F2 E1FD                       	smpsAlterNote       $FD
000E16F4 01                         	dc.b	$01
000E16F5 ECF5                       	smpsPSGAlterVol     $F5
000E16F7 9207                       	dc.b	nF1, $07
000E16F9 EC0B                       	smpsPSGAlterVol     $0B
000E16FB 8004                       	dc.b	nRst, $04
000E16FD ECF5                       	smpsPSGAlterVol     $F5
000E16FF 9206                       	dc.b	nF1, $06
000E1701 EC0B                       	smpsPSGAlterVol     $0B
000E1703 8007                       	dc.b	nRst, $07
000E1705 E103                       	smpsAlterNote       $03
000E1707 0101                       	dc.b	$01, $01
000E1709 E100                       	smpsAlterNote       $00
000E170B 01                         	dc.b	$01
000E170C E1FA                       	smpsAlterNote       $FA
000E170E 01                         	dc.b	$01
000E170F E1FD                       	smpsAlterNote       $FD
000E1711 ECF5                       	smpsPSGAlterVol     $F5
000E1713 9206                       	dc.b	nF1, $06
000E1715 EC04                       	smpsPSGAlterVol     $04
000E1717 E701                       	dc.b	smpsNoAttack, $01
000E1719 EC07                       	smpsPSGAlterVol     $07
000E171B 8003                       	dc.b	nRst, $03
000E171D ECF5                       	smpsPSGAlterVol     $F5
000E171F 9206                       	dc.b	nF1, $06
000E1721 EC04                       	smpsPSGAlterVol     $04
000E1723 E701                       	dc.b	smpsNoAttack, $01
000E1725 EC07                       	smpsPSGAlterVol     $07
000E1727 8006                       	dc.b	nRst, $06
000E1729 E100                       	smpsAlterNote       $00
000E172B 01                         	dc.b	$01
000E172C E104                       	smpsAlterNote       $04
000E172E 01                         	dc.b	$01
000E172F E100                       	smpsAlterNote       $00
000E1731 01                         	dc.b	$01
000E1732 E1FD                       	smpsAlterNote       $FD
000E1734 01                         	dc.b	$01
000E1735 ECF5                       	smpsPSGAlterVol     $F5
000E1737 9206                       	dc.b	nF1, $06
000E1739 EC04                       	smpsPSGAlterVol     $04
000E173B E701                       	dc.b	smpsNoAttack, $01
000E173D EC07                       	smpsPSGAlterVol     $07
000E173F 8003                       	dc.b	nRst, $03
000E1741 ECF5                       	smpsPSGAlterVol     $F5
000E1743 9207                       	dc.b	nF1, $07
000E1745 EC0B                       	smpsPSGAlterVol     $0B
000E1747 8007                       	dc.b	nRst, $07
000E1749 E103                       	smpsAlterNote       $03
000E174B 0101                       	dc.b	$01, $01
000E174D E1FD                       	smpsAlterNote       $FD
000E174F 01                         	dc.b	$01
000E1750 E1FA                       	smpsAlterNote       $FA
000E1752 01                         	dc.b	$01
000E1753 E1FD                       	smpsAlterNote       $FD
000E1755 ECF5                       	smpsPSGAlterVol     $F5
000E1757 9206                       	dc.b	nF1, $06
000E1759 EC0B                       	smpsPSGAlterVol     $0B
000E175B 8004                       	dc.b	nRst, $04
000E175D ECF5                       	smpsPSGAlterVol     $F5
000E175F 9206                       	dc.b	nF1, $06
000E1761 EC04                       	smpsPSGAlterVol     $04
000E1763 E701                       	dc.b	smpsNoAttack, $01
000E1765 EC07                       	smpsPSGAlterVol     $07
000E1767 8006                       	dc.b	nRst, $06
000E1769 E103                       	smpsAlterNote       $03
000E176B 01                         	dc.b	$01
000E176C E104                       	smpsAlterNote       $04
000E176E 01                         	dc.b	$01
000E176F E100                       	smpsAlterNote       $00
000E1771 01                         	dc.b	$01
000E1772 E1FA                       	smpsAlterNote       $FA
000E1774 01                         	dc.b	$01
000E1775 E1FD                       	smpsAlterNote       $FD
000E1777 ECF5                       	smpsPSGAlterVol     $F5
000E1779 9206                       	dc.b	nF1, $06
000E177B EC04                       	smpsPSGAlterVol     $04
000E177D E701                       	dc.b	smpsNoAttack, $01
000E177F EC07                       	smpsPSGAlterVol     $07
000E1781 8003                       	dc.b	nRst, $03
000E1783 ECF5                       	smpsPSGAlterVol     $F5
000E1785 9206                       	dc.b	nF1, $06
000E1787 EC04                       	smpsPSGAlterVol     $04
000E1789 E701                       	dc.b	smpsNoAttack, $01
000E178B EC07                       	smpsPSGAlterVol     $07
000E178D 8006                       	dc.b	nRst, $06
000E178F E100                       	smpsAlterNote       $00
000E1791 01                         	dc.b	$01
000E1792 E104                       	smpsAlterNote       $04
000E1794 01                         	dc.b	$01
000E1795 E103                       	smpsAlterNote       $03
000E1797 01                         	dc.b	$01
000E1798 E1FD                       	smpsAlterNote       $FD
000E179A 01                         	dc.b	$01
000E179B ECF5                       	smpsPSGAlterVol     $F5
000E179D 9107                       	dc.b	nE1, $07
000E179F EC0B                       	smpsPSGAlterVol     $0B
000E17A1 8004                       	dc.b	nRst, $04
000E17A3 ECF5                       	smpsPSGAlterVol     $F5
000E17A5 9106                       	dc.b	nE1, $06
000E17A7 EC0B                       	smpsPSGAlterVol     $0B
000E17A9 8007                       	dc.b	nRst, $07
000E17AB E103                       	smpsAlterNote       $03
000E17AD 0101                       	dc.b	$01, $01
000E17AF E100                       	smpsAlterNote       $00
000E17B1 01                         	dc.b	$01
000E17B2 E1FA                       	smpsAlterNote       $FA
000E17B4 01                         	dc.b	$01
000E17B5 E1FD                       	smpsAlterNote       $FD
000E17B7 ECF5                       	smpsPSGAlterVol     $F5
000E17B9 9106                       	dc.b	nE1, $06
000E17BB EC04                       	smpsPSGAlterVol     $04
000E17BD E701                       	dc.b	smpsNoAttack, $01
000E17BF EC07                       	smpsPSGAlterVol     $07
000E17C1 8003                       	dc.b	nRst, $03
000E17C3 ECF5                       	smpsPSGAlterVol     $F5
000E17C5 9106                       	dc.b	nE1, $06
000E17C7 EC04                       	smpsPSGAlterVol     $04
000E17C9 E701                       	dc.b	smpsNoAttack, $01
000E17CB EC07                       	smpsPSGAlterVol     $07
000E17CD 8006                       	dc.b	nRst, $06
000E17CF E100                       	smpsAlterNote       $00
000E17D1 01                         	dc.b	$01
000E17D2 E104                       	smpsAlterNote       $04
000E17D4 01                         	dc.b	$01
000E17D5 E100                       	smpsAlterNote       $00
000E17D7 01                         	dc.b	$01
000E17D8 E1FA                       	smpsAlterNote       $FA
000E17DA 01                         	dc.b	$01
000E17DB E1FD                       	smpsAlterNote       $FD
000E17DD ECF5                       	smpsPSGAlterVol     $F5
000E17DF 9106                       	dc.b	nE1, $06
000E17E1 EC04                       	smpsPSGAlterVol     $04
000E17E3 E701                       	dc.b	smpsNoAttack, $01
000E17E5 EC07                       	smpsPSGAlterVol     $07
000E17E7 8003                       	dc.b	nRst, $03
000E17E9 ECF5                       	smpsPSGAlterVol     $F5
000E17EB 9107 9106                  	dc.b	nE1, $07, nE1, $06
000E17EF EC04                       	smpsPSGAlterVol     $04
000E17F1 E701                       	dc.b	smpsNoAttack, $01
000E17F3 ECFC                       	smpsPSGAlterVol     $FC
000E17F5 9103 9103                  	dc.b	nE1, $03, nE1, $03
000E17F9 EC04                       	smpsPSGAlterVol     $04
000E17FB E701                       	dc.b	smpsNoAttack, $01
000E17FD ECFC                       	smpsPSGAlterVol     $FC
000E17FF 9106                       	dc.b	nE1, $06
000E1801 EC04                       	smpsPSGAlterVol     $04
000E1803 E701                       	dc.b	smpsNoAttack, $01
000E1805 EC07                       	smpsPSGAlterVol     $07
000E1807 8006                       	dc.b	nRst, $06
000E1809 E100                       	smpsAlterNote       $00
000E180B 01                         	dc.b	$01
000E180C E104                       	smpsAlterNote       $04
000E180E 01                         	dc.b	$01
000E180F E100                       	smpsAlterNote       $00
000E1811 01                         	dc.b	$01
000E1812 E1FA                       	smpsAlterNote       $FA
000E1814 01                         	dc.b	$01
000E1815 E1F9                       	smpsAlterNote       $F9
000E1817 01                         	dc.b	$01
000E1818 E1FD                       	smpsAlterNote       $FD
000E181A 01                         	dc.b	$01
000E181B E103                       	smpsAlterNote       $03
000E181D 01                         	dc.b	$01
000E181E E104                       	smpsAlterNote       $04
000E1820 01                         	dc.b	$01
000E1821 E100                       	smpsAlterNote       $00
000E1823 01                         	dc.b	$01
000E1824 E1FA                       	smpsAlterNote       $FA
000E1826 0101                       	dc.b	$01, $01
000E1828 E1FD                       	smpsAlterNote       $FD
000E182A ECF5                       	smpsPSGAlterVol     $F5
000E182C 9206                       	dc.b	nF1, $06
000E182E EC04                       	smpsPSGAlterVol     $04
000E1830 E701                       	dc.b	smpsNoAttack, $01
000E1832 EC07                       	smpsPSGAlterVol     $07
000E1834 8003                       	dc.b	nRst, $03
000E1836 ECF5                       	smpsPSGAlterVol     $F5
000E1838 9206                       	dc.b	nF1, $06
000E183A EC04                       	smpsPSGAlterVol     $04
000E183C E701                       	dc.b	smpsNoAttack, $01
000E183E EC07                       	smpsPSGAlterVol     $07
000E1840 8006                       	dc.b	nRst, $06
000E1842 E100                       	smpsAlterNote       $00
000E1844 01                         	dc.b	$01
000E1845 E104                       	smpsAlterNote       $04
000E1847 01                         	dc.b	$01
000E1848 E103                       	smpsAlterNote       $03
000E184A 01                         	dc.b	$01
000E184B E1FD                       	smpsAlterNote       $FD
000E184D 01                         	dc.b	$01
000E184E ECF5                       	smpsPSGAlterVol     $F5
000E1850 9407                       	dc.b	nG1, $07
000E1852 EC0B                       	smpsPSGAlterVol     $0B
000E1854 8004                       	dc.b	nRst, $04
000E1856 ECF5                       	smpsPSGAlterVol     $F5
000E1858 9406                       	dc.b	nG1, $06
000E185A EC0B                       	smpsPSGAlterVol     $0B
000E185C 8007                       	dc.b	nRst, $07
000E185E E103                       	smpsAlterNote       $03
000E1860 0101                       	dc.b	$01, $01
000E1862 E1FD                       	smpsAlterNote       $FD
000E1864 01                         	dc.b	$01
000E1865 E1F9                       	smpsAlterNote       $F9
000E1867 01                         	dc.b	$01
000E1868 E1FD                       	smpsAlterNote       $FD
000E186A ECF5                       	smpsPSGAlterVol     $F5
000E186C 9206                       	dc.b	nF1, $06
000E186E EC04                       	smpsPSGAlterVol     $04
000E1870 E701                       	dc.b	smpsNoAttack, $01
000E1872 EC07                       	smpsPSGAlterVol     $07
000E1874 8003                       	dc.b	nRst, $03
000E1876 ECF5                       	smpsPSGAlterVol     $F5
000E1878 9206                       	dc.b	nF1, $06
000E187A EC04                       	smpsPSGAlterVol     $04
000E187C E701                       	dc.b	smpsNoAttack, $01
000E187E EC07                       	smpsPSGAlterVol     $07
000E1880 8006                       	dc.b	nRst, $06
000E1882 E100                       	smpsAlterNote       $00
000E1884 01                         	dc.b	$01
000E1885 E104                       	smpsAlterNote       $04
000E1887 01                         	dc.b	$01
000E1888 E100                       	smpsAlterNote       $00
000E188A 01                         	dc.b	$01
000E188B E1FA                       	smpsAlterNote       $FA
000E188D 01                         	dc.b	$01
000E188E E1FD                       	smpsAlterNote       $FD
000E1890 ECF5                       	smpsPSGAlterVol     $F5
000E1892 9206                       	dc.b	nF1, $06
000E1894 EC04                       	smpsPSGAlterVol     $04
000E1896 E701                       	dc.b	smpsNoAttack, $01
000E1898 EC07                       	smpsPSGAlterVol     $07
000E189A 8003                       	dc.b	nRst, $03
000E189C ECF5                       	smpsPSGAlterVol     $F5
000E189E 9107                       	dc.b	nE1, $07
000E18A0 EC0B                       	smpsPSGAlterVol     $0B
000E18A2 8006                       	dc.b	nRst, $06
000E18A4 E100                       	smpsAlterNote       $00
000E18A6 01                         	dc.b	$01
000E18A7 E103                       	smpsAlterNote       $03
000E18A9 0101                       	dc.b	$01, $01
000E18AB E1FD                       	smpsAlterNote       $FD
000E18AD 01                         	dc.b	$01
000E18AE ECF5                       	smpsPSGAlterVol     $F5
000E18B0 9207                       	dc.b	nF1, $07
000E18B2 EC0B                       	smpsPSGAlterVol     $0B
000E18B4 8004                       	dc.b	nRst, $04
000E18B6 ECF5                       	smpsPSGAlterVol     $F5
000E18B8 9206                       	dc.b	nF1, $06
000E18BA EC04                       	smpsPSGAlterVol     $04
000E18BC E701                       	dc.b	smpsNoAttack, $01
000E18BE EC07                       	smpsPSGAlterVol     $07
000E18C0 8006                       	dc.b	nRst, $06
000E18C2 E103                       	smpsAlterNote       $03
000E18C4 01                         	dc.b	$01
000E18C5 E104                       	smpsAlterNote       $04
000E18C7 01                         	dc.b	$01
000E18C8 E100                       	smpsAlterNote       $00
000E18CA 01                         	dc.b	$01
000E18CB E1FB                       	smpsAlterNote       $FB
000E18CD 01                         	dc.b	$01
000E18CE E1FD                       	smpsAlterNote       $FD
000E18D0 ECF5                       	smpsPSGAlterVol     $F5
000E18D2 9406                       	dc.b	nG1, $06
000E18D4 EC04                       	smpsPSGAlterVol     $04
000E18D6 E701                       	dc.b	smpsNoAttack, $01
000E18D8 EC07                       	smpsPSGAlterVol     $07
000E18DA 8003                       	dc.b	nRst, $03
000E18DC ECF5                       	smpsPSGAlterVol     $F5
000E18DE 9406                       	dc.b	nG1, $06
000E18E0 EC04                       	smpsPSGAlterVol     $04
000E18E2 E701                       	dc.b	smpsNoAttack, $01
000E18E4 EC07                       	smpsPSGAlterVol     $07
000E18E6 8006                       	dc.b	nRst, $06
000E18E8 E100                       	smpsAlterNote       $00
000E18EA 01                         	dc.b	$01
000E18EB E104                       	smpsAlterNote       $04
000E18ED 01                         	dc.b	$01
000E18EE E100                       	smpsAlterNote       $00
000E18F0 01                         	dc.b	$01
000E18F1 E1FD                       	smpsAlterNote       $FD
000E18F3 01                         	dc.b	$01
000E18F4 ECF5                       	smpsPSGAlterVol     $F5
000E18F6 9206                       	dc.b	nF1, $06
000E18F8 EC04                       	smpsPSGAlterVol     $04
000E18FA E701                       	dc.b	smpsNoAttack, $01
000E18FC EC07                       	smpsPSGAlterVol     $07
000E18FE 8003                       	dc.b	nRst, $03
000E1900 ECF5                       	smpsPSGAlterVol     $F5
000E1902 9207                       	dc.b	nF1, $07
000E1904 EC0B                       	smpsPSGAlterVol     $0B
000E1906 8007                       	dc.b	nRst, $07
000E1908 E103                       	smpsAlterNote       $03
000E190A 0101                       	dc.b	$01, $01
000E190C E1FD                       	smpsAlterNote       $FD
000E190E 01                         	dc.b	$01
000E190F E1FA                       	smpsAlterNote       $FA
000E1911 01                         	dc.b	$01
000E1912 E1FD                       	smpsAlterNote       $FD
000E1914 ECF5                       	smpsPSGAlterVol     $F5
000E1916 9206                       	dc.b	nF1, $06
000E1918 EC0B                       	smpsPSGAlterVol     $0B
000E191A 8004                       	dc.b	nRst, $04
000E191C ECF5                       	smpsPSGAlterVol     $F5
000E191E 9206                       	dc.b	nF1, $06
000E1920 EC04                       	smpsPSGAlterVol     $04
000E1922 E701                       	dc.b	smpsNoAttack, $01
000E1924 EC07                       	smpsPSGAlterVol     $07
000E1926 8006                       	dc.b	nRst, $06
000E1928 E100                       	smpsAlterNote       $00
000E192A 01                         	dc.b	$01
000E192B E104                       	smpsAlterNote       $04
000E192D 01                         	dc.b	$01
000E192E E100                       	smpsAlterNote       $00
000E1930 01                         	dc.b	$01
000E1931 E1FA                       	smpsAlterNote       $FA
000E1933 01                         	dc.b	$01
000E1934 E1FD                       	smpsAlterNote       $FD
000E1936 ECF5                       	smpsPSGAlterVol     $F5
000E1938 9206                       	dc.b	nF1, $06
000E193A EC04                       	smpsPSGAlterVol     $04
000E193C E704                       	dc.b	smpsNoAttack, $04
000E193E ECFC                       	smpsPSGAlterVol     $FC
000E1940 9207                       	dc.b	nF1, $07
000E1942 EC0B                       	smpsPSGAlterVol     $0B
000E1944 8006                       	dc.b	nRst, $06
000E1946 E100                       	smpsAlterNote       $00
000E1948 01                         	dc.b	$01
000E1949 E104                       	smpsAlterNote       $04
000E194B 01                         	dc.b	$01
000E194C E103                       	smpsAlterNote       $03
000E194E 01                         	dc.b	$01
000E194F E1FD                       	smpsAlterNote       $FD
000E1951 01                         	dc.b	$01
000E1952 ECF5                       	smpsPSGAlterVol     $F5
000E1954 9207                       	dc.b	nF1, $07
000E1956 EC0B                       	smpsPSGAlterVol     $0B
000E1958 8004                       	dc.b	nRst, $04
000E195A ECF5                       	smpsPSGAlterVol     $F5
000E195C 9206                       	dc.b	nF1, $06
000E195E EC0B                       	smpsPSGAlterVol     $0B
000E1960 8007                       	dc.b	nRst, $07
000E1962 E103                       	smpsAlterNote       $03
000E1964 0101                       	dc.b	$01, $01
000E1966 E100                       	smpsAlterNote       $00
000E1968 01                         	dc.b	$01
000E1969 E1FA                       	smpsAlterNote       $FA
000E196B 01                         	dc.b	$01
000E196C E1FD                       	smpsAlterNote       $FD
000E196E ECF5                       	smpsPSGAlterVol     $F5
000E1970 9206                       	dc.b	nF1, $06
000E1972 EC04                       	smpsPSGAlterVol     $04
000E1974 E704                       	dc.b	smpsNoAttack, $04
000E1976 ECFC                       	smpsPSGAlterVol     $FC
000E1978 9206                       	dc.b	nF1, $06
000E197A EC04                       	smpsPSGAlterVol     $04
000E197C E701                       	dc.b	smpsNoAttack, $01
000E197E EC07                       	smpsPSGAlterVol     $07
000E1980 8006                       	dc.b	nRst, $06
000E1982 E100                       	smpsAlterNote       $00
000E1984 01                         	dc.b	$01
000E1985 E104                       	smpsAlterNote       $04
000E1987 01                         	dc.b	$01
000E1988 E100                       	smpsAlterNote       $00
000E198A 01                         	dc.b	$01
000E198B E1FD                       	smpsAlterNote       $FD
000E198D 01                         	dc.b	$01
000E198E ECF5                       	smpsPSGAlterVol     $F5
000E1990 9206                       	dc.b	nF1, $06
000E1992 EC04                       	smpsPSGAlterVol     $04
000E1994 E701                       	dc.b	smpsNoAttack, $01
000E1996 EC07                       	smpsPSGAlterVol     $07
000E1998 8003                       	dc.b	nRst, $03
000E199A ECF5                       	smpsPSGAlterVol     $F5
000E199C 9207                       	dc.b	nF1, $07
000E199E EC0B                       	smpsPSGAlterVol     $0B
000E19A0 8007                       	dc.b	nRst, $07
000E19A2 E103                       	smpsAlterNote       $03
000E19A4 0101                       	dc.b	$01, $01
000E19A6 E1FD                       	smpsAlterNote       $FD
000E19A8 01                         	dc.b	$01
000E19A9 E1FA                       	smpsAlterNote       $FA
000E19AB 01                         	dc.b	$01
000E19AC E1FD                       	smpsAlterNote       $FD
000E19AE ECF5                       	smpsPSGAlterVol     $F5
000E19B0 9106                       	dc.b	nE1, $06
000E19B2 EC0B                       	smpsPSGAlterVol     $0B
000E19B4 8004                       	dc.b	nRst, $04
000E19B6 ECF5                       	smpsPSGAlterVol     $F5
000E19B8 9106                       	dc.b	nE1, $06
000E19BA EC04                       	smpsPSGAlterVol     $04
000E19BC E701                       	dc.b	smpsNoAttack, $01
000E19BE EC07                       	smpsPSGAlterVol     $07
000E19C0 8006                       	dc.b	nRst, $06
000E19C2 E100                       	smpsAlterNote       $00
000E19C4 01                         	dc.b	$01
000E19C5 E104                       	smpsAlterNote       $04
000E19C7 01                         	dc.b	$01
000E19C8 E100                       	smpsAlterNote       $00
000E19CA 01                         	dc.b	$01
000E19CB E1FA                       	smpsAlterNote       $FA
000E19CD 01                         	dc.b	$01
000E19CE E1FD                       	smpsAlterNote       $FD
000E19D0 ECF5                       	smpsPSGAlterVol     $F5
000E19D2 9106                       	dc.b	nE1, $06
000E19D4 EC04                       	smpsPSGAlterVol     $04
000E19D6 E701                       	dc.b	smpsNoAttack, $01
000E19D8 EC07                       	smpsPSGAlterVol     $07
000E19DA 8003                       	dc.b	nRst, $03
000E19DC ECF5                       	smpsPSGAlterVol     $F5
000E19DE 9106                       	dc.b	nE1, $06
000E19E0 EC04                       	smpsPSGAlterVol     $04
000E19E2 E701                       	dc.b	smpsNoAttack, $01
000E19E4 EC07                       	smpsPSGAlterVol     $07
000E19E6 8006                       	dc.b	nRst, $06
000E19E8 E100                       	smpsAlterNote       $00
000E19EA 01                         	dc.b	$01
000E19EB E104                       	smpsAlterNote       $04
000E19ED 01                         	dc.b	$01
000E19EE E103                       	smpsAlterNote       $03
000E19F0 01                         	dc.b	$01
000E19F1 E1FD                       	smpsAlterNote       $FD
000E19F3 01                         	dc.b	$01
000E19F4 ECF5                       	smpsPSGAlterVol     $F5
000E19F6 9107                       	dc.b	nE1, $07
000E19F8 EC0B                       	smpsPSGAlterVol     $0B
000E19FA 8004                       	dc.b	nRst, $04
000E19FC ECF5                       	smpsPSGAlterVol     $F5
000E19FE 9106                       	dc.b	nE1, $06
000E1A00 EC0B                       	smpsPSGAlterVol     $0B
000E1A02 8007                       	dc.b	nRst, $07
000E1A04 E103                       	smpsAlterNote       $03
000E1A06 0101                       	dc.b	$01, $01
000E1A08 E100                       	smpsAlterNote       $00
000E1A0A 01                         	dc.b	$01
000E1A0B E1FA                       	smpsAlterNote       $FA
000E1A0D 01                         	dc.b	$01
000E1A0E E1FD                       	smpsAlterNote       $FD
000E1A10 ECF5                       	smpsPSGAlterVol     $F5
000E1A12 9106                       	dc.b	nE1, $06
000E1A14 EC04                       	smpsPSGAlterVol     $04
000E1A16 E701                       	dc.b	smpsNoAttack, $01
000E1A18 EC07                       	smpsPSGAlterVol     $07
000E1A1A 8003                       	dc.b	nRst, $03
000E1A1C ECF5                       	smpsPSGAlterVol     $F5
000E1A1E 9106                       	dc.b	nE1, $06
000E1A20 EC04                       	smpsPSGAlterVol     $04
000E1A22 E701                       	dc.b	smpsNoAttack, $01
000E1A24 EC07                       	smpsPSGAlterVol     $07
000E1A26 8003                       	dc.b	nRst, $03
000E1A28 ECF5                       	smpsPSGAlterVol     $F5
000E1A2A 9207                       	dc.b	nF1, $07
000E1A2C EC0B                       	smpsPSGAlterVol     $0B
000E1A2E 8006                       	dc.b	nRst, $06
000E1A30 E100                       	smpsAlterNote       $00
000E1A32 01                         	dc.b	$01
000E1A33 E104                       	smpsAlterNote       $04
000E1A35 01                         	dc.b	$01
000E1A36 E103                       	smpsAlterNote       $03
000E1A38 01                         	dc.b	$01
000E1A39 E1FD                       	smpsAlterNote       $FD
000E1A3B 01                         	dc.b	$01
000E1A3C E1F9                       	smpsAlterNote       $F9
000E1A3E 01                         	dc.b	$01
000E1A3F E1FD                       	smpsAlterNote       $FD
000E1A41 01                         	dc.b	$01
000E1A42 E100                       	smpsAlterNote       $00
000E1A44 01                         	dc.b	$01
000E1A45 E104                       	smpsAlterNote       $04
000E1A47 01                         	dc.b	$01
000E1A48 E1FD                       	smpsAlterNote       $FD
000E1A4A ECF5                       	smpsPSGAlterVol     $F5
000E1A4C 9203 9203                  	dc.b	nF1, $03, nF1, $03
000E1A50 EC04                       	smpsPSGAlterVol     $04
000E1A52 E701                       	dc.b	smpsNoAttack, $01
000E1A54 EC07                       	smpsPSGAlterVol     $07
000E1A56 8009                       	dc.b	nRst, $09
000E1A58 E100                       	smpsAlterNote       $00
000E1A5A 01                         	dc.b	$01
000E1A5B E104                       	smpsAlterNote       $04
000E1A5D 01                         	dc.b	$01
000E1A5E E103                       	smpsAlterNote       $03
000E1A60 01                         	dc.b	$01
000E1A61 E1FD                       	smpsAlterNote       $FD
000E1A63 01                         	dc.b	$01
000E1A64 E1F9                       	smpsAlterNote       $F9
000E1A66 01                         	dc.b	$01
000E1A67 E1FD                       	smpsAlterNote       $FD
000E1A69 01                         	dc.b	$01
000E1A6A E100                       	smpsAlterNote       $00
000E1A6C 01                         	dc.b	$01
000E1A6D E104                       	smpsAlterNote       $04
000E1A6F 01                         	dc.b	$01
000E1A70 E100                       	smpsAlterNote       $00
000E1A72 01                         	dc.b	$01
000E1A73 E1FA                       	smpsAlterNote       $FA
000E1A75 01                         	dc.b	$01
000E1A76 E1F9                       	smpsAlterNote       $F9
000E1A78 01                         	dc.b	$01
000E1A79 E1FD                       	smpsAlterNote       $FD
000E1A7B 01                         	dc.b	$01
000E1A7C E103                       	smpsAlterNote       $03
000E1A7E 0101                       	dc.b	$01, $01
000E1A80 E100                       	smpsAlterNote       $00
000E1A82 01                         	dc.b	$01
000E1A83 E1FD                       	smpsAlterNote       $FD
000E1A85 ECF5                       	smpsPSGAlterVol     $F5
000E1A87 9202                       	dc.b	nF1, $02
000E1A89 EC04                       	smpsPSGAlterVol     $04
000E1A8B E701                       	dc.b	smpsNoAttack, $01
000E1A8D ECFC                       	smpsPSGAlterVol     $FC
000E1A8F 9106                       	dc.b	nE1, $06
000E1A91 EC04                       	smpsPSGAlterVol     $04
000E1A93 E701                       	dc.b	smpsNoAttack, $01
000E1A95 EC07                       	smpsPSGAlterVol     $07
000E1A97 8006                       	dc.b	nRst, $06
000E1A99 E100                       	smpsAlterNote       $00
000E1A9B 01                         	dc.b	$01
000E1A9C E104                       	smpsAlterNote       $04
000E1A9E 01                         	dc.b	$01
000E1A9F E100                       	smpsAlterNote       $00
000E1AA1 01                         	dc.b	$01
000E1AA2 E1FD                       	smpsAlterNote       $FD
000E1AA4 01                         	dc.b	$01
000E1AA5 E1F9                       	smpsAlterNote       $F9
000E1AA7 01                         	dc.b	$01
000E1AA8 E1FD                       	smpsAlterNote       $FD
000E1AAA 01                         	dc.b	$01
000E1AAB E103                       	smpsAlterNote       $03
000E1AAD 01                         	dc.b	$01
000E1AAE E104                       	smpsAlterNote       $04
000E1AB0 01                         	dc.b	$01
000E1AB1 E1FD                       	smpsAlterNote       $FD
000E1AB3 ECF5                       	smpsPSGAlterVol     $F5
000E1AB5 9102                       	dc.b	nE1, $02
000E1AB7 EC04                       	smpsPSGAlterVol     $04
000E1AB9 E701                       	dc.b	smpsNoAttack, $01
000E1ABB ECFC                       	smpsPSGAlterVol     $FC
000E1ABD 920D                       	dc.b	nF1, $0D
000E1ABF E100                       	smpsAlterNote       $00
000E1AC1 E701                       	dc.b	smpsNoAttack, $01
000E1AC3 E104                       	smpsAlterNote       $04
000E1AC5 E701                       	dc.b	smpsNoAttack, $01
000E1AC7 E100                       	smpsAlterNote       $00
000E1AC9 E701                       	dc.b	smpsNoAttack, $01
000E1ACB E1FD                       	smpsAlterNote       $FD
000E1ACD E701                       	dc.b	smpsNoAttack, $01
000E1ACF E1F9                       	smpsAlterNote       $F9
000E1AD1 E701                       	dc.b	smpsNoAttack, $01
000E1AD3 E1FD                       	smpsAlterNote       $FD
000E1AD5 E701                       	dc.b	smpsNoAttack, $01
000E1AD7 E103                       	smpsAlterNote       $03
000E1AD9 E701                       	dc.b	smpsNoAttack, $01
000E1ADB E104                       	smpsAlterNote       $04
000E1ADD E701                       	dc.b	smpsNoAttack, $01
000E1ADF E100                       	smpsAlterNote       $00
000E1AE1 E701                       	dc.b	smpsNoAttack, $01
000E1AE3 E1FA                       	smpsAlterNote       $FA
000E1AE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1AE9 E1FD                       	smpsAlterNote       $FD
000E1AEB E701                       	dc.b	smpsNoAttack, $01
000E1AED E103                       	smpsAlterNote       $03
000E1AEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1AF3 E1FD                       	smpsAlterNote       $FD
000E1AF5 E701                       	dc.b	smpsNoAttack, $01
000E1AF7 E1F9                       	smpsAlterNote       $F9
000E1AF9 E701                       	dc.b	smpsNoAttack, $01
000E1AFB E1FA                       	smpsAlterNote       $FA
000E1AFD E701                       	dc.b	smpsNoAttack, $01
000E1AFF E100                       	smpsAlterNote       $00
000E1B01 EC04                       	smpsPSGAlterVol     $04
000E1B03 E701                       	dc.b	smpsNoAttack, $01
000E1B05 EC07                       	smpsPSGAlterVol     $07
000E1B07 E104                       	smpsAlterNote       $04
000E1B09 8001                       	dc.b	nRst, $01
000E1B0B E100                       	smpsAlterNote       $00
000E1B0D 01                         	dc.b	$01
000E1B0E E1FD                       	smpsAlterNote       $FD
000E1B10 01                         	dc.b	$01
000E1B11 E1F9                       	smpsAlterNote       $F9
000E1B13 01                         	dc.b	$01
000E1B14 E1FD                       	smpsAlterNote       $FD
000E1B16 01                         	dc.b	$01
000E1B17 E103                       	smpsAlterNote       $03
000E1B19 01                         	dc.b	$01
000E1B1A E104                       	smpsAlterNote       $04
000E1B1C 01                         	dc.b	$01
000E1B1D E1FD                       	smpsAlterNote       $FD
000E1B1F ECF5                       	smpsPSGAlterVol     $F5
000E1B21 9106                       	dc.b	nE1, $06
000E1B23 EC04                       	smpsPSGAlterVol     $04
000E1B25 E701                       	dc.b	smpsNoAttack, $01
000E1B27 EC07                       	smpsPSGAlterVol     $07
000E1B29 8003                       	dc.b	nRst, $03
000E1B2B ECF5                       	smpsPSGAlterVol     $F5
000E1B2D 9106                       	dc.b	nE1, $06
000E1B2F EC04                       	smpsPSGAlterVol     $04
000E1B31 E701                       	dc.b	smpsNoAttack, $01
000E1B33 EC07                       	smpsPSGAlterVol     $07
000E1B35 8006                       	dc.b	nRst, $06
000E1B37 E100                       	smpsAlterNote       $00
000E1B39 01                         	dc.b	$01
000E1B3A E104                       	smpsAlterNote       $04
000E1B3C 01                         	dc.b	$01
000E1B3D E100                       	smpsAlterNote       $00
000E1B3F 01                         	dc.b	$01
000E1B40 E1FA                       	smpsAlterNote       $FA
000E1B42 01                         	dc.b	$01
000E1B43 E1FD                       	smpsAlterNote       $FD
000E1B45 ECF5                       	smpsPSGAlterVol     $F5
000E1B47 9206                       	dc.b	nF1, $06
000E1B49 EC04                       	smpsPSGAlterVol     $04
000E1B4B E701                       	dc.b	smpsNoAttack, $01
000E1B4D EC07                       	smpsPSGAlterVol     $07
000E1B4F 8003                       	dc.b	nRst, $03
000E1B51 ECF5                       	smpsPSGAlterVol     $F5
000E1B53 9207                       	dc.b	nF1, $07
000E1B55 EC0B                       	smpsPSGAlterVol     $0B
000E1B57 8006                       	dc.b	nRst, $06
000E1B59 E100                       	smpsAlterNote       $00
000E1B5B 01                         	dc.b	$01
000E1B5C E103                       	smpsAlterNote       $03
000E1B5E 0101                       	dc.b	$01, $01
000E1B60 E1FD                       	smpsAlterNote       $FD
000E1B62 01                         	dc.b	$01
000E1B63 ECF5                       	smpsPSGAlterVol     $F5
000E1B65 9107                       	dc.b	nE1, $07
000E1B67 EC0B                       	smpsPSGAlterVol     $0B
000E1B69 8004                       	dc.b	nRst, $04
000E1B6B ECF5                       	smpsPSGAlterVol     $F5
000E1B6D 9106                       	dc.b	nE1, $06
000E1B6F EC04                       	smpsPSGAlterVol     $04
000E1B71 E701                       	dc.b	smpsNoAttack, $01
000E1B73 EC07                       	smpsPSGAlterVol     $07
000E1B75 8006                       	dc.b	nRst, $06
000E1B77 E103                       	smpsAlterNote       $03
000E1B79 01                         	dc.b	$01
000E1B7A E104                       	smpsAlterNote       $04
000E1B7C 01                         	dc.b	$01
000E1B7D E100                       	smpsAlterNote       $00
000E1B7F 01                         	dc.b	$01
000E1B80 E1FA                       	smpsAlterNote       $FA
000E1B82 01                         	dc.b	$01
000E1B83 E1FD                       	smpsAlterNote       $FD
000E1B85 ECF5                       	smpsPSGAlterVol     $F5
000E1B87 9106                       	dc.b	nE1, $06
000E1B89 EC04                       	smpsPSGAlterVol     $04
000E1B8B E701                       	dc.b	smpsNoAttack, $01
000E1B8D EC07                       	smpsPSGAlterVol     $07
000E1B8F 8003                       	dc.b	nRst, $03
000E1B91 ECF5                       	smpsPSGAlterVol     $F5
000E1B93 9106                       	dc.b	nE1, $06
000E1B95 EC04                       	smpsPSGAlterVol     $04
000E1B97 E701                       	dc.b	smpsNoAttack, $01
000E1B99 EC07                       	smpsPSGAlterVol     $07
000E1B9B 8003                       	dc.b	nRst, $03
000E1B9D ECF5                       	smpsPSGAlterVol     $F5
000E1B9F 9207                       	dc.b	nF1, $07
000E1BA1 EC0B                       	smpsPSGAlterVol     $0B
000E1BA3 8006                       	dc.b	nRst, $06
000E1BA5 E100                       	smpsAlterNote       $00
000E1BA7 01                         	dc.b	$01
000E1BA8 E103                       	smpsAlterNote       $03
000E1BAA 0101                       	dc.b	$01, $01
000E1BAC E1FD                       	smpsAlterNote       $FD
000E1BAE 01                         	dc.b	$01
000E1BAF E1F9                       	smpsAlterNote       $F9
000E1BB1 01                         	dc.b	$01
000E1BB2 E1FA                       	smpsAlterNote       $FA
000E1BB4 01                         	dc.b	$01
000E1BB5 E100                       	smpsAlterNote       $00
000E1BB7 01                         	dc.b	$01
000E1BB8 E104                       	smpsAlterNote       $04
000E1BBA 01                         	dc.b	$01
000E1BBB E1FD                       	smpsAlterNote       $FD
000E1BBD ECF5                       	smpsPSGAlterVol     $F5
000E1BBF 9203 9203                  	dc.b	nF1, $03, nF1, $03
000E1BC3 EC04                       	smpsPSGAlterVol     $04
000E1BC5 E701                       	dc.b	smpsNoAttack, $01
000E1BC7 EC07                       	smpsPSGAlterVol     $07
000E1BC9 8009                       	dc.b	nRst, $09
000E1BCB E100                       	smpsAlterNote       $00
000E1BCD 01                         	dc.b	$01
000E1BCE E103                       	smpsAlterNote       $03
000E1BD0 0101                       	dc.b	$01, $01
000E1BD2 E1FD                       	smpsAlterNote       $FD
000E1BD4 01                         	dc.b	$01
000E1BD5 E1F9                       	smpsAlterNote       $F9
000E1BD7 01                         	dc.b	$01
000E1BD8 E1FA                       	smpsAlterNote       $FA
000E1BDA 01                         	dc.b	$01
000E1BDB E100                       	smpsAlterNote       $00
000E1BDD 01                         	dc.b	$01
000E1BDE E104                       	smpsAlterNote       $04
000E1BE0 01                         	dc.b	$01
000E1BE1 E100                       	smpsAlterNote       $00
000E1BE3 01                         	dc.b	$01
000E1BE4 E1FD                       	smpsAlterNote       $FD
000E1BE6 01                         	dc.b	$01
000E1BE7 E1F9                       	smpsAlterNote       $F9
000E1BE9 01                         	dc.b	$01
000E1BEA E1FD                       	smpsAlterNote       $FD
000E1BEC 01                         	dc.b	$01
000E1BED E103                       	smpsAlterNote       $03
000E1BEF 01                         	dc.b	$01
000E1BF0 E104                       	smpsAlterNote       $04
000E1BF2 01                         	dc.b	$01
000E1BF3 E100                       	smpsAlterNote       $00
000E1BF5 01                         	dc.b	$01
000E1BF6 E1FD                       	smpsAlterNote       $FD
000E1BF8 ECF5                       	smpsPSGAlterVol     $F5
000E1BFA 9203 9106                  	dc.b	nF1, $03, nE1, $06
000E1BFE EC04                       	smpsPSGAlterVol     $04
000E1C00 E701                       	dc.b	smpsNoAttack, $01
000E1C02 EC07                       	smpsPSGAlterVol     $07
000E1C04 8006                       	dc.b	nRst, $06
000E1C06 E100                       	smpsAlterNote       $00
000E1C08 01                         	dc.b	$01
000E1C09 E104                       	smpsAlterNote       $04
000E1C0B 01                         	dc.b	$01
000E1C0C E103                       	smpsAlterNote       $03
000E1C0E 01                         	dc.b	$01
000E1C0F E1FD                       	smpsAlterNote       $FD
000E1C11 01                         	dc.b	$01
000E1C12 E1F9                       	smpsAlterNote       $F9
000E1C14 01                         	dc.b	$01
000E1C15 E1FD                       	smpsAlterNote       $FD
000E1C17 01                         	dc.b	$01
000E1C18 E100                       	smpsAlterNote       $00
000E1C1A 01                         	dc.b	$01
000E1C1B E104                       	smpsAlterNote       $04
000E1C1D 01                         	dc.b	$01
000E1C1E E1FD                       	smpsAlterNote       $FD
000E1C20 ECF5                       	smpsPSGAlterVol     $F5
000E1C22 9103 920D                  	dc.b	nE1, $03, nF1, $0D
000E1C26 E100                       	smpsAlterNote       $00
000E1C28 E701                       	dc.b	smpsNoAttack, $01
000E1C2A E104                       	smpsAlterNote       $04
000E1C2C E701                       	dc.b	smpsNoAttack, $01
000E1C2E E100                       	smpsAlterNote       $00
000E1C30 E701                       	dc.b	smpsNoAttack, $01
000E1C32 E1FD                       	smpsAlterNote       $FD
000E1C34 E701                       	dc.b	smpsNoAttack, $01
000E1C36 E1F9                       	smpsAlterNote       $F9
000E1C38 E701                       	dc.b	smpsNoAttack, $01
000E1C3A E1FD                       	smpsAlterNote       $FD
000E1C3C E701                       	dc.b	smpsNoAttack, $01
000E1C3E E103                       	smpsAlterNote       $03
000E1C40 E701                       	dc.b	smpsNoAttack, $01
000E1C42 E104                       	smpsAlterNote       $04
000E1C44 E701                       	dc.b	smpsNoAttack, $01
000E1C46 E100                       	smpsAlterNote       $00
000E1C48 E701                       	dc.b	smpsNoAttack, $01
000E1C4A E1FA                       	smpsAlterNote       $FA
000E1C4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1C50 E1FD                       	smpsAlterNote       $FD
000E1C52 E701                       	dc.b	smpsNoAttack, $01
000E1C54 E103                       	smpsAlterNote       $03
000E1C56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1C5A E100                       	smpsAlterNote       $00
000E1C5C E701                       	dc.b	smpsNoAttack, $01
000E1C5E E1FA                       	smpsAlterNote       $FA
000E1C60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1C64 E100                       	smpsAlterNote       $00
000E1C66 EC04                       	smpsPSGAlterVol     $04
000E1C68 E701                       	dc.b	smpsNoAttack, $01
000E1C6A EC07                       	smpsPSGAlterVol     $07
000E1C6C E104                       	smpsAlterNote       $04
000E1C6E 8001                       	dc.b	nRst, $01
000E1C70 E103                       	smpsAlterNote       $03
000E1C72 01                         	dc.b	$01
000E1C73 E1FD                       	smpsAlterNote       $FD
000E1C75 01                         	dc.b	$01
000E1C76 E1F9                       	smpsAlterNote       $F9
000E1C78 01                         	dc.b	$01
000E1C79 E1FD                       	smpsAlterNote       $FD
000E1C7B 01                         	dc.b	$01
000E1C7C E100                       	smpsAlterNote       $00
000E1C7E 01                         	dc.b	$01
000E1C7F E104                       	smpsAlterNote       $04
000E1C81 01                         	dc.b	$01
000E1C82 E1FD                       	smpsAlterNote       $FD
000E1C84 ECF5                       	smpsPSGAlterVol     $F5
000E1C86 9106                       	dc.b	nE1, $06
000E1C88 EC04                       	smpsPSGAlterVol     $04
000E1C8A E701                       	dc.b	smpsNoAttack, $01
000E1C8C EC07                       	smpsPSGAlterVol     $07
000E1C8E 8003                       	dc.b	nRst, $03
000E1C90 ECF5                       	smpsPSGAlterVol     $F5
000E1C92 9106                       	dc.b	nE1, $06
000E1C94 EC04                       	smpsPSGAlterVol     $04
000E1C96 E701                       	dc.b	smpsNoAttack, $01
000E1C98 EC07                       	smpsPSGAlterVol     $07
000E1C9A 8006                       	dc.b	nRst, $06
000E1C9C E100                       	smpsAlterNote       $00
000E1C9E 01                         	dc.b	$01
000E1C9F E104                       	smpsAlterNote       $04
000E1CA1 01                         	dc.b	$01
000E1CA2 E100                       	smpsAlterNote       $00
000E1CA4 01                         	dc.b	$01
000E1CA5 E1FD                       	smpsAlterNote       $FD
000E1CA7 01                         	dc.b	$01
000E1CA8 ECF5                       	smpsPSGAlterVol     $F5
000E1CAA 9206                       	dc.b	nF1, $06
000E1CAC EC04                       	smpsPSGAlterVol     $04
000E1CAE E701                       	dc.b	smpsNoAttack, $01
000E1CB0 EC07                       	smpsPSGAlterVol     $07
000E1CB2 8003                       	dc.b	nRst, $03
000E1CB4 ECF5                       	smpsPSGAlterVol     $F5
000E1CB6 9207                       	dc.b	nF1, $07
000E1CB8 EC0B                       	smpsPSGAlterVol     $0B
000E1CBA 8007                       	dc.b	nRst, $07
000E1CBC E103                       	smpsAlterNote       $03
000E1CBE 0101                       	dc.b	$01, $01
000E1CC0 E1FD                       	smpsAlterNote       $FD
000E1CC2 01                         	dc.b	$01
000E1CC3 E1FA                       	smpsAlterNote       $FA
000E1CC5 01                         	dc.b	$01
000E1CC6 E1FD                       	smpsAlterNote       $FD
000E1CC8 ECF5                       	smpsPSGAlterVol     $F5
000E1CCA 9106                       	dc.b	nE1, $06
000E1CCC EC0B                       	smpsPSGAlterVol     $0B
000E1CCE 8004                       	dc.b	nRst, $04
000E1CD0 ECF5                       	smpsPSGAlterVol     $F5
000E1CD2 9106                       	dc.b	nE1, $06
000E1CD4 EC04                       	smpsPSGAlterVol     $04
000E1CD6 E701                       	dc.b	smpsNoAttack, $01
000E1CD8 EC07                       	smpsPSGAlterVol     $07
000E1CDA 8006                       	dc.b	nRst, $06
000E1CDC E100                       	smpsAlterNote       $00
000E1CDE 01                         	dc.b	$01
000E1CDF E104                       	smpsAlterNote       $04
000E1CE1 01                         	dc.b	$01
000E1CE2 E100                       	smpsAlterNote       $00
000E1CE4 01                         	dc.b	$01
000E1CE5 E1FA                       	smpsAlterNote       $FA
000E1CE7 01                         	dc.b	$01
000E1CE8 E1FD                       	smpsAlterNote       $FD
000E1CEA ECF5                       	smpsPSGAlterVol     $F5
000E1CEC 9206                       	dc.b	nF1, $06
000E1CEE EC04                       	smpsPSGAlterVol     $04
000E1CF0 E701                       	dc.b	smpsNoAttack, $01
000E1CF2 EC07                       	smpsPSGAlterVol     $07
000E1CF4 8003                       	dc.b	nRst, $03
000E1CF6 ECF5                       	smpsPSGAlterVol     $F5
000E1CF8 9206                       	dc.b	nF1, $06
000E1CFA EC04                       	smpsPSGAlterVol     $04
000E1CFC E701                       	dc.b	smpsNoAttack, $01
000E1CFE EC07                       	smpsPSGAlterVol     $07
000E1D00 8006                       	dc.b	nRst, $06
000E1D02 E100                       	smpsAlterNote       $00
000E1D04 01                         	dc.b	$01
000E1D05 E104                       	smpsAlterNote       $04
000E1D07 01                         	dc.b	$01
000E1D08 E103                       	smpsAlterNote       $03
000E1D0A 01                         	dc.b	$01
000E1D0B E1FD                       	smpsAlterNote       $FD
000E1D0D 01                         	dc.b	$01
000E1D0E ECF5                       	smpsPSGAlterVol     $F5
000E1D10 9107                       	dc.b	nE1, $07
000E1D12 EC0B                       	smpsPSGAlterVol     $0B
000E1D14 8004                       	dc.b	nRst, $04
000E1D16 ECF5                       	smpsPSGAlterVol     $F5
000E1D18 9106                       	dc.b	nE1, $06
000E1D1A EC0B                       	smpsPSGAlterVol     $0B
000E1D1C 8007                       	dc.b	nRst, $07
000E1D1E E103                       	smpsAlterNote       $03
000E1D20 0101                       	dc.b	$01, $01
000E1D22 E100                       	smpsAlterNote       $00
000E1D24 01                         	dc.b	$01
000E1D25 E1FA                       	smpsAlterNote       $FA
000E1D27 01                         	dc.b	$01
000E1D28 E1FD                       	smpsAlterNote       $FD
000E1D2A ECF5                       	smpsPSGAlterVol     $F5
000E1D2C 9206                       	dc.b	nF1, $06
000E1D2E EC04                       	smpsPSGAlterVol     $04
000E1D30 E701                       	dc.b	smpsNoAttack, $01
000E1D32 EC07                       	smpsPSGAlterVol     $07
000E1D34 8003                       	dc.b	nRst, $03
000E1D36 ECF5                       	smpsPSGAlterVol     $F5
000E1D38 9206                       	dc.b	nF1, $06
000E1D3A EC04                       	smpsPSGAlterVol     $04
000E1D3C E701                       	dc.b	smpsNoAttack, $01
000E1D3E EC07                       	smpsPSGAlterVol     $07
000E1D40 8006                       	dc.b	nRst, $06
000E1D42 E100                       	smpsAlterNote       $00
000E1D44 01                         	dc.b	$01
000E1D45 E104                       	smpsAlterNote       $04
000E1D47 01                         	dc.b	$01
000E1D48 E100                       	smpsAlterNote       $00
000E1D4A 01                         	dc.b	$01
000E1D4B E1FD                       	smpsAlterNote       $FD
000E1D4D 01                         	dc.b	$01
000E1D4E ECF5                       	smpsPSGAlterVol     $F5
000E1D50 9106                       	dc.b	nE1, $06
000E1D52 EC04                       	smpsPSGAlterVol     $04
000E1D54 E701                       	dc.b	smpsNoAttack, $01
000E1D56 EC07                       	smpsPSGAlterVol     $07
000E1D58 8003                       	dc.b	nRst, $03
000E1D5A ECF5                       	smpsPSGAlterVol     $F5
000E1D5C 9107 9106                  	dc.b	nE1, $07, nE1, $06
000E1D60 EC04                       	smpsPSGAlterVol     $04
000E1D62 E701                       	dc.b	smpsNoAttack, $01
000E1D64 ECFC                       	smpsPSGAlterVol     $FC
000E1D66 9103                       	dc.b	nE1, $03
000E1D68 EC04                       	smpsPSGAlterVol     $04
000E1D6A E701                       	dc.b	smpsNoAttack, $01
000E1D6C ECFC                       	smpsPSGAlterVol     $FC
000E1D6E 9102                       	dc.b	nE1, $02
000E1D70 EC04                       	smpsPSGAlterVol     $04
000E1D72 E701                       	dc.b	smpsNoAttack, $01
000E1D74 ECFC                       	smpsPSGAlterVol     $FC
000E1D76 9103                       	dc.b	nE1, $03
000E1D78 EC0B                       	smpsPSGAlterVol     $0B
000E1D7A 800A                       	dc.b	nRst, $0A
000E1D7C E100                       	smpsAlterNote       $00
000E1D7E 01                         	dc.b	$01
000E1D7F E104                       	smpsAlterNote       $04
000E1D81 01                         	dc.b	$01
000E1D82 E100                       	smpsAlterNote       $00
000E1D84 01                         	dc.b	$01
000E1D85 E1FA                       	smpsAlterNote       $FA
000E1D87 01                         	dc.b	$01
000E1D88 E1F9                       	smpsAlterNote       $F9
000E1D8A 01                         	dc.b	$01
000E1D8B E1FD                       	smpsAlterNote       $FD
000E1D8D 01                         	dc.b	$01
000E1D8E E103                       	smpsAlterNote       $03
000E1D90 0101                       	dc.b	$01, $01
000E1D92 E100                       	smpsAlterNote       $00
000E1D94 01                         	dc.b	$01
000E1D95 E1FA                       	smpsAlterNote       $FA
000E1D97 0101                       	dc.b	$01, $01
000E1D99 E1FD                       	smpsAlterNote       $FD
000E1D9B ECF5                       	smpsPSGAlterVol     $F5
000E1D9D 9206                       	dc.b	nF1, $06
000E1D9F EC04                       	smpsPSGAlterVol     $04
000E1DA1 E704                       	dc.b	smpsNoAttack, $04
000E1DA3 ECFC                       	smpsPSGAlterVol     $FC
000E1DA5 9206                       	dc.b	nF1, $06
000E1DA7 EC04                       	smpsPSGAlterVol     $04
000E1DA9 E701                       	dc.b	smpsNoAttack, $01
000E1DAB EC07                       	smpsPSGAlterVol     $07
000E1DAD 8006                       	dc.b	nRst, $06
000E1DAF E100                       	smpsAlterNote       $00
000E1DB1 01                         	dc.b	$01
000E1DB2 E104                       	smpsAlterNote       $04
000E1DB4 01                         	dc.b	$01
000E1DB5 E103                       	smpsAlterNote       $03
000E1DB7 01                         	dc.b	$01
000E1DB8 E1FD                       	smpsAlterNote       $FD
000E1DBA 01                         	dc.b	$01
000E1DBB ECF5                       	smpsPSGAlterVol     $F5
000E1DBD 9407                       	dc.b	nG1, $07
000E1DBF EC0B                       	smpsPSGAlterVol     $0B
000E1DC1 8004                       	dc.b	nRst, $04
000E1DC3 ECF5                       	smpsPSGAlterVol     $F5
000E1DC5 9406                       	dc.b	nG1, $06
000E1DC7 EC0B                       	smpsPSGAlterVol     $0B
000E1DC9 8007                       	dc.b	nRst, $07
000E1DCB E103                       	smpsAlterNote       $03
000E1DCD 0101                       	dc.b	$01, $01
000E1DCF E1FD                       	smpsAlterNote       $FD
000E1DD1 01                         	dc.b	$01
000E1DD2 E1F9                       	smpsAlterNote       $F9
000E1DD4 01                         	dc.b	$01
000E1DD5 E1FD                       	smpsAlterNote       $FD
000E1DD7 ECF5                       	smpsPSGAlterVol     $F5
000E1DD9 9206                       	dc.b	nF1, $06
000E1DDB EC04                       	smpsPSGAlterVol     $04
000E1DDD E701                       	dc.b	smpsNoAttack, $01
000E1DDF EC07                       	smpsPSGAlterVol     $07
000E1DE1 8003                       	dc.b	nRst, $03
000E1DE3 ECF5                       	smpsPSGAlterVol     $F5
000E1DE5 9206                       	dc.b	nF1, $06
000E1DE7 EC04                       	smpsPSGAlterVol     $04
000E1DE9 E701                       	dc.b	smpsNoAttack, $01
000E1DEB EC07                       	smpsPSGAlterVol     $07
000E1DED 8006                       	dc.b	nRst, $06
000E1DEF E100                       	smpsAlterNote       $00
000E1DF1 01                         	dc.b	$01
000E1DF2 E104                       	smpsAlterNote       $04
000E1DF4 01                         	dc.b	$01
000E1DF5 E100                       	smpsAlterNote       $00
000E1DF7 01                         	dc.b	$01
000E1DF8 E1FA                       	smpsAlterNote       $FA
000E1DFA 01                         	dc.b	$01
000E1DFB E1FD                       	smpsAlterNote       $FD
000E1DFD ECF5                       	smpsPSGAlterVol     $F5
000E1DFF 9206                       	dc.b	nF1, $06
000E1E01 EC04                       	smpsPSGAlterVol     $04
000E1E03 E701                       	dc.b	smpsNoAttack, $01
000E1E05 EC07                       	smpsPSGAlterVol     $07
000E1E07 8003                       	dc.b	nRst, $03
000E1E09 ECF5                       	smpsPSGAlterVol     $F5
000E1E0B 9107                       	dc.b	nE1, $07
000E1E0D EC0B                       	smpsPSGAlterVol     $0B
000E1E0F 8006                       	dc.b	nRst, $06
000E1E11 E100                       	smpsAlterNote       $00
000E1E13 01                         	dc.b	$01
000E1E14 E103                       	smpsAlterNote       $03
000E1E16 0101                       	dc.b	$01, $01
000E1E18 E1FD                       	smpsAlterNote       $FD
000E1E1A 01                         	dc.b	$01
000E1E1B ECF5                       	smpsPSGAlterVol     $F5
000E1E1D 9207                       	dc.b	nF1, $07
000E1E1F EC0B                       	smpsPSGAlterVol     $0B
000E1E21 8004                       	dc.b	nRst, $04
000E1E23 ECF5                       	smpsPSGAlterVol     $F5
000E1E25 9206                       	dc.b	nF1, $06
000E1E27 EC04                       	smpsPSGAlterVol     $04
000E1E29 E701                       	dc.b	smpsNoAttack, $01
000E1E2B EC07                       	smpsPSGAlterVol     $07
000E1E2D 8006                       	dc.b	nRst, $06
000E1E2F E103                       	smpsAlterNote       $03
000E1E31 01                         	dc.b	$01
000E1E32 E104                       	smpsAlterNote       $04
000E1E34 01                         	dc.b	$01
000E1E35 E100                       	smpsAlterNote       $00
000E1E37 01                         	dc.b	$01
000E1E38 E1FB                       	smpsAlterNote       $FB
000E1E3A 01                         	dc.b	$01
000E1E3B E1FD                       	smpsAlterNote       $FD
000E1E3D ECF5                       	smpsPSGAlterVol     $F5
000E1E3F 9406                       	dc.b	nG1, $06
000E1E41 EC04                       	smpsPSGAlterVol     $04
000E1E43 E701                       	dc.b	smpsNoAttack, $01
000E1E45 EC07                       	smpsPSGAlterVol     $07
000E1E47 8003                       	dc.b	nRst, $03
000E1E49 ECF5                       	smpsPSGAlterVol     $F5
000E1E4B 9406                       	dc.b	nG1, $06
000E1E4D EC04                       	smpsPSGAlterVol     $04
000E1E4F E701                       	dc.b	smpsNoAttack, $01
000E1E51 EC07                       	smpsPSGAlterVol     $07
000E1E53 8006                       	dc.b	nRst, $06
000E1E55 E100                       	smpsAlterNote       $00
000E1E57 01                         	dc.b	$01
000E1E58 E104                       	smpsAlterNote       $04
000E1E5A 01                         	dc.b	$01
000E1E5B E100                       	smpsAlterNote       $00
000E1E5D 01                         	dc.b	$01
000E1E5E E1FD                       	smpsAlterNote       $FD
000E1E60 01                         	dc.b	$01
000E1E61 ECF5                       	smpsPSGAlterVol     $F5
000E1E63 9206                       	dc.b	nF1, $06
000E1E65 EC04                       	smpsPSGAlterVol     $04
000E1E67 E701                       	dc.b	smpsNoAttack, $01
000E1E69 EC07                       	smpsPSGAlterVol     $07
000E1E6B 8003                       	dc.b	nRst, $03
000E1E6D ECF5                       	smpsPSGAlterVol     $F5
000E1E6F 9207                       	dc.b	nF1, $07
000E1E71 EC0B                       	smpsPSGAlterVol     $0B
000E1E73 8007                       	dc.b	nRst, $07
000E1E75 E103                       	smpsAlterNote       $03
000E1E77 0101                       	dc.b	$01, $01
000E1E79 E1FD                       	smpsAlterNote       $FD
000E1E7B 01                         	dc.b	$01
000E1E7C E1FA                       	smpsAlterNote       $FA
000E1E7E 01                         	dc.b	$01
000E1E7F E1FD                       	smpsAlterNote       $FD
000E1E81 ECF5                       	smpsPSGAlterVol     $F5
000E1E83 9206                       	dc.b	nF1, $06
000E1E85 EC0B                       	smpsPSGAlterVol     $0B
000E1E87 8004                       	dc.b	nRst, $04
000E1E89 ECF5                       	smpsPSGAlterVol     $F5
000E1E8B 9206                       	dc.b	nF1, $06
000E1E8D EC04                       	smpsPSGAlterVol     $04
000E1E8F E701                       	dc.b	smpsNoAttack, $01
000E1E91 EC07                       	smpsPSGAlterVol     $07
000E1E93 8006                       	dc.b	nRst, $06
000E1E95 E100                       	smpsAlterNote       $00
000E1E97 01                         	dc.b	$01
000E1E98 E104                       	smpsAlterNote       $04
000E1E9A 01                         	dc.b	$01
000E1E9B E100                       	smpsAlterNote       $00
000E1E9D 01                         	dc.b	$01
000E1E9E E1FA                       	smpsAlterNote       $FA
000E1EA0 01                         	dc.b	$01
000E1EA1 E1FD                       	smpsAlterNote       $FD
000E1EA3 ECF5                       	smpsPSGAlterVol     $F5
000E1EA5 9206                       	dc.b	nF1, $06
000E1EA7 EC04                       	smpsPSGAlterVol     $04
000E1EA9 E701                       	dc.b	smpsNoAttack, $01
000E1EAB EC07                       	smpsPSGAlterVol     $07
000E1EAD 8003                       	dc.b	nRst, $03
000E1EAF ECF5                       	smpsPSGAlterVol     $F5
000E1EB1 9207                       	dc.b	nF1, $07
000E1EB3 EC0B                       	smpsPSGAlterVol     $0B
000E1EB5 8006                       	dc.b	nRst, $06
000E1EB7 E100                       	smpsAlterNote       $00
000E1EB9 01                         	dc.b	$01
000E1EBA E103                       	smpsAlterNote       $03
000E1EBC 0101                       	dc.b	$01, $01
000E1EBE E1FD                       	smpsAlterNote       $FD
000E1EC0 01                         	dc.b	$01
000E1EC1 ECF5                       	smpsPSGAlterVol     $F5
000E1EC3 9207                       	dc.b	nF1, $07
000E1EC5 EC0B                       	smpsPSGAlterVol     $0B
000E1EC7 8004                       	dc.b	nRst, $04
000E1EC9 ECF5                       	smpsPSGAlterVol     $F5
000E1ECB 9206                       	dc.b	nF1, $06
000E1ECD EC0B                       	smpsPSGAlterVol     $0B
000E1ECF 8007                       	dc.b	nRst, $07
000E1ED1 E103                       	smpsAlterNote       $03
000E1ED3 0101                       	dc.b	$01, $01
000E1ED5 E100                       	smpsAlterNote       $00
000E1ED7 01                         	dc.b	$01
000E1ED8 E1FA                       	smpsAlterNote       $FA
000E1EDA 01                         	dc.b	$01
000E1EDB E1FD                       	smpsAlterNote       $FD
000E1EDD ECF5                       	smpsPSGAlterVol     $F5
000E1EDF 9206                       	dc.b	nF1, $06
000E1EE1 EC04                       	smpsPSGAlterVol     $04
000E1EE3 E701                       	dc.b	smpsNoAttack, $01
000E1EE5 EC07                       	smpsPSGAlterVol     $07
000E1EE7 8003                       	dc.b	nRst, $03
000E1EE9 ECF5                       	smpsPSGAlterVol     $F5
000E1EEB 9206                       	dc.b	nF1, $06
000E1EED EC04                       	smpsPSGAlterVol     $04
000E1EEF E701                       	dc.b	smpsNoAttack, $01
000E1EF1 EC07                       	smpsPSGAlterVol     $07
000E1EF3 8006                       	dc.b	nRst, $06
000E1EF5 E100                       	smpsAlterNote       $00
000E1EF7 01                         	dc.b	$01
000E1EF8 E104                       	smpsAlterNote       $04
000E1EFA 01                         	dc.b	$01
000E1EFB E100                       	smpsAlterNote       $00
000E1EFD 01                         	dc.b	$01
000E1EFE E1FD                       	smpsAlterNote       $FD
000E1F00 01                         	dc.b	$01
000E1F01 ECF5                       	smpsPSGAlterVol     $F5
000E1F03 9206                       	dc.b	nF1, $06
000E1F05 EC04                       	smpsPSGAlterVol     $04
000E1F07 E701                       	dc.b	smpsNoAttack, $01
000E1F09 EC07                       	smpsPSGAlterVol     $07
000E1F0B 8003                       	dc.b	nRst, $03
000E1F0D ECF5                       	smpsPSGAlterVol     $F5
000E1F0F 9207                       	dc.b	nF1, $07
000E1F11 EC0B                       	smpsPSGAlterVol     $0B
000E1F13 8007                       	dc.b	nRst, $07
000E1F15 E104                       	smpsAlterNote       $04
000E1F17 0101                       	dc.b	$01, $01
000E1F19 E1FB                       	smpsAlterNote       $FB
000E1F1B 01                         	dc.b	$01
000E1F1C E1F6                       	smpsAlterNote       $F6
000E1F1E 0101                       	dc.b	$01, $01
000E1F20 E1FF                       	smpsAlterNote       $FF
000E1F22 01                         	dc.b	$01
000E1F23 E105                       	smpsAlterNote       $05
000E1F25 01                         	dc.b	$01
000E1F26 E104                       	smpsAlterNote       $04
000E1F28 01                         	dc.b	$01
000E1F29 E1FB                       	smpsAlterNote       $FB
000E1F2B 01                         	dc.b	$01
000E1F2C E1F5                       	smpsAlterNote       $F5
000E1F2E 01                         	dc.b	$01
000E1F2F E1FC                       	smpsAlterNote       $FC
000E1F31 ECF5                       	smpsPSGAlterVol     $F5
000E1F33 8B0E                       	dc.b	nBb0, $0E
000E1F35 E102                       	smpsAlterNote       $02
000E1F37 EC0B                       	smpsPSGAlterVol     $0B
000E1F39 8001                       	dc.b	nRst, $01
000E1F3B E101                       	smpsAlterNote       $01
000E1F3D 01                         	dc.b	$01
000E1F3E E1FC                       	smpsAlterNote       $FC
000E1F40 01                         	dc.b	$01
000E1F41 E1F9                       	smpsAlterNote       $F9
000E1F43 0101                       	dc.b	$01, $01
000E1F45 E1FF                       	smpsAlterNote       $FF
000E1F47 01                         	dc.b	$01
000E1F48 E102                       	smpsAlterNote       $02
000E1F4A 01                         	dc.b	$01
000E1F4B E1FF                       	smpsAlterNote       $FF
000E1F4D 01                         	dc.b	$01
000E1F4E E1FC                       	smpsAlterNote       $FC
000E1F50 01                         	dc.b	$01
000E1F51 E1F8                       	smpsAlterNote       $F8
000E1F53 01                         	dc.b	$01
000E1F54 E1FC                       	smpsAlterNote       $FC
000E1F56 01                         	dc.b	$01
000E1F57 E101                       	smpsAlterNote       $01
000E1F59 01                         	dc.b	$01
000E1F5A E102                       	smpsAlterNote       $02
000E1F5C 01                         	dc.b	$01
000E1F5D E1FF                       	smpsAlterNote       $FF
000E1F5F 01                         	dc.b	$01
000E1F60 E1FB                       	smpsAlterNote       $FB
000E1F62 ECF5                       	smpsPSGAlterVol     $F5
000E1F64 8D0D                       	dc.b	nC1, $0D
000E1F66 E101                       	smpsAlterNote       $01
000E1F68 EC0B                       	smpsPSGAlterVol     $0B
000E1F6A 8001                       	dc.b	nRst, $01
000E1F6C E102                       	smpsAlterNote       $02
000E1F6E 01                         	dc.b	$01
000E1F6F E1FF                       	smpsAlterNote       $FF
000E1F71 01                         	dc.b	$01
000E1F72 E1F9                       	smpsAlterNote       $F9
000E1F74 0101                       	dc.b	$01, $01
000E1F76 E1FC                       	smpsAlterNote       $FC
000E1F78 01                         	dc.b	$01
000E1F79 E101                       	smpsAlterNote       $01
000E1F7B 0101                       	dc.b	$01, $01
000E1F7D E1FC                       	smpsAlterNote       $FC
000E1F7F 01                         	dc.b	$01
000E1F80 E1F9                       	smpsAlterNote       $F9
000E1F82 0101                       	dc.b	$01, $01
000E1F84 E1FF                       	smpsAlterNote       $FF
000E1F86 01                         	dc.b	$01
000E1F87 E102                       	smpsAlterNote       $02
000E1F89 01                         	dc.b	$01
000E1F8A E101                       	smpsAlterNote       $01
000E1F8C 01                         	dc.b	$01
000E1F8D E1FC                       	smpsAlterNote       $FC
000E1F8F ECF5                       	smpsPSGAlterVol     $F5
000E1F91 8F0D                       	dc.b	nD1, $0D
000E1F93 E1FF                       	smpsAlterNote       $FF
000E1F95 EC04                       	smpsPSGAlterVol     $04
000E1F97 E701                       	dc.b	smpsNoAttack, $01
000E1F99 EC07                       	smpsPSGAlterVol     $07
000E1F9B E103                       	smpsAlterNote       $03
000E1F9D 8001                       	dc.b	nRst, $01
000E1F9F E102                       	smpsAlterNote       $02
000E1FA1 01                         	dc.b	$01
000E1FA2 E1FD                       	smpsAlterNote       $FD
000E1FA4 01                         	dc.b	$01
000E1FA5 E1F9                       	smpsAlterNote       $F9
000E1FA7 01                         	dc.b	$01
000E1FA8 E1FD                       	smpsAlterNote       $FD
000E1FAA 01                         	dc.b	$01
000E1FAB E100                       	smpsAlterNote       $00
000E1FAD 01                         	dc.b	$01
000E1FAE E103                       	smpsAlterNote       $03
000E1FB0 01                         	dc.b	$01
000E1FB1 E100                       	smpsAlterNote       $00
000E1FB3 01                         	dc.b	$01
000E1FB4 E1FA                       	smpsAlterNote       $FA
000E1FB6 01                         	dc.b	$01
000E1FB7 E1F9                       	smpsAlterNote       $F9
000E1FB9 01                         	dc.b	$01
000E1FBA E1FD                       	smpsAlterNote       $FD
000E1FBC 01                         	dc.b	$01
000E1FBD E102                       	smpsAlterNote       $02
000E1FBF 0101                       	dc.b	$01, $01
000E1FC1 E100                       	smpsAlterNote       $00
000E1FC3 01                         	dc.b	$01
000E1FC4 E1FD                       	smpsAlterNote       $FD
000E1FC6 ECF5                       	smpsPSGAlterVol     $F5
000E1FC8 910D                       	dc.b	nE1, $0D
000E1FCA E103                       	smpsAlterNote       $03
000E1FCC EC0B                       	smpsPSGAlterVol     $0B
000E1FCE 8001 01                    	dc.b	nRst, $01, $01
000E1FD1 E100                       	smpsAlterNote       $00
000E1FD3 01                         	dc.b	$01
000E1FD4 E1FA                       	smpsAlterNote       $FA
000E1FD6 0101                       	dc.b	$01, $01
000E1FD8 E100                       	smpsAlterNote       $00
000E1FDA 01                         	dc.b	$01
000E1FDB E103                       	smpsAlterNote       $03
000E1FDD 01                         	dc.b	$01
000E1FDE E1FD                       	smpsAlterNote       $FD
000E1FE0 ECF5                       	smpsPSGAlterVol     $F5
000E1FE2 9206                       	dc.b	nF1, $06
000E1FE4 EC04                       	smpsPSGAlterVol     $04
000E1FE6 E701                       	dc.b	smpsNoAttack, $01
000E1FE8 EC07                       	smpsPSGAlterVol     $07
000E1FEA 8003                       	dc.b	nRst, $03
000E1FEC ECF5                       	smpsPSGAlterVol     $F5
000E1FEE 9207                       	dc.b	nF1, $07
000E1FF0 EC0B                       	smpsPSGAlterVol     $0B
000E1FF2 8006                       	dc.b	nRst, $06
000E1FF4 E100                       	smpsAlterNote       $00
000E1FF6 01                         	dc.b	$01
000E1FF7 E103                       	smpsAlterNote       $03
000E1FF9 0101                       	dc.b	$01, $01
000E1FFB E1FD                       	smpsAlterNote       $FD
000E1FFD 01                         	dc.b	$01
000E1FFE ECF5                       	smpsPSGAlterVol     $F5
000E2000 9407                       	dc.b	nG1, $07
000E2002 EC0B                       	smpsPSGAlterVol     $0B
000E2004 8004                       	dc.b	nRst, $04
000E2006 ECF5                       	smpsPSGAlterVol     $F5
000E2008 9406                       	dc.b	nG1, $06
000E200A EC04                       	smpsPSGAlterVol     $04
000E200C E701                       	dc.b	smpsNoAttack, $01
000E200E EC07                       	smpsPSGAlterVol     $07
000E2010 8006                       	dc.b	nRst, $06
000E2012 E103                       	smpsAlterNote       $03
000E2014 01                         	dc.b	$01
000E2015 E104                       	smpsAlterNote       $04
000E2017 01                         	dc.b	$01
000E2018 E100                       	smpsAlterNote       $00
000E201A 01                         	dc.b	$01
000E201B E1F9                       	smpsAlterNote       $F9
000E201D 01                         	dc.b	$01
000E201E E1FD                       	smpsAlterNote       $FD
000E2020 ECF5                       	smpsPSGAlterVol     $F5
000E2022 9206                       	dc.b	nF1, $06
000E2024 EC04                       	smpsPSGAlterVol     $04
000E2026 E701                       	dc.b	smpsNoAttack, $01
000E2028 EC07                       	smpsPSGAlterVol     $07
000E202A 8003                       	dc.b	nRst, $03
000E202C ECF5                       	smpsPSGAlterVol     $F5
000E202E 9206                       	dc.b	nF1, $06
000E2030 EC04                       	smpsPSGAlterVol     $04
000E2032 E701                       	dc.b	smpsNoAttack, $01
000E2034 EC07                       	smpsPSGAlterVol     $07
000E2036 8006                       	dc.b	nRst, $06
000E2038 E100                       	smpsAlterNote       $00
000E203A 01                         	dc.b	$01
000E203B E104                       	smpsAlterNote       $04
000E203D 01                         	dc.b	$01
000E203E E103                       	smpsAlterNote       $03
000E2040 01                         	dc.b	$01
000E2041 E1FD                       	smpsAlterNote       $FD
000E2043 01                         	dc.b	$01
000E2044 ECF5                       	smpsPSGAlterVol     $F5
000E2046 9407                       	dc.b	nG1, $07
000E2048 EC0B                       	smpsPSGAlterVol     $0B
000E204A 8004                       	dc.b	nRst, $04
000E204C ECF5                       	smpsPSGAlterVol     $F5
000E204E 9406                       	dc.b	nG1, $06
000E2050 EC0B                       	smpsPSGAlterVol     $0B
000E2052 8007                       	dc.b	nRst, $07
000E2054 E103                       	smpsAlterNote       $03
000E2056 0101                       	dc.b	$01, $01
000E2058 E100                       	smpsAlterNote       $00
000E205A 01                         	dc.b	$01
000E205B E1F9                       	smpsAlterNote       $F9
000E205D 01                         	dc.b	$01
000E205E E1FD                       	smpsAlterNote       $FD
000E2060 ECF5                       	smpsPSGAlterVol     $F5
000E2062 9206                       	dc.b	nF1, $06
000E2064 EC04                       	smpsPSGAlterVol     $04
000E2066 E701                       	dc.b	smpsNoAttack, $01
000E2068 EC07                       	smpsPSGAlterVol     $07
000E206A 8003                       	dc.b	nRst, $03
000E206C ECF5                       	smpsPSGAlterVol     $F5
000E206E 9206                       	dc.b	nF1, $06
000E2070 EC04                       	smpsPSGAlterVol     $04
000E2072 E701                       	dc.b	smpsNoAttack, $01
000E2074 EC07                       	smpsPSGAlterVol     $07
000E2076 8006                       	dc.b	nRst, $06
000E2078 E100                       	smpsAlterNote       $00
000E207A 01                         	dc.b	$01
000E207B E104                       	smpsAlterNote       $04
000E207D 01                         	dc.b	$01
000E207E E100                       	smpsAlterNote       $00
000E2080 01                         	dc.b	$01
000E2081 E1FB                       	smpsAlterNote       $FB
000E2083 01                         	dc.b	$01
000E2084 E1FD                       	smpsAlterNote       $FD
000E2086 ECF5                       	smpsPSGAlterVol     $F5
000E2088 9406                       	dc.b	nG1, $06
000E208A EC04                       	smpsPSGAlterVol     $04
000E208C E701                       	dc.b	smpsNoAttack, $01
000E208E EC07                       	smpsPSGAlterVol     $07
000E2090 8003                       	dc.b	nRst, $03
000E2092 ECF5                       	smpsPSGAlterVol     $F5
000E2094 9407                       	dc.b	nG1, $07
000E2096 EC0B                       	smpsPSGAlterVol     $0B
000E2098 8006                       	dc.b	nRst, $06
000E209A E100                       	smpsAlterNote       $00
000E209C 01                         	dc.b	$01
000E209D E103                       	smpsAlterNote       $03
000E209F 0101                       	dc.b	$01, $01
000E20A1 E1FD                       	smpsAlterNote       $FD
000E20A3 01                         	dc.b	$01
000E20A4 ECF5                       	smpsPSGAlterVol     $F5
000E20A6 9207                       	dc.b	nF1, $07
000E20A8 EC0B                       	smpsPSGAlterVol     $0B
000E20AA 8004                       	dc.b	nRst, $04
000E20AC ECF5                       	smpsPSGAlterVol     $F5
000E20AE 9206                       	dc.b	nF1, $06
000E20B0 EC04                       	smpsPSGAlterVol     $04
000E20B2 E701                       	dc.b	smpsNoAttack, $01
000E20B4 ECFC                       	smpsPSGAlterVol     $FC
000E20B6 E1FC                       	smpsAlterNote       $FC
000E20B8 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
000E20BC EC04                       	smpsPSGAlterVol     $04
000E20BE E701                       	dc.b	smpsNoAttack, $01
000E20C0 ECFC                       	smpsPSGAlterVol     $FC
000E20C2 9003                       	dc.b	nEb1, $03
000E20C4 E1FD                       	smpsAlterNote       $FD
000E20C6 9403                       	dc.b	nG1, $03
000E20C8 EC04                       	smpsPSGAlterVol     $04
000E20CA E701                       	dc.b	smpsNoAttack, $01
000E20CC E1FE                       	smpsAlterNote       $FE
000E20CE ECFC                       	smpsPSGAlterVol     $FC
000E20D0 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
000E20D4 EC04                       	smpsPSGAlterVol     $04
000E20D6 E701                       	dc.b	smpsNoAttack, $01
000E20D8 EC07                       	smpsPSGAlterVol     $07
000E20DA 8009                       	dc.b	nRst, $09
000E20DC E100                       	smpsAlterNote       $00
000E20DE 01                         	dc.b	$01
000E20DF F6F5 19                    	smpsJump            music84_Jump07
000E20E2                            
000E20E2                            ; PSG2 Data
000E20E2                            music84_PSG2:
000E20E2 E1FC                       	smpsAlterNote       $FC
000E20E4 EC04                       	smpsPSGAlterVol     $04
000E20E6 8F03                       	dc.b	nD1, $03
000E20E8 E1FD                       	smpsAlterNote       $FD
000E20EA 9203                       	dc.b	nF1, $03
000E20EC EC04                       	smpsPSGAlterVol     $04
000E20EE E701                       	dc.b	smpsNoAttack, $01
000E20F0 E1FE                       	smpsAlterNote       $FE
000E20F2 ECFC                       	smpsPSGAlterVol     $FC
000E20F4 9603                       	dc.b	nA1, $03
000E20F6 E1FD                       	smpsAlterNote       $FD
000E20F8 9103                       	dc.b	nE1, $03
000E20FA EC04                       	smpsPSGAlterVol     $04
000E20FC E701                       	dc.b	smpsNoAttack, $01
000E20FE ECFC                       	smpsPSGAlterVol     $FC
000E2100 9403                       	dc.b	nG1, $03
000E2102 E1FE                       	smpsAlterNote       $FE
000E2104 9703                       	dc.b	nBb1, $03
000E2106 EC04                       	smpsPSGAlterVol     $04
000E2108 E701                       	dc.b	smpsNoAttack, $01
000E210A E1FF                       	smpsAlterNote       $FF
000E210C ECFC                       	smpsPSGAlterVol     $FC
000E210E 9B02                       	dc.b	nD2, $02
000E2110 EC04                       	smpsPSGAlterVol     $04
000E2112 E701                       	dc.b	smpsNoAttack, $01
000E2114 ECFC                       	smpsPSGAlterVol     $FC
000E2116 E1FE                       	smpsAlterNote       $FE
000E2118 9A03                       	dc.b	nCs2, $03
000E211A EC0B                       	smpsPSGAlterVol     $0B
000E211C 800A                       	dc.b	nRst, $0A
000E211E E102                       	smpsAlterNote       $02
000E2120 01                         	dc.b	$01
000E2121 E10A                       	smpsAlterNote       $0A
000E2123 01                         	dc.b	$01
000E2124 E102                       	smpsAlterNote       $02
000E2126 01                         	dc.b	$01
000E2127 E1FC                       	smpsAlterNote       $FC
000E2129 01                         	dc.b	$01
000E212A E10A                       	smpsAlterNote       $0A
000E212C 01                         	dc.b	$01
000E212D E1FC                       	smpsAlterNote       $FC
000E212F 01                         	dc.b	$01
000E2130 E108                       	smpsAlterNote       $08
000E2132 01                         	dc.b	$01
000E2133 E10A                       	smpsAlterNote       $0A
000E2135 01                         	dc.b	$01
000E2136 E102                       	smpsAlterNote       $02
000E2138 01                         	dc.b	$01
000E2139 E1F7                       	smpsAlterNote       $F7
000E213B 0101                       	dc.b	$01, $01
000E213D E102                       	smpsAlterNote       $02
000E213F 01                         	dc.b	$01
000E2140 E108                       	smpsAlterNote       $08
000E2142 0101                       	dc.b	$01, $01
000E2144 E1FC                       	smpsAlterNote       $FC
000E2146 01                         	dc.b	$01
000E2147 E10A                       	smpsAlterNote       $0A
000E2149 01                         	dc.b	$01
000E214A E1F7                       	smpsAlterNote       $F7
000E214C 01                         	dc.b	$01
000E214D E102                       	smpsAlterNote       $02
000E214F 01                         	dc.b	$01
000E2150 E10A                       	smpsAlterNote       $0A
000E2152 01                         	dc.b	$01
000E2153 E102                       	smpsAlterNote       $02
000E2155 01                         	dc.b	$01
000E2156 E1FC                       	smpsAlterNote       $FC
000E2158 01                         	dc.b	$01
000E2159                            
000E2159                            music84_Jump06:
000E2159 E10A                       	smpsAlterNote       $0A
000E215B 8001                       	dc.b	nRst, $01
000E215D E1FC                       	smpsAlterNote       $FC
000E215F 01                         	dc.b	$01
000E2160 E108                       	smpsAlterNote       $08
000E2162 01                         	dc.b	$01
000E2163 E10A                       	smpsAlterNote       $0A
000E2165 01                         	dc.b	$01
000E2166 E1FC                       	smpsAlterNote       $FC
000E2168 ECF5                       	smpsPSGAlterVol     $F5
000E216A 8F06                       	dc.b	nD1, $06
000E216C EC04                       	smpsPSGAlterVol     $04
000E216E E701                       	dc.b	smpsNoAttack, $01
000E2170 EC07                       	smpsPSGAlterVol     $07
000E2172 8003                       	dc.b	nRst, $03
000E2174 ECF5                       	smpsPSGAlterVol     $F5
000E2176 8F06                       	dc.b	nD1, $06
000E2178 EC04                       	smpsPSGAlterVol     $04
000E217A E701                       	dc.b	smpsNoAttack, $01
000E217C EC07                       	smpsPSGAlterVol     $07
000E217E 8006                       	dc.b	nRst, $06
000E2180 E1FF                       	smpsAlterNote       $FF
000E2182 01                         	dc.b	$01
000E2183 E102                       	smpsAlterNote       $02
000E2185 01                         	dc.b	$01
000E2186 E1FF                       	smpsAlterNote       $FF
000E2188 01                         	dc.b	$01
000E2189 E1F9                       	smpsAlterNote       $F9
000E218B 01                         	dc.b	$01
000E218C E1FC                       	smpsAlterNote       $FC
000E218E ECF5                       	smpsPSGAlterVol     $F5
000E2190 9006                       	dc.b	nEb1, $06
000E2192 EC04                       	smpsPSGAlterVol     $04
000E2194 E701                       	dc.b	smpsNoAttack, $01
000E2196 EC07                       	smpsPSGAlterVol     $07
000E2198 8003                       	dc.b	nRst, $03
000E219A ECF5                       	smpsPSGAlterVol     $F5
000E219C 9007                       	dc.b	nEb1, $07
000E219E EC0B                       	smpsPSGAlterVol     $0B
000E21A0 8006                       	dc.b	nRst, $06
000E21A2 E1FF                       	smpsAlterNote       $FF
000E21A4 01                         	dc.b	$01
000E21A5 E103                       	smpsAlterNote       $03
000E21A7 0101                       	dc.b	$01, $01
000E21A9 E1FC                       	smpsAlterNote       $FC
000E21AB 01                         	dc.b	$01
000E21AC ECF5                       	smpsPSGAlterVol     $F5
000E21AE 8F07                       	dc.b	nD1, $07
000E21B0 EC0B                       	smpsPSGAlterVol     $0B
000E21B2 8004                       	dc.b	nRst, $04
000E21B4 ECF5                       	smpsPSGAlterVol     $F5
000E21B6 8F06                       	dc.b	nD1, $06
000E21B8 EC04                       	smpsPSGAlterVol     $04
000E21BA E701                       	dc.b	smpsNoAttack, $01
000E21BC EC07                       	smpsPSGAlterVol     $07
000E21BE 8006                       	dc.b	nRst, $06
000E21C0 E102                       	smpsAlterNote       $02
000E21C2 01                         	dc.b	$01
000E21C3 E103                       	smpsAlterNote       $03
000E21C5 01                         	dc.b	$01
000E21C6 E1FF                       	smpsAlterNote       $FF
000E21C8 01                         	dc.b	$01
000E21C9 E1F9                       	smpsAlterNote       $F9
000E21CB 01                         	dc.b	$01
000E21CC E1FC                       	smpsAlterNote       $FC
000E21CE ECF5                       	smpsPSGAlterVol     $F5
000E21D0 8F06                       	dc.b	nD1, $06
000E21D2 EC04                       	smpsPSGAlterVol     $04
000E21D4 E701                       	dc.b	smpsNoAttack, $01
000E21D6 EC07                       	smpsPSGAlterVol     $07
000E21D8 8003                       	dc.b	nRst, $03
000E21DA ECF5                       	smpsPSGAlterVol     $F5
000E21DC 8F06                       	dc.b	nD1, $06
000E21DE EC04                       	smpsPSGAlterVol     $04
000E21E0 E701                       	dc.b	smpsNoAttack, $01
000E21E2 EC07                       	smpsPSGAlterVol     $07
000E21E4 8006                       	dc.b	nRst, $06
000E21E6 E1FF                       	smpsAlterNote       $FF
000E21E8 01                         	dc.b	$01
000E21E9 E103                       	smpsAlterNote       $03
000E21EB 01                         	dc.b	$01
000E21EC E1FF                       	smpsAlterNote       $FF
000E21EE 01                         	dc.b	$01
000E21EF E1FC                       	smpsAlterNote       $FC
000E21F1 01                         	dc.b	$01
000E21F2 ECF5                       	smpsPSGAlterVol     $F5
000E21F4 8F06                       	dc.b	nD1, $06
000E21F6 EC04                       	smpsPSGAlterVol     $04
000E21F8 E701                       	dc.b	smpsNoAttack, $01
000E21FA EC07                       	smpsPSGAlterVol     $07
000E21FC 8003                       	dc.b	nRst, $03
000E21FE ECF5                       	smpsPSGAlterVol     $F5
000E2200 8F07                       	dc.b	nD1, $07
000E2202 EC0B                       	smpsPSGAlterVol     $0B
000E2204 8007                       	dc.b	nRst, $07
000E2206 E101                       	smpsAlterNote       $01
000E2208 0101                       	dc.b	$01, $01
000E220A E1FC                       	smpsAlterNote       $FC
000E220C 01                         	dc.b	$01
000E220D E1F9                       	smpsAlterNote       $F9
000E220F 01                         	dc.b	$01
000E2210 E1FC                       	smpsAlterNote       $FC
000E2212 ECF5                       	smpsPSGAlterVol     $F5
000E2214 9006                       	dc.b	nEb1, $06
000E2216 EC0B                       	smpsPSGAlterVol     $0B
000E2218 8004                       	dc.b	nRst, $04
000E221A ECF5                       	smpsPSGAlterVol     $F5
000E221C 9006                       	dc.b	nEb1, $06
000E221E EC04                       	smpsPSGAlterVol     $04
000E2220 E701                       	dc.b	smpsNoAttack, $01
000E2222 EC07                       	smpsPSGAlterVol     $07
000E2224 8006                       	dc.b	nRst, $06
000E2226 E100                       	smpsAlterNote       $00
000E2228 01                         	dc.b	$01
000E2229 E102                       	smpsAlterNote       $02
000E222B 01                         	dc.b	$01
000E222C E100                       	smpsAlterNote       $00
000E222E 01                         	dc.b	$01
000E222F E1FD                       	smpsAlterNote       $FD
000E2231 01                         	dc.b	$01
000E2232 E1FF                       	smpsAlterNote       $FF
000E2234 ECF5                       	smpsPSGAlterVol     $F5
000E2236 9B06                       	dc.b	nD2, $06
000E2238 EC04                       	smpsPSGAlterVol     $04
000E223A E701                       	dc.b	smpsNoAttack, $01
000E223C EC07                       	smpsPSGAlterVol     $07
000E223E 8003                       	dc.b	nRst, $03
000E2240 ECF5                       	smpsPSGAlterVol     $F5
000E2242 9B07                       	dc.b	nD2, $07
000E2244 EC0B                       	smpsPSGAlterVol     $0B
000E2246 8006                       	dc.b	nRst, $06
000E2248 E102                       	smpsAlterNote       $02
000E224A 01                         	dc.b	$01
000E224B E106                       	smpsAlterNote       $06
000E224D 01                         	dc.b	$01
000E224E E105                       	smpsAlterNote       $05
000E2250 01                         	dc.b	$01
000E2251 E1FF                       	smpsAlterNote       $FF
000E2253 01                         	dc.b	$01
000E2254 ECF5                       	smpsPSGAlterVol     $F5
000E2256 9B07                       	dc.b	nD2, $07
000E2258 EC0B                       	smpsPSGAlterVol     $0B
000E225A 8004                       	dc.b	nRst, $04
000E225C ECF5                       	smpsPSGAlterVol     $F5
000E225E 9B06                       	dc.b	nD2, $06
000E2260 EC0B                       	smpsPSGAlterVol     $0B
000E2262 8007                       	dc.b	nRst, $07
000E2264 E105                       	smpsAlterNote       $05
000E2266 0101                       	dc.b	$01, $01
000E2268 E102                       	smpsAlterNote       $02
000E226A 01                         	dc.b	$01
000E226B E1FC                       	smpsAlterNote       $FC
000E226D 01                         	dc.b	$01
000E226E E1FF                       	smpsAlterNote       $FF
000E2270 ECF5                       	smpsPSGAlterVol     $F5
000E2272 9B06                       	dc.b	nD2, $06
000E2274 EC04                       	smpsPSGAlterVol     $04
000E2276 E701                       	dc.b	smpsNoAttack, $01
000E2278 EC07                       	smpsPSGAlterVol     $07
000E227A 8003                       	dc.b	nRst, $03
000E227C ECF5                       	smpsPSGAlterVol     $F5
000E227E 9B06                       	dc.b	nD2, $06
000E2280 EC04                       	smpsPSGAlterVol     $04
000E2282 E701                       	dc.b	smpsNoAttack, $01
000E2284 EC07                       	smpsPSGAlterVol     $07
000E2286 8006                       	dc.b	nRst, $06
000E2288 E102                       	smpsAlterNote       $02
000E228A 01                         	dc.b	$01
000E228B E106                       	smpsAlterNote       $06
000E228D 01                         	dc.b	$01
000E228E E102                       	smpsAlterNote       $02
000E2290 01                         	dc.b	$01
000E2291 E1FF                       	smpsAlterNote       $FF
000E2293 01                         	dc.b	$01
000E2294 ECF5                       	smpsPSGAlterVol     $F5
000E2296 9B06                       	dc.b	nD2, $06
000E2298 EC04                       	smpsPSGAlterVol     $04
000E229A E701                       	dc.b	smpsNoAttack, $01
000E229C EC07                       	smpsPSGAlterVol     $07
000E229E 8003                       	dc.b	nRst, $03
000E22A0 ECF5                       	smpsPSGAlterVol     $F5
000E22A2 9B07                       	dc.b	nD2, $07
000E22A4 EC0B                       	smpsPSGAlterVol     $0B
000E22A6 8007                       	dc.b	nRst, $07
000E22A8 E105                       	smpsAlterNote       $05
000E22AA 0101                       	dc.b	$01, $01
000E22AC E1FF                       	smpsAlterNote       $FF
000E22AE 01                         	dc.b	$01
000E22AF E1FC                       	smpsAlterNote       $FC
000E22B1 01                         	dc.b	$01
000E22B2 E1FF                       	smpsAlterNote       $FF
000E22B4 ECF5                       	smpsPSGAlterVol     $F5
000E22B6 9B06                       	dc.b	nD2, $06
000E22B8 EC0B                       	smpsPSGAlterVol     $0B
000E22BA 8004                       	dc.b	nRst, $04
000E22BC ECF5                       	smpsPSGAlterVol     $F5
000E22BE 9B06                       	dc.b	nD2, $06
000E22C0 EC04                       	smpsPSGAlterVol     $04
000E22C2 E701                       	dc.b	smpsNoAttack, $01
000E22C4 EC07                       	smpsPSGAlterVol     $07
000E22C6 8006                       	dc.b	nRst, $06
000E22C8 E105                       	smpsAlterNote       $05
000E22CA 01                         	dc.b	$01
000E22CB E106                       	smpsAlterNote       $06
000E22CD 01                         	dc.b	$01
000E22CE E102                       	smpsAlterNote       $02
000E22D0 01                         	dc.b	$01
000E22D1 E1FC                       	smpsAlterNote       $FC
000E22D3 01                         	dc.b	$01
000E22D4 E1FF                       	smpsAlterNote       $FF
000E22D6 ECF5                       	smpsPSGAlterVol     $F5
000E22D8 9B06                       	dc.b	nD2, $06
000E22DA EC04                       	smpsPSGAlterVol     $04
000E22DC E701                       	dc.b	smpsNoAttack, $01
000E22DE EC07                       	smpsPSGAlterVol     $07
000E22E0 8003                       	dc.b	nRst, $03
000E22E2 ECF5                       	smpsPSGAlterVol     $F5
000E22E4 9B06                       	dc.b	nD2, $06
000E22E6 EC04                       	smpsPSGAlterVol     $04
000E22E8 E701                       	dc.b	smpsNoAttack, $01
000E22EA EC07                       	smpsPSGAlterVol     $07
000E22EC 8006                       	dc.b	nRst, $06
000E22EE E102                       	smpsAlterNote       $02
000E22F0 01                         	dc.b	$01
000E22F1 E106                       	smpsAlterNote       $06
000E22F3 01                         	dc.b	$01
000E22F4 E105                       	smpsAlterNote       $05
000E22F6 01                         	dc.b	$01
000E22F7 E1FF                       	smpsAlterNote       $FF
000E22F9 01                         	dc.b	$01
000E22FA ECF5                       	smpsPSGAlterVol     $F5
000E22FC 9B07                       	dc.b	nD2, $07
000E22FE EC0B                       	smpsPSGAlterVol     $0B
000E2300 8004                       	dc.b	nRst, $04
000E2302 ECF5                       	smpsPSGAlterVol     $F5
000E2304 9B06                       	dc.b	nD2, $06
000E2306 EC0B                       	smpsPSGAlterVol     $0B
000E2308 8007                       	dc.b	nRst, $07
000E230A E105                       	smpsAlterNote       $05
000E230C 0101                       	dc.b	$01, $01
000E230E E102                       	smpsAlterNote       $02
000E2310 01                         	dc.b	$01
000E2311 E1FC                       	smpsAlterNote       $FC
000E2313 01                         	dc.b	$01
000E2314 E1FF                       	smpsAlterNote       $FF
000E2316 ECF5                       	smpsPSGAlterVol     $F5
000E2318 9B06                       	dc.b	nD2, $06
000E231A EC04                       	smpsPSGAlterVol     $04
000E231C E701                       	dc.b	smpsNoAttack, $01
000E231E EC07                       	smpsPSGAlterVol     $07
000E2320 8003                       	dc.b	nRst, $03
000E2322 ECF5                       	smpsPSGAlterVol     $F5
000E2324 9B06                       	dc.b	nD2, $06
000E2326 EC04                       	smpsPSGAlterVol     $04
000E2328 E701                       	dc.b	smpsNoAttack, $01
000E232A EC07                       	smpsPSGAlterVol     $07
000E232C 8006                       	dc.b	nRst, $06
000E232E E102                       	smpsAlterNote       $02
000E2330 01                         	dc.b	$01
000E2331 E106                       	smpsAlterNote       $06
000E2333 01                         	dc.b	$01
000E2334 E102                       	smpsAlterNote       $02
000E2336 01                         	dc.b	$01
000E2337 E1FF                       	smpsAlterNote       $FF
000E2339 01                         	dc.b	$01
000E233A ECF5                       	smpsPSGAlterVol     $F5
000E233C 9B06                       	dc.b	nD2, $06
000E233E EC04                       	smpsPSGAlterVol     $04
000E2340 E701                       	dc.b	smpsNoAttack, $01
000E2342 EC07                       	smpsPSGAlterVol     $07
000E2344 8003                       	dc.b	nRst, $03
000E2346 ECF5                       	smpsPSGAlterVol     $F5
000E2348 9B07                       	dc.b	nD2, $07
000E234A E1FE                       	smpsAlterNote       $FE
000E234C 9706                       	dc.b	nBb1, $06
000E234E EC04                       	smpsPSGAlterVol     $04
000E2350 E701                       	dc.b	smpsNoAttack, $01
000E2352 ECFC                       	smpsPSGAlterVol     $FC
000E2354 9703                       	dc.b	nBb1, $03
000E2356 EC04                       	smpsPSGAlterVol     $04
000E2358 E701                       	dc.b	smpsNoAttack, $01
000E235A ECFC                       	smpsPSGAlterVol     $FC
000E235C 9702                       	dc.b	nBb1, $02
000E235E EC04                       	smpsPSGAlterVol     $04
000E2360 E701                       	dc.b	smpsNoAttack, $01
000E2362 ECFC                       	smpsPSGAlterVol     $FC
000E2364 9606                       	dc.b	nA1, $06
000E2366 EC04                       	smpsPSGAlterVol     $04
000E2368 E701                       	dc.b	smpsNoAttack, $01
000E236A EC07                       	smpsPSGAlterVol     $07
000E236C 8006                       	dc.b	nRst, $06
000E236E E101                       	smpsAlterNote       $01
000E2370 01                         	dc.b	$01
000E2371 E107                       	smpsAlterNote       $07
000E2373 01                         	dc.b	$01
000E2374 E101                       	smpsAlterNote       $01
000E2376 01                         	dc.b	$01
000E2377 E1F8                       	smpsAlterNote       $F8
000E2379 01                         	dc.b	$01
000E237A E1F7                       	smpsAlterNote       $F7
000E237C 01                         	dc.b	$01
000E237D E1FC                       	smpsAlterNote       $FC
000E237F 01                         	dc.b	$01
000E2380 E106                       	smpsAlterNote       $06
000E2382 01                         	dc.b	$01
000E2383 E107                       	smpsAlterNote       $07
000E2385 01                         	dc.b	$01
000E2386 E101                       	smpsAlterNote       $01
000E2388 01                         	dc.b	$01
000E2389 E1F8                       	smpsAlterNote       $F8
000E238B 0101                       	dc.b	$01, $01
000E238D E1FC                       	smpsAlterNote       $FC
000E238F ECF5                       	smpsPSGAlterVol     $F5
000E2391 8F06                       	dc.b	nD1, $06
000E2393 EC04                       	smpsPSGAlterVol     $04
000E2395 E701                       	dc.b	smpsNoAttack, $01
000E2397 EC07                       	smpsPSGAlterVol     $07
000E2399 8003                       	dc.b	nRst, $03
000E239B ECF5                       	smpsPSGAlterVol     $F5
000E239D 8F06                       	dc.b	nD1, $06
000E239F EC04                       	smpsPSGAlterVol     $04
000E23A1 E701                       	dc.b	smpsNoAttack, $01
000E23A3 EC07                       	smpsPSGAlterVol     $07
000E23A5 8006                       	dc.b	nRst, $06
000E23A7 E1FF                       	smpsAlterNote       $FF
000E23A9 01                         	dc.b	$01
000E23AA E102                       	smpsAlterNote       $02
000E23AC 01                         	dc.b	$01
000E23AD E101                       	smpsAlterNote       $01
000E23AF 01                         	dc.b	$01
000E23B0 E1FC                       	smpsAlterNote       $FC
000E23B2 01                         	dc.b	$01
000E23B3 ECF5                       	smpsPSGAlterVol     $F5
000E23B5 9007                       	dc.b	nEb1, $07
000E23B7 EC0B                       	smpsPSGAlterVol     $0B
000E23B9 8004                       	dc.b	nRst, $04
000E23BB ECF5                       	smpsPSGAlterVol     $F5
000E23BD 9006                       	dc.b	nEb1, $06
000E23BF EC0B                       	smpsPSGAlterVol     $0B
000E23C1 8007                       	dc.b	nRst, $07
000E23C3 E103                       	smpsAlterNote       $03
000E23C5 0101                       	dc.b	$01, $01
000E23C7 E1FC                       	smpsAlterNote       $FC
000E23C9 01                         	dc.b	$01
000E23CA E1F9                       	smpsAlterNote       $F9
000E23CC 01                         	dc.b	$01
000E23CD E1FC                       	smpsAlterNote       $FC
000E23CF ECF5                       	smpsPSGAlterVol     $F5
000E23D1 8F06                       	dc.b	nD1, $06
000E23D3 EC04                       	smpsPSGAlterVol     $04
000E23D5 E701                       	dc.b	smpsNoAttack, $01
000E23D7 EC07                       	smpsPSGAlterVol     $07
000E23D9 8003                       	dc.b	nRst, $03
000E23DB ECF5                       	smpsPSGAlterVol     $F5
000E23DD 8F06                       	dc.b	nD1, $06
000E23DF EC04                       	smpsPSGAlterVol     $04
000E23E1 E701                       	dc.b	smpsNoAttack, $01
000E23E3 EC07                       	smpsPSGAlterVol     $07
000E23E5 8006                       	dc.b	nRst, $06
000E23E7 E1FF                       	smpsAlterNote       $FF
000E23E9 01                         	dc.b	$01
000E23EA E103                       	smpsAlterNote       $03
000E23EC 01                         	dc.b	$01
000E23ED E1FF                       	smpsAlterNote       $FF
000E23EF 01                         	dc.b	$01
000E23F0 E1F9                       	smpsAlterNote       $F9
000E23F2 01                         	dc.b	$01
000E23F3 E1FC                       	smpsAlterNote       $FC
000E23F5 ECF5                       	smpsPSGAlterVol     $F5
000E23F7 8F06                       	dc.b	nD1, $06
000E23F9 EC04                       	smpsPSGAlterVol     $04
000E23FB E701                       	dc.b	smpsNoAttack, $01
000E23FD EC07                       	smpsPSGAlterVol     $07
000E23FF 8003                       	dc.b	nRst, $03
000E2401 ECF5                       	smpsPSGAlterVol     $F5
000E2403 8F07                       	dc.b	nD1, $07
000E2405 EC0B                       	smpsPSGAlterVol     $0B
000E2407 8006                       	dc.b	nRst, $06
000E2409 E1FF                       	smpsAlterNote       $FF
000E240B 01                         	dc.b	$01
000E240C E102                       	smpsAlterNote       $02
000E240E 0101                       	dc.b	$01, $01
000E2410 E1FC                       	smpsAlterNote       $FC
000E2412 01                         	dc.b	$01
000E2413 ECF5                       	smpsPSGAlterVol     $F5
000E2415 8F07                       	dc.b	nD1, $07
000E2417 EC0B                       	smpsPSGAlterVol     $0B
000E2419 8004                       	dc.b	nRst, $04
000E241B ECF5                       	smpsPSGAlterVol     $F5
000E241D 8F06                       	dc.b	nD1, $06
000E241F EC04                       	smpsPSGAlterVol     $04
000E2421 E701                       	dc.b	smpsNoAttack, $01
000E2423 EC07                       	smpsPSGAlterVol     $07
000E2425 8006                       	dc.b	nRst, $06
000E2427 E101                       	smpsAlterNote       $01
000E2429 01                         	dc.b	$01
000E242A E102                       	smpsAlterNote       $02
000E242C 01                         	dc.b	$01
000E242D E1FF                       	smpsAlterNote       $FF
000E242F 01                         	dc.b	$01
000E2430 E1F9                       	smpsAlterNote       $F9
000E2432 01                         	dc.b	$01
000E2433 E1FC                       	smpsAlterNote       $FC
000E2435 ECF5                       	smpsPSGAlterVol     $F5
000E2437 9006                       	dc.b	nEb1, $06
000E2439 EC04                       	smpsPSGAlterVol     $04
000E243B E701                       	dc.b	smpsNoAttack, $01
000E243D EC07                       	smpsPSGAlterVol     $07
000E243F 8003                       	dc.b	nRst, $03
000E2441 ECF5                       	smpsPSGAlterVol     $F5
000E2443 9006                       	dc.b	nEb1, $06
000E2445 EC04                       	smpsPSGAlterVol     $04
000E2447 E701                       	dc.b	smpsNoAttack, $01
000E2449 EC07                       	smpsPSGAlterVol     $07
000E244B 8006                       	dc.b	nRst, $06
000E244D E100                       	smpsAlterNote       $00
000E244F 01                         	dc.b	$01
000E2450 E102                       	smpsAlterNote       $02
000E2452 01                         	dc.b	$01
000E2453 E100                       	smpsAlterNote       $00
000E2455 01                         	dc.b	$01
000E2456 E1FF                       	smpsAlterNote       $FF
000E2458 01                         	dc.b	$01
000E2459 ECF5                       	smpsPSGAlterVol     $F5
000E245B 9B06                       	dc.b	nD2, $06
000E245D EC04                       	smpsPSGAlterVol     $04
000E245F E701                       	dc.b	smpsNoAttack, $01
000E2461 EC07                       	smpsPSGAlterVol     $07
000E2463 8003                       	dc.b	nRst, $03
000E2465 ECF5                       	smpsPSGAlterVol     $F5
000E2467 9B07                       	dc.b	nD2, $07
000E2469 EC0B                       	smpsPSGAlterVol     $0B
000E246B 8007                       	dc.b	nRst, $07
000E246D E105                       	smpsAlterNote       $05
000E246F 0101                       	dc.b	$01, $01
000E2471 E1FF                       	smpsAlterNote       $FF
000E2473 01                         	dc.b	$01
000E2474 E1FC                       	smpsAlterNote       $FC
000E2476 01                         	dc.b	$01
000E2477 E1FF                       	smpsAlterNote       $FF
000E2479 ECF5                       	smpsPSGAlterVol     $F5
000E247B 9B06                       	dc.b	nD2, $06
000E247D EC0B                       	smpsPSGAlterVol     $0B
000E247F 8004                       	dc.b	nRst, $04
000E2481 ECF5                       	smpsPSGAlterVol     $F5
000E2483 9B06                       	dc.b	nD2, $06
000E2485 EC04                       	smpsPSGAlterVol     $04
000E2487 E701                       	dc.b	smpsNoAttack, $01
000E2489 EC07                       	smpsPSGAlterVol     $07
000E248B 8006                       	dc.b	nRst, $06
000E248D E102                       	smpsAlterNote       $02
000E248F 01                         	dc.b	$01
000E2490 E106                       	smpsAlterNote       $06
000E2492 01                         	dc.b	$01
000E2493 E102                       	smpsAlterNote       $02
000E2495 01                         	dc.b	$01
000E2496 E1FC                       	smpsAlterNote       $FC
000E2498 01                         	dc.b	$01
000E2499 E1FF                       	smpsAlterNote       $FF
000E249B ECF5                       	smpsPSGAlterVol     $F5
000E249D 9B06                       	dc.b	nD2, $06
000E249F EC04                       	smpsPSGAlterVol     $04
000E24A1 E701                       	dc.b	smpsNoAttack, $01
000E24A3 EC07                       	smpsPSGAlterVol     $07
000E24A5 8003                       	dc.b	nRst, $03
000E24A7 ECF5                       	smpsPSGAlterVol     $F5
000E24A9 9B07                       	dc.b	nD2, $07
000E24AB EC0B                       	smpsPSGAlterVol     $0B
000E24AD 8006                       	dc.b	nRst, $06
000E24AF E102                       	smpsAlterNote       $02
000E24B1 01                         	dc.b	$01
000E24B2 E105                       	smpsAlterNote       $05
000E24B4 0101                       	dc.b	$01, $01
000E24B6 E1FF                       	smpsAlterNote       $FF
000E24B8 01                         	dc.b	$01
000E24B9 ECF5                       	smpsPSGAlterVol     $F5
000E24BB 9B07                       	dc.b	nD2, $07
000E24BD EC0B                       	smpsPSGAlterVol     $0B
000E24BF 8004                       	dc.b	nRst, $04
000E24C1 ECF5                       	smpsPSGAlterVol     $F5
000E24C3 9B06                       	dc.b	nD2, $06
000E24C5 EC0B                       	smpsPSGAlterVol     $0B
000E24C7 8007                       	dc.b	nRst, $07
000E24C9 E105                       	smpsAlterNote       $05
000E24CB 0101                       	dc.b	$01, $01
000E24CD E102                       	smpsAlterNote       $02
000E24CF 01                         	dc.b	$01
000E24D0 E1FC                       	smpsAlterNote       $FC
000E24D2 01                         	dc.b	$01
000E24D3 E1FF                       	smpsAlterNote       $FF
000E24D5 ECF5                       	smpsPSGAlterVol     $F5
000E24D7 9B06                       	dc.b	nD2, $06
000E24D9 EC04                       	smpsPSGAlterVol     $04
000E24DB E701                       	dc.b	smpsNoAttack, $01
000E24DD EC07                       	smpsPSGAlterVol     $07
000E24DF 8003                       	dc.b	nRst, $03
000E24E1 ECF5                       	smpsPSGAlterVol     $F5
000E24E3 9B06                       	dc.b	nD2, $06
000E24E5 EC04                       	smpsPSGAlterVol     $04
000E24E7 E701                       	dc.b	smpsNoAttack, $01
000E24E9 EC07                       	smpsPSGAlterVol     $07
000E24EB 8006                       	dc.b	nRst, $06
000E24ED E102                       	smpsAlterNote       $02
000E24EF 01                         	dc.b	$01
000E24F0 E106                       	smpsAlterNote       $06
000E24F2 01                         	dc.b	$01
000E24F3 E102                       	smpsAlterNote       $02
000E24F5 01                         	dc.b	$01
000E24F6 E1FF                       	smpsAlterNote       $FF
000E24F8 01                         	dc.b	$01
000E24F9 ECF5                       	smpsPSGAlterVol     $F5
000E24FB 9B06                       	dc.b	nD2, $06
000E24FD EC04                       	smpsPSGAlterVol     $04
000E24FF E701                       	dc.b	smpsNoAttack, $01
000E2501 EC07                       	smpsPSGAlterVol     $07
000E2503 8003                       	dc.b	nRst, $03
000E2505 ECF5                       	smpsPSGAlterVol     $F5
000E2507 9B07                       	dc.b	nD2, $07
000E2509 EC0B                       	smpsPSGAlterVol     $0B
000E250B 8007                       	dc.b	nRst, $07
000E250D E105                       	smpsAlterNote       $05
000E250F 0101                       	dc.b	$01, $01
000E2511 E1FF                       	smpsAlterNote       $FF
000E2513 01                         	dc.b	$01
000E2514 E1FC                       	smpsAlterNote       $FC
000E2516 01                         	dc.b	$01
000E2517 E1FF                       	smpsAlterNote       $FF
000E2519 ECF5                       	smpsPSGAlterVol     $F5
000E251B 9B06                       	dc.b	nD2, $06
000E251D EC0B                       	smpsPSGAlterVol     $0B
000E251F 8004                       	dc.b	nRst, $04
000E2521 ECF5                       	smpsPSGAlterVol     $F5
000E2523 9B06                       	dc.b	nD2, $06
000E2525 EC04                       	smpsPSGAlterVol     $04
000E2527 E701                       	dc.b	smpsNoAttack, $01
000E2529 EC07                       	smpsPSGAlterVol     $07
000E252B 8006                       	dc.b	nRst, $06
000E252D E102                       	smpsAlterNote       $02
000E252F 01                         	dc.b	$01
000E2530 E106                       	smpsAlterNote       $06
000E2532 01                         	dc.b	$01
000E2533 E102                       	smpsAlterNote       $02
000E2535 01                         	dc.b	$01
000E2536 E1FC                       	smpsAlterNote       $FC
000E2538 01                         	dc.b	$01
000E2539 E1FF                       	smpsAlterNote       $FF
000E253B ECF5                       	smpsPSGAlterVol     $F5
000E253D 9B06                       	dc.b	nD2, $06
000E253F EC04                       	smpsPSGAlterVol     $04
000E2541 E701                       	dc.b	smpsNoAttack, $01
000E2543 EC07                       	smpsPSGAlterVol     $07
000E2545 8003                       	dc.b	nRst, $03
000E2547 ECF5                       	smpsPSGAlterVol     $F5
000E2549 9B06                       	dc.b	nD2, $06
000E254B EC04                       	smpsPSGAlterVol     $04
000E254D E701                       	dc.b	smpsNoAttack, $01
000E254F EC07                       	smpsPSGAlterVol     $07
000E2551 8006                       	dc.b	nRst, $06
000E2553 E102                       	smpsAlterNote       $02
000E2555 01                         	dc.b	$01
000E2556 E106                       	smpsAlterNote       $06
000E2558 01                         	dc.b	$01
000E2559 E105                       	smpsAlterNote       $05
000E255B 01                         	dc.b	$01
000E255C E1FF                       	smpsAlterNote       $FF
000E255E 01                         	dc.b	$01
000E255F ECF5                       	smpsPSGAlterVol     $F5
000E2561 9B07                       	dc.b	nD2, $07
000E2563 EC0B                       	smpsPSGAlterVol     $0B
000E2565 8004                       	dc.b	nRst, $04
000E2567 ECF5                       	smpsPSGAlterVol     $F5
000E2569 9B06                       	dc.b	nD2, $06
000E256B EC0B                       	smpsPSGAlterVol     $0B
000E256D 8007                       	dc.b	nRst, $07
000E256F E105                       	smpsAlterNote       $05
000E2571 0101                       	dc.b	$01, $01
000E2573 E101                       	smpsAlterNote       $01
000E2575 01                         	dc.b	$01
000E2576 E1FB                       	smpsAlterNote       $FB
000E2578 01                         	dc.b	$01
000E2579 E1FE                       	smpsAlterNote       $FE
000E257B ECF5                       	smpsPSGAlterVol     $F5
000E257D 9A06                       	dc.b	nCs2, $06
000E257F EC04                       	smpsPSGAlterVol     $04
000E2581 E701                       	dc.b	smpsNoAttack, $01
000E2583 EC07                       	smpsPSGAlterVol     $07
000E2585 8003                       	dc.b	nRst, $03
000E2587 ECF5                       	smpsPSGAlterVol     $F5
000E2589 9A06                       	dc.b	nCs2, $06
000E258B EC04                       	smpsPSGAlterVol     $04
000E258D E701                       	dc.b	smpsNoAttack, $01
000E258F EC07                       	smpsPSGAlterVol     $07
000E2591 8003                       	dc.b	nRst, $03
000E2593 E1FC                       	smpsAlterNote       $FC
000E2595 ECF5                       	smpsPSGAlterVol     $F5
000E2597 8F07                       	dc.b	nD1, $07
000E2599 EC0B                       	smpsPSGAlterVol     $0B
000E259B 8006                       	dc.b	nRst, $06
000E259D E1FF                       	smpsAlterNote       $FF
000E259F 01                         	dc.b	$01
000E25A0 E103                       	smpsAlterNote       $03
000E25A2 01                         	dc.b	$01
000E25A3 E102                       	smpsAlterNote       $02
000E25A5 01                         	dc.b	$01
000E25A6 E1FC                       	smpsAlterNote       $FC
000E25A8 01                         	dc.b	$01
000E25A9 E1F8                       	smpsAlterNote       $F8
000E25AB 01                         	dc.b	$01
000E25AC E1FC                       	smpsAlterNote       $FC
000E25AE 01                         	dc.b	$01
000E25AF E1FF                       	smpsAlterNote       $FF
000E25B1 01                         	dc.b	$01
000E25B2 E103                       	smpsAlterNote       $03
000E25B4 01                         	dc.b	$01
000E25B5 E1FC                       	smpsAlterNote       $FC
000E25B7 ECF5                       	smpsPSGAlterVol     $F5
000E25B9 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
000E25BD EC04                       	smpsPSGAlterVol     $04
000E25BF E701                       	dc.b	smpsNoAttack, $01
000E25C1 EC07                       	smpsPSGAlterVol     $07
000E25C3 8009                       	dc.b	nRst, $09
000E25C5 E1FF                       	smpsAlterNote       $FF
000E25C7 01                         	dc.b	$01
000E25C8 E103                       	smpsAlterNote       $03
000E25CA 01                         	dc.b	$01
000E25CB E102                       	smpsAlterNote       $02
000E25CD 01                         	dc.b	$01
000E25CE E1FC                       	smpsAlterNote       $FC
000E25D0 01                         	dc.b	$01
000E25D1 E1F8                       	smpsAlterNote       $F8
000E25D3 01                         	dc.b	$01
000E25D4 E1FC                       	smpsAlterNote       $FC
000E25D6 01                         	dc.b	$01
000E25D7 E1FF                       	smpsAlterNote       $FF
000E25D9 01                         	dc.b	$01
000E25DA E103                       	smpsAlterNote       $03
000E25DC 01                         	dc.b	$01
000E25DD E1FF                       	smpsAlterNote       $FF
000E25DF 01                         	dc.b	$01
000E25E0 E1F9                       	smpsAlterNote       $F9
000E25E2 01                         	dc.b	$01
000E25E3 E1F8                       	smpsAlterNote       $F8
000E25E5 01                         	dc.b	$01
000E25E6 E1FC                       	smpsAlterNote       $FC
000E25E8 01                         	dc.b	$01
000E25E9 E102                       	smpsAlterNote       $02
000E25EB 0101                       	dc.b	$01, $01
000E25ED E1FF                       	smpsAlterNote       $FF
000E25EF 01                         	dc.b	$01
000E25F0 E1FC                       	smpsAlterNote       $FC
000E25F2 ECF5                       	smpsPSGAlterVol     $F5
000E25F4 8F02                       	dc.b	nD1, $02
000E25F6 EC04                       	smpsPSGAlterVol     $04
000E25F8 E701                       	dc.b	smpsNoAttack, $01
000E25FA ECFC                       	smpsPSGAlterVol     $FC
000E25FC E1FB                       	smpsAlterNote       $FB
000E25FE 8D06                       	dc.b	nC1, $06
000E2600 EC04                       	smpsPSGAlterVol     $04
000E2602 E701                       	dc.b	smpsNoAttack, $01
000E2604 EC07                       	smpsPSGAlterVol     $07
000E2606 8006                       	dc.b	nRst, $06
000E2608 E1FE                       	smpsAlterNote       $FE
000E260A 01                         	dc.b	$01
000E260B E102                       	smpsAlterNote       $02
000E260D 01                         	dc.b	$01
000E260E E1FE                       	smpsAlterNote       $FE
000E2610 01                         	dc.b	$01
000E2611 E1FB                       	smpsAlterNote       $FB
000E2613 01                         	dc.b	$01
000E2614 E1F7                       	smpsAlterNote       $F7
000E2616 01                         	dc.b	$01
000E2617 E1FB                       	smpsAlterNote       $FB
000E2619 01                         	dc.b	$01
000E261A E101                       	smpsAlterNote       $01
000E261C 01                         	dc.b	$01
000E261D E102                       	smpsAlterNote       $02
000E261F 01                         	dc.b	$01
000E2620 E1FB                       	smpsAlterNote       $FB
000E2622 ECF5                       	smpsPSGAlterVol     $F5
000E2624 8D02                       	dc.b	nC1, $02
000E2626 EC04                       	smpsPSGAlterVol     $04
000E2628 E701                       	dc.b	smpsNoAttack, $01
000E262A E1FC                       	smpsAlterNote       $FC
000E262C ECFC                       	smpsPSGAlterVol     $FC
000E262E 8F0D                       	dc.b	nD1, $0D
000E2630 E1FF                       	smpsAlterNote       $FF
000E2632 E701                       	dc.b	smpsNoAttack, $01
000E2634 E103                       	smpsAlterNote       $03
000E2636 E701                       	dc.b	smpsNoAttack, $01
000E2638 E1FF                       	smpsAlterNote       $FF
000E263A E701                       	dc.b	smpsNoAttack, $01
000E263C E1FC                       	smpsAlterNote       $FC
000E263E E701                       	dc.b	smpsNoAttack, $01
000E2640 E1F8                       	smpsAlterNote       $F8
000E2642 E701                       	dc.b	smpsNoAttack, $01
000E2644 E1FC                       	smpsAlterNote       $FC
000E2646 E701                       	dc.b	smpsNoAttack, $01
000E2648 E102                       	smpsAlterNote       $02
000E264A E701                       	dc.b	smpsNoAttack, $01
000E264C E103                       	smpsAlterNote       $03
000E264E E701                       	dc.b	smpsNoAttack, $01
000E2650 E1FF                       	smpsAlterNote       $FF
000E2652 E701                       	dc.b	smpsNoAttack, $01
000E2654 E1F9                       	smpsAlterNote       $F9
000E2656 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E265A E1FC                       	smpsAlterNote       $FC
000E265C E701                       	dc.b	smpsNoAttack, $01
000E265E E102                       	smpsAlterNote       $02
000E2660 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E2664 E1FC                       	smpsAlterNote       $FC
000E2666 E701                       	dc.b	smpsNoAttack, $01
000E2668 E1F9                       	smpsAlterNote       $F9
000E266A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E266E E1FF                       	smpsAlterNote       $FF
000E2670 EC04                       	smpsPSGAlterVol     $04
000E2672 E701                       	dc.b	smpsNoAttack, $01
000E2674 EC07                       	smpsPSGAlterVol     $07
000E2676 E103                       	smpsAlterNote       $03
000E2678 8001                       	dc.b	nRst, $01
000E267A E102                       	smpsAlterNote       $02
000E267C 01                         	dc.b	$01
000E267D E1FB                       	smpsAlterNote       $FB
000E267F 01                         	dc.b	$01
000E2680 E1F7                       	smpsAlterNote       $F7
000E2682 01                         	dc.b	$01
000E2683 E1FB                       	smpsAlterNote       $FB
000E2685 01                         	dc.b	$01
000E2686 E102                       	smpsAlterNote       $02
000E2688 01                         	dc.b	$01
000E2689 E103                       	smpsAlterNote       $03
000E268B 01                         	dc.b	$01
000E268C E1FB                       	smpsAlterNote       $FB
000E268E ECF5                       	smpsPSGAlterVol     $F5
000E2690 8E06                       	dc.b	nCs1, $06
000E2692 EC04                       	smpsPSGAlterVol     $04
000E2694 E701                       	dc.b	smpsNoAttack, $01
000E2696 EC07                       	smpsPSGAlterVol     $07
000E2698 8003                       	dc.b	nRst, $03
000E269A ECF5                       	smpsPSGAlterVol     $F5
000E269C 8E06                       	dc.b	nCs1, $06
000E269E EC04                       	smpsPSGAlterVol     $04
000E26A0 E701                       	dc.b	smpsNoAttack, $01
000E26A2 EC07                       	smpsPSGAlterVol     $07
000E26A4 8006                       	dc.b	nRst, $06
000E26A6 E1FE                       	smpsAlterNote       $FE
000E26A8 01                         	dc.b	$01
000E26A9 E102                       	smpsAlterNote       $02
000E26AB 01                         	dc.b	$01
000E26AC E1FE                       	smpsAlterNote       $FE
000E26AE 01                         	dc.b	$01
000E26AF E1F9                       	smpsAlterNote       $F9
000E26B1 01                         	dc.b	$01
000E26B2 E1FC                       	smpsAlterNote       $FC
000E26B4 ECF5                       	smpsPSGAlterVol     $F5
000E26B6 8F06                       	dc.b	nD1, $06
000E26B8 EC04                       	smpsPSGAlterVol     $04
000E26BA E701                       	dc.b	smpsNoAttack, $01
000E26BC EC07                       	smpsPSGAlterVol     $07
000E26BE 8003                       	dc.b	nRst, $03
000E26C0 ECF5                       	smpsPSGAlterVol     $F5
000E26C2 8F07                       	dc.b	nD1, $07
000E26C4 EC0B                       	smpsPSGAlterVol     $0B
000E26C6 8006                       	dc.b	nRst, $06
000E26C8 E1FF                       	smpsAlterNote       $FF
000E26CA 01                         	dc.b	$01
000E26CB E102                       	smpsAlterNote       $02
000E26CD 0101                       	dc.b	$01, $01
000E26CF E1FB                       	smpsAlterNote       $FB
000E26D1 01                         	dc.b	$01
000E26D2 ECF5                       	smpsPSGAlterVol     $F5
000E26D4 8E07                       	dc.b	nCs1, $07
000E26D6 EC0B                       	smpsPSGAlterVol     $0B
000E26D8 8004                       	dc.b	nRst, $04
000E26DA ECF5                       	smpsPSGAlterVol     $F5
000E26DC 8E06                       	dc.b	nCs1, $06
000E26DE EC04                       	smpsPSGAlterVol     $04
000E26E0 E701                       	dc.b	smpsNoAttack, $01
000E26E2 EC07                       	smpsPSGAlterVol     $07
000E26E4 8006                       	dc.b	nRst, $06
000E26E6 E101                       	smpsAlterNote       $01
000E26E8 01                         	dc.b	$01
000E26E9 E102                       	smpsAlterNote       $02
000E26EB 01                         	dc.b	$01
000E26EC E1FE                       	smpsAlterNote       $FE
000E26EE 01                         	dc.b	$01
000E26EF E1F8                       	smpsAlterNote       $F8
000E26F1 01                         	dc.b	$01
000E26F2 E1FB                       	smpsAlterNote       $FB
000E26F4 ECF5                       	smpsPSGAlterVol     $F5
000E26F6 8E06                       	dc.b	nCs1, $06
000E26F8 EC04                       	smpsPSGAlterVol     $04
000E26FA E701                       	dc.b	smpsNoAttack, $01
000E26FC EC07                       	smpsPSGAlterVol     $07
000E26FE 8003                       	dc.b	nRst, $03
000E2700 ECF5                       	smpsPSGAlterVol     $F5
000E2702 8E06                       	dc.b	nCs1, $06
000E2704 EC04                       	smpsPSGAlterVol     $04
000E2706 E701                       	dc.b	smpsNoAttack, $01
000E2708 EC07                       	smpsPSGAlterVol     $07
000E270A 8004                       	dc.b	nRst, $04
000E270C E1FC                       	smpsAlterNote       $FC
000E270E ECF5                       	smpsPSGAlterVol     $F5
000E2710 8F06                       	dc.b	nD1, $06
000E2712 EC0B                       	smpsPSGAlterVol     $0B
000E2714 8006                       	dc.b	nRst, $06
000E2716 E1FF                       	smpsAlterNote       $FF
000E2718 01                         	dc.b	$01
000E2719 E102                       	smpsAlterNote       $02
000E271B 0101                       	dc.b	$01, $01
000E271D E1FC                       	smpsAlterNote       $FC
000E271F 01                         	dc.b	$01
000E2720 E1F8                       	smpsAlterNote       $F8
000E2722 01                         	dc.b	$01
000E2723 E1F9                       	smpsAlterNote       $F9
000E2725 01                         	dc.b	$01
000E2726 E1FF                       	smpsAlterNote       $FF
000E2728 01                         	dc.b	$01
000E2729 E103                       	smpsAlterNote       $03
000E272B 01                         	dc.b	$01
000E272C E1FC                       	smpsAlterNote       $FC
000E272E ECF5                       	smpsPSGAlterVol     $F5
000E2730 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
000E2734 EC04                       	smpsPSGAlterVol     $04
000E2736 E701                       	dc.b	smpsNoAttack, $01
000E2738 EC07                       	smpsPSGAlterVol     $07
000E273A 8009                       	dc.b	nRst, $09
000E273C E1FF                       	smpsAlterNote       $FF
000E273E 01                         	dc.b	$01
000E273F E102                       	smpsAlterNote       $02
000E2741 0101                       	dc.b	$01, $01
000E2743 E1FC                       	smpsAlterNote       $FC
000E2745 01                         	dc.b	$01
000E2746 E1F8                       	smpsAlterNote       $F8
000E2748 01                         	dc.b	$01
000E2749 E1F9                       	smpsAlterNote       $F9
000E274B 01                         	dc.b	$01
000E274C E1FF                       	smpsAlterNote       $FF
000E274E 01                         	dc.b	$01
000E274F E103                       	smpsAlterNote       $03
000E2751 01                         	dc.b	$01
000E2752 E1FF                       	smpsAlterNote       $FF
000E2754 01                         	dc.b	$01
000E2755 E1FC                       	smpsAlterNote       $FC
000E2757 01                         	dc.b	$01
000E2758 E1F8                       	smpsAlterNote       $F8
000E275A 01                         	dc.b	$01
000E275B E1FC                       	smpsAlterNote       $FC
000E275D 01                         	dc.b	$01
000E275E E102                       	smpsAlterNote       $02
000E2760 01                         	dc.b	$01
000E2761 E103                       	smpsAlterNote       $03
000E2763 01                         	dc.b	$01
000E2764 E1FF                       	smpsAlterNote       $FF
000E2766 01                         	dc.b	$01
000E2767 E1FC                       	smpsAlterNote       $FC
000E2769 ECF5                       	smpsPSGAlterVol     $F5
000E276B 8F03                       	dc.b	nD1, $03
000E276D E1FB                       	smpsAlterNote       $FB
000E276F 8D06                       	dc.b	nC1, $06
000E2771 EC04                       	smpsPSGAlterVol     $04
000E2773 E701                       	dc.b	smpsNoAttack, $01
000E2775 EC07                       	smpsPSGAlterVol     $07
000E2777 8006                       	dc.b	nRst, $06
000E2779 E1FE                       	smpsAlterNote       $FE
000E277B 01                         	dc.b	$01
000E277C E102                       	smpsAlterNote       $02
000E277E 01                         	dc.b	$01
000E277F E101                       	smpsAlterNote       $01
000E2781 01                         	dc.b	$01
000E2782 E1FB                       	smpsAlterNote       $FB
000E2784 01                         	dc.b	$01
000E2785 E1F7                       	smpsAlterNote       $F7
000E2787 01                         	dc.b	$01
000E2788 E1FB                       	smpsAlterNote       $FB
000E278A 01                         	dc.b	$01
000E278B E1FE                       	smpsAlterNote       $FE
000E278D 01                         	dc.b	$01
000E278E E102                       	smpsAlterNote       $02
000E2790 01                         	dc.b	$01
000E2791 E1FB                       	smpsAlterNote       $FB
000E2793 ECF5                       	smpsPSGAlterVol     $F5
000E2795 8D03                       	dc.b	nC1, $03
000E2797 E1FC                       	smpsAlterNote       $FC
000E2799 8F0D                       	dc.b	nD1, $0D
000E279B E1FF                       	smpsAlterNote       $FF
000E279D E701                       	dc.b	smpsNoAttack, $01
000E279F E103                       	smpsAlterNote       $03
000E27A1 E701                       	dc.b	smpsNoAttack, $01
000E27A3 E1FF                       	smpsAlterNote       $FF
000E27A5 E701                       	dc.b	smpsNoAttack, $01
000E27A7 E1FC                       	smpsAlterNote       $FC
000E27A9 E701                       	dc.b	smpsNoAttack, $01
000E27AB E1F8                       	smpsAlterNote       $F8
000E27AD E701                       	dc.b	smpsNoAttack, $01
000E27AF E1FC                       	smpsAlterNote       $FC
000E27B1 E701                       	dc.b	smpsNoAttack, $01
000E27B3 E102                       	smpsAlterNote       $02
000E27B5 E701                       	dc.b	smpsNoAttack, $01
000E27B7 E103                       	smpsAlterNote       $03
000E27B9 E701                       	dc.b	smpsNoAttack, $01
000E27BB E1FF                       	smpsAlterNote       $FF
000E27BD E701                       	dc.b	smpsNoAttack, $01
000E27BF E1F9                       	smpsAlterNote       $F9
000E27C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E27C5 E1FC                       	smpsAlterNote       $FC
000E27C7 E701                       	dc.b	smpsNoAttack, $01
000E27C9 E102                       	smpsAlterNote       $02
000E27CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E27CF E1FF                       	smpsAlterNote       $FF
000E27D1 E701                       	dc.b	smpsNoAttack, $01
000E27D3 E1F9                       	smpsAlterNote       $F9
000E27D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E27D9 E1FF                       	smpsAlterNote       $FF
000E27DB EC04                       	smpsPSGAlterVol     $04
000E27DD E701                       	dc.b	smpsNoAttack, $01
000E27DF EC07                       	smpsPSGAlterVol     $07
000E27E1 E103                       	smpsAlterNote       $03
000E27E3 8001                       	dc.b	nRst, $01
000E27E5 E102                       	smpsAlterNote       $02
000E27E7 01                         	dc.b	$01
000E27E8 E1FB                       	smpsAlterNote       $FB
000E27EA 01                         	dc.b	$01
000E27EB E1F7                       	smpsAlterNote       $F7
000E27ED 01                         	dc.b	$01
000E27EE E1FB                       	smpsAlterNote       $FB
000E27F0 01                         	dc.b	$01
000E27F1 E1FF                       	smpsAlterNote       $FF
000E27F3 01                         	dc.b	$01
000E27F4 E103                       	smpsAlterNote       $03
000E27F6 01                         	dc.b	$01
000E27F7 E1FB                       	smpsAlterNote       $FB
000E27F9 ECF5                       	smpsPSGAlterVol     $F5
000E27FB 8E06                       	dc.b	nCs1, $06
000E27FD EC04                       	smpsPSGAlterVol     $04
000E27FF E701                       	dc.b	smpsNoAttack, $01
000E2801 EC07                       	smpsPSGAlterVol     $07
000E2803 8003                       	dc.b	nRst, $03
000E2805 ECF5                       	smpsPSGAlterVol     $F5
000E2807 8E06                       	dc.b	nCs1, $06
000E2809 EC04                       	smpsPSGAlterVol     $04
000E280B E701                       	dc.b	smpsNoAttack, $01
000E280D EC07                       	smpsPSGAlterVol     $07
000E280F 8006                       	dc.b	nRst, $06
000E2811 E1FE                       	smpsAlterNote       $FE
000E2813 01                         	dc.b	$01
000E2814 E102                       	smpsAlterNote       $02
000E2816 01                         	dc.b	$01
000E2817 E1FE                       	smpsAlterNote       $FE
000E2819 01                         	dc.b	$01
000E281A E1FC                       	smpsAlterNote       $FC
000E281C 01                         	dc.b	$01
000E281D ECF5                       	smpsPSGAlterVol     $F5
000E281F 8F06                       	dc.b	nD1, $06
000E2821 EC04                       	smpsPSGAlterVol     $04
000E2823 E701                       	dc.b	smpsNoAttack, $01
000E2825 EC07                       	smpsPSGAlterVol     $07
000E2827 8003                       	dc.b	nRst, $03
000E2829 ECF5                       	smpsPSGAlterVol     $F5
000E282B 8F07                       	dc.b	nD1, $07
000E282D EC0B                       	smpsPSGAlterVol     $0B
000E282F 8007                       	dc.b	nRst, $07
000E2831 E102                       	smpsAlterNote       $02
000E2833 0101                       	dc.b	$01, $01
000E2835 E1FB                       	smpsAlterNote       $FB
000E2837 01                         	dc.b	$01
000E2838 E1F8                       	smpsAlterNote       $F8
000E283A 01                         	dc.b	$01
000E283B E1FB                       	smpsAlterNote       $FB
000E283D ECF5                       	smpsPSGAlterVol     $F5
000E283F 8E06                       	dc.b	nCs1, $06
000E2841 EC0B                       	smpsPSGAlterVol     $0B
000E2843 8004                       	dc.b	nRst, $04
000E2845 ECF5                       	smpsPSGAlterVol     $F5
000E2847 8E06                       	dc.b	nCs1, $06
000E2849 EC04                       	smpsPSGAlterVol     $04
000E284B E701                       	dc.b	smpsNoAttack, $01
000E284D EC07                       	smpsPSGAlterVol     $07
000E284F 8006                       	dc.b	nRst, $06
000E2851 E1FE                       	smpsAlterNote       $FE
000E2853 01                         	dc.b	$01
000E2854 E102                       	smpsAlterNote       $02
000E2856 01                         	dc.b	$01
000E2857 E1FE                       	smpsAlterNote       $FE
000E2859 01                         	dc.b	$01
000E285A E1F9                       	smpsAlterNote       $F9
000E285C 01                         	dc.b	$01
000E285D E1FC                       	smpsAlterNote       $FC
000E285F ECF5                       	smpsPSGAlterVol     $F5
000E2861 8F06                       	dc.b	nD1, $06
000E2863 EC04                       	smpsPSGAlterVol     $04
000E2865 E701                       	dc.b	smpsNoAttack, $01
000E2867 EC07                       	smpsPSGAlterVol     $07
000E2869 8003                       	dc.b	nRst, $03
000E286B ECF5                       	smpsPSGAlterVol     $F5
000E286D 8F06                       	dc.b	nD1, $06
000E286F EC04                       	smpsPSGAlterVol     $04
000E2871 E701                       	dc.b	smpsNoAttack, $01
000E2873 EC07                       	smpsPSGAlterVol     $07
000E2875 8006                       	dc.b	nRst, $06
000E2877 E1FF                       	smpsAlterNote       $FF
000E2879 01                         	dc.b	$01
000E287A E103                       	smpsAlterNote       $03
000E287C 01                         	dc.b	$01
000E287D E102                       	smpsAlterNote       $02
000E287F 01                         	dc.b	$01
000E2880 E1FB                       	smpsAlterNote       $FB
000E2882 01                         	dc.b	$01
000E2883 ECF5                       	smpsPSGAlterVol     $F5
000E2885 8E07                       	dc.b	nCs1, $07
000E2887 EC0B                       	smpsPSGAlterVol     $0B
000E2889 8004                       	dc.b	nRst, $04
000E288B ECF5                       	smpsPSGAlterVol     $F5
000E288D 8E06                       	dc.b	nCs1, $06
000E288F EC0B                       	smpsPSGAlterVol     $0B
000E2891 8007                       	dc.b	nRst, $07
000E2893 E101                       	smpsAlterNote       $01
000E2895 0101                       	dc.b	$01, $01
000E2897 E1FE                       	smpsAlterNote       $FE
000E2899 01                         	dc.b	$01
000E289A E1F9                       	smpsAlterNote       $F9
000E289C 01                         	dc.b	$01
000E289D E1FC                       	smpsAlterNote       $FC
000E289F ECF5                       	smpsPSGAlterVol     $F5
000E28A1 8F06                       	dc.b	nD1, $06
000E28A3 EC04                       	smpsPSGAlterVol     $04
000E28A5 E701                       	dc.b	smpsNoAttack, $01
000E28A7 EC07                       	smpsPSGAlterVol     $07
000E28A9 8003                       	dc.b	nRst, $03
000E28AB ECF5                       	smpsPSGAlterVol     $F5
000E28AD 8F06                       	dc.b	nD1, $06
000E28AF EC04                       	smpsPSGAlterVol     $04
000E28B1 E701                       	dc.b	smpsNoAttack, $01
000E28B3 EC07                       	smpsPSGAlterVol     $07
000E28B5 8006                       	dc.b	nRst, $06
000E28B7 E1FF                       	smpsAlterNote       $FF
000E28B9 01                         	dc.b	$01
000E28BA E103                       	smpsAlterNote       $03
000E28BC 01                         	dc.b	$01
000E28BD E1FF                       	smpsAlterNote       $FF
000E28BF 01                         	dc.b	$01
000E28C0 E1FB                       	smpsAlterNote       $FB
000E28C2 01                         	dc.b	$01
000E28C3 ECF5                       	smpsPSGAlterVol     $F5
000E28C5 8E06                       	dc.b	nCs1, $06
000E28C7 EC04                       	smpsPSGAlterVol     $04
000E28C9 E701                       	dc.b	smpsNoAttack, $01
000E28CB EC07                       	smpsPSGAlterVol     $07
000E28CD 8003                       	dc.b	nRst, $03
000E28CF ECF5                       	smpsPSGAlterVol     $F5
000E28D1 8E07                       	dc.b	nCs1, $07
000E28D3 E1FF                       	smpsAlterNote       $FF
000E28D5 9B06                       	dc.b	nD2, $06
000E28D7 EC04                       	smpsPSGAlterVol     $04
000E28D9 E701                       	dc.b	smpsNoAttack, $01
000E28DB ECFC                       	smpsPSGAlterVol     $FC
000E28DD 9B03                       	dc.b	nD2, $03
000E28DF EC04                       	smpsPSGAlterVol     $04
000E28E1 E701                       	dc.b	smpsNoAttack, $01
000E28E3 ECFC                       	smpsPSGAlterVol     $FC
000E28E5 9B02                       	dc.b	nD2, $02
000E28E7 EC04                       	smpsPSGAlterVol     $04
000E28E9 E701                       	dc.b	smpsNoAttack, $01
000E28EB ECFC                       	smpsPSGAlterVol     $FC
000E28ED E1FE                       	smpsAlterNote       $FE
000E28EF 9A03                       	dc.b	nCs2, $03
000E28F1 EC0B                       	smpsPSGAlterVol     $0B
000E28F3 800A                       	dc.b	nRst, $0A
000E28F5 E102                       	smpsAlterNote       $02
000E28F7 01                         	dc.b	$01
000E28F8 E10A                       	smpsAlterNote       $0A
000E28FA 01                         	dc.b	$01
000E28FB E102                       	smpsAlterNote       $02
000E28FD 01                         	dc.b	$01
000E28FE E1F7                       	smpsAlterNote       $F7
000E2900 01                         	dc.b	$01
000E2901 E10A                       	smpsAlterNote       $0A
000E2903 01                         	dc.b	$01
000E2904 E1FC                       	smpsAlterNote       $FC
000E2906 01                         	dc.b	$01
000E2907 E108                       	smpsAlterNote       $08
000E2909 0101                       	dc.b	$01, $01
000E290B E102                       	smpsAlterNote       $02
000E290D 01                         	dc.b	$01
000E290E E1F7                       	smpsAlterNote       $F7
000E2910 0101                       	dc.b	$01, $01
000E2912 E1FC                       	smpsAlterNote       $FC
000E2914 ECF5                       	smpsPSGAlterVol     $F5
000E2916 8F06                       	dc.b	nD1, $06
000E2918 EC04                       	smpsPSGAlterVol     $04
000E291A E701                       	dc.b	smpsNoAttack, $01
000E291C EC07                       	smpsPSGAlterVol     $07
000E291E 8003                       	dc.b	nRst, $03
000E2920 ECF5                       	smpsPSGAlterVol     $F5
000E2922 8F06                       	dc.b	nD1, $06
000E2924 EC04                       	smpsPSGAlterVol     $04
000E2926 E701                       	dc.b	smpsNoAttack, $01
000E2928 EC07                       	smpsPSGAlterVol     $07
000E292A 8006                       	dc.b	nRst, $06
000E292C E1FF                       	smpsAlterNote       $FF
000E292E 01                         	dc.b	$01
000E292F E102                       	smpsAlterNote       $02
000E2931 01                         	dc.b	$01
000E2932 E101                       	smpsAlterNote       $01
000E2934 01                         	dc.b	$01
000E2935 E1FC                       	smpsAlterNote       $FC
000E2937 01                         	dc.b	$01
000E2938 ECF5                       	smpsPSGAlterVol     $F5
000E293A 9007                       	dc.b	nEb1, $07
000E293C EC0B                       	smpsPSGAlterVol     $0B
000E293E 8004                       	dc.b	nRst, $04
000E2940 ECF5                       	smpsPSGAlterVol     $F5
000E2942 9006                       	dc.b	nEb1, $06
000E2944 EC0B                       	smpsPSGAlterVol     $0B
000E2946 8007                       	dc.b	nRst, $07
000E2948 E103                       	smpsAlterNote       $03
000E294A 0101                       	dc.b	$01, $01
000E294C E1FF                       	smpsAlterNote       $FF
000E294E 01                         	dc.b	$01
000E294F E1F9                       	smpsAlterNote       $F9
000E2951 01                         	dc.b	$01
000E2952 E1FC                       	smpsAlterNote       $FC
000E2954 ECF5                       	smpsPSGAlterVol     $F5
000E2956 8F06                       	dc.b	nD1, $06
000E2958 EC04                       	smpsPSGAlterVol     $04
000E295A E701                       	dc.b	smpsNoAttack, $01
000E295C EC07                       	smpsPSGAlterVol     $07
000E295E 8003                       	dc.b	nRst, $03
000E2960 ECF5                       	smpsPSGAlterVol     $F5
000E2962 8F06                       	dc.b	nD1, $06
000E2964 EC04                       	smpsPSGAlterVol     $04
000E2966 E701                       	dc.b	smpsNoAttack, $01
000E2968 EC07                       	smpsPSGAlterVol     $07
000E296A 8006                       	dc.b	nRst, $06
000E296C E1FF                       	smpsAlterNote       $FF
000E296E 01                         	dc.b	$01
000E296F E103                       	smpsAlterNote       $03
000E2971 01                         	dc.b	$01
000E2972 E1FF                       	smpsAlterNote       $FF
000E2974 01                         	dc.b	$01
000E2975 E1F9                       	smpsAlterNote       $F9
000E2977 01                         	dc.b	$01
000E2978 E1FC                       	smpsAlterNote       $FC
000E297A ECF5                       	smpsPSGAlterVol     $F5
000E297C 8F06                       	dc.b	nD1, $06
000E297E EC04                       	smpsPSGAlterVol     $04
000E2980 E701                       	dc.b	smpsNoAttack, $01
000E2982 EC07                       	smpsPSGAlterVol     $07
000E2984 8003                       	dc.b	nRst, $03
000E2986 ECF5                       	smpsPSGAlterVol     $F5
000E2988 8F07                       	dc.b	nD1, $07
000E298A EC0B                       	smpsPSGAlterVol     $0B
000E298C 8006                       	dc.b	nRst, $06
000E298E E1FF                       	smpsAlterNote       $FF
000E2990 01                         	dc.b	$01
000E2991 E102                       	smpsAlterNote       $02
000E2993 0101                       	dc.b	$01, $01
000E2995 E1FC                       	smpsAlterNote       $FC
000E2997 01                         	dc.b	$01
000E2998 ECF5                       	smpsPSGAlterVol     $F5
000E299A 8F07                       	dc.b	nD1, $07
000E299C EC0B                       	smpsPSGAlterVol     $0B
000E299E 8004                       	dc.b	nRst, $04
000E29A0 ECF5                       	smpsPSGAlterVol     $F5
000E29A2 8F06                       	dc.b	nD1, $06
000E29A4 EC04                       	smpsPSGAlterVol     $04
000E29A6 E701                       	dc.b	smpsNoAttack, $01
000E29A8 EC07                       	smpsPSGAlterVol     $07
000E29AA 8006                       	dc.b	nRst, $06
000E29AC E101                       	smpsAlterNote       $01
000E29AE 01                         	dc.b	$01
000E29AF E102                       	smpsAlterNote       $02
000E29B1 01                         	dc.b	$01
000E29B2 E1FF                       	smpsAlterNote       $FF
000E29B4 01                         	dc.b	$01
000E29B5 E1F9                       	smpsAlterNote       $F9
000E29B7 01                         	dc.b	$01
000E29B8 E1FC                       	smpsAlterNote       $FC
000E29BA ECF5                       	smpsPSGAlterVol     $F5
000E29BC 9006                       	dc.b	nEb1, $06
000E29BE EC04                       	smpsPSGAlterVol     $04
000E29C0 E701                       	dc.b	smpsNoAttack, $01
000E29C2 EC07                       	smpsPSGAlterVol     $07
000E29C4 8003                       	dc.b	nRst, $03
000E29C6 ECF5                       	smpsPSGAlterVol     $F5
000E29C8 9006                       	dc.b	nEb1, $06
000E29CA EC04                       	smpsPSGAlterVol     $04
000E29CC E701                       	dc.b	smpsNoAttack, $01
000E29CE EC07                       	smpsPSGAlterVol     $07
000E29D0 8006                       	dc.b	nRst, $06
000E29D2 E100                       	smpsAlterNote       $00
000E29D4 01                         	dc.b	$01
000E29D5 E102                       	smpsAlterNote       $02
000E29D7 01                         	dc.b	$01
000E29D8 E100                       	smpsAlterNote       $00
000E29DA 01                         	dc.b	$01
000E29DB E1FF                       	smpsAlterNote       $FF
000E29DD 01                         	dc.b	$01
000E29DE ECF5                       	smpsPSGAlterVol     $F5
000E29E0 9B06                       	dc.b	nD2, $06
000E29E2 EC04                       	smpsPSGAlterVol     $04
000E29E4 E701                       	dc.b	smpsNoAttack, $01
000E29E6 EC07                       	smpsPSGAlterVol     $07
000E29E8 8003                       	dc.b	nRst, $03
000E29EA ECF5                       	smpsPSGAlterVol     $F5
000E29EC 9B07                       	dc.b	nD2, $07
000E29EE EC0B                       	smpsPSGAlterVol     $0B
000E29F0 8007                       	dc.b	nRst, $07
000E29F2 E105                       	smpsAlterNote       $05
000E29F4 0101                       	dc.b	$01, $01
000E29F6 E1FF                       	smpsAlterNote       $FF
000E29F8 01                         	dc.b	$01
000E29F9 E1FC                       	smpsAlterNote       $FC
000E29FB 01                         	dc.b	$01
000E29FC E1FF                       	smpsAlterNote       $FF
000E29FE ECF5                       	smpsPSGAlterVol     $F5
000E2A00 9B06                       	dc.b	nD2, $06
000E2A02 EC0B                       	smpsPSGAlterVol     $0B
000E2A04 8004                       	dc.b	nRst, $04
000E2A06 ECF5                       	smpsPSGAlterVol     $F5
000E2A08 9B06                       	dc.b	nD2, $06
000E2A0A EC04                       	smpsPSGAlterVol     $04
000E2A0C E701                       	dc.b	smpsNoAttack, $01
000E2A0E EC07                       	smpsPSGAlterVol     $07
000E2A10 8006                       	dc.b	nRst, $06
000E2A12 E102                       	smpsAlterNote       $02
000E2A14 01                         	dc.b	$01
000E2A15 E106                       	smpsAlterNote       $06
000E2A17 01                         	dc.b	$01
000E2A18 E102                       	smpsAlterNote       $02
000E2A1A 01                         	dc.b	$01
000E2A1B E1FC                       	smpsAlterNote       $FC
000E2A1D 01                         	dc.b	$01
000E2A1E E1FF                       	smpsAlterNote       $FF
000E2A20 ECF5                       	smpsPSGAlterVol     $F5
000E2A22 9B06                       	dc.b	nD2, $06
000E2A24 EC04                       	smpsPSGAlterVol     $04
000E2A26 E701                       	dc.b	smpsNoAttack, $01
000E2A28 EC07                       	smpsPSGAlterVol     $07
000E2A2A 8003                       	dc.b	nRst, $03
000E2A2C ECF5                       	smpsPSGAlterVol     $F5
000E2A2E 9B07                       	dc.b	nD2, $07
000E2A30 EC0B                       	smpsPSGAlterVol     $0B
000E2A32 8006                       	dc.b	nRst, $06
000E2A34 E102                       	smpsAlterNote       $02
000E2A36 01                         	dc.b	$01
000E2A37 E105                       	smpsAlterNote       $05
000E2A39 0101                       	dc.b	$01, $01
000E2A3B E1FF                       	smpsAlterNote       $FF
000E2A3D 01                         	dc.b	$01
000E2A3E ECF5                       	smpsPSGAlterVol     $F5
000E2A40 9B07                       	dc.b	nD2, $07
000E2A42 EC0B                       	smpsPSGAlterVol     $0B
000E2A44 8004                       	dc.b	nRst, $04
000E2A46 ECF5                       	smpsPSGAlterVol     $F5
000E2A48 9B06                       	dc.b	nD2, $06
000E2A4A EC04                       	smpsPSGAlterVol     $04
000E2A4C E701                       	dc.b	smpsNoAttack, $01
000E2A4E EC07                       	smpsPSGAlterVol     $07
000E2A50 8006                       	dc.b	nRst, $06
000E2A52 E105                       	smpsAlterNote       $05
000E2A54 0101                       	dc.b	$01, $01
000E2A56 E102                       	smpsAlterNote       $02
000E2A58 01                         	dc.b	$01
000E2A59 E1FC                       	smpsAlterNote       $FC
000E2A5B 01                         	dc.b	$01
000E2A5C E1FF                       	smpsAlterNote       $FF
000E2A5E ECF5                       	smpsPSGAlterVol     $F5
000E2A60 9B06                       	dc.b	nD2, $06
000E2A62 EC04                       	smpsPSGAlterVol     $04
000E2A64 E701                       	dc.b	smpsNoAttack, $01
000E2A66 EC07                       	smpsPSGAlterVol     $07
000E2A68 8003                       	dc.b	nRst, $03
000E2A6A ECF5                       	smpsPSGAlterVol     $F5
000E2A6C 9B06                       	dc.b	nD2, $06
000E2A6E EC04                       	smpsPSGAlterVol     $04
000E2A70 E701                       	dc.b	smpsNoAttack, $01
000E2A72 EC07                       	smpsPSGAlterVol     $07
000E2A74 8006                       	dc.b	nRst, $06
000E2A76 E102                       	smpsAlterNote       $02
000E2A78 01                         	dc.b	$01
000E2A79 E106                       	smpsAlterNote       $06
000E2A7B 01                         	dc.b	$01
000E2A7C E102                       	smpsAlterNote       $02
000E2A7E 01                         	dc.b	$01
000E2A7F E1FF                       	smpsAlterNote       $FF
000E2A81 01                         	dc.b	$01
000E2A82 ECF5                       	smpsPSGAlterVol     $F5
000E2A84 9B06                       	dc.b	nD2, $06
000E2A86 EC04                       	smpsPSGAlterVol     $04
000E2A88 E701                       	dc.b	smpsNoAttack, $01
000E2A8A EC07                       	smpsPSGAlterVol     $07
000E2A8C 8003                       	dc.b	nRst, $03
000E2A8E ECF5                       	smpsPSGAlterVol     $F5
000E2A90 9B07                       	dc.b	nD2, $07
000E2A92 EC0B                       	smpsPSGAlterVol     $0B
000E2A94 8007                       	dc.b	nRst, $07
000E2A96 E107                       	smpsAlterNote       $07
000E2A98 0101                       	dc.b	$01, $01
000E2A9A E1FE                       	smpsAlterNote       $FE
000E2A9C 01                         	dc.b	$01
000E2A9D E1FA                       	smpsAlterNote       $FA
000E2A9F 0101                       	dc.b	$01, $01
000E2AA1 E103                       	smpsAlterNote       $03
000E2AA3 01                         	dc.b	$01
000E2AA4 E109                       	smpsAlterNote       $09
000E2AA6 01                         	dc.b	$01
000E2AA7 E107                       	smpsAlterNote       $07
000E2AA9 01                         	dc.b	$01
000E2AAA E1FE                       	smpsAlterNote       $FE
000E2AAC 01                         	dc.b	$01
000E2AAD E108                       	smpsAlterNote       $08
000E2AAF 01                         	dc.b	$01
000E2AB0 E1FD                       	smpsAlterNote       $FD
000E2AB2 ECF5                       	smpsPSGAlterVol     $F5
000E2AB4 940E                       	dc.b	nG1, $0E
000E2AB6 E103                       	smpsAlterNote       $03
000E2AB8 EC0B                       	smpsPSGAlterVol     $0B
000E2ABA 8001 01                    	dc.b	nRst, $01, $01
000E2ABD E1FD                       	smpsAlterNote       $FD
000E2ABF 01                         	dc.b	$01
000E2AC0 E1FB                       	smpsAlterNote       $FB
000E2AC2 0101                       	dc.b	$01, $01
000E2AC4 E100                       	smpsAlterNote       $00
000E2AC6 01                         	dc.b	$01
000E2AC7 E103                       	smpsAlterNote       $03
000E2AC9 01                         	dc.b	$01
000E2ACA E100                       	smpsAlterNote       $00
000E2ACC 01                         	dc.b	$01
000E2ACD E1FD                       	smpsAlterNote       $FD
000E2ACF 01                         	dc.b	$01
000E2AD0 E1FA                       	smpsAlterNote       $FA
000E2AD2 01                         	dc.b	$01
000E2AD3 E1FD                       	smpsAlterNote       $FD
000E2AD5 01                         	dc.b	$01
000E2AD6 E103                       	smpsAlterNote       $03
000E2AD8 0101                       	dc.b	$01, $01
000E2ADA E100                       	smpsAlterNote       $00
000E2ADC 01                         	dc.b	$01
000E2ADD E1FE                       	smpsAlterNote       $FE
000E2ADF ECF5                       	smpsPSGAlterVol     $F5
000E2AE1 960D                       	dc.b	nA1, $0D
000E2AE3 E104                       	smpsAlterNote       $04
000E2AE5 EC0B                       	smpsPSGAlterVol     $0B
000E2AE7 8001 01                    	dc.b	nRst, $01, $01
000E2AEA E101                       	smpsAlterNote       $01
000E2AEC 01                         	dc.b	$01
000E2AED E1FB                       	smpsAlterNote       $FB
000E2AEF 0101                       	dc.b	$01, $01
000E2AF1 E1FE                       	smpsAlterNote       $FE
000E2AF3 01                         	dc.b	$01
000E2AF4 E104                       	smpsAlterNote       $04
000E2AF6 0101                       	dc.b	$01, $01
000E2AF8 E1FE                       	smpsAlterNote       $FE
000E2AFA 01                         	dc.b	$01
000E2AFB E1FB                       	smpsAlterNote       $FB
000E2AFD 0101                       	dc.b	$01, $01
000E2AFF E101                       	smpsAlterNote       $01
000E2B01 01                         	dc.b	$01
000E2B02 E104                       	smpsAlterNote       $04
000E2B04 0101                       	dc.b	$01, $01
000E2B06 E1FE                       	smpsAlterNote       $FE
000E2B08 ECF5                       	smpsPSGAlterVol     $F5
000E2B0A 970D                       	dc.b	nBb1, $0D
000E2B0C E101                       	smpsAlterNote       $01
000E2B0E EC04                       	smpsPSGAlterVol     $04
000E2B10 E701                       	dc.b	smpsNoAttack, $01
000E2B12 EC07                       	smpsPSGAlterVol     $07
000E2B14 E104                       	smpsAlterNote       $04
000E2B16 8001                       	dc.b	nRst, $01
000E2B18 E103                       	smpsAlterNote       $03
000E2B1A 01                         	dc.b	$01
000E2B1B E1FE                       	smpsAlterNote       $FE
000E2B1D 01                         	dc.b	$01
000E2B1E E1FA                       	smpsAlterNote       $FA
000E2B20 01                         	dc.b	$01
000E2B21 E1FE                       	smpsAlterNote       $FE
000E2B23 01                         	dc.b	$01
000E2B24 E101                       	smpsAlterNote       $01
000E2B26 01                         	dc.b	$01
000E2B27 E104                       	smpsAlterNote       $04
000E2B29 01                         	dc.b	$01
000E2B2A E101                       	smpsAlterNote       $01
000E2B2C 01                         	dc.b	$01
000E2B2D E1FB                       	smpsAlterNote       $FB
000E2B2F 01                         	dc.b	$01
000E2B30 E1FA                       	smpsAlterNote       $FA
000E2B32 01                         	dc.b	$01
000E2B33 E1FE                       	smpsAlterNote       $FE
000E2B35 01                         	dc.b	$01
000E2B36 E103                       	smpsAlterNote       $03
000E2B38 0101                       	dc.b	$01, $01
000E2B3A E101                       	smpsAlterNote       $01
000E2B3C 01                         	dc.b	$01
000E2B3D E1FE                       	smpsAlterNote       $FE
000E2B3F ECF5                       	smpsPSGAlterVol     $F5
000E2B41 990D                       	dc.b	nC2, $0D
000E2B43 E104                       	smpsAlterNote       $04
000E2B45 EC0B                       	smpsPSGAlterVol     $0B
000E2B47 8001 01                    	dc.b	nRst, $01, $01
000E2B4A E102                       	smpsAlterNote       $02
000E2B4C 01                         	dc.b	$01
000E2B4D E1FC                       	smpsAlterNote       $FC
000E2B4F 0101                       	dc.b	$01, $01
000E2B51 E102                       	smpsAlterNote       $02
000E2B53 01                         	dc.b	$01
000E2B54 E104                       	smpsAlterNote       $04
000E2B56 01                         	dc.b	$01
000E2B57 E1FF                       	smpsAlterNote       $FF
000E2B59 ECF5                       	smpsPSGAlterVol     $F5
000E2B5B 9B06                       	dc.b	nD2, $06
000E2B5D EC04                       	smpsPSGAlterVol     $04
000E2B5F E701                       	dc.b	smpsNoAttack, $01
000E2B61 EC07                       	smpsPSGAlterVol     $07
000E2B63 8003                       	dc.b	nRst, $03
000E2B65 ECF5                       	smpsPSGAlterVol     $F5
000E2B67 9B07                       	dc.b	nD2, $07
000E2B69 EC0B                       	smpsPSGAlterVol     $0B
000E2B6B 8006                       	dc.b	nRst, $06
000E2B6D E101                       	smpsAlterNote       $01
000E2B6F 01                         	dc.b	$01
000E2B70 E104                       	smpsAlterNote       $04
000E2B72 0101                       	dc.b	$01, $01
000E2B74 E1FE                       	smpsAlterNote       $FE
000E2B76 01                         	dc.b	$01
000E2B77 E1FC                       	smpsAlterNote       $FC
000E2B79 01                         	dc.b	$01
000E2B7A E1FE                       	smpsAlterNote       $FE
000E2B7C ECF5                       	smpsPSGAlterVol     $F5
000E2B7E 9C06                       	dc.b	nEb2, $06
000E2B80 EC0B                       	smpsPSGAlterVol     $0B
000E2B82 8004                       	dc.b	nRst, $04
000E2B84 ECF5                       	smpsPSGAlterVol     $F5
000E2B86 9C06                       	dc.b	nEb2, $06
000E2B88 EC04                       	smpsPSGAlterVol     $04
000E2B8A E701                       	dc.b	smpsNoAttack, $01
000E2B8C EC07                       	smpsPSGAlterVol     $07
000E2B8E 8006                       	dc.b	nRst, $06
000E2B90 E105                       	smpsAlterNote       $05
000E2B92 01                         	dc.b	$01
000E2B93 E106                       	smpsAlterNote       $06
000E2B95 01                         	dc.b	$01
000E2B96 E102                       	smpsAlterNote       $02
000E2B98 01                         	dc.b	$01
000E2B99 E1FB                       	smpsAlterNote       $FB
000E2B9B 01                         	dc.b	$01
000E2B9C E1FF                       	smpsAlterNote       $FF
000E2B9E ECF5                       	smpsPSGAlterVol     $F5
000E2BA0 9B06                       	dc.b	nD2, $06
000E2BA2 EC04                       	smpsPSGAlterVol     $04
000E2BA4 E701                       	dc.b	smpsNoAttack, $01
000E2BA6 EC07                       	smpsPSGAlterVol     $07
000E2BA8 8003                       	dc.b	nRst, $03
000E2BAA ECF5                       	smpsPSGAlterVol     $F5
000E2BAC 9B06                       	dc.b	nD2, $06
000E2BAE EC04                       	smpsPSGAlterVol     $04
000E2BB0 E701                       	dc.b	smpsNoAttack, $01
000E2BB2 EC07                       	smpsPSGAlterVol     $07
000E2BB4 8006                       	dc.b	nRst, $06
000E2BB6 E101                       	smpsAlterNote       $01
000E2BB8 01                         	dc.b	$01
000E2BB9 E105                       	smpsAlterNote       $05
000E2BBB 01                         	dc.b	$01
000E2BBC E104                       	smpsAlterNote       $04
000E2BBE 01                         	dc.b	$01
000E2BBF E1FE                       	smpsAlterNote       $FE
000E2BC1 01                         	dc.b	$01
000E2BC2 ECF5                       	smpsPSGAlterVol     $F5
000E2BC4 9C07                       	dc.b	nEb2, $07
000E2BC6 EC0B                       	smpsPSGAlterVol     $0B
000E2BC8 8004                       	dc.b	nRst, $04
000E2BCA ECF5                       	smpsPSGAlterVol     $F5
000E2BCC 9C06                       	dc.b	nEb2, $06
000E2BCE EC0B                       	smpsPSGAlterVol     $0B
000E2BD0 8007                       	dc.b	nRst, $07
000E2BD2 E105                       	smpsAlterNote       $05
000E2BD4 0101                       	dc.b	$01, $01
000E2BD6 E102                       	smpsAlterNote       $02
000E2BD8 01                         	dc.b	$01
000E2BD9 E1FB                       	smpsAlterNote       $FB
000E2BDB 01                         	dc.b	$01
000E2BDC E1FF                       	smpsAlterNote       $FF
000E2BDE ECF5                       	smpsPSGAlterVol     $F5
000E2BE0 9B06                       	dc.b	nD2, $06
000E2BE2 EC04                       	smpsPSGAlterVol     $04
000E2BE4 E701                       	dc.b	smpsNoAttack, $01
000E2BE6 EC07                       	smpsPSGAlterVol     $07
000E2BE8 8003                       	dc.b	nRst, $03
000E2BEA ECF5                       	smpsPSGAlterVol     $F5
000E2BEC 9B06                       	dc.b	nD2, $06
000E2BEE EC04                       	smpsPSGAlterVol     $04
000E2BF0 E701                       	dc.b	smpsNoAttack, $01
000E2BF2 EC07                       	smpsPSGAlterVol     $07
000E2BF4 8006                       	dc.b	nRst, $06
000E2BF6 E101                       	smpsAlterNote       $01
000E2BF8 01                         	dc.b	$01
000E2BF9 E105                       	smpsAlterNote       $05
000E2BFB 01                         	dc.b	$01
000E2BFC E101                       	smpsAlterNote       $01
000E2BFE 01                         	dc.b	$01
000E2BFF E1FC                       	smpsAlterNote       $FC
000E2C01 01                         	dc.b	$01
000E2C02 E1FE                       	smpsAlterNote       $FE
000E2C04 ECF5                       	smpsPSGAlterVol     $F5
000E2C06 9C06                       	dc.b	nEb2, $06
000E2C08 EC04                       	smpsPSGAlterVol     $04
000E2C0A E701                       	dc.b	smpsNoAttack, $01
000E2C0C EC07                       	smpsPSGAlterVol     $07
000E2C0E 8003                       	dc.b	nRst, $03
000E2C10 ECF5                       	smpsPSGAlterVol     $F5
000E2C12 9C07                       	dc.b	nEb2, $07
000E2C14 EC0B                       	smpsPSGAlterVol     $0B
000E2C16 8006                       	dc.b	nRst, $06
000E2C18 E102                       	smpsAlterNote       $02
000E2C1A 01                         	dc.b	$01
000E2C1B E105                       	smpsAlterNote       $05
000E2C1D 0101                       	dc.b	$01, $01
000E2C1F E1FF                       	smpsAlterNote       $FF
000E2C21 01                         	dc.b	$01
000E2C22 ECF5                       	smpsPSGAlterVol     $F5
000E2C24 9B07                       	dc.b	nD2, $07
000E2C26 EC0B                       	smpsPSGAlterVol     $0B
000E2C28 8004                       	dc.b	nRst, $04
000E2C2A ECF5                       	smpsPSGAlterVol     $F5
000E2C2C 9B06                       	dc.b	nD2, $06
000E2C2E EC04                       	smpsPSGAlterVol     $04
000E2C30 E701                       	dc.b	smpsNoAttack, $01
000E2C32 EC07                       	smpsPSGAlterVol     $07
000E2C34 8002                       	dc.b	nRst, $02
000E2C36 E1FC                       	smpsAlterNote       $FC
000E2C38 ECF5                       	smpsPSGAlterVol     $F5
000E2C3A 9006                       	dc.b	nEb1, $06
000E2C3C EC04                       	smpsPSGAlterVol     $04
000E2C3E E701                       	dc.b	smpsNoAttack, $01
000E2C40 ECFC                       	smpsPSGAlterVol     $FC
000E2C42 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
000E2C46 EC04                       	smpsPSGAlterVol     $04
000E2C48 E701                       	dc.b	smpsNoAttack, $01
000E2C4A E1FD                       	smpsAlterNote       $FD
000E2C4C ECFC                       	smpsPSGAlterVol     $FC
000E2C4E 9402                       	dc.b	nG1, $02
000E2C50 EC04                       	smpsPSGAlterVol     $04
000E2C52 E701                       	dc.b	smpsNoAttack, $01
000E2C54 E1FE                       	smpsAlterNote       $FE
000E2C56 ECFC                       	smpsPSGAlterVol     $FC
000E2C58 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
000E2C5C EC04                       	smpsPSGAlterVol     $04
000E2C5E E701                       	dc.b	smpsNoAttack, $01
000E2C60 EC07                       	smpsPSGAlterVol     $07
000E2C62 8008                       	dc.b	nRst, $08
000E2C64 F6F4 F3                    	smpsJump            music84_Jump06
000E2C67                            
000E2C67                            ; PSG3 Data
000E2C67                            music84_PSG3:
000E2C67 F500                       	smpsPSGvoice        $00
000E2C69 E1FF                       	smpsAlterNote       $FF
000E2C6B EC0F                       	smpsPSGAlterVol     $0F
000E2C6D 803A                       	dc.b	nRst, $3A
000E2C6F                            
000E2C6F                            music84_Jump05:
000E2C6F 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
000E2C7B 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
000E2C85 F6FF E8                    	smpsJump            music84_Jump05
000E2C88                            
000E2C88                            ; DAC Data
000E2C88                            music84_DAC:
000E2C88 E0C0                       	smpsPan             panCenter, $00
000E2C8A 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
000E2C96 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
000E2CA2 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
000E2CAE 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
000E2CBA 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
000E2CC6 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
000E2CD2 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
000E2CDE 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
000E2CEA 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
000E2CF6 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
000E2D02 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
000E2D0E 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
000E2D1A 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
000E2D26 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
000E2D32 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
000E2D3E 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
000E2D4A 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
000E2D56 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
000E2D62 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
000E2D6E 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
000E2D7A 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000E2D86 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
000E2D92 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
000E2D9E 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
000E2DAA 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
000E2DB6 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
000E2DC2 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
000E2DCE 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
000E2DDA 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
000E2DE6 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
000E2DF2 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000E2DFE 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
000E2E0A 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
000E2E16 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
000E2E22 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
000E2E2E 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000E2E3A 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
000E2E46 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
000E2E52 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
000E2E5E 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
000E2E6A 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
000E2E76 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
000E2E82 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
000E2E8E 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
000E2E9A 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
000E2EA6 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000E2EB2 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
000E2EBE 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
000E2ECA 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
000E2ED6 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
000E2EE2 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
000E2EEE 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
000E2EFA 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
000E2F06 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
000E2F12 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000E2F1E 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
000E2F2A 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
000E2F36 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
000E2F42 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
000E2F4E 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000E2F5A 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
000E2F66 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
000E2F72 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
000E2F7E 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
000E2F8A 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
000E2F96 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
000E2FA2 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
000E2FAE 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
000E2FBA 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
000E2FC6 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
000E2FD2 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
000E2FDE 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
000E2FEA 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
000E2FF6 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
000E3002 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
000E300E E0C0                       	smpsPan             panCenter, $00
000E3010 F2                         	smpsStop
000E3011                            
000E3011                            music84_Voices:
000E3011                            ;	Voice $00
000E3011                            ;	$3D
000E3011                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
000E3011                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
000E3011                            	smpsVcAlgorithm     $05
000E3011                            	smpsVcFeedback      $07
000E3011                            	smpsVcUnusedBits    $00
000E3011                            	smpsVcDetune        $05, $04, $03, $04
000E3011                            	smpsVcCoarseFreq    $01, $01, $01, $01
000E3011                            	smpsVcRateScale     $00, $00, $00, $00
000E3011                            	smpsVcAttackRate    $11, $11, $11, $11
000E3011                            	smpsVcAmpMod        $00, $00, $00, $00
000E3011                            	smpsVcDecayRate1    $00, $00, $00, $0A
000E3011                            	smpsVcDecayRate2    $00, $00, $00, $0B
000E3011                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000E3011                            	smpsVcReleaseRate   $08, $08, $08, $07
000E3011 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
000E302A                            
000E302A                            ;	Voice $01
000E302A                            ;	$04
000E302A                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
000E302A                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
000E302A                            	smpsVcAlgorithm     $04
000E302A                            	smpsVcFeedback      $00
000E302A                            	smpsVcUnusedBits    $00
000E302A                            	smpsVcDetune        $04, $03, $04, $05
000E302A                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
000E302A                            	smpsVcRateScale     $00, $01, $00, $01
000E302A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000E302A                            	smpsVcAmpMod        $00, $00, $00, $00
000E302A                            	smpsVcDecayRate1    $0E, $00, $0E, $00
000E302A                            	smpsVcDecayRate2    $05, $00, $05, $00
000E302A                            	smpsVcDecayLevel    $08, $0E, $08, $0E
000E302A                            	smpsVcReleaseRate   $06, $06, $06, $06
000E302A 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
000E3043                            
000E3043                            ;	Voice $02
000E3043                            ;	$30
000E3043                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
000E3043                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
000E3043                            	smpsVcAlgorithm     $00
000E3043                            	smpsVcFeedback      $06
000E3043                            	smpsVcUnusedBits    $00
000E3043                            	smpsVcDetune        $04, $02, $00, $06
000E3043                            	smpsVcCoarseFreq    $01, $01, $03, $0C
000E3043                            	smpsVcRateScale     $00, $00, $00, $00
000E3043                            	smpsVcAttackRate    $1F, $1F, $1F, $14
000E3043                            	smpsVcAmpMod        $00, $00, $00, $00
000E3043                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
000E3043                            	smpsVcDecayRate2    $01, $01, $01, $01
000E3043                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
000E3043                            	smpsVcReleaseRate   $09, $0B, $08, $0F
000E3043 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
000E305C                            
000E305C                            ;	Voice $03
000E305C                            ;	$3A
000E305C                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
000E305C                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
000E305C                            	smpsVcAlgorithm     $02
000E305C                            	smpsVcFeedback      $07
000E305C                            	smpsVcUnusedBits    $00
000E305C                            	smpsVcDetune        $04, $06, $02, $00
000E305C                            	smpsVcCoarseFreq    $01, $01, $01, $01
000E305C                            	smpsVcRateScale     $00, $00, $00, $00
000E305C                            	smpsVcAttackRate    $18, $19, $14, $14
000E305C                            	smpsVcAmpMod        $00, $00, $00, $00
000E305C                            	smpsVcDecayRate1    $09, $0D, $09, $09
000E305C                            	smpsVcDecayRate2    $00, $00, $00, $00
000E305C                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
000E305C                            	smpsVcReleaseRate   $08, $0F, $0F, $07
000E305C 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
000E3075                            
000E3075                            ;	Voice $04
000E3075                            ;	$3C
000E3075                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
000E3075                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
000E3075                            	smpsVcAlgorithm     $04
000E3075                            	smpsVcFeedback      $07
000E3075                            	smpsVcUnusedBits    $00
000E3075                            	smpsVcDetune        $07, $00, $00, $03
000E3075                            	smpsVcCoarseFreq    $00, $00, $02, $0A
000E3075                            	smpsVcRateScale     $00, $00, $00, $00
000E3075                            	smpsVcAttackRate    $10, $1F, $10, $1F
000E3075                            	smpsVcAmpMod        $00, $00, $00, $00
000E3075                            	smpsVcDecayRate1    $00, $00, $00, $00
000E3075                            	smpsVcDecayRate2    $00, $00, $00, $00
000E3075                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000E3075                            	smpsVcReleaseRate   $0A, $02, $0A, $02
000E3075 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
000E308E                            
000E308E                            ;	Voice $05
000E308E                            ;	$38
000E308E                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
000E308E                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
000E308E                            	smpsVcAlgorithm     $00
000E308E                            	smpsVcFeedback      $07
000E308E                            	smpsVcUnusedBits    $00
000E308E                            	smpsVcDetune        $04, $06, $02, $00
000E308E                            	smpsVcCoarseFreq    $01, $01, $01, $00
000E308E                            	smpsVcRateScale     $00, $00, $00, $00
000E308E                            	smpsVcAttackRate    $1F, $1F, $1F, $10
000E308E                            	smpsVcAmpMod        $00, $00, $00, $00
000E308E                            	smpsVcDecayRate1    $00, $03, $00, $17
000E308E                            	smpsVcDecayRate2    $00, $08, $08, $0B
000E308E                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
000E308E                            	smpsVcReleaseRate   $08, $05, $05, $05
000E308E 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
000E30A7                            
000E30A7                            
000E30A8 00                         		even
000E30A8                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
000E72B8                            		even
000E72B8                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
000EAE10 00                         		even
000EAE10                            Music87:	include	sound\music87.asm; Invincibility
000EAE10                            triple_Header:
000EAE10 =00000001                  smpsHeaderStartSong = 1
000EAE10 0000                       	smpsHeaderVoice     triple_Voices
000EAE12 0501                       	smpsHeaderChan      $05, $01
000EAE14 0200                       	smpsHeaderTempo     $02, $00
000EAE16                            
000EAE1A 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000EAE1E 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
000EAE22 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
000EAE26 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
000EAE2A 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
000EAE30                            
000EAE30                            ; DAC Data
000EAE30                            triple_DAC:
000EAE30 E0C0                       	smpsPan             panCenter, $00
000EAE32 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
000EAE38                            
000EAE38                            triple_Loop01:
000EAE38 8282 82                    	dc.b	dSnare, dSnare, dSnare
000EAE3B                            
000EAE3B                            triple_Loop00:
000EAE3B 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
000EAE47 06                         	dc.b	$06
000EAE48 F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
000EAE4D 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
000EAE59 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
000EAE60 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
000EAE65 0303 1B                    	dc.b	$03, $03, $1B
000EAE68 E0C0                       	smpsPan             panCenter, $00
000EAE6A F6FF C4                    	smpsJump triple_DAC
000EAE6D                            
000EAE6D                            ; FM1 Data
000EAE6D                            triple_FM1:
000EAE6D E0C0                       	smpsPan             panCenter, $00
000EAE71 8018                       	dc.b	nRst, $18
000EAE73                            
000EAE73                            triple_Loop0B:
000EAE73 AC06 B8                    	dc.b	nG3, $06, nG4
000EAE76 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
000EAE7B                            
000EAE7B                            triple_Loop0C:
000EAE7B A7B3                       	dc.b	nD3, nD4
000EAE7D F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
000EAE82                            
000EAE82                            triple_Loop0D:
000EAE82 A9B5                       	dc.b	nE3, nE4
000EAE84 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
000EAE89 A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
000EAE91 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
000EAE96 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
000EAEA2 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
000EAEAE AD                         	dc.b	nAb3
000EAEAF F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
000EAEB4 8018                       	dc.b	nRst, $18
000EAEB6 E0C0                       	smpsPan             panCenter, $00
000EAEBA F6FF B1                    	smpsJump triple_FM1
000EAEBD                            
000EAEBD                            ; FM2 Data
000EAEBD                            triple_FM2:
000EAEBD E0C0                       	smpsPan             panCenter, $00
000EAEC1 8018                       	dc.b	nRst, $18
000EAEC3                            
000EAEC3                            triple_Loop07:
000EAEC3 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000EAECF C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000EAEDB F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
000EAEE0 8003                       	dc.b	nRst, $03
000EAEE2                            
000EAEE2                            triple_Loop08:
000EAEE2 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000EAEE8 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000EAEED B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000EAEF3                            
000EAEF3                            triple_Loop09:
000EAEF3 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000EAEFF C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000EAF0B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000EAF10 8003                       	dc.b	nRst, $03
000EAF12                            
000EAF12                            triple_Loop0A:
000EAF12 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000EAF18 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000EAF1D B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000EAF23 E0C0                       	smpsPan             panCenter, $00
000EAF27 F6FF 94                    	smpsJump triple_FM2
000EAF2A                            
000EAF2A                            ; FM3 Data
000EAF2A                            triple_FM3:
000EAF2A E0C0                       	smpsPan             panCenter, $00
000EAF2E 8018                       	dc.b	nRst, $18
000EAF30                            
000EAF30                            triple_Loop06:
000EAF30 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000EAF37 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000EAF3C 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
000EAF48 BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
000EAF54 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
000EAF57 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
000EAF5C 8018                       	dc.b	nRst, $18
000EAF5E E0C0                       	smpsPan             panCenter, $00
000EAF62 F6FF C6                    	smpsJump triple_FM3
000EAF65                            
000EAF65                            ; FM4 Data
000EAF65                            triple_FM4:
000EAF65 E103                       	smpsAlterNote       $03
000EAF69 E0C0                       	smpsPan             panCenter, $00
000EAF6B 8018                       	dc.b	nRst, $18
000EAF6D                            
000EAF6D                            triple_Loop02:
000EAF6D C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000EAF79 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000EAF85 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
000EAF8A 8003                       	dc.b	nRst, $03
000EAF8C                            
000EAF8C                            triple_Loop03:
000EAF8C B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000EAF92 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
000EAF97 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000EAF9D                            
000EAF9D                            triple_Loop04:
000EAF9D C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000EAFA9 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000EAFB5 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
000EAFBA 8003                       	dc.b	nRst, $03
000EAFBC                            
000EAFBC                            triple_Loop05:
000EAFBC B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000EAFC2 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000EAFC7 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000EAFCD E0C0                       	smpsPan             panCenter, $00
000EAFCF F6FF 94                    	smpsJump triple_FM4
000EAFD2                            
000EAFD2                            ; PSG1 Data
000EAFD2                            triple_PSG1:
000EAFD2 8018                       	dc.b	nRst, $18
000EAFD4                            
000EAFD4                            triple_Loop0E:
000EAFD4 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000EAFE0 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000EAFEC 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000EAFF8 9402 8004                  	dc.b	nG1, $02, nRst, $04
000EAFFC F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000EB001 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000EB00D 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000EB019 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000EB025 9402 8007                  	dc.b	nG1, $02, nRst, $07
000EB029                            
000EB029                            triple_Loop0F:
000EB029 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000EB02F F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000EB034 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000EB03A                            
000EB03A                            triple_Loop10:
000EB03A A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000EB046 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000EB052 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000EB05E 9402 8004                  	dc.b	nG1, $02, nRst, $04
000EB062 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
000EB067 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000EB073 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000EB07F 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000EB08B 9402 8007                  	dc.b	nG1, $02, nRst, $07
000EB08F                            
000EB08F                            triple_Loop11:
000EB08F 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000EB095 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
000EB09A 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
000EB0A0 F500                       	smpsPSGvoice        $00
000EB0A2 F6FF 2E                    	smpsJump triple_PSG1
000EB0A5                            
000EB0A5                            triple_Voices:
000EB0A5                            ;	Voice $00
000EB0A5                            ;	$3A
000EB0A5                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000EB0A5                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000EB0A5                            	smpsVcAlgorithm     $02
000EB0A5                            	smpsVcFeedback      $07
000EB0A5                            	smpsVcUnusedBits    $00
000EB0A5                            	smpsVcDetune        $00, $00, $00, $00
000EB0A5                            	smpsVcCoarseFreq    $01, $01, $07, $01
000EB0A5                            	smpsVcRateScale     $01, $02, $02, $02
000EB0A5                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000EB0A5                            	smpsVcAmpMod        $00, $00, $00, $00
000EB0A5                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000EB0A5                            	smpsVcDecayRate2    $00, $00, $00, $00
000EB0A5                            	smpsVcDecayLevel    $00, $01, $0F, $01
000EB0A5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000EB0A5 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000EB0BE                            
000EB0BE                            ;	Voice $01
000EB0BE                            ;	$20
000EB0BE                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000EB0BE                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000EB0BE                            	smpsVcAlgorithm     $00
000EB0BE                            	smpsVcFeedback      $04
000EB0BE                            	smpsVcUnusedBits    $00
000EB0BE                            	smpsVcDetune        $00, $00, $03, $07
000EB0BE                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000EB0BE                            	smpsVcRateScale     $03, $03, $03, $02
000EB0BE                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000EB0BE                            	smpsVcAmpMod        $00, $00, $00, $00
000EB0BE                            	smpsVcDecayRate1    $04, $04, $0A, $10
000EB0BE                            	smpsVcDecayRate2    $08, $08, $08, $0F
000EB0BE                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000EB0BE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000EB0BE 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000EB0BE 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000EB0D8 00                         		even
000EB0D8                            Music88:	incbin	sound\music88.bin; Extra Life
000EB1C6                            		even
000EB1C6                            Music89:	incbin	sound\music89.bin; Special Stage
000EF08E 00                         		even
000EF08E                            Music8A:	incbin	sound\music8A.bin; Title Screen
000EF258                            		even
000EF258                            Music8B:	incbin	sound\music8B.bin; Ending Theme
000EF4F2                            		even
000EF4F2                            Music8C:	incbin	sound\music8C.bin; VS Boss
000EF790                            		even
000EF790                            Music8D:	incbin	sound\music8D.bin; Final Zone
000F5A08 00                         		even
000F5A08                            Music8E:	include	sound\merry.asm ; Act Clear
000F5A08 =0000008B                  dMerryWtf1 = dVLowTimpani ; $87
000F5A08 =0000008A                  dMerryWtf2 = dLowTimpani  ; $85
000F5A08 =0000008B                  dMerryWtf3 = dVLowTimpani ; $84
000F5A08 =0000008A                  dMerryClap = dLowTimpani
000F5A08                            
000F5A08                            MerrysLittleLamb_Header:
000F5A08 0000                       	smpsHeaderVoice     MerrysLittleLamb_Voices
000F5A0A 0603                       	smpsHeaderChan      $06, $03
000F5A0C 0100                       	smpsHeaderTempo     $01, $00
000F5A0E                            
000F5A12 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM1,	$00, $00
000F5A16 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM2,	$00, $00
000F5A1A 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM3,	$00, $00
000F5A1E 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM4,	$00, $00
000F5A22 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM5,	$00, $00
000F5A26 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG1,	$00, $00, $00, $00
000F5A2C 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG2,	$00, $00, $00, $00
000F5A32 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG3,	$00, $00, $00, $00
000F5A38                            
000F5A38                            MerrysLittleLamb_FM1:
000F5A38 E0C0                       	smpsPan             panCenter, $00
000F5A3A 807F 7F7F 20               	dc.b	nRst, $7F, $7F, $7F, $20
000F5A41 E60F                       	smpsAlterVol        $0F
000F5A43 A704                       	dc.b	nD3, $04
000F5A45 E606                       	smpsAlterVol        $06
000F5A47 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000F5A4C E6FA                       	smpsAlterVol        $FA
000F5A4E A705                       	dc.b	nD3, $05
000F5A50 E606                       	smpsAlterVol        $06
000F5A52 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000F5A57 E6FA                       	smpsAlterVol        $FA
000F5A59 A704                       	dc.b	nD3, $04
000F5A5B E606                       	smpsAlterVol        $06
000F5A5D A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000F5A63 E6FA                       	smpsAlterVol        $FA
000F5A65 A7                         	dc.b	nD3
000F5A66 E606                       	smpsAlterVol        $06
000F5A68 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000F5A6D E6FA                       	smpsAlterVol        $FA
000F5A6F A704                       	dc.b	nD3, $04
000F5A71 E606                       	smpsAlterVol        $06
000F5A73 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000F5A79 E6FA                       	smpsAlterVol        $FA
000F5A7B A7                         	dc.b	nD3
000F5A7C E606                       	smpsAlterVol        $06
000F5A7E A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000F5A84 E6FA                       	smpsAlterVol        $FA
000F5A86 A705                       	dc.b	nD3, $05
000F5A88 E606                       	smpsAlterVol        $06
000F5A8A A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000F5A8F E6FA                       	smpsAlterVol        $FA
000F5A91 A7                         	dc.b	nD3
000F5A92 E606                       	smpsAlterVol        $06
000F5A94 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000F5A9A E6FA                       	smpsAlterVol        $FA
000F5A9C A705                       	dc.b	nD3, $05
000F5A9E E606                       	smpsAlterVol        $06
000F5AA0 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000F5AA5 E6FA                       	smpsAlterVol        $FA
000F5AA7 A704                       	dc.b	nD3, $04
000F5AA9 E606                       	smpsAlterVol        $06
000F5AAB A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000F5AB0 E6FA                       	smpsAlterVol        $FA
000F5AB2 A705                       	dc.b	nD3, $05
000F5AB4 E606                       	smpsAlterVol        $06
000F5AB6 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000F5ABB E6FA                       	smpsAlterVol        $FA
000F5ABD A704                       	dc.b	nD3, $04
000F5ABF E606                       	smpsAlterVol        $06
000F5AC1 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000F5AC6 E6FA                       	smpsAlterVol        $FA
000F5AC8 A705                       	dc.b	nD3, $05
000F5ACA E606                       	smpsAlterVol        $06
000F5ACC A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000F5AD1 E6FA                       	smpsAlterVol        $FA
000F5AD3 A704                       	dc.b	nD3, $04
000F5AD5 E606                       	smpsAlterVol        $06
000F5AD7 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000F5ADD E6FA                       	smpsAlterVol        $FA
000F5ADF A7                         	dc.b	nD3
000F5AE0 E606                       	smpsAlterVol        $06
000F5AE2 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000F5AE8 E6FA                       	smpsAlterVol        $FA
000F5AEA A705                       	dc.b	nD3, $05
000F5AEC E606                       	smpsAlterVol        $06
000F5AEE A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000F5AF3 E6FA                       	smpsAlterVol        $FA
000F5AF5 A7                         	dc.b	nD3
000F5AF6 E606                       	smpsAlterVol        $06
000F5AF8 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000F5AFE E6FA                       	smpsAlterVol        $FA
000F5B00 A705                       	dc.b	nD3, $05
000F5B02 E606                       	smpsAlterVol        $06
000F5B04 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000F5B09 E6FA                       	smpsAlterVol        $FA
000F5B0B A704                       	dc.b	nD3, $04
000F5B0D E606                       	smpsAlterVol        $06
000F5B0F A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000F5B14 E6FA                       	smpsAlterVol        $FA
000F5B16 A705                       	dc.b	nD3, $05
000F5B18 E606                       	smpsAlterVol        $06
000F5B1A A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000F5B1F E6FA                       	smpsAlterVol        $FA
000F5B21 A704                       	dc.b	nD3, $04
000F5B23 E606                       	smpsAlterVol        $06
000F5B25 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000F5B2A E6FA                       	smpsAlterVol        $FA
000F5B2C A705                       	dc.b	nD3, $05
000F5B2E E606                       	smpsAlterVol        $06
000F5B30 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000F5B35 E6FA                       	smpsAlterVol        $FA
000F5B37 A704                       	dc.b	nD3, $04
000F5B39 E606                       	smpsAlterVol        $06
000F5B3B A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000F5B41 E6FA                       	smpsAlterVol        $FA
000F5B43 A7                         	dc.b	nD3
000F5B44 E606                       	smpsAlterVol        $06
000F5B46 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000F5B4B E6FA                       	smpsAlterVol        $FA
000F5B4D A704                       	dc.b	nD3, $04
000F5B4F E606                       	smpsAlterVol        $06
000F5B51 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000F5B57 E6FA                       	smpsAlterVol        $FA
000F5B59 A7                         	dc.b	nD3
000F5B5A E606                       	smpsAlterVol        $06
000F5B5C A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000F5B62 E6FA                       	smpsAlterVol        $FA
000F5B64 A705                       	dc.b	nD3, $05
000F5B66 E606                       	smpsAlterVol        $06
000F5B68 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000F5B6D E6FA                       	smpsAlterVol        $FA
000F5B6F A704                       	dc.b	nD3, $04
000F5B71 E606                       	smpsAlterVol        $06
000F5B73 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000F5B78 E6FA                       	smpsAlterVol        $FA
000F5B7A A705                       	dc.b	nD3, $05
000F5B7C E606                       	smpsAlterVol        $06
000F5B7E A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000F5B83 E6FA                       	smpsAlterVol        $FA
000F5B85 A704                       	dc.b	nD3, $04
000F5B87 E606                       	smpsAlterVol        $06
000F5B89 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000F5B8E E6FA                       	smpsAlterVol        $FA
000F5B90 A705                       	dc.b	nD3, $05
000F5B92 E606                       	smpsAlterVol        $06
000F5B94 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000F5B99 E6FA                       	smpsAlterVol        $FA
000F5B9B A704                       	dc.b	nD3, $04
000F5B9D E606                       	smpsAlterVol        $06
000F5B9F A705 A7A7 7FE7 19          	dc.b	nD3, $05, nD3, nD3, $7F, smpsNoAttack, $19
000F5BA6 F2                         	smpsStop
000F5BA7                            
000F5BA7                            MerrysLittleLamb_FM2:
000F5BA7 E0C0                       	smpsPan             panCenter, $00
000F5BA9 807F 7F7F 7F30             	dc.b	nRst, $7F, $7F, $7F, $7F, $30
000F5BB1 E610                       	smpsAlterVol        $10
000F5BB3 A87F E719 807F 7F7F 3E     	dc.b	nEb3, $7F, smpsNoAttack, $19, nRst, $7F, $7F, $7F, $3E
000F5BBC                            
000F5BBC                            MerrysLittleLamb_FM3:
000F5BBC                            MerrysLittleLamb_FM4:
000F5BBC                            MerrysLittleLamb_FM5:
000F5BBC F2                         	smpsStop
000F5BBD                            
000F5BBD                            MerrysLittleLamb_PSG1:
000F5BBD 807F 7F7F 7F06 B701        	dc.b	nRst, $7F, $7F, $7F, $7F, $06, nFs4, $01
000F5BC5 EC02                       	smpsPSGAlterVol     $02
000F5BC7 B7                         	dc.b	nFs4
000F5BC8 EC03                       	smpsPSGAlterVol     $03
000F5BCA B7                         	dc.b	nFs4
000F5BCB EC03                       	smpsPSGAlterVol     $03
000F5BCD B7                         	dc.b	nFs4
000F5BCE EC03                       	smpsPSGAlterVol     $03
000F5BD0 B7                         	dc.b	nFs4
000F5BD1 ECF5                       	smpsPSGAlterVol     $F5
000F5BD3 B7                         	dc.b	nFs4
000F5BD4 EC02                       	smpsPSGAlterVol     $02
000F5BD6 B7                         	dc.b	nFs4
000F5BD7 EC03                       	smpsPSGAlterVol     $03
000F5BD9 B7                         	dc.b	nFs4
000F5BDA EC03                       	smpsPSGAlterVol     $03
000F5BDC B7                         	dc.b	nFs4
000F5BDD ECF8                       	smpsPSGAlterVol     $F8
000F5BDF B7                         	dc.b	nFs4
000F5BE0 EC02                       	smpsPSGAlterVol     $02
000F5BE2 B7                         	dc.b	nFs4
000F5BE3 EC03                       	smpsPSGAlterVol     $03
000F5BE5 B7                         	dc.b	nFs4
000F5BE6 EC03                       	smpsPSGAlterVol     $03
000F5BE8 B7                         	dc.b	nFs4
000F5BE9 EC03                       	smpsPSGAlterVol     $03
000F5BEB B7                         	dc.b	nFs4
000F5BEC ECF5                       	smpsPSGAlterVol     $F5
000F5BEE B7                         	dc.b	nFs4
000F5BEF EC02                       	smpsPSGAlterVol     $02
000F5BF1 B7                         	dc.b	nFs4
000F5BF2 EC03                       	smpsPSGAlterVol     $03
000F5BF4 B7                         	dc.b	nFs4
000F5BF5 EC03                       	smpsPSGAlterVol     $03
000F5BF7 B7                         	dc.b	nFs4
000F5BF8 EC03                       	smpsPSGAlterVol     $03
000F5BFA B7                         	dc.b	nFs4
000F5BFB ECF5                       	smpsPSGAlterVol     $F5
000F5BFD B7                         	dc.b	nFs4
000F5BFE EC02                       	smpsPSGAlterVol     $02
000F5C00 B7                         	dc.b	nFs4
000F5C01 EC06                       	smpsPSGAlterVol     $06
000F5C03 B7                         	dc.b	nFs4
000F5C04 EC03                       	smpsPSGAlterVol     $03
000F5C06 B7                         	dc.b	nFs4
000F5C07 ECF5                       	smpsPSGAlterVol     $F5
000F5C09 B7                         	dc.b	nFs4
000F5C0A EC02                       	smpsPSGAlterVol     $02
000F5C0C B7                         	dc.b	nFs4
000F5C0D EC03                       	smpsPSGAlterVol     $03
000F5C0F B7                         	dc.b	nFs4
000F5C10 EC03                       	smpsPSGAlterVol     $03
000F5C12 B7                         	dc.b	nFs4
000F5C13 EC03                       	smpsPSGAlterVol     $03
000F5C15 B7                         	dc.b	nFs4
000F5C16 ECF5                       	smpsPSGAlterVol     $F5
000F5C18 B7                         	dc.b	nFs4
000F5C19 EC02                       	smpsPSGAlterVol     $02
000F5C1B B7                         	dc.b	nFs4
000F5C1C EC03                       	smpsPSGAlterVol     $03
000F5C1E B7                         	dc.b	nFs4
000F5C1F EC03                       	smpsPSGAlterVol     $03
000F5C21 B7                         	dc.b	nFs4
000F5C22 EC03                       	smpsPSGAlterVol     $03
000F5C24 B780 7F2B                  	dc.b	nFs4, nRst, $7F, $2B
000F5C28 ECF7                       	smpsPSGAlterVol     $F7
000F5C2A A008 8006 9E08 8006 A308+  	dc.b	nG2, $08, nRst, $06, nF2, $08, nRst, $06, nBb2, $08, nRst, $0A
000F5C36 A006 8004 A005 8004 A205+  	dc.b	nG2, $06, nRst, $04, nG2, $05, nRst, $04, nA2, $05, nRst, $04
000F5C42 A005 8004 A208 8001 A305+  	dc.b	nG2, $05, nRst, $04, nA2, $08, nRst, $01, nBb2, $05, nRst, $01
000F5C4E A305 8003 A305 8001 A304+  	dc.b	nBb2, $05, nRst, $03, nBb2, $05, nRst, $01, nBb2, $04, nRst, nBb2
000F5C5A 0580 01A3 0480 A308 807F+  	dc.b	$05, nRst, $01, nBb2, $04, nRst, nBb2, $08, nRst, $7F, $7F, $26
000F5C66 F2                         	smpsStop
000F5C67                            
000F5C67                            MerrysLittleLamb_PSG2:
000F5C67 807F 7F7F 7F7F 52          	dc.b	nRst, $7F, $7F, $7F, $7F, $7F, $52
000F5C6E EC02                       	smpsPSGAlterVol     $02
000F5C70 A708 8006 A908 8006 A908+  	dc.b	nD3, $08, nRst, $06, nE3, $08, nRst, $06, nE3, $08, nRst, $0A
000F5C7C E101                       	smpsAlterNote       $01
000F5C7E AB06 8004                  	dc.b	nFs3, $06, nRst, $04
000F5C82 E101                       	smpsAlterNote       $01
000F5C84 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000F5C88 E101                       	smpsAlterNote       $01
000F5C8A AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000F5C8E E101                       	smpsAlterNote       $01
000F5C90 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000F5C94 E101                       	smpsAlterNote       $01
000F5C96 AB08 8001                  	dc.b	nFs3, $08, nRst, $01
000F5C9A E101                       	smpsAlterNote       $01
000F5C9C AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000F5CA0 E101                       	smpsAlterNote       $01
000F5CA2 AB05 8003                  	dc.b	nFs3, $05, nRst, $03
000F5CA6 E101                       	smpsAlterNote       $01
000F5CA8 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000F5CAC E101                       	smpsAlterNote       $01
000F5CAE AB04 80                    	dc.b	nFs3, $04, nRst
000F5CB1 E101                       	smpsAlterNote       $01
000F5CB3 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000F5CB7 E101                       	smpsAlterNote       $01
000F5CB9 AB04 80                    	dc.b	nFs3, $04, nRst
000F5CBC E101                       	smpsAlterNote       $01
000F5CBE AB08 807F 7F26             	dc.b	nFs3, $08, nRst, $7F, $7F, $26
000F5CC4 F2                         	smpsStop
000F5CC5                            
000F5CC5                            MerrysLittleLamb_PSG3:
000F5CC5 807F 7F7F 7F39             	dc.b	nRst, $7F, $7F, $7F, $7F, $39
000F5CCB F3E7                       	smpsPSGform         $E7
000F5CCD E108                       	smpsAlterNote       $08
000F5CCF 0002                       	dc.b	nMaxPSG, $02
000F5CD1 EC01                       	smpsPSGAlterVol     $01
000F5CD3 E108                       	smpsAlterNote       $08
000F5CD5 0005                       	dc.b	nMaxPSG, $05
000F5CD7 EC01                       	smpsPSGAlterVol     $01
000F5CD9 E108                       	smpsAlterNote       $08
000F5CDB 0008                       	dc.b	nMaxPSG, $08
000F5CDD EC01                       	smpsPSGAlterVol     $01
000F5CDF E108                       	smpsAlterNote       $08
000F5CE1 00                         	dc.b	nMaxPSG
000F5CE2 EC01                       	smpsPSGAlterVol     $01
000F5CE4 E108                       	smpsAlterNote       $08
000F5CE6 00                         	dc.b	nMaxPSG
000F5CE7 EC01                       	smpsPSGAlterVol     $01
000F5CE9 E108                       	smpsAlterNote       $08
000F5CEB 0007                       	dc.b	nMaxPSG, $07
000F5CED EC01                       	smpsPSGAlterVol     $01
000F5CEF E108                       	smpsAlterNote       $08
000F5CF1 0005                       	dc.b	nMaxPSG, $05
000F5CF3 EC01                       	smpsPSGAlterVol     $01
000F5CF5 E108                       	smpsAlterNote       $08
000F5CF7 0007                       	dc.b	nMaxPSG, $07
000F5CF9 EC01                       	smpsPSGAlterVol     $01
000F5CFB E108                       	smpsAlterNote       $08
000F5CFD 0004                       	dc.b	nMaxPSG, $04
000F5CFF EC01                       	smpsPSGAlterVol     $01
000F5D01 E108                       	smpsAlterNote       $08
000F5D03 0007                       	dc.b	nMaxPSG, $07
000F5D05 EC01                       	smpsPSGAlterVol     $01
000F5D07 E108                       	smpsAlterNote       $08
000F5D09 0006                       	dc.b	nMaxPSG, $06
000F5D0B EC01                       	smpsPSGAlterVol     $01
000F5D0D E108                       	smpsAlterNote       $08
000F5D0F 0009                       	dc.b	nMaxPSG, $09
000F5D11 EC01                       	smpsPSGAlterVol     $01
000F5D13 E108                       	smpsAlterNote       $08
000F5D15 0007                       	dc.b	nMaxPSG, $07
000F5D17 EC01                       	smpsPSGAlterVol     $01
000F5D19 E108                       	smpsAlterNote       $08
000F5D1B 0001                       	dc.b	nMaxPSG, $01
000F5D1D ECFF                       	smpsPSGAlterVol     $FF
000F5D1F E108                       	smpsAlterNote       $08
000F5D21 00                         	dc.b	nMaxPSG
000F5D22 EC01                       	smpsPSGAlterVol     $01
000F5D24 E108                       	smpsAlterNote       $08
000F5D26 0009                       	dc.b	nMaxPSG, $09
000F5D28 EC01                       	smpsPSGAlterVol     $01
000F5D2A E108                       	smpsAlterNote       $08
000F5D2C 0007 807F 7F7F 68          	dc.b	nMaxPSG, $07, nRst, $7F, $7F, $7F, $68
000F5D33 F2                         	smpsStop
000F5D34                            
000F5D34                            MerrysLittleLamb_DAC:
000F5D34 8913 8A06 8B0D 8A89 8989+  	dc.b	dMidTimpani, $13, dLowTimpani, $06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, $1A, dLowTimpani
000F5D40 0D8A 8A19 890D 8888 1A89+  	dc.b	$0D, dLowTimpani, dLowTimpani, $19, dMidTimpani, $0D, dHiTimpani, dHiTimpani, $1A, dMidTimpani, $14, dLowTimpani
000F5D4C 068B 0D8A 8989 898A 0C8A+  	dc.b	$06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, dLowTimpani, $0C, dLowTimpani, $0D, dLowTimpani
000F5D58 898A 8B34 890E 8A04 8B09+  	dc.b	dMidTimpani, dLowTimpani, dMerryWtf1, $34, dMidTimpani, $0E, dLowTimpani, $04, dVLowTimpani, $09, dLowTimpani, $0A
000F5D64 8909 8989 8A0A 8A09 8A8A+  	dc.b	dMidTimpani, $09, dMidTimpani, dMidTimpani, dMerryWtf2, $0A, dLowTimpani, $09, dLowTimpani, dLowTimpani, dMerryWtf3, dMidTimpani
000F5D70 0A88 0988 8289 0581 098A+  	dc.b	$0A, dHiTimpani, $09, dHiTimpani, dSnare, dMidTimpani, $05, dKick, $09, dLowTimpani, $05, dVLowTimpani
000F5D7C 098A 8989 0A89 098A 8805+  	dc.b	$09, dLowTimpani, dMidTimpani, dMidTimpani, $0A, dMidTimpani, $09, dLowTimpani, dHiTimpani, $05, dMidTimpani, $04
000F5D88 8A0A 8909 8A82 0182 0482+  	dc.b	dLowTimpani, $0A, dMidTimpani, $09, dLowTimpani, dSnare, $01, dSnare, $04, dSnare, $01, dSnare
000F5D94 0382 0181 0481 0182 0382+  	dc.b	$03, dSnare, $01, dKick, $04, dKick, $01, dSnare, $03, dSnare, $01, dKick
000F5DA0 0481 0182 0482 0181 0381+  	dc.b	$04, dKick, $01, dSnare, $04, dSnare, $01, dKick, $03, dKick, $01, dSnare
000F5DAC 0489 0582 0482 058A 048B+  	dc.b	$04, dMidTimpani, $05, dSnare, $04, dSnare, $05, dLowTimpani, $04, dVLowTimpani, $05, dSnare
000F5DB8 8A04 8205 8904 8205 8982+  	dc.b	dLowTimpani, $04, dSnare, $05, dMidTimpani, $04, dSnare, $05, dMidTimpani, dSnare, $04, dMidTimpani
000F5DC4 0582 8A04 8205 8A04 8205+  	dc.b	$05, dSnare, dMerryWtf2, $04, dSnare, $05, dLowTimpani, $04, dSnare, $05, dLowTimpani, dSnare
000F5DD0 048A 0582 0486 0582 8904+  	dc.b	$04, dLowTimpani, $05, dSnare, $04, $86, $05, dSnare, dMidTimpani, $04, dSnare, $05
000F5DDC 8804 8205 8882 0482 0582+  	dc.b	dHiTimpani, $04, dSnare, $05, dHiTimpani, dSnare, $04, dSnare, $05, dSnare, dMidTimpani, $04
000F5DE8 8205 8204 8A05 8B82 048A+  	dc.b	dSnare, $05, dSnare, $04, dLowTimpani, $05, dVLowTimpani, dSnare, $04, dLowTimpani, $05, dSnare
000F5DF4 0489 0582 8909 8904 8205+  	dc.b	$04, dMidTimpani, $05, dSnare, dMidTimpani, $09, dMidTimpani, $04, dSnare, $05, dLowTimpani, $09
000F5E00 8801 8804 8801 8904 8988+  	dc.b	dHiTimpani, $01, dHiTimpani, $04, dHiTimpani, $01, dMidTimpani, $04, dMidTimpani, dHiTimpani, $01, dHiTimpani
000F5E0C 0488 0189 0389 0189 0488+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dHiTimpani, $01, dHiTimpani
000F5E18 0488 0189 0389 0189 048A+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dMerryClap, $01, dMerryClap
000F5E24 038A 018B 048B 018B 0482+  	dc.b	$03, dMerryClap, $01, dVLowTimpani, $04, dVLowTimpani, $01, dVLowTimpani, $04, dSnare, $01, dKick
000F5E30 0381 0182 0482 0181 0482+  	dc.b	$03, dKick, $01, dSnare, $04, dSnare, $01, dKick, $04, dSnare, $7F, nRst
000F5E3C F2                         	smpsStop
000F5E3D                            
000F5E3D                            MerrysLittleLamb_Voices:
000F5E3D                            ;	Voice $00
000F5E3D                            ;	$00
000F5E3D                            ;	$70, $70, $70, $70, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $1F
000F5E3D                            ;	$00, $00, $00, $12, 	$F0, $F0, $F0, $0F, 	$00, $00, $00, $00
000F5E3D                            	smpsVcAlgorithm     $00
000F5E3D                            	smpsVcFeedback      $00
000F5E3D                            	smpsVcUnusedBits    $00
000F5E3D                            	smpsVcDetune        $07, $07, $07, $07
000F5E3D                            	smpsVcCoarseFreq    $00, $00, $00, $00
000F5E3D                            	smpsVcRateScale     $00, $00, $00, $00
000F5E3D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F5E3D                            	smpsVcAmpMod        $00, $00, $00, $00
000F5E3D                            	smpsVcDecayRate1    $1F, $00, $00, $00
000F5E3D                            	smpsVcDecayRate2    $12, $00, $00, $00
000F5E3D                            	smpsVcDecayLevel    $00, $0F, $0F, $0F
000F5E3D                            	smpsVcReleaseRate   $0F, $00, $00, $00
000F5E3D 0070 7070 701F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000F5E56                            
000F5E56                            ;	Voice $01
000F5E56                            ;	$25
000F5E56                            ;	$01, $01, $01, $71, 	$1E, $1E, $1E, $1E, 	$08, $06, $0B, $03
000F5E56                            ;	$00, $00, $00, $00, 	$4F, $4F, $AF, $0F, 	$08, $16, $06, $00
000F5E56                            	smpsVcAlgorithm     $05
000F5E56                            	smpsVcFeedback      $04
000F5E56                            	smpsVcUnusedBits    $00
000F5E56                            	smpsVcDetune        $07, $00, $00, $00
000F5E56                            	smpsVcCoarseFreq    $01, $01, $01, $01
000F5E56                            	smpsVcRateScale     $00, $00, $00, $00
000F5E56                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000F5E56                            	smpsVcAmpMod        $00, $00, $00, $00
000F5E56                            	smpsVcDecayRate1    $03, $0B, $06, $08
000F5E56                            	smpsVcDecayRate2    $00, $00, $00, $00
000F5E56                            	smpsVcDecayLevel    $00, $0A, $04, $04
000F5E56                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F5E56 2501 0101 711E 1E1E 1E08+  	smpsVcTotalLevel    $00, $06, $16, $08
000F5E6F                            
000F5E6F                            
000F5E70 00                         		even
000F5E70                            Music8F:	incbin	sound\music8F.bin ; Game Over
000F64B0 00                         		even
000F64B0                            Music90:	incbin	sound\music90.bin ; Continue
000F684A 00                         		even
000F684A                            Music91:	include	sound\mus91.asm ; Megurine Luka I mean Credits
000F684A                            Mus91_Credits_Header:
000F684A =00000001                  smpsHeaderStartSong = 1
000F684A 0000                       	smpsHeaderVoice     Mus91_Credits_Voices
000F684C 0603                       	smpsHeaderChan      $06, $03
000F684E 0133                       	smpsHeaderTempo     $01, $33
000F6850                            
000F6854 0000 F412                  	smpsHeaderFM        Mus91_Credits_FM1,	$F4, $12
000F6858 0000 000B                  	smpsHeaderFM        Mus91_Credits_FM2,	$00, $0B
000F685C 0000 F414                  	smpsHeaderFM        Mus91_Credits_FM3,	$F4, $14
000F6860 0000 F408                  	smpsHeaderFM        Mus91_Credits_FM4,	$F4, $08
000F6864 0000 F420                  	smpsHeaderFM        Mus91_Credits_FM5,	$F4, $20
000F6868 0000 D001 0000             	smpsHeaderPSG       Mus91_Credits_PSG1,	$D0, $01, $00, $00
000F686E 0000 D003 0000             	smpsHeaderPSG       Mus91_Credits_PSG2,	$D0, $03, $00, $00
000F6874 0000 0003 0004             	smpsHeaderPSG       Mus91_Credits_PSG3,	$00, $03, $00, fTone_04
000F687A                            ;	this is just a rip of the track
000F687A                            ;	ripper, 	part,		joke
000F687A                            ;	undecided, 	intro,		undecided
000F687A                            ;	coninight, 	ghz,		luka luka night fever -FM1 done
000F687A                            ;	coninight, 	lz,		the cleveland show (callback) - COMPLETE!
000F687A                            ;	undecided, 	mz,		undecided
000F687A                            ;	carlos, 	slz,		meltdown
000F687A                            ;	undecided, 	sbz,		undecided
000F687A                            ;	undecided, 	ccz,		undecided
000F687A                            ;	undecided, 	ending,		undecided
000F687A                            
000F687A                            ; FM1 Data
000F687A                            Mus91_Credits_FM1:
000F687A E201                       	smpsNop             $01
000F687C 8060                       	dc.b	nRst, $60
000F6880 E6F8                       	smpsAlterVol        $F8
000F6882 E806                       	smpsNoteFill        $06
000F6884 F800 00                    	smpsCall            Mus91_Credits_Call11
000F6887 E0C0                       	smpsPan             panCenter, $00
000F6889 E800                       	smpsNoteFill        $00
000F688D F00D 0107 04               	smpsModSet          $0D, $01, $07, $04
000F6892                            ; conis turn
000F6892 F800 00                    	smpsCall            Mus91_Credits_Call12	;ruka ruka
000F6895 C40C C5C7 18C5 30          	dc.b	nG5, $0C, nAb5, nBb5, $18, nAb5, $30	;โ naito fiibaa
000F689C                            
000F689C F800 00                    	smpsCall            Mus91_Credits_Call12	;watashi wa 
000F689F CC0C CAC9 CA               	dc.b	nEb6, $0C, nCs6, nC6, nCs6		;koko ni
000F68A4 C9C9 C7C5 80               	dc.b	nC6, nC6, nBb5, nAb5, nRst		;iru kara
000F68A9                            
000F68A9 C2C2 C4C5 C718             	dc.b	nF5, nF5, nG5, nAb5, nBb5, $18		;sukoshi de mo
000F68AF C4C5 0CC7 18C5 80          	dc.b	nG5, nAb5, $0C, nBb5, $18, nAb5, nRst	;shisen o
000F68B6                            
000F68B6 C2C4 C5C7 0C               	dc.b	nF5, nG5, nAb5, nBb5, $0C		;sorashicha
000F68BB F800 00                    	smpsCall           Mus91_Credits_DameDameYo	;dame dame yo
000F68BE 8060 6060 18               	dc.b	nRst, $60, $60, $60, $18
000F68C3 F800 00                    	smpsCall           Mus91_Credits_DameDameYo	;dame dame yo
000F68C6                            ;	dc.b	nRst, $30
000F68C6                            ; conis turn again
000F68C6 F4                         	smpsModOff
000F68C7 E201                       	smpsNop             $01
000F68CB E602                       	smpsAlterVol        $02
000F68CD C10C C4C1                  	dc.b	nE5, $0C, nG5, nE5			;My name is
000F68D1                            ;cut for tempo change
000F68D1 EA0F                       	smpsSetTempoMod     $0F
000F68D3                            ;perfect now continue
000F68D3 C409 C4C6 0C               	dc.b	nG5, $09, nG5, nA5, $0C			;Cleveland Brown
000F68D8                            
000F68D8 C106 C103 BFBD 06          	dc.b	nE5, $06, nE5, $03, nD5, nC5, $06	;and I am
000F68DF BD09 BDBA 0680             	dc.b	nC5, $09, nC5, nA4, $06, nRst		;proud to be
000F68E5                            
000F68E5 CD06 CBC8                  	dc.b	nE6, $06, nD6, nB5			; and silence
000F68E9 CB09 C9C6 0C               	dc.b	nD6, $09, nC6, nA5, $0C
000F68EE                            
000F68EE C806 C603 C4C6 06          	dc.b	nB5, $06, nA5, $03, nG5, nA5, $06
000F68F5 C609 C6C8 0680 0C          	dc.b	nA5, $09, nA5, nB5, $06, nRst, $0C
000F68FC                            
000F68FC C9CB 04C9 CBC9 24          	dc.b	nC6, nD6, $04, nC6, nD6, nC6, $24	;welcome back to labyrinth zone from sonic 1
000F6903 E9F4                       	smpsAlterPitch      $F4
000F6905 E609                       	smpsAlterVol        $09
000F6909 8018 C606 C8C9 CD          	dc.b	nRst, $18, nA5, $06, nB5, nC6, nE6
000F6910 F800 00                    	smpsCall            Mus91_Credits_Call0C
000F6915 E6EB                       	smpsAlterVol        $EB
000F6917 800C C4C6 D0               	dc.b	nRst, $0C, nG5, nA5, nG6
000F691C F800 00                    	smpsCall            Mus91_Credits_Call0D
000F691F CD1E D906 D518 8024        	dc.b	nE6, $1E, nE7, $06, nC7, $18, nRst, $24
000F6927 E201                       	smpsNop             $01
000F6929 EA0A                       	smpsSetTempoMod     $0A
000F692D E90C                       	smpsAlterPitch      $0C
000F692F E60B                       	smpsAlterVol        $0B
000F6931 F800 00                    	smpsCall            Mus91_Credits_Call0E
000F6934 E201                       	smpsNop             $01
000F6936 EA07                       	smpsSetTempoMod     $07
000F6938 8060                       	dc.b	nRst, $60
000F693A E201                       	smpsNop             $01
000F693C EA03                       	smpsSetTempoMod     $03
000F693E 8030                       	dc.b	nRst, $30
000F6942 E60E                       	smpsAlterVol        $0E
000F6944 8004 CE08 CD03 80CB 80C9+  	dc.b	nRst, $04, nF6, $08, nE6, $03, nRst, nD6, nRst, nC6, nRst, nD6
000F6950 80C9 04C6 8002 C780 04C7+  	dc.b	nRst, nC6, $04, nA5, nRst, $02, nBb5, nRst, $04, nBb5, $08, nC6
000F695C 0380 C780 C604 C780 02C9+  	dc.b	$03, nRst, nBb5, nRst, nA5, $04, nBb5, nRst, $02, nC6, $0E, nRst
000F6968 06CD 0280 04CD 0CCE CD0A+  	dc.b	$06, nE6, $02, nRst, $04, nE6, $0C, nF6, nE6, $0A, nD6, $02
000F6974 E201                       	smpsNop             $01
000F6976 EA04                       	smpsSetTempoMod     $04
000F6978 E6F5                       	smpsAlterVol        $F5
000F697C 8060                       	dc.b	nRst, $60
000F697E F800 00                    	smpsCall            Mus91_Credits_Call07
000F6981 E609                       	smpsAlterVol        $09
000F6983 E103                       	smpsAlterNote       $03
000F6987 F000 0106 04               	smpsModSet          $00, $01, $06, $04
000F698C F800 00                    	smpsCall            Mus91_Credits_Call0B
000F698F E6EF                       	smpsAlterVol        $EF
000F6993 E102                       	smpsAlterNote       $02
000F6995 966C E760                  	dc.b	nA1, $6C, smpsNoAttack, $60
000F6999 E201                       	smpsNop             $01
000F699B F2                         	smpsStop
000F699C                            
000F699C                            Mus91_Credits_Call12:
000F699C                            	;whats the name of the pink haired vocaloid just askin'
000F699C                            	;and twice as well
000F699C                            	;them:
000F699C C218 C9C2 C9               	dc.b	nF5, $18, nC6, nF5, nC6
000F69A1 E3                         	smpsReturn
000F69A2                            
000F69A2                            Mus91_Credits_DameDameYo:
000F69A2 C418 C50C C4C5 C2          	dc.b	nG5, $18, nAb5, $0C, nG5, nAb5, nF5	
000F69A9 E3                         	smpsReturn
000F69AA                            
000F69AA                            Mus91_Credits_Call07:
000F69AA 800C CA15 8003 CA06 80CB+  	dc.b	nRst, $0C, nCs6, $15, nRst, $03, nCs6, $06, nRst, nD6, $0F, nRst
000F69B6 03C8 1880 06CA 0680 CA80+  	dc.b	$03, nB5, $18, nRst, $06, nCs6, $06, nRst, nCs6, nRst, nCs6, nRst
000F69C2 C680 C40F 8003 C818 8006   	dc.b	nA5, nRst, nG5, $0F, nRst, $03, nB5, $18, nRst, $06
000F69CC F700 02FF DA               	smpsLoop            $00, $02, Mus91_Credits_Call07
000F69D1 E3                         	smpsReturn
000F69D2                            
000F69D2                            ; FM2 Data
000F69D2                            Mus91_Credits_FM2:
000F69D2 8060                       	dc.b	nRst, $60
000F69D6                            
000F69D6                            Mus91_Credits_Loop0F:
000F69D6 A70C A7B0 B0AC ACAE AEA7+  	dc.b	nD3, $0C, nD3, nB3, nB3, nG3, nG3, nA3, nA3, nD3, nD3, nA3
000F69E2 AEAB ABAC ACA5 A5AC ACAB+  	dc.b	nA3, nFs3, nFs3, nG3, nG3, nC3, nC3, nG3, nG3, nFs3, nFs3, nG3
000F69EE ACA2 A2A2 A2A7 A7A7 A9     	dc.b	nG3, nA2, nA2, nA2, nA2, nD3, nD3, nD3, nE3
000F69F7 F700 02FF DB               	smpsLoop            $00, $02, Mus91_Credits_Loop0F
000F69FE                            
000F69FE                            Mus91_Credits_Loop10:
000F69FE E805                       	smpsNoteFill        $05
000F6A00 AA0C                       	dc.b	nF3, $0C
000F6A02 F800 00                    	smpsCall            Mus91_Credits_Call0F
000F6A05 E805                       	smpsNoteFill        $05
000F6A07 A90C 0C0C 0C0C             	dc.b	nE3, $0C, $0C, $0C, $0C, $0C
000F6A0D E800                       	smpsNoteFill        $00
000F6A0F A5A7 A9                    	dc.b	nC3, nD3, nE3
000F6A12 F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop10
000F6A17 E805                       	smpsNoteFill        $05
000F6A19 AA                         	dc.b	nF3
000F6A1A F800 00                    	smpsCall            Mus91_Credits_Call0F
000F6A1D E805                       	smpsNoteFill        $05
000F6A1F A9                         	dc.b	nE3
000F6A20 F800 00                    	smpsCall            Mus91_Credits_Call0F
000F6A23 E805                       	smpsNoteFill        $05
000F6A25 A7                         	dc.b	nD3
000F6A26 F800 00                    	smpsCall            Mus91_Credits_Call0F
000F6A29 E805                       	smpsNoteFill        $05
000F6A2B A50C 0C0C 0C0C             	dc.b	nC3, $0C, $0C, $0C, $0C, $0C
000F6A31 E800                       	smpsNoteFill        $00
000F6A33 A0A2 A4                    	dc.b	nG2, nA2, nB2
000F6A36 E805                       	smpsNoteFill        $05
000F6A38                            
000F6A38                            Mus91_Credits_Loop11:
000F6A38 A5                         	dc.b	nC3
000F6A39 F700 18FF FB               	smpsLoop            $00, $18, Mus91_Credits_Loop11
000F6A3E E800                       	smpsNoteFill        $00
000F6A40 A506 80A5 0CA2 0680 A20C+  	dc.b	nC3, $06, nRst, nC3, $0C, nA2, $06, nRst, nA2, $0C, nBb2, $06
000F6A4C 80A3 0CA4 0680 A40C        	dc.b	nRst, nBb2, $0C, nB2, $06, nRst, nB2, $0C
000F6A56 E9E8                       	smpsAlterPitch      $E8
000F6A58 E602                       	smpsAlterVol        $02
000F6A5A                            
000F6A5A                            Mus91_Credits_Loop12:
000F6A5A B10F 8003 B580 B809 8003+  	dc.b	nC4, $0F, nRst, $03, nE4, nRst, nG4, $09, nRst, $03, nA4, $09
000F6A66 8003 BC0F 8003 BA80 B809+  	dc.b	nRst, $03, nB4, $0F, nRst, $03, nA4, nRst, nG4, $09, nRst, $03
000F6A72 B509 8003                  	dc.b	nE4, $09, nRst, $03
000F6A76 E905                       	smpsAlterPitch      $05
000F6A78 F700 02FF DE               	smpsLoop            $00, $02, Mus91_Credits_Loop12
000F6A7D E9F6                       	smpsAlterPitch      $F6
000F6A7F B10F 8003 B580 B809 8003+  	dc.b	nC4, $0F, nRst, $03, nE4, nRst, nG4, $09, nRst, $03, nE4, $09
000F6A8B 8003 B106 8012 B518        	dc.b	nRst, $03, nC4, $06, nRst, $12, nE4, $18
000F6A93 E601                       	smpsAlterVol        $01
000F6A97                            
000F6A97                            Mus91_Credits_Loop13:
000F6A97 AE03 80AE 06B5 0380 B506+  	dc.b	nA3, $03, nRst, nA3, $06, nE4, $03, nRst, nE4, $06, nD4, $03
000F6AA3 80B3 06B5 0380 B506        	dc.b	nRst, nD4, $06, nE4, $03, nRst, nE4, $06
000F6AAB F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop13
000F6AB0                            
000F6AB0                            Mus91_Credits_Loop14:
000F6AB0 B303 80B3 06BA 0380 BA06+  	dc.b	nD4, $03, nRst, nD4, $06, nA4, $03, nRst, nA4, $06, nF4, $03
000F6ABC 80B6 06BA 0380 BA06        	dc.b	nRst, nF4, $06, nA4, $03, nRst, nA4, $06
000F6AC4 F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop14
000F6AC9 B003 80B0 06B6 0380 B606+  	dc.b	nB3, $03, nRst, nB3, $06, nF4, $03, nRst, nF4, $06, nD4, $03
000F6AD5 80B3 06B6 0380 B606 B503+  	dc.b	nRst, nD4, $06, nF4, $03, nRst, nF4, $06, nE4, $03, nRst, nE4
000F6AE1 06BC 0380 BC06 B903 80B9+  	dc.b	$06, nB4, $03, nRst, nB4, $06, nAb4, $03, nRst, nAb4, $06, nB4
000F6AED 0380 BC06 AE03 80AE 06B5+  	dc.b	$03, nRst, nB4, $06, nA3, $03, nRst, nA3, $06, nE4, $03, nRst
000F6AF9 B506 B103 80B1 06B5 0380+  	dc.b	nE4, $06, nC4, $03, nRst, nC4, $06, nE4, $03, nRst, nE4, $06
000F6B05 AE03 8009 8024             	dc.b	nA3, $03, nRst, $09, nRst, $24
000F6B0B E6F8                       	smpsAlterVol        $F8
000F6B0D B106 8003 B180 06B1 1280+  	dc.b	nC4, $06, nRst, $03, nC4, nRst, $06, nC4, $12, nRst, $06, nC4
000F6B19 0280 01B1 0280 01AF 0680+  	dc.b	$02, nRst, $01, nC4, $02, nRst, $01, nBb3, $06, nRst, $03, nBb3
000F6B25 0380 06AE 1280 06AE 0280+  	dc.b	$03, nRst, $06, nA3, $12, nRst, $06, nA3, $02, nRst, $01, nA3
000F6B31 0280 01                    	dc.b	$02, nRst, $01
000F6B34                            
000F6B34                            Mus91_Credits_Loop15:
000F6B34 B306 8003 B306 8003 B302+  	dc.b	nD4, $06, nRst, $03, nD4, $06, nRst, $03, nD4, $02, nRst, $01
000F6B40 B302 8001                  	dc.b	nD4, $02, nRst, $01
000F6B44 E9FF                       	smpsAlterPitch      $FF
000F6B46 F700 04FF EA               	smpsLoop            $00, $04, Mus91_Credits_Loop15
000F6B4B E904                       	smpsAlterPitch      $04
000F6B4D AC06 8003 AC80 06AC 1280+  	dc.b	nG3, $06, nRst, $03, nG3, nRst, $06, nG3, $12, nRst, $06, nG3
000F6B59 0280 01AC 0280 01B0 0680+  	dc.b	$02, nRst, $01, nG3, $02, nRst, $01, nB3, $06, nRst, $03, nB3
000F6B65 8006 B012 8006 B302 8001+  	dc.b	nRst, $06, nB3, $12, nRst, $06, nD4, $02, nRst, $01, nB3, $02
000F6B71 8001 B106 8003 B180 06B1+  	dc.b	nRst, $01, nC4, $06, nRst, $03, nC4, nRst, $06, nC4, $12, nRst
000F6B7D 06B5 0280 01B6 0280 01B8+  	dc.b	$06, nE4, $02, nRst, $01, nF4, $02, nRst, $01, nG4, $06, nRst
000F6B89 AC24                       	dc.b	nG3, $24
000F6B8D E90C                       	smpsAlterPitch      $0C
000F6B8F E607                       	smpsAlterVol        $07
000F6B91 E806                       	smpsNoteFill        $06
000F6B93                            
000F6B93                            Mus91_Credits_Loop16:
000F6B93 F800 00                    	smpsCall            Mus91_Credits_Call10
000F6B96 E906                       	smpsAlterPitch      $06
000F6B98 F800 00                    	smpsCall            Mus91_Credits_Call10
000F6B9B E9FF                       	smpsAlterPitch      $FF
000F6B9D F800 00                    	smpsCall            Mus91_Credits_Call10
000F6BA0 E902                       	smpsAlterPitch      $02
000F6BA2 F800 00                    	smpsCall            Mus91_Credits_Call10
000F6BA5 E9F9                       	smpsAlterPitch      $F9
000F6BA7 F702 02FF E8               	smpsLoop            $02, $02, Mus91_Credits_Loop16
000F6BAC E800                       	smpsNoteFill        $00
000F6BAE E9F4                       	smpsAlterPitch      $F4
000F6BB0 E6FC                       	smpsAlterVol        $FC
000F6BB4 8030 8030 BA03 80BA 80B8+  	dc.b	nRst, $30, nRst, $30, nA4, $03, nRst, nA4, nRst, nG4, nRst, nG4
000F6BC0 80B6 80B6 80B5 80B5 0280+  	dc.b	nRst, nF4, nRst, nF4, nRst, nE4, nRst, nE4, $02, nRst, nBb4
000F6BCB E602                       	smpsAlterVol        $02
000F6BCD 8004 BB08 BD03 80BB 80BA+  	dc.b	nRst, $04, nBb4, $08, nC5, $03, nRst, nBb4, nRst, nA4, $06, nRst
000F6BD9 BB04 BA80 02B8 8004 B808+  	dc.b	nBb4, $04, nA4, nRst, $02, nG4, nRst, $04, nG4, $08, nA4, $03
000F6BE5 80B8 80B6 80B6 80B8 04B6+  	dc.b	nRst, nG4, nRst, nF4, nRst, nF4, nRst, nG4, $04, nF4, nRst, $02
000F6BF1 B580 04B5 08B5 0380 B580+  	dc.b	nE4, nRst, $04, nE4, $08, nE4, $03, nRst, nE4, nRst, nA4, $09
000F6BFD 8003 BA0A B302             	dc.b	nRst, $03, nA4, $0A, nD4, $02
000F6C03 E90C                       	smpsAlterPitch      $0C
000F6C05 E6FE                       	smpsAlterVol        $FE
000F6C09 8060                       	dc.b	nRst, $60
000F6C0B                            
000F6C0B                            Mus91_Credits_Loop17:
000F6C0B AE06 80AE 80A9 80A9 80AC+  	dc.b	nA3, $06, nRst, nA3, nRst, nE3, nRst, nE3, nRst, nG3, $12, nFs3
000F6C17 0CAC 06AB 0CAE 0680 AE80+  	dc.b	$0C, nG3, $06, nFs3, $0C, nA3, $06, nRst, nA3, nRst, nE3, nRst
000F6C23 A980 B312 B20C B306 B20C   	dc.b	nE3, nRst, nD4, $12, nCs4, $0C, nD4, $06, nCs4, $0C
000F6C2D F700 02FF DA               	smpsLoop            $00, $02, Mus91_Credits_Loop17
000F6C32 AC06 80A9 80AA 80AB 80AC+  	dc.b	nG3, $06, nRst, nE3, nRst, nF3, nRst, nFs3, nRst, nG3, $06, nG3
000F6C3E 06A9 0680 AA80 AC80 A906+  	dc.b	$06, nE3, $06, nRst, nF3, nRst, nG3, nRst, nE3, $06, nRst, nE3
000F6C4A 80AD 80AD 80B0 0680 B080+  	dc.b	nRst, nAb3, nRst, nAb3, nRst, nB3, $06, nRst, nB3, nRst, nD4, nRst
000F6C56 B380 800C AE12 8006 AE12+  	dc.b	nD4, nRst, nRst, $0C, nA3, $12, nRst, $06, nA3, $12, nAb3, $12
000F6C62 AE06 80                    	dc.b	nA3, $06, nRst
000F6C65 E6FD                       	smpsAlterVol        $FD
000F6C67 A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000F6C6B F2                         	smpsStop
000F6C6C                            
000F6C6C                            	; Unused data
000F6C6C                            	; Could this be a blanked-out 'smpsNop $01'? It's near an smpsStop.
000F6C6C 0001                       	dc.b	$00, $01
000F6C6E                            
000F6C6E                            Mus91_Credits_Call0F:
000F6C6E 0C0C 0C0C 0C0C             	dc.b	$0C, $0C, $0C, $0C, $0C, $0C
000F6C74 E800                       	smpsNoteFill        $00
000F6C76 0C                         	dc.b	$0C
000F6C77 E3                         	smpsReturn
000F6C78                            
000F6C78                            Mus91_Credits_Call10:
000F6C78 B103 B1AC ACAE AEAC AC     	dc.b	nC4, $03, nC4, nG3, nG3, nA3, nA3, nG3, nG3
000F6C81 F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Call10
000F6C86 E3                         	smpsReturn
000F6C87                            
000F6C87                            ; FM3 Data
000F6C87                            Mus91_Credits_FM3:
000F6C87 8060                       	dc.b	nRst, $60
000F6C89 F700 08FF FA               	smpsLoop            $00, $08, Mus91_Credits_FM3
000F6C90 E601                       	smpsAlterVol        $01
000F6C92 E040                       	smpsPan             panRight, $00
000F6C94 CB06 CDCF D0CD CFD0 D2CF+  	dc.b	nD6, $06, nE6, nFs6, nG6, nE6, nFs6, nG6, nA6, nFs6, nG6, nA6
000F6CA0 D4D2 D4D5 D7               	dc.b	nB6, nA6, nB6, nC7, nD7
000F6CA5                            
000F6CA5                            Mus91_Credits_Loop0C:
000F6CA5 E080                       	smpsPan             panLeft, $00
000F6CA7 D9                         	dc.b	nE7
000F6CA8 E040                       	smpsPan             panRight, $00
000F6CAA D5                         	dc.b	nC7
000F6CAB E602                       	smpsAlterVol        $02
000F6CAD F700 0DFF F4               	smpsLoop            $00, $0D, Mus91_Credits_Loop0C
000F6CB2 E0C0                       	smpsPan             panCenter, $00
000F6CB6 E6E5                       	smpsAlterVol        $E5
000F6CB8 E9E8                       	smpsAlterPitch      $E8
000F6CBA D006 D2D5 0CD2 804E 80D0+  	dc.b	nG6, $06, nA6, nC7, $0C, nA6, nRst, $4E, nRst, nG6, $06, nA6
000F6CC6 D50C D980 4E80 D006 D2D5+  	dc.b	nC7, $0C, nE7, nRst, $4E, nRst, nG6, $06, nA6, nC7, $0C, nA6
000F6CD2 8036 80D5 0680 12D2 18D0+  	dc.b	nRst, $36, nRst, nC7, $06, nRst, $12, nA6, $18, nG6, $06, nRst
000F6CDE D280 D580                  	dc.b	nA6, nRst, nC7, nRst
000F6CE2 F4                         	smpsModOff
000F6CE5 E6FE                       	smpsAlterVol        $FE
000F6CE7                            
000F6CE7                            Mus91_Credits_Loop0D:
000F6CE7 C901 E7C8 1B80 08C7 01E7+  	dc.b	nC6, $01, smpsNoAttack, nB5, $1B, nRst, $08, nBb5, $01, smpsNoAttack, nA5, $1B
000F6CF3 8008                       	dc.b	nRst, $08
000F6CF5 F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop0D
000F6CFA C901 E7C8 0B80 0CC7 01E7+  	dc.b	nC6, $01, smpsNoAttack, nB5, $0B, nRst, $0C, nBb5, $01, smpsNoAttack, nA5, $0B
000F6D06 800C CA01 E7C9 1B80 08C9+  	dc.b	nRst, $0C, nCs6, $01, smpsNoAttack, nC6, $1B, nRst, $08, nC6, $01, smpsNoAttack
000F6D12 C824 E718 E75A 8006        	dc.b	nB5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000F6D1A E918                       	smpsAlterPitch      $18
000F6D1C 8060 8080 30               	dc.b	nRst, $60, nRst, nRst, $30
000F6D21 E9E8                       	smpsAlterPitch      $E8
000F6D25 E90C                       	smpsAlterPitch      $0C
000F6D27 E603                       	smpsAlterVol        $03
000F6D29 E102                       	smpsAlterNote       $02
000F6D2B 8018 C606 C8C9 CD          	dc.b	nRst, $18, nA5, $06, nB5, nC6, nE6
000F6D32 F800 00                    	smpsCall            Mus91_Credits_Call0C
000F6D37 E90C                       	smpsAlterPitch      $0C
000F6D39 E60B                       	smpsAlterVol        $0B
000F6D3B 800C C4C6 D0               	dc.b	nRst, $0C, nG5, nA5, nG6
000F6D40 F800 00                    	smpsCall            Mus91_Credits_Call0D
000F6D45 E6EC                       	smpsAlterVol        $EC
000F6D47 8006                       	dc.b	nRst, $06
000F6D49 E114                       	smpsAlterNote       $14
000F6D4B C401 E7                    	dc.b	nG5, $01, smpsNoAttack
000F6D4E E100                       	smpsAlterNote       $00
000F6D50 02C6 03                    	dc.b	$02, nA5, $03
000F6D53 E805                       	smpsNoteFill        $05
000F6D55 C903 C906 C603 C9          	dc.b	nC6, $03, nC6, $06, nA5, $03, nC6
000F6D5C E800                       	smpsNoteFill        $00
000F6D5E C9                         	dc.b	nC6
000F6D5F E6FC                       	smpsAlterVol        $FC
000F6D61 E933                       	smpsAlterPitch      $33
000F6D65 B403                       	dc.b	nEb4, $03
000F6D67 E607                       	smpsAlterVol        $07
000F6D69 B4                         	dc.b	nEb4
000F6D6A E607                       	smpsAlterVol        $07
000F6D6C B4                         	dc.b	nEb4
000F6D6D E607                       	smpsAlterVol        $07
000F6D6F B4                         	dc.b	nEb4
000F6D72 E6EF                       	smpsAlterVol        $EF
000F6D74 E9CD                       	smpsAlterPitch      $CD
000F6D76 CD03 CED0 8009             	dc.b	nE6, $03, nF6, nG6, nRst, $09
000F6D7C E1EC                       	smpsAlterNote       $EC
000F6D7E D501 E7                    	dc.b	nC7, $01, smpsNoAttack
000F6D81 E100                       	smpsAlterNote       $00
000F6D83 F02C 0104 04               	smpsModSet          $2C, $01, $04, $04
000F6D88 D523                       	dc.b	nC7, $23
000F6D8A F4                         	smpsModOff
000F6D8D E6FF                       	smpsAlterVol        $FF
000F6D8F E103                       	smpsAlterNote       $03
000F6D91 F800 00                    	smpsCall            Mus91_Credits_Call0E
000F6D94 E100                       	smpsAlterNote       $00
000F6D98 E609                       	smpsAlterVol        $09
000F6D9A 8030 8030 802E C202 8004+  	dc.b	nRst, $30, nRst, $30, nRst, $2E, nF5, $02, nRst, $04, nF5, $08
000F6DA6 C203 80C2 80C1 0380 13BF+  	dc.b	nF5, $03, nRst, nF5, nRst, nE5, $03, nRst, $13, nD5, $02, nRst
000F6DB2 04BF 08BF 0380 BF80 BD03+  	dc.b	$04, nD5, $08, nD5, $03, nRst, nD5, nRst, nC5, $03, nRst, $15
000F6DBE 8004 D208 D003 80D0 80CE+  	dc.b	nRst, $04, nA6, $08, nG6, $03, nRst, nG6, nRst, nF6, nRst, nF6
000F6DCA 80CD 04CE 02CD 04CB 02     	dc.b	nRst, nE6, $04, nF6, $02, nE6, $04, nD6, $02
000F6DD5 E6F9                       	smpsAlterVol        $F9
000F6DD7 8060                       	dc.b	nRst, $60
000F6DD9                            
000F6DD9                            Mus91_Credits_Loop0E:
000F6DD9 CD06 80CD 80CA 80CA 80CB+  	dc.b	nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nD6, $12, nD6
000F6DE5 1ECD 0680 CD80 CA80 CA80+  	dc.b	$1E, nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nG6, $12
000F6DF1 D01E                       	dc.b	nG6, $1E
000F6DF3 F700 02FF E2               	smpsLoop            $00, $02, Mus91_Credits_Loop0E
000F6DF8 800C CB12 8006 CB80 CA12+  	dc.b	nRst, $0C, nD6, $12, nRst, $06, nD6, nRst, nCs6, $12, nD6, nCs6
000F6E04 0CC5 18C8 CBD1 800C CD80+  	dc.b	$0C, nAb5, $18, nB5, nD6, nAb6, nRst, $0C, nE6, nRst, nE6, $12
000F6E10 CCCD 0680                  	dc.b	nEb6, nE6, $06, nRst
000F6E16 E6F8                       	smpsAlterVol        $F8
000F6E18 E103                       	smpsAlterNote       $03
000F6E1A A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000F6E1E F2                         	smpsStop
000F6E1F                            
000F6E1F                            Mus91_Credits_Call14:
000F6E1F CB06 CDCF D0CD CFD0 D2CF+  	dc.b	nD6, $06, nE6, nFs6, nG6, nE6, nFs6, nG6, nA6, nFs6, nG6, nA6
000F6E2B D4D2 D4D5 D7               	dc.b	nB6, nA6, nB6, nC7, nD7
000F6E30 E3                         	smpsReturn
000F6E31                            
000F6E31                            ; FM4 Data
000F6E31                            Mus91_Credits_FM4:
000F6E33 8060                       	dc.b	nRst, $60
000F6E35 E608                       	smpsAlterVol        $08
000F6E37 F800 00                    	smpsCall            Mus91_Credits_Call08
000F6E3A C30C C380 80C6 C680 80     	dc.b	nFs5, $0C, nFs5, nRst, nRst, nA5, nA5, nRst, nRst
000F6E43 F800 00                    	smpsCall            Mus91_Credits_Call08
000F6E46 C624 2418                  	dc.b	nA5, $24, $24, $18
000F6E4A E080                       	smpsPan             panLeft, $00
000F6E4C F800 00                    	smpsCall            Mus91_Credits_Call03
000F6E4F E6F2                       	smpsAlterVol        $F2
000F6E51                            
000F6E51                            Mus91_Credits_Loop09:
000F6E51 C501 E7C4 1B80 08C3 01E7+  	dc.b	nAb5, $01, smpsNoAttack, nG5, $1B, nRst, $08, nFs5, $01, smpsNoAttack, nF5, $1B
000F6E5D 8008                       	dc.b	nRst, $08
000F6E5F F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop09
000F6E64 C501 E7C4 0B80 0CC3 01E7+  	dc.b	nAb5, $01, smpsNoAttack, nG5, $0B, nRst, $0C, nFs5, $01, smpsNoAttack, nF5, $0B
000F6E70 800C C701 E7C6 1B80 08C5+  	dc.b	nRst, $0C, nBb5, $01, smpsNoAttack, nA5, $1B, nRst, $08, nAb5, $01, smpsNoAttack
000F6E7C C424 E718 E75A 8006        	dc.b	nG5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000F6E84 E918                       	smpsAlterPitch      $18
000F6E86 8060 8080 5A               	dc.b	nRst, $60, nRst, nRst, $5A
000F6E8B E0C0                       	smpsPan             panCenter, $00
000F6E8F E9F4                       	smpsAlterPitch      $F4
000F6E91 E605                       	smpsAlterVol        $05
000F6E93                            
000F6E93                            Mus91_Credits_Loop0A:
000F6E93 D409 8003 D480 D506 80D4+  	dc.b	nB6, $09, nRst, $03, nB6, nRst, nC7, $06, nRst, nB6, $0C, nRst
000F6E9F 06                         	dc.b	$06
000F6EA0 F700 02FF EF               	smpsLoop            $00, $02, Mus91_Credits_Loop0A
000F6EA5 8012 D503 800F D503 801B+  	dc.b	nRst, $12, nC7, $03, nRst, $0F, nC7, $03, nRst, $1B, nC7, $03
000F6EB1 800F D503 8009 CE09 8003+  	dc.b	nRst, $0F, nC7, $03, nRst, $09, nF6, $09, nRst, $03, nF6, nRst
000F6EBD D206 80CE 0C80 06D1 0980+  	dc.b	nA6, $06, nRst, nF6, $0C, nRst, $06, nAb6, $09, nRst, $03, nAb6
000F6EC9 80D4 0680 D10C 8006 8080+  	dc.b	nRst, nB6, $06, nRst, nAb6, $0C, nRst, $06, nRst, nRst, $0C, nC7
000F6ED5 0380 0FD5 0380 0FD5 0380+  	dc.b	$03, nRst, $0F, nC7, $03, nRst, $0F, nC7, $03, nRst, $2D
000F6EE0 E9F4                       	smpsAlterPitch      $F4
000F6EE2 E603                       	smpsAlterVol        $03
000F6EE6 E080                       	smpsPan             panLeft, $00
000F6EE8 F800 00                    	smpsCall            Mus91_Credits_Call09
000F6EED E6F6                       	smpsAlterVol        $F6
000F6EEF E918                       	smpsAlterPitch      $18
000F6EF1 F800 00                    	smpsCall            Mus91_Credits_Call0A
000F6EF4 800C                       	dc.b	nRst, $0C
000F6EF6 E1EC                       	smpsAlterNote       $EC
000F6EF8 C602                       	dc.b	nA5, $02
000F6EFA E100                       	smpsAlterNote       $00
000F6EFC E70A 8003 C680 80C6 8009   	dc.b	smpsNoAttack, $0A, nRst, $03, nA5, nRst, nRst, nA5, nRst, $09
000F6F06 F800 00                    	smpsCall            Mus91_Credits_Call0A
000F6F09 E1EC                       	smpsAlterNote       $EC
000F6F0B C602                       	dc.b	nA5, $02
000F6F0D E100                       	smpsAlterNote       $00
000F6F0F 0A80 06                    	dc.b	$0A, nRst, $06
000F6F12 F018 0107 04               	smpsModSet          $18, $01, $07, $04
000F6F17 E1E2                       	smpsAlterNote       $E2
000F6F19 C602 E7                    	dc.b	nA5, $02, smpsNoAttack
000F6F1C E100                       	smpsAlterNote       $00
000F6F1E 1C                         	dc.b	$1C
000F6F1F E100                       	smpsAlterNote       $00
000F6F21 E103                       	smpsAlterNote       $03
000F6F23 F800 00                    	smpsCall            Mus91_Credits_Call06
000F6F26 E100                       	smpsAlterNote       $00
000F6F28 E0C0                       	smpsPan             panCenter, $00
000F6F2C E6F5                       	smpsAlterVol        $F5
000F6F2E 8060                       	dc.b	nRst, $60
000F6F30                            
000F6F30                            Mus91_Credits_Loop0B:
000F6F30 CA06 80CA 80C6 80C6 80C8+  	dc.b	nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nB5, $12, nB5
000F6F3C 1ECA 0680 CA80 C680 C680+  	dc.b	$1E, nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nD6, $12
000F6F48 CB1E                       	dc.b	nD6, $1E
000F6F4A F700 02FF E2               	smpsLoop            $00, $02, Mus91_Credits_Loop0B
000F6F51 E103                       	smpsAlterNote       $03
000F6F53 E608                       	smpsAlterVol        $08
000F6F55 F800 00                    	smpsCall            Mus91_Credits_Call0B
000F6F5A E6F0                       	smpsAlterVol        $F0
000F6F5C F000 0106 04               	smpsModSet          $00, $01, $06, $04
000F6F61 A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000F6F65 F2                         	smpsStop
000F6F66                            
000F6F66                            Mus91_Credits_Call08:
000F6F66 C824 2418 C624 2418 C424+  	dc.b	nB5, $24, $24, $18, nA5, $24, $24, $18, nG5, $24, $24, $18
000F6F72 E3                         	smpsReturn
000F6F73                            
000F6F73                            Mus91_Credits_Call03:
000F6F75 E9E8                       	smpsAlterPitch      $E8
000F6F77 E60D                       	smpsAlterVol        $0D
000F6F79                            
000F6F79                            Mus91_Credits_Loop2D:
000F6F79 F800 00                    	smpsCall            Mus91_Credits_Call1B
000F6F7C BFBF                       	dc.b	nD5, nD5
000F6F7E F700 02FF F7               	smpsLoop            $00, $02, Mus91_Credits_Loop2D
000F6F83 F800 00                    	smpsCall            Mus91_Credits_Call1B
000F6F86 B5B5 BDBD BABA B6B6 B3B3+  	dc.b	nE4, nE4, nC5, nC5, nA4, nA4, nF4, nF4, nD4, nD4, nB4, nB4
000F6F92 E603                       	smpsAlterVol        $03
000F6F94 E90C                       	smpsAlterPitch      $0C
000F6F98 D018 D2D4                  	dc.b	nG6, $18, nA6, nB6
000F6F9C E9F4                       	smpsAlterPitch      $F4
000F6FA0 E3                         	smpsReturn
000F6FA1                            
000F6FA1                            Mus91_Credits_Call1B:
000F6FA1 C10C C1BD BDBA BAB6 B6BF+  	dc.b	nE5, $0C, nE5, nC5, nC5, nA4, nA4, nF4, nF4, nD5, nD5, nB4
000F6FAD BCB8 B8                    	dc.b	nB4, nG4, nG4
000F6FB0 E3                         	smpsReturn
000F6FB1                            
000F6FB1                            Mus91_Credits_Call0A:
000F6FB1 800C                       	dc.b	nRst, $0C
000F6FB3 E1EC                       	smpsAlterNote       $EC
000F6FB5 C402                       	dc.b	nG5, $02
000F6FB7 E100                       	smpsAlterNote       $00
000F6FB9 E706 8001 C403 8018 800C   	dc.b	smpsNoAttack, $06, nRst, $01, nG5, $03, nRst, $18, nRst, $0C
000F6FC3 E1EC                       	smpsAlterNote       $EC
000F6FC5 CA02                       	dc.b	nCs6, $02
000F6FC7 E100                       	smpsAlterNote       $00
000F6FC9 E706 8001 CA03 8018 800C   	dc.b	smpsNoAttack, $06, nRst, $01, nCs6, $03, nRst, $18, nRst, $0C
000F6FD3 E1EC                       	smpsAlterNote       $EC
000F6FD5 C902                       	dc.b	nC6, $02
000F6FD7 E100                       	smpsAlterNote       $00
000F6FD9 E706 8001 C903 8018        	dc.b	smpsNoAttack, $06, nRst, $01, nC6, $03, nRst, $18
000F6FE1 E3                         	smpsReturn
000F6FE2                            
000F6FE2                            Mus91_Credits_Call06:
000F6FE2 E608                       	smpsAlterVol        $08
000F6FE6 8030 8030                  	dc.b	nRst, $30, nRst, $30
000F6FEA E501                       	smpsChanTempoDiv    $01
000F6FEC F800 00                    	smpsCall            Mus91_Credits_Call17
000F6FEF E502                       	smpsChanTempoDiv    $02
000F6FF3 F001 0101 04               	smpsModSet          $01, $01, $01, $04
000F6FF8 CB02 8004 CB08 CB03 80CB+  	dc.b	nD6, $02, nRst, $04, nD6, $08, nD6, $03, nRst, nD6, nRst, nC6
000F7004 80D2 80CE 8007 C702 8004+  	dc.b	nRst, nA6, nRst, nF6, nRst, $07, nBb5, $02, nRst, $04, nBb5, $08
000F7010 C703 80C7 80C6 0380 13C6+  	dc.b	nBb5, $03, nRst, nBb5, nRst, nA5, $03, nRst, $13, nA5, $0E, nCs6
000F701C 0CCD D60A D702             	dc.b	$0C, nE6, nCs7, $0A, nD7, $02
000F7022 E3                         	smpsReturn
000F7023                            
000F7023                            Mus91_Credits_Call17:
000F7023 AF01 E7AE 0480 07AF 01E7+  	dc.b	nBb3, $01, smpsNoAttack, nA3, $04, nRst, $07, nBb3, $01, smpsNoAttack, nA3, $04
000F702F 8007 B101 E7B0 0480 07B1+  	dc.b	nRst, $07, nC4, $01, smpsNoAttack, nB3, $04, nRst, $07, nC4, $01, smpsNoAttack
000F703B B004 8007 B201 E7B1 0480+  	dc.b	nB3, $04, nRst, $07, nCs4, $01, smpsNoAttack, nC4, $04, nRst, $07, nCs4
000F7047 01E7 B104 8007 B301 E7B2+  	dc.b	$01, smpsNoAttack, nC4, $04, nRst, $07, nD4, $01, smpsNoAttack, nCs4, $04, nRst
000F7053 07B3 01E7 B204 8003        	dc.b	$07, nD4, $01, smpsNoAttack, nCs4, $04, nRst, $03
000F705B E3                         	smpsReturn
000F705C                            
000F705C                            Mus91_Credits_Call0B:
000F705C 800C D0D4 D7DB 8006 DB0C+  	dc.b	nRst, $0C, nG6, nB6, nD7, nFs7, nRst, $06, nFs7, $0C, nG7, $06
000F7068 DB0C DD54 800C DE80 DE80+  	dc.b	nFs7, $0C, nAb7, $54, nRst, $0C, nA7, nRst, nA7, nRst, $12, nAb7
000F7074 DE0C                       	dc.b	nA7, $0C
000F7076 E3                         	smpsReturn
000F7077                            
000F7077                            ; FM5 Data
000F7077                            Mus91_Credits_FM5:
000F7079 8060                       	dc.b	nRst, $60
000F707B E6F0                       	smpsAlterVol        $F0
000F707D F800 00                    	smpsCall            Mus91_Credits_Call02
000F7080 BF0C 0C80 18C3 0C0C 8018   	dc.b	nD5, $0C, $0C, nRst, $18, nFs5, $0C, $0C, nRst, $18
000F708A F800 00                    	smpsCall            Mus91_Credits_Call02
000F708D C324 2418                  	dc.b	nFs5, $24, $24, $18
000F7091 E040                       	smpsPan             panRight, $00
000F7093 F8FE DE                    	smpsCall            Mus91_Credits_Call03
000F7096 E6F2                       	smpsAlterVol        $F2
000F7098                            
000F7098                            Mus91_Credits_Loop07:
000F7098 C201 E7C1 1B80 08C0 01E7+  	dc.b	nF5, $01, smpsNoAttack, nE5, $1B, nRst, $08, nEb5, $01, smpsNoAttack, nD5, $1B
000F70A4 8008                       	dc.b	nRst, $08
000F70A6 F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop07
000F70AB C201 E7C1 0B80 0CC0 01E7+  	dc.b	nF5, $01, smpsNoAttack, nE5, $0B, nRst, $0C, nEb5, $01, smpsNoAttack, nD5, $0B
000F70B7 800C C301 E7C2 1B80 08C2+  	dc.b	nRst, $0C, nFs5, $01, smpsNoAttack, nF5, $1B, nRst, $08, nF5, $01, smpsNoAttack
000F70C3 C124 E718 E75A 8006        	dc.b	nE5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000F70CB E918                       	smpsAlterPitch      $18
000F70CD E0C0                       	smpsPan             panCenter, $00
000F70CF E603                       	smpsAlterVol        $03
000F70D1 E90C                       	smpsAlterPitch      $0C
000F70D5 804E B803 BABD 80BA 8051+  	dc.b	nRst, $4E, nG4, $03, nA4, nC5, nRst, nA4, nRst, $51, nA5, $03
000F70E1 C2BD 80C2 805D             	dc.b	nF5, nC5, nRst, nF5, nRst, $5D
000F70E9 E9E8                       	smpsAlterPitch      $E8
000F70EB E602                       	smpsAlterVol        $02
000F70ED                            
000F70ED                            Mus91_Credits_Loop08:
000F70ED D009 8003 D080 D206 80D0+  	dc.b	nG6, $09, nRst, $03, nG6, nRst, nA6, $06, nRst, nG6, $0C, nRst
000F70F9 06                         	dc.b	$06
000F70FA F700 02FF EF               	smpsLoop            $00, $02, Mus91_Credits_Loop08
000F70FF 8012 D203 800F D203 801B+  	dc.b	nRst, $12, nA6, $03, nRst, $0F, nA6, $03, nRst, $1B, nA6, $03
000F710B 800F D203 8009 CB09 8003+  	dc.b	nRst, $0F, nA6, $03, nRst, $09, nD6, $09, nRst, $03, nD6, nRst
000F7117 CE06 80CB 0C80 06CD 0980+  	dc.b	nF6, $06, nRst, nD6, $0C, nRst, $06, nE6, $09, nRst, $03, nE6
000F7123 80D1 0680 CD0C 8018 D203+  	dc.b	nRst, nAb6, $06, nRst, nE6, $0C, nRst, $18, nA6, $03, nRst, $0F
000F712F D203 800F D203 802D        	dc.b	nA6, $03, nRst, $0F, nA6, $03, nRst, $2D
000F7139 E040                       	smpsPan             panRight, $00
000F713B E9F4                       	smpsAlterPitch      $F4
000F713D E603                       	smpsAlterVol        $03
000F713F F800 00                    	smpsCall            Mus91_Credits_Call04
000F7144 E924                       	smpsAlterPitch      $24
000F7146 E6F4                       	smpsAlterVol        $F4
000F7148 F800 00                    	smpsCall            Mus91_Credits_Call05
000F714B CDCE D0                    	dc.b	nE6, nF6, nG6
000F714E F800 00                    	smpsCall            Mus91_Credits_Call05
000F7151 D0CE CD                    	dc.b	nG6, nF6, nE6
000F7154 E9F4                       	smpsAlterPitch      $F4
000F7156 F8FE 8A                    	smpsCall            Mus91_Credits_Call06
000F7159 E0C0                       	smpsPan             panCenter, $00
000F715D E103                       	smpsAlterNote       $03
000F715F E6F8                       	smpsAlterVol        $F8
000F7161 8060                       	dc.b	nRst, $60
000F7163 F8F8 45                    	smpsCall            Mus91_Credits_Call07
000F7166 E600                       	smpsAlterVol        $00
000F716A 8060 800C CD06 80D4 CD06+  	dc.b	nRst, $60, nRst, $0C, nE6, $06, nRst, nB6, nE6, $06, nRst, $0C
000F7176 CD06 80D4 CD06 8018        	dc.b	nE6, $06, nRst, nB6, nE6, $06, nRst, $18
000F717E E605                       	smpsAlterVol        $05
000F7180 800C AE80 AE               	dc.b	nRst, $0C, nA3, nRst, nA3
000F7185 F2                         	smpsStop
000F7186                            
000F7186                            Mus91_Credits_Call02:
000F7186 C424 2418 C324 2418 C124+  	dc.b	nG5, $24, $24, $18, nFs5, $24, $24, $18, nE5, $24, $24, $18
000F7192 E3                         	smpsReturn
000F7193                            
000F7193                            ; PSG1 Data
000F7193                            Mus91_Credits_PSG1:
000F7193 8060                       	dc.b	nRst, $60
000F7195 F508                       	smpsPSGvoice        fTone_08
000F7197 EC03                       	smpsPSGAlterVol     $03
000F7199 E806                       	smpsNoteFill        $06
000F719B F800 00                    	smpsCall            Mus91_Credits_Call11
000F719E F501                       	smpsPSGvoice        fTone_01
000F71A0 E800                       	smpsNoteFill        $00
000F71A2 ECFD                       	smpsPSGAlterVol     $FD
000F71A4                            
000F71A4                            Mus91_Credits_Loop2A:
000F71A4 8018 C906 801E C90C 8018+  	dc.b	nRst, $18, nC6, $06, nRst, $1E, nC6, $0C, nRst, $18, nRst, $18
000F71B0 C806 801E C80C 8018        	dc.b	nB5, $06, nRst, $1E, nB5, $0C, nRst, $18
000F71B8 F700 03FF E8               	smpsLoop            $00, $03, Mus91_Credits_Loop2A
000F71BD 8018 C606 801E C60C 8018+  	dc.b	nRst, $18, nA5, $06, nRst, $1E, nA5, $0C, nRst, $18, nRst, $18
000F71C9 C406 801E C40C 8018        	dc.b	nG5, $06, nRst, $1E, nG5, $0C, nRst, $18
000F71D1 F505                       	smpsPSGvoice        fTone_05
000F71D3 F00E 0101 03               	smpsModSet          $0E, $01, $01, $03
000F71D8 E810                       	smpsNoteFill        $10
000F71DA C124 BFC1 BFC1 0C80 BF80+  	dc.b	nE5, $24, nD5, nE5, nD5, nE5, $0C, nRst, nD5, nRst, nF5, $24
000F71E6 E800                       	smpsNoteFill        $00
000F71E8 C160 E73C                  	dc.b	nE5, $60, smpsNoAttack, $3C
000F71EC F4                         	smpsModOff
000F71ED F508                       	smpsPSGvoice        fTone_08 ; changed from 9 to 8 for cleveland rip
000F71EF EC01                       	smpsPSGAlterVol     $01
000F71F1                            
000F71F1                            Mus91_Credits_Loop2B:
000F71F1 8006 CD0C CDCD CD06 80CD+  	dc.b	nRst, $06, nE6, $0C, nE6, nE6, nE6, $06, nRst, nE6, $0C, nE6
000F71FD CD03 0906                  	dc.b	nE6, $03, $09, $06
000F7201 E905                       	smpsAlterPitch      $05
000F7203 F700 02FF EA               	smpsLoop            $00, $02, Mus91_Credits_Loop2B
000F7208 E9F6                       	smpsAlterPitch      $F6
000F720A 8006 CD0C CDCD CD06 8030   	dc.b	nRst, $06, nE6, $0C, nE6, nE6, nE6, $06, nRst, $30
000F7214 F508                       	smpsPSGvoice        fTone_08
000F7216 EC01                       	smpsPSGAlterVol     $01
000F7218 F800 00                    	smpsCall            Mus91_Credits_Call15
000F721B 8002 8030                  	dc.b	nRst, $02, nRst, $30
000F721F EC03                       	smpsPSGAlterVol     $03
000F7221 E9F4                       	smpsAlterPitch      $F4
000F7223 F505                       	smpsPSGvoice        fTone_05
000F7225 F800 00                    	smpsCall            Mus91_Credits_Call09
000F7228 E90C                       	smpsAlterPitch      $0C
000F722A ECFC                       	smpsPSGAlterVol     $FC
000F722C F500                       	smpsPSGvoice        $00
000F722E F800 00                    	smpsCall            Mus91_Credits_Call16
000F7231 800C C280 03C2 8080 C280+  	dc.b	nRst, $0C, nF5, nRst, $03, nF5, nRst, nRst, nF5, nRst, $09
000F723C F800 00                    	smpsCall            Mus91_Credits_Call16
000F723F C20C 8006 C21E             	dc.b	nF5, $0C, nRst, $06, nF5, $1E
000F7245 F506                       	smpsPSGvoice        fTone_06
000F7247 EC04                       	smpsPSGAlterVol     $04
000F7249 8030 8030                  	dc.b	nRst, $30, nRst, $30
000F724D E501                       	smpsChanTempoDiv    $01
000F724F F8FD D2                    	smpsCall            Mus91_Credits_Call17
000F7252 E502                       	smpsChanTempoDiv    $02
000F7254 CB02 8004 CB08 CB03 80CB+  	dc.b	nD6, $02, nRst, $04, nD6, $08, nD6, $03, nRst, nD6, nRst, nC6
000F7260 80D2 80CE 8007 C702 8004+  	dc.b	nRst, nA6, nRst, nF6, nRst, $07, nBb5, $02, nRst, $04, nBb5, $08
000F726C C703 80C7 80C6 0380 13C6+  	dc.b	nBb5, $03, nRst, nBb5, nRst, nA5, $03, nRst, $13, nA5, $0E, nCs6
000F7278 0CCD D60A D702 8060 8080+  	dc.b	$0C, nE6, nCs7, $0A, nD7, $02, nRst, $60, nRst, nRst, nRst, nRst
000F7284 ECFF                       	smpsPSGAlterVol     $FF
000F7286 800C C812 8006 C880 C612+  	dc.b	nRst, $0C, nB5, $12, nRst, $06, nB5, nRst, nA5, $12, nB5, nA5
000F7292 0CC1 18C5 C8CB 800C CA80+  	dc.b	$0C, nE5, $18, nAb5, nB5, nD6, nRst, $0C, nCs6, nRst, nCs6, $12
000F729E C9CA 06                    	dc.b	nC6, nCs6, $06
000F72A1 F2                         	smpsStop
000F72A2                            
000F72A2                            Mus91_Credits_Call16:
000F72A2 800C C107 8002 C103 8018+  	dc.b	nRst, $0C, nE5, $07, nRst, $02, nE5, $03, nRst, $18, nRst, $0C
000F72AE C707 8002 C703 8018 800C+  	dc.b	nBb5, $07, nRst, $02, nBb5, $03, nRst, $18, nRst, $0C, nA5, $07
000F72BA 8002 C603 8018             	dc.b	nRst, $02, nA5, $03, nRst, $18
000F72C0 E3                         	smpsReturn
000F72C1                            
000F72C1                            ; PSG2 Data
000F72C1                            Mus91_Credits_PSG2:
000F72C1 8060                       	dc.b	nRst, $60
000F72C3 F700 08FF FA               	smpsLoop            $00, $08, Mus91_Credits_PSG2
000F72C8 8002                       	dc.b	nRst, $02
000F72CA F8FB 53                    	smpsCall            Mus91_Credits_Call14
000F72CD ECFE                       	smpsPSGAlterVol     $FE
000F72CF F501                       	smpsPSGvoice        fTone_01
000F72D1 8016 CD06 801E CD0C 8018+  	dc.b	nRst, $16, nE6, $06, nRst, $1E, nE6, $0C, nRst, $18, nRst, $18
000F72DD CB06 801E CB0C 8018        	dc.b	nD6, $06, nRst, $1E, nD6, $0C, nRst, $18
000F72E5                            Mus91_Credits_Loop24:
000F72E5 8018 CD06 801E CD0C 8018+  	dc.b	nRst, $18, nE6, $06, nRst, $1E, nE6, $0C, nRst, $18, nRst, $18
000F72F1 CB06 801E CB0C 8018        	dc.b	nD6, $06, nRst, $1E, nD6, $0C, nRst, $18
000F72F9 F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop24
000F72FE 8018 C906 801E C90C 8018+  	dc.b	nRst, $18, nC6, $06, nRst, $1E, nC6, $0C, nRst, $18, nRst, $18
000F730A C806 801E C80C 8018        	dc.b	nB5, $06, nRst, $1E, nB5, $0C, nRst, $18
000F7312 E806                       	smpsNoteFill        $06
000F7314 F506                       	smpsPSGvoice        fTone_06
000F7316                            
000F7316                            Mus91_Credits_Loop25:
000F7316 D50C D4D2 D0               	dc.b	nC7, $0C, nB6, nA6, nG6
000F731B F700 08FF F7               	smpsLoop            $00, $08, Mus91_Credits_Loop25
000F7320 E800                       	smpsNoteFill        $00
000F7322 F508                       	smpsPSGvoice        fTone_08 ; changed from 9 to 8 for cleveland rip
000F7324 EC01                       	smpsPSGAlterVol     $01
000F7326                            
000F7326                            Mus91_Credits_Loop26:
000F7326 8006 D00C D0D0 D006 80D0+  	dc.b	nRst, $06, nG6, $0C, nG6, nG6, nG6, $06, nRst, nG6, $0C, nG6
000F7332 D003 0906                  	dc.b	nG6, $03, $09, $06
000F7336 E905                       	smpsAlterPitch      $05
000F7338 F700 02FF EA               	smpsLoop            $00, $02, Mus91_Credits_Loop26
000F733D E9F6                       	smpsAlterPitch      $F6
000F733F 8006 D00C D0D0 D006 8030+  	dc.b	nRst, $06, nG6, $0C, nG6, nG6, nG6, $06, nRst, $30, nRst, $02
000F734B E101                       	smpsAlterNote       $01
000F734D EC03                       	smpsPSGAlterVol     $03
000F734F F800 00                    	smpsCall            Mus91_Credits_Call15
000F7352 E100                       	smpsAlterNote       $00
000F7354 8030                       	dc.b	nRst, $30
000F7356 EC01                       	smpsPSGAlterVol     $01
000F7358 E9F4                       	smpsAlterPitch      $F4
000F735A F505                       	smpsPSGvoice        fTone_05
000F735C F800 00                    	smpsCall            Mus91_Credits_Call04
000F735F E90C                       	smpsAlterPitch      $0C
000F7361 ECFD                       	smpsPSGAlterVol     $FD
000F7363 E803                       	smpsNoteFill        $03
000F7365                            
000F7365                            Mus91_Credits_Loop27:
000F7365 D503 D5DC D5DA D5D9 D5     	dc.b	nC7, $03, nC7, nG7, nC7, nF7, nC7, nE7, nC7
000F736E F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Loop27
000F7373                            
000F7373                            Mus91_Credits_Loop28:
000F7373 D3D3 DAD3 D8D3 D6D3        	dc.b	nBb6, nBb6, nF7, nBb6, nEb7, nBb6, nCs7, nBb6
000F737B F700 02FF F4               	smpsLoop            $00, $02, Mus91_Credits_Loop28
000F7380                            
000F7380                            Mus91_Credits_Loop29:
000F7380 D2D2 D9D2 D7D2 D5D2        	dc.b	nA6, nA6, nE7, nA6, nD7, nA6, nC7, nA6
000F7388 F700 04FF F4               	smpsLoop            $00, $04, Mus91_Credits_Loop29
000F738D F701 02FF D4               	smpsLoop            $01, $02, Mus91_Credits_Loop27
000F7392 8060 8080 8080 80          	dc.b	nRst, $60, nRst, nRst, nRst, nRst, nRst
000F7399                            ;	; These rests are unnecessary, and cause the following notes to play way too late.
000F7399                            ;	; Delete these three notes to fix this.
000F7399                            ;	dc.b	nRst, nRst, nRst
000F7399                            ;	; This erroneous FM-only command causes the following notes to be inaudible.
000F7399                            ;	smpsAlterVol        $0C
000F7399                            ; there we go i fixed it - coni
000F7399 E102                       	smpsAlterNote       $02
000F739B EC02                       	smpsPSGAlterVol     $02
000F739D 800C CD06 80D4 CD06 800C+  	dc.b	nRst, $0C, nE6, $06, nRst, nB6, nE6, $06, nRst, $0C, nE6, $06
000F73A9 80D4 CD                    	dc.b	nRst, nB6, nE6
000F73AC F2                         	smpsStop
000F73AD                            
000F73AD                            ; PSG3 Data
000F73AD                            Mus91_Credits_PSG3:
000F73AD F3E7                       	smpsPSGform         $E7
000F73AF E804                       	smpsNoteFill        $04
000F73B1                            
000F73B1                            Mus91_Credits_Loop18:
000F73B1 000C                       	dc.b	nMaxPSG, $0C
000F73B3 F700 48FF FA               	smpsLoop            $00, $48, Mus91_Credits_Loop18
000F73B8 E806                       	smpsNoteFill        $06
000F73BA                            
000F73BA                            Mus91_Credits_Loop19:
000F73BA 0C                         	dc.b	$0C
000F73BB F700 60FF FB               	smpsLoop            $00, $60, Mus91_Credits_Loop19
000F73C0 ECFF                       	smpsPSGAlterVol     $FF
000F73C2 F800 00                    	smpsCall            Mus91_Credits_Call13
000F73C5 E80E                       	smpsNoteFill        $0E
000F73C7 0C                         	dc.b	$0C
000F73C8 E803                       	smpsNoteFill        $03
000F73CA 0606 0303 0603 0306        	dc.b	$06, $06, $03, $03, $06, $03, $03, $06
000F73D2                            
000F73D2                            Mus91_Credits_Loop1A:
000F73D2 F800 00                    	smpsCall            Mus91_Credits_Call13
000F73D5 F700 04FF F9               	smpsLoop            $00, $04, Mus91_Credits_Loop1A
000F73DA F509                       	smpsPSGvoice        fTone_09
000F73DC EC01                       	smpsPSGAlterVol     $01
000F73DE E90B                       	smpsAlterPitch      $0B
000F73E0                            
000F73E0                            Mus91_Credits_Loop1B:
000F73E0 AE06 AEB5 B5B3 B3B5 B5     	dc.b	nA3, $06, nA3, nE4, nE4, nD4, nD4, nE4, nE4
000F73E9 F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Loop1B
000F73EE                            
000F73EE                            Mus91_Credits_Loop1C:
000F73EE B3B3 BABA B6B6 BABA        	dc.b	nD4, nD4, nA4, nA4, nF4, nF4, nA4, nA4
000F73F6 F700 02FF F4               	smpsLoop            $00, $02, Mus91_Credits_Loop1C
000F73FB B0B0 B6B6 B3B3 B6B6 B5B5+  	dc.b	nB3, nB3, nF4, nF4, nD4, nD4, nF4, nF4, nE4, nE4, nB4, nB4
000F7407 B9B9 BCBC AEAE B5B5 B1B1+  	dc.b	nAb4, nAb4, nB4, nB4, nA3, nA3, nE4, nE4, nC4, nC4, nE4, nE4
000F7413 AE06 801E                  	dc.b	nA3, $06, nRst, $1E
000F7417 E802                       	smpsNoteFill        $02
000F7419 E9F5                       	smpsAlterPitch      $F5
000F741B                            
000F741B                            Mus91_Credits_Loop1D:
000F741B F504                       	smpsPSGvoice        fTone_04
000F741D 0003 03                    	dc.b	nMaxPSG, $03, $03
000F7420 EC02                       	smpsPSGAlterVol     $02
000F7422 F508                       	smpsPSGvoice        fTone_08
000F7424 E808                       	smpsNoteFill        $08
000F7426 06                         	dc.b	$06
000F7427 E803                       	smpsNoteFill        $03
000F7429 ECFE                       	smpsPSGAlterVol     $FE
000F742B F700 1EFF EC               	smpsLoop            $00, $1E, Mus91_Credits_Loop1D
000F7430 8024                       	dc.b	nRst, $24
000F7432                            
000F7432                            Mus91_Credits_Loop1E:
000F7432 F504                       	smpsPSGvoice        fTone_04
000F7434 0303                       	dc.b	$03, $03
000F7436 EC02                       	smpsPSGAlterVol     $02
000F7438 F508                       	smpsPSGvoice        fTone_08
000F743A E808                       	smpsNoteFill        $08
000F743C 06                         	dc.b	$06
000F743D E803                       	smpsNoteFill        $03
000F743F ECFE                       	smpsPSGAlterVol     $FE
000F7441 F700 20FF ED               	smpsLoop            $00, $20, Mus91_Credits_Loop1E
000F7446 8030                       	dc.b	nRst, $30
000F7448 E801                       	smpsNoteFill        $01
000F744A F504                       	smpsPSGvoice        fTone_04
000F744C EC03                       	smpsPSGAlterVol     $03
000F744E                            
000F744E                            Mus91_Credits_Loop1F:
000F744E 0002 8000                  	dc.b	nMaxPSG, $02, nRst, nMaxPSG
000F7452 F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop1F
000F7457                            
000F7457                            Mus91_Credits_Loop20:
000F7457 8004 0002                  	dc.b	nRst, $04, nMaxPSG, $02
000F745B F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop20
000F7460 ECFF                       	smpsPSGAlterVol     $FF
000F7462                            
000F7462                            Mus91_Credits_Loop21:
000F7462 0002 8000                  	dc.b	nMaxPSG, $02, nRst, nMaxPSG
000F7466 F700 18FF F8               	smpsLoop            $00, $18, Mus91_Credits_Loop21
000F746B ECFE                       	smpsPSGAlterVol     $FE
000F746D                            
000F746D                            Mus91_Credits_Loop22:
000F746D 0004 8000                  	dc.b	nMaxPSG, $04, nRst, nMaxPSG
000F7471 F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop22
000F7476                            
000F7476                            Mus91_Credits_Loop23:
000F7476 E803                       	smpsNoteFill        $03
000F7478 0C                         	dc.b	$0C
000F7479 E80C                       	smpsNoteFill        $0C
000F747B 0C                         	dc.b	$0C
000F747C E803                       	smpsNoteFill        $03
000F747E 0C                         	dc.b	$0C
000F747F E80C                       	smpsNoteFill        $0C
000F7481 0C                         	dc.b	$0C
000F7482 F700 0DFF F0               	smpsLoop            $00, $0D, Mus91_Credits_Loop23
000F7487 E803                       	smpsNoteFill        $03
000F7489 06                         	dc.b	$06
000F748A E80E                       	smpsNoteFill        $0E
000F748C 12                         	dc.b	$12
000F748D E803                       	smpsNoteFill        $03
000F748F 0C                         	dc.b	$0C
000F7490 E80F                       	smpsNoteFill        $0F
000F7492 0C                         	dc.b	$0C
000F7493 F2                         	smpsStop
000F7494                            
000F7494                            ; DAC Data
000F7494                            Mus91_Credits_DAC:
000F7494 8206 8282 8282 0C06 0C06+  	dc.b	dSnare, $06, dSnare, dSnare, dSnare, dSnare, $0C, $06, $0C, $06, $0C, $0C
000F74A0 0C                         	dc.b	$0C
000F74A1 F800 00                    	smpsCall            Mus91_Credits_Call00
000F74A4 8118 820C 8281 1882 0C82   	dc.b	dKick, $18, dSnare, $0C, dSnare, dKick, $18, dSnare, $0C, dSnare
000F74AE F800 00                    	smpsCall            Mus91_Credits_Call00
000F74B1 810C 8282 8282 8282 82     	dc.b	dKick, $0C, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare
000F74BA                            
000F74BA                            Mus91_Credits_Loop00:
000F74BA 8118 820C 8118 0C82 18     	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, $18
000F74C3 F700 07FF F3               	smpsLoop            $00, $07, Mus91_Credits_Loop00
000F74C8 8118 820C 8118 820C 0C0C   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dSnare, $0C, $0C, $0C
000F74D2                            
000F74D2                            Mus91_Credits_Loop01:
000F74D2 8118 820C 8118 0C82 18     	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, $18
000F74DB F700 03FF F3               	smpsLoop            $00, $03, Mus91_Credits_Loop01
000F74E0 8118 820C 8118 820C 8282   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dSnare, $0C, dSnare, dSnare
000F74EA EB02                       	smpsSetTempoDiv     $02
000F74EC                            
000F74EC                            Mus91_Credits_Loop02:
000F74EC 8112 8106 810C 82          	dc.b	dKick, $12, dKick, $06, dKick, $0C, dSnare
000F74F3 F700 05FF F5               	smpsLoop            $00, $05, Mus91_Credits_Loop02
000F74F8 8112 8106 8106 8282 82     	dc.b	dKick, $12, dKick, $06, dKick, $06, dSnare, dSnare, dSnare
000F7501                            
000F7501                            Mus91_Credits_Loop03:
000F7501 810C                       	dc.b	dKick, $0C
000F7503 F700 18FF FA               	smpsLoop            $00, $18, Mus91_Credits_Loop03
000F7508 810C 8181 8106 8102 8182+  	dc.b	dKick, $0C, dKick, dKick, dKick, $06, dKick, $02, dKick, dSnare, dSnare, $0C
000F7514 8024                       	dc.b	nRst, $24
000F7516                            
000F7516                            Mus91_Credits_Loop04:
000F7516 810C 8181 81               	dc.b	dKick, $0C, dKick, dKick, dKick
000F751B F700 07FF F7               	smpsLoop            $00, $07, Mus91_Credits_Loop04
000F7520 810C 8182 0382 8282 8282+  	dc.b	dKick, $0C, dKick, dSnare, $03, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare
000F752C F800 00                    	smpsCall            Mus91_Credits_Call01
000F752F 8802 8101 8905 8201 8805+  	dc.b	dHiTimpani, $02, dKick, $01, dMidTimpani, $05, dSnare, $01, dHiTimpani, $05, dMidTimpani, $06
000F753B F800 00                    	smpsCall            Mus91_Credits_Call01
000F753E 8902 8201 8805 8201 8905+  	dc.b	dMidTimpani, $02, dSnare, $01, dHiTimpani, $05, dSnare, $01, dMidTimpani, $05, dSnare, $01
000F754A 8802 8203 8203 8281 8182+  	dc.b	dHiTimpani, $02, dSnare, $03, dSnare, $03, dSnare, dKick, dKick, dSnare, dSnare, dKick
000F7556 8181 8209 8206 0303 8109+  	dc.b	dKick, dKick, dSnare, $09, dSnare, $06, $03, $03, dKick, $09, $03, dSnare
000F7562 0981 0606 0382 0603 0382+  	dc.b	$09, dKick, $06, $06, $03, dSnare, $06, $03, $03, dSnare, $06, dSnare
000F756E 8282 8282 8204 0204 8102   	dc.b	dSnare, dSnare, dSnare, dSnare, dSnare, $04, $02, $04, dKick, $02
000F7578                            
000F7578                            Mus91_Credits_Loop05:
000F7578 8004 8108 8206 8181 0C82+  	dc.b	nRst, $04, dKick, $08, dSnare, $06, dKick, dKick, $0C, dSnare, $0A, dKick
000F7584 02                         	dc.b	$02
000F7585 F700 03FF EF               	smpsLoop            $00, $03, Mus91_Credits_Loop05
000F758A EB01                       	smpsSetTempoDiv     $01
000F758C 8018 8214 8104 820C 8282+  	dc.b	nRst, $18, dSnare, $14, dKick, $04, dSnare, $0C, dSnare, dSnare, $0C, $08
000F7598 8104                       	dc.b	dKick, $04
000F759A                            
000F759A                            Mus91_Credits_Loop06:
000F759A 810C 8281 82               	dc.b	dKick, $0C, dSnare, dKick, dSnare
000F759F F701 03FF F7               	smpsLoop            $01, $03, Mus91_Credits_Loop06
000F75A4 810C 8281 0680 0282 8282+  	dc.b	dKick, $0C, dSnare, dKick, $06, nRst, $02, dSnare, dSnare, dSnare, $09, dSnare
000F75B0 03                         	dc.b	$03
000F75B1 F700 03FF E5               	smpsLoop            $00, $03, Mus91_Credits_Loop06
000F75B6 810C 8281 8281 0682 1282+  	dc.b	dKick, $0C, dSnare, dKick, dSnare, dKick, $06, dSnare, $12, dSnare, $0C, dKick
000F75C2 F2                         	smpsStop
000F75C3                            
000F75C3                            Mus91_Credits_Call00:
000F75C3 8118 820C 8118 810C 8281   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dKick, $0C, dSnare, dKick
000F75CD F700 03FF F2               	smpsLoop            $00, $03, Mus91_Credits_Call00
000F75D2 E3                         	smpsReturn
000F75D3                            
000F75D3                            Mus91_Credits_Call01:
000F75D3 810C 8209 8106 0381 0188+  	dc.b	dKick, $0C, dSnare, $09, dKick, $06, $03, dKick, $01, dHiTimpani, $02, dMidTimpani
000F75DF 0382 0188 0B81 0C82 0981+  	dc.b	$03, dSnare, $01, dHiTimpani, $0B, dKick, $0C, dSnare, $09, dKick, $06, $03
000F75EB 8101 8802 8903 8201 880B+  	dc.b	dKick, $01, dHiTimpani, $02, dMidTimpani, $03, dSnare, $01, dHiTimpani, $0B, dKick, $0C
000F75F7 8209 8106 0381 0188 0289+  	dc.b	dSnare, $09, dKick, $06, $03, dKick, $01, dHiTimpani, $02, dMidTimpani, $03, dSnare
000F7603 0188 0B81 0C82 0981 0682+  	dc.b	$01, dHiTimpani, $0B, dKick, $0C, dSnare, $09, dKick, $06, dSnare, $01
000F760E E3                         	smpsReturn
000F760F                            
000F760F                            Mus91_Credits_Call11:
000F760F F800 00                    	smpsCall            Mus91_Credits_Call1A
000F7612 C3BF C1C3 BF               	dc.b	nFs5, nD5, nE5, nFs5, nD5
000F7617 F800 00                    	smpsCall            Mus91_Credits_Call1A
000F761A C8C6 C8C9 CB               	dc.b	nB5, nA5, nB5, nC6, nD6
000F761F E3                         	smpsReturn
000F7620                            
000F7620                            Mus91_Credits_Call1A:
000F7620 C80C C4C8 CBC9 C8C6 C8C6+  	dc.b	nB5, $0C, nG5, nB5, nD6, nC6, nB5, nA5, nB5, nA5, nFs5, nA5
000F762C C9C8 C6C4 C6C4 C1C4 C8C6+  	dc.b	nC6, nB5, nA5, nG5, nA5, nG5, nE5, nG5, nB5, nA5, nG5, nFs5
000F7638 C4C3 C4C6                  	dc.b	nG5, nFs5, nG5, nA5
000F763C E3                         	smpsReturn
000F763D                            
000F763D                            ; Unused alternate version of Mus91_Credits_Call0B
000F763D                            ; Mus91_Credits_CallUnk:
000F763D 800C D0D4 D7DB 0C80 06DB+  	dc.b	nRst, $0C, nG6, nB6, nD7, nFs7, $0C, nRst, $06, nFs7, $0C, nG7
000F7649 06DB 0CD9 6080 0CD0 D4D7+  	dc.b	$06, nFs7, $0C, nE7, $60, nRst, $0C, nG6, nB6, nD7, nFs7, $0C
000F7655 8006 DB0C DC06 DB0C DD5D+  	dc.b	nRst, $06, nFs7, $0C, nG7, $06, nFs7, $0C, nAb7, $5D, nRst, $03
000F7661 DE12 8006 DE12 8006 8006+  	dc.b	nA7, $12, nRst, $06, nA7, $12, nRst, $06, nRst, $06, nAb7, $12
000F766D DE06 8012                  	dc.b	nA7, $06, nRst, $12
000F7671 E3                         	smpsReturn
000F7672                            
000F7672                            Mus91_Credits_Call13:
000F7672 E80E                       	smpsNoteFill        $0E
000F7674 0C                         	dc.b	$0C
000F7675 E803                       	smpsNoteFill        $03
000F7677 0606 0606 0606             	dc.b	$06, $06, $06, $06, $06, $06
000F767D E3                         	smpsReturn
000F767E                            
000F767E                            Mus91_Credits_Call0C:
000F767E D409 8003 D406 D2          	dc.b	nB6, $09, nRst, $03, nB6, $06, nA6
000F7685 F700 03FF F5               	smpsLoop            $00, $03, Mus91_Credits_Call0C
000F768A D4D2 CDC9 D00C D206 E7CE+  	dc.b	nB6, nA6, nE6, nC6, nG6, $0C, nA6, $06, smpsNoAttack, nF6, $4D, nRst
000F7696 01D2 24D4 0CD1 24D4 0980+  	dc.b	$01, nA6, $24, nB6, $0C, nAb6, $24, nB6, $09, nRst, $03, nB6
000F76A2 12D2 1E                    	dc.b	$12, nA6, $1E
000F76A5 E3                         	smpsReturn
000F76A6                            
000F76A6                            Mus91_Credits_Call15:
000F76A6 8030 8080 DA03 D7D2 CED7+  	dc.b	nRst, $30, nRst, nRst, nF7, $03, nD7, nA6, nF6, nD7, nA6, nF6
000F76B2 CBD2 CECB C6CE CBC6 C233+  	dc.b	nD6, nA6, nF6, nD6, nA5, nF6, nD6, nA5, nF5, $33, nRst, $5E
000F76BE E3                         	smpsReturn
000F76BF                            
000F76BF                            Mus91_Credits_Call0D:
000F76BF CD2A CD03 CED0 09D2 D306+  	dc.b	nE6, $2A, nE6, $03, nF6, nG6, $09, nA6, nBb6, $06, nA6, $0C
000F76CB D0CE 1ECE 06CD CE1E CB0C+  	dc.b	nG6, nF6, $1E, nF6, $06, nE6, nF6, $1E, nD6, $0C, nE6, nF6
000F76D7 2ACB 03CD CE09 D0D1 06D0+  	dc.b	$2A, nD6, $03, nE6, nF6, $09, nG6, nAb6, $06, nG6, $0C, nF6
000F76E3 E3                         	smpsReturn
000F76E4                            
000F76E4                            Mus91_Credits_Call04:
000F76E4 F800 00                    	smpsCall            Mus91_Credits_Call19
000F76E7 CB06 8003 CB80 06CA 1880+  	dc.b	nD6, $06, nRst, $03, nD6, nRst, $06, nCs6, $18, nRst, $06
000F76F2                            
000F76F2                            Mus91_Credits_Loop2C:
000F76F2 CE06 8003 CD06 8003 CB80   	dc.b	nF6, $06, nRst, $03, nE6, $06, nRst, $03, nD6, nRst
000F76FC F700 02FF F2               	smpsLoop            $00, $02, Mus91_Credits_Loop2C
000F7701 CE06 8003 CD06 8003 CB18+  	dc.b	nF6, $06, nRst, $03, nE6, $06, nRst, $03, nD6, $18, nRst, $06
000F770D E9FE                       	smpsAlterPitch      $FE
000F770F F800 00                    	smpsCall            Mus91_Credits_Call19
000F7712 E903                       	smpsAlterPitch      $03
000F7714 F800 00                    	smpsCall            Mus91_Credits_Call19
000F7717 E9FF                       	smpsAlterPitch      $FF
000F7719 8006                       	dc.b	nRst, $06
000F771B E808                       	smpsNoteFill        $08
000F771D D009 0909 09               	dc.b	nG6, $09, $09, $09, $09
000F7722 E805                       	smpsNoteFill        $05
000F7724 0303                       	dc.b	$03, $03
000F7726 E800                       	smpsNoteFill        $00
000F7728 800C CE24                  	dc.b	nRst, $0C, nF6, $24
000F772C E3                         	smpsReturn
000F772D                            
000F772D                            Mus91_Credits_Call19:
000F772D CD06 8003 CD80 06CD 1880+  	dc.b	nE6, $06, nRst, $03, nE6, nRst, $06, nE6, $18, nRst, $06
000F7738 E3                         	smpsReturn
000F7739                            
000F7739                            Mus91_Credits_Call09:
000F7739 D006 8003 D080 06D0 1880+  	dc.b	nG6, $06, nRst, $03, nG6, nRst, $06, nG6, $18, nRst, $06, nF6
000F7745 0680 03CE 8006 CD18 8006+  	dc.b	$06, nRst, $03, nF6, nRst, $06, nE6, $18, nRst, $06, nA6, $06
000F7751 8003 D006 8003 CE80 D206+  	dc.b	nRst, $03, nG6, $06, nRst, $03, nF6, nRst, nA6, $06, nRst, $03
000F775D D006 8003 CE80 D206 8003+  	dc.b	nG6, $06, nRst, $03, nF6, nRst, nA6, $06, nRst, $03, nG6, $06
000F7769 8003 CE18 8006 CE06 8003+  	dc.b	nRst, $03, nF6, $18, nRst, $06, nF6, $06, nRst, $03, nF6, nRst
000F7775 06CE 1880 06D1 0680 03D1+  	dc.b	$06, nF6, $18, nRst, $06, nAb6, $06, nRst, $03, nAb6, nRst, $06
000F7781 D118 8006 8006             	dc.b	nAb6, $18, nRst, $06, nRst, $06
000F7787 E808                       	smpsNoteFill        $08
000F7789 D409 0909 09               	dc.b	nB6, $09, $09, $09, $09
000F778E E805                       	smpsNoteFill        $05
000F7790 0303                       	dc.b	$03, $03
000F7792 E800                       	smpsNoteFill        $00
000F7794 800C D224                  	dc.b	nRst, $0C, nA6, $24
000F7798 E3                         	smpsReturn
000F7799                            
000F7799                            Mus91_Credits_Call0E:
000F7799 F800 00                    	smpsCall            Mus91_Credits_Call18
000F779C D012 D206 D012 CD0C        	dc.b	nG6, $12, nA6, $06, nG6, $12, nE6, $0C
000F77A4 F800 00                    	smpsCall            Mus91_Credits_Call18
000F77A7 D030 8006                  	dc.b	nG6, $30, nRst, $06
000F77AB E3                         	smpsReturn
000F77AC                            
000F77AC                            Mus91_Credits_Call18:
000F77AC D01E CD06 C9D5 D30C D506+  	dc.b	nG6, $1E, nE6, $06, nC6, nC7, nBb6, $0C, nC7, $06, nBb6, $0C
000F77B8 D006 D3D2 24CD 06CE        	dc.b	nG6, $06, nBb6, nA6, $24, nE6, $06, nF6
000F77C0 E3                         	smpsReturn
000F77C1                            
000F77C1                            Mus91_Credits_Call05:
000F77C1 8003 CDC9 0606 C4C9 09CD+  	dc.b	nRst, $03, nE6, nC6, $06, $06, nG5, nC6, $09, nE6, $09, nRst
000F77CD 0680 03CE CA06 06C7 CA09+  	dc.b	$06, nRst, $03, nF6, nCs6, $06, $06, nBb5, nCs6, $09, nF6, $09
000F77D9 8006 8003 CDC9 0606 C6C9+  	dc.b	nRst, $06, nRst, $03, nE6, nC6, $06, $06, nA5, nC6, $09, nE6
000F77E5 0FCB 0C                    	dc.b	$0F, nD6, $0C
000F77E8 E3                         	smpsReturn
000F77E9                            
000F77E9                            Mus91_Credits_Voices:
000F77E9                            ;	Voice $00
000F77E9                            ;	$20
000F77E9                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000F77E9                            ;	$07, $06, $06, $08, 	$20, $10, $10, $F8, 	$19, $37, $13, $80
000F77E9                            	smpsVcAlgorithm     $00
000F77E9                            	smpsVcFeedback      $04
000F77E9                            	smpsVcUnusedBits    $00
000F77E9                            	smpsVcDetune        $03, $03, $03, $03
000F77E9                            	smpsVcCoarseFreq    $01, $00, $05, $06
000F77E9                            	smpsVcRateScale     $02, $02, $03, $03
000F77E9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F77E9                            	smpsVcAmpMod        $00, $00, $00, $00
000F77E9                            	smpsVcDecayRate1    $06, $09, $06, $07
000F77E9                            	smpsVcDecayRate2    $08, $06, $06, $07
000F77E9                            	smpsVcDecayLevel    $0F, $01, $01, $02
000F77E9                            	smpsVcReleaseRate   $08, $00, $00, $00
000F77E9 2036 3530 31DF DF9F 9F07+  	smpsVcTotalLevel    $00, $13, $37, $19
000F7802                            
000F7802                            ;	Voice $01
000F7802                            ;	$2C
000F7802                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
000F7802                            ;	$00, $00, $00, $00, 	$0F, $1F, $0F, $1F, 	$16, $80, $17, $80
000F7802                            	smpsVcAlgorithm     $04
000F7802                            	smpsVcFeedback      $05
000F7802                            	smpsVcUnusedBits    $00
000F7802                            	smpsVcDetune        $03, $03, $07, $07
000F7802                            	smpsVcCoarseFreq    $04, $04, $08, $02
000F7802                            	smpsVcRateScale     $00, $00, $00, $00
000F7802                            	smpsVcAttackRate    $12, $1F, $12, $1F
000F7802                            	smpsVcAmpMod        $00, $00, $00, $00
000F7802                            	smpsVcDecayRate1    $0A, $00, $0A, $00
000F7802                            	smpsVcDecayRate2    $00, $00, $00, $00
000F7802                            	smpsVcDecayLevel    $01, $00, $01, $00
000F7802                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7802 2C72 7834 341F 121F 1200+  	smpsVcTotalLevel    $00, $17, $00, $16
000F781B                            
000F781B                            ;	Voice $02
000F781B                            ;	$2C
000F781B                            ;	$74, $74, $34, $34, 	$1F, $12, $1F, $1F, 	$00, $00, $00, $00
000F781B                            ;	$00, $01, $00, $01, 	$0F, $3F, $0F, $3F, 	$16, $80, $17, $80
000F781B                            	smpsVcAlgorithm     $04
000F781B                            	smpsVcFeedback      $05
000F781B                            	smpsVcUnusedBits    $00
000F781B                            	smpsVcDetune        $03, $03, $07, $07
000F781B                            	smpsVcCoarseFreq    $04, $04, $04, $04
000F781B                            	smpsVcRateScale     $00, $00, $00, $00
000F781B                            	smpsVcAttackRate    $1F, $1F, $12, $1F
000F781B                            	smpsVcAmpMod        $00, $00, $00, $00
000F781B                            	smpsVcDecayRate1    $00, $00, $00, $00
000F781B                            	smpsVcDecayRate2    $01, $00, $01, $00
000F781B                            	smpsVcDecayLevel    $03, $00, $03, $00
000F781B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F781B 2C74 7434 341F 121F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000F7834                            
000F7834                            ;	Voice $03
000F7834                            ;	$04
000F7834                            ;	$72, $42, $32, $32, 	$12, $12, $12, $12, 	$00, $08, $00, $08
000F7834                            ;	$00, $08, $00, $08, 	$0F, $1F, $0F, $1F, 	$23, $80, $23, $80
000F7834                            	smpsVcAlgorithm     $04
000F7834                            	smpsVcFeedback      $00
000F7834                            	smpsVcUnusedBits    $00
000F7834                            	smpsVcDetune        $03, $03, $04, $07
000F7834                            	smpsVcCoarseFreq    $02, $02, $02, $02
000F7834                            	smpsVcRateScale     $00, $00, $00, $00
000F7834                            	smpsVcAttackRate    $12, $12, $12, $12
000F7834                            	smpsVcAmpMod        $00, $00, $00, $00
000F7834                            	smpsVcDecayRate1    $08, $00, $08, $00
000F7834                            	smpsVcDecayRate2    $08, $00, $08, $00
000F7834                            	smpsVcDecayLevel    $01, $00, $01, $00
000F7834                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7834 0472 4232 3212 1212 1200+  	smpsVcTotalLevel    $00, $23, $00, $23
000F784D                            
000F784D                            ;	Voice $04
000F784D                            ;	$2C
000F784D                            ;	$74, $74, $34, $34, 	$1F, $12, $1F, $1F, 	$00, $07, $00, $07
000F784D                            ;	$00, $07, $00, $07, 	$00, $38, $00, $38, 	$16, $80, $17, $80
000F784D                            	smpsVcAlgorithm     $04
000F784D                            	smpsVcFeedback      $05
000F784D                            	smpsVcUnusedBits    $00
000F784D                            	smpsVcDetune        $03, $03, $07, $07
000F784D                            	smpsVcCoarseFreq    $04, $04, $04, $04
000F784D                            	smpsVcRateScale     $00, $00, $00, $00
000F784D                            	smpsVcAttackRate    $1F, $1F, $12, $1F
000F784D                            	smpsVcAmpMod        $00, $00, $00, $00
000F784D                            	smpsVcDecayRate1    $07, $00, $07, $00
000F784D                            	smpsVcDecayRate2    $07, $00, $07, $00
000F784D                            	smpsVcDecayLevel    $03, $00, $03, $00
000F784D                            	smpsVcReleaseRate   $08, $00, $08, $00
000F784D 2C74 7434 341F 121F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000F7866                            
000F7866                            ;	Voice $05
000F7866                            ;	$31
000F7866                            ;	$34, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$0C, $07, $0C, $09
000F7866                            ;	$07, $07, $07, $08, 	$2F, $1F, $1F, $2F, 	$17, $32, $14, $80
000F7866                            	smpsVcAlgorithm     $01
000F7866                            	smpsVcFeedback      $06
000F7866                            	smpsVcUnusedBits    $00
000F7866                            	smpsVcDetune        $03, $03, $03, $03
000F7866                            	smpsVcCoarseFreq    $01, $00, $05, $04
000F7866                            	smpsVcRateScale     $02, $02, $03, $03
000F7866                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F7866                            	smpsVcAmpMod        $00, $00, $00, $00
000F7866                            	smpsVcDecayRate1    $09, $0C, $07, $0C
000F7866                            	smpsVcDecayRate2    $08, $07, $07, $07
000F7866                            	smpsVcDecayLevel    $02, $01, $01, $02
000F7866                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7866 3134 3530 31DF DF9F 9F0C+  	smpsVcTotalLevel    $00, $14, $32, $17
000F787F                            
000F787F                            ;	Voice $06
000F787F                            ;	$18
000F787F                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000F787F                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$2C, $22, $14, $80
000F787F                            	smpsVcAlgorithm     $00
000F787F                            	smpsVcFeedback      $03
000F787F                            	smpsVcUnusedBits    $00
000F787F                            	smpsVcDetune        $03, $03, $03, $03
000F787F                            	smpsVcCoarseFreq    $01, $00, $00, $07
000F787F                            	smpsVcRateScale     $02, $00, $03, $02
000F787F                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000F787F                            	smpsVcAmpMod        $00, $00, $00, $00
000F787F                            	smpsVcDecayRate1    $01, $04, $06, $0D
000F787F                            	smpsVcDecayRate2    $05, $03, $0A, $08
000F787F                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000F787F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F787F 1837 3030 319E DC1C 9C0D+  	smpsVcTotalLevel    $00, $14, $22, $2C
000F7898                            
000F7898                            ;	Voice $07
000F7898                            ;	$3C
000F7898                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000F7898                            ;	$04, $00, $04, $00, 	$1F, $0F, $1F, $0F, 	$1A, $80, $16, $80
000F7898                            	smpsVcAlgorithm     $04
000F7898                            	smpsVcFeedback      $07
000F7898                            	smpsVcUnusedBits    $00
000F7898                            	smpsVcDetune        $03, $05, $05, $03
000F7898                            	smpsVcCoarseFreq    $00, $00, $02, $01
000F7898                            	smpsVcRateScale     $01, $01, $01, $01
000F7898                            	smpsVcAttackRate    $13, $12, $13, $12
000F7898                            	smpsVcAmpMod        $00, $00, $00, $00
000F7898                            	smpsVcDecayRate1    $00, $08, $00, $08
000F7898                            	smpsVcDecayRate2    $00, $04, $00, $04
000F7898                            	smpsVcDecayLevel    $00, $01, $00, $01
000F7898                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7898 3C31 5250 3052 5352 5308+  	smpsVcTotalLevel    $00, $16, $00, $1A
000F78B1                            
000F78B1                            ;	Voice $08
000F78B1                            ;	$22
000F78B1                            ;	$0A, $13, $05, $11, 	$03, $12, $12, $11, 	$00, $13, $13, $00
000F78B1                            ;	$03, $02, $02, $01, 	$1F, $1F, $0F, $0F, 	$1E, $18, $26, $81
000F78B1                            	smpsVcAlgorithm     $02
000F78B1                            	smpsVcFeedback      $04
000F78B1                            	smpsVcUnusedBits    $00
000F78B1                            	smpsVcDetune        $01, $00, $01, $00
000F78B1                            	smpsVcCoarseFreq    $01, $05, $03, $0A
000F78B1                            	smpsVcRateScale     $00, $00, $00, $00
000F78B1                            	smpsVcAttackRate    $11, $12, $12, $03
000F78B1                            	smpsVcAmpMod        $00, $00, $00, $00
000F78B1                            	smpsVcDecayRate1    $00, $13, $13, $00
000F78B1                            	smpsVcDecayRate2    $01, $02, $02, $03
000F78B1                            	smpsVcDecayLevel    $00, $00, $01, $01
000F78B1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F78B1 220A 1305 1103 1212 1100+  	smpsVcTotalLevel    $01, $26, $18, $1E
000F78CA                            
000F78CA                            ;	Voice $09
000F78CA                            ;	$3A
000F78CA                            ;	$61, $3C, $14, $31, 	$9C, $DB, $9C, $DA, 	$04, $09, $04, $03
000F78CA                            ;	$03, $01, $03, $00, 	$1F, $0F, $0F, $AF, 	$21, $47, $31, $80
000F78CA                            	smpsVcAlgorithm     $02
000F78CA                            	smpsVcFeedback      $07
000F78CA                            	smpsVcUnusedBits    $00
000F78CA                            	smpsVcDetune        $03, $01, $03, $06
000F78CA                            	smpsVcCoarseFreq    $01, $04, $0C, $01
000F78CA                            	smpsVcRateScale     $03, $02, $03, $02
000F78CA                            	smpsVcAttackRate    $1A, $1C, $1B, $1C
000F78CA                            	smpsVcAmpMod        $00, $00, $00, $00
000F78CA                            	smpsVcDecayRate1    $03, $04, $09, $04
000F78CA                            	smpsVcDecayRate2    $00, $03, $01, $03
000F78CA                            	smpsVcDecayLevel    $0A, $00, $00, $01
000F78CA                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F78CA 3A61 3C14 319C DB9C DA04+  	smpsVcTotalLevel    $00, $31, $47, $21
000F78E3                            
000F78E3                            ;	Voice $0A
000F78E3                            ;	$3A
000F78E3                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000F78E3                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000F78E3                            	smpsVcAlgorithm     $02
000F78E3                            	smpsVcFeedback      $07
000F78E3                            	smpsVcUnusedBits    $00
000F78E3                            	smpsVcDetune        $00, $00, $00, $00
000F78E3                            	smpsVcCoarseFreq    $01, $01, $07, $01
000F78E3                            	smpsVcRateScale     $01, $02, $02, $02
000F78E3                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000F78E3                            	smpsVcAmpMod        $00, $00, $00, $00
000F78E3                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000F78E3                            	smpsVcDecayRate2    $00, $00, $00, $00
000F78E3                            	smpsVcDecayLevel    $00, $01, $0F, $01
000F78E3                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F78E3 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000F78FC                            
000F78FC                            ;	Voice $0B
000F78FC                            ;	$34
000F78FC                            ;	$33, $41, $7E, $74, 	$5B, $9F, $5F, $1F, 	$04, $07, $07, $08
000F78FC                            ;	$00, $00, $00, $00, 	$FF, $FF, $EF, $FF, 	$23, $90, $29, $97
000F78FC                            	smpsVcAlgorithm     $04
000F78FC                            	smpsVcFeedback      $06
000F78FC                            	smpsVcUnusedBits    $00
000F78FC                            	smpsVcDetune        $07, $07, $04, $03
000F78FC                            	smpsVcCoarseFreq    $04, $0E, $01, $03
000F78FC                            	smpsVcRateScale     $00, $01, $02, $01
000F78FC                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
000F78FC                            	smpsVcAmpMod        $00, $00, $00, $00
000F78FC                            	smpsVcDecayRate1    $08, $07, $07, $04
000F78FC                            	smpsVcDecayRate2    $00, $00, $00, $00
000F78FC                            	smpsVcDecayLevel    $0F, $0E, $0F, $0F
000F78FC                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F78FC 3433 417E 745B 9F5F 1F04+  	smpsVcTotalLevel    $17, $29, $10, $23
000F7915                            
000F7915                            ;	Voice $0C
000F7915                            ;	$04
000F7915                            ;	$72, $42, $32, $32, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000F7915                            ;	$00, $00, $00, $00, 	$00, $07, $00, $07, 	$23, $80, $23, $80
000F7915                            	smpsVcAlgorithm     $04
000F7915                            	smpsVcFeedback      $00
000F7915                            	smpsVcUnusedBits    $00
000F7915                            	smpsVcDetune        $03, $03, $04, $07
000F7915                            	smpsVcCoarseFreq    $02, $02, $02, $02
000F7915                            	smpsVcRateScale     $00, $00, $00, $00
000F7915                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F7915                            	smpsVcAmpMod        $00, $00, $00, $00
000F7915                            	smpsVcDecayRate1    $00, $00, $00, $00
000F7915                            	smpsVcDecayRate2    $00, $00, $00, $00
000F7915                            	smpsVcDecayLevel    $00, $00, $00, $00
000F7915                            	smpsVcReleaseRate   $07, $00, $07, $00
000F7915 0472 4232 321F 1F1F 1F00+  	smpsVcTotalLevel    $00, $23, $00, $23
000F792E                            
000F792E                            ;	Voice $0D
000F792E                            ;	$3C
000F792E                            ;	$38, $74, $76, $33, 	$10, $10, $10, $10, 	$02, $07, $04, $07
000F792E                            ;	$03, $09, $03, $09, 	$2F, $2F, $2F, $2F, 	$1E, $80, $1E, $80
000F792E                            	smpsVcAlgorithm     $04
000F792E                            	smpsVcFeedback      $07
000F792E                            	smpsVcUnusedBits    $00
000F792E                            	smpsVcDetune        $03, $07, $07, $03
000F792E                            	smpsVcCoarseFreq    $03, $06, $04, $08
000F792E                            	smpsVcRateScale     $00, $00, $00, $00
000F792E                            	smpsVcAttackRate    $10, $10, $10, $10
000F792E                            	smpsVcAmpMod        $00, $00, $00, $00
000F792E                            	smpsVcDecayRate1    $07, $04, $07, $02
000F792E                            	smpsVcDecayRate2    $09, $03, $09, $03
000F792E                            	smpsVcDecayLevel    $02, $02, $02, $02
000F792E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F792E 3C38 7476 3310 1010 1002+  	smpsVcTotalLevel    $00, $1E, $00, $1E
000F7947                            
000F7947                            ;	Voice $0E
000F7947                            ;	$F4
000F7947                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
000F7947                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$15, $85, $02, $8A
000F7947                            	smpsVcAlgorithm     $04
000F7947                            	smpsVcFeedback      $06
000F7947                            	smpsVcUnusedBits    $03
000F7947                            	smpsVcDetune        $00, $00, $00, $00
000F7947                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
000F7947                            	smpsVcRateScale     $00, $00, $00, $00
000F7947                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F7947                            	smpsVcAmpMod        $00, $00, $00, $00
000F7947                            	smpsVcDecayRate1    $0B, $0B, $00, $00
000F7947                            	smpsVcDecayRate2    $08, $05, $00, $00
000F7947                            	smpsVcDecayLevel    $0F, $0F, $00, $00
000F7947                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7947 F406 040F 0E1F 1F1F 1F00+  	smpsVcTotalLevel    $0A, $02, $05, $15
000F7960                            
000F7960                            ;	Voice $0F
000F7960                            ;	$29
000F7960                            ;	$36, $74, $71, $31, 	$04, $04, $05, $1D, 	$12, $0E, $1F, $1F
000F7960                            ;	$04, $06, $03, $01, 	$5F, $6F, $0F, $0F, 	$27, $27, $2E, $80
000F7960                            	smpsVcAlgorithm     $01
000F7960                            	smpsVcFeedback      $05
000F7960                            	smpsVcUnusedBits    $00
000F7960                            	smpsVcDetune        $03, $07, $07, $03
000F7960                            	smpsVcCoarseFreq    $01, $01, $04, $06
000F7960                            	smpsVcRateScale     $00, $00, $00, $00
000F7960                            	smpsVcAttackRate    $1D, $05, $04, $04
000F7960                            	smpsVcAmpMod        $00, $00, $00, $00
000F7960                            	smpsVcDecayRate1    $1F, $1F, $0E, $12
000F7960                            	smpsVcDecayRate2    $01, $03, $06, $04
000F7960                            	smpsVcDecayLevel    $00, $00, $06, $05
000F7960                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7960 2936 7471 3104 0405 1D12+  	smpsVcTotalLevel    $00, $2E, $27, $27
000F7979                            
000F7979                            ;	Voice $10
000F7979                            ;	$08
000F7979                            ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
000F7979                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
000F7979                            	smpsVcAlgorithm     $00
000F7979                            	smpsVcFeedback      $01
000F7979                            	smpsVcUnusedBits    $00
000F7979                            	smpsVcDetune        $00, $03, $07, $00
000F7979                            	smpsVcCoarseFreq    $00, $00, $00, $0A
000F7979                            	smpsVcRateScale     $01, $01, $00, $00
000F7979                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F7979                            	smpsVcAmpMod        $00, $00, $00, $00
000F7979                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
000F7979                            	smpsVcDecayRate2    $03, $04, $04, $00
000F7979                            	smpsVcDecayLevel    $02, $02, $02, $02
000F7979                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7979 080A 7030 001F 1F5F 5F12+  	smpsVcTotalLevel    $00, $13, $2D, $24
000F7992                            
000F7992                            ;	Voice $11
000F7992                            ;	$3D
000F7992                            ;	$01, $01, $01, $01, 	$8E, $52, $14, $4C, 	$08, $08, $0E, $03
000F7992                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1B, $80, $80, $9B
000F7992                            	smpsVcAlgorithm     $05
000F7992                            	smpsVcFeedback      $07
000F7992                            	smpsVcUnusedBits    $00
000F7992                            	smpsVcDetune        $00, $00, $00, $00
000F7992                            	smpsVcCoarseFreq    $01, $01, $01, $01
000F7992                            	smpsVcRateScale     $01, $00, $01, $02
000F7992                            	smpsVcAttackRate    $0C, $14, $12, $0E
000F7992                            	smpsVcAmpMod        $00, $00, $00, $00
000F7992                            	smpsVcDecayRate1    $03, $0E, $08, $08
000F7992                            	smpsVcDecayRate2    $00, $00, $00, $00
000F7992                            	smpsVcDecayLevel    $01, $01, $01, $01
000F7992                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7992 3D01 0101 018E 5214 4C08+  	smpsVcTotalLevel    $1B, $00, $00, $1B
000F79AB                            
000F79AB                            ;	Voice $12
000F79AB                            ;	$3D
000F79AB                            ;	$01, $02, $00, $01, 	$1F, $0E, $0E, $0E, 	$07, $1F, $1F, $1F
000F79AB                            ;	$00, $00, $00, $00, 	$1F, $0F, $0F, $0F, 	$17, $8D, $8C, $8C
000F79AB                            	smpsVcAlgorithm     $05
000F79AB                            	smpsVcFeedback      $07
000F79AB                            	smpsVcUnusedBits    $00
000F79AB                            	smpsVcDetune        $00, $00, $00, $00
000F79AB                            	smpsVcCoarseFreq    $01, $00, $02, $01
000F79AB                            	smpsVcRateScale     $00, $00, $00, $00
000F79AB                            	smpsVcAttackRate    $0E, $0E, $0E, $1F
000F79AB                            	smpsVcAmpMod        $00, $00, $00, $00
000F79AB                            	smpsVcDecayRate1    $1F, $1F, $1F, $07
000F79AB                            	smpsVcDecayRate2    $00, $00, $00, $00
000F79AB                            	smpsVcDecayLevel    $00, $00, $00, $01
000F79AB                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F79AB 3D01 0200 011F 0E0E 0E07+  	smpsVcTotalLevel    $0C, $0C, $0D, $17
000F79C4                            
000F79C4                            ;	Voice $13
000F79C4                            ;	$3C
000F79C4                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000F79C4                            ;	$04, $00, $04, $00, 	$10, $07, $10, $07, 	$1A, $80, $16, $80
000F79C4                            	smpsVcAlgorithm     $04
000F79C4                            	smpsVcFeedback      $07
000F79C4                            	smpsVcUnusedBits    $00
000F79C4                            	smpsVcDetune        $03, $05, $05, $03
000F79C4                            	smpsVcCoarseFreq    $00, $00, $02, $01
000F79C4                            	smpsVcRateScale     $01, $01, $01, $01
000F79C4                            	smpsVcAttackRate    $13, $12, $13, $12
000F79C4                            	smpsVcAmpMod        $00, $00, $00, $00
000F79C4                            	smpsVcDecayRate1    $00, $08, $00, $08
000F79C4                            	smpsVcDecayRate2    $00, $04, $00, $04
000F79C4                            	smpsVcDecayLevel    $00, $01, $00, $01
000F79C4                            	smpsVcReleaseRate   $07, $00, $07, $00
000F79C4 3C31 5250 3052 5352 5308+  	smpsVcTotalLevel    $00, $16, $00, $1A
000F79DD                            
000F79DD                            ;	Voice $14
000F79DD                            ;	$18
000F79DD                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000F79DD                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$32, $22, $14, $80
000F79DD                            	smpsVcAlgorithm     $00
000F79DD                            	smpsVcFeedback      $03
000F79DD                            	smpsVcUnusedBits    $00
000F79DD                            	smpsVcDetune        $03, $03, $03, $03
000F79DD                            	smpsVcCoarseFreq    $01, $00, $00, $07
000F79DD                            	smpsVcRateScale     $02, $00, $03, $02
000F79DD                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000F79DD                            	smpsVcAmpMod        $00, $00, $00, $00
000F79DD                            	smpsVcDecayRate1    $01, $04, $06, $0D
000F79DD                            	smpsVcDecayRate2    $05, $03, $0A, $08
000F79DD                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000F79DD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F79DD 1837 3030 319E DC1C 9C0D+  	smpsVcTotalLevel    $00, $14, $22, $32
000F79F6                            
000F79F6                            ;	Voice $15
000F79F6                            ;	$3A
000F79F6                            ;	$01, $01, $01, $02, 	$8D, $07, $07, $52, 	$09, $00, $00, $03
000F79F6                            ;	$01, $02, $02, $00, 	$5F, $0F, $0F, $2F, 	$18, $22, $18, $80
000F79F6                            	smpsVcAlgorithm     $02
000F79F6                            	smpsVcFeedback      $07
000F79F6                            	smpsVcUnusedBits    $00
000F79F6                            	smpsVcDetune        $00, $00, $00, $00
000F79F6                            	smpsVcCoarseFreq    $02, $01, $01, $01
000F79F6                            	smpsVcRateScale     $01, $00, $00, $02
000F79F6                            	smpsVcAttackRate    $12, $07, $07, $0D
000F79F6                            	smpsVcAmpMod        $00, $00, $00, $00
000F79F6                            	smpsVcDecayRate1    $03, $00, $00, $09
000F79F6                            	smpsVcDecayRate2    $00, $02, $02, $01
000F79F6                            	smpsVcDecayLevel    $02, $00, $00, $05
000F79F6                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F79F6 3A01 0101 028D 0707 5209+  	smpsVcTotalLevel    $00, $18, $22, $18
000F7A0F                            
000F7A0F                            ;	Voice $16
000F7A0F                            ;	$2C
000F7A0F                            ;	$74, $74, $34, $34, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000F7A0F                            ;	$00, $01, $00, $01, 	$0F, $3F, $0F, $3F, 	$16, $80, $17, $80
000F7A0F                            	smpsVcAlgorithm     $04
000F7A0F                            	smpsVcFeedback      $05
000F7A0F                            	smpsVcUnusedBits    $00
000F7A0F                            	smpsVcDetune        $03, $03, $07, $07
000F7A0F                            	smpsVcCoarseFreq    $04, $04, $04, $04
000F7A0F                            	smpsVcRateScale     $00, $00, $00, $00
000F7A0F                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F7A0F                            	smpsVcAmpMod        $00, $00, $00, $00
000F7A0F                            	smpsVcDecayRate1    $00, $00, $00, $00
000F7A0F                            	smpsVcDecayRate2    $01, $00, $01, $00
000F7A0F                            	smpsVcDecayLevel    $03, $00, $03, $00
000F7A0F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7A0F 2C74 7434 341F 1F1F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000F7A28                            
000F7A28                            ;	Voice $17
000F7A28                            ;	$04
000F7A28                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000F7A28                            ;	$00, $00, $00, $00, 	$10, $07, $10, $07, 	$23, $80, $23, $80
000F7A28                            	smpsVcAlgorithm     $04
000F7A28                            	smpsVcFeedback      $00
000F7A28                            	smpsVcUnusedBits    $00
000F7A28                            	smpsVcDetune        $04, $07, $07, $03
000F7A28                            	smpsVcCoarseFreq    $09, $07, $02, $07
000F7A28                            	smpsVcRateScale     $00, $00, $00, $00
000F7A28                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F7A28                            	smpsVcAmpMod        $00, $00, $00, $00
000F7A28                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000F7A28                            	smpsVcDecayRate2    $00, $00, $00, $00
000F7A28                            	smpsVcDecayLevel    $00, $01, $00, $01
000F7A28                            	smpsVcReleaseRate   $07, $00, $07, $00
000F7A28 0437 7277 491F 1F1F 1F07+  	smpsVcTotalLevel    $00, $23, $00, $23
000F7A41                            
000F7A41                            ;	Voice $18
000F7A41                            ;	$3D
000F7A41                            ;	$01, $02, $02, $02, 	$14, $0E, $8C, $0E, 	$08, $05, $02, $05
000F7A41                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1A, $80, $80, $80
000F7A41                            	smpsVcAlgorithm     $05
000F7A41                            	smpsVcFeedback      $07
000F7A41                            	smpsVcUnusedBits    $00
000F7A41                            	smpsVcDetune        $00, $00, $00, $00
000F7A41                            	smpsVcCoarseFreq    $02, $02, $02, $01
000F7A41                            	smpsVcRateScale     $00, $02, $00, $00
000F7A41                            	smpsVcAttackRate    $0E, $0C, $0E, $14
000F7A41                            	smpsVcAmpMod        $00, $00, $00, $00
000F7A41                            	smpsVcDecayRate1    $05, $02, $05, $08
000F7A41                            	smpsVcDecayRate2    $00, $00, $00, $00
000F7A41                            	smpsVcDecayLevel    $01, $01, $01, $01
000F7A41                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7A41 3D01 0202 0214 0E8C 0E08+  	smpsVcTotalLevel    $00, $00, $00, $1A
000F7A5A                            
000F7A5A                            ;	Voice $19
000F7A5A                            ;	$20
000F7A5A                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000F7A5A                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $37, $13, $80
000F7A5A                            	smpsVcAlgorithm     $00
000F7A5A                            	smpsVcFeedback      $04
000F7A5A                            	smpsVcUnusedBits    $00
000F7A5A                            	smpsVcDetune        $03, $03, $03, $03
000F7A5A                            	smpsVcCoarseFreq    $01, $00, $05, $06
000F7A5A                            	smpsVcRateScale     $02, $02, $03, $03
000F7A5A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F7A5A                            	smpsVcAmpMod        $00, $00, $00, $00
000F7A5A                            	smpsVcDecayRate1    $06, $09, $06, $07
000F7A5A                            	smpsVcDecayRate2    $08, $06, $06, $07
000F7A5A                            	smpsVcDecayLevel    $0F, $01, $01, $02
000F7A5A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7A5A 2036 3530 31DF DF9F 9F07+  	smpsVcTotalLevel    $00, $13, $37, $19
000F7A73                            
000F7A73                            ;	Voice $1A
000F7A73                            ;	$3A
000F7A73                            ;	$51, $08, $51, $02, 	$1E, $1E, $1E, $10, 	$1F, $1F, $1F, $0F
000F7A73                            ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$18, $24, $22, $81
000F7A73                            	smpsVcAlgorithm     $02
000F7A73                            	smpsVcFeedback      $07
000F7A73                            	smpsVcUnusedBits    $00
000F7A73                            	smpsVcDetune        $00, $05, $00, $05
000F7A73                            	smpsVcCoarseFreq    $02, $01, $08, $01
000F7A73                            	smpsVcRateScale     $00, $00, $00, $00
000F7A73                            	smpsVcAttackRate    $10, $1E, $1E, $1E
000F7A73                            	smpsVcAmpMod        $00, $00, $00, $00
000F7A73                            	smpsVcDecayRate1    $0F, $1F, $1F, $1F
000F7A73                            	smpsVcDecayRate2    $02, $00, $00, $00
000F7A73                            	smpsVcDecayLevel    $01, $00, $00, $00
000F7A73                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7A73 3A51 0851 021E 1E1E 101F+  	smpsVcTotalLevel    $01, $22, $24, $18
000F7A8C                            
000F7A8C                            ;	Voice $1B
000F7A8C                            ;	$3A
000F7A8C                            ;	$32, $56, $32, $42, 	$8D, $4F, $15, $52, 	$06, $08, $07, $04
000F7A8C                            ;	$02, $00, $00, $00, 	$1F, $1F, $2F, $2F, 	$19, $20, $2A, $80
000F7A8C                            	smpsVcAlgorithm     $02
000F7A8C                            	smpsVcFeedback      $07
000F7A8C                            	smpsVcUnusedBits    $00
000F7A8C                            	smpsVcDetune        $04, $03, $05, $03
000F7A8C                            	smpsVcCoarseFreq    $02, $02, $06, $02
000F7A8C                            	smpsVcRateScale     $01, $00, $01, $02
000F7A8C                            	smpsVcAttackRate    $12, $15, $0F, $0D
000F7A8C                            	smpsVcAmpMod        $00, $00, $00, $00
000F7A8C                            	smpsVcDecayRate1    $04, $07, $08, $06
000F7A8C                            	smpsVcDecayRate2    $00, $00, $00, $02
000F7A8C                            	smpsVcDecayLevel    $02, $02, $01, $01
000F7A8C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7A8C 3A32 5632 428D 4F15 5206+  	smpsVcTotalLevel    $00, $2A, $20, $19
000F7AA5                            
000F7AA5                            ;	Voice $1C
000F7AA5                            ;	$3A
000F7AA5                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000F7AA5                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000F7AA5                            	smpsVcAlgorithm     $02
000F7AA5                            	smpsVcFeedback      $07
000F7AA5                            	smpsVcUnusedBits    $00
000F7AA5                            	smpsVcDetune        $00, $00, $00, $00
000F7AA5                            	smpsVcCoarseFreq    $01, $01, $07, $01
000F7AA5                            	smpsVcRateScale     $01, $02, $02, $02
000F7AA5                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000F7AA5                            	smpsVcAmpMod        $00, $00, $00, $00
000F7AA5                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000F7AA5                            	smpsVcDecayRate2    $00, $00, $00, $00
000F7AA5                            	smpsVcDecayLevel    $00, $01, $0F, $01
000F7AA5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7AA5 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000F7ABE                            
000F7ABE                            ;	Voice $1D
000F7ABE                            ;	$08
000F7ABE                            ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
000F7ABE                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
000F7ABE                            	smpsVcAlgorithm     $00
000F7ABE                            	smpsVcFeedback      $01
000F7ABE                            	smpsVcUnusedBits    $00
000F7ABE                            	smpsVcDetune        $00, $03, $07, $00
000F7ABE                            	smpsVcCoarseFreq    $00, $00, $00, $0A
000F7ABE                            	smpsVcRateScale     $01, $01, $00, $00
000F7ABE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F7ABE                            	smpsVcAmpMod        $00, $00, $00, $00
000F7ABE                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
000F7ABE                            	smpsVcDecayRate2    $03, $04, $04, $00
000F7ABE                            	smpsVcDecayLevel    $02, $02, $02, $02
000F7ABE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7ABE 080A 7030 001F 1F5F 5F12+  	smpsVcTotalLevel    $00, $13, $2D, $24
000F7AD7                            
000F7AD7                            ;	Voice $1E
000F7AD7                            ;	$3A
000F7AD7                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000F7AD7                            ;	$00, $00, $00, $07, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000F7AD7                            	smpsVcAlgorithm     $02
000F7AD7                            	smpsVcFeedback      $07
000F7AD7                            	smpsVcUnusedBits    $00
000F7AD7                            	smpsVcDetune        $00, $00, $00, $00
000F7AD7                            	smpsVcCoarseFreq    $01, $01, $07, $01
000F7AD7                            	smpsVcRateScale     $01, $02, $02, $02
000F7AD7                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000F7AD7                            	smpsVcAmpMod        $00, $00, $00, $00
000F7AD7                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000F7AD7                            	smpsVcDecayRate2    $07, $00, $00, $00
000F7AD7                            	smpsVcDecayLevel    $00, $01, $0F, $01
000F7AD7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7AD7 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000F7AF0                            
000F7AF0                            ;	Voice $1F
000F7AF0                            ;	$36
000F7AF0                            ;	$0F, $01, $01, $01, 	$1F, $1F, $1F, $1F, 	$12, $11, $0E, $00
000F7AF0                            ;	$00, $0A, $07, $09, 	$FF, $0F, $1F, $0F, 	$18, $80, $80, $80
000F7AF0                            	smpsVcAlgorithm     $06
000F7AF0                            	smpsVcFeedback      $06
000F7AF0                            	smpsVcUnusedBits    $00
000F7AF0                            	smpsVcDetune        $00, $00, $00, $00
000F7AF0                            	smpsVcCoarseFreq    $01, $01, $01, $0F
000F7AF0                            	smpsVcRateScale     $00, $00, $00, $00
000F7AF0                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F7AF0                            	smpsVcAmpMod        $00, $00, $00, $00
000F7AF0                            	smpsVcDecayRate1    $00, $0E, $11, $12
000F7AF0                            	smpsVcDecayRate2    $09, $07, $0A, $00
000F7AF0                            	smpsVcDecayLevel    $00, $01, $00, $0F
000F7AF0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7AF0 360F 0101 011F 1F1F 1F12+  	smpsVcTotalLevel    $00, $00, $00, $18
000F7B09                            
000F7B09                            ;	Voice $20
000F7B09                            ;	$3A
000F7B09                            ;	$03, $19, $01, $53, 	$1F, $DF, $1F, $9F, 	$0C, $02, $0C, $05
000F7B09                            ;	$04, $04, $04, $07, 	$1F, $FF, $0F, $2F, 	$1D, $36, $1B, $80
000F7B09                            	smpsVcAlgorithm     $02
000F7B09                            	smpsVcFeedback      $07
000F7B09                            	smpsVcUnusedBits    $00
000F7B09                            	smpsVcDetune        $05, $00, $01, $00
000F7B09                            	smpsVcCoarseFreq    $03, $01, $09, $03
000F7B09                            	smpsVcRateScale     $02, $00, $03, $00
000F7B09                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F7B09                            	smpsVcAmpMod        $00, $00, $00, $00
000F7B09                            	smpsVcDecayRate1    $05, $0C, $02, $0C
000F7B09                            	smpsVcDecayRate2    $07, $04, $04, $04
000F7B09                            	smpsVcDecayLevel    $02, $00, $0F, $01
000F7B09                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7B09 3A03 1901 531F DF1F 9F0C+  	smpsVcTotalLevel    $00, $1B, $36, $1D
000F7B22                            
000F7B22                            
000F7B22                            		even
000F7B22                            Music92:	incbin	sound\music92.bin ; Drowning
000F7E64 00                         		even
000F7E64                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000F7F34                            		even
000F7F34                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000F8C0A 00                         		even
000F8C0A                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000F8D5A 00                         		even
000F8D5A                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000FAD04 00                         		even
000FAD04                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000FB06C                            		even
000FB06C                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000FB0A6 00                         		even
000FB0A6                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000FB0E0 00                         		even
000FB0E0                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000FB11A 00                         		even
000FB11A                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000FB154 00                         		even
000FB154                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000FB18E 00                         		even
000FB18E                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000FB1C8 00                         		even
000FB1C8                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000FB6B8                            		even
000FB6B8                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000FB6B8                            GentleBreeze_Header:
000FB6B8 =00000001                  smpsHeaderStartSong = 1
000FB6B8 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000FB6BA 0603                       	smpsHeaderChan      $06, $03
000FB6BC 0100                       	smpsHeaderTempo     $01, $00
000FB6BE                            
000FB6C2 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000FB6C6 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000FB6CA 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000FB6CE 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000FB6D2 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000FB6D6 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000FB6DC 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000FB6E2 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000FB6E8                            
000FB6E8                            ; PSG3 Data
000FB6E8                            GentleBreeze_PSG3:
000FB6E8 F2                         	smpsStop
000FB6E9                            
000FB6E9                            ; FM1 Data
000FB6E9                            GentleBreeze_FM1:
000FB6EB E0C0                       	smpsPan             panCenter, $00
000FB6ED E1FF                       	smpsAlterNote       $FF
000FB6EF C410                       	dc.b	nG5, $10
000FB6F1 E60F                       	smpsAlterVol        $0F
000FB6F3 C4                         	dc.b	nG5
000FB6F4 E6F1                       	smpsAlterVol        $F1
000FB6F6 E100                       	smpsAlterNote       $00
000FB6F8 C2                         	dc.b	nF5
000FB6F9 E60F                       	smpsAlterVol        $0F
000FB6FB 08                         	dc.b	$08
000FB6FC E6F1                       	smpsAlterVol        $F1
000FB6FE C010                       	dc.b	nEb5, $10
000FB700 E60F                       	smpsAlterVol        $0F
000FB702 C0                         	dc.b	nEb5
000FB703 E6F1                       	smpsAlterVol        $F1
000FB705 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000FB70B E60F                       	smpsAlterVol        $0F
000FB70D C9                         	dc.b	nC6
000FB70E E6F1                       	smpsAlterVol        $F1
000FB710 C5                         	dc.b	nAb5
000FB711 E60F                       	smpsAlterVol        $0F
000FB713 08                         	dc.b	$08
000FB714 E6F1                       	smpsAlterVol        $F1
000FB716 C010                       	dc.b	nEb5, $10
000FB718 E60F                       	smpsAlterVol        $0F
000FB71A C0                         	dc.b	nEb5
000FB71B E6F1                       	smpsAlterVol        $F1
000FB71D C208                       	dc.b	nF5, $08
000FB71F E1FF                       	smpsAlterNote       $FF
000FB721 C410                       	dc.b	nG5, $10
000FB723 E100                       	smpsAlterNote       $00
000FB725 C5C7                       	dc.b	nAb5, nBb5
000FB727 E60F                       	smpsAlterVol        $0F
000FB729 C7                         	dc.b	nBb5
000FB72A E6F1                       	smpsAlterVol        $F1
000FB72C C5                         	dc.b	nAb5
000FB72D E60F                       	smpsAlterVol        $0F
000FB72F 08                         	dc.b	$08
000FB730 E6F1                       	smpsAlterVol        $F1
000FB732 E1FF                       	smpsAlterNote       $FF
000FB734 C410                       	dc.b	nG5, $10
000FB736 E60F                       	smpsAlterVol        $0F
000FB738 C4                         	dc.b	nG5
000FB739 E6F1                       	smpsAlterVol        $F1
000FB73B C4                         	dc.b	nG5
000FB73C E100                       	smpsAlterNote       $00
000FB73E C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000FB743 E60F                       	smpsAlterVol        $0F
000FB745 C2                         	dc.b	nF5
000FB746 E6F1                       	smpsAlterVol        $F1
000FB748 E1FF                       	smpsAlterNote       $FF
000FB74A C4                         	dc.b	nG5
000FB74B E60F                       	smpsAlterVol        $0F
000FB74D 08                         	dc.b	$08
000FB74E E6F1                       	smpsAlterVol        $F1
000FB750 10                         	dc.b	$10
000FB751 E60F                       	smpsAlterVol        $0F
000FB753 38                         	dc.b	$38
000FB754 E6F1                       	smpsAlterVol        $F1
000FB756 10                         	dc.b	$10
000FB757 E60F                       	smpsAlterVol        $0F
000FB759 C4                         	dc.b	nG5
000FB75A E6F1                       	smpsAlterVol        $F1
000FB75C E100                       	smpsAlterNote       $00
000FB75E C2                         	dc.b	nF5
000FB75F E60F                       	smpsAlterVol        $0F
000FB761 08                         	dc.b	$08
000FB762 E6F1                       	smpsAlterVol        $F1
000FB764 C010                       	dc.b	nEb5, $10
000FB766 E60F                       	smpsAlterVol        $0F
000FB768 C0                         	dc.b	nEb5
000FB769 E6F1                       	smpsAlterVol        $F1
000FB76B BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000FB771 E60F                       	smpsAlterVol        $0F
000FB773 C9                         	dc.b	nC6
000FB774 E6F1                       	smpsAlterVol        $F1
000FB776 C5                         	dc.b	nAb5
000FB777 E60F                       	smpsAlterVol        $0F
000FB779 08                         	dc.b	$08
000FB77A E6F1                       	smpsAlterVol        $F1
000FB77C C010                       	dc.b	nEb5, $10
000FB77E E60F                       	smpsAlterVol        $0F
000FB780 C0                         	dc.b	nEb5
000FB781 E6F1                       	smpsAlterVol        $F1
000FB783 C208                       	dc.b	nF5, $08
000FB785 E1FF                       	smpsAlterNote       $FF
000FB787 C410                       	dc.b	nG5, $10
000FB789 E100                       	smpsAlterNote       $00
000FB78B C5C7                       	dc.b	nAb5, nBb5
000FB78D E60F                       	smpsAlterVol        $0F
000FB78F C7                         	dc.b	nBb5
000FB790 E6F1                       	smpsAlterVol        $F1
000FB792 C5                         	dc.b	nAb5
000FB793 E60F                       	smpsAlterVol        $0F
000FB795 08                         	dc.b	$08
000FB796 E6F1                       	smpsAlterVol        $F1
000FB798 E1FF                       	smpsAlterNote       $FF
000FB79A C410                       	dc.b	nG5, $10
000FB79C E60F                       	smpsAlterVol        $0F
000FB79E C4                         	dc.b	nG5
000FB79F E6F1                       	smpsAlterVol        $F1
000FB7A1 C4                         	dc.b	nG5
000FB7A2 E100                       	smpsAlterNote       $00
000FB7A4 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000FB7A9 E60F                       	smpsAlterVol        $0F
000FB7AB 28                         	dc.b	$28
000FB7AC E6F1                       	smpsAlterVol        $F1
000FB7AE C008 10                    	dc.b	nEb5, $08, $10
000FB7B1 E60F                       	smpsAlterVol        $0F
000FB7B3 21                         	dc.b	$21
000FB7B4                            
000FB7B4                            GentleBreeze_Loop12:
000FB7B4 E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000FB7B7 F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000FB7BC E717                       	dc.b	smpsNoAttack, $17
000FB7BE E6F1                       	smpsAlterVol        $F1
000FB7C0 E1FF                       	smpsAlterNote       $FF
000FB7C2 C410                       	dc.b	nG5, $10
000FB7C4 E60F                       	smpsAlterVol        $0F
000FB7C6 C4                         	dc.b	nG5
000FB7C7 E6F1                       	smpsAlterVol        $F1
000FB7C9 E100                       	smpsAlterNote       $00
000FB7CB C2                         	dc.b	nF5
000FB7CC E60F                       	smpsAlterVol        $0F
000FB7CE 08                         	dc.b	$08
000FB7CF E6F1                       	smpsAlterVol        $F1
000FB7D1 C010                       	dc.b	nEb5, $10
000FB7D3 E60F                       	smpsAlterVol        $0F
000FB7D5 C0                         	dc.b	nEb5
000FB7D6 E6F1                       	smpsAlterVol        $F1
000FB7D8 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000FB7DE E60F                       	smpsAlterVol        $0F
000FB7E0 C9                         	dc.b	nC6
000FB7E1 E6F1                       	smpsAlterVol        $F1
000FB7E3 C5                         	dc.b	nAb5
000FB7E4 E60F                       	smpsAlterVol        $0F
000FB7E6 08                         	dc.b	$08
000FB7E7 E6F1                       	smpsAlterVol        $F1
000FB7E9 C010                       	dc.b	nEb5, $10
000FB7EB E60F                       	smpsAlterVol        $0F
000FB7ED C0                         	dc.b	nEb5
000FB7EE E6F1                       	smpsAlterVol        $F1
000FB7F0 C208                       	dc.b	nF5, $08
000FB7F2 E1FF                       	smpsAlterNote       $FF
000FB7F4 C410                       	dc.b	nG5, $10
000FB7F6 E100                       	smpsAlterNote       $00
000FB7F8 C5C7                       	dc.b	nAb5, nBb5
000FB7FA E60F                       	smpsAlterVol        $0F
000FB7FC C7                         	dc.b	nBb5
000FB7FD E6F1                       	smpsAlterVol        $F1
000FB7FF C5                         	dc.b	nAb5
000FB800 E60F                       	smpsAlterVol        $0F
000FB802 08                         	dc.b	$08
000FB803 E6F1                       	smpsAlterVol        $F1
000FB805 E1FF                       	smpsAlterNote       $FF
000FB807 C410                       	dc.b	nG5, $10
000FB809 E60F                       	smpsAlterVol        $0F
000FB80B C4                         	dc.b	nG5
000FB80C E6F1                       	smpsAlterVol        $F1
000FB80E C4                         	dc.b	nG5
000FB80F E100                       	smpsAlterNote       $00
000FB811 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000FB816 E60F                       	smpsAlterVol        $0F
000FB818 C2                         	dc.b	nF5
000FB819 E6F1                       	smpsAlterVol        $F1
000FB81B E1FF                       	smpsAlterNote       $FF
000FB81D C4                         	dc.b	nG5
000FB81E E60F                       	smpsAlterVol        $0F
000FB820 08                         	dc.b	$08
000FB821 E6F1                       	smpsAlterVol        $F1
000FB823 10                         	dc.b	$10
000FB824 E60F                       	smpsAlterVol        $0F
000FB826 38                         	dc.b	$38
000FB827 E6F1                       	smpsAlterVol        $F1
000FB829 10                         	dc.b	$10
000FB82A E60F                       	smpsAlterVol        $0F
000FB82C C4                         	dc.b	nG5
000FB82D E6F1                       	smpsAlterVol        $F1
000FB82F E100                       	smpsAlterNote       $00
000FB831 C2                         	dc.b	nF5
000FB832 E60F                       	smpsAlterVol        $0F
000FB834 08                         	dc.b	$08
000FB835 E6F1                       	smpsAlterVol        $F1
000FB837 C010                       	dc.b	nEb5, $10
000FB839 E60F                       	smpsAlterVol        $0F
000FB83B C0                         	dc.b	nEb5
000FB83C E6F1                       	smpsAlterVol        $F1
000FB83E BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000FB844 E60F                       	smpsAlterVol        $0F
000FB846 C9                         	dc.b	nC6
000FB847 E6F1                       	smpsAlterVol        $F1
000FB849 C5                         	dc.b	nAb5
000FB84A E60F                       	smpsAlterVol        $0F
000FB84C 08                         	dc.b	$08
000FB84D E6F1                       	smpsAlterVol        $F1
000FB84F C010                       	dc.b	nEb5, $10
000FB851 E60F                       	smpsAlterVol        $0F
000FB853 C0                         	dc.b	nEb5
000FB854 E6F1                       	smpsAlterVol        $F1
000FB856 C208                       	dc.b	nF5, $08
000FB858 E1FF                       	smpsAlterNote       $FF
000FB85A C410                       	dc.b	nG5, $10
000FB85C E100                       	smpsAlterNote       $00
000FB85E C5C7                       	dc.b	nAb5, nBb5
000FB860 E60F                       	smpsAlterVol        $0F
000FB862 C7                         	dc.b	nBb5
000FB863 E6F1                       	smpsAlterVol        $F1
000FB865 C5                         	dc.b	nAb5
000FB866 E60F                       	smpsAlterVol        $0F
000FB868 08                         	dc.b	$08
000FB869 E6F1                       	smpsAlterVol        $F1
000FB86B E1FF                       	smpsAlterNote       $FF
000FB86D C410                       	dc.b	nG5, $10
000FB86F E60F                       	smpsAlterVol        $0F
000FB871 C4                         	dc.b	nG5
000FB872 E6F1                       	smpsAlterVol        $F1
000FB874 C4                         	dc.b	nG5
000FB875 E100                       	smpsAlterNote       $00
000FB877 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000FB87C E60F                       	smpsAlterVol        $0F
000FB87E 28                         	dc.b	$28
000FB87F E6F1                       	smpsAlterVol        $F1
000FB881 C008 10                    	dc.b	nEb5, $08, $10
000FB884 E60F                       	smpsAlterVol        $0F
000FB886 21                         	dc.b	$21
000FB887 E0C0                       	smpsPan             panCenter, $00
000FB889 F6FF 29                    	smpsJump            GentleBreeze_Loop12
000FB88C                            
000FB88C                            ; FM2 Data
000FB88C                            GentleBreeze_FM2:
000FB88E E60C                       	smpsAlterVol        $0C
000FB890 E0C0                       	smpsPan             panCenter, $00
000FB892 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000FB89E A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000FB8AA 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000FB8B6 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000FB8C2 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000FB8CE A039                       	dc.b	nG2, $39
000FB8D0                            
000FB8D0                            GentleBreeze_Jump04:
000FB8D0 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000FB8D3                            
000FB8D3                            GentleBreeze_Loop11:
000FB8D3 A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000FB8DF A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000FB8EB 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000FB8F7 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000FB903 A3                         	dc.b	nBb2
000FB904 F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000FB909 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000FB915 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000FB921 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000FB92D 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000FB939 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000FB945 A039                       	dc.b	nG2, $39
000FB947 E0C0                       	smpsPan             panCenter, $00
000FB949 F6FF 85                    	smpsJump            GentleBreeze_Jump04
000FB94C                            
000FB94C                            ; FM3 Data
000FB94C                            GentleBreeze_FM3:
000FB94E E0C0                       	smpsPan             panCenter, $00
000FB950 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000FB958 E616                       	smpsAlterVol        $16
000FB95A F000 0207 03               	smpsModSet          $00, $02, $07, $03
000FB95F                            
000FB95F                            GentleBreeze_Loop0F:
000FB95F C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000FB963 E1FF                       	smpsAlterNote       $FF
000FB965 C4                         	dc.b	nG5
000FB966 E100                       	smpsAlterNote       $00
000FB968 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000FB96D E608                       	smpsAlterVol        $08
000FB96F C080 08                    	dc.b	nEb5, nRst, $08
000FB972 E6F8                       	smpsAlterVol        $F8
000FB974 C7                         	dc.b	nBb5
000FB975 E1FF                       	smpsAlterNote       $FF
000FB977 C4                         	dc.b	nG5
000FB978 E100                       	smpsAlterNote       $00
000FB97A C0BB                       	dc.b	nEb5, nBb4
000FB97C F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000FB981 C0BD C9                    	dc.b	nEb5, nC5, nC6
000FB984 E1FF                       	smpsAlterNote       $FF
000FB986 C4                         	dc.b	nG5
000FB987 E100                       	smpsAlterNote       $00
000FB989 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000FB98E E608                       	smpsAlterVol        $08
000FB990 C080 08                    	dc.b	nEb5, nRst, $08
000FB993 E6F8                       	smpsAlterVol        $F8
000FB995 E1FF                       	smpsAlterNote       $FF
000FB997 C4                         	dc.b	nG5
000FB998 E100                       	smpsAlterNote       $00
000FB99A C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000FB9A1 E1FF                       	smpsAlterNote       $FF
000FB9A3 C4                         	dc.b	nG5
000FB9A4 E100                       	smpsAlterNote       $00
000FB9A6 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000FB9AB E1FF                       	smpsAlterNote       $FF
000FB9AD C4                         	dc.b	nG5
000FB9AE E100                       	smpsAlterNote       $00
000FB9B0 C7                         	dc.b	nBb5
000FB9B1 E1FF                       	smpsAlterNote       $FF
000FB9B3 C4                         	dc.b	nG5
000FB9B4 E100                       	smpsAlterNote       $00
000FB9B6 C2C0 01                    	dc.b	nF5, nEb5, $01
000FB9B9                            
000FB9B9                            GentleBreeze_Jump03:
000FB9B9 E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000FB9C0 E6FA                       	smpsAlterVol        $FA
000FB9C2 F4                         	smpsModOff
000FB9C3 E1FF                       	smpsAlterNote       $FF
000FB9C5 B850                       	dc.b	nG4, $50
000FB9C7 E100                       	smpsAlterNote       $00
000FB9C9 B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000FB9D5 E1FF                       	smpsAlterNote       $FF
000FB9D7 B810                       	dc.b	nG4, $10
000FB9D9 E100                       	smpsAlterNote       $00
000FB9DB BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000FB9E0 E1FF                       	smpsAlterNote       $FF
000FB9E2 B8                         	dc.b	nG4
000FB9E3 E100                       	smpsAlterNote       $00
000FB9E5 B610                       	dc.b	nF4, $10
000FB9E7 E1FF                       	smpsAlterNote       $FF
000FB9E9 B850                       	dc.b	nG4, $50
000FB9EB E100                       	smpsAlterNote       $00
000FB9ED B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000FB9F5 E1FF                       	smpsAlterNote       $FF
000FB9F7 AC08                       	dc.b	nG3, $08
000FB9F9 E100                       	smpsAlterNote       $00
000FB9FB AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000FBA00 E1FF                       	smpsAlterNote       $FF
000FBA02 B850                       	dc.b	nG4, $50
000FBA04 E100                       	smpsAlterNote       $00
000FBA06 BB08                       	dc.b	nBb4, $08
000FBA08 E1FF                       	smpsAlterNote       $FF
000FBA0A B8                         	dc.b	nG4
000FBA0B E100                       	smpsAlterNote       $00
000FBA0D BDBB B6                    	dc.b	nC5, nBb4, nF4
000FBA10 E1FF                       	smpsAlterNote       $FF
000FBA12 B810 08                    	dc.b	nG4, $10, $08
000FBA15 E100                       	smpsAlterNote       $00
000FBA17 B6                         	dc.b	nF4
000FBA18 E1FF                       	smpsAlterNote       $FF
000FBA1A B880                       	dc.b	nG4, nRst
000FBA1C E100                       	smpsAlterNote       $00
000FBA1E BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000FBA21 E1FF                       	smpsAlterNote       $FF
000FBA23 B810                       	dc.b	nG4, $10
000FBA25 E100                       	smpsAlterNote       $00
000FBA27 B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000FBA2E E1FF                       	smpsAlterNote       $FF
000FBA30 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000FBA3E E606                       	smpsAlterVol        $06
000FBA40 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000FBA45 E100                       	smpsAlterNote       $00
000FBA47                            
000FBA47                            GentleBreeze_Loop10:
000FBA47 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000FBA4B E1FF                       	smpsAlterNote       $FF
000FBA4D C4                         	dc.b	nG5
000FBA4E E100                       	smpsAlterNote       $00
000FBA50 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000FBA55 E608                       	smpsAlterVol        $08
000FBA57 C080 08                    	dc.b	nEb5, nRst, $08
000FBA5A E6F8                       	smpsAlterVol        $F8
000FBA5C C7                         	dc.b	nBb5
000FBA5D E1FF                       	smpsAlterNote       $FF
000FBA5F C4                         	dc.b	nG5
000FBA60 E100                       	smpsAlterNote       $00
000FBA62 C0BB                       	dc.b	nEb5, nBb4
000FBA64 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000FBA69 C0BD C9                    	dc.b	nEb5, nC5, nC6
000FBA6C E1FF                       	smpsAlterNote       $FF
000FBA6E C4                         	dc.b	nG5
000FBA6F E100                       	smpsAlterNote       $00
000FBA71 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000FBA76 E608                       	smpsAlterVol        $08
000FBA78 C080 08                    	dc.b	nEb5, nRst, $08
000FBA7B E6F8                       	smpsAlterVol        $F8
000FBA7D E1FF                       	smpsAlterNote       $FF
000FBA7F C4                         	dc.b	nG5
000FBA80 E100                       	smpsAlterNote       $00
000FBA82 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000FBA89 E1FF                       	smpsAlterNote       $FF
000FBA8B C4                         	dc.b	nG5
000FBA8C E100                       	smpsAlterNote       $00
000FBA8E C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000FBA93 E1FF                       	smpsAlterNote       $FF
000FBA95 C4                         	dc.b	nG5
000FBA96 E100                       	smpsAlterNote       $00
000FBA98 C7                         	dc.b	nBb5
000FBA99 E1FF                       	smpsAlterNote       $FF
000FBA9B C4                         	dc.b	nG5
000FBA9C E100                       	smpsAlterNote       $00
000FBA9E C2C0 01                    	dc.b	nF5, nEb5, $01
000FBAA1 E0C0                       	smpsPan             panCenter, $00
000FBAA3 F1                         	smpsModOn
000FBAA4 F6FF 13                    	smpsJump            GentleBreeze_Jump03
000FBAA7                            
000FBAA7                            ; FM4 Data
000FBAA7                            GentleBreeze_FM4:
000FBAA9 E0C0                       	smpsPan             panCenter, $00
000FBAAB 80                         	dc.b	nRst
000FBAAC                            
000FBAAC                            GentleBreeze_Loop0D:
000FBAAC 7F                         	dc.b	$7F
000FBAAD F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000FBAB2 77                         	dc.b	$77
000FBAB5 E609                       	smpsAlterVol        $09
000FBAB7 C001                       	dc.b	nEb5, $01
000FBAB9                            
000FBAB9                            GentleBreeze_Jump02:
000FBAB9 E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000FBABE E607                       	smpsAlterVol        $07
000FBAC0 E1FF                       	smpsAlterNote       $FF
000FBAC2 C450                       	dc.b	nG5, $50
000FBAC4 E100                       	smpsAlterNote       $00
000FBAC6 C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000FBAD2 E1FF                       	smpsAlterNote       $FF
000FBAD4 C410                       	dc.b	nG5, $10
000FBAD6 E100                       	smpsAlterNote       $00
000FBAD8 C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000FBADD E1FF                       	smpsAlterNote       $FF
000FBADF C4                         	dc.b	nG5
000FBAE0 E100                       	smpsAlterNote       $00
000FBAE2 C210                       	dc.b	nF5, $10
000FBAE4 E1FF                       	smpsAlterNote       $FF
000FBAE6 C450                       	dc.b	nG5, $50
000FBAE8 E100                       	smpsAlterNote       $00
000FBAEA C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000FBAF2 E1FF                       	smpsAlterNote       $FF
000FBAF4 B808                       	dc.b	nG4, $08
000FBAF6 E100                       	smpsAlterNote       $00
000FBAF8 BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000FBAFD E1FF                       	smpsAlterNote       $FF
000FBAFF C450                       	dc.b	nG5, $50
000FBB01 E100                       	smpsAlterNote       $00
000FBB03 C708                       	dc.b	nBb5, $08
000FBB05 E1FF                       	smpsAlterNote       $FF
000FBB07 C4                         	dc.b	nG5
000FBB08 E100                       	smpsAlterNote       $00
000FBB0A C9C7 C2                    	dc.b	nC6, nBb5, nF5
000FBB0D E1FF                       	smpsAlterNote       $FF
000FBB0F C410 08                    	dc.b	nG5, $10, $08
000FBB12 E100                       	smpsAlterNote       $00
000FBB14 C2                         	dc.b	nF5
000FBB15 E1FF                       	smpsAlterNote       $FF
000FBB17 C480                       	dc.b	nG5, nRst
000FBB19 E100                       	smpsAlterNote       $00
000FBB1B C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000FBB1E E1FF                       	smpsAlterNote       $FF
000FBB20 C410                       	dc.b	nG5, $10
000FBB22 E100                       	smpsAlterNote       $00
000FBB24 BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000FBB2B E1FF                       	smpsAlterNote       $FF
000FBB2D C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000FBB35                            
000FBB35                            GentleBreeze_Loop0E:
000FBB35 7F                         	dc.b	$7F
000FBB36 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000FBB3B 77                         	dc.b	$77
000FBB3C E100                       	smpsAlterNote       $00
000FBB3E C001                       	dc.b	nEb5, $01
000FBB40 E6F9                       	smpsAlterVol        $F9
000FBB42 E0C0                       	smpsPan             panCenter, $00
000FBB44 E100                       	smpsAlterNote       $00
000FBB46 F6FF 71                    	smpsJump            GentleBreeze_Jump02
000FBB49                            
000FBB49                            ; FM5 Data
000FBB49                            GentleBreeze_FM5:
000FBB4B E0C0                       	smpsPan             panCenter, $00
000FBB4D A5                         	dc.b	nC3
000FBB4E                            
000FBB4E                            GentleBreeze_Loop06:
000FBB4E 10                         	dc.b	$10
000FBB4F E607                       	smpsAlterVol        $07
000FBB51 A5                         	dc.b	nC3
000FBB52 E6F9                       	smpsAlterVol        $F9
000FBB54 08                         	dc.b	$08
000FBB55 E607                       	smpsAlterVol        $07
000FBB57 A5                         	dc.b	nC3
000FBB58 E608                       	smpsAlterVol        $08
000FBB5A A5                         	dc.b	nC3
000FBB5B E6F1                       	smpsAlterVol        $F1
000FBB5D 18                         	dc.b	$18
000FBB5E E607                       	smpsAlterVol        $07
000FBB60 10                         	dc.b	$10
000FBB61 E608                       	smpsAlterVol        $08
000FBB63 A5                         	dc.b	nC3
000FBB64 E6F1                       	smpsAlterVol        $F1
000FBB66 A5                         	dc.b	nC3
000FBB67 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000FBB6C A5                         	dc.b	nC3
000FBB6D                            
000FBB6D                            GentleBreeze_Loop07:
000FBB6D E607                       	smpsAlterVol        $07
000FBB6F A5                         	dc.b	nC3
000FBB70 E6F9                       	smpsAlterVol        $F9
000FBB72 08                         	dc.b	$08
000FBB73 E607                       	smpsAlterVol        $07
000FBB75 A5                         	dc.b	nC3
000FBB76 E608                       	smpsAlterVol        $08
000FBB78 A5                         	dc.b	nC3
000FBB79 E6F1                       	smpsAlterVol        $F1
000FBB7B 10                         	dc.b	$10
000FBB7C F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000FBB81                            
000FBB81                            GentleBreeze_Loop08:
000FBB81 A5                         	dc.b	nC3
000FBB82 E607                       	smpsAlterVol        $07
000FBB84 A5                         	dc.b	nC3
000FBB85 E6F9                       	smpsAlterVol        $F9
000FBB87 08                         	dc.b	$08
000FBB88 E607                       	smpsAlterVol        $07
000FBB8A A5                         	dc.b	nC3
000FBB8B E608                       	smpsAlterVol        $08
000FBB8D A5                         	dc.b	nC3
000FBB8E E6F1                       	smpsAlterVol        $F1
000FBB90 18                         	dc.b	$18
000FBB91 E607                       	smpsAlterVol        $07
000FBB93 10                         	dc.b	$10
000FBB94 E608                       	smpsAlterVol        $08
000FBB96 A5                         	dc.b	nC3
000FBB97 E6F1                       	smpsAlterVol        $F1
000FBB99 A5                         	dc.b	nC3
000FBB9A F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000FBB9F A5                         	dc.b	nC3
000FBBA0 E607                       	smpsAlterVol        $07
000FBBA2 A5                         	dc.b	nC3
000FBBA3 E6F9                       	smpsAlterVol        $F9
000FBBA5 08                         	dc.b	$08
000FBBA6 E607                       	smpsAlterVol        $07
000FBBA8 A5                         	dc.b	nC3
000FBBA9 E608                       	smpsAlterVol        $08
000FBBAB A5                         	dc.b	nC3
000FBBAC E6F1                       	smpsAlterVol        $F1
000FBBAE 10                         	dc.b	$10
000FBBAF E607                       	smpsAlterVol        $07
000FBBB1 A5                         	dc.b	nC3
000FBBB2 E6F9                       	smpsAlterVol        $F9
000FBBB4 08                         	dc.b	$08
000FBBB5 E607                       	smpsAlterVol        $07
000FBBB7 A5                         	dc.b	nC3
000FBBB8 E608                       	smpsAlterVol        $08
000FBBBA A5                         	dc.b	nC3
000FBBBB E6F1                       	smpsAlterVol        $F1
000FBBBD 01                         	dc.b	$01
000FBBBE                            
000FBBBE                            GentleBreeze_Jump01:
000FBBBE E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000FBBC1 E607                       	smpsAlterVol        $07
000FBBC3                            
000FBBC3                            GentleBreeze_Loop09:
000FBBC3 10                         	dc.b	$10
000FBBC4 E608                       	smpsAlterVol        $08
000FBBC6 A5                         	dc.b	nC3
000FBBC7 E6F1                       	smpsAlterVol        $F1
000FBBC9 08                         	dc.b	$08
000FBBCA E60F                       	smpsAlterVol        $0F
000FBBCC 18                         	dc.b	$18
000FBBCD E6F8                       	smpsAlterVol        $F8
000FBBCF F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000FBBD4 10                         	dc.b	$10
000FBBD5 E608                       	smpsAlterVol        $08
000FBBD7 A5                         	dc.b	nC3
000FBBD8 E6F1                       	smpsAlterVol        $F1
000FBBDA 08                         	dc.b	$08
000FBBDB E60F                       	smpsAlterVol        $0F
000FBBDD 18                         	dc.b	$18
000FBBDE E6F1                       	smpsAlterVol        $F1
000FBBE0                            
000FBBE0                            GentleBreeze_Loop0A:
000FBBE0 10                         	dc.b	$10
000FBBE1 E607                       	smpsAlterVol        $07
000FBBE3 A5                         	dc.b	nC3
000FBBE4 E6F9                       	smpsAlterVol        $F9
000FBBE6 08                         	dc.b	$08
000FBBE7 E607                       	smpsAlterVol        $07
000FBBE9 A5                         	dc.b	nC3
000FBBEA E608                       	smpsAlterVol        $08
000FBBEC A5                         	dc.b	nC3
000FBBED E6F1                       	smpsAlterVol        $F1
000FBBEF 18                         	dc.b	$18
000FBBF0 E607                       	smpsAlterVol        $07
000FBBF2 10                         	dc.b	$10
000FBBF3 E608                       	smpsAlterVol        $08
000FBBF5 A5                         	dc.b	nC3
000FBBF6 E6F1                       	smpsAlterVol        $F1
000FBBF8 A5                         	dc.b	nC3
000FBBF9 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000FBBFE A5                         	dc.b	nC3
000FBBFF                            
000FBBFF                            GentleBreeze_Loop0B:
000FBBFF E607                       	smpsAlterVol        $07
000FBC01 A5                         	dc.b	nC3
000FBC02 E6F9                       	smpsAlterVol        $F9
000FBC04 08                         	dc.b	$08
000FBC05 E607                       	smpsAlterVol        $07
000FBC07 A5                         	dc.b	nC3
000FBC08 E608                       	smpsAlterVol        $08
000FBC0A A5                         	dc.b	nC3
000FBC0B E6F1                       	smpsAlterVol        $F1
000FBC0D 10                         	dc.b	$10
000FBC0E F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000FBC13                            
000FBC13                            GentleBreeze_Loop0C:
000FBC13 A5                         	dc.b	nC3
000FBC14 E607                       	smpsAlterVol        $07
000FBC16 A5                         	dc.b	nC3
000FBC17 E6F9                       	smpsAlterVol        $F9
000FBC19 08                         	dc.b	$08
000FBC1A E607                       	smpsAlterVol        $07
000FBC1C A5                         	dc.b	nC3
000FBC1D E608                       	smpsAlterVol        $08
000FBC1F A5                         	dc.b	nC3
000FBC20 E6F1                       	smpsAlterVol        $F1
000FBC22 18                         	dc.b	$18
000FBC23 E607                       	smpsAlterVol        $07
000FBC25 10                         	dc.b	$10
000FBC26 E608                       	smpsAlterVol        $08
000FBC28 A5                         	dc.b	nC3
000FBC29 E6F1                       	smpsAlterVol        $F1
000FBC2B A5                         	dc.b	nC3
000FBC2C F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000FBC31 A5                         	dc.b	nC3
000FBC32 E607                       	smpsAlterVol        $07
000FBC34 A5                         	dc.b	nC3
000FBC35 E6F9                       	smpsAlterVol        $F9
000FBC37 08                         	dc.b	$08
000FBC38 E607                       	smpsAlterVol        $07
000FBC3A A5                         	dc.b	nC3
000FBC3B E608                       	smpsAlterVol        $08
000FBC3D A5                         	dc.b	nC3
000FBC3E E6F1                       	smpsAlterVol        $F1
000FBC40 10                         	dc.b	$10
000FBC41 E607                       	smpsAlterVol        $07
000FBC43 A5                         	dc.b	nC3
000FBC44 E6F9                       	smpsAlterVol        $F9
000FBC46 08                         	dc.b	$08
000FBC47 E607                       	smpsAlterVol        $07
000FBC49 A5                         	dc.b	nC3
000FBC4A E608                       	smpsAlterVol        $08
000FBC4C A5                         	dc.b	nC3
000FBC4D E6F1                       	smpsAlterVol        $F1
000FBC4F 01                         	dc.b	$01
000FBC50 E0C0                       	smpsPan             panCenter, $00
000FBC52 F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000FBC55                            
000FBC55                            ; DAC Data
000FBC55                            GentleBreeze_DAC:
000FBC55 81                         	dc.b	dKick
000FBC56                            
000FBC56                            GentleBreeze_Loop00:
000FBC56 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000FBC5C F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000FBC61 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000FBC6C                            
000FBC6C                            GentleBreeze_Loop01:
000FBC6C 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000FBC72 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000FBC77 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000FBC81                            
000FBC81                            GentleBreeze_Jump00:
000FBC81 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000FBC85                            
000FBC85                            GentleBreeze_Loop02:
000FBC85 81                         	dc.b	dKick
000FBC86                            
000FBC86                            GentleBreeze_Loop03:
000FBC86 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000FBC92 088A                       	dc.b	$08, dLowTimpani
000FBC94 F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000FBC99 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000FBCA5 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000FBCAA F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000FBCAF                            
000FBCAF                            GentleBreeze_Loop04:
000FBCAF 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000FBCB5 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000FBCBA 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000FBCC5                            
000FBCC5                            GentleBreeze_Loop05:
000FBCC5 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000FBCCB F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000FBCD0 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000FBCDA F6FF A5                    	smpsJump            GentleBreeze_Jump00
000FBCDD                            
000FBCDD                            ; PSG 1 Data
000FBCDD                            GentleBreeze_PSG1:
000FBCDD 80                         	dc.b	nRst
000FBCDE                            
000FBCDE                            GentleBreeze_LoopPSG02:
000FBCDE 7F                         	dc.b	$7F
000FBCDF F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000FBCE4 08                         	dc.b	$08
000FBCE5 EC04                       	smpsPSGAlterVol     $04
000FBCE7                            
000FBCE7                            GentleBreeze_JumpPSG01:
000FBCE7 A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000FBCF3 A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000FBCFB                            
000FBCFB                            GentleBreeze_LoopPSG03:
000FBCFB 7F                         	dc.b	$7F
000FBCFC F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000FBD01 08A3 01                    	dc.b	$08, nBb2, $01
000FBD04 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000FBD07                            
000FBD07                            ; PSG2 Data
000FBD07                            GentleBreeze_PSG2:
000FBD07 80                         	dc.b	nRst
000FBD08                            
000FBD08                            GentleBreeze_LoopPSG00:
000FBD08 7F                         	dc.b	$7F
000FBD09 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000FBD0E 08                         	dc.b	$08
000FBD0F EC04                       	smpsPSGAlterVol     $04
000FBD11                            
000FBD11                            GentleBreeze_JumpPSG00:
000FBD11 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000FBD1D A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000FBD25                            
000FBD25                            GentleBreeze_LoopPSG01:
000FBD25 7F                         	dc.b	$7F
000FBD26 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000FBD2B 08A8 01                    	dc.b	$08, nEb3, $01
000FBD2E F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000FBD31                            
000FBD31                            GentleBreeze_Voices:
000FBD31                            ;	Voice $00
000FBD31                            ;	$0C
000FBD31                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000FBD31                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000FBD31                            	smpsVcAlgorithm     $04
000FBD31                            	smpsVcFeedback      $01
000FBD31                            	smpsVcUnusedBits    $00
000FBD31                            	smpsVcDetune        $07, $02, $07, $02
000FBD31                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000FBD31                            	smpsVcRateScale     $00, $00, $00, $00
000FBD31                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000FBD31                            	smpsVcAmpMod        $00, $00, $00, $00
000FBD31                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000FBD31                            	smpsVcDecayRate2    $01, $00, $00, $00
000FBD31                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000FBD31                            	smpsVcReleaseRate   $09, $01, $04, $03
000FBD31 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000FBD4A                            
000FBD4A                            ;	Voice $01
000FBD4A                            ;	$38
000FBD4A                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000FBD4A                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000FBD4A                            	smpsVcAlgorithm     $00
000FBD4A                            	smpsVcFeedback      $07
000FBD4A                            	smpsVcUnusedBits    $00
000FBD4A                            	smpsVcDetune        $03, $07, $01, $05
000FBD4A                            	smpsVcCoarseFreq    $00, $00, $07, $04
000FBD4A                            	smpsVcRateScale     $00, $02, $00, $02
000FBD4A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000FBD4A                            	smpsVcAmpMod        $00, $00, $00, $00
000FBD4A                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000FBD4A                            	smpsVcDecayRate2    $00, $00, $10, $00
000FBD4A                            	smpsVcDecayLevel    $00, $00, $00, $00
000FBD4A                            	smpsVcReleaseRate   $08, $05, $05, $05
000FBD4A 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000FBD63                            
000FBD63                            ;	Voice $02
000FBD63                            ;	$00
000FBD63                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000FBD63                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000FBD63                            	smpsVcAlgorithm     $00
000FBD63                            	smpsVcFeedback      $00
000FBD63                            	smpsVcUnusedBits    $00
000FBD63                            	smpsVcDetune        $00, $00, $00, $00
000FBD63                            	smpsVcCoarseFreq    $00, $00, $00, $00
000FBD63                            	smpsVcRateScale     $00, $00, $00, $00
000FBD63                            	smpsVcAttackRate    $00, $00, $00, $00
000FBD63                            	smpsVcAmpMod        $00, $00, $00, $00
000FBD63                            	smpsVcDecayRate1    $00, $00, $00, $00
000FBD63                            	smpsVcDecayRate2    $00, $00, $00, $00
000FBD63                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000FBD63                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000FBD63 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000FBD7C                            
000FBD7C                            ;	Voice $03
000FBD7C                            ;	$36
000FBD7C                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000FBD7C                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000FBD7C                            	smpsVcAlgorithm     $06
000FBD7C                            	smpsVcFeedback      $06
000FBD7C                            	smpsVcUnusedBits    $00
000FBD7C                            	smpsVcDetune        $00, $00, $00, $00
000FBD7C                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000FBD7C                            	smpsVcRateScale     $00, $00, $00, $00
000FBD7C                            	smpsVcAttackRate    $1F, $00, $18, $16
000FBD7C                            	smpsVcAmpMod        $00, $00, $00, $00
000FBD7C                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000FBD7C                            	smpsVcDecayRate2    $00, $00, $12, $00
000FBD7C                            	smpsVcDecayLevel    $04, $04, $02, $00
000FBD7C                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000FBD7C 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000FBD95                            
000FBD95                            ;	Voice $04
000FBD95                            ;	$07
000FBD95                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000FBD95                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000FBD95                            	smpsVcAlgorithm     $07
000FBD95                            	smpsVcFeedback      $00
000FBD95                            	smpsVcUnusedBits    $00
000FBD95                            	smpsVcDetune        $07, $06, $05, $00
000FBD95                            	smpsVcCoarseFreq    $05, $04, $03, $05
000FBD95                            	smpsVcRateScale     $00, $01, $01, $01
000FBD95                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000FBD95                            	smpsVcAmpMod        $00, $00, $00, $00
000FBD95                            	smpsVcDecayRate1    $17, $17, $17, $17
000FBD95                            	smpsVcDecayRate2    $00, $00, $00, $00
000FBD95                            	smpsVcDecayLevel    $02, $02, $02, $02
000FBD95                            	smpsVcReleaseRate   $06, $06, $06, $06
000FBD95 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000FBDAE                            
000FBDAE                            ;	Voice $05
000FBDAE                            ;	$3C
000FBDAE                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000FBDAE                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000FBDAE                            	smpsVcAlgorithm     $04
000FBDAE                            	smpsVcFeedback      $07
000FBDAE                            	smpsVcUnusedBits    $00
000FBDAE                            	smpsVcDetune        $06, $06, $02, $02
000FBDAE                            	smpsVcCoarseFreq    $01, $03, $01, $01
000FBDAE                            	smpsVcRateScale     $00, $00, $00, $00
000FBDAE                            	smpsVcAttackRate    $0E, $14, $10, $13
000FBDAE                            	smpsVcAmpMod        $00, $00, $00, $00
000FBDAE                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000FBDAE                            	smpsVcDecayRate2    $04, $04, $04, $04
000FBDAE                            	smpsVcDecayLevel    $02, $01, $01, $01
000FBDAE                            	smpsVcReleaseRate   $07, $07, $07, $07
000FBDAE 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000FBDC7                            
000FBDC7                            
000FBDC8 00                         		even
000FBDC8                            ; ---------------------------------------------------------------------------
000FBDC8                            ; Sound	effect pointers
000FBDC8                            ; ---------------------------------------------------------------------------
000FBDC8 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000FBDD4 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000FBDE0 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000FBDEC 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000FBDF8 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000FBE04 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000FBE10 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000FBE1C 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000FBE28 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000FBE34 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000FBE40 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000FBE4C 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000FBE58 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000FBE64 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000FBE70 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000FBE7C 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000FBE88 0000 0000                  SoundD0Index:	dc.l SoundD0
000FBE8C 0000 0000 0000 0000        		dc.l SoundD1, SoundD2
000FBE94                            SoundA0:	include	sound\jump.asm
000FBE94                            SndA0_Jump_Header:
000FBE94 =00000001                  smpsHeaderStartSong = 1
000FBE94 0000                       	smpsHeaderVoice     SndA0_Jump_Voices
000FBE96 01                         	smpsHeaderTempoSFX  $01
000FBE97 01                         	smpsHeaderChanSFX   $01
000FBE98                            
000FBE9E                            
000FBE9E                            ; PSG1 Data
000FBE9E                            SndA0_Jump_PSG1:
000FBE9E F500                       	smpsPSGvoice        $00
000FBEA0 A201                       	dc.b	nA2, $01
000FBEA2 F002 01F8 65               	smpsModSet          $02, $01, $F8, $65
000FBEA7 9C15                       	dc.b	nEb2, $15
000FBEA9 F2                         	smpsStop
000FBEAA                            
000FBEAA                            ; Song seems to not use any FM voices
000FBEAA                            SndA0_Jump_Voices:
000FBEAA                            SndA0_Jump_Voices:
000FBEAA                            		even
000FBEAA                            SoundA1:	incbin	sound\soundA1.bin
000FBED4                            		even
000FBED4                            SoundA2:	incbin	sound\soundA2.bin
000FBEF4                            		even
000FBEF4                            SoundA3:	incbin	sound\soundA3.bin
000FBF26                            		even
000FBF26                            SoundA4:	incbin	sound\soundA4.bin
000FBF5C                            		even
000FBF5C                            SoundA5:	include	sound\fart.asm
000FBF5C                            Fart_Header:
000FBF5C =00000001                  smpsHeaderStartSong = 1
000FBF5C 0000                       	smpsHeaderVoice     Fart_Voices
000FBF5E 01                         	smpsHeaderTempoSFX  $01
000FBF5F 04                         	smpsHeaderChanSFX   $04
000FBF60                            
000FBF78                            
000FBF78                            Fart_FM3:
000FBF7A E607                       	smpsAlterVol        $07
000FBF7C E0C0                       	smpsPan             panCenter, $00
000FBF7E F000 0210 03               	smpsModSet          $00, $02, $10, $03
000FBF83 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000FBF86 E1FE                       	smpsAlterNote       $FE
000FBF88 A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000FBF8B E100                       	smpsAlterNote       $00
000FBF8D A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000FBF92 F2                         	smpsStop
000FBF93                            
000FBF93                            ; FM4 Data
000FBF93                            Fart_FM4:
000FBF95 E0C0                       	smpsPan             panCenter, $00
000FBF97 8006                       	dc.b	nRst, $06
000FBF9B E616                       	smpsAlterVol        $16
000FBF9D E080                       	smpsPan             panLeft, $00
000FBF9F F000 0210 03               	smpsModSet          $00, $02, $10, $03
000FBFA4 A212                       	dc.b	nA2, $12
000FBFA6 E60A                       	smpsAlterVol        $0A
000FBFA8 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000FBFAB E603                       	smpsAlterVol        $03
000FBFAD E7A2                       	dc.b	smpsNoAttack, nA2
000FBFAF E603                       	smpsAlterVol        $03
000FBFB1 E7A2                       	dc.b	smpsNoAttack, nA2
000FBFB3 E604                       	smpsAlterVol        $04
000FBFB5 E7A2                       	dc.b	smpsNoAttack, nA2
000FBFB7 E606                       	smpsAlterVol        $06
000FBFB9 E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000FBFBC E610                       	smpsAlterVol        $10
000FBFBE E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000FBFC1 E610                       	smpsAlterVol        $10
000FBFC3 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000FBFC8 F2                         	smpsStop
000FBFC9                            
000FBFC9                            ; FM5 Data
000FBFC9                            Fart_FM5:
000FBFCB E0C0                       	smpsPan             panCenter, $00
000FBFCD 8009                       	dc.b	nRst, $09
000FBFD1 E616                       	smpsAlterVol        $16
000FBFD3 E040                       	smpsPan             panRight, $00
000FBFD5 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000FBFDA A215                       	dc.b	nA2, $15
000FBFDC E60A                       	smpsAlterVol        $0A
000FBFDE E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000FBFE1 E603                       	smpsAlterVol        $03
000FBFE3 E7A2                       	dc.b	smpsNoAttack, nA2
000FBFE5 E603                       	smpsAlterVol        $03
000FBFE7 E7A2                       	dc.b	smpsNoAttack, nA2
000FBFE9 E604                       	smpsAlterVol        $04
000FBFEB E7A2                       	dc.b	smpsNoAttack, nA2
000FBFED E606                       	smpsAlterVol        $06
000FBFEF E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000FBFF2 E610                       	smpsAlterVol        $10
000FBFF4 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000FBFF7 E610                       	smpsAlterVol        $10
000FBFF9 E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000FBFFE F2                         	smpsStop
000FBFFF                            
000FBFFF                            ; PSG3 Data
000FBFFF                            Fart_PSG3:
000FBFFF F2                         	smpsStop
000FC000                            
000FC000                            ; FM Voices
000FC000                            Fart_Voices:
000FC000                            ;	Voice $00
000FC000                            ;	$39
000FC000                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000FC000                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000FC000                            	smpsVcAlgorithm     $01
000FC000                            	smpsVcFeedback      $07
000FC000                            	smpsVcUnusedBits    $00
000FC000                            	smpsVcDetune        $00, $07, $03, $07
000FC000                            	smpsVcCoarseFreq    $01, $01, $02, $00
000FC000                            	smpsVcRateScale     $00, $03, $03, $03
000FC000                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000FC000                            	smpsVcAmpMod        $00, $00, $00, $00
000FC000                            	smpsVcDecayRate1    $00, $00, $00, $04
000FC000                            	smpsVcDecayRate2    $00, $00, $16, $1F
000FC000                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000FC000                            	smpsVcReleaseRate   $0A, $09, $00, $00
000FC000 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000FC019                            
000FC019                            ;	Voice $01
000FC019                            ;	$00
000FC019                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000FC019                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000FC019                            	smpsVcAlgorithm     $00
000FC019                            	smpsVcFeedback      $00
000FC019                            	smpsVcUnusedBits    $00
000FC019                            	smpsVcDetune        $00, $00, $00, $00
000FC019                            	smpsVcCoarseFreq    $00, $00, $00, $00
000FC019                            	smpsVcRateScale     $00, $00, $00, $00
000FC019                            	smpsVcAttackRate    $00, $00, $00, $00
000FC019                            	smpsVcAmpMod        $00, $00, $00, $00
000FC019                            	smpsVcDecayRate1    $00, $00, $00, $00
000FC019                            	smpsVcDecayRate2    $00, $00, $00, $00
000FC019                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000FC019                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000FC019 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000FC019 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000FC032                            		even
000FC032                            SoundA6:	incbin	sound\soundA6.bin
000FC062                            		even
000FC062                            SoundA7:	incbin	sound\soundA7.bin
000FC092                            		even
000FC092                            SoundA8:	incbin	sound\soundA8.bin
000FC0C6                            		even
000FC0C6                            SoundA9:	incbin	sound\soundA9.bin
000FC0D8                            		even
000FC0D8                            SoundAA:	incbin	sound\soundAA.bin
000FC11A                            		even
000FC11A                            SoundAB:	incbin	sound\soundAB.bin
000FC13A                            		even
000FC13A                            SoundAC:	incbin	sound\soundAC.bin
000FC16E                            		even
000FC16E                            SoundAD:	incbin	sound\soundAD.bin
000FC1A4                            		even
000FC1A4                            SoundAE:	incbin	sound\soundAE.bin
000FC1EE                            		even
000FC1EE                            SoundAF:	incbin	sound\soundAF.bin
000FC21C                            		even
000FC21C                            SoundB0:	incbin	sound\soundB0.bin
000FC24E                            		even
000FC24E                            SoundB1:	incbin	sound\soundB1.bin
000FC27A                            		even
000FC27A                            SoundB2:	incbin	sound\soundB2.bin
000FC2CA                            		even
000FC2CA                            SoundB3:	incbin	sound\soundB3.bin
000FC314                            		even
000FC314                            SoundB4:	include	sound\soundB4.asm
000FC314                            SndB4_Bumper_Header:
000FC314 =00000001                  smpsHeaderStartSong = 1
000FC314 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000FC316 01                         	smpsHeaderTempoSFX  $01
000FC317 03                         	smpsHeaderChanSFX   $03
000FC318                            
000FC32A                            
000FC32A                            ; FM5 Data
000FC32A                            SndB4_Bumper_FM5:
000FC32C F600 00                    	smpsJump            SndB4_Bumper_Jump00
000FC32F                            
000FC32F                            ; FM4 Data
000FC32F                            SndB4_Bumper_FM4:
000FC32F F2                         	smpsStop
000FC330                            
000FC330                            SndB4_Bumper_Jump00:
000FC330 A020                       	dc.b	nG2, $20
000FC332 F2                         	smpsStop
000FC333                            
000FC333                            ; FM3 Data
000FC333                            SndB4_Bumper_FM3:
000FC333 F2                         	smpsStop
000FC334                            
000FC334                            SndB4_Bumper_Voices:
000FC334                            ;	Voice $00
000FC334                            ;	$32
000FC334                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000FC334                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000FC334                            	smpsVcAlgorithm     $02
000FC334                            	smpsVcFeedback      $06
000FC334                            	smpsVcUnusedBits    $00
000FC334                            	smpsVcDetune        $07, $07, $02, $00
000FC334                            	smpsVcCoarseFreq    $00, $00, $00, $04
000FC334                            	smpsVcRateScale     $00, $00, $00, $00
000FC334                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000FC334                            	smpsVcAmpMod        $00, $00, $00, $00
000FC334                            	smpsVcDecayRate1    $08, $00, $00, $09
000FC334                            	smpsVcDecayRate2    $0B, $00, $00, $09
000FC334                            	smpsVcDecayLevel    $00, $00, $00, $00
000FC334                            	smpsVcReleaseRate   $0F, $00, $00, $00
000FC334 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000FC334 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000FC34E 00                         		even
000FC34E                            SoundB5:	incbin	sound\soundB5.bin
000FC36C 00                         		even
000FC36C                            SoundB6:	incbin	sound\soundB6.bin
000FC38A                            		even
000FC38A                            SoundB7:	incbin	sound\soundB7.bin
000FC3C6                            		even
000FC3C6                            SoundB8:	incbin	sound\soundB8.bin
000FC3E4                            		even
000FC3E4                            SoundB9:	incbin	sound\soundB9.bin
000FC448                            		even
000FC448                            SoundBA:	incbin	sound\soundBA.bin
000FC4AC                            		even
000FC4AC                            SoundBB:	incbin	sound\soundBB.bin
000FC4D8                            		even
000FC4D8                            SoundBC:	incbin	sound\soundBC.bin
000FC51A                            		even
000FC51A                            SoundBD:	incbin	sound\soundBD.bin
000FC56E                            		even
000FC56E                            SoundBE:	incbin	sound\soundBE.bin
000FC5A8                            		even
000FC5A8                            SoundBF:	incbin	sound\soundBF.bin
000FC61A                            		even
000FC61A                            SoundC0:	incbin	sound\soundC0.bin
000FC648                            		even
000FC648                            SoundC1:	incbin	sound\soundC1.bin
000FC6A2                            		even
000FC6A2                            SoundC2:	incbin	sound\soundC2.bin
000FC6CC                            		even
000FC6CC                            SoundC3:	incbin	sound\soundC3.bin
000FC746                            		even
000FC746                            SoundC4:	incbin	sound\soundC4.bin
000FC844                            		even
000FC844                            SoundC5:	incbin	sound\soundC5.bin
000FC8AC                            		even
000FC8AC                            SoundC6:	incbin	sound\soundC6.bin
000FC8EE                            		even
000FC8EE                            SoundC7:	incbin	sound\soundC7.bin
000FC91C                            		even
000FC91C                            SoundC8:	incbin	sound\soundC8.bin
000FC92E                            		even
000FC92E                            SoundC9:	incbin	sound\soundC9.bin
000FC95C                            		even
000FC95C                            SoundCA:	incbin	sound\soundCA.bin
000FC98A                            		even
000FC98A                            SoundCB:	incbin	sound\soundCB.bin
000FC9D6                            		even
000FC9D6                            SoundCC:	incbin	sound\C9.ssf
000FCA04                            		even
000FCA04                            SoundCD:	incbin	sound\soundCD.bin
000FCA30                            		even
000FCA30                            SoundCE:	incbin	sound\soundCE.bin
000FCA4E 00                         		even
000FCA4E                            SoundCF:	incbin	sound\soundCF.bin
000FCA86                            		even
000FCA86                            SoundD0:	incbin	sound\soundD0.bin
000FCAC0                            		even
000FCAC0                            SoundD1:	incbin	sound\MenuBIT.bin
000FCACE                            		even
000FCACE                            SoundD2:	incbin	sound\MenuAffirm.bin
000FCB36 00                         		even
000FCB36                            
000FCB36                            IdiotPCM:	incbin	sound\youare.bin
00106C07                            IdiotPCM_end:
00106C08 00                         	even
00106C08                            GM_AntiTMSS:	include _inc\GM_AntiTMSS.asm
00106C08                            ;GM_AntiTMSS:
00106C08 4EB8 1BA0                  		jsr	ClearScreen
00106C0C                            
00106C0C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00106C16 41FA 0000                  		lea	@nem(pc),a0		; load Gomer patterns
00106C1A 4EB8 1D18                  		jsr	NemDec
00106C1E 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00106C28 41F9 0006 F5E4             		lea	(Nem_CreditText).l,a0	; load alphabet
00106C2E 4EB8 1D18                  		jsr	NemDec
00106C32 43F9 00FF 0000             		lea	($FF0000).l,a1
00106C38 41FA 0000                  		lea	@eni(pc),a0		; load mappings for Gomer credits
00106C3C 7000                       		moveq	#0,d0
00106C3E 4EB8 1FF6                  		jsr	EniDec
00106C42 43F9 00FF 0000             		lea	($FF0000).l,a1
00106C48 203C 4000 0003             		move.l	#$40000003,d0
00106C4E 7227                       		moveq	#$27,d1
00106C50 741B                       		moveq	#$1B,d2
00106C52 4EB8 1CF8                  		jsr	ShowVDPGraphics
00106C56 41FA 0000                  		lea	@pal(pc),a0
00106C5A 43F8 FB80                  		lea	($FFFFFB80).w,a1
00106C5E 701F                       		moveq	#$1F,d0
00106C60                            @palset:
00106C60 22D8                       		move.l	(a0)+,(a1)+
00106C62 51C8 FFFC                  		dbf	d0,@palset
00106C66                            
00106C66 33FC 8C8B 00C0 0004        		move.w	#$8C8B,($C00004).l	; S/H mode, single res interlace
00106C6E 1E38 F600                  		move.b	($FFFFF600).w,d7	; save game mode
00106C72 11FC 0000 F600             		move.b	#0,($FFFFF600).w	; make sure it's not using title screen code
00106C78 31FC 000B FFF4             		move.w	#$B,($FFFFFFF4).w	; set frame
00106C7E 41F8 D080                  		lea	($FFFFD080).w,a0
00106C82 10BC 0001                  		move.b	#1,(a0)
00106C86 4EB9 0001 8506             		jsr	Obj8A
00106C8C 11C7 F600                  		move.b	d7,($FFFFF600).w	; restore game mode
00106C90 0068 E000 0002             		or.w	#$E000,2(a0)		; S/H brightness, palette 4
00106C96 4EB9 0000 E7B0             		jsr	BuildSprites
00106C9C                            
00106C9C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00106CA0 0000 0040                  		ori.b	#$40,d0
00106CA4 0880 0003                  		bclr	#3,d0
00106CA8 33C0 00C0 0004             		move.w	d0,($C00004).l
00106CAE 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w	; SMPS needs a frame to init
00106CB4 4EB8 33E4                  		jsr	DelayProgram
00106CB8 303C 0086                  		move.w	#$86,d0			; play title screen music
00106CBC 4EB8 1C74                  		jsr	PlaySound
00106CC0                            
00106CC0 4EB8 2654                  		jsr	Pal_FadeTo
00106CC4 31FC 00B4 F614             		move.w	#180,($FFFFF614).w
00106CCA                            @mainloop:
00106CCA 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00106CD0 4EB8 33E4                  		jsr	DelayProgram
00106CD4 4A78 F614                  		tst.w	($FFFFF614).w		; if timer isn't up, loop
00106CD8 66F0                       		bne.s	@mainloop
00106CDA 303C 0080                  		move.w	#$80,d0			; if player is holding start, exit
00106CDE C038 F604                  		and.b	($FFFFF604).w,d0
00106CE2 67E6                       		beq.s	@mainloop
00106CE4 4E75                       		rts
00106CE6                            @nem:	incbin artnem\tmss.bin
00108876                            	even
00108876                            @eni:	incbin mapeni\tmss.bin
0010897E                            	even
0010897E                            @pal:	incbin pallet\tmss.bin
001089FE                            	even
001089FE                            	even
001089FE                            
001089FE                            Minecraft:	include	minecraft\code\main.asm
001089FE                            ; Minecraft: Very Legacy Console Edition
001089FE                            ; Main file
001089FE                            
001089FE                            ;	align	$20000
001089FE                            	opt	l.
001089FE                            	include	"minecraft\code\variables.asm"
001089FE                            ; Minecraft: Very Legacy Console Edition
001089FE                            ; Variable Definitions
001089FE                            
001089FE =00000040                  MAP_HEIGHT	equ	64
001089FE =00000100                  MAP_WIDTH	equ	256
001089FE                            
001089FE                            		rsset	$FF0000
001089FE =00FF0000                  mcRAM		rs.b	0
001089FE =00FF0000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
001089FE =00FF4000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
001089FE                            
001089FE                            		rsset	$FFFF8000
001089FE =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
001089FE =FFFF8E80                  planeBuffer_End	rs.b	0
001089FE =00000E80                  PLANE_BUFF_SIZE	equ	planeBuffer_End-planeBuffer
001089FE                            
001089FE =FFFF8E80                  scrollBuffer	rs.l	256
001089FE                            
001089FE =FFFF9280                  camXPosFG	rs.w	1			; camera foreground layout x position
001089FE =FFFF9282                  camYposFG	rs.w	1			; camera foreground layout y position
001089FE =FFFF9284                  camXPosBG	rs.w	1			; camera background layout x position
001089FE =FFFF9286                  camYposBG	rs.w	1			; camera background layout y position
001089FE                            
001089FE =FFFF9288                  vblankWait	rs.w	1
001089FE =FFFF928A                  cloudFrameCnt	rs.w	1
001089FE =FFFF928C                  cloudSkew	rs.l	36
001089FE                            
001089FE                            
001089FE                            		rsset	__rs&$FFFFFF
001089FE =00FF931C                  mcRAM_End	rs.b	0
001089FE                            
001089FE                            ; VRAM Definitions
001089FE =00000020                  TILE		equ	32			; number of bytes a single tile occupies in VRAM
001089FE                            
001089FE                            		rsreset
001089FE =00000000                  vramEmptyTile	rs.b	TILE
001089FE =00000020                  vramTerrain	rs.b	255*TILE
001089FE =00002000                  vramBackground	rs.b	408*TILE
001089FE                            
001089FE =0000C000                  VRAM_PLANE_A	equ	$C000
001089FE =0000D000                  VRAM_PLANE_W	equ	$D000
001089FE =0000E000                  VRAM_PLANE_B	equ	$E000
001089FE                            
001089FE =0000F800                  VRAM_SPR_LIST	equ	$F800
001089FE =0000FC00                  VRAM_HSCROLL	equ	$FC00
001089FE =0000FC00                  VRAM_HSCROLL	equ	$FC00
001089FE                            	include	"minecraft\code\macros.asm"
001089FE                            ; =========================================================================================================================================================
001089FE                            ; MegaDrive macros
001089FE                            ; =========================================================================================================================================================
001089FE                            clrRAM		macro	starta, enda
001089FE                            		local	endaddr
001089FE                            		if narg<2
001089FE                            endaddr			EQUS	"\starta\_End"
001089FE                            		else
001089FE                            endaddr			EQUS	"\enda"
001089FE                            		endif
001089FE                            		moveq	#0,d0
001089FE                            		if ((\starta)&$8000)=0
001089FE                            			lea	\starta,a1
001089FE                            		else
001089FE                            			lea	(\starta).w,a1
001089FE                            		endif
001089FE                            		if (\starta)&1
001089FE                            			move.b	d0,(a1)+
001089FE                            		endif
001089FE                            		move.w	#(((\endaddr)-(\starta))-((\starta)&1))>>2-1,d1
001089FE                            .Clear\@:	move.l	d0,(a1)+
001089FE                            		dbf	d1,.Clear\@
001089FE                            		if (((\endaddr)-(\starta))-((\starta)&1))&2
001089FE                            			move.w	d0,(a1)+
001089FE                            		endif
001089FE                            		if (((\endaddr)-(\starta))-((\starta)&1))&1
001089FE                            			move.b	d0,(a1)+
001089FE                            		endif
001089FE                            		endm
001089FE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
001089FE                            ; Disable interrupts
001089FE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
001089FE                            ; ARGUMENTS:
001089FE                            ;	Nothing
001089FE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
001089FE                            ; RETURNS:
001089FE                            ;	Nothing
001089FE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
001089FE                            intsOff		macros
001089FE                            		ori	#$700,sr
001089FE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
001089FE                            ; Enable interrupts
001089FE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
001089FE                            ; ARGUMENTS:
001089FE                            ;	Nothing
001089FE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
001089FE                            ; RETURNS:
001089FE                            ;	Nothing
001089FE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
001089FE                            intsOn		macros
001089FE                            		andi	#$F8FF,sr
001089FE                            
001089FE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
001089FE                            ; VDP command instruction
001089FE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
001089FE                            ; ARGUMENTS:
001089FE                            ;	addr	- Address in VDP memory
001089FE                            ;	type	- Type of VDP memory
001089FE                            ;	rwd	- VDP command
001089FE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
001089FE                            ; RETURNS:
001089FE                            ;	Nothing
001089FE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
001089FE =00000021                  VRAM		EQU	%100001		; VRAM
001089FE =0000002B                  CRAM		EQU	%101011		; CRAM
001089FE =00000025                  VSRAM		EQU	%100101		; VSRAM
001089FE =0000000C                  READ		EQU	%001100		; VDP read
001089FE =00000007                  WRITE		EQU	%000111		; VDP write
001089FE =00000027                  DMA		EQU	%100111		; VDP DMA
001089FE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
001089FE                            vdpCmd		macro	ins, addr, type, rwd, end, end2
001089FE                            		if narg=5
001089FE                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)), \end
001089FE                            		elseif narg>=6
001089FE                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
001089FE                            		else
001089FE                            			\ins	((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))
001089FE                            		endif
001089FE                            		endm
001089FE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
001089FE                            ; VDP DMA from 68000 memory to VDP memory
001089FE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
001089FE                            ; ARGUMENTS:
001089FE                            ;	src	- Source address in 68000 memory
001089FE                            ;	dest	- Destination address in VDP memory
001089FE                            ;	len	- Length of data in bytes
001089FE                            ;	type	- Type of VDP memory
001089FE                            ;	a6.l	- VDP control port
001089FE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
001089FE                            ; RETURNS:
001089FE                            ;	Nothing
001089FE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
001089FE                            dma68k		macro	src, dest, len, type
001089FE                            		move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(a6)
001089FE                            		move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(a6)
001089FE                            		move.w	#$9700|(((\src)>>17)&$7F),(a6)
001089FE                            		vdpCmd	move.w, \dest, \type, DMA, >>16, (a6)
001089FE                            		vdpCmd	move.w, \dest, \type, DMA, &$FFFF, -(sp)
001089FE                            		move.w	(sp)+,(a6)
001089FE                            		endm
001089FE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
001089FE                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
001089FE                            
001089FE                            MC_Init:
001089FE 007C 0700                  		intsOff						; disable CPU interrupts
00108A02 21FC 0000 0000 FFC6        		move.l	#MC_VInt,(vBlankAdress).w
00108A0A                            
00108A0A 4DF9 00C0 0004             		lea	($C00004).l,a6				; load the address of the VDP control port into a6
00108A10 3CBC 8134                  		move.w	#$8134,(a6)				; disable display
00108A14                            
00108A14 3CBC 8230                  		move.w	#$8200+(VRAM_PLANE_A>>10),(a6)		; set plane A address
00108A18 3CBC 8334                  		move.w	#$8300+(VRAM_PLANE_W>>10),(a6)		; set plane W address
00108A1C 3CBC 8407                  		move.w	#$8400+(VRAM_PLANE_B>>13),(a6)		; set plane B address
00108A20 3CBC 857C                  		move.w	#$8500+(VRAM_SPR_LIST>>9),(a6)		; set sprite table address
00108A24                            		
00108A24 3CBC 8B03                  		move.w	#$8B03,(a6)				; EXT-INT off, VScroll by screen, HScroll by line
00108A28 3CBC 8D3F                  		move.w	#$8D00+(VRAM_HSCROLL>>10),(a6)		; set HScroll table address
00108A2C 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
00108A30 3CBC 9001                  		move.w	#$9001,(a6)				; set plane size 64x32
00108A34                            
00108A46 6100 0000                  		bsr.w	MC_ClearScreen				; clear VRAM, CRAM, and VSRAM
00108A4A                            
00108A4A                            .waitVBlank:	
00108A4A 44D6                       		move.w	(a6),ccr				; is v-blank active?
00108A4C 6AFC                       		bpl.s	.waitVBlank				; if not, wait for it to start
00108A4E                            
00108A82 6100 0000                  		bsr.w	MC_LoadBackground
00108A86 6100 0000                  		bsr.w	MC_LoadWorld
00108A8A                            
00108A8A 3CBC 8C89                  		move.w	#$8C89,(a6)				; set screen size and enable shadow/highlight mode
00108A8E 3CBC 8174                  		move.w	#$8174,(a6)				; enable display
00108A92 027C F8FF                  		intsOn						; enable CPU interrupts
00108A96                            
00108A96 4278 928A                  		clr.w	(cloudFrameCnt).w		
00108A9A                            
00108A9A                            .gameLoop:
00108A9A 50F8 9288                  		st.b	(vblankWait).w
00108A9E 6100 0000                  		bsr.w	MC_UpdateScrollBuffer
00108AA2 6100                       		bsr.s	MC_RenderBlocks
00108AA4                            
00108AA4                            .spin:
00108AA4 4A38 9288                  		tst.b	(vblankWait).w
00108AA8 67F0                       		beq.s	.gameLoop
00108AAA 60F8                       		bra.s	.spin
00108AAC                            ; ---------------------------------------------------------------------------
00108AAC                            
00108AAC                            ; ===========================================================================
00108AAC                            ; ---------------------------------------------------------------------------
00108AAC                            ; Render the Visible Portion of the World to the Screen
00108AAC                            ; ---------------------------------------------------------------------------
00108AAC                            MC_RenderBlocks:
00108AAC 3038 9280                  		move.w	(camXPosFG).w,d0	; Get the camera's x coordinate
00108AB0 E648                       		lsr.w	#3,d0			; Divide by 8 to get the index of the tile within the row
00108AB2 0240 00FF                  		andi.w	#$FF,d0			; Cap to a maximum index value of 0xFF
00108AB6                            
00108AB6 3238 9282                  		move.w	(camYPosFG).w,d1	; Get the camera's y coordinate
00108ABA EB49                       		lsl.w	#5,d1			; Make into row offset
00108ABC 0241 3F00                  		andi.w	#$3F00,d1		; ^
00108AC0                            
00108AC0 41F9 00FF 0000             		lea	(mapCollBlocks).l,a0	; Load the world map collision layer into a0
00108AC6 43F9 00FF 0000             		lea	(mapCollBlocks).l,a1	; Load the world map wall layer into a1
00108ACC 45F8 8000                  		lea	(planeBuffer).w,a2	; Load the plane A buffer into a2
00108AD0 7600                       		moveq	#0,d3			; Clear d3
00108AD2 7C1C                       		moveq	#28,d6			; Load the number of rows as the outer loop counter
00108AD4                            
00108AD4                            .renderScreen:
00108AD4 7E28                       		moveq	#40,d7			; Load the number of blocks in each row as the inner loop counter
00108AD6 3401                       		move.w	d1,d2			; Load the offset into the current row into d2
00108AD8 1400                       		move.b	d0,d2			; ^
00108ADA                            
00108ADA                            .renderRow:
00108ADA 1630 2000                  		move.b	(a0,d2.w),d3		; Get the block ID at the current main layout coordinates
00108ADE 6700                       		beq.s	.renderWall
00108AE0                            
00108AE0 383C 8000                  		move.w	#$8000,d4			; Set the priority bit
00108AE4 D643                       		add.w	d3,d3				; Turn tile ID into index
00108AE6 887B 3000                  		or.w	.renderProperties(pc,d3.w),d4	; Combine with the tile render properties
00108AEA 34C4                       		move.w	d4,(a2)+			; Load the corresponding tile to the plane A buffer
00108AEC                            		
00108AEC 5202                       		addq.b	#1,d2			; Increment the index with wrap-around within the current row
00108AEE 51CF FFEA                  		dbf	d7,.renderRow		; Loop until the entire visible row is rendered
00108AF2 6000                       		bra.s	.endRenderRow		; Branch
00108AF4                            
00108AF4                            .renderWall:
00108AF4 1631 2000                  		move.b	(a1,d2.w),d3				; Get the block ID at the current wall layout coordinates
00108AF8 D643                       		add.w	d3,d3					; Turn tile ID into index
00108AFA 34FB 3000                  		move.w	.renderProperties(pc,d3.w),(a2)+	; Load the corresponding tile to the plane A buffer
00108AFE                            
00108AFE 5202                       		addq.b	#1,d2			; Increment the index with wrap-around within the current row
00108B00 51CF FFD8                  		dbf	d7,.renderRow		; Loop until the entire visible row is rendered
00108B04                            
00108B04                            .endRenderRow:
00108B04 D4FC 002E                  		adda.w	#(64-41)*2,a2		; Skip the rest of the row in the plane buffer
00108B08 0641 0100                  		add.w	#$100,d1		; Increment to the next row
00108B0C 0C41 3F00                  		cmpi.w	#$3F00,d1		; Check to make sure we're still in bounds
00108B10 6200                       		bhi.s	.inBounds		; If so, branch
00108B12 323C 3F00                  		move.w	#$3F00,d1		; If not, render the last row for the rest of the screen (Bedrock)
00108B16                            
00108B16                            .inBounds:	
00108B16 51CE FFBC                  		dbf	d6,.renderScreen	; Loop until the entire screen is rendered
00108B1A 4E75                       		rts
00108B1C                            
00108B1C                            ; ---------------------------------------------------------------------------
00108B1C                            block_entry	macro	tileID, palLine, priority
00108B1C                            	if (narg<3)
00108B1C                            		dc.w	(palLine<<13)|tileID
00108B1C                            	else
00108B1C                            		dc.w	$8000|(palLine<<13)|tileID
00108B1C                            	endif
00108B1C                            		endm
00108B1C                            
00108B1C                            .renderProperties:
00108B5C                            
00108B7A                            ; ---------------------------------------------------------------------------
00108B7A                            
00108B7A                            ; ===========================================================================
00108B7A                            ; ---------------------------------------------------------------------------
00108B7A                            ; Update Foreground and Background Scrolling
00108B7A                            ; ---------------------------------------------------------------------------
00108B7A =00000500                  CLOUD_SCROLL_RATE	equ	1280
00108B7A                            
00108B7A                            MC_UpdateScrollBuffer:
00108B7A 41F8 8E80                  		lea	(scrollBuffer).w,a0
00108B7E 7E13                       		moveq	#20-1,d7
00108B80 3038 9280                  		move.w	(camXPosFG).w,d0			; update scrolling
00108B84 0240 0007                  		andi.w	#7,d0					; ^
00108B88 4440                       		neg.w	d0					; ^
00108B8A 4840                       		swap	d0					; ^
00108B8C 4240                       		clr.w	d0
00108B8E                            
00108B8E                            .blankBGSegment:
00108B8E 20C0                       		move.l	d0,(a0)+
00108B90 51CF FFFC                  		dbf	d7,.blankBGSegment
00108B94                            
00108B94 43F8 928C                  		lea	(cloudSkew).w,a1
00108B98 7200                       		moveq	#0,d1
00108B9A 7E23                       		moveq	#36-1,d7
00108B9C                            
00108B9C 5378 928A                  		subq.w	#1,(cloudFrameCnt).w
00108BA0 6A00                       		bpl.s	.cloudBGSegment
00108BA2                            	
00108BA2 31FC 04FF 928A             		move.w	#CLOUD_SCROLL_RATE-1,(cloudFrameCnt).w
00108BA8                            
00108BA8                            .resetClouds:
00108BA8 20C0                       		move.l	d0,(a0)+
00108BAA 4299                       		clr.l	(a1)+
00108BAC 51CF FFFA                  		dbf	d7,.resetClouds
00108BB0 6000                       		bra.s	.return
00108BB2                            
00108BB2                            .cloudBGSegment:
00108BB2 2411                       		move.l	(a1),d2
00108BB4 D4BB 1000                  		add.l	.cloudSkewFactor(pc,d1.w),d2
00108BB8 22C2                       		move.l	d2,(a1)+
00108BBA                            
00108BBA 4842                       		swap	d2
00108BBC 3002                       		move.w	d2,d0
00108BBE 4440                       		neg.w	d0
00108BC0 20C0                       		move.l	d0,(a0)+
00108BC2                            		
00108BC2 5841                       		addq.w	#4,d1
00108BC4 51CF FFEC                  		dbf	d7,.cloudBGSegment
00108BC8                            
00108BC8                            .return:
00108BC8 4E75                       		rts
00108BCA                            ; ---------------------------------------------------------------------------
00108BCA                            .cloudSkewFactor:
00108BCA =00000080                  	.i: = 128
00108BCA                            
00108BCA                            	rept	36
00108BCA                            	dc.l	(.i<<16)/CLOUD_SCROLL_RATE
00108BCA                            	.i: = .i-2
00108BCA 0000 1999 0000 1933 0000+  	endr
00108C5A                            
00108C5A                            ; ===========================================================================
00108C5A                            ; ---------------------------------------------------------------------------
00108C5A                            ; Clear The Screen
00108C5A                            ; ---------------------------------------------------------------------------
00108C5A                            MC_ClearScreen:
00108C5A 3CBC 8F01                  		move.w	#$8F01,(a6)				; set auto-incremement size to byte
00108C5E                            
00108C5E 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)				; clear the VRAM
00108C64 3CBC 9780                  		move.w	#$9780,(a6)				; ^
00108C68 2CBC 4000 0080             		move.l	#$40000080,(a6)				; ^
00108C6E 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
00108C74                            
00108C74 44D6                       .waitVRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
00108C76 69FC                       		bvs.s	.waitVRAMClr				; if so, loop until DMA is complete
00108C78                            
00108C78 2CBC 9400 937F             		move.l	#$9400937F,(a6)				; clear the CRAM
00108C7E 3CBC 9780                  		move.w	#$9780,(a6)				; ^
00108C82 2CBC C000 0080             		move.l	#$C0000080,(a6)				; ^
00108C88 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
00108C8E                            
00108C8E 44D6                       .waitCRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
00108C90 69FC                       		bvs.s	.waitCRAMClr				; if so, loop until DMA is complete
00108C92                            
00108C92 2CBC 9400 935F             		move.l	#$9400935F,(a6)				; clear the VSRAM
00108C98 3CBC 9780                  		move.w	#$9780,(a6)				; ^
00108C9C 2CBC 4000 0090             		move.l	#$40000090,(a6)				; ^
00108CA2 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
00108CA8                            
00108CA8 44D6                       .waitVSRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
00108CAA 69FC                       		bvs.s	.waitVSRAMClr				; if so, loop until DMA is complete
00108CAC                            
00108CAC 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
00108CB0 4E75                       		rts						; return
00108CB2                            ; ---------------------------------------------------------------------------
00108CB2                            
00108CB2                            ; ===========================================================================
00108CB2                            ; ---------------------------------------------------------------------------
00108CB2                            ; Load the Background
00108CB2                            ; ---------------------------------------------------------------------------
00108CB2                            MC_LoadBackground:
00108CCC                            
00108CD2 41F9 0000 0000             		lea	MC_BGMap,a0
00108CD8 3E3C 07FF                  		move.w	#(32*64)-1,d7				; Set loop count to plane size - 1
00108CDC                            
00108CDC                            .loop:
00108CDC 3018                       		move.w	(a0)+,d0
00108CDE 6700                       		beq.s	.empty
00108CE0 0640 0100                  		add.w	#(vramBackground>>5),d0
00108CE4 0040 6000                  		ori.w	#(3<<13),d0
00108CE8                            
00108CE8                            .empty:
00108CE8 3D40 FFFC                  		move.w	d0,-4(a6)
00108CEC 51CF FFEE                  		dbf	d7,.loop
00108CF0 4E75                       		rts						; return
00108CF2                            ; ---------------------------------------------------------------------------
00108CF2                            
00108CF2                            ; ===========================================================================
00108CF2                            ; ---------------------------------------------------------------------------
00108CF2                            ; Load the World
00108CF2                            ; ---------------------------------------------------------------------------
00108CF2                            MC_LoadWorld:
00108CF2 41F9 0000 0000             		lea	MC_TestMap,a0
00108CF8 43F9 00FF 4000             		lea	mapWallBlocks,a1
00108CFE 3E3C 0000                  		move.w	#((MC_TestMap_End-MC_TestMap)>>2)-1,d7
00108D02                            
00108D02                            .loadWalls:
00108D02 22D8                       		move.l	(a0)+,(a1)+
00108D04 51CF FFFC                  		dbf	d7,.loadWalls
00108D08                            
00108D08 41F9 0000 0000             		lea	MC_TestMap,a0
00108D0E 43F9 00FF 0000             		lea	mapCollBlocks,a1
00108D14 3E3C 0000                  		move.w	#((MC_TestMap_End-MC_TestMap)>>2)-1,d7
00108D18                            
00108D18                            .loadBlocks:
00108D18 22D8                       		move.l	(a0)+,(a1)+
00108D1A 51CF FFFC                  		dbf	d7,.loadBlocks
00108D1E 4E75                       		rts						; return
00108D20                            ; ---------------------------------------------------------------------------
00108D20                            
00108D20                            ; ===========================================================================
00108D20                            ; ---------------------------------------------------------------------------
00108D20                            ; VBlank Interrupt
00108D20                            ; ---------------------------------------------------------------------------
00108D20                            MC_VInt:
00108D54                            
00108D54                            ;		move.w	(camXPosFG).w,d0			; update scrolling
00108D54                            ;		andi.w	#7,d0					; ^
00108D54                            ;		neg.w	d0					; ^
00108D54                            ;	vdpCmd	move.l, VRAM_HSCROLL, VRAM, WRITE, (a6)		; ^
00108D54                            ;		move.w	d0,-4(a6)				; ^
00108D54                            
00108D54                            ;		addq.w	#1,(camXPosFG).w			
00108D54 51F8 9288                  		sf.b	(vblankWait).w
00108D58 4E73                       		rte						; return
00108D5A                            ; ---------------------------------------------------------------------------
00108D5A                            
00108D5A                            ; ---------------------------------------------------------------------------
00108D5A                            MC_Palette:
00108D5A 0E84 08AE 068E 046C 0EE0+  	dc.w	$E84, $8AE, $68E, $46C, $EE0, $CC0, $AA0, $E68, $C46, $824, $444, $222, $000, $EEE, $246, $024
00108D7A 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4E6, $2C4, $0A2, $080, $6AE, $48C, $26A, $048, $026
00108D9A 0000 0EEE 0CCC 0AAA 04CE+  	dc.w	$000, $EEE, $CCC, $AAA, $4CE, $2AC, $08A, $E6C, $C4A, $A08, $44E, $22C, $00A, $EE0, $888, $666
00108DBA 0000 0EEE 0CAA 0A88 0866+  	dc.w	$000, $EEE, $CAA, $A88, $866, $644, $422, $46A, $448, $226, $6C4, $680, $8CE, $6AC, $EA6, $E44
00108DDA                            ; ---------------------------------------------------------------------------
00108DDA                            MC_Terrain:
00108DDA                            	incbin	"minecraft\assets\bin\terrain.bin"
0010925A                            MC_Terrain_End:
0010925A                            	even
0010925A                            ; ---------------------------------------------------------------------------
0010925A                            MC_BGArt:
0010925A                            	incbin	"minecraft\assets\bin\bgArt.bin"
0010C55A                            MC_BGArt_End:
0010C55A                            	even
0010C55A                            ; ---------------------------------------------------------------------------
0010C55A                            MC_BGMap:
0010C55A                            	incbin	"minecraft\assets\bin\bgMap.bin"
0010D55A                            MC_BGMap_End:
0010D55A                            	even
0010D55A                            ; ---------------------------------------------------------------------------
0010D55A                            MC_TestMap:
0010D55A 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 00
0010D65A 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 01
0010D75A 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 02
0010D85A 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 03
0010D95A 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 04
0010DA5A 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 05
0010DB5A 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 06
0010DC5A 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 07
0010DD5A 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 09
0010DE5A 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0A
0010DF5A 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0B
0010E05A 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0C
0010E15A 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0E
0010E25A                            	
0010E25A                            ;	dcb.b	32,$01	; Row 0F
0010E25A                            ;	dcb.b	32,$02	; Row 0F
0010E25A                            ;	dcb.b	32,$03	; Row 0F
0010E25A                            ;	dcb.b	32,$04	; Row 0F
0010E25A                            ;	dcb.b	32,$05	; Row 0F
0010E25A                            ;	dcb.b	32,$06	; Row 0F
0010E25A                            ;	dcb.b	32,$07	; Row 0F
0010E25A                            ;	dcb.b	32,$08	; Row 0F
0010E25A                            
0010E25A                            ;	dcb.b	256,$03	; Row 10
0010E25A                            ;	dcb.b	256,$02	; Row 11
0010E25A                            ;	dcb.b	256,$02	; Row 12
0010E25A                            ;	dcb.b	256,$02	; Row 13
0010E25A                            ;	dcb.b	256,$01	; Row 14
0010E25A                            ;	dcb.b	256,$01	; Row 15
0010E25A                            ;	dcb.b	256,$01	; Row 16
0010E25A                            ;	dcb.b	256,$01	; Row 17
0010E25A                            ;	dcb.b	256,$01	; Row 19
0010E25A                            ;	dcb.b	256,$01	; Row 1A
0010E25A                            ;	dcb.b	256,$01	; Row 1B
0010E25A                            ;	dcb.b	256,$01	; Row 1C
0010E25A                            ;	dcb.b	256,$01	; Row 1E
0010E25A                            ;	dcb.b	256,$01	; Row 1F
0010E25A                            MC_TestMap_End:
0010E25A                            MC_TestMap_End:
0010E25A                            		
0010E25A                            		include beebush\_BEEBUSH.68k
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            ; I'm Glenn Quagmire, and this is Code Bush.
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            
0010E25A                                    include "beebush/Mega Drive.inc"
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            ; Basic system memory location equates
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            
0010E25A =00000000                  CARTRIDGE       EQU     $0                    
0010E25A =00080000                  CARTRIDGEE      EQU     $80000
0010E25A =00080000                  CARTRIDGESZ     EQU     CARTRIDGEE-CARTRIDGE
0010E25A                            
0010E25A =00FF0000                  WORKRAM         EQU     $FF0000
0010E25A =01000000                  WORKRAME        EQU     $1000000
0010E25A =00010000                  WORKRAMSZ       EQU     WORKRAME-WORKRAM
0010E25A                            
0010E25A =00A00000                  Z80RAM          EQU     $A00000
0010E25A =00A02000                  Z80RAME		EQU	$A02000
0010E25A =00002000                  Z80RAMSZ	EQU	Z80RAME-Z80RAM
0010E25A =00A11100                  Z80BUS		EQU	$A11100
0010E25A =00A11200                  Z80RES	        EQU	$A11200
0010E25A                            
0010E25A =00080000                  CARTRAM         EQU     CARTRIDGEE	
0010E25A                            	
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            ; System and VDP registers 
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            
0010E25A                            ; I/O
0010E25A                            
0010E25A                            ; Word
0010E25A =00A10000                  VERSION_	EQU	$A10000		; Hardware version
0010E25A =00A10002                  IODATA1_	EQU	$A10002		; Pad 1 Data
0010E25A =00A10004                  IODATA2_	EQU	$A10004         ; Pad 2 Data
0010E25A =00A10006                  IODATA3_	EQU	$A10006         ; EXT Data
0010E25A =00A10008                  IOCTRL1_	EQU	$A10008         ; Pad 1 Ctrl
0010E25A =00A1000A                  IOCTRL2_	EQU	$A1000A         ; Pad 2 Ctrl
0010E25A =00A1000C                  IOCTRL3_	EQU	$A1000C         ; EXT Ctrl
0010E25A                            
0010E25A                            ; Byte
0010E25A =00A10001                  VERSION         EQU     VERSION_+1
0010E25A =00A10003                  IODATA1         EQU     IODATA1_+1
0010E25A =00A10005                  IODATA2         EQU     IODATA2_+1
0010E25A =00A10007                  IODATA3         EQU     IODATA3_+1
0010E25A =00A10009                  IOCTRL1         EQU     IOCTRL1_+1
0010E25A =00A1000B                  IOCTRL2         EQU     IOCTRL2_+1
0010E25A =00A1000D                  IOCTRL3         EQU     IOCTRL3_+1
0010E25A                            
0010E25A                            ; Sound
0010E25A =00A04000                  YMADDR0		EQU	$A04000		; YM2612 address port 0
0010E25A =00A04001                  YMDATA0		EQU	$A04001		; YM2612 data port 0
0010E25A =00A04002                  YMADDR1		EQU	$A04002		; YM2612 address port 1
0010E25A =00A04003                  YMDATA1		EQU	$A04003		; YM2612 data port 1
0010E25A =00C00011                  PSGCTRL		EQU	$C00011		; PSG control port
0010E25A                            
0010E25A                            ; VDP
0010E25A =00C00000                  VDPDATA		EQU	$C00000		; VDP data port
0010E25A =00C00004                  VDPCTRL		EQU	$C00004		; VDP control port
0010E25A =00C00008                  VDPHVCNT	EQU	$C00008		; VDP H/V counter
0010E25A =00C0001C                  VDPDEBUG	EQU	$C0001C		; VDP debug register
0010E25A                            
0010E25A                            ; TMSS
0010E25A =00A14000                  TMSSSEGA	EQU	$A14000		; TMSS "SEGA" register
0010E25A =00A14100                  TMSSMODE	EQU	$A14100		; TMSS bus mode
0010E25A                            
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            ; VDP operation codes
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            
0010E25A =40000000                  VRAMWRITE	EQU	$40000000		; VRAM write
0010E25A =C0000000                  CRAMWRITE	EQU	$C0000000		; CRAM write
0010E25A =40000010                  VSRAMWRITE	EQU	$40000010		; VSRAM write
0010E25A =00000000                  VRAMREAD	EQU	$00000000		; VRAM read
0010E25A =00000020                  CRAMREAD	EQU	$00000020		; CRAM read
0010E25A =00000010                  VSRAMREAD	EQU	$00000010		; VSRAM read
0010E25A =40000080                  VRAMDMA		EQU	$40000080		; VRAM DMA
0010E25A =C0000080                  CRAMDMA		EQU	$C0000080		; CRAM DMA
0010E25A =40000090                  VSRAMDMA	EQU	$40000090		; VSRAM DMA
0010E25A =000000C0                  VRAMCOPY	EQU	$000000C0		; VRAM DMA copy
0010E25A                            
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            ; VDP status codes
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            
0010E25A =00000000                  PAL_CLOCK:          EQU 0
0010E25A =00000001                  DMA_RUNNING:        EQU 1 
0010E25A =00000002                  HBLANKING:       	EQU 2
0010E25A =00000003                  VBLANKING:       	EQU 3
0010E25A =00000004                  ODDFRAME:        	EQU 4
0010E25A =00000005                  SPRITE_COLLIDE:		EQU 5
0010E25A =00000006                  SPRITE_OVERFLOW: 	EQU 6
0010E25A =00000007                  VBLANK_PENDING:  	EQU 7
0010E25A =00000008                  FIFO_FULL:       	EQU 8
0010E25A =00000009                  FIFO_EMPTY:      	EQU 9
0010E25A                            
0010E25A                            
0010E25A                            
0010E25A                                    include "beebush/Macros.inc"
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            ; General purpose macros for defining pointer data
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            
0010E25A                            dclww	macro	long, word1, word2
0010E25A                            	dc.l 	\long
0010E25A                            	dc.w 	\word1
0010E25A                            	dc.w 	\word2
0010E25A                            	endm
0010E25A                            
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            ; Stop the Z80
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            
0010E25A                            Z80STOP macro
0010E25A                            	move.w	#$100,Z80BUS			; Request Z80 bus access
0010E25A                            .Wait\@:
0010E25A                            	btst	#0,Z80BUS			; Was the request acknowledged?
0010E25A                            	bne.s	.Wait\@				; If not, wait
0010E25A                            	endm
0010E25A                            
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            ; Stop the Z80
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            
0010E25A                            Z80START macro
0010E25A                            	move.w	#0,Z80BUS
0010E25A                            	endm
0010E25A                            
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            ; VDP command set
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            
0010E25A                            VDPCMD macro ins, addr, type, rwd, end, end2
0010E25A                            	local	cmd
0010E25A                            cmd	= (\type\\rwd\)|(((\addr)&$3FFF)<<16)|((\addr)/$4000)
0010E25A                            	if narg=5
0010E25A                            		\ins	#\#cmd,\end
0010E25A                            	elseif narg>=6
0010E25A                            		\ins	#(\#cmd)\end,\end2
0010E25A                            	else
0010E25A                            		\ins	cmd
0010E25A                            	endif
0010E25A                            	endm
0010E25A                            
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            ; Wait for DMA
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            
0010E25A                            DMAWAIT macro ctrl
0010E25A                            .Wait\@:
0010E25A                            	if narg>0
0010E25A                            		btst	#1,1(\ctrl)		; Is DMA active?
0010E25A                            	else
0010E25A                            		move.w	VDPCTRL,d0		; Is DMA active?
0010E25A                            		btst	#1,d0
0010E25A                            	endif
0010E25A                            	bne.s	.Wait\@				; If so, wait
0010E25A                            	endm
0010E25A                            
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            ; VDP DMA from 68000 memory to VDP memory
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            ; PARAMETERS:
0010E25A                            ;	src  - Source address in 68000 memory
0010E25A                            ;	dest - Destination address in VDP memory
0010E25A                            ;	len  - Length of data in bytes
0010E25A                            ;	type - Type of VDP memory
0010E25A                            ;	port - Address register for the VDP port
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            ; kys
0010E25A =FFFFF644                  vdpIntBuffer = $FFFFF644
0010E25A                            
0010E25A                            VDPDMA  macro src, dest, len, type, port
0010E25A                            	; DMA data
0010E25A                            	lea	VDPCTRL,\port
0010E25A                            	move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(\port)
0010E25A                            	move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(\port)
0010E25A                            	move.w	#$9700|(((\src)>>17)&$7F),(\port)
0010E25A                            	VDPCMD	move.w,\dest,\type,DMA,>>16,(\port)
0010E25A                            	VDPCMD	move.w,\dest,\type,DMA,&$FFFF,vdpIntBuffer.w
0010E25A                            	move.w	vdpIntBuffer.w,(\port)
0010E25A                            	endm
0010E25A                            
0010E25A                            ; -------------------------------------------------------------------------
0010E25A                            ; VDP DMA fill VRAM with byte
0010E25A                            ; -------------------------------------------------------------------------
0010E25A                            ; PARAMETERS:
0010E25A                            ;	addr - Address in VRAM
0010E25A                            ;	len  - Length of fill in bytes
0010E25A                            ;	byte - Byte to fill VRAM with
0010E25A                            ;	inc  - VDP autoincrement value
0010E25A                            ;	port - Control port address register
0010E25A                            ; -------------------------------------------------------------------------
0010E25A                            
0010E25A                            VDPFILL macro addr, len, byte, inc, port
0010E25A                            	; DMA fill
0010E25A                            	lea	VDPCTRL,\port
0010E25A                            	move.w	#$8F00+\inc,(\port)
0010E25A                            	move.l	#$93009400|((((\len)-1)&$FF00)>>8)|((((\len)-1)&$FF)<<16),(\port)
0010E25A                            	move.w	#$9780,(\port)
0010E25A                            	VDPCMD	move.l,\addr,VRAM,DMA,(\port)
0010E25A                            	move.w	#(\byte)<<8,VDPDATA
0010E25A                            	DMAWAIT	\port
0010E25A                            	endm
0010E25A                            
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            ; Macro to create ids from objects
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            
0010E25A                            OBJDEF      macro   addr, id
0010E25A                                    dc.l    \addr
0010E25A                            \id     rs.b    1
0010E25A                                    endm
0010E25A                                    endm
0010E25A                            
0010E25A                                    opt     l.
0010E25A                            
0010E25A =FFFFCC00                  hscroll         = $FFFFCC00
0010E25A =FFFFF800                  vdpSprites      = $FFFFF800
0010E25A =FFFFFB00                  palette         = $FFFFFB00
0010E25A =FFFFFE04                  frameCntr       = $FFFFFE04
0010E25A =FFFFF760                  beeSinCntr      = $FFFFF760
0010E25A =FFFFF762                  beeSin          = $FFFFF762      
0010E25A =FFFFF764                  beeCos          = $FFFFF764
0010E25A                            
0010E25A                                    rsset   $FFFFF600
0010E25A                            
0010E25A =FFFFF600                  gamemode:               rs.b 1  
0010E25A =FFFFF601                  submode                 rs.b 1
0010E25A =FFFFF602                  joypadMirr:             rs.b 1    
0010E25A =FFFFF603                  joypadPressMirr:        rs.b 1  
0010E25A =FFFFF604                  joypad:                 rs.b 1    
0010E25A =FFFFF605                  joypadPress:            rs.b 1  
0010E25A                                                    rs.b 2  
0010E25A =FFFFF608                  distance:               rs.b 4
0010E25A =FFFFF60C                  displayMode:            rs.b 2    
0010E25A                                                    rs.b 6
0010E25A =FFFFF614                  genericTimer:           rs.b 2    
0010E25A =FFFFF616                  mainAPosY:              rs.b 2    
0010E25A =FFFFF618                  mainBPosY:              rs.b 2    
0010E25A =FFFFF61A                  mainAPosX:              rs.b 2    
0010E25A =FFFFF61C                  mainBPosX:              rs.b 2    
0010E25A =FFFFF61E                  mainZPosY:              rs.b 2    
0010E25A =FFFFF620                  mainZPosX:              rs.b 2    
0010E25A =FFFFF622                  mainCPosX:              rs.b 2    
0010E25A =FFFFF624                  mainCPosY:              rs.b 2    
0010E25A =FFFFF626                  palFadeArgs:            rs.b 0
0010E25A =FFFFF626                  palFadeOff:             rs.b 1    
0010E25A =FFFFF627                  palFadeSize:            rs.b 1    
0010E25A =FFFFF628                  vblankUnk1:             rs.b 1    
0010E25A =FFFFF629                  vblankUnk2:             rs.b 1    
0010E25A =FFFFF62A                  vblankCmd:              rs.b 1   
0010E25A                                    rsset   $FFFFF700
0010E25A =FFFFF700                  cameraAPosX:            rs.b 4                  
0010E25A =FFFFF704                  cameraAPosY:            rs.b 4                  
0010E25A =FFFFF708                  cameraBPosX:            rs.b 4                  
0010E25A =FFFFF70C                  cameraBPosY:            rs.b 4                  
0010E25A =FFFFF710                  cameraCPosX:            rs.b 4                  
0010E25A =FFFFF714                  cameraCPosY:            rs.b 4                  
0010E25A =FFFFF718                  cameraZPosX:            rs.b 4                  
0010E25A =FFFFF71C                  cameraZPosY:            rs.b 4  
0010E25A                            
0010E25A =FFFFD000                  OBJECTRAM               EQU $FFFFD000 
0010E25A =00000040                  OBJSZ                   EQU 64
0010E25A                            OBJECTRAMSZ             EQU OBJECTRAME-OBJECTRAM    
0010E25A                            
0010E25A                                    rsset           $FFFFD000 
0010E25A =FFFFD000                  objSlot00:      rs.b    OBJSZ
0010E25A =FFFFD040                  objSlot01:      rs.b    OBJSZ
0010E25A =FFFFD080                  objSlot02:      rs.b    OBJSZ
0010E25A =FFFFD0C0                  objSlot03:      rs.b    OBJSZ
0010E25A =FFFFD100                  objSlot04:      rs.b    OBJSZ
0010E25A =FFFFD140                  objSlot05:      rs.b    OBJSZ
0010E25A =FFFFD180                  objSlot06:      rs.b    OBJSZ
0010E25A =FFFFD1C0                  objSlot07:      rs.b    OBJSZ  
0010E25A =FFFFD200                  objSlot08:      rs.b    OBJSZ  
0010E25A =FFFFD240                  objSlot09:      rs.b    OBJSZ  
0010E25A =FFFFD280                  objSlot0A:      rs.b    OBJSZ  
0010E25A =FFFFD2C0                  objSlot0B:      rs.b    OBJSZ  
0010E25A =FFFFD300                  objSlot0C:      rs.b    OBJSZ
0010E25A =FFFFD340                  objSlot0D:      rs.b    OBJSZ
0010E25A =FFFFD380                  objSlot0E:      rs.b    OBJSZ
0010E25A =FFFFD3C0                  objSlot0F:      rs.b    OBJSZ
0010E25A =FFFFD400                  objSlot10:      rs.b    OBJSZ  
0010E25A =FFFFD440                  objSlot11:      rs.b    OBJSZ
0010E25A =FFFFD480                  objSlot12:      rs.b    OBJSZ
0010E25A =FFFFD4C0                  objSlot13:      rs.b    OBJSZ
0010E25A =FFFFD500                  objSlot14:      rs.b    OBJSZ  
0010E25A =FFFFD540                  objSlot15:      rs.b    OBJSZ
0010E25A =FFFFD580                  objSlot16:      rs.b    OBJSZ
0010E25A =FFFFD5C0                  objSlot17:      rs.b    OBJSZ
0010E25A =FFFFD600                  objSlot18:      rs.b    OBJSZ  
0010E25A =FFFFD640                  objSlot19:      rs.b    OBJSZ
0010E25A =FFFFD680                  objSlot1A:      rs.b    OBJSZ
0010E25A =FFFFD6C0                  objSlot1B:      rs.b    OBJSZ
0010E25A =FFFFD700                  objSlot1C:      rs.b    OBJSZ
0010E25A =FFFFD740                  objSlot1D:      rs.b    OBJSZ
0010E25A =FFFFD780                  objSlot1E:      rs.b    OBJSZ
0010E25A =FFFFD7C0                  objSlot1F:      rs.b    OBJSZ
0010E25A =FFFFD800                  objsAlloc:              rs.b    OBJSZ*96
0010E25A                            OBJECTRAME:
0010E25A                            
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            ; Start of main "beebush" program
0010E25A                            ; ---------------------------------------------------------------------------
0010E25A                            
0010E25A                            GM_BEEBUSH:  
0010E25A 1038 F601                        	move.b  submode.w,d0
0010E25E 0240 001C                          andi.w  #$1C,d0
0010E262 4EBB 0000                          jsr     .Index(pc,d0.w)
0010E266 4E75                               rts
0010E268                            
0010E268                            ; ---------------------------------------------------------------------------
0010E268                            
0010E268 =00000000                  SMNO_BEEBUSH_INIT       = 0*4   ; Init 
0010E268 =00000004                  SMNO_BEEBUSH_INTRO      = 1*4   ; Intro seq.
0010E268 =00000008                  SMNO_BEEBUSH_STATIC     = 2*4   ; Static scr.
0010E268 =0000000C                  SMNO_BEEBUSH_INITMAIN   = 3*4   ; Main Init
0010E268 =00000010                  SMNO_BEEBUSH_MAIN       = 4*4   ; Main game
0010E268                            
0010E268                            .Index:      
0010E268 6000 0000                          bra.w   BEEBUSH_INIT
0010E26C 6000 0000                          bra.w   BEEBUSH_INTRO
0010E270 6000 0000                          bra.w   BEEBUSH_STATIC
0010E274 6000 0000                          bra.w   BEEBUSH_INITMAIN
0010E278 6000 0000                          bra.w   BEEBUSH_MAIN
0010E27C                            .Null:
0010E27C 4E75                               rts 
0010E27E                            
0010E27E                            ; ---------------------------------------------------------------------------
0010E27E                            ; Initialization
0010E27E                            ; ---------------------------------------------------------------------------
0010E27E                            
0010E27E                            BEEBUSH_INIT:   
0010E27E 46FC 2700                  	move    #$2700,sr  		; interrupt disable    
0010E282 103C 00E4                          move.b  #$E4,d0
0010E286 4EB8 1C7A                          jsr     PlaySound_Special ; stop music           
0010E28A 4EB8 1EB6                          jsr     ClearArtListQueue	; clr art lists, we're not using them
0010E28E 4EB8 26FE                          jsr     PalFadeOut		; fade palette out
0010E292 4EB8 1BA0                          jsr     InitScreen		
0010E296 6100 0000                          bsr.w   _beebushClrSprites
0010E29A 4DF9 00C0 0004                     lea     VDPCTRL,a6		; init regs
0010E2A0 3038 F60C                          move.w  displayMode.w,d0	; Get mode reg. 1 info
0010E2A4 0200 00BF                          andi.b  #%10111111,d0           ; Mask display enable bit
0010E2A8 33C0 00C0 0004                     move.w  d0,VDPCTRL              ; Set mode reg. 1 
0010E2AE 3CBC 8004                          move.w  #$8000+%00000100,(a6)
0010E2B2 3CBC 8230                          move.w  #$8230,(a6)
0010E2B6 3CBC 8407                          move.w  #$8407,(a6)
0010E2BA 3CBC 857C                          move.w  #$857C,(a6)
0010E2BE 3CBC 8720                          move.w  #$8720,(a6)
0010E2C2 3CBC 8B00                          move.w  #$8B00+%00000000,(a6)
0010E2C6 43F8 D000                          lea     OBJECTRAM.w,a1
0010E2CA 7000                               moveq   #0,d0
0010E2CC 323C 07FF                          move.w  #((OBJSZ*128)/4)-1,d1
0010E2D0                            
0010E2D0                            .ClearObjects:                         
0010E2D0 22C0                               move.l  d0,(a1)+
0010E2D2 51C9 FFFC                          dbf     d1,.ClearObjects
0010E2D6 43F8 F700                          lea     cameraAPosX.w,a1
0010E2DA 7000                               moveq   #0,d0
0010E2DC 323C 003F                          move.w  #($100/4)-1,d1
0010E2E0                            
0010E2E0                            .ClearCams:                            
0010E2E0 22C0                               move.l  d0,(a1)+
0010E2E2 51C9 FFFC                          dbf     d1,.ClearCams
0010E2E6 43F8 F61A                          lea     mainAPosX.w,a1
0010E2EA 7000                               moveq   #0,d0
0010E2EC 323C 0003                          move.w  #$4-1,d1
0010E2F0                            
0010E2F0                            .ClearSysCams:                            
0010E2F0 22C0                               move.l  d0,(a1)+
0010E2F2 51C9 FFFC                          dbf     d1,.ClearSysCams
0010E2F6 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
0010E2FC 4EB8 33E4                          jsr     VSync
0010E300                            
0010E300 11FC 0000 D0C0                     move.b  #BBUSH_OBJNO_BODY,objSlot03.w        
0010E306 11FC 0000 D080                     move.b  #BBUSH_OBJNO_HEAD,objSlot02.w      
0010E30C 11FC 0000 D040                     move.b  #BBUSH_OBJNO_EYES,objSlot01.w     
0010E312 11FC 0000 D000                     move.b  #BBUSH_OBJNO_MOUTH,objSlot00.w   
0010E318                            
0010E318 =FFFFD0C0                  membushBody  = objSlot03
0010E318 =FFFFD080                  membushHead  = objSlot02       
0010E318 =FFFFD040                  membushEyes  = objSlot01
0010E318 =FFFFD000                  membushMouth = objSlot00    
0010E318                                                    
0010E318 31FC 0000 F602                     move.w  #0,joypadMirr.w
0010E31E 31FC 0000 F604                     move.w  #0,joypad.w
0010E324                            
0010E324                                    ; Load art direct
0010E324                            
0010E32E 41F9 0000 0000                     lea     ArtNem_BEEBUSH,a0                       ; Get compressed bitstream
0010E334 4EB8 1D18                          jsr     NemDec
0010E338                            
0010E342 41F9 0000 0000                     lea     ArtNem_QUAGMIRE,a0                      ; Get compressed bitstream
0010E348 4EB8 1D18                          jsr     NemDec
0010E34C                            
0010E356 3E3C 01FF                          move.w  #(8*64)-1,d7
0010E35A                            
0010E35A                            .FillStatic:
0010E35A 4EB8 33F0                          jsr     CalcRandom
0010E35E 23C0 00C0 0000                     move.l  d0,VDPDATA
0010E364 D280                               add.l   d0,d1
0010E366 23C1 00C0 0000                     move.l  d1,VDPDATA
0010E36C                            
0010E36C 51CF FFEC                          dbf     d7,.FillStatic
0010E370                            
0010E370                                    ; Load screen A tilemap
0010E370                            
0010E370 43F9 0000 0000                     lea     MapScrA_BEEBUSH,a1
0010E37C 7227                               moveq   #40-1,d1                     ; Set Width
0010E37E 741B                               moveq   #28-1,d2                     ; Set Height
0010E380 4EB8 1CF8                          jsr     DrawTileMap                  ; Draw Tilemap to location
0010E384                            
0010E384                                    ; Load screen B tilemap
0010E384                            
0010E384 43F9 0000 0000                     lea     MapScrB_BEEBUSH,a1
0010E390 7227                               moveq   #40-1,d1                     ; Set Width
0010E392 741B                               moveq   #28-1,d2                     ; Set Height
0010E394 4EB8 1CF8                          jsr     DrawTileMap                  ; Draw Tilemap to location
0010E398                            
0010E398                                    ; Load palette into buffer directly
0010E398                            
0010E398 7E3F                               moveq   #64-1,d7
0010E39A 45F9 0000 0000                     lea     Pal_BEEBUSH,a2
0010E3A0 47F8 FB00                          lea     palette,a3
0010E3A4                            
0010E3A4                            .LoadToBuffer:                         
0010E3A4 26DA                               move.l  (a2)+,(a3)+
0010E3A6 51CF FFFC                          dbf     d7,.LoadToBuffer
0010E3AA                            
0010E3AA 3038 F60C                          move.w  displayMode.w,d0          
0010E3AE 0000 0040                          ori.b   #%1000000,d0
0010E3B2 33C0 00C0 0004                     move.w  d0,VDPCTRL		      ; Enable display when ready
0010E3B8 11FC 0004 F601                     move.b  #SMNO_BEEBUSH_INTRO,submode.w ; Move to next mode
0010E3BE 708D                               moveq   #$FFFFFF8D, d0                ; request SEGA PCM sample
0010E3C0 4EB9 0008 0928                     jsr     MegaPCM_PlaySample
0010E3C6 4E75                               rts
0010E3C8                            
0010E3C8                            ; ---------------------------------------------------------------------------
0010E3C8                            ; Main cutscene loop
0010E3C8                            ; ---------------------------------------------------------------------------
0010E3C8                            
0010E3C8                            BEEBUSH_INTRO:                              
0010E3C8 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
0010E3CE 4EB8 33E4                          jsr     VSync
0010E3D2 5278 FE04                          addq.w  #1,frameCntr.w
0010E3D6 6100 0000                          bsr.w   _beebushCamShake
0010E3DA 6100 0000                          bsr.w   _beebushRunObjects    
0010E3DE 4EB9 0000 E7B0                     jsr     DrawObjects
0010E3E4                            
0010E3E4 4A38 D0B0                          tst.b   membushHead+$30
0010E3E8 6700                               beq.s   .NoChg
0010E3EA 11FC 0008 F601                     move.b  #SMNO_BEEBUSH_STATIC,submode.w ; Move to next mode
0010E3F0 31FC 003C F614                     move.w  #60,genericTimer.w
0010E3F6 6100 0000                          bsr.w   _beebushClrSprites
0010E3FA                            
0010E3FA                            .NoChg: 
0010E3FA 4E75                               rts 
0010E3FC                            
0010E3FC                            ; ---------------------------------------------------------------------------
0010E3FC                            ; Static Transition sequence
0010E3FC                            ; ---------------------------------------------------------------------------
0010E3FC                            
0010E3FC                            BEEBUSH_STATIC:                              
0010E3FC 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
0010E402 4EB8 33E4                          jsr     VSync
0010E406 5278 FE04                          addq.w  #1,frameCntr.w
0010E40A 6100 0000                          bsr.w   _beebushDrawStatic
0010E40E 5378 F614                          subq.w  #1,genericTimer.w
0010E412 6600 0000                          bne.w   .Exit
0010E416 11FC 000C F601                     move.b  #SMNO_BEEBUSH_INITMAIN,submode.w ; Move to next mode
0010E41C 4E75                               rts
0010E41E                            .Exit:
0010E41E                            
0010E41E 4E75                               rts
0010E420                            
0010E420                            ; ---------------------------------------------------------------------------
0010E420                            ; Initialize main sequence
0010E420                            ; ---------------------------------------------------------------------------
0010E420                            
0010E420 =FFFFD080                  membushPlayer = objSlot02
0010E420 =FFFFD040                  membushBees   = objSlot01
0010E420 =FFFFD000                  membushHive   = objSlot00
0010E420                            
0010E420                            BEEBUSH_INITMAIN:                              
0010E420 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
0010E426 4EB8 33E4                          jsr     VSync
0010E42A 43F9 0000 0000                     lea     MapScrB_BEEBUSHMAIN,a1
0010E430 33FC 8B00 00C0 0004                move.w  #$8B00+%00000000,VDPCTRL
0010E43E 723F                               moveq   #64-1,d1                     ; Set Width
0010E440 741B                               moveq   #28-1,d2                     ; Set Height
0010E442 4EB8 1CF8                          jsr     DrawTileMap                  ; Draw Tilemap to location
0010E446 43F8 D000                          lea     OBJECTRAM.w,a1
0010E44A 7000                               moveq   #0,d0
0010E44C 323C 013F                          move.w  #((OBJSZ*20)/4)-1,d1
0010E450                            
0010E450                            .ClearObjects:                         
0010E450 22C0                               move.l  d0,(a1)+
0010E452 51C9 FFFC                          dbf     d1,.ClearObjects
0010E456 11FC 0000 D080                     move.b  #BBUSH_OBJNO_PLAYER,objSlot02.w
0010E45C 11FC 0000 D040                     move.b  #BBUSH_OBJNO_BEES,objSlot01.w
0010E462 21FC 0000 0100 F608                move.l  #$100,distance
0010E46A 11FC 0010 F601                     move.b  #SMNO_BEEBUSH_MAIN,submode.w ; Move to next mode
0010E470 708E                               moveq   #$FFFFFF8E, d0          ; request SEGA PCM sample
0010E472 4EB9 0008 0928                     jsr     MegaPCM_PlaySample
0010E478 4E75                               rts
0010E47A                            
0010E47A                            ; ---------------------------------------------------------------------------
0010E47A                            ; Main    lGod wfyuck ioff
0010E47A                            ; ---------------------------------------------------------------------------
0010E47A                            
0010E47A                            BEEBUSH_MAIN:                              
0010E47A 11FC 001C F62A                     move.b  #VBLNO_BEEBUSHSCR,vblankCmd.w
0010E480 4EB8 33E4                          jsr     VSync
0010E484 5278 FE04                          addq.w  #1,frameCntr.w
0010E488 6100 0000                          bsr.w   _beebushScroll
0010E48C 6100 0000                          bsr.w   _beebushRunObjects    
0010E490 4EB9 0000 E7B0                     jsr     DrawObjects
0010E496 4E75                               rts
0010E498                            
0010E498                            ; ---------------------------------------------------------------------------
0010E498                            
0010E498                            Pal_BEEBUSH:
0010E498                                    incbin	"beebush/Data/BEEBUSH.PAL"
0010E518                                    even
0010E518                            
0010E518                            MapScrA_BEEBUSH:
0010E518                                    incbin  "beebush/Data/BEEBUSH_SCR_A.MAP"
0010EDD8                                    even
0010EDD8                            
0010EDD8                            MapScrB_BEEBUSH:
0010EDD8                                    incbin  "beebush/Data/BEEBUSH_SCR_B.MAP"
0010F698                                    even
0010F698                            
0010F698                            MapScrB_BEEBUSHMAIN:
0010F698                                    incbin  "beebush/Data/BEEBUSH_MAIN_B.MAP"
00110498                                    even
00110498                            
00110498                            ArtNem_BEEBUSH:
00110498                                    incbin  "beebush/Data/BEEBUSH_ART.NEM"
001107FC                                    even
001107FC                            
001107FC                            ArtNem_QUAGMIRE:
001107FC                                    incbin  "beebush/Data/QUAGMIRE_ART.NEM"
001117D4                                    even
001117D4                            
001117D4                            ; ---------------------------------------------------------------------------
001117D4                            ; Do camera unsteadiness movement
001117D4                            ;
001117D4                            ; camera A = REC. and camera overlay
001117D4                            ; camera B = background (moves)
001117D4                            ; ---------------------------------------------------------------------------
001117D4                            
001117D4                            
001117D4                            
001117D4                            _beebushCamShake:
001117D4 5438 F760                          add.b   #2,beeSinCntr.w
001117D8 1038 F760                          move.b  beeSinCntr.w,d0
001117DC 4EB8 3416                          jsr     CalcSinCos
001117E0 31C0 F764                          move.w  d0,beeCos.w
001117E4 31C1 F762                          move.w  d1,beeSin.w
001117E8 EE40                               asr.w   #7,d0
001117EA EC41                               asr.w   #6,d1
001117EC                            
001117EC                                    
001117EC 31C0 F61C                          move.w  d0,mainBPosX
001117F0 4440                               neg.w   d0
001117F2 31C0 F708                          move.w  d0,cameraBPosX
001117F6                            
001117F6 31C1 F618                          move.w  d1,mainBPosY
001117FA 31C1 F70C                          move.w  d1,cameraBPosY
001117FE 4E75                               rts
00111800                            
00111800                            ; ---------------------------------------------------------------------------
00111800                            ; Main scrolling for gameplay
00111800                            ; ---------------------------------------------------------------------------
00111800                            
00111800                            
00111800                            _beebushScroll:                    
00111800 43F8 CC00                          lea     hscroll.w,a1
00111804                            
00111804 3238 F700                          move.w  cameraAPosX.w,d1
00111808 E241                               asr.w   #1,d1
0011180A 31C1 F708                          move.w  d1,cameraBPosX
0011180E                            
0011180E 3238 F710                          move.w  cameraCPosX.w,d1
00111812 D241                               add.w   d1,d1
00111814 31C1 F718                          move.w  d1,cameraZPosX.w
00111818                            
00111818 3038 F708                          move.w  cameraBPosX.w,d0
0011181C                            
0011181C                                    ; Far away BG segment
0011181C                            
0011181C 323C 0047                          move.w  #72-1,d1
00111820 E480                               asr.l   #2,d0
00111822                            .FarBG:                         
00111822 22C0                               move.l  d0,(a1)+
00111824 51C9 FFFC                          dbf     d1,.FarBG
00111828                            
00111828                                    ; Sidewalk perspective effect
00111828                            
00111828 3038 F710                          move.w  cameraCPosX.w,d0
0011182C E440                               asr.w   #2,d0
0011182E 31C0 F622                          move.w  d0,mainCPosX.w
00111832 0C40 0021                          cmp.w   #32+1,d0
00111836 6600                               bne.s   .SkipBRes
00111838 31FC 0000 F710                     move.w  #0,cameraCPosX.w
0011183E 31FC 0000 F718                     move.w  #0,cameraZPosX.w
00111844 303C 0000                          move.w  #0,d0
00111848                            .SkipBRes
00111848 4440                               neg     d0
0011184A 3438 F718                          move.w  cameraZPosX.w,d2
0011184E E442                               asr.w   #2,d2
00111850 31C2 F620                          move.w  d2,mainZPosX.w
00111854 4442                               neg     d2
00111856 9440                               sub.w   d0,d2
00111858 48C2                               ext.l   d2
0011185A E182                               asl.l   #8,d2
0011185C 85FC 0068                          divs.w  #$68,d2
00111860 48C2                               ext.l   d2
00111862 E182                               asl.l   #8,d2
00111864 3600                               move.w  d0,d3
00111866 323C 001F                          move.w  #32-1,d1
0011186A                            
0011186A                            .Road:                                                    
0011186A 3003                               move.w  d3,d0
0011186C 4440                               neg.w   d0
0011186E 22C0                               move.l  d0,(a1)+
00111870 4843                               swap    d3
00111872 D682                               add.l   d2,d3
00111874 4843                               swap    d3
00111876 51C9 FFF2                          dbf     d1,.Road
0011187A                            
0011187A                                    ; Grass (far away)
0011187A                            
0011187A 3038 F708                          move.w  cameraBPosX.w,d0
0011187E 2400                               move.l  d0,d2
00111880 E482                               asr.l   #2,d2
00111882 9082                               sub.l   d2,d0
00111884 323C 001F                          move.w  #32-1,d1
00111888                            
00111888                            .GrassFar
00111888                            
00111888 22C0                               move.l  d0,(a1)+
0011188A 51C9 FFFC                          dbf     d1,.GrassFar
0011188E                            
0011188E 3038 F708                          move.w  cameraBPosX.w,d0
00111892 323C 001F                          move.w  #32-1,d1
00111896                                    
00111896                            .GrassMid
00111896                            
00111896 22C0                               move.l  d0,(a1)+
00111898 51C9 FFFC                          dbf     d1,.GrassMid
0011189C                            
0011189C 3038 F708                          move.w  cameraBPosX.w,d0
001118A0 2400                               move.l  d0,d2
001118A2 E482                               asr.l   #2,d2
001118A4 D082                               add.l   d2,d0
001118A6 323C 001F                          move.w  #32-1,d1
001118AA                            
001118AA                            .GrassClose
001118AA                            
001118AA 22C0                               move.l  d0,(a1)+
001118AC 51C9 FFFC                          dbf     d1,.GrassClose
001118B0 31F8 F700 F61A                     move.w  cameraAPosX.w,mainAPosX
001118B6 31F8 F708 F61C                     move.w  cameraBPosX.w,mainBPosX
001118BC 4E75                               rts
001118BE                            
001118BE                            ; ---------------------------------------------------------------------------
001118BE                            ; Clear screen sprites
001118BE                            ; ---------------------------------------------------------------------------
001118BE                            
001118BE                            _beebushClrSprites:
001118BE 21FC 0000 0000 F616                move.l  #0,mainAPosY.w
001118C6 21FC 0000 0000 F61A                move.l  #0,mainAPosX.w
001118CE                            
001118CE 43F8 F800                          lea     vdpSprites.w,a1
001118D2 7000                               moveq   #0,d0
001118D4 323C 009F                          move.w  #$A0-1,d1               ; Clear all sprites
001118D8                            
001118D8                            .ClearSprites:
001118D8 22C0                               move.l  d0,(a1)+
001118DA 51C9 FFFC                          dbf     d1,.ClearSprites
001118DE 43F8 CC00                          lea     hscroll.w,a1
001118E2 7000                               moveq   #0,d0
001118E4 323C 0100                          move.w  #$100,d1
001118E8                            
001118E8                            .ClearHScroll:
001118E8 22C0                               move.l  d0,(a1)+
001118EA 51C9 FFFC                          dbf     d1,.ClearHScroll
001118EE 4E75                               rts
001118F0                            
001118F0                            ; ---------------------------------------------------------------------------
001118F0                            ; Draw tilemap static for transitory sequences
001118F0                            ; Draws 2 "random" tiles out of a memory space location (document later idk)
001118F0                            ; ---------------------------------------------------------------------------
001118F0                            
001118F0                            _beebushDrawStatic:
001118F0 4DF9 00C0 0000                     lea     VDPDATA,a6                      ; a6 = VDPDATA        
001118FC 383C 000E                          move.w  #(30/2)-1,d4                    ; d4 = width / 2
00111900 3A3C 0013                          move.w  #20-1,d5                        ; d5 = height
00111904 2C3C 0080 0000                     move.l  #$800000,d6                     ; d6 = cmd row delta 
0011190A                            
0011190A                            .LoopRow:                              
0011190A 2D43 0004                          move.l  d3,VDPCTRL-VDPDATA(a6)          ; set addr
0011190E 3E04                               move.w  d4,d7                           ; copy width to d7
00111910                            
00111910                            .LoopColumn:            
00111910 4EB8 33F0                          jsr     CalcRandom                      ; get rand
00111914 0240 003F                          andi.w  #$003F,d0                       ; mask high bits of tile no.
00111918 0040 2200                          ori.w   #$2200,d0                       ; set line 2 and id $1XX
0011191C 3C80                               move.w  d0,(a6)                         ; write 1 tile
0011191E D007                               add.b   d7,d0                           ; add whatever d7 is to d0
00111920 0240 003F                          andi.w  #$003F,d0                       ; do the same to it
00111924 0040 2200                          ori.w   #$2200,d0
00111928 3C80                               move.w  d0,(a6)                         ; write 1 tile
0011192A                            
0011192A 51CF FFE4                          dbf     d7,.LoopColumn                  ; loop for width
0011192E D686                               add.l   d6,d3                           ; move to next row
00111930 51CD FFD8                          dbf     d5,.LoopRow                     ; loop for height
00111934 4E75                               rts
00111936                            
00111936                            
00111936                            ; --------------------------------------------------------------------------- 
00111936                            
00111936                                    include 'beebush/Objects.asm'
00111936                            ; ---------------------------------------------------------------------------
00111936                            ; Bee Bush Screen objects library
00111936                            ; Depends on Stock Sonic 1 object library and sprite renderer
00111936                            ; ---------------------------------------------------------------------------
00111936                            
00111936 =00000038                  OBJ.GRAVITY    EQU     56              ; Gravity delta
00111936                            
00111936                                                rsreset
00111936 =00000000                  obj.No:             rs.b 1                  
00111936 =00000001                  obj.Render:         rs.b 1                  
00111936 =00000002                  obj.Tile:           rs.b 2                  
00111936 =00000004                  obj.Map:            rs.b 4                  
00111936 =00000008                  obj.X:              rs.b 2                  
00111936 =0000000A                  obj.YScr:           rs.b 2                  
00111936 =0000000C                  obj.Y:              rs.b 2                  
00111936 =0000000E                  obj.YSub:           rs.b 2                  
00111936 =00000010                  obj.XSpeed:         rs.b 2                  
00111936 =00000012                  obj.YSpeed:         rs.b 2                  
00111936 =00000014                  obj.Momentum:       rs.b 2                  
00111936 =00000016                  obj.YRad:           rs.b 1                  
00111936 =00000017                  obj.XRad:           rs.b 1                  
00111936 =00000018                  obj.XDraw:          rs.b 1                  
00111936 =00000019                  obj.Priority:       rs.b 1                  
00111936 =0000001A                  obj.Frame:          rs.b 1                  
00111936 =0000001B                  obj.AnimFrame:      rs.b 1                  
00111936 =0000001C                  obj.Anim:           rs.b 1                  
00111936 =0000001D                  obj.LastAnim:       rs.b 1                  
00111936 =0000001E                  obj.FrameTimer:     rs.b 1                  
00111936 =0000001F                  obj.FrameMirr:      rs.b 1                  
00111936 =00000020                  obj.Collision:      rs.b 1                  
00111936 =00000021                  obj.ColliCnt:       rs.b 1                  
00111936 =00000022                  obj.Status:         rs.b 1                  
00111936 =00000023                  obj.Respawn:        rs.b 1                  
00111936 =00000024                  obj.Action:         rs.b 1                  
00111936 =00000025                  obj.SubAction:      rs.b 1                  
00111936 =00000026                  obj.Angle:          rs.b 2                  
00111936 =00000028                  obj.Arg:            rs.b 1                   
00111936                            
00111936                            ; --------------------------------------------------------------------------- 
00111936                            
00111936 =00000000                  STAT.XDIR:       equ 0
00111936 =00000001                  STAT.YDIR:       equ 1                  
00111936 =00000003                  STAT.HOISTING:   equ 3                  
00111936 =00000005                  STAT.PUSHED:     equ 5                  
00111936 =00000007                  STAT.FLAG:       equ 7
00111936                            
00111936                            ; ---------------------------------------------------------------------------
00111936                            
00111936 =00000000                  PHYS.DIR:        equ 0                  
00111936 =00000001                  PHYS.AIRBORNE:   equ 1                  
00111936 =00000002                  PHYS.ROLLING:    equ 2                  
00111936 =00000003                  PHYS.HOISTED:    equ 3                  
00111936 =00000004                  PHYS.ROLLJUMP:   equ 4                  
00111936 =00000005                  PHYS.PUSH:       equ 5                  
00111936 =00000006                  PHYS.WATER:      equ 6
00111936 =00000007                  PHYS.FLAG:       equ 7
00111936                            
00111936                            ; ---------------------------------------------------------------------------
00111936                            
00111936 =00000000                  REND.XMIRR:      equ 0
00111936 =00000001                  REND.YMIRR:      equ 1
00111936 =00000002                  REND.CAMOFF:     equ 2
00111936 =00000003                  REND.CAMOFF2:    equ 3
00111936 =00000004                  REND.HEIGHT:     equ 4
00111936 =00000005                  REND.SPTYPE:     equ 5
00111936 =00000006                  REND.BEHIND:     equ 6                  
00111936 =00000007                  REND.ONSCREEN:   equ 7
00111936                            
00111936                            ; ---------------------------------------------------------------------------
00111936                            
00111936                            _beebushRunObjects:                             
00111936 41F8 D000                          lea     OBJECTRAM.w,a0
0011193A 7E07                               moveq   #8-1,d7
0011193C 7000                               moveq   #0,d0
0011193E                            
0011193E                            .RunObjLoop:                       
0011193E 1010                               move.b  obj.No(a0),d0
00111940 6700                               beq.s   .EmptySlot
00111942 D040                               add.w   d0,d0
00111944 D040                               add.w   d0,d0
00111946 227B 0000                          movea.l .ObjectIndex-4(pc,d0.w),a1       ; No zero offset - start at 1
0011194A 4E91                               jsr     (a1)
0011194C 7000                               moveq   #0,d0
0011194E                            
0011194E                            .EmptySlot:                            
0011194E 41E8 0040                          lea     OBJSZ(a0),a0            ; Move into next object memory space
00111952 51CF FFEA                          dbf     d7,.RunObjLoop
00111956 4E75                               rts
00111958                            
00111958                            ; ---------------------------------------------------------------------------
00111958                            ; Object Index for Bee Bush
00111958                            ; ---------------------------------------------------------------------------
00111958 =00000001                  BBUSH_OBJNO_PLAYER      = 1
00111958 =00000002                  BBUSH_OBJNO_BODY        = 2
00111958 =00000003                  BBUSH_OBJNO_HEAD        = 3
00111958 =00000004                  BBUSH_OBJNO_EYES        = 4
00111958 =00000005                  BBUSH_OBJNO_MOUTH       = 5
00111958 =00000006                  BBUSH_OBJNO_BEES        = 6
00111958                            
00111958                            
00111958                            .ObjectIndex:    
00111958 0000 0000                          dc.l BbushObj_Player
0011195C 0000 0000                          dc.l BbushObj_QuagmireBody
00111960 0000 0000                          dc.l BbushObj_QuagmireHead
00111964 0000 0000                          dc.l BbushObj_QuagmireEyes
00111968 0000 0000                          dc.l BbushObj_QuagmireMouth
0011196C 0000 0000                          dc.l BbushObj_Bees
00111970                            .Null:
00111970 4E75                               rts 
00111972                            
00111972                                    include  "beebush/Objects/OBJ_QUAGMIRE.asm"
00111972                            ; ---------------------------------------------------------------------------
00111972                            ; Body
00111972                            ; ---------------------------------------------------------------------------
00111972                            
00111972 =00000030                  bbush.Flag  = $30
00111972 =00000032                  bbush.orgX  = $32
00111972 =00000034                  bbush.orgY  = $34
00111972 =00000036                  bbush.Cntr  = $36
00111972 =00000038                  bbush.Timer = $38
00111972 =00000039                  bbush.MvChk = $39
00111972                            
00111972                            
00111972 =00000300                  QUAGTILE = $300
00111972                            
00111972                            BbushObj_QuagmireBody:                          
00111972 7000                               moveq   #0,d0
00111974 1028 0024                          move.b  obj.Action(a0),d0
00111978 323B 0000                          move.w  .Index(pc,d0.w),d1
0011197C 4EFB 1000                          jmp     .Index(pc,d1.w)
00111980                            
00111980                            ; ---------------------------------------------------------------------------
00111980                            .Index:                                
00111980 0000                               dc.w QuagmireBody_Init-.Index
00111982 0000                               dc.w QuagmireBody_Display-.Index
00111984                            ; ---------------------------------------------------------------------------
00111984                            
00111984                            QuagmireBody_Init:                         
00111984 5428 0024                          addq.b  #2,obj.Action(a0)
00111988 317C 00A8 0008                     move.w  #168,obj.X(a0)
0011198E 317C 00A0 000C                     move.w  #160,obj.Y(a0)
00111994 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
0011199C 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
001119A2 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
001119A8 117C 0007 0019                     move.b  #7,obj.Priority(a0)
001119AE 117C 0002 001A                     move.b  #2,obj.Frame(a0)
001119B4 43F8 D080                          lea     membushHead,a1
001119B8 3368 0008 0008                     move.w  obj.X(a0),obj.X(a1)
001119BE 3368 000C 000C                     move.w  obj.Y(a0),obj.Y(a1)
001119C4 0469 003C 000C                     sub.w   #60,obj.Y(a1)
001119CA 5169 0008                          sub.w   #8,obj.X(a1)    
001119CE 3369 0008 0032                     move.w  obj.X(a1),bbush.orgX(a1)
001119D4 3369 000C 0034                     move.w  obj.Y(a1),bbush.orgY(a1)
001119DA                                  
001119DA                            
001119DA                            QuagmireBody_Display:                           
001119DA 4EB9 0000 E756                     jsr     _objectDraw  
001119E0 4E75                               rts
001119E2                            
001119E2                            ; ---------------------------------------------------------------------------
001119E2                            ; Head
001119E2                            ; ---------------------------------------------------------------------------
001119E2                            
001119E2                            BbushObj_QuagmireHead:                          
001119E2 7000                               moveq   #0,d0
001119E4 1028 0024                          move.b  obj.Action(a0),d0
001119E8 323B 0000                          move.w  .Index(pc,d0.w),d1
001119EC 4EFB 1000                          jmp     .Index(pc,d1.w)
001119F0                            
001119F0                            ; ---------------------------------------------------------------------------
001119F0                            .Index:                                
001119F0 0000                               dc.w QuagmireHead_Init-.Index
001119F2 0000                               dc.w QuagmireHead_Display-.Index
001119F4 0000                               dc.w QuagmireHead_InitBck-.Index
001119F6 0000                               dc.w QuagmireHead_MoveBck-.Index
001119F8 0000                               dc.w QuagmireHead_WaitInit-.Index
001119FA 0000                               dc.w QuagmireHead_Wait-.Index
001119FC                            ; ---------------------------------------------------------------------------
001119FC                            
001119FC                            QuagmireHead_Init:                         
001119FC 5428 0024                          addq.b  #2,obj.Action(a0)
00111A00 117C 0012 0016                     move.b  #18,obj.YRad(a0)
00111A06 117C 0009 0017                     move.b  #9,obj.XRad(a0)
00111A0C 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
00111A14 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
00111A1A 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
00111A20 117C 0006 0019                     move.b  #6,obj.Priority(a0)
00111A26 117C 0001 001A                     move.b  #1,obj.Frame(a0)
00111A2C                            
00111A2C                            QuagmireHead_Display:  
00111A2C 11FC 0003 D05A                     move.b  #3,(membushEyes+obj.Frame)
00111A32 3168 0032 0008                     move.w  bbush.orgX(a0),obj.X(a0)
00111A38 3168 0034 000C                     move.w  bbush.orgY(a0),obj.Y(a0)  
00111A3E 31E8 0008 D048                     move.w  obj.X(a0),(membushEyes+obj.X)
00111A44 31E8 000C D04C                     move.w  obj.Y(a0),(membushEyes+obj.Y)
00111A4A 0478 0016 D04C                     sub.w   #22,(membushEyes+obj.Y)
00111A50 31E8 0008 D008                     move.w  obj.X(a0),(membushMouth+obj.X)
00111A56 31E8 000C D00C                     move.w  obj.Y(a0),(membushMouth+obj.Y)
00111A5C 0678 000A D00C                     add.w   #10,(membushMouth+obj.Y)                   
00111A62 4EB9 0000 E756                     jsr     _objectDraw  
00111A68 4E75                               rts
00111A6A                            
00111A6A                            QuagmireHead_InitBck:
00111A6A 117C 009A 0036                     move.b  #$9A,bbush.Cntr(a0)     ; set initial "phase" of sine
00111A70 117C 003C 0038                     move.b  #60,bbush.Timer(a0)  
00111A76 5428 0024                          addq.b  #2,obj.Action(a0)   
00111A7A 11FC 0004 D05A                     move.b  #4,(membushEyes+obj.Frame)
00111A80                                
00111A80                            QuagmireHead_MoveBck:
00111A80 1028 0036                          move.b  bbush.Cntr(a0),d0
00111A84 5028 0036                          add.b   #8,bbush.Cntr(a0)
00111A88 4EB8 3416                          jsr     CalcSinCos              ; note: d0 yshift div. needs to be 6 so adj.
00111A8C                            
00111A8C                            
00111A8C E840                               asr.w   #4,d0
00111A8E 3428 0032                          move.w  bbush.orgX(a0),d2
00111A92 9440                               sub.w   d0,d2
00111A94 3142 0008                          move.w  d2,obj.X(a0)
00111A98                            
00111A98                            
00111A98 E640                               asr.w   #3,d0        
00111A9A 3628 0034                          move.w  bbush.orgY(a0),d3
00111A9E D640                               add.w   d0,d3
00111AA0 3143 000C                          move.w  d3,obj.Y(a0) 
00111AA4 31E8 0008 D048                     move.w  obj.X(a0),(membushEyes+obj.X)
00111AAA 31E8 000C D04C                     move.w  obj.Y(a0),(membushEyes+obj.Y)
00111AB0 0478 0016 D04C                     sub.w   #22,(membushEyes+obj.Y)
00111AB6 31E8 0008 D008                     move.w  obj.X(a0),(membushMouth+obj.X)
00111ABC 31E8 000C D00C                     move.w  obj.Y(a0),(membushMouth+obj.Y)
00111AC2 0678 000A D00C                     add.w   #10,(membushMouth+obj.Y) 
00111AC8 4EB9 0000 E756                     jsr     _objectDraw 
00111ACE 5328 0038                          sub.b   #1,bbush.Timer(a0) 
00111AD2 6700                               beq.s   .Exit
00111AD4 4E75                               rts
00111AD6                            .Exit:
00111AD6 5428 0024                          addq.b  #2,obj.Action(a0)
00111ADA 4E75                               rts  
00111ADC                            
00111ADC                            QuagmireHead_WaitInit:  
00111ADC 5428 0024                          addq.b  #2,obj.Action(a0)     
00111AE0 117C 001E 0038                     move.b  #30,bbush.Timer(a0) 
00111AE6                            
00111AE6                            QuagmireHead_Wait:
00111AE6 4EB9 0000 E756                     jsr     _objectDraw                    
00111AEC 5328 0038                          sub.b   #1,bbush.Timer(a0) 
00111AF0 6600                               bne.s   .Exit
00111AF2 50E8 0030                          st      bbush.Flag(a0)
00111AF6                            
00111AF6                            .Exit:
00111AF6 4E75                               rts
00111AF8                            
00111AF8                            ; ---------------------------------------------------------------------------
00111AF8                            ; Eyes
00111AF8                            ; ---------------------------------------------------------------------------
00111AF8                            
00111AF8                            BbushObj_QuagmireEyes:                          
00111AF8 7000                               moveq   #0,d0
00111AFA 1028 0024                          move.b  obj.Action(a0),d0
00111AFE 323B 0000                          move.w  .Index(pc,d0.w),d1
00111B02 4EFB 1000                          jmp     .Index(pc,d1.w)
00111B06                            
00111B06                            ; ---------------------------------------------------------------------------
00111B06                            .Index:                                
00111B06 0000                               dc.w QuagmireEyes_Init-.Index
00111B08 0000                               dc.w QuagmireEyes_Display-.Index
00111B0A                            ; ---------------------------------------------------------------------------
00111B0A                            
00111B0A                            QuagmireEyes_Init:                         
00111B0A 5428 0024                          addq.b  #2,obj.Action(a0)
00111B0E 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
00111B16 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
00111B1C 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
00111B22 117C 0005 0019                     move.b  #5,obj.Priority(a0)
00111B28 117C 0003 001A                     move.b  #3,obj.Frame(a0)
00111B2E                            
00111B2E                            QuagmireEyes_Display:                          
00111B2E 4EB9 0000 E756                     jsr     _objectDraw  
00111B34 4E75                               rts
00111B36                            
00111B36                            ; ---------------------------------------------------------------------------
00111B36                            ; Mouth
00111B36                            ; ---------------------------------------------------------------------------
00111B36                            
00111B36                            BbushObj_QuagmireMouth:
00111B36 7000                               moveq   #0,d0
00111B38 1028 0024                          move.b  obj.Action(a0),d0
00111B3C 323B 0000                          move.w  .Index(pc,d0.w),d1
00111B40 4EFB 1000                          jmp     .Index(pc,d1.w)
00111B44                            
00111B44                            ; ---------------------------------------------------------------------------
00111B44                            .Index:                                
00111B44 0000                               dc.w QuagmireMouth_Init1-.Index
00111B46 0000                               dc.w QuagmireMouth_Speak1-.Index
00111B48 0000                               dc.w QuagmireMouth_Init2-.Index
00111B4A 0000                               dc.w QuagmireMouth_Speak2-.Index
00111B4C                            ; ---------------------------------------------------------------------------
00111B4C                            
00111B4C                            QuagmireMouth_Init1:                         
00111B4C 5428 0024                          addq.b  #2,obj.Action(a0)
00111B50 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
00111B58 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
00111B5E 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
00111B64 117C 0005 0019                     move.b  #5,obj.Priority(a0)
00111B6A 117C 0008 001A                     move.b  #8,obj.Frame(a0)
00111B70                            
00111B70                            QuagmireMouth_Speak1:   
00111B70 43F9 0000 0000                     lea     AniSpr_QuagmireMouth,a1
00111B76 6100 0000                          bsr.w   _objectAnimate
00111B7A 4EB9 0000 E756                     jsr     _objectDraw  
00111B80 4E75                               rts
00111B82                            
00111B82                            QuagmireMouth_Init2:   
00111B82 5228 001C                          addq.b  #1,obj.Anim(a0)
00111B86 5428 0024                          addq.b  #2,obj.Action(a0)
00111B8A 5438 D0A4                          add.b   #2,(membushHead+obj.Action)
00111B8E                            
00111B8E                            QuagmireMouth_Speak2:
00111B8E 43F9 0000 0000                     lea     AniSpr_QuagmireMouth,a1
00111B94 6100 0000                          bsr.w   _objectAnimate
00111B98 4EB9 0000 E756                     jsr     _objectDraw  
00111B9E 4E75                               rts        
00111BA0                            
00111BA0                            ; ---------------------------------------------------------------------------
00111BA0                            AniSpr_QuagmireMouth:
00111BA0                            .tbl
00111BA0 0000                               dc.w quagvocal_imglennqua-.tbl
00111BA2 0000                               dc.w quagvocal_beebush-.tbl
00111BA4                            
00111BA4                            quagvocal_imglennqua: 
00111BA4                            
00111BA4                                    ; playback speed delta (wait time)
00111BA4 04                                 dc.b   4
00111BA5                            
00111BA5                                    ; "...im glenn quagmire"
00111BA5 0808 0808 0806 0807 0506+          dc.b   8, 8, 8, 8, 8, 6, 8, 7, 5, 6, 8, 5, 6, 7, 8, 6, 5
00111BB6                            
00111BB6                                    ; "...and this is-"
00111BB6 0808 0808 0806 0706 0706+          dc.b   8, 8, 8, 8, 8, 6, 7, 6, 7, 6, 7
00111BC1                            
00111BC1                                    ; routine chg
00111BC1 FC                                 dc.b   $FC
00111BC2                            
00111BC2                                    even
00111BC2                            
00111BC2                            quagvocal_beebush:
00111BC2                            
00111BC2                                    ; playback speed delta (wait time)
00111BC2 04                                 dc.b   4
00111BC3                            
00111BC3                                    ; "bee bush"
00111BC3 0708 0806 0608 0805 0507+          dc.b   7, 8, 8, 6, 6, 8, 8, 5, 5, 7, 7, 8, 8, 8, 8
00111BD2                            
00111BD2                                    ; loop 8 forever
00111BD2 FE01                               dc.b   $FE, 1
00111BD4                                    even
00111BD4                            
00111BD4                            ; ---------------------------------------------------------------------------      
00111BD4                            ; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
00111BD4                            ; DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG 
00111BD4                            ; ---------------------------------------------------------------------------  
00111BD4                            
00111BD4                            BbushObj_Dbug:                          
00111BD4 4E75                               rts
00111BD6                            
00111BD6                            SprPat_Quagmire:
00111BD6                                    include "beebush/Objects/SPRPAT_QUAGMIRE.asm"
00111BD6                            Map_879c:
00111BD6 0000                       Map_879c_0: 	dc.w Map_879c_12-Map_879c
00111BD8 0000                       Map_879c_2: 	dc.w Map_879c_13-Map_879c
00111BDA 0000                       Map_879c_4: 	dc.w Map_879c_3C-Map_879c
00111BDC 0000                       Map_879c_6: 	dc.w Map_879c_56-Map_879c
00111BDE 0000                       Map_879c_8: 	dc.w Map_879c_61-Map_879c
00111BE0 0000                       Map_879c_A: 	dc.w Map_879c_6C-Map_879c
00111BE2 0000                       Map_879c_C: 	dc.w Map_879c_72-Map_879c
00111BE4 0000                       Map_879c_E: 	dc.w Map_879c_7D-Map_879c
00111BE6 0000                       Map_879c_10: 	dc.w Map_879c_88-Map_879c
00111BE8 00                         Map_879c_12: 	dc.b $0
00111BE9 08                         Map_879c_13: 	dc.b $8
00111BEA D20F 0000 E7               	dc.b $D2, $F, $0, $0, $E7
00111BEF D20F 0010 07               	dc.b $D2, $F, $0, $10, $7
00111BF4 F20F 0020 D7               	dc.b $F2, $F, $0, $20, $D7
00111BF9 F20F 0030 F7               	dc.b $F2, $F, $0, $30, $F7
00111BFE F207 0040 17               	dc.b $F2, $7, $0, $40, $17
00111C03 120E 0048 D7               	dc.b $12, $E, $0, $48, $D7
00111C08 120E 0054 F7               	dc.b $12, $E, $0, $54, $F7
00111C0D 1205 0060 17               	dc.b $12, $5, $0, $60, $17
00111C12 05                         Map_879c_3C: 	dc.b $5
00111C13 E70F 0064 E7               	dc.b $E7, $F, $0, $64, $E7
00111C18 070F 0074 E7               	dc.b $7, $F, $0, $74, $E7
00111C1D E70B 0084 07               	dc.b $E7, $B, $0, $84, $7
00111C22 070B 0090 07               	dc.b $7, $B, $0, $90, $7
00111C27 D709 00DD EF               	dc.b $D7, $9, $0, $DD, $EF
00111C2C 02                         Map_879c_56: 	dc.b $2
00111C2D F306 00A8 ED               	dc.b $F3, $6, $0, $A8, $ED
00111C32 F306 00AE 01               	dc.b $F3, $6, $0, $AE, $1
00111C37 02                         Map_879c_61: 	dc.b $2
00111C38 F306 009C ED               	dc.b $F3, $6, $0, $9C, $ED
00111C3D F306 00A2 01               	dc.b $F3, $6, $0, $A2, $1
00111C42 01                         Map_879c_6C: 	dc.b $1
00111C43 FD09 00B4 F2               	dc.b $FD, $9, $0, $B4, $F2
00111C48 02                         Map_879c_72: 	dc.b $2
00111C49 F70E 00BA F0               	dc.b $F7, $E, $0, $BA, $F0
00111C4E EF00 00C6 08               	dc.b $EF, $0, $0, $C6, $8
00111C53 02                         Map_879c_7D: 	dc.b $2
00111C54 F306 00C7 00               	dc.b $F3, $6, $0, $C7, $0
00111C59 FB06 00CD F0               	dc.b $FB, $6, $0, $CD, $F0
00111C5E 02                         Map_879c_88: 	dc.b $2
00111C5F FC0D 00D3 EC               	dc.b $FC, $D, $0, $D3, $EC
00111C64 F404 00DB 04               	dc.b $F4, $4, $0, $DB, $4
00111C6A 00                         	even
00111C6A 00                         	even
00111C6A 00                         	even
00111C6A                                    include  "beebush/Objects/OBJ_PLAYER.asm"
00111C6A                            ; ---------------------------------------------------------------------------
00111C6A                            ; Player object and dependent objects+routines
00111C6A                            ; ---------------------------------------------------------------------------    
00111C6A                            
00111C6A =00000030                  bbplay.WindowSz        equ     $30
00111C6A =00000031                  bbplay.WindowCnt       equ     $31
00111C6A =00000034                  bbplay.Xorg            equ     $34
00111C6A =00000036                  bbplay.Yorg            equ     $36
00111C6A                            
00111C6A                            ; ---------------------------------------------------------------------------
00111C6A                            ; Main player 
00111C6A                            ; ---------------------------------------------------------------------------      
00111C6A                            
00111C6A                            BbushObj_Player:                          
00111C6A 7000                               moveq   #0,d0
00111C6C 1028 0024                          move.b  obj.Action(a0),d0
00111C70 323B 0000                          move.w  .Index(pc,d0.w),d1
00111C74 4EFB 1000                          jmp     .Index(pc,d1.w)
00111C78                            ; ---------------------------------------------------------------------------
00111C78                            .Index:                                
00111C78 0000                               dc.w BbushPlayer_InitMain-.Index
00111C7A 0000                               dc.w BbushPlayer_Main-.Index
00111C7C                            ; ---------------------------------------------------------------------------
00111C7C                            
00111C7C                            BbushPlayer_InitMain:                         
00111C7C 5428 0024                          addq.b  #2,obj.Action(a0)
00111C80 117C 0012 0016                     move.b  #18,obj.YRad(a0)
00111C86 117C 0009 0017                     move.b  #9,obj.XRad(a0)
00111C8C 217C 0000 0000 0004                move.l  #SprPat_BBushPlayer,obj.Map(a0)
00111C94 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
00111C9A 117C 0000 0001                     move.b  #0,obj.Render(a0)
00111CA0 317C 014A 0008                     move.w  #160+42+128,obj.X(a0)
00111CA6 317C 00E4 000A                     move.w  #100+128,obj.YScr(a0)
00111CAC 117C 0002 0019                     move.b  #2,obj.Priority(a0)
00111CB2 117C 0003 001A                     move.b  #3,obj.Frame(a0)
00111CB8                            
00111CB8                            ; ---------------------------------------------------------------------------
00111CB8                            
00111CB8                            BbushPlayer_Main:                           
00111CB8 1838 F604                          move.b  joypad.w,d4         ;SACBRLDU
00111CBC 1A38 F605                          move.b  joypadPress.w,d5    
00111CC0 6100 0000                          bsr.w   _bbplayNormalCtrl 
00111CC4 31E8 0008 D048                     move.w  obj.X(a0),(membushBees+obj.X).w
00111CCA 31E8 000A D04A                     move.w  obj.YScr(a0),(membushBees+obj.YScr).w
00111CD0 5C78 D048                          add.w   #6,(membushBees+obj.X).w
00111CD4 0678 0009 D04A                     add.w   #9,(membushBees+obj.YScr).w
00111CDA 4EF9 0000 E756                     jmp     _objectDraw   
00111CE0                            
00111CE0                            ; ---------------------------------------------------------------------------
00111CE0                            ; Player control subroutine
00111CE0                            ; ---------------------------------------------------------------------------
00111CE0                            
00111CE0                            _bbplayNormalCtrl:                                                 
00111CE0 0804 0002                          btst    #2,d4
00111CE4 6700                               beq.s   .NoLeft
00111CE6 5278 F700                          addi.w  #1,cameraAPosX
00111CEA 5278 F710                          addi.w  #1,cameraCPosX
00111CEE 53B8 F608                          subi.l  #1,distance
00111CF2 43F9 0000 0000                     lea     AniSpr_QuagmirePlayer,a1
00111CF8 4EF9 0000 0000                     jmp    _objectAnimate
00111CFE                            .NoLeft:                                             
00111CFE 4E75                               rts
00111D00                            
00111D00                            AniSpr_QuagmirePlayer:
00111D00                            .tbl
00111D00 0000                               dc.w .qaugplaywalk-.tbl
00111D02                            
00111D02                            .qaugplaywalk: 
00111D02 08                                 dc.b   8
00111D03 0102 0304 0506 07FF                dc.b   1, 2, 3, 4, 5, 6, 7, $FF
00111D0C 00                                 even 
00111D0C                            
00111D0C                            ; ---------------------------------------------------------------------------
00111D0C                            ; The actual swarm of bees on his Giggity giggity
00111D0C                            ; ---------------------------------------------------------------------------
00111D0C                            
00111D0C                            BbushObj_Bees:                          
00111D0C 7000                               moveq   #0,d0
00111D0E 1028 0024                          move.b  obj.Action(a0),d0
00111D12 323B 0000                          move.w  .Index(pc,d0.w),d1
00111D16 4EFB 1000                          jmp     .Index(pc,d1.w)
00111D1A                            ; ---------------------------------------------------------------------------
00111D1A                            .Index:                                
00111D1A 0000                               dc.w BbushBees_InitMain-.Index
00111D1C 0000                               dc.w BbushBees_Main-.Index
00111D1E                            ; ---------------------------------------------------------------------------
00111D1E                            
00111D1E                            BbushBees_InitMain:                         
00111D1E 5428 0024                          addq.b  #2,obj.Action(a0)
00111D22 117C 0012 0016                     move.b  #18,obj.YRad(a0)
00111D28 117C 0009 0017                     move.b  #9,obj.XRad(a0)
00111D2E 217C 0000 0000 0004                move.l  #SprPat_BBushPlayer,obj.Map(a0)
00111D36 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
00111D3C 117C 0000 0001                     move.b  #0,obj.Render(a0)
00111D42 117C 0001 0019                     move.b  #1,obj.Priority(a0)
00111D48                            
00111D48                            ; ---------------------------------------------------------------------------
00111D48                            
00111D48                            BbushBees_Main:     
00111D48 43F9 0000 0000                     lea     AniSpr_QuagmireBees,a1  
00111D4E 4EB9 0000 0000                     jsr     _objectAnimate                    
00111D54 4EF9 0000 E756                     jmp     _objectDraw   
00111D5A                            
00111D5A                            AniSpr_QuagmireBees:
00111D5A                            .tbl
00111D5A 0000                               dc.w .quagbeeswarm-.tbl
00111D5C                            
00111D5C                            .quagbeeswarm: 
00111D5C 01                                 dc.b   1
00111D5D 0809 0A0B 0908 0BFF                dc.b   8, 9, $A, $B, 9, 8, $B, $FF
00111D66 00                                 even 
00111D66                            
00111D66                            SprPat_BBushPlayer:
00111D66                                    include "beebush/Objects/SPRPAT_PLAYER.asm"
00111D66                            Map_d335:
00111D66 0000                       Map_d335_0: 	dc.w Map_d335_18-Map_d335
00111D68 0000                       Map_d335_2: 	dc.w Map_d335_19-Map_d335
00111D6A 0000                       Map_d335_4: 	dc.w Map_d335_47-Map_d335
00111D6C 0000                       Map_d335_6: 	dc.w Map_d335_75-Map_d335
00111D6E 0000                       Map_d335_8: 	dc.w Map_d335_A3-Map_d335
00111D70 0000                       Map_d335_A: 	dc.w Map_d335_D1-Map_d335
00111D72 0000                       Map_d335_C: 	dc.w Map_d335_FF-Map_d335
00111D74 0000                       Map_d335_E: 	dc.w Map_d335_12D-Map_d335
00111D76 0000                       Map_d335_10: 	dc.w Map_d335_15B-Map_d335
00111D78 0000                       Map_d335_12: 	dc.w Map_d335_161-Map_d335
00111D7A 0000                       Map_d335_14: 	dc.w Map_d335_16C-Map_d335
00111D7C 0000                       Map_d335_16: 	dc.w Map_d335_17C-Map_d335
00111D7E 00                         Map_d335_18: 	dc.b $0
00111D7F 09                         Map_d335_19: 	dc.b $9
00111D80 D10F 0103 EF               	dc.b $D1, $F, $1, $3, $EF
00111D85 F309 0113 FB               	dc.b $F3, $9, $1, $13, $FB
00111D8A E40E 0119 0B               	dc.b $E4, $E, $1, $19, $B
00111D8F E40E 0919 DE               	dc.b $E4, $E, $9, $19, $DE
00111D94 EE04 007E FC               	dc.b $EE, $4, $0, $7E, $FC
00111D99 000A 0165 ED               	dc.b $0, $A, $1, $65, $ED
00111D9E 1806 016E ED               	dc.b $18, $6, $1, $6E, $ED
00111DA3 000E 0931 04               	dc.b $0, $E, $9, $31, $4
00111DA8 160A 093D 0C               	dc.b $16, $A, $9, $3D, $C
00111DAD 09                         Map_d335_47: 	dc.b $9
00111DAE D00F 00E3 F1               	dc.b $D0, $F, $0, $E3, $F1
00111DB3 F309 0113 FC               	dc.b $F3, $9, $1, $13, $FC
00111DB8 E40E 0119 0B               	dc.b $E4, $E, $1, $19, $B
00111DBD E40E 0919 DF               	dc.b $E4, $E, $9, $19, $DF
00111DC2 EE04 007E FD               	dc.b $EE, $4, $0, $7E, $FD
00111DC7 000A 0165 EE               	dc.b $0, $A, $1, $65, $EE
00111DCC 1806 016E EE               	dc.b $18, $6, $1, $6E, $EE
00111DD1 000A 0956 04               	dc.b $0, $A, $9, $56, $4
00111DD6 1806 095F 0C               	dc.b $18, $6, $9, $5F, $C
00111DDB 09                         Map_d335_75: 	dc.b $9
00111DDC D00F 00E3 F3               	dc.b $D0, $F, $0, $E3, $F3
00111DE1 F309 0113 FC               	dc.b $F3, $9, $1, $13, $FC
00111DE6 E40E 0119 0C               	dc.b $E4, $E, $1, $19, $C
00111DEB E40E 0919 DF               	dc.b $E4, $E, $9, $19, $DF
00111DF0 EE04 007E FE               	dc.b $EE, $4, $0, $7E, $FE
00111DF5 FF0A 0156 EE               	dc.b $FF, $A, $1, $56, $EE
00111DFA 1706 015F EE               	dc.b $17, $6, $1, $5F, $EE
00111DFF 000A 0956 05               	dc.b $0, $A, $9, $56, $5
00111E04 1806 095F 0D               	dc.b $18, $6, $9, $5F, $D
00111E09 09                         Map_d335_A3: 	dc.b $9
00111E0A D00F 00E3 F5               	dc.b $D0, $F, $0, $E3, $F5
00111E0F F309 0113 FD               	dc.b $F3, $9, $1, $13, $FD
00111E14 E40E 0119 0D               	dc.b $E4, $E, $1, $19, $D
00111E19 E40E 0919 E0               	dc.b $E4, $E, $9, $19, $E0
00111E1E EE04 007E FF               	dc.b $EE, $4, $0, $7E, $FF
00111E23 FF0A 0174 EF               	dc.b $FF, $A, $1, $74, $EF
00111E28 1706 017D EF               	dc.b $17, $6, $1, $7D, $EF
00111E2D 000A 0956 06               	dc.b $0, $A, $9, $56, $6
00111E32 1806 095F 0E               	dc.b $18, $6, $9, $5F, $E
00111E37 09                         Map_d335_D1: 	dc.b $9
00111E38 D10F 00F3 F7               	dc.b $D1, $F, $0, $F3, $F7
00111E3D F309 0113 FE               	dc.b $F3, $9, $1, $13, $FE
00111E42 E40E 0119 0E               	dc.b $E4, $E, $1, $19, $E
00111E47 E40E 0919 E1               	dc.b $E4, $E, $9, $19, $E1
00111E4C EE04 007E 00               	dc.b $EE, $4, $0, $7E, $0
00111E51 FF0E 0131 E8               	dc.b $FF, $E, $1, $31, $E8
00111E56 1706 013D E8               	dc.b $17, $6, $1, $3D, $E8
00111E5B 000A 0956 07               	dc.b $0, $A, $9, $56, $7
00111E60 1806 095F 0F               	dc.b $18, $6, $9, $5F, $F
00111E65 09                         Map_d335_FF: 	dc.b $9
00111E66 D10F 00E3 F3               	dc.b $D1, $F, $0, $E3, $F3
00111E6B F309 0113 FA               	dc.b $F3, $9, $1, $13, $FA
00111E70 E40E 0119 0A               	dc.b $E4, $E, $1, $19, $A
00111E75 E40E 0919 DF               	dc.b $E4, $E, $9, $19, $DF
00111E7A EE04 007E FB               	dc.b $EE, $4, $0, $7E, $FB
00111E7F 000A 0156 EC               	dc.b $0, $A, $1, $56, $EC
00111E84 1806 015F EC               	dc.b $18, $6, $1, $5F, $EC
00111E89 100B 0943 0B               	dc.b $10, $B, $9, $43, $B
00111E8E 0009 094F 04               	dc.b $0, $9, $9, $4F, $4
00111E93 09                         Map_d335_12D: 	dc.b $9
00111E94 D00F 00E3 F2               	dc.b $D0, $F, $0, $E3, $F2
00111E99 F309 0113 FA               	dc.b $F3, $9, $1, $13, $FA
00111E9E E40E 0119 0A               	dc.b $E4, $E, $1, $19, $A
00111EA3 E40E 0919 DE               	dc.b $E4, $E, $9, $19, $DE
00111EA8 EE04 007E FD               	dc.b $EE, $4, $0, $7E, $FD
00111EAD 000A 0165 EC               	dc.b $0, $A, $1, $65, $EC
00111EB2 1806 016E EC               	dc.b $18, $6, $1, $6E, $EC
00111EB7 000A 0974 04               	dc.b $0, $A, $9, $74, $4
00111EBC 1806 097D 0C               	dc.b $18, $6, $9, $7D, $C
00111EC1 01                         Map_d335_15B: 	dc.b $1
00111EC2 F10F 0183 F1               	dc.b $F1, $F, $1, $83, $F1
00111EC7 02                         Map_d335_161: 	dc.b $2
00111EC8 F20F 0193 F2               	dc.b $F2, $F, $1, $93, $F2
00111ECD 0400 0183 ED               	dc.b $4, $0, $1, $83, $ED
00111ED2 03                         Map_d335_16C: 	dc.b $3
00111ED3 F10F 1183 EF               	dc.b $F1, $F, $11, $83, $EF
00111ED8 E800 0183 EC               	dc.b $E8, $0, $1, $83, $EC
00111EDD F500 0183 10               	dc.b $F5, $0, $1, $83, $10
00111EE2 02                         Map_d335_17C: 	dc.b $2
00111EE3 EF0F 1193 F2               	dc.b $EF, $F, $11, $93, $F2
00111EE8 F200 0183 E8               	dc.b $F2, $0, $1, $83, $E8
00111EEE 00                         	even
00111EEE 00                         	even
00111EEE 00                         	even
00111EEE                            
00111EEE                            ; ---------------------------------------------------------------------------
00111EEE                            ; Animate an object based on an animation script
00111EEE                            ; !!!TODO: document script
00111EEE                            ; ---------------------------------------------------------------------------
00111EEE                            
00111EEE                            _objectAnimate:                         
00111EEE 7000                               moveq   #0,d0
00111EF0 1028 001C                          move.b  obj.Anim(a0),d0
00111EF4 B028 001D                          cmp.b   obj.LastAnim(a0),d0
00111EF8 6700                               beq.s   .DoAnim
00111EFA 1140 001D                          move.b  d0,obj.LastAnim(a0)
00111EFE 117C 0000 001B                     move.b  #0,obj.AnimFrame(a0)
00111F04 117C 0000 001E                     move.b  #0,obj.FrameTimer(a0)
00111F0A                            
00111F0A                            .DoAnim:                               
00111F0A D040                               add.w   d0,d0
00111F0C D2F1 0000                          adda.w  (a1,d0.w),a1
00111F10 5328 001E                          subq.b  #1,obj.FrameTimer(a0)
00111F14 6A00                               bpl.s   .Exit
00111F16 1151 001E                          move.b  (a1),obj.FrameTimer(a0)
00111F1A 7200                               moveq   #0,d1
00111F1C 1228 001B                          move.b  obj.AnimFrame(a0),d1
00111F20 1031 1001                          move.b  1(a1,d1.w),d0
00111F24 6B00                               bmi.s   .HandleFlags
00111F26                            
00111F26                            .Finish:                               
00111F26 1200                               move.b  d0,d1
00111F28 0200 001F                          andi.b  #$1F,d0
00111F2C 1140 001A                          move.b  d0,obj.Frame(a0)
00111F30 1028 0022                          move.b  obj.Status(a0),d0
00111F34 0200 0003                          andi.b  #3,d0
00111F38 0228 00FC 0001                     andi.b  #$FC,obj.Render(a0)
00111F3E EA09                               lsr.b   #5,d1
00111F40 B101                               eor.b   d0,d1
00111F42 8328 0001                          or.b    d1,obj.Render(a0)
00111F46 5228 001B                          addq.b  #1,obj.AnimFrame(a0)
00111F4A                            
00111F4A                            .Exit:                                 
00111F4A 4E75                               rts
00111F4C                            
00111F4C                            .HandleFlags:                          
00111F4C 5200                               addq.b  #1,d0
00111F4E 6600                               bne.s   .NotLoop
00111F50 117C 0000 001B                     move.b  #0,obj.AnimFrame(a0)
00111F56 1029 0001                          move.b  1(a1),d0
00111F5A 60CA                               bra.s   .Finish
00111F5C                            
00111F5C                            .NotLoop:                              
00111F5C 5200                               addq.b  #1,d0
00111F5E 6600                               bne.s   .NotBack
00111F60 1031 1002                          move.b  2(a1,d1.w),d0
00111F64 9128 001B                          sub.b   d0,obj.AnimFrame(a0)
00111F68 9200                               sub.b   d0,d1
00111F6A 1031 1001                          move.b  1(a1,d1.w),d0
00111F6E 60B6                               bra.s   .Finish
00111F70                            
00111F70                            .NotBack:                              
00111F70 5200                               addq.b  #1,d0
00111F72 6600                               bne.s   .NotChgAni
00111F74 1171 1002 001C                     move.b  2(a1,d1.w),obj.Anim(a0)
00111F7A                            
00111F7A                            .NotChgAni:                            
00111F7A 5200                               addq.b  #1,d0
00111F7C 6600                               bne.s   .NotRoutine
00111F7E 5428 0024                          addq.b  #2,obj.Action(a0)
00111F82                            
00111F82                            .NotRoutine:                           
00111F82 5200                               addq.b  #1,d0
00111F84 6600                               bne.s   .NotReset
00111F86 117C 0000 001B                     move.b  #0,obj.AnimFrame(a0)
00111F8C 4228 0025                          clr.b   obj.SubAction(a0)
00111F90                            
00111F90                            .NotReset:                             
00111F90 4E75                               rts
00111F90 4E75                               rts
00111F92                            
00111F92                            ; ---------------------------------------------------------------------------   
00111F92                            ; VBlank code relocation from main file (called from Jmptos)
00111F92                            ; ---------------------------------------------------------------------------
00111F92                            
00111F92                            VBLANK_BEEBUSH:                               
00111F92 4EB8 1AB6                          jsr   ReadJoypads
00111F96                            
00111F96                            ;        move.w  #$100,Z80BUS
00111F96                            ;.WaitZ80:                              
00111F96                            ;        btst    #0,Z80BUS
00111F96                            ;        bne.s   .WaitZ80
00111F96                            
00111F96 33FC 8B00 00C0 0004                move.w  #$8B00+%0000,VDPCTRL
00111FF0 23F8 F61A 00C0 0000                move.l  mainAPosX.w,VDPDATA
00111FF8                            
00111FF8                            ;        move.w  #0,Z80BUS
00111FF8 4E75                               rts
00111FFA                            
00111FFA                            ; ---------------------------------------------------------------------------
00111FFA                            
00111FFA                            VBLANK_BEEBUSHSCR:                               
00111FFA 4EB8 1AB6                          jsr  ReadJoypads
00111FFE                            
00111FFE                            ;        move.w  #$100,Z80BUS
00111FFE                            ;.WaitZ80:                              
00111FFE                            ;        btst    #0,Z80BUS
00111FFE                            ;        bne.s   .WaitZ80
00111FFE                            
00111FFE 33FC 8B03 00C0 0004                move.w  #$8B00+%0011,VDPCTRL
00112072                            
00112072                            ;        move.w  #0,Z80BUS
00112072 4E75                               rts
00112072 4E75                               rts
00112074                            ; end of 'ROM'
00112074                            EndOfRom:
00112074                            
00112074                            
