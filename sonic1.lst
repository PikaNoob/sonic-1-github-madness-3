00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 534F 4E49 4320 5448 4520+  Title_Local:	dc.b 'SONIC THE               HEDGEHOG                ' ; Domestic name
00000150 534F 4E49 4320 5448 4520+  Title_Int:	dc.b 'SONIC THE               HEDGEHOG                ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts	
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            BusError:
000003D6 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003DC 6000                       		bra.s	loc_43A
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            AddressError:
000003DE 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E4 6000                       		bra.s	loc_43A
000003E6                            ; ===========================================================================
000003E6                            
000003E6                            IllegalInstr:
000003E6 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003EC 54AF 0002                  		addq.l	#2,2(sp)
000003F0 6000                       		bra.s	loc_462
000003F2                            ; ===========================================================================
000003F2                            
000003F2                            ZeroDivide:
000003F2 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003F8 6000                       		bra.s	loc_462
000003FA                            ; ===========================================================================
000003FA                            
000003FA                            ChkInstr:
000003FA 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000400 6000                       		bra.s	loc_462
00000402                            ; ===========================================================================
00000402                            
00000402                            TrapvInstr:
00000402 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000408 6000                       		bra.s	loc_462
0000040A                            ; ===========================================================================
0000040A                            
0000040A                            PrivilegeViol:
0000040A 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000410 6000                       		bra.s	loc_462
00000412                            ; ===========================================================================
00000412                            
00000412                            Trace:
00000412 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000418 6000                       		bra.s	loc_462
0000041A                            ; ===========================================================================
0000041A                            
0000041A                            Line1010Emu:
0000041A 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000420 54AF 0002                  		addq.l	#2,2(sp)
00000424 6000                       		bra.s	loc_462
00000426                            ; ===========================================================================
00000426                            
00000426                            Line1111Emu:
00000426 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000042C 54AF 0002                  		addq.l	#2,2(sp)
00000430 6000                       		bra.s	loc_462
00000432                            ; ===========================================================================
00000432                            
00000432                            ErrorExcept:
00000432 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000438 6000                       		bra.s	loc_462
0000043A                            ; ===========================================================================
0000043A                            
0000043A                            loc_43A:
0000043A 46FC 2700                  		move	#$2700,sr
0000043E 544F                       		addq.w	#2,sp
00000440 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000444 544F                       		addq.w	#2,sp
00000446 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000044C 6100 0000                  		bsr.w	ShowErrorMsg
00000450 202F 0002                  		move.l	2(sp),d0
00000454 6100 0000                  		bsr.w	sub_5BA
00000458 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000045C 6100 0000                  		bsr.w	sub_5BA
00000460 6000                       		bra.s	loc_478
00000462                            ; ===========================================================================
00000462                            
00000462                            loc_462:
00000462 46FC 2700                  		move	#$2700,sr
00000466 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000046C 6100 0000                  		bsr.w	ShowErrorMsg
00000470 202F 0002                  		move.l	2(sp),d0
00000474 6100 0000                  		bsr.w	sub_5BA
00000478                            
00000478                            loc_478:
00000478 6100 0000                  		bsr.w	ErrorWaitForC
0000047C 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000482 46FC 2300                  		move	#$2300,sr
00000486 4E73                       		rte	
00000488                            
00000488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000488                            
00000488                            
00000488                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000488 4DF9 00C0 0000             		lea	($C00000).l,a6
0000048E 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000498 41F9 0000 0000             		lea	(Art_Text).l,a0
0000049E 323C 027F                  		move.w	#$27F,d1
000004A2                            
000004A2                            Error_LoadGfx:
000004A2 3C98                       		move.w	(a0)+,(a6)
000004A4 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004A8 7000                       		moveq	#0,d0		; clear	d0
000004AA 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004AE 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B2 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004B6 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C0 7212                       		moveq	#$12,d1		; number of characters
000004C2                            
000004C2                            Error_LoopChars:
000004C2 7000                       		moveq	#0,d0
000004C4 1018                       		move.b	(a0)+,d0
000004C6 0640 0790                  		addi.w	#$790,d0
000004CA 3C80                       		move.w	d0,(a6)
000004CC 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D0 4E75                       		rts	
000004D2                            ; End of function ShowErrorMsg
000004D2                            
000004D2                            ; ===========================================================================
000004D2 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004D6 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DA 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004DE 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E2 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004E6 0000                       		dc.w asc_5A6-ErrorText
000004E8 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FB 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000050E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000521 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000534 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000547 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055A 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000056D 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000580 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000593 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005A6 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BA 00                         		even
000005BA                            
000005BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BA                            
000005BA                            
000005BA                            sub_5BA:				; XREF: loc_43A; loc_462
000005BA 3CBC 07CA                  		move.w	#$7CA,(a6)
000005BE 7407                       		moveq	#7,d2
000005C0                            
000005C0                            loc_5C0:
000005C0 E998                       		rol.l	#4,d0
000005C2 6100                       		bsr.s	sub_5CA
000005C4 51CA FFFA                  		dbf	d2,loc_5C0
000005C8 4E75                       		rts	
000005CA                            ; End of function sub_5BA
000005CA                            
000005CA                            
000005CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CA                            
000005CA                            
000005CA                            sub_5CA:				; XREF: sub_5BA
000005CA 3200                       		move.w	d0,d1
000005CC 0241 000F                  		andi.w	#$F,d1
000005D0 0C41 000A                  		cmpi.w	#$A,d1
000005D4 6500                       		bcs.s	loc_5D8
000005D6 5E41                       		addq.w	#7,d1
000005D8                            
000005D8                            loc_5D8:
000005D8 0641 07C0                  		addi.w	#$7C0,d1
000005DC 3C81                       		move.w	d1,(a6)
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5CA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            ErrorWaitForC:				; XREF: loc_478
000005E0 6100 0000                  		bsr.w	ReadJoypads
000005E4 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EA 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005EE 4E75                       		rts	
000005F0                            ; End of function ErrorWaitForC
000005F0                            
000005F0                            ; ===========================================================================
000005F0                            
000005F0                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000B10                            		even
00000B10                            
00000B10                            ; ===========================================================================
00000B10                            
00000B10                            loc_B10:				; XREF: Vectors
00000B10 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000B14 4A38 F62A                  		tst.b	($FFFFF62A).w
00000B18 6700                       		beq.s	loc_B88
00000B1A 3039 00C0 0004             		move.w	($C00004).l,d0
00000B20 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000B2A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000B32 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B38 6700                       		beq.s	loc_B42
00000B3A 303C 0700                  		move.w	#$700,d0
00000B3E                            
00000B3E                            loc_B3E:
00000B3E 51C8 FFFE                  		dbf	d0,loc_B3E
00000B42                            
00000B42                            loc_B42:
00000B42 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000B46 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000B4C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B52 0240 003E                  		andi.w	#$3E,d0
00000B56 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000B5A 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000B5E                            
00000B5E                            loc_B5E:				; XREF: loc_B88
00000B5E 4EB9 0000 0000             		jsr	sub_71B4C
00000B64                            
00000B64                            loc_B64:				; XREF: loc_D50
00000B64 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B68 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B6C 4E73                       		rte	
00000B6E                            ; ===========================================================================
00000B6E 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000B72 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B76 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B7A 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B7E 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B82 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B86 0000                       		dc.w loc_E72-off_B6E
00000B88                            ; ===========================================================================
00000B88                            
00000B88                            loc_B88:				; XREF: loc_B10; off_B6E
00000B88 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B8E 6700                       		beq.s	loc_B9A
00000B90 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B96 6600 FFC6                  		bne.w	loc_B5E
00000B9A                            
00000B9A                            loc_B9A:
00000B9A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000BA0 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000BA4 3039 00C0 0004             		move.w	($C00004).l,d0
00000BAA 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000BB0 6700                       		beq.s	loc_BBA
00000BB2 303C 0700                  		move.w	#$700,d0
00000BB6                            
00000BB6                            loc_BB6:
00000BB6 51C8 FFFE                  		dbf	d0,loc_BB6
00000BBA                            
00000BBA                            loc_BBA:
00000BBA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000BC0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000BC8                            
00000BC8                            loc_BC8:
00000BC8 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000BD0 66F6                       		bne.s	loc_BC8
00000BD2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000BD6 6600                       		bne.s	loc_BFE
00000BD8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BDE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BE4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BEA 3ABC 977F                  		move.w	#$977F,(a5)
00000BEE 3ABC C000                  		move.w	#$C000,(a5)
00000BF2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BF8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BFC 6000                       		bra.s	loc_C22
00000BFE                            ; ===========================================================================
00000BFE                            
00000BFE                            loc_BFE:				; XREF: loc_BC8
00000BFE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C04 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C0A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000C10 3ABC 977F                  		move.w	#$977F,(a5)
00000C14 3ABC C000                  		move.w	#$C000,(a5)
00000C18 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C1E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C22                            
00000C22                            loc_C22:				; XREF: loc_BC8
00000C22 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C26 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000C2E 6000 FF2E                  		bra.w	loc_B5E
00000C32                            ; ===========================================================================
00000C32                            
00000C32                            loc_C32:				; XREF: off_B6E
00000C32 6100 0000                  		bsr.w	sub_106E
00000C36                            
00000C36                            loc_C36:				; XREF: off_B6E
00000C36 4A78 F614                  		tst.w	($FFFFF614).w
00000C3A 6700 0000                  		beq.w	locret_C42
00000C3E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C42                            
00000C42                            locret_C42:
00000C42 4E75                       		rts	
00000C44                            ; ===========================================================================
00000C44                            
00000C44                            loc_C44:				; XREF: off_B6E
00000C44 6100 0000                  		bsr.w	sub_106E
00000C48 6100 0000                  		bsr.w	sub_6886
00000C4C 6100 0000                  		bsr.w	sub_1642
00000C50 4A78 F614                  		tst.w	($FFFFF614).w
00000C54 6700 0000                  		beq.w	locret_C5C
00000C58 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C5C                            
00000C5C                            locret_C5C:
00000C5C 4E75                       		rts	
00000C5E                            ; ===========================================================================
00000C5E                            
00000C5E                            loc_C5E:				; XREF: off_B6E
00000C5E 6100 0000                  		bsr.w	sub_106E
00000C62 4E75                       		rts	
00000C64                            ; ===========================================================================
00000C64                            
00000C64                            loc_C64:				; XREF: off_B6E
00000C64 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C6A 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000C6E                            
00000C6E                            loc_C6E:				; XREF: off_B6E
00000C6E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000C76                            
00000C76                            loc_C76:
00000C76 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000C7E 66F6                       		bne.s	loc_C76		; if not, branch
00000C80 6100 0000                  		bsr.w	ReadJoypads
00000C84 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C88 6600                       		bne.s	loc_CB0
00000C8A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C90 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C96 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C9C 3ABC 977F                  		move.w	#$977F,(a5)
00000CA0 3ABC C000                  		move.w	#$C000,(a5)
00000CA4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CAA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CAE 6000                       		bra.s	loc_CD4
00000CB0                            ; ===========================================================================
00000CB0                            
00000CB0                            loc_CB0:				; XREF: loc_C76
00000CB0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CB6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CBC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000CC2 3ABC 977F                  		move.w	#$977F,(a5)
00000CC6 3ABC C000                  		move.w	#$C000,(a5)
00000CCA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CD0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CD4                            
00000CD4                            loc_CD4:				; XREF: loc_C76
00000CD4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000CD8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CDE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CE4 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CEA 3ABC 977F                  		move.w	#$977F,(a5)
00000CEE 3ABC 7C00                  		move.w	#$7C00,(a5)
00000CF2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CF8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D02 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D08 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D0E 3ABC 977F                  		move.w	#$977F,(a5)
00000D12 3ABC 7800                  		move.w	#$7800,(a5)
00000D16 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D20 4A38 F767                  		tst.b	($FFFFF767).w
00000D24 6700                       		beq.s	loc_D50
00000D26 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D2C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000D32 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000D38 3ABC 977F                  		move.w	#$977F,(a5)
00000D3C 3ABC 7000                  		move.w	#$7000,(a5)
00000D40 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D46 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D4A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000D50                            
00000D50                            loc_D50:
00000D50 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000D58 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000D5E 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000D64 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000D6A 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000D70 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000D76 6400                       		bcc.s	Demo_Time
00000D78 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D7E 588F                       		addq.l	#4,sp
00000D80 6000 FDE2                  		bra.w	loc_B64
00000D84                            
00000D84                            ; ---------------------------------------------------------------------------
00000D84                            ; Subroutine to	run a demo for an amount of time
00000D84                            ; ---------------------------------------------------------------------------
00000D84                            
00000D84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D84                            
00000D84                            
00000D84                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000D84 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D88 4EB9 0000 0000             		jsr	AniArt_Load
00000D8E 4EB9 0000 0000             		jsr	HudUpdate
00000D94 6100 0000                  		bsr.w	sub_165E
00000D98 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D9C 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000DA0 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000DA4                            
00000DA4                            Demo_TimeEnd:
00000DA4 4E75                       		rts	
00000DA6                            ; End of function Demo_Time
00000DA6                            
00000DA6                            ; ===========================================================================
00000DA6                            
00000DA6                            loc_DA6:				; XREF: off_B6E
00000DA6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000DAE                            
00000DAE                            loc_DAE:
00000DAE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000DB6 66F6                       		bne.s	loc_DAE		; if not, branch
00000DB8 6100 0000                  		bsr.w	ReadJoypads
00000DBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DC2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DC8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DCE 3ABC 977F                  		move.w	#$977F,(a5)
00000DD2 3ABC C000                  		move.w	#$C000,(a5)
00000DD6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DDC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DE6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000DEC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000DF2 3ABC 977F                  		move.w	#$977F,(a5)
00000DF6 3ABC 7800                  		move.w	#$7800,(a5)
00000DFA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E00 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E04 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E0A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E10 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E16 3ABC 977F                  		move.w	#$977F,(a5)
00000E1A 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E1E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E24 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E28 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E30 6100 0000                  		bsr.w	PalCycle_SS
00000E34 4A38 F767                  		tst.b	($FFFFF767).w
00000E38 6700                       		beq.s	loc_E64
00000E3A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E40 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000E46 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000E4C 3ABC 977F                  		move.w	#$977F,(a5)
00000E50 3ABC 7000                  		move.w	#$7000,(a5)
00000E54 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E5A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E5E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000E64                            
00000E64                            loc_E64:
00000E64 4A78 F614                  		tst.w	($FFFFF614).w
00000E68 6700 0000                  		beq.w	locret_E70
00000E6C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E70                            
00000E70                            locret_E70:
00000E70 4E75                       		rts	
00000E72                            ; ===========================================================================
00000E72                            
00000E72                            loc_E72:				; XREF: off_B6E
00000E72 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E7A                            
00000E7A                            loc_E7A:
00000E7A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E82 66F6                       		bne.s	loc_E7A		; if not, branch
00000E84 6100 0000                  		bsr.w	ReadJoypads
00000E88 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E8C 6600                       		bne.s	loc_EB4
00000E8E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E94 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E9A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EA0 3ABC 977F                  		move.w	#$977F,(a5)
00000EA4 3ABC C000                  		move.w	#$C000,(a5)
00000EA8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EAE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EB2 6000                       		bra.s	loc_ED8
00000EB4                            ; ===========================================================================
00000EB4                            
00000EB4                            loc_EB4:				; XREF: loc_E7A
00000EB4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EBA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EC0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EC6 3ABC 977F                  		move.w	#$977F,(a5)
00000ECA 3ABC C000                  		move.w	#$C000,(a5)
00000ECE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ED4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ED8                            
00000ED8                            loc_ED8:				; XREF: loc_E7A
00000ED8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EE2 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000EE8 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000EEE                            
00000EEE                            loc_EEE:
00000EEE 3ABC 977F                  		move.w	#$977F,(a5)
00000EF2 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EF6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F00 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F06 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F0C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F12 3ABC 977F                  		move.w	#$977F,(a5)
00000F16 3ABC 7800                  		move.w	#$7800,(a5)
00000F1A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F20 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F24 4A38 F767                  		tst.b	($FFFFF767).w
00000F28 6700                       		beq.s	loc_F54
00000F2A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F30 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F36 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F3C 3ABC 977F                  		move.w	#$977F,(a5)
00000F40 3ABC 7000                  		move.w	#$7000,(a5)
00000F44 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F4A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F4E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F54                            
00000F54                            loc_F54:
00000F54 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000F5C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F62 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F68 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F6E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F74 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000F78 4EB9 0000 0000             		jsr	AniArt_Load
00000F7E 4EB9 0000 0000             		jsr	HudUpdate
00000F84 6100 0000                  		bsr.w	sub_1642
00000F88 4E75                       		rts	
00000F8A                            ; ===========================================================================
00000F8A                            
00000F8A                            loc_F8A:				; XREF: off_B6E
00000F8A 6100 0000                  		bsr.w	sub_106E
00000F8E 5238 F628                  		addq.b	#1,($FFFFF628).w
00000F92 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000F98 4E75                       		rts	
00000F9A                            ; ===========================================================================
00000F9A                            
00000F9A                            loc_F9A:				; XREF: off_B6E
00000F9A 6100 0000                  		bsr.w	sub_106E
00000F9E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000FA2 6000 0000                  		bra.w	sub_1642
00000FA6                            ; ===========================================================================
00000FA6                            
00000FA6                            loc_FA6:				; XREF: off_B6E
00000FA6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FAE                            
00000FAE                            loc_FAE:
00000FAE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FB6 66F6                       		bne.s	loc_FAE		; if not, branch
00000FB8 6100 0000                  		bsr.w	ReadJoypads
00000FBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FC2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FC8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FCE 3ABC 977F                  		move.w	#$977F,(a5)
00000FD2 3ABC C000                  		move.w	#$C000,(a5)
00000FD6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FDC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000FEC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000FF2 3ABC 977F                  		move.w	#$977F,(a5)
00000FF6 3ABC 7800                  		move.w	#$7800,(a5)
00000FFA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001000 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001004 4BF9 00C0 0004             		lea	($C00004).l,a5
0000100A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001010 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001016 3ABC 977F                  		move.w	#$977F,(a5)
0000101A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000101E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001024 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001028 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001030 4A38 F767                  		tst.b	($FFFFF767).w
00001034 6700                       		beq.s	loc_1060
00001036 4BF9 00C0 0004             		lea	($C00004).l,a5
0000103C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001042 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001048 3ABC 977F                  		move.w	#$977F,(a5)
0000104C 3ABC 7000                  		move.w	#$7000,(a5)
00001050 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001056 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000105A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001060                            
00001060                            loc_1060:
00001060 4A78 F614                  		tst.w	($FFFFF614).w
00001064 6700 0000                  		beq.w	locret_106C
00001068 5378 F614                  		subq.w	#1,($FFFFF614).w
0000106C                            
0000106C                            locret_106C:
0000106C 4E75                       		rts	
0000106E                            
0000106E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000106E                            
0000106E                            
0000106E                            sub_106E:				; XREF: loc_C32; et al
0000106E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001076                            
00001076                            loc_1076:
00001076 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000107E 66F6                       		bne.s	loc_1076	; if not, branch
00001080 6100 0000                  		bsr.w	ReadJoypads
00001084 4A38 F64E                  		tst.b	($FFFFF64E).w
00001088 6600                       		bne.s	loc_10B0
0000108A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001090 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001096 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000109C 3ABC 977F                  		move.w	#$977F,(a5)
000010A0 3ABC C000                  		move.w	#$C000,(a5)
000010A4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010AA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010AE 6000                       		bra.s	loc_10D4
000010B0                            ; ===========================================================================
000010B0                            
000010B0                            loc_10B0:				; XREF: sub_106E
000010B0 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010C2 3ABC 977F                  		move.w	#$977F,(a5)
000010C6 3ABC C000                  		move.w	#$C000,(a5)
000010CA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010D0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D4                            
000010D4                            loc_10D4:				; XREF: sub_106E
000010D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DA 2ABC 9401 9340             		move.l	#$94019340,(a5)
000010E0 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000010E6 3ABC 977F                  		move.w	#$977F,(a5)
000010EA 3ABC 7800                  		move.w	#$7800,(a5)
000010EE 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000010F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000010FE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001104 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000110A 3ABC 977F                  		move.w	#$977F,(a5)
0000110E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001112 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001118 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000111C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001124 4E75                       		rts	
00001126                            ; End of function sub_106E
00001126                            
00001126                            ; ---------------------------------------------------------------------------
00001126                            ; Subroutine to	move pallets from the RAM to CRAM
00001126                            ; ---------------------------------------------------------------------------
00001126                            
00001126                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001126                            
00001126                            
00001126                            PalToCRAM:
00001126 46FC 2700                  		move	#$2700,sr
0000112A 4A78 F644                  		tst.w	($FFFFF644).w
0000112E 6700                       		beq.s	locret_119C
00001130 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001136 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000113A 43F9 00C0 0000             		lea	($C00000).l,a1
00001140 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001144 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000114C 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000114E 2298                       		move.l	(a0)+,(a1)
00001150 2298                       		move.l	(a0)+,(a1)
00001152 2298                       		move.l	(a0)+,(a1)
00001154 2298                       		move.l	(a0)+,(a1)
00001156 2298                       		move.l	(a0)+,(a1)
00001158 2298                       		move.l	(a0)+,(a1)
0000115A 2298                       		move.l	(a0)+,(a1)
0000115C 2298                       		move.l	(a0)+,(a1)
0000115E 2298                       		move.l	(a0)+,(a1)
00001160 2298                       		move.l	(a0)+,(a1)
00001162 2298                       		move.l	(a0)+,(a1)
00001164 2298                       		move.l	(a0)+,(a1)
00001166 2298                       		move.l	(a0)+,(a1)
00001168 2298                       		move.l	(a0)+,(a1)
0000116A 2298                       		move.l	(a0)+,(a1)
0000116C 2298                       		move.l	(a0)+,(a1)
0000116E 2298                       		move.l	(a0)+,(a1)
00001170 2298                       		move.l	(a0)+,(a1)
00001172 2298                       		move.l	(a0)+,(a1)
00001174 2298                       		move.l	(a0)+,(a1)
00001176 2298                       		move.l	(a0)+,(a1)
00001178 2298                       		move.l	(a0)+,(a1)
0000117A 2298                       		move.l	(a0)+,(a1)
0000117C 2298                       		move.l	(a0)+,(a1)
0000117E 2298                       		move.l	(a0)+,(a1)
00001180 2298                       		move.l	(a0)+,(a1)
00001182 2298                       		move.l	(a0)+,(a1)
00001184 2298                       		move.l	(a0)+,(a1)
00001186 2298                       		move.l	(a0)+,(a1)
00001188 2298                       		move.l	(a0)+,(a1)
0000118A 2298                       		move.l	(a0)+,(a1)
0000118C 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00001192 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001196 4A38 F64F                  		tst.b	($FFFFF64F).w
0000119A 6600                       		bne.s	loc_119E
0000119C                            
0000119C                            locret_119C:
0000119C 4E73                       		rte	
0000119E                            ; ===========================================================================
0000119E                            
0000119E                            loc_119E:				; XREF: PalToCRAM
0000119E 4238 F64F                  		clr.b	($FFFFF64F).w
000011A2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000011A6 6100 FBDC                  		bsr.w	Demo_Time
000011AA 4EB9 0000 0000             		jsr	sub_71B4C
000011B0 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000011B4 4E73                       		rte	
000011B6                            ; End of function PalToCRAM
000011B6                            
000011B6                            ; ---------------------------------------------------------------------------
000011B6                            ; Subroutine to	initialise joypads
000011B6                            ; ---------------------------------------------------------------------------
000011B6                            
000011B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011B6                            
000011B6                            
000011B6                            JoypadInit:				; XREF: GameClrRAM
000011B6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011BE                            
000011BE                            Joypad_WaitZ80:
000011BE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000011C6 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000011C8 7040                       		moveq	#$40,d0
000011CA 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000011D0 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000011D6 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000011DC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000011E4 4E75                       		rts	
000011E6                            ; End of function JoypadInit
000011E6                            
000011E6                            ; ---------------------------------------------------------------------------
000011E6                            ; Subroutine to	read joypad input, and send it to the RAM
000011E6                            ; ---------------------------------------------------------------------------
000011E6                            
000011E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011E6                            
000011E6                            
000011E6                            ReadJoypads:
000011E6 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000011EA 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000011F0 6100                       		bsr.s	Joypad_Read	; do the first joypad
000011F2 5449                       		addq.w	#2,a1		; do the second	joypad
000011F4                            
000011F4                            Joypad_Read:
000011F4 12BC 0000                  		move.b	#0,(a1)
000011F8 4E71                       		nop	
000011FA 4E71                       		nop	
000011FC 1011                       		move.b	(a1),d0
000011FE E508                       		lsl.b	#2,d0
00001200 0200 00C0                  		andi.b	#$C0,d0
00001204 12BC 0040                  		move.b	#$40,(a1)
00001208 4E71                       		nop	
0000120A 4E71                       		nop	
0000120C 1211                       		move.b	(a1),d1
0000120E 0201 003F                  		andi.b	#$3F,d1
00001212 8001                       		or.b	d1,d0
00001214 4600                       		not.b	d0
00001216 1210                       		move.b	(a0),d1
00001218 B101                       		eor.b	d0,d1
0000121A 10C0                       		move.b	d0,(a0)+
0000121C C200                       		and.b	d0,d1
0000121E 10C1                       		move.b	d1,(a0)+
00001220 4E75                       		rts	
00001222                            ; End of function ReadJoypads
00001222                            
00001222                            
00001222                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001222                            
00001222                            
00001222                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001222 41F9 00C0 0004             		lea	($C00004).l,a0
00001228 43F9 00C0 0000             		lea	($C00000).l,a1
0000122E 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001234 7E12                       		moveq	#$12,d7
00001236                            
00001236                            VDP_Loop:
00001236 309A                       		move.w	(a2)+,(a0)
00001238 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000123C                            
0000123C 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001242 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001246 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000124C 7000                       		moveq	#0,d0
0000124E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001258 3E3C 003F                  		move.w	#$3F,d7
0000125C                            
0000125C                            VDP_ClrCRAM:
0000125C 3280                       		move.w	d0,(a1)
0000125E 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001262                            
00001262 42B8 F616                  		clr.l	($FFFFF616).w
00001266 42B8 F61A                  		clr.l	($FFFFF61A).w
0000126A 2F01                       		move.l	d1,-(sp)
0000126C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001272 3ABC 8F01                  		move.w	#$8F01,(a5)
00001276 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000127C 3ABC 9780                  		move.w	#$9780,(a5)
00001280 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001286 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000128E                            
0000128E                            loc_128E:
0000128E 3215                       		move.w	(a5),d1
00001290 0801 0001                  		btst	#1,d1
00001294 66F8                       		bne.s	loc_128E
00001296                            
00001296 3ABC 8F02                  		move.w	#$8F02,(a5)
0000129A 221F                       		move.l	(sp)+,d1
0000129C 4E75                       		rts	
0000129E                            ; End of function VDPSetupGame
0000129E                            
0000129E                            ; ===========================================================================
0000129E 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000012A6 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000012AE 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000012B6 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000012BE 9001 9100 9200             		dc.w $9001, $9100, $9200
000012C4                            
000012C4                            ; ---------------------------------------------------------------------------
000012C4                            ; Subroutine to	clear the screen
000012C4                            ; ---------------------------------------------------------------------------
000012C4                            
000012C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012C4                            
000012C4                            
000012C4                            ClearScreen:
000012C4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012CA 3ABC 8F01                  		move.w	#$8F01,(a5)
000012CE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000012D4 3ABC 9780                  		move.w	#$9780,(a5)
000012D8 2ABC 4000 0083             		move.l	#$40000083,(a5)
000012DE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000012E6                            
000012E6                            loc_12E6:
000012E6 3215                       		move.w	(a5),d1
000012E8 0801 0001                  		btst	#1,d1
000012EC 66F8                       		bne.s	loc_12E6
000012EE                            
000012EE 3ABC 8F02                  		move.w	#$8F02,(a5)
000012F2 4BF9 00C0 0004             		lea	($C00004).l,a5
000012F8 3ABC 8F01                  		move.w	#$8F01,(a5)
000012FC 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001302 3ABC 9780                  		move.w	#$9780,(a5)
00001306 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000130C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001314                            
00001314                            loc_1314:
00001314 3215                       		move.w	(a5),d1
00001316 0801 0001                  		btst	#1,d1
0000131A 66F8                       		bne.s	loc_1314
0000131C                            
0000131C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001320 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001328 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001330 43F8 F800                  		lea	($FFFFF800).w,a1
00001334 7000                       		moveq	#0,d0
00001336 323C 00A0                  		move.w	#$A0,d1
0000133A                            
0000133A                            loc_133A:
0000133A 22C0                       		move.l	d0,(a1)+
0000133C 51C9 FFFC                  		dbf	d1,loc_133A
00001340                            
00001340 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001344 7000                       		moveq	#0,d0
00001346 323C 0100                  		move.w	#$100,d1
0000134A                            
0000134A                            loc_134A:
0000134A 22C0                       		move.l	d0,(a1)+
0000134C 51C9 FFFC                  		dbf	d1,loc_134A
00001350 4E75                       		rts	
00001352                            ; End of function ClearScreen
00001352                            
00001352                            ; ---------------------------------------------------------------------------
00001352                            ; Subroutine to	load the sound driver
00001352                            ; ---------------------------------------------------------------------------
00001352                            
00001352                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001352                            
00001352                            
00001352                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001352 4E71                       		nop	
00001354 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000135C 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001364 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000136A 43F9 00A0 0000             		lea	($A00000).l,a1
00001370 6100 0000                  		bsr.w	KosDec		; decompress
00001374 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000137C 4E71                       		nop	
0000137E 4E71                       		nop	
00001380 4E71                       		nop	
00001382 4E71                       		nop	
00001384 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000138C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001394 4E75                       		rts	
00001396                            ; End of function SoundDriverLoad
00001396                            
00001396                            ; ---------------------------------------------------------------------------
00001396                            ; Subroutine to	play a sound or	music track
00001396                            ; ---------------------------------------------------------------------------
00001396                            
00001396                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001396                            
00001396                            
00001396                            PlaySound:
00001396 11C0 F00A                  		move.b	d0,($FFFFF00A).w
0000139A 4E75                       		rts	
0000139C                            ; End of function PlaySound
0000139C                            
0000139C                            ; ---------------------------------------------------------------------------
0000139C                            ; Subroutine to	play a special sound/music (E0-E4)
0000139C                            ;
0000139C                            ; E0 - Fade out
0000139C                            ; E1 - Sega
0000139C                            ; E2 - Speed up
0000139C                            ; E3 - Normal speed
0000139C                            ; E4 - Stop
0000139C                            ; ---------------------------------------------------------------------------
0000139C                            
0000139C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000139C                            
0000139C                            
0000139C                            PlaySound_Special:
0000139C 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000013A0 4E75                       		rts	
000013A2                            ; End of function PlaySound_Special
000013A2                            
000013A2                            ; ===========================================================================
000013A2                            ; ---------------------------------------------------------------------------
000013A2                            ; Unused sound/music subroutine
000013A2                            ; ---------------------------------------------------------------------------
000013A2                            
000013A2                            PlaySound_Unk:
000013A2 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000013A6 4E75                       		rts	
000013A8                            
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            ; Subroutine to	pause the game
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            
000013A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013A8                            
000013A8                            
000013A8                            PauseGame:				; XREF: Level_MainLoop; et al
000013A8 4E71                       		nop	
000013AA 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000013AE 6700                       		beq.s	Unpause		; if not, branch
000013B0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000013B4 6600                       		bne.s	loc_13BE	; if yes, branch
000013B6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000013BC 6700                       		beq.s	Pause_DoNothing	; if not, branch
000013BE                            
000013BE                            loc_13BE:
000013BE 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000013C4 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000013CA                            
000013CA                            loc_13CA:
000013CA 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000013D0 6100 0000                  		bsr.w	DelayProgram
000013D4 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000013D8 6700                       		beq.s	Pause_ChkStart	; if not, branch
000013DA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000013E0 6700                       		beq.s	Pause_ChkBC	; if not, branch
000013E2 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
000013E8 4E71                       		nop	
000013EA 6000                       		bra.s	loc_1404
000013EC                            ; ===========================================================================
000013EC                            
000013EC                            Pause_ChkBC:				; XREF: PauseGame
000013EC 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
000013F2 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000013F4 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000013FA 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000013FC                            
000013FC                            Pause_ChkStart:				; XREF: PauseGame
000013FC 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001402 67C6                       		beq.s	loc_13CA	; if not, branch
00001404                            
00001404                            loc_1404:				; XREF: PauseGame
00001404 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000140A                            
0000140A                            Unpause:				; XREF: PauseGame
0000140A 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001410                            
00001410                            Pause_DoNothing:			; XREF: PauseGame
00001410 4E75                       		rts	
00001412                            ; ===========================================================================
00001412                            
00001412                            Pause_SlowMo:				; XREF: PauseGame
00001412 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001418 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000141E 4E75                       		rts	
00001420                            ; End of function PauseGame
00001420                            
00001420                            ; ---------------------------------------------------------------------------
00001420                            ; Subroutine to	display	patterns via the VDP
00001420                            ; ---------------------------------------------------------------------------
00001420                            
00001420                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001420                            
00001420                            
00001420                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001420 4DF9 00C0 0000             		lea	($C00000).l,a6
00001426 283C 0080 0000             		move.l	#$800000,d4
0000142C                            
0000142C                            loc_142C:
0000142C 2D40 0004                  		move.l	d0,4(a6)
00001430 3601                       		move.w	d1,d3
00001432                            
00001432                            loc_1432:
00001432 3C99                       		move.w	(a1)+,(a6)
00001434 51CB FFFC                  		dbf	d3,loc_1432
00001438 D084                       		add.l	d4,d0
0000143A 51CA FFF0                  		dbf	d2,loc_142C
0000143E 4E75                       		rts	
00001440                            ; End of function ShowVDPGraphics
00001440                            
00001440                            ; ---------------------------------------------------------------------------
00001440                            ; Nemesis decompression	algorithm
00001440                            ; ---------------------------------------------------------------------------
00001440                            
00001440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001440                            
00001440                            
00001440                            NemDec:
00001440 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001444 47F9 0000 0000             		lea	(loc_1502).l,a3
0000144A 49F9 00C0 0000             		lea	($C00000).l,a4
00001450 6000                       		bra.s	loc_145C
00001452                            ; ===========================================================================
00001452 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001456 47F9 0000 0000             		lea	(loc_1518).l,a3
0000145C                            
0000145C                            loc_145C:				; XREF: NemDec
0000145C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001460 3418                       		move.w	(a0)+,d2
00001462 E34A                       		lsl.w	#1,d2
00001464 6400                       		bcc.s	loc_146A
00001466 D6FC 000A                  		adda.w	#$A,a3
0000146A                            
0000146A                            loc_146A:
0000146A E54A                       		lsl.w	#2,d2
0000146C 3A42                       		movea.w	d2,a5
0000146E 7608                       		moveq	#8,d3
00001470 7400                       		moveq	#0,d2
00001472 7800                       		moveq	#0,d4
00001474 6100 0000                  		bsr.w	NemDec4
00001478 1A18                       		move.b	(a0)+,d5
0000147A E145                       		asl.w	#8,d5
0000147C 1A18                       		move.b	(a0)+,d5
0000147E 3C3C 0010                  		move.w	#$10,d6
00001482 6100                       		bsr.s	NemDec2
00001484 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
00001488 4E75                       		rts	
0000148A                            ; End of function NemDec
0000148A                            
0000148A                            
0000148A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000148A                            
0000148A                            
0000148A                            NemDec2:				; XREF: NemDec
0000148A 3E06                       		move.w	d6,d7
0000148C 5147                       		subq.w	#8,d7
0000148E 3205                       		move.w	d5,d1
00001490 EE69                       		lsr.w	d7,d1
00001492 0C01 00FC                  		cmpi.b	#-4,d1
00001496 6400                       		bcc.s	loc_14D6
00001498 0241 00FF                  		andi.w	#$FF,d1
0000149C D241                       		add.w	d1,d1
0000149E 1031 1000                  		move.b	(a1,d1.w),d0
000014A2 4880                       		ext.w	d0
000014A4 9C40                       		sub.w	d0,d6
000014A6 0C46 0009                  		cmpi.w	#9,d6
000014AA 6400                       		bcc.s	loc_14B2
000014AC 5046                       		addq.w	#8,d6
000014AE E145                       		asl.w	#8,d5
000014B0 1A18                       		move.b	(a0)+,d5
000014B2                            
000014B2                            loc_14B2:
000014B2 1231 1001                  		move.b	1(a1,d1.w),d1
000014B6 3001                       		move.w	d1,d0
000014B8 0241 000F                  		andi.w	#$F,d1
000014BC 0240 00F0                  		andi.w	#$F0,d0
000014C0                            
000014C0                            loc_14C0:				; XREF: NemDec3
000014C0 E848                       		lsr.w	#4,d0
000014C2                            
000014C2                            loc_14C2:				; XREF: NemDec3
000014C2 E98C                       		lsl.l	#4,d4
000014C4 8801                       		or.b	d1,d4
000014C6 5343                       		subq.w	#1,d3
000014C8 6600                       		bne.s	loc_14D0
000014CA 4ED3                       		jmp	(a3)
000014CC                            ; End of function NemDec2
000014CC                            
000014CC                            
000014CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014CC                            
000014CC                            
000014CC                            NemDec3:				; XREF: loc_1502
000014CC 7800                       		moveq	#0,d4
000014CE 7608                       		moveq	#8,d3
000014D0                            
000014D0                            loc_14D0:				; XREF: NemDec2
000014D0 51C8 FFF0                  		dbf	d0,loc_14C2
000014D4 60B4                       		bra.s	NemDec2
000014D6                            ; ===========================================================================
000014D6                            
000014D6                            loc_14D6:				; XREF: NemDec2
000014D6 5D46                       		subq.w	#6,d6
000014D8 0C46 0009                  		cmpi.w	#9,d6
000014DC 6400                       		bcc.s	loc_14E4
000014DE 5046                       		addq.w	#8,d6
000014E0 E145                       		asl.w	#8,d5
000014E2 1A18                       		move.b	(a0)+,d5
000014E4                            
000014E4                            loc_14E4:				; XREF: NemDec3
000014E4 5F46                       		subq.w	#7,d6
000014E6 3205                       		move.w	d5,d1
000014E8 EC69                       		lsr.w	d6,d1
000014EA 3001                       		move.w	d1,d0
000014EC 0241 000F                  		andi.w	#$F,d1
000014F0 0240 0070                  		andi.w	#$70,d0
000014F4 0C46 0009                  		cmpi.w	#9,d6
000014F8 64C6                       		bcc.s	loc_14C0
000014FA 5046                       		addq.w	#8,d6
000014FC E145                       		asl.w	#8,d5
000014FE 1A18                       		move.b	(a0)+,d5
00001500 60BE                       		bra.s	loc_14C0
00001502                            ; End of function NemDec3
00001502                            
00001502                            ; ===========================================================================
00001502                            
00001502                            loc_1502:				; XREF: NemDec
00001502 2884                       		move.l	d4,(a4)
00001504 534D                       		subq.w	#1,a5
00001506 380D                       		move.w	a5,d4
00001508 66C2                       		bne.s	NemDec3
0000150A 4E75                       		rts	
0000150C                            ; ===========================================================================
0000150C B982                       		eor.l	d4,d2
0000150E 2882                       		move.l	d2,(a4)
00001510 534D                       		subq.w	#1,a5
00001512 380D                       		move.w	a5,d4
00001514 66B6                       		bne.s	NemDec3
00001516 4E75                       		rts	
00001518                            ; ===========================================================================
00001518                            
00001518                            loc_1518:				; XREF: NemDec
00001518 28C4                       		move.l	d4,(a4)+
0000151A 534D                       		subq.w	#1,a5
0000151C 380D                       		move.w	a5,d4
0000151E 66AC                       		bne.s	NemDec3
00001520 4E75                       		rts	
00001522                            ; ===========================================================================
00001522 B982                       		eor.l	d4,d2
00001524 28C2                       		move.l	d2,(a4)+
00001526 534D                       		subq.w	#1,a5
00001528 380D                       		move.w	a5,d4
0000152A 66A0                       		bne.s	NemDec3
0000152C 4E75                       		rts	
0000152E                            
0000152E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000152E                            
0000152E                            
0000152E                            NemDec4:				; XREF: NemDec
0000152E 1018                       		move.b	(a0)+,d0
00001530                            
00001530                            loc_1530:
00001530 0C00 00FF                  		cmpi.b	#-1,d0
00001534 6600                       		bne.s	loc_1538
00001536 4E75                       		rts	
00001538                            ; ===========================================================================
00001538                            
00001538                            loc_1538:				; XREF: NemDec4
00001538 3E00                       		move.w	d0,d7
0000153A                            
0000153A                            loc_153A:
0000153A 1018                       		move.b	(a0)+,d0
0000153C 0C00 0080                  		cmpi.b	#$80,d0
00001540 64EE                       		bcc.s	loc_1530
00001542 1200                       		move.b	d0,d1
00001544 0247 000F                  		andi.w	#$F,d7
00001548 0241 0070                  		andi.w	#$70,d1
0000154C 8E41                       		or.w	d1,d7
0000154E 0240 000F                  		andi.w	#$F,d0
00001552 1200                       		move.b	d0,d1
00001554 E149                       		lsl.w	#8,d1
00001556 8E41                       		or.w	d1,d7
00001558 7208                       		moveq	#8,d1
0000155A 9240                       		sub.w	d0,d1
0000155C 6600                       		bne.s	loc_1568
0000155E 1018                       		move.b	(a0)+,d0
00001560 D040                       		add.w	d0,d0
00001562 3387 0000                  		move.w	d7,(a1,d0.w)
00001566 60D2                       		bra.s	loc_153A
00001568                            ; ===========================================================================
00001568                            
00001568                            loc_1568:				; XREF: NemDec4
00001568 1018                       		move.b	(a0)+,d0
0000156A E368                       		lsl.w	d1,d0
0000156C D040                       		add.w	d0,d0
0000156E 7A01                       		moveq	#1,d5
00001570 E36D                       		lsl.w	d1,d5
00001572 5345                       		subq.w	#1,d5
00001574                            
00001574                            loc_1574:
00001574 3387 0000                  		move.w	d7,(a1,d0.w)
00001578 5440                       		addq.w	#2,d0
0000157A 51CD FFF8                  		dbf	d5,loc_1574
0000157E 60BA                       		bra.s	loc_153A
00001580                            ; End of function NemDec4
00001580                            
00001580                            ; ---------------------------------------------------------------------------
00001580                            ; Subroutine to	load pattern load cues
00001580                            ; ---------------------------------------------------------------------------
00001580                            
00001580                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001580                            
00001580                            
00001580                            LoadPLC:
00001580 48E7 0060                  		movem.l	a1-a2,-(sp)
00001584 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000158A D040                       		add.w	d0,d0
0000158C 3031 0000                  		move.w	(a1,d0.w),d0
00001590 43F1 0000                  		lea	(a1,d0.w),a1
00001594 45F8 F680                  		lea	($FFFFF680).w,a2
00001598                            
00001598                            loc_1598:
00001598 4A92                       		tst.l	(a2)
0000159A 6700                       		beq.s	loc_15A0
0000159C 5C4A                       		addq.w	#6,a2
0000159E 60F8                       		bra.s	loc_1598
000015A0                            ; ===========================================================================
000015A0                            
000015A0                            loc_15A0:				; XREF: LoadPLC
000015A0 3019                       		move.w	(a1)+,d0
000015A2 6B00                       		bmi.s	loc_15AC
000015A4                            
000015A4                            loc_15A4:
000015A4 24D9                       		move.l	(a1)+,(a2)+
000015A6 34D9                       		move.w	(a1)+,(a2)+
000015A8 51C8 FFFA                  		dbf	d0,loc_15A4
000015AC                            
000015AC                            loc_15AC:
000015AC 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015B0 4E75                       		rts	
000015B2                            ; End of function LoadPLC
000015B2                            
000015B2                            
000015B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B2                            
000015B2                            
000015B2                            LoadPLC2:
000015B2 48E7 0060                  		movem.l	a1-a2,-(sp)
000015B6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000015BC D040                       		add.w	d0,d0
000015BE 3031 0000                  		move.w	(a1,d0.w),d0
000015C2 43F1 0000                  		lea	(a1,d0.w),a1
000015C6 6100                       		bsr.s	ClearPLC
000015C8 45F8 F680                  		lea	($FFFFF680).w,a2
000015CC 3019                       		move.w	(a1)+,d0
000015CE 6B00                       		bmi.s	loc_15D8
000015D0                            
000015D0                            loc_15D0:
000015D0 24D9                       		move.l	(a1)+,(a2)+
000015D2 34D9                       		move.w	(a1)+,(a2)+
000015D4 51C8 FFFA                  		dbf	d0,loc_15D0
000015D8                            
000015D8                            loc_15D8:
000015D8 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015DC 4E75                       		rts	
000015DE                            ; End of function LoadPLC2
000015DE                            
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            ; Subroutine to	clear the pattern load cues
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            
000015DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015DE                            
000015DE                            
000015DE                            ClearPLC:				; XREF: LoadPLC2
000015DE 45F8 F680                  		lea	($FFFFF680).w,a2
000015E2 701F                       		moveq	#$1F,d0
000015E4                            
000015E4                            ClearPLC_Loop:
000015E4 429A                       		clr.l	(a2)+
000015E6 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000015EA 4E75                       		rts	
000015EC                            ; End of function ClearPLC
000015EC                            
000015EC                            ; ---------------------------------------------------------------------------
000015EC                            ; Subroutine to	use graphics listed in a pattern load cue
000015EC                            ; ---------------------------------------------------------------------------
000015EC                            
000015EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015EC                            
000015EC                            
000015EC                            RunPLC_RAM:				; XREF: Pal_FadeTo
000015EC 4AB8 F680                  		tst.l	($FFFFF680).w
000015F0 6700                       		beq.s	locret_1640
000015F2 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000015F6 6600                       		bne.s	locret_1640
000015F8 2078 F680                  		movea.l	($FFFFF680).w,a0
000015FC 47F9 0000 1502             		lea	(loc_1502).l,a3
00001602 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001606 3418                       		move.w	(a0)+,d2
00001608 6A00                       		bpl.s	loc_160E
0000160A D6FC 000A                  		adda.w	#$A,a3
0000160E                            
0000160E                            loc_160E:
0000160E 0242 7FFF                  		andi.w	#$7FFF,d2
00001612 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001616 6100 FF16                  		bsr.w	NemDec4
0000161A 1A18                       		move.b	(a0)+,d5
0000161C E145                       		asl.w	#8,d5
0000161E 1A18                       		move.b	(a0)+,d5
00001620 7C10                       		moveq	#$10,d6
00001622 7000                       		moveq	#0,d0
00001624 21C8 F680                  		move.l	a0,($FFFFF680).w
00001628 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000162C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001630 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001634 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001638 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000163C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001640                            
00001640                            locret_1640:
00001640 4E75                       		rts	
00001642                            ; End of function RunPLC_RAM
00001642                            
00001642                            
00001642                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001642                            
00001642                            
00001642                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001642 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001646 6700 0000                  		beq.w	locret_16DA
0000164A 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001650 7000                       		moveq	#0,d0
00001652 3038 F684                  		move.w	($FFFFF684).w,d0
00001656 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000165C 6000                       		bra.s	loc_1676
0000165E                            ; End of function sub_1642
0000165E                            
0000165E                            
0000165E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000165E                            
0000165E                            
0000165E                            sub_165E:				; XREF: Demo_Time
0000165E 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001662 6700                       		beq.s	locret_16DA
00001664 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000166A 7000                       		moveq	#0,d0
0000166C 3038 F684                  		move.w	($FFFFF684).w,d0
00001670 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001676                            
00001676                            loc_1676:				; XREF: sub_1642
00001676 49F9 00C0 0004             		lea	($C00004).l,a4
0000167C E588                       		lsl.l	#2,d0
0000167E E448                       		lsr.w	#2,d0
00001680 0040 4000                  		ori.w	#$4000,d0
00001684 4840                       		swap	d0
00001686 2880                       		move.l	d0,(a4)
00001688 594C                       		subq.w	#4,a4
0000168A 2078 F680                  		movea.l	($FFFFF680).w,a0
0000168E 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001692 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001696 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
0000169A 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
0000169E 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000016A2 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000016A6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000016AA                            
000016AA                            loc_16AA:				; XREF: sub_165E
000016AA 3A7C 0008                  		movea.w	#8,a5
000016AE 6100 FE1C                  		bsr.w	NemDec3
000016B2 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000016B6 6700                       		beq.s	loc_16DC
000016B8 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000016BC 66EC                       		bne.s	loc_16AA
000016BE 21C8 F680                  		move.l	a0,($FFFFF680).w
000016C2 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000016C6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000016CA 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000016CE 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000016D2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000016D6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000016DA                            
000016DA                            locret_16DA:				; XREF: sub_1642
000016DA 4E75                       		rts	
000016DC                            ; ===========================================================================
000016DC                            
000016DC                            loc_16DC:				; XREF: sub_165E
000016DC 41F8 F680                  		lea	($FFFFF680).w,a0
000016E0 7015                       		moveq	#$15,d0
000016E2                            
000016E2                            loc_16E2:				; XREF: sub_165E
000016E2 20E8 0006                  		move.l	6(a0),(a0)+
000016E6 51C8 FFFA                  		dbf	d0,loc_16E2
000016EA 4E75                       		rts	
000016EC                            ; End of function sub_165E
000016EC                            
000016EC                            ; ---------------------------------------------------------------------------
000016EC                            ; Subroutine to	execute	the pattern load cue
000016EC                            ; ---------------------------------------------------------------------------
000016EC                            
000016EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EC                            
000016EC                            
000016EC                            RunPLC_ROM:
000016EC 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000016F2 D040                       		add.w	d0,d0
000016F4 3031 0000                  		move.w	(a1,d0.w),d0
000016F8 43F1 0000                  		lea	(a1,d0.w),a1
000016FC 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000016FE                            
000016FE                            RunPLC_Loop:
000016FE 2059                       		movea.l	(a1)+,a0	; get art pointer
00001700 7000                       		moveq	#0,d0
00001702 3019                       		move.w	(a1)+,d0	; get VRAM address
00001704 E588                       		lsl.l	#2,d0		; divide address by $20
00001706 E448                       		lsr.w	#2,d0
00001708 0040 4000                  		ori.w	#$4000,d0
0000170C 4840                       		swap	d0
0000170E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001714 6100 FD2A                  		bsr.w	NemDec		; decompress
00001718 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000171C 4E75                       		rts	
0000171E                            ; End of function RunPLC_ROM
0000171E                            
0000171E                            ; ---------------------------------------------------------------------------
0000171E                            ; Enigma decompression algorithm
0000171E                            ; ---------------------------------------------------------------------------
0000171E                            
0000171E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000171E                            
0000171E                            
0000171E                            EniDec:
0000171E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001722 3640                       		movea.w	d0,a3
00001724 1018                       		move.b	(a0)+,d0
00001726 4880                       		ext.w	d0
00001728 3A40                       		movea.w	d0,a5
0000172A 1818                       		move.b	(a0)+,d4
0000172C E70C                       		lsl.b	#3,d4
0000172E 3458                       		movea.w	(a0)+,a2
00001730 D4CB                       		adda.w	a3,a2
00001732 3858                       		movea.w	(a0)+,a4
00001734 D8CB                       		adda.w	a3,a4
00001736 1A18                       		move.b	(a0)+,d5
00001738 E145                       		asl.w	#8,d5
0000173A 1A18                       		move.b	(a0)+,d5
0000173C 7C10                       		moveq	#$10,d6
0000173E                            
0000173E                            loc_173E:				; XREF: loc_1768
0000173E 7007                       		moveq	#7,d0
00001740 3E06                       		move.w	d6,d7
00001742 9E40                       		sub.w	d0,d7
00001744 3205                       		move.w	d5,d1
00001746 EE69                       		lsr.w	d7,d1
00001748 0241 007F                  		andi.w	#$7F,d1
0000174C 3401                       		move.w	d1,d2
0000174E 0C41 0040                  		cmpi.w	#$40,d1
00001752 6400                       		bcc.s	loc_1758
00001754 7006                       		moveq	#6,d0
00001756 E24A                       		lsr.w	#1,d2
00001758                            
00001758                            loc_1758:
00001758 6100 0000                  		bsr.w	sub_188C
0000175C 0242 000F                  		andi.w	#$F,d2
00001760 E849                       		lsr.w	#4,d1
00001762 D241                       		add.w	d1,d1
00001764 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001768                            ; End of function EniDec
00001768                            
00001768                            ; ===========================================================================
00001768                            
00001768                            loc_1768:				; XREF: loc_17B4
00001768 32CA                       		move.w	a2,(a1)+
0000176A 524A                       		addq.w	#1,a2
0000176C 51CA FFFA                  		dbf	d2,loc_1768
00001770 60CC                       		bra.s	loc_173E
00001772                            ; ===========================================================================
00001772                            
00001772                            loc_1772:				; XREF: loc_17B4
00001772 32CC                       		move.w	a4,(a1)+
00001774 51CA FFFC                  		dbf	d2,loc_1772
00001778 60C4                       		bra.s	loc_173E
0000177A                            ; ===========================================================================
0000177A                            
0000177A                            loc_177A:				; XREF: loc_17B4
0000177A 6100 0000                  		bsr.w	loc_17DC
0000177E                            
0000177E                            loc_177E:
0000177E 32C1                       		move.w	d1,(a1)+
00001780 51CA FFFC                  		dbf	d2,loc_177E
00001784 60B8                       		bra.s	loc_173E
00001786                            ; ===========================================================================
00001786                            
00001786                            loc_1786:				; XREF: loc_17B4
00001786 6100 0000                  		bsr.w	loc_17DC
0000178A                            
0000178A                            loc_178A:
0000178A 32C1                       		move.w	d1,(a1)+
0000178C 5241                       		addq.w	#1,d1
0000178E 51CA FFFA                  		dbf	d2,loc_178A
00001792 60AA                       		bra.s	loc_173E
00001794                            ; ===========================================================================
00001794                            
00001794                            loc_1794:				; XREF: loc_17B4
00001794 6100 0000                  		bsr.w	loc_17DC
00001798                            
00001798                            loc_1798:
00001798 32C1                       		move.w	d1,(a1)+
0000179A 5341                       		subq.w	#1,d1
0000179C 51CA FFFA                  		dbf	d2,loc_1798
000017A0 609C                       		bra.s	loc_173E
000017A2                            ; ===========================================================================
000017A2                            
000017A2                            loc_17A2:				; XREF: loc_17B4
000017A2 0C42 000F                  		cmpi.w	#$F,d2
000017A6 6700                       		beq.s	loc_17C4
000017A8                            
000017A8                            loc_17A8:
000017A8 6100 0000                  		bsr.w	loc_17DC
000017AC 32C1                       		move.w	d1,(a1)+
000017AE 51CA FFF8                  		dbf	d2,loc_17A8
000017B2 608A                       		bra.s	loc_173E
000017B4                            ; ===========================================================================
000017B4                            
000017B4                            loc_17B4:				; XREF: EniDec
000017B4 60B2                       		bra.s	loc_1768
000017B6                            ; ===========================================================================
000017B6 60B0                       		bra.s	loc_1768
000017B8                            ; ===========================================================================
000017B8 60B8                       		bra.s	loc_1772
000017BA                            ; ===========================================================================
000017BA 60B6                       		bra.s	loc_1772
000017BC                            ; ===========================================================================
000017BC 60BC                       		bra.s	loc_177A
000017BE                            ; ===========================================================================
000017BE 60C6                       		bra.s	loc_1786
000017C0                            ; ===========================================================================
000017C0 60D2                       		bra.s	loc_1794
000017C2                            ; ===========================================================================
000017C2 60DE                       		bra.s	loc_17A2
000017C4                            ; ===========================================================================
000017C4                            
000017C4                            loc_17C4:				; XREF: loc_17A2
000017C4 5348                       		subq.w	#1,a0
000017C6 0C46 0010                  		cmpi.w	#$10,d6
000017CA 6600                       		bne.s	loc_17CE
000017CC 5348                       		subq.w	#1,a0
000017CE                            
000017CE                            loc_17CE:
000017CE 3008                       		move.w	a0,d0
000017D0 E248                       		lsr.w	#1,d0
000017D2 6400                       		bcc.s	loc_17D6
000017D4 5248                       		addq.w	#1,a0
000017D6                            
000017D6                            loc_17D6:
000017D6 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000017DA 4E75                       		rts	
000017DC                            ; ===========================================================================
000017DC                            
000017DC                            loc_17DC:				; XREF: loc_17A2
000017DC 360B                       		move.w	a3,d3
000017DE 1204                       		move.b	d4,d1
000017E0 D201                       		add.b	d1,d1
000017E2 6400                       		bcc.s	loc_17EE
000017E4 5346                       		subq.w	#1,d6
000017E6 0D05                       		btst	d6,d5
000017E8 6700                       		beq.s	loc_17EE
000017EA 0043 8000                  		ori.w	#-$8000,d3
000017EE                            
000017EE                            loc_17EE:
000017EE D201                       		add.b	d1,d1
000017F0 6400                       		bcc.s	loc_17FC
000017F2 5346                       		subq.w	#1,d6
000017F4 0D05                       		btst	d6,d5
000017F6 6700                       		beq.s	loc_17FC
000017F8 0643 4000                  		addi.w	#$4000,d3
000017FC                            
000017FC                            loc_17FC:
000017FC D201                       		add.b	d1,d1
000017FE 6400                       		bcc.s	loc_180A
00001800 5346                       		subq.w	#1,d6
00001802 0D05                       		btst	d6,d5
00001804 6700                       		beq.s	loc_180A
00001806 0643 2000                  		addi.w	#$2000,d3
0000180A                            
0000180A                            loc_180A:
0000180A D201                       		add.b	d1,d1
0000180C 6400                       		bcc.s	loc_1818
0000180E 5346                       		subq.w	#1,d6
00001810 0D05                       		btst	d6,d5
00001812 6700                       		beq.s	loc_1818
00001814 0043 1000                  		ori.w	#$1000,d3
00001818                            
00001818                            loc_1818:
00001818 D201                       		add.b	d1,d1
0000181A 6400                       		bcc.s	loc_1826
0000181C 5346                       		subq.w	#1,d6
0000181E 0D05                       		btst	d6,d5
00001820 6700                       		beq.s	loc_1826
00001822 0043 0800                  		ori.w	#$800,d3
00001826                            
00001826                            loc_1826:
00001826 3205                       		move.w	d5,d1
00001828 3E06                       		move.w	d6,d7
0000182A 9E4D                       		sub.w	a5,d7
0000182C 6400                       		bcc.s	loc_1856
0000182E 3C07                       		move.w	d7,d6
00001830 0646 0010                  		addi.w	#$10,d6
00001834 4447                       		neg.w	d7
00001836 EF69                       		lsl.w	d7,d1
00001838 1A10                       		move.b	(a0),d5
0000183A EF3D                       		rol.b	d7,d5
0000183C DE47                       		add.w	d7,d7
0000183E CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001842 D245                       		add.w	d5,d1
00001844                            
00001844                            loc_1844:				; XREF: loc_1868
00001844 300D                       		move.w	a5,d0
00001846 D040                       		add.w	d0,d0
00001848 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000184C D243                       		add.w	d3,d1
0000184E 1A18                       		move.b	(a0)+,d5
00001850 E14D                       		lsl.w	#8,d5
00001852 1A18                       		move.b	(a0)+,d5
00001854 4E75                       		rts	
00001856                            ; ===========================================================================
00001856                            
00001856                            loc_1856:				; XREF: loc_1826
00001856 6700                       		beq.s	loc_1868
00001858 EE69                       		lsr.w	d7,d1
0000185A 300D                       		move.w	a5,d0
0000185C D040                       		add.w	d0,d0
0000185E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001862 D243                       		add.w	d3,d1
00001864 300D                       		move.w	a5,d0
00001866 6000                       		bra.s	sub_188C
00001868                            ; ===========================================================================
00001868                            
00001868                            loc_1868:				; XREF: loc_1856
00001868 7C10                       		moveq	#$10,d6
0000186A                            
0000186A                            loc_186A:
0000186A 60D8                       		bra.s	loc_1844
0000186C                            ; ===========================================================================
0000186C 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001882 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
0000188C                            
0000188C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000188C                            
0000188C                            
0000188C                            sub_188C:				; XREF: EniDec
0000188C 9C40                       		sub.w	d0,d6
0000188E 0C46 0009                  		cmpi.w	#9,d6
00001892 6400                       		bcc.s	locret_189A
00001894 5046                       		addq.w	#8,d6
00001896 E145                       		asl.w	#8,d5
00001898 1A18                       		move.b	(a0)+,d5
0000189A                            
0000189A                            locret_189A:
0000189A 4E75                       		rts	
0000189C                            ; End of function sub_188C
0000189C                            
0000189C                            ; ---------------------------------------------------------------------------
0000189C                            ; Kosinski decompression algorithm
0000189C                            ; ---------------------------------------------------------------------------
0000189C                            
0000189C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000189C                            
0000189C                            
0000189C                            KosDec:
0000189C                            
0000189C =FFFFFFFE                  var_2		= -2
0000189C =FFFFFFFF                  var_1		= -1
0000189C                            
0000189C 558F                       		subq.l	#2,sp
0000189E 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018A2 1E98                       		move.b	(a0)+,(sp)
000018A4 3A17                       		move.w	(sp),d5
000018A6 780F                       		moveq	#$F,d4
000018A8                            
000018A8                            loc_18A8:
000018A8 E24D                       		lsr.w	#1,d5
000018AA 40C6                       		move	sr,d6
000018AC 51CC 0000                  		dbf	d4,loc_18BA
000018B0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018B4 1E98                       		move.b	(a0)+,(sp)
000018B6 3A17                       		move.w	(sp),d5
000018B8 780F                       		moveq	#$F,d4
000018BA                            
000018BA                            loc_18BA:
000018BA 44C6                       		move	d6,ccr
000018BC 6400                       		bcc.s	loc_18C2
000018BE 12D8                       		move.b	(a0)+,(a1)+
000018C0 60E6                       		bra.s	loc_18A8
000018C2                            ; ===========================================================================
000018C2                            
000018C2                            loc_18C2:				; XREF: KosDec
000018C2 7600                       		moveq	#0,d3
000018C4 E24D                       		lsr.w	#1,d5
000018C6 40C6                       		move	sr,d6
000018C8 51CC 0000                  		dbf	d4,loc_18D6
000018CC 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018D0 1E98                       		move.b	(a0)+,(sp)
000018D2 3A17                       		move.w	(sp),d5
000018D4 780F                       		moveq	#$F,d4
000018D6                            
000018D6                            loc_18D6:
000018D6 44C6                       		move	d6,ccr
000018D8 6500                       		bcs.s	loc_1906
000018DA E24D                       		lsr.w	#1,d5
000018DC 51CC 0000                  		dbf	d4,loc_18EA
000018E0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018E4 1E98                       		move.b	(a0)+,(sp)
000018E6 3A17                       		move.w	(sp),d5
000018E8 780F                       		moveq	#$F,d4
000018EA                            
000018EA                            loc_18EA:
000018EA E353                       		roxl.w	#1,d3
000018EC E24D                       		lsr.w	#1,d5
000018EE 51CC 0000                  		dbf	d4,loc_18FC
000018F2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018F6 1E98                       		move.b	(a0)+,(sp)
000018F8 3A17                       		move.w	(sp),d5
000018FA 780F                       		moveq	#$F,d4
000018FC                            
000018FC                            loc_18FC:
000018FC E353                       		roxl.w	#1,d3
000018FE 5243                       		addq.w	#1,d3
00001900 74FF                       		moveq	#-1,d2
00001902 1418                       		move.b	(a0)+,d2
00001904 6000                       		bra.s	loc_191C
00001906                            ; ===========================================================================
00001906                            
00001906                            loc_1906:				; XREF: loc_18C2
00001906 1018                       		move.b	(a0)+,d0
00001908 1218                       		move.b	(a0)+,d1
0000190A 74FF                       		moveq	#-1,d2
0000190C 1401                       		move.b	d1,d2
0000190E EB4A                       		lsl.w	#5,d2
00001910 1400                       		move.b	d0,d2
00001912 0241 0007                  		andi.w	#7,d1
00001916 6700                       		beq.s	loc_1928
00001918 1601                       		move.b	d1,d3
0000191A 5243                       		addq.w	#1,d3
0000191C                            
0000191C                            loc_191C:
0000191C 1031 2000                  		move.b	(a1,d2.w),d0
00001920 12C0                       		move.b	d0,(a1)+
00001922 51CB FFF8                  		dbf	d3,loc_191C
00001926 6080                       		bra.s	loc_18A8
00001928                            ; ===========================================================================
00001928                            
00001928                            loc_1928:				; XREF: loc_1906
00001928 1218                       		move.b	(a0)+,d1
0000192A 6700                       		beq.s	loc_1938
0000192C 0C01 0001                  		cmpi.b	#1,d1
00001930 6700 FF76                  		beq.w	loc_18A8
00001934 1601                       		move.b	d1,d3
00001936 60E4                       		bra.s	loc_191C
00001938                            ; ===========================================================================
00001938                            
00001938                            loc_1938:				; XREF: loc_1928
00001938 548F                       		addq.l	#2,sp
0000193A 4E75                       		rts	
0000193C                            ; End of function KosDec
0000193C                            
0000193C                            ; ---------------------------------------------------------------------------
0000193C                            ; Pallet cycling routine loading subroutine
0000193C                            ; ---------------------------------------------------------------------------
0000193C                            
0000193C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000193C                            
0000193C                            
0000193C                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
0000193C 7400                       		moveq	#0,d2
0000193E 7000                       		moveq	#0,d0
00001940 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001944 D040                       		add.w	d0,d0		; multiply by 2
00001946 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
0000194A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
0000194E                            ; End of function PalCycle_Load
0000194E                            
0000194E                            ; ===========================================================================
0000194E                            ; ---------------------------------------------------------------------------
0000194E                            ; Pallet cycling routines
0000194E                            ; ---------------------------------------------------------------------------
0000194E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001950 0000                       		dc.w PalCycle_LZ-PalCycle
00001952 0000                       		dc.w PalCycle_MZ-PalCycle
00001954 0000                       		dc.w PalCycle_SLZ-PalCycle
00001956 0000                       		dc.w PalCycle_SYZ-PalCycle
00001958 0000                       		dc.w PalCycle_SBZ-PalCycle
0000195A 0000                       		dc.w PalCycle_GHZ-PalCycle
0000195C                            
0000195C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000195C                            
0000195C                            
0000195C                            PalCycle_Title:				; XREF: TitleScreen
0000195C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001962 6000                       		bra.s	loc_196A
00001964                            ; ===========================================================================
00001964                            
00001964                            PalCycle_GHZ:				; XREF: PalCycle
00001964 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
0000196A                            
0000196A                            loc_196A:				; XREF: PalCycle_Title
0000196A 5378 F634                  		subq.w	#1,($FFFFF634).w
0000196E 6A00                       		bpl.s	locret_1990
00001970 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001976 3038 F632                  		move.w	($FFFFF632).w,d0
0000197A 5278 F632                  		addq.w	#1,($FFFFF632).w
0000197E 0240 0003                  		andi.w	#3,d0
00001982 E748                       		lsl.w	#3,d0
00001984 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001988 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000198C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001990                            
00001990                            locret_1990:
00001990 4E75                       		rts	
00001992                            ; End of function PalCycle_Title
00001992                            
00001992                            
00001992                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001992                            
00001992                            
00001992                            PalCycle_LZ:				; XREF: PalCycle
00001992 5378 F634                  		subq.w	#1,($FFFFF634).w
00001996 6A00                       		bpl.s	loc_19D8
00001998 31FC 0002 F634             		move.w	#2,($FFFFF634).w
0000199E 3038 F632                  		move.w	($FFFFF632).w,d0
000019A2 5278 F632                  		addq.w	#1,($FFFFF632).w
000019A6 0240 0003                  		andi.w	#3,d0
000019AA E748                       		lsl.w	#3,d0
000019AC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
000019B2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
000019B8 6600                       		bne.s	loc_19C0
000019BA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
000019C0                            
000019C0                            loc_19C0:
000019C0 43F8 FB56                  		lea	($FFFFFB56).w,a1
000019C4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019C8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019CC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
000019D0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019D4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019D8                            
000019D8                            loc_19D8:
000019D8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000019DC 0240 0007                  		andi.w	#7,d0
000019E0 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
000019E4 6700                       		beq.s	locret_1A3A
000019E6 7201                       		moveq	#1,d1
000019E8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000019EC 6700                       		beq.s	loc_19F0
000019EE 4441                       		neg.w	d1
000019F0                            
000019F0                            loc_19F0:
000019F0 3038 F650                  		move.w	($FFFFF650).w,d0
000019F4 0240 0003                  		andi.w	#3,d0
000019F8 D041                       		add.w	d1,d0
000019FA 0C40 0003                  		cmpi.w	#3,d0
000019FE 6500                       		bcs.s	loc_1A0A
00001A00 3200                       		move.w	d0,d1
00001A02 7000                       		moveq	#0,d0
00001A04 4A41                       		tst.w	d1
00001A06 6A00                       		bpl.s	loc_1A0A
00001A08 7002                       		moveq	#2,d0
00001A0A                            
00001A0A                            loc_1A0A:
00001A0A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001A0E D040                       		add.w	d0,d0
00001A10 3200                       		move.w	d0,d1
00001A12 D040                       		add.w	d0,d0
00001A14 D041                       		add.w	d1,d0
00001A16 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001A1C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001A20 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A24 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A28 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001A2E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001A32 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A36 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A3A                            
00001A3A                            locret_1A3A:
00001A3A 4E75                       		rts	
00001A3C                            ; End of function PalCycle_LZ
00001A3C                            
00001A3C                            ; ===========================================================================
00001A3C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001A44                            ; ===========================================================================
00001A44                            
00001A44                            PalCycle_MZ:				; XREF: PalCycle
00001A44 4E75                       		rts	
00001A46                            
00001A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A46                            
00001A46                            
00001A46                            PalCycle_SLZ:				; XREF: PalCycle
00001A46 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A4A 6A00                       		bpl.s	locret_1A80
00001A4C 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001A52 3038 F632                  		move.w	($FFFFF632).w,d0
00001A56 5240                       		addq.w	#1,d0
00001A58 0C40 0006                  		cmpi.w	#6,d0
00001A5C 6500                       		bcs.s	loc_1A60
00001A5E 7000                       		moveq	#0,d0
00001A60                            
00001A60                            loc_1A60:
00001A60 31C0 F632                  		move.w	d0,($FFFFF632).w
00001A64 3200                       		move.w	d0,d1
00001A66 D241                       		add.w	d1,d1
00001A68 D041                       		add.w	d1,d0
00001A6A D040                       		add.w	d0,d0
00001A6C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001A72 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001A76 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001A7A 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001A80                            
00001A80                            locret_1A80:
00001A80 4E75                       		rts	
00001A82                            ; End of function PalCycle_SLZ
00001A82                            
00001A82                            
00001A82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A82                            
00001A82                            
00001A82                            PalCycle_SYZ:				; XREF: PalCycle
00001A82 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A86 6A00                       		bpl.s	locret_1AC6
00001A88 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001A8E 3038 F632                  		move.w	($FFFFF632).w,d0
00001A92 5278 F632                  		addq.w	#1,($FFFFF632).w
00001A96 0240 0003                  		andi.w	#3,d0
00001A9A E548                       		lsl.w	#2,d0
00001A9C 3200                       		move.w	d0,d1
00001A9E D040                       		add.w	d0,d0
00001AA0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001AA6 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001AAA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AAE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001AB2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001AB8 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001ABC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001AC0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001AC6                            
00001AC6                            locret_1AC6:
00001AC6 4E75                       		rts	
00001AC8                            ; End of function PalCycle_SYZ
00001AC8                            
00001AC8                            
00001AC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC8                            
00001AC8                            
00001AC8                            PalCycle_SBZ:				; XREF: PalCycle
00001AC8 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001ACE 4A38 FE11                  		tst.b	($FFFFFE11).w
00001AD2 6700                       		beq.s	loc_1ADA
00001AD4 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001ADA                            
00001ADA                            loc_1ADA:
00001ADA 43F8 F650                  		lea	($FFFFF650).w,a1
00001ADE 321A                       		move.w	(a2)+,d1
00001AE0                            
00001AE0                            loc_1AE0:
00001AE0 5311                       		subq.b	#1,(a1)
00001AE2 6B00                       		bmi.s	loc_1AEA
00001AE4 5489                       		addq.l	#2,a1
00001AE6 5C8A                       		addq.l	#6,a2
00001AE8 6000                       		bra.s	loc_1B06
00001AEA                            ; ===========================================================================
00001AEA                            
00001AEA                            loc_1AEA:				; XREF: PalCycle_SBZ
00001AEA 12DA                       		move.b	(a2)+,(a1)+
00001AEC 1011                       		move.b	(a1),d0
00001AEE 5200                       		addq.b	#1,d0
00001AF0 B01A                       		cmp.b	(a2)+,d0
00001AF2 6500                       		bcs.s	loc_1AF6
00001AF4 7000                       		moveq	#0,d0
00001AF6                            
00001AF6                            loc_1AF6:
00001AF6 12C0                       		move.b	d0,(a1)+
00001AF8 0240 000F                  		andi.w	#$F,d0
00001AFC D040                       		add.w	d0,d0
00001AFE 305A                       		movea.w	(a2)+,a0
00001B00 365A                       		movea.w	(a2)+,a3
00001B02 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001B06                            
00001B06                            loc_1B06:				; XREF: PalCycle_SBZ
00001B06 51C9 FFD8                  		dbf	d1,loc_1AE0
00001B0A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B0E 6A00                       		bpl.s	locret_1B64
00001B10 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001B16 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001B1C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001B20 6700                       		beq.s	loc_1B2E
00001B22 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001B28 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001B2E                            
00001B2E                            loc_1B2E:
00001B2E 72FF                       		moveq	#-1,d1
00001B30 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B34 6700                       		beq.s	loc_1B38
00001B36 4441                       		neg.w	d1
00001B38                            
00001B38                            loc_1B38:
00001B38 3038 F632                  		move.w	($FFFFF632).w,d0
00001B3C 0240 0003                  		andi.w	#3,d0
00001B40 D041                       		add.w	d1,d0
00001B42 0C40 0003                  		cmpi.w	#3,d0
00001B46 6500                       		bcs.s	loc_1B52
00001B48 3200                       		move.w	d0,d1
00001B4A 7000                       		moveq	#0,d0
00001B4C 4A41                       		tst.w	d1
00001B4E 6A00                       		bpl.s	loc_1B52
00001B50 7002                       		moveq	#2,d0
00001B52                            
00001B52                            loc_1B52:
00001B52 31C0 F632                  		move.w	d0,($FFFFF632).w
00001B56 D040                       		add.w	d0,d0
00001B58 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001B5C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B60 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B64                            
00001B64                            locret_1B64:
00001B64 4E75                       		rts	
00001B66                            ; End of function PalCycle_SBZ
00001B66                            
00001B66                            ; ===========================================================================
00001B66                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001B86                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001BA6                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001BC6                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001BD8                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001BEA                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001C52                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001C76                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001C96                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001CA6                            
00001CA6                            Pal_SBZCycList:
00001CA6                            	include "_inc\SBZ pallet script 1.asm"
00001CA6                            ; ---------------------------------------------------------------------------
00001CA6                            ; Scrap Brain Zone 1 pallet cycling script
00001CA6                            ; ---------------------------------------------------------------------------
00001CA6 0008                       	dc.w 8			; number of entries - 1
00001CA8 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001CAA 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001CAC FB50                       	dc.w $FB50		; RAM address
00001CAE 0D08                       	dc.b $D, 8
00001CB0 0000                       	dc.w Pal_SBZCyc2
00001CB2 FB52                       	dc.w $FB52
00001CB4 0E08                       	dc.b $E, 8
00001CB6 0000                       	dc.w Pal_SBZCyc3
00001CB8 FB6E                       	dc.w $FB6E
00001CBA 0B08                       	dc.b $B, 8
00001CBC 0000                       	dc.w Pal_SBZCyc5
00001CBE FB70                       	dc.w $FB70
00001CC0 0708                       	dc.b 7,	8
00001CC2 0000                       	dc.w Pal_SBZCyc6
00001CC4 FB72                       	dc.w $FB72
00001CC6 1C10                       	dc.b $1C, $10
00001CC8 0000                       	dc.w Pal_SBZCyc7
00001CCA FB7E                       	dc.w $FB7E
00001CCC 0303                       	dc.b 3,	3
00001CCE 0000                       	dc.w Pal_SBZCyc8
00001CD0 FB78                       	dc.w $FB78
00001CD2 0303                       	dc.b 3,	3
00001CD4 0000                       	dc.w Pal_SBZCyc8+2
00001CD6 FB7A                       	dc.w $FB7A
00001CD8 0303                       	dc.b 3,	3
00001CDA 0000                       	dc.w Pal_SBZCyc8+4
00001CDC FB7C                       	dc.w $FB7C
00001CDE                            	even
00001CDE                            	even
00001CDE                            
00001CDE                            Pal_SBZCycList2:
00001CDE                            	include "_inc\SBZ pallet script 2.asm"
00001CDE                            ; ---------------------------------------------------------------------------
00001CDE                            ; Scrap Brain Zone 2 pallet cycling script
00001CDE                            ; ---------------------------------------------------------------------------
00001CDE 0006                       	dc.w 6
00001CE0 0708                       	dc.b 7,	8
00001CE2 0000                       	dc.w Pal_SBZCyc1
00001CE4 FB50                       	dc.w $FB50
00001CE6 0D08                       	dc.b $D, 8
00001CE8 0000                       	dc.w Pal_SBZCyc2
00001CEA FB52                       	dc.w $FB52
00001CEC 0908                       	dc.b 9,	8
00001CEE 0000                       	dc.w Pal_SBZCyc9
00001CF0 FB70                       	dc.w $FB70
00001CF2 0708                       	dc.b 7,	8
00001CF4 0000                       	dc.w Pal_SBZCyc6
00001CF6 FB72                       	dc.w $FB72
00001CF8 0303                       	dc.b 3,	3
00001CFA 0000                       	dc.w Pal_SBZCyc8
00001CFC FB78                       	dc.w $FB78
00001CFE 0303                       	dc.b 3,	3
00001D00 0000                       	dc.w Pal_SBZCyc8+2
00001D02 FB7A                       	dc.w $FB7A
00001D04 0303                       	dc.b 3,	3
00001D06 0000                       	dc.w Pal_SBZCyc8+4
00001D08 FB7C                       	dc.w $FB7C
00001D0A                            	even
00001D0A                            	even
00001D0A                            
00001D0A                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001D1A                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001D2A                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001D3A                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001D46                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001D56                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001D66                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001D86                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001D90                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001DA0                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001DAC                            ; ---------------------------------------------------------------------------
00001DAC                            ; Subroutine to	fade out and fade in
00001DAC                            ; ---------------------------------------------------------------------------
00001DAC                            
00001DAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DAC                            
00001DAC                            
00001DAC                            Pal_FadeTo:
00001DAC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001DB2                            
00001DB2                            Pal_FadeTo2:
00001DB2 7000                       		moveq	#0,d0
00001DB4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DB8 1038 F626                  		move.b	($FFFFF626).w,d0
00001DBC D0C0                       		adda.w	d0,a0
00001DBE 7200                       		moveq	#0,d1
00001DC0 1038 F627                  		move.b	($FFFFF627).w,d0
00001DC4                            
00001DC4                            Pal_ToBlack:
00001DC4 30C1                       		move.w	d1,(a0)+
00001DC6 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001DCA                            
00001DCA 383C 0015                  		move.w	#$15,d4
00001DCE                            
00001DCE                            loc_1DCE:
00001DCE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001DD4 6100 0000                  		bsr.w	DelayProgram
00001DD8 6100                       		bsr.s	Pal_FadeIn
00001DDA 6100 F810                  		bsr.w	RunPLC_RAM
00001DDE 51CC FFEE                  		dbf	d4,loc_1DCE
00001DE2 4E75                       		rts	
00001DE4                            ; End of function Pal_FadeTo
00001DE4                            
00001DE4                            ; ---------------------------------------------------------------------------
00001DE4                            ; Pallet fade-in subroutine
00001DE4                            ; ---------------------------------------------------------------------------
00001DE4                            
00001DE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DE4                            
00001DE4                            
00001DE4                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001DE4 7000                       		moveq	#0,d0
00001DE6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DEA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001DEE 1038 F626                  		move.b	($FFFFF626).w,d0
00001DF2 D0C0                       		adda.w	d0,a0
00001DF4 D2C0                       		adda.w	d0,a1
00001DF6 1038 F627                  		move.b	($FFFFF627).w,d0
00001DFA                            
00001DFA                            loc_1DFA:
00001DFA 6100                       		bsr.s	Pal_AddColor
00001DFC 51C8 FFFC                  		dbf	d0,loc_1DFA
00001E00 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001E06 6600                       		bne.s	locret_1E24
00001E08 7000                       		moveq	#0,d0
00001E0A 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E0E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001E12 1038 F626                  		move.b	($FFFFF626).w,d0
00001E16 D0C0                       		adda.w	d0,a0
00001E18 D2C0                       		adda.w	d0,a1
00001E1A 1038 F627                  		move.b	($FFFFF627).w,d0
00001E1E                            
00001E1E                            loc_1E1E:
00001E1E 6100                       		bsr.s	Pal_AddColor
00001E20 51C8 FFFC                  		dbf	d0,loc_1E1E
00001E24                            
00001E24                            locret_1E24:
00001E24 4E75                       		rts	
00001E26                            ; End of function Pal_FadeIn
00001E26                            
00001E26                            
00001E26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E26                            
00001E26                            
00001E26                            Pal_AddColor:				; XREF: Pal_FadeIn
00001E26 3419                       		move.w	(a1)+,d2
00001E28 3610                       		move.w	(a0),d3
00001E2A B642                       		cmp.w	d2,d3
00001E2C 6700                       		beq.s	loc_1E4E
00001E2E 3203                       		move.w	d3,d1
00001E30 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001E34 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001E36 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001E38 30C1                       		move.w	d1,(a0)+	; update pallet
00001E3A 4E75                       		rts	
00001E3C                            ; ===========================================================================
00001E3C                            
00001E3C                            Pal_AddGreen:				; XREF: Pal_AddColor
00001E3C 3203                       		move.w	d3,d1
00001E3E 0641 0020                  		addi.w	#$20,d1		; increase green value
00001E42 B242                       		cmp.w	d2,d1
00001E44 6200                       		bhi.s	Pal_AddRed
00001E46 30C1                       		move.w	d1,(a0)+	; update pallet
00001E48 4E75                       		rts	
00001E4A                            ; ===========================================================================
00001E4A                            
00001E4A                            Pal_AddRed:				; XREF: Pal_AddGreen
00001E4A 5458                       		addq.w	#2,(a0)+	; increase red value
00001E4C 4E75                       		rts	
00001E4E                            ; ===========================================================================
00001E4E                            
00001E4E                            loc_1E4E:				; XREF: Pal_AddColor
00001E4E 5448                       		addq.w	#2,a0
00001E50 4E75                       		rts	
00001E52                            ; End of function Pal_AddColor
00001E52                            
00001E52                            
00001E52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E52                            
00001E52                            
00001E52                            Pal_FadeFrom:
00001E52 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001E58 383C 0015                  		move.w	#$15,d4
00001E5C                            
00001E5C                            loc_1E5C:
00001E5C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E62 6100 0000                  		bsr.w	DelayProgram
00001E66 6100                       		bsr.s	Pal_FadeOut
00001E68 6100 F782                  		bsr.w	RunPLC_RAM
00001E6C 51CC FFEE                  		dbf	d4,loc_1E5C
00001E70 4E75                       		rts	
00001E72                            ; End of function Pal_FadeFrom
00001E72                            
00001E72                            ; ---------------------------------------------------------------------------
00001E72                            ; Pallet fade-out subroutine
00001E72                            ; ---------------------------------------------------------------------------
00001E72                            
00001E72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E72                            
00001E72                            
00001E72                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001E72 7000                       		moveq	#0,d0
00001E74 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E78 1038 F626                  		move.b	($FFFFF626).w,d0
00001E7C D0C0                       		adda.w	d0,a0
00001E7E 1038 F627                  		move.b	($FFFFF627).w,d0
00001E82                            
00001E82                            loc_1E82:
00001E82 6100                       		bsr.s	Pal_DecColor
00001E84 51C8 FFFC                  		dbf	d0,loc_1E82
00001E88                            
00001E88 7000                       		moveq	#0,d0
00001E8A 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E8E 1038 F626                  		move.b	($FFFFF626).w,d0
00001E92 D0C0                       		adda.w	d0,a0
00001E94 1038 F627                  		move.b	($FFFFF627).w,d0
00001E98                            
00001E98                            loc_1E98:
00001E98 6100                       		bsr.s	Pal_DecColor
00001E9A 51C8 FFFC                  		dbf	d0,loc_1E98
00001E9E 4E75                       		rts	
00001EA0                            ; End of function Pal_FadeOut
00001EA0                            
00001EA0                            
00001EA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EA0                            
00001EA0                            
00001EA0                            Pal_DecColor:				; XREF: Pal_FadeOut
00001EA0 3410                       		move.w	(a0),d2
00001EA2 6700                       		beq.s	loc_1ECC
00001EA4 3202                       		move.w	d2,d1
00001EA6 0241 000E                  		andi.w	#$E,d1
00001EAA 6700                       		beq.s	Pal_DecGreen
00001EAC 5558                       		subq.w	#2,(a0)+	; decrease red value
00001EAE 4E75                       		rts	
00001EB0                            ; ===========================================================================
00001EB0                            
00001EB0                            Pal_DecGreen:				; XREF: Pal_DecColor
00001EB0 3202                       		move.w	d2,d1
00001EB2 0241 00E0                  		andi.w	#$E0,d1
00001EB6 6700                       		beq.s	Pal_DecBlue
00001EB8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001EBC 4E75                       		rts	
00001EBE                            ; ===========================================================================
00001EBE                            
00001EBE                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001EBE 3202                       		move.w	d2,d1
00001EC0 0241 0E00                  		andi.w	#$E00,d1
00001EC4 6700                       		beq.s	loc_1ECC
00001EC6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001ECA 4E75                       		rts	
00001ECC                            ; ===========================================================================
00001ECC                            
00001ECC                            loc_1ECC:				; XREF: Pal_DecColor
00001ECC 5448                       		addq.w	#2,a0
00001ECE 4E75                       		rts	
00001ED0                            ; End of function Pal_DecColor
00001ED0                            
00001ED0                            ; ---------------------------------------------------------------------------
00001ED0                            ; Subroutine to	fill the pallet	with white (special stage)
00001ED0                            ; ---------------------------------------------------------------------------
00001ED0                            
00001ED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ED0                            
00001ED0                            
00001ED0                            Pal_MakeWhite:				; XREF: SpecialStage
00001ED0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001ED6 7000                       		moveq	#0,d0
00001ED8 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001EDC 1038 F626                  		move.b	($FFFFF626).w,d0
00001EE0 D0C0                       		adda.w	d0,a0
00001EE2 323C 0EEE                  		move.w	#$EEE,d1
00001EE6 1038 F627                  		move.b	($FFFFF627).w,d0
00001EEA                            
00001EEA                            PalWhite_Loop:
00001EEA 30C1                       		move.w	d1,(a0)+
00001EEC 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001EF0 383C 0015                  		move.w	#$15,d4
00001EF4                            
00001EF4                            loc_1EF4:
00001EF4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001EFA 6100 0000                  		bsr.w	DelayProgram
00001EFE 6100                       		bsr.s	Pal_WhiteToBlack
00001F00 6100 F6EA                  		bsr.w	RunPLC_RAM
00001F04 51CC FFEE                  		dbf	d4,loc_1EF4
00001F08 4E75                       		rts	
00001F0A                            ; End of function Pal_MakeWhite
00001F0A                            
00001F0A                            
00001F0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F0A                            
00001F0A                            
00001F0A                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001F0A 7000                       		moveq	#0,d0
00001F0C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F10 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001F14 1038 F626                  		move.b	($FFFFF626).w,d0
00001F18 D0C0                       		adda.w	d0,a0
00001F1A D2C0                       		adda.w	d0,a1
00001F1C 1038 F627                  		move.b	($FFFFF627).w,d0
00001F20                            
00001F20                            loc_1F20:
00001F20 6100                       		bsr.s	Pal_DecColor2
00001F22 51C8 FFFC                  		dbf	d0,loc_1F20
00001F26                            
00001F26 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001F2C 6600                       		bne.s	locret_1F4A
00001F2E 7000                       		moveq	#0,d0
00001F30 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001F34 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001F38 1038 F626                  		move.b	($FFFFF626).w,d0
00001F3C D0C0                       		adda.w	d0,a0
00001F3E D2C0                       		adda.w	d0,a1
00001F40 1038 F627                  		move.b	($FFFFF627).w,d0
00001F44                            
00001F44                            loc_1F44:
00001F44 6100                       		bsr.s	Pal_DecColor2
00001F46 51C8 FFFC                  		dbf	d0,loc_1F44
00001F4A                            
00001F4A                            locret_1F4A:
00001F4A 4E75                       		rts	
00001F4C                            ; End of function Pal_WhiteToBlack
00001F4C                            
00001F4C                            
00001F4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F4C                            
00001F4C                            
00001F4C                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001F4C 3419                       		move.w	(a1)+,d2
00001F4E 3610                       		move.w	(a0),d3
00001F50 B642                       		cmp.w	d2,d3
00001F52 6700                       		beq.s	loc_1F78
00001F54 3203                       		move.w	d3,d1
00001F56 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001F5A 6500                       		bcs.s	loc_1F64
00001F5C B242                       		cmp.w	d2,d1
00001F5E 6500                       		bcs.s	loc_1F64
00001F60 30C1                       		move.w	d1,(a0)+
00001F62 4E75                       		rts	
00001F64                            ; ===========================================================================
00001F64                            
00001F64                            loc_1F64:				; XREF: Pal_DecColor2
00001F64 3203                       		move.w	d3,d1
00001F66 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001F6A 6500                       		bcs.s	loc_1F74
00001F6C B242                       		cmp.w	d2,d1
00001F6E 6500                       		bcs.s	loc_1F74
00001F70 30C1                       		move.w	d1,(a0)+
00001F72 4E75                       		rts	
00001F74                            ; ===========================================================================
00001F74                            
00001F74                            loc_1F74:				; XREF: loc_1F64
00001F74 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F76 4E75                       		rts	
00001F78                            ; ===========================================================================
00001F78                            
00001F78                            loc_1F78:				; XREF: Pal_DecColor2
00001F78 5448                       		addq.w	#2,a0
00001F7A 4E75                       		rts	
00001F7C                            ; End of function Pal_DecColor2
00001F7C                            
00001F7C                            ; ---------------------------------------------------------------------------
00001F7C                            ; Subroutine to	make a white flash when	you enter a special stage
00001F7C                            ; ---------------------------------------------------------------------------
00001F7C                            
00001F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F7C                            
00001F7C                            
00001F7C                            Pal_MakeFlash:				; XREF: SpecialStage
00001F7C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F82 383C 0015                  		move.w	#$15,d4
00001F86                            
00001F86                            loc_1F86:
00001F86 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F8C 6100 0000                  		bsr.w	DelayProgram
00001F90 6100                       		bsr.s	Pal_ToWhite
00001F92 6100 F658                  		bsr.w	RunPLC_RAM
00001F96 51CC FFEE                  		dbf	d4,loc_1F86
00001F9A 4E75                       		rts	
00001F9C                            ; End of function Pal_MakeFlash
00001F9C                            
00001F9C                            
00001F9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F9C                            
00001F9C                            
00001F9C                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA6 D0C0                       		adda.w	d0,a0
00001FA8 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAC                            
00001FAC                            loc_1FAC:
00001FAC 6100                       		bsr.s	Pal_AddColor2
00001FAE 51C8 FFFC                  		dbf	d0,loc_1FAC
00001FB2 7000                       		moveq	#0,d0
00001FB4 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FB8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FBC D0C0                       		adda.w	d0,a0
00001FBE 1038 F627                  		move.b	($FFFFF627).w,d0
00001FC2                            
00001FC2                            loc_1FC2:
00001FC2 6100                       		bsr.s	Pal_AddColor2
00001FC4 51C8 FFFC                  		dbf	d0,loc_1FC2
00001FC8 4E75                       		rts	
00001FCA                            ; End of function Pal_ToWhite
00001FCA                            
00001FCA                            
00001FCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCA                            
00001FCA                            
00001FCA                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001FCA 3410                       		move.w	(a0),d2
00001FCC 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001FD0 6700                       		beq.s	loc_2006
00001FD2 3202                       		move.w	d2,d1
00001FD4 0241 000E                  		andi.w	#$E,d1
00001FD8 0C41 000E                  		cmpi.w	#$E,d1
00001FDC 6700                       		beq.s	loc_1FE2
00001FDE 5458                       		addq.w	#2,(a0)+	; increase red value
00001FE0 4E75                       		rts	
00001FE2                            ; ===========================================================================
00001FE2                            
00001FE2                            loc_1FE2:				; XREF: Pal_AddColor2
00001FE2 3202                       		move.w	d2,d1
00001FE4 0241 00E0                  		andi.w	#$E0,d1
00001FE8 0C41 00E0                  		cmpi.w	#$E0,d1
00001FEC 6700                       		beq.s	loc_1FF4
00001FEE 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001FF2 4E75                       		rts	
00001FF4                            ; ===========================================================================
00001FF4                            
00001FF4                            loc_1FF4:				; XREF: loc_1FE2
00001FF4 3202                       		move.w	d2,d1
00001FF6 0241 0E00                  		andi.w	#$E00,d1
00001FFA 0C41 0E00                  		cmpi.w	#$E00,d1
00001FFE 6700                       		beq.s	loc_2006
00002000 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002004 4E75                       		rts	
00002006                            ; ===========================================================================
00002006                            
00002006                            loc_2006:				; XREF: Pal_AddColor2
00002006 5448                       		addq.w	#2,a0
00002008 4E75                       		rts	
0000200A                            ; End of function Pal_AddColor2
0000200A                            
0000200A                            ; ---------------------------------------------------------------------------
0000200A                            ; Pallet cycling routine - Sega	logo
0000200A                            ; ---------------------------------------------------------------------------
0000200A                            
0000200A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000200A                            
0000200A                            
0000200A                            PalCycle_Sega:				; XREF: SegaScreen
0000200A 4A38 F635                  		tst.b	($FFFFF635).w
0000200E 6600                       		bne.s	loc_206A
00002010 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002014 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000201A 7205                       		moveq	#5,d1
0000201C 3038 F632                  		move.w	($FFFFF632).w,d0
00002020                            
00002020                            loc_2020:
00002020 6A00                       		bpl.s	loc_202A
00002022 5448                       		addq.w	#2,a0
00002024 5341                       		subq.w	#1,d1
00002026 5440                       		addq.w	#2,d0
00002028 60F6                       		bra.s	loc_2020
0000202A                            ; ===========================================================================
0000202A                            
0000202A                            loc_202A:				; XREF: PalCycle_Sega
0000202A 3400                       		move.w	d0,d2
0000202C 0242 001E                  		andi.w	#$1E,d2
00002030 6600                       		bne.s	loc_2034
00002032 5440                       		addq.w	#2,d0
00002034                            
00002034                            loc_2034:
00002034 0C40 0060                  		cmpi.w	#$60,d0
00002038 6400                       		bcc.s	loc_203E
0000203A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000203E                            
0000203E                            loc_203E:
0000203E 5440                       		addq.w	#2,d0
00002040 51C9 FFE8                  		dbf	d1,loc_202A
00002044 3038 F632                  		move.w	($FFFFF632).w,d0
00002048 5440                       		addq.w	#2,d0
0000204A 3400                       		move.w	d0,d2
0000204C 0242 001E                  		andi.w	#$1E,d2
00002050 6600                       		bne.s	loc_2054
00002052 5440                       		addq.w	#2,d0
00002054                            
00002054                            loc_2054:
00002054 0C40 0064                  		cmpi.w	#$64,d0
00002058 6D00                       		blt.s	loc_2062
0000205A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002060 70F4                       		moveq	#-$C,d0
00002062                            
00002062                            loc_2062:
00002062 31C0 F632                  		move.w	d0,($FFFFF632).w
00002066 7001                       		moveq	#1,d0
00002068 4E75                       		rts	
0000206A                            ; ===========================================================================
0000206A                            
0000206A                            loc_206A:				; XREF: loc_202A
0000206A 5338 F634                  		subq.b	#1,($FFFFF634).w
0000206E 6A00                       		bpl.s	loc_20BC
00002070 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002076 3038 F632                  		move.w	($FFFFF632).w,d0
0000207A 0640 000C                  		addi.w	#$C,d0
0000207E 0C40 0030                  		cmpi.w	#$30,d0
00002082 6500                       		bcs.s	loc_2088
00002084 7000                       		moveq	#0,d0
00002086 4E75                       		rts	
00002088                            ; ===========================================================================
00002088                            
00002088                            loc_2088:				; XREF: loc_206A
00002088 31C0 F632                  		move.w	d0,($FFFFF632).w
0000208C 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002092 41F0 0000                  		lea	(a0,d0.w),a0
00002096 43F8 FB04                  		lea	($FFFFFB04).w,a1
0000209A 22D8                       		move.l	(a0)+,(a1)+
0000209C 22D8                       		move.l	(a0)+,(a1)+
0000209E 3298                       		move.w	(a0)+,(a1)
000020A0 43F8 FB20                  		lea	($FFFFFB20).w,a1
000020A4 7000                       		moveq	#0,d0
000020A6 722C                       		moveq	#$2C,d1
000020A8                            
000020A8                            loc_20A8:
000020A8 3400                       		move.w	d0,d2
000020AA 0242 001E                  		andi.w	#$1E,d2
000020AE 6600                       		bne.s	loc_20B2
000020B0 5440                       		addq.w	#2,d0
000020B2                            
000020B2                            loc_20B2:
000020B2 3390 0000                  		move.w	(a0),(a1,d0.w)
000020B6 5440                       		addq.w	#2,d0
000020B8 51C9 FFEE                  		dbf	d1,loc_20A8
000020BC                            
000020BC                            loc_20BC:
000020BC 7001                       		moveq	#1,d0
000020BE 4E75                       		rts	
000020C0                            ; End of function PalCycle_Sega
000020C0                            
000020C0                            ; ===========================================================================
000020C0                            
000020C0                            Pal_Sega1:	incbin	pallet\sega1.bin
000020CC                            Pal_Sega2:	incbin	pallet\sega2.bin
000020FC                            
000020FC                            ; ---------------------------------------------------------------------------
000020FC                            ; Subroutines to load pallets
000020FC                            ; ---------------------------------------------------------------------------
000020FC                            
000020FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020FC                            
000020FC                            
000020FC                            PalLoad1:
000020FC 43F9 0000 0000             		lea	(PalPointers).l,a1
00002102 E748                       		lsl.w	#3,d0
00002104 D2C0                       		adda.w	d0,a1
00002106 2459                       		movea.l	(a1)+,a2
00002108 3659                       		movea.w	(a1)+,a3
0000210A D6FC 0080                  		adda.w	#$80,a3
0000210E 3E19                       		move.w	(a1)+,d7
00002110                            
00002110                            loc_2110:
00002110 26DA                       		move.l	(a2)+,(a3)+
00002112 51CF FFFC                  		dbf	d7,loc_2110
00002116 4E75                       		rts	
00002118                            ; End of function PalLoad1
00002118                            
00002118                            
00002118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002118                            
00002118                            
00002118                            PalLoad2:
00002118 43F9 0000 0000             		lea	(PalPointers).l,a1
0000211E E748                       		lsl.w	#3,d0
00002120 D2C0                       		adda.w	d0,a1
00002122 2459                       		movea.l	(a1)+,a2
00002124 3659                       		movea.w	(a1)+,a3
00002126 3E19                       		move.w	(a1)+,d7
00002128                            
00002128                            loc_2128:
00002128 26DA                       		move.l	(a2)+,(a3)+
0000212A 51CF FFFC                  		dbf	d7,loc_2128
0000212E 4E75                       		rts	
00002130                            ; End of function PalLoad2
00002130                            
00002130                            ; ---------------------------------------------------------------------------
00002130                            ; Underwater pallet loading subroutine
00002130                            ; ---------------------------------------------------------------------------
00002130                            
00002130                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002130                            
00002130                            
00002130                            PalLoad3_Water:
00002130 43F9 0000 0000             		lea	(PalPointers).l,a1
00002136 E748                       		lsl.w	#3,d0
00002138 D2C0                       		adda.w	d0,a1
0000213A 2459                       		movea.l	(a1)+,a2
0000213C 3659                       		movea.w	(a1)+,a3
0000213E 96FC 0080                  		suba.w	#$80,a3
00002142 3E19                       		move.w	(a1)+,d7
00002144                            
00002144                            loc_2144:
00002144 26DA                       		move.l	(a2)+,(a3)+
00002146 51CF FFFC                  		dbf	d7,loc_2144
0000214A 4E75                       		rts	
0000214C                            ; End of function PalLoad3_Water
0000214C                            
0000214C                            
0000214C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000214C                            
0000214C                            
0000214C                            PalLoad4_Water:
0000214C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002152 E748                       		lsl.w	#3,d0
00002154 D2C0                       		adda.w	d0,a1
00002156 2459                       		movea.l	(a1)+,a2
00002158 3659                       		movea.w	(a1)+,a3
0000215A 96FC 0100                  		suba.w	#$100,a3
0000215E 3E19                       		move.w	(a1)+,d7
00002160                            
00002160                            loc_2160:
00002160 26DA                       		move.l	(a2)+,(a3)+
00002162 51CF FFFC                  		dbf	d7,loc_2160
00002166 4E75                       		rts	
00002168                            ; End of function PalLoad4_Water
00002168                            
00002168                            ; ===========================================================================
00002168                            ; ---------------------------------------------------------------------------
00002168                            ; Pallet pointers
00002168                            ; ---------------------------------------------------------------------------
00002168                            PalPointers:
00002168                            	include "_inc\Pallet pointers.asm"
00002168                            ; ---------------------------------------------------------------------------
00002168                            ; Pallet pointers
00002168                            ; ---------------------------------------------------------------------------
00002168 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000216C FB00                       	dc.w $FB00		; RAM address
0000216E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002170 0000 0000                  	dc.l Pal_Title
00002174 FB00                       	dc.w $FB00
00002176 001F                       	dc.w $1F
00002178 0000 0000                  	dc.l Pal_LevelSel
0000217C FB00                       	dc.w $FB00
0000217E 001F                       	dc.w $1F
00002180 0000 0000                  	dc.l Pal_Sonic
00002184 FB00                       	dc.w $FB00
00002186 0007                       	dc.w 7
00002188 0000 0000                  	dc.l Pal_GHZ
0000218C FB20                       	dc.w $FB20
0000218E 0017                       	dc.w $17
00002190 0000 0000                  	dc.l Pal_LZ
00002194 FB20                       	dc.w $FB20
00002196 0017                       	dc.w $17
00002198 0000 0000                  	dc.l Pal_MZ
0000219C FB20                       	dc.w $FB20
0000219E 0017                       	dc.w $17
000021A0 0000 0000                  	dc.l Pal_SLZ
000021A4 FB20                       	dc.w $FB20
000021A6 0017                       	dc.w $17
000021A8 0000 0000                  	dc.l Pal_SYZ
000021AC FB20                       	dc.w $FB20
000021AE 0017                       	dc.w $17
000021B0 0000 0000                  	dc.l Pal_SBZ1
000021B4 FB20                       	dc.w $FB20
000021B6 0017                       	dc.w $17
000021B8 0000 0000                  	dc.l Pal_Special
000021BC FB00                       	dc.w $FB00
000021BE 001F                       	dc.w $1F
000021C0 0000 0000                  	dc.l Pal_LZWater
000021C4 FB00                       	dc.w $FB00
000021C6 001F                       	dc.w $1F
000021C8 0000 0000                  	dc.l Pal_SBZ3
000021CC FB20                       	dc.w $FB20
000021CE 0017                       	dc.w $17
000021D0 0000 0000                  	dc.l Pal_SBZ3Water
000021D4 FB00                       	dc.w $FB00
000021D6 001F                       	dc.w $1F
000021D8 0000 0000                  	dc.l Pal_SBZ2
000021DC FB20                       	dc.w $FB20
000021DE 0017                       	dc.w $17
000021E0 0000 0000                  	dc.l Pal_LZSonWater
000021E4 FB00                       	dc.w $FB00
000021E6 0007                       	dc.w 7
000021E8 0000 0000                  	dc.l Pal_SBZ3SonWat
000021EC FB00                       	dc.w $FB00
000021EE 0007                       	dc.w 7
000021F0 0000 0000                  	dc.l Pal_SpeResult
000021F4 FB00                       	dc.w $FB00
000021F6 001F                       	dc.w $1F
000021F8 0000 0000                  	dc.l Pal_SpeContinue
000021FC FB00                       	dc.w $FB00
000021FE 000F                       	dc.w $F
00002200 0000 0000                  	dc.l Pal_Ending
00002204 FB00                       	dc.w $FB00
00002206 001F                       	dc.w $1F
00002206 001F                       	dc.w $1F
00002208                            
00002208                            ; ---------------------------------------------------------------------------
00002208                            ; Pallet data
00002208                            ; ---------------------------------------------------------------------------
00002208                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002288                            Pal_Title:	incbin	pallet\title.bin
00002308                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002388                            Pal_Sonic:	incbin	pallet\sonic.bin
000023A8                            Pal_GHZ:	incbin	pallet\ghz.bin
00002408                            Pal_LZ:		incbin	pallet\lz.bin
00002468                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000024E8                            Pal_MZ:		incbin	pallet\mz.bin
00002548                            Pal_SLZ:	incbin	pallet\slz.bin
000025A8                            Pal_SYZ:	incbin	pallet\syz.bin
00002608                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002668                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000026C8                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002748                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000027A8                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002828                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002848                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002868                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000028E8                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002928                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
000029A8                            
000029A8                            ; ---------------------------------------------------------------------------
000029A8                            ; Subroutine to	delay the program by ($FFFFF62A) frames
000029A8                            ; ---------------------------------------------------------------------------
000029A8                            
000029A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029A8                            
000029A8                            
000029A8                            DelayProgram:				; XREF: PauseGame
000029A8 46FC 2300                  		move	#$2300,sr
000029AC                            
000029AC                            loc_29AC:
000029AC 4A38 F62A                  		tst.b	($FFFFF62A).w
000029B0 66FA                       		bne.s	loc_29AC
000029B2 4E75                       		rts	
000029B4                            ; End of function DelayProgram
000029B4                            
000029B4                            ; ---------------------------------------------------------------------------
000029B4                            ; Subroutine to	generate a pseudo-random number	in d0
000029B4                            ; ---------------------------------------------------------------------------
000029B4                            
000029B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029B4                            
000029B4                            
000029B4                            RandomNumber:
000029B4 2238 F636                  		move.l	($FFFFF636).w,d1
000029B8 6600                       		bne.s	loc_29C0
000029BA 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000029C0                            
000029C0                            loc_29C0:
000029C0 2001                       		move.l	d1,d0
000029C2 E581                       		asl.l	#2,d1
000029C4 D280                       		add.l	d0,d1
000029C6 E781                       		asl.l	#3,d1
000029C8 D280                       		add.l	d0,d1
000029CA 3001                       		move.w	d1,d0
000029CC 4841                       		swap	d1
000029CE D041                       		add.w	d1,d0
000029D0 3200                       		move.w	d0,d1
000029D2 4841                       		swap	d1
000029D4 21C1 F636                  		move.l	d1,($FFFFF636).w
000029D8 4E75                       		rts	
000029DA                            ; End of function RandomNumber
000029DA                            
000029DA                            
000029DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029DA                            
000029DA                            
000029DA                            CalcSine:				; XREF: SS_BGAnimate; et al
000029DA 0240 00FF                  		andi.w	#$FF,d0
000029DE D040                       		add.w	d0,d0
000029E0 0640 0080                  		addi.w	#$80,d0
000029E4 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
000029E8 0440 0080                  		subi.w	#$80,d0
000029EC 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
000029F0 4E75                       		rts	
000029F2                            ; End of function CalcSine
000029F2                            
000029F2                            ; ===========================================================================
000029F2                            
000029F2                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002C72                            
00002C72                            ; ===========================================================================
00002C72 48E7 6000                  		movem.l	d1-d2,-(sp)
00002C76 3200                       		move.w	d0,d1
00002C78 4841                       		swap	d1
00002C7A 7000                       		moveq	#0,d0
00002C7C 3200                       		move.w	d0,d1
00002C7E 7407                       		moveq	#7,d2
00002C80                            
00002C80                            loc_2C80:
00002C80 E599                       		rol.l	#2,d1
00002C82 D040                       		add.w	d0,d0
00002C84 5240                       		addq.w	#1,d0
00002C86 9240                       		sub.w	d0,d1
00002C88 6400                       		bcc.s	loc_2C9A
00002C8A D240                       		add.w	d0,d1
00002C8C 5340                       		subq.w	#1,d0
00002C8E 51CA FFF0                  		dbf	d2,loc_2C80
00002C92 E248                       		lsr.w	#1,d0
00002C94 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002C98 4E75                       		rts	
00002C9A                            ; ===========================================================================
00002C9A                            
00002C9A                            loc_2C9A:
00002C9A 5240                       		addq.w	#1,d0
00002C9C 51CA FFE2                  		dbf	d2,loc_2C80
00002CA0 E248                       		lsr.w	#1,d0
00002CA2 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002CA6 4E75                       		rts	
00002CA8                            
00002CA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CA8                            
00002CA8                            
00002CA8                            CalcAngle:
00002CA8 48E7 1800                  		movem.l	d3-d4,-(sp)
00002CAC 7600                       		moveq	#0,d3
00002CAE 7800                       		moveq	#0,d4
00002CB0 3601                       		move.w	d1,d3
00002CB2 3802                       		move.w	d2,d4
00002CB4 8843                       		or.w	d3,d4
00002CB6 6700                       		beq.s	loc_2D04
00002CB8 3802                       		move.w	d2,d4
00002CBA 4A43                       		tst.w	d3
00002CBC 6A00 0000                  		bpl.w	loc_2CC2
00002CC0 4443                       		neg.w	d3
00002CC2                            
00002CC2                            loc_2CC2:
00002CC2 4A44                       		tst.w	d4
00002CC4 6A00 0000                  		bpl.w	loc_2CCA
00002CC8 4444                       		neg.w	d4
00002CCA                            
00002CCA                            loc_2CCA:
00002CCA B843                       		cmp.w	d3,d4
00002CCC 6400 0000                  		bcc.w	loc_2CDC
00002CD0 E18C                       		lsl.l	#8,d4
00002CD2 88C3                       		divu.w	d3,d4
00002CD4 7000                       		moveq	#0,d0
00002CD6 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002CDA 6000                       		bra.s	loc_2CE6
00002CDC                            ; ===========================================================================
00002CDC                            
00002CDC                            loc_2CDC:				; XREF: CalcAngle
00002CDC E18B                       		lsl.l	#8,d3
00002CDE 86C4                       		divu.w	d4,d3
00002CE0 7040                       		moveq	#$40,d0
00002CE2 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002CE6                            
00002CE6                            loc_2CE6:
00002CE6 4A41                       		tst.w	d1
00002CE8 6A00 0000                  		bpl.w	loc_2CF2
00002CEC 4440                       		neg.w	d0
00002CEE 0640 0080                  		addi.w	#$80,d0
00002CF2                            
00002CF2                            loc_2CF2:
00002CF2 4A42                       		tst.w	d2
00002CF4 6A00 0000                  		bpl.w	loc_2CFE
00002CF8 4440                       		neg.w	d0
00002CFA 0640 0100                  		addi.w	#$100,d0
00002CFE                            
00002CFE                            loc_2CFE:
00002CFE 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002D02 4E75                       		rts	
00002D04                            ; ===========================================================================
00002D04                            
00002D04                            loc_2D04:				; XREF: CalcAngle
00002D04 303C 0040                  		move.w	#$40,d0
00002D08 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002D0C 4E75                       		rts	
00002D0E                            ; End of function CalcAngle
00002D0E                            
00002D0E                            ; ===========================================================================
00002D0E                            
00002D0E                            Angle_Data:	incbin	misc\angles.bin
00002E10                            
00002E10                            ; ===========================================================================
00002E10                            
00002E10                            ; ---------------------------------------------------------------------------
00002E10                            ; Sega screen
00002E10                            ; ---------------------------------------------------------------------------
00002E10                            
00002E10                            SegaScreen:				; XREF: GameModeArray
00002E10 103C 00E4                  		move.b	#$E4,d0
00002E14 6100 E586                  		bsr.w	PlaySound_Special ; stop music
00002E18 6100 E7C4                  		bsr.w	ClearPLC
00002E1C 6100 F034                  		bsr.w	Pal_FadeFrom
00002E20 4DF9 00C0 0004             		lea	($C00004).l,a6
00002E26 3CBC 8004                  		move.w	#$8004,(a6)
00002E2A 3CBC 8230                  		move.w	#$8230,(a6)
00002E2E 3CBC 8407                  		move.w	#$8407,(a6)
00002E32 3CBC 8700                  		move.w	#$8700,(a6)
00002E36 3CBC 8B00                  		move.w	#$8B00,(a6)
00002E3A 4238 F64E                  		clr.b	($FFFFF64E).w
00002E3E 46FC 2700                  		move	#$2700,sr
00002E42 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002E46 0200 00BF                  		andi.b	#$BF,d0
00002E4A 33C0 00C0 0004             		move.w	d0,($C00004).l
00002E50 6100 E472                  		bsr.w	ClearScreen
00002E54 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002E5E 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00002E64 6100 E5DA                  		bsr.w	NemDec
00002E68 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E6E 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00002E74 303C 0000                  		move.w	#0,d0
00002E78 6100 E8A4                  		bsr.w	EniDec
00002E7C 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E82 203C 6510 0003             		move.l	#$65100003,d0
00002E88 7217                       		moveq	#$17,d1
00002E8A 7407                       		moveq	#7,d2
00002E8C 6100 E592                  		bsr.w	ShowVDPGraphics
00002E90 43F9 00FF 0180             		lea	($FF0180).l,a1
00002E96 203C 4000 0003             		move.l	#$40000003,d0
00002E9C 7227                       		moveq	#$27,d1
00002E9E 741B                       		moveq	#$1B,d2
00002EA0 6100 E57E                  		bsr.w	ShowVDPGraphics
00002EA4 7000                       		moveq	#0,d0
00002EA6 6100 F270                  		bsr.w	PalLoad2	; load Sega logo pallet
00002EAA 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00002EB0 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00002EB6 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00002EBC 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00002EC2 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002EC6 0000 0040                  		ori.b	#$40,d0
00002ECA 33C0 00C0 0004             		move.w	d0,($C00004).l
00002ED0                            
00002ED0                            Sega_WaitPallet:
00002ED0 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002ED6 6100 FAD0                  		bsr.w	DelayProgram
00002EDA 6100 F12E                  		bsr.w	PalCycle_Sega
00002EDE 66F0                       		bne.s	Sega_WaitPallet
00002EE0                            
00002EE0 103C 00E1                  		move.b	#$E1,d0
00002EE4 6100 E4B6                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00002EE8 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00002EEE 6100 FAB8                  		bsr.w	DelayProgram
00002EF2 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00002EF8                            
00002EF8                            Sega_WaitEnd:
00002EF8 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EFE 6100 FAA8                  		bsr.w	DelayProgram
00002F02 4A78 F614                  		tst.w	($FFFFF614).w
00002F06 6700                       		beq.s	Sega_GotoTitle
00002F08 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00002F0E 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00002F10                            
00002F10                            Sega_GotoTitle:
00002F10 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00002F16 4E75                       		rts	
00002F18                            ; ===========================================================================
00002F18                            
00002F18                            ; ---------------------------------------------------------------------------
00002F18                            ; Title	screen
00002F18                            ; ---------------------------------------------------------------------------
00002F18                            
00002F18                            TitleScreen:				; XREF: GameModeArray
00002F18 103C 00E4                  		move.b	#$E4,d0
00002F1C 6100 E47E                  		bsr.w	PlaySound_Special ; stop music
00002F20 6100 E6BC                  		bsr.w	ClearPLC
00002F24 6100 EF2C                  		bsr.w	Pal_FadeFrom
00002F28 46FC 2700                  		move	#$2700,sr
00002F2C 6100 E424                  		bsr.w	SoundDriverLoad
00002F30 4DF9 00C0 0004             		lea	($C00004).l,a6
00002F36 3CBC 8004                  		move.w	#$8004,(a6)
00002F3A 3CBC 8230                  		move.w	#$8230,(a6)
00002F3E 3CBC 8407                  		move.w	#$8407,(a6)
00002F42 3CBC 9001                  		move.w	#$9001,(a6)
00002F46 3CBC 9200                  		move.w	#$9200,(a6)
00002F4A 3CBC 8B03                  		move.w	#$8B03,(a6)
00002F4E 3CBC 8720                  		move.w	#$8720,(a6)
00002F52 4238 F64E                  		clr.b	($FFFFF64E).w
00002F56 6100 E36C                  		bsr.w	ClearScreen
00002F5A 43F8 D000                  		lea	($FFFFD000).w,a1
00002F5E 7000                       		moveq	#0,d0
00002F60 323C 07FF                  		move.w	#$7FF,d1
00002F64                            
00002F64                            Title_ClrObjRam:
00002F64 22C0                       		move.l	d0,(a1)+
00002F66 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00002F6A                            
00002F6A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002F74 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00002F7A 6100 E4C4                  		bsr.w	NemDec
00002F7E 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00002F88 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00002F8E 6100 E4B0                  		bsr.w	NemDec
00002F92 43F9 00FF 0000             		lea	($FF0000).l,a1
00002F98 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00002F9E 303C 0000                  		move.w	#0,d0
00002FA2 6100 E77A                  		bsr.w	EniDec
00002FA6 43F9 00FF 0000             		lea	($FF0000).l,a1
00002FAC 203C 4000 0003             		move.l	#$40000003,d0
00002FB2 7227                       		moveq	#$27,d1
00002FB4 741B                       		moveq	#$1B,d2
00002FB6 6100 E468                  		bsr.w	ShowVDPGraphics
00002FBA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002FBE 7000                       		moveq	#0,d0
00002FC0 323C 001F                  		move.w	#$1F,d1
00002FC4                            
00002FC4                            Title_ClrPallet:
00002FC4 22C0                       		move.l	d0,(a1)+
00002FC6 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00002FCA                            
00002FCA 7003                       		moveq	#3,d0		; load Sonic's pallet
00002FCC 6100 F12E                  		bsr.w	PalLoad1
00002FD0 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00002FD6 4EB9 0000 0000             		jsr	ObjectsLoad
00002FDC 4EB9 0000 0000             		jsr	BuildSprites
00002FE2 6100 EDC8                  		bsr.w	Pal_FadeTo
00002FE6 46FC 2700                  		move	#$2700,sr
00002FEA 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00002FF4 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00002FFA 6100 E444                  		bsr.w	NemDec
00002FFE 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003008 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
0000300E 6100 E430                  		bsr.w	NemDec
00003012 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
0000301C 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003022 6100 E41C                  		bsr.w	NemDec
00003026 4DF9 00C0 0000             		lea	($C00000).l,a6
0000302C 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003034 4BF9 0000 05F0             		lea	(Art_Text).l,a5
0000303A 323C 028F                  		move.w	#$28F,d1
0000303E                            
0000303E                            Title_LoadText:
0000303E 3C9D                       		move.w	(a5)+,(a6)
00003040 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003044                            
00003044 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
0000304A 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003050 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003056 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
0000305C 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003062 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003068 6100 0000                  		bsr.w	LevelSizeLoad
0000306C 6100 0000                  		bsr.w	DeformBgLayer
00003070 43F8 B000                  		lea	($FFFFB000).w,a1
00003074 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
0000307A 303C 0000                  		move.w	#0,d0
0000307E 6100 E69E                  		bsr.w	EniDec
00003082 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003088 43F9 00FF 0000             		lea	($FF0000).l,a1
0000308E 6100 E80C                  		bsr.w	KosDec
00003092 6100 0000                  		bsr.w	LevelLayoutLoad
00003096 6100 EDBA                  		bsr.w	Pal_FadeFrom
0000309A 46FC 2700                  		move	#$2700,sr
0000309E 6100 E224                  		bsr.w	ClearScreen
000030A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000030A8 4DF9 00C0 0000             		lea	($C00000).l,a6
000030AE 47F8 F708                  		lea	($FFFFF708).w,a3
000030B2 49F8 A440                  		lea	($FFFFA440).w,a4
000030B6 343C 6000                  		move.w	#$6000,d2
000030BA 6100 0000                  		bsr.w	LoadTilesFromStart2
000030BE 43F9 00FF 0000             		lea	($FF0000).l,a1
000030C4 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000030CA 303C 0000                  		move.w	#0,d0
000030CE 6100 E64E                  		bsr.w	EniDec
000030D2 43F9 00FF 0000             		lea	($FF0000).l,a1
000030D8 203C 4206 0003             		move.l	#$42060003,d0
000030DE 7221                       		moveq	#$21,d1
000030E0 7415                       		moveq	#$15,d2
000030E2 6100 E33C                  		bsr.w	ShowVDPGraphics
000030E6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030F0 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000030F6 6100 E348                  		bsr.w	NemDec
000030FA 7001                       		moveq	#1,d0		; load title screen pallet
000030FC 6100 EFFE                  		bsr.w	PalLoad1
00003100 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003104 6100 E296                  		bsr.w	PlaySound_Special
00003108 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
0000310E 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003114 43F8 D080                  		lea	($FFFFD080).w,a1
00003118 7000                       		moveq	#0,d0
0000311A 323C 0007                  		move.w	#7,d1
0000311E                            
0000311E                            Title_ClrObjRam2:
0000311E 22C0                       		move.l	d0,(a1)+
00003120 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003124                            
00003124 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000312A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003130 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003136 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0000313C 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003142 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003148 4EB9 0000 0000             		jsr	ObjectsLoad
0000314E 6100 0000                  		bsr.w	DeformBgLayer
00003152 4EB9 0000 0000             		jsr	BuildSprites
00003158 7000                       		moveq	#0,d0
0000315A 6100 E456                  		bsr.w	LoadPLC2
0000315E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003164 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
0000316A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000316E 0000 0040                  		ori.b	#$40,d0
00003172 33C0 00C0 0004             		move.w	d0,($C00004).l
00003178 6100 EC32                  		bsr.w	Pal_FadeTo
0000317C                            
0000317C                            loc_317C:
0000317C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003182 6100 F824                  		bsr.w	DelayProgram
00003186 4EB9 0000 0000             		jsr	ObjectsLoad
0000318C 6100 0000                  		bsr.w	DeformBgLayer
00003190 4EB9 0000 0000             		jsr	BuildSprites
00003196 6100 E7C4                  		bsr.w	PalCycle_Title
0000319A 6100 E450                  		bsr.w	RunPLC_RAM
0000319E 3038 D008                  		move.w	($FFFFD008).w,d0
000031A2 5440                       		addq.w	#2,d0
000031A4 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000031A8 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000031AC 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000031AE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000031B4 4E75                       		rts	
000031B6                            ; ===========================================================================
000031B6                            
000031B6                            Title_ChkRegion:
000031B6 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
000031BA 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
000031BC 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000031C2 6000                       		bra.s	Title_EnterCheat
000031C4                            ; ===========================================================================
000031C4                            
000031C4                            Title_RegionJ:				; XREF: Title_ChkRegion
000031C4 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000031CA                            
000031CA                            Title_EnterCheat:			; XREF: Title_ChkRegion
000031CA 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000031CE D0C0                       		adda.w	d0,a0
000031D0 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000031D4 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000031D8 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000031DA 6600                       		bne.s	loc_3210	; if not, branch
000031DC 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000031E0 4A00                       		tst.b	d0
000031E2 6600                       		bne.s	Title_CountC
000031E4 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000031E8 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000031EC E249                       		lsr.w	#1,d1
000031EE 0241 0003                  		andi.w	#3,d1
000031F2 6700                       		beq.s	Title_PlayRing
000031F4 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000031F8 6A00                       		bpl.s	Title_PlayRing
000031FA 7201                       		moveq	#1,d1
000031FC 1181 1001                  		move.b	d1,1(a0,d1.w)
00003200                            
00003200                            Title_PlayRing:
00003200 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003206 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
0000320A 6100 E190                  		bsr.w	PlaySound_Special
0000320E 6000                       		bra.s	Title_CountC
00003210                            ; ===========================================================================
00003210                            
00003210                            loc_3210:				; XREF: Title_EnterCheat
00003210 4A00                       		tst.b	d0
00003212 6700                       		beq.s	Title_CountC
00003214 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
0000321A 6700                       		beq.s	Title_CountC
0000321C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003222                            
00003222                            Title_CountC:
00003222 1038 F605                  		move.b	($FFFFF605).w,d0
00003226 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
0000322A 6700                       		beq.s	loc_3230	; if not, branch
0000322C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003230                            
00003230                            loc_3230:
00003230 4A78 F614                  		tst.w	($FFFFF614).w
00003234 6700 0000                  		beq.w	Demo
00003238 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
0000323E 6700 FF3C                  		beq.w	loc_317C	; if not, branch
00003242                            
00003242                            Title_ChkLevSel:
00003242 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003246 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000324A 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003250 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003254 7002                       		moveq	#2,d0
00003256 6100 EEC0                  		bsr.w	PalLoad2	; load level select pallet
0000325A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000325E 7000                       		moveq	#0,d0
00003260 323C 00DF                  		move.w	#$DF,d1
00003264                            
00003264                            Title_ClrScroll:
00003264 22C0                       		move.l	d0,(a1)+
00003266 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
0000326A                            
0000326A 21C0 F616                  		move.l	d0,($FFFFF616).w
0000326E 46FC 2700                  		move	#$2700,sr
00003272 4DF9 00C0 0000             		lea	($C00000).l,a6
00003278 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003282 323C 03FF                  		move.w	#$3FF,d1
00003286                            
00003286                            Title_ClrVram:
00003286 2C80                       		move.l	d0,(a6)
00003288 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000328C                            
0000328C 6100 0000                  		bsr.w	LevSelTextLoad
00003290                            
00003290                            ; ---------------------------------------------------------------------------
00003290                            ; Level	Select
00003290                            ; ---------------------------------------------------------------------------
00003290                            
00003290                            LevelSelect:
00003290 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003296 6100 F710                  		bsr.w	DelayProgram
0000329A 6100 0000                  		bsr.w	LevSelControls
0000329E 6100 E34C                  		bsr.w	RunPLC_RAM
000032A2 4AB8 F680                  		tst.l	($FFFFF680).w
000032A6 66E8                       		bne.s	LevelSelect
000032A8 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000032AE 67E0                       		beq.s	LevelSelect	; if not, branch
000032B0 3038 FF82                  		move.w	($FFFFFF82).w,d0
000032B4 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
000032B8 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000032BA 3038 FF84                  		move.w	($FFFFFF84).w,d0
000032BE 0640 0080                  		addi.w	#$80,d0
000032C2 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
000032C6 6700                       		beq.s	LevSel_NoCheat	; if not, branch
000032C8 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
000032CC 6700                       		beq.s	LevSel_Ending	; if yes, branch
000032CE 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
000032D2 6700                       		beq.s	LevSel_Credits	; if yes, branch
000032D4                            
000032D4                            LevSel_NoCheat:
000032D4 0C40 0094                  		cmpi.w	#$94,d0		; is sound $80-$94 being played?
000032D8 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
000032DA 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
000032DE 65B0                       		bcs.s	LevelSelect	; if yes, branch
000032E0                            
000032E0                            LevSel_PlaySnd:
000032E0 6100 E0BA                  		bsr.w	PlaySound_Special
000032E4 60AA                       		bra.s	LevelSelect
000032E6                            ; ===========================================================================
000032E6                            
000032E6                            LevSel_Ending:				; XREF: LevelSelect
000032E6 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000032EC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000032F2 4E75                       		rts	
000032F4                            ; ===========================================================================
000032F4                            
000032F4                            LevSel_Credits:				; XREF: LevelSelect
000032F4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000032FA 103C 0091                  		move.b	#$91,d0
000032FE 6100 E09C                  		bsr.w	PlaySound_Special ; play credits music
00003302 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003308 4E75                       		rts	
0000330A                            ; ===========================================================================
0000330A                            
0000330A                            LevSel_Level_SS:			; XREF: LevelSelect
0000330A D040                       		add.w	d0,d0
0000330C 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003310 6B00 FF7E                  		bmi.w	LevelSelect
00003314 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003318 6600                       		bne.s	LevSel_Level	; if not, branch
0000331A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003320 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003324 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000332A 7000                       		moveq	#0,d0
0000332C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003330 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003334 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003338 4E75                       		rts	
0000333A                            ; ===========================================================================
0000333A                            
0000333A                            LevSel_Level:				; XREF: LevSel_Level_SS
0000333A 0240 3FFF                  		andi.w	#$3FFF,d0
0000333E 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003342                            
00003342                            PlayLevel:				; XREF: ROM:00003246j ...
00003342 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003348 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000334E 7000                       		moveq	#0,d0
00003350 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003354 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003358 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000335C 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003360 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003364 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003368 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
0000336C 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003370 103C 00E0                  		move.b	#$E0,d0
00003374 6100 E026                  		bsr.w	PlaySound_Special ; fade out music
00003378 4E75                       		rts	
0000337A                            ; ===========================================================================
0000337A                            ; ---------------------------------------------------------------------------
0000337A                            ; Level	select - level pointers
0000337A                            ; ---------------------------------------------------------------------------
0000337A                            LSelectPointers:
0000337A                            		incbin	misc\ls_point.bin
000033A4                            		even
000033A4                            ; ---------------------------------------------------------------------------
000033A4                            ; Level	select codes
000033A4                            ; ---------------------------------------------------------------------------
000033A4                            LevelSelectCode_J:
000033A4                            		incbin	misc\ls_jcode.bin
000033AA                            		even
000033AA                            
000033AA                            LevelSelectCode_US:
000033AA                            		incbin	misc\ls_ucode.bin
000033B0                            		even
000033B0                            ; ===========================================================================
000033B0                            
000033B0                            ; ---------------------------------------------------------------------------
000033B0                            ; Demo mode
000033B0                            ; ---------------------------------------------------------------------------
000033B0                            
000033B0                            Demo:					; XREF: TitleScreen
000033B0 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000033B6                            
000033B6                            loc_33B6:				; XREF: loc_33E4
000033B6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000033BC 6100 F5EA                  		bsr.w	DelayProgram
000033C0 6100 0000                  		bsr.w	DeformBgLayer
000033C4 6100 E576                  		bsr.w	PalCycle_Load
000033C8 6100 E222                  		bsr.w	RunPLC_RAM
000033CC 3038 D008                  		move.w	($FFFFD008).w,d0
000033D0 5440                       		addq.w	#2,d0
000033D2 31C0 D008                  		move.w	d0,($FFFFD008).w
000033D6 0C40 1C00                  		cmpi.w	#$1C00,d0
000033DA 6500                       		bcs.s	loc_33E4
000033DC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
000033E2 4E75                       		rts	
000033E4                            ; ===========================================================================
000033E4                            
000033E4                            loc_33E4:				; XREF: Demo
000033E4 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000033EA 6600 FE56                  		bne.w	Title_ChkLevSel	; if yes, branch
000033EE 4A78 F614                  		tst.w	($FFFFF614).w
000033F2 6600 FFC2                  		bne.w	loc_33B6
000033F6 103C 00E0                  		move.b	#$E0,d0
000033FA 6100 DFA0                  		bsr.w	PlaySound_Special ; fade out music
000033FE 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003402 0240 0007                  		andi.w	#7,d0
00003406 D040                       		add.w	d0,d0
00003408 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
0000340C 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003410 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003414 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
0000341A 6500                       		bcs.s	loc_3422	; if yes, branch
0000341C 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003422                            
00003422                            loc_3422:
00003422 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003428 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
0000342E 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003432 6600                       		bne.s	Demo_Level	; if not, branch
00003434 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000343A 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
0000343E 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003442                            
00003442                            Demo_Level:
00003442 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003448 7000                       		moveq	#0,d0
0000344A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000344E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003452 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003456 4E75                       		rts	
00003458                            ; ===========================================================================
00003458                            ; ---------------------------------------------------------------------------
00003458                            ; Levels used in demos
00003458                            ; ---------------------------------------------------------------------------
00003458                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003460                            		even
00003460                            
00003460                            ; ---------------------------------------------------------------------------
00003460                            ; Subroutine to	change what you're selecting in the level select
00003460                            ; ---------------------------------------------------------------------------
00003460                            
00003460                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003460                            
00003460                            
00003460                            LevSelControls:				; XREF: LevelSelect
00003460 1238 F605                  		move.b	($FFFFF605).w,d1
00003464 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003468 6600                       		bne.s	LevSel_UpDown	; if yes, branch
0000346A 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
0000346E 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003470                            
00003470                            LevSel_UpDown:
00003470 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003476 1238 F604                  		move.b	($FFFFF604).w,d1
0000347A 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
0000347E 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003480 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003484 0801 0000                  		btst	#0,d1		; is up	pressed?
00003488 6700                       		beq.s	LevSel_Down	; if not, branch
0000348A 5340                       		subq.w	#1,d0		; move up 1 selection
0000348C 6400                       		bcc.s	LevSel_Down
0000348E 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00003490                            
00003490                            LevSel_Down:
00003490 0801 0001                  		btst	#1,d1		; is down pressed?
00003494 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003496 5240                       		addq.w	#1,d0		; move down 1 selection
00003498 0C40 0015                  		cmpi.w	#$15,d0
0000349C 6500                       		bcs.s	LevSel_Refresh
0000349E 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
000034A0                            
000034A0                            LevSel_Refresh:
000034A0 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
000034A4 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000034A8 4E75                       		rts	
000034AA                            ; ===========================================================================
000034AA                            
000034AA                            LevSel_SndTest:				; XREF: LevSelControls
000034AA 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
000034B0 6600                       		bne.s	LevSel_NoMove	; if not, branch
000034B2 1238 F605                  		move.b	($FFFFF605).w,d1
000034B6 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
000034BA 6700                       		beq.s	LevSel_NoMove	; if not, branch
000034BC 3038 FF84                  		move.w	($FFFFFF84).w,d0
000034C0 0801 0002                  		btst	#2,d1		; is left pressed?
000034C4 6700                       		beq.s	LevSel_Right	; if not, branch
000034C6 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000034C8 6400                       		bcc.s	LevSel_Right
000034CA 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
000034CC                            
000034CC                            LevSel_Right:
000034CC 0801 0003                  		btst	#3,d1		; is right pressed?
000034D0 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000034D2 5240                       		addq.w	#1,d0		; add 1	to sound test
000034D4 0C40 0050                  		cmpi.w	#$50,d0
000034D8 6500                       		bcs.s	LevSel_Refresh2
000034DA 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000034DC                            
000034DC                            LevSel_Refresh2:
000034DC 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000034E0 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000034E4                            
000034E4                            LevSel_NoMove:
000034E4 4E75                       		rts	
000034E6                            ; End of function LevSelControls
000034E6                            
000034E6                            ; ---------------------------------------------------------------------------
000034E6                            ; Subroutine to load level select text
000034E6                            ; ---------------------------------------------------------------------------
000034E6                            
000034E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000034E6                            
000034E6                            
000034E6                            LevSelTextLoad:				; XREF: TitleScreen
000034E6 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000034EC 4DF9 00C0 0000             		lea	($C00000).l,a6
000034F2 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
000034F8 363C E680                  		move.w	#$E680,d3	; VRAM setting
000034FC 7214                       		moveq	#$14,d1		; number of lines of text
000034FE                            
000034FE                            loc_34FE:				; XREF: LevSelTextLoad+26j
000034FE 2D44 0004                  		move.l	d4,4(a6)
00003502 6100 0000                  		bsr.w	LevSel_ChgLine
00003506 0684 0080 0000             		addi.l	#$800000,d4
0000350C 51C9 FFF0                  		dbf	d1,loc_34FE
00003510 7000                       		moveq	#0,d0
00003512 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003516 3200                       		move.w	d0,d1
00003518 283C 6210 0003             		move.l	#$62100003,d4
0000351E EF48                       		lsl.w	#7,d0
00003520 4840                       		swap	d0
00003522 D880                       		add.l	d0,d4
00003524 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000352A E749                       		lsl.w	#3,d1
0000352C 3001                       		move.w	d1,d0
0000352E D241                       		add.w	d1,d1
00003530 D240                       		add.w	d0,d1
00003532 D2C1                       		adda.w	d1,a1
00003534 363C C680                  		move.w	#$C680,d3
00003538 2D44 0004                  		move.l	d4,4(a6)
0000353C 6100 0000                  		bsr.w	LevSel_ChgLine
00003540 363C E680                  		move.w	#$E680,d3
00003544 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
0000354A 6600                       		bne.s	loc_3550
0000354C 363C C680                  		move.w	#$C680,d3
00003550                            
00003550                            loc_3550:
00003550 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
0000355A 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000355E 0640 0080                  		addi.w	#$80,d0
00003562 1400                       		move.b	d0,d2
00003564 E808                       		lsr.b	#4,d0
00003566 6100 0000                  		bsr.w	LevSel_ChgSnd
0000356A 1002                       		move.b	d2,d0
0000356C 6100 0000                  		bsr.w	LevSel_ChgSnd
00003570 4E75                       		rts	
00003572                            ; End of function LevSelTextLoad
00003572                            
00003572                            
00003572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003572                            
00003572                            
00003572                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003572 0240 000F                  		andi.w	#$F,d0
00003576 0C00 000A                  		cmpi.b	#$A,d0
0000357A 6500                       		bcs.s	loc_3580
0000357C 5E00                       		addi.b	#7,d0
0000357E                            
0000357E                            loc_3580:
0000357E D043                       		add.w	d3,d0
00003580 3C80                       		move.w	d0,(a6)
00003582 4E75                       		rts	
00003584                            ; End of function LevSel_ChgSnd
00003584                            
00003584                            
00003584                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003584                            
00003584                            
00003584                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003584 7417                       		moveq	#$17,d2		; number of characters per line
00003586                            
00003586                            loc_3588:
00003586 7000                       		moveq	#0,d0
00003588 1019                       		move.b	(a1)+,d0
0000358A 6A00                       		bpl.s	loc_3598
0000358C 3CBC 0000                  		move.w	#0,(a6)
00003590 51CA FFF4                  		dbf	d2,loc_3588
00003594 4E75                       		rts	
00003596                            ; ===========================================================================
00003596                            
00003596                            loc_3598:				; XREF: LevSel_ChgLine
00003596 D043                       		add.w	d3,d0
00003598 3C80                       		move.w	d0,(a6)
0000359A 51CA FFEA                  		dbf	d2,loc_3588
0000359E 4E75                       		rts	
000035A0                            ; End of function LevSel_ChgLine
000035A0                            
000035A0                            ; ===========================================================================
000035A0                            ; ---------------------------------------------------------------------------
000035A0                            ; Level	select menu text
000035A0                            ; ---------------------------------------------------------------------------
000035A0                            LevelMenuText:	incbin	misc\menutext.bin
00003798                            		even
00003798                            ; ---------------------------------------------------------------------------
00003798                            ; Music	playlist
00003798                            ; ---------------------------------------------------------------------------
00003798                            MusicList:	incbin	misc\muslist1.bin
000037A0                            		even
000037A0                            ; ===========================================================================
000037A0                            
000037A0                            ; ---------------------------------------------------------------------------
000037A0                            ; Level
000037A0                            ; ---------------------------------------------------------------------------
000037A0                            
000037A0                            Level:					; XREF: GameModeArray
000037A0 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
000037A6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000037AA 6B00                       		bmi.s	loc_37B6
000037AC 103C 00E0                  		move.b	#$E0,d0
000037B0 6100 DBEA                  		bsr.w	PlaySound_Special ; fade out music
000037B4                            
000037B4                            loc_37B6:
000037B4 6100 DE28                  		bsr.w	ClearPLC
000037B8 6100 E698                  		bsr.w	Pal_FadeFrom
000037BC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000037C0 6B00                       		bmi.s	Level_ClrRam
000037C2 46FC 2700                  		move	#$2700,sr
000037C6 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000037D0 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000037D6 6100 DC68                  		bsr.w	NemDec
000037DA 46FC 2300                  		move	#$2300,sr
000037DE 7000                       		moveq	#0,d0
000037E0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000037E4 E948                       		lsl.w	#4,d0
000037E6 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000037EC 45F2 0000                  		lea	(a2,d0.w),a2
000037F0 7000                       		moveq	#0,d0
000037F2 1012                       		move.b	(a2),d0
000037F4 6700                       		beq.s	loc_37FC
000037F6 6100 DD88                  		bsr.w	LoadPLC		; load level patterns
000037FA                            
000037FA                            loc_37FC:
000037FA 7001                       		moveq	#1,d0
000037FC 6100 DD82                  		bsr.w	LoadPLC		; load standard	patterns
00003800                            
00003800                            Level_ClrRam:
00003800 43F8 D000                  		lea	($FFFFD000).w,a1
00003804 7000                       		moveq	#0,d0
00003806 323C 07FF                  		move.w	#$7FF,d1
0000380A                            
0000380A                            Level_ClrObjRam:
0000380A 22C0                       		move.l	d0,(a1)+
0000380C 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003810                            
00003810 43F8 F628                  		lea	($FFFFF628).w,a1
00003814 7000                       		moveq	#0,d0
00003816 323C 0015                  		move.w	#$15,d1
0000381A                            
0000381A                            Level_ClrVars:
0000381A 22C0                       		move.l	d0,(a1)+
0000381C 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003820                            
00003820 43F8 F700                  		lea	($FFFFF700).w,a1
00003824 7000                       		moveq	#0,d0
00003826 323C 003F                  		move.w	#$3F,d1
0000382A                            
0000382A                            Level_ClrVars2:
0000382A 22C0                       		move.l	d0,(a1)+
0000382C 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003830                            
00003830 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003834 7000                       		moveq	#0,d0
00003836 323C 0047                  		move.w	#$47,d1
0000383A                            
0000383A                            Level_ClrVars3:
0000383A 22C0                       		move.l	d0,(a1)+
0000383C 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003840                            
00003840 46FC 2700                  		move	#$2700,sr
00003844 6100 DA7E                  		bsr.w	ClearScreen
00003848 4DF9 00C0 0004             		lea	($C00004).l,a6
0000384E 3CBC 8B03                  		move.w	#$8B03,(a6)
00003852 3CBC 8230                  		move.w	#$8230,(a6)
00003856 3CBC 8407                  		move.w	#$8407,(a6)
0000385A 3CBC 857C                  		move.w	#$857C,(a6)
0000385E 3CBC 9001                  		move.w	#$9001,(a6)
00003862 3CBC 8004                  		move.w	#$8004,(a6)
00003866 3CBC 8720                  		move.w	#$8720,(a6)
0000386A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003870 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003874 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000387A 6600                       		bne.s	Level_LoadPal	; if not, branch
0000387C 3CBC 8014                  		move.w	#$8014,(a6)
00003880 7000                       		moveq	#0,d0
00003882 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003886 D040                       		add.w	d0,d0
00003888 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
0000388E 3031 0000                  		move.w	(a1,d0.w),d0
00003892 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003896 31C0 F648                  		move.w	d0,($FFFFF648).w
0000389A 31C0 F64A                  		move.w	d0,($FFFFF64A).w
0000389E 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
000038A2 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
000038A6 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
000038AC                            
000038AC                            Level_LoadPal:
000038AC 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000038B2 46FC 2300                  		move	#$2300,sr
000038B6 7003                       		moveq	#3,d0
000038B8 6100 E85E                  		bsr.w	PalLoad2	; load Sonic's pallet line
000038BC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000038C2 6600                       		bne.s	Level_GetBgm	; if not, branch
000038C4 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
000038C6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
000038CC 6600                       		bne.s	Level_WaterPal	; if not, branch
000038CE 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
000038D0                            
000038D0                            Level_WaterPal:
000038D0 6100 E85E                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000038D4 4A38 FE30                  		tst.b	($FFFFFE30).w
000038D8 6700                       		beq.s	Level_GetBgm
000038DA 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000038E0                            
000038E0                            Level_GetBgm:
000038E0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000038E4 6B00                       		bmi.s	loc_3946
000038E6 7000                       		moveq	#0,d0
000038E8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000038EC 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
000038F2 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
000038F4 7005                       		moveq	#5,d0		; move 5 to d0
000038F6                            
000038F6                            Level_BgmNotLZ4:
000038F6 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000038FC 6600                       		bne.s	Level_PlayBgm	; if not, branch
000038FE 7006                       		moveq	#6,d0		; move 6 to d0
00003900                            
00003900                            Level_PlayBgm:
00003900 43F9 0000 3798             		lea	(MusicList).l,a1 ; load	music playlist
00003906 1031 0000                  		move.b	(a1,d0.w),d0	; add d0 to a1
0000390A 6100 DA8A                  		bsr.w	PlaySound	; play music
0000390E 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003914                            
00003914                            Level_TtlCard:
00003914 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000391A 6100 F08C                  		bsr.w	DelayProgram
0000391E 4EB9 0000 0000             		jsr	ObjectsLoad
00003924 4EB9 0000 0000             		jsr	BuildSprites
0000392A 6100 DCC0                  		bsr.w	RunPLC_RAM
0000392E 3038 D108                  		move.w	($FFFFD108).w,d0
00003932 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003936 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003938 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
0000393C 66D6                       		bne.s	Level_TtlCard	; if yes, branch
0000393E 4EB9 0000 0000             		jsr	Hud_Base
00003944                            
00003944                            loc_3946:
00003944 7003                       		moveq	#3,d0
00003946 6100 E7B4                  		bsr.w	PalLoad1	; load Sonic's pallet line
0000394A 6100 0000                  		bsr.w	LevelSizeLoad
0000394E 6100 0000                  		bsr.w	DeformBgLayer
00003952 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003958 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
0000395C 6100 0000                  		bsr.w	LoadTilesFromStart
00003960 4EB9 0000 0000             		jsr	FloorLog_Unk
00003966 6100 0000                  		bsr.w	ColIndexLoad
0000396A 6100 0000                  		bsr.w	LZWaterEffects
0000396E 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003974 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003978 6B00                       		bmi.s	Level_ChkDebug
0000397A 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003980                            
00003980                            Level_ChkDebug:
00003980 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003984 6700                       		beq.s	Level_ChkWater	; if not, branch
00003986 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000398C 6700                       		beq.s	Level_ChkWater	; if not, branch
0000398E 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003994                            
00003994                            Level_ChkWater:
00003994 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0000399A 31FC 0000 F604             		move.w	#0,($FFFFF604).w
000039A0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000039A6 6600                       		bne.s	Level_LoadObj	; if not, branch
000039A8 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
000039AE 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
000039B4 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
000039BA 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
000039C0                            
000039C0                            Level_LoadObj:
000039C0 4EB9 0000 0000             		jsr	ObjPosLoad
000039C6 4EB9 0000 0000             		jsr	ObjectsLoad
000039CC 4EB9 0000 0000             		jsr	BuildSprites
000039D2 7000                       		moveq	#0,d0
000039D4 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
000039D8 6600                       		bne.s	loc_39E8	; if yes, branch
000039DA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000039DE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000039E2 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
000039E6                            
000039E6                            loc_39E8:
000039E6 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
000039EA 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
000039EE 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
000039F2 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
000039F6 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000039FA 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000039FE 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003A02 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003A06 6100 0000                  		bsr.w	OscillateNumInit
00003A0A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003A10 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003A16 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003A1C 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003A22 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003A28 7000                       		moveq	#0,d0
00003A2A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003A2E E548                       		lsl.w	#2,d0
00003A30 2271 0000                  		movea.l	(a1,d0.w),a1
00003A34 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003A38 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003A3A 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003A40 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003A44 5340                       		subq.w	#1,d0
00003A46 E548                       		lsl.w	#2,d0
00003A48 2271 0000                  		movea.l	(a1,d0.w),a1
00003A4C                            
00003A4C                            Level_Demo:
00003A4C 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003A52 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003A56 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003A5C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003A60 6A00                       		bpl.s	Level_ChkWaterPal
00003A62 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003A68 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003A6E 6600                       		bne.s	Level_ChkWaterPal
00003A70 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003A76                            
00003A76                            Level_ChkWaterPal:
00003A76 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003A7C 6600                       		bne.s	Level_Delay	; if not, branch
00003A7E 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003A80 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003A86 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003A88 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003A8A                            
00003A8A                            Level_WaterPal2:
00003A8A 6100 E6C0                  		bsr.w	PalLoad4_Water
00003A8E                            
00003A8E                            Level_Delay:
00003A8E 323C 0003                  		move.w	#3,d1
00003A92                            
00003A92                            Level_DelayLoop:
00003A92 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003A98 6100 EF0E                  		bsr.w	DelayProgram
00003A9C 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003AA0                            
00003AA0 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003AA6 6100 E30A                  		bsr.w	Pal_FadeTo2
00003AAA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AAE 6B00                       		bmi.s	Level_ClrCardArt
00003AB0 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003AB4 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003AB8 5838 D124                  		addq.b	#4,($FFFFD124).w
00003ABC 5838 D164                  		addq.b	#4,($FFFFD164).w
00003AC0 6000                       		bra.s	Level_StartGame
00003AC2                            ; ===========================================================================
00003AC2                            
00003AC2                            Level_ClrCardArt:
00003AC2 7002                       		moveq	#2,d0
00003AC4 4EB9 0000 1580             		jsr	(LoadPLC).l	; load explosion patterns
00003ACA 7000                       		moveq	#0,d0
00003ACC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003AD0 0640 0015                  		addi.w	#$15,d0
00003AD4 4EB9 0000 1580             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003ADA                            
00003ADA                            Level_StartGame:
00003ADA 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003AE0                            
00003AE0                            ; ---------------------------------------------------------------------------
00003AE0                            ; Main level loop (when	all title card and loading sequences are finished)
00003AE0                            ; ---------------------------------------------------------------------------
00003AE0                            
00003AE0                            Level_MainLoop:
00003AE0 6100 D8C6                  		bsr.w	PauseGame
00003AE4 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003AEA 6100 EEBC                  		bsr.w	DelayProgram
00003AEE 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003AF2 6100 0000                  		bsr.w	MoveSonicInDemo
00003AF6 6100 0000                  		bsr.w	LZWaterEffects
00003AFA 4EB9 0000 0000             		jsr	ObjectsLoad
00003B00 4A78 FE08                  		tst.w	($FFFFFE08).w
00003B04 6600                       		bne.s	loc_3B10
00003B06 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003B0C 6400                       		bcc.s	loc_3B14
00003B0E                            
00003B0E                            loc_3B10:
00003B0E 6100 0000                  		bsr.w	DeformBgLayer
00003B12                            
00003B12                            loc_3B14:
00003B12 4EB9 0000 0000             		jsr	BuildSprites
00003B18 4EB9 0000 0000             		jsr	ObjPosLoad
00003B1E 6100 DE1C                  		bsr.w	PalCycle_Load
00003B22 6100 DAC8                  		bsr.w	RunPLC_RAM
00003B26 6100 0000                  		bsr.w	OscillateNumDo
00003B2A 6100 0000                  		bsr.w	ChangeRingFrame
00003B2E 6100 0000                  		bsr.w	SignpostArtLoad
00003B32 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003B38 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003B3A 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003B3E 6600 FC60                  		bne.w	Level		; if yes, branch
00003B42 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003B48 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003B4C 4E75                       		rts	
00003B4E                            ; ===========================================================================
00003B4E                            
00003B4E                            Level_ChkDemo:				; XREF: Level_MainLoop
00003B4E 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003B52 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003B54 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003B58 6700                       		beq.s	Level_EndDemo	; if not, branch
00003B5A 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003B60 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003B64 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003B6A 4E75                       		rts	
00003B6C                            ; ===========================================================================
00003B6C                            
00003B6C                            Level_EndDemo:				; XREF: Level_ChkDemo
00003B6C 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003B72 6600                       		bne.s	loc_3B88	; if not, branch
00003B74 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003B7A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003B7E 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003B80 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003B86                            
00003B86                            loc_3B88:
00003B86 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003B8C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003B92 4278 F794                  		clr.w	($FFFFF794).w
00003B96                            
00003B96                            loc_3B98:
00003B96 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003B9C 6100 EE0A                  		bsr.w	DelayProgram
00003BA0 6100 0000                  		bsr.w	MoveSonicInDemo
00003BA4 4EB9 0000 0000             		jsr	ObjectsLoad
00003BAA 4EB9 0000 0000             		jsr	BuildSprites
00003BB0 4EB9 0000 0000             		jsr	ObjPosLoad
00003BB6 5378 F794                  		subq.w	#1,($FFFFF794).w
00003BBA 6A00                       		bpl.s	loc_3BC8
00003BBC 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003BC2 6100 E2AE                  		bsr.w	Pal_FadeOut
00003BC6                            
00003BC6                            loc_3BC8:
00003BC6 4A78 F614                  		tst.w	($FFFFF614).w
00003BCA 66CA                       		bne.s	loc_3B98
00003BCC 4E75                       		rts	
00003BCE                            ; ===========================================================================
00003BCE                            ; ---------------------------------------------------------------------------
00003BCE                            ; Subroutine to	do special water effects in Labyrinth Zone
00003BCE                            ; ---------------------------------------------------------------------------
00003BCE                            
00003BCE                            LZWaterEffects:				; XREF: Level
00003BCE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003BD4 6600                       		bne.s	locret_3C28	; if not, branch
00003BD6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003BDC 6400                       		bcc.s	LZMoveWater
00003BDE 6100 0000                  		bsr.w	LZWindTunnels
00003BE2 6100 0000                  		bsr.w	LZWaterSlides
00003BE6 6100 0000                  		bsr.w	LZDynamicWater
00003BEA                            
00003BEA                            LZMoveWater:
00003BEA 4238 F64E                  		clr.b	($FFFFF64E).w
00003BEE 7000                       		moveq	#0,d0
00003BF0 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003BF4 E248                       		lsr.w	#1,d0
00003BF6 D078 F648                  		add.w	($FFFFF648).w,d0
00003BFA 31C0 F646                  		move.w	d0,($FFFFF646).w
00003BFE 3038 F646                  		move.w	($FFFFF646).w,d0
00003C02 9078 F704                  		sub.w	($FFFFF704).w,d0
00003C06 6400                       		bcc.s	loc_3C1A
00003C08 4A40                       		tst.w	d0
00003C0A 6A00                       		bpl.s	loc_3C1A
00003C0C 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003C12 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003C18                            
00003C18                            loc_3C1A:
00003C18 0C40 00DF                  		cmpi.w	#$DF,d0
00003C1C 6500                       		bcs.s	loc_3C24
00003C1E 303C 00DF                  		move.w	#$DF,d0
00003C22                            
00003C22                            loc_3C24:
00003C22 11C0 F625                  		move.b	d0,($FFFFF625).w
00003C26                            
00003C26                            locret_3C28:
00003C26 4E75                       		rts	
00003C28                            ; ===========================================================================
00003C28                            ; ---------------------------------------------------------------------------
00003C28                            ; Labyrinth default water heights
00003C28                            ; ---------------------------------------------------------------------------
00003C28                            WaterHeight:	incbin	misc\lz_heigh.bin
00003C30                            		even
00003C30                            ; ===========================================================================
00003C30                            
00003C30                            ; ---------------------------------------------------------------------------
00003C30                            ; Labyrinth dynamic water routines
00003C30                            ; ---------------------------------------------------------------------------
00003C30                            
00003C30                            LZDynamicWater:				; XREF: LZWaterEffects
00003C30 7000                       		moveq	#0,d0
00003C32 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003C36 D040                       		add.w	d0,d0
00003C38 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003C3C 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003C40 7200                       		moveq	#0,d1
00003C42 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003C46 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003C4A 9078 F648                  		sub.w	($FFFFF648).w,d0
00003C4E 6700                       		beq.s	locret_3C5A
00003C50 6400                       		bcc.s	loc_3C56
00003C52 4441                       		neg.w	d1
00003C54                            
00003C54                            loc_3C56:
00003C54 D378 F648                  		add.w	d1,($FFFFF648).w
00003C58                            
00003C58                            locret_3C5A:
00003C58 4E75                       		rts	
00003C5A                            ; ===========================================================================
00003C5A 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003C5C 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003C5E 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003C60 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003C62                            ; ===========================================================================
00003C62                            
00003C62                            DynWater_LZ1:				; XREF: DynWater_Index
00003C62 3038 F700                  		move.w	($FFFFF700).w,d0
00003C66 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003C6A 6600                       		bne.s	loc_3CD0
00003C6C 323C 00B8                  		move.w	#$B8,d1
00003C70 0C40 0600                  		cmpi.w	#$600,d0
00003C74 6500                       		bcs.s	loc_3CB4
00003C76 323C 0108                  		move.w	#$108,d1
00003C7A 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003C80 6500                       		bcs.s	loc_3CBA
00003C82 0C40 0C00                  		cmpi.w	#$C00,d0
00003C86 6500                       		bcs.s	loc_3CB4
00003C88 323C 0318                  		move.w	#$318,d1
00003C8C 0C40 1080                  		cmpi.w	#$1080,d0
00003C90 6500                       		bcs.s	loc_3CB4
00003C92 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003C98 323C 05C8                  		move.w	#$5C8,d1
00003C9C 0C40 1380                  		cmpi.w	#$1380,d0
00003CA0 6500                       		bcs.s	loc_3CB4
00003CA2 323C 03A8                  		move.w	#$3A8,d1
00003CA6 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003CAA 6600                       		bne.s	loc_3CB4
00003CAC 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003CB2                            
00003CB2                            loc_3CB4:
00003CB2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003CB6 4E75                       		rts	
00003CB8                            ; ===========================================================================
00003CB8                            
00003CB8                            loc_3CBA:				; XREF: DynWater_LZ1
00003CB8 0C40 0C80                  		cmpi.w	#$C80,d0
00003CBC 65F4                       		bcs.s	loc_3CB4
00003CBE 323C 00E8                  		move.w	#$E8,d1
00003CC2 0C40 1500                  		cmpi.w	#$1500,d0
00003CC6 65EA                       		bcs.s	loc_3CB4
00003CC8 323C 0108                  		move.w	#$108,d1
00003CCC 60E4                       		bra.s	loc_3CB4
00003CCE                            ; ===========================================================================
00003CCE                            
00003CCE                            loc_3CD0:				; XREF: DynWater_LZ1
00003CCE 5302                       		subq.b	#1,d2
00003CD0 6600                       		bne.s	locret_3CF4
00003CD2 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00003CD8 6400                       		bcc.s	locret_3CF4
00003CDA 323C 03A8                  		move.w	#$3A8,d1
00003CDE 0C40 1300                  		cmpi.w	#$1300,d0
00003CE2 6500                       		bcs.s	loc_3CF0
00003CE4 323C 0108                  		move.w	#$108,d1
00003CE8 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003CEE                            
00003CEE                            loc_3CF0:
00003CEE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003CF2                            
00003CF2                            locret_3CF4:
00003CF2 4E75                       		rts	
00003CF4                            ; ===========================================================================
00003CF4                            
00003CF4                            DynWater_LZ2:				; XREF: DynWater_Index
00003CF4 3038 F700                  		move.w	($FFFFF700).w,d0
00003CF8 323C 0328                  		move.w	#$328,d1
00003CFC 0C40 0500                  		cmpi.w	#$500,d0
00003D00 6500                       		bcs.s	loc_3D12
00003D02 323C 03C8                  		move.w	#$3C8,d1
00003D06 0C40 0B00                  		cmpi.w	#$B00,d0
00003D0A 6500                       		bcs.s	loc_3D12
00003D0C 323C 0428                  		move.w	#$428,d1
00003D10                            
00003D10                            loc_3D12:
00003D10 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D14 4E75                       		rts	
00003D16                            ; ===========================================================================
00003D16                            
00003D16                            DynWater_LZ3:				; XREF: DynWater_Index
00003D16 3038 F700                  		move.w	($FFFFF700).w,d0
00003D1A 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003D1E 6600                       		bne.s	loc_3D5E
00003D20 323C 0900                  		move.w	#$900,d1
00003D24 0C40 0600                  		cmpi.w	#$600,d0
00003D28 6500                       		bcs.s	loc_3D54
00003D2A 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00003D30 6500                       		bcs.s	loc_3D54
00003D32 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003D38 6400                       		bcc.s	loc_3D54
00003D3A 323C 04C8                  		move.w	#$4C8,d1
00003D3E 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00003D44 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003D4A 303C 00B7                  		move.w	#$B7,d0
00003D4E 6100 D64C                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00003D52                            
00003D52                            loc_3D54:
00003D52 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D56 31C1 F648                  		move.w	d1,($FFFFF648).w
00003D5A 4E75                       		rts	
00003D5C                            ; ===========================================================================
00003D5C                            
00003D5C                            loc_3D5E:				; XREF: DynWater_LZ3
00003D5C 5302                       		subq.b	#1,d2
00003D5E 6600                       		bne.s	loc_3DA8
00003D60 323C 04C8                  		move.w	#$4C8,d1
00003D64 0C40 0770                  		cmpi.w	#$770,d0
00003D68 6500                       		bcs.s	loc_3DA2
00003D6A 323C 0308                  		move.w	#$308,d1
00003D6E 0C40 1400                  		cmpi.w	#$1400,d0
00003D72 6500                       		bcs.s	loc_3DA2
00003D74 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00003D7A 6700                       		beq.s	loc_3D8E
00003D7C 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003D82 6400                       		bcc.s	loc_3D8E
00003D84 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00003D8A 6400                       		bcc.s	loc_3DA2
00003D8C                            
00003D8C                            loc_3D8E:
00003D8C 323C 0508                  		move.w	#$508,d1
00003D90 31C1 F648                  		move.w	d1,($FFFFF648).w
00003D94 0C40 1770                  		cmpi.w	#$1770,d0
00003D98 6500                       		bcs.s	loc_3DA2
00003D9A 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003DA0                            
00003DA0                            loc_3DA2:
00003DA0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DA4 4E75                       		rts	
00003DA6                            ; ===========================================================================
00003DA6                            
00003DA6                            loc_3DA8:
00003DA6 5302                       		subq.b	#1,d2
00003DA8 6600                       		bne.s	loc_3DD2
00003DAA 323C 0508                  		move.w	#$508,d1
00003DAE 0C40 1860                  		cmpi.w	#$1860,d0
00003DB2 6500                       		bcs.s	loc_3DCC
00003DB4 323C 0188                  		move.w	#$188,d1
00003DB8 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003DBC 6400                       		bcc.s	loc_3DC6
00003DBE B278 F648                  		cmp.w	($FFFFF648).w,d1
00003DC2 6600                       		bne.s	loc_3DCC
00003DC4                            
00003DC4                            loc_3DC6:
00003DC4 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00003DCA                            
00003DCA                            loc_3DCC:
00003DCA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DCE 4E75                       		rts	
00003DD0                            ; ===========================================================================
00003DD0                            
00003DD0                            loc_3DD2:
00003DD0 5302                       		subq.b	#1,d2
00003DD2 6600                       		bne.s	loc_3E0E
00003DD4 323C 0188                  		move.w	#$188,d1
00003DD8 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003DDC 6500                       		bcs.s	loc_3E04
00003DDE 323C 0900                  		move.w	#$900,d1
00003DE2 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00003DE6 6500                       		bcs.s	loc_3E04
00003DE8 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00003DEE 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00003DF4 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00003DFA 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00003E00 4E75                       		rts	
00003E02                            ; ===========================================================================
00003E02                            
00003E02                            loc_3E04:
00003E02 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E06 31C1 F648                  		move.w	d1,($FFFFF648).w
00003E0A 4E75                       		rts	
00003E0C                            ; ===========================================================================
00003E0C                            
00003E0C                            loc_3E0E:
00003E0C 0C40 1E00                  		cmpi.w	#$1E00,d0
00003E10 6500                       		bcs.s	locret_3E1A
00003E12 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00003E18                            
00003E18                            locret_3E1A:
00003E18 4E75                       		rts	
00003E1A                            ; ===========================================================================
00003E1A                            
00003E1A                            DynWater_SBZ3:				; XREF: DynWater_Index
00003E1A 323C 0228                  		move.w	#$228,d1
00003E1E 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00003E24 6500                       		bcs.s	loc_3E2C
00003E26 323C 04C8                  		move.w	#$4C8,d1
00003E2A                            
00003E2A                            loc_3E2C:
00003E2A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E2E 4E75                       		rts
00003E30                            
00003E30                            ; ---------------------------------------------------------------------------
00003E30                            ; Labyrinth Zone "wind tunnels"	subroutine
00003E30                            ; ---------------------------------------------------------------------------
00003E30                            
00003E30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003E30                            
00003E30                            
00003E30                            LZWindTunnels:				; XREF: LZWaterEffects
00003E30 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00003E34 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00003E38 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00003E3E 7000                       		moveq	#0,d0
00003E40 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003E44 E748                       		lsl.w	#3,d0
00003E46 D4C0                       		adda.w	d0,a2
00003E48 7200                       		moveq	#0,d1
00003E4A 4A38 FE11                  		tst.b	($FFFFFE11).w
00003E4E 6600                       		bne.s	loc_3E56
00003E50 7201                       		moveq	#1,d1
00003E52 514A                       		subq.w	#8,a2
00003E54                            
00003E54                            loc_3E56:
00003E54 43F8 D000                  		lea	($FFFFD000).w,a1
00003E58                            
00003E58                            LZWind_Loop:
00003E58 3029 0008                  		move.w	8(a1),d0
00003E5C B052                       		cmp.w	(a2),d0
00003E5E 6500 0000                  		bcs.w	loc_3EF4
00003E62 B06A 0004                  		cmp.w	4(a2),d0
00003E66 6400 0000                  		bcc.w	loc_3EF4
00003E6A 3429 000C                  		move.w	$C(a1),d2
00003E6E B46A 0002                  		cmp.w	2(a2),d2
00003E72 6500                       		bcs.s	loc_3EF4
00003E74 B46A 0006                  		cmp.w	6(a2),d2
00003E78 6400                       		bcc.s	loc_3EF4
00003E7A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003E7E 0200 003F                  		andi.b	#$3F,d0
00003E82 6600                       		bne.s	loc_3E90
00003E84 303C 00D0                  		move.w	#$D0,d0
00003E88 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rushing water sound
00003E8E                            
00003E8E                            loc_3E90:
00003E8E 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00003E92 6600 0000                  		bne.w	locret_3F0A
00003E96 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00003E9C 6400                       		bcc.s	loc_3F06
00003E9E 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00003EA4 0440 0080                  		subi.w	#$80,d0
00003EA8 B052                       		cmp.w	(a2),d0
00003EAA 6400                       		bcc.s	LZWind_Move
00003EAC 7002                       		moveq	#2,d0
00003EAE 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00003EB4 6600                       		bne.s	loc_3EBA
00003EB6 4440                       		neg.w	d0
00003EB8                            
00003EB8                            loc_3EBA:
00003EB8 D169 000C                  		add.w	d0,$C(a1)
00003EBC                            
00003EBC                            LZWind_Move:
00003EBC 5869 0008                  		addq.w	#4,8(a1)
00003EC0 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00003EC6 337C 0000 0012             		move.w	#0,$12(a1)
00003ECC 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00003ED2 08E9 0001 0022             		bset	#1,$22(a1)
00003ED8 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00003EDE 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00003EE0 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00003EE4                            
00003EE4                            LZWind_MoveDown:
00003EE4 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00003EEA 6700                       		beq.s	locret_3EF2	; if not, branch
00003EEC 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00003EF0                            
00003EF0                            locret_3EF2:
00003EF0 4E75                       		rts	
00003EF2                            ; ===========================================================================
00003EF2                            
00003EF2                            loc_3EF4:				; XREF: LZWindTunnels
00003EF2 504A                       		addq.w	#8,a2
00003EF4 51C9 FF62                  		dbf	d1,LZWind_Loop
00003EF8 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00003EFC 6700                       		beq.s	locret_3F0A
00003EFE 137C 0000 001C             		move.b	#0,$1C(a1)
00003F04                            
00003F04                            loc_3F06:
00003F04 4238 F7C7                  		clr.b	($FFFFF7C7).w
00003F08                            
00003F08                            locret_3F0A:
00003F08 4E75                       		rts	
00003F0A                            ; End of function LZWindTunnels
00003F0A                            
00003F0A                            ; ===========================================================================
00003F0A 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00003F12 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00003F24 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00003F32                            					; XREF: LZWindTunnels
00003F32                            		even
00003F32                            
00003F32                            ; ---------------------------------------------------------------------------
00003F32                            ; Labyrinth Zone water slide subroutine
00003F32                            ; ---------------------------------------------------------------------------
00003F32                            
00003F32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F32                            
00003F32                            
00003F32                            LZWaterSlides:				; XREF: LZWaterEffects
00003F32 43F8 D000                  		lea	($FFFFD000).w,a1
00003F36 0829 0001 0022             		btst	#1,$22(a1)
00003F3C 6600                       		bne.s	loc_3F6A
00003F3E 3029 000C                  		move.w	$C(a1),d0
00003F42 E248                       		lsr.w	#1,d0
00003F44 0240 0380                  		andi.w	#$380,d0
00003F48 1229 0008                  		move.b	8(a1),d1
00003F4C 0241 007F                  		andi.w	#$7F,d1
00003F50 D041                       		add.w	d1,d0
00003F52 45F8 A400                  		lea	($FFFFA400).w,a2
00003F56 1032 0000                  		move.b	(a2,d0.w),d0
00003F5A 45FA 0000                  		lea	byte_3FCF(pc),a2
00003F5E 7206                       		moveq	#6,d1
00003F60                            
00003F60                            loc_3F62:
00003F60 B022                       		cmp.b	-(a2),d0
00003F62 57C9 FFFC                  		dbeq	d1,loc_3F62
00003F66 6700                       		beq.s	LZSlide_Move
00003F68                            
00003F68                            loc_3F6A:
00003F68 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00003F6C 6700                       		beq.s	locret_3F7A
00003F6E 337C 0005 003E             		move.w	#5,$3E(a1)
00003F74 4238 F7CA                  		clr.b	($FFFFF7CA).w
00003F78                            
00003F78                            locret_3F7A:
00003F78 4E75                       		rts	
00003F7A                            ; ===========================================================================
00003F7A                            
00003F7A                            LZSlide_Move:				; XREF: LZWaterSlides
00003F7A 0C41 0003                  		cmpi.w	#3,d1
00003F7E 6400                       		bcc.s	loc_3F84
00003F80 4E71                       		nop	
00003F82                            
00003F82                            loc_3F84:
00003F82 08A9 0000 0022             		bclr	#0,$22(a1)
00003F88 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00003F8C 1340 0014                  		move.b	d0,$14(a1)
00003F90 6A00                       		bpl.s	loc_3F9A
00003F92 08E9 0000 0022             		bset	#0,$22(a1)
00003F98                            
00003F98                            loc_3F9A:
00003F98 4229 0015                  		clr.b	$15(a1)
00003F9C 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00003FA2 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00003FA8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003FAC 0200 001F                  		andi.b	#$1F,d0
00003FB0 6600                       		bne.s	locret_3FBE
00003FB2 303C 00D0                  		move.w	#$D0,d0
00003FB6 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play water sound
00003FBC                            
00003FBC                            locret_3FBE:
00003FBC 4E75                       		rts	
00003FBE                            ; End of function LZWaterSlides
00003FBE                            
00003FBE                            ; ===========================================================================
00003FBE 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00003FCD 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00003FCE                            		even
00003FCE                            
00003FCE                            ; ---------------------------------------------------------------------------
00003FCE                            ; Subroutine to	move Sonic in demo mode
00003FCE                            ; ---------------------------------------------------------------------------
00003FCE                            
00003FCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003FCE                            
00003FCE                            
00003FCE                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00003FCE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003FD2 6600                       		bne.s	MoveDemo_On	; if yes, branch
00003FD4 4E75                       		rts	
00003FD6                            ; ===========================================================================
00003FD6                            
00003FD6                            ; This is an unused subroutine for recording a demo
00003FD6                            
00003FD6                            MoveDemo_Record:
00003FD6 43F9 0008 0000             		lea	($80000).l,a1
00003FDC 3038 F790                  		move.w	($FFFFF790).w,d0
00003FE0 D2C0                       		adda.w	d0,a1
00003FE2 1038 F604                  		move.b	($FFFFF604).w,d0
00003FE6 B011                       		cmp.b	(a1),d0
00003FE8 6600                       		bne.s	loc_3FFA
00003FEA 5229 0001                  		addq.b	#1,1(a1)
00003FEE 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00003FF4 6700                       		beq.s	loc_3FFA
00003FF6 4E75                       		rts	
00003FF8                            ; ===========================================================================
00003FF8                            
00003FF8                            loc_3FFA:				; XREF: MoveDemo_Record
00003FF8 1340 0002                  		move.b	d0,2(a1)
00003FFC 137C 0000 0003             		move.b	#0,3(a1)
00004002 5478 F790                  		addq.w	#2,($FFFFF790).w
00004006 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000400C 4E75                       		rts	
0000400E                            ; ===========================================================================
0000400E                            
0000400E                            MoveDemo_On:				; XREF: MoveSonicInDemo
0000400E 4A38 F604                  		tst.b	($FFFFF604).w
00004012 6A00                       		bpl.s	loc_4022
00004014 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004018 6B00                       		bmi.s	loc_4022
0000401A 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004020                            
00004020                            loc_4022:
00004020 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004026 7000                       		moveq	#0,d0
00004028 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000402C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004032 6600                       		bne.s	loc_4038
00004034 7006                       		moveq	#6,d0
00004036                            
00004036                            loc_4038:
00004036 E548                       		lsl.w	#2,d0
00004038 2271 0000                  		movea.l	(a1,d0.w),a1
0000403C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004040 6A00                       		bpl.s	loc_4056
00004042 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004048 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000404C 5340                       		subq.w	#1,d0
0000404E E548                       		lsl.w	#2,d0
00004050 2271 0000                  		movea.l	(a1,d0.w),a1
00004054                            
00004054                            loc_4056:
00004054 3038 F790                  		move.w	($FFFFF790).w,d0
00004058 D2C0                       		adda.w	d0,a1
0000405A 1011                       		move.b	(a1),d0
0000405C 41F8 F604                  		lea	($FFFFF604).w,a0
00004060 1200                       		move.b	d0,d1
00004062 1410                       		move.b	(a0),d2
00004064 B500                       		eor.b	d2,d0
00004066 10C1                       		move.b	d1,(a0)+
00004068 C001                       		and.b	d1,d0
0000406A 10C0                       		move.b	d0,(a0)+
0000406C 5338 F792                  		subq.b	#1,($FFFFF792).w
00004070 6400                       		bcc.s	locret_407E
00004072 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004078 5478 F790                  		addq.w	#2,($FFFFF790).w
0000407C                            
0000407C                            locret_407E:
0000407C 4E75                       		rts	
0000407E                            ; End of function MoveSonicInDemo
0000407E                            
0000407E                            ; ===========================================================================
0000407E                            ; ---------------------------------------------------------------------------
0000407E                            ; Demo sequence	pointers
0000407E                            ; ---------------------------------------------------------------------------
0000407E                            Demo_Index:
0000407E                            	include "_inc\Demo pointers for intro.asm"
0000407E                            ; ---------------------------------------------------------------------------
0000407E                            ; Demo sequence	pointers
0000407E                            ; ---------------------------------------------------------------------------
0000407E 0000 0000                  	dc.l Demo_GHZ
00004082 0000 0000                  	dc.l Demo_GHZ
00004086 0000 0000                  	dc.l Demo_MZ
0000408A 0000 0000                  	dc.l Demo_MZ
0000408E 0000 0000                  	dc.l Demo_SYZ
00004092 0000 0000                  	dc.l Demo_SYZ
00004096 0000 0000                  	dc.l Demo_SS
0000409A 0000 0000                  	dc.l Demo_SS
0000409A 0000 0000                  	dc.l Demo_SS
0000409E                            
0000409E                            Demo_EndIndex:
0000409E                            	include "_inc\Demo pointers for ending.asm"
0000409E                            ; ---------------------------------------------------------------------------
0000409E                            ; Demo (ending) sequence pointers
0000409E                            ; ---------------------------------------------------------------------------
0000409E 0000 0000                  	dc.l Demo_EndGHZ1
000040A2 0000 0000                  	dc.l Demo_EndMZ
000040A6 0000 0000                  	dc.l Demo_EndSYZ
000040AA 0000 0000                  	dc.l Demo_EndLZ
000040AE 0000 0000                  	dc.l Demo_EndSLZ
000040B2 0000 0000                  	dc.l Demo_EndSBZ1
000040B6 0000 0000                  	dc.l Demo_EndSBZ2
000040BA 0000 0000                  	dc.l Demo_EndGHZ2
000040BA 0000 0000                  	dc.l Demo_EndGHZ2
000040BE                            
000040BE 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000040CE 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000040DE 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000040EE                            		even
000040EE                            
000040EE                            ; ---------------------------------------------------------------------------
000040EE                            ; Collision index loading subroutine
000040EE                            ; ---------------------------------------------------------------------------
000040EE                            
000040EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000040EE                            
000040EE                            
000040EE                            ColIndexLoad:				; XREF: Level
000040EE 7000                       		moveq	#0,d0
000040F0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000040F4 E548                       		lsl.w	#2,d0
000040F6 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
000040FC 4E75                       		rts	
000040FE                            ; End of function ColIndexLoad
000040FE                            
000040FE                            ; ===========================================================================
000040FE                            ; ---------------------------------------------------------------------------
000040FE                            ; Collision index pointers
000040FE                            ; ---------------------------------------------------------------------------
000040FE                            ColPointers:
000040FE                            	include "_inc\Collision index pointers.asm"
000040FE                            ; ---------------------------------------------------------------------------
000040FE                            ; Collision index pointers
000040FE                            ; ---------------------------------------------------------------------------
000040FE 0000 0000                  	dc.l Col_GHZ
00004102 0000 0000                  	dc.l Col_LZ
00004106 0000 0000                  	dc.l Col_MZ
0000410A 0000 0000                  	dc.l Col_SLZ
0000410E 0000 0000                  	dc.l Col_SYZ
00004112 0000 0000                  	dc.l Col_SBZ
00004112 0000 0000                  	dc.l Col_SBZ
00004116                            
00004116                            ; ---------------------------------------------------------------------------
00004116                            ; Oscillating number subroutine
00004116                            ; ---------------------------------------------------------------------------
00004116                            
00004116                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004116                            
00004116                            
00004116                            OscillateNumInit:			; XREF: Level
00004116 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000411A 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004120 7220                       		moveq	#$20,d1
00004122                            
00004122                            Osc_Loop:
00004122 32DA                       		move.w	(a2)+,(a1)+
00004124 51C9 FFFC                  		dbf	d1,Osc_Loop
00004128 4E75                       		rts	
0000412A                            ; End of function OscillateNumInit
0000412A                            
0000412A                            ; ===========================================================================
0000412A 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
0000412E 0000 0080                  		dc.w 0,	$80
00004132 0000 0080                  		dc.w 0,	$80
00004136 0000 0080                  		dc.w 0,	$80
0000413A 0000 0080                  		dc.w 0,	$80
0000413E 0000 0080                  		dc.w 0,	$80
00004142 0000 0080                  		dc.w 0,	$80
00004146 0000 0080                  		dc.w 0,	$80
0000414A 0000 0080                  		dc.w 0,	$80
0000414E 0000 50F0                  		dc.w 0,	$50F0
00004152 011E 2080                  		dc.w $11E, $2080
00004156 00B4 3080                  		dc.w $B4, $3080
0000415A 010E 5080                  		dc.w $10E, $5080
0000415E 01C2 7080                  		dc.w $1C2, $7080
00004162 0276 0080                  		dc.w $276, $80
00004166 0000 0080                  		dc.w 0,	$80
0000416A 0000                       		dc.w 0
0000416C                            		even
0000416C                            
0000416C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000416C                            
0000416C                            
0000416C                            OscillateNumDo:				; XREF: Level
0000416C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004172 6400                       		bcc.s	locret_41C4
00004174 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004178 45F9 0000 0000             		lea	(Osc_Data2).l,a2
0000417E 3619                       		move.w	(a1)+,d3
00004180 720F                       		moveq	#$F,d1
00004182                            
00004182                            loc_4184:
00004182 341A                       		move.w	(a2)+,d2
00004184 381A                       		move.w	(a2)+,d4
00004186 0303                       		btst	d1,d3
00004188 6600                       		bne.s	loc_41A4
0000418A 3029 0002                  		move.w	2(a1),d0
0000418E D042                       		add.w	d2,d0
00004190 3340 0002                  		move.w	d0,2(a1)
00004194 D151                       		add.w	d0,0(a1)
00004196 B811                       		cmp.b	0(a1),d4
00004198 6200                       		bhi.s	loc_41BA
0000419A 03C3                       		bset	d1,d3
0000419C 6000                       		bra.s	loc_41BA
0000419E                            ; ===========================================================================
0000419E                            
0000419E                            loc_41A4:				; XREF: OscillateNumDo
0000419E 3029 0002                  		move.w	2(a1),d0
000041A2 9042                       		sub.w	d2,d0
000041A4 3340 0002                  		move.w	d0,2(a1)
000041A8 D151                       		add.w	d0,0(a1)
000041AA B811                       		cmp.b	0(a1),d4
000041AC 6300                       		bls.s	loc_41BA
000041AE 0383                       		bclr	d1,d3
000041B0                            
000041B0                            loc_41BA:
000041B0 5849                       		addq.w	#4,a1
000041B2 51C9 FFCE                  		dbf	d1,loc_4184
000041B6 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
000041BA                            
000041BA                            locret_41C4:
000041BA 4E75                       		rts	
000041BC                            ; End of function OscillateNumDo
000041BC                            
000041BC                            ; ===========================================================================
000041BC 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000041C0 0002 0018                  		dc.w 2,	$18
000041C4 0002 0020                  		dc.w 2,	$20
000041C8 0002 0030                  		dc.w 2,	$30
000041CC 0004 0020                  		dc.w 4,	$20
000041D0 0008 0008                  		dc.w 8,	8
000041D4 0008 0040                  		dc.w 8,	$40
000041D8 0004 0040                  		dc.w 4,	$40
000041DC 0002 0050                  		dc.w 2,	$50
000041E0 0002 0050                  		dc.w 2,	$50
000041E4 0002 0020                  		dc.w 2,	$20
000041E8 0003 0030                  		dc.w 3,	$30
000041EC 0005 0050                  		dc.w 5,	$50
000041F0 0007 0070                  		dc.w 7,	$70
000041F4 0002 0010                  		dc.w 2,	$10
000041F8 0002 0010                  		dc.w 2,	$10
000041FC                            		even
000041FC                            
000041FC                            ; ---------------------------------------------------------------------------
000041FC                            ; Subroutine to	change object animation	variables (rings, giant	rings)
000041FC                            ; ---------------------------------------------------------------------------
000041FC                            
000041FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041FC                            
000041FC                            
000041FC                            ChangeRingFrame:			; XREF: Level
000041FC 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004200 6A00                       		bpl.s	loc_421C
00004202 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004208 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0000420C 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004212                            
00004212                            loc_421C:
00004212 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004216 6A00                       		bpl.s	loc_4232
00004218 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0000421E 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004222 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004228                            
00004228                            loc_4232:
00004228 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000422C 6A00                       		bpl.s	loc_4250
0000422E 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004234 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004238 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
0000423E 6500                       		bcs.s	loc_4250
00004240 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004246                            
00004246                            loc_4250:
00004246 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000424A 6700                       		beq.s	locret_4272
0000424C 7000                       		moveq	#0,d0
0000424E 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004252 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004256 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
0000425A EF58                       		rol.w	#7,d0
0000425C 0240 0003                  		andi.w	#3,d0
00004260 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004264 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004268                            
00004268                            locret_4272:
00004268 4E75                       		rts	
0000426A                            ; End of function ChangeRingFrame
0000426A                            
0000426A                            ; ---------------------------------------------------------------------------
0000426A                            ; End-of-act signpost pattern loading subroutine
0000426A                            ; ---------------------------------------------------------------------------
0000426A                            
0000426A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000426A                            
0000426A                            
0000426A                            SignpostArtLoad:			; XREF: Level
0000426A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0000426E 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004272 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004278 6700                       		beq.s	Signpost_Exit	; if yes, branch
0000427A 3038 F700                  		move.w	($FFFFF700).w,d0
0000427E 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004282 0441 0100                  		subi.w	#$100,d1
00004286 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004288 6D00                       		blt.s	Signpost_Exit	; if not, branch
0000428A 4A38 FE1E                  		tst.b	($FFFFFE1E).w
0000428E 6700                       		beq.s	Signpost_Exit
00004290 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004294 6700                       		beq.s	Signpost_Exit
00004296 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
0000429A 7012                       		moveq	#$12,d0
0000429C 6000 D314                  		bra.w	LoadPLC2	; load signpost	patterns
000042A0                            ; ===========================================================================
000042A0                            
000042A0                            Signpost_Exit:
000042A0 4E75                       		rts	
000042A2                            ; End of function SignpostArtLoad
000042A2                            
000042A2                            ; ===========================================================================
000042A2                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004322                            Demo_MZ:	incbin	demodata\i_mz.bin
00004452                            Demo_SYZ:	incbin	demodata\i_syz.bin
000044D2                            Demo_SS:	incbin	demodata\i_ss.bin
000045D2                            ; ===========================================================================
000045D2                            
000045D2                            ; ---------------------------------------------------------------------------
000045D2                            ; Special Stage
000045D2                            ; ---------------------------------------------------------------------------
000045D2                            
000045D2                            SpecialStage:				; XREF: GameModeArray
000045D2 303C 00CA                  		move.w	#$CA,d0
000045D6 6100 CDC4                  		bsr.w	PlaySound_Special ; play special stage entry sound
000045DA 6100 D9A0                  		bsr.w	Pal_MakeFlash
000045DE 46FC 2700                  		move	#$2700,sr
000045E2 4DF9 00C0 0004             		lea	($C00004).l,a6
000045E8 3CBC 8B03                  		move.w	#$8B03,(a6)
000045EC 3CBC 8004                  		move.w	#$8004,(a6)
000045F0 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
000045F6 3CBC 9011                  		move.w	#$9011,(a6)
000045FA 3038 F60C                  		move.w	($FFFFF60C).w,d0
000045FE 0200 00BF                  		andi.b	#$BF,d0
00004602 33C0 00C0 0004             		move.w	d0,($C00004).l
00004608 6100 CCBA                  		bsr.w	ClearScreen
0000460C 46FC 2300                  		move	#$2300,sr
00004610 4BF9 00C0 0004             		lea	($C00004).l,a5
00004616 3ABC 8F01                  		move.w	#$8F01,(a5)
0000461A 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004620 3ABC 9780                  		move.w	#$9780,(a5)
00004624 2ABC 5000 0081             		move.l	#$50000081,(a5)
0000462A 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004632                            
00004632                            loc_463C:
00004632 3215                       		move.w	(a5),d1
00004634 0801 0001                  		btst	#1,d1
00004638 66F8                       		bne.s	loc_463C
0000463A 3ABC 8F02                  		move.w	#$8F02,(a5)
0000463E 6100 0000                  		bsr.w	SS_BGLoad
00004642 7014                       		moveq	#$14,d0
00004644 6100 D0A6                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004648 43F8 D000                  		lea	($FFFFD000).w,a1
0000464C 7000                       		moveq	#0,d0
0000464E 323C 07FF                  		move.w	#$7FF,d1
00004652                            
00004652                            SS_ClrObjRam:
00004652 22C0                       		move.l	d0,(a1)+
00004654 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004658                            
00004658 43F8 F700                  		lea	($FFFFF700).w,a1
0000465C 7000                       		moveq	#0,d0
0000465E 323C 003F                  		move.w	#$3F,d1
00004662                            
00004662                            SS_ClrRam:
00004662 22C0                       		move.l	d0,(a1)+
00004664 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004668                            
00004668 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000466C 7000                       		moveq	#0,d0
0000466E 323C 0027                  		move.w	#$27,d1
00004672                            
00004672                            SS_ClrRam2:
00004672 22C0                       		move.l	d0,(a1)+
00004674 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004678                            
00004678 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000467C 7000                       		moveq	#0,d0
0000467E 323C 007F                  		move.w	#$7F,d1
00004682                            
00004682                            SS_ClrNemRam:
00004682 22C0                       		move.l	d0,(a1)+
00004684 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004688                            
00004688 4238 F64E                  		clr.b	($FFFFF64E).w
0000468C 4278 FE02                  		clr.w	($FFFFFE02).w
00004690 700A                       		moveq	#$A,d0
00004692 6100 DA68                  		bsr.w	PalLoad1	; load special stage pallet
00004696 4EB9 0000 0000             		jsr	SS_Load
0000469C 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000046A4 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000046AC 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000046B2 6100 0000                  		bsr.w	PalCycle_SS
000046B6 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
000046BA 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
000046C0 303C 0089                  		move.w	#$89,d0
000046C4 6100 CCD0                  		bsr.w	PlaySound	; play special stage BG	music
000046C8 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000046CE 43F9 0000 407E             		lea	(Demo_Index).l,a1
000046D4 7006                       		moveq	#6,d0
000046D6 E548                       		lsl.w	#2,d0
000046D8 2271 0000                  		movea.l	(a1,d0.w),a1
000046DC 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
000046E2 5338 F792                  		subq.b	#1,($FFFFF792).w
000046E6 4278 FE20                  		clr.w	($FFFFFE20).w
000046EA 4238 FE1B                  		clr.b	($FFFFFE1B).w
000046EE 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
000046F4 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000046FA 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000046FE 6700                       		beq.s	SS_NoDebug	; if not, branch
00004700 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004706 6700                       		beq.s	SS_NoDebug	; if not, branch
00004708 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000470E                            
0000470E                            SS_NoDebug:
0000470E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004712 0000 0040                  		ori.b	#$40,d0
00004716 33C0 00C0 0004             		move.w	d0,($C00004).l
0000471C 6100 D7B2                  		bsr.w	Pal_MakeWhite
00004720                            
00004720                            ; ---------------------------------------------------------------------------
00004720                            ; Main Special Stage loop
00004720                            ; ---------------------------------------------------------------------------
00004720                            
00004720                            SS_MainLoop:
00004720 6100 CC86                  		bsr.w	PauseGame
00004724 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
0000472A 6100 E27C                  		bsr.w	DelayProgram
0000472E 6100 F89E                  		bsr.w	MoveSonicInDemo
00004732 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004738 4EB9 0000 0000             		jsr	ObjectsLoad
0000473E 4EB9 0000 0000             		jsr	BuildSprites
00004744 4EB9 0000 0000             		jsr	SS_ShowLayout
0000474A 6100 0000                  		bsr.w	SS_BGAnimate
0000474E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004752 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004754 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004758 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000475C                            
0000475C                            SS_ChkEnd:
0000475C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004762 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004766                            
00004766 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000476A 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
0000476E 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004774 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
0000477A 6500                       		bcs.s	SS_End		; if not, branch
0000477C 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004780                            
00004780                            SS_End:
00004780 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004786 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000478C 4278 F794                  		clr.w	($FFFFF794).w
00004790                            
00004790                            SS_EndLoop:
00004790 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004796 6100 E210                  		bsr.w	DelayProgram
0000479A 6100 F832                  		bsr.w	MoveSonicInDemo
0000479E 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000047A4 4EB9 0000 0000             		jsr	ObjectsLoad
000047AA 4EB9 0000 0000             		jsr	BuildSprites
000047B0 4EB9 0000 0000             		jsr	SS_ShowLayout
000047B6 6100 0000                  		bsr.w	SS_BGAnimate
000047BA 5378 F794                  		subq.w	#1,($FFFFF794).w
000047BE 6A00                       		bpl.s	loc_47D4
000047C0 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000047C6 6100 D7D4                  		bsr.w	Pal_ToWhite
000047CA                            
000047CA                            loc_47D4:
000047CA 4A78 F614                  		tst.w	($FFFFF614).w
000047CE 66C0                       		bne.s	SS_EndLoop
000047D0                            
000047D0 46FC 2700                  		move	#$2700,sr
000047D4 4DF9 00C0 0004             		lea	($C00004).l,a6
000047DA 3CBC 8230                  		move.w	#$8230,(a6)
000047DE 3CBC 8407                  		move.w	#$8407,(a6)
000047E2 3CBC 9001                  		move.w	#$9001,(a6)
000047E6 6100 CADC                  		bsr.w	ClearScreen
000047EA 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000047F4 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000047FA 6100 CC44                  		bsr.w	NemDec
000047FE 4EB9 0000 0000             		jsr	Hud_Base
00004804 46FC 2300                  		move	#$2300,sr
00004808 7011                       		moveq	#$11,d0
0000480A 6100 D90C                  		bsr.w	PalLoad2	; load results screen pallet
0000480E 7000                       		moveq	#0,d0
00004810 6100 CDA0                  		bsr.w	LoadPLC2
00004814 701B                       		moveq	#$1B,d0
00004816 6100 CD68                  		bsr.w	LoadPLC		; load results screen patterns
0000481A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004820 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004826 3038 FE20                  		move.w	($FFFFFE20).w,d0
0000482A C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
0000482E 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004832 303C 008E                  		move.w	#$8E,d0
00004836 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play end-of-level music
0000483C 43F8 D000                  		lea	($FFFFD000).w,a1
00004840 7000                       		moveq	#0,d0
00004842 323C 07FF                  		move.w	#$7FF,d1
00004846                            
00004846                            SS_EndClrObjRam:
00004846 22C0                       		move.l	d0,(a1)+
00004848 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
0000484C                            
0000484C 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004852                            
00004852                            SS_NormalExit:
00004852 6100 CB54                  		bsr.w	PauseGame
00004856 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000485C 6100 E14A                  		bsr.w	DelayProgram
00004860 4EB9 0000 0000             		jsr	ObjectsLoad
00004866 4EB9 0000 0000             		jsr	BuildSprites
0000486C 6100 CD7E                  		bsr.w	RunPLC_RAM
00004870 4A78 FE02                  		tst.w	($FFFFFE02).w
00004874 67DC                       		beq.s	SS_NormalExit
00004876 4AB8 F680                  		tst.l	($FFFFF680).w
0000487A 66D6                       		bne.s	SS_NormalExit
0000487C 303C 00CA                  		move.w	#$CA,d0
00004880 6100 CB1A                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004884 6100 D6F6                  		bsr.w	Pal_MakeFlash
00004888 4E75                       		rts	
0000488A                            ; ===========================================================================
0000488A                            
0000488A                            SS_ToSegaScreen:
0000488A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004890 4E75                       		rts
00004892                            
00004892                            ; ---------------------------------------------------------------------------
00004892                            ; Special stage	background loading subroutine
00004892                            ; ---------------------------------------------------------------------------
00004892                            
00004892                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004892                            
00004892                            
00004892                            SS_BGLoad:				; XREF: SpecialStage
00004892 43F9 00FF 0000             		lea	($FF0000).l,a1
00004898 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
0000489E 303C 4051                  		move.w	#$4051,d0
000048A2 6100 CE7A                  		bsr.w	EniDec
000048A6 263C 5000 0001             		move.l	#$50000001,d3
000048AC 45F9 00FF 0080             		lea	($FF0080).l,a2
000048B2 7E06                       		moveq	#6,d7
000048B4                            
000048B4                            loc_48BE:
000048B4 2003                       		move.l	d3,d0
000048B6 7C03                       		moveq	#3,d6
000048B8 7800                       		moveq	#0,d4
000048BA 0C47 0003                  		cmpi.w	#3,d7
000048BE 6400                       		bcc.s	loc_48CC
000048C0 7801                       		moveq	#1,d4
000048C2                            
000048C2                            loc_48CC:
000048C2 7A07                       		moveq	#7,d5
000048C4                            
000048C4                            loc_48CE:
000048C4 224A                       		movea.l	a2,a1
000048C6 0A04 0001                  		eori.b	#1,d4
000048CA 6600                       		bne.s	loc_48E2
000048CC 0C47 0006                  		cmpi.w	#6,d7
000048D0 6600                       		bne.s	loc_48F2
000048D2 43F9 00FF 0000             		lea	($FF0000).l,a1
000048D8                            
000048D8                            loc_48E2:
000048D8 48E7 F800                  		movem.l	d0-d4,-(sp)
000048DC 7207                       		moveq	#7,d1
000048DE 7407                       		moveq	#7,d2
000048E0 6100 CB3E                  		bsr.w	ShowVDPGraphics
000048E4 4CDF 001F                  		movem.l	(sp)+,d0-d4
000048E8                            
000048E8                            loc_48F2:
000048E8 0680 0010 0000             		addi.l	#$100000,d0
000048EE 51CD FFD4                  		dbf	d5,loc_48CE
000048F2 0680 0380 0000             		addi.l	#$3800000,d0
000048F8 0A04 0001                  		eori.b	#1,d4
000048FC 51CE FFC4                  		dbf	d6,loc_48CC
00004900 0683 1000 0000             		addi.l	#$10000000,d3
00004906 6A00                       		bpl.s	loc_491C
00004908 4843                       		swap	d3
0000490A 0683 0000 C000             		addi.l	#$C000,d3
00004910 4843                       		swap	d3
00004912                            
00004912                            loc_491C:
00004912 D4FC 0080                  		adda.w	#$80,a2
00004916 51CF FF9C                  		dbf	d7,loc_48BE
0000491A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004920 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004926 303C 4000                  		move.w	#$4000,d0
0000492A 6100 CDF2                  		bsr.w	EniDec
0000492E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004934 203C 4000 0003             		move.l	#$40000003,d0
0000493A 723F                       		moveq	#$3F,d1
0000493C 741F                       		moveq	#$1F,d2
0000493E 6100 CAE0                  		bsr.w	ShowVDPGraphics
00004942 43F9 00FF 0000             		lea	($FF0000).l,a1
00004948 203C 5000 0003             		move.l	#$50000003,d0
0000494E 723F                       		moveq	#$3F,d1
00004950 743F                       		moveq	#$3F,d2
00004952 6100 CACC                  		bsr.w	ShowVDPGraphics
00004956 4E75                       		rts	
00004958                            ; End of function SS_BGLoad
00004958                            
00004958                            ; ---------------------------------------------------------------------------
00004958                            ; Pallet cycling routine - special stage
00004958                            ; ---------------------------------------------------------------------------
00004958                            
00004958                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004958                            
00004958                            
00004958                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004958 4A78 F63A                  		tst.w	($FFFFF63A).w
0000495C 6600                       		bne.s	locret_49E6
0000495E 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004962 6A00                       		bpl.s	locret_49E6
00004964 4DF9 00C0 0004             		lea	($C00004).l,a6
0000496A 3038 F79A                  		move.w	($FFFFF79A).w,d0
0000496E 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004972 0240 001F                  		andi.w	#$1F,d0
00004976 E548                       		lsl.w	#2,d0
00004978 41F9 0000 0000             		lea	(byte_4A3C).l,a0
0000497E D0C0                       		adda.w	d0,a0
00004980 1018                       		move.b	(a0)+,d0
00004982 6A00                       		bpl.s	loc_4992
00004984 303C 01FF                  		move.w	#$1FF,d0
00004988                            
00004988                            loc_4992:
00004988 31C0 F79C                  		move.w	d0,($FFFFF79C).w
0000498C 7000                       		moveq	#0,d0
0000498E 1018                       		move.b	(a0)+,d0
00004990 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004994 43F9 0000 0000             		lea	(byte_4ABC).l,a1
0000499A 43F1 0000                  		lea	(a1,d0.w),a1
0000499E 303C 8200                  		move.w	#-$7E00,d0
000049A2 1019                       		move.b	(a1)+,d0
000049A4 3C80                       		move.w	d0,(a6)
000049A6 11D1 F616                  		move.b	(a1),($FFFFF616).w
000049AA 303C 8400                  		move.w	#-$7C00,d0
000049AE 1018                       		move.b	(a0)+,d0
000049B0 3C80                       		move.w	d0,(a6)
000049B2 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000049BC 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000049C4 7000                       		moveq	#0,d0
000049C6 1018                       		move.b	(a0)+,d0
000049C8 6B00                       		bmi.s	loc_49E8
000049CA 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000049D0 D2C0                       		adda.w	d0,a1
000049D2 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
000049D6 24D9                       		move.l	(a1)+,(a2)+
000049D8 24D9                       		move.l	(a1)+,(a2)+
000049DA 24D9                       		move.l	(a1)+,(a2)+
000049DC                            
000049DC                            locret_49E6:
000049DC 4E75                       		rts	
000049DE                            ; ===========================================================================
000049DE                            
000049DE                            loc_49E8:				; XREF: PalCycle_SS
000049DE 3238 F79E                  		move.w	($FFFFF79E).w,d1
000049E2 0C40 008A                  		cmpi.w	#$8A,d0
000049E6 6500                       		bcs.s	loc_49F4
000049E8 5241                       		addq.w	#1,d1
000049EA                            
000049EA                            loc_49F4:
000049EA C2FC 002A                  		mulu.w	#$2A,d1
000049EE 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
000049F4 D2C1                       		adda.w	d1,a1
000049F6 0240 007F                  		andi.w	#$7F,d0
000049FA 0880 0000                  		bclr	#0,d0
000049FE 6700                       		beq.s	loc_4A18
00004A00 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004A04 24D1                       		move.l	(a1),(a2)+
00004A06 24E9 0004                  		move.l	4(a1),(a2)+
00004A0A 24E9 0008                  		move.l	8(a1),(a2)+
00004A0E                            
00004A0E                            loc_4A18:
00004A0E D2FC 000C                  		adda.w	#$C,a1
00004A12 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004A16 0C40 000A                  		cmpi.w	#$A,d0
00004A1A 6500                       		bcs.s	loc_4A2E
00004A1C 0440 000A                  		subi.w	#$A,d0
00004A20 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004A24                            
00004A24                            loc_4A2E:
00004A24 3200                       		move.w	d0,d1
00004A26 D040                       		add.w	d0,d0
00004A28 D041                       		add.w	d1,d0
00004A2A D2C0                       		adda.w	d0,a1
00004A2C 24D9                       		move.l	(a1)+,(a2)+
00004A2E 34D9                       		move.w	(a1)+,(a2)+
00004A30 4E75                       		rts	
00004A32                            ; End of function PalCycle_SS
00004A32                            
00004A32                            ; ===========================================================================
00004A32 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004A42                            					; XREF: PalCycle_SS
00004A42 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004A52 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004A62 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004A72 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004A82 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004A92 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004AA2 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004AB2                            		even
00004AB2 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004AC0                            					; XREF: PalCycle_SS
00004AC0                            		even
00004AC0                            
00004AC0                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004B08                            		even
00004B08                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004BDA                            		even
00004BDA                            
00004BDA                            ; ---------------------------------------------------------------------------
00004BDA                            ; Subroutine to	make the special stage background animated
00004BDA                            ; ---------------------------------------------------------------------------
00004BDA                            
00004BDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BDA                            
00004BDA                            
00004BDA                            SS_BGAnimate:				; XREF: SpecialStage
00004BDA 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004BDE 6600                       		bne.s	loc_4BF6
00004BE0 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004BE6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004BEC                            
00004BEC                            loc_4BF6:
00004BEC 0C40 0008                  		cmpi.w	#8,d0
00004BF0 6400                       		bcc.s	loc_4C4E
00004BF2 0C40 0006                  		cmpi.w	#6,d0
00004BF6 6600                       		bne.s	loc_4C10
00004BF8 5278 F718                  		addq.w	#1,($FFFFF718).w
00004BFC 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004C00 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004C06                            
00004C06                            loc_4C10:
00004C06 7000                       		moveq	#0,d0
00004C08 3038 F708                  		move.w	($FFFFF708).w,d0
00004C0C 4440                       		neg.w	d0
00004C0E 4840                       		swap	d0
00004C10 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004C16 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004C1A 7609                       		moveq	#9,d3
00004C1C                            
00004C1C                            loc_4C26:
00004C1C 302B 0002                  		move.w	2(a3),d0
00004C20 6100 DDB8                  		bsr.w	CalcSine
00004C24 7400                       		moveq	#0,d2
00004C26 1419                       		move.b	(a1)+,d2
00004C28 C1C2                       		muls.w	d2,d0
00004C2A E080                       		asr.l	#8,d0
00004C2C 36C0                       		move.w	d0,(a3)+
00004C2E 1419                       		move.b	(a1)+,d2
00004C30 4882                       		ext.w	d2
00004C32 D55B                       		add.w	d2,(a3)+
00004C34 51CB FFE6                  		dbf	d3,loc_4C26
00004C38 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004C3C 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004C42 6000                       		bra.s	loc_4C7E
00004C44                            ; ===========================================================================
00004C44                            
00004C44                            loc_4C4E:				; XREF: SS_BGAnimate
00004C44 0C40 000C                  		cmpi.w	#$C,d0
00004C48 6600                       		bne.s	loc_4C74
00004C4A 5378 F718                  		subq.w	#1,($FFFFF718).w
00004C4E 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004C52 243C 0001 8000             		move.l	#$18000,d2
00004C58 7206                       		moveq	#6,d1
00004C5A                            
00004C5A                            loc_4C64:
00004C5A 2013                       		move.l	(a3),d0
00004C5C 9082                       		sub.l	d2,d0
00004C5E 26C0                       		move.l	d0,(a3)+
00004C60 0482 0000 2000             		subi.l	#$2000,d2
00004C66 51C9 FFF2                  		dbf	d1,loc_4C64
00004C6A                            
00004C6A                            loc_4C74:
00004C6A 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004C6E 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004C74                            
00004C74                            loc_4C7E:
00004C74 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004C78 3038 F718                  		move.w	($FFFFF718).w,d0
00004C7C 4440                       		neg.w	d0
00004C7E 4840                       		swap	d0
00004C80 7600                       		moveq	#0,d3
00004C82 161A                       		move.b	(a2)+,d3
00004C84 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004C88 4442                       		neg.w	d2
00004C8A 0242 00FF                  		andi.w	#$FF,d2
00004C8E E54A                       		lsl.w	#2,d2
00004C90                            
00004C90                            loc_4C9A:
00004C90 301B                       		move.w	(a3)+,d0
00004C92 544B                       		addq.w	#2,a3
00004C94 7200                       		moveq	#0,d1
00004C96 121A                       		move.b	(a2)+,d1
00004C98 5341                       		subq.w	#1,d1
00004C9A                            
00004C9A                            loc_4CA4:
00004C9A 2380 2000                  		move.l	d0,(a1,d2.w)
00004C9E 5842                       		addq.w	#4,d2
00004CA0 0242 03FC                  		andi.w	#$3FC,d2
00004CA4 51C9 FFF4                  		dbf	d1,loc_4CA4
00004CA8 51CB FFE6                  		dbf	d3,loc_4C9A
00004CAC 4E75                       		rts	
00004CAE                            ; End of function SS_BGAnimate
00004CAE                            
00004CAE                            ; ===========================================================================
00004CAE 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00004CBA                            		even
00004CBA 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00004CC2                            		even
00004CC2 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00004CD6                            		even
00004CD6                            					; XREF: SS_BGAnimate
00004CD6                            ; ===========================================================================
00004CD6                            
00004CD6                            ; ---------------------------------------------------------------------------
00004CD6                            ; Continue screen
00004CD6                            ; ---------------------------------------------------------------------------
00004CD6                            
00004CD6                            ContinueScreen:				; XREF: GameModeArray
00004CD6 6100 D17A                  		bsr.w	Pal_FadeFrom
00004CDA 46FC 2700                  		move	#$2700,sr
00004CDE 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004CE2 0200 00BF                  		andi.b	#$BF,d0
00004CE6 33C0 00C0 0004             		move.w	d0,($C00004).l
00004CEC 4DF9 00C0 0004             		lea	($C00004).l,a6
00004CF2 3CBC 8004                  		move.w	#$8004,(a6)
00004CF6 3CBC 8700                  		move.w	#$8700,(a6)
00004CFA 6100 C5C8                  		bsr.w	ClearScreen
00004CFE 43F8 D000                  		lea	($FFFFD000).w,a1
00004D02 7000                       		moveq	#0,d0
00004D04 323C 07FF                  		move.w	#$7FF,d1
00004D08                            
00004D08                            Cont_ClrObjRam:
00004D08 22C0                       		move.l	d0,(a1)+
00004D0A 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00004D0E                            
00004D0E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004D18 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004D1E 6100 C720                  		bsr.w	NemDec
00004D22 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00004D2C 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00004D32 6100 C70C                  		bsr.w	NemDec
00004D36 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00004D40 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00004D46 6100 C6F8                  		bsr.w	NemDec
00004D4A 720A                       		moveq	#10,d1
00004D4C 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00004D52 7012                       		moveq	#$12,d0
00004D54 6100 D3A6                  		bsr.w	PalLoad1	; load continue	screen pallet
00004D58 103C 0090                  		move.b	#$90,d0
00004D5C 6100 C638                  		bsr.w	PlaySound	; play continue	music
00004D60 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00004D66 42B8 F700                  		clr.l	($FFFFF700).w
00004D6A 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00004D72 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00004D78 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00004D7E 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00004D84 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00004D8A 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00004D90 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00004D96 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00004D9C 4EB9 0000 0000             		jsr	ObjectsLoad
00004DA2 4EB9 0000 0000             		jsr	BuildSprites
00004DA8 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004DAC 0000 0040                  		ori.b	#$40,d0
00004DB0 33C0 00C0 0004             		move.w	d0,($C00004).l
00004DB6 6100 CFF4                  		bsr.w	Pal_FadeTo
00004DBA                            
00004DBA                            ; ---------------------------------------------------------------------------
00004DBA                            ; Continue screen main loop
00004DBA                            ; ---------------------------------------------------------------------------
00004DBA                            
00004DBA                            Cont_MainLoop:
00004DBA 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004DC0 6100 DBE6                  		bsr.w	DelayProgram
00004DC4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004DCA 6400                       		bcc.s	loc_4DF2
00004DCC 46FC 2700                  		move	#$2700,sr
00004DD0 3238 F614                  		move.w	($FFFFF614).w,d1
00004DD4 82FC 003C                  		divu.w	#$3C,d1
00004DD8 0281 0000 000F             		andi.l	#$F,d1
00004DDE 4EB9 0000 0000             		jsr	ContScrCounter
00004DE4 46FC 2300                  		move	#$2300,sr
00004DE8                            
00004DE8                            loc_4DF2:
00004DE8 4EB9 0000 0000             		jsr	ObjectsLoad
00004DEE 4EB9 0000 0000             		jsr	BuildSprites
00004DF4 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00004DFA 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00004DFC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004E02 64B6                       		bcc.s	Cont_MainLoop
00004E04 4A78 F614                  		tst.w	($FFFFF614).w
00004E08 6600 FFB0                  		bne.w	Cont_MainLoop
00004E0C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004E12 4E75                       		rts	
00004E14                            ; ===========================================================================
00004E14                            
00004E14                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00004E14 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004E1A 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00004E20 7000                       		moveq	#0,d0
00004E22 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004E26 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004E2A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004E2E 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00004E32 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00004E36 4E75                       		rts	
00004E38                            ; ===========================================================================
00004E38                            
00004E38                            ; ---------------------------------------------------------------------------
00004E38                            ; Object 80 - Continue screen elements
00004E38                            ; ---------------------------------------------------------------------------
00004E38                            
00004E38                            Obj80:					; XREF: Obj_Index
00004E38 7000                       		moveq	#0,d0
00004E3A 1028 0024                  		move.b	$24(a0),d0
00004E3E 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00004E42 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00004E46                            ; ===========================================================================
00004E46 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00004E48 0000                       		dc.w Obj80_Display-Obj80_Index
00004E4A 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00004E4C 0000                       		dc.w Obj80_ChkType-Obj80_Index
00004E4E                            ; ===========================================================================
00004E4E                            
00004E4E                            Obj80_Main:				; XREF: Obj80_Index
00004E4E 5428 0024                  		addq.b	#2,$24(a0)
00004E52 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00004E5A 317C 8500 0002             		move.w	#$8500,2(a0)
00004E60 117C 0000 0001             		move.b	#0,1(a0)
00004E66 117C 003C 0019             		move.b	#$3C,$19(a0)
00004E6C 317C 0120 0008             		move.w	#$120,8(a0)
00004E72 317C 00C0 000A             		move.w	#$C0,$A(a0)
00004E78 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00004E7E                            
00004E7E                            Obj80_Display:				; XREF: Obj80_Index
00004E7E 4EF9 0000 0000             		jmp	DisplaySprite
00004E84                            ; ===========================================================================
00004E84                            Obj80_MiniSonicPos:
00004E84 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00004E96 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00004EA2                            ; ===========================================================================
00004EA2                            
00004EA2                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00004EA2 2248                       		movea.l	a0,a1
00004EA4 45F9 0000 4E84             		lea	(Obj80_MiniSonicPos).l,a2
00004EAA 7200                       		moveq	#0,d1
00004EAC 1238 FE18                  		move.b	($FFFFFE18).w,d1
00004EB0 5501                       		subq.b	#2,d1
00004EB2 6400                       		bcc.s	loc_4EC4
00004EB4 4EF9 0000 0000             		jmp	DeleteObject
00004EBA                            ; ===========================================================================
00004EBA                            
00004EBA                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00004EBA 7601                       		moveq	#1,d3
00004EBC 0C01 000E                  		cmpi.b	#$E,d1
00004EC0 6500                       		bcs.s	loc_4ED0
00004EC2 7600                       		moveq	#0,d3
00004EC4 720E                       		moveq	#$E,d1
00004EC6                            
00004EC6                            loc_4ED0:
00004EC6 1401                       		move.b	d1,d2
00004EC8 0202 0001                  		andi.b	#1,d2
00004ECC                            
00004ECC                            Obj80_MiniSonLoop:
00004ECC 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00004ED0 335A 0008                  		move.w	(a2)+,8(a1)
00004ED4 4A02                       		tst.b	d2
00004ED6 6700                       		beq.s	loc_4EEA
00004ED8 0469 000A 0008             		subi.w	#$A,8(a1)
00004EDE                            
00004EDE                            loc_4EEA:
00004EDE 337C 00D0 000A             		move.w	#$D0,$A(a1)
00004EE4 137C 0006 001A             		move.b	#6,$1A(a1)
00004EEA 137C 0006 0024             		move.b	#6,$24(a1)
00004EF0 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00004EF8 337C 8551 0002             		move.w	#$8551,2(a1)
00004EFE 137C 0000 0001             		move.b	#0,1(a1)
00004F04 43E9 0040                  		lea	$40(a1),a1
00004F08 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00004F0C 43E9 FFC0                  		lea	-$40(a1),a1
00004F10 1343 0028                  		move.b	d3,$28(a1)
00004F14                            
00004F14                            Obj80_ChkType:				; XREF: Obj80_Index
00004F14 4A28 0028                  		tst.b	$28(a0)
00004F18 6700                       		beq.s	loc_4F40
00004F1A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004F20 6500                       		bcs.s	loc_4F40
00004F22 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004F26 0200 0001                  		andi.b	#1,d0
00004F2A 6600                       		bne.s	loc_4F40
00004F2C 4A78 D010                  		tst.w	($FFFFD010).w
00004F30 6600                       		bne.s	Obj80_Delete
00004F32 4E75                       		rts	
00004F34                            ; ===========================================================================
00004F34                            
00004F34                            loc_4F40:				; XREF: Obj80_ChkType
00004F34 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004F38 0200 000F                  		andi.b	#$F,d0
00004F3C 6600                       		bne.s	Obj80_Display2
00004F3E 0868 0000 001A             		bchg	#0,$1A(a0)
00004F44                            
00004F44                            Obj80_Display2:
00004F44 4EF9 0000 0000             		jmp	DisplaySprite
00004F4A                            ; ===========================================================================
00004F4A                            
00004F4A                            Obj80_Delete:				; XREF: Obj80_ChkType
00004F4A 4EF9 0000 0000             		jmp	DeleteObject
00004F50                            ; ===========================================================================
00004F50                            
00004F50                            ; ---------------------------------------------------------------------------
00004F50                            ; Object 81 - Sonic on the continue screen
00004F50                            ; ---------------------------------------------------------------------------
00004F50                            
00004F50                            Obj81:					; XREF: Obj_Index
00004F50 7000                       		moveq	#0,d0
00004F52 1028 0024                  		move.b	$24(a0),d0
00004F56 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00004F5A 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00004F5E 4EF9 0000 0000             		jmp	DisplaySprite
00004F64                            ; ===========================================================================
00004F64 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00004F66 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00004F68 0000                       		dc.w Obj81_Animate-Obj81_Index
00004F6A 0000                       		dc.w Obj81_Run-Obj81_Index
00004F6C                            ; ===========================================================================
00004F6C                            
00004F6C                            Obj81_Main:				; XREF: Obj81_Index
00004F6C 5428 0024                  		addq.b	#2,$24(a0)
00004F70 317C 00A0 0008             		move.w	#$A0,8(a0)
00004F76 317C 00C0 000C             		move.w	#$C0,$C(a0)
00004F7C 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00004F84 317C 0780 0002             		move.w	#$780,2(a0)
00004F8A 117C 0004 0001             		move.b	#4,1(a0)
00004F90 117C 0002 0018             		move.b	#2,$18(a0)
00004F96 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00004F9C 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00004FA2                            
00004FA2                            Obj81_ChkLand:				; XREF: Obj81_Index
00004FA2 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00004FA8 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00004FAA 5428 0024                  		addq.b	#2,$24(a0)
00004FAE 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00004FB2 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00004FBA 317C 8500 0002             		move.w	#$8500,2(a0)
00004FC0 117C 0000 001C             		move.b	#0,$1C(a0)
00004FC6 6000                       		bra.s	Obj81_Animate
00004FC8                            ; ===========================================================================
00004FC8                            
00004FC8                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00004FC8 4EB9 0000 0000             		jsr	SpeedToPos
00004FCE 4EB9 0000 0000             		jsr	Sonic_Animate
00004FD4 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00004FDA                            ; ===========================================================================
00004FDA                            
00004FDA                            Obj81_Animate:				; XREF: Obj81_Index
00004FDA 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00004FDE 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00004FE0 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00004FE6 4EF9 0000 0000             		jmp	AnimateSprite
00004FEC                            ; ===========================================================================
00004FEC                            
00004FEC                            Obj81_GetUp:				; XREF: Obj81_Animate
00004FEC 5428 0024                  		addq.b	#2,$24(a0)
00004FF0 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00004FF8 317C 0780 0002             		move.w	#$780,2(a0)
00004FFE 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005004 4268 0014                  		clr.w	$14(a0)
00005008 5168 000C                  		subq.w	#8,$C(a0)
0000500C 103C 00E0                  		move.b	#$E0,d0
00005010 6100 C38A                  		bsr.w	PlaySound_Special ; fade out music
00005014                            
00005014                            Obj81_Run:				; XREF: Obj81_Index
00005014 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
0000501A 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000501C 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005022 6000                       		bra.s	Obj81_ShowRun
00005024                            ; ===========================================================================
00005024                            
00005024                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005024 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
0000502A                            
0000502A                            Obj81_ShowRun:				; XREF: Obj81_Run
0000502A 4EB9 0000 0000             		jsr	SpeedToPos
00005030 4EB9 0000 0000             		jsr	Sonic_Animate
00005036 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000503C                            ; ===========================================================================
0000503C                            Ani_obj81:
0000503C                            	include "_anim\obj81.asm"
0000503C                            ; ---------------------------------------------------------------------------
0000503C                            ; Animation script - Sonic on the continue screen
0000503C                            ; ---------------------------------------------------------------------------
0000503C 0000                       		dc.w byte_504A-Ani_obj81
0000503E 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000504A 00                         		even
0000504A 00                         		even
0000504A                            
0000504A                            ; ---------------------------------------------------------------------------
0000504A                            ; Sprite mappings - Continue screen
0000504A                            ; ---------------------------------------------------------------------------
0000504A                            Map_obj80:
0000504A                            	include "_maps\obj80.asm"
0000504A                            ; ---------------------------------------------------------------------------
0000504A                            ; Sprite mappings - Continue screen
0000504A                            ; ---------------------------------------------------------------------------
0000504A 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000504E 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005052 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005056 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
0000505A 0B                         byte_5066:	dc.b $B
0000505B F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005060 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005065 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000506A F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
0000506F F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005074 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005079 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
0000507E F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005083 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005088 3805 2021 08               		dc.b $38, 5, $20, $21, 8
0000508D 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005092 03                         byte_509E:	dc.b 3
00005093 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005098 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000509D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050A2 03                         byte_50AE:	dc.b 3
000050A3 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000050A8 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050AD F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050B2 03                         byte_50BE:	dc.b 3
000050B3 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000050B8 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050BD F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050C2 02                         byte_50CE:	dc.b 2
000050C3 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000050C8 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000050CD 01                         byte_50D9:	dc.b 1
000050CE 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000050D3 01                         byte_50DF:	dc.b 1
000050D4 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000050DA 00                         		even
000050DA 00                         		even
000050DA                            
000050DA                            ; ===========================================================================
000050DA                            ; ---------------------------------------------------------------------------
000050DA                            ; Ending sequence in Green Hill	Zone
000050DA                            ; ---------------------------------------------------------------------------
000050DA                            
000050DA                            EndingSequence:				; XREF: GameModeArray
000050DA 103C 00E4                  		move.b	#$E4,d0
000050DE 6100 C2BC                  		bsr.w	PlaySound_Special ; stop music
000050E2 6100 CD6E                  		bsr.w	Pal_FadeFrom
000050E6 43F8 D000                  		lea	($FFFFD000).w,a1
000050EA 7000                       		moveq	#0,d0
000050EC 323C 07FF                  		move.w	#$7FF,d1
000050F0                            
000050F0                            End_ClrObjRam:
000050F0 22C0                       		move.l	d0,(a1)+
000050F2 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000050F6                            
000050F6 43F8 F628                  		lea	($FFFFF628).w,a1
000050FA 7000                       		moveq	#0,d0
000050FC 323C 0015                  		move.w	#$15,d1
00005100                            
00005100                            End_ClrRam:
00005100 22C0                       		move.l	d0,(a1)+
00005102 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005106                            
00005106 43F8 F700                  		lea	($FFFFF700).w,a1
0000510A 7000                       		moveq	#0,d0
0000510C 323C 003F                  		move.w	#$3F,d1
00005110                            
00005110                            End_ClrRam2:
00005110 22C0                       		move.l	d0,(a1)+
00005112 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005116                            
00005116 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000511A 7000                       		moveq	#0,d0
0000511C 323C 0047                  		move.w	#$47,d1
00005120                            
00005120                            End_ClrRam3:
00005120 22C0                       		move.l	d0,(a1)+
00005122 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005126                            
00005126 46FC 2700                  		move	#$2700,sr
0000512A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000512E 0200 00BF                  		andi.b	#$BF,d0
00005132 33C0 00C0 0004             		move.w	d0,($C00004).l
00005138 6100 C18A                  		bsr.w	ClearScreen
0000513C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005142 3CBC 8B03                  		move.w	#$8B03,(a6)
00005146 3CBC 8230                  		move.w	#$8230,(a6)
0000514A 3CBC 8407                  		move.w	#$8407,(a6)
0000514E 3CBC 857C                  		move.w	#$857C,(a6)
00005152 3CBC 9001                  		move.w	#$9001,(a6)
00005156 3CBC 8004                  		move.w	#$8004,(a6)
0000515A 3CBC 8720                  		move.w	#$8720,(a6)
0000515E 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005164 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005168 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000516E 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005174 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000517A 6700                       		beq.s	End_LoadData	; if yes, branch
0000517C 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005182                            
00005182                            End_LoadData:
00005182 701C                       		moveq	#$1C,d0
00005184 6100 C566                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005188 4EB9 0000 0000             		jsr	Hud_Base
0000518E 6100 0000                  		bsr.w	LevelSizeLoad
00005192 6100 0000                  		bsr.w	DeformBgLayer
00005196 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000519C 6100 0000                  		bsr.w	MainLoadBlockLoad
000051A0 6100 0000                  		bsr.w	LoadTilesFromStart
000051A4 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000051AC 46FC 2300                  		move	#$2300,sr
000051B0 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000051B6 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000051BA 6100 C6E0                  		bsr.w	KosDec
000051BE 7003                       		moveq	#3,d0
000051C0 6100 CF3A                  		bsr.w	PalLoad1	; load Sonic's pallet
000051C4 303C 008B                  		move.w	#$8B,d0
000051C8 6100 C1CC                  		bsr.w	PlaySound	; play ending sequence music
000051CC 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000051D2 6700                       		beq.s	End_LoadSonic	; if not, branch
000051D4 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000051DA                            
000051DA                            End_LoadSonic:
000051DA 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000051E0 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
000051E6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000051EC 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
000051F2 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
000051F8 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000051FE 4EB9 0000 0000             		jsr	ObjPosLoad
00005204 4EB9 0000 0000             		jsr	ObjectsLoad
0000520A 4EB9 0000 0000             		jsr	BuildSprites
00005210 7000                       		moveq	#0,d0
00005212 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005216 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000521A 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000521E 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005222 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005226 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000522A 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000522E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005232 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005236 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000523A 6100 EEDA                  		bsr.w	OscillateNumInit
0000523E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005244 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000524A 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005250 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005256 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000525C 6100 D74A                  		bsr.w	DelayProgram
00005260 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005264 0000 0040                  		ori.b	#$40,d0
00005268 33C0 00C0 0004             		move.w	d0,($C00004).l
0000526E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005274 6100 CB36                  		bsr.w	Pal_FadeTo
00005278                            
00005278                            ; ---------------------------------------------------------------------------
00005278                            ; Main ending sequence loop
00005278                            ; ---------------------------------------------------------------------------
00005278                            
00005278                            End_MainLoop:
00005278 6100 C12E                  		bsr.w	PauseGame
0000527C 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005282 6100 D724                  		bsr.w	DelayProgram
00005286 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000528A 6100 0000                  		bsr.w	End_MoveSonic
0000528E 4EB9 0000 0000             		jsr	ObjectsLoad
00005294 6100 0000                  		bsr.w	DeformBgLayer
00005298 4EB9 0000 0000             		jsr	BuildSprites
0000529E 4EB9 0000 0000             		jsr	ObjPosLoad
000052A4 6100 C696                  		bsr.w	PalCycle_Load
000052A8 6100 EEC2                  		bsr.w	OscillateNumDo
000052AC 6100 EF4E                  		bsr.w	ChangeRingFrame
000052B0 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000052B6 6700                       		beq.s	loc_52DA	; if yes, branch
000052B8 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
000052BE 103C 0091                  		move.b	#$91,d0
000052C2 6100 C0D8                  		bsr.w	PlaySound_Special ; play credits music
000052C6 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000052CC 4E75                       		rts	
000052CE                            ; ===========================================================================
000052CE                            
000052CE                            loc_52DA:
000052CE 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000052D2 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000052D6                            
000052D6 4278 FE02                  		clr.w	($FFFFFE02).w
000052DA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000052E0 4278 F794                  		clr.w	($FFFFF794).w
000052E4                            
000052E4                            End_AllEmlds:				; XREF: loc_5334
000052E4 6100 C0C2                  		bsr.w	PauseGame
000052E8 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000052EE 6100 D6B8                  		bsr.w	DelayProgram
000052F2 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000052F6 6100 0000                  		bsr.w	End_MoveSonic
000052FA 4EB9 0000 0000             		jsr	ObjectsLoad
00005300 6100 0000                  		bsr.w	DeformBgLayer
00005304 4EB9 0000 0000             		jsr	BuildSprites
0000530A 4EB9 0000 0000             		jsr	ObjPosLoad
00005310 6100 EE5A                  		bsr.w	OscillateNumDo
00005314 6100 EEE6                  		bsr.w	ChangeRingFrame
00005318 5378 F794                  		subq.w	#1,($FFFFF794).w
0000531C 6A00                       		bpl.s	loc_5334
0000531E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005324 6100 CC76                  		bsr.w	Pal_ToWhite
00005328                            
00005328                            loc_5334:
00005328 4A78 FE02                  		tst.w	($FFFFFE02).w
0000532C 6700 FFB6                  		beq.w	End_AllEmlds
00005330 4278 FE02                  		clr.w	($FFFFFE02).w
00005334 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000533A 4BF9 00C0 0004             		lea	($C00004).l,a5
00005340 4DF9 00C0 0000             		lea	($C00000).l,a6
00005346 47F8 F700                  		lea	($FFFFF700).w,a3
0000534A 49F8 A400                  		lea	($FFFFA400).w,a4
0000534E 343C 4000                  		move.w	#$4000,d2
00005352 6100 0000                  		bsr.w	LoadTilesFromStart2
00005356 7013                       		moveq	#$13,d0
00005358 6100 CDA2                  		bsr.w	PalLoad1	; load ending pallet
0000535C 6100 CB72                  		bsr.w	Pal_MakeWhite
00005360 6000 FF16                  		bra.w	End_MainLoop
00005364                            
00005364                            ; ---------------------------------------------------------------------------
00005364                            ; Subroutine controlling Sonic on the ending sequence
00005364                            ; ---------------------------------------------------------------------------
00005364                            
00005364                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005364                            
00005364                            
00005364                            End_MoveSonic:				; XREF: End_MainLoop
00005364 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005368 6600                       		bne.s	End_MoveSonic2
0000536A 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005370 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005372 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005376 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
0000537C 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005382 4E75                       		rts	
00005384                            ; ===========================================================================
00005384                            
00005384                            End_MoveSonic2:				; XREF: End_MoveSonic
00005384 5500                       		subq.b	#2,d0
00005386 6600                       		bne.s	End_MoveSonic3
00005388 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
0000538E 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005390 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005394 7000                       		moveq	#0,d0
00005396 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
0000539A 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
0000539E 31C0 D014                  		move.w	d0,($FFFFD014).w
000053A2 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000053A8 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000053AE 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000053B4 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
000053BA 4E75                       		rts	
000053BC                            ; ===========================================================================
000053BC                            
000053BC                            End_MoveSonic3:				; XREF: End_MoveSonic
000053BC 5500                       		subq.b	#2,d0
000053BE 6600                       		bne.s	End_MoveSonExit
000053C0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000053C4 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000053CA 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
000053D0 4278 D024                  		clr.w	($FFFFD024).w
000053D4                            
000053D4                            End_MoveSonExit:
000053D4 4E75                       		rts	
000053D6                            ; End of function End_MoveSonic
000053D6                            
000053D6                            ; ===========================================================================
000053D6                            ; ---------------------------------------------------------------------------
000053D6                            ; Object 87 - Sonic on ending sequence
000053D6                            ; ---------------------------------------------------------------------------
000053D6                            
000053D6                            Obj87:					; XREF: Obj_Index
000053D6 7000                       		moveq	#0,d0
000053D8 1028 0025                  		move.b	$25(a0),d0
000053DC 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
000053E0 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
000053E4 4EF9 0000 0000             		jmp	DisplaySprite
000053EA                            ; ===========================================================================
000053EA 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
000053EE 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
000053F2 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
000053F6 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
000053FA 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
000053FE                            ; ===========================================================================
000053FE                            
000053FE                            Obj87_Main:				; XREF: Obj87_Index
000053FE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005404 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005406 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000540C 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005412 4E75                       		rts	
00005414                            ; ===========================================================================
00005414                            
00005414                            Obj87_Main2:				; XREF: Obj87_Main
00005414 5428 0025                  		addq.b	#2,$25(a0)
00005418 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005420 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005426 117C 0004 0001             		move.b	#4,1(a0)
0000542C 4228 0022                  		clr.b	$22(a0)
00005430 117C 0002 0018             		move.b	#2,$18(a0)
00005436 117C 0000 001A             		move.b	#0,$1A(a0)
0000543C 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005442                            
00005442                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005442 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005446 6600                       		bne.s	Obj87_Wait
00005448 5428 0025                  		addq.b	#2,$25(a0)
0000544C 317C 0001 001C             		move.w	#1,$1C(a0)
00005452 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005458                            
00005458                            Obj87_Wait:
00005458 4E75                       		rts	
0000545A                            ; ===========================================================================
0000545A                            
0000545A                            Obj87_LookUp:				; XREF: Obj87_Index
0000545A 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005462 6600                       		bne.s	locret_5480
00005464 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
0000546A 317C 005A 0030             		move.w	#$5A,$30(a0)
00005470 5428 0025                  		addq.b	#2,$25(a0)
00005474                            
00005474                            locret_5480:
00005474 4E75                       		rts	
00005476                            ; ===========================================================================
00005476                            
00005476                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005476 5368 0030                  		subq.w	#1,$30(a0)
0000547A 6600                       		bne.s	Obj87_Wait2
0000547C 43F8 D400                  		lea	($FFFFD400).w,a1
00005480 323C 00FF                  		move.w	#$FF,d1
00005484                            
00005484                            Obj87_ClrLoop:
00005484 4299                       		clr.l	(a1)+
00005486 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
0000548A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005490 5428 0025                  		addq.b	#2,$25(a0)
00005494 117C 0001 001C             		move.b	#1,$1C(a0)
0000549A 317C 003C 0030             		move.w	#$3C,$30(a0)
000054A0                            
000054A0                            Obj87_Wait2:
000054A0 4E75                       		rts	
000054A2                            ; ===========================================================================
000054A2                            
000054A2                            Obj87_MakeLogo:				; XREF: Obj87_Index
000054A2 5368 0030                  		subq.w	#1,$30(a0)
000054A6 6600                       		bne.s	Obj87_Wait3
000054A8 5428 0025                  		addq.b	#2,$25(a0)
000054AC 317C 00B4 0030             		move.w	#$B4,$30(a0)
000054B2 117C 0002 001C             		move.b	#2,$1C(a0)
000054B8 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000054BE                            
000054BE                            Obj87_Wait3:
000054BE 4E75                       		rts	
000054C0                            ; ===========================================================================
000054C0                            
000054C0                            Obj87_Animate:				; XREF: Obj87_Index
000054C0 43F9 0000 0000             		lea	(Ani_obj87).l,a1
000054C6 4EF9 0000 0000             		jmp	AnimateSprite
000054CC                            ; ===========================================================================
000054CC                            
000054CC                            Obj87_Leap:				; XREF: Obj87_Index
000054CC 5368 0030                  		subq.w	#1,$30(a0)
000054D0 6600                       		bne.s	Obj87_Wait4
000054D2 5428 0025                  		addq.b	#2,$25(a0)
000054D6 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000054DE 317C 03E1 0002             		move.w	#$3E1,2(a0)
000054E4 117C 0004 0001             		move.b	#4,1(a0)
000054EA 4228 0022                  		clr.b	$22(a0)
000054EE 117C 0002 0018             		move.b	#2,$18(a0)
000054F4 117C 0005 001A             		move.b	#5,$1A(a0)
000054FA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005500 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005506 60B8                       		bra.s	Obj87_Animate
00005508                            ; ===========================================================================
00005508                            
00005508                            Obj87_Wait4:				; XREF: Obj87_Leap
00005508 4E75                       		rts	
0000550A                            ; ===========================================================================
0000550A                            Ani_obj87:
0000550A                            	include "_anim\obj87.asm"
0000550A                            ; ---------------------------------------------------------------------------
0000550A                            ; Animation script - Sonic on the ending sequence
0000550A                            ; ---------------------------------------------------------------------------
0000550A 0000                       		dc.w byte_551C-Ani_obj87
0000550C 0000                       		dc.w byte_552A-Ani_obj87
0000550E 0000                       		dc.w byte_5534-Ani_obj87
00005510 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
0000551E 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005528 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005530                            		even
00005530                            		even
00005530                            
00005530                            ; ===========================================================================
00005530                            ; ---------------------------------------------------------------------------
00005530                            ; Object 88 - chaos emeralds on	the ending sequence
00005530                            ; ---------------------------------------------------------------------------
00005530                            
00005530                            Obj88:					; XREF: Obj_Index
00005530 7000                       		moveq	#0,d0
00005532 1028 0024                  		move.b	$24(a0),d0
00005536 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
0000553A 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
0000553E 4EF9 0000 0000             		jmp	DisplaySprite
00005544                            ; ===========================================================================
00005544 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005546 0000                       		dc.w Obj88_Move-Obj88_Index
00005548                            ; ===========================================================================
00005548                            
00005548                            Obj88_Main:				; XREF: Obj88_Index
00005548 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
0000554E 6700                       		beq.s	Obj88_Main2
00005550 588F                       		addq.l	#4,sp
00005552 4E75                       		rts	
00005554                            ; ===========================================================================
00005554                            
00005554                            Obj88_Main2:				; XREF: Obj88_Main
00005554 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
0000555A 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005560 2248                       		movea.l	a0,a1
00005562 7600                       		moveq	#0,d3
00005564 7401                       		moveq	#1,d2
00005566 7205                       		moveq	#5,d1
00005568                            
00005568                            Obj88_MainLoop:
00005568 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
0000556C 5429 0024                  		addq.b	#2,$24(a1)
00005570 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005578 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000557E 137C 0004 0001             		move.b	#4,1(a1)
00005584 137C 0001 0018             		move.b	#1,$18(a1)
0000558A 3368 0008 0038             		move.w	8(a0),$38(a1)
00005590 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005596 1342 001C                  		move.b	d2,$1C(a1)
0000559A 1342 001A                  		move.b	d2,$1A(a1)
0000559E 5202                       		addq.b	#1,d2
000055A0 1343 0026                  		move.b	d3,$26(a1)
000055A4 0603 002A                  		addi.b	#$2A,d3
000055A8 43E9 0040                  		lea	$40(a1),a1
000055AC 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000055B0                            
000055B0                            Obj88_Move:				; XREF: Obj88_Index
000055B0 3028 003E                  		move.w	$3E(a0),d0
000055B4 D168 0026                  		add.w	d0,$26(a0)
000055B8 1028 0026                  		move.b	$26(a0),d0
000055BC 4EB9 0000 29DA             		jsr	(CalcSine).l
000055C2 7800                       		moveq	#0,d4
000055C4 1828 003C                  		move.b	$3C(a0),d4
000055C8 C3C4                       		muls.w	d4,d1
000055CA E081                       		asr.l	#8,d1
000055CC C1C4                       		muls.w	d4,d0
000055CE E080                       		asr.l	#8,d0
000055D0 D268 0038                  		add.w	$38(a0),d1
000055D4 D068 003A                  		add.w	$3A(a0),d0
000055D8 3141 0008                  		move.w	d1,8(a0)
000055DC 3140 000C                  		move.w	d0,$C(a0)
000055E0 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
000055E6 6700                       		beq.s	loc_55FA
000055E8 0668 0020 003C             		addi.w	#$20,$3C(a0)
000055EE                            
000055EE                            loc_55FA:
000055EE 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
000055F4 6700                       		beq.s	loc_5608
000055F6 0668 0020 003E             		addi.w	#$20,$3E(a0)
000055FC                            
000055FC                            loc_5608:
000055FC 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005602 6700                       		beq.s	locret_5614
00005604 5368 003A                  		subq.w	#1,$3A(a0)
00005608                            
00005608                            locret_5614:
00005608 4E75                       		rts	
0000560A                            ; ===========================================================================
0000560A                            ; ---------------------------------------------------------------------------
0000560A                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000560A                            ; ---------------------------------------------------------------------------
0000560A                            
0000560A                            Obj89:					; XREF: Obj_Index
0000560A 7000                       		moveq	#0,d0
0000560C 1028 0024                  		move.b	$24(a0),d0
00005610 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005614 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005618                            ; ===========================================================================
00005618 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
0000561A 0000                       		dc.w Obj89_Move-Obj89_Index
0000561C 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000561E                            ; ===========================================================================
0000561E                            
0000561E                            Obj89_Main:				; XREF: Obj89_Index
0000561E 5428 0024                  		addq.b	#2,$24(a0)
00005622 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005628 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000562E 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005636 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000563C 117C 0000 0001             		move.b	#0,1(a0)
00005642 117C 0000 0018             		move.b	#0,$18(a0)
00005648                            
00005648                            Obj89_Move:				; XREF: Obj89_Index
00005648 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000564E 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005650 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005656 4EB9 0000 0000             		jsr	DisplaySprite
0000565C                            ; ===========================================================================
0000565C                            
0000565C                            Obj89_Delay:				; XREF: Obj89_Move
0000565C 5428 0024                  		addq.b	#2,$24(a0)
00005660 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005666                            
00005666                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005666 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000566A 6A00                       		bpl.s	Obj89_Display
0000566C 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005672                            
00005672                            Obj89_Display:
00005672 4EB9 0000 0000             		jsr	DisplaySprite
00005678                            ; ===========================================================================
00005678                            ; ---------------------------------------------------------------------------
00005678                            ; Sprite mappings - Sonic on the ending	sequence
00005678                            ; ---------------------------------------------------------------------------
00005678                            Map_obj87:
00005678                            	include "_maps\obj87.asm"
00005678                            ; ---------------------------------------------------------------------------
00005678                            ; Sprite mappings - Sonic on the ending	sequence
00005678                            ; ---------------------------------------------------------------------------
00005678 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
0000567C 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005680 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005684 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005688 02                         byte_5690:	dc.b 2
00005689 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
0000568E 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005693 03                         byte_569B:	dc.b 3
00005694 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005699 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
0000569E 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000056A3 02                         byte_56AB:	dc.b 2
000056A4 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000056A9 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000056AE 02                         byte_56B6:	dc.b 2
000056AF EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000056B4 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000056B9 02                         byte_56C1:	dc.b 2
000056BA EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000056BF FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000056C4 03                         byte_56CC:	dc.b 3
000056C5 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000056CA EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000056CF 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000056D4 07                         byte_56DC:	dc.b 7
000056D5 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000056DA BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000056DF BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000056E4 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
000056E9 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
000056EE E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
000056F3 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
000056F8 18                         byte_5700:	dc.b $18
000056F9 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
000056FE 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005703 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005708 980B 0098 30               		dc.b $98, $B, 0, $98, $30
0000570D A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005712 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005717 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
0000571C A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005721 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005726 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000572B A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005730 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005735 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000573A B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
0000573F B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005744 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005749 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
0000574E D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005753 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005758 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
0000575D D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005762 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005767 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
0000576C F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005772 00                         		even
00005772 00                         		even
00005772                            
00005772                            ; ---------------------------------------------------------------------------
00005772                            ; Sprite mappings - chaos emeralds on the ending sequence
00005772                            ; ---------------------------------------------------------------------------
00005772                            Map_obj88:
00005772                            	include "_maps\obj88.asm"
00005772                            ; ---------------------------------------------------------------------------
00005772                            ; Sprite mappings - chaos emeralds on the ending sequence
00005772                            ; ---------------------------------------------------------------------------
00005772 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005776 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
0000577A 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
0000577E 0000                       		dc.w byte_57AC-Map_obj88
00005780 01                         byte_5788:	dc.b 1
00005781 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005786 01                         byte_578E:	dc.b 1
00005787 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000578C 01                         byte_5794:	dc.b 1
0000578D F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005792 01                         byte_579A:	dc.b 1
00005793 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005798 01                         byte_57A0:	dc.b 1
00005799 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
0000579E 01                         byte_57A6:	dc.b 1
0000579F F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000057A4 01                         byte_57AC:	dc.b 1
000057A5 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000057AA                            		even
000057AA                            		even
000057AA                            
000057AA                            ; ---------------------------------------------------------------------------
000057AA                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000057AA                            ; ---------------------------------------------------------------------------
000057AA                            Map_obj89:
000057AA                            	include "_maps\obj89.asm"
000057AA                            ; ---------------------------------------------------------------------------
000057AA                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000057AA                            ; ---------------------------------------------------------------------------
000057AA 0000                       		dc.w byte_57B4-Map_obj89
000057AC 03                         byte_57B4:	dc.b 3
000057AD F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000057B2 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000057B7 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000057BC                            		even
000057BC                            		even
000057BC                            
000057BC                            ; ===========================================================================
000057BC                            ; ---------------------------------------------------------------------------
000057BC                            ; Credits ending sequence
000057BC                            ; ---------------------------------------------------------------------------
000057BC                            
000057BC                            Credits:				; XREF: GameModeArray
000057BC 6100 BE20                  		bsr.w	ClearPLC
000057C0 6100 C690                  		bsr.w	Pal_FadeFrom
000057C4 4DF9 00C0 0004             		lea	($C00004).l,a6
000057CA 3CBC 8004                  		move.w	#$8004,(a6)
000057CE 3CBC 8230                  		move.w	#$8230,(a6)
000057D2 3CBC 8407                  		move.w	#$8407,(a6)
000057D6 3CBC 9001                  		move.w	#$9001,(a6)
000057DA 3CBC 9200                  		move.w	#$9200,(a6)
000057DE 3CBC 8B03                  		move.w	#$8B03,(a6)
000057E2 3CBC 8720                  		move.w	#$8720,(a6)
000057E6 4238 F64E                  		clr.b	($FFFFF64E).w
000057EA 6100 BAD8                  		bsr.w	ClearScreen
000057EE 43F8 D000                  		lea	($FFFFD000).w,a1
000057F2 7000                       		moveq	#0,d0
000057F4 323C 07FF                  		move.w	#$7FF,d1
000057F8                            
000057F8                            Cred_ClrObjRam:
000057F8 22C0                       		move.l	d0,(a1)+
000057FA 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
000057FE                            
000057FE 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005808 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
0000580E 6100 BC30                  		bsr.w	NemDec
00005812 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005816 7000                       		moveq	#0,d0
00005818 323C 001F                  		move.w	#$1F,d1
0000581C                            
0000581C                            Cred_ClrPallet:
0000581C 22C0                       		move.l	d0,(a1)+
0000581E 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005822                            
00005822 7003                       		moveq	#3,d0
00005824 6100 C8D6                  		bsr.w	PalLoad1	; load Sonic's pallet
00005828 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
0000582E 4EB9 0000 0000             		jsr	ObjectsLoad
00005834 4EB9 0000 0000             		jsr	BuildSprites
0000583A 6100 0000                  		bsr.w	EndingDemoLoad
0000583E 7000                       		moveq	#0,d0
00005840 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005844 E948                       		lsl.w	#4,d0
00005846 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
0000584C 45F2 0000                  		lea	(a2,d0.w),a2
00005850 7000                       		moveq	#0,d0
00005852 1012                       		move.b	(a2),d0
00005854 6700                       		beq.s	loc_5862
00005856 6100 BD28                  		bsr.w	LoadPLC		; load level patterns
0000585A                            
0000585A                            loc_5862:
0000585A 7001                       		moveq	#1,d0
0000585C 6100 BD22                  		bsr.w	LoadPLC		; load standard	level patterns
00005860 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005866 6100 C544                  		bsr.w	Pal_FadeTo
0000586A                            
0000586A                            Cred_WaitLoop:
0000586A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005870 6100 D136                  		bsr.w	DelayProgram
00005874 6100 BD76                  		bsr.w	RunPLC_RAM
00005878 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
0000587C 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
0000587E 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005882 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005884 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
0000588A 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
0000588E 4E75                       		rts	
00005890                            
00005890                            ; ---------------------------------------------------------------------------
00005890                            ; Ending sequence demo loading subroutine
00005890                            ; ---------------------------------------------------------------------------
00005890                            
00005890                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005890                            
00005890                            
00005890                            EndingDemoLoad:				; XREF: Credits
00005890 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005894 0240 000F                  		andi.w	#$F,d0
00005898 D040                       		add.w	d0,d0
0000589A 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
0000589E 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
000058A2 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
000058A6 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
000058AC 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
000058AE 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
000058B4 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
000058BA 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000058C0 7000                       		moveq	#0,d0
000058C2 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000058C6 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000058CA 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000058CE 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
000058D2 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
000058D8 6600                       		bne.s	EndDemo_Exit	; if not, branch
000058DA 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
000058E0 45F8 FE30                  		lea	($FFFFFE30).w,a2
000058E4 303C 0008                  		move.w	#8,d0
000058E8                            
000058E8                            EndDemo_LampLoad:
000058E8 24D9                       		move.l	(a1)+,(a2)+
000058EA 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
000058EE                            
000058EE                            EndDemo_Exit:
000058EE 4E75                       		rts	
000058F0                            ; End of function EndingDemoLoad
000058F0                            
000058F0                            ; ===========================================================================
000058F0                            ; ---------------------------------------------------------------------------
000058F0                            ; Levels used in the end sequence demos
000058F0                            ; ---------------------------------------------------------------------------
000058F0                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005900                            
00005900                            ; ---------------------------------------------------------------------------
00005900                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005900                            ; ---------------------------------------------------------------------------
00005900                            EndDemo_LampVar:
00005900 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005902 0A00 062C 000D             		dc.w $A00, $62C, $D
00005908 0000 0000                  		dc.l 0
0000590C 0000                       		dc.b 0,	0
0000590E 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005922 0101                       		dc.b 1,	1
00005924                            ; ===========================================================================
00005924                            ; ---------------------------------------------------------------------------
00005924                            ; "TRY AGAIN" and "END"	screens
00005924                            ; ---------------------------------------------------------------------------
00005924                            
00005924                            TryAgainEnd:				; XREF: Credits
00005924 6100 BCB8                  		bsr.w	ClearPLC
00005928 6100 C528                  		bsr.w	Pal_FadeFrom
0000592C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005932 3CBC 8004                  		move.w	#$8004,(a6)
00005936 3CBC 8230                  		move.w	#$8230,(a6)
0000593A 3CBC 8407                  		move.w	#$8407,(a6)
0000593E 3CBC 9001                  		move.w	#$9001,(a6)
00005942 3CBC 9200                  		move.w	#$9200,(a6)
00005946 3CBC 8B03                  		move.w	#$8B03,(a6)
0000594A 3CBC 8720                  		move.w	#$8720,(a6)
0000594E 4238 F64E                  		clr.b	($FFFFF64E).w
00005952 6100 B970                  		bsr.w	ClearScreen
00005956 43F8 D000                  		lea	($FFFFD000).w,a1
0000595A 7000                       		moveq	#0,d0
0000595C 323C 07FF                  		move.w	#$7FF,d1
00005960                            
00005960                            TryAg_ClrObjRam:
00005960 22C0                       		move.l	d0,(a1)+
00005962 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005966                            
00005966 701D                       		moveq	#$1D,d0
00005968 6100 BD82                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
0000596C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005970 7000                       		moveq	#0,d0
00005972 323C 001F                  		move.w	#$1F,d1
00005976                            
00005976                            TryAg_ClrPallet:
00005976 22C0                       		move.l	d0,(a1)+
00005978 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
0000597C                            
0000597C 7013                       		moveq	#$13,d0
0000597E 6100 C77C                  		bsr.w	PalLoad1	; load ending pallet
00005982 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005986 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
0000598C 4EB9 0000 0000             		jsr	ObjectsLoad
00005992 4EB9 0000 0000             		jsr	BuildSprites
00005998 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
0000599E 6100 C40C                  		bsr.w	Pal_FadeTo
000059A2                            
000059A2                            ; ---------------------------------------------------------------------------
000059A2                            ; "TRY AGAIN" and "END"	screen main loop
000059A2                            ; ---------------------------------------------------------------------------
000059A2                            TryAg_MainLoop:
000059A2 6100 BA04                  		bsr.w	PauseGame
000059A6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000059AC 6100 CFFA                  		bsr.w	DelayProgram
000059B0 4EB9 0000 0000             		jsr	ObjectsLoad
000059B6 4EB9 0000 0000             		jsr	BuildSprites
000059BC 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000059C2 6600                       		bne.s	TryAg_Exit	; if yes, branch
000059C4 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
000059C8 6700                       		beq.s	TryAg_Exit	; if yes, branch
000059CA 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
000059D0 67D0                       		beq.s	TryAg_MainLoop
000059D2                            
000059D2                            TryAg_Exit:
000059D2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000059D8 4E75                       		rts	
000059DA                            
000059DA                            ; ===========================================================================
000059DA                            ; ---------------------------------------------------------------------------
000059DA                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
000059DA                            ; ---------------------------------------------------------------------------
000059DA                            
000059DA                            Obj8B:					; XREF: Obj_Index
000059DA 7000                       		moveq	#0,d0
000059DC 1028 0024                  		move.b	$24(a0),d0
000059E0 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
000059E4 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
000059E8 4EF9 0000 0000             		jmp	DisplaySprite
000059EE                            ; ===========================================================================
000059EE 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
000059F0 0000                       		dc.w Obj8B_Animate-Obj8B_Index
000059F2 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
000059F4 0000                       		dc.w loc_5A8E-Obj8B_Index
000059F6                            ; ===========================================================================
000059F6                            
000059F6                            Obj8B_Main:				; XREF: Obj8B_Index
000059F6 5428 0024                  		addq.b	#2,$24(a0)
000059FA 317C 0120 0008             		move.w	#$120,8(a0)
00005A00 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005A06 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005A0E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A14 117C 0000 0001             		move.b	#0,1(a0)
00005A1A 117C 0002 0018             		move.b	#2,$18(a0)
00005A20 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005A26 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005A2C 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005A2E 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005A34 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005A3A 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005A40 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005A46                            
00005A46                            Obj8B_Animate:				; XREF: Obj8B_Index
00005A46 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005A4C 4EF9 0000 0000             		jmp	AnimateSprite
00005A52                            ; ===========================================================================
00005A52                            
00005A52                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005A52 5428 0024                  		addq.b	#2,$24(a0)
00005A56 7002                       		moveq	#2,d0
00005A58 0828 0000 001C             		btst	#0,$1C(a0)
00005A5E 6700                       		beq.s	loc_5A6A
00005A60 4440                       		neg.w	d0
00005A62                            
00005A62                            loc_5A6A:
00005A62 43F8 D800                  		lea	($FFFFD800).w,a1
00005A66 7205                       		moveq	#5,d1
00005A68                            
00005A68                            loc_5A70:
00005A68 1340 003E                  		move.b	d0,$3E(a1)
00005A6C 3400                       		move.w	d0,d2
00005A6E E742                       		asl.w	#3,d2
00005A70 D529 0026                  		add.b	d2,$26(a1)
00005A74 43E9 0040                  		lea	$40(a1),a1
00005A78 51C9 FFEE                  		dbf	d1,loc_5A70
00005A7C 5228 001A                  		addq.b	#1,$1A(a0)
00005A80 317C 0070 0030             		move.w	#112,$30(a0)
00005A86                            
00005A86                            loc_5A8E:				; XREF: Obj8B_Index
00005A86 5368 0030                  		subq.w	#1,$30(a0)
00005A8A 6A00                       		bpl.s	locret_5AA0
00005A8C 0868 0000 001C             		bchg	#0,$1C(a0)
00005A92 117C 0002 0024             		move.b	#2,$24(a0)
00005A98                            
00005A98                            locret_5AA0:
00005A98 4E75                       		rts	
00005A9A                            ; ===========================================================================
00005A9A                            Ani_obj8B:
00005A9A                            	include "_anim\obj8B.asm"
00005A9A                            ; ---------------------------------------------------------------------------
00005A9A                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005A9A                            ; ---------------------------------------------------------------------------
00005A9A 0000                       		dc.w byte_5AA8-Ani_obj8B
00005A9C 0000                       		dc.w byte_5AAC-Ani_obj8B
00005A9E 0000                       		dc.w byte_5AB0-Ani_obj8B
00005AA0 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005AA4 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005AA8 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005ABA                            		even
00005ABA                            		even
00005ABA                            
00005ABA                            ; ===========================================================================
00005ABA                            ; ---------------------------------------------------------------------------
00005ABA                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005ABA                            ; ---------------------------------------------------------------------------
00005ABA                            
00005ABA                            Obj8C:					; XREF: Obj_Index
00005ABA 7000                       		moveq	#0,d0
00005ABC 1028 0024                  		move.b	$24(a0),d0
00005AC0 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005AC4 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005AC8 4EF9 0000 0000             		jmp	DisplaySprite
00005ACE                            ; ===========================================================================
00005ACE 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005AD0 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005AD2                            ; ===========================================================================
00005AD2                            
00005AD2                            Obj8C_Main:				; XREF: Obj8C_Index
00005AD2 2248                       		movea.l	a0,a1
00005AD4 7400                       		moveq	#0,d2
00005AD6 7600                       		moveq	#0,d3
00005AD8 7205                       		moveq	#5,d1
00005ADA 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005ADE                            
00005ADE                            Obj8C_MakeEms:				; XREF: loc_5B42
00005ADE 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005AE2 5429 0024                  		addq.b	#2,$24(a1)
00005AE6 237C 0000 5772 0004        		move.l	#Map_obj88,4(a1)
00005AEE 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005AF4 137C 0000 0001             		move.b	#0,1(a1)
00005AFA 137C 0001 0018             		move.b	#1,$18(a1)
00005B00 337C 0104 0008             		move.w	#$104,8(a1)
00005B06 337C 0120 0038             		move.w	#$120,$38(a1)
00005B0C 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005B12 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005B18 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005B1E 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005B22                            
00005B22                            Obj8C_ChkEms:
00005B22 7000                       		moveq	#0,d0
00005B24 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005B28 5340                       		subq.w	#1,d0
00005B2A 6500                       		bcs.s	loc_5B42
00005B2C                            
00005B2C                            Obj8C_ChkEmLoop:
00005B2C B433 0000                  		cmp.b	(a3,d0.w),d2
00005B30 6600                       		bne.s	loc_5B3E
00005B32 5202                       		addq.b	#1,d2
00005B34 60EC                       		bra.s	Obj8C_ChkEms
00005B36                            ; ===========================================================================
00005B36                            
00005B36                            loc_5B3E:
00005B36 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005B3A                            
00005B3A                            loc_5B42:
00005B3A 1342 001A                  		move.b	d2,$1A(a1)
00005B3E 5229 001A                  		addq.b	#1,$1A(a1)
00005B42 5202                       		addq.b	#1,d2
00005B44 137C 0080 0026             		move.b	#$80,$26(a1)
00005B4A 1343 001E                  		move.b	d3,$1E(a1)
00005B4E 1343 001F                  		move.b	d3,$1F(a1)
00005B52 0643 000A                  		addi.w	#$A,d3
00005B56 43E9 0040                  		lea	$40(a1),a1
00005B5A 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005B5E                            
00005B5E                            Obj8C_Move:				; XREF: Obj8C_Index
00005B5E 4A68 003E                  		tst.w	$3E(a0)
00005B62 6700                       		beq.s	locret_5BBA
00005B64 4A28 001E                  		tst.b	$1E(a0)
00005B68 6700                       		beq.s	loc_5B78
00005B6A 5328 001E                  		subq.b	#1,$1E(a0)
00005B6E 6600                       		bne.s	loc_5B80
00005B70                            
00005B70                            loc_5B78:
00005B70 3028 003E                  		move.w	$3E(a0),d0
00005B74 D168 0026                  		add.w	d0,$26(a0)
00005B78                            
00005B78                            loc_5B80:
00005B78 1028 0026                  		move.b	$26(a0),d0
00005B7C 6700                       		beq.s	loc_5B8C
00005B7E 0C00 0080                  		cmpi.b	#$80,d0
00005B82 6600                       		bne.s	loc_5B96
00005B84                            
00005B84                            loc_5B8C:
00005B84 4268 003E                  		clr.w	$3E(a0)
00005B88 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005B8E                            
00005B8E                            loc_5B96:
00005B8E 4EB9 0000 29DA             		jsr	(CalcSine).l
00005B94 7800                       		moveq	#0,d4
00005B96 1828 003C                  		move.b	$3C(a0),d4
00005B9A C3C4                       		muls.w	d4,d1
00005B9C E081                       		asr.l	#8,d1
00005B9E C1C4                       		muls.w	d4,d0
00005BA0 E080                       		asr.l	#8,d0
00005BA2 D268 0038                  		add.w	$38(a0),d1
00005BA6 D068 003A                  		add.w	$3A(a0),d0
00005BAA 3141 0008                  		move.w	d1,8(a0)
00005BAE 3140 000A                  		move.w	d0,$A(a0)
00005BB2                            
00005BB2                            locret_5BBA:
00005BB2 4E75                       		rts	
00005BB4                            ; ===========================================================================
00005BB4                            ; ---------------------------------------------------------------------------
00005BB4                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005BB4                            ; ---------------------------------------------------------------------------
00005BB4                            Map_obj8B:
00005BB4                            	include "_maps\obj8B.asm"
00005BB4                            ; ---------------------------------------------------------------------------
00005BB4                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005BB4                            ; ---------------------------------------------------------------------------
00005BB4 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005BB8 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005BBC 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005BC0 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005BC4 08                         byte_5BCC:	dc.b 8
00005BC5 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005BCA F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005BCF E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005BD4 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005BD9 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005BDE 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005BE3 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005BE8 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005BED 08                         byte_5BF5:	dc.b 8
00005BEE E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005BF3 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005BF8 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005BFD F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005C02 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005C07 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005C0C 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C11 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C16 08                         byte_5C1E:	dc.b 8
00005C17 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005C1C F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005C21 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005C26 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005C2B 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005C30 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005C35 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C3A 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C3F 08                         byte_5C47:	dc.b 8
00005C40 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005C45 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005C4A E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005C4F F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005C54 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005C59 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005C5E 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C63 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C68 0C                         byte_5C70:	dc.b $C
00005C69 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005C6E F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005C73 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005C78 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005C7D ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005C82 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005C87 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005C8C 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005C91 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005C96 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005C9B 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005CA0 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005CA5 0A                         byte_5CAD:	dc.b $A
00005CA6 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005CAB DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005CB0 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00005CB5 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00005CBA DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00005CBF F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00005CC4 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005CC9 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005CCE 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00005CD3 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00005CD8 0A                         byte_5CE0:	dc.b $A
00005CD9 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00005CDE E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00005CE3 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00005CE8 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00005CED E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00005CF2 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00005CF7 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005CFC 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005D01 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00005D06 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00005D0B 0C                         byte_5D13:	dc.b $C
00005D0C F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00005D11 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00005D16 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00005D1B 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00005D20 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00005D25 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00005D2A 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00005D2F 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00005D34 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00005D39 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00005D3E 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005D43 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005D48                            		even
00005D48                            		even
00005D48                            
00005D48                            ; ---------------------------------------------------------------------------
00005D48                            ; Ending sequence demos
00005D48                            ; ---------------------------------------------------------------------------
00005D48                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00005D76                            		even
00005D76                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00005DB6                            		even
00005DB6                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00005DE6                            		even
00005DE6                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00005E16                            		even
00005E16                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00005E36                            		even
00005E36                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00005E56                            		even
00005E56                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00005E86                            		even
00005E86                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00005EB6                            		even
00005EB6                            
00005EB6                            ; ---------------------------------------------------------------------------
00005EB6                            ; Subroutine to	load level boundaries and start	locations
00005EB6                            ; ---------------------------------------------------------------------------
00005EB6                            
00005EB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005EB6                            
00005EB6                            
00005EB6                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00005EB6 7000                       		moveq	#0,d0
00005EB8 11C0 F740                  		move.b	d0,($FFFFF740).w
00005EBC 11C0 F741                  		move.b	d0,($FFFFF741).w
00005EC0 11C0 F746                  		move.b	d0,($FFFFF746).w
00005EC4 11C0 F748                  		move.b	d0,($FFFFF748).w
00005EC8 11C0 F742                  		move.b	d0,($FFFFF742).w
00005ECC 3038 FE10                  		move.w	($FFFFFE10).w,d0
00005ED0 ED08                       		lsl.b	#6,d0
00005ED2 E848                       		lsr.w	#4,d0
00005ED4 3200                       		move.w	d0,d1
00005ED6 D040                       		add.w	d0,d0
00005ED8 D041                       		add.w	d1,d0
00005EDA 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00005EDE 3018                       		move.w	(a0)+,d0
00005EE0 31C0 F730                  		move.w	d0,($FFFFF730).w
00005EE4 2018                       		move.l	(a0)+,d0
00005EE6 21C0 F728                  		move.l	d0,($FFFFF728).w
00005EEA 21C0 F720                  		move.l	d0,($FFFFF720).w
00005EEE 2018                       		move.l	(a0)+,d0
00005EF0 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00005EF4 21C0 F724                  		move.l	d0,($FFFFF724).w
00005EF8 3038 F728                  		move.w	($FFFFF728).w,d0
00005EFC 0640 0240                  		addi.w	#$240,d0
00005F00 31C0 F732                  		move.w	d0,($FFFFF732).w
00005F04 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00005F0A 3018                       		move.w	(a0)+,d0
00005F0C 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00005F10 6000 0000                  		bra.w	LevSz_ChkLamp
00005F14                            ; ===========================================================================
00005F14                            ; ---------------------------------------------------------------------------
00005F14                            ; Level size array and ending start location array
00005F14                            ; ---------------------------------------------------------------------------
00005F14                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006064                            		even
00006064                            
00006064                            EndingStLocArray:
00006064                            		incbin	misc\sloc_end.bin
00006084                            		even
00006084                            
00006084                            ; ===========================================================================
00006084                            
00006084                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006084 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006088 6700                       		beq.s	LevSz_StartLoc	; if not, branch
0000608A 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006090 3238 D008                  		move.w	($FFFFD008).w,d1
00006094 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006098 6000                       		bra.s	loc_60D0
0000609A                            ; ===========================================================================
0000609A                            
0000609A                            LevSz_StartLoc:				; XREF: LevelSizeLoad
0000609A 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000609E ED08                       		lsl.b	#6,d0
000060A0 E848                       		lsr.w	#4,d0
000060A2 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000060A6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000060AA 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000060AC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000060B0 5340                       		subq.w	#1,d0
000060B2 E548                       		lsl.w	#2,d0
000060B4 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000060B8                            
000060B8                            LevSz_SonicPos:
000060B8 7200                       		moveq	#0,d1
000060BA 3219                       		move.w	(a1)+,d1
000060BC 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000060C0 7000                       		moveq	#0,d0
000060C2 3011                       		move.w	(a1),d0
000060C4 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000060C8                            
000060C8                            loc_60D0:				; XREF: LevSz_ChkLamp
000060C8 0441 00A0                  		subi.w	#$A0,d1
000060CC 6400                       		bcc.s	loc_60D8
000060CE 7200                       		moveq	#0,d1
000060D0                            
000060D0                            loc_60D8:
000060D0 3438 F72A                  		move.w	($FFFFF72A).w,d2
000060D4 B242                       		cmp.w	d2,d1
000060D6 6500                       		bcs.s	loc_60E2
000060D8 3202                       		move.w	d2,d1
000060DA                            
000060DA                            loc_60E2:
000060DA 31C1 F700                  		move.w	d1,($FFFFF700).w
000060DE 0440 0060                  		subi.w	#$60,d0
000060E2 6400                       		bcc.s	loc_60EE
000060E4 7000                       		moveq	#0,d0
000060E6                            
000060E6                            loc_60EE:
000060E6 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000060EA 6D00                       		blt.s	loc_60F8
000060EC 3038 F72E                  		move.w	($FFFFF72E).w,d0
000060F0                            
000060F0                            loc_60F8:
000060F0 31C0 F704                  		move.w	d0,($FFFFF704).w
000060F4 6100 0000                  		bsr.w	BgScrollSpeed
000060F8 7000                       		moveq	#0,d0
000060FA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000060FE E508                       		lsl.b	#2,d0
00006100 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006106 6000 0000                  		bra.w	LevSz_Unk
0000610A                            ; ===========================================================================
0000610A                            ; ---------------------------------------------------------------------------
0000610A                            ; Sonic	start location array
0000610A                            ; ---------------------------------------------------------------------------
0000610A                            StartLocArray:	incbin	misc\sloc_lev.bin
0000617A                            		even
0000617A                            
0000617A                            ; ---------------------------------------------------------------------------
0000617A                            ; Which	256x256	tiles contain loops or roll-tunnels
0000617A                            ; ---------------------------------------------------------------------------
0000617A                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
0000617A                            ; loop,	loop, tunnel, tunnel
0000617A                            ; ---------------------------------------------------------------------------
0000617A                            LoopTileNums:	incbin	misc\loopnums.bin
00006196                            		even
00006196                            
00006196                            ; ===========================================================================
00006196                            
00006196                            LevSz_Unk:				; XREF: LevelSizeLoad
00006196 7000                       		moveq	#0,d0
00006198 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000619C E748                       		lsl.w	#3,d0
0000619E 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000061A2 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000061A6 24D9                       		move.l	(a1)+,(a2)+
000061A8 24D9                       		move.l	(a1)+,(a2)+
000061AA 4E75                       		rts	
000061AC                            ; End of function LevelSizeLoad
000061AC                            
000061AC                            ; ===========================================================================
000061AC 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000061B4 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061BC 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061C4 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061CC 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061D4 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061DC 0070 0100 0100 0100        		dc.l $700100, $1000100
000061E4                            
000061E4                            ; ---------------------------------------------------------------------------
000061E4                            ; Subroutine to	set scroll speed of some backgrounds
000061E4                            ; ---------------------------------------------------------------------------
000061E4                            
000061E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000061E4                            
000061E4                            
000061E4                            BgScrollSpeed:				; XREF: LevelSizeLoad
000061E4 4A38 FE30                  		tst.b	($FFFFFE30).w
000061E8 6600                       		bne.s	loc_6206
000061EA 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000061EE 31C0 F714                  		move.w	d0,($FFFFF714).w
000061F2 31C1 F708                  		move.w	d1,($FFFFF708).w
000061F6 31C1 F710                  		move.w	d1,($FFFFF710).w
000061FA 31C1 F718                  		move.w	d1,($FFFFF718).w
000061FE                            
000061FE                            loc_6206:
000061FE 7400                       		moveq	#0,d2
00006200 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006204 D442                       		add.w	d2,d2
00006206 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000620A 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000620E                            ; End of function BgScrollSpeed
0000620E                            
0000620E                            ; ===========================================================================
0000620E 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006212 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006216 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000621A 0000                       		dc.w BgScroll_End-BgScroll_Index
0000621C                            ; ===========================================================================
0000621C                            
0000621C                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000621C 6000 0000                  		bra.w	Deform_GHZ
00006220                            ; ===========================================================================
00006220                            
00006220                            BgScroll_LZ:				; XREF: BgScroll_Index
00006220 E280                       		asr.l	#1,d0
00006222 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006226 4E75                       		rts	
00006228                            ; ===========================================================================
00006228                            
00006228                            BgScroll_MZ:				; XREF: BgScroll_Index
00006228 4E75                       		rts	
0000622A                            ; ===========================================================================
0000622A                            
0000622A                            BgScroll_SLZ:				; XREF: BgScroll_Index
0000622A E280                       		asr.l	#1,d0
0000622C 0640 00C0                  		addi.w	#$C0,d0
00006230 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006234 4E75                       		rts	
00006236                            ; ===========================================================================
00006236                            
00006236                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006236 E980                       		asl.l	#4,d0
00006238 2400                       		move.l	d0,d2
0000623A E380                       		asl.l	#1,d0
0000623C D082                       		add.l	d2,d0
0000623E E080                       		asr.l	#8,d0
00006240 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006244 31C0 F714                  		move.w	d0,($FFFFF714).w
00006248 4E75                       		rts	
0000624A                            ; ===========================================================================
0000624A                            
0000624A                            BgScroll_SBZ:				; XREF: BgScroll_Index
0000624A E980                       		asl.l	#4,d0
0000624C E380                       		asl.l	#1,d0
0000624E E080                       		asr.l	#8,d0
00006250 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006254 4E75                       		rts	
00006256                            ; ===========================================================================
00006256                            
00006256                            BgScroll_End:				; XREF: BgScroll_Index
00006256 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000625C 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006262 4E75                       		rts	
00006264                            ; ===========================================================================
00006264 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
0000626A 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006270 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006276 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000627C 4E75                       		rts
0000627E                            
0000627E                            ; ---------------------------------------------------------------------------
0000627E                            ; Background layer deformation subroutines
0000627E                            ; ---------------------------------------------------------------------------
0000627E                            
0000627E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000627E                            
0000627E                            
0000627E                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
0000627E 4A38 F744                  		tst.b	($FFFFF744).w
00006282 6700                       		beq.s	loc_628E
00006284 4E75                       		rts	
00006286                            ; ===========================================================================
00006286                            
00006286                            loc_628E:
00006286 4278 F754                  		clr.w	($FFFFF754).w
0000628A 4278 F756                  		clr.w	($FFFFF756).w
0000628E 4278 F758                  		clr.w	($FFFFF758).w
00006292 4278 F75A                  		clr.w	($FFFFF75A).w
00006296 6100 0000                  		bsr.w	ScrollHoriz
0000629A 6100 0000                  		bsr.w	ScrollVertical
0000629E 6100 0000                  		bsr.w	DynScrResizeLoad
000062A2 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000062A8 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000062AE 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000062B4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000062BA 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000062C0 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000062C6 7000                       		moveq	#0,d0
000062C8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000062CC D040                       		add.w	d0,d0
000062CE 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000062D2 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000062D6                            ; End of function DeformBgLayer
000062D6                            
000062D6                            ; ===========================================================================
000062D6                            ; ---------------------------------------------------------------------------
000062D6                            ; Offset index for background layer deformation	code
000062D6                            ; ---------------------------------------------------------------------------
000062D6 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000062DA 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000062DE 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000062E2 0000                       		dc.w Deform_GHZ-Deform_Index
000062E4                            ; ---------------------------------------------------------------------------
000062E4                            ; Green	Hill Zone background layer deformation code
000062E4                            ; ---------------------------------------------------------------------------
000062E4                            
000062E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000062E4                            
000062E4                            
000062E4                            Deform_GHZ:				; XREF: Deform_Index
000062E4 3838 F73A                  		move.w	($FFFFF73A).w,d4
000062E8 48C4                       		ext.l	d4
000062EA EB84                       		asl.l	#5,d4
000062EC 2204                       		move.l	d4,d1
000062EE E384                       		asl.l	#1,d4
000062F0 D881                       		add.l	d1,d4
000062F2 7A00                       		moveq	#0,d5
000062F4 6100 0000                  		bsr.w	ScrollBlock1
000062F8 6100 0000                  		bsr.w	ScrollBlock4
000062FC 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006300 3038 F704                  		move.w	($FFFFF704).w,d0
00006304 0240 07FF                  		andi.w	#$7FF,d0
00006308 EA48                       		lsr.w	#5,d0
0000630A 4440                       		neg.w	d0
0000630C 0640 0026                  		addi.w	#$26,d0
00006310 31C0 F714                  		move.w	d0,($FFFFF714).w
00006314 3800                       		move.w	d0,d4
00006316 6100 0000                  		bsr.w	ScrollBlock3
0000631A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006320 323C 006F                  		move.w	#$6F,d1
00006324 9244                       		sub.w	d4,d1
00006326 3038 F700                  		move.w	($FFFFF700).w,d0
0000632A 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006330 6600                       		bne.s	loc_633C
00006332 7000                       		moveq	#0,d0
00006334                            
00006334                            loc_633C:
00006334 4440                       		neg.w	d0
00006336 4840                       		swap	d0
00006338 3038 F708                  		move.w	($FFFFF708).w,d0
0000633C 4440                       		neg.w	d0
0000633E                            
0000633E                            loc_6346:
0000633E 22C0                       		move.l	d0,(a1)+
00006340 51C9 FFFC                  		dbf	d1,loc_6346
00006344 323C 0027                  		move.w	#$27,d1
00006348 3038 F710                  		move.w	($FFFFF710).w,d0
0000634C 4440                       		neg.w	d0
0000634E                            
0000634E                            loc_6356:
0000634E 22C0                       		move.l	d0,(a1)+
00006350 51C9 FFFC                  		dbf	d1,loc_6356
00006354 3038 F710                  		move.w	($FFFFF710).w,d0
00006358 0640 0000                  		addi.w	#0,d0
0000635C 3438 F700                  		move.w	($FFFFF700).w,d2
00006360 0642 FE00                  		addi.w	#-$200,d2
00006364 9440                       		sub.w	d0,d2
00006366 48C2                       		ext.l	d2
00006368 E182                       		asl.l	#8,d2
0000636A 85FC 0068                  		divs.w	#$68,d2
0000636E 48C2                       		ext.l	d2
00006370 E182                       		asl.l	#8,d2
00006372 7600                       		moveq	#0,d3
00006374 3600                       		move.w	d0,d3
00006376 323C 0047                  		move.w	#$47,d1
0000637A D244                       		add.w	d4,d1
0000637C                            
0000637C                            loc_6384:
0000637C 3003                       		move.w	d3,d0
0000637E 4440                       		neg.w	d0
00006380 22C0                       		move.l	d0,(a1)+
00006382 4843                       		swap	d3
00006384 D682                       		add.l	d2,d3
00006386 4843                       		swap	d3
00006388 51C9 FFF2                  		dbf	d1,loc_6384
0000638C 4E75                       		rts	
0000638E                            ; End of function Deform_GHZ
0000638E                            
0000638E                            ; ---------------------------------------------------------------------------
0000638E                            ; Labyrinth Zone background layer deformation code
0000638E                            ; ---------------------------------------------------------------------------
0000638E                            
0000638E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000638E                            
0000638E                            
0000638E                            Deform_LZ:				; XREF: Deform_Index
0000638E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006392 48C4                       		ext.l	d4
00006394 EF84                       		asl.l	#7,d4
00006396 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000639A 48C5                       		ext.l	d5
0000639C EF85                       		asl.l	#7,d5
0000639E 6100 0000                  		bsr.w	ScrollBlock1
000063A2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000063A8 43F8 CC00                  		lea	($FFFFCC00).w,a1
000063AC 323C 00DF                  		move.w	#$DF,d1
000063B0 3038 F700                  		move.w	($FFFFF700).w,d0
000063B4 4440                       		neg.w	d0
000063B6 4840                       		swap	d0
000063B8 3038 F708                  		move.w	($FFFFF708).w,d0
000063BC 4440                       		neg.w	d0
000063BE                            
000063BE                            loc_63C6:
000063BE 22C0                       		move.l	d0,(a1)+
000063C0 51C9 FFFC                  		dbf	d1,loc_63C6
000063C4 3038 F646                  		move.w	($FFFFF646).w,d0
000063C8 9078 F704                  		sub.w	($FFFFF704).w,d0
000063CC 4E75                       		rts	
000063CE                            ; End of function Deform_LZ
000063CE                            
000063CE                            ; ---------------------------------------------------------------------------
000063CE                            ; Marble Zone background layer deformation code
000063CE                            ; ---------------------------------------------------------------------------
000063CE                            
000063CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063CE                            
000063CE                            
000063CE                            Deform_MZ:				; XREF: Deform_Index
000063CE 3838 F73A                  		move.w	($FFFFF73A).w,d4
000063D2 48C4                       		ext.l	d4
000063D4 ED84                       		asl.l	#6,d4
000063D6 2204                       		move.l	d4,d1
000063D8 E384                       		asl.l	#1,d4
000063DA D881                       		add.l	d1,d4
000063DC 7A00                       		moveq	#0,d5
000063DE 6100 0000                  		bsr.w	ScrollBlock1
000063E2 303C 0200                  		move.w	#$200,d0
000063E6 3238 F704                  		move.w	($FFFFF704).w,d1
000063EA 0441 01C8                  		subi.w	#$1C8,d1
000063EE 6500                       		bcs.s	loc_6402
000063F0 3401                       		move.w	d1,d2
000063F2 D241                       		add.w	d1,d1
000063F4 D242                       		add.w	d2,d1
000063F6 E441                       		asr.w	#2,d1
000063F8 D041                       		add.w	d1,d0
000063FA                            
000063FA                            loc_6402:
000063FA 31C0 F714                  		move.w	d0,($FFFFF714).w
000063FE 6100 0000                  		bsr.w	ScrollBlock3
00006402 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006408 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000640C 323C 00DF                  		move.w	#$DF,d1
00006410 3038 F700                  		move.w	($FFFFF700).w,d0
00006414 4440                       		neg.w	d0
00006416 4840                       		swap	d0
00006418 3038 F708                  		move.w	($FFFFF708).w,d0
0000641C 4440                       		neg.w	d0
0000641E                            
0000641E                            loc_6426:
0000641E 22C0                       		move.l	d0,(a1)+
00006420 51C9 FFFC                  		dbf	d1,loc_6426
00006424 4E75                       		rts	
00006426                            ; End of function Deform_MZ
00006426                            
00006426                            ; ---------------------------------------------------------------------------
00006426                            ; Star Light Zone background layer deformation code
00006426                            ; ---------------------------------------------------------------------------
00006426                            
00006426                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006426                            
00006426                            
00006426                            Deform_SLZ:				; XREF: Deform_Index
00006426 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000642A 48C4                       		ext.l	d4
0000642C EB84                       		asl.l	#5,d4
0000642E 2204                       		move.l	d4,d1
00006430 E384                       		asl.l	#1,d4
00006432 D881                       		add.l	d1,d4
00006434 7A00                       		moveq	#0,d5
00006436 6100 0000                  		bsr.w	ScrollBlock1
0000643A 6100 0000                  		bsr.w	ScrollBlock3
0000643E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006442                            	;	move.w	($FFFFF704).w,d0
00006442                            	;	andi.w	#$7FF,d0
00006442 EA48                       		lsr.w	#5,d0
00006444 4440                       		neg.w	d0
00006446 0640 0026                  		addi.w	#$26,d0
0000644A 31C0 F714                  		move.w	d0,($FFFFF714).w
0000644E 3800                       		move.w	d0,d4
00006450                            	;	bsr.w	ScrollBlock3
00006450 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006456 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
0000645A                            
0000645A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000645E 4440                       		neg.w	d0			; negate (positive to negative)
00006460 4840                       		swap	d0			; send to the left side of d0
00006462 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006466 45F8 A800                  		lea	($FFFFA800).w,a2
0000646A 069A 0000 5000             		addi.l	#$5000,(a2)+
00006470 069A 0000 C000             		addi.l	#$C000,(a2)+
00006476 3038 A800                  		move.w	($FFFFA800).w,d0
0000647A 4440                       		neg.w	d0			; negate (positive to negative)
0000647C E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
0000647E 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006482                            slz_DeformLoop_1:
00006482 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006484 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
00006488                            
00006488 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000648C 4440                       		neg.w	d0			; negate (positive to negative)
0000648E 4840                       		swap	d0			; send to the left side of d0
00006490 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006494 45F8 A800                  		lea	($FFFFA800).w,a2
00006498 069A 0000 5000             		addi.l	#$5000,(a2)+
0000649E 069A 0000 C000             		addi.l	#$C000,(a2)+
000064A4 3038 A800                  		move.w	($FFFFA800).w,d0
000064A8 4440                       		neg.w	d0			; negate (positive to negative)
000064AA E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000064AC 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000064B0                            slz_DeformLoop_2:
000064B0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000064B2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
000064B6                            
000064B6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000064BA 4440                       		neg.w	d0			; negate (positive to negative)
000064BC 4840                       		swap	d0			; send to the left side of d0
000064BE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000064C2 45F8 A800                  		lea	($FFFFA800).w,a2
000064C6 069A 0000 5000             		addi.l	#$5000,(a2)+
000064CC 069A 0000 C000             		addi.l	#$C000,(a2)+
000064D2 3038 A800                  		move.w	($FFFFA800).w,d0
000064D6 4440                       		neg.w	d0			; negate (positive to negative)
000064D8 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000064DA 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000064DE                            slz_DeformLoop_3:
000064DE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000064E0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
000064E4                            
000064E4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000064E8 4440                       		neg.w	d0			; negate (positive to negative)
000064EA 4840                       		swap	d0			; send to the left side of d0
000064EC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000064F0 45F8 A800                  		lea	($FFFFA800).w,a2
000064F4 069A 0000 5000             		addi.l	#$5000,(a2)+
000064FA 069A 0000 C000             		addi.l	#$C000,(a2)+
00006500 3038 A800                  		move.w	($FFFFA800).w,d0
00006504 4440                       		neg.w	d0			; negate (positive to negative)
00006506 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006508 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000650C                            slz_DeformLoop_4:
0000650C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000650E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006512                            
00006512 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006516 4440                       		neg.w	d0			; negate (positive to negative)
00006518 4840                       		swap	d0			; send to the left side of d0
0000651A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000651E 45F8 A800                  		lea	($FFFFA800).w,a2
00006522 069A 0000 5000             		addi.l	#$5000,(a2)+
00006528 069A 0000 C000             		addi.l	#$C000,(a2)+
0000652E 3038 A800                  		move.w	($FFFFA800).w,d0
00006532 4440                       		neg.w	d0			; negate (positive to negative)
00006534 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006536 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000653A                            slz_DeformLoop_5:
0000653A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000653C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006540                            
00006540 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006544 4440                       		neg.w	d0			; negate (positive to negative)
00006546 4840                       		swap	d0			; send to the left side of d0
00006548 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000654C 4440                       		neg.w	d0			; negate (positive to negative)
0000654E EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006550 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006554                            slz_DeformLoop_6:
00006554 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006556 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
0000655A                            
0000655A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000655E 4440                       		neg.w	d0			; negate (positive to negative)
00006560 4840                       		swap	d0			; send to the left side of d0
00006562 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006566 4440                       		neg.w	d0			; negate (positive to negative)
00006568 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
0000656A 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000656E                            slz_DeformLoop_7:
0000656E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006570 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006574                            
00006574 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006578 4440                       		neg.w	d0			; negate (positive to negative)
0000657A 4840                       		swap	d0			; send to the left side of d0
0000657C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006580 4440                       		neg.w	d0			; negate (positive to negative)
00006582 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006584 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006588                            slz_DeformLoop_8:
00006588 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000658A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
0000658E                            
0000658E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006592 4440                       		neg.w	d0			; negate (positive to negative)
00006594 4840                       		swap	d0			; send to the left side of d0
00006596 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000659A 4440                       		neg.w	d0			; negate (positive to negative)
0000659C EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
0000659E 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000065A2                            slz_DeformLoop_9:
000065A2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000065A4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
000065A8                            
000065A8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000065AC 4440                       		neg.w	d0			; negate (positive to negative)
000065AE 4840                       		swap	d0			; send to the left side of d0
000065B0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000065B4 4440                       		neg.w	d0			; negate (positive to negative)
000065B6 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
000065B8 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000065BC                            slz_DeformLoop_10:
000065BC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000065BE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
000065C2                            
000065C2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000065C6 4440                       		neg.w	d0			; negate (positive to negative)
000065C8 4840                       		swap	d0			; send to the left side of d0
000065CA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000065CE 4440                       		neg.w	d0			; negate (positive to negative)
000065D0 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000065D2 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000065D6                            slz_DeformLoop_11:
000065D6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000065D8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
000065DC                            
000065DC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000065E0 4440                       		neg.w	d0			; negate (positive to negative)
000065E2 4840                       		swap	d0			; send to the left side of d0
000065E4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000065E8 4440                       		neg.w	d0			; negate (positive to negative)
000065EA E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000065EC 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000065F0                            slz_DeformLoop_12:
000065F0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000065F2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
000065F6                            
000065F6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000065FA 4440                       		neg.w	d0			; negate (positive to negative)
000065FC 4840                       		swap	d0			; send to the left side of d0
000065FE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006602 4440                       		neg.w	d0			; negate (positive to negative)
00006604 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006606 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000660A                            slz_DeformLoop_13:
0000660A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000660C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006610 4E75                       		rts	
00006612                            ; End of function Deform_SLZ
00006612 4E75                       		rts	
00006614                            ; End of function Deform_SLZ_2
00006614                            
00006614                            ; ---------------------------------------------------------------------------
00006614                            ; Spring Yard Zone background layer deformation	code
00006614                            ; ---------------------------------------------------------------------------
00006614                            
00006614                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006614                            
00006614                            
00006614                            Deform_SYZ:				; XREF: Deform_Index
00006614 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006618 48C4                       		ext.l	d4
0000661A ED84                       		asl.l	#6,d4
0000661C 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006620 48C5                       		ext.l	d5
00006622 E985                       		asl.l	#4,d5
00006624 2205                       		move.l	d5,d1
00006626 E385                       		asl.l	#1,d5
00006628 DA81                       		add.l	d1,d5
0000662A 6100 0000                  		bsr.w	ScrollBlock1
0000662E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006634 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006638 323C 00DF                  		move.w	#$DF,d1
0000663C 3038 F700                  		move.w	($FFFFF700).w,d0
00006640 4440                       		neg.w	d0
00006642 4840                       		swap	d0
00006644 3038 F708                  		move.w	($FFFFF708).w,d0
00006648 4440                       		neg.w	d0
0000664A                            
0000664A                            loc_653C:
0000664A 22C0                       		move.l	d0,(a1)+
0000664C 51C9 FFFC                  		dbf	d1,loc_653C
00006650 4E75                       		rts	
00006652                            ; End of function Deform_SYZ
00006652                            
00006652                            ; ---------------------------------------------------------------------------
00006652                            ; Scrap	Brain Zone background layer deformation	code
00006652                            ; ---------------------------------------------------------------------------
00006652                            
00006652                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006652                            
00006652                            
00006652                            Deform_SBZ:				; XREF: Deform_Index
00006652 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006656 48C4                       		ext.l	d4
00006658 ED84                       		asl.l	#6,d4
0000665A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000665E 48C5                       		ext.l	d5
00006660 E985                       		asl.l	#4,d5
00006662 E385                       		asl.l	#1,d5
00006664 6100 0000                  		bsr.w	ScrollBlock1
00006668 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000666E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006672 323C 00DF                  		move.w	#$DF,d1
00006676 3038 F700                  		move.w	($FFFFF700).w,d0
0000667A 4440                       		neg.w	d0
0000667C 4840                       		swap	d0
0000667E 3038 F708                  		move.w	($FFFFF708).w,d0
00006682 4440                       		neg.w	d0
00006684                            
00006684                            loc_6576:
00006684 22C0                       		move.l	d0,(a1)+
00006686 51C9 FFFC                  		dbf	d1,loc_6576
0000668A 4E75                       		rts	
0000668C                            ; End of function Deform_SBZ
0000668C                            
0000668C                            ; ---------------------------------------------------------------------------
0000668C                            ; Subroutine to	scroll the level horizontally as Sonic moves
0000668C                            ; ---------------------------------------------------------------------------
0000668C                            
0000668C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000668C                            
0000668C                            
0000668C                            ScrollHoriz:				; XREF: DeformBgLayer
0000668C 3838 F700                  		move.w	($FFFFF700).w,d4
00006690 6100                       		bsr.s	ScrollHoriz2
00006692 3038 F700                  		move.w	($FFFFF700).w,d0
00006696 0240 0010                  		andi.w	#$10,d0
0000669A 1238 F74A                  		move.b	($FFFFF74A).w,d1
0000669E B300                       		eor.b	d1,d0
000066A0 6600                       		bne.s	locret_65B0
000066A2 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
000066A8 3038 F700                  		move.w	($FFFFF700).w,d0
000066AC 9044                       		sub.w	d4,d0
000066AE 6A00                       		bpl.s	loc_65AA
000066B0 08F8 0002 F754             		bset	#2,($FFFFF754).w
000066B6 4E75                       		rts	
000066B8                            ; ===========================================================================
000066B8                            
000066B8                            loc_65AA:
000066B8 08F8 0003 F754             		bset	#3,($FFFFF754).w
000066BE                            
000066BE                            locret_65B0:
000066BE 4E75                       		rts	
000066C0                            ; End of function ScrollHoriz
000066C0                            
000066C0                            
000066C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066C0                            
000066C0                            
000066C0                            ScrollHoriz2:				; XREF: ScrollHoriz
000066C0 3038 D008                  		move.w	($FFFFD008).w,d0
000066C4 9078 F700                  		sub.w	($FFFFF700).w,d0
000066C8 0440 0090                  		subi.w	#$90,d0
000066CC 6500                       		bcs.s	loc_65F6
000066CE 0440 0010                  		subi.w	#$10,d0
000066D2 6400                       		bcc.s	loc_65CC
000066D4 4278 F73A                  		clr.w	($FFFFF73A).w
000066D8 4E75                       		rts	
000066DA                            ; ===========================================================================
000066DA                            
000066DA                            loc_65CC:
000066DA 0C40 0010                  		cmpi.w	#$10,d0
000066DE 6500                       		bcs.s	loc_65D6
000066E0 303C 0010                  		move.w	#$10,d0
000066E4                            
000066E4                            loc_65D6:
000066E4 D078 F700                  		add.w	($FFFFF700).w,d0
000066E8 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
000066EC 6D00                       		blt.s	loc_65E4
000066EE 3038 F72A                  		move.w	($FFFFF72A).w,d0
000066F2                            
000066F2                            loc_65E4:
000066F2 3200                       		move.w	d0,d1
000066F4 9278 F700                  		sub.w	($FFFFF700).w,d1
000066F8 E141                       		asl.w	#8,d1
000066FA 31C0 F700                  		move.w	d0,($FFFFF700).w
000066FE 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006702 4E75                       		rts	
00006704                            ; ===========================================================================
00006704                            
00006704                            loc_65F6:				; XREF: ScrollHoriz2
00006704 D078 F700                  		add.w	($FFFFF700).w,d0
00006708 B078 F728                  		cmp.w	($FFFFF728).w,d0
0000670C 6EE4                       		bgt.s	loc_65E4
0000670E 3038 F728                  		move.w	($FFFFF728).w,d0
00006712 60DE                       		bra.s	loc_65E4
00006714                            ; End of function ScrollHoriz2
00006714                            
00006714                            ; ===========================================================================
00006714 4A40                       		tst.w	d0
00006716 6A00                       		bpl.s	loc_6610
00006718 303C FFFE                  		move.w	#-2,d0
0000671C 60E6                       		bra.s	loc_65F6
0000671E                            ; ===========================================================================
0000671E                            
0000671E                            loc_6610:
0000671E 303C 0002                  		move.w	#2,d0
00006722 60B6                       		bra.s	loc_65CC
00006724                            
00006724                            ; ---------------------------------------------------------------------------
00006724                            ; Subroutine to	scroll the level vertically as Sonic moves
00006724                            ; ---------------------------------------------------------------------------
00006724                            
00006724                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006724                            
00006724                            
00006724                            ScrollVertical:				; XREF: DeformBgLayer
00006724 7200                       		moveq	#0,d1
00006726 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000672A 9078 F704                  		sub.w	($FFFFF704).w,d0
0000672E 0838 0002 D022             		btst	#2,($FFFFD022).w
00006734 6700                       		beq.s	loc_662A
00006736 5B40                       		subq.w	#5,d0
00006738                            
00006738                            loc_662A:
00006738 0838 0001 D022             		btst	#1,($FFFFD022).w
0000673E 6700                       		beq.s	loc_664A
00006740 0640 0020                  		addi.w	#$20,d0
00006744 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006748 6500                       		bcs.s	loc_6696
0000674A 0440 0040                  		subi.w	#$40,d0
0000674E 6400                       		bcc.s	loc_6696
00006750 4A38 F75C                  		tst.b	($FFFFF75C).w
00006754 6600                       		bne.s	loc_66A8
00006756 6000                       		bra.s	loc_6656
00006758                            ; ===========================================================================
00006758                            
00006758                            loc_664A:
00006758 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000675C 6600                       		bne.s	loc_665C
0000675E 4A38 F75C                  		tst.b	($FFFFF75C).w
00006762 6600                       		bne.s	loc_66A8
00006764                            
00006764                            loc_6656:
00006764 4278 F73C                  		clr.w	($FFFFF73C).w
00006768 4E75                       		rts	
0000676A                            ; ===========================================================================
0000676A                            
0000676A                            loc_665C:
0000676A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006770 6600                       		bne.s	loc_6684
00006772 3238 D014                  		move.w	($FFFFD014).w,d1
00006776 6A00                       		bpl.s	loc_666C
00006778 4441                       		neg.w	d1
0000677A                            
0000677A                            loc_666C:
0000677A 0C41 0800                  		cmpi.w	#$800,d1
0000677E 6400                       		bcc.s	loc_6696
00006780 323C 0600                  		move.w	#$600,d1
00006784 0C40 0006                  		cmpi.w	#6,d0
00006788 6E00                       		bgt.s	loc_66F6
0000678A 0C40 FFFA                  		cmpi.w	#-6,d0
0000678E 6D00                       		blt.s	loc_66C0
00006790 6000                       		bra.s	loc_66AE
00006792                            ; ===========================================================================
00006792                            
00006792                            loc_6684:
00006792 323C 0200                  		move.w	#$200,d1
00006796 0C40 0002                  		cmpi.w	#2,d0
0000679A 6E00                       		bgt.s	loc_66F6
0000679C 0C40 FFFE                  		cmpi.w	#-2,d0
000067A0 6D00                       		blt.s	loc_66C0
000067A2 6000                       		bra.s	loc_66AE
000067A4                            ; ===========================================================================
000067A4                            
000067A4                            loc_6696:
000067A4 323C 1000                  		move.w	#$1000,d1
000067A8 0C40 0010                  		cmpi.w	#$10,d0
000067AC 6E00                       		bgt.s	loc_66F6
000067AE 0C40 FFF0                  		cmpi.w	#-$10,d0
000067B2 6D00                       		blt.s	loc_66C0
000067B4 6000                       		bra.s	loc_66AE
000067B6                            ; ===========================================================================
000067B6                            
000067B6                            loc_66A8:
000067B6 7000                       		moveq	#0,d0
000067B8 11C0 F75C                  		move.b	d0,($FFFFF75C).w
000067BC                            
000067BC                            loc_66AE:
000067BC 7200                       		moveq	#0,d1
000067BE 3200                       		move.w	d0,d1
000067C0 D278 F704                  		add.w	($FFFFF704).w,d1
000067C4 4A40                       		tst.w	d0
000067C6 6A00 0000                  		bpl.w	loc_6700
000067CA 6000 0000                  		bra.w	loc_66CC
000067CE                            ; ===========================================================================
000067CE                            
000067CE                            loc_66C0:
000067CE 4441                       		neg.w	d1
000067D0 48C1                       		ext.l	d1
000067D2 E181                       		asl.l	#8,d1
000067D4 D2B8 F704                  		add.l	($FFFFF704).w,d1
000067D8 4841                       		swap	d1
000067DA                            
000067DA                            loc_66CC:
000067DA B278 F72C                  		cmp.w	($FFFFF72C).w,d1
000067DE 6E00                       		bgt.s	loc_6724
000067E0 0C41 FF00                  		cmpi.w	#-$100,d1
000067E4 6E00                       		bgt.s	loc_66F0
000067E6 0241 07FF                  		andi.w	#$7FF,d1
000067EA 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000067F0 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
000067F6 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000067FC 6000                       		bra.s	loc_6724
000067FE                            ; ===========================================================================
000067FE                            
000067FE                            loc_66F0:
000067FE 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006802 6000                       		bra.s	loc_6724
00006804                            ; ===========================================================================
00006804                            
00006804                            loc_66F6:
00006804 48C1                       		ext.l	d1
00006806 E181                       		asl.l	#8,d1
00006808 D2B8 F704                  		add.l	($FFFFF704).w,d1
0000680C 4841                       		swap	d1
0000680E                            
0000680E                            loc_6700:
0000680E B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006812 6D00                       		blt.s	loc_6724
00006814 0441 0800                  		subi.w	#$800,d1
00006818 6500                       		bcs.s	loc_6720
0000681A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006820 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006826 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0000682C 6000                       		bra.s	loc_6724
0000682E                            ; ===========================================================================
0000682E                            
0000682E                            loc_6720:
0000682E 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006832                            
00006832                            loc_6724:
00006832 3838 F704                  		move.w	($FFFFF704).w,d4
00006836 4841                       		swap	d1
00006838 2601                       		move.l	d1,d3
0000683A 96B8 F704                  		sub.l	($FFFFF704).w,d3
0000683E E09B                       		ror.l	#8,d3
00006840 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006844 21C1 F704                  		move.l	d1,($FFFFF704).w
00006848 3038 F704                  		move.w	($FFFFF704).w,d0
0000684C 0240 0010                  		andi.w	#$10,d0
00006850 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006854 B300                       		eor.b	d1,d0
00006856 6600                       		bne.s	locret_6766
00006858 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
0000685E 3038 F704                  		move.w	($FFFFF704).w,d0
00006862 9044                       		sub.w	d4,d0
00006864 6A00                       		bpl.s	loc_6760
00006866 08F8 0000 F754             		bset	#0,($FFFFF754).w
0000686C 4E75                       		rts	
0000686E                            ; ===========================================================================
0000686E                            
0000686E                            loc_6760:
0000686E 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006874                            
00006874                            locret_6766:
00006874 4E75                       		rts	
00006876                            ; End of function ScrollVertical
00006876                            
00006876                            
00006876                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006876                            
00006876                            
00006876                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006876 2438 F708                  		move.l	($FFFFF708).w,d2
0000687A 2002                       		move.l	d2,d0
0000687C D084                       		add.l	d4,d0
0000687E 21C0 F708                  		move.l	d0,($FFFFF708).w
00006882 2200                       		move.l	d0,d1
00006884 4841                       		swap	d1
00006886 0241 0010                  		andi.w	#$10,d1
0000688A 1638 F74C                  		move.b	($FFFFF74C).w,d3
0000688E B701                       		eor.b	d3,d1
00006890 6600                       		bne.s	loc_679C
00006892 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006898 9082                       		sub.l	d2,d0
0000689A 6A00                       		bpl.s	loc_6796
0000689C 08F8 0002 F756             		bset	#2,($FFFFF756).w
000068A2 6000                       		bra.s	loc_679C
000068A4                            ; ===========================================================================
000068A4                            
000068A4                            loc_6796:
000068A4 08F8 0003 F756             		bset	#3,($FFFFF756).w
000068AA                            
000068AA                            loc_679C:
000068AA 2638 F70C                  		move.l	($FFFFF70C).w,d3
000068AE 2003                       		move.l	d3,d0
000068B0 D085                       		add.l	d5,d0
000068B2 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000068B6 2200                       		move.l	d0,d1
000068B8 4841                       		swap	d1
000068BA 0241 0010                  		andi.w	#$10,d1
000068BE 1438 F74D                  		move.b	($FFFFF74D).w,d2
000068C2 B501                       		eor.b	d2,d1
000068C4 6600                       		bne.s	locret_67D0
000068C6 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000068CC 9083                       		sub.l	d3,d0
000068CE 6A00                       		bpl.s	loc_67CA
000068D0 08F8 0000 F756             		bset	#0,($FFFFF756).w
000068D6 4E75                       		rts	
000068D8                            ; ===========================================================================
000068D8                            
000068D8                            loc_67CA:
000068D8 08F8 0001 F756             		bset	#1,($FFFFF756).w
000068DE                            
000068DE                            locret_67D0:
000068DE 4E75                       		rts	
000068E0                            ; End of function ScrollBlock1
000068E0                            
000068E0                            
000068E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068E0                            
000068E0                            
000068E0                            ScrollBlock2:				; XREF: Deform_SLZ
000068E0 2438 F708                  		move.l	($FFFFF708).w,d2
000068E4 2002                       		move.l	d2,d0
000068E6 D084                       		add.l	d4,d0
000068E8 21C0 F708                  		move.l	d0,($FFFFF708).w
000068EC 2638 F70C                  		move.l	($FFFFF70C).w,d3
000068F0 2003                       		move.l	d3,d0
000068F2 D085                       		add.l	d5,d0
000068F4 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000068F8 2200                       		move.l	d0,d1
000068FA 4841                       		swap	d1
000068FC 0241 0010                  		andi.w	#$10,d1
00006900 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006904 B501                       		eor.b	d2,d1
00006906 6600                       		bne.s	locret_6812
00006908 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000690E 9083                       		sub.l	d3,d0
00006910 6A00                       		bpl.s	loc_680C
00006912 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006918 4E75                       		rts	
0000691A                            ; ===========================================================================
0000691A                            
0000691A                            loc_680C:
0000691A 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006920                            
00006920                            locret_6812:
00006920 4E75                       		rts	
00006922                            ; End of function ScrollBlock2
00006922                            
00006922                            
00006922                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006922                            
00006922                            
00006922                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006922 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006926 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000692A 3200                       		move.w	d0,d1
0000692C 0241 0010                  		andi.w	#$10,d1
00006930 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006934 B501                       		eor.b	d2,d1
00006936 6600                       		bne.s	locret_6842
00006938 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
0000693E 9043                       		sub.w	d3,d0
00006940 6A00                       		bpl.s	loc_683C
00006942 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006948 4E75                       		rts	
0000694A                            ; ===========================================================================
0000694A                            
0000694A                            loc_683C:
0000694A 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006950                            
00006950                            locret_6842:
00006950 4E75                       		rts	
00006952                            ; End of function ScrollBlock3
00006952                            
00006952                            
00006952                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006952                            
00006952                            
00006952                            ScrollBlock4:				; XREF: Deform_GHZ
00006952 3438 F710                  		move.w	($FFFFF710).w,d2
00006956 3638 F714                  		move.w	($FFFFF714).w,d3
0000695A 3038 F73A                  		move.w	($FFFFF73A).w,d0
0000695E 48C0                       		ext.l	d0
00006960 EF80                       		asl.l	#7,d0
00006962 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006966 3038 F710                  		move.w	($FFFFF710).w,d0
0000696A 0240 0010                  		andi.w	#$10,d0
0000696E 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006972 B300                       		eor.b	d1,d0
00006974 6600                       		bne.s	locret_6884
00006976 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
0000697C 3038 F710                  		move.w	($FFFFF710).w,d0
00006980 9042                       		sub.w	d2,d0
00006982 6A00                       		bpl.s	loc_687E
00006984 08F8 0002 F758             		bset	#2,($FFFFF758).w
0000698A 6000                       		bra.s	locret_6884
0000698C                            ; ===========================================================================
0000698C                            
0000698C                            loc_687E:
0000698C 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006992                            
00006992                            locret_6884:
00006992 4E75                       		rts	
00006994                            ; End of function ScrollBlock4
00006994                            
00006994                            
00006994                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006994                            
00006994                            
00006994                            sub_6886:				; XREF: loc_C44
00006994 4BF9 00C0 0004             		lea	($C00004).l,a5
0000699A 4DF9 00C0 0000             		lea	($C00000).l,a6
000069A0 45F8 F756                  		lea	($FFFFF756).w,a2
000069A4 47F8 F708                  		lea	($FFFFF708).w,a3
000069A8 49F8 A440                  		lea	($FFFFA440).w,a4
000069AC 343C 6000                  		move.w	#$6000,d2
000069B0 6100 0000                  		bsr.w	sub_6954
000069B4 45F8 F758                  		lea	($FFFFF758).w,a2
000069B8 47F8 F710                  		lea	($FFFFF710).w,a3
000069BC 6000 0000                  		bra.w	sub_69F4
000069C0                            ; End of function sub_6886
000069C0                            
000069C0                            ; ---------------------------------------------------------------------------
000069C0                            ; Subroutine to	display	correct	tiles as you move
000069C0                            ; ---------------------------------------------------------------------------
000069C0                            
000069C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069C0                            
000069C0                            
000069C0                            LoadTilesAsYouMove:			; XREF: Demo_Time
000069C0 4BF9 00C0 0004             		lea	($C00004).l,a5
000069C6 4DF9 00C0 0000             		lea	($C00000).l,a6
000069CC 45F8 FF32                  		lea	($FFFFFF32).w,a2
000069D0 47F8 FF18                  		lea	($FFFFFF18).w,a3
000069D4 49F8 A440                  		lea	($FFFFA440).w,a4
000069D8 343C 6000                  		move.w	#$6000,d2
000069DC 6100 0000                  		bsr.w	sub_6954
000069E0 45F8 FF34                  		lea	($FFFFFF34).w,a2
000069E4 47F8 FF20                  		lea	($FFFFFF20).w,a3
000069E8 6100 0000                  		bsr.w	sub_69F4
000069EC 45F8 FF30                  		lea	($FFFFFF30).w,a2
000069F0 47F8 FF10                  		lea	($FFFFFF10).w,a3
000069F4 49F8 A400                  		lea	($FFFFA400).w,a4
000069F8 343C 4000                  		move.w	#$4000,d2
000069FC 4A12                       		tst.b	(a2)
000069FE 6700                       		beq.s	locret_6952
00006A00 0892 0000                  		bclr	#0,(a2)
00006A04 6700                       		beq.s	loc_6908
00006A06 78F0                       		moveq	#-$10,d4
00006A08 7AF0                       		moveq	#-$10,d5
00006A0A 6100 0000                  		bsr.w	sub_6C20
00006A0E 78F0                       		moveq	#-$10,d4
00006A10 7AF0                       		moveq	#-$10,d5
00006A12 6100 0000                  		bsr.w	sub_6AD8
00006A16                            
00006A16                            loc_6908:
00006A16 0892 0001                  		bclr	#1,(a2)
00006A1A 6700                       		beq.s	loc_6922
00006A1C 383C 00E0                  		move.w	#$E0,d4
00006A20 7AF0                       		moveq	#-$10,d5
00006A22 6100 0000                  		bsr.w	sub_6C20
00006A26 383C 00E0                  		move.w	#$E0,d4
00006A2A 7AF0                       		moveq	#-$10,d5
00006A2C 6100 0000                  		bsr.w	sub_6AD8
00006A30                            
00006A30                            loc_6922:
00006A30 0892 0002                  		bclr	#2,(a2)
00006A34 6700                       		beq.s	loc_6938
00006A36 78F0                       		moveq	#-$10,d4
00006A38 7AF0                       		moveq	#-$10,d5
00006A3A 6100 0000                  		bsr.w	sub_6C20
00006A3E 78F0                       		moveq	#-$10,d4
00006A40 7AF0                       		moveq	#-$10,d5
00006A42 6100 0000                  		bsr.w	sub_6B04
00006A46                            
00006A46                            loc_6938:
00006A46 0892 0003                  		bclr	#3,(a2)
00006A4A 6700                       		beq.s	locret_6952
00006A4C 78F0                       		moveq	#-$10,d4
00006A4E 3A3C 0140                  		move.w	#$140,d5
00006A52 6100 0000                  		bsr.w	sub_6C20
00006A56 78F0                       		moveq	#-$10,d4
00006A58 3A3C 0140                  		move.w	#$140,d5
00006A5C 6100 0000                  		bsr.w	sub_6B04
00006A60                            
00006A60                            locret_6952:
00006A60 4E75                       		rts	
00006A62                            ; End of function LoadTilesAsYouMove
00006A62                            
00006A62                            
00006A62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A62                            
00006A62                            
00006A62                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006A62 4A12                       		tst.b	(a2)
00006A64 6700 0000                  		beq.w	locret_69F2
00006A68 0892 0000                  		bclr	#0,(a2)
00006A6C 6700                       		beq.s	loc_6972
00006A6E 78F0                       		moveq	#-$10,d4
00006A70 7AF0                       		moveq	#-$10,d5
00006A72 6100 0000                  		bsr.w	sub_6C20
00006A76 78F0                       		moveq	#-$10,d4
00006A78 7AF0                       		moveq	#-$10,d5
00006A7A 7C1F                       		moveq	#$1F,d6
00006A7C 6100 0000                  		bsr.w	sub_6ADA
00006A80                            
00006A80                            loc_6972:
00006A80 0892 0001                  		bclr	#1,(a2)
00006A84 6700                       		beq.s	loc_698E
00006A86 383C 00E0                  		move.w	#$E0,d4
00006A8A 7AF0                       		moveq	#-$10,d5
00006A8C 6100 0000                  		bsr.w	sub_6C20
00006A90 383C 00E0                  		move.w	#$E0,d4
00006A94 7AF0                       		moveq	#-$10,d5
00006A96 7C1F                       		moveq	#$1F,d6
00006A98 6100 0000                  		bsr.w	sub_6ADA
00006A9C                            
00006A9C                            loc_698E:
00006A9C 0892 0002                  		bclr	#2,(a2)
00006AA0 6700                       		beq.s	loc_69BE
00006AA2 78F0                       		moveq	#-$10,d4
00006AA4 7AF0                       		moveq	#-$10,d5
00006AA6 6100 0000                  		bsr.w	sub_6C20
00006AAA 78F0                       		moveq	#-$10,d4
00006AAC 7AF0                       		moveq	#-$10,d5
00006AAE 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006AB2 322B 0004                  		move.w	4(a3),d1
00006AB6 0241 FFF0                  		andi.w	#-$10,d1
00006ABA 9C41                       		sub.w	d1,d6
00006ABC 6D00                       		blt.s	loc_69BE
00006ABE E84E                       		lsr.w	#4,d6
00006AC0 0C46 000F                  		cmpi.w	#$F,d6
00006AC4 6500                       		bcs.s	loc_69BA
00006AC6 7C0F                       		moveq	#$F,d6
00006AC8                            
00006AC8                            loc_69BA:
00006AC8 6100 0000                  		bsr.w	sub_6B06
00006ACC                            
00006ACC                            loc_69BE:
00006ACC 0892 0003                  		bclr	#3,(a2)
00006AD0 6700                       		beq.s	locret_69F2
00006AD2 78F0                       		moveq	#-$10,d4
00006AD4 3A3C 0140                  		move.w	#$140,d5
00006AD8 6100 0000                  		bsr.w	sub_6C20
00006ADC 78F0                       		moveq	#-$10,d4
00006ADE 3A3C 0140                  		move.w	#$140,d5
00006AE2 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006AE6 322B 0004                  		move.w	4(a3),d1
00006AEA 0241 FFF0                  		andi.w	#-$10,d1
00006AEE 9C41                       		sub.w	d1,d6
00006AF0 6D00                       		blt.s	locret_69F2
00006AF2 E84E                       		lsr.w	#4,d6
00006AF4 0C46 000F                  		cmpi.w	#$F,d6
00006AF8 6500                       		bcs.s	loc_69EE
00006AFA 7C0F                       		moveq	#$F,d6
00006AFC                            
00006AFC                            loc_69EE:
00006AFC 6100 0000                  		bsr.w	sub_6B06
00006B00                            
00006B00                            locret_69F2:
00006B00 4E75                       		rts	
00006B02                            ; End of function sub_6954
00006B02                            
00006B02                            
00006B02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B02                            
00006B02                            
00006B02                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006B02 4A12                       		tst.b	(a2)
00006B04 6700 0000                  		beq.w	locret_6A80
00006B08 0892 0002                  		bclr	#2,(a2)
00006B0C 6700                       		beq.s	loc_6A3E
00006B0E 0C53 0010                  		cmpi.w	#$10,(a3)
00006B12 6500                       		bcs.s	loc_6A3E
00006B14 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006B18 322B 0004                  		move.w	4(a3),d1
00006B1C 0241 FFF0                  		andi.w	#-$10,d1
00006B20 9841                       		sub.w	d1,d4
00006B22 3F04                       		move.w	d4,-(sp)
00006B24 7AF0                       		moveq	#-$10,d5
00006B26 6100 0000                  		bsr.w	sub_6C20
00006B2A 381F                       		move.w	(sp)+,d4
00006B2C 7AF0                       		moveq	#-$10,d5
00006B2E 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006B32 322B 0004                  		move.w	4(a3),d1
00006B36 0241 FFF0                  		andi.w	#-$10,d1
00006B3A 9C41                       		sub.w	d1,d6
00006B3C 6D00                       		blt.s	loc_6A3E
00006B3E E84E                       		lsr.w	#4,d6
00006B40 0446 000E                  		subi.w	#$E,d6
00006B44 6400                       		bcc.s	loc_6A3E
00006B46 4446                       		neg.w	d6
00006B48 6100 0000                  		bsr.w	sub_6B06
00006B4C                            
00006B4C                            loc_6A3E:
00006B4C 0892 0003                  		bclr	#3,(a2)
00006B50 6700                       		beq.s	locret_6A80
00006B52 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006B56 322B 0004                  		move.w	4(a3),d1
00006B5A 0241 FFF0                  		andi.w	#-$10,d1
00006B5E 9841                       		sub.w	d1,d4
00006B60 3F04                       		move.w	d4,-(sp)
00006B62 3A3C 0140                  		move.w	#$140,d5
00006B66 6100 0000                  		bsr.w	sub_6C20
00006B6A 381F                       		move.w	(sp)+,d4
00006B6C 3A3C 0140                  		move.w	#$140,d5
00006B70 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006B74 322B 0004                  		move.w	4(a3),d1
00006B78 0241 FFF0                  		andi.w	#-$10,d1
00006B7C 9C41                       		sub.w	d1,d6
00006B7E 6D00                       		blt.s	locret_6A80
00006B80 E84E                       		lsr.w	#4,d6
00006B82 0446 000E                  		subi.w	#$E,d6
00006B86 6400                       		bcc.s	locret_6A80
00006B88 4446                       		neg.w	d6
00006B8A 6100 0000                  		bsr.w	sub_6B06
00006B8E                            
00006B8E                            locret_6A80:
00006B8E 4E75                       		rts	
00006B90                            ; End of function sub_69F4
00006B90                            
00006B90                            ; ===========================================================================
00006B90 4A12                       		tst.b	(a2)
00006B92 6700                       		beq.s	locret_6AD6
00006B94 0892 0002                  		bclr	#2,(a2)
00006B98 6700                       		beq.s	loc_6AAC
00006B9A 383C 00D0                  		move.w	#$D0,d4
00006B9E 322B 0004                  		move.w	4(a3),d1
00006BA2 0241 FFF0                  		andi.w	#-$10,d1
00006BA6 9841                       		sub.w	d1,d4
00006BA8 3F04                       		move.w	d4,-(sp)
00006BAA 7AF0                       		moveq	#-$10,d5
00006BAC 6100 0000                  		bsr.w	sub_6C3C
00006BB0 381F                       		move.w	(sp)+,d4
00006BB2 7AF0                       		moveq	#-$10,d5
00006BB4 7C02                       		moveq	#2,d6
00006BB6 6100 0000                  		bsr.w	sub_6B06
00006BBA                            
00006BBA                            loc_6AAC:
00006BBA 0892 0003                  		bclr	#3,(a2)
00006BBE 6700                       		beq.s	locret_6AD6
00006BC0 383C 00D0                  		move.w	#$D0,d4
00006BC4 322B 0004                  		move.w	4(a3),d1
00006BC8 0241 FFF0                  		andi.w	#-$10,d1
00006BCC 9841                       		sub.w	d1,d4
00006BCE 3F04                       		move.w	d4,-(sp)
00006BD0 3A3C 0140                  		move.w	#$140,d5
00006BD4 6100 0000                  		bsr.w	sub_6C3C
00006BD8 381F                       		move.w	(sp)+,d4
00006BDA 3A3C 0140                  		move.w	#$140,d5
00006BDE 7C02                       		moveq	#2,d6
00006BE0 6100 0000                  		bsr.w	sub_6B06
00006BE4                            
00006BE4                            locret_6AD6:
00006BE4 4E75                       		rts	
00006BE6                            
00006BE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BE6                            
00006BE6                            
00006BE6                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006BE6 7C15                       		moveq	#$15,d6
00006BE8                            ; End of function sub_6AD8
00006BE8                            
00006BE8                            
00006BE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BE8                            
00006BE8                            
00006BE8                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006BE8 2E3C 0080 0000             		move.l	#$800000,d7
00006BEE 2200                       		move.l	d0,d1
00006BF0                            
00006BF0                            loc_6AE2:
00006BF0 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006BF4 6100 0000                  		bsr.w	sub_6BD6
00006BF8 2001                       		move.l	d1,d0
00006BFA 6100 0000                  		bsr.w	sub_6B32
00006BFE 5801                       		addq.b	#4,d1
00006C00 0201 007F                  		andi.b	#$7F,d1
00006C04 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006C08 0645 0010                  		addi.w	#$10,d5
00006C0C 51CE FFE2                  		dbf	d6,loc_6AE2
00006C10 4E75                       		rts	
00006C12                            ; End of function sub_6ADA
00006C12                            
00006C12                            
00006C12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C12                            
00006C12                            
00006C12                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006C12 7C0F                       		moveq	#$F,d6
00006C14                            ; End of function sub_6B04
00006C14                            
00006C14                            
00006C14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C14                            
00006C14                            
00006C14                            sub_6B06:				; XREF: sub_6954
00006C14 2E3C 0080 0000             		move.l	#$800000,d7
00006C1A 2200                       		move.l	d0,d1
00006C1C                            
00006C1C                            loc_6B0E:
00006C1C 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006C20 6100 0000                  		bsr.w	sub_6BD6
00006C24 2001                       		move.l	d1,d0
00006C26 6100 0000                  		bsr.w	sub_6B32
00006C2A 0641 0100                  		addi.w	#$100,d1
00006C2E 0241 0FFF                  		andi.w	#$FFF,d1
00006C32 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006C36 0644 0010                  		addi.w	#$10,d4
00006C3A 51CE FFE0                  		dbf	d6,loc_6B0E
00006C3E 4E75                       		rts	
00006C40                            ; End of function sub_6B06
00006C40                            
00006C40                            
00006C40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C40                            
00006C40                            
00006C40                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00006C40 8042                       		or.w	d2,d0
00006C42 4840                       		swap	d0
00006C44 0810 0004                  		btst	#4,(a0)
00006C48 6600                       		bne.s	loc_6B6E
00006C4A 0810 0003                  		btst	#3,(a0)
00006C4E 6600                       		bne.s	loc_6B4E
00006C50 2A80                       		move.l	d0,(a5)
00006C52 2C99                       		move.l	(a1)+,(a6)
00006C54 D087                       		add.l	d7,d0
00006C56 2A80                       		move.l	d0,(a5)
00006C58 2C99                       		move.l	(a1)+,(a6)
00006C5A 4E75                       		rts	
00006C5C                            ; ===========================================================================
00006C5C                            
00006C5C                            loc_6B4E:
00006C5C 2A80                       		move.l	d0,(a5)
00006C5E 2819                       		move.l	(a1)+,d4
00006C60 0A84 0800 0800             		eori.l	#$8000800,d4
00006C66 4844                       		swap	d4
00006C68 2C84                       		move.l	d4,(a6)
00006C6A D087                       		add.l	d7,d0
00006C6C 2A80                       		move.l	d0,(a5)
00006C6E 2819                       		move.l	(a1)+,d4
00006C70 0A84 0800 0800             		eori.l	#$8000800,d4
00006C76 4844                       		swap	d4
00006C78 2C84                       		move.l	d4,(a6)
00006C7A 4E75                       		rts	
00006C7C                            ; ===========================================================================
00006C7C                            
00006C7C                            loc_6B6E:
00006C7C 0810 0003                  		btst	#3,(a0)
00006C80 6600                       		bne.s	loc_6B90
00006C82 2A80                       		move.l	d0,(a5)
00006C84 2A19                       		move.l	(a1)+,d5
00006C86 2819                       		move.l	(a1)+,d4
00006C88 0A84 1000 1000             		eori.l	#$10001000,d4
00006C8E 2C84                       		move.l	d4,(a6)
00006C90 D087                       		add.l	d7,d0
00006C92 2A80                       		move.l	d0,(a5)
00006C94 0A85 1000 1000             		eori.l	#$10001000,d5
00006C9A 2C85                       		move.l	d5,(a6)
00006C9C 4E75                       		rts	
00006C9E                            ; ===========================================================================
00006C9E                            
00006C9E                            loc_6B90:
00006C9E 2A80                       		move.l	d0,(a5)
00006CA0 2A19                       		move.l	(a1)+,d5
00006CA2 2819                       		move.l	(a1)+,d4
00006CA4 0A84 1800 1800             		eori.l	#$18001800,d4
00006CAA 4844                       		swap	d4
00006CAC 2C84                       		move.l	d4,(a6)
00006CAE D087                       		add.l	d7,d0
00006CB0 2A80                       		move.l	d0,(a5)
00006CB2 0A85 1800 1800             		eori.l	#$18001800,d5
00006CB8 4845                       		swap	d5
00006CBA 2C85                       		move.l	d5,(a6)
00006CBC 4E75                       		rts	
00006CBE                            ; End of function sub_6B32
00006CBE                            
00006CBE                            ; ===========================================================================
00006CBE 4E75                       		rts	
00006CC0                            ; ===========================================================================
00006CC0 2A80                       		move.l	d0,(a5)
00006CC2 3A3C 2000                  		move.w	#$2000,d5
00006CC6 3819                       		move.w	(a1)+,d4
00006CC8 D845                       		add.w	d5,d4
00006CCA 3C84                       		move.w	d4,(a6)
00006CCC 3819                       		move.w	(a1)+,d4
00006CCE D845                       		add.w	d5,d4
00006CD0 3C84                       		move.w	d4,(a6)
00006CD2 D087                       		add.l	d7,d0
00006CD4 2A80                       		move.l	d0,(a5)
00006CD6 3819                       		move.w	(a1)+,d4
00006CD8 D845                       		add.w	d5,d4
00006CDA 3C84                       		move.w	d4,(a6)
00006CDC 3819                       		move.w	(a1)+,d4
00006CDE D845                       		add.w	d5,d4
00006CE0 3C84                       		move.w	d4,(a6)
00006CE2 4E75                       		rts	
00006CE4                            
00006CE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CE4                            
00006CE4                            
00006CE4                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00006CE4 43F8 B000                  		lea	($FFFFB000).w,a1
00006CE8 D86B 0004                  		add.w	4(a3),d4
00006CEC DA53                       		add.w	(a3),d5
00006CEE 3604                       		move.w	d4,d3
00006CF0 E24B                       		lsr.w	#1,d3
00006CF2 0243 0380                  		andi.w	#$380,d3
00006CF6 E64D                       		lsr.w	#3,d5
00006CF8 3005                       		move.w	d5,d0
00006CFA EA48                       		lsr.w	#5,d0
00006CFC 0240 007F                  		andi.w	#$7F,d0
00006D00 D043                       		add.w	d3,d0
00006D02 76FF                       		moveq	#-1,d3
00006D04 1634 0000                  		move.b	(a4,d0.w),d3
00006D08 6700                       		beq.s	locret_6C1E
00006D0A 5303                       		subq.b	#1,d3
00006D0C 0243 007F                  		andi.w	#$7F,d3
00006D10 EE5B                       		ror.w	#7,d3
00006D12 D844                       		add.w	d4,d4
00006D14 0244 01E0                  		andi.w	#$1E0,d4
00006D18 0245 001E                  		andi.w	#$1E,d5
00006D1C D644                       		add.w	d4,d3
00006D1E D645                       		add.w	d5,d3
00006D20 2043                       		movea.l	d3,a0
00006D22 3610                       		move.w	(a0),d3
00006D24 0243 03FF                  		andi.w	#$3FF,d3
00006D28 E74B                       		lsl.w	#3,d3
00006D2A D2C3                       		adda.w	d3,a1
00006D2C                            
00006D2C                            locret_6C1E:
00006D2C 4E75                       		rts	
00006D2E                            ; End of function sub_6BD6
00006D2E                            
00006D2E                            
00006D2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D2E                            
00006D2E                            
00006D2E                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00006D2E D86B 0004                  		add.w	4(a3),d4
00006D32 DA53                       		add.w	(a3),d5
00006D34 0244 00F0                  		andi.w	#$F0,d4
00006D38 0245 01F0                  		andi.w	#$1F0,d5
00006D3C E94C                       		lsl.w	#4,d4
00006D3E E44D                       		lsr.w	#2,d5
00006D40 D845                       		add.w	d5,d4
00006D42 7003                       		moveq	#3,d0
00006D44 4840                       		swap	d0
00006D46 3004                       		move.w	d4,d0
00006D48 4E75                       		rts	
00006D4A                            ; End of function sub_6C20
00006D4A                            
00006D4A                            
00006D4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D4A                            ; not used
00006D4A                            
00006D4A                            
00006D4A                            sub_6C3C:
00006D4A D86B 0004                  		add.w	4(a3),d4
00006D4E DA53                       		add.w	(a3),d5
00006D50 0244 00F0                  		andi.w	#$F0,d4
00006D54 0245 01F0                  		andi.w	#$1F0,d5
00006D58 E94C                       		lsl.w	#4,d4
00006D5A E44D                       		lsr.w	#2,d5
00006D5C D845                       		add.w	d5,d4
00006D5E 7002                       		moveq	#2,d0
00006D60 4840                       		swap	d0
00006D62 3004                       		move.w	d4,d0
00006D64 4E75                       		rts	
00006D66                            ; End of function sub_6C3C
00006D66                            
00006D66                            ; ---------------------------------------------------------------------------
00006D66                            ; Subroutine to	load tiles as soon as the level	appears
00006D66                            ; ---------------------------------------------------------------------------
00006D66                            
00006D66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D66                            
00006D66                            
00006D66                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00006D66 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D6C 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D72 47F8 F700                  		lea	($FFFFF700).w,a3
00006D76 49F8 A400                  		lea	($FFFFA400).w,a4
00006D7A 343C 4000                  		move.w	#$4000,d2
00006D7E 6100                       		bsr.s	LoadTilesFromStart2
00006D80 47F8 F708                  		lea	($FFFFF708).w,a3
00006D84 49F8 A440                  		lea	($FFFFA440).w,a4
00006D88 343C 6000                  		move.w	#$6000,d2
00006D8C                            ; End of function LoadTilesFromStart
00006D8C                            
00006D8C                            
00006D8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D8C                            
00006D8C                            
00006D8C                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00006D8C 78F0                       		moveq	#-$10,d4
00006D8E 7C0F                       		moveq	#$F,d6
00006D90                            
00006D90                            loc_6C82:
00006D90 48E7 0E00                  		movem.l	d4-d6,-(sp)
00006D94 7A00                       		moveq	#0,d5
00006D96 3204                       		move.w	d4,d1
00006D98 6100 FF94                  		bsr.w	sub_6C20
00006D9C 3801                       		move.w	d1,d4
00006D9E 7A00                       		moveq	#0,d5
00006DA0 7C1F                       		moveq	#$1F,d6
00006DA2 6100 FE44                  		bsr.w	sub_6ADA
00006DA6 4CDF 0070                  		movem.l	(sp)+,d4-d6
00006DAA 0644 0010                  		addi.w	#$10,d4
00006DAE 51CE FFE0                  		dbf	d6,loc_6C82
00006DB2 4E75                       		rts	
00006DB4                            ; End of function LoadTilesFromStart2
00006DB4                            
00006DB4                            ; ---------------------------------------------------------------------------
00006DB4                            ; Main Load Block loading subroutine
00006DB4                            ; ---------------------------------------------------------------------------
00006DB4                            
00006DB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DB4                            
00006DB4                            
00006DB4                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00006DB4 7000                       		moveq	#0,d0
00006DB6 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006DBA E948                       		lsl.w	#4,d0
00006DBC 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00006DC2 45F2 0000                  		lea	(a2,d0.w),a2
00006DC6 2F0A                       		move.l	a2,-(sp)
00006DC8 588A                       		addq.l	#4,a2
00006DCA 205A                       		movea.l	(a2)+,a0
00006DCC 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00006DD0 303C 0000                  		move.w	#0,d0
00006DD4 6100 A948                  		bsr.w	EniDec
00006DD8 205A                       		movea.l	(a2)+,a0
00006DDA 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00006DE0 6100 AABA                  		bsr.w	KosDec
00006DE4 6100 0000                  		bsr.w	LevelLayoutLoad
00006DE8 301A                       		move.w	(a2)+,d0
00006DEA 3012                       		move.w	(a2),d0
00006DEC 0240 00FF                  		andi.w	#$FF,d0
00006DF0 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00006DF6 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00006DF8 700C                       		moveq	#$C,d0		; use SB3 pallet
00006DFA                            
00006DFA                            MLB_ChkSBZPal:
00006DFA 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00006E00 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00006E02 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00006E08 6600                       		bne.s	MLB_NormalPal	; if not, branch
00006E0A                            
00006E0A                            MLB_UsePal0E:
00006E0A 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00006E0C                            
00006E0C                            MLB_NormalPal:
00006E0C 6100 B2EE                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00006E10 245F                       		movea.l	(sp)+,a2
00006E12 584A                       		addq.w	#4,a2
00006E14 7000                       		moveq	#0,d0
00006E16 1012                       		move.b	(a2),d0
00006E18 6700                       		beq.s	locret_6D10
00006E1A 6100 A764                  		bsr.w	LoadPLC		; load pattern load cues
00006E1E                            
00006E1E                            locret_6D10:
00006E1E 4E75                       		rts	
00006E20                            ; End of function MainLoadBlockLoad
00006E20                            
00006E20                            ; ---------------------------------------------------------------------------
00006E20                            ; Level	layout loading subroutine
00006E20                            ; ---------------------------------------------------------------------------
00006E20                            
00006E20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E20                            
00006E20                            
00006E20                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00006E20 47F8 A400                  		lea	($FFFFA400).w,a3
00006E24 323C 01FF                  		move.w	#$1FF,d1
00006E28 7000                       		moveq	#0,d0
00006E2A                            
00006E2A                            LevLoad_ClrRam:
00006E2A 26C0                       		move.l	d0,(a3)+
00006E2C 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00006E30                            
00006E30 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00006E34 7200                       		moveq	#0,d1
00006E36 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00006E3A 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00006E3E 7202                       		moveq	#2,d1
00006E40                            ; End of function LevelLayoutLoad
00006E40                            
00006E40                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00006E40                            
00006E40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E40                            
00006E40                            
00006E40                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00006E40 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006E44 ED08                       		lsl.b	#6,d0
00006E46 EA48                       		lsr.w	#5,d0
00006E48 3400                       		move.w	d0,d2
00006E4A D040                       		add.w	d0,d0
00006E4C D042                       		add.w	d2,d0
00006E4E D041                       		add.w	d1,d0
00006E50 43F9 0000 0000             		lea	(Level_Index).l,a1
00006E56 3031 0000                  		move.w	(a1,d0.w),d0
00006E5A 43F1 0000                  		lea	(a1,d0.w),a1
00006E5E 7200                       		moveq	#0,d1
00006E60 3401                       		move.w	d1,d2
00006E62 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00006E64 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00006E66                            
00006E66                            LevLoad_NumRows:
00006E66 3001                       		move.w	d1,d0
00006E68 204B                       		movea.l	a3,a0
00006E6A                            
00006E6A                            LevLoad_Row:
00006E6A 10D9                       		move.b	(a1)+,(a0)+
00006E6C 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00006E70 47EB 0080                  		lea	$80(a3),a3	; do next row
00006E74 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00006E78 4E75                       		rts	
00006E7A                            ; End of function LevelLayoutLoad2
00006E7A                            
00006E7A                            ; ---------------------------------------------------------------------------
00006E7A                            ; Dynamic screen resize	loading	subroutine
00006E7A                            ; ---------------------------------------------------------------------------
00006E7A                            
00006E7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E7A                            
00006E7A                            
00006E7A                            DynScrResizeLoad:			; XREF: DeformBgLayer
00006E7A 7000                       		moveq	#0,d0
00006E7C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006E80 D040                       		add.w	d0,d0
00006E82 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00006E86 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00006E8A 7202                       		moveq	#2,d1
00006E8C 3038 F726                  		move.w	($FFFFF726).w,d0
00006E90 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00006E94 6700                       		beq.s	locret_6DAA
00006E96 6400                       		bcc.s	loc_6DAC
00006E98 4441                       		neg.w	d1
00006E9A 3038 F704                  		move.w	($FFFFF704).w,d0
00006E9E B078 F726                  		cmp.w	($FFFFF726).w,d0
00006EA2 6300                       		bls.s	loc_6DA0
00006EA4 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00006EA8 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00006EAE                            
00006EAE                            loc_6DA0:
00006EAE D378 F72E                  		add.w	d1,($FFFFF72E).w
00006EB2 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00006EB8                            
00006EB8                            locret_6DAA:
00006EB8 4E75                       		rts	
00006EBA                            ; ===========================================================================
00006EBA                            
00006EBA                            loc_6DAC:				; XREF: DynScrResizeLoad
00006EBA 3038 F704                  		move.w	($FFFFF704).w,d0
00006EBE 5040                       		addq.w	#8,d0
00006EC0 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006EC4 6500                       		bcs.s	loc_6DC4
00006EC6 0838 0001 D022             		btst	#1,($FFFFD022).w
00006ECC 6700                       		beq.s	loc_6DC4
00006ECE D241                       		add.w	d1,d1
00006ED0 D241                       		add.w	d1,d1
00006ED2                            
00006ED2                            loc_6DC4:
00006ED2 D378 F72E                  		add.w	d1,($FFFFF72E).w
00006ED6 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00006EDC 4E75                       		rts	
00006EDE                            ; End of function DynScrResizeLoad
00006EDE                            
00006EDE                            ; ===========================================================================
00006EDE                            ; ---------------------------------------------------------------------------
00006EDE                            ; Offset index for dynamic screen resizing
00006EDE                            ; ---------------------------------------------------------------------------
00006EDE 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00006EE2 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00006EE6 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00006EEA 0000                       		dc.w Resize_Ending-Resize_Index
00006EEC                            ; ===========================================================================
00006EEC                            ; ---------------------------------------------------------------------------
00006EEC                            ; Green	Hill Zone dynamic screen resizing
00006EEC                            ; ---------------------------------------------------------------------------
00006EEC                            
00006EEC                            Resize_GHZ:				; XREF: Resize_Index
00006EEC 7000                       		moveq	#0,d0
00006EEE 1038 FE11                  		move.b	($FFFFFE11).w,d0
00006EF2 D040                       		add.w	d0,d0
00006EF4 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00006EF8 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00006EFC                            ; ===========================================================================
00006EFC 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00006EFE 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00006F00 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00006F02                            ; ===========================================================================
00006F02                            
00006F02                            Resize_GHZ1:
00006F02 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00006F08 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00006F0E 6500                       		bcs.s	locret_6E08	; if not, branch
00006F10 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00006F16                            
00006F16                            locret_6E08:
00006F16 4E75                       		rts	
00006F18                            ; ===========================================================================
00006F18                            
00006F18                            Resize_GHZ2:
00006F18 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006F1E 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00006F24 6500                       		bcs.s	locret_6E3A
00006F26 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00006F2C 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00006F32 6500                       		bcs.s	locret_6E3A
00006F34 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00006F3A 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00006F40 6500                       		bcs.s	locret_6E3A
00006F42 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006F48                            
00006F48                            locret_6E3A:
00006F48 4E75                       		rts	
00006F4A                            ; ===========================================================================
00006F4A                            
00006F4A                            Resize_GHZ3:
00006F4A 7000                       		moveq	#0,d0
00006F4C 1038 F742                  		move.b	($FFFFF742).w,d0
00006F50 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00006F54 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00006F58                            ; ===========================================================================
00006F58 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00006F5A 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00006F5C 0000                       		dc.w Resize_GHZ3end-off_6E4A
00006F5E                            ; ===========================================================================
00006F5E                            
00006F5E                            Resize_GHZ3main:
00006F5E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006F64 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00006F6A 6500                       		bcs.s	locret_6E96
00006F6C 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00006F72 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00006F78 6500                       		bcs.s	locret_6E96
00006F7A 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00006F80 6500                       		bcs.s	loc_6E98
00006F82 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00006F88 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00006F8E 6400                       		bcc.s	loc_6E8E
00006F90 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00006F96 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00006F9C                            
00006F9C                            loc_6E8E:
00006F9C 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00006FA2 6400                       		bcc.s	loc_6E98
00006FA4                            
00006FA4                            locret_6E96:
00006FA4 4E75                       		rts	
00006FA6                            ; ===========================================================================
00006FA6                            
00006FA6                            loc_6E98:
00006FA6 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006FAC 5438 F742                  		addq.b	#2,($FFFFF742).w
00006FB0 4E75                       		rts	
00006FB2                            ; ===========================================================================
00006FB2                            
00006FB2                            Resize_GHZ3boss:
00006FB2 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00006FB8 6400                       		bcc.s	loc_6EB0
00006FBA 5538 F742                  		subq.b	#2,($FFFFF742).w
00006FBE                            
00006FBE                            loc_6EB0:
00006FBE 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00006FC4 6500                       		bcs.s	locret_6EE8
00006FC6 6100 0000                  		bsr.w	SingleObjLoad
00006FCA 6600                       		bne.s	loc_6ED0
00006FCC 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00006FD0 337C 2A60 0008             		move.w	#$2A60,8(a1)
00006FD6 337C 0280 000C             		move.w	#$280,$C(a1)
00006FDC                            
00006FDC                            loc_6ED0:
00006FDC 303C 008C                  		move.w	#$8C,d0
00006FE0 6100 A3B4                  		bsr.w	PlaySound	; play boss music
00006FE4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00006FEA 5438 F742                  		addq.b	#2,($FFFFF742).w
00006FEE 7011                       		moveq	#$11,d0
00006FF0 6000 A58E                  		bra.w	LoadPLC		; load boss patterns
00006FF4                            ; ===========================================================================
00006FF4                            
00006FF4                            locret_6EE8:
00006FF4 4E75                       		rts	
00006FF6                            ; ===========================================================================
00006FF6                            
00006FF6                            Resize_GHZ3end:
00006FF6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00006FFC 4E75                       		rts	
00006FFE                            ; ===========================================================================
00006FFE                            ; ---------------------------------------------------------------------------
00006FFE                            ; Labyrinth Zone dynamic screen	resizing
00006FFE                            ; ---------------------------------------------------------------------------
00006FFE                            
00006FFE                            Resize_LZ:				; XREF: Resize_Index
00006FFE 7000                       		moveq	#0,d0
00007000 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007004 D040                       		add.w	d0,d0
00007006 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
0000700A 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
0000700E                            ; ===========================================================================
0000700E 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007010 0000                       		dc.w Resize_LZ12-Resize_LZx
00007012 0000                       		dc.w Resize_LZ3-Resize_LZx
00007014 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007016                            ; ===========================================================================
00007016                            
00007016                            Resize_LZ12:
00007016 4E75                       		rts	
00007018                            ; ===========================================================================
00007018                            
00007018                            Resize_LZ3:
00007018 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
0000701C 6700                       		beq.s	loc_6F28	; if not, branch
0000701E 43F8 A506                  		lea	($FFFFA506).w,a1
00007022 0C11 0007                  		cmpi.b	#7,(a1)
00007026 6700                       		beq.s	loc_6F28
00007028 12BC 0007                  		move.b	#7,(a1)		; modify level layout
0000702C 303C 00B7                  		move.w	#$B7,d0
00007030 6100 A36A                  		bsr.w	PlaySound_Special ; play rumbling sound
00007034                            
00007034                            loc_6F28:
00007034 4A38 F742                  		tst.b	($FFFFF742).w
00007038 6600                       		bne.s	locret_6F64
0000703A 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007040 6500                       		bcs.s	locret_6F62
00007042 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00007048 6400                       		bcc.s	locret_6F62
0000704A 6100 0000                  		bsr.w	SingleObjLoad
0000704E 6600                       		bne.s	loc_6F4A
00007050 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007054                            
00007054                            loc_6F4A:
00007054 303C 008C                  		move.w	#$8C,d0
00007058 6100 A33C                  		bsr.w	PlaySound	; play boss music
0000705C 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007062 5438 F742                  		addq.b	#2,($FFFFF742).w
00007066 7011                       		moveq	#$11,d0
00007068 6000 A516                  		bra.w	LoadPLC		; load boss patterns
0000706C                            ; ===========================================================================
0000706C                            
0000706C                            locret_6F62:
0000706C 4E75                       		rts	
0000706E                            ; ===========================================================================
0000706E                            
0000706E                            locret_6F64:
0000706E 4E75                       		rts	
00007070                            ; ===========================================================================
00007070                            
00007070                            Resize_SBZ3:
00007070 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007076 6500                       		bcs.s	locret_6F8C
00007078 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
0000707E 6400                       		bcc.s	locret_6F8C	; if not, branch
00007080 4238 FE30                  		clr.b	($FFFFFE30).w
00007084 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000708A 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007090 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007096                            
00007096                            locret_6F8C:
00007096 4E75                       		rts	
00007098                            ; ===========================================================================
00007098                            ; ---------------------------------------------------------------------------
00007098                            ; Marble Zone dynamic screen resizing
00007098                            ; ---------------------------------------------------------------------------
00007098                            
00007098                            Resize_MZ:				; XREF: Resize_Index
00007098 7000                       		moveq	#0,d0
0000709A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000709E D040                       		add.w	d0,d0
000070A0 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000070A4 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000070A8                            ; ===========================================================================
000070A8 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000070AA 0000                       		dc.w Resize_MZ2-Resize_MZx
000070AC 0000                       		dc.w Resize_MZ3-Resize_MZx
000070AE                            ; ===========================================================================
000070AE                            
000070AE                            Resize_MZ1:
000070AE 7000                       		moveq	#0,d0
000070B0 1038 F742                  		move.b	($FFFFF742).w,d0
000070B4 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000070B8 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000070BC                            ; ===========================================================================
000070BC 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000070BE 0000                       		dc.w loc_6FEA-off_6FB2
000070C0 0000                       		dc.w loc_702E-off_6FB2
000070C2 0000                       		dc.w loc_7050-off_6FB2
000070C4                            ; ===========================================================================
000070C4                            
000070C4                            loc_6FBA:
000070C4 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000070CA 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000070D0 6500                       		bcs.s	locret_6FE8
000070D2 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000070D8 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000070DE 6500                       		bcs.s	locret_6FE8
000070E0 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000070E6 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000070EC 6500                       		bcs.s	locret_6FE8
000070EE 5438 F742                  		addq.b	#2,($FFFFF742).w
000070F2                            
000070F2                            locret_6FE8:
000070F2 4E75                       		rts	
000070F4                            ; ===========================================================================
000070F4                            
000070F4                            loc_6FEA:
000070F4 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000070FA 6400                       		bcc.s	loc_6FF8
000070FC 5538 F742                  		subq.b	#2,($FFFFF742).w
00007100 4E75                       		rts	
00007102                            ; ===========================================================================
00007102                            
00007102                            loc_6FF8:
00007102 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007108 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
0000710E 6400                       		bcc.s	locret_702C
00007110 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007116 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000711C 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007122 6400                       		bcc.s	locret_702C
00007124 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000712A 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007130 6500                       		bcs.s	locret_702C
00007132 5438 F742                  		addq.b	#2,($FFFFF742).w
00007136                            
00007136                            locret_702C:
00007136 4E75                       		rts	
00007138                            ; ===========================================================================
00007138                            
00007138                            loc_702E:
00007138 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000713E 6400                       		bcc.s	loc_703C
00007140 5538 F742                  		subq.b	#2,($FFFFF742).w
00007144 4E75                       		rts	
00007146                            ; ===========================================================================
00007146                            
00007146                            loc_703C:
00007146 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000714C 6500                       		bcs.s	locret_704E
0000714E 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007154 5438 F742                  		addq.b	#2,($FFFFF742).w
00007158                            
00007158                            locret_704E:
00007158 4E75                       		rts	
0000715A                            ; ===========================================================================
0000715A                            
0000715A                            loc_7050:
0000715A 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007160 6500                       		bcs.s	locret_7072
00007162 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007168 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000716E 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007174 6500                       		bcs.s	locret_7072
00007176 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000717C                            
0000717C                            locret_7072:
0000717C 4E75                       		rts	
0000717E                            ; ===========================================================================
0000717E                            
0000717E                            Resize_MZ2:
0000717E 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007184 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000718A 6500                       		bcs.s	locret_7088
0000718C 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007192                            
00007192                            locret_7088:
00007192 4E75                       		rts	
00007194                            ; ===========================================================================
00007194                            
00007194                            Resize_MZ3:
00007194 7000                       		moveq	#0,d0
00007196 1038 F742                  		move.b	($FFFFF742).w,d0
0000719A 303B 0000                  		move.w	off_7098(pc,d0.w),d0
0000719E 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000071A2                            ; ===========================================================================
000071A2 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000071A4 0000                       		dc.w Resize_MZ3end-off_7098
000071A6                            ; ===========================================================================
000071A6                            
000071A6                            Resize_MZ3boss:
000071A6 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000071AC 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000071B2 6500                       		bcs.s	locret_70E8
000071B4 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000071BA 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000071C0 6500                       		bcs.s	locret_70E8
000071C2 6100 0000                  		bsr.w	SingleObjLoad
000071C6 6600                       		bne.s	loc_70D0
000071C8 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000071CC 337C 19F0 0008             		move.w	#$19F0,8(a1)
000071D2 337C 022C 000C             		move.w	#$22C,$C(a1)
000071D8                            
000071D8                            loc_70D0:
000071D8 303C 008C                  		move.w	#$8C,d0
000071DC 6100 A1B8                  		bsr.w	PlaySound	; play boss music
000071E0 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000071E6 5438 F742                  		addq.b	#2,($FFFFF742).w
000071EA 7011                       		moveq	#$11,d0
000071EC 6000 A392                  		bra.w	LoadPLC		; load boss patterns
000071F0                            ; ===========================================================================
000071F0                            
000071F0                            locret_70E8:
000071F0 4E75                       		rts	
000071F2                            ; ===========================================================================
000071F2                            
000071F2                            Resize_MZ3end:
000071F2 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000071F8 4E75                       		rts	
000071FA                            ; ===========================================================================
000071FA                            ; ---------------------------------------------------------------------------
000071FA                            ; Star Light Zone dynamic screen resizing
000071FA                            ; ---------------------------------------------------------------------------
000071FA                            
000071FA                            Resize_SLZ:				; XREF: Resize_Index
000071FA 7000                       		moveq	#0,d0
000071FC 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007200 D040                       		add.w	d0,d0
00007202 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007206 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000720A                            ; ===========================================================================
0000720A 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
0000720C 0000                       		dc.w Resize_SLZ12-Resize_SLZx
0000720E 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007210                            ; ===========================================================================
00007210                            
00007210                            Resize_SLZ12:
00007210 4E75                       		rts	
00007212                            ; ===========================================================================
00007212                            
00007212                            Resize_SLZ3:
00007212 7000                       		moveq	#0,d0
00007214 1038 F742                  		move.b	($FFFFF742).w,d0
00007218 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000721C 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007220                            ; ===========================================================================
00007220 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007222 0000                       		dc.w Resize_SLZ3boss-off_7118
00007224 0000                       		dc.w Resize_SLZ3end-off_7118
00007226                            ; ===========================================================================
00007226                            
00007226                            Resize_SLZ3main:
00007226 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000722C 6500                       		bcs.s	locret_7130
0000722E 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007234 5438 F742                  		addq.b	#2,($FFFFF742).w
00007238                            
00007238                            locret_7130:
00007238 4E75                       		rts	
0000723A                            ; ===========================================================================
0000723A                            
0000723A                            Resize_SLZ3boss:
0000723A 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007240 6500                       		bcs.s	locret_715C
00007242 6100 0000                  		bsr.w	SingleObjLoad
00007246 6600                       		bne.s	loc_7144
00007248 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000724C                            
0000724C                            loc_7144:
0000724C 303C 008C                  		move.w	#$8C,d0
00007250 6100 A144                  		bsr.w	PlaySound	; play boss music
00007254 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000725A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000725E 7011                       		moveq	#$11,d0
00007260 6000 A31E                  		bra.w	LoadPLC		; load boss patterns
00007264                            ; ===========================================================================
00007264                            
00007264                            locret_715C:
00007264 4E75                       		rts	
00007266                            ; ===========================================================================
00007266                            
00007266                            Resize_SLZ3end:
00007266 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000726C 4E75                       		rts
0000726E 4E75                       		rts
00007270                            ; ===========================================================================
00007270                            ; ---------------------------------------------------------------------------
00007270                            ; Spring Yard Zone dynamic screen resizing
00007270                            ; ---------------------------------------------------------------------------
00007270                            
00007270                            Resize_SYZ:				; XREF: Resize_Index
00007270 7000                       		moveq	#0,d0
00007272 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007276 D040                       		add.w	d0,d0
00007278 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000727C 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007280                            ; ===========================================================================
00007280 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007282 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007284 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007286                            ; ===========================================================================
00007286                            
00007286                            Resize_SYZ1:
00007286 4E75                       		rts	
00007288                            ; ===========================================================================
00007288                            
00007288                            Resize_SYZ2:
00007288 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000728E 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007294 6500                       		bcs.s	locret_71A2
00007296 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
0000729C 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000072A2 6500                       		bcs.s	locret_71A2
000072A4 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000072AA                            
000072AA                            locret_71A2:
000072AA 4E75                       		rts	
000072AC                            ; ===========================================================================
000072AC                            
000072AC                            Resize_SYZ3:
000072AC 7000                       		moveq	#0,d0
000072AE 1038 F742                  		move.b	($FFFFF742).w,d0
000072B2 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000072B6 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000072BA                            ; ===========================================================================
000072BA 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000072BC 0000                       		dc.w Resize_SYZ3boss-off_71B2
000072BE 0000                       		dc.w Resize_SYZ3end-off_71B2
000072C0                            ; ===========================================================================
000072C0                            
000072C0                            Resize_SYZ3main:
000072C0 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000072C6 6500                       		bcs.s	locret_71CE
000072C8 6100 0000                  		bsr.w	SingleObjLoad
000072CC 6600                       		bne.s	locret_71CE
000072CE 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000072D2 5438 F742                  		addq.b	#2,($FFFFF742).w
000072D6                            
000072D6                            locret_71CE:
000072D6 4E75                       		rts	
000072D8                            ; ===========================================================================
000072D8                            
000072D8                            Resize_SYZ3boss:
000072D8 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000072DE 6500                       		bcs.s	locret_7200
000072E0 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000072E6 6100 0000                  		bsr.w	SingleObjLoad
000072EA 6600                       		bne.s	loc_71EC
000072EC 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000072F0 5438 F742                  		addq.b	#2,($FFFFF742).w
000072F4                            
000072F4                            loc_71EC:
000072F4 303C 008C                  		move.w	#$8C,d0
000072F8 6100 A09C                  		bsr.w	PlaySound	; play boss music
000072FC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007302 7011                       		moveq	#$11,d0
00007304 6000 A27A                  		bra.w	LoadPLC		; load boss patterns
00007308                            ; ===========================================================================
00007308                            
00007308                            locret_7200:
00007308 4E75                       		rts	
0000730A                            ; ===========================================================================
0000730A                            
0000730A                            Resize_SYZ3end:
0000730A 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007310 4E75                       		rts	
00007312                            ; ===========================================================================
00007312                            ; ---------------------------------------------------------------------------
00007312                            ; Scrap	Brain Zone dynamic screen resizing
00007312                            ; ---------------------------------------------------------------------------
00007312                            
00007312                            Resize_SBZ:				; XREF: Resize_Index
00007312 7000                       		moveq	#0,d0
00007314 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007318 D040                       		add.w	d0,d0
0000731A 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
0000731E 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007322                            ; ===========================================================================
00007322 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007324 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007326 0000                       		dc.w Resize_FZ-Resize_SBZx
00007328                            ; ===========================================================================
00007328                            
00007328                            Resize_SBZ1:
00007328 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000732E 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007334 6500                       		bcs.s	locret_7242
00007336 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000733C 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007342 6500                       		bcs.s	locret_7242
00007344 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000734A                            
0000734A                            locret_7242:
0000734A 4E75                       		rts	
0000734C                            ; ===========================================================================
0000734C                            
0000734C                            Resize_SBZ2:
0000734C 7000                       		moveq	#0,d0
0000734E 1038 F742                  		move.b	($FFFFF742).w,d0
00007352 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007356 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000735A                            ; ===========================================================================
0000735A 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
0000735C 0000                       		dc.w Resize_SBZ2boss-off_7252
0000735E 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007360 0000                       		dc.w Resize_SBZ2end-off_7252
00007362                            ; ===========================================================================
00007362                            
00007362                            Resize_SBZ2main:
00007362 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007368 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
0000736E 6500                       		bcs.s	locret_727A
00007370 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007376 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
0000737C 6500                       		bcs.s	locret_727A
0000737E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007382                            
00007382                            locret_727A:
00007382 4E75                       		rts	
00007384                            ; ===========================================================================
00007384                            
00007384                            Resize_SBZ2boss:
00007384 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
0000738A 6500                       		bcs.s	locret_7298
0000738C 6100 0000                  		bsr.w	SingleObjLoad
00007390 6600                       		bne.s	locret_7298
00007392 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007396 5438 F742                  		addq.b	#2,($FFFFF742).w
0000739A 701E                       		moveq	#$1E,d0
0000739C 6000 A1E2                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000073A0                            ; ===========================================================================
000073A0                            
000073A0                            locret_7298:
000073A0 4E75                       		rts	
000073A2                            ; ===========================================================================
000073A2                            
000073A2                            Resize_SBZ2boss2:
000073A2 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000073A8 6500                       		bcs.s	loc_72B6
000073AA 6100 0000                  		bsr.w	SingleObjLoad
000073AE 6600                       		bne.s	loc_72B0
000073B0 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000073B4 5438 F742                  		addq.b	#2,($FFFFF742).w
000073B8                            
000073B8                            loc_72B0:
000073B8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000073BE                            
000073BE                            loc_72B6:
000073BE 6000                       		bra.s	loc_72C2
000073C0                            ; ===========================================================================
000073C0                            
000073C0                            Resize_SBZ2end:
000073C0 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000073C6 6500                       		bcs.s	loc_72C2
000073C8 4E75                       		rts	
000073CA                            ; ===========================================================================
000073CA                            
000073CA                            loc_72C2:
000073CA 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000073D0 4E75                       		rts	
000073D2                            ; ===========================================================================
000073D2                            
000073D2                            Resize_FZ:
000073D2 7000                       		moveq	#0,d0
000073D4 1038 F742                  		move.b	($FFFFF742).w,d0
000073D8 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000073DC 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000073E0                            ; ===========================================================================
000073E0 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000073E4 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
000073E8 0000                       		dc.w Resize_FZend2-off_72D8
000073EA                            ; ===========================================================================
000073EA                            
000073EA                            Resize_FZmain:
000073EA 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
000073F0 6500                       		bcs.s	loc_72F4
000073F2 5438 F742                  		addq.b	#2,($FFFFF742).w
000073F6 701F                       		moveq	#$1F,d0
000073F8 6100 A186                  		bsr.w	LoadPLC		; load FZ boss patterns
000073FC                            
000073FC                            loc_72F4:
000073FC 60CC                       		bra.s	loc_72C2
000073FE                            ; ===========================================================================
000073FE                            
000073FE                            Resize_FZboss:
000073FE 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007404 6500                       		bcs.s	loc_7312
00007406 6100 0000                  		bsr.w	SingleObjLoad
0000740A 6600                       		bne.s	loc_7312
0000740C 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007410 5438 F742                  		addq.b	#2,($FFFFF742).w
00007414 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000741A                            
0000741A                            loc_7312:
0000741A 60AE                       		bra.s	loc_72C2
0000741C                            ; ===========================================================================
0000741C                            
0000741C                            Resize_FZend:
0000741C 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007422 6500                       		bcs.s	loc_7320
00007424 5438 F742                  		addq.b	#2,($FFFFF742).w
00007428                            
00007428                            loc_7320:
00007428 60A0                       		bra.s	loc_72C2
0000742A                            ; ===========================================================================
0000742A                            
0000742A                            locret_7322:
0000742A 4E75                       		rts	
0000742C                            ; ===========================================================================
0000742C                            
0000742C                            Resize_FZend2:
0000742C 609C                       		bra.s	loc_72C2
0000742E                            ; ===========================================================================
0000742E                            ; ---------------------------------------------------------------------------
0000742E                            ; Ending sequence dynamic screen resizing (empty)
0000742E                            ; ---------------------------------------------------------------------------
0000742E                            
0000742E                            Resize_Ending:				; XREF: Resize_Index
0000742E 4E75                       		rts	
00007430                            ; ===========================================================================
00007430                            ; ---------------------------------------------------------------------------
00007430                            ; Object 11 - GHZ bridge
00007430                            ; ---------------------------------------------------------------------------
00007430                            
00007430                            Obj11:					; XREF: Obj_Index
00007430 7000                       		moveq	#0,d0
00007432 1028 0024                  		move.b	$24(a0),d0
00007436 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
0000743A 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
0000743E                            ; ===========================================================================
0000743E 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007442 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007446 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
0000744A                            ; ===========================================================================
0000744A                            
0000744A                            Obj11_Main:				; XREF: Obj11_Index
0000744A 5428 0024                  		addq.b	#2,$24(a0)
0000744E 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007456 317C 438E 0002             		move.w	#$438E,2(a0)
0000745C 117C 0004 0001             		move.b	#4,1(a0)
00007462 117C 0003 0018             		move.b	#3,$18(a0)
00007468 117C 0080 0019             		move.b	#$80,$19(a0)
0000746E 3428 000C                  		move.w	$C(a0),d2
00007472 3628 0008                  		move.w	8(a0),d3
00007476 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007478 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
0000747C 7200                       		moveq	#0,d1
0000747E 1212                       		move.b	(a2),d1		; copy a2 to d1
00007480 14FC 0000                  		move.b	#0,(a2)+
00007484 3001                       		move.w	d1,d0
00007486 E248                       		lsr.w	#1,d0
00007488 E948                       		lsl.w	#4,d0
0000748A 9640                       		sub.w	d0,d3
0000748C 5501                       		subq.b	#2,d1
0000748E 6500                       		bcs.s	Obj11_Action
00007490                            
00007490                            Obj11_MakeBdg:
00007490 6100 0000                  		bsr.w	SingleObjLoad
00007494 6600                       		bne.s	Obj11_Action
00007496 5228 0028                  		addq.b	#1,$28(a0)
0000749A B668 0008                  		cmp.w	8(a0),d3
0000749E 6600                       		bne.s	loc_73B8
000074A0 0643 0010                  		addi.w	#$10,d3
000074A4 3142 000C                  		move.w	d2,$C(a0)
000074A8 3142 003C                  		move.w	d2,$3C(a0)
000074AC 3A08                       		move.w	a0,d5
000074AE 0445 D000                  		subi.w	#-$3000,d5
000074B2 EC4D                       		lsr.w	#6,d5
000074B4 0245 007F                  		andi.w	#$7F,d5
000074B8 14C5                       		move.b	d5,(a2)+
000074BA 5228 0028                  		addq.b	#1,$28(a0)
000074BE                            
000074BE                            loc_73B8:				; XREF: ROM:00007398j
000074BE 3A09                       		move.w	a1,d5
000074C0 0445 D000                  		subi.w	#-$3000,d5
000074C4 EC4D                       		lsr.w	#6,d5
000074C6 0245 007F                  		andi.w	#$7F,d5
000074CA 14C5                       		move.b	d5,(a2)+
000074CC 137C 000A 0024             		move.b	#$A,$24(a1)
000074D2 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000074D4 3342 000C                  		move.w	d2,$C(a1)
000074D8 3342 003C                  		move.w	d2,$3C(a1)
000074DC 3343 0008                  		move.w	d3,8(a1)
000074E0 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
000074E8 337C 438E 0002             		move.w	#$438E,2(a1)
000074EE 137C 0004 0001             		move.b	#4,1(a1)
000074F4 137C 0003 0018             		move.b	#3,$18(a1)
000074FA 137C 0008 0019             		move.b	#8,$19(a1)
00007500 0643 0010                  		addi.w	#$10,d3
00007504 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007508                            
00007508                            Obj11_Action:				; XREF: Obj11_Index
00007508 6100                       		bsr.s	Obj11_Solid
0000750A 4A28 003E                  		tst.b	$3E(a0)
0000750E 6700                       		beq.s	Obj11_Display
00007510 5928 003E                  		subq.b	#4,$3E(a0)
00007514 6100 0000                  		bsr.w	Obj11_Bend
00007518                            
00007518                            Obj11_Display:
00007518 6100 0000                  		bsr.w	DisplaySprite
0000751C 6000 0000                  		bra.w	Obj11_ChkDel
00007520                            
00007520                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007520                            
00007520                            
00007520                            Obj11_Solid:				; XREF: Obj11_Action
00007520 7200                       		moveq	#0,d1
00007522 1228 0028                  		move.b	$28(a0),d1
00007526 E749                       		lsl.w	#3,d1
00007528 3401                       		move.w	d1,d2
0000752A 5041                       		addq.w	#8,d1
0000752C D442                       		add.w	d2,d2
0000752E 43F8 D000                  		lea	($FFFFD000).w,a1
00007532 4A69 0012                  		tst.w	$12(a1)
00007536 6B00 0000                  		bmi.w	locret_751E
0000753A 3029 0008                  		move.w	8(a1),d0
0000753E 9068 0008                  		sub.w	8(a0),d0
00007542 D041                       		add.w	d1,d0
00007544 6B00 0000                  		bmi.w	locret_751E
00007548 B042                       		cmp.w	d2,d0
0000754A 6400 0000                  		bcc.w	locret_751E
0000754E 6000                       		bra.s	Platform2
00007550                            ; End of function Obj11_Solid
00007550                            
00007550                            ; ---------------------------------------------------------------------------
00007550                            ; Platform subroutine
00007550                            ; ---------------------------------------------------------------------------
00007550                            
00007550                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007550                            
00007550                            
00007550                            PlatformObject:
00007550 43F8 D000                  		lea	($FFFFD000).w,a1
00007554 4A69 0012                  		tst.w	$12(a1)
00007558 6B00 0000                  		bmi.w	locret_751E
0000755C 3029 0008                  		move.w	8(a1),d0
00007560 9068 0008                  		sub.w	8(a0),d0
00007564 D041                       		add.w	d1,d0
00007566 6B00 0000                  		bmi.w	locret_751E
0000756A D241                       		add.w	d1,d1
0000756C B041                       		cmp.w	d1,d0
0000756E 6400 0000                  		bcc.w	locret_751E
00007572                            
00007572                            Platform2:
00007572 3028 000C                  		move.w	$C(a0),d0
00007576 5140                       		subq.w	#8,d0
00007578                            
00007578                            Platform3:
00007578 3429 000C                  		move.w	$C(a1),d2
0000757C 1229 0016                  		move.b	$16(a1),d1
00007580 4881                       		ext.w	d1
00007582 D242                       		add.w	d2,d1
00007584 5841                       		addq.w	#4,d1
00007586 9041                       		sub.w	d1,d0
00007588 6200 0000                  		bhi.w	locret_751E
0000758C 0C40 FFF0                  		cmpi.w	#-$10,d0
00007590 6500 0000                  		bcs.w	locret_751E
00007594 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007598 6B00 0000                  		bmi.w	locret_751E
0000759C 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000075A2 6400 0000                  		bcc.w	locret_751E
000075A6 D440                       		add.w	d0,d2
000075A8 5642                       		addq.w	#3,d2
000075AA 3342 000C                  		move.w	d2,$C(a1)
000075AE 5428 0024                  		addq.b	#2,$24(a0)
000075B2                            
000075B2                            loc_74AE:
000075B2 0829 0003 0022             		btst	#3,$22(a1)
000075B8 6700                       		beq.s	loc_74DC
000075BA 7000                       		moveq	#0,d0
000075BC 1029 003D                  		move.b	$3D(a1),d0
000075C0 ED48                       		lsl.w	#6,d0
000075C2 0680 00FF D000             		addi.l	#$FFD000,d0
000075C8 2440                       		movea.l	d0,a2
000075CA 08AA 0003 0022             		bclr	#3,$22(a2)
000075D0 422A 0025                  		clr.b	$25(a2)
000075D4 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
000075DA 6600                       		bne.s	loc_74DC
000075DC 552A 0024                  		subq.b	#2,$24(a2)
000075E0                            
000075E0                            loc_74DC:
000075E0 3008                       		move.w	a0,d0
000075E2 0440 D000                  		subi.w	#-$3000,d0
000075E6 EC48                       		lsr.w	#6,d0
000075E8 0240 007F                  		andi.w	#$7F,d0
000075EC 1340 003D                  		move.b	d0,$3D(a1)
000075F0 137C 0000 0026             		move.b	#0,$26(a1)
000075F6 337C 0000 0012             		move.w	#0,$12(a1)
000075FC 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007602 0829 0001 0022             		btst	#1,$22(a1)
00007608 6700                       		beq.s	loc_7512
0000760A 2F08                       		move.l	a0,-(sp)
0000760C 2049                       		movea.l	a1,a0
0000760E 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007614 205F                       		movea.l	(sp)+,a0
00007616                            
00007616                            loc_7512:
00007616 08E9 0003 0022             		bset	#3,$22(a1)
0000761C 08E8 0003 0022             		bset	#3,$22(a0)
00007622                            
00007622                            locret_751E:
00007622 4E75                       		rts	
00007624                            ; End of function PlatformObject
00007624                            
00007624                            ; ---------------------------------------------------------------------------
00007624                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007624                            ; ---------------------------------------------------------------------------
00007624                            
00007624                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007624                            
00007624                            
00007624                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007624 43F8 D000                  		lea	($FFFFD000).w,a1
00007628 4A69 0012                  		tst.w	$12(a1)
0000762C 6B00 FFF4                  		bmi.w	locret_751E
00007630 3029 0008                  		move.w	8(a1),d0
00007634 9068 0008                  		sub.w	8(a0),d0
00007638 D041                       		add.w	d1,d0
0000763A 6BE6                       		bmi.s	locret_751E
0000763C D241                       		add.w	d1,d1
0000763E B041                       		cmp.w	d1,d0
00007640 64E0                       		bcc.s	locret_751E
00007642 0828 0000 0001             		btst	#0,1(a0)
00007648 6700                       		beq.s	loc_754A
0000764A 4640                       		not.w	d0
0000764C D041                       		add.w	d1,d0
0000764E                            
0000764E                            loc_754A:
0000764E E248                       		lsr.w	#1,d0
00007650 7600                       		moveq	#0,d3
00007652 1632 0000                  		move.b	(a2,d0.w),d3
00007656 3028 000C                  		move.w	$C(a0),d0
0000765A 9043                       		sub.w	d3,d0
0000765C 6000 FF1A                  		bra.w	Platform3
00007660                            ; End of function SlopeObject
00007660                            
00007660                            
00007660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007660                            
00007660                            
00007660                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007660 43F8 D000                  		lea	($FFFFD000).w,a1
00007664 4A69 0012                  		tst.w	$12(a1)
00007668 6B00 FFB8                  		bmi.w	locret_751E
0000766C 3029 0008                  		move.w	8(a1),d0
00007670 9068 0008                  		sub.w	8(a0),d0
00007674 D041                       		add.w	d1,d0
00007676 6B00 FFAA                  		bmi.w	locret_751E
0000767A D241                       		add.w	d1,d1
0000767C B041                       		cmp.w	d1,d0
0000767E 6400 FFA2                  		bcc.w	locret_751E
00007682 3028 000C                  		move.w	$C(a0),d0
00007686 9043                       		sub.w	d3,d0
00007688 6000 FEEE                  		bra.w	Platform3
0000768C                            ; End of function Obj15_Solid
0000768C                            
0000768C                            ; ===========================================================================
0000768C                            
0000768C                            Obj11_Action2:				; XREF: Obj11_Index
0000768C 6100                       		bsr.s	Obj11_WalkOff
0000768E 6100 0000                  		bsr.w	DisplaySprite
00007692 6000 0000                  		bra.w	Obj11_ChkDel
00007696                            
00007696                            ; ---------------------------------------------------------------------------
00007696                            ; Subroutine allowing Sonic to walk off a bridge
00007696                            ; ---------------------------------------------------------------------------
00007696                            
00007696                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007696                            
00007696                            
00007696                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007696 7200                       		moveq	#0,d1
00007698 1228 0028                  		move.b	$28(a0),d1
0000769C E749                       		lsl.w	#3,d1
0000769E 3401                       		move.w	d1,d2
000076A0 5041                       		addq.w	#8,d1
000076A2 6100                       		bsr.s	ExitPlatform2
000076A4 6400                       		bcc.s	locret_75BE
000076A6 E848                       		lsr.w	#4,d0
000076A8 1140 003F                  		move.b	d0,$3F(a0)
000076AC 1028 003E                  		move.b	$3E(a0),d0
000076B0 0C00 0040                  		cmpi.b	#$40,d0
000076B4 6700                       		beq.s	loc_75B6
000076B6 5828 003E                  		addq.b	#4,$3E(a0)
000076BA                            
000076BA                            loc_75B6:
000076BA 6100 0000                  		bsr.w	Obj11_Bend
000076BE 6100 0000                  		bsr.w	Obj11_MoveSonic
000076C2                            
000076C2                            locret_75BE:
000076C2 4E75                       		rts	
000076C4                            ; End of function Obj11_WalkOff
000076C4                            
000076C4                            ; ---------------------------------------------------------------------------
000076C4                            ; Subroutine allowing Sonic to walk or jump off	a platform
000076C4                            ; ---------------------------------------------------------------------------
000076C4                            
000076C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076C4                            
000076C4                            
000076C4                            ExitPlatform:
000076C4 3401                       		move.w	d1,d2
000076C6                            
000076C6                            ExitPlatform2:
000076C6 D442                       		add.w	d2,d2
000076C8 43F8 D000                  		lea	($FFFFD000).w,a1
000076CC 0829 0001 0022             		btst	#1,$22(a1)
000076D2 6600                       		bne.s	loc_75E0
000076D4 3029 0008                  		move.w	8(a1),d0
000076D8 9068 0008                  		sub.w	8(a0),d0
000076DC D041                       		add.w	d1,d0
000076DE 6B00                       		bmi.s	loc_75E0
000076E0 B042                       		cmp.w	d2,d0
000076E2 6500                       		bcs.s	locret_75F2
000076E4                            
000076E4                            loc_75E0:
000076E4 08A9 0003 0022             		bclr	#3,$22(a1)
000076EA 117C 0002 0024             		move.b	#2,$24(a0)
000076F0 08A8 0003 0022             		bclr	#3,$22(a0)
000076F6                            
000076F6                            locret_75F2:
000076F6 4E75                       		rts	
000076F8                            ; End of function ExitPlatform
000076F8                            
000076F8                            
000076F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076F8                            
000076F8                            
000076F8                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
000076F8 7000                       		moveq	#0,d0
000076FA 1028 003F                  		move.b	$3F(a0),d0
000076FE 1030 0029                  		move.b	$29(a0,d0.w),d0
00007702 ED48                       		lsl.w	#6,d0
00007704 0680 00FF D000             		addi.l	#$FFD000,d0
0000770A 2440                       		movea.l	d0,a2
0000770C 43F8 D000                  		lea	($FFFFD000).w,a1
00007710 302A 000C                  		move.w	$C(a2),d0
00007714 5140                       		subq.w	#8,d0
00007716 7200                       		moveq	#0,d1
00007718 1229 0016                  		move.b	$16(a1),d1
0000771C 9041                       		sub.w	d1,d0
0000771E 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007722 4E75                       		rts	
00007724                            ; End of function Obj11_MoveSonic
00007724                            
00007724                            
00007724                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007724                            
00007724                            
00007724                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007724 1028 003E                  		move.b	$3E(a0),d0
00007728 6100 B2B0                  		bsr.w	CalcSine
0000772C 3800                       		move.w	d0,d4
0000772E 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007734 7000                       		moveq	#0,d0
00007736 1028 0028                  		move.b	$28(a0),d0
0000773A E948                       		lsl.w	#4,d0
0000773C 7600                       		moveq	#0,d3
0000773E 1628 003F                  		move.b	$3F(a0),d3
00007742 3403                       		move.w	d3,d2
00007744 D640                       		add.w	d0,d3
00007746 7A00                       		moveq	#0,d5
00007748 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
0000774E 1A35 3000                  		move.b	(a5,d3.w),d5
00007752 0243 000F                  		andi.w	#$F,d3
00007756 E94B                       		lsl.w	#4,d3
00007758 47F4 3000                  		lea	(a4,d3.w),a3
0000775C 45E8 0029                  		lea	$29(a0),a2
00007760                            
00007760                            loc_765C:
00007760 7000                       		moveq	#0,d0
00007762 101A                       		move.b	(a2)+,d0
00007764 ED48                       		lsl.w	#6,d0
00007766 0680 00FF D000             		addi.l	#$FFD000,d0
0000776C 2240                       		movea.l	d0,a1
0000776E 7000                       		moveq	#0,d0
00007770 101B                       		move.b	(a3)+,d0
00007772 5240                       		addq.w	#1,d0
00007774 C0C5                       		mulu.w	d5,d0
00007776 C0C4                       		mulu.w	d4,d0
00007778 4840                       		swap	d0
0000777A D069 003C                  		add.w	$3C(a1),d0
0000777E 3340 000C                  		move.w	d0,$C(a1)
00007782 51CA FFDC                  		dbf	d2,loc_765C
00007786 7000                       		moveq	#0,d0
00007788 1028 0028                  		move.b	$28(a0),d0
0000778C 7600                       		moveq	#0,d3
0000778E 1628 003F                  		move.b	$3F(a0),d3
00007792 5203                       		addq.b	#1,d3
00007794 9600                       		sub.b	d0,d3
00007796 4403                       		neg.b	d3
00007798 6B00                       		bmi.s	locret_76CA
0000779A 3403                       		move.w	d3,d2
0000779C E94B                       		lsl.w	#4,d3
0000779E 47F4 3000                  		lea	(a4,d3.w),a3
000077A2 D6C2                       		adda.w	d2,a3
000077A4 5342                       		subq.w	#1,d2
000077A6 6500                       		bcs.s	locret_76CA
000077A8                            
000077A8                            loc_76A4:
000077A8 7000                       		moveq	#0,d0
000077AA 101A                       		move.b	(a2)+,d0
000077AC ED48                       		lsl.w	#6,d0
000077AE 0680 00FF D000             		addi.l	#$FFD000,d0
000077B4 2240                       		movea.l	d0,a1
000077B6 7000                       		moveq	#0,d0
000077B8 1023                       		move.b	-(a3),d0
000077BA 5240                       		addq.w	#1,d0
000077BC C0C5                       		mulu.w	d5,d0
000077BE C0C4                       		mulu.w	d4,d0
000077C0 4840                       		swap	d0
000077C2 D069 003C                  		add.w	$3C(a1),d0
000077C6 3340 000C                  		move.w	d0,$C(a1)
000077CA 51CA FFDC                  		dbf	d2,loc_76A4
000077CE                            
000077CE                            locret_76CA:
000077CE 4E75                       		rts	
000077D0                            ; End of function Obj11_Bend
000077D0                            
000077D0                            ; ===========================================================================
000077D0                            ; ---------------------------------------------------------------------------
000077D0                            ; GHZ bridge-bending data
000077D0                            ; (Defines how the bridge bends	when Sonic walks across	it)
000077D0                            ; ---------------------------------------------------------------------------
000077D0                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000078E0                            		even
000078E0                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000079E0                            		even
000079E0                            
000079E0                            ; ===========================================================================
000079E0                            
000079E0                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000079E0 3028 0008                  		move.w	8(a0),d0
000079E4 0240 FF80                  		andi.w	#$FF80,d0
000079E8 3238 F700                  		move.w	($FFFFF700).w,d1
000079EC 0441 0080                  		subi.w	#$80,d1
000079F0 0241 FF80                  		andi.w	#$FF80,d1
000079F4 9041                       		sub.w	d1,d0
000079F6 0C40 0280                  		cmpi.w	#$280,d0
000079FA 6200 0000                  		bhi.w	Obj11_DelAll
000079FE 4E75                       		rts	
00007A00                            ; ===========================================================================
00007A00                            
00007A00                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007A00 7400                       		moveq	#0,d2
00007A02 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007A06 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007A08 5302                       		subq.b	#1,d2		; subtract 1
00007A0A 6500                       		bcs.s	Obj11_Delete
00007A0C                            
00007A0C                            Obj11_DelLoop:
00007A0C 7000                       		moveq	#0,d0
00007A0E 101A                       		move.b	(a2)+,d0
00007A10 ED48                       		lsl.w	#6,d0
00007A12 0680 00FF D000             		addi.l	#$FFD000,d0
00007A18 2240                       		movea.l	d0,a1
00007A1A B048                       		cmp.w	a0,d0
00007A1C 6700                       		beq.s	loc_791E
00007A1E 6100 0000                  		bsr.w	DeleteObject2
00007A22                            
00007A22                            loc_791E:
00007A22 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007A26                            
00007A26                            Obj11_Delete:
00007A26 6100 0000                  		bsr.w	DeleteObject
00007A2A 4E75                       		rts	
00007A2C                            ; ===========================================================================
00007A2C                            
00007A2C                            Obj11_Delete2:				; XREF: Obj11_Index
00007A2C 6100 0000                  		bsr.w	DeleteObject
00007A30 4E75                       		rts	
00007A32                            ; ===========================================================================
00007A32                            
00007A32                            Obj11_Display2:				; XREF: Obj11_Index
00007A32 6100 0000                  		bsr.w	DisplaySprite
00007A36 4E75                       		rts	
00007A38                            ; ===========================================================================
00007A38                            ; ---------------------------------------------------------------------------
00007A38                            ; Sprite mappings - GHZ	bridge
00007A38                            ; ---------------------------------------------------------------------------
00007A38                            Map_obj11:
00007A38                            	include "_maps\obj11.asm"
00007A38                            ; ---------------------------------------------------------------------------
00007A38                            ; Sprite mappings - GHZ	bridge
00007A38                            ; ---------------------------------------------------------------------------
00007A38 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007A3C 0000                       		dc.w byte_794B-Map_obj11
00007A3E 01                         byte_793A:	dc.b 1
00007A3F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007A44 02                         byte_7940:	dc.b 2
00007A45 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007A4A 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007A4F 01                         byte_794B:	dc.b 1
00007A50 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007A56 00                         		even
00007A56 00                         		even
00007A56                            
00007A56                            ; ===========================================================================
00007A56                            ; ---------------------------------------------------------------------------
00007A56                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007A56                            ;	    - spiked ball on a chain (SBZ)
00007A56                            ; ---------------------------------------------------------------------------
00007A56                            
00007A56                            Obj15:					; XREF: Obj_Index
00007A56 7000                       		moveq	#0,d0
00007A58 1028 0024                  		move.b	$24(a0),d0
00007A5C 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007A60 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007A64                            ; ===========================================================================
00007A64 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007A68 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007A6C 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007A70 0000                       		dc.w Obj15_Action-Obj15_Index
00007A72                            ; ===========================================================================
00007A72                            
00007A72                            Obj15_Main:				; XREF: Obj15_Index
00007A72 5428 0024                  		addq.b	#2,$24(a0)
00007A76 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007A7E 317C 4380 0002             		move.w	#$4380,2(a0)
00007A84 117C 0004 0001             		move.b	#4,1(a0)
00007A8A 117C 0003 0018             		move.b	#3,$18(a0)
00007A90 117C 0018 0019             		move.b	#$18,$19(a0)
00007A96 117C 0008 0016             		move.b	#8,$16(a0)
00007A9C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007AA2 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007AA8 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007AAE 6600                       		bne.s	Obj15_NotSLZ
00007AB0 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007AB8 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007ABE 117C 0020 0019             		move.b	#$20,$19(a0)
00007AC4 117C 0010 0016             		move.b	#$10,$16(a0)
00007ACA 117C 0099 0020             		move.b	#$99,$20(a0)
00007AD0                            
00007AD0                            Obj15_NotSLZ:
00007AD0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007AD6 6600                       		bne.s	Obj15_SetLength
00007AD8 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007AE0 317C 0391 0002             		move.w	#$391,2(a0)
00007AE6 117C 0018 0019             		move.b	#$18,$19(a0)
00007AEC 117C 0018 0016             		move.b	#$18,$16(a0)
00007AF2 117C 0086 0020             		move.b	#$86,$20(a0)
00007AF8 117C 000C 0024             		move.b	#$C,$24(a0)
00007AFE                            
00007AFE                            Obj15_SetLength:
00007AFE 1810                       		move.b	0(a0),d4
00007B00 7200                       		moveq	#0,d1
00007B02 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007B06 1212                       		move.b	(a2),d1		; move a2 to d1
00007B08 3F01                       		move.w	d1,-(sp)
00007B0A 0241 000F                  		andi.w	#$F,d1
00007B0E 14FC 0000                  		move.b	#0,(a2)+
00007B12 3601                       		move.w	d1,d3
00007B14 E94B                       		lsl.w	#4,d3
00007B16 5003                       		addq.b	#8,d3
00007B18 1143 003C                  		move.b	d3,$3C(a0)
00007B1C 5103                       		subq.b	#8,d3
00007B1E 4A28 001A                  		tst.b	$1A(a0)
00007B22 6700                       		beq.s	Obj15_MakeChain
00007B24 5003                       		addq.b	#8,d3
00007B26 5341                       		subq.w	#1,d1
00007B28                            
00007B28                            Obj15_MakeChain:
00007B28 6100 0000                  		bsr.w	SingleObjLoad
00007B2C 6600                       		bne.s	loc_7A92
00007B2E 5228 0028                  		addq.b	#1,$28(a0)
00007B32 3A09                       		move.w	a1,d5
00007B34 0445 D000                  		subi.w	#-$3000,d5
00007B38 EC4D                       		lsr.w	#6,d5
00007B3A 0245 007F                  		andi.w	#$7F,d5
00007B3E 14C5                       		move.b	d5,(a2)+
00007B40 137C 000A 0024             		move.b	#$A,$24(a1)
00007B46 1284                       		move.b	d4,0(a1)	; load swinging	object
00007B48 2368 0004 0004             		move.l	4(a0),4(a1)
00007B4E 3368 0002 0002             		move.w	2(a0),2(a1)
00007B54 08A9 0006 0002             		bclr	#6,2(a1)
00007B5A 137C 0004 0001             		move.b	#4,1(a1)
00007B60 137C 0004 0018             		move.b	#4,$18(a1)
00007B66 137C 0008 0019             		move.b	#8,$19(a1)
00007B6C 137C 0001 001A             		move.b	#1,$1A(a1)
00007B72 1343 003C                  		move.b	d3,$3C(a1)
00007B76 0403 0010                  		subi.b	#$10,d3
00007B7A 6400                       		bcc.s	loc_7A8E
00007B7C 137C 0002 001A             		move.b	#2,$1A(a1)
00007B82 137C 0003 0018             		move.b	#3,$18(a1)
00007B88 08E9 0006 0002             		bset	#6,2(a1)
00007B8E                            
00007B8E                            loc_7A8E:
00007B8E 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007B92                            
00007B92                            loc_7A92:
00007B92 3A08                       		move.w	a0,d5
00007B94 0445 D000                  		subi.w	#-$3000,d5
00007B98 EC4D                       		lsr.w	#6,d5
00007B9A 0245 007F                  		andi.w	#$7F,d5
00007B9E 14C5                       		move.b	d5,(a2)+
00007BA0 317C 4080 0026             		move.w	#$4080,$26(a0)
00007BA6 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007BAC 321F                       		move.w	(sp)+,d1
00007BAE 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007BB2 6700                       		beq.s	loc_7AD4	; if not, branch
00007BB4 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007BBC 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007BC2 117C 0001 001A             		move.b	#1,$1A(a0)
00007BC8 117C 0002 0018             		move.b	#2,$18(a0)
00007BCE 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007BD4                            
00007BD4                            loc_7AD4:
00007BD4 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007BDA 6700                       		beq.s	Obj15_Action	; if yes, branch
00007BDC                            
00007BDC                            Obj15_SetSolid:				; XREF: Obj15_Index
00007BDC 7200                       		moveq	#0,d1
00007BDE 1228 0019                  		move.b	$19(a0),d1
00007BE2 7600                       		moveq	#0,d3
00007BE4 1628 0016                  		move.b	$16(a0),d3
00007BE8 6100 FA76                  		bsr.w	Obj15_Solid
00007BEC                            
00007BEC                            Obj15_Action:				; XREF: Obj15_Index
00007BEC 6100 0000                  		bsr.w	Obj15_Move
00007BF0 6100 0000                  		bsr.w	DisplaySprite
00007BF4 6000 0000                  		bra.w	Obj15_ChkDel
00007BF8                            ; ===========================================================================
00007BF8                            
00007BF8                            Obj15_Action2:				; XREF: Obj15_Index
00007BF8 7200                       		moveq	#0,d1
00007BFA 1228 0019                  		move.b	$19(a0),d1
00007BFE 6100 FAC4                  		bsr.w	ExitPlatform
00007C02 3F28 0008                  		move.w	8(a0),-(sp)
00007C06 6100 0000                  		bsr.w	Obj15_Move
00007C0A 341F                       		move.w	(sp)+,d2
00007C0C 7600                       		moveq	#0,d3
00007C0E 1628 0016                  		move.b	$16(a0),d3
00007C12 5203                       		addq.b	#1,d3
00007C14 6100 0000                  		bsr.w	MvSonicOnPtfm
00007C18 6100 0000                  		bsr.w	DisplaySprite
00007C1C 6000 0000                  		bra.w	Obj15_ChkDel
00007C20                            
00007C20 4E75                       		rts
00007C22                            
00007C22                            ; ---------------------------------------------------------------------------
00007C22                            ; Subroutine to	change Sonic's position with a platform
00007C22                            ; ---------------------------------------------------------------------------
00007C22                            
00007C22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C22                            
00007C22                            
00007C22                            MvSonicOnPtfm:
00007C22 43F8 D000                  		lea	($FFFFD000).w,a1
00007C26 3028 000C                  		move.w	$C(a0),d0
00007C2A 9043                       		sub.w	d3,d0
00007C2C 6000                       		bra.s	MvSonic2
00007C2E                            ; End of function MvSonicOnPtfm
00007C2E                            
00007C2E                            ; ---------------------------------------------------------------------------
00007C2E                            ; Subroutine to	change Sonic's position with a platform
00007C2E                            ; ---------------------------------------------------------------------------
00007C2E                            
00007C2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C2E                            
00007C2E                            
00007C2E                            MvSonicOnPtfm2:
00007C2E 43F8 D000                  		lea	($FFFFD000).w,a1
00007C32 3028 000C                  		move.w	$C(a0),d0
00007C36 0440 0009                  		subi.w	#9,d0
00007C3A                            
00007C3A                            MvSonic2:
00007C3A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007C3E 6B00                       		bmi.s	locret_7B62
00007C40 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00007C46 6400                       		bcc.s	locret_7B62
00007C48 4A78 FE08                  		tst.w	($FFFFFE08).w
00007C4C 6600                       		bne.s	locret_7B62
00007C4E 7200                       		moveq	#0,d1
00007C50 1229 0016                  		move.b	$16(a1),d1
00007C54 9041                       		sub.w	d1,d0
00007C56 3340 000C                  		move.w	d0,$C(a1)
00007C5A 9468 0008                  		sub.w	8(a0),d2
00007C5E 9569 0008                  		sub.w	d2,8(a1)
00007C62                            
00007C62                            locret_7B62:
00007C62 4E75                       		rts	
00007C64                            ; End of function MvSonicOnPtfm2
00007C64                            
00007C64                            
00007C64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C64                            
00007C64                            
00007C64                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00007C64 1038 FE78                  		move.b	($FFFFFE78).w,d0
00007C68 323C 0080                  		move.w	#$80,d1
00007C6C 0828 0000 0022             		btst	#0,$22(a0)
00007C72 6700                       		beq.s	loc_7B78
00007C74 4440                       		neg.w	d0
00007C76 D041                       		add.w	d1,d0
00007C78                            
00007C78                            loc_7B78:
00007C78 6000                       		bra.s	Obj15_Move2
00007C7A                            ; End of function Obj15_Move
00007C7A                            
00007C7A                            
00007C7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C7A                            
00007C7A                            
00007C7A                            Obj48_Move:				; XREF: Obj48_Display2
00007C7A 4A28 003D                  		tst.b	$3D(a0)
00007C7E 6600                       		bne.s	loc_7B9C
00007C80 3028 003E                  		move.w	$3E(a0),d0
00007C84 5040                       		addq.w	#8,d0
00007C86 3140 003E                  		move.w	d0,$3E(a0)
00007C8A D168 0026                  		add.w	d0,$26(a0)
00007C8E 0C40 0200                  		cmpi.w	#$200,d0
00007C92 6600                       		bne.s	loc_7BB6
00007C94 117C 0001 003D             		move.b	#1,$3D(a0)
00007C9A 6000                       		bra.s	loc_7BB6
00007C9C                            ; ===========================================================================
00007C9C                            
00007C9C                            loc_7B9C:
00007C9C 3028 003E                  		move.w	$3E(a0),d0
00007CA0 5140                       		subq.w	#8,d0
00007CA2 3140 003E                  		move.w	d0,$3E(a0)
00007CA6 D168 0026                  		add.w	d0,$26(a0)
00007CAA 0C40 FE00                  		cmpi.w	#-$200,d0
00007CAE 6600                       		bne.s	loc_7BB6
00007CB0 117C 0000 003D             		move.b	#0,$3D(a0)
00007CB6                            
00007CB6                            loc_7BB6:
00007CB6 1028 0026                  		move.b	$26(a0),d0
00007CBA                            ; End of function Obj48_Move
00007CBA                            
00007CBA                            
00007CBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CBA                            
00007CBA                            
00007CBA                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00007CBA 6100 AD1E                  		bsr.w	CalcSine
00007CBE 3428 0038                  		move.w	$38(a0),d2
00007CC2 3628 003A                  		move.w	$3A(a0),d3
00007CC6 45E8 0028                  		lea	$28(a0),a2
00007CCA 7C00                       		moveq	#0,d6
00007CCC 1C1A                       		move.b	(a2)+,d6
00007CCE                            
00007CCE                            loc_7BCE:
00007CCE 7800                       		moveq	#0,d4
00007CD0 181A                       		move.b	(a2)+,d4
00007CD2 ED4C                       		lsl.w	#6,d4
00007CD4 0684 00FF D000             		addi.l	#$FFD000,d4
00007CDA 2244                       		movea.l	d4,a1
00007CDC 7800                       		moveq	#0,d4
00007CDE 1829 003C                  		move.b	$3C(a1),d4
00007CE2 2A04                       		move.l	d4,d5
00007CE4 C9C0                       		muls.w	d0,d4
00007CE6 E084                       		asr.l	#8,d4
00007CE8 CBC1                       		muls.w	d1,d5
00007CEA E085                       		asr.l	#8,d5
00007CEC D842                       		add.w	d2,d4
00007CEE DA43                       		add.w	d3,d5
00007CF0 3344 000C                  		move.w	d4,$C(a1)
00007CF4 3345 0008                  		move.w	d5,8(a1)
00007CF8 51CE FFD4                  		dbf	d6,loc_7BCE
00007CFC 4E75                       		rts	
00007CFE                            ; End of function Obj15_Move2
00007CFE                            
00007CFE                            ; ===========================================================================
00007CFE                            
00007CFE                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00007CFE 3028 003A                  		move.w	$3A(a0),d0
00007D02 0240 FF80                  		andi.w	#$FF80,d0
00007D06 3238 F700                  		move.w	($FFFFF700).w,d1
00007D0A 0441 0080                  		subi.w	#$80,d1
00007D0E 0241 FF80                  		andi.w	#$FF80,d1
00007D12 9041                       		sub.w	d1,d0
00007D14 0C40 0280                  		cmpi.w	#$280,d0
00007D18 6200 0000                  		bhi.w	Obj15_DelAll
00007D1C 4E75                       		rts	
00007D1E                            ; ===========================================================================
00007D1E                            
00007D1E                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00007D1E 7400                       		moveq	#0,d2
00007D20 45E8 0028                  		lea	$28(a0),a2
00007D24 141A                       		move.b	(a2)+,d2
00007D26                            
00007D26                            Obj15_DelLoop:
00007D26 7000                       		moveq	#0,d0
00007D28 101A                       		move.b	(a2)+,d0
00007D2A ED48                       		lsl.w	#6,d0
00007D2C 0680 00FF D000             		addi.l	#$FFD000,d0
00007D32 2240                       		movea.l	d0,a1
00007D34 6100 0000                  		bsr.w	DeleteObject2
00007D38 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00007D3C 4E75                       		rts	
00007D3E                            ; ===========================================================================
00007D3E                            
00007D3E                            Obj15_Delete:				; XREF: Obj15_Index
00007D3E 6100 0000                  		bsr.w	DeleteObject
00007D42 4E75                       		rts	
00007D44                            ; ===========================================================================
00007D44                            
00007D44                            Obj15_Display:				; XREF: Obj15_Index
00007D44 6000 0000                  		bra.w	DisplaySprite
00007D48                            ; ===========================================================================
00007D48                            ; ---------------------------------------------------------------------------
00007D48                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007D48                            ; ---------------------------------------------------------------------------
00007D48                            Map_obj15:
00007D48                            	include "_maps\obj15ghz.asm"
00007D48                            ; ---------------------------------------------------------------------------
00007D48                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007D48                            ; ---------------------------------------------------------------------------
00007D48 0000                       		dc.w byte_7C4E-Map_obj15
00007D4A 0000                       		dc.w byte_7C59-Map_obj15
00007D4C 0000                       		dc.w byte_7C5F-Map_obj15
00007D4E 02                         byte_7C4E:	dc.b 2
00007D4F F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00007D54 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00007D59 01                         byte_7C59:	dc.b 1
00007D5A F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007D5F 01                         byte_7C5F:	dc.b 1
00007D60 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00007D66 00                         		even
00007D66 00                         		even
00007D66                            
00007D66                            ; ---------------------------------------------------------------------------
00007D66                            ; Sprite mappings - SLZ	swinging platforms
00007D66                            ; ---------------------------------------------------------------------------
00007D66                            Map_obj15a:
00007D66                            	include "_maps\obj15slz.asm"
00007D66                            ; ---------------------------------------------------------------------------
00007D66                            ; Sprite mappings - SLZ	swinging platforms
00007D66                            ; ---------------------------------------------------------------------------
00007D66 0000                       		dc.w byte_7C6C-Map_obj15a
00007D68 0000                       		dc.w byte_7C95-Map_obj15a
00007D6A 0000                       		dc.w byte_7C9B-Map_obj15a
00007D6C 08                         byte_7C6C:	dc.b 8
00007D6D F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00007D72 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00007D77 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00007D7C F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00007D81 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00007D86 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00007D8B 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00007D90 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00007D95 01                         byte_7C95:	dc.b 1
00007D96 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00007D9B 01                         byte_7C9B:	dc.b 1
00007D9C F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00007DA2 00                         		even
00007DA2 00                         		even
00007DA2                            
00007DA2                            ; ===========================================================================
00007DA2                            ; ---------------------------------------------------------------------------
00007DA2                            ; Object 17 - helix of spikes on a pole	(GHZ)
00007DA2                            ; ---------------------------------------------------------------------------
00007DA2                            
00007DA2                            Obj17:					; XREF: Obj_Index
00007DA2 7000                       		moveq	#0,d0
00007DA4 1028 0024                  		move.b	$24(a0),d0
00007DA8 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00007DAC 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00007DB0                            ; ===========================================================================
00007DB0 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00007DB2 0000                       		dc.w Obj17_Action-Obj17_Index
00007DB4 0000                       		dc.w Obj17_Action-Obj17_Index
00007DB6 0000                       		dc.w Obj17_Delete-Obj17_Index
00007DB8 0000                       		dc.w Obj17_Display-Obj17_Index
00007DBA                            ; ===========================================================================
00007DBA                            
00007DBA                            Obj17_Main:				; XREF: Obj17_Index
00007DBA 5428 0024                  		addq.b	#2,$24(a0)
00007DBE 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00007DC6 317C 4398 0002             		move.w	#$4398,2(a0)
00007DCC 117C 0007 0022             		move.b	#7,$22(a0)
00007DD2 117C 0004 0001             		move.b	#4,1(a0)
00007DD8 117C 0003 0018             		move.b	#3,$18(a0)
00007DDE 117C 0008 0019             		move.b	#8,$19(a0)
00007DE4 3428 000C                  		move.w	$C(a0),d2
00007DE8 3628 0008                  		move.w	8(a0),d3
00007DEC 1810                       		move.b	0(a0),d4
00007DEE 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00007DF2 7200                       		moveq	#0,d1
00007DF4 1212                       		move.b	(a2),d1		; move a2 to d1
00007DF6 14FC 0000                  		move.b	#0,(a2)+
00007DFA 3001                       		move.w	d1,d0
00007DFC E248                       		lsr.w	#1,d0
00007DFE E948                       		lsl.w	#4,d0
00007E00 9640                       		sub.w	d0,d3
00007E02 5501                       		subq.b	#2,d1
00007E04 6500                       		bcs.s	Obj17_Action
00007E06 7C00                       		moveq	#0,d6
00007E08                            
00007E08                            Obj17_MakeHelix:
00007E08 6100 0000                  		bsr.w	SingleObjLoad
00007E0C 6600                       		bne.s	Obj17_Action
00007E0E 5228 0028                  		addq.b	#1,$28(a0)
00007E12 3A09                       		move.w	a1,d5
00007E14 0445 D000                  		subi.w	#$D000,d5
00007E18 EC4D                       		lsr.w	#6,d5
00007E1A 0245 007F                  		andi.w	#$7F,d5
00007E1E 14C5                       		move.b	d5,(a2)+
00007E20 137C 0008 0024             		move.b	#8,$24(a1)
00007E26 1284                       		move.b	d4,0(a1)
00007E28 3342 000C                  		move.w	d2,$C(a1)
00007E2C 3343 0008                  		move.w	d3,8(a1)
00007E30 2368 0004 0004             		move.l	4(a0),4(a1)
00007E36 337C 4398 0002             		move.w	#$4398,2(a1)
00007E3C 137C 0004 0001             		move.b	#4,1(a1)
00007E42 137C 0003 0018             		move.b	#3,$18(a1)
00007E48 137C 0008 0019             		move.b	#8,$19(a1)
00007E4E 1346 003E                  		move.b	d6,$3E(a1)
00007E52 5206                       		addq.b	#1,d6
00007E54 0206 0007                  		andi.b	#7,d6
00007E58 0643 0010                  		addi.w	#$10,d3
00007E5C B668 0008                  		cmp.w	8(a0),d3
00007E60 6600                       		bne.s	loc_7D78
00007E62 1146 003E                  		move.b	d6,$3E(a0)
00007E66 5206                       		addq.b	#1,d6
00007E68 0206 0007                  		andi.b	#7,d6
00007E6C 0643 0010                  		addi.w	#$10,d3
00007E70 5228 0028                  		addq.b	#1,$28(a0)
00007E74                            
00007E74                            loc_7D78:
00007E74 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00007E78                            
00007E78                            Obj17_Action:				; XREF: Obj17_Index
00007E78 6100 0000                  		bsr.w	Obj17_RotateSpikes
00007E7C 6100 0000                  		bsr.w	DisplaySprite
00007E80 6000 0000                  		bra.w	Obj17_ChkDel
00007E84                            
00007E84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E84                            
00007E84                            
00007E84                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00007E84 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00007E88 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00007E8E D028 003E                  		add.b	$3E(a0),d0
00007E92 0200 0007                  		andi.b	#7,d0
00007E96 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00007E9A 6600                       		bne.s	locret_7DA6
00007E9C 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00007EA2                            
00007EA2                            locret_7DA6:
00007EA2 4E75                       		rts	
00007EA4                            ; End of function Obj17_RotateSpikes
00007EA4                            
00007EA4                            ; ===========================================================================
00007EA4                            
00007EA4                            Obj17_ChkDel:				; XREF: Obj17_Action
00007EA4 3028 0008                  		move.w	8(a0),d0
00007EA8 0240 FF80                  		andi.w	#$FF80,d0
00007EAC 3238 F700                  		move.w	($FFFFF700).w,d1
00007EB0 0441 0080                  		subi.w	#$80,d1
00007EB4 0241 FF80                  		andi.w	#$FF80,d1
00007EB8 9041                       		sub.w	d1,d0
00007EBA 0C40 0280                  		cmpi.w	#$280,d0
00007EBE 6200 0000                  		bhi.w	Obj17_DelAll
00007EC2 4E75                       		rts	
00007EC4                            ; ===========================================================================
00007EC4                            
00007EC4                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00007EC4 7400                       		moveq	#0,d2
00007EC6 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00007ECA 141A                       		move.b	(a2)+,d2	; move a2 to d2
00007ECC 5502                       		subq.b	#2,d2
00007ECE 6500                       		bcs.s	Obj17_Delete
00007ED0                            
00007ED0                            Obj17_DelLoop:
00007ED0 7000                       		moveq	#0,d0
00007ED2 101A                       		move.b	(a2)+,d0
00007ED4 ED48                       		lsl.w	#6,d0
00007ED6 0680 00FF D000             		addi.l	#$FFD000,d0
00007EDC 2240                       		movea.l	d0,a1
00007EDE 6100 0000                  		bsr.w	DeleteObject2	; delete object
00007EE2 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00007EE6                            
00007EE6                            Obj17_Delete:				; XREF: Obj17_Index
00007EE6 6100 0000                  		bsr.w	DeleteObject
00007EEA 4E75                       		rts	
00007EEC                            ; ===========================================================================
00007EEC                            
00007EEC                            Obj17_Display:				; XREF: Obj17_Index
00007EEC 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00007EF0 6000 0000                  		bra.w	DisplaySprite
00007EF4                            ; ===========================================================================
00007EF4                            ; ---------------------------------------------------------------------------
00007EF4                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00007EF4                            ; ---------------------------------------------------------------------------
00007EF4                            Map_obj17:
00007EF4                            	include "_maps\obj17.asm"
00007EF4                            ; ---------------------------------------------------------------------------
00007EF4                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00007EF4                            ; ---------------------------------------------------------------------------
00007EF4 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00007EF8 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00007EFC 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00007F00 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00007F04 01                         byte_7E08:	dc.b 1
00007F05 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00007F0A 01                         byte_7E0E:	dc.b 1
00007F0B F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00007F10 01                         byte_7E14:	dc.b 1
00007F11 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00007F16 01                         byte_7E1A:	dc.b 1
00007F17 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00007F1C 01                         byte_7E20:	dc.b 1
00007F1D 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00007F22 01                         byte_7E26:	dc.b 1
00007F23 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00007F28 01                         byte_7E2C:	dc.b 1
00007F29 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00007F2E                            		even
00007F2E                            		even
00007F2E                            
00007F2E                            ; ===========================================================================
00007F2E                            ; ---------------------------------------------------------------------------
00007F2E                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00007F2E                            ; ---------------------------------------------------------------------------
00007F2E                            
00007F2E                            Obj18:					; XREF: Obj_Index
00007F2E 7000                       		moveq	#0,d0
00007F30 1028 0024                  		move.b	$24(a0),d0
00007F34 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00007F38 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00007F3C                            ; ===========================================================================
00007F3C 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00007F3E 0000                       		dc.w Obj18_Solid-Obj18_Index
00007F40 0000                       		dc.w Obj18_Action2-Obj18_Index
00007F42 0000                       		dc.w Obj18_Delete-Obj18_Index
00007F44 0000                       		dc.w Obj18_Action-Obj18_Index
00007F46                            ; ===========================================================================
00007F46                            
00007F46                            Obj18_Main:				; XREF: Obj18_Index
00007F46 5428 0024                  		addq.b	#2,$24(a0)
00007F4A 317C 4000 0002             		move.w	#$4000,2(a0)
00007F50 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00007F58 117C 0020 0019             		move.b	#$20,$19(a0)
00007F5E 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00007F64 6600                       		bne.s	Obj18_NotSYZ
00007F66 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00007F6E 117C 0020 0019             		move.b	#$20,$19(a0)
00007F74                            
00007F74                            Obj18_NotSYZ:
00007F74 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007F7A 6600                       		bne.s	Obj18_NotSLZ
00007F7C 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00007F84 117C 0020 0019             		move.b	#$20,$19(a0)
00007F8A 317C 4000 0002             		move.w	#$4000,2(a0)
00007F90 117C 0003 0028             		move.b	#3,$28(a0)
00007F96                            
00007F96                            Obj18_NotSLZ:
00007F96 117C 0004 0001             		move.b	#4,1(a0)
00007F9C 117C 0004 0018             		move.b	#4,$18(a0)
00007FA2 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00007FA8 3168 000C 0034             		move.w	$C(a0),$34(a0)
00007FAE 3168 0008 0032             		move.w	8(a0),$32(a0)
00007FB4 317C 0080 0026             		move.w	#$80,$26(a0)
00007FBA 7200                       		moveq	#0,d1
00007FBC 1028 0028                  		move.b	$28(a0),d0
00007FC0 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00007FC4 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00007FC6 5201                       		addq.b	#1,d1		; use frame #1
00007FC8 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00007FCE                            
00007FCE                            Obj18_SetFrame:
00007FCE 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00007FD2                            
00007FD2                            Obj18_Solid:				; XREF: Obj18_Index
00007FD2 4A28 0038                  		tst.b	$38(a0)
00007FD6 6700                       		beq.s	loc_7EE0
00007FD8 5928 0038                  		subq.b	#4,$38(a0)
00007FDC                            
00007FDC                            loc_7EE0:
00007FDC 7200                       		moveq	#0,d1
00007FDE 1228 0019                  		move.b	$19(a0),d1
00007FE2 6100 F56C                  		bsr.w	PlatformObject
00007FE6                            
00007FE6                            Obj18_Action:				; XREF: Obj18_Index
00007FE6 6100 0000                  		bsr.w	Obj18_Move
00007FEA 6100 0000                  		bsr.w	Obj18_Nudge
00007FEE 6100 0000                  		bsr.w	DisplaySprite
00007FF2 6000 0000                  		bra.w	Obj18_ChkDel
00007FF6                            ; ===========================================================================
00007FF6                            
00007FF6                            Obj18_Action2:				; XREF: Obj18_Index
00007FF6 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00007FFC 6700                       		beq.s	loc_7F06
00007FFE 5828 0038                  		addq.b	#4,$38(a0)
00008002                            
00008002                            loc_7F06:
00008002 7200                       		moveq	#0,d1
00008004 1228 0019                  		move.b	$19(a0),d1
00008008 6100 F6BA                  		bsr.w	ExitPlatform
0000800C 3F28 0008                  		move.w	8(a0),-(sp)
00008010 6100 0000                  		bsr.w	Obj18_Move
00008014 6100 0000                  		bsr.w	Obj18_Nudge
00008018 341F                       		move.w	(sp)+,d2
0000801A 6100 FC12                  		bsr.w	MvSonicOnPtfm2
0000801E 6100 0000                  		bsr.w	DisplaySprite
00008022 6000 0000                  		bra.w	Obj18_ChkDel
00008026                            
00008026 4E75                       		rts
00008028                            
00008028                            ; ---------------------------------------------------------------------------
00008028                            ; Subroutine to	move platform slightly when you	stand on it
00008028                            ; ---------------------------------------------------------------------------
00008028                            
00008028                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008028                            
00008028                            
00008028                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008028 1028 0038                  		move.b	$38(a0),d0
0000802C 6100 A9AC                  		bsr.w	CalcSine
00008030 323C 0400                  		move.w	#$400,d1
00008034 C1C1                       		muls.w	d1,d0
00008036 4840                       		swap	d0
00008038 D068 002C                  		add.w	$2C(a0),d0
0000803C 3140 000C                  		move.w	d0,$C(a0)
00008040 4E75                       		rts	
00008042                            ; End of function Obj18_Nudge
00008042                            
00008042                            ; ---------------------------------------------------------------------------
00008042                            ; Subroutine to	move platforms
00008042                            ; ---------------------------------------------------------------------------
00008042                            
00008042                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008042                            
00008042                            
00008042                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008042 7000                       		moveq	#0,d0
00008044 1028 0028                  		move.b	$28(a0),d0
00008048 0240 000F                  		andi.w	#$F,d0
0000804C D040                       		add.w	d0,d0
0000804E 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00008052 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008056                            ; End of function Obj18_Move
00008056                            
00008056                            ; ===========================================================================
00008056 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000805A 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
0000805E 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008062 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008066 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000806A 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
0000806E 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008070                            ; ===========================================================================
00008070                            
00008070                            Obj18_Type00:
00008070 4E75                       		rts			; platform 00 doesn't move
00008072                            ; ===========================================================================
00008072                            
00008072                            Obj18_Type05:
00008072 3028 0032                  		move.w	$32(a0),d0
00008076 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000807A 4401                       		neg.b	d1		; reverse platform-motion
0000807C 0601 0040                  		addi.b	#$40,d1
00008080 6000                       		bra.s	Obj18_01_Move
00008082                            ; ===========================================================================
00008082                            
00008082                            Obj18_Type01:
00008082 3028 0032                  		move.w	$32(a0),d0
00008086 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000808A 0401 0040                  		subi.b	#$40,d1
0000808E                            
0000808E                            Obj18_01_Move:
0000808E 4881                       		ext.w	d1
00008090 D041                       		add.w	d1,d0
00008092 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008096 6000 0000                  		bra.w	Obj18_ChgMotion
0000809A                            ; ===========================================================================
0000809A                            
0000809A                            Obj18_Type0C:
0000809A 3028 0034                  		move.w	$34(a0),d0
0000809E 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000080A2 4401                       		neg.b	d1		; reverse platform-motion
000080A4 0601 0030                  		addi.b	#$30,d1
000080A8 6000                       		bra.s	Obj18_02_Move
000080AA                            ; ===========================================================================
000080AA                            
000080AA                            Obj18_Type0B:
000080AA 3028 0034                  		move.w	$34(a0),d0
000080AE 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000080B2 0401 0030                  		subi.b	#$30,d1
000080B6 6000                       		bra.s	Obj18_02_Move
000080B8                            ; ===========================================================================
000080B8                            
000080B8                            Obj18_Type06:
000080B8 3028 0034                  		move.w	$34(a0),d0
000080BC 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000080C0 4401                       		neg.b	d1		; reverse platform-motion
000080C2 0601 0040                  		addi.b	#$40,d1
000080C6 6000                       		bra.s	Obj18_02_Move
000080C8                            ; ===========================================================================
000080C8                            
000080C8                            Obj18_Type02:
000080C8 3028 0034                  		move.w	$34(a0),d0
000080CC 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000080D0 0401 0040                  		subi.b	#$40,d1
000080D4                            
000080D4                            Obj18_02_Move:
000080D4 4881                       		ext.w	d1
000080D6 D041                       		add.w	d1,d0
000080D8 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000080DC 6000 0000                  		bra.w	Obj18_ChgMotion
000080E0                            ; ===========================================================================
000080E0                            
000080E0                            Obj18_Type03:
000080E0 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000080E4 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000080E6 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000080EC 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000080EE 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000080F4                            
000080F4                            Obj18_03_NoMove:
000080F4 4E75                       		rts	
000080F6                            ; ===========================================================================
000080F6                            
000080F6                            Obj18_03_Wait:
000080F6 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000080FA 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000080FC 317C 0020 003A             		move.w	#32,$3A(a0)
00008102 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008106 4E75                       		rts	
00008108                            ; ===========================================================================
00008108                            
00008108                            Obj18_Type04:
00008108 4A68 003A                  		tst.w	$3A(a0)
0000810C 6700                       		beq.s	loc_8048
0000810E 5368 003A                  		subq.w	#1,$3A(a0)
00008112 6600                       		bne.s	loc_8048
00008114 0828 0003 0022             		btst	#3,$22(a0)
0000811A 6700                       		beq.s	loc_8042
0000811C 08E9 0001 0022             		bset	#1,$22(a1)
00008122 08A9 0003 0022             		bclr	#3,$22(a1)
00008128 137C 0002 0024             		move.b	#2,$24(a1)
0000812E 08A8 0003 0022             		bclr	#3,$22(a0)
00008134 4228 0025                  		clr.b	$25(a0)
00008138 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000813E                            
0000813E                            loc_8042:
0000813E 117C 0008 0024             		move.b	#8,$24(a0)
00008144                            
00008144                            loc_8048:
00008144 2628 002C                  		move.l	$2C(a0),d3
00008148 3028 0012                  		move.w	$12(a0),d0
0000814C 48C0                       		ext.l	d0
0000814E E180                       		asl.l	#8,d0
00008150 D680                       		add.l	d0,d3
00008152 2143 002C                  		move.l	d3,$2C(a0)
00008156 0668 0038 0012             		addi.w	#$38,$12(a0)
0000815C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008160 0640 00E0                  		addi.w	#$E0,d0
00008164 B068 002C                  		cmp.w	$2C(a0),d0
00008168 6400                       		bcc.s	locret_8074
0000816A 117C 0006 0024             		move.b	#6,$24(a0)
00008170                            
00008170                            locret_8074:
00008170 4E75                       		rts	
00008172                            ; ===========================================================================
00008172                            
00008172                            Obj18_Type07:
00008172 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008176 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008178 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000817C 7000                       		moveq	#0,d0
0000817E 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008182 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008184 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008188 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
0000818A 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008190                            
00008190                            Obj18_07_NoMove:
00008190 4E75                       		rts	
00008192                            ; ===========================================================================
00008192                            
00008192                            Obj18_07_Wait:
00008192 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008196 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008198 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
0000819C 4E75                       		rts	
0000819E                            ; ===========================================================================
0000819E                            
0000819E                            Obj18_Type08:
0000819E 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000081A2 3028 0034                  		move.w	$34(a0),d0
000081A6 0440 0200                  		subi.w	#$200,d0
000081AA B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000081AE 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000081B0 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000081B4                            
000081B4                            Obj18_08_NoStop:
000081B4 4E75                       		rts	
000081B6                            ; ===========================================================================
000081B6                            
000081B6                            Obj18_Type0A:
000081B6 3028 0034                  		move.w	$34(a0),d0
000081BA 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000081BE 0401 0040                  		subi.b	#$40,d1
000081C2 4881                       		ext.w	d1
000081C4 E241                       		asr.w	#1,d1
000081C6 D041                       		add.w	d1,d0
000081C8 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000081CC                            
000081CC                            Obj18_ChgMotion:
000081CC 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000081D2 4E75                       		rts	
000081D4                            ; ===========================================================================
000081D4                            
000081D4                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000081D4 3028 0032                  		move.w	$32(a0),d0
000081D8 0240 FF80                  		andi.w	#$FF80,d0
000081DC 3238 F700                  		move.w	($FFFFF700).w,d1
000081E0 0441 0080                  		subi.w	#$80,d1
000081E4 0241 FF80                  		andi.w	#$FF80,d1
000081E8 9041                       		sub.w	d1,d0
000081EA 0C40 0280                  		cmpi.w	#$280,d0
000081EE 6200                       		bhi.s	Obj18_Delete
000081F0 4E75                       		rts	
000081F2                            ; ===========================================================================
000081F2                            
000081F2                            Obj18_Delete:				; XREF: Obj18_Index
000081F2 6000 0000                  		bra.w	DeleteObject
000081F6                            ; ===========================================================================
000081F6                            ; ---------------------------------------------------------------------------
000081F6                            ; Sprite mappings - unused
000081F6                            ; ---------------------------------------------------------------------------
000081F6                            Map_obj18x:
000081F6                            	include "_maps\obj18x.asm"
000081F6                            ; ---------------------------------------------------------------------------
000081F6                            ; Sprite mappings - unused
000081F6                            ; ---------------------------------------------------------------------------
000081F6 0000                       		dc.w byte_80FE-Map_obj18x
000081F8 0000                       		dc.w byte_8109-Map_obj18x
000081FA 02                         byte_80FE:	dc.b 2
000081FB F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008200 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008205 0A                         byte_8109:	dc.b $A
00008206 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
0000820B 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008210 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008215 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
0000821A 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000821F F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008224 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008229 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000822E 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008233 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008238                            		even
00008238                            		even
00008238                            
00008238                            ; ---------------------------------------------------------------------------
00008238                            ; Sprite mappings - GHZ	platforms
00008238                            ; ---------------------------------------------------------------------------
00008238                            Map_obj18:
00008238                            	include "_maps\obj18ghz.asm"
00008238                            ; ---------------------------------------------------------------------------
00008238                            ; Sprite mappings - GHZ	platforms
00008238                            ; ---------------------------------------------------------------------------
00008238 0000                       		dc.w byte_8140-Map_obj18
0000823A 0000                       		dc.w byte_8155-Map_obj18
0000823C 04                         byte_8140:	dc.b 4
0000823D F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008242 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008247 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000824C F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008251 0A                         byte_8155:	dc.b $A
00008252 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008257 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
0000825C 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008261 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008266 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000826B F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008270 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008275 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000827A 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000827F 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008284                            		even
00008284                            		even
00008284                            
00008284                            ; ---------------------------------------------------------------------------
00008284                            ; Sprite mappings - SYZ	platforms
00008284                            ; ---------------------------------------------------------------------------
00008284                            Map_obj18a:
00008284                            	include "_maps\obj18syz.asm"
00008284                            ; ---------------------------------------------------------------------------
00008284                            ; Sprite mappings - SYZ	platforms
00008284                            ; ---------------------------------------------------------------------------
00008284 0000                       		dc.w byte_818A-Map_obj18a
00008286 03                         byte_818A:	dc.b 3
00008287 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000828C F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008291 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008296                            		even
00008296                            		even
00008296                            
00008296                            ; ---------------------------------------------------------------------------
00008296                            ; Sprite mappings - SLZ	platforms
00008296                            ; ---------------------------------------------------------------------------
00008296                            Map_obj18b:
00008296                            	include "_maps\obj18slz.asm"
00008296                            ; ---------------------------------------------------------------------------
00008296                            ; Sprite mappings - SLZ	platforms
00008296                            ; ---------------------------------------------------------------------------
00008296 0000                       		dc.w byte_819C-Map_obj18b
00008298 02                         byte_819C:	dc.b 2
00008299 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000829E F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000082A4 00                         		even
000082A4 00                         		even
000082A4                            
000082A4                            ; ===========================================================================
000082A4                            ; ---------------------------------------------------------------------------
000082A4                            ; Object 19 - blank
000082A4                            ; ---------------------------------------------------------------------------
000082A4                            
000082A4                            Obj19:					; XREF: Obj_Index
000082A4 4E75                       		rts	
000082A6                            ; ===========================================================================
000082A6                            ; ---------------------------------------------------------------------------
000082A6                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000082A6                            ; ---------------------------------------------------------------------------
000082A6                            Map_obj48:
000082A6                            	include "_maps\obj48.asm"
000082A6                            ; ---------------------------------------------------------------------------
000082A6                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000082A6                            ; ---------------------------------------------------------------------------
000082A6 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000082AA 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000082AE 06                         byte_81B2:	dc.b 6
000082AF F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
000082B4 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
000082B9 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000082BE E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000082C3 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000082C8 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000082CD 04                         byte_81D1:	dc.b 4
000082CE E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000082D3 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000082D8 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000082DD 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000082E2 04                         byte_81E6:	dc.b 4
000082E3 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000082E8 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000082ED 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000082F2 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000082F7 04                         byte_81FB:	dc.b 4
000082F8 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000082FD E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008302 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008307 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000830C                            		even
0000830C                            		even
0000830C                            
0000830C                            ; ===========================================================================
0000830C                            ; ---------------------------------------------------------------------------
0000830C                            ; Object 1A - GHZ collapsing ledge
0000830C                            ; ---------------------------------------------------------------------------
0000830C                            
0000830C                            Obj1A:					; XREF: Obj_Index
0000830C 7000                       		moveq	#0,d0
0000830E 1028 0024                  		move.b	$24(a0),d0
00008312 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008316 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
0000831A                            ; ===========================================================================
0000831A 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
0000831E 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008322 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008326                            ; ===========================================================================
00008326                            
00008326                            Obj1A_Main:				; XREF: Obj1A_Index
00008326 5428 0024                  		addq.b	#2,$24(a0)
0000832A 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008332 317C 4000 0002             		move.w	#$4000,2(a0)
00008338 0028 0004 0001             		ori.b	#4,1(a0)
0000833E 117C 0004 0018             		move.b	#4,$18(a0)
00008344 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000834A 117C 0064 0019             		move.b	#$64,$19(a0)
00008350 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008356 117C 0038 0016             		move.b	#$38,$16(a0)
0000835C 08E8 0004 0001             		bset	#4,1(a0)
00008362                            
00008362                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008362 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008366 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008368 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
0000836C 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008370 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008374                            
00008374                            Obj1A_Slope:
00008374 323C 0030                  		move.w	#$30,d1
00008378 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000837E 6100 F2A4                  		bsr.w	SlopeObject
00008382 6000 0000                  		bra.w	MarkObjGone
00008386                            ; ===========================================================================
00008386                            
00008386                            Obj1A_Touch:				; XREF: Obj1A_Index
00008386 4A28 0038                  		tst.b	$38(a0)
0000838A 6700 0000                  		beq.w	loc_847A
0000838E 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008394 5328 0038                  		subq.b	#1,$38(a0)
00008398                            
00008398                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008398                            
00008398                            
00008398                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008398 323C 0030                  		move.w	#$30,d1
0000839C 6100 F326                  		bsr.w	ExitPlatform
000083A0 323C 0030                  		move.w	#$30,d1
000083A4 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000083AA 3428 0008                  		move.w	8(a0),d2
000083AE 6100 0000                  		bsr.w	SlopeObject2
000083B2 6000 0000                  		bra.w	MarkObjGone
000083B6                            ; End of function Obj1A_WalkOff
000083B6                            
000083B6                            ; ===========================================================================
000083B6                            
000083B6                            Obj1A_Display:				; XREF: Obj1A_Index
000083B6 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000083BA 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
000083BC 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000083C0 6600 0000                  		bne.w	loc_82D0	; if yes, branch
000083C4 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000083C8 6000 0000                  		bra.w	DisplaySprite
000083CC                            ; ===========================================================================
000083CC                            
000083CC                            loc_82D0:				; XREF: Obj1A_Display
000083CC 5328 0038                  		subq.b	#1,$38(a0)
000083D0 6100 FFC6                  		bsr.w	Obj1A_WalkOff
000083D4 43F8 D000                  		lea	($FFFFD000).w,a1
000083D8 0829 0003 0022             		btst	#3,$22(a1)
000083DE 6700                       		beq.s	loc_82FC
000083E0 4A28 0038                  		tst.b	$38(a0)
000083E4 6600                       		bne.s	locret_8308
000083E6 08A9 0003 0022             		bclr	#3,$22(a1)
000083EC 08A9 0005 0022             		bclr	#5,$22(a1)
000083F2 137C 0001 001D             		move.b	#1,$1D(a1)
000083F8                            
000083F8                            loc_82FC:
000083F8 117C 0000 003A             		move.b	#0,$3A(a0)
000083FE 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008404                            
00008404                            locret_8308:
00008404 4E75                       		rts	
00008406                            ; ===========================================================================
00008406                            
00008406                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008406 6100 0000                  		bsr.w	ObjectFall
0000840A 6100 0000                  		bsr.w	DisplaySprite
0000840E 4A28 0001                  		tst.b	1(a0)
00008412 6A00                       		bpl.s	Obj1A_Delete
00008414 4E75                       		rts	
00008416                            ; ===========================================================================
00008416                            
00008416                            Obj1A_Delete:				; XREF: Obj1A_Index
00008416 6100 0000                  		bsr.w	DeleteObject
0000841A 4E75                       		rts	
0000841C                            ; ===========================================================================
0000841C                            ; ---------------------------------------------------------------------------
0000841C                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0000841C                            ; ---------------------------------------------------------------------------
0000841C                            
0000841C                            Obj53:					; XREF: Obj_Index
0000841C 7000                       		moveq	#0,d0
0000841E 1028 0024                  		move.b	$24(a0),d0
00008422 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008426 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
0000842A                            ; ===========================================================================
0000842A 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
0000842E 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008432 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008436                            ; ===========================================================================
00008436                            
00008436                            Obj53_Main:				; XREF: Obj53_Index
00008436 5428 0024                  		addq.b	#2,$24(a0)
0000843A 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008442 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008448 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000844E 6600                       		bne.s	Obj53_NotSLZ
00008450 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008456 5428 001A                  		addq.b	#2,$1A(a0)
0000845A                            
0000845A                            Obj53_NotSLZ:
0000845A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008460 6600                       		bne.s	Obj53_NotSBZ
00008462 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008468                            
00008468                            Obj53_NotSBZ:
00008468 0028 0004 0001             		ori.b	#4,1(a0)
0000846E 117C 0004 0018             		move.b	#4,$18(a0)
00008474 117C 0007 0038             		move.b	#7,$38(a0)
0000847A 117C 0044 0019             		move.b	#$44,$19(a0)
00008480                            
00008480                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008480 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008484 6700                       		beq.s	Obj53_Solid	; if not, branch
00008486 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000848A 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
0000848E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008492                            
00008492                            Obj53_Solid:
00008492 323C 0020                  		move.w	#$20,d1
00008496 6100 F0B8                  		bsr.w	PlatformObject
0000849A 4A28 0028                  		tst.b	$28(a0)
0000849E 6A00                       		bpl.s	Obj53_MarkAsGone
000084A0 0829 0003 0022             		btst	#3,$22(a1)
000084A6 6700                       		beq.s	Obj53_MarkAsGone
000084A8 08A8 0000 0001             		bclr	#0,1(a0)
000084AE 3029 0008                  		move.w	8(a1),d0
000084B2 9068 0008                  		sub.w	8(a0),d0
000084B6 6400                       		bcc.s	Obj53_MarkAsGone
000084B8 08E8 0000 0001             		bset	#0,1(a0)
000084BE                            
000084BE                            Obj53_MarkAsGone:
000084BE 6000 0000                  		bra.w	MarkObjGone
000084C2                            ; ===========================================================================
000084C2                            
000084C2                            Obj53_Touch:				; XREF: Obj53_Index
000084C2 4A28 0038                  		tst.b	$38(a0)
000084C6 6700 0000                  		beq.w	loc_8458
000084CA 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000084D0 5328 0038                  		subq.b	#1,$38(a0)
000084D4                            
000084D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084D4                            
000084D4                            
000084D4                            Obj53_WalkOff:				; XREF: Obj53_Index
000084D4 323C 0020                  		move.w	#$20,d1
000084D8 6100 F1EA                  		bsr.w	ExitPlatform
000084DC 3428 0008                  		move.w	8(a0),d2
000084E0 6100 F74C                  		bsr.w	MvSonicOnPtfm2
000084E4 6000 0000                  		bra.w	MarkObjGone
000084E8                            ; End of function Obj53_WalkOff
000084E8                            
000084E8                            ; ===========================================================================
000084E8                            
000084E8                            Obj53_Display:				; XREF: Obj53_Index
000084E8 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000084EC 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
000084EE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000084F2 6600 0000                  		bne.w	loc_8402	; if yes, branch
000084F6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000084FA 6000 0000                  		bra.w	DisplaySprite
000084FE                            ; ===========================================================================
000084FE                            
000084FE                            loc_8402:
000084FE 5328 0038                  		subq.b	#1,$38(a0)
00008502 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008506 43F8 D000                  		lea	($FFFFD000).w,a1
0000850A 0829 0003 0022             		btst	#3,$22(a1)
00008510 6700                       		beq.s	loc_842E
00008512 4A28 0038                  		tst.b	$38(a0)
00008516 6600                       		bne.s	locret_843A
00008518 08A9 0003 0022             		bclr	#3,$22(a1)
0000851E 08A9 0005 0022             		bclr	#5,$22(a1)
00008524 137C 0001 001D             		move.b	#1,$1D(a1)
0000852A                            
0000852A                            loc_842E:
0000852A 117C 0000 003A             		move.b	#0,$3A(a0)
00008530 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008536                            
00008536                            locret_843A:
00008536 4E75                       		rts	
00008538                            ; ===========================================================================
00008538                            
00008538                            Obj53_TimeZero:				; XREF: Obj53_Display
00008538 6100 0000                  		bsr.w	ObjectFall
0000853C 6100 0000                  		bsr.w	DisplaySprite
00008540 4A28 0001                  		tst.b	1(a0)
00008544 6A00                       		bpl.s	Obj53_Delete
00008546 4E75                       		rts	
00008548                            ; ===========================================================================
00008548                            
00008548                            Obj53_Delete:				; XREF: Obj53_Index
00008548 6100 0000                  		bsr.w	DeleteObject
0000854C 4E75                       		rts	
0000854E                            ; ===========================================================================
0000854E                            
0000854E                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
0000854E 117C 0000 003A             		move.b	#0,$3A(a0)
00008554                            
00008554                            loc_8458:				; XREF: Obj53_Touch
00008554 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
0000855A 0828 0000 0028             		btst	#0,$28(a0)
00008560 6700                       		beq.s	loc_846C
00008562 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008568                            
00008568                            loc_846C:
00008568 7207                       		moveq	#7,d1
0000856A 5228 001A                  		addq.b	#1,$1A(a0)
0000856E 6000                       		bra.s	loc_8486
00008570                            ; ===========================================================================
00008570                            
00008570                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008570 117C 0000 003A             		move.b	#0,$3A(a0)
00008576                            
00008576                            loc_847A:				; XREF: Obj1A_Touch
00008576 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
0000857C 7218                       		moveq	#$18,d1
0000857E 5428 001A                  		addq.b	#2,$1A(a0)
00008582                            
00008582                            loc_8486:				; XREF: Obj53_Collapse
00008582 7000                       		moveq	#0,d0
00008584 1028 001A                  		move.b	$1A(a0),d0
00008588 D040                       		add.w	d0,d0
0000858A 2668 0004                  		movea.l	4(a0),a3
0000858E D6F3 0000                  		adda.w	(a3,d0.w),a3
00008592 524B                       		addq.w	#1,a3
00008594 08E8 0005 0001             		bset	#5,1(a0)
0000859A 1810                       		move.b	0(a0),d4
0000859C 1A28 0001                  		move.b	1(a0),d5
000085A0 2248                       		movea.l	a0,a1
000085A2 6000                       		bra.s	loc_84B2
000085A4                            ; ===========================================================================
000085A4                            
000085A4                            loc_84AA:
000085A4 6100 0000                  		bsr.w	SingleObjLoad
000085A8 6600                       		bne.s	loc_84F2
000085AA 5A4B                       		addq.w	#5,a3
000085AC                            
000085AC                            loc_84B2:
000085AC 137C 0006 0024             		move.b	#6,$24(a1)
000085B2 1284                       		move.b	d4,0(a1)
000085B4 234B 0004                  		move.l	a3,4(a1)
000085B8 1345 0001                  		move.b	d5,1(a1)
000085BC 3368 0008 0008             		move.w	8(a0),8(a1)
000085C2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000085C8 3368 0002 0002             		move.w	2(a0),2(a1)
000085CE 1368 0018 0018             		move.b	$18(a0),$18(a1)
000085D4 1368 0019 0019             		move.b	$19(a0),$19(a1)
000085DA 135C 0038                  		move.b	(a4)+,$38(a1)
000085DE B3C8                       		cmpa.l	a0,a1
000085E0 6400                       		bcc.s	loc_84EE
000085E2 6100 0000                  		bsr.w	DisplaySprite2
000085E6                            
000085E6                            loc_84EE:
000085E6 51C9 FFBC                  		dbf	d1,loc_84AA
000085EA                            
000085EA                            loc_84F2:
000085EA 6100 0000                  		bsr.w	DisplaySprite
000085EE 303C 00B9                  		move.w	#$B9,d0
000085F2 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play collapsing	sound
000085F8                            ; ===========================================================================
000085F8                            ; ---------------------------------------------------------------------------
000085F8                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
000085F8                            ; ---------------------------------------------------------------------------
000085F8 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008608 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008612 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000861A 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008622                            
00008622                            ; ---------------------------------------------------------------------------
00008622                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008622                            ; ---------------------------------------------------------------------------
00008622                            
00008622                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008622                            
00008622                            
00008622                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008622 43F8 D000                  		lea	($FFFFD000).w,a1
00008626 0829 0003 0022             		btst	#3,$22(a1)
0000862C 6700                       		beq.s	locret_856E
0000862E 3029 0008                  		move.w	8(a1),d0
00008632 9068 0008                  		sub.w	8(a0),d0
00008636 D041                       		add.w	d1,d0
00008638 E248                       		lsr.w	#1,d0
0000863A 0828 0000 0001             		btst	#0,1(a0)
00008640 6700                       		beq.s	loc_854E
00008642 4640                       		not.w	d0
00008644 D041                       		add.w	d1,d0
00008646                            
00008646                            loc_854E:
00008646 7200                       		moveq	#0,d1
00008648 1232 0000                  		move.b	(a2,d0.w),d1
0000864C 3028 000C                  		move.w	$C(a0),d0
00008650 9041                       		sub.w	d1,d0
00008652 7200                       		moveq	#0,d1
00008654 1229 0016                  		move.b	$16(a1),d1
00008658 9041                       		sub.w	d1,d0
0000865A 3340 000C                  		move.w	d0,$C(a1)
0000865E 9468 0008                  		sub.w	8(a0),d2
00008662 9569 0008                  		sub.w	d2,8(a1)
00008666                            
00008666                            locret_856E:
00008666 4E75                       		rts	
00008668                            ; End of function SlopeObject2
00008668                            
00008668                            ; ===========================================================================
00008668                            ; ---------------------------------------------------------------------------
00008668                            ; Collision data for GHZ collapsing ledge
00008668                            ; ---------------------------------------------------------------------------
00008668                            Obj1A_SlopeData:
00008668                            		incbin	misc\ghzledge.bin
00008698                            		even
00008698                            
00008698                            ; ---------------------------------------------------------------------------
00008698                            ; Sprite mappings - GHZ	collapsing ledge
00008698                            ; ---------------------------------------------------------------------------
00008698                            Map_obj1A:
00008698                            	include "_maps\obj1A.asm"
00008698                            ; ---------------------------------------------------------------------------
00008698                            ; Sprite mappings - GHZ	collapsing ledge
00008698                            ; ---------------------------------------------------------------------------
00008698 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
0000869C 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000086A0 10                         byte_85A8:	dc.b $10
000086A1 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000086A6 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000086AB E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000086B0 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000086B5 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000086BA D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000086BF F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000086C4 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000086C9 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000086CE F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000086D3 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000086D8 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000086DD 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000086E2 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000086E7 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000086EC 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000086F1 10                         byte_85F9:	dc.b $10
000086F2 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
000086F7 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000086FC E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008701 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008706 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000870B D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008710 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008715 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000871A F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000871F F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008724 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008729 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000872E 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008733 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008738 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000873D 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008742 19                         byte_864A:	dc.b $19
00008743 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008748 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000874D D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008752 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008757 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000875C E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008761 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008766 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000876B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008770 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008775 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000877A F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000877F F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008784 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008789 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000878E F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008793 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008798 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000879D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000087A2 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000087A7 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000087AC 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000087B1 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000087B6 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000087BB 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000087C0 19                         byte_86C8:	dc.b $19
000087C1 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
000087C6 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000087CB D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000087D0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000087D5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000087DA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000087DF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000087E4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000087E9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000087EE D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000087F3 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000087F8 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000087FD F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008802 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008807 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000880C F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008811 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008816 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000881B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008820 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008825 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000882A 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000882F 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008834 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008839 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000883E                            		even
0000883E                            		even
0000883E                            
0000883E                            ; ---------------------------------------------------------------------------
0000883E                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000883E                            ; ---------------------------------------------------------------------------
0000883E                            Map_obj53:
0000883E                            	include "_maps\obj53.asm"
0000883E                            ; ---------------------------------------------------------------------------
0000883E                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
0000883E                            ; ---------------------------------------------------------------------------
0000883E 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008842 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008846 04                         byte_874E:	dc.b 4
00008847 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000884C 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008851 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008856 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000885B 08                         byte_8763:	dc.b 8
0000885C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008861 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008866 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000886B F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008870 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008875 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000887A 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000887F 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008884 04                         byte_878C:	dc.b 4
00008885 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000888A 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000888F F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008894 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008899 08                         byte_87A1:	dc.b 8
0000889A F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000889F F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
000088A4 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000088A9 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
000088AE 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
000088B3 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
000088B8 0805 0008 00               		dc.b 8,	5, 0, 8, 0
000088BD 0805 000C 10               		dc.b 8,	5, 0, $C, $10
000088C2                            		even
000088C2                            		even
000088C2                            
000088C2                            ; ===========================================================================
000088C2                            ; ---------------------------------------------------------------------------
000088C2                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
000088C2                            ; ---------------------------------------------------------------------------
000088C2                            
000088C2                            Obj1C:					; XREF: Obj_Index
000088C2 7000                       		moveq	#0,d0
000088C4 1028 0024                  		move.b	$24(a0),d0
000088C8 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
000088CC 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
000088D0                            ; ===========================================================================
000088D0 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
000088D2 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
000088D4                            ; ===========================================================================
000088D4                            
000088D4                            Obj1C_Main:				; XREF: Obj1C_Index
000088D4 5428 0024                  		addq.b	#2,$24(a0)
000088D8 7000                       		moveq	#0,d0
000088DA 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
000088DE C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
000088E2 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
000088E6 2159 0004                  		move.l	(a1)+,4(a0)
000088EA 3159 0002                  		move.w	(a1)+,2(a0)
000088EE 0028 0004 0001             		ori.b	#4,1(a0)
000088F4 1159 001A                  		move.b	(a1)+,$1A(a0)
000088F8 1159 0019                  		move.b	(a1)+,$19(a0)
000088FC 1159 0018                  		move.b	(a1)+,$18(a0)
00008900 1159 0020                  		move.b	(a1)+,$20(a0)
00008904                            
00008904                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008904 3028 0008                  		move.w	8(a0),d0
00008908 0240 FF80                  		andi.w	#$FF80,d0
0000890C 3238 F700                  		move.w	($FFFFF700).w,d1
00008910 0441 0080                  		subi.w	#$80,d1
00008914 0241 FF80                  		andi.w	#$FF80,d1
00008918 9041                       		sub.w	d1,d0
0000891A 0C40 0280                  		cmpi.w	#$280,d0
0000891E 6200 0000                  		bhi.w	DeleteObject
00008922 6000 0000                  		bra.w	DisplaySprite
00008926                            ; ===========================================================================
00008926                            ; ---------------------------------------------------------------------------
00008926                            ; Variables for	object $1C are stored in an array
00008926                            ; ---------------------------------------------------------------------------
00008926 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
0000892A 44D8                       		dc.w $44D8		; VRAM setting
0000892C 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008930 0000 0000                  		dc.l Map_obj1C
00008934 44D8                       		dc.w $44D8
00008936 0008 0200                  		dc.b 0,	8, 2, 0
0000893A 0000 0000                  		dc.l Map_obj1C
0000893E 44D8                       		dc.w $44D8
00008940 0008 0200                  		dc.b 0,	8, 2, 0
00008944 0000 7A38                  		dc.l Map_obj11
00008948 438E                       		dc.w $438E
0000894A 0110 0100                  		dc.b 1,	$10, 1,	0
0000894E                            ; ---------------------------------------------------------------------------
0000894E                            ; Sprite mappings - SLZ	lava thrower
0000894E                            ; ---------------------------------------------------------------------------
0000894E                            Map_obj1C:
0000894E                            	include "_maps\obj1C.asm"
0000894E                            ; ---------------------------------------------------------------------------
0000894E                            ; Sprite mappings - SLZ	lava thrower
0000894E                            ; ---------------------------------------------------------------------------
0000894E 0000                       		dc.w byte_8858-Map_obj1C
00008950 01                         byte_8858:	dc.b 1
00008951 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008956                            		even
00008956                            		even
00008956                            
00008956                            ; ===========================================================================
00008956                            ; ---------------------------------------------------------------------------
00008956                            ; Object 1D - switch that activates when Sonic touches it
00008956                            ; (this	is not used anywhere in	the game)
00008956                            ; ---------------------------------------------------------------------------
00008956                            
00008956                            Obj1D:					; XREF: Obj_Index
00008956 7000                       		moveq	#0,d0
00008958 1028 0024                  		move.b	$24(a0),d0
0000895C 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008960 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008964                            ; ===========================================================================
00008964 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008966 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008968 0000                       		dc.w Obj1D_Delete-Obj1D_Index
0000896A                            ; ===========================================================================
0000896A                            
0000896A                            Obj1D_Main:				; XREF: Obj1D_Index
0000896A 5428 0024                  		addq.b	#2,$24(a0)
0000896E 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008976 317C 4000 0002             		move.w	#$4000,2(a0)
0000897C 117C 0004 0001             		move.b	#4,1(a0)
00008982 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008988 117C 0010 0019             		move.b	#$10,$19(a0)
0000898E 117C 0005 0018             		move.b	#5,$18(a0)
00008994                            
00008994                            Obj1D_Action:				; XREF: Obj1D_Index
00008994 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
0000899A 323C 0010                  		move.w	#$10,d1
0000899E 6100 0000                  		bsr.w	Obj1D_ChkTouch
000089A2 6700                       		beq.s	Obj1D_ChkDel
000089A4 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
000089A8 7001                       		moveq	#1,d0
000089AA 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
000089AE                            
000089AE                            Obj1D_ChkDel:
000089AE 6100 0000                  		bsr.w	DisplaySprite
000089B2 3028 0008                  		move.w	8(a0),d0
000089B6 0240 FF80                  		andi.w	#$FF80,d0
000089BA 3238 F700                  		move.w	($FFFFF700).w,d1
000089BE 0441 0080                  		subi.w	#$80,d1
000089C2 0241 FF80                  		andi.w	#$FF80,d1
000089C6 9041                       		sub.w	d1,d0
000089C8 0C40 0280                  		cmpi.w	#$280,d0
000089CC 6200 0000                  		bhi.w	Obj1D_Delete
000089D0 4E75                       		rts	
000089D2                            ; ===========================================================================
000089D2                            
000089D2                            Obj1D_Delete:				; XREF: Obj1D_Index
000089D2 6100 0000                  		bsr.w	DeleteObject
000089D6 4E75                       		rts	
000089D8                            ; ---------------------------------------------------------------------------
000089D8                            ; Subroutine to	check if Sonic touches the object
000089D8                            ; ---------------------------------------------------------------------------
000089D8                            
000089D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089D8                            
000089D8                            
000089D8                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
000089D8 43F8 D000                  		lea	($FFFFD000).w,a1
000089DC 3029 0008                  		move.w	8(a1),d0
000089E0 9068 0008                  		sub.w	8(a0),d0
000089E4 D041                       		add.w	d1,d0
000089E6 6B00                       		bmi.s	loc_8918
000089E8 D241                       		add.w	d1,d1
000089EA B041                       		cmp.w	d1,d0
000089EC 6400                       		bcc.s	loc_8918
000089EE 3429 000C                  		move.w	$C(a1),d2
000089F2 1229 0016                  		move.b	$16(a1),d1
000089F6 4881                       		ext.w	d1
000089F8 D242                       		add.w	d2,d1
000089FA 3028 000C                  		move.w	$C(a0),d0
000089FE 0440 0010                  		subi.w	#$10,d0
00008A02 9041                       		sub.w	d1,d0
00008A04 6200                       		bhi.s	loc_8918
00008A06 0C40 FFF0                  		cmpi.w	#-$10,d0
00008A0A 6500                       		bcs.s	loc_8918
00008A0C 70FF                       		moveq	#-1,d0
00008A0E 4E75                       		rts	
00008A10                            ; ===========================================================================
00008A10                            
00008A10                            loc_8918:
00008A10 7000                       		moveq	#0,d0
00008A12 4E75                       		rts	
00008A14                            ; End of function Obj1D_ChkTouch
00008A14                            
00008A14                            ; ===========================================================================
00008A14                            ; ---------------------------------------------------------------------------
00008A14                            ; Sprite mappings - object 1D
00008A14                            ; ---------------------------------------------------------------------------
00008A14                            Map_obj1D:
00008A14                            	include "_maps\obj1D.asm"
00008A14                            ; ---------------------------------------------------------------------------
00008A14                            ; Sprite mappings - object 1D
00008A14                            ; ---------------------------------------------------------------------------
00008A14 0000                       		dc.w byte_891E-Map_obj1D
00008A16 04                         byte_891E:	dc.b 4
00008A17 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008A1C 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008A21 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008A26 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008A2C 00                         		even
00008A2C 00                         		even
00008A2C                            
00008A2C                            ; ===========================================================================
00008A2C                            ; ---------------------------------------------------------------------------
00008A2C                            ; Object 2A - doors (SBZ)
00008A2C                            ; ---------------------------------------------------------------------------
00008A2C                            
00008A2C                            Obj2A:					; XREF: Obj_Index
00008A2C 7000                       		moveq	#0,d0
00008A2E 1028 0024                  		move.b	$24(a0),d0
00008A32 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008A36 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008A3A                            ; ===========================================================================
00008A3A 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008A3C 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008A3E                            ; ===========================================================================
00008A3E                            
00008A3E                            Obj2A_Main:				; XREF: Obj2A_Index
00008A3E 5428 0024                  		addq.b	#2,$24(a0)
00008A42 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008A4A 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008A50 0028 0004 0001             		ori.b	#4,1(a0)
00008A56 117C 0008 0019             		move.b	#8,$19(a0)
00008A5C 117C 0004 0018             		move.b	#4,$18(a0)
00008A62                            
00008A62                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008A62 323C 0040                  		move.w	#$40,d1
00008A66 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008A6A 3038 D008                  		move.w	($FFFFD008).w,d0
00008A6E D041                       		add.w	d1,d0
00008A70 B068 0008                  		cmp.w	8(a0),d0
00008A74 6500                       		bcs.s	Obj2A_Animate
00008A76 9041                       		sub.w	d1,d0
00008A78 9041                       		sub.w	d1,d0
00008A7A B068 0008                  		cmp.w	8(a0),d0
00008A7E 6400                       		bcc.s	Obj2A_Animate
00008A80 D041                       		add.w	d1,d0
00008A82 B068 0008                  		cmp.w	8(a0),d0
00008A86 6400                       		bcc.s	loc_899A
00008A88 0828 0000 0022             		btst	#0,$22(a0)
00008A8E 6600                       		bne.s	Obj2A_Animate
00008A90 6000                       		bra.s	Obj2A_Open
00008A92                            ; ===========================================================================
00008A92                            
00008A92                            loc_899A:				; XREF: Obj2A_OpenShut
00008A92 0828 0000 0022             		btst	#0,$22(a0)
00008A98 6700                       		beq.s	Obj2A_Animate
00008A9A                            
00008A9A                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008A9A 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008AA0                            
00008AA0                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008AA0 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008AA6 6100 0000                  		bsr.w	AnimateSprite
00008AAA 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008AAE 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008AB0 323C 0011                  		move.w	#$11,d1
00008AB4 343C 0020                  		move.w	#$20,d2
00008AB8 3602                       		move.w	d2,d3
00008ABA 5243                       		addq.w	#1,d3
00008ABC 3828 0008                  		move.w	8(a0),d4
00008AC0 6100 0000                  		bsr.w	SolidObject
00008AC4                            
00008AC4                            Obj2A_MarkAsUsed:
00008AC4 6000 0000                  		bra.w	MarkObjGone
00008AC8                            ; ===========================================================================
00008AC8                            Ani_obj2A:
00008AC8                            	include "_anim\obj2A.asm"
00008AC8                            ; ---------------------------------------------------------------------------
00008AC8                            ; Animation script - doors (SBZ)
00008AC8                            ; ---------------------------------------------------------------------------
00008AC8 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008ACA 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008ACC 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008AD8 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008AE4                            		even
00008AE4                            		even
00008AE4                            
00008AE4                            ; ---------------------------------------------------------------------------
00008AE4                            ; Sprite mappings - doors (SBZ)
00008AE4                            ; ---------------------------------------------------------------------------
00008AE4                            Map_obj2A:
00008AE4                            	include "_maps\obj2A.asm"
00008AE4                            ; ---------------------------------------------------------------------------
00008AE4                            ; Sprite mappings - doors (SBZ)
00008AE4                            ; ---------------------------------------------------------------------------
00008AE4 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008AE8 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008AEC 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008AF0 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008AF4 0000                       		dc.w byte_8A56-Map_obj2A
00008AF6 02                         byte_89FE:	dc.b 2
00008AF7 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008AFC 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008B01 02                         byte_8A09:	dc.b 2
00008B02 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008B07 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008B0C 02                         byte_8A14:	dc.b 2
00008B0D D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008B12 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008B17 02                         byte_8A1F:	dc.b 2
00008B18 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008B1D 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008B22 02                         byte_8A2A:	dc.b 2
00008B23 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008B28 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008B2D 02                         byte_8A35:	dc.b 2
00008B2E CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008B33 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008B38 02                         byte_8A40:	dc.b 2
00008B39 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008B3E 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008B43 02                         byte_8A4B:	dc.b 2
00008B44 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008B49 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008B4E 02                         byte_8A56:	dc.b 2
00008B4F C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008B54 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008B5A 00                         		even
00008B5A 00                         		even
00008B5A                            
00008B5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008B5A                            
00008B5A                            
00008B5A                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008B5A 6100 0000                  		bsr.w	Obj44_SolidWall2
00008B5E 6700                       		beq.s	loc_8AA8
00008B60 6B00 0000                  		bmi.w	loc_8AC4
00008B64 4A40                       		tst.w	d0
00008B66 6700 0000                  		beq.w	loc_8A92
00008B6A 6B00                       		bmi.s	loc_8A7C
00008B6C 4A69 0010                  		tst.w	$10(a1)
00008B70 6B00                       		bmi.s	loc_8A92
00008B72 6000                       		bra.s	loc_8A82
00008B74                            ; ===========================================================================
00008B74                            
00008B74                            loc_8A7C:
00008B74 4A69 0010                  		tst.w	$10(a1)
00008B78 6A00                       		bpl.s	loc_8A92
00008B7A                            
00008B7A                            loc_8A82:
00008B7A 9169 0008                  		sub.w	d0,8(a1)
00008B7E 337C 0000 0014             		move.w	#0,$14(a1)
00008B84 337C 0000 0010             		move.w	#0,$10(a1)
00008B8A                            
00008B8A                            loc_8A92:
00008B8A 0829 0001 0022             		btst	#1,$22(a1)
00008B90 6600                       		bne.s	loc_8AB6
00008B92 08E9 0005 0022             		bset	#5,$22(a1)
00008B98 08E8 0005 0022             		bset	#5,$22(a0)
00008B9E 4E75                       		rts	
00008BA0                            ; ===========================================================================
00008BA0                            
00008BA0                            loc_8AA8:
00008BA0 0828 0005 0022             		btst	#5,$22(a0)
00008BA6 6700                       		beq.s	locret_8AC2
00008BA8 337C 0001 001C             		move.w	#1,$1C(a1)
00008BAE                            
00008BAE                            loc_8AB6:
00008BAE 08A8 0005 0022             		bclr	#5,$22(a0)
00008BB4 08A9 0005 0022             		bclr	#5,$22(a1)
00008BBA                            
00008BBA                            locret_8AC2:
00008BBA 4E75                       		rts	
00008BBC                            ; ===========================================================================
00008BBC                            
00008BBC                            loc_8AC4:
00008BBC 4A69 0012                  		tst.w	$12(a1)
00008BC0 6A00                       		bpl.s	locret_8AD8
00008BC2 4A43                       		tst.w	d3
00008BC4 6A00                       		bpl.s	locret_8AD8
00008BC6 9769 000C                  		sub.w	d3,$C(a1)
00008BCA 337C 0000 0012             		move.w	#0,$12(a1)
00008BD0                            
00008BD0                            locret_8AD8:
00008BD0 4E75                       		rts	
00008BD2                            ; End of function Obj44_SolidWall
00008BD2                            
00008BD2                            
00008BD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BD2                            
00008BD2                            
00008BD2                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008BD2 43F8 D000                  		lea	($FFFFD000).w,a1
00008BD6 3029 0008                  		move.w	8(a1),d0
00008BDA 9068 0008                  		sub.w	8(a0),d0
00008BDE D041                       		add.w	d1,d0
00008BE0 6B00                       		bmi.s	loc_8B48
00008BE2 3601                       		move.w	d1,d3
00008BE4 D643                       		add.w	d3,d3
00008BE6 B043                       		cmp.w	d3,d0
00008BE8 6200                       		bhi.s	loc_8B48
00008BEA 1629 0016                  		move.b	$16(a1),d3
00008BEE 4883                       		ext.w	d3
00008BF0 D443                       		add.w	d3,d2
00008BF2 3629 000C                  		move.w	$C(a1),d3
00008BF6 9668 000C                  		sub.w	$C(a0),d3
00008BFA D642                       		add.w	d2,d3
00008BFC 6B00                       		bmi.s	loc_8B48
00008BFE 3802                       		move.w	d2,d4
00008C00 D844                       		add.w	d4,d4
00008C02 B644                       		cmp.w	d4,d3
00008C04 6400                       		bcc.s	loc_8B48
00008C06 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008C0A 6B00                       		bmi.s	loc_8B48
00008C0C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008C12 6400                       		bcc.s	loc_8B48
00008C14 4A78 FE08                  		tst.w	($FFFFFE08).w
00008C18 6600                       		bne.s	loc_8B48
00008C1A 3A00                       		move.w	d0,d5
00008C1C B240                       		cmp.w	d0,d1
00008C1E 6400                       		bcc.s	loc_8B30
00008C20 D241                       		add.w	d1,d1
00008C22 9041                       		sub.w	d1,d0
00008C24 3A00                       		move.w	d0,d5
00008C26 4445                       		neg.w	d5
00008C28                            
00008C28                            loc_8B30:
00008C28 3203                       		move.w	d3,d1
00008C2A B443                       		cmp.w	d3,d2
00008C2C 6400                       		bcc.s	loc_8B3C
00008C2E 9644                       		sub.w	d4,d3
00008C30 3203                       		move.w	d3,d1
00008C32 4441                       		neg.w	d1
00008C34                            
00008C34                            loc_8B3C:
00008C34 BA41                       		cmp.w	d1,d5
00008C36 6200                       		bhi.s	loc_8B44
00008C38 7801                       		moveq	#1,d4
00008C3A 4E75                       		rts	
00008C3C                            ; ===========================================================================
00008C3C                            
00008C3C                            loc_8B44:
00008C3C 78FF                       		moveq	#-1,d4
00008C3E 4E75                       		rts	
00008C40                            ; ===========================================================================
00008C40                            
00008C40                            loc_8B48:
00008C40 7800                       		moveq	#0,d4
00008C42 4E75                       		rts	
00008C44                            ; End of function Obj44_SolidWall2
00008C44                            
00008C44                            ; ===========================================================================
00008C44                            ; ---------------------------------------------------------------------------
00008C44                            ; Object 1E - Ball Hog enemy (SBZ)
00008C44                            ; ---------------------------------------------------------------------------
00008C44                            
00008C44                            Obj1E:					; XREF: Obj_Index
00008C44 7000                       		moveq	#0,d0
00008C46 1028 0024                  		move.b	$24(a0),d0
00008C4A 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00008C4E 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00008C52                            ; ===========================================================================
00008C52 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00008C54 0000                       		dc.w Obj1E_Action-Obj1E_Index
00008C56                            ; ===========================================================================
00008C56                            
00008C56                            Obj1E_Main:				; XREF: Obj1E_Index
00008C56 117C 0013 0016             		move.b	#$13,$16(a0)
00008C5C 117C 0008 0017             		move.b	#8,$17(a0)
00008C62 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008C6A 317C 2302 0002             		move.w	#$2302,2(a0)
00008C70 117C 0004 0001             		move.b	#4,1(a0)
00008C76 117C 0004 0018             		move.b	#4,$18(a0)
00008C7C 117C 0005 0020             		move.b	#5,$20(a0)
00008C82 117C 000C 0019             		move.b	#$C,$19(a0)
00008C88 6100 0000                  		bsr.w	ObjectFall
00008C8C 4EB9 0000 0000             		jsr	ObjHitFloor
00008C92 4A41                       		tst.w	d1
00008C94 6A00                       		bpl.s	locret_8BAC
00008C96 D368 000C                  		add.w	d1,$C(a0)
00008C9A 317C 0000 0012             		move.w	#0,$12(a0)
00008CA0 5428 0024                  		addq.b	#2,$24(a0)
00008CA4                            
00008CA4                            locret_8BAC:
00008CA4 4E75                       		rts	
00008CA6                            ; ===========================================================================
00008CA6                            
00008CA6                            Obj1E_Action:				; XREF: Obj1E_Index
00008CA6 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00008CAC 6100 0000                  		bsr.w	AnimateSprite
00008CB0 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00008CB6 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00008CB8 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00008CBC 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00008CBE 6000                       		bra.s	Obj1E_MarkAsGone
00008CC0                            ; ===========================================================================
00008CC0                            
00008CC0                            Obj1E_SetBall:				; XREF: Obj1E_Action
00008CC0 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00008CC4                            
00008CC4                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00008CC4 6000 0000                  		bra.w	MarkObjGone
00008CC8                            ; ===========================================================================
00008CC8                            
00008CC8                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00008CC8 117C 0001 0032             		move.b	#1,$32(a0)
00008CCE 6100 0000                  		bsr.w	SingleObjLoad
00008CD2 6600                       		bne.s	loc_8C1A
00008CD4 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00008CD8 3368 0008 0008             		move.w	8(a0),8(a1)
00008CDE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008CE4 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00008CEA 337C 0000 0012             		move.w	#0,$12(a1)
00008CF0 70FC                       		moveq	#-4,d0
00008CF2 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00008CF8 6700                       		beq.s	loc_8C0A	; if not, branch
00008CFA 4440                       		neg.w	d0
00008CFC 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00008D00                            
00008D00                            loc_8C0A:
00008D00 D169 0008                  		add.w	d0,8(a1)
00008D04 0669 000C 000C             		addi.w	#$C,$C(a1)
00008D0A 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00008D10                            
00008D10                            loc_8C1A:
00008D10 60B2                       		bra.s	Obj1E_MarkAsGone
00008D12                            ; ===========================================================================
00008D12                            ; ---------------------------------------------------------------------------
00008D12                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00008D12                            ; ---------------------------------------------------------------------------
00008D12                            
00008D12                            Obj20:					; XREF: Obj_Index
00008D12 7000                       		moveq	#0,d0
00008D14 1028 0024                  		move.b	$24(a0),d0
00008D18 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00008D1C 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00008D20                            ; ===========================================================================
00008D20 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00008D22 0000                       		dc.w Obj20_Bounce-Obj20_Index
00008D24                            ; ===========================================================================
00008D24                            
00008D24                            Obj20_Main:				; XREF: Obj20_Index
00008D24 5428 0024                  		addq.b	#2,$24(a0)
00008D28 117C 0007 0016             		move.b	#7,$16(a0)
00008D2E 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008D36 317C 2302 0002             		move.w	#$2302,2(a0)
00008D3C 117C 0004 0001             		move.b	#4,1(a0)
00008D42 117C 0003 0018             		move.b	#3,$18(a0)
00008D48 117C 0087 0020             		move.b	#$87,$20(a0)
00008D4E 117C 0008 0019             		move.b	#8,$19(a0)
00008D54 7000                       		moveq	#0,d0
00008D56 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00008D5A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00008D5E 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00008D62 117C 0004 001A             		move.b	#4,$1A(a0)
00008D68                            
00008D68                            Obj20_Bounce:				; XREF: Obj20_Index
00008D68 4EB9 0000 0000             		jsr	ObjectFall
00008D6E 4A68 0012                  		tst.w	$12(a0)
00008D72 6B00                       		bmi.s	Obj20_ChkExplode
00008D74 4EB9 0000 0000             		jsr	ObjHitFloor
00008D7A 4A41                       		tst.w	d1
00008D7C 6A00                       		bpl.s	Obj20_ChkExplode
00008D7E D368 000C                  		add.w	d1,$C(a0)
00008D82 317C FD00 0012             		move.w	#-$300,$12(a0)
00008D88 4A03                       		tst.b	d3
00008D8A 6700                       		beq.s	Obj20_ChkExplode
00008D8C 6B00                       		bmi.s	loc_8CA4
00008D8E 4A68 0010                  		tst.w	$10(a0)
00008D92 6A00                       		bpl.s	Obj20_ChkExplode
00008D94 4468 0010                  		neg.w	$10(a0)
00008D98 6000                       		bra.s	Obj20_ChkExplode
00008D9A                            ; ===========================================================================
00008D9A                            
00008D9A                            loc_8CA4:				; XREF: Obj20_Bounce
00008D9A 4A68 0010                  		tst.w	$10(a0)
00008D9E 6B00                       		bmi.s	Obj20_ChkExplode
00008DA0 4468 0010                  		neg.w	$10(a0)
00008DA4                            
00008DA4                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00008DA4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00008DA8 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00008DAA 10BC 0024                  		move.b	#$24,0(a0)
00008DAE 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00008DB2 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00008DB8 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00008DBC                            ; ===========================================================================
00008DBC                            
00008DBC                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00008DBC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008DC0 6A00                       		bpl.s	Obj20_Display
00008DC2 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00008DC8 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00008DCE                            
00008DCE                            Obj20_Display:
00008DCE 6100 0000                  		bsr.w	DisplaySprite
00008DD2 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008DD6 0640 00E0                  		addi.w	#$E0,d0
00008DDA B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00008DDE 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00008DE2 4E75                       		rts	
00008DE4                            ; ===========================================================================
00008DE4                            ; ---------------------------------------------------------------------------
00008DE4                            ; Object 24 - explosion	from a destroyed monitor
00008DE4                            ; ---------------------------------------------------------------------------
00008DE4                            
00008DE4                            Obj24:					; XREF: Obj_Index
00008DE4 7000                       		moveq	#0,d0
00008DE6 1028 0024                  		move.b	$24(a0),d0
00008DEA 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00008DEE 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00008DF2                            ; ===========================================================================
00008DF2 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00008DF4 0000                       		dc.w Obj24_Animate-Obj24_Index
00008DF6                            ; ===========================================================================
00008DF6                            
00008DF6                            Obj24_Main:				; XREF: Obj24_Index
00008DF6 5428 0024                  		addq.b	#2,$24(a0)
00008DFA 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00008E02 317C 041C 0002             		move.w	#$41C,2(a0)
00008E08 117C 0004 0001             		move.b	#4,1(a0)
00008E0E 117C 0001 0018             		move.b	#1,$18(a0)
00008E14 117C 0000 0020             		move.b	#0,$20(a0)
00008E1A 117C 000C 0019             		move.b	#$C,$19(a0)
00008E20 117C 0009 001E             		move.b	#9,$1E(a0)
00008E26 117C 0000 001A             		move.b	#0,$1A(a0)
00008E2C 303C 00A5                  		move.w	#$A5,d0
00008E30 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play explosion sound
00008E36                            
00008E36                            Obj24_Animate:				; XREF: Obj24_Index
00008E36 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008E3A 6A00                       		bpl.s	Obj24_Display
00008E3C 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00008E42 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00008E46 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00008E4C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00008E50                            
00008E50                            Obj24_Display:
00008E50 6000 0000                  		bra.w	DisplaySprite
00008E54                            ; ===========================================================================
00008E54                            ; ---------------------------------------------------------------------------
00008E54                            ; Object 27 - explosion	from a destroyed enemy
00008E54                            ; ---------------------------------------------------------------------------
00008E54                            
00008E54                            Obj27:					; XREF: Obj_Index
00008E54 7000                       		moveq	#0,d0
00008E56 1028 0024                  		move.b	$24(a0),d0
00008E5A 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00008E5E 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00008E62                            ; ===========================================================================
00008E62 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00008E64 0000                       		dc.w Obj27_Main-Obj27_Index
00008E66 0000                       		dc.w Obj27_Animate-Obj27_Index
00008E68                            ; ===========================================================================
00008E68                            
00008E68                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00008E68 5428 0024                  		addq.b	#2,$24(a0)
00008E6C 6100 0000                  		bsr.w	SingleObjLoad
00008E70 6600                       		bne.s	Obj27_Main
00008E72 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00008E76 3368 0008 0008             		move.w	8(a0),8(a1)
00008E7C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008E82 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00008E88                            
00008E88                            Obj27_Main:				; XREF: Obj27_Index
00008E88 5428 0024                  		addq.b	#2,$24(a0)
00008E8C 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00008E94 317C 05A0 0002             		move.w	#$5A0,2(a0)
00008E9A 117C 0004 0001             		move.b	#4,1(a0)
00008EA0 117C 0001 0018             		move.b	#1,$18(a0)
00008EA6 117C 0000 0020             		move.b	#0,$20(a0)
00008EAC 117C 000C 0019             		move.b	#$C,$19(a0)
00008EB2 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00008EB8 117C 0000 001A             		move.b	#0,$1A(a0)
00008EBE 303C 00C1                  		move.w	#$C1,d0
00008EC2 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00008EC8                            
00008EC8                            Obj27_Animate:				; XREF: Obj27_Index
00008EC8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008ECC 6A00                       		bpl.s	Obj27_Display
00008ECE 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00008ED4 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00008ED8 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00008EDE 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00008EE2                            
00008EE2                            Obj27_Display:
00008EE2 6000 0000                  		bra.w	DisplaySprite
00008EE6                            ; ===========================================================================
00008EE6                            ; ---------------------------------------------------------------------------
00008EE6                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00008EE6                            ; ---------------------------------------------------------------------------
00008EE6                            
00008EE6                            Obj3F:					; XREF: Obj_Index
00008EE6 7000                       		moveq	#0,d0
00008EE8 1028 0024                  		move.b	$24(a0),d0
00008EEC 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00008EF0 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00008EF4                            ; ===========================================================================
00008EF4 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00008EF6 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
00008EF8                            ; ===========================================================================
00008EF8                            
00008EF8                            Obj3F_Main:				; XREF: Obj3F_Index
00008EF8 5428 0024                  		addq.b	#2,$24(a0)
00008EFC 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00008F04 317C 05A0 0002             		move.w	#$5A0,2(a0)
00008F0A 117C 0004 0001             		move.b	#4,1(a0)
00008F10 117C 0001 0018             		move.b	#1,$18(a0)
00008F16 117C 0000 0020             		move.b	#0,$20(a0)
00008F1C 117C 000C 0019             		move.b	#$C,$19(a0)
00008F22 117C 0007 001E             		move.b	#7,$1E(a0)
00008F28 117C 0000 001A             		move.b	#0,$1A(a0)
00008F2E 303C 00C4                  		move.w	#$C4,d0
00008F32 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00008F38                            ; ===========================================================================
00008F38                            Ani_obj1E:
00008F38                            	include "_anim\obj1E.asm"
00008F38                            ; ---------------------------------------------------------------------------
00008F38                            ; Animation script - doors (SBZ)
00008F38                            ; ---------------------------------------------------------------------------
00008F38 0000                       		dc.w byte_8E4A-Ani_obj1E
00008F3A 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00008F52 00                         		even
00008F52 00                         		even
00008F52                            
00008F52                            ; ---------------------------------------------------------------------------
00008F52                            ; Sprite mappings - Ball Hog enemy (SBZ)
00008F52                            ; ---------------------------------------------------------------------------
00008F52                            Map_obj1E:
00008F52                            	include "_maps\obj1E.asm"
00008F52                            ; ---------------------------------------------------------------------------
00008F52                            ; Sprite mappings - Ball Hog enemy (SBZ)
00008F52                            ; ---------------------------------------------------------------------------
00008F52 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00008F56 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00008F5A 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00008F5E 02                         byte_8E6E:	dc.b 2
00008F5F EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00008F64 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00008F69 02                         byte_8E79:	dc.b 2
00008F6A EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00008F6F FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00008F74 02                         byte_8E84:	dc.b 2
00008F75 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00008F7A 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00008F7F 02                         byte_8E8F:	dc.b 2
00008F80 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00008F85 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00008F8A 01                         byte_8E9A:	dc.b 1
00008F8B F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
00008F90 01                         byte_8EA0:	dc.b 1
00008F91 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00008F96                            		even
00008F96                            		even
00008F96                            
00008F96                            ; ---------------------------------------------------------------------------
00008F96                            ; Sprite mappings - explosion
00008F96                            ; ---------------------------------------------------------------------------
00008F96                            Map_obj24:
00008F96                            	include "_maps\obj24.asm"
00008F96                            ; ---------------------------------------------------------------------------
00008F96                            ; Sprite mappings - explosion
00008F96                            ; ---------------------------------------------------------------------------
00008F96 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00008F9A 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00008F9E 01                         byte_8EAE:	dc.b 1
00008F9F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00008FA4 01                         byte_8EB4:	dc.b 1
00008FA5 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00008FAA 01                         byte_8EBA:	dc.b 1
00008FAB F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00008FB0 01                         byte_8EC0:	dc.b 1
00008FB1 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00008FB6                            		even
00008FB6                            		even
00008FB6                            
00008FB6                            ; ---------------------------------------------------------------------------
00008FB6                            ; Sprite mappings - explosion
00008FB6                            ; ---------------------------------------------------------------------------
00008FB6 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00008FBA 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00008FBE 0000                       		dc.w byte_8EF7-Map_obj27
00008FC0 01                         byte_8ED0:	dc.b 1
00008FC1 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00008FC6 01                         byte_8ED6:	dc.b 1
00008FC7 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00008FCC 01                         byte_8EDC:	dc.b 1
00008FCD F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00008FD2 04                         byte_8EE2:	dc.b 4
00008FD3 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00008FD8 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00008FDD 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00008FE2 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00008FE7 04                         byte_8EF7:	dc.b 4
00008FE8 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00008FED EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00008FF2 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00008FF7 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00008FFC                            		even
00008FFC                            ; ---------------------------------------------------------------------------
00008FFC                            ; Sprite mappings - explosion from when	a boss is destroyed
00008FFC                            ; ---------------------------------------------------------------------------
00008FFC FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00008FFE 0000                       		dc.w byte_8F16-Map_obj3F
00009000 0000                       		dc.w byte_8F1C-Map_obj3F
00009002 FFD6                       		dc.w byte_8EE2-Map_obj3F
00009004 FFEB                       		dc.w byte_8EF7-Map_obj3F
00009006 01                         byte_8F16:	dc.b 1
00009007 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000900C 01                         byte_8F1C:	dc.b 1
0000900D F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009012                            		even
00009012                            ; ===========================================================================
00009012                            ; ---------------------------------------------------------------------------
00009012                            ; Object 28 - animals
00009012                            ; ---------------------------------------------------------------------------
00009012                            
00009012                            Obj28:					; XREF: Obj_Index
00009012 7000                       		moveq	#0,d0
00009014 1028 0024                  		move.b	$24(a0),d0
00009018 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000901C 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009020                            ; ===========================================================================
00009020 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009024 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009028 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000902C 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009030 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009034 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009038 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000903C 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009040 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009044 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009048 0000                       		dc.w loc_92D6-Obj28_Index
0000904A                            
0000904A 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00009056                            
00009056 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000905A 0000 0000                  		dc.l Map_obj28
0000905E FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009062 0000 0000                  		dc.l Map_obj28a		; mappings address
00009066 FE80 FD00                  		dc.w $FE80, $FD00
0000906A 0000 0000                  		dc.l Map_obj28
0000906E FEC0 FE80                  		dc.w $FEC0, $FE80
00009072 0000 0000                  		dc.l Map_obj28a
00009076 FE40 FD00                  		dc.w $FE40, $FD00
0000907A 0000 0000                  		dc.l Map_obj28b
0000907E FD00 FC00                  		dc.w $FD00, $FC00
00009082 0000 0000                  		dc.l Map_obj28a
00009086 FD80 FC80                  		dc.w $FD80, $FC80
0000908A 0000 0000                  		dc.l Map_obj28b
0000908E                            
0000908E FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000909E FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000090AE FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000090BA                            
000090BA 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000090CE 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
000090E2 0000 0000                  		dc.l Map_obj28b
000090E6                            
000090E6 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
000090F8 0565 05B3                  		dc.w $565, $5B3
000090FC                            ; ===========================================================================
000090FC                            
000090FC                            Obj28_Ending:				; XREF: Obj28_Index
000090FC 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009100 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009104 7000                       		moveq	#0,d0
00009106 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000910A D040                       		add.w	d0,d0		; multiply d0 by 2
0000910C 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009110 0440 0014                  		subi.w	#$14,d0
00009114 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000911A D040                       		add.w	d0,d0
0000911C 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009122 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009126 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000912C 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009132 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009138 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000913E 117C 000C 0016             		move.b	#$C,$16(a0)
00009144 117C 0004 0001             		move.b	#4,1(a0)
0000914A 08E8 0000 0001             		bset	#0,1(a0)
00009150 117C 0006 0018             		move.b	#6,$18(a0)
00009156 117C 0008 0019             		move.b	#8,$19(a0)
0000915C 117C 0007 001E             		move.b	#7,$1E(a0)
00009162 6000 0000                  		bra.w	DisplaySprite
00009166                            ; ===========================================================================
00009166                            
00009166                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009166 5428 0024                  		addq.b	#2,$24(a0)
0000916A 6100 9848                  		bsr.w	RandomNumber
0000916E 0240 0001                  		andi.w	#1,d0
00009172 7200                       		moveq	#0,d1
00009174 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009178 D241                       		add.w	d1,d1
0000917A D240                       		add.w	d0,d1
0000917C 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
00009180 1031 1000                  		move.b	(a1,d1.w),d0
00009184 1140 0030                  		move.b	d0,$30(a0)
00009188 E748                       		lsl.w	#3,d0
0000918A 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000918E D2C0                       		adda.w	d0,a1
00009190 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009194 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009198 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000919C 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
000091A2 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
000091A8 6700                       		beq.s	loc_90C0	; if yes, branch
000091AA 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000091B0                            
000091B0                            loc_90C0:
000091B0 117C 000C 0016             		move.b	#$C,$16(a0)
000091B6 117C 0004 0001             		move.b	#4,1(a0)
000091BC 08E8 0000 0001             		bset	#0,1(a0)
000091C2 117C 0006 0018             		move.b	#6,$18(a0)
000091C8 117C 0008 0019             		move.b	#8,$19(a0)
000091CE 117C 0007 001E             		move.b	#7,$1E(a0)
000091D4 117C 0002 001A             		move.b	#2,$1A(a0)
000091DA 317C FC00 0012             		move.w	#-$400,$12(a0)
000091E0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000091E4 6600                       		bne.s	loc_911C
000091E6 6100 0000                  		bsr.w	SingleObjLoad
000091EA 6600                       		bne.s	Obj28_Display
000091EC 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000091F0 3368 0008 0008             		move.w	8(a0),8(a1)
000091F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000091FC 3028 003E                  		move.w	$3E(a0),d0
00009200 E248                       		lsr.w	#1,d0
00009202 1340 001A                  		move.b	d0,$1A(a1)
00009206                            
00009206                            Obj28_Display:
00009206 6000 0000                  		bra.w	DisplaySprite
0000920A                            ; ===========================================================================
0000920A                            
0000920A                            loc_911C:
0000920A 117C 0012 0024             		move.b	#$12,$24(a0)
00009210 4268 0010                  		clr.w	$10(a0)
00009214 6000 0000                  		bra.w	DisplaySprite
00009218                            ; ===========================================================================
00009218                            
00009218                            loc_912A:				; XREF: Obj28_Index
00009218 4A28 0001                  		tst.b	1(a0)
0000921C 6A00 0000                  		bpl.w	DeleteObject
00009220 6100 0000                  		bsr.w	ObjectFall
00009224 4A68 0012                  		tst.w	$12(a0)
00009228 6B00                       		bmi.s	loc_9180
0000922A 4EB9 0000 0000             		jsr	ObjHitFloor
00009230 4A41                       		tst.w	d1
00009232 6A00                       		bpl.s	loc_9180
00009234 D368 000C                  		add.w	d1,$C(a0)
00009238 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000923E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009244 117C 0001 001A             		move.b	#1,$1A(a0)
0000924A 1028 0030                  		move.b	$30(a0),d0
0000924E D000                       		add.b	d0,d0
00009250 5800                       		addq.b	#4,d0
00009252 1140 0024                  		move.b	d0,$24(a0)
00009256 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000925A 6700                       		beq.s	loc_9180
0000925C 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009262 6700                       		beq.s	loc_9180
00009264 4468 0010                  		neg.w	$10(a0)
00009268 0868 0000 0001             		bchg	#0,1(a0)
0000926E                            
0000926E                            loc_9180:
0000926E 6000 0000                  		bra.w	DisplaySprite
00009272                            ; ===========================================================================
00009272                            
00009272                            loc_9184:				; XREF: Obj28_Index
00009272 6100 0000                  		bsr.w	ObjectFall
00009276 117C 0001 001A             		move.b	#1,$1A(a0)
0000927C 4A68 0012                  		tst.w	$12(a0)
00009280 6B00                       		bmi.s	loc_91AE
00009282 117C 0000 001A             		move.b	#0,$1A(a0)
00009288 4EB9 0000 0000             		jsr	ObjHitFloor
0000928E 4A41                       		tst.w	d1
00009290 6A00                       		bpl.s	loc_91AE
00009292 D368 000C                  		add.w	d1,$C(a0)
00009296 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000929C                            
0000929C                            loc_91AE:
0000929C 4A28 0028                  		tst.b	$28(a0)
000092A0 6600                       		bne.s	loc_9224
000092A2 4A28 0001                  		tst.b	1(a0)
000092A6 6A00 0000                  		bpl.w	DeleteObject
000092AA 6000 0000                  		bra.w	DisplaySprite
000092AE                            ; ===========================================================================
000092AE                            
000092AE                            loc_91C0:				; XREF: Obj28_Index
000092AE 6100 0000                  		bsr.w	SpeedToPos
000092B2 0668 0018 0012             		addi.w	#$18,$12(a0)
000092B8 4A68 0012                  		tst.w	$12(a0)
000092BC 6B00                       		bmi.s	loc_91FC
000092BE 4EB9 0000 0000             		jsr	ObjHitFloor
000092C4 4A41                       		tst.w	d1
000092C6 6A00                       		bpl.s	loc_91FC
000092C8 D368 000C                  		add.w	d1,$C(a0)
000092CC 3168 0034 0012             		move.w	$34(a0),$12(a0)
000092D2 4A28 0028                  		tst.b	$28(a0)
000092D6 6700                       		beq.s	loc_91FC
000092D8 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
000092DE 6700                       		beq.s	loc_91FC
000092E0 4468 0010                  		neg.w	$10(a0)
000092E4 0868 0000 0001             		bchg	#0,1(a0)
000092EA                            
000092EA                            loc_91FC:
000092EA 5328 001E                  		subq.b	#1,$1E(a0)
000092EE 6A00                       		bpl.s	loc_9212
000092F0 117C 0001 001E             		move.b	#1,$1E(a0)
000092F6 5228 001A                  		addq.b	#1,$1A(a0)
000092FA 0228 0001 001A             		andi.b	#1,$1A(a0)
00009300                            
00009300                            loc_9212:
00009300 4A28 0028                  		tst.b	$28(a0)
00009304 6600                       		bne.s	loc_9224
00009306 4A28 0001                  		tst.b	1(a0)
0000930A 6A00 0000                  		bpl.w	DeleteObject
0000930E 6000 0000                  		bra.w	DisplaySprite
00009312                            ; ===========================================================================
00009312                            
00009312                            loc_9224:				; XREF: Obj28_Index
00009312 3028 0008                  		move.w	8(a0),d0
00009316 9078 D008                  		sub.w	($FFFFD008).w,d0
0000931A 6500                       		bcs.s	loc_923C
0000931C 0440 0180                  		subi.w	#$180,d0
00009320 6A00                       		bpl.s	loc_923C
00009322 4A28 0001                  		tst.b	1(a0)
00009326 6A00 0000                  		bpl.w	DeleteObject
0000932A                            
0000932A                            loc_923C:
0000932A 6000 0000                  		bra.w	DisplaySprite
0000932E                            ; ===========================================================================
0000932E                            
0000932E                            loc_9240:				; XREF: Obj28_Index
0000932E 4A28 0001                  		tst.b	1(a0)
00009332 6A00 0000                  		bpl.w	DeleteObject
00009336 5368 0036                  		subq.w	#1,$36(a0)
0000933A 6600 0000                  		bne.w	loc_925C
0000933E 117C 0002 0024             		move.b	#2,$24(a0)
00009344 117C 0003 0018             		move.b	#3,$18(a0)
0000934A                            
0000934A                            loc_925C:
0000934A 6000 0000                  		bra.w	DisplaySprite
0000934E                            ; ===========================================================================
0000934E                            
0000934E                            loc_9260:				; XREF: Obj28_Index
0000934E 6100 0000                  		bsr.w	sub_9404
00009352 6400                       		bcc.s	loc_927C
00009354 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000935A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009360 117C 000E 0024             		move.b	#$E,$24(a0)
00009366 6000 FF46                  		bra.w	loc_91C0
0000936A                            ; ===========================================================================
0000936A                            
0000936A                            loc_927C:
0000936A 6000 FFA6                  		bra.w	loc_9224
0000936E                            ; ===========================================================================
0000936E                            
0000936E                            loc_9280:				; XREF: Obj28_Index
0000936E 6100 0000                  		bsr.w	sub_9404
00009372 6A00                       		bpl.s	loc_92B6
00009374 4268 0010                  		clr.w	$10(a0)
00009378 4268 0032                  		clr.w	$32(a0)
0000937C 6100 0000                  		bsr.w	SpeedToPos
00009380 0668 0018 0012             		addi.w	#$18,$12(a0)
00009386 6100 0000                  		bsr.w	loc_93C4
0000938A 6100 0000                  		bsr.w	loc_93EC
0000938E 5328 001E                  		subq.b	#1,$1E(a0)
00009392 6A00                       		bpl.s	loc_92B6
00009394 117C 0001 001E             		move.b	#1,$1E(a0)
0000939A 5228 001A                  		addq.b	#1,$1A(a0)
0000939E 0228 0001 001A             		andi.b	#1,$1A(a0)
000093A4                            
000093A4                            loc_92B6:
000093A4 6000 FF6C                  		bra.w	loc_9224
000093A8                            ; ===========================================================================
000093A8                            
000093A8                            loc_92BA:				; XREF: Obj28_Index
000093A8 6100 0000                  		bsr.w	sub_9404
000093AC 6A00                       		bpl.s	loc_9310
000093AE 3168 0032 0010             		move.w	$32(a0),$10(a0)
000093B4 3168 0034 0012             		move.w	$34(a0),$12(a0)
000093BA 117C 0004 0024             		move.b	#4,$24(a0)
000093C0 6000 FEB0                  		bra.w	loc_9184
000093C4                            ; ===========================================================================
000093C4                            
000093C4                            loc_92D6:				; XREF: Obj28_Index
000093C4 6100 0000                  		bsr.w	ObjectFall
000093C8 117C 0001 001A             		move.b	#1,$1A(a0)
000093CE 4A68 0012                  		tst.w	$12(a0)
000093D2 6B00                       		bmi.s	loc_9310
000093D4 117C 0000 001A             		move.b	#0,$1A(a0)
000093DA 4EB9 0000 0000             		jsr	ObjHitFloor
000093E0 4A41                       		tst.w	d1
000093E2 6A00                       		bpl.s	loc_9310
000093E4 4628 0029                  		not.b	$29(a0)
000093E8 6600                       		bne.s	loc_9306
000093EA 4468 0010                  		neg.w	$10(a0)
000093EE 0868 0000 0001             		bchg	#0,1(a0)
000093F4                            
000093F4                            loc_9306:
000093F4 D368 000C                  		add.w	d1,$C(a0)
000093F8 3168 0034 0012             		move.w	$34(a0),$12(a0)
000093FE                            
000093FE                            loc_9310:
000093FE 6000 FF12                  		bra.w	loc_9224
00009402                            ; ===========================================================================
00009402                            
00009402                            loc_9314:				; XREF: Obj28_Index
00009402 6100 0000                  		bsr.w	sub_9404
00009406 6A00                       		bpl.s	loc_932E
00009408 4268 0010                  		clr.w	$10(a0)
0000940C 4268 0032                  		clr.w	$32(a0)
00009410 6100 0000                  		bsr.w	ObjectFall
00009414 6100 0000                  		bsr.w	loc_93C4
00009418 6100 0000                  		bsr.w	loc_93EC
0000941C                            
0000941C                            loc_932E:
0000941C 6000 FEF4                  		bra.w	loc_9224
00009420                            ; ===========================================================================
00009420                            
00009420                            loc_9332:				; XREF: Obj28_Index
00009420 6100 0000                  		bsr.w	sub_9404
00009424 6A00                       		bpl.s	loc_936C
00009426 6100 0000                  		bsr.w	ObjectFall
0000942A 117C 0001 001A             		move.b	#1,$1A(a0)
00009430 4A68 0012                  		tst.w	$12(a0)
00009434 6B00                       		bmi.s	loc_936C
00009436 117C 0000 001A             		move.b	#0,$1A(a0)
0000943C 4EB9 0000 0000             		jsr	ObjHitFloor
00009442 4A41                       		tst.w	d1
00009444 6A00                       		bpl.s	loc_936C
00009446 4468 0010                  		neg.w	$10(a0)
0000944A 0868 0000 0001             		bchg	#0,1(a0)
00009450 D368 000C                  		add.w	d1,$C(a0)
00009454 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000945A                            
0000945A                            loc_936C:
0000945A 6000 FEB6                  		bra.w	loc_9224
0000945E                            ; ===========================================================================
0000945E                            
0000945E                            loc_9370:				; XREF: Obj28_Index
0000945E 6100 0000                  		bsr.w	sub_9404
00009462 6A00                       		bpl.s	loc_93C0
00009464 6100 0000                  		bsr.w	SpeedToPos
00009468 0668 0018 0012             		addi.w	#$18,$12(a0)
0000946E 4A68 0012                  		tst.w	$12(a0)
00009472 6B00                       		bmi.s	loc_93AA
00009474 4EB9 0000 0000             		jsr	ObjHitFloor
0000947A 4A41                       		tst.w	d1
0000947C 6A00                       		bpl.s	loc_93AA
0000947E 4628 0029                  		not.b	$29(a0)
00009482 6600                       		bne.s	loc_93A0
00009484 4468 0010                  		neg.w	$10(a0)
00009488 0868 0000 0001             		bchg	#0,1(a0)
0000948E                            
0000948E                            loc_93A0:
0000948E D368 000C                  		add.w	d1,$C(a0)
00009492 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009498                            
00009498                            loc_93AA:
00009498 5328 001E                  		subq.b	#1,$1E(a0)
0000949C 6A00                       		bpl.s	loc_93C0
0000949E 117C 0001 001E             		move.b	#1,$1E(a0)
000094A4 5228 001A                  		addq.b	#1,$1A(a0)
000094A8 0228 0001 001A             		andi.b	#1,$1A(a0)
000094AE                            
000094AE                            loc_93C0:
000094AE 6000 FE62                  		bra.w	loc_9224
000094B2                            ; ===========================================================================
000094B2                            
000094B2                            loc_93C4:
000094B2 117C 0001 001A             		move.b	#1,$1A(a0)
000094B8 4A68 0012                  		tst.w	$12(a0)
000094BC 6B00                       		bmi.s	locret_93EA
000094BE 117C 0000 001A             		move.b	#0,$1A(a0)
000094C4 4EB9 0000 0000             		jsr	ObjHitFloor
000094CA 4A41                       		tst.w	d1
000094CC 6A00                       		bpl.s	locret_93EA
000094CE D368 000C                  		add.w	d1,$C(a0)
000094D2 3168 0034 0012             		move.w	$34(a0),$12(a0)
000094D8                            
000094D8                            locret_93EA:
000094D8 4E75                       		rts	
000094DA                            ; ===========================================================================
000094DA                            
000094DA                            loc_93EC:
000094DA 08E8 0000 0001             		bset	#0,1(a0)
000094E0 3028 0008                  		move.w	8(a0),d0
000094E4 9078 D008                  		sub.w	($FFFFD008).w,d0
000094E8 6400                       		bcc.s	locret_9402
000094EA 08A8 0000 0001             		bclr	#0,1(a0)
000094F0                            
000094F0                            locret_9402:
000094F0 4E75                       		rts	
000094F2                            
000094F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000094F2                            
000094F2                            
000094F2                            sub_9404:
000094F2 3038 D008                  		move.w	($FFFFD008).w,d0
000094F6 9068 0008                  		sub.w	8(a0),d0
000094FA 0440 00B8                  		subi.w	#$B8,d0
000094FE 4E75                       		rts	
00009500                            ; End of function sub_9404
00009500                            
00009500                            ; ===========================================================================
00009500                            ; ---------------------------------------------------------------------------
00009500                            ; Object 29 - points that appear when you destroy something
00009500                            ; ---------------------------------------------------------------------------
00009500                            
00009500                            Obj29:					; XREF: Obj_Index
00009500 7000                       		moveq	#0,d0
00009502 1028 0024                  		move.b	$24(a0),d0
00009506 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000950A 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000950E 6000 0000                  		bra.w	DisplaySprite
00009512                            ; ===========================================================================
00009512 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009514 0000                       		dc.w Obj29_Slower-Obj29_Index
00009516                            ; ===========================================================================
00009516                            
00009516                            Obj29_Main:				; XREF: Obj29_Index
00009516 5428 0024                  		addq.b	#2,$24(a0)
0000951A 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009522 317C 2797 0002             		move.w	#$2797,2(a0)
00009528 117C 0004 0001             		move.b	#4,1(a0)
0000952E 117C 0001 0018             		move.b	#1,$18(a0)
00009534 117C 0008 0019             		move.b	#8,$19(a0)
0000953A 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009540                            
00009540                            Obj29_Slower:				; XREF: Obj29_Index
00009540 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009544 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009548 6100 0000                  		bsr.w	SpeedToPos
0000954C 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009552 4E75                       		rts	
00009554                            ; ===========================================================================
00009554                            ; ---------------------------------------------------------------------------
00009554                            ; Sprite mappings - animals
00009554                            ; ---------------------------------------------------------------------------
00009554                            Map_obj28:
00009554                            	include "_maps\obj28.asm"
00009554                            ; ---------------------------------------------------------------------------
00009554                            ; Sprite mappings - animals
00009554                            ; ---------------------------------------------------------------------------
00009554 0000                       		dc.w byte_9472-Map_obj28
00009556 0000                       		dc.w byte_9478-Map_obj28
00009558 0000                       		dc.w byte_946C-Map_obj28
0000955A 01                         byte_946C:	dc.b 1
0000955B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009560 01                         byte_9472:	dc.b 1
00009561 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009566 01                         byte_9478:	dc.b 1
00009567 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000956C                            		even
0000956C                            		even
0000956C                            
0000956C                            Map_obj28a:
0000956C                            	include "_maps\obj28a.asm"
0000956C                            ; ---------------------------------------------------------------------------
0000956C                            ; Sprite mappings - animals
0000956C                            ; ---------------------------------------------------------------------------
0000956C 0000                       		dc.w byte_948A-Map_obj28a
0000956E 0000                       		dc.w byte_9490-Map_obj28a
00009570 0000                       		dc.w byte_9484-Map_obj28a
00009572 01                         byte_9484:	dc.b 1
00009573 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009578 01                         byte_948A:	dc.b 1
00009579 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000957E 01                         byte_9490:	dc.b 1
0000957F FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009584                            		even
00009584                            		even
00009584                            
00009584                            Map_obj28b:
00009584                            	include "_maps\obj28b.asm"
00009584                            ; ---------------------------------------------------------------------------
00009584                            ; Sprite mappings - animals
00009584                            ; ---------------------------------------------------------------------------
00009584 0000                       		dc.w byte_94A2-Map_obj28b
00009586 0000                       		dc.w byte_94A8-Map_obj28b
00009588 0000                       		dc.w byte_949C-Map_obj28b
0000958A 01                         byte_949C:	dc.b 1
0000958B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009590 01                         byte_94A2:	dc.b 1
00009591 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009596 01                         byte_94A8:	dc.b 1
00009597 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000959C                            		even
0000959C                            		even
0000959C                            
0000959C                            ; ---------------------------------------------------------------------------
0000959C                            ; Sprite mappings - points that	appear when you	destroy	something
0000959C                            ; ---------------------------------------------------------------------------
0000959C                            Map_obj29:
0000959C                            	include "_maps\obj29.asm"
0000959C                            ; ---------------------------------------------------------------------------
0000959C                            ; Sprite mappings - points that	appear when you	destroy	something
0000959C                            ; ---------------------------------------------------------------------------
0000959C 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
000095A0 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
000095A4 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
000095A8 0000                       		dc.w byte_94E5-Map_obj29
000095AA 01                         byte_94BC:	dc.b 1
000095AB FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
000095B0 01                         byte_94C2:	dc.b 1
000095B1 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
000095B6 01                         byte_94C8:	dc.b 1
000095B7 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
000095BC 01                         byte_94CE:	dc.b 1
000095BD FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
000095C2 01                         byte_94D4:	dc.b 1
000095C3 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
000095C8 02                         byte_94DA:	dc.b 2
000095C9 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
000095CE FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
000095D3 02                         byte_94E5:	dc.b 2
000095D4 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
000095D9 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
000095DE                            		even
000095DE                            		even
000095DE                            
000095DE                            ; ===========================================================================
000095DE                            ; ---------------------------------------------------------------------------
000095DE                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
000095DE                            ; ---------------------------------------------------------------------------
000095DE                            
000095DE                            Obj1F:					; XREF: Obj_Index
000095DE 7000                       		moveq	#0,d0
000095E0 1028 0024                  		move.b	$24(a0),d0
000095E4 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
000095E8 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
000095EC                            ; ===========================================================================
000095EC 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
000095EE 0000                       		dc.w Obj1F_Action-Obj1F_Index
000095F0 0000                       		dc.w Obj1F_Delete-Obj1F_Index
000095F2 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
000095F4 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
000095F6                            ; ===========================================================================
000095F6                            
000095F6                            Obj1F_Main:				; XREF: Obj1F_Index
000095F6 117C 0010 0016             		move.b	#$10,$16(a0)
000095FC 117C 0008 0017             		move.b	#8,$17(a0)
00009602 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000960A 317C 0400 0002             		move.w	#$400,2(a0)
00009610 117C 0004 0001             		move.b	#4,1(a0)
00009616 117C 0003 0018             		move.b	#3,$18(a0)
0000961C 117C 0006 0020             		move.b	#6,$20(a0)
00009622 117C 0015 0019             		move.b	#$15,$19(a0)
00009628 6100 0000                  		bsr.w	ObjectFall
0000962C 4EB9 0000 0000             		jsr	ObjHitFloor
00009632 4A41                       		tst.w	d1
00009634 6A00                       		bpl.s	locret_955A
00009636 D368 000C                  		add.w	d1,$C(a0)
0000963A 1143 0026                  		move.b	d3,$26(a0)
0000963E 317C 0000 0012             		move.w	#0,$12(a0)
00009644 5428 0024                  		addq.b	#2,$24(a0)
00009648                            
00009648                            locret_955A:
00009648 4E75                       		rts	
0000964A                            ; ===========================================================================
0000964A                            
0000964A                            Obj1F_Action:				; XREF: Obj1F_Index
0000964A 7000                       		moveq	#0,d0
0000964C 1028 0025                  		move.b	$25(a0),d0
00009650 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009654 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009658 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000965E 6100 0000                  		bsr.w	AnimateSprite
00009662 6000 0000                  		bra.w	MarkObjGone
00009666                            ; ===========================================================================
00009666 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009668 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000966A                            ; ===========================================================================
0000966A                            
0000966A                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000966A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000966E 6A00                       		bpl.s	locret_95B6
00009670 4A28 0001                  		tst.b	1(a0)
00009674 6A00                       		bpl.s	Obj1F_Move
00009676 0868 0001 0032             		bchg	#1,$32(a0)
0000967C 6600                       		bne.s	Obj1F_MakeFire
0000967E                            
0000967E                            Obj1F_Move:
0000967E 5428 0025                  		addq.b	#2,$25(a0)
00009682 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009688 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000968E 6100 0000                  		bsr.w	Obj1F_SetAni
00009692 5600                       		addq.b	#3,d0
00009694 1140 001C                  		move.b	d0,$1C(a0)
00009698 0868 0000 0022             		bchg	#0,$22(a0)
0000969E 6600                       		bne.s	locret_95B6
000096A0 4468 0010                  		neg.w	$10(a0)		; change direction
000096A4                            
000096A4                            locret_95B6:
000096A4 4E75                       		rts	
000096A6                            ; ===========================================================================
000096A6                            
000096A6                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
000096A6 317C 003B 0030             		move.w	#$3B,$30(a0)
000096AC 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
000096B2 6100 0000                  		bsr.w	SingleObjLoad
000096B6 6600                       		bne.s	Obj1F_MakeFire2
000096B8 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
000096BC 137C 0006 0024             		move.b	#6,$24(a1)
000096C2 3368 0008 0008             		move.w	8(a0),8(a1)
000096C8 0469 0010 0008             		subi.w	#$10,8(a1)
000096CE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000096D4 337C FF00 0010             		move.w	#-$100,$10(a1)
000096DA                            
000096DA                            Obj1F_MakeFire2:
000096DA 6100 0000                  		bsr.w	SingleObjLoad
000096DE 6600                       		bne.s	locret_9618
000096E0 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
000096E4 137C 0006 0024             		move.b	#6,$24(a1)
000096EA 3368 0008 0008             		move.w	8(a0),8(a1)
000096F0 0669 0010 0008             		addi.w	#$10,8(a1)
000096F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000096FC 337C 0100 0010             		move.w	#$100,$10(a1)
00009702                            
00009702                            locret_9618:
00009702 4E75                       		rts	
00009704                            ; ===========================================================================
00009704                            
00009704                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009704 5368 0030                  		subq.w	#1,$30(a0)
00009708 6B00                       		bmi.s	loc_966E
0000970A 6100 0000                  		bsr.w	SpeedToPos
0000970E 0868 0000 0032             		bchg	#0,$32(a0)
00009714 6600                       		bne.s	loc_9654
00009716 3628 0008                  		move.w	8(a0),d3
0000971A 0643 0010                  		addi.w	#$10,d3
0000971E 0828 0000 0022             		btst	#0,$22(a0)
00009724 6700                       		beq.s	loc_9640
00009726 0443 0020                  		subi.w	#$20,d3
0000972A                            
0000972A                            loc_9640:
0000972A 4EB9 0000 0000             		jsr	ObjHitFloor2
00009730 0C41 FFF8                  		cmpi.w	#-8,d1
00009734 6D00                       		blt.s	loc_966E
00009736 0C41 000C                  		cmpi.w	#$C,d1
0000973A 6C00                       		bge.s	loc_966E
0000973C 4E75                       		rts	
0000973E                            ; ===========================================================================
0000973E                            
0000973E                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000973E 4EB9 0000 0000             		jsr	ObjHitFloor
00009744 D368 000C                  		add.w	d1,$C(a0)
00009748 1143 0026                  		move.b	d3,$26(a0)
0000974C 6100 0000                  		bsr.w	Obj1F_SetAni
00009750 5600                       		addq.b	#3,d0
00009752 1140 001C                  		move.b	d0,$1C(a0)
00009756 4E75                       		rts	
00009758                            ; ===========================================================================
00009758                            
00009758                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009758 5528 0025                  		subq.b	#2,$25(a0)
0000975C 317C 003B 0030             		move.w	#59,$30(a0)
00009762 317C 0000 0010             		move.w	#0,$10(a0)
00009768 6100 0000                  		bsr.w	Obj1F_SetAni
0000976C 1140 001C                  		move.b	d0,$1C(a0)
00009770 4E75                       		rts	
00009772                            ; ---------------------------------------------------------------------------
00009772                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009772                            ; ---------------------------------------------------------------------------
00009772                            
00009772                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009772                            
00009772                            
00009772                            Obj1F_SetAni:				; XREF: loc_966E
00009772 7000                       		moveq	#0,d0
00009774 1628 0026                  		move.b	$26(a0),d3
00009778 6B00                       		bmi.s	loc_96A4
0000977A 0C03 0006                  		cmpi.b	#6,d3
0000977E 6500                       		bcs.s	locret_96A2
00009780 7001                       		moveq	#1,d0
00009782 0828 0000 0022             		btst	#0,$22(a0)
00009788 6600                       		bne.s	locret_96A2
0000978A 7002                       		moveq	#2,d0
0000978C                            
0000978C                            locret_96A2:
0000978C 4E75                       		rts	
0000978E                            ; ===========================================================================
0000978E                            
0000978E                            loc_96A4:				; XREF: Obj1F_SetAni
0000978E 0C03 00FA                  		cmpi.b	#-6,d3
00009792 6200                       		bhi.s	locret_96B6
00009794 7002                       		moveq	#2,d0
00009796 0828 0000 0022             		btst	#0,$22(a0)
0000979C 6600                       		bne.s	locret_96B6
0000979E 7001                       		moveq	#1,d0
000097A0                            
000097A0                            locret_96B6:
000097A0 4E75                       		rts	
000097A2                            ; End of function Obj1F_SetAni
000097A2                            
000097A2                            ; ===========================================================================
000097A2                            
000097A2                            Obj1F_Delete:				; XREF: Obj1F_Index
000097A2 6100 0000                  		bsr.w	DeleteObject
000097A6 4E75                       		rts	
000097A8                            ; ===========================================================================
000097A8                            ; ---------------------------------------------------------------------------
000097A8                            ; Sub-object - missile that the	Crabmeat throws
000097A8                            ; ---------------------------------------------------------------------------
000097A8                            
000097A8                            Obj1F_BallMain:				; XREF: Obj1F_Index
000097A8 5428 0024                  		addq.b	#2,$24(a0)
000097AC 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
000097B4 317C 0400 0002             		move.w	#$400,2(a0)
000097BA 117C 0004 0001             		move.b	#4,1(a0)
000097C0 117C 0003 0018             		move.b	#3,$18(a0)
000097C6 117C 0087 0020             		move.b	#$87,$20(a0)
000097CC 117C 0008 0019             		move.b	#8,$19(a0)
000097D2 317C FC00 0012             		move.w	#-$400,$12(a0)
000097D8 117C 0007 001C             		move.b	#7,$1C(a0)
000097DE                            
000097DE                            Obj1F_BallMove:				; XREF: Obj1F_Index
000097DE 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
000097E4 6100 0000                  		bsr.w	AnimateSprite
000097E8 6100 0000                  		bsr.w	ObjectFall
000097EC 6100 0000                  		bsr.w	DisplaySprite
000097F0 3038 F72E                  		move.w	($FFFFF72E).w,d0
000097F4 0640 00E0                  		addi.w	#$E0,d0
000097F8 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
000097FC 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
000097FE 4E75                       		rts	
00009800                            ; ===========================================================================
00009800                            
00009800                            Obj1F_Delete2:
00009800 6000 0000                  		bra.w	DeleteObject
00009804                            ; ===========================================================================
00009804                            Ani_obj1F:
00009804                            	include "_anim\obj1F.asm"
00009804                            ; ---------------------------------------------------------------------------
00009804                            ; Animation script - Crabmeat enemy
00009804                            ; ---------------------------------------------------------------------------
00009804 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000980A 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009810 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009814 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009818 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000981C 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009820 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009826 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000982C 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009832 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009836 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000983A                            		even
0000983A                            		even
0000983A                            
0000983A                            ; ---------------------------------------------------------------------------
0000983A                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000983A                            ; ---------------------------------------------------------------------------
0000983A                            Map_obj1F:
0000983A                            	include "_maps\obj1F.asm"
0000983A                            ; ---------------------------------------------------------------------------
0000983A                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000983A                            ; ---------------------------------------------------------------------------
0000983A 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
0000983E 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
00009842 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
00009846 0000                       		dc.w byte_97D7-Map_obj1F
00009848 04                         byte_975E:	dc.b 4
00009849 F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
0000984E F009 0800 00               		dc.b $F0, 9, 8,	0, 0
00009853 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
00009858 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000985D 04                         byte_9773:	dc.b 4
0000985E F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
00009863 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
00009868 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000986D 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
00009872 04                         byte_9788:	dc.b 4
00009873 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
00009878 EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000987D FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
00009882 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
00009887 04                         byte_979D:	dc.b 4
00009888 EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000988D EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
00009892 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
00009897 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000989C 06                         byte_97B2:	dc.b 6
0000989D F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
000098A2 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
000098A7 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
000098AC F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
000098B1 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
000098B6 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
000098BB 01                         byte_97D1:	dc.b 1
000098BC F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
000098C1 01                         byte_97D7:	dc.b 1
000098C2 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
000098C8 00                         		even
000098C8 00                         		even
000098C8                            
000098C8                            ; ===========================================================================
000098C8                            ; ---------------------------------------------------------------------------
000098C8                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
000098C8                            ; ---------------------------------------------------------------------------
000098C8                            
000098C8                            Obj22:					; XREF: Obj_Index
000098C8 7000                       		moveq	#0,d0
000098CA 1028 0024                  		move.b	$24(a0),d0
000098CE 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
000098D2 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
000098D6                            ; ===========================================================================
000098D6 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
000098D8 0000                       		dc.w Obj22_Action-Obj22_Index
000098DA 0000                       		dc.w Obj22_Delete-Obj22_Index
000098DC                            ; ===========================================================================
000098DC                            
000098DC                            Obj22_Main:				; XREF: Obj22_Index
000098DC 5428 0024                  		addq.b	#2,$24(a0)
000098E0 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
000098E8 317C 0444 0002             		move.w	#$444,2(a0)
000098EE 117C 0004 0001             		move.b	#4,1(a0)
000098F4 117C 0003 0018             		move.b	#3,$18(a0)
000098FA 117C 0008 0020             		move.b	#8,$20(a0)
00009900 117C 0018 0019             		move.b	#$18,$19(a0)
00009906                            
00009906                            Obj22_Action:				; XREF: Obj22_Index
00009906 7000                       		moveq	#0,d0
00009908 1028 0025                  		move.b	$25(a0),d0
0000990C 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009910 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009914 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000991A 6100 0000                  		bsr.w	AnimateSprite
0000991E 6000 0000                  		bra.w	MarkObjGone
00009922                            ; ===========================================================================
00009922 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009924 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009926                            ; ===========================================================================
00009926                            
00009926                            Obj22_Move:				; XREF: Obj22_Index2
00009926 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000992A 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000992C 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009932 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009934 5428 0025                  		addq.b	#2,$25(a0)
00009938 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000993E 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009944 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000994A 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009950 6600                       		bne.s	locret_986C	; if not, branch
00009952 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009956                            
00009956                            locret_986C:
00009956 4E75                       		rts	
00009958                            ; ===========================================================================
00009958                            
00009958                            Obj22_Fire:				; XREF: Obj22_Move
00009958 6100 0000                  		bsr.w	SingleObjLoad
0000995C 6600                       		bne.s	locret_98D0
0000995E 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009962 3368 0008 0008             		move.w	8(a0),8(a1)
00009968 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000996E 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009974 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000997A 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009980 303C 0018                  		move.w	#$18,d0
00009984 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000998A 6600                       		bne.s	loc_98AA	; if not, branch
0000998C 4440                       		neg.w	d0
0000998E 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009992                            
00009992                            loc_98AA:
00009992 D169 0008                  		add.w	d0,8(a1)
00009996 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000999C 337C 000E 0032             		move.w	#$E,$32(a1)
000099A2 2348 003C                  		move.l	a0,$3C(a1)
000099A6 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
000099AC 317C 003B 0032             		move.w	#$3B,$32(a0)
000099B2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
000099B8                            
000099B8                            locret_98D0:
000099B8 4E75                       		rts	
000099BA                            ; ===========================================================================
000099BA                            
000099BA                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
000099BA 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
000099BE 6B00                       		bmi.s	Obj22_ChgDir
000099C0 6100 0000                  		bsr.w	SpeedToPos
000099C4 4A28 0034                  		tst.b	$34(a0)
000099C8 6600                       		bne.s	locret_992A
000099CA 3038 D008                  		move.w	($FFFFD008).w,d0
000099CE 9068 0008                  		sub.w	8(a0),d0
000099D2 6A00                       		bpl.s	Obj22_SetNrSonic
000099D4 4440                       		neg.w	d0
000099D6                            
000099D6                            Obj22_SetNrSonic:
000099D6 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
000099DA 6400                       		bcc.s	locret_992A	; if not, branch
000099DC 4A28 0001                  		tst.b	1(a0)
000099E0 6A00                       		bpl.s	locret_992A
000099E2 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
000099E8 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
000099EE 6000                       		bra.s	Obj22_Stop
000099F0                            ; ===========================================================================
000099F0                            
000099F0                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
000099F0 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
000099F6 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
000099FC 317C 003B 0032             		move.w	#59,$32(a0)
00009A02                            
00009A02                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009A02 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009A06 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009A0C 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009A12                            
00009A12                            locret_992A:
00009A12 4E75                       		rts	
00009A14                            ; ===========================================================================
00009A14                            
00009A14                            Obj22_Delete:				; XREF: Obj22_Index
00009A14 6100 0000                  		bsr.w	DeleteObject
00009A18 4E75                       		rts	
00009A1A                            ; ===========================================================================
00009A1A                            ; ---------------------------------------------------------------------------
00009A1A                            ; Object 23 - missile that Buzz	Bomber throws
00009A1A                            ; ---------------------------------------------------------------------------
00009A1A                            
00009A1A                            Obj23:					; XREF: Obj_Index
00009A1A 7000                       		moveq	#0,d0
00009A1C 1028 0024                  		move.b	$24(a0),d0
00009A20 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009A24 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009A28                            ; ===========================================================================
00009A28 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009A2A 0000                       		dc.w Obj23_Animate-Obj23_Index
00009A2C 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009A2E 0000                       		dc.w Obj23_Delete-Obj23_Index
00009A30 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009A32                            ; ===========================================================================
00009A32                            
00009A32                            Obj23_Main:				; XREF: Obj23_Index
00009A32 5368 0032                  		subq.w	#1,$32(a0)
00009A36 6A00                       		bpl.s	Obj23_ChkCancel
00009A38 5428 0024                  		addq.b	#2,$24(a0)
00009A3C 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009A44 317C 2444 0002             		move.w	#$2444,2(a0)
00009A4A 117C 0004 0001             		move.b	#4,1(a0)
00009A50 117C 0003 0018             		move.b	#3,$18(a0)
00009A56 117C 0008 0019             		move.b	#8,$19(a0)
00009A5C 0228 0003 0022             		andi.b	#3,$22(a0)
00009A62 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009A66 6700                       		beq.s	Obj23_Animate	; if not, branch
00009A68 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009A6E 117C 0087 0020             		move.b	#$87,$20(a0)
00009A74 117C 0001 001C             		move.b	#1,$1C(a0)
00009A7A 6000                       		bra.s	Obj23_Animate2
00009A7C                            ; ===========================================================================
00009A7C                            
00009A7C                            Obj23_Animate:				; XREF: Obj23_Index
00009A7C 6100                       		bsr.s	Obj23_ChkCancel
00009A7E 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009A84 6100 0000                  		bsr.w	AnimateSprite
00009A88 6000 0000                  		bra.w	DisplaySprite
00009A8C                            ; ---------------------------------------------------------------------------
00009A8C                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009A8C                            ; destroyed, and if it has, then cancel	the missile
00009A8C                            ; ---------------------------------------------------------------------------
00009A8C                            
00009A8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A8C                            
00009A8C                            
00009A8C                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009A8C 2268 003C                  		movea.l	$3C(a0),a1
00009A90 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009A94 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009A96 4E75                       		rts	
00009A98                            ; End of function Obj23_ChkCancel
00009A98                            
00009A98                            ; ===========================================================================
00009A98                            
00009A98                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009A98 0828 0007 0022             		btst	#7,$22(a0)
00009A9E 6600                       		bne.s	Obj23_Explode
00009AA0 117C 0087 0020             		move.b	#$87,$20(a0)
00009AA6 117C 0001 001C             		move.b	#1,$1C(a0)
00009AAC 6100 0000                  		bsr.w	SpeedToPos
00009AB0 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009AB6 6100 0000                  		bsr.w	AnimateSprite
00009ABA 6100 0000                  		bsr.w	DisplaySprite
00009ABE 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009AC2 0640 00E0                  		addi.w	#$E0,d0
00009AC6 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009ACA 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009ACC 4E75                       		rts	
00009ACE                            ; ===========================================================================
00009ACE                            
00009ACE                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009ACE 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009AD2 117C 0000 0024             		move.b	#0,$24(a0)
00009AD8 6000 F30A                  		bra.w	Obj24
00009ADC                            ; ===========================================================================
00009ADC                            
00009ADC                            Obj23_Delete:				; XREF: Obj23_Index
00009ADC 6100 0000                  		bsr.w	DeleteObject
00009AE0 4E75                       		rts	
00009AE2                            ; ===========================================================================
00009AE2                            
00009AE2                            Obj23_FromNewt:				; XREF: Obj23_Index
00009AE2 4A28 0001                  		tst.b	1(a0)
00009AE6 6AF4                       		bpl.s	Obj23_Delete
00009AE8 6100 0000                  		bsr.w	SpeedToPos
00009AEC                            
00009AEC                            Obj23_Animate2:				; XREF: Obj23_Main
00009AEC 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009AF2 6100 0000                  		bsr.w	AnimateSprite
00009AF6 6100 0000                  		bsr.w	DisplaySprite
00009AFA 4E75                       		rts	
00009AFC                            ; ===========================================================================
00009AFC                            Ani_obj22:
00009AFC                            	include "_anim\obj22.asm"
00009AFC                            ; ---------------------------------------------------------------------------
00009AFC                            ; Animation script - Buzz Bomber enemy
00009AFC                            ; ---------------------------------------------------------------------------
00009AFC 0000                       		dc.w byte_9A1E-Ani_obj22
00009AFE 0000                       		dc.w byte_9A22-Ani_obj22
00009B00 0000                       		dc.w byte_9A26-Ani_obj22
00009B02 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009B06 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009B0A 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009B0E                            		even
00009B0E                            		even
00009B0E                            
00009B0E                            Ani_obj23:
00009B0E                            	include "_anim\obj23.asm"
00009B0E                            ; ---------------------------------------------------------------------------
00009B0E                            ; Animation script - missile that Buzz Bomber throws
00009B0E                            ; ---------------------------------------------------------------------------
00009B0E 0000                       		dc.w byte_9A2E-Ani_obj23
00009B10 0000                       		dc.w byte_9A32-Ani_obj23
00009B12 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009B16 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009B1A                            		even
00009B1A                            		even
00009B1A                            
00009B1A                            ; ---------------------------------------------------------------------------
00009B1A                            ; Sprite mappings - Buzz Bomber	enemy
00009B1A                            ; ---------------------------------------------------------------------------
00009B1A                            Map_obj22:
00009B1A                            	include "_maps\obj22.asm"
00009B1A                            ; ---------------------------------------------------------------------------
00009B1A                            ; Sprite mappings - Buzz Bomber	enemy
00009B1A                            ; ---------------------------------------------------------------------------
00009B1A 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
00009B1E 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
00009B22 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
00009B26 06                         byte_9A42:	dc.b 6
00009B27 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009B2C F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009B31 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009B36 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009B3B F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00009B40 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00009B45 06                         byte_9A61:	dc.b 6
00009B46 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009B4B F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009B50 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009B55 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009B5A F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00009B5F F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00009B64 07                         byte_9A80:	dc.b 7
00009B65 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
00009B6A F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009B6F F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009B74 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009B79 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009B7E F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00009B83 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00009B88 07                         byte_9AA4:	dc.b 7
00009B89 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
00009B8E F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009B93 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009B98 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009B9D 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009BA2 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00009BA7 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00009BAC 06                         byte_9AC8:	dc.b 6
00009BAD F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
00009BB2 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
00009BB7 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
00009BBC 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
00009BC1 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00009BC6 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00009BCB 04                         byte_9AE7:	dc.b 4
00009BCC F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
00009BD1 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
00009BD6 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
00009BDB 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
00009BE0 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00009BE5 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00009BEA                            		even
00009BEA                            		even
00009BEA                            
00009BEA                            ; ---------------------------------------------------------------------------
00009BEA                            ; Sprite mappings - missile that Buzz Bomber throws
00009BEA                            ; ---------------------------------------------------------------------------
00009BEA                            Map_obj23:
00009BEA                            	include "_maps\obj23.asm"
00009BEA                            ; ---------------------------------------------------------------------------
00009BEA                            ; Sprite mappings - missile that Buzz Bomber throws
00009BEA                            ; ---------------------------------------------------------------------------
00009BEA 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009BEE 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009BF2 01                         byte_9B0E:	dc.b 1
00009BF3 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009BF8 01                         byte_9B14:	dc.b 1
00009BF9 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009BFE 01                         byte_9B1A:	dc.b 1
00009BFF F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009C04 01                         byte_9B20:	dc.b 1
00009C05 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00009C0A                            		even
00009C0A                            		even
00009C0A                            
00009C0A                            ; ===========================================================================
00009C0A                            ; ---------------------------------------------------------------------------
00009C0A                            ; Object 25 - rings
00009C0A                            ; ---------------------------------------------------------------------------
00009C0A                            
00009C0A                            Obj25:					; XREF: Obj_Index
00009C0A 7000                       		moveq	#0,d0
00009C0C 1028 0024                  		move.b	$24(a0),d0
00009C10 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
00009C14 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
00009C18                            ; ===========================================================================
00009C18 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
00009C1A 0000                       		dc.w Obj25_Animate-Obj25_Index
00009C1C 0000                       		dc.w Obj25_Collect-Obj25_Index
00009C1E 0000                       		dc.w Obj25_Sparkle-Obj25_Index
00009C20 0000                       		dc.w Obj25_Delete-Obj25_Index
00009C22                            ; ---------------------------------------------------------------------------
00009C22                            ; Distances between rings (format: horizontal, vertical)
00009C22                            ; ---------------------------------------------------------------------------
00009C22 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
00009C24 1800                       		dc.b $18, 0		; horizontal normal
00009C26 2000                       		dc.b $20, 0		; horizontal wide
00009C28 0010                       		dc.b 0,	$10		; vertical tight
00009C2A 0018                       		dc.b 0,	$18		; vertical normal
00009C2C 0020                       		dc.b 0,	$20		; vertical wide
00009C2E 1010                       		dc.b $10, $10		; diagonal
00009C30 1818                       		dc.b $18, $18
00009C32 2020                       		dc.b $20, $20
00009C34 F010                       		dc.b $F0, $10
00009C36 E818                       		dc.b $E8, $18
00009C38 E020                       		dc.b $E0, $20
00009C3A 1008                       		dc.b $10, 8
00009C3C 1810                       		dc.b $18, $10
00009C3E F008                       		dc.b $F0, 8
00009C40 E810                       		dc.b $E8, $10
00009C42                            ; ===========================================================================
00009C42                            
00009C42                            Obj25_Main:				; XREF: Obj25_Index
00009C42 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009C46 7000                       		moveq	#0,d0
00009C48 1028 0023                  		move.b	$23(a0),d0
00009C4C 45F2 0002                  		lea	2(a2,d0.w),a2
00009C50 1812                       		move.b	(a2),d4
00009C52 1228 0028                  		move.b	$28(a0),d1
00009C56 1001                       		move.b	d1,d0
00009C58 0241 0007                  		andi.w	#7,d1
00009C5C 0C41 0007                  		cmpi.w	#7,d1
00009C60 6600                       		bne.s	loc_9B80
00009C62 7206                       		moveq	#6,d1
00009C64                            
00009C64                            loc_9B80:
00009C64 4841                       		swap	d1
00009C66 323C 0000                  		move.w	#0,d1
00009C6A E808                       		lsr.b	#4,d0
00009C6C D040                       		add.w	d0,d0
00009C6E 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
00009C72 4885                       		ext.w	d5
00009C74 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
00009C78 4886                       		ext.w	d6
00009C7A 2248                       		movea.l	a0,a1
00009C7C 3428 0008                  		move.w	8(a0),d2
00009C80 3628 000C                  		move.w	$C(a0),d3
00009C84 E20C                       		lsr.b	#1,d4
00009C86 6500                       		bcs.s	loc_9C02
00009C88 0892 0007                  		bclr	#7,(a2)
00009C8C 6000                       		bra.s	loc_9BBA
00009C8E                            ; ===========================================================================
00009C8E                            
00009C8E                            Obj25_MakeRings:
00009C8E 4841                       		swap	d1
00009C90 E20C                       		lsr.b	#1,d4
00009C92 6500                       		bcs.s	loc_9C02
00009C94 0892 0007                  		bclr	#7,(a2)
00009C98 6100 0000                  		bsr.w	SingleObjLoad
00009C9C 6600                       		bne.s	loc_9C0E
00009C9E                            
00009C9E                            loc_9BBA:				; XREF: Obj25_Main
00009C9E 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
00009CA2 5429 0024                  		addq.b	#2,$24(a1)
00009CA6 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
00009CAA 3368 0008 0032             		move.w	8(a0),$32(a1)
00009CB0 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
00009CB4 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00009CBC 337C 27B2 0002             		move.w	#$27B2,2(a1)
00009CC2 137C 0004 0001             		move.b	#4,1(a1)
00009CC8 137C 0002 0018             		move.b	#2,$18(a1)
00009CCE 137C 0047 0020             		move.b	#$47,$20(a1)
00009CD4 137C 0008 0019             		move.b	#8,$19(a1)
00009CDA 1368 0023 0023             		move.b	$23(a0),$23(a1)
00009CE0 1341 0034                  		move.b	d1,$34(a1)
00009CE4                            
00009CE4                            loc_9C02:
00009CE4 5241                       		addq.w	#1,d1
00009CE6 D445                       		add.w	d5,d2		; add ring spacing value to d2
00009CE8 D646                       		add.w	d6,d3		; add ring spacing value to d3
00009CEA 4841                       		swap	d1
00009CEC 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
00009CF0                            
00009CF0                            loc_9C0E:
00009CF0 0812 0000                  		btst	#0,(a2)
00009CF4 6600 0000                  		bne.w	DeleteObject
00009CF8                            
00009CF8                            Obj25_Animate:				; XREF: Obj25_Index
00009CF8 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
00009CFE 6100 0000                  		bsr.w	DisplaySprite
00009D02 3028 0032                  		move.w	$32(a0),d0
00009D06 0240 FF80                  		andi.w	#$FF80,d0
00009D0A 3238 F700                  		move.w	($FFFFF700).w,d1
00009D0E 0441 0080                  		subi.w	#$80,d1
00009D12 0241 FF80                  		andi.w	#$FF80,d1
00009D16 9041                       		sub.w	d1,d0
00009D18 0C40 0280                  		cmpi.w	#$280,d0
00009D1C 6200                       		bhi.s	Obj25_Delete
00009D1E 4E75                       		rts	
00009D20                            ; ===========================================================================
00009D20                            
00009D20                            Obj25_Collect:				; XREF: Obj25_Index
00009D20 5428 0024                  		addq.b	#2,$24(a0)
00009D24 117C 0000 0020             		move.b	#0,$20(a0)
00009D2A 117C 0001 0018             		move.b	#1,$18(a0)
00009D30 6100 0000                  		bsr.w	CollectRing
00009D34 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009D38 7000                       		moveq	#0,d0
00009D3A 1028 0023                  		move.b	$23(a0),d0
00009D3E 1228 0034                  		move.b	$34(a0),d1
00009D42 03F2 0002                  		bset	d1,2(a2,d0.w)
00009D46                            
00009D46                            Obj25_Sparkle:				; XREF: Obj25_Index
00009D46 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00009D4C 6100 0000                  		bsr.w	AnimateSprite
00009D50 6000 0000                  		bra.w	DisplaySprite
00009D54                            ; ===========================================================================
00009D54                            
00009D54                            Obj25_Delete:				; XREF: Obj25_Index
00009D54 6000 0000                  		bra.w	DeleteObject
00009D58                            
00009D58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D58                            
00009D58                            
00009D58                            CollectRing:				; XREF: Obj25_Collect
00009D58 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
00009D5C 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
00009D62 303C 00B5                  		move.w	#$B5,d0		; play ring sound
00009D66 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
00009D6C 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00009D6E 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
00009D74 6700                       		beq.s	loc_9CA4
00009D76 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
00009D7C 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00009D7E 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
00009D84 6600                       		bne.s	Obj25_PlaySnd
00009D86                            
00009D86                            loc_9CA4:
00009D86 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
00009D8A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
00009D8E 303C 0088                  		move.w	#$88,d0		; play extra life music
00009D92                            
00009D92                            Obj25_PlaySnd:
00009D92 4EF9 0000 139C             		jmp	(PlaySound_Special).l
00009D98                            ; End of function CollectRing
00009D98                            
00009D98                            ; ===========================================================================
00009D98                            ; ---------------------------------------------------------------------------
00009D98                            ; Object 37 - rings flying out of Sonic	when he's hit
00009D98                            ; ---------------------------------------------------------------------------
00009D98                            
00009D98                            Obj37:					; XREF: Obj_Index
00009D98 7000                       		moveq	#0,d0
00009D9A 1028 0024                  		move.b	$24(a0),d0
00009D9E 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
00009DA2 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
00009DA6                            ; ===========================================================================
00009DA6 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
00009DA8 0000                       		dc.w Obj37_Bounce-Obj37_Index
00009DAA 0000                       		dc.w Obj37_Collect-Obj37_Index
00009DAC 0000                       		dc.w Obj37_Sparkle-Obj37_Index
00009DAE 0000                       		dc.w Obj37_Delete-Obj37_Index
00009DB0                            ; ===========================================================================
00009DB0                            
00009DB0                            Obj37_CountRings:			; XREF: Obj37_Index
00009DB0 2248                       		movea.l	a0,a1
00009DB2 7A00                       		moveq	#0,d5
00009DB4 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
00009DB8 7020                       		moveq	#32,d0
00009DBA BA40                       		cmp.w	d0,d5		; do you have 32 or more?
00009DBC 6500                       		bcs.s	loc_9CDE	; if not, branch
00009DBE 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
00009DC0                            
00009DC0                            loc_9CDE:
00009DC0 5345                       		subq.w	#1,d5
00009DC2 383C 0288                  		move.w	#$288,d4
00009DC6 6000                       		bra.s	Obj37_MakeRings
00009DC8                            ; ===========================================================================
00009DC8                            
00009DC8                            Obj37_Loop:
00009DC8 6100 0000                  		bsr.w	SingleObjLoad
00009DCC 6600 0000                  		bne.w	Obj37_ResetCounter
00009DD0                            
00009DD0                            Obj37_MakeRings:			; XREF: Obj37_CountRings
00009DD0 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
00009DD4 5429 0024                  		addq.b	#2,$24(a1)
00009DD8 137C 0008 0016             		move.b	#8,$16(a1)
00009DDE 137C 0008 0017             		move.b	#8,$17(a1)
00009DE4 3368 0008 0008             		move.w	8(a0),8(a1)
00009DEA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009DF0 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00009DF8 337C 27B2 0002             		move.w	#$27B2,2(a1)
00009DFE 137C 0004 0001             		move.b	#4,1(a1)
00009E04 137C 0003 0018             		move.b	#3,$18(a1)
00009E0A 137C 0047 0020             		move.b	#$47,$20(a1)
00009E10 137C 0008 0019             		move.b	#8,$19(a1)
00009E16 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
00009E1C 4A44                       		tst.w	d4
00009E1E 6B00                       		bmi.s	loc_9D62
00009E20 3004                       		move.w	d4,d0
00009E22 6100 8BB6                  		bsr.w	CalcSine
00009E26 3404                       		move.w	d4,d2
00009E28 E04A                       		lsr.w	#8,d2
00009E2A E560                       		asl.w	d2,d0
00009E2C E561                       		asl.w	d2,d1
00009E2E 3400                       		move.w	d0,d2
00009E30 3601                       		move.w	d1,d3
00009E32 0604 0010                  		addi.b	#$10,d4
00009E36 6400                       		bcc.s	loc_9D62
00009E38 0444 0080                  		subi.w	#$80,d4
00009E3C 6400                       		bcc.s	loc_9D62
00009E3E 383C 0288                  		move.w	#$288,d4
00009E42                            
00009E42                            loc_9D62:
00009E42 3342 0010                  		move.w	d2,$10(a1)
00009E46 3343 0012                  		move.w	d3,$12(a1)
00009E4A 4442                       		neg.w	d2
00009E4C 4444                       		neg.w	d4
00009E4E 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
00009E52                            
00009E52                            Obj37_ResetCounter:			; XREF: Obj37_Loop
00009E52 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
00009E58 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
00009E5E 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
00009E64 303C 00C6                  		move.w	#$C6,d0
00009E68 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play ring loss sound
00009E6E                            
00009E6E                            Obj37_Bounce:				; XREF: Obj37_Index
00009E6E 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
00009E74 6100 0000                  		bsr.w	SpeedToPos
00009E78 0668 0018 0012             		addi.w	#$18,$12(a0)
00009E7E 6B00                       		bmi.s	Obj37_ChkDel
00009E80 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00009E84 D007                       		add.b	d7,d0
00009E86 0200 0003                  		andi.b	#3,d0
00009E8A 6600                       		bne.s	Obj37_ChkDel
00009E8C 4EB9 0000 0000             		jsr	ObjHitFloor
00009E92 4A41                       		tst.w	d1
00009E94 6A00                       		bpl.s	Obj37_ChkDel
00009E96 D368 000C                  		add.w	d1,$C(a0)
00009E9A 3028 0012                  		move.w	$12(a0),d0
00009E9E E440                       		asr.w	#2,d0
00009EA0 9168 0012                  		sub.w	d0,$12(a0)
00009EA4 4468 0012                  		neg.w	$12(a0)
00009EA8                            
00009EA8                            Obj37_ChkDel:				; XREF: Obj37_Bounce
00009EA8 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00009EAC 6700                       		beq.s	Obj37_Delete
00009EAE 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009EB2 0640 00E0                  		addi.w	#$E0,d0
00009EB6 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
00009EBA 6500                       		bcs.s	Obj37_Delete	; if yes, branch
00009EBC 6000 0000                  		bra.w	DisplaySprite
00009EC0                            ; ===========================================================================
00009EC0                            
00009EC0                            Obj37_Collect:				; XREF: Obj37_Index
00009EC0 5428 0024                  		addq.b	#2,$24(a0)
00009EC4 117C 0000 0020             		move.b	#0,$20(a0)
00009ECA 117C 0001 0018             		move.b	#1,$18(a0)
00009ED0 6100 FE86                  		bsr.w	CollectRing
00009ED4                            
00009ED4                            Obj37_Sparkle:				; XREF: Obj37_Index
00009ED4 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00009EDA 6100 0000                  		bsr.w	AnimateSprite
00009EDE 6000 0000                  		bra.w	DisplaySprite
00009EE2                            ; ===========================================================================
00009EE2                            
00009EE2                            Obj37_Delete:				; XREF: Obj37_Index
00009EE2 6000 0000                  		bra.w	DeleteObject
00009EE6                            ; ===========================================================================
00009EE6                            ; ---------------------------------------------------------------------------
00009EE6                            ; Object 4B - giant ring for entry to special stage
00009EE6                            ; ---------------------------------------------------------------------------
00009EE6                            
00009EE6                            Obj4B:					; XREF: Obj_Index
00009EE6 7000                       		moveq	#0,d0
00009EE8 1028 0024                  		move.b	$24(a0),d0
00009EEC 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
00009EF0 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
00009EF4                            ; ===========================================================================
00009EF4 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
00009EF6 0000                       		dc.w Obj4B_Animate-Obj4B_Index
00009EF8 0000                       		dc.w Obj4B_Collect-Obj4B_Index
00009EFA 0000                       		dc.w Obj4B_Delete-Obj4B_Index
00009EFC                            ; ===========================================================================
00009EFC                            
00009EFC                            Obj4B_Main:				; XREF: Obj4B_Index
00009EFC 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
00009F04 317C 2400 0002             		move.w	#$2400,2(a0)
00009F0A 0028 0004 0001             		ori.b	#4,1(a0)
00009F10 117C 0040 0019             		move.b	#$40,$19(a0)
00009F16 4A28 0001                  		tst.b	1(a0)
00009F1A 6A00                       		bpl.s	Obj4B_Animate
00009F1C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
00009F22 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
00009F26 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
00009F2C 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
00009F2E 4E75                       		rts	
00009F30                            ; ===========================================================================
00009F30                            
00009F30                            Obj4B_Okay:				; XREF: Obj4B_Main
00009F30 5428 0024                  		addq.b	#2,$24(a0)
00009F34 117C 0002 0018             		move.b	#2,$18(a0)
00009F3A 117C 0052 0020             		move.b	#$52,$20(a0)
00009F40 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
00009F46                            
00009F46                            Obj4B_Animate:				; XREF: Obj4B_Index
00009F46 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
00009F4C 3028 0008                  		move.w	8(a0),d0
00009F50 0240 FF80                  		andi.w	#$FF80,d0
00009F54 3238 F700                  		move.w	($FFFFF700).w,d1
00009F58 0441 0080                  		subi.w	#$80,d1
00009F5C 0241 FF80                  		andi.w	#$FF80,d1
00009F60 9041                       		sub.w	d1,d0
00009F62 0C40 0280                  		cmpi.w	#$280,d0
00009F66 6200 0000                  		bhi.w	DeleteObject
00009F6A 6000 0000                  		bra.w	DisplaySprite
00009F6E                            ; ===========================================================================
00009F6E                            
00009F6E                            Obj4B_Collect:				; XREF: Obj4B_Index
00009F6E 5528 0024                  		subq.b	#2,$24(a0)
00009F72 117C 0000 0020             		move.b	#0,$20(a0)
00009F78 6100 0000                  		bsr.w	SingleObjLoad
00009F7C 6600 0000                  		bne.w	Obj4B_PlaySnd
00009F80 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
00009F84 3368 0008 0008             		move.w	8(a0),8(a1)
00009F8A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009F90 2348 003C                  		move.l	a0,$3C(a1)
00009F94 3038 D008                  		move.w	($FFFFD008).w,d0
00009F98 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
00009F9C 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
00009F9E 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
00009FA4                            
00009FA4                            Obj4B_PlaySnd:
00009FA4 303C 00C3                  		move.w	#$C3,d0
00009FA8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play giant ring	sound
00009FAE 6096                       		bra.s	Obj4B_Animate
00009FB0                            ; ===========================================================================
00009FB0                            
00009FB0                            Obj4B_Delete:				; XREF: Obj4B_Index
00009FB0 6000 0000                  		bra.w	DeleteObject
00009FB4                            ; ===========================================================================
00009FB4                            ; ---------------------------------------------------------------------------
00009FB4                            ; Object 7C - flash effect when	you collect the	giant ring
00009FB4                            ; ---------------------------------------------------------------------------
00009FB4                            
00009FB4                            Obj7C:					; XREF: Obj_Index
00009FB4 7000                       		moveq	#0,d0
00009FB6 1028 0024                  		move.b	$24(a0),d0
00009FBA 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
00009FBE 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
00009FC2                            ; ===========================================================================
00009FC2 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
00009FC4 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
00009FC6 0000                       		dc.w Obj7C_Delete-Obj7C_Index
00009FC8                            ; ===========================================================================
00009FC8                            
00009FC8                            Obj7C_Main:				; XREF: Obj7C_Index
00009FC8 5428 0024                  		addq.b	#2,$24(a0)
00009FCC 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
00009FD4 317C 2462 0002             		move.w	#$2462,2(a0)
00009FDA 0028 0004 0001             		ori.b	#4,1(a0)
00009FE0 117C 0000 0018             		move.b	#0,$18(a0)
00009FE6 117C 0020 0019             		move.b	#$20,$19(a0)
00009FEC 117C 00FF 001A             		move.b	#$FF,$1A(a0)
00009FF2                            
00009FF2                            Obj7C_ChkDel:				; XREF: Obj7C_Index
00009FF2 6100                       		bsr.s	Obj7C_Collect
00009FF4 3028 0008                  		move.w	8(a0),d0
00009FF8 0240 FF80                  		andi.w	#$FF80,d0
00009FFC 3238 F700                  		move.w	($FFFFF700).w,d1
0000A000 0441 0080                  		subi.w	#$80,d1
0000A004 0241 FF80                  		andi.w	#$FF80,d1
0000A008 9041                       		sub.w	d1,d0
0000A00A 0C40 0280                  		cmpi.w	#$280,d0
0000A00E 6200 0000                  		bhi.w	DeleteObject
0000A012 6000 0000                  		bra.w	DisplaySprite
0000A016                            
0000A016                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A016                            
0000A016                            
0000A016                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A016 5328 001E                  		subq.b	#1,$1E(a0)
0000A01A 6A00                       		bpl.s	locret_9F76
0000A01C 117C 0001 001E             		move.b	#1,$1E(a0)
0000A022 5228 001A                  		addq.b	#1,$1A(a0)
0000A026 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A02C 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A02E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A034 6600                       		bne.s	locret_9F76	; if not, branch
0000A036 2268 003C                  		movea.l	$3C(a0),a1
0000A03A 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A040 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A046 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A04C 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A050 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A054                            
0000A054                            locret_9F76:
0000A054 4E75                       		rts	
0000A056                            ; ===========================================================================
0000A056                            
0000A056                            Obj7C_End:				; XREF: Obj7C_Collect
0000A056 5428 0024                  		addq.b	#2,$24(a0)
0000A05A 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A060 588F                       		addq.l	#4,sp
0000A062 4E75                       		rts	
0000A064                            ; End of function Obj7C_Collect
0000A064                            
0000A064                            ; ===========================================================================
0000A064                            
0000A064                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A064 6000 0000                  		bra.w	DeleteObject
0000A068                            ; ===========================================================================
0000A068                            Ani_obj25:
0000A068                            	include "_anim\obj25.asm"
0000A068                            ; ---------------------------------------------------------------------------
0000A068                            ; Animation script - ring
0000A068                            ; ---------------------------------------------------------------------------
0000A068 0000                       		dc.w byte_9F8C-Ani_obj25
0000A06A 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A070                            		even
0000A070                            		even
0000A070                            
0000A070                            ; ---------------------------------------------------------------------------
0000A070                            ; Sprite mappings - rings
0000A070                            ; ---------------------------------------------------------------------------
0000A070                            Map_obj25:
0000A070                            	include "_maps\obj25.asm"
0000A070                            ; ---------------------------------------------------------------------------
0000A070                            ; Sprite mappings - rings
0000A070                            ; ---------------------------------------------------------------------------
0000A070 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A074 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A078 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A07C 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A080 01                         byte_9FA2:	dc.b 1
0000A081 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A086 01                         byte_9FA8:	dc.b 1
0000A087 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A08C 01                         byte_9FAE:	dc.b 1
0000A08D F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A092 01                         byte_9FB4:	dc.b 1
0000A093 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A098 01                         byte_9FBA:	dc.b 1
0000A099 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A09E 01                         byte_9FC0:	dc.b 1
0000A09F F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A0A4 01                         byte_9FC6:	dc.b 1
0000A0A5 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A0AA 01                         byte_9FCC:	dc.b 1
0000A0AB F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A0B0                            		even
0000A0B0                            		even
0000A0B0                            
0000A0B0                            ; ---------------------------------------------------------------------------
0000A0B0                            ; Sprite mappings - giant ring
0000A0B0                            ; ---------------------------------------------------------------------------
0000A0B0                            Map_obj4B:
0000A0B0                            	include "_maps\obj4B.asm"
0000A0B0                            ; ---------------------------------------------------------------------------
0000A0B0                            ; Sprite mappings - giant ring
0000A0B0                            ; ---------------------------------------------------------------------------
0000A0B0 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A0B4 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A0B8 0A                         byte_9FDA:	dc.b $A
0000A0B9 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A0BE E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A0C3 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A0C8 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A0CD F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A0D2 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A0D7 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A0DC 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A0E1 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A0E6 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A0EB 08                         byte_A00D:	dc.b 8
0000A0EC E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A0F1 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A0F6 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A0FB F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A100 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A105 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A10A 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A10F 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A114 04                         byte_A036:	dc.b 4
0000A115 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A11A E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A11F 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A124 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A129 08                         byte_A04B:	dc.b 8
0000A12A E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A12F E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A134 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A139 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A13E F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A143 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A148 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A14D 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A152                            		even
0000A152                            		even
0000A152                            
0000A152                            ; ---------------------------------------------------------------------------
0000A152                            ; Sprite mappings - flash effect when you collect the giant ring
0000A152                            ; ---------------------------------------------------------------------------
0000A152                            Map_obj7C:
0000A152                            	include "_maps\obj7C.asm"
0000A152                            ; ---------------------------------------------------------------------------
0000A152                            ; Sprite mappings - flash effect when you collect the giant ring
0000A152                            ; ---------------------------------------------------------------------------
0000A152 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A156 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A15A 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A15E 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A162 02                         byte_A084:	dc.b 2
0000A163 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A168 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A16D 04                         byte_A08F:	dc.b 4
0000A16E E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A173 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A178 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A17D 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A182 04                         byte_A0A4:	dc.b 4
0000A183 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A188 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A18D 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A192 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A197 04                         byte_A0B9:	dc.b 4
0000A198 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A19D E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A1A2 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A1A7 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A1AC 04                         byte_A0CE:	dc.b 4
0000A1AD E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A1B2 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A1B7 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A1BC 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A1C1 04                         byte_A0E3:	dc.b 4
0000A1C2 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A1C7 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A1CC 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A1D1 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A1D6 02                         byte_A0F8:	dc.b 2
0000A1D7 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A1DC 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A1E1 04                         byte_A103:	dc.b 4
0000A1E2 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A1E7 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A1EC 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A1F1 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A1F6                            		even
0000A1F6                            		even
0000A1F6                            
0000A1F6                            ; ===========================================================================
0000A1F6                            ; ---------------------------------------------------------------------------
0000A1F6                            ; Object 26 - monitors
0000A1F6                            ; ---------------------------------------------------------------------------
0000A1F6                            
0000A1F6                            Obj26:					; XREF: Obj_Index
0000A1F6 7000                       		moveq	#0,d0
0000A1F8 1028 0024                  		move.b	$24(a0),d0
0000A1FC 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A200 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A204                            ; ===========================================================================
0000A204 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A206 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A208 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A20A 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A20C 0000                       		dc.w Obj26_Display-Obj26_Index
0000A20E                            ; ===========================================================================
0000A20E                            
0000A20E                            Obj26_Main:				; XREF: Obj26_Index
0000A20E 5428 0024                  		addq.b	#2,$24(a0)
0000A212 117C 000E 0016             		move.b	#$E,$16(a0)
0000A218 117C 000E 0017             		move.b	#$E,$17(a0)
0000A21E 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A226 317C 0680 0002             		move.w	#$680,2(a0)
0000A22C 117C 0004 0001             		move.b	#4,1(a0)
0000A232 117C 0003 0018             		move.b	#3,$18(a0)
0000A238 117C 000F 0019             		move.b	#$F,$19(a0)
0000A23E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A242 7000                       		moveq	#0,d0
0000A244 1028 0023                  		move.b	$23(a0),d0
0000A248 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A24E 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A254 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A256 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A25C 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A262 4E75                       		rts	
0000A264                            ; ===========================================================================
0000A264                            
0000A264                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A264 117C 0046 0020             		move.b	#$46,$20(a0)
0000A26A 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A270                            
0000A270                            Obj26_Solid:				; XREF: Obj26_Index
0000A270 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A274 6700                       		beq.s	loc_A1EC	; if not, branch
0000A276 5500                       		subq.b	#2,d0
0000A278 6600                       		bne.s	Obj26_Fall
0000A27A 7200                       		moveq	#0,d1
0000A27C 1228 0019                  		move.b	$19(a0),d1
0000A280 0641 000B                  		addi.w	#$B,d1
0000A284 6100 D43E                  		bsr.w	ExitPlatform
0000A288 0829 0003 0022             		btst	#3,$22(a1)
0000A28E 6600 0000                  		bne.w	loc_A1BC
0000A292 4228 0025                  		clr.b	$25(a0)
0000A296 6000 0000                  		bra.w	Obj26_Animate
0000A29A                            ; ===========================================================================
0000A29A                            
0000A29A                            loc_A1BC:				; XREF: Obj26_Solid
0000A29A 363C 0010                  		move.w	#$10,d3
0000A29E 3428 0008                  		move.w	8(a0),d2
0000A2A2 6100 D97E                  		bsr.w	MvSonicOnPtfm
0000A2A6 6000 0000                  		bra.w	Obj26_Animate
0000A2AA                            ; ===========================================================================
0000A2AA                            
0000A2AA                            Obj26_Fall:				; XREF: Obj26_Solid
0000A2AA 6100 0000                  		bsr.w	ObjectFall
0000A2AE 4EB9 0000 0000             		jsr	ObjHitFloor
0000A2B4 4A41                       		tst.w	d1
0000A2B6 6A00 0000                  		bpl.w	Obj26_Animate
0000A2BA D368 000C                  		add.w	d1,$C(a0)
0000A2BE 4268 0012                  		clr.w	$12(a0)
0000A2C2 4228 0025                  		clr.b	$25(a0)
0000A2C6 6000 0000                  		bra.w	Obj26_Animate
0000A2CA                            ; ===========================================================================
0000A2CA                            
0000A2CA                            loc_A1EC:				; XREF: Obj26_Solid
0000A2CA 323C 001A                  		move.w	#$1A,d1
0000A2CE 343C 000F                  		move.w	#$F,d2
0000A2D2 6100 0000                  		bsr.w	Obj26_SolidSides
0000A2D6 6700 0000                  		beq.w	loc_A25C
0000A2DA 4A69 0012                  		tst.w	$12(a1)
0000A2DE 6B00                       		bmi.s	loc_A20A
0000A2E0 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A2E6 6700                       		beq.s	loc_A25C	; if yes, branch
0000A2E8                            
0000A2E8                            loc_A20A:
0000A2E8 4A41                       		tst.w	d1
0000A2EA 6A00                       		bpl.s	loc_A220
0000A2EC 9769 000C                  		sub.w	d3,$C(a1)
0000A2F0 6100 D2C0                  		bsr.w	loc_74AE
0000A2F4 117C 0002 0025             		move.b	#2,$25(a0)
0000A2FA 6000 0000                  		bra.w	Obj26_Animate
0000A2FE                            ; ===========================================================================
0000A2FE                            
0000A2FE                            loc_A220:
0000A2FE 4A40                       		tst.w	d0
0000A300 6700 0000                  		beq.w	loc_A246
0000A304 6B00                       		bmi.s	loc_A230
0000A306 4A69 0010                  		tst.w	$10(a1)
0000A30A 6B00                       		bmi.s	loc_A246
0000A30C 6000                       		bra.s	loc_A236
0000A30E                            ; ===========================================================================
0000A30E                            
0000A30E                            loc_A230:
0000A30E 4A69 0010                  		tst.w	$10(a1)
0000A312 6A00                       		bpl.s	loc_A246
0000A314                            
0000A314                            loc_A236:
0000A314 9169 0008                  		sub.w	d0,8(a1)
0000A318 337C 0000 0014             		move.w	#0,$14(a1)
0000A31E 337C 0000 0010             		move.w	#0,$10(a1)
0000A324                            
0000A324                            loc_A246:
0000A324 0829 0001 0022             		btst	#1,$22(a1)
0000A32A 6600                       		bne.s	loc_A26A
0000A32C 08E9 0005 0022             		bset	#5,$22(a1)
0000A332 08E8 0005 0022             		bset	#5,$22(a0)
0000A338 6000                       		bra.s	Obj26_Animate
0000A33A                            ; ===========================================================================
0000A33A                            
0000A33A                            loc_A25C:
0000A33A 0828 0005 0022             		btst	#5,$22(a0)
0000A340 6700                       		beq.s	Obj26_Animate
0000A342 337C 0001 001C             		move.w	#1,$1C(a1)
0000A348                            
0000A348                            loc_A26A:
0000A348 08A8 0005 0022             		bclr	#5,$22(a0)
0000A34E 08A9 0005 0022             		bclr	#5,$22(a1)
0000A354                            
0000A354                            Obj26_Animate:				; XREF: Obj26_Index
0000A354 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A35A 6100 0000                  		bsr.w	AnimateSprite
0000A35E                            
0000A35E                            Obj26_Display:				; XREF: Obj26_Index
0000A35E 6100 0000                  		bsr.w	DisplaySprite
0000A362 3028 0008                  		move.w	8(a0),d0
0000A366 0240 FF80                  		andi.w	#$FF80,d0
0000A36A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A36E 0441 0080                  		subi.w	#$80,d1
0000A372 0241 FF80                  		andi.w	#$FF80,d1
0000A376 9041                       		sub.w	d1,d0
0000A378 0C40 0280                  		cmpi.w	#$280,d0
0000A37C 6200 0000                  		bhi.w	DeleteObject
0000A380 4E75                       		rts	
0000A382                            ; ===========================================================================
0000A382                            
0000A382                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A382 5428 0024                  		addq.b	#2,$24(a0)
0000A386 117C 0000 0020             		move.b	#0,$20(a0)
0000A38C 6100 0000                  		bsr.w	SingleObjLoad
0000A390 6600                       		bne.s	Obj26_Explode
0000A392 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A396 3368 0008 0008             		move.w	8(a0),8(a1)
0000A39C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A3A2 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A3A8                            
0000A3A8                            Obj26_Explode:
0000A3A8 6100 0000                  		bsr.w	SingleObjLoad
0000A3AC 6600                       		bne.s	Obj26_SetBroken
0000A3AE 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000A3B2 5429 0024                  		addq.b	#2,$24(a1)
0000A3B6 3368 0008 0008             		move.w	8(a0),8(a1)
0000A3BC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A3C2                            
0000A3C2                            Obj26_SetBroken:
0000A3C2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A3C6 7000                       		moveq	#0,d0
0000A3C8 1028 0023                  		move.b	$23(a0),d0
0000A3CC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A3D2 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A3D8 6000 0000                  		bra.w	DisplaySprite
0000A3DC                            ; ===========================================================================
0000A3DC                            ; ---------------------------------------------------------------------------
0000A3DC                            ; Object 2E - contents of monitors
0000A3DC                            ; ---------------------------------------------------------------------------
0000A3DC                            
0000A3DC                            Obj2E:					; XREF: Obj_Index
0000A3DC 7000                       		moveq	#0,d0
0000A3DE 1028 0024                  		move.b	$24(a0),d0
0000A3E2 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A3E6 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A3EA 6000 0000                  		bra.w	DisplaySprite
0000A3EE                            ; ===========================================================================
0000A3EE 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A3F0 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A3F2 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A3F4                            ; ===========================================================================
0000A3F4                            
0000A3F4                            Obj2E_Main:				; XREF: Obj2E_Index
0000A3F4 5428 0024                  		addq.b	#2,$24(a0)
0000A3F8 317C 0680 0002             		move.w	#$680,2(a0)
0000A3FE 117C 0024 0001             		move.b	#$24,1(a0)
0000A404 117C 0003 0018             		move.b	#3,$18(a0)
0000A40A 117C 0008 0019             		move.b	#8,$19(a0)
0000A410 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A416 7000                       		moveq	#0,d0
0000A418 1028 001C                  		move.b	$1C(a0),d0
0000A41C 5400                       		addq.b	#2,d0
0000A41E 1140 001A                  		move.b	d0,$1A(a0)
0000A422 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A428 D000                       		add.b	d0,d0
0000A42A D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A42E 5249                       		addq.w	#1,a1
0000A430 2149 0004                  		move.l	a1,4(a0)
0000A434                            
0000A434                            Obj2E_Move:				; XREF: Obj2E_Index
0000A434 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A438 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A43C 6100 0000                  		bsr.w	SpeedToPos
0000A440 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A446 4E75                       		rts	
0000A448                            ; ===========================================================================
0000A448                            
0000A448                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A448 5428 0024                  		addq.b	#2,$24(a0)
0000A44C 317C 001D 001E             		move.w	#29,$1E(a0)
0000A452 1028 001C                  		move.b	$1C(a0),d0
0000A456 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A45A 6600                       		bne.s	Obj2E_ChkSonic
0000A45C 4E75                       		rts			; Eggman monitor does nothing
0000A45E                            ; ===========================================================================
0000A45E                            
0000A45E                            Obj2E_ChkSonic:
0000A45E 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A462 6600                       		bne.s	Obj2E_ChkShoes
0000A464                            
0000A464                            ExtraLife:
0000A464 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A468 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A46C 303C 0088                  		move.w	#$88,d0
0000A470 4EF9 0000 1396             		jmp	(PlaySound).l	; play extra life music
0000A476                            ; ===========================================================================
0000A476                            
0000A476                            Obj2E_ChkShoes:
0000A476 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A47A 6600                       		bne.s	Obj2E_ChkShield
0000A47C 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A482 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A488 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A48E 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A494 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A49A 303C 00E2                  		move.w	#$E2,d0
0000A49E 4EF9 0000 1396             		jmp	(PlaySound).l	; Speed	up the music
0000A4A4                            ; ===========================================================================
0000A4A4                            
0000A4A4                            Obj2E_ChkShield:
0000A4A4 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A4A8 6600                       		bne.s	Obj2E_ChkInvinc
0000A4AA 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A4B0 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A4B6 303C 00AF                  		move.w	#$AF,d0
0000A4BA 4EF9 0000 1396             		jmp	(PlaySound).l	; play shield sound
0000A4C0                            ; ===========================================================================
0000A4C0                            
0000A4C0                            Obj2E_ChkInvinc:
0000A4C0 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A4C4 6600                       		bne.s	Obj2E_ChkRings
0000A4C6 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A4CC 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A4D2 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A4D8 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A4DE 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A4E4 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A4EA 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A4F0 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A4F6 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A4FC 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A502 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A506 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A508 303C 0087                  		move.w	#$87,d0
0000A50C 4EF9 0000 1396             		jmp	(PlaySound).l	; play invincibility music
0000A512                            ; ===========================================================================
0000A512                            
0000A512                            Obj2E_NoMusic:
0000A512 4E75                       		rts	
0000A514                            ; ===========================================================================
0000A514                            
0000A514                            Obj2E_ChkRings:
0000A514 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A518 6600                       		bne.s	Obj2E_ChkS
0000A51A 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A520 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A526 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A52C 6500                       		bcs.s	Obj2E_RingSound
0000A52E 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A534 6700 FF2E                  		beq.w	ExtraLife
0000A538 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A53E 6500                       		bcs.s	Obj2E_RingSound
0000A540 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A546 6700 FF1C                  		beq.w	ExtraLife
0000A54A                            
0000A54A                            Obj2E_RingSound:
0000A54A 303C 00B5                  		move.w	#$B5,d0
0000A54E 4EF9 0000 1396             		jmp	(PlaySound).l	; play ring sound
0000A554                            ; ===========================================================================
0000A554                            
0000A554                            Obj2E_ChkS:
0000A554 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A558 6600                       		bne.s	Obj2E_ChkEnd
0000A55A 4E71                       		nop	
0000A55C                            
0000A55C                            Obj2E_ChkEnd:
0000A55C 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A55E                            ; ===========================================================================
0000A55E                            
0000A55E                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A55E 5368 001E                  		subq.w	#1,$1E(a0)
0000A562 6B00 0000                  		bmi.w	DeleteObject
0000A566 4E75                       		rts	
0000A568                            ; ---------------------------------------------------------------------------
0000A568                            ; Subroutine to	make the sides of a monitor solid
0000A568                            ; ---------------------------------------------------------------------------
0000A568                            
0000A568                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A568                            
0000A568                            
0000A568                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A568 43F8 D000                  		lea	($FFFFD000).w,a1
0000A56C 3029 0008                  		move.w	8(a1),d0
0000A570 9068 0008                  		sub.w	8(a0),d0
0000A574 D041                       		add.w	d1,d0
0000A576 6B00                       		bmi.s	loc_A4E6
0000A578 3601                       		move.w	d1,d3
0000A57A D643                       		add.w	d3,d3
0000A57C B043                       		cmp.w	d3,d0
0000A57E 6200                       		bhi.s	loc_A4E6
0000A580 1629 0016                  		move.b	$16(a1),d3
0000A584 4883                       		ext.w	d3
0000A586 D443                       		add.w	d3,d2
0000A588 3629 000C                  		move.w	$C(a1),d3
0000A58C 9668 000C                  		sub.w	$C(a0),d3
0000A590 D642                       		add.w	d2,d3
0000A592 6B00                       		bmi.s	loc_A4E6
0000A594 D442                       		add.w	d2,d2
0000A596 B642                       		cmp.w	d2,d3
0000A598 6400                       		bcc.s	loc_A4E6
0000A59A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A59E 6B00                       		bmi.s	loc_A4E6
0000A5A0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A5A6 6400                       		bcc.s	loc_A4E6
0000A5A8 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A5AC 6600                       		bne.s	loc_A4E6
0000A5AE B240                       		cmp.w	d0,d1
0000A5B0 6400                       		bcc.s	loc_A4DC
0000A5B2 D241                       		add.w	d1,d1
0000A5B4 9041                       		sub.w	d1,d0
0000A5B6                            
0000A5B6                            loc_A4DC:
0000A5B6 0C43 0010                  		cmpi.w	#$10,d3
0000A5BA 6500                       		bcs.s	loc_A4EA
0000A5BC                            
0000A5BC                            loc_A4E2:
0000A5BC 7201                       		moveq	#1,d1
0000A5BE 4E75                       		rts	
0000A5C0                            ; ===========================================================================
0000A5C0                            
0000A5C0                            loc_A4E6:
0000A5C0 7200                       		moveq	#0,d1
0000A5C2 4E75                       		rts	
0000A5C4                            ; ===========================================================================
0000A5C4                            
0000A5C4                            loc_A4EA:
0000A5C4 7200                       		moveq	#0,d1
0000A5C6 1228 0019                  		move.b	$19(a0),d1
0000A5CA 5841                       		addq.w	#4,d1
0000A5CC 3401                       		move.w	d1,d2
0000A5CE D442                       		add.w	d2,d2
0000A5D0 D269 0008                  		add.w	8(a1),d1
0000A5D4 9268 0008                  		sub.w	8(a0),d1
0000A5D8 6BE2                       		bmi.s	loc_A4E2
0000A5DA B242                       		cmp.w	d2,d1
0000A5DC 64DE                       		bcc.s	loc_A4E2
0000A5DE 72FF                       		moveq	#-1,d1
0000A5E0 4E75                       		rts	
0000A5E2                            ; End of function Obj26_SolidSides
0000A5E2                            
0000A5E2                            ; ===========================================================================
0000A5E2                            Ani_obj26:
0000A5E2                            	include "_anim\obj26.asm"
0000A5E2                            ; ---------------------------------------------------------------------------
0000A5E2                            ; Animation script - monitors
0000A5E2                            ; ---------------------------------------------------------------------------
0000A5E2 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A5E8 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A5EE 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A5F4 0000                       		dc.w byte_A582-Ani_obj26
0000A5F6 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000A5FC 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000A608 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000A614 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000A620 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000A62C 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000A638 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000A644 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000A650 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000A65C 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000A664                            		even
0000A664                            		even
0000A664                            
0000A664                            ; ---------------------------------------------------------------------------
0000A664                            ; Sprite mappings - monitors
0000A664                            ; ---------------------------------------------------------------------------
0000A664                            Map_obj26:
0000A664                            	include "_maps\obj26.asm"
0000A664                            ; ---------------------------------------------------------------------------
0000A664                            ; Sprite mappings - monitors
0000A664                            ; ---------------------------------------------------------------------------
0000A664 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000A668 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000A66C 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000A670 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000A674 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000A678 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000A67C 01                         byte_A5A2:	dc.b 1			; static monitor
0000A67D EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A682 02                         byte_A5A8:	dc.b 2			; static monitor
0000A683 F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000A688 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A68D 02                         byte_A5B3:	dc.b 2			; static monitor
0000A68E F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000A693 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A698 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000A699 F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000A69E EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6A3 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000A6A4 F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000A6A9 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6AE 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000A6AF F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000A6B4 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6B9 02                         byte_A5DF:	dc.b 2			; shield monitor
0000A6BA F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000A6BF EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6C4 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000A6C5 F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000A6CA EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6CF 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000A6D0 F505 0030 F8               		dc.b $F5, 5, 0,	$30, $F8
0000A6D5 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6DA 02                         byte_A600:	dc.b 2			; 'S' monitor
0000A6DB F505 0034 F8               byte_A601:	dc.b $F5, 5, 0,	$34, $F8
0000A6E0 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6E5 02                         byte_A60B:	dc.b 2			; goggles monitor
0000A6E6 F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000A6EB EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6F0 01                         byte_A616:	dc.b 1			; broken monitor
0000A6F1 FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0
0000A6F6                            		even
0000A6F6                            		even
0000A6F6                            
0000A6F6                            ; ===========================================================================
0000A6F6                            ; ---------------------------------------------------------------------------
0000A6F6                            ; Object 0E - Sonic on the title screen
0000A6F6                            ; ---------------------------------------------------------------------------
0000A6F6                            
0000A6F6                            Obj0E:					; XREF: Obj_Index
0000A6F6 7000                       		moveq	#0,d0
0000A6F8 1028 0024                  		move.b	$24(a0),d0
0000A6FC 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000A700 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000A704                            ; ===========================================================================
0000A704 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000A706 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000A708 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000A70A 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000A70C                            ; ===========================================================================
0000A70C                            
0000A70C                            Obj0E_Main:				; XREF: Obj0E_Index
0000A70C 5428 0024                  		addq.b	#2,$24(a0)
0000A710 317C 00F0 0008             		move.w	#$F0,8(a0)
0000A716 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000A71C 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000A724 317C 2300 0002             		move.w	#$2300,2(a0)
0000A72A 117C 0001 0018             		move.b	#1,$18(a0)
0000A730 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000A736 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000A73C 6100 0000                  		bsr.w	AnimateSprite
0000A740                            
0000A740                            Obj0E_Delay:				; XREF: Obj0E_Index
0000A740 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000A744 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000A746 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000A74A 6000 0000                  		bra.w	DisplaySprite
0000A74E                            ; ===========================================================================
0000A74E                            
0000A74E                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000A74E 4E75                       		rts	
0000A750                            ; ===========================================================================
0000A750                            
0000A750                            Obj0E_Move:				; XREF: Obj0E_Index
0000A750 5168 000A                  		subq.w	#8,$A(a0)
0000A754 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000A75A 6600                       		bne.s	Obj0E_Display
0000A75C 5428 0024                  		addq.b	#2,$24(a0)
0000A760                            
0000A760                            Obj0E_Display:
0000A760 6000 0000                  		bra.w	DisplaySprite
0000A764                            ; ===========================================================================
0000A764 4E75                       		rts	
0000A766                            ; ===========================================================================
0000A766                            
0000A766                            Obj0E_Animate:				; XREF: Obj0E_Index
0000A766 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000A76C 6100 0000                  		bsr.w	AnimateSprite
0000A770 6000 0000                  		bra.w	DisplaySprite
0000A774                            ; ===========================================================================
0000A774 4E75                       		rts	
0000A776                            ; ===========================================================================
0000A776                            ; ---------------------------------------------------------------------------
0000A776                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000A776                            ; ---------------------------------------------------------------------------
0000A776                            
0000A776                            Obj0F:					; XREF: Obj_Index
0000A776 7000                       		moveq	#0,d0
0000A778 1028 0024                  		move.b	$24(a0),d0
0000A77C 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000A780 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000A784 6000 0000                  		bra.w	DisplaySprite
0000A788                            ; ===========================================================================
0000A788 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000A78A 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000A78C 0000                       		dc.w locret_A6F8-Obj0F_Index
0000A78E                            ; ===========================================================================
0000A78E                            
0000A78E                            Obj0F_Main:				; XREF: Obj0F_Index
0000A78E 5428 0024                  		addq.b	#2,$24(a0)
0000A792 317C 00D0 0008             		move.w	#$D0,8(a0)
0000A798 317C 0130 000A             		move.w	#$130,$A(a0)
0000A79E 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000A7A6 317C 0200 0002             		move.w	#$200,2(a0)
0000A7AC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000A7B2 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000A7B4 5428 0024                  		addq.b	#2,$24(a0)
0000A7B8 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000A7BE 6600                       		bne.s	locret_A6F8	; if not, branch
0000A7C0 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000A7C6 317C 0170 0008             		move.w	#$170,8(a0)
0000A7CC 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000A7D2                            
0000A7D2                            locret_A6F8:				; XREF: Obj0F_Index
0000A7D2 4E75                       		rts	
0000A7D4                            ; ===========================================================================
0000A7D4                            
0000A7D4                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000A7D4 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000A7DA 6000 0000                  		bra.w	AnimateSprite
0000A7DE                            ; ===========================================================================
0000A7DE                            Ani_obj0E:
0000A7DE                            	include "_anim\obj0E.asm"
0000A7DE                            ; ---------------------------------------------------------------------------
0000A7DE                            ; Animation script - Sonic on the title screen
0000A7DE                            ; ---------------------------------------------------------------------------
0000A7DE 0000                       		dc.w byte_A706-Ani_obj0E
0000A7E0 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000A7EC                            		even
0000A7EC                            		even
0000A7EC                            
0000A7EC                            Ani_obj0F:
0000A7EC                            	include "_anim\obj0F.asm"
0000A7EC                            ; ---------------------------------------------------------------------------
0000A7EC                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000A7EC                            ; ---------------------------------------------------------------------------
0000A7EC 0000                       		dc.w byte_A714-Ani_obj0F
0000A7EE 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000A7F2                            		even
0000A7F2                            		even
0000A7F2                            
0000A7F2                            ; ---------------------------------------------------------------------------
0000A7F2                            ; Subroutine to	animate	a sprite using an animation script
0000A7F2                            ; ---------------------------------------------------------------------------
0000A7F2                            
0000A7F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A7F2                            
0000A7F2                            
0000A7F2                            AnimateSprite:
0000A7F2 7000                       		moveq	#0,d0
0000A7F4 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000A7F8 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000A7FC 6700                       		beq.s	Anim_Run	; if not, branch
0000A7FE 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000A802 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000A808 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000A80E                            
0000A80E                            Anim_Run:
0000A80E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A812 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000A814 D040                       		add.w	d0,d0
0000A816 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000A81A 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000A81E 7200                       		moveq	#0,d1
0000A820 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000A824 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000A828 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000A82A                            
0000A82A                            Anim_Next:
0000A82A 1200                       		move.b	d0,d1
0000A82C 0200 001F                  		andi.b	#$1F,d0
0000A830 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000A834 1028 0022                  		move.b	$22(a0),d0
0000A838 E719                       		rol.b	#3,d1
0000A83A B101                       		eor.b	d0,d1
0000A83C 0201 0003                  		andi.b	#3,d1
0000A840 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000A846 8328 0001                  		or.b	d1,1(a0)
0000A84A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000A84E                            
0000A84E                            Anim_Wait:
0000A84E 4E75                       		rts	
0000A850                            ; ===========================================================================
0000A850                            
0000A850                            Anim_End_FF:
0000A850 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000A852 6600                       		bne.s	Anim_End_FE	; if not, branch
0000A854 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000A85A 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000A85E 60CA                       		bra.s	Anim_Next
0000A860                            ; ===========================================================================
0000A860                            
0000A860                            Anim_End_FE:
0000A860 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000A862 6600                       		bne.s	Anim_End_FD	; if not, branch
0000A864 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000A868 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000A86C 9200                       		sub.b	d0,d1
0000A86E 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000A872 60B6                       		bra.s	Anim_Next
0000A874                            ; ===========================================================================
0000A874                            
0000A874                            Anim_End_FD:
0000A874 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000A876 6600                       		bne.s	Anim_End_FC	; if not, branch
0000A878 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000A87E                            
0000A87E                            Anim_End_FC:
0000A87E 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000A880 6600                       		bne.s	Anim_End_FB	; if not, branch
0000A882 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000A886                            
0000A886                            Anim_End_FB:
0000A886 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000A888 6600                       		bne.s	Anim_End_FA	; if not, branch
0000A88A 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000A890 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000A894                            
0000A894                            Anim_End_FA:
0000A894 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000A896 6600                       		bne.s	Anim_End	; if not, branch
0000A898 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000A89C                            
0000A89C                            Anim_End:
0000A89C 4E75                       		rts	
0000A89E                            ; End of function AnimateSprite
0000A89E                            
0000A89E                            ; ===========================================================================
0000A89E                            ; ---------------------------------------------------------------------------
0000A89E                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000A89E                            ; ---------------------------------------------------------------------------
0000A89E                            Map_obj0F:
0000A89E                            	include "_maps\obj0F.asm"
0000A89E                            ; ---------------------------------------------------------------------------
0000A89E                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000A89E                            ; ---------------------------------------------------------------------------
0000A89E 0000                       		dc.w byte_A7CD-Map_obj0F
0000A8A0 0000                       		dc.w byte_A7CC-Map_obj0F
0000A8A2 0000                       		dc.w byte_A7EB-Map_obj0F
0000A8A4 0000                       		dc.w byte_A882-Map_obj0F
0000A8A6 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000A8A7 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000A8AC 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000A8B1 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000A8B6 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000A8BB 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000A8C0 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000A8C5 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000A8C6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8CB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8D0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8D5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8DA B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8DF B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8E4 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8E9 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8EE B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8F3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8F8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A8FD D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A902 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A907 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A90C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A911 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A916 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A91B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A920 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A925 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A92A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A92F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A934 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A939 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A93E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A943 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A948 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A94D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A952 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A957 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A95C 01                         byte_A882:	dc.b 1			; "TM"
0000A95D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000A962                            		even
0000A962                            		even
0000A962                            
0000A962                            ; ---------------------------------------------------------------------------
0000A962                            ; Sprite mappings - Sonic on the title screen
0000A962                            ; ---------------------------------------------------------------------------
0000A962                            Map_obj0E:
0000A962                            	include "_maps\obj0E.asm"
0000A962                            ; ---------------------------------------------------------------------------
0000A962                            ; Sprite mappings - Sonic on the title screen
0000A962                            ; ---------------------------------------------------------------------------
0000A962 0000                       		dc.w byte_A898-Map_obj0E
0000A964 0000                       		dc.w byte_A8CB-Map_obj0E
0000A966 0000                       		dc.w byte_A917-Map_obj0E
0000A968 0000                       		dc.w byte_A96D-Map_obj0E
0000A96A 0000                       		dc.w byte_A9AF-Map_obj0E
0000A96C 0000                       		dc.w byte_A9E7-Map_obj0E
0000A96E 0000                       		dc.w byte_AA47-Map_obj0E
0000A970 0000                       		dc.w byte_AAB1-Map_obj0E
0000A972 0A                         byte_A898:	dc.b $A
0000A973 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000A978 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000A97D 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000A982 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000A987 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000A98C 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000A991 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000A996 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000A99B 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000A9A0 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000A9A5 0F                         byte_A8CB:	dc.b $F
0000A9A6 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000A9AB 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000A9B0 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000A9B5 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000A9BA 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000A9BF 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000A9C4 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000A9C9 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000A9CE 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000A9D3 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000A9D8 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000A9DD 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000A9E2 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000A9E7 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000A9EC 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000A9F1 11                         byte_A917:	dc.b $11
0000A9F2 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000A9F7 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000A9FC 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000AA01 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000AA06 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000AA0B 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000AA10 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000AA15 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000AA1A 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000AA1F 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000AA24 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000AA29 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000AA2E 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000AA33 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000AA38 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000AA3D 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000AA42 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000AA47 0D                         byte_A96D:	dc.b $D
0000AA48 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000AA4D 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000AA52 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000AA57 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000AA5C 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000AA61 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000AA66 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000AA6B 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000AA70 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000AA75 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000AA7A 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000AA7F 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000AA84 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000AA89 0B                         byte_A9AF:	dc.b $B
0000AA8A 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000AA8F 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000AA94 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000AA99 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000AA9E 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000AAA3 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000AAA8 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000AAAD 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000AAB2 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000AAB7 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000AABC 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000AAC1 13                         byte_A9E7:	dc.b $13
0000AAC2 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000AAC7 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000AACC 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000AAD1 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000AAD6 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000AADB 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000AAE0 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000AAE5 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000AAEA 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000AAEF 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000AAF4 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000AAF9 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000AAFE 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000AB03 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000AB08 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000AB0D 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000AB12 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000AB17 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000AB1C 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000AB21 15                         byte_AA47:	dc.b $15
0000AB22 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000AB27 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000AB2C 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000AB31 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000AB36 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000AB3B 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000AB40 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000AB45 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000AB4A 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000AB4F 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000AB54 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000AB59 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000AB5E 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000AB63 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000AB68 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000AB6D 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000AB72 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000AB77 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000AB7C 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000AB81 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000AB86 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000AB8B 16                         byte_AAB1:	dc.b $16
0000AB8C 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000AB91 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000AB96 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000AB9B 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000ABA0 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000ABA5 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000ABAA 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000ABAF 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000ABB4 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000ABB9 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000ABBE 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000ABC3 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000ABC8 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000ABCD 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000ABD2 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000ABD7 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000ABDC 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000ABE1 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000ABE6 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000ABEB 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000ABF0 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000ABF5 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000ABFA                            		even
0000ABFA                            		even
0000ABFA                            
0000ABFA                            ; ===========================================================================
0000ABFA                            ; ---------------------------------------------------------------------------
0000ABFA                            ; Object 2B - Chopper enemy (GHZ)
0000ABFA                            ; ---------------------------------------------------------------------------
0000ABFA                            
0000ABFA                            Obj2B:					; XREF: Obj_Index
0000ABFA 7000                       		moveq	#0,d0
0000ABFC 1028 0024                  		move.b	$24(a0),d0
0000AC00 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000AC04 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000AC08 6000 0000                  		bra.w	MarkObjGone
0000AC0C                            ; ===========================================================================
0000AC0C 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000AC0E 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000AC10                            ; ===========================================================================
0000AC10                            
0000AC10                            Obj2B_Main:				; XREF: Obj2B_Index
0000AC10 5428 0024                  		addq.b	#2,$24(a0)
0000AC14 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000AC1C 317C 047B 0002             		move.w	#$47B,2(a0)
0000AC22 117C 0004 0001             		move.b	#4,1(a0)
0000AC28 117C 0004 0018             		move.b	#4,$18(a0)
0000AC2E 117C 0009 0020             		move.b	#9,$20(a0)
0000AC34 117C 0010 0019             		move.b	#$10,$19(a0)
0000AC3A 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AC40 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000AC46                            
0000AC46                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000AC46 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000AC4C 6100 FBA4                  		bsr.w	AnimateSprite
0000AC50 6100 0000                  		bsr.w	SpeedToPos
0000AC54 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000AC5A 3028 0030                  		move.w	$30(a0),d0
0000AC5E B068 000C                  		cmp.w	$C(a0),d0
0000AC62 6400                       		bcc.s	Obj2B_ChgAni
0000AC64 3140 000C                  		move.w	d0,$C(a0)
0000AC68 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AC6E                            
0000AC6E                            Obj2B_ChgAni:
0000AC6E 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000AC74 0440 00C0                  		subi.w	#$C0,d0
0000AC78 B068 000C                  		cmp.w	$C(a0),d0
0000AC7C 6400                       		bcc.s	locret_ABB6
0000AC7E 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000AC84 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000AC88 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000AC8A 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000AC90                            
0000AC90                            locret_ABB6:
0000AC90 4E75                       		rts	
0000AC92                            ; ===========================================================================
0000AC92                            Ani_obj2B:
0000AC92                            	include "_anim\obj2B.asm"
0000AC92                            ; ---------------------------------------------------------------------------
0000AC92                            ; Animation script - Chopper enemy
0000AC92                            ; ---------------------------------------------------------------------------
0000AC92 0000                       		dc.w byte_ABBE-Ani_obj2B
0000AC94 0000                       		dc.w byte_ABC2-Ani_obj2B
0000AC96 0000                       		dc.w byte_ABC6-Ani_obj2B
0000AC98 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000AC9C 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000ACA0 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000ACA4 00                         		even
0000ACA4 00                         		even
0000ACA4                            
0000ACA4                            ; ---------------------------------------------------------------------------
0000ACA4                            ; Sprite mappings - Chopper enemy (GHZ)
0000ACA4                            ; ---------------------------------------------------------------------------
0000ACA4                            Map_obj2B:
0000ACA4                            	include "_maps\obj2B.asm"
0000ACA4                            ; ---------------------------------------------------------------------------
0000ACA4                            ; Sprite mappings - Chopper enemy (GHZ)
0000ACA4                            ; ---------------------------------------------------------------------------
0000ACA4 0000                       		dc.w byte_ABCE-Map_obj2B
0000ACA6 0000                       		dc.w byte_ABD4-Map_obj2B
0000ACA8 01                         byte_ABCE:	dc.b 1
0000ACA9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000ACAE 01                         byte_ABD4:	dc.b 1
0000ACAF F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000ACB4                            		even
0000ACB4                            		even
0000ACB4                            
0000ACB4                            ; ===========================================================================
0000ACB4                            ; ---------------------------------------------------------------------------
0000ACB4                            ; Object 2C - Jaws enemy (LZ)
0000ACB4                            ; ---------------------------------------------------------------------------
0000ACB4                            
0000ACB4                            Obj2C:					; XREF: Obj_Index
0000ACB4 7000                       		moveq	#0,d0
0000ACB6 1028 0024                  		move.b	$24(a0),d0
0000ACBA 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000ACBE 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000ACC2                            ; ===========================================================================
0000ACC2 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000ACC4 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000ACC6                            ; ===========================================================================
0000ACC6                            
0000ACC6                            Obj2C_Main:				; XREF: Obj2C_Index
0000ACC6 5428 0024                  		addq.b	#2,$24(a0)
0000ACCA 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000ACD2 317C 2486 0002             		move.w	#$2486,2(a0)
0000ACD8 0028 0004 0001             		ori.b	#4,1(a0)
0000ACDE 117C 000A 0020             		move.b	#$A,$20(a0)
0000ACE4 117C 0004 0018             		move.b	#4,$18(a0)
0000ACEA 117C 0010 0019             		move.b	#$10,$19(a0)
0000ACF0 7000                       		moveq	#0,d0
0000ACF2 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000ACF6 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000ACF8 5340                       		subq.w	#1,d0
0000ACFA 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000ACFE 3140 0032                  		move.w	d0,$32(a0)
0000AD02 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000AD08 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000AD0E 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000AD10 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000AD14                            
0000AD14                            Obj2C_Turn:				; XREF: Obj2C_Index
0000AD14 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000AD18 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000AD1A 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000AD20 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000AD24 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000AD2A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000AD30                            
0000AD30                            Obj2C_Animate:
0000AD30 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000AD36 6100 FABA                  		bsr.w	AnimateSprite
0000AD3A 6100 0000                  		bsr.w	SpeedToPos
0000AD3E 6000 0000                  		bra.w	MarkObjGone
0000AD42                            ; ===========================================================================
0000AD42                            Ani_obj2C:
0000AD42                            	include "_anim\obj2C.asm"
0000AD42                            ; ---------------------------------------------------------------------------
0000AD42                            ; Animation script - Jaws enemy
0000AD42                            ; ---------------------------------------------------------------------------
0000AD42 0000                       		dc.w byte_AC6A-Ani_obj2C
0000AD44 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000AD4A                            		even
0000AD4A                            		even
0000AD4A                            
0000AD4A                            ; ---------------------------------------------------------------------------
0000AD4A                            ; Sprite mappings - Jaws enemy (LZ)
0000AD4A                            ; ---------------------------------------------------------------------------
0000AD4A                            Map_obj2C:
0000AD4A                            	include "_maps\obj2C.asm"
0000AD4A                            ; ---------------------------------------------------------------------------
0000AD4A                            ; Sprite mappings - Jaws enemy (LZ)
0000AD4A                            ; ---------------------------------------------------------------------------
0000AD4A 0000                       		dc.w byte_AC78-Map_obj2C
0000AD4C 0000                       		dc.w byte_AC83-Map_obj2C
0000AD4E 0000                       		dc.w byte_AC8E-Map_obj2C
0000AD50 0000                       		dc.w byte_AC99-Map_obj2C
0000AD52 02                         byte_AC78:	dc.b 2
0000AD53 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000AD58 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000AD5D 02                         byte_AC83:	dc.b 2
0000AD5E F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000AD63 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000AD68 02                         byte_AC8E:	dc.b 2
0000AD69 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000AD6E F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000AD73 02                         byte_AC99:	dc.b 2
0000AD74 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000AD79 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000AD7E                            		even
0000AD7E                            		even
0000AD7E                            
0000AD7E                            ; ===========================================================================
0000AD7E                            ; ---------------------------------------------------------------------------
0000AD7E                            ; Object 2D - Burrobot enemy (LZ)
0000AD7E                            ; ---------------------------------------------------------------------------
0000AD7E                            
0000AD7E                            Obj2D:					; XREF: Obj_Index
0000AD7E 7000                       		moveq	#0,d0
0000AD80 1028 0024                  		move.b	$24(a0),d0
0000AD84 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000AD88 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000AD8C                            ; ===========================================================================
0000AD8C 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000AD8E 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000AD90                            ; ===========================================================================
0000AD90                            
0000AD90                            Obj2D_Main:				; XREF: Obj2D_Index
0000AD90 5428 0024                  		addq.b	#2,$24(a0)
0000AD94 117C 0013 0016             		move.b	#$13,$16(a0)
0000AD9A 117C 0008 0017             		move.b	#8,$17(a0)
0000ADA0 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000ADA8 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000ADAE 0028 0004 0001             		ori.b	#4,1(a0)
0000ADB4 117C 0004 0018             		move.b	#4,$18(a0)
0000ADBA 117C 0005 0020             		move.b	#5,$20(a0)
0000ADC0 117C 000C 0019             		move.b	#$C,$19(a0)
0000ADC6 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000ADCA 117C 0002 001C             		move.b	#2,$1C(a0)
0000ADD0                            
0000ADD0                            Obj2D_Action:				; XREF: Obj2D_Index
0000ADD0 7000                       		moveq	#0,d0
0000ADD2 1028 0025                  		move.b	$25(a0),d0
0000ADD6 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000ADDA 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000ADDE 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000ADE4 6100 FA0C                  		bsr.w	AnimateSprite
0000ADE8 6000 0000                  		bra.w	MarkObjGone
0000ADEC                            ; ===========================================================================
0000ADEC 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000ADEE 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000ADF0 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000ADF2 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000ADF4                            ; ===========================================================================
0000ADF4                            
0000ADF4                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000ADF4 5368 0030                  		subq.w	#1,$30(a0)
0000ADF8 6A00                       		bpl.s	locret_AD42
0000ADFA 5428 0025                  		addq.b	#2,$25(a0)
0000ADFE 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000AE04 317C 0080 0010             		move.w	#$80,$10(a0)
0000AE0A 117C 0001 001C             		move.b	#1,$1C(a0)
0000AE10 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000AE16 6700                       		beq.s	locret_AD42
0000AE18 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000AE1C                            
0000AE1C                            locret_AD42:
0000AE1C 4E75                       		rts	
0000AE1E                            ; ===========================================================================
0000AE1E                            
0000AE1E                            Obj2D_Move:				; XREF: Obj2D_Index2
0000AE1E 5368 0030                  		subq.w	#1,$30(a0)
0000AE22 6B00                       		bmi.s	loc_AD84
0000AE24 6100 0000                  		bsr.w	SpeedToPos
0000AE28 0868 0000 0032             		bchg	#0,$32(a0)
0000AE2E 6600                       		bne.s	loc_AD78
0000AE30 3628 0008                  		move.w	8(a0),d3
0000AE34 0643 000C                  		addi.w	#$C,d3
0000AE38 0828 0000 0022             		btst	#0,$22(a0)
0000AE3E 6600                       		bne.s	loc_AD6A
0000AE40 0443 0018                  		subi.w	#$18,d3
0000AE44                            
0000AE44                            loc_AD6A:
0000AE44 4EB9 0000 0000             		jsr	ObjHitFloor2
0000AE4A 0C41 000C                  		cmpi.w	#$C,d1
0000AE4E 6C00                       		bge.s	loc_AD84
0000AE50 4E75                       		rts	
0000AE52                            ; ===========================================================================
0000AE52                            
0000AE52                            loc_AD78:				; XREF: Obj2D_Move
0000AE52 4EB9 0000 0000             		jsr	ObjHitFloor
0000AE58 D368 000C                  		add.w	d1,$C(a0)
0000AE5C 4E75                       		rts	
0000AE5E                            ; ===========================================================================
0000AE5E                            
0000AE5E                            loc_AD84:				; XREF: Obj2D_Move
0000AE5E 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000AE64 6700                       		beq.s	loc_ADA4
0000AE66 5528 0025                  		subq.b	#2,$25(a0)
0000AE6A 317C 003B 0030             		move.w	#$3B,$30(a0)
0000AE70 317C 0000 0010             		move.w	#0,$10(a0)
0000AE76 117C 0000 001C             		move.b	#0,$1C(a0)
0000AE7C 4E75                       		rts	
0000AE7E                            ; ===========================================================================
0000AE7E                            
0000AE7E                            loc_ADA4:
0000AE7E 5428 0025                  		addq.b	#2,$25(a0)
0000AE82 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AE88 117C 0002 001C             		move.b	#2,$1C(a0)
0000AE8E 4E75                       		rts	
0000AE90                            ; ===========================================================================
0000AE90                            
0000AE90                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000AE90 6100 0000                  		bsr.w	SpeedToPos
0000AE94 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AE9A 6B00                       		bmi.s	locret_ADF0
0000AE9C 117C 0003 001C             		move.b	#3,$1C(a0)
0000AEA2 4EB9 0000 0000             		jsr	ObjHitFloor
0000AEA8 4A41                       		tst.w	d1
0000AEAA 6A00                       		bpl.s	locret_ADF0
0000AEAC D368 000C                  		add.w	d1,$C(a0)
0000AEB0 317C 0000 0012             		move.w	#0,$12(a0)
0000AEB6 117C 0001 001C             		move.b	#1,$1C(a0)
0000AEBC 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000AEC2 5528 0025                  		subq.b	#2,$25(a0)
0000AEC6 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000AECA                            
0000AECA                            locret_ADF0:
0000AECA 4E75                       		rts	
0000AECC                            ; ===========================================================================
0000AECC                            
0000AECC                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000AECC 343C 0060                  		move.w	#$60,d2
0000AED0 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000AED4 6400                       		bcc.s	locret_AE20
0000AED6 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000AEDA 9068 000C                  		sub.w	$C(a0),d0
0000AEDE 6400                       		bcc.s	locret_AE20
0000AEE0 0C40 FF80                  		cmpi.w	#-$80,d0
0000AEE4 6500                       		bcs.s	locret_AE20
0000AEE6 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AEEA 6600                       		bne.s	locret_AE20
0000AEEC 5528 0025                  		subq.b	#2,$25(a0)
0000AEF0 3141 0010                  		move.w	d1,$10(a0)
0000AEF4 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AEFA                            
0000AEFA                            locret_AE20:
0000AEFA 4E75                       		rts	
0000AEFC                            
0000AEFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AEFC                            
0000AEFC                            
0000AEFC                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000AEFC 323C 0080                  		move.w	#$80,d1
0000AF00 08E8 0000 0022             		bset	#0,$22(a0)
0000AF06 3038 D008                  		move.w	($FFFFD008).w,d0
0000AF0A 9068 0008                  		sub.w	8(a0),d0
0000AF0E 6400                       		bcc.s	loc_AE40
0000AF10 4440                       		neg.w	d0
0000AF12 4441                       		neg.w	d1
0000AF14 08A8 0000 0022             		bclr	#0,$22(a0)
0000AF1A                            
0000AF1A                            loc_AE40:
0000AF1A B042                       		cmp.w	d2,d0
0000AF1C 4E75                       		rts	
0000AF1E                            ; End of function Obj2D_ChkSonic2
0000AF1E                            
0000AF1E                            ; ===========================================================================
0000AF1E                            Ani_obj2D:
0000AF1E                            	include "_anim\obj2D.asm"
0000AF1E                            ; ---------------------------------------------------------------------------
0000AF1E                            ; Animation script - Burrobot enemy
0000AF1E                            ; ---------------------------------------------------------------------------
0000AF1E 0000                       		dc.w byte_AE4C-Ani_obj2D
0000AF20 0000                       		dc.w byte_AE50-Ani_obj2D
0000AF22 0000                       		dc.w byte_AE54-Ani_obj2D
0000AF24 0000                       		dc.w byte_AE58-Ani_obj2D
0000AF26 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000AF2A 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000AF2E 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000AF32 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000AF36 00                         		even
0000AF36 00                         		even
0000AF36                            
0000AF36                            ; ---------------------------------------------------------------------------
0000AF36                            ; Sprite mappings - Burrobot enemy (LZ)
0000AF36                            ; ---------------------------------------------------------------------------
0000AF36                            Map_obj2D:
0000AF36                            	include "_maps\obj2D.asm"
0000AF36                            ; ---------------------------------------------------------------------------
0000AF36                            ; Sprite mappings - Burrobot enemy (LZ)
0000AF36                            ; ---------------------------------------------------------------------------
0000AF36 0000                       		dc.w byte_AE6A-Map_obj2D
0000AF38 0000                       		dc.w byte_AE75-Map_obj2D
0000AF3A 0000                       		dc.w byte_AE80-Map_obj2D
0000AF3C 0000                       		dc.w byte_AE8B-Map_obj2D
0000AF3E 0000                       		dc.w byte_AE96-Map_obj2D
0000AF40 0000                       		dc.w byte_AEA1-Map_obj2D
0000AF42 0000                       		dc.w byte_AEAC-Map_obj2D
0000AF44 02                         byte_AE6A:	dc.b 2
0000AF45 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000AF4A 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000AF4F 02                         byte_AE75:	dc.b 2
0000AF50 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000AF55 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000AF5A 02                         byte_AE80:	dc.b 2
0000AF5B E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000AF60 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000AF65 02                         byte_AE8B:	dc.b 2
0000AF66 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000AF6B 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000AF70 02                         byte_AE96:	dc.b 2
0000AF71 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000AF76 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000AF7B 02                         byte_AEA1:	dc.b 2
0000AF7C F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000AF81 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000AF86 02                         byte_AEAC:	dc.b 2
0000AF87 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000AF8C 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000AF92 00                         		even
0000AF92 00                         		even
0000AF92                            
0000AF92                            ; ===========================================================================
0000AF92                            ; ---------------------------------------------------------------------------
0000AF92                            ; Object 2F - large moving platforms (MZ)
0000AF92                            ; ---------------------------------------------------------------------------
0000AF92                            
0000AF92                            Obj2F:					; XREF: Obj_Index
0000AF92 7000                       		moveq	#0,d0
0000AF94 1028 0024                  		move.b	$24(a0),d0
0000AF98 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000AF9C 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000AFA0                            ; ===========================================================================
0000AFA0 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000AFA2 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000AFA4                            
0000AFA4 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000AFA6 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000AFA8 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000AFAA 0140                       		dc.b 1,	$40
0000AFAC 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000AFAE 0220                       		dc.b 2,	$20
0000AFB0                            ; ===========================================================================
0000AFB0                            
0000AFB0                            Obj2F_Main:				; XREF: Obj2F_Index
0000AFB0 5428 0024                  		addq.b	#2,$24(a0)
0000AFB4 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000AFBC 317C C000 0002             		move.w	#$C000,2(a0)
0000AFC2 117C 0004 0001             		move.b	#4,1(a0)
0000AFC8 117C 0005 0018             		move.b	#5,$18(a0)
0000AFCE 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000AFD4 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000AFDA 7000                       		moveq	#0,d0
0000AFDC 1028 0028                  		move.b	$28(a0),d0
0000AFE0 E448                       		lsr.w	#2,d0
0000AFE2 0240 001C                  		andi.w	#$1C,d0
0000AFE6 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000AFEA 3019                       		move.w	(a1)+,d0
0000AFEC 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000AFF0 214A 0030                  		move.l	a2,$30(a0)
0000AFF4 1159 001A                  		move.b	(a1)+,$1A(a0)
0000AFF8 1151 0019                  		move.b	(a1),$19(a0)
0000AFFC 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B002 117C 0040 0016             		move.b	#$40,$16(a0)
0000B008 08E8 0004 0001             		bset	#4,1(a0)
0000B00E                            
0000B00E                            Obj2F_Action:				; XREF: Obj2F_Index
0000B00E 6100 0000                  		bsr.w	Obj2F_Types
0000B012 4A28 0025                  		tst.b	$25(a0)
0000B016 6700                       		beq.s	Obj2F_Solid
0000B018 7200                       		moveq	#0,d1
0000B01A 1228 0019                  		move.b	$19(a0),d1
0000B01E 0641 000B                  		addi.w	#$B,d1
0000B022 6100 C6A0                  		bsr.w	ExitPlatform
0000B026 0829 0003 0022             		btst	#3,$22(a1)
0000B02C 6600 0000                  		bne.w	Obj2F_Slope
0000B030 4228 0025                  		clr.b	$25(a0)
0000B034 6000                       		bra.s	Obj2F_Display
0000B036                            ; ===========================================================================
0000B036                            
0000B036                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B036 7200                       		moveq	#0,d1
0000B038 1228 0019                  		move.b	$19(a0),d1
0000B03C 0641 000B                  		addi.w	#$B,d1
0000B040 2468 0030                  		movea.l	$30(a0),a2
0000B044 3428 0008                  		move.w	8(a0),d2
0000B048 6100 D5D8                  		bsr.w	SlopeObject2
0000B04C 6000                       		bra.s	Obj2F_Display
0000B04E                            ; ===========================================================================
0000B04E                            
0000B04E                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B04E 7200                       		moveq	#0,d1
0000B050 1228 0019                  		move.b	$19(a0),d1
0000B054 0641 000B                  		addi.w	#$B,d1
0000B058 343C 0020                  		move.w	#$20,d2
0000B05C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B062 6600                       		bne.s	loc_AF8E
0000B064 343C 0030                  		move.w	#$30,d2
0000B068                            
0000B068                            loc_AF8E:
0000B068 2468 0030                  		movea.l	$30(a0),a2
0000B06C 6100 0000                  		bsr.w	SolidObject2F
0000B070                            
0000B070                            Obj2F_Display:				; XREF: Obj2F_Action
0000B070 6100 0000                  		bsr.w	DisplaySprite
0000B074 6000 0000                  		bra.w	Obj2F_ChkDel
0000B078                            
0000B078                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B078                            
0000B078                            
0000B078                            Obj2F_Types:				; XREF: Obj2F_Action
0000B078 7000                       		moveq	#0,d0
0000B07A 1028 0028                  		move.b	$28(a0),d0
0000B07E 0240 0007                  		andi.w	#7,d0
0000B082 D040                       		add.w	d0,d0
0000B084 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B088 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B08C                            ; End of function Obj2F_Types
0000B08C                            
0000B08C                            ; ===========================================================================
0000B08C 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B08E 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B090 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B092 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B094 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B096 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B098                            ; ===========================================================================
0000B098                            
0000B098                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B098 4E75                       		rts			; type 00 platform doesn't move
0000B09A                            ; ===========================================================================
0000B09A                            
0000B09A                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B09A 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B09E 323C 0020                  		move.w	#$20,d1
0000B0A2 6000                       		bra.s	Obj2F_Move
0000B0A4                            ; ===========================================================================
0000B0A4                            
0000B0A4                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B0A4 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B0A8 323C 0030                  		move.w	#$30,d1
0000B0AC 6000                       		bra.s	Obj2F_Move
0000B0AE                            ; ===========================================================================
0000B0AE                            
0000B0AE                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B0AE 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B0B2 323C 0040                  		move.w	#$40,d1
0000B0B6 6000                       		bra.s	Obj2F_Move
0000B0B8                            ; ===========================================================================
0000B0B8                            
0000B0B8                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B0B8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B0BC 323C 0060                  		move.w	#$60,d1
0000B0C0                            
0000B0C0                            Obj2F_Move:
0000B0C0 0828 0003 0028             		btst	#3,$28(a0)
0000B0C6 6700                       		beq.s	loc_AFF2
0000B0C8 4440                       		neg.w	d0
0000B0CA D041                       		add.w	d1,d0
0000B0CC                            
0000B0CC                            loc_AFF2:
0000B0CC 3228 002C                  		move.w	$2C(a0),d1
0000B0D0 9240                       		sub.w	d0,d1
0000B0D2 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B0D6 4E75                       		rts	
0000B0D8                            ; ===========================================================================
0000B0D8                            
0000B0D8                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B0D8 1028 0034                  		move.b	$34(a0),d0
0000B0DC 4A28 0025                  		tst.b	$25(a0)
0000B0E0 6600                       		bne.s	loc_B010
0000B0E2 5500                       		subq.b	#2,d0
0000B0E4 6400                       		bcc.s	loc_B01C
0000B0E6 7000                       		moveq	#0,d0
0000B0E8 6000                       		bra.s	loc_B01C
0000B0EA                            ; ===========================================================================
0000B0EA                            
0000B0EA                            loc_B010:
0000B0EA 5800                       		addq.b	#4,d0
0000B0EC 0C00 0040                  		cmpi.b	#$40,d0
0000B0F0 6500                       		bcs.s	loc_B01C
0000B0F2 103C 0040                  		move.b	#$40,d0
0000B0F6                            
0000B0F6                            loc_B01C:
0000B0F6 1140 0034                  		move.b	d0,$34(a0)
0000B0FA 4EB9 0000 29DA             		jsr	(CalcSine).l
0000B100 E848                       		lsr.w	#4,d0
0000B102 3200                       		move.w	d0,d1
0000B104 D068 002C                  		add.w	$2C(a0),d0
0000B108 3140 000C                  		move.w	d0,$C(a0)
0000B10C 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B112 6600                       		bne.s	loc_B07A
0000B114 4A28 0035                  		tst.b	$35(a0)
0000B118 6600                       		bne.s	loc_B07A
0000B11A 117C 0001 0035             		move.b	#1,$35(a0)
0000B120 6100 0000                  		bsr.w	SingleObjLoad2
0000B124 6600                       		bne.s	loc_B07A
0000B126 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B12A 3368 0008 0008             		move.w	8(a0),8(a1)
0000B130 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B136 5069 002C                  		addq.w	#8,$2C(a1)
0000B13A 5769 002C                  		subq.w	#3,$2C(a1)
0000B13E 0469 0040 0008             		subi.w	#$40,8(a1)
0000B144 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B14A 2348 0038                  		move.l	a0,$38(a1)
0000B14E 2448                       		movea.l	a0,a2
0000B150 6100                       		bsr.s	sub_B09C
0000B152                            
0000B152                            loc_B07A:
0000B152 7400                       		moveq	#0,d2
0000B154 45E8 0036                  		lea	$36(a0),a2
0000B158 141A                       		move.b	(a2)+,d2
0000B15A 5302                       		subq.b	#1,d2
0000B15C 6500                       		bcs.s	locret_B09A
0000B15E                            
0000B15E                            loc_B086:
0000B15E 7000                       		moveq	#0,d0
0000B160 101A                       		move.b	(a2)+,d0
0000B162 ED48                       		lsl.w	#6,d0
0000B164 0640 D000                  		addi.w	#-$3000,d0
0000B168 3240                       		movea.w	d0,a1
0000B16A 3341 003C                  		move.w	d1,$3C(a1)
0000B16E 51CA FFEE                  		dbf	d2,loc_B086
0000B172                            
0000B172                            locret_B09A:
0000B172 4E75                       		rts	
0000B174                            
0000B174                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B174                            
0000B174                            
0000B174                            sub_B09C:
0000B174 45EA 0036                  		lea	$36(a2),a2
0000B178 7000                       		moveq	#0,d0
0000B17A 1012                       		move.b	(a2),d0
0000B17C 5212                       		addq.b	#1,(a2)
0000B17E 45F2 0001                  		lea	1(a2,d0.w),a2
0000B182 3009                       		move.w	a1,d0
0000B184 0440 D000                  		subi.w	#-$3000,d0
0000B188 EC48                       		lsr.w	#6,d0
0000B18A 0240 007F                  		andi.w	#$7F,d0
0000B18E 1480                       		move.b	d0,(a2)
0000B190 4E75                       		rts	
0000B192                            ; End of function sub_B09C
0000B192                            
0000B192                            ; ===========================================================================
0000B192                            
0000B192                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B192 4A28 0035                  		tst.b	$35(a0)
0000B196 6700                       		beq.s	loc_B0C6
0000B198 4A28 0001                  		tst.b	1(a0)
0000B19C 6A00                       		bpl.s	Obj2F_DelFlames
0000B19E                            
0000B19E                            loc_B0C6:
0000B19E 3028 002A                  		move.w	$2A(a0),d0
0000B1A2 0240 FF80                  		andi.w	#$FF80,d0
0000B1A6 3238 F700                  		move.w	($FFFFF700).w,d1
0000B1AA 0441 0080                  		subi.w	#$80,d1
0000B1AE 0241 FF80                  		andi.w	#$FF80,d1
0000B1B2 9041                       		sub.w	d1,d0
0000B1B4 0C40 0280                  		cmpi.w	#$280,d0
0000B1B8 6200 0000                  		bhi.w	DeleteObject
0000B1BC 4E75                       		rts	
0000B1BE                            ; ===========================================================================
0000B1BE                            
0000B1BE                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B1BE 7400                       		moveq	#0,d2
0000B1C0                            
0000B1C0                            loc_B0E8:
0000B1C0 45E8 0036                  		lea	$36(a0),a2
0000B1C4 1412                       		move.b	(a2),d2
0000B1C6 421A                       		clr.b	(a2)+
0000B1C8 5302                       		subq.b	#1,d2
0000B1CA 6500                       		bcs.s	locret_B116
0000B1CC                            
0000B1CC                            loc_B0F4:
0000B1CC 7000                       		moveq	#0,d0
0000B1CE 1012                       		move.b	(a2),d0
0000B1D0 421A                       		clr.b	(a2)+
0000B1D2 ED48                       		lsl.w	#6,d0
0000B1D4 0640 D000                  		addi.w	#-$3000,d0
0000B1D8 3240                       		movea.w	d0,a1
0000B1DA 6100 0000                  		bsr.w	DeleteObject2
0000B1DE 51CA FFEC                  		dbf	d2,loc_B0F4
0000B1E2 117C 0000 0035             		move.b	#0,$35(a0)
0000B1E8 117C 0000 0034             		move.b	#0,$34(a0)
0000B1EE                            
0000B1EE                            locret_B116:
0000B1EE 4E75                       		rts	
0000B1F0                            ; ===========================================================================
0000B1F0                            ; ---------------------------------------------------------------------------
0000B1F0                            ; Collision data for large moving platforms (MZ)
0000B1F0                            ; ---------------------------------------------------------------------------
0000B1F0                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B23C                            		even
0000B23C                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B268                            		even
0000B268                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B2B4                            		even
0000B2B4                            ; ===========================================================================
0000B2B4                            ; ---------------------------------------------------------------------------
0000B2B4                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B2B4                            ; (appears when	you walk on sinking platforms)
0000B2B4                            ; ---------------------------------------------------------------------------
0000B2B4                            
0000B2B4                            Obj35:					; XREF: Obj_Index
0000B2B4 7000                       		moveq	#0,d0
0000B2B6 1028 0024                  		move.b	$24(a0),d0
0000B2BA 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B2BE 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B2C2                            ; ===========================================================================
0000B2C2 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B2C4 0000                       		dc.w loc_B238-Obj35_Index
0000B2C6 0000                       		dc.w Obj35_Move-Obj35_Index
0000B2C8                            ; ===========================================================================
0000B2C8                            
0000B2C8                            Obj35_Main:				; XREF: Obj35_Index
0000B2C8 5428 0024                  		addq.b	#2,$24(a0)
0000B2CC 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B2D4 317C 0345 0002             		move.w	#$345,2(a0)
0000B2DA 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B2E0 117C 0004 0001             		move.b	#4,1(a0)
0000B2E6 117C 0001 0018             		move.b	#1,$18(a0)
0000B2EC 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B2F2 117C 0008 0019             		move.b	#8,$19(a0)
0000B2F8 303C 00C8                  		move.w	#$C8,d0
0000B2FC 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flame sound
0000B302 4A28 0028                  		tst.b	$28(a0)
0000B306 6700                       		beq.s	loc_B238
0000B308 5428 0024                  		addq.b	#2,$24(a0)
0000B30C 6000 0000                  		bra.w	Obj35_Move
0000B310                            ; ===========================================================================
0000B310                            
0000B310                            loc_B238:				; XREF: Obj35_Index
0000B310 2268 0030                  		movea.l	$30(a0),a1
0000B314 3228 0008                  		move.w	8(a0),d1
0000B318 9268 002A                  		sub.w	$2A(a0),d1
0000B31C 0641 000C                  		addi.w	#$C,d1
0000B320 3001                       		move.w	d1,d0
0000B322 E248                       		lsr.w	#1,d0
0000B324 1031 0000                  		move.b	(a1,d0.w),d0
0000B328 4440                       		neg.w	d0
0000B32A D068 002C                  		add.w	$2C(a0),d0
0000B32E 3400                       		move.w	d0,d2
0000B330 D068 003C                  		add.w	$3C(a0),d0
0000B334 3140 000C                  		move.w	d0,$C(a0)
0000B338 0C41 0084                  		cmpi.w	#$84,d1
0000B33C 6400                       		bcc.s	loc_B2B0
0000B33E 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B346 0C41 0080                  		cmpi.w	#$80,d1
0000B34A 6400                       		bcc.s	loc_B2B0
0000B34C 2028 0008                  		move.l	8(a0),d0
0000B350 0680 0008 0000             		addi.l	#$80000,d0
0000B356 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B35C 6600                       		bne.s	loc_B2B0
0000B35E 6100 0000                  		bsr.w	SingleObjLoad2
0000B362 6600                       		bne.s	loc_B2B0
0000B364 12BC 0035                  		move.b	#$35,0(a1)
0000B368 3368 0008 0008             		move.w	8(a0),8(a1)
0000B36E 3342 002C                  		move.w	d2,$2C(a1)
0000B372 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B378 137C 0001 0028             		move.b	#1,$28(a1)
0000B37E 2468 0038                  		movea.l	$38(a0),a2
0000B382 6100 FDF0                  		bsr.w	sub_B09C
0000B386                            
0000B386                            loc_B2B0:
0000B386 6000                       		bra.s	Obj35_Animate
0000B388                            ; ===========================================================================
0000B388                            
0000B388                            Obj35_Move:				; XREF: Obj35_Index
0000B388 3028 002C                  		move.w	$2C(a0),d0
0000B38C D068 003C                  		add.w	$3C(a0),d0
0000B390 3140 000C                  		move.w	d0,$C(a0)
0000B394                            
0000B394                            Obj35_Animate:				; XREF: loc_B238
0000B394 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B39A 6100 F456                  		bsr.w	AnimateSprite
0000B39E 6000 0000                  		bra.w	DisplaySprite
0000B3A2                            ; ===========================================================================
0000B3A2                            Ani_obj35:
0000B3A2                            	include "_anim\obj35.asm"
0000B3A2                            ; ---------------------------------------------------------------------------
0000B3A2                            ; Animation script - fireball that sits on the	floor (MZ)
0000B3A2                            ; ---------------------------------------------------------------------------
0000B3A2 0000                       		dc.w byte_B2CE-Ani_obj35
0000B3A4 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B3AA                            		even
0000B3AA                            		even
0000B3AA                            
0000B3AA                            ; ---------------------------------------------------------------------------
0000B3AA                            ; Sprite mappings - large moving platforms (MZ)
0000B3AA                            ; ---------------------------------------------------------------------------
0000B3AA                            Map_obj2F:
0000B3AA                            	include "_maps\obj2F.asm"
0000B3AA                            ; ---------------------------------------------------------------------------
0000B3AA                            ; Sprite mappings - large moving platforms (MZ)
0000B3AA                            ; ---------------------------------------------------------------------------
0000B3AA 0000                       		dc.w byte_B2DA-Map_obj2F
0000B3AC 0000                       		dc.w byte_B31C-Map_obj2F
0000B3AE 0000                       		dc.w byte_B34F-Map_obj2F
0000B3B0 0D                         byte_B2DA:	dc.b $D
0000B3B1 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B3B6 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B3BB 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B3C0 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B3C5 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B3CA F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B3CF D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B3D4 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B3D9 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B3DE F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B3E3 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B3E8 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B3ED F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B3F2 0A                         byte_B31C:	dc.b $A
0000B3F3 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B3F8 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B3FD 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B402 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B407 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B40C F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B411 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B416 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B41B C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B420 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B425 06                         byte_B34F:	dc.b 6
0000B426 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B42B F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B430 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B435 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B43A F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B43F 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B444                            		even
0000B444                            		even
0000B444                            
0000B444                            ; ---------------------------------------------------------------------------
0000B444                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B444                            ; ---------------------------------------------------------------------------
0000B444                            Map_obj14:
0000B444                            	include "_maps\obj14.asm"
0000B444                            ; ---------------------------------------------------------------------------
0000B444                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B444                            ; ---------------------------------------------------------------------------
0000B444 0000                       		dc.w byte_B37A-Map_obj14
0000B446 0000                       		dc.w byte_B380-Map_obj14
0000B448 0000                       		dc.w byte_B386-Map_obj14
0000B44A 0000                       		dc.w byte_B38C-Map_obj14
0000B44C 0000                       		dc.w byte_B392-Map_obj14
0000B44E 0000                       		dc.w byte_B398-Map_obj14
0000B450 01                         byte_B37A:	dc.b 1
0000B451 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000B456 01                         byte_B380:	dc.b 1
0000B457 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000B45C 01                         byte_B386:	dc.b 1
0000B45D F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000B462 01                         byte_B38C:	dc.b 1
0000B463 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000B468 01                         byte_B392:	dc.b 1
0000B469 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000B46E 01                         byte_B398:	dc.b 1
0000B46F F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000B474                            		even
0000B474                            		even
0000B474                            
0000B474                            ; ===========================================================================
0000B474                            ; ---------------------------------------------------------------------------
0000B474                            ; Object 30 - large green glassy blocks	(MZ)
0000B474                            ; ---------------------------------------------------------------------------
0000B474                            
0000B474                            Obj30:					; XREF: Obj_Index
0000B474 7000                       		moveq	#0,d0
0000B476 1028 0024                  		move.b	$24(a0),d0
0000B47A 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B47E 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B482 3028 0008                  		move.w	8(a0),d0
0000B486 0240 FF80                  		andi.w	#$FF80,d0
0000B48A 3238 F700                  		move.w	($FFFFF700).w,d1
0000B48E 0441 0080                  		subi.w	#$80,d1
0000B492 0241 FF80                  		andi.w	#$FF80,d1
0000B496 9041                       		sub.w	d1,d0
0000B498 0C40 0280                  		cmpi.w	#$280,d0
0000B49C 6200 0000                  		bhi.w	Obj30_Delete
0000B4A0 6000 0000                  		bra.w	DisplaySprite
0000B4A4                            ; ===========================================================================
0000B4A4                            
0000B4A4                            Obj30_Delete:
0000B4A4 6000 0000                  		bra.w	DeleteObject
0000B4A8                            ; ===========================================================================
0000B4A8 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B4AA 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B4AC 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B4AE 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B4B0 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B4B2                            
0000B4B2 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B4B5 0400 01                    		dc.b 4,	0, 1
0000B4B8 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B4BB 0800 01                    		dc.b 8,	0, 1
0000B4BE                            ; ===========================================================================
0000B4BE                            
0000B4BE                            Obj30_Main:				; XREF: Obj30_Index
0000B4BE 45F9 0000 B4B2             		lea	(Obj30_Vars1).l,a2
0000B4C4 7201                       		moveq	#1,d1
0000B4C6 117C 0048 0016             		move.b	#$48,$16(a0)
0000B4CC 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B4D2 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B4D4 45F9 0000 B4B8             		lea	(Obj30_Vars2).l,a2
0000B4DA 7201                       		moveq	#1,d1
0000B4DC 117C 0038 0016             		move.b	#$38,$16(a0)
0000B4E2                            
0000B4E2                            loc_B40C:
0000B4E2 2248                       		movea.l	a0,a1
0000B4E4 6000                       		bra.s	Obj30_Load	; load main object
0000B4E6                            ; ===========================================================================
0000B4E6                            
0000B4E6                            Obj30_Loop:
0000B4E6 6100 0000                  		bsr.w	SingleObjLoad2
0000B4EA 6600                       		bne.s	loc_B480
0000B4EC                            
0000B4EC                            Obj30_Load:				; XREF: Obj30_Main
0000B4EC 135A 0024                  		move.b	(a2)+,$24(a1)
0000B4F0 12BC 0030                  		move.b	#$30,0(a1)
0000B4F4 3368 0008 0008             		move.w	8(a0),8(a1)
0000B4FA 101A                       		move.b	(a2)+,d0
0000B4FC 4880                       		ext.w	d0
0000B4FE D068 000C                  		add.w	$C(a0),d0
0000B502 3340 000C                  		move.w	d0,$C(a1)
0000B506 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B50E 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B514 137C 0004 0001             		move.b	#4,1(a1)
0000B51A 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B520 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B526 137C 0020 0019             		move.b	#$20,$19(a1)
0000B52C 137C 0004 0018             		move.b	#4,$18(a1)
0000B532 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B536 2348 003C                  		move.l	a0,$3C(a1)
0000B53A 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B53E                            
0000B53E 137C 0010 0019             		move.b	#$10,$19(a1)
0000B544 137C 0003 0018             		move.b	#3,$18(a1)
0000B54A 5029 0028                  		addq.b	#8,$28(a1)
0000B54E 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B554                            
0000B554                            loc_B480:
0000B554 317C 0090 0032             		move.w	#$90,$32(a0)
0000B55A 08E8 0004 0001             		bset	#4,1(a0)
0000B560                            
0000B560                            Obj30_Block012:				; XREF: Obj30_Index
0000B560 6100 0000                  		bsr.w	Obj30_Types
0000B564 323C 002B                  		move.w	#$2B,d1
0000B568 343C 0048                  		move.w	#$48,d2
0000B56C 363C 0049                  		move.w	#$49,d3
0000B570 3828 0008                  		move.w	8(a0),d4
0000B574 6000 0000                  		bra.w	SolidObject
0000B578                            ; ===========================================================================
0000B578                            
0000B578                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B578 2268 003C                  		movea.l	$3C(a0),a1
0000B57C 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B582 6000 0000                  		bra.w	Obj30_Types
0000B586                            ; ===========================================================================
0000B586                            
0000B586                            Obj30_Block34:				; XREF: Obj30_Index
0000B586 6100 0000                  		bsr.w	Obj30_Types
0000B58A 323C 002B                  		move.w	#$2B,d1
0000B58E 343C 0038                  		move.w	#$38,d2
0000B592 363C 0039                  		move.w	#$39,d3
0000B596 3828 0008                  		move.w	8(a0),d4
0000B59A 6000 0000                  		bra.w	SolidObject
0000B59E                            ; ===========================================================================
0000B59E                            
0000B59E                            Obj30_Reflect34:			; XREF: Obj30_Index
0000B59E 2268 003C                  		movea.l	$3C(a0),a1
0000B5A2 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B5A8 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000B5AE 6000 0002                  		bra.w	*+4
0000B5B2                            
0000B5B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B5B2                            
0000B5B2                            
0000B5B2                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000B5B2 7000                       		moveq	#0,d0
0000B5B4 1028 0028                  		move.b	$28(a0),d0
0000B5B8 0240 0007                  		andi.w	#7,d0
0000B5BC D040                       		add.w	d0,d0
0000B5BE 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000B5C2 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000B5C6                            ; End of function Obj30_Types
0000B5C6                            
0000B5C6                            ; ===========================================================================
0000B5C6 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000B5C8 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000B5CA 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000B5CC 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000B5CE 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000B5D0                            ; ===========================================================================
0000B5D0                            
0000B5D0                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000B5D0 4E75                       		rts	
0000B5D2                            ; ===========================================================================
0000B5D2                            
0000B5D2                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000B5D2 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B5D6 323C 0040                  		move.w	#$40,d1
0000B5DA 6000                       		bra.s	loc_B514
0000B5DC                            ; ===========================================================================
0000B5DC                            
0000B5DC                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000B5DC 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B5E0 323C 0040                  		move.w	#$40,d1
0000B5E4 4440                       		neg.w	d0
0000B5E6 D041                       		add.w	d1,d0
0000B5E8                            
0000B5E8                            loc_B514:				; XREF: Obj30_Type01
0000B5E8 0828 0003 0028             		btst	#3,$28(a0)
0000B5EE 6700                       		beq.s	loc_B526
0000B5F0 4440                       		neg.w	d0
0000B5F2 D041                       		add.w	d1,d0
0000B5F4 E208                       		lsr.b	#1,d0
0000B5F6 0640 0020                  		addi.w	#$20,d0
0000B5FA                            
0000B5FA                            loc_B526:
0000B5FA 6000 0000                  		bra.w	loc_B5EE
0000B5FE                            ; ===========================================================================
0000B5FE                            
0000B5FE                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000B5FE 0828 0003 0028             		btst	#3,$28(a0)
0000B604 6700                       		beq.s	loc_B53E
0000B606 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B60A 0440 0010                  		subi.w	#$10,d0
0000B60E 6000 0000                  		bra.w	loc_B5EE
0000B612                            ; ===========================================================================
0000B612                            
0000B612                            loc_B53E:
0000B612 0828 0003 0022             		btst	#3,$22(a0)
0000B618 6600                       		bne.s	loc_B54E
0000B61A 08A8 0000 0034             		bclr	#0,$34(a0)
0000B620 6000                       		bra.s	loc_B582
0000B622                            ; ===========================================================================
0000B622                            
0000B622                            loc_B54E:
0000B622 4A28 0034                  		tst.b	$34(a0)
0000B626 6600                       		bne.s	loc_B582
0000B628 117C 0001 0034             		move.b	#1,$34(a0)
0000B62E 08E8 0000 0035             		bset	#0,$35(a0)
0000B634 6700                       		beq.s	loc_B582
0000B636 08E8 0007 0034             		bset	#7,$34(a0)
0000B63C 317C 0010 0036             		move.w	#$10,$36(a0)
0000B642 117C 000A 0038             		move.b	#$A,$38(a0)
0000B648 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000B64E 6600                       		bne.s	loc_B582
0000B650 317C 0040 0036             		move.w	#$40,$36(a0)
0000B656                            
0000B656                            loc_B582:
0000B656 4A28 0034                  		tst.b	$34(a0)
0000B65A 6A00                       		bpl.s	loc_B5AA
0000B65C 4A28 0038                  		tst.b	$38(a0)
0000B660 6700                       		beq.s	loc_B594
0000B662 5328 0038                  		subq.b	#1,$38(a0)
0000B666 6600                       		bne.s	loc_B5AA
0000B668                            
0000B668                            loc_B594:
0000B668 4A68 0032                  		tst.w	$32(a0)
0000B66C 6700                       		beq.s	loc_B5A4
0000B66E 5368 0032                  		subq.w	#1,$32(a0)
0000B672 5368 0036                  		subq.w	#1,$36(a0)
0000B676 6600                       		bne.s	loc_B5AA
0000B678                            
0000B678                            loc_B5A4:
0000B678 08A8 0007 0034             		bclr	#7,$34(a0)
0000B67E                            
0000B67E                            loc_B5AA:
0000B67E 3028 0032                  		move.w	$32(a0),d0
0000B682 6000                       		bra.s	loc_B5EE
0000B684                            ; ===========================================================================
0000B684                            
0000B684                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000B684 0828 0003 0028             		btst	#3,$28(a0)
0000B68A 6700                       		beq.s	Obj30_ChkSwitch
0000B68C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B690 0440 0010                  		subi.w	#$10,d0
0000B694 6000                       		bra.s	loc_B5EE
0000B696                            ; ===========================================================================
0000B696                            
0000B696                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000B696 4A28 0034                  		tst.b	$34(a0)
0000B69A 6600                       		bne.s	loc_B5E0
0000B69C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000B6A0 7000                       		moveq	#0,d0
0000B6A2 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000B6A6 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000B6A8 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000B6AC 6700                       		beq.s	loc_B5EA	; if not, branch
0000B6AE 117C 0001 0034             		move.b	#1,$34(a0)
0000B6B4                            
0000B6B4                            loc_B5E0:
0000B6B4 4A68 0032                  		tst.w	$32(a0)
0000B6B8 6700                       		beq.s	loc_B5EA
0000B6BA 5568 0032                  		subq.w	#2,$32(a0)
0000B6BE                            
0000B6BE                            loc_B5EA:
0000B6BE 3028 0032                  		move.w	$32(a0),d0
0000B6C2                            
0000B6C2                            loc_B5EE:
0000B6C2 3228 0030                  		move.w	$30(a0),d1
0000B6C6 9240                       		sub.w	d0,d1
0000B6C8 3141 000C                  		move.w	d1,$C(a0)
0000B6CC 4E75                       		rts	
0000B6CE                            ; ===========================================================================
0000B6CE                            ; ---------------------------------------------------------------------------
0000B6CE                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B6CE                            ; ---------------------------------------------------------------------------
0000B6CE                            Map_obj30:
0000B6CE                            	include "_maps\obj30.asm"
0000B6CE                            ; ---------------------------------------------------------------------------
0000B6CE                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B6CE                            ; ---------------------------------------------------------------------------
0000B6CE 0000                       		dc.w byte_B600-Map_obj30
0000B6D0 0000                       		dc.w byte_B63D-Map_obj30
0000B6D2 0000                       		dc.w byte_B648-Map_obj30
0000B6D4 0C                         byte_B600:	dc.b $C
0000B6D5 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000B6DA B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000B6DF C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000B6E4 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000B6E9 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000B6EE E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000B6F3 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000B6F8 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000B6FD 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000B702 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000B707 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000B70C 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000B711 02                         byte_B63D:	dc.b 2
0000B712 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000B717 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000B71C 0A                         byte_B648:	dc.b $A
0000B71D C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000B722 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000B727 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000B72C D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000B731 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000B736 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000B73B 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000B740 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000B745 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000B74A 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000B750 00                         		even
0000B750 00                         		even
0000B750                            
0000B750                            ; ===========================================================================
0000B750                            ; ---------------------------------------------------------------------------
0000B750                            ; Object 31 - stomping metal blocks on chains (MZ)
0000B750                            ; ---------------------------------------------------------------------------
0000B750                            
0000B750                            Obj31:					; XREF: Obj_Index
0000B750 7000                       		moveq	#0,d0
0000B752 1028 0024                  		move.b	$24(a0),d0
0000B756 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000B75A 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000B75E                            ; ===========================================================================
0000B75E 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000B760 0000                       		dc.w loc_B798-Obj31_Index
0000B762 0000                       		dc.w loc_B7FE-Obj31_Index
0000B764 0000                       		dc.w Obj31_Display2-Obj31_Index
0000B766 0000                       		dc.w loc_B7E2-Obj31_Index
0000B768                            
0000B768 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000B76A 0100                       		dc.b 1,	0
0000B76C                            
0000B76C 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000B76F 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000B772 08CC 03                    		dc.b 8,	$CC, 3
0000B775 06F0 02                    		dc.b 6,	$F0, 2
0000B778                            
0000B778 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000B77C 5000 7800                  		dc.w $5000, $7800
0000B780 3800 5800                  		dc.w $3800, $5800
0000B784 B800                       		dc.w $B800
0000B786                            ; ===========================================================================
0000B786                            
0000B786                            Obj31_Main:				; XREF: Obj31_Index
0000B786 7000                       		moveq	#0,d0
0000B788 1028 0028                  		move.b	$28(a0),d0
0000B78C 6A00                       		bpl.s	loc_B6CE
0000B78E 0240 007F                  		andi.w	#$7F,d0
0000B792 D040                       		add.w	d0,d0
0000B794 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000B798 115A 003A                  		move.b	(a2)+,$3A(a0)
0000B79C 101A                       		move.b	(a2)+,d0
0000B79E 1140 0028                  		move.b	d0,$28(a0)
0000B7A2                            
0000B7A2                            loc_B6CE:
0000B7A2 0200 000F                  		andi.b	#$F,d0
0000B7A6 D040                       		add.w	d0,d0
0000B7A8 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000B7AC 4A40                       		tst.w	d0
0000B7AE 6600                       		bne.s	loc_B6E0
0000B7B0 3142 0032                  		move.w	d2,$32(a0)
0000B7B4                            
0000B7B4                            loc_B6E0:
0000B7B4 45F9 0000 B76C             		lea	(Obj31_Var).l,a2
0000B7BA 2248                       		movea.l	a0,a1
0000B7BC 7203                       		moveq	#3,d1
0000B7BE 6000                       		bra.s	Obj31_MakeStomper
0000B7C0                            ; ===========================================================================
0000B7C0                            
0000B7C0                            Obj31_Loop:
0000B7C0 6100 0000                  		bsr.w	SingleObjLoad2
0000B7C4 6600 0000                  		bne.w	Obj31_SetSize
0000B7C8                            
0000B7C8                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000B7C8 135A 0024                  		move.b	(a2)+,$24(a1)
0000B7CC 12BC 0031                  		move.b	#$31,0(a1)
0000B7D0 3368 0008 0008             		move.w	8(a0),8(a1)
0000B7D6 101A                       		move.b	(a2)+,d0
0000B7D8 4880                       		ext.w	d0
0000B7DA D068 000C                  		add.w	$C(a0),d0
0000B7DE 3340 000C                  		move.w	d0,$C(a1)
0000B7E2 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000B7EA 337C 0300 0002             		move.w	#$300,2(a1)
0000B7F0 137C 0004 0001             		move.b	#4,1(a1)
0000B7F6 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B7FC 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B802 137C 0010 0019             		move.b	#$10,$19(a1)
0000B808 3342 0034                  		move.w	d2,$34(a1)
0000B80C 137C 0004 0018             		move.b	#4,$18(a1)
0000B812 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B816 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000B81C 6600                       		bne.s	loc_B76A
0000B81E 5341                       		subq.w	#1,d1
0000B820 1028 0028                  		move.b	$28(a0),d0
0000B824 0240 00F0                  		andi.w	#$F0,d0
0000B828 0C40 0020                  		cmpi.w	#$20,d0
0000B82C 679A                       		beq.s	Obj31_MakeStomper
0000B82E 137C 0038 0019             		move.b	#$38,$19(a1)
0000B834 137C 0090 0020             		move.b	#$90,$20(a1)
0000B83A 5241                       		addq.w	#1,d1
0000B83C                            
0000B83C                            loc_B76A:
0000B83C 2348 003C                  		move.l	a0,$3C(a1)
0000B840 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000B844                            
0000B844 137C 0003 0018             		move.b	#3,$18(a1)
0000B84A                            
0000B84A                            Obj31_SetSize:
0000B84A 7000                       		moveq	#0,d0
0000B84C 1028 0028                  		move.b	$28(a0),d0
0000B850 E648                       		lsr.w	#3,d0
0000B852 0200 000E                  		andi.b	#$E,d0
0000B856 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000B85A 115A 0019                  		move.b	(a2)+,$19(a0)
0000B85E 115A 001A                  		move.b	(a2)+,$1A(a0)
0000B862 6000                       		bra.s	loc_B798
0000B864                            ; ===========================================================================
0000B864 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000B866 3009                       		dc.b $30, 9
0000B868 100A                       		dc.b $10, $A
0000B86A                            ; ===========================================================================
0000B86A                            
0000B86A                            loc_B798:				; XREF: Obj31_Index
0000B86A 6100 0000                  		bsr.w	Obj31_Types
0000B86E 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000B874 7200                       		moveq	#0,d1
0000B876 1228 0019                  		move.b	$19(a0),d1
0000B87A 0641 000B                  		addi.w	#$B,d1
0000B87E 343C 000C                  		move.w	#$C,d2
0000B882 363C 000D                  		move.w	#$D,d3
0000B886 3828 0008                  		move.w	8(a0),d4
0000B88A 6100 0000                  		bsr.w	SolidObject
0000B88E 0828 0003 0022             		btst	#3,$22(a0)
0000B894 6700                       		beq.s	Obj31_Display
0000B896 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000B89C 6400                       		bcc.s	Obj31_Display
0000B89E 2448                       		movea.l	a0,a2
0000B8A0 41F8 D000                  		lea	($FFFFD000).w,a0
0000B8A4 4EB9 0000 0000             		jsr	KillSonic
0000B8AA 204A                       		movea.l	a2,a0
0000B8AC                            
0000B8AC                            Obj31_Display:
0000B8AC 6100 0000                  		bsr.w	DisplaySprite
0000B8B0 6000 0000                  		bra.w	Obj31_ChkDel
0000B8B4                            ; ===========================================================================
0000B8B4                            
0000B8B4                            loc_B7E2:				; XREF: Obj31_Index
0000B8B4 117C 0080 0016             		move.b	#$80,$16(a0)
0000B8BA 08E8 0004 0001             		bset	#4,1(a0)
0000B8C0 2268 003C                  		movea.l	$3C(a0),a1
0000B8C4 1029 0032                  		move.b	$32(a1),d0
0000B8C8 EA08                       		lsr.b	#5,d0
0000B8CA 5600                       		addq.b	#3,d0
0000B8CC 1140 001A                  		move.b	d0,$1A(a0)
0000B8D0                            
0000B8D0                            loc_B7FE:				; XREF: Obj31_Index
0000B8D0 2268 003C                  		movea.l	$3C(a0),a1
0000B8D4 7000                       		moveq	#0,d0
0000B8D6 1029 0032                  		move.b	$32(a1),d0
0000B8DA D068 0030                  		add.w	$30(a0),d0
0000B8DE 3140 000C                  		move.w	d0,$C(a0)
0000B8E2                            
0000B8E2                            Obj31_Display2:				; XREF: Obj31_Index
0000B8E2 6100 0000                  		bsr.w	DisplaySprite
0000B8E6                            
0000B8E6                            Obj31_ChkDel:				; XREF: Obj31_Display
0000B8E6 3028 0008                  		move.w	8(a0),d0
0000B8EA 0240 FF80                  		andi.w	#$FF80,d0
0000B8EE 3238 F700                  		move.w	($FFFFF700).w,d1
0000B8F2 0441 0080                  		subi.w	#$80,d1
0000B8F6 0241 FF80                  		andi.w	#$FF80,d1
0000B8FA 9041                       		sub.w	d1,d0
0000B8FC 0C40 0280                  		cmpi.w	#$280,d0
0000B900 6200 0000                  		bhi.w	DeleteObject
0000B904 4E75                       		rts	
0000B906                            ; ===========================================================================
0000B906                            
0000B906                            Obj31_Types:				; XREF: loc_B798
0000B906 1028 0028                  		move.b	$28(a0),d0
0000B90A 0240 000F                  		andi.w	#$F,d0
0000B90E D040                       		add.w	d0,d0
0000B910 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000B914 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000B918                            ; ===========================================================================
0000B918 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000B91A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B91C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B91E 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000B920 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B922 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000B924 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B926                            ; ===========================================================================
0000B926                            
0000B926                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000B926 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000B92A 7000                       		moveq	#0,d0
0000B92C 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000B930 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000B934 6700                       		beq.s	loc_B8A8	; if not, branch
0000B936 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000B93A 6A00                       		bpl.s	loc_B872
0000B93C 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000B942 6700                       		beq.s	loc_B8A0
0000B944                            
0000B944                            loc_B872:
0000B944 4A68 0032                  		tst.w	$32(a0)
0000B948 6700                       		beq.s	loc_B8A0
0000B94A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B94E 0200 000F                  		andi.b	#$F,d0
0000B952 6600                       		bne.s	loc_B892
0000B954 4A28 0001                  		tst.b	1(a0)
0000B958 6A00                       		bpl.s	loc_B892
0000B95A 303C 00C7                  		move.w	#$C7,d0
0000B95E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000B964                            
0000B964                            loc_B892:
0000B964 0468 0080 0032             		subi.w	#$80,$32(a0)
0000B96A 6400                       		bcc.s	Obj31_Restart
0000B96C 317C 0000 0032             		move.w	#0,$32(a0)
0000B972                            
0000B972                            loc_B8A0:
0000B972 317C 0000 0012             		move.w	#0,$12(a0)
0000B978 6000                       		bra.s	Obj31_Restart
0000B97A                            ; ===========================================================================
0000B97A                            
0000B97A                            loc_B8A8:				; XREF: Obj31_Type00
0000B97A 3228 0034                  		move.w	$34(a0),d1
0000B97E B268 0032                  		cmp.w	$32(a0),d1
0000B982 6700                       		beq.s	Obj31_Restart
0000B984 3028 0012                  		move.w	$12(a0),d0
0000B988 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000B98E D168 0032                  		add.w	d0,$32(a0)
0000B992 B268 0032                  		cmp.w	$32(a0),d1
0000B996 6200                       		bhi.s	Obj31_Restart
0000B998 3141 0032                  		move.w	d1,$32(a0)
0000B99C 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000B9A2 4A28 0001                  		tst.b	1(a0)
0000B9A6 6A00                       		bpl.s	Obj31_Restart
0000B9A8 303C 00BD                  		move.w	#$BD,d0
0000B9AC 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stomping sound
0000B9B2                            
0000B9B2                            Obj31_Restart:
0000B9B2 7000                       		moveq	#0,d0
0000B9B4 1028 0032                  		move.b	$32(a0),d0
0000B9B8 D068 0030                  		add.w	$30(a0),d0
0000B9BC 3140 000C                  		move.w	d0,$C(a0)
0000B9C0 4E75                       		rts	
0000B9C2                            ; ===========================================================================
0000B9C2                            
0000B9C2                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000B9C2 4A68 0036                  		tst.w	$36(a0)
0000B9C6 6700                       		beq.s	loc_B938
0000B9C8 4A68 0038                  		tst.w	$38(a0)
0000B9CC 6700                       		beq.s	loc_B902
0000B9CE 5368 0038                  		subq.w	#1,$38(a0)
0000B9D2 6000                       		bra.s	loc_B97C
0000B9D4                            ; ===========================================================================
0000B9D4                            
0000B9D4                            loc_B902:
0000B9D4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B9D8 0200 000F                  		andi.b	#$F,d0
0000B9DC 6600                       		bne.s	loc_B91C
0000B9DE 4A28 0001                  		tst.b	1(a0)
0000B9E2 6A00                       		bpl.s	loc_B91C
0000B9E4 303C 00C7                  		move.w	#$C7,d0
0000B9E8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000B9EE                            
0000B9EE                            loc_B91C:
0000B9EE 0468 0080 0032             		subi.w	#$80,$32(a0)
0000B9F4 6400                       		bcc.s	loc_B97C
0000B9F6 317C 0000 0032             		move.w	#0,$32(a0)
0000B9FC 317C 0000 0012             		move.w	#0,$12(a0)
0000BA02 317C 0000 0036             		move.w	#0,$36(a0)
0000BA08 6000                       		bra.s	loc_B97C
0000BA0A                            ; ===========================================================================
0000BA0A                            
0000BA0A                            loc_B938:				; XREF: Obj31_Type01
0000BA0A 3228 0034                  		move.w	$34(a0),d1
0000BA0E B268 0032                  		cmp.w	$32(a0),d1
0000BA12 6700                       		beq.s	loc_B97C
0000BA14 3028 0012                  		move.w	$12(a0),d0
0000BA18 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BA1E D168 0032                  		add.w	d0,$32(a0)
0000BA22 B268 0032                  		cmp.w	$32(a0),d1
0000BA26 6200                       		bhi.s	loc_B97C
0000BA28 3141 0032                  		move.w	d1,$32(a0)
0000BA2C 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BA32 317C 0001 0036             		move.w	#1,$36(a0)
0000BA38 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BA3E 4A28 0001                  		tst.b	1(a0)
0000BA42 6A00                       		bpl.s	loc_B97C
0000BA44 303C 00BD                  		move.w	#$BD,d0
0000BA48 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BA4E                            
0000BA4E                            loc_B97C:
0000BA4E 6000 FF62                  		bra.w	Obj31_Restart
0000BA52                            ; ===========================================================================
0000BA52                            
0000BA52                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BA52 3038 D008                  		move.w	($FFFFD008).w,d0
0000BA56 9068 0008                  		sub.w	8(a0),d0
0000BA5A 6400                       		bcc.s	loc_B98C
0000BA5C 4440                       		neg.w	d0
0000BA5E                            
0000BA5E                            loc_B98C:
0000BA5E 0C40 0090                  		cmpi.w	#$90,d0
0000BA62 6400                       		bcc.s	loc_B996
0000BA64 5228 0028                  		addq.b	#1,$28(a0)
0000BA68                            
0000BA68                            loc_B996:
0000BA68 6000 FF48                  		bra.w	Obj31_Restart
0000BA6C                            ; ===========================================================================
0000BA6C                            ; ---------------------------------------------------------------------------
0000BA6C                            ; Object 45 - spiked metal block from beta version (MZ)
0000BA6C                            ; ---------------------------------------------------------------------------
0000BA6C                            
0000BA6C                            Obj45:					; XREF: Obj_Index
0000BA6C 7000                       		moveq	#0,d0
0000BA6E 1028 0024                  		move.b	$24(a0),d0
0000BA72 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BA76 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BA7A                            ; ===========================================================================
0000BA7A 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BA7C 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BA7E 0000                       		dc.w loc_BA8E-Obj45_Index
0000BA80 0000                       		dc.w Obj45_Display-Obj45_Index
0000BA82 0000                       		dc.w loc_BA7A-Obj45_Index
0000BA84                            
0000BA84 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BA87 04E4 01                    		dc.b	4, $E4,	  1
0000BA8A 0834 03                    		dc.b	8, $34,	  3
0000BA8D 0628 02                    		dc.b	6, $28,	  2
0000BA90                            
0000BA90 3800                       word_B9BE:	dc.w $3800
0000BA92 A000                       		dc.w -$6000
0000BA94 5000                       		dc.w $5000
0000BA96                            ; ===========================================================================
0000BA96                            
0000BA96                            Obj45_Main:				; XREF: Obj45_Index
0000BA96 7000                       		moveq	#0,d0
0000BA98 1028 0028                  		move.b	$28(a0),d0
0000BA9C D040                       		add.w	d0,d0
0000BA9E 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000BAA2 45F9 0000 BA84             		lea	(Obj45_Var).l,a2
0000BAA8 2248                       		movea.l	a0,a1
0000BAAA 7203                       		moveq	#3,d1
0000BAAC 6000                       		bra.s	Obj45_Load
0000BAAE                            ; ===========================================================================
0000BAAE                            
0000BAAE                            Obj45_Loop:
0000BAAE 6100 0000                  		bsr.w	SingleObjLoad2
0000BAB2 6600                       		bne.s	loc_BA52
0000BAB4                            
0000BAB4                            Obj45_Load:				; XREF: Obj45_Main
0000BAB4 135A 0024                  		move.b	(a2)+,$24(a1)
0000BAB8 12BC 0045                  		move.b	#$45,0(a1)
0000BABC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BAC2 101A                       		move.b	(a2)+,d0
0000BAC4 4880                       		ext.w	d0
0000BAC6 D068 0008                  		add.w	8(a0),d0
0000BACA 3340 0008                  		move.w	d0,8(a1)
0000BACE 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000BAD6 337C 0300 0002             		move.w	#$300,2(a1)
0000BADC 137C 0004 0001             		move.b	#4,1(a1)
0000BAE2 3369 0008 0030             		move.w	8(a1),$30(a1)
0000BAE8 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000BAEE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BAF4 137C 0020 0019             		move.b	#$20,$19(a1)
0000BAFA 3342 0034                  		move.w	d2,$34(a1)
0000BAFE 137C 0004 0018             		move.b	#4,$18(a1)
0000BB04 0C12 0001                  		cmpi.b	#1,(a2)
0000BB08 6600                       		bne.s	loc_BA40
0000BB0A 137C 0091 0020             		move.b	#$91,$20(a1)
0000BB10                            
0000BB10                            loc_BA40:
0000BB10 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BB14 2348 003C                  		move.l	a0,$3C(a1)
0000BB18 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BB1C                            
0000BB1C 137C 0003 0018             		move.b	#3,$18(a1)
0000BB22                            
0000BB22                            loc_BA52:
0000BB22 117C 0010 0019             		move.b	#$10,$19(a0)
0000BB28                            
0000BB28                            Obj45_Solid:				; XREF: Obj45_Index
0000BB28 3F28 0008                  		move.w	8(a0),-(sp)
0000BB2C 6100 0000                  		bsr.w	Obj45_Move
0000BB30 323C 0017                  		move.w	#$17,d1
0000BB34 343C 0020                  		move.w	#$20,d2
0000BB38 363C 0020                  		move.w	#$20,d3
0000BB3C 381F                       		move.w	(sp)+,d4
0000BB3E 6100 0000                  		bsr.w	SolidObject
0000BB42 6100 0000                  		bsr.w	DisplaySprite
0000BB46 6000 0000                  		bra.w	Obj45_ChkDel
0000BB4A                            ; ===========================================================================
0000BB4A                            
0000BB4A                            loc_BA7A:				; XREF: Obj45_Index
0000BB4A 2268 003C                  		movea.l	$3C(a0),a1
0000BB4E 1029 0032                  		move.b	$32(a1),d0
0000BB52 0600 0010                  		addi.b	#$10,d0
0000BB56 EA08                       		lsr.b	#5,d0
0000BB58 5600                       		addq.b	#3,d0
0000BB5A 1140 001A                  		move.b	d0,$1A(a0)
0000BB5E                            
0000BB5E                            loc_BA8E:				; XREF: Obj45_Index
0000BB5E 2268 003C                  		movea.l	$3C(a0),a1
0000BB62 7000                       		moveq	#0,d0
0000BB64 1029 0032                  		move.b	$32(a1),d0
0000BB68 4440                       		neg.w	d0
0000BB6A D068 0030                  		add.w	$30(a0),d0
0000BB6E 3140 0008                  		move.w	d0,8(a0)
0000BB72                            
0000BB72                            Obj45_Display:				; XREF: Obj45_Index
0000BB72 6100 0000                  		bsr.w	DisplaySprite
0000BB76                            
0000BB76                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BB76 3028 003A                  		move.w	$3A(a0),d0
0000BB7A 0240 FF80                  		andi.w	#$FF80,d0
0000BB7E 3238 F700                  		move.w	($FFFFF700).w,d1
0000BB82 0441 0080                  		subi.w	#$80,d1
0000BB86 0241 FF80                  		andi.w	#$FF80,d1
0000BB8A 9041                       		sub.w	d1,d0
0000BB8C 0C40 0280                  		cmpi.w	#$280,d0
0000BB90 6200 0000                  		bhi.w	DeleteObject
0000BB94 4E75                       		rts	
0000BB96                            
0000BB96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB96                            
0000BB96                            
0000BB96                            Obj45_Move:				; XREF: Obj45_Solid
0000BB96 7000                       		moveq	#0,d0
0000BB98 1028 0028                  		move.b	$28(a0),d0
0000BB9C D040                       		add.w	d0,d0
0000BB9E 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000BBA2 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000BBA6                            ; End of function Obj45_Move
0000BBA6                            
0000BBA6                            ; ===========================================================================
0000BBA6 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000BBA8 0000                       		dc.w loc_BADA-off_BAD6
0000BBAA                            ; ===========================================================================
0000BBAA                            
0000BBAA                            loc_BADA:				; XREF: off_BAD6
0000BBAA 4A68 0036                  		tst.w	$36(a0)
0000BBAE 6700                       		beq.s	loc_BB08
0000BBB0 4A68 0038                  		tst.w	$38(a0)
0000BBB4 6700                       		beq.s	loc_BAEC
0000BBB6 5368 0038                  		subq.w	#1,$38(a0)
0000BBBA 6000                       		bra.s	loc_BB3C
0000BBBC                            ; ===========================================================================
0000BBBC                            
0000BBBC                            loc_BAEC:
0000BBBC 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BBC2 6400                       		bcc.s	loc_BB3C
0000BBC4 317C 0000 0032             		move.w	#0,$32(a0)
0000BBCA 317C 0000 0010             		move.w	#0,$10(a0)
0000BBD0 317C 0000 0036             		move.w	#0,$36(a0)
0000BBD6 6000                       		bra.s	loc_BB3C
0000BBD8                            ; ===========================================================================
0000BBD8                            
0000BBD8                            loc_BB08:				; XREF: loc_BADA
0000BBD8 3228 0034                  		move.w	$34(a0),d1
0000BBDC B268 0032                  		cmp.w	$32(a0),d1
0000BBE0 6700                       		beq.s	loc_BB3C
0000BBE2 3028 0010                  		move.w	$10(a0),d0
0000BBE6 0668 0070 0010             		addi.w	#$70,$10(a0)
0000BBEC D168 0032                  		add.w	d0,$32(a0)
0000BBF0 B268 0032                  		cmp.w	$32(a0),d1
0000BBF4 6200                       		bhi.s	loc_BB3C
0000BBF6 3141 0032                  		move.w	d1,$32(a0)
0000BBFA 317C 0000 0010             		move.w	#0,$10(a0)
0000BC00 317C 0001 0036             		move.w	#1,$36(a0)
0000BC06 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BC0C                            
0000BC0C                            loc_BB3C:
0000BC0C 7000                       		moveq	#0,d0
0000BC0E 1028 0032                  		move.b	$32(a0),d0
0000BC12 4440                       		neg.w	d0
0000BC14 D068 0030                  		add.w	$30(a0),d0
0000BC18 3140 0008                  		move.w	d0,8(a0)
0000BC1C 4E75                       		rts	
0000BC1E                            ; ===========================================================================
0000BC1E                            ; ---------------------------------------------------------------------------
0000BC1E                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BC1E                            ; ---------------------------------------------------------------------------
0000BC1E                            Map_obj31:
0000BC1E                            	include "_maps\obj31.asm"
0000BC1E                            ; ---------------------------------------------------------------------------
0000BC1E                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BC1E                            ; ---------------------------------------------------------------------------
0000BC1E 0000                       		dc.w byte_BB64-Map_obj31
0000BC20 0000                       		dc.w byte_BB7E-Map_obj31
0000BC22 0000                       		dc.w byte_BB98-Map_obj31
0000BC24 0000                       		dc.w byte_BB9E-Map_obj31
0000BC26 0000                       		dc.w byte_BBA9-Map_obj31
0000BC28 0000                       		dc.w byte_BBBE-Map_obj31
0000BC2A 0000                       		dc.w byte_BBDD-Map_obj31
0000BC2C 0000                       		dc.w byte_BC06-Map_obj31
0000BC2E 0000                       		dc.w byte_BC06-Map_obj31
0000BC30 0000                       		dc.w byte_BC39-Map_obj31
0000BC32 0000                       		dc.w byte_BC53-Map_obj31
0000BC34 05                         byte_BB64:	dc.b 5
0000BC35 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000BC3A F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000BC3F EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BC44 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000BC49 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000BC4E 05                         byte_BB7E:	dc.b 5
0000BC4F F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000BC54 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000BC59 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000BC5E F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000BC63 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000BC68 01                         byte_BB98:	dc.b 1
0000BC69 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000BC6E 02                         byte_BB9E:	dc.b 2
0000BC6F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BC74 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BC79 04                         byte_BBA9:	dc.b 4
0000BC7A E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BC7F F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BC84 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BC89 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BC8E 06                         byte_BBBE:	dc.b 6
0000BC8F C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BC94 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BC99 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BC9E F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BCA3 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BCA8 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BCAD 08                         byte_BBDD:	dc.b 8
0000BCAE A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BCB3 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BCB8 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BCBD D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BCC2 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BCC7 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BCCC 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BCD1 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BCD6 0A                         byte_BC06:	dc.b $A
0000BCD7 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000BCDC 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000BCE1 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BCE6 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BCEB C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BCF0 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BCF5 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BCFA F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BCFF 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BD04 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BD09 05                         byte_BC39:	dc.b 5
0000BD0A F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000BD0F F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000BD14 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000BD19 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000BD1E EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BD23 01                         byte_BC53:	dc.b 1
0000BD24 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000BD2A 00                         		even
0000BD2A 00                         		even
0000BD2A                            
0000BD2A                            ; ---------------------------------------------------------------------------
0000BD2A                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BD2A                            ; ---------------------------------------------------------------------------
0000BD2A                            Map_obj45:
0000BD2A                            	include "_maps\obj45.asm"
0000BD2A                            ; ---------------------------------------------------------------------------
0000BD2A                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BD2A                            ; ---------------------------------------------------------------------------
0000BD2A 0000                       		dc.w byte_BC6C-Map_obj45
0000BD2C 0000                       		dc.w byte_BC7C-Map_obj45
0000BD2E 0000                       		dc.w byte_BC8C-Map_obj45
0000BD30 0000                       		dc.w byte_BC92-Map_obj45
0000BD32 0000                       		dc.w byte_BC9D-Map_obj45
0000BD34 0000                       		dc.w byte_BCB2-Map_obj45
0000BD36 0000                       		dc.w byte_BCD1-Map_obj45
0000BD38 0000                       		dc.w byte_BCFA-Map_obj45
0000BD3A 0000                       		dc.w byte_BCFA-Map_obj45
0000BD3C 03                         byte_BC6C:	dc.b 3
0000BD3D E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000BD42 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000BD47 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000BD4C 03                         byte_BC7C:	dc.b 3
0000BD4D E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000BD52 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000BD57 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000BD5C 01                         byte_BC8C:	dc.b 1
0000BD5D F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000BD62 02                         byte_BC92:	dc.b 2
0000BD63 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD68 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD6D 04                         byte_BC9D:	dc.b 4
0000BD6E F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD73 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD78 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BD7D F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BD82 06                         byte_BCB2:	dc.b 6
0000BD83 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD88 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD8D F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BD92 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BD97 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BD9C F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BDA1 08                         byte_BCD1:	dc.b 8
0000BDA2 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BDA7 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BDAC F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BDB1 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BDB6 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BDBB F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BDC0 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000BDC5 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000BDCA 08                         byte_BCFA:	dc.b 8
0000BDCB F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BDD0 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BDD5 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BDDA F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BDDF F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BDE4 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BDE9 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000BDEE F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000BDF3 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000BDF8 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000BDFE 00                         		even
0000BDFE 00                         		even
0000BDFE                            
0000BDFE                            ; ===========================================================================
0000BDFE                            ; ---------------------------------------------------------------------------
0000BDFE                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000BDFE                            ; ---------------------------------------------------------------------------
0000BDFE                            
0000BDFE                            Obj32:					; XREF: Obj_Index
0000BDFE 7000                       		moveq	#0,d0
0000BE00 1028 0024                  		move.b	$24(a0),d0
0000BE04 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000BE08 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000BE0C                            ; ===========================================================================
0000BE0C 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000BE0E 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000BE10                            ; ===========================================================================
0000BE10                            
0000BE10                            Obj32_Main:				; XREF: Obj32_Index
0000BE10 5428 0024                  		addq.b	#2,$24(a0)
0000BE14 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000BE1C 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000BE22 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000BE28 6700                       		beq.s	loc_BD60
0000BE2A 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000BE30                            
0000BE30                            loc_BD60:
0000BE30 117C 0004 0001             		move.b	#4,1(a0)
0000BE36 117C 0010 0019             		move.b	#$10,$19(a0)
0000BE3C 117C 0004 0018             		move.b	#4,$18(a0)
0000BE42 5668 000C                  		addq.w	#3,$C(a0)
0000BE46                            
0000BE46                            Obj32_Pressed:				; XREF: Obj32_Index
0000BE46 4A28 0001                  		tst.b	1(a0)
0000BE4A 6A00                       		bpl.s	Obj32_Display
0000BE4C 323C 001B                  		move.w	#$1B,d1
0000BE50 343C 0005                  		move.w	#5,d2
0000BE54 363C 0005                  		move.w	#5,d3
0000BE58 3828 0008                  		move.w	8(a0),d4
0000BE5C 6100 0000                  		bsr.w	SolidObject
0000BE60 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000BE66 1028 0028                  		move.b	$28(a0),d0
0000BE6A 0240 000F                  		andi.w	#$F,d0
0000BE6E 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000BE72 47F3 0000                  		lea	(a3,d0.w),a3
0000BE76 7600                       		moveq	#0,d3
0000BE78 0828 0006 0028             		btst	#6,$28(a0)
0000BE7E 6700                       		beq.s	loc_BDB2
0000BE80 7607                       		moveq	#7,d3
0000BE82                            
0000BE82                            loc_BDB2:
0000BE82 4A28 0028                  		tst.b	$28(a0)
0000BE86 6A00                       		bpl.s	loc_BDBE
0000BE88 6100 0000                  		bsr.w	Obj32_MZBlock
0000BE8C 6600                       		bne.s	loc_BDC8
0000BE8E                            
0000BE8E                            loc_BDBE:
0000BE8E 4A28 0025                  		tst.b	$25(a0)
0000BE92 6600                       		bne.s	loc_BDC8
0000BE94 0793                       		bclr	d3,(a3)
0000BE96 6000                       		bra.s	loc_BDDE
0000BE98                            ; ===========================================================================
0000BE98                            
0000BE98                            loc_BDC8:
0000BE98 4A13                       		tst.b	(a3)
0000BE9A 6600                       		bne.s	loc_BDD6
0000BE9C 303C 00CD                  		move.w	#$CD,d0
0000BEA0 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play switch sound
0000BEA6                            
0000BEA6                            loc_BDD6:
0000BEA6 07D3                       		bset	d3,(a3)
0000BEA8 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000BEAE                            
0000BEAE                            loc_BDDE:
0000BEAE 0828 0005 0028             		btst	#5,$28(a0)
0000BEB4 6700                       		beq.s	Obj32_Display
0000BEB6 5328 001E                  		subq.b	#1,$1E(a0)
0000BEBA 6A00                       		bpl.s	Obj32_Display
0000BEBC 117C 0007 001E             		move.b	#7,$1E(a0)
0000BEC2 0868 0001 001A             		bchg	#1,$1A(a0)
0000BEC8                            
0000BEC8                            Obj32_Display:
0000BEC8 6100 0000                  		bsr.w	DisplaySprite
0000BECC 3028 0008                  		move.w	8(a0),d0
0000BED0 0240 FF80                  		andi.w	#$FF80,d0
0000BED4 3238 F700                  		move.w	($FFFFF700).w,d1
0000BED8 0441 0080                  		subi.w	#$80,d1
0000BEDC 0241 FF80                  		andi.w	#$FF80,d1
0000BEE0 9041                       		sub.w	d1,d0
0000BEE2 0C40 0280                  		cmpi.w	#$280,d0
0000BEE6 6200 0000                  		bhi.w	Obj32_Delete
0000BEEA 4E75                       		rts	
0000BEEC                            ; ===========================================================================
0000BEEC                            
0000BEEC                            Obj32_Delete:
0000BEEC 6100 0000                  		bsr.w	DeleteObject
0000BEF0 4E75                       		rts	
0000BEF2                            
0000BEF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BEF2                            
0000BEF2                            
0000BEF2                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000BEF2 3F03                       		move.w	d3,-(sp)
0000BEF4 3428 0008                  		move.w	8(a0),d2
0000BEF8 3628 000C                  		move.w	$C(a0),d3
0000BEFC 0442 0010                  		subi.w	#$10,d2
0000BF00 5143                       		subq.w	#8,d3
0000BF02 383C 0020                  		move.w	#$20,d4
0000BF06 3A3C 0010                  		move.w	#$10,d5
0000BF0A 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000BF0E 3C3C 005F                  		move.w	#$5F,d6
0000BF12                            
0000BF12                            Obj32_MZLoop:
0000BF12 4A29 0001                  		tst.b	1(a1)
0000BF16 6A00                       		bpl.s	loc_BE4E
0000BF18 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000BF1C 6700                       		beq.s	loc_BE5E	; if yes, branch
0000BF1E                            
0000BF1E                            loc_BE4E:
0000BF1E 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000BF22 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000BF26                            
0000BF26 361F                       		move.w	(sp)+,d3
0000BF28 7000                       		moveq	#0,d0
0000BF2A                            
0000BF2A                            locret_BE5A:
0000BF2A 4E75                       		rts	
0000BF2C                            ; ===========================================================================
0000BF2C 1010                       Obj32_MZData:	dc.b $10, $10
0000BF2E                            ; ===========================================================================
0000BF2E                            
0000BF2E                            loc_BE5E:				; XREF: Obj32_MZBlock
0000BF2E 7001                       		moveq	#1,d0
0000BF30 0240 003F                  		andi.w	#$3F,d0
0000BF34 D040                       		add.w	d0,d0
0000BF36 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000BF3A 121A                       		move.b	(a2)+,d1
0000BF3C 4881                       		ext.w	d1
0000BF3E 3029 0008                  		move.w	8(a1),d0
0000BF42 9041                       		sub.w	d1,d0
0000BF44 9042                       		sub.w	d2,d0
0000BF46 6400                       		bcc.s	loc_BE80
0000BF48 D241                       		add.w	d1,d1
0000BF4A D041                       		add.w	d1,d0
0000BF4C 6500                       		bcs.s	loc_BE84
0000BF4E 60CE                       		bra.s	loc_BE4E
0000BF50                            ; ===========================================================================
0000BF50                            
0000BF50                            loc_BE80:
0000BF50 B044                       		cmp.w	d4,d0
0000BF52 62CA                       		bhi.s	loc_BE4E
0000BF54                            
0000BF54                            loc_BE84:
0000BF54 121A                       		move.b	(a2)+,d1
0000BF56 4881                       		ext.w	d1
0000BF58 3029 000C                  		move.w	$C(a1),d0
0000BF5C 9041                       		sub.w	d1,d0
0000BF5E 9043                       		sub.w	d3,d0
0000BF60 6400                       		bcc.s	loc_BE9A
0000BF62 D241                       		add.w	d1,d1
0000BF64 D041                       		add.w	d1,d0
0000BF66 6500                       		bcs.s	loc_BE9E
0000BF68 60B4                       		bra.s	loc_BE4E
0000BF6A                            ; ===========================================================================
0000BF6A                            
0000BF6A                            loc_BE9A:
0000BF6A B045                       		cmp.w	d5,d0
0000BF6C 62B0                       		bhi.s	loc_BE4E
0000BF6E                            
0000BF6E                            loc_BE9E:
0000BF6E 361F                       		move.w	(sp)+,d3
0000BF70 7001                       		moveq	#1,d0
0000BF72 4E75                       		rts	
0000BF74                            ; End of function Obj32_MZBlock
0000BF74                            
0000BF74                            ; ===========================================================================
0000BF74                            ; ---------------------------------------------------------------------------
0000BF74                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000BF74                            ; ---------------------------------------------------------------------------
0000BF74                            Map_obj32:
0000BF74                            	include "_maps\obj32.asm"
0000BF74                            ; ---------------------------------------------------------------------------
0000BF74                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000BF74                            ; ---------------------------------------------------------------------------
0000BF74 0000                       		dc.w byte_BEAC-Map_obj32
0000BF76 0000                       		dc.w byte_BEB7-Map_obj32
0000BF78 0000                       		dc.w byte_BEC2-Map_obj32
0000BF7A 0000                       		dc.w byte_BEB7-Map_obj32
0000BF7C 02                         byte_BEAC:	dc.b 2
0000BF7D F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000BF82 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000BF87 02                         byte_BEB7:	dc.b 2
0000BF88 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000BF8D F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000BF92 02                         byte_BEC2:	dc.b 2
0000BF93 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000BF98 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000BF9D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000BFA2                            		even
0000BFA2                            		even
0000BFA2                            
0000BFA2                            ; ===========================================================================
0000BFA2                            ; ---------------------------------------------------------------------------
0000BFA2                            ; Object 33 - pushable blocks (MZ, LZ)
0000BFA2                            ; ---------------------------------------------------------------------------
0000BFA2                            
0000BFA2                            Obj33:					; XREF: Obj_Index
0000BFA2 7000                       		moveq	#0,d0
0000BFA4 1028 0024                  		move.b	$24(a0),d0
0000BFA8 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000BFAC 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000BFB0                            ; ===========================================================================
0000BFB0 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000BFB2 0000                       		dc.w loc_BF6E-Obj33_Index
0000BFB4 0000                       		dc.w loc_C02C-Obj33_Index
0000BFB6                            
0000BFB6 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000BFB8 4001                       		dc.b $40, 1
0000BFBA                            ; ===========================================================================
0000BFBA                            
0000BFBA                            Obj33_Main:				; XREF: Obj33_Index
0000BFBA 5428 0024                  		addq.b	#2,$24(a0)
0000BFBE 117C 000F 0016             		move.b	#$F,$16(a0)
0000BFC4 117C 000F 0017             		move.b	#$F,$17(a0)
0000BFCA 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000BFD2 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000BFD8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000BFDE 6600                       		bne.s	loc_BF16
0000BFE0 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000BFE6                            
0000BFE6                            loc_BF16:
0000BFE6 117C 0004 0001             		move.b	#4,1(a0)
0000BFEC 117C 0003 0018             		move.b	#3,$18(a0)
0000BFF2 3168 0008 0034             		move.w	8(a0),$34(a0)
0000BFF8 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000BFFE 7000                       		moveq	#0,d0
0000C000 1028 0028                  		move.b	$28(a0),d0
0000C004 D040                       		add.w	d0,d0
0000C006 0240 000E                  		andi.w	#$E,d0
0000C00A 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C00E 115A 0019                  		move.b	(a2)+,$19(a0)
0000C012 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C016 4A28 0028                  		tst.b	$28(a0)
0000C01A 6700                       		beq.s	Obj33_ChkGone
0000C01C 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C022                            
0000C022                            Obj33_ChkGone:
0000C022 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C026 7000                       		moveq	#0,d0
0000C028 1028 0023                  		move.b	$23(a0),d0
0000C02C 6700                       		beq.s	loc_BF6E
0000C02E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C034 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C03A 6600 0000                  		bne.w	DeleteObject
0000C03E                            
0000C03E                            loc_BF6E:				; XREF: Obj33_Index
0000C03E 4A28 0032                  		tst.b	$32(a0)
0000C042 6600 0000                  		bne.w	loc_C046
0000C046 7200                       		moveq	#0,d1
0000C048 1228 0019                  		move.b	$19(a0),d1
0000C04C 0641 000B                  		addi.w	#$B,d1
0000C050 343C 0010                  		move.w	#$10,d2
0000C054 363C 0011                  		move.w	#$11,d3
0000C058 3828 0008                  		move.w	8(a0),d4
0000C05C 6100 0000                  		bsr.w	loc_C186
0000C060 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C066 6600                       		bne.s	loc_BFC6	; if not, branch
0000C068 08A8 0007 0028             		bclr	#7,$28(a0)
0000C06E 3028 0008                  		move.w	8(a0),d0
0000C072 0C40 0A20                  		cmpi.w	#$A20,d0
0000C076 6500                       		bcs.s	loc_BFC6
0000C078 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C07C 6400                       		bcc.s	loc_BFC6
0000C07E 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C082 0440 001C                  		subi.w	#$1C,d0
0000C086 3140 000C                  		move.w	d0,$C(a0)
0000C08A 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C090 08E8 0007 0028             		bset	#7,$28(a0)
0000C096                            
0000C096                            loc_BFC6:
0000C096 3028 0008                  		move.w	8(a0),d0
0000C09A 0240 FF80                  		andi.w	#$FF80,d0
0000C09E 3238 F700                  		move.w	($FFFFF700).w,d1
0000C0A2 0441 0080                  		subi.w	#$80,d1
0000C0A6 0241 FF80                  		andi.w	#$FF80,d1
0000C0AA 9041                       		sub.w	d1,d0
0000C0AC 0C40 0280                  		cmpi.w	#$280,d0
0000C0B0 6200                       		bhi.s	loc_BFE6
0000C0B2 6000 0000                  		bra.w	DisplaySprite
0000C0B6                            ; ===========================================================================
0000C0B6                            
0000C0B6                            loc_BFE6:
0000C0B6 3028 0034                  		move.w	$34(a0),d0
0000C0BA 0240 FF80                  		andi.w	#$FF80,d0
0000C0BE 3238 F700                  		move.w	($FFFFF700).w,d1
0000C0C2 0441 0080                  		subi.w	#$80,d1
0000C0C6 0241 FF80                  		andi.w	#$FF80,d1
0000C0CA 9041                       		sub.w	d1,d0
0000C0CC 0C40 0280                  		cmpi.w	#$280,d0
0000C0D0 6200                       		bhi.s	loc_C016
0000C0D2 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C0D8 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C0DE 117C 0004 0024             		move.b	#4,$24(a0)
0000C0E4 6000                       		bra.s	loc_C02C
0000C0E6                            ; ===========================================================================
0000C0E6                            
0000C0E6                            loc_C016:
0000C0E6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C0EA 7000                       		moveq	#0,d0
0000C0EC 1028 0023                  		move.b	$23(a0),d0
0000C0F0 6700                       		beq.s	loc_C028
0000C0F2 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C0F8                            
0000C0F8                            loc_C028:
0000C0F8 6000 0000                  		bra.w	DeleteObject
0000C0FC                            ; ===========================================================================
0000C0FC                            
0000C0FC                            loc_C02C:				; XREF: Obj33_Index
0000C0FC 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C100 6700                       		beq.s	locret_C044
0000C102 117C 0002 0024             		move.b	#2,$24(a0)
0000C108 4228 0032                  		clr.b	$32(a0)
0000C10C 4268 0010                  		clr.w	$10(a0)
0000C110 4268 0012                  		clr.w	$12(a0)
0000C114                            
0000C114                            locret_C044:
0000C114 4E75                       		rts	
0000C116                            ; ===========================================================================
0000C116                            
0000C116                            loc_C046:				; XREF: loc_BF6E
0000C116 3F28 0008                  		move.w	8(a0),-(sp)
0000C11A 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C120 6400                       		bcc.s	loc_C056
0000C122 6100 0000                  		bsr.w	SpeedToPos
0000C126                            
0000C126                            loc_C056:
0000C126 0828 0001 0022             		btst	#1,$22(a0)
0000C12C 6700                       		beq.s	loc_C0A0
0000C12E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C134 4EB9 0000 0000             		jsr	ObjHitFloor
0000C13A 4A41                       		tst.w	d1
0000C13C 6A00 0000                  		bpl.w	loc_C09E
0000C140 D368 000C                  		add.w	d1,$C(a0)
0000C144 4268 0012                  		clr.w	$12(a0)
0000C148 08A8 0001 0022             		bclr	#1,$22(a0)
0000C14E 3011                       		move.w	(a1),d0
0000C150 0240 03FF                  		andi.w	#$3FF,d0
0000C154 0C40 016A                  		cmpi.w	#$16A,d0
0000C158 6500                       		bcs.s	loc_C09E
0000C15A 3028 0030                  		move.w	$30(a0),d0
0000C15E E640                       		asr.w	#3,d0
0000C160 3140 0010                  		move.w	d0,$10(a0)
0000C164 117C 0001 0032             		move.b	#1,$32(a0)
0000C16A 4268 000E                  		clr.w	$E(a0)
0000C16E                            
0000C16E                            loc_C09E:
0000C16E 6000                       		bra.s	loc_C0E6
0000C170                            ; ===========================================================================
0000C170                            
0000C170                            loc_C0A0:
0000C170 4A68 0010                  		tst.w	$10(a0)
0000C174 6700 0000                  		beq.w	loc_C0D6
0000C178 6B00                       		bmi.s	loc_C0BC
0000C17A 7600                       		moveq	#0,d3
0000C17C 1628 0019                  		move.b	$19(a0),d3
0000C180 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C186 4A41                       		tst.w	d1		; has block touched a wall?
0000C188 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C18A 6000                       		bra.s	loc_C0E6
0000C18C                            ; ===========================================================================
0000C18C                            
0000C18C                            loc_C0BC:
0000C18C 7600                       		moveq	#0,d3
0000C18E 1628 0019                  		move.b	$19(a0),d3
0000C192 4643                       		not.w	d3
0000C194 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C19A 4A41                       		tst.w	d1		; has block touched a wall?
0000C19C 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C19E 6000                       		bra.s	loc_C0E6
0000C1A0                            ; ===========================================================================
0000C1A0                            
0000C1A0                            Obj33_StopPush:
0000C1A0 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C1A4 6000                       		bra.s	loc_C0E6
0000C1A6                            ; ===========================================================================
0000C1A6                            
0000C1A6                            loc_C0D6:
0000C1A6 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C1AE 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C1B4 6400                       		bcc.s	loc_C104
0000C1B6                            
0000C1B6                            loc_C0E6:
0000C1B6 7200                       		moveq	#0,d1
0000C1B8 1228 0019                  		move.b	$19(a0),d1
0000C1BC 0641 000B                  		addi.w	#$B,d1
0000C1C0 343C 0010                  		move.w	#$10,d2
0000C1C4 363C 0011                  		move.w	#$11,d3
0000C1C8 381F                       		move.w	(sp)+,d4
0000C1CA 6100 0000                  		bsr.w	loc_C186
0000C1CE 6100                       		bsr.s	Obj33_ChkLava
0000C1D0 6000 FEC4                  		bra.w	loc_BFC6
0000C1D4                            ; ===========================================================================
0000C1D4                            
0000C1D4                            loc_C104:
0000C1D4 381F                       		move.w	(sp)+,d4
0000C1D6 43F8 D000                  		lea	($FFFFD000).w,a1
0000C1DA 08A9 0003 0022             		bclr	#3,$22(a1)
0000C1E0 08A8 0003 0022             		bclr	#3,$22(a0)
0000C1E6 6000 FECE                  		bra.w	loc_BFE6
0000C1EA                            ; ===========================================================================
0000C1EA                            
0000C1EA                            Obj33_ChkLava:
0000C1EA 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C1F0 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C1F2 343C FFE0                  		move.w	#-$20,d2
0000C1F6 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C1FC 6700                       		beq.s	Obj33_LoadLava
0000C1FE 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C204 6700                       		beq.s	Obj33_LoadLava
0000C206 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C20C 6700                       		beq.s	Obj33_LoadLava
0000C20E 4E75                       		rts	
0000C210                            ; ===========================================================================
0000C210                            
0000C210                            Obj33_ChkLava2:
0000C210 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C216 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C218 343C 0020                  		move.w	#$20,d2
0000C21C 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C222 6700                       		beq.s	Obj33_LoadLava
0000C224 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C22A 6700                       		beq.s	Obj33_LoadLava
0000C22C                            
0000C22C                            Obj33_NoLava:
0000C22C 4E75                       		rts	
0000C22E                            ; ===========================================================================
0000C22E                            
0000C22E                            Obj33_LoadLava:
0000C22E 6100 0000                  		bsr.w	SingleObjLoad
0000C232 6600                       		bne.s	locret_C184
0000C234 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C238 3368 0008 0008             		move.w	8(a0),8(a1)
0000C23E D569 0008                  		add.w	d2,8(a1)
0000C242 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C248 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C24E 2348 003C                  		move.l	a0,$3C(a1)
0000C252                            
0000C252                            locret_C184:
0000C252 4E75                       		rts	
0000C254                            ; ===========================================================================
0000C254                            
0000C254                            loc_C186:				; XREF: loc_BF6E
0000C254 1028 0025                  		move.b	$25(a0),d0
0000C258 6700 0000                  		beq.w	loc_C218
0000C25C 5500                       		subq.b	#2,d0
0000C25E 6600                       		bne.s	loc_C1AA
0000C260 6100 B462                  		bsr.w	ExitPlatform
0000C264 0829 0003 0022             		btst	#3,$22(a1)
0000C26A 6600                       		bne.s	loc_C1A4
0000C26C 4228 0025                  		clr.b	$25(a0)
0000C270 4E75                       		rts	
0000C272                            ; ===========================================================================
0000C272                            
0000C272                            loc_C1A4:
0000C272 3404                       		move.w	d4,d2
0000C274 6000 B9AC                  		bra.w	MvSonicOnPtfm
0000C278                            ; ===========================================================================
0000C278                            
0000C278                            loc_C1AA:
0000C278 5500                       		subq.b	#2,d0
0000C27A 6600                       		bne.s	loc_C1F2
0000C27C 6100 0000                  		bsr.w	SpeedToPos
0000C280 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C286 4EB9 0000 0000             		jsr	ObjHitFloor
0000C28C 4A41                       		tst.w	d1
0000C28E 6A00 0000                  		bpl.w	locret_C1F0
0000C292 D368 000C                  		add.w	d1,$C(a0)
0000C296 4268 0012                  		clr.w	$12(a0)
0000C29A 4228 0025                  		clr.b	$25(a0)
0000C29E 3011                       		move.w	(a1),d0
0000C2A0 0240 03FF                  		andi.w	#$3FF,d0
0000C2A4 0C40 016A                  		cmpi.w	#$16A,d0
0000C2A8 6500                       		bcs.s	locret_C1F0
0000C2AA 3028 0030                  		move.w	$30(a0),d0
0000C2AE E640                       		asr.w	#3,d0
0000C2B0 3140 0010                  		move.w	d0,$10(a0)
0000C2B4 117C 0001 0032             		move.b	#1,$32(a0)
0000C2BA 4268 000E                  		clr.w	$E(a0)
0000C2BE                            
0000C2BE                            locret_C1F0:
0000C2BE 4E75                       		rts	
0000C2C0                            ; ===========================================================================
0000C2C0                            
0000C2C0                            loc_C1F2:
0000C2C0 6100 0000                  		bsr.w	SpeedToPos
0000C2C4 3028 0008                  		move.w	8(a0),d0
0000C2C8 0240 000C                  		andi.w	#$C,d0
0000C2CC 6600 0000                  		bne.w	locret_C2E4
0000C2D0 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C2D6 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C2DC 4268 0010                  		clr.w	$10(a0)
0000C2E0 5528 0025                  		subq.b	#2,$25(a0)
0000C2E4 4E75                       		rts	
0000C2E6                            ; ===========================================================================
0000C2E6                            
0000C2E6                            loc_C218:
0000C2E6 6100 0000                  		bsr.w	loc_FAC8
0000C2EA 4A44                       		tst.w	d4
0000C2EC 6700 0000                  		beq.w	locret_C2E4
0000C2F0 6B00 0000                  		bmi.w	locret_C2E4
0000C2F4 4A28 0032                  		tst.b	$32(a0)
0000C2F8 6700                       		beq.s	loc_C230
0000C2FA 6000 0000                  		bra.w	locret_C2E4
0000C2FE                            ; ===========================================================================
0000C2FE                            
0000C2FE                            loc_C230:
0000C2FE 4A40                       		tst.w	d0
0000C300 6700 0000                  		beq.w	locret_C2E4
0000C304 6B00                       		bmi.s	loc_C268
0000C306 0829 0000 0022             		btst	#0,$22(a1)
0000C30C 6600 0000                  		bne.w	locret_C2E4
0000C310 3F00                       		move.w	d0,-(sp)
0000C312 7600                       		moveq	#0,d3
0000C314 1628 0019                  		move.b	$19(a0),d3
0000C318 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C31E 301F                       		move.w	(sp)+,d0
0000C320 4A41                       		tst.w	d1
0000C322 6B00 0000                  		bmi.w	locret_C2E4
0000C326 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C32E 7001                       		moveq	#1,d0
0000C330 323C 0040                  		move.w	#$40,d1
0000C334 6000                       		bra.s	loc_C294
0000C336                            ; ===========================================================================
0000C336                            
0000C336                            loc_C268:
0000C336 0829 0000 0022             		btst	#0,$22(a1)
0000C33C 6700                       		beq.s	locret_C2E4
0000C33E 3F00                       		move.w	d0,-(sp)
0000C340 7600                       		moveq	#0,d3
0000C342 1628 0019                  		move.b	$19(a0),d3
0000C346 4643                       		not.w	d3
0000C348 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C34E 301F                       		move.w	(sp)+,d0
0000C350 4A41                       		tst.w	d1
0000C352 6B00                       		bmi.s	locret_C2E4
0000C354 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C35C 70FF                       		moveq	#-1,d0
0000C35E 323C FFC0                  		move.w	#-$40,d1
0000C362                            
0000C362                            loc_C294:
0000C362 43F8 D000                  		lea	($FFFFD000).w,a1
0000C366 D169 0008                  		add.w	d0,8(a1)
0000C36A 3341 0014                  		move.w	d1,$14(a1)
0000C36E 337C 0000 0010             		move.w	#0,$10(a1)
0000C374 3F00                       		move.w	d0,-(sp)
0000C376 303C 00A7                  		move.w	#$A7,d0
0000C37A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C380 301F                       		move.w	(sp)+,d0
0000C382 4A28 0028                  		tst.b	$28(a0)
0000C386 6B00                       		bmi.s	locret_C2E4
0000C388 3F00                       		move.w	d0,-(sp)
0000C38A 4EB9 0000 0000             		jsr	ObjHitFloor
0000C390 301F                       		move.w	(sp)+,d0
0000C392 0C41 0004                  		cmpi.w	#4,d1
0000C396 6F00                       		ble.s	loc_C2E0
0000C398 317C 0400 0010             		move.w	#$400,$10(a0)
0000C39E 4A40                       		tst.w	d0
0000C3A0 6A00                       		bpl.s	loc_C2D8
0000C3A2 4468 0010                  		neg.w	$10(a0)
0000C3A6                            
0000C3A6                            loc_C2D8:
0000C3A6 117C 0006 0025             		move.b	#6,$25(a0)
0000C3AC 6000                       		bra.s	locret_C2E4
0000C3AE                            ; ===========================================================================
0000C3AE                            
0000C3AE                            loc_C2E0:
0000C3AE D368 000C                  		add.w	d1,$C(a0)
0000C3B2                            
0000C3B2                            locret_C2E4:
0000C3B2 4E75                       		rts	
0000C3B4                            ; ===========================================================================
0000C3B4                            ; ---------------------------------------------------------------------------
0000C3B4                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C3B4                            ; ---------------------------------------------------------------------------
0000C3B4                            Map_obj33:
0000C3B4                            	include "_maps\obj33.asm"
0000C3B4                            ; ---------------------------------------------------------------------------
0000C3B4                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C3B4                            ; ---------------------------------------------------------------------------
0000C3B4 0000                       		dc.w byte_C2EA-Map_obj33
0000C3B6 0000                       		dc.w byte_C2F0-Map_obj33
0000C3B8 01                         byte_C2EA:	dc.b 1
0000C3B9 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C3BE 04                         byte_C2F0:	dc.b 4
0000C3BF F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C3C4 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C3C9 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C3CE F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C3D4 00                         		even
0000C3D4 00                         		even
0000C3D4                            
0000C3D4                            ; ===========================================================================
0000C3D4                            ; ---------------------------------------------------------------------------
0000C3D4                            ; Object 34 - zone title cards
0000C3D4                            ; ---------------------------------------------------------------------------
0000C3D4                            
0000C3D4                            Obj34:					; XREF: Obj_Index
0000C3D4 7000                       		moveq	#0,d0
0000C3D6 1028 0024                  		move.b	$24(a0),d0
0000C3DA 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C3DE 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C3E2                            ; ===========================================================================
0000C3E2 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C3E4 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C3E6 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C3E8 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C3EA                            ; ===========================================================================
0000C3EA                            
0000C3EA                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C3EA 2248                       		movea.l	a0,a1
0000C3EC 7000                       		moveq	#0,d0
0000C3EE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C3F2 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C3F8 6600                       		bne.s	Obj34_CheckFZ
0000C3FA 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C3FC                            
0000C3FC                            Obj34_CheckFZ:
0000C3FC 3400                       		move.w	d0,d2
0000C3FE 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C404 6600                       		bne.s	Obj34_LoadConfig
0000C406 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C408 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C40A                            
0000C40A                            Obj34_LoadConfig:
0000C40A 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C410 E948                       		lsl.w	#4,d0
0000C412 D6C0                       		adda.w	d0,a3
0000C414 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C41A 7203                       		moveq	#3,d1
0000C41C                            
0000C41C                            Obj34_Loop:
0000C41C 12BC 0034                  		move.b	#$34,0(a1)
0000C420 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C424 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C428 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C42C 335A 000A                  		move.w	(a2)+,$A(a1)
0000C430 135A 0024                  		move.b	(a2)+,$24(a1)
0000C434 101A                       		move.b	(a2)+,d0
0000C436 6600                       		bne.s	Obj34_ActNumber
0000C438 1002                       		move.b	d2,d0
0000C43A                            
0000C43A                            Obj34_ActNumber:
0000C43A 0C00 0007                  		cmpi.b	#7,d0
0000C43E 6600                       		bne.s	Obj34_MakeSprite
0000C440 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C444 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C44A 6600                       		bne.s	Obj34_MakeSprite
0000C44C 5300                       		subq.b	#1,d0
0000C44E                            
0000C44E                            Obj34_MakeSprite:
0000C44E 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C452 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C45A 337C 8580 0002             		move.w	#$8580,2(a1)
0000C460 137C 0078 0019             		move.b	#$78,$19(a1)
0000C466 137C 0000 0001             		move.b	#0,1(a1)
0000C46C 137C 0000 0018             		move.b	#0,$18(a1)
0000C472 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C478 43E9 0040                  		lea	$40(a1),a1	; next object
0000C47C 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C480                            
0000C480                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C480 7210                       		moveq	#$10,d1		; set horizontal speed
0000C482 3028 0030                  		move.w	$30(a0),d0
0000C486 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C48A 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C48C 6C00                       		bge.s	Obj34_Move
0000C48E 4441                       		neg.w	d1
0000C490                            
0000C490                            Obj34_Move:
0000C490 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C494                            
0000C494                            loc_C3C8:
0000C494 3028 0008                  		move.w	8(a0),d0
0000C498 6B00                       		bmi.s	locret_C3D8
0000C49A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C49E 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C4A0 6000 0000                  		bra.w	DisplaySprite
0000C4A4                            ; ===========================================================================
0000C4A4                            
0000C4A4                            locret_C3D8:
0000C4A4 4E75                       		rts	
0000C4A6                            ; ===========================================================================
0000C4A6                            
0000C4A6                            Obj34_Wait:				; XREF: Obj34_Index
0000C4A6 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C4AA 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C4AC 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C4B0 6000 0000                  		bra.w	DisplaySprite
0000C4B4                            ; ===========================================================================
0000C4B4                            
0000C4B4                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C4B4 4A28 0001                  		tst.b	1(a0)
0000C4B8 6A00                       		bpl.s	Obj34_ChangeArt
0000C4BA 7220                       		moveq	#$20,d1
0000C4BC 3028 0032                  		move.w	$32(a0),d0
0000C4C0 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C4C4 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C4C6 6C00                       		bge.s	Obj34_Move2
0000C4C8 4441                       		neg.w	d1
0000C4CA                            
0000C4CA                            Obj34_Move2:
0000C4CA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C4CE 3028 0008                  		move.w	8(a0),d0
0000C4D2 6B00                       		bmi.s	locret_C412
0000C4D4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C4D8 6400                       		bcc.s	locret_C412	; if yes, branch
0000C4DA 6000 0000                  		bra.w	DisplaySprite
0000C4DE                            ; ===========================================================================
0000C4DE                            
0000C4DE                            locret_C412:
0000C4DE 4E75                       		rts	
0000C4E0                            ; ===========================================================================
0000C4E0                            
0000C4E0                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C4E0 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C4E6 6600                       		bne.s	Obj34_Delete
0000C4E8 7002                       		moveq	#2,d0
0000C4EA 4EB9 0000 1580             		jsr	(LoadPLC).l	; load explosion patterns
0000C4F0 7000                       		moveq	#0,d0
0000C4F2 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C4F6 0640 0015                  		addi.w	#$15,d0
0000C4FA 4EB9 0000 1580             		jsr	(LoadPLC).l	; load animal patterns
0000C500                            
0000C500                            Obj34_Delete:
0000C500 6000 0000                  		bra.w	DeleteObject
0000C504                            ; ===========================================================================
0000C504 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C506 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C508 00E4                       		dc.w $E4
0000C50A 0206                       		dc.b 2,	6
0000C50C 00EA                       		dc.w $EA
0000C50E 0207                       		dc.b 2,	7
0000C510 00E0                       		dc.w $E0
0000C512 020A                       		dc.b 2,	$A
0000C514                            ; ---------------------------------------------------------------------------
0000C514                            ; Title	card configuration data
0000C514                            ; Format:
0000C514                            ; 4 bytes per item (YYYY XXXX)
0000C514                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C514                            ; ---------------------------------------------------------------------------
0000C514 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C524 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C534 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C544 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C554 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C564 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C574 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000C584                            ; ===========================================================================
0000C584                            ; ---------------------------------------------------------------------------
0000C584                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000C584                            ; ---------------------------------------------------------------------------
0000C584                            
0000C584                            Obj39:					; XREF: Obj_Index
0000C584 7000                       		moveq	#0,d0
0000C586 1028 0024                  		move.b	$24(a0),d0
0000C58A 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000C58E 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000C592                            ; ===========================================================================
0000C592 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000C594 0000                       		dc.w loc_C50C-Obj39_Index
0000C596 0000                       		dc.w Obj39_Wait-Obj39_Index
0000C598                            ; ===========================================================================
0000C598                            
0000C598                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000C598 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C59C 6700                       		beq.s	Obj39_Main	; if yes, branch
0000C59E 4E75                       		rts	
0000C5A0                            ; ===========================================================================
0000C5A0                            
0000C5A0                            Obj39_Main:
0000C5A0 5428 0024                  		addq.b	#2,$24(a0)
0000C5A4 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000C5AA 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000C5B0 6700                       		beq.s	loc_C4EC	; if not, branch
0000C5B2 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000C5B8                            
0000C5B8                            loc_C4EC:
0000C5B8 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000C5BE 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000C5C6 317C 855E 0002             		move.w	#$855E,2(a0)
0000C5CC 117C 0000 0001             		move.b	#0,1(a0)
0000C5D2 117C 0000 0018             		move.b	#0,$18(a0)
0000C5D8                            
0000C5D8                            loc_C50C:				; XREF: Obj39_Index
0000C5D8 7210                       		moveq	#$10,d1		; set horizontal speed
0000C5DA 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000C5E0 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000C5E2 6500                       		bcs.s	Obj39_Move
0000C5E4 4441                       		neg.w	d1
0000C5E6                            
0000C5E6                            Obj39_Move:
0000C5E6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C5EA 6000 0000                  		bra.w	DisplaySprite
0000C5EE                            ; ===========================================================================
0000C5EE                            
0000C5EE                            Obj39_SetWait:				; XREF: Obj39_Main
0000C5EE 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000C5F4 5428 0024                  		addq.b	#2,$24(a0)
0000C5F8 4E75                       		rts	
0000C5FA                            ; ===========================================================================
0000C5FA                            
0000C5FA                            Obj39_Wait:				; XREF: Obj39_Index
0000C5FA 1038 F605                  		move.b	($FFFFF605).w,d0
0000C5FE 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000C602 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000C604 0828 0000 001A             		btst	#0,$1A(a0)
0000C60A 6600                       		bne.s	Obj39_Display
0000C60C 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000C610 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000C612 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C616 6000 0000                  		bra.w	DisplaySprite
0000C61A                            ; ===========================================================================
0000C61A                            
0000C61A                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000C61A 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000C61E 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000C620 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000C626 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000C62A 6600                       		bne.s	Obj39_Display	; if yes, branch
0000C62C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000C632 6000                       		bra.s	Obj39_Display
0000C634                            ; ===========================================================================
0000C634                            
0000C634                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000C634 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C63A                            
0000C63A                            Obj39_Display:				; XREF: Obj39_ChgMode
0000C63A 6000 0000                  		bra.w	DisplaySprite
0000C63E                            ; ===========================================================================
0000C63E                            ; ---------------------------------------------------------------------------
0000C63E                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000C63E                            ; ---------------------------------------------------------------------------
0000C63E                            
0000C63E                            Obj3A:					; XREF: Obj_Index
0000C63E 7000                       		moveq	#0,d0
0000C640 1028 0024                  		move.b	$24(a0),d0
0000C644 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000C648 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000C64C                            ; ===========================================================================
0000C64C 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000C64E 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000C650 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C652 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000C654 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C656 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000C658 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C65A 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000C65C 0000                       		dc.w loc_C766-Obj3A_Index
0000C65E                            ; ===========================================================================
0000C65E                            
0000C65E                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000C65E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C662 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000C664 4E75                       		rts	
0000C666                            ; ===========================================================================
0000C666                            
0000C666                            Obj3A_Main:
0000C666 2248                       		movea.l	a0,a1
0000C668 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000C66E 7206                       		moveq	#6,d1
0000C670                            
0000C670                            Obj3A_Loop:
0000C670 12BC 003A                  		move.b	#$3A,0(a1)
0000C674 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000C678 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000C67C 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000C680 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000C684 135A 0024                  		move.b	(a2)+,$24(a1)
0000C688 101A                       		move.b	(a2)+,d0
0000C68A 0C00 0006                  		cmpi.b	#6,d0
0000C68E 6600                       		bne.s	loc_C5CA
0000C690 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000C694                            
0000C694                            loc_C5CA:
0000C694 1340 001A                  		move.b	d0,$1A(a1)
0000C698 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000C6A0 337C 8580 0002             		move.w	#$8580,2(a1)
0000C6A6 137C 0000 0001             		move.b	#0,1(a1)
0000C6AC 43E9 0040                  		lea	$40(a1),a1
0000C6B0 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000C6B4                            
0000C6B4                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000C6B4 7210                       		moveq	#$10,d1		; set horizontal speed
0000C6B6 3028 0030                  		move.w	$30(a0),d0
0000C6BA B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000C6BE 6700                       		beq.s	loc_C61A	; if yes, branch
0000C6C0 6C00                       		bge.s	Obj3A_Move
0000C6C2 4441                       		neg.w	d1
0000C6C4                            
0000C6C4                            Obj3A_Move:
0000C6C4 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C6C8                            
0000C6C8                            loc_C5FE:				; XREF: loc_C61A
0000C6C8 3028 0008                  		move.w	8(a0),d0
0000C6CC 6B00                       		bmi.s	locret_C60E
0000C6CE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C6D2 6400                       		bcc.s	locret_C60E	; if yes, branch
0000C6D4 6000 0000                  		bra.w	DisplaySprite
0000C6D8                            ; ===========================================================================
0000C6D8                            
0000C6D8                            locret_C60E:
0000C6D8 4E75                       		rts	
0000C6DA                            ; ===========================================================================
0000C6DA                            
0000C6DA                            loc_C610:				; XREF: loc_C61A
0000C6DA 117C 000E 0024             		move.b	#$E,$24(a0)
0000C6E0 6000 0000                  		bra.w	Obj3A_ChkPos2
0000C6E4                            ; ===========================================================================
0000C6E4                            
0000C6E4                            loc_C61A:				; XREF: Obj3A_ChkPos
0000C6E4 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000C6EA 67EE                       		beq.s	loc_C610
0000C6EC 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000C6F2 66D4                       		bne.s	loc_C5FE
0000C6F4 5428 0024                  		addq.b	#2,$24(a0)
0000C6F8 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C6FE                            
0000C6FE                            Obj3A_Wait:				; XREF: Obj3A_Index
0000C6FE 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C702 6600                       		bne.s	Obj3A_Display
0000C704 5428 0024                  		addq.b	#2,$24(a0)
0000C708                            
0000C708                            Obj3A_Display:
0000C708 6000 0000                  		bra.w	DisplaySprite
0000C70C                            ; ===========================================================================
0000C70C                            
0000C70C                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000C70C 6100 0000                  		bsr.w	DisplaySprite
0000C710 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000C716 7000                       		moveq	#0,d0
0000C718 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000C71C 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000C71E 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C722 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000C728                            
0000C728                            Obj3A_RingBonus:
0000C728 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000C72C 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000C72E 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C732 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000C738                            
0000C738                            Obj3A_ChkBonus:
0000C738 4A40                       		tst.w	d0		; is there any bonus?
0000C73A 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000C73C 303C 00C5                  		move.w	#$C5,d0
0000C740 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000C746 5428 0024                  		addq.b	#2,$24(a0)
0000C74A 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000C750 6600                       		bne.s	Obj3A_SetDelay
0000C752 5828 0024                  		addq.b	#4,$24(a0)
0000C756                            
0000C756                            Obj3A_SetDelay:
0000C756 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C75C                            
0000C75C                            locret_C692:
0000C75C 4E75                       		rts	
0000C75E                            ; ===========================================================================
0000C75E                            
0000C75E                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000C75E 4EB9 0000 0000             		jsr	AddPoints
0000C764 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C768 0200 0003                  		andi.b	#3,d0
0000C76C 66EE                       		bne.s	locret_C692
0000C76E 303C 00CD                  		move.w	#$CD,d0
0000C772 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000C778                            ; ===========================================================================
0000C778                            
0000C778                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000C778 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C77C 0240 0007                  		andi.w	#7,d0
0000C780 E748                       		lsl.w	#3,d0
0000C782 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000C786 0241 0003                  		andi.w	#3,d1
0000C78A D241                       		add.w	d1,d1
0000C78C D041                       		add.w	d1,d0
0000C78E 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000C792 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000C796 4A40                       		tst.w	d0
0000C798 6600                       		bne.s	Obj3A_ChkSS
0000C79A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000C7A0 6000                       		bra.s	Obj3A_Display2
0000C7A2                            ; ===========================================================================
0000C7A2                            
0000C7A2                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000C7A2 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000C7A6 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000C7AA 6700                       		beq.s	loc_C6EA	; if not, branch
0000C7AC 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000C7B2 6000                       		bra.s	Obj3A_Display2
0000C7B4                            ; ===========================================================================
0000C7B4                            
0000C7B4                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000C7B4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C7BA                            
0000C7BA                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000C7BA 6000 0000                  		bra.w	DisplaySprite
0000C7BE                            ; ===========================================================================
0000C7BE                            ; ---------------------------------------------------------------------------
0000C7BE                            ; Level	order array
0000C7BE                            ; ---------------------------------------------------------------------------
0000C7BE                            LevelOrder:	incbin	misc\lvl_ord.bin
0000C7EE                            		even
0000C7EE                            ; ===========================================================================
0000C7EE                            
0000C7EE                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000C7EE 7220                       		moveq	#$20,d1		; set horizontal speed
0000C7F0 3028 0032                  		move.w	$32(a0),d0
0000C7F4 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000C7F8 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000C7FA 6C00                       		bge.s	Obj3A_Move2
0000C7FC 4441                       		neg.w	d1
0000C7FE                            
0000C7FE                            Obj3A_Move2:
0000C7FE D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C802 3028 0008                  		move.w	8(a0),d0
0000C806 6B00                       		bmi.s	locret_C748
0000C808 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C80C 6400                       		bcc.s	locret_C748	; if yes, branch
0000C80E 6000 0000                  		bra.w	DisplaySprite
0000C812                            ; ===========================================================================
0000C812                            
0000C812                            locret_C748:
0000C812 4E75                       		rts	
0000C814                            ; ===========================================================================
0000C814                            
0000C814                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000C814 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000C81A 6600 0000                  		bne.w	DeleteObject
0000C81E 5428 0024                  		addq.b	#2,$24(a0)
0000C822 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000C826 303C 008D                  		move.w	#$8D,d0
0000C82A 4EF9 0000 1396             		jmp	(PlaySound).l	; play FZ music
0000C830                            ; ===========================================================================
0000C830                            
0000C830                            loc_C766:				; XREF: Obj3A_Index
0000C830 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000C834 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000C83A 6700 0000                  		beq.w	DeleteObject
0000C83E 4E75                       		rts	
0000C840                            ; ===========================================================================
0000C840 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000C846 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000C848 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000C84E 0201                       		dc.b 2,	1
0000C850 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000C856 0206                       		dc.b 2,	6
0000C858 0520 0120 00EC             		dc.w $520, $120, $EC
0000C85E 0202                       		dc.b 2,	2
0000C860 0540 0120 00FC             		dc.w $540, $120, $FC
0000C866 0203                       		dc.b 2,	3
0000C868 0560 0120 010C             		dc.w $560, $120, $10C
0000C86E 0204                       		dc.b 2,	4
0000C870 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000C876 0205                       		dc.b 2,	5
0000C878                            ; ===========================================================================
0000C878                            ; ---------------------------------------------------------------------------
0000C878                            ; Object 7E - special stage results screen
0000C878                            ; ---------------------------------------------------------------------------
0000C878                            
0000C878                            Obj7E:					; XREF: Obj_Index
0000C878 7000                       		moveq	#0,d0
0000C87A 1028 0024                  		move.b	$24(a0),d0
0000C87E 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000C882 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000C886                            ; ===========================================================================
0000C886 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000C888 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000C88A 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C88C 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000C88E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C890 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000C892 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C894 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000C896 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C898 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000C89A 0000                       		dc.w loc_C91A-Obj7E_Index
0000C89C                            ; ===========================================================================
0000C89C                            
0000C89C                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000C89C 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C8A0 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000C8A2 4E75                       		rts	
0000C8A4                            ; ===========================================================================
0000C8A4                            
0000C8A4                            Obj7E_Main:
0000C8A4 2248                       		movea.l	a0,a1
0000C8A6 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000C8AC 7203                       		moveq	#3,d1
0000C8AE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000C8B4 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000C8B6 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000C8B8                            
0000C8B8                            Obj7E_Loop:
0000C8B8 12BC 007E                  		move.b	#$7E,0(a1)
0000C8BC 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000C8C0 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000C8C4 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000C8C8 135A 0024                  		move.b	(a2)+,$24(a1)
0000C8CC 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C8D0 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000C8D8 337C 8580 0002             		move.w	#$8580,2(a1)
0000C8DE 137C 0000 0001             		move.b	#0,1(a1)
0000C8E4 43E9 0040                  		lea	$40(a1),a1
0000C8E8 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000C8EC                            
0000C8EC 7007                       		moveq	#7,d0
0000C8EE 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000C8F2 6700                       		beq.s	loc_C842
0000C8F4 7000                       		moveq	#0,d0
0000C8F6 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000C8FA 6600                       		bne.s	loc_C842	; if not, branch
0000C8FC 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000C8FE 317C 0018 0008             		move.w	#$18,8(a0)
0000C904 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000C90A                            
0000C90A                            loc_C842:
0000C90A 1140 001A                  		move.b	d0,$1A(a0)
0000C90E                            
0000C90E                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000C90E 7210                       		moveq	#$10,d1		; set horizontal speed
0000C910 3028 0030                  		move.w	$30(a0),d0
0000C914 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000C918 6700                       		beq.s	loc_C86C	; if yes, branch
0000C91A 6C00                       		bge.s	Obj7E_Move
0000C91C 4441                       		neg.w	d1
0000C91E                            
0000C91E                            Obj7E_Move:
0000C91E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C922                            
0000C922                            loc_C85A:				; XREF: loc_C86C
0000C922 3028 0008                  		move.w	8(a0),d0
0000C926 6B00                       		bmi.s	locret_C86A
0000C928 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C92C 6400                       		bcc.s	locret_C86A	; if yes, branch
0000C92E 6000 0000                  		bra.w	DisplaySprite
0000C932                            ; ===========================================================================
0000C932                            
0000C932                            locret_C86A:
0000C932 4E75                       		rts	
0000C934                            ; ===========================================================================
0000C934                            
0000C934                            loc_C86C:				; XREF: Obj7E_ChkPos
0000C934 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C93A 66E6                       		bne.s	loc_C85A
0000C93C 5428 0024                  		addq.b	#2,$24(a0)
0000C940 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C946 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000C94C                            
0000C94C                            Obj7E_Wait:				; XREF: Obj7E_Index
0000C94C 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C950 6600                       		bne.s	Obj7E_Display
0000C952 5428 0024                  		addq.b	#2,$24(a0)
0000C956                            
0000C956                            Obj7E_Display:
0000C956 6000 0000                  		bra.w	DisplaySprite
0000C95A                            ; ===========================================================================
0000C95A                            
0000C95A                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000C95A 6100 0000                  		bsr.w	DisplaySprite
0000C95E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000C964 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000C968 6700                       		beq.s	loc_C8C4	; if yes, branch
0000C96A 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000C970 700A                       		moveq	#10,d0		; add 10 to score
0000C972 4EB9 0000 0000             		jsr	AddPoints
0000C978 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C97C 0200 0003                  		andi.b	#3,d0
0000C980 6600                       		bne.s	locret_C8EA
0000C982 303C 00CD                  		move.w	#$CD,d0
0000C986 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000C98C                            ; ===========================================================================
0000C98C                            
0000C98C                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000C98C 303C 00C5                  		move.w	#$C5,d0
0000C990 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000C996 5428 0024                  		addq.b	#2,$24(a0)
0000C99A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C9A0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000C9A6 6500                       		bcs.s	locret_C8EA	; if not, branch
0000C9A8 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000C9AE 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000C9B2                            
0000C9B2                            locret_C8EA:
0000C9B2 4E75                       		rts	
0000C9B4                            ; ===========================================================================
0000C9B4                            
0000C9B4                            Obj7E_Exit:				; XREF: Obj7E_Index
0000C9B4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C9BA 6000 0000                  		bra.w	DisplaySprite
0000C9BE                            ; ===========================================================================
0000C9BE                            
0000C9BE                            Obj7E_Continue:				; XREF: Obj7E_Index
0000C9BE 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000C9C4 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000C9CA 303C 00BF                  		move.w	#$BF,d0
0000C9CE 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play continues music
0000C9D4 5428 0024                  		addq.b	#2,$24(a0)
0000C9D8 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000C9DE 6000 0000                  		bra.w	DisplaySprite
0000C9E2                            ; ===========================================================================
0000C9E2                            
0000C9E2                            loc_C91A:				; XREF: Obj7E_Index
0000C9E2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C9E6 0200 000F                  		andi.b	#$F,d0
0000C9EA 6600                       		bne.s	Obj7E_Display2
0000C9EC 0868 0000 001A             		bchg	#0,$1A(a0)
0000C9F2                            
0000C9F2                            Obj7E_Display2:
0000C9F2 6000 0000                  		bra.w	DisplaySprite
0000C9F6                            ; ===========================================================================
0000C9F6 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000C9FC 0200                       		dc.b 2,	0		; rountine number, frame number
0000C9FE 0320 0120 0118             		dc.w $320, $120, $118
0000CA04 0201                       		dc.b 2,	1
0000CA06 0360 0120 0128             		dc.w $360, $120, $128
0000CA0C 0202                       		dc.b 2,	2
0000CA0E 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CA14 0203                       		dc.b 2,	3
0000CA16 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CA1C 0206                       		dc.b 2,	6
0000CA1E                            ; ===========================================================================
0000CA1E                            ; ---------------------------------------------------------------------------
0000CA1E                            ; Object 7F - chaos emeralds from the special stage results screen
0000CA1E                            ; ---------------------------------------------------------------------------
0000CA1E                            
0000CA1E                            Obj7F:					; XREF: Obj_Index
0000CA1E 7000                       		moveq	#0,d0
0000CA20 1028 0024                  		move.b	$24(a0),d0
0000CA24 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000CA28 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000CA2C                            ; ===========================================================================
0000CA2C 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000CA2E 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000CA30                            
0000CA30                            ; ---------------------------------------------------------------------------
0000CA30                            ; X-axis positions for chaos emeralds
0000CA30                            ; ---------------------------------------------------------------------------
0000CA30 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000CA3C                            ; ===========================================================================
0000CA3C                            
0000CA3C                            Obj7F_Main:				; XREF: Obj7F_Index
0000CA3C 2248                       		movea.l	a0,a1
0000CA3E 45F9 0000 CA30             		lea	(Obj7F_PosData).l,a2
0000CA44 7400                       		moveq	#0,d2
0000CA46 7200                       		moveq	#0,d1
0000CA48 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CA4C 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CA4E 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CA52                            
0000CA52                            Obj7F_Loop:
0000CA52 12BC 007F                  		move.b	#$7F,0(a1)
0000CA56 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CA5A 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CA60 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CA64 1633 2000                  		move.b	(a3,d2.w),d3
0000CA68 1343 001A                  		move.b	d3,$1A(a1)
0000CA6C 1343 001C                  		move.b	d3,$1C(a1)
0000CA70 5202                       		addq.b	#1,d2
0000CA72 5429 0024                  		addq.b	#2,$24(a1)
0000CA76 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CA7E 337C 8541 0002             		move.w	#$8541,2(a1)
0000CA84 137C 0000 0001             		move.b	#0,1(a1)
0000CA8A 43E9 0040                  		lea	$40(a1),a1	; next object
0000CA8E 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CA92                            
0000CA92                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CA92 1028 001A                  		move.b	$1A(a0),d0
0000CA96 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CA9C 0C00 0006                  		cmpi.b	#6,d0
0000CAA0 6600                       		bne.s	Obj7F_Display
0000CAA2 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000CAA8                            
0000CAA8                            Obj7F_Display:
0000CAA8 6000 0000                  		bra.w	DisplaySprite
0000CAAC                            ; ===========================================================================
0000CAAC                            ; ---------------------------------------------------------------------------
0000CAAC                            ; Sprite mappings - zone title cards
0000CAAC                            ; ---------------------------------------------------------------------------
0000CAAC 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000CAAE 0000                       		dc.w byte_CA2C-Map_obj34
0000CAB0 0000                       		dc.w byte_CA5A-Map_obj34
0000CAB2 0000                       		dc.w byte_CA7A-Map_obj34
0000CAB4 0000                       		dc.w byte_CAA8-Map_obj34
0000CAB6 0000                       		dc.w byte_CADC-Map_obj34
0000CAB8 0000                       		dc.w byte_CB10-Map_obj34
0000CABA 0000                       		dc.w byte_CB26-Map_obj34
0000CABC 0000                       		dc.w byte_CB31-Map_obj34
0000CABE 0000                       		dc.w byte_CB3C-Map_obj34
0000CAC0 0000                       		dc.w byte_CB47-Map_obj34
0000CAC2 0000                       		dc.w byte_CB8A-Map_obj34
0000CAC4 09                         byte_C9FE:	dc.b 9 			; GREEN HILL
0000CAC5 F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000CACA F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000CACF F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000CAD4 F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000CAD9 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000CADE F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000CAE3 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000CAE8 F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000CAED F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000CAF2 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000CAF3 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000CAF8 F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000CAFD F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000CB02 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000CB07 F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000CB0C F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000CB11 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000CB16 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000CB1B F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000CB20 06                         byte_CA5A:	dc.b 6			; MARBLE
0000CB21 F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000CB26 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000CB2B F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000CB30 F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000CB35 F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000CB3A F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000CB3F 00                         		dc.b 0
0000CB40 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000CB41 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000CB46 F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000CB4B F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000CB50 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000CB55 F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000CB5A F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000CB5F F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000CB64 F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000CB69 F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000CB6E 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000CB6F F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000CB74 F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000CB79 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000CB7E F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000CB83 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000CB88 F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000CB8D F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000CB92 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000CB97 F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000CB9C F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000CBA1 00                         		dc.b 0
0000CBA2 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000CBA3 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000CBA8 F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000CBAD F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000CBB2 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000CBB7 F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000CBBC F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000CBC1 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000CBC6 F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000CBCB F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000CBD0 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000CBD5 00                         		dc.b 0
0000CBD6 04                         byte_CB10:	dc.b 4			; ZONE
0000CBD7 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000CBDC F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000CBE1 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000CBE6 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CBEB 00                         		dc.b 0
0000CBEC 02                         byte_CB26:	dc.b 2			; ACT 1
0000CBED 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CBF2 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000CBF7 02                         byte_CB31:	dc.b 2			; ACT 2
0000CBF8 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CBFD F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000CC02 02                         byte_CB3C:	dc.b 2			; ACT 3
0000CC03 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CC08 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000CC0D 0D                         byte_CB47:	dc.b $D			; Oval
0000CC0E E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000CC13 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000CC18 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000CC1D F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000CC22 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000CC27 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000CC2C 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000CC31 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000CC36 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000CC3B F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000CC40 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000CC45 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000CC4A 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000CC4F 00                         		dc.b 0
0000CC50 05                         byte_CB8A:	dc.b 5			; FINAL
0000CC51 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000CC56 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000CC5B F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000CC60 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000CC65 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000CC6A                            		even
0000CC6A                            ; ---------------------------------------------------------------------------
0000CC6A                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CC6A                            ; ---------------------------------------------------------------------------
0000CC6A                            Map_obj39:
0000CC6A                            	include "_maps\obj39.asm"
0000CC6A                            ; ---------------------------------------------------------------------------
0000CC6A                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CC6A                            ; ---------------------------------------------------------------------------
0000CC6A 0000                       		dc.w byte_CBAC-Map_obj39
0000CC6C 0000                       		dc.w byte_CBB7-Map_obj39
0000CC6E 0000                       		dc.w byte_CBC2-Map_obj39
0000CC70 0000                       		dc.w byte_CBCD-Map_obj39
0000CC72 02                         byte_CBAC:	dc.b 2
0000CC73 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000CC78 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000CC7D 02                         byte_CBB7:	dc.b 2
0000CC7E F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000CC83 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000CC88 02                         byte_CBC2:	dc.b 2
0000CC89 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000CC8E F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000CC93 02                         byte_CBCD:	dc.b 2
0000CC94 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000CC99 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000CC9E                            		even
0000CC9E                            		even
0000CC9E                            
0000CC9E                            ; ---------------------------------------------------------------------------
0000CC9E                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000CC9E                            ; ---------------------------------------------------------------------------
0000CC9E 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000CCA0 0000                       		dc.w byte_CC13-Map_obj3A
0000CCA2 0000                       		dc.w byte_CC32-Map_obj3A
0000CCA4 0000                       		dc.w byte_CC51-Map_obj3A
0000CCA6 0000                       		dc.w byte_CC75-Map_obj3A
0000CCA8 FF6F                       		dc.w byte_CB47-Map_obj3A
0000CCAA FF4E                       		dc.w byte_CB26-Map_obj3A
0000CCAC FF59                       		dc.w byte_CB31-Map_obj3A
0000CCAE FF64                       		dc.w byte_CB3C-Map_obj3A
0000CCB0 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000CCB1 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000CCB6 F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000CCBB F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000CCC0 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000CCC5 F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000CCCA F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000CCCF F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000CCD4 F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000CCD9 06                         byte_CC13:	dc.b 6			; PASSED
0000CCDA F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000CCDF F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000CCE4 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000CCE9 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000CCEE F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CCF3 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000CCF8 06                         byte_CC32:	dc.b 6			; SCORE
0000CCF9 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000CCFE F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000CD03 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000CD08 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000CD0D F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000CD12 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000CD17 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000CD18 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000CD1D F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CD22 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CD27 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CD2C FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CD31 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000CD36 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CD3B 07                         byte_CC75:	dc.b 7			; RING BONUS
0000CD3C F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000CD41 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CD46 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CD4B F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CD50 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CD55 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000CD5A F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CD60 00                         		even
0000CD60                            ; ---------------------------------------------------------------------------
0000CD60                            ; Sprite mappings - special stage results screen
0000CD60                            ; ---------------------------------------------------------------------------
0000CD60 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000CD62 0000                       		dc.w byte_CCEE-Map_obj7E
0000CD64 0000                       		dc.w byte_CD0D-Map_obj7E
0000CD66 FEAD                       		dc.w byte_CB47-Map_obj7E
0000CD68 0000                       		dc.w byte_CD31-Map_obj7E
0000CD6A 0000                       		dc.w byte_CD46-Map_obj7E
0000CD6C 0000                       		dc.w byte_CD5B-Map_obj7E
0000CD6E 0000                       		dc.w byte_CD6B-Map_obj7E
0000CD70 0000                       		dc.w byte_CDA8-Map_obj7E
0000CD72 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000CD73 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000CD78 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000CD7D F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000CD82 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000CD87 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000CD8C F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000CD91 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000CD96 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CD9B F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000CDA0 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000CDA5 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000CDAA F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000CDAF F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000CDB4 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000CDB5 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000CDBA F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000CDBF F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000CDC4 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000CDC9 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000CDCE FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000CDD3 07                         byte_CD0D:	dc.b 7
0000CDD4 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000CDD9 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CDDE F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CDE3 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CDE8 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CDED F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000CDF2 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CDF7 04                         byte_CD31:	dc.b 4
0000CDF8 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CDFD F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CE02 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CE07 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000CE0C 04                         byte_CD46:	dc.b 4
0000CE0D F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CE12 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CE17 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CE1C F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000CE21 03                         byte_CD5B:	dc.b 3
0000CE22 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CE27 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CE2C F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CE31 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000CE32 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000CE37 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000CE3C F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000CE41 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000CE46 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000CE4B F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000CE50 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000CE55 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000CE5A F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000CE5F F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000CE64 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000CE69 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000CE6E 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000CE6F F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000CE74 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000CE79 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000CE7E F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000CE83 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000CE88 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000CE8D F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000CE92 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000CE97 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000CE9C F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000CEA1 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000CEA6 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000CEAB F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000CEB0 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000CEB5 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000CEBA                            		even
0000CEBA                            ; ---------------------------------------------------------------------------
0000CEBA                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000CEBA                            ; ---------------------------------------------------------------------------
0000CEBA                            Map_obj7F:
0000CEBA                            	include "_maps\obj7F.asm"
0000CEBA                            ; ---------------------------------------------------------------------------
0000CEBA                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000CEBA                            ; ---------------------------------------------------------------------------
0000CEBA 0000                       		dc.w byte_CE02-Map_obj7F
0000CEBC 0000                       		dc.w byte_CE08-Map_obj7F
0000CEBE 0000                       		dc.w byte_CE0E-Map_obj7F
0000CEC0 0000                       		dc.w byte_CE14-Map_obj7F
0000CEC2 0000                       		dc.w byte_CE1A-Map_obj7F
0000CEC4 0000                       		dc.w byte_CE20-Map_obj7F
0000CEC6 0000                       		dc.w byte_CE26-Map_obj7F
0000CEC8 01                         byte_CE02:	dc.b 1
0000CEC9 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000CECE 01                         byte_CE08:	dc.b 1
0000CECF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000CED4 01                         byte_CE0E:	dc.b 1
0000CED5 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000CEDA 01                         byte_CE14:	dc.b 1
0000CEDB F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000CEE0 01                         byte_CE1A:	dc.b 1
0000CEE1 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000CEE6 01                         byte_CE20:	dc.b 1
0000CEE7 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000CEEC 00                         byte_CE26:	dc.b 0			; Blank frame
0000CEEE 00                         		even
0000CEEE 00                         		even
0000CEEE                            
0000CEEE                            ; ===========================================================================
0000CEEE                            ; ---------------------------------------------------------------------------
0000CEEE                            ; Object 36 - spikes
0000CEEE                            ; ---------------------------------------------------------------------------
0000CEEE                            
0000CEEE                            Obj36:					; XREF: Obj_Index
0000CEEE 7000                       		moveq	#0,d0
0000CEF0 1028 0024                  		move.b	$24(a0),d0
0000CEF4 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000CEF8 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000CEFC                            ; ===========================================================================
0000CEFC 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000CEFE 0000                       		dc.w Obj36_Solid-Obj36_Index
0000CF00                            
0000CF00 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000CF02 0110                       		dc.b 1,	$10
0000CF04 0204                       		dc.b 2,	4
0000CF06 031C                       		dc.b 3,	$1C
0000CF08 0440                       		dc.b 4,	$40
0000CF0A 0510                       		dc.b 5,	$10
0000CF0C                            ; ===========================================================================
0000CF0C                            
0000CF0C                            Obj36_Main:				; XREF: Obj36_Index
0000CF0C 5428 0024                  		addq.b	#2,$24(a0)
0000CF10 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000CF18 317C 051B 0002             		move.w	#$51B,2(a0)
0000CF1E 0028 0004 0001             		ori.b	#4,1(a0)
0000CF24 117C 0004 0018             		move.b	#4,$18(a0)
0000CF2A 1028 0028                  		move.b	$28(a0),d0
0000CF2E 0228 000F 0028             		andi.b	#$F,$28(a0)
0000CF34 0240 00F0                  		andi.w	#$F0,d0
0000CF38 43F9 0000 CF00             		lea	(Obj36_Var).l,a1
0000CF3E E648                       		lsr.w	#3,d0
0000CF40 D2C0                       		adda.w	d0,a1
0000CF42 1159 001A                  		move.b	(a1)+,$1A(a0)
0000CF46 1159 0019                  		move.b	(a1)+,$19(a0)
0000CF4A 3168 0008 0030             		move.w	8(a0),$30(a0)
0000CF50 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000CF56                            
0000CF56                            Obj36_Solid:				; XREF: Obj36_Index
0000CF56 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000CF5A 343C 0004                  		move.w	#4,d2
0000CF5E 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000CF64 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000CF66 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000CF6C 6600                       		bne.s	Obj36_Upright	; if not, branch
0000CF6E 343C 0014                  		move.w	#$14,d2
0000CF72                            
0000CF72                            ; Spikes types $1x and $5x face	sideways
0000CF72                            
0000CF72                            Obj36_SideWays:				; XREF: Obj36_Solid
0000CF72 323C 001B                  		move.w	#$1B,d1
0000CF76 3602                       		move.w	d2,d3
0000CF78 5243                       		addq.w	#1,d3
0000CF7A 3828 0008                  		move.w	8(a0),d4
0000CF7E 6100 0000                  		bsr.w	SolidObject
0000CF82 0828 0003 0022             		btst	#3,$22(a0)
0000CF88 6600                       		bne.s	Obj36_Display
0000CF8A 0C44 0001                  		cmpi.w	#1,d4
0000CF8E 6700                       		beq.s	Obj36_Hurt
0000CF90 6000                       		bra.s	Obj36_Display
0000CF92                            ; ===========================================================================
0000CF92                            
0000CF92                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000CF92                            
0000CF92                            Obj36_Upright:				; XREF: Obj36_Solid
0000CF92 7200                       		moveq	#0,d1
0000CF94 1228 0019                  		move.b	$19(a0),d1
0000CF98 0641 000B                  		addi.w	#$B,d1
0000CF9C 343C 0010                  		move.w	#$10,d2
0000CFA0 363C 0011                  		move.w	#$11,d3
0000CFA4 3828 0008                  		move.w	8(a0),d4
0000CFA8 6100 0000                  		bsr.w	SolidObject
0000CFAC 0828 0003 0022             		btst	#3,$22(a0)
0000CFB2 6600                       		bne.s	Obj36_Hurt
0000CFB4 4A44                       		tst.w	d4
0000CFB6 6A00                       		bpl.s	Obj36_Display
0000CFB8                            
0000CFB8                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000CFB8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000CFBC 6600                       		bne.s	Obj36_Display	; if yes, branch
0000CFBE 2F08                       		move.l	a0,-(sp)
0000CFC0 2448                       		movea.l	a0,a2
0000CFC2 41F8 D000                  		lea	($FFFFD000).w,a0
0000CFC6 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CFCC 6400                       		bcc.s	loc_CF20
0000CFCE 2628 000C                  		move.l	$C(a0),d3
0000CFD2 3028 0012                  		move.w	$12(a0),d0
0000CFD6 48C0                       		ext.l	d0
0000CFD8 E180                       		asl.l	#8,d0
0000CFDA 9680                       		sub.l	d0,d3
0000CFDC 2143 000C                  		move.l	d3,$C(a0)
0000CFE0 4EB9 0000 0000             		jsr	HurtSonic
0000CFE6                            
0000CFE6                            loc_CF20:
0000CFE6 205F                       		movea.l	(sp)+,a0
0000CFE8                            
0000CFE8                            Obj36_Display:
0000CFE8 6100 0000                  		bsr.w	DisplaySprite
0000CFEC 3028 0030                  		move.w	$30(a0),d0
0000CFF0 0240 FF80                  		andi.w	#$FF80,d0
0000CFF4 3238 F700                  		move.w	($FFFFF700).w,d1
0000CFF8 0441 0080                  		subi.w	#$80,d1
0000CFFC 0241 FF80                  		andi.w	#$FF80,d1
0000D000 9041                       		sub.w	d1,d0
0000D002 0C40 0280                  		cmpi.w	#$280,d0
0000D006 6200 0000                  		bhi.w	DeleteObject
0000D00A 4E75                       		rts	
0000D00C                            ; ===========================================================================
0000D00C                            
0000D00C                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D00C 7000                       		moveq	#0,d0
0000D00E 1028 0028                  		move.b	$28(a0),d0
0000D012 D040                       		add.w	d0,d0
0000D014 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D018 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D01C                            ; ===========================================================================
0000D01C 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D01E 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D020 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D022                            ; ===========================================================================
0000D022                            
0000D022                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D022 4E75                       		rts			; don't move the object
0000D024                            ; ===========================================================================
0000D024                            
0000D024                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D024 6100 0000                  		bsr.w	Obj36_Wait
0000D028 7000                       		moveq	#0,d0
0000D02A 1028 0034                  		move.b	$34(a0),d0
0000D02E D068 0032                  		add.w	$32(a0),d0
0000D032 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D036 4E75                       		rts	
0000D038                            ; ===========================================================================
0000D038                            
0000D038                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D038 6100 0000                  		bsr.w	Obj36_Wait
0000D03C 7000                       		moveq	#0,d0
0000D03E 1028 0034                  		move.b	$34(a0),d0
0000D042 D068 0030                  		add.w	$30(a0),d0
0000D046 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D04A 4E75                       		rts	
0000D04C                            ; ===========================================================================
0000D04C                            
0000D04C                            Obj36_Wait:
0000D04C 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D050 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D052 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D056 6600                       		bne.s	locret_CFE6
0000D058 4A28 0001                  		tst.b	1(a0)
0000D05C 6A00                       		bpl.s	locret_CFE6
0000D05E 303C 00B6                  		move.w	#$B6,d0
0000D062 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D068 6000                       		bra.s	locret_CFE6
0000D06A                            ; ===========================================================================
0000D06A                            
0000D06A                            loc_CFA4:
0000D06A 4A68 0036                  		tst.w	$36(a0)
0000D06E 6700                       		beq.s	loc_CFC6
0000D070 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D076 6400                       		bcc.s	locret_CFE6
0000D078 317C 0000 0034             		move.w	#0,$34(a0)
0000D07E 317C 0000 0036             		move.w	#0,$36(a0)
0000D084 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D08A 6000                       		bra.s	locret_CFE6
0000D08C                            ; ===========================================================================
0000D08C                            
0000D08C                            loc_CFC6:
0000D08C 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D092 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D098 6500                       		bcs.s	locret_CFE6
0000D09A 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D0A0 317C 0001 0036             		move.w	#1,$36(a0)
0000D0A6 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D0AC                            
0000D0AC                            locret_CFE6:
0000D0AC 4E75                       		rts	
0000D0AE                            ; ===========================================================================
0000D0AE                            ; ---------------------------------------------------------------------------
0000D0AE                            ; Sprite mappings - spikes
0000D0AE                            ; ---------------------------------------------------------------------------
0000D0AE                            Map_obj36:
0000D0AE                            	include "_maps\obj36.asm"
0000D0AE                            ; ---------------------------------------------------------------------------
0000D0AE                            ; Sprite mappings - spikes
0000D0AE                            ; ---------------------------------------------------------------------------
0000D0AE 0000                       		dc.w byte_CFF4-Map_obj36
0000D0B0 0000                       		dc.w byte_D004-Map_obj36
0000D0B2 0000                       		dc.w byte_D014-Map_obj36
0000D0B4 0000                       		dc.w byte_D01A-Map_obj36
0000D0B6 0000                       		dc.w byte_D02A-Map_obj36
0000D0B8 0000                       		dc.w byte_D049-Map_obj36
0000D0BA 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D0BB F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D0C0 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D0C5 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D0CA 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D0CB EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D0D0 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D0D5 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D0DA 01                         byte_D014:	dc.b 1			; 1 spike
0000D0DB F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D0E0 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D0E1 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D0E6 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D0EB F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D0F0 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D0F1 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D0F6 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D0FB F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D100 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D105 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D10A F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D10F 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D110 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D116 00                         		even
0000D116 00                         		even
0000D116                            
0000D116                            ; ===========================================================================
0000D116                            ; ---------------------------------------------------------------------------
0000D116                            ; Object 3B - purple rock (GHZ)
0000D116                            ; ---------------------------------------------------------------------------
0000D116                            
0000D116                            Obj3B:					; XREF: Obj_Index
0000D116 7000                       		moveq	#0,d0
0000D118 1028 0024                  		move.b	$24(a0),d0
0000D11C 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D120 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D124                            ; ===========================================================================
0000D124 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D126 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D128                            ; ===========================================================================
0000D128                            
0000D128                            Obj3B_Main:				; XREF: Obj3B_Index
0000D128 5428 0024                  		addq.b	#2,$24(a0)
0000D12C 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D134 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D13A 117C 0004 0001             		move.b	#4,1(a0)
0000D140 117C 0013 0019             		move.b	#$13,$19(a0)
0000D146 117C 0004 0018             		move.b	#4,$18(a0)
0000D14C                            
0000D14C                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D14C 323C 001B                  		move.w	#$1B,d1
0000D150 343C 0010                  		move.w	#$10,d2
0000D154 363C 0010                  		move.w	#$10,d3
0000D158 3828 0008                  		move.w	8(a0),d4
0000D15C 6100 0000                  		bsr.w	SolidObject
0000D160 6100 0000                  		bsr.w	DisplaySprite
0000D164 3028 0008                  		move.w	8(a0),d0
0000D168 0240 FF80                  		andi.w	#$FF80,d0
0000D16C 3238 F700                  		move.w	($FFFFF700).w,d1
0000D170 0441 0080                  		subi.w	#$80,d1
0000D174 0241 FF80                  		andi.w	#$FF80,d1
0000D178 9041                       		sub.w	d1,d0
0000D17A 0C40 0280                  		cmpi.w	#$280,d0
0000D17E 6200 0000                  		bhi.w	DeleteObject
0000D182 4E75                       		rts	
0000D184                            ; ===========================================================================
0000D184                            ; ---------------------------------------------------------------------------
0000D184                            ; Object 49 - waterfall	sound effect (GHZ)
0000D184                            ; ---------------------------------------------------------------------------
0000D184                            
0000D184                            Obj49:					; XREF: Obj_Index
0000D184 7000                       		moveq	#0,d0
0000D186 1028 0024                  		move.b	$24(a0),d0
0000D18A 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D18E 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D192                            ; ===========================================================================
0000D192 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D194 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D196                            ; ===========================================================================
0000D196                            
0000D196                            Obj49_Main:				; XREF: Obj49_Index
0000D196 5428 0024                  		addq.b	#2,$24(a0)
0000D19A 117C 0004 0001             		move.b	#4,1(a0)
0000D1A0                            
0000D1A0                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D1A0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D1A4 0200 003F                  		andi.b	#$3F,d0
0000D1A8 6600                       		bne.s	Obj49_ChkDel
0000D1AA 303C 00D0                  		move.w	#$D0,d0
0000D1AE 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D1B4                            
0000D1B4                            Obj49_ChkDel:
0000D1B4 3028 0008                  		move.w	8(a0),d0
0000D1B8 0240 FF80                  		andi.w	#$FF80,d0
0000D1BC 3238 F700                  		move.w	($FFFFF700).w,d1
0000D1C0 0441 0080                  		subi.w	#$80,d1
0000D1C4 0241 FF80                  		andi.w	#$FF80,d1
0000D1C8 9041                       		sub.w	d1,d0
0000D1CA 0C40 0280                  		cmpi.w	#$280,d0
0000D1CE 6200 0000                  		bhi.w	DeleteObject
0000D1D2 4E75                       		rts	
0000D1D4                            ; ===========================================================================
0000D1D4                            ; ---------------------------------------------------------------------------
0000D1D4                            ; Sprite mappings - purple rock	(GHZ)
0000D1D4                            ; ---------------------------------------------------------------------------
0000D1D4                            Map_obj3B:
0000D1D4                            	include "_maps\obj3B.asm"
0000D1D4                            ; ---------------------------------------------------------------------------
0000D1D4                            ; Sprite mappings - purple rock	(GHZ)
0000D1D4                            ; ---------------------------------------------------------------------------
0000D1D4 0000                       		dc.w byte_D110-Map_obj3B
0000D1D6 02                         byte_D110:	dc.b 2
0000D1D7 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D1DC F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D1E2 00                         		even
0000D1E2 00                         		even
0000D1E2                            
0000D1E2                            ; ===========================================================================
0000D1E2                            ; ---------------------------------------------------------------------------
0000D1E2                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D1E2                            ; ---------------------------------------------------------------------------
0000D1E2                            
0000D1E2                            Obj3C:					; XREF: Obj_Index
0000D1E2 7000                       		moveq	#0,d0
0000D1E4 1028 0024                  		move.b	$24(a0),d0
0000D1E8 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D1EC 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D1F0 6000 0000                  		bra.w	MarkObjGone
0000D1F4                            ; ===========================================================================
0000D1F4 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D1F6 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D1F8 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D1FA                            ; ===========================================================================
0000D1FA                            
0000D1FA                            Obj3C_Main:				; XREF: Obj3C_Index
0000D1FA 5428 0024                  		addq.b	#2,$24(a0)
0000D1FE 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D206 317C 450F 0002             		move.w	#$450F,2(a0)
0000D20C 117C 0004 0001             		move.b	#4,1(a0)
0000D212 117C 0010 0019             		move.b	#$10,$19(a0)
0000D218 117C 0004 0018             		move.b	#4,$18(a0)
0000D21E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D224                            
0000D224                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D224 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D22A 323C 001B                  		move.w	#$1B,d1
0000D22E 343C 0020                  		move.w	#$20,d2
0000D232 363C 0020                  		move.w	#$20,d3
0000D236 3828 0008                  		move.w	8(a0),d4
0000D23A 6100 0000                  		bsr.w	SolidObject
0000D23E 0828 0005 0022             		btst	#5,$22(a0)
0000D244 6600                       		bne.s	Obj3C_ChkRoll
0000D246                            
0000D246                            locret_D180:
0000D246 4E75                       		rts	
0000D248                            ; ===========================================================================
0000D248                            
0000D248                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D248 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D24E 66F6                       		bne.s	locret_D180	; if not, branch
0000D250 3028 0030                  		move.w	$30(a0),d0
0000D254 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D256 4440                       		neg.w	d0
0000D258                            
0000D258                            Obj3C_ChkSpeed:
0000D258 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D25C 65E8                       		bcs.s	locret_D180	; if not, branch
0000D25E 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D264 5869 0008                  		addq.w	#4,8(a1)
0000D268 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D26E 3028 0008                  		move.w	8(a0),d0
0000D272 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D276 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D278 5169 0008                  		subq.w	#8,8(a1)
0000D27C 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D282                            
0000D282                            Obj3C_Smash:
0000D282 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D288 08A8 0005 0022             		bclr	#5,$22(a0)
0000D28E 08A9 0005 0022             		bclr	#5,$22(a1)
0000D294 7207                       		moveq	#7,d1		; load 8 fragments
0000D296 343C 0070                  		move.w	#$70,d2
0000D29A 6100                       		bsr.s	SmashObject
0000D29C                            
0000D29C                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D29C 6100 0000                  		bsr.w	SpeedToPos
0000D2A0 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D2A6 6100 0000                  		bsr.w	DisplaySprite
0000D2AA 4A28 0001                  		tst.b	1(a0)
0000D2AE 6A00 0000                  		bpl.w	DeleteObject
0000D2B2 4E75                       		rts	
0000D2B4                            
0000D2B4                            ; ---------------------------------------------------------------------------
0000D2B4                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D2B4                            ; ---------------------------------------------------------------------------
0000D2B4                            
0000D2B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D2B4                            
0000D2B4                            
0000D2B4                            SmashObject:				; XREF: Obj3C_Smash
0000D2B4 7000                       		moveq	#0,d0
0000D2B6 1028 001A                  		move.b	$1A(a0),d0
0000D2BA D040                       		add.w	d0,d0
0000D2BC 2668 0004                  		movea.l	4(a0),a3
0000D2C0 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D2C4 524B                       		addq.w	#1,a3
0000D2C6 08E8 0005 0001             		bset	#5,1(a0)
0000D2CC 1810                       		move.b	0(a0),d4
0000D2CE 1A28 0001                  		move.b	1(a0),d5
0000D2D2 2248                       		movea.l	a0,a1
0000D2D4 6000                       		bra.s	Smash_LoadFrag
0000D2D6                            ; ===========================================================================
0000D2D6                            
0000D2D6                            Smash_Loop:
0000D2D6 6100 0000                  		bsr.w	SingleObjLoad
0000D2DA 6600                       		bne.s	Smash_PlaySnd
0000D2DC 5A4B                       		addq.w	#5,a3
0000D2DE                            
0000D2DE                            Smash_LoadFrag:				; XREF: SmashObject
0000D2DE 137C 0004 0024             		move.b	#4,$24(a1)
0000D2E4 1284                       		move.b	d4,0(a1)
0000D2E6 234B 0004                  		move.l	a3,4(a1)
0000D2EA 1345 0001                  		move.b	d5,1(a1)
0000D2EE 3368 0008 0008             		move.w	8(a0),8(a1)
0000D2F4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D2FA 3368 0002 0002             		move.w	2(a0),2(a1)
0000D300 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D306 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D30C 335C 0010                  		move.w	(a4)+,$10(a1)
0000D310 335C 0012                  		move.w	(a4)+,$12(a1)
0000D314 B3C8                       		cmpa.l	a0,a1
0000D316 6400                       		bcc.s	loc_D268
0000D318 2F08                       		move.l	a0,-(sp)
0000D31A 2049                       		movea.l	a1,a0
0000D31C 6100 0000                  		bsr.w	SpeedToPos
0000D320 D568 0012                  		add.w	d2,$12(a0)
0000D324 205F                       		movea.l	(sp)+,a0
0000D326 6100 0000                  		bsr.w	DisplaySprite2
0000D32A                            
0000D32A                            loc_D268:
0000D32A 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D32E                            
0000D32E                            Smash_PlaySnd:
0000D32E 303C 00CB                  		move.w	#$CB,d0
0000D332 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D338                            ; End of function SmashObject
0000D338                            
0000D338                            ; ===========================================================================
0000D338                            ; Smashed block	fragment speeds
0000D338                            ;
0000D338 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D33C 0600 FF00                  		dc.w $600, $FF00
0000D340 0600 0100                  		dc.w $600, $100
0000D344 0400 0500                  		dc.w $400, $500
0000D348 0600 FA00                  		dc.w $600, $FA00
0000D34C 0800 FE00                  		dc.w $800, $FE00
0000D350 0800 0200                  		dc.w $800, $200
0000D354 0600 0600                  		dc.w $600, $600
0000D358                            
0000D358 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D35C F800 FE00                  		dc.w $F800, $FE00
0000D360 F800 0200                  		dc.w $F800, $200
0000D364 FA00 0600                  		dc.w $FA00, $600
0000D368 FC00 FB00                  		dc.w $FC00, $FB00
0000D36C FA00 FF00                  		dc.w $FA00, $FF00
0000D370 FA00 0100                  		dc.w $FA00, $100
0000D374 FC00 0500                  		dc.w $FC00, $500
0000D378                            ; ---------------------------------------------------------------------------
0000D378                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D378                            ; ---------------------------------------------------------------------------
0000D378                            Map_obj3C:
0000D378                            	include "_maps\obj3C.asm"
0000D378                            ; ---------------------------------------------------------------------------
0000D378                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D378                            ; ---------------------------------------------------------------------------
0000D378 0000                       		dc.w byte_D2BC-Map_obj3C
0000D37A 0000                       		dc.w byte_D2E5-Map_obj3C
0000D37C 0000                       		dc.w byte_D30E-Map_obj3C
0000D37E 08                         byte_D2BC:	dc.b 8
0000D37F E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D384 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D389 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D38E 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D393 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D398 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D39D 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D3A2 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D3A7 08                         byte_D2E5:	dc.b 8
0000D3A8 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D3AD F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D3B2 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D3B7 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D3BC E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D3C1 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D3C6 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D3CB 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D3D0 08                         byte_D30E:	dc.b 8
0000D3D1 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D3D6 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D3DB 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D3E0 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D3E5 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D3EA F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D3EF 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D3F4 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D3FA 00                         		even
0000D3FA 00                         		even
0000D3FA                            
0000D3FA                            ; ---------------------------------------------------------------------------
0000D3FA                            ; Object code loading subroutine
0000D3FA                            ; ---------------------------------------------------------------------------
0000D3FA                            
0000D3FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D3FA                            
0000D3FA                            
0000D3FA                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D3FA 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D3FE 7E7F                       		moveq	#$7F,d7
0000D400 7000                       		moveq	#0,d0
0000D402 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D408 6400                       		bcc.s	loc_D362
0000D40A                            
0000D40A                            loc_D348:
0000D40A 1010                       		move.b	(a0),d0		; load object number from RAM
0000D40C 6700                       		beq.s	loc_D358
0000D40E D040                       		add.w	d0,d0
0000D410 D040                       		add.w	d0,d0
0000D412 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D416 4E91                       		jsr	(a1)		; run the object's code
0000D418 7000                       		moveq	#0,d0
0000D41A                            
0000D41A                            loc_D358:
0000D41A 41E8 0040                  		lea	$40(a0),a0	; next object
0000D41E 51CF FFEA                  		dbf	d7,loc_D348
0000D422 4E75                       		rts	
0000D424                            ; ===========================================================================
0000D424                            
0000D424                            loc_D362:
0000D424 7E1F                       		moveq	#$1F,d7
0000D426 61E2                       		bsr.s	loc_D348
0000D428 7E5F                       		moveq	#$5F,d7
0000D42A                            
0000D42A                            loc_D368:
0000D42A 7000                       		moveq	#0,d0
0000D42C 1010                       		move.b	(a0),d0
0000D42E 6700                       		beq.s	loc_D378
0000D430 4A28 0001                  		tst.b	1(a0)
0000D434 6A00                       		bpl.s	loc_D378
0000D436 6100 0000                  		bsr.w	DisplaySprite
0000D43A                            
0000D43A                            loc_D378:
0000D43A 41E8 0040                  		lea	$40(a0),a0
0000D43E                            
0000D43E                            loc_D37C:
0000D43E 51CF FFEA                  		dbf	d7,loc_D368
0000D442 4E75                       		rts	
0000D444                            ; End of function ObjectsLoad
0000D444                            
0000D444                            ; ===========================================================================
0000D444                            ; ---------------------------------------------------------------------------
0000D444                            ; Object pointers
0000D444                            ; ---------------------------------------------------------------------------
0000D444                            Obj_Index:
0000D444                            	include "_inc\Object pointers.asm"
0000D444                            ; ---------------------------------------------------------------------------
0000D444                            ; Object pointers
0000D444                            ; ---------------------------------------------------------------------------
0000D444 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D454 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D464 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D474 0000 0000 0000 A6F6 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D484 0000 7430 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D494 0000 7A56 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D4A4 0000 82A4 0000 830C 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D4B4 0000 8956 0000 8C44 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D4C4 0000 0000 0000 98C8 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000D4D4 0000 9C0A 0000 A1F6 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000D4E4 0000 9500 0000 8A2C 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000D4F4 0000 AD7E 0000 A3DC 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000D504 0000 B750 0000 BDFE 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000D514 0000 B2B4 0000 CEEE 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000D524 0000 C584 0000 C63E 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000D534 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000D544 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000D554 0000 BA6C 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000D564 0000 D184 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000D574 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000D584 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000D594 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000D5A4 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000D5B4 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000D5C4 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000D5D4 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000D5E4 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000D5F4 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000D604 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000D614 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000D624 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000D634 0000 0000 0000 C878 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000D644 0000 4F50 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000D654 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000D664 0000 560A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D664 0000 560A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D674                            
0000D674                            ; ---------------------------------------------------------------------------
0000D674                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000D674                            ; ---------------------------------------------------------------------------
0000D674                            
0000D674                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D674                            
0000D674                            
0000D674                            ObjectFall:
0000D674 2428 0008                  		move.l	8(a0),d2
0000D678 2628 000C                  		move.l	$C(a0),d3
0000D67C 3028 0010                  		move.w	$10(a0),d0
0000D680 48C0                       		ext.l	d0
0000D682 E180                       		asl.l	#8,d0
0000D684 D480                       		add.l	d0,d2
0000D686 3028 0012                  		move.w	$12(a0),d0
0000D68A 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000D690 48C0                       		ext.l	d0
0000D692 E180                       		asl.l	#8,d0
0000D694 D680                       		add.l	d0,d3
0000D696 2142 0008                  		move.l	d2,8(a0)
0000D69A 2143 000C                  		move.l	d3,$C(a0)
0000D69E 4E75                       		rts	
0000D6A0                            ; End of function ObjectFall
0000D6A0                            
0000D6A0                            ; ---------------------------------------------------------------------------
0000D6A0                            ; Subroutine translating object	speed to update	object position
0000D6A0                            ; ---------------------------------------------------------------------------
0000D6A0                            
0000D6A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D6A0                            
0000D6A0                            
0000D6A0                            SpeedToPos:
0000D6A0 2428 0008                  		move.l	8(a0),d2
0000D6A4 2628 000C                  		move.l	$C(a0),d3
0000D6A8 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000D6AC 48C0                       		ext.l	d0
0000D6AE E180                       		asl.l	#8,d0		; multiply speed by $100
0000D6B0 D480                       		add.l	d0,d2		; add to x-axis	position
0000D6B2 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000D6B6 48C0                       		ext.l	d0
0000D6B8 E180                       		asl.l	#8,d0		; multiply by $100
0000D6BA D680                       		add.l	d0,d3		; add to y-axis	position
0000D6BC 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000D6C0 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000D6C4 4E75                       		rts	
0000D6C6                            ; End of function SpeedToPos
0000D6C6                            
0000D6C6                            ; ---------------------------------------------------------------------------
0000D6C6                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000D6C6                            ; ---------------------------------------------------------------------------
0000D6C6                            
0000D6C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D6C6                            
0000D6C6                            
0000D6C6                            DisplaySprite:
0000D6C6 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000D6CA 3028 0018                  		move.w	$18(a0),d0
0000D6CE E248                       		lsr.w	#1,d0
0000D6D0 0240 0380                  		andi.w	#$380,d0
0000D6D4 D2C0                       		adda.w	d0,a1
0000D6D6 0C51 007E                  		cmpi.w	#$7E,(a1)
0000D6DA 6400                       		bcc.s	locret_D620
0000D6DC 5451                       		addq.w	#2,(a1)
0000D6DE D2D1                       		adda.w	(a1),a1
0000D6E0 3288                       		move.w	a0,(a1)
0000D6E2                            
0000D6E2                            locret_D620:
0000D6E2 4E75                       		rts	
0000D6E4                            ; End of function DisplaySprite
0000D6E4                            
0000D6E4                            ; ---------------------------------------------------------------------------
0000D6E4                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000D6E4                            ; ---------------------------------------------------------------------------
0000D6E4                            
0000D6E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D6E4                            
0000D6E4                            
0000D6E4                            DisplaySprite2:
0000D6E4 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000D6E8 3029 0018                  		move.w	$18(a1),d0
0000D6EC E248                       		lsr.w	#1,d0
0000D6EE 0240 0380                  		andi.w	#$380,d0
0000D6F2 D4C0                       		adda.w	d0,a2
0000D6F4 0C52 007E                  		cmpi.w	#$7E,(a2)
0000D6F8 6400                       		bcc.s	locret_D63E
0000D6FA 5452                       		addq.w	#2,(a2)
0000D6FC D4D2                       		adda.w	(a2),a2
0000D6FE 3489                       		move.w	a1,(a2)
0000D700                            
0000D700                            locret_D63E:
0000D700 4E75                       		rts	
0000D702                            ; End of function DisplaySprite2
0000D702                            
0000D702                            ; ---------------------------------------------------------------------------
0000D702                            ; Subroutine to	delete an object
0000D702                            ; ---------------------------------------------------------------------------
0000D702                            
0000D702                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D702                            
0000D702                            
0000D702                            DeleteObject:
0000D702 2248                       		movea.l	a0,a1
0000D704                            
0000D704                            DeleteObject2:
0000D704 7200                       		moveq	#0,d1
0000D706 700F                       		moveq	#$F,d0
0000D708                            
0000D708                            loc_D646:
0000D708 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000D70A 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000D70E 4E75                       		rts	
0000D710                            ; End of function DeleteObject
0000D710                            
0000D710                            ; ===========================================================================
0000D710 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000D714 00FF F700                  		dc.l $FFF700		; main screen x-position
0000D718 00FF F708                  		dc.l $FFF708		; background x-position	1
0000D71C 00FF F718                  		dc.l $FFF718		; background x-position	2
0000D720                            ; ---------------------------------------------------------------------------
0000D720                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000D720                            ; ---------------------------------------------------------------------------
0000D720                            
0000D720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D720                            
0000D720                            
0000D720                            BuildSprites:				; XREF: TitleScreen; et al
0000D720 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000D724 7A00                       		moveq	#0,d5
0000D726 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000D72A 7E07                       		moveq	#7,d7
0000D72C                            
0000D72C                            loc_D66A:
0000D72C 4A54                       		tst.w	(a4)
0000D72E 6700 0000                  		beq.w	loc_D72E
0000D732 7C02                       		moveq	#2,d6
0000D734                            
0000D734                            loc_D672:
0000D734 3074 6000                  		movea.w	(a4,d6.w),a0
0000D738 4A10                       		tst.b	(a0)
0000D73A 6700 0000                  		beq.w	loc_D726
0000D73E 08A8 0007 0001             		bclr	#7,1(a0)
0000D744 1028 0001                  		move.b	1(a0),d0
0000D748 1800                       		move.b	d0,d4
0000D74A 0240 000C                  		andi.w	#$C,d0
0000D74E 6700                       		beq.s	loc_D6DE
0000D750 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000D754 7000                       		moveq	#0,d0
0000D756 1028 0019                  		move.b	$19(a0),d0
0000D75A 3628 0008                  		move.w	8(a0),d3
0000D75E 9651                       		sub.w	(a1),d3
0000D760 3203                       		move.w	d3,d1
0000D762 D240                       		add.w	d0,d1
0000D764 6B00 0000                  		bmi.w	loc_D726
0000D768 3203                       		move.w	d3,d1
0000D76A 9240                       		sub.w	d0,d1
0000D76C 0C41 0140                  		cmpi.w	#$140,d1
0000D770 6C00                       		bge.s	loc_D726
0000D772 0643 0080                  		addi.w	#$80,d3
0000D776 0804 0004                  		btst	#4,d4
0000D77A 6700                       		beq.s	loc_D6E8
0000D77C 7000                       		moveq	#0,d0
0000D77E 1028 0016                  		move.b	$16(a0),d0
0000D782 3428 000C                  		move.w	$C(a0),d2
0000D786 9469 0004                  		sub.w	4(a1),d2
0000D78A 3202                       		move.w	d2,d1
0000D78C D240                       		add.w	d0,d1
0000D78E 6B00                       		bmi.s	loc_D726
0000D790 3202                       		move.w	d2,d1
0000D792 9240                       		sub.w	d0,d1
0000D794 0C41 00E0                  		cmpi.w	#$E0,d1
0000D798 6C00                       		bge.s	loc_D726
0000D79A 0642 0080                  		addi.w	#$80,d2
0000D79E 6000                       		bra.s	loc_D700
0000D7A0                            ; ===========================================================================
0000D7A0                            
0000D7A0                            loc_D6DE:
0000D7A0 3428 000A                  		move.w	$A(a0),d2
0000D7A4 3628 0008                  		move.w	8(a0),d3
0000D7A8 6000                       		bra.s	loc_D700
0000D7AA                            ; ===========================================================================
0000D7AA                            
0000D7AA                            loc_D6E8:
0000D7AA 3428 000C                  		move.w	$C(a0),d2
0000D7AE 9469 0004                  		sub.w	4(a1),d2
0000D7B2 0642 0080                  		addi.w	#$80,d2
0000D7B6 0C42 0060                  		cmpi.w	#$60,d2
0000D7BA 6500                       		bcs.s	loc_D726
0000D7BC 0C42 0180                  		cmpi.w	#$180,d2
0000D7C0 6400                       		bcc.s	loc_D726
0000D7C2                            
0000D7C2                            loc_D700:
0000D7C2 2268 0004                  		movea.l	4(a0),a1
0000D7C6 7200                       		moveq	#0,d1
0000D7C8 0804 0005                  		btst	#5,d4
0000D7CC 6600                       		bne.s	loc_D71C
0000D7CE 1228 001A                  		move.b	$1A(a0),d1
0000D7D2 D201                       		add.b	d1,d1
0000D7D4 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000D7D8 1219                       		move.b	(a1)+,d1
0000D7DA 5301                       		subq.b	#1,d1
0000D7DC 6B00                       		bmi.s	loc_D720
0000D7DE                            
0000D7DE                            loc_D71C:
0000D7DE 6100 0000                  		bsr.w	sub_D750
0000D7E2                            
0000D7E2                            loc_D720:
0000D7E2 08E8 0007 0001             		bset	#7,1(a0)
0000D7E8                            
0000D7E8                            loc_D726:
0000D7E8 5446                       		addq.w	#2,d6
0000D7EA 5554                       		subq.w	#2,(a4)
0000D7EC 6600 FF46                  		bne.w	loc_D672
0000D7F0                            
0000D7F0                            loc_D72E:
0000D7F0 49EC 0080                  		lea	$80(a4),a4
0000D7F4 51CF FF36                  		dbf	d7,loc_D66A
0000D7F8 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000D7FC 0C05 0050                  		cmpi.b	#$50,d5
0000D800 6700                       		beq.s	loc_D748
0000D802 24BC 0000 0000             		move.l	#0,(a2)
0000D808 4E75                       		rts	
0000D80A                            ; ===========================================================================
0000D80A                            
0000D80A                            loc_D748:
0000D80A 157C 0000 FFFB             		move.b	#0,-5(a2)
0000D810 4E75                       		rts	
0000D812                            ; End of function BuildSprites
0000D812                            
0000D812                            
0000D812                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D812                            
0000D812                            
0000D812                            sub_D750:				; XREF: BuildSprites
0000D812 3668 0002                  		movea.w	2(a0),a3
0000D816 0804 0000                  		btst	#0,d4
0000D81A 6600                       		bne.s	loc_D796
0000D81C 0804 0001                  		btst	#1,d4
0000D820 6600 0000                  		bne.w	loc_D7E4
0000D824                            ; End of function sub_D750
0000D824                            
0000D824                            
0000D824                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D824                            
0000D824                            
0000D824                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000D824 0C05 0050                  		cmpi.b	#$50,d5
0000D828 6700                       		beq.s	locret_D794
0000D82A 1019                       		move.b	(a1)+,d0
0000D82C 4880                       		ext.w	d0
0000D82E D042                       		add.w	d2,d0
0000D830 34C0                       		move.w	d0,(a2)+
0000D832 14D9                       		move.b	(a1)+,(a2)+
0000D834 5205                       		addq.b	#1,d5
0000D836 14C5                       		move.b	d5,(a2)+
0000D838 1019                       		move.b	(a1)+,d0
0000D83A E148                       		lsl.w	#8,d0
0000D83C 1019                       		move.b	(a1)+,d0
0000D83E D04B                       		add.w	a3,d0
0000D840 34C0                       		move.w	d0,(a2)+
0000D842 1019                       		move.b	(a1)+,d0
0000D844 4880                       		ext.w	d0
0000D846 D043                       		add.w	d3,d0
0000D848 0240 01FF                  		andi.w	#$1FF,d0
0000D84C 6600                       		bne.s	loc_D78E
0000D84E 5240                       		addq.w	#1,d0
0000D850                            
0000D850                            loc_D78E:
0000D850 34C0                       		move.w	d0,(a2)+
0000D852 51C9 FFD0                  		dbf	d1,sub_D762
0000D856                            
0000D856                            locret_D794:
0000D856 4E75                       		rts	
0000D858                            ; End of function sub_D762
0000D858                            
0000D858                            ; ===========================================================================
0000D858                            
0000D858                            loc_D796:
0000D858 0804 0001                  		btst	#1,d4
0000D85C 6600 0000                  		bne.w	loc_D82A
0000D860                            
0000D860                            loc_D79E:
0000D860 0C05 0050                  		cmpi.b	#$50,d5
0000D864 6700                       		beq.s	locret_D7E2
0000D866 1019                       		move.b	(a1)+,d0
0000D868 4880                       		ext.w	d0
0000D86A D042                       		add.w	d2,d0
0000D86C 34C0                       		move.w	d0,(a2)+
0000D86E 1819                       		move.b	(a1)+,d4
0000D870 14C4                       		move.b	d4,(a2)+
0000D872 5205                       		addq.b	#1,d5
0000D874 14C5                       		move.b	d5,(a2)+
0000D876 1019                       		move.b	(a1)+,d0
0000D878 E148                       		lsl.w	#8,d0
0000D87A 1019                       		move.b	(a1)+,d0
0000D87C D04B                       		add.w	a3,d0
0000D87E 0A40 0800                  		eori.w	#$800,d0
0000D882 34C0                       		move.w	d0,(a2)+
0000D884 1019                       		move.b	(a1)+,d0
0000D886 4880                       		ext.w	d0
0000D888 4440                       		neg.w	d0
0000D88A D804                       		add.b	d4,d4
0000D88C 0244 0018                  		andi.w	#$18,d4
0000D890 5044                       		addq.w	#8,d4
0000D892 9044                       		sub.w	d4,d0
0000D894 D043                       		add.w	d3,d0
0000D896 0240 01FF                  		andi.w	#$1FF,d0
0000D89A 6600                       		bne.s	loc_D7DC
0000D89C 5240                       		addq.w	#1,d0
0000D89E                            
0000D89E                            loc_D7DC:
0000D89E 34C0                       		move.w	d0,(a2)+
0000D8A0 51C9 FFBE                  		dbf	d1,loc_D79E
0000D8A4                            
0000D8A4                            locret_D7E2:
0000D8A4 4E75                       		rts	
0000D8A6                            ; ===========================================================================
0000D8A6                            
0000D8A6                            loc_D7E4:				; XREF: sub_D750
0000D8A6 0C05 0050                  		cmpi.b	#$50,d5
0000D8AA 6700                       		beq.s	locret_D828
0000D8AC 1019                       		move.b	(a1)+,d0
0000D8AE 1811                       		move.b	(a1),d4
0000D8B0 4880                       		ext.w	d0
0000D8B2 4440                       		neg.w	d0
0000D8B4 E70C                       		lsl.b	#3,d4
0000D8B6 0244 0018                  		andi.w	#$18,d4
0000D8BA 5044                       		addq.w	#8,d4
0000D8BC 9044                       		sub.w	d4,d0
0000D8BE D042                       		add.w	d2,d0
0000D8C0 34C0                       		move.w	d0,(a2)+
0000D8C2 14D9                       		move.b	(a1)+,(a2)+
0000D8C4 5205                       		addq.b	#1,d5
0000D8C6 14C5                       		move.b	d5,(a2)+
0000D8C8 1019                       		move.b	(a1)+,d0
0000D8CA E148                       		lsl.w	#8,d0
0000D8CC 1019                       		move.b	(a1)+,d0
0000D8CE D04B                       		add.w	a3,d0
0000D8D0 0A40 1000                  		eori.w	#$1000,d0
0000D8D4 34C0                       		move.w	d0,(a2)+
0000D8D6 1019                       		move.b	(a1)+,d0
0000D8D8 4880                       		ext.w	d0
0000D8DA D043                       		add.w	d3,d0
0000D8DC 0240 01FF                  		andi.w	#$1FF,d0
0000D8E0 6600                       		bne.s	loc_D822
0000D8E2 5240                       		addq.w	#1,d0
0000D8E4                            
0000D8E4                            loc_D822:
0000D8E4 34C0                       		move.w	d0,(a2)+
0000D8E6 51C9 FFBE                  		dbf	d1,loc_D7E4
0000D8EA                            
0000D8EA                            locret_D828:
0000D8EA 4E75                       		rts	
0000D8EC                            ; ===========================================================================
0000D8EC                            
0000D8EC                            loc_D82A:
0000D8EC 0C05 0050                  		cmpi.b	#$50,d5
0000D8F0 6700                       		beq.s	locret_D87C
0000D8F2 1019                       		move.b	(a1)+,d0
0000D8F4 1811                       		move.b	(a1),d4
0000D8F6 4880                       		ext.w	d0
0000D8F8 4440                       		neg.w	d0
0000D8FA E70C                       		lsl.b	#3,d4
0000D8FC 0244 0018                  		andi.w	#$18,d4
0000D900 5044                       		addq.w	#8,d4
0000D902 9044                       		sub.w	d4,d0
0000D904 D042                       		add.w	d2,d0
0000D906 34C0                       		move.w	d0,(a2)+
0000D908 1819                       		move.b	(a1)+,d4
0000D90A 14C4                       		move.b	d4,(a2)+
0000D90C 5205                       		addq.b	#1,d5
0000D90E 14C5                       		move.b	d5,(a2)+
0000D910 1019                       		move.b	(a1)+,d0
0000D912 E148                       		lsl.w	#8,d0
0000D914 1019                       		move.b	(a1)+,d0
0000D916 D04B                       		add.w	a3,d0
0000D918 0A40 1800                  		eori.w	#$1800,d0
0000D91C 34C0                       		move.w	d0,(a2)+
0000D91E 1019                       		move.b	(a1)+,d0
0000D920 4880                       		ext.w	d0
0000D922 4440                       		neg.w	d0
0000D924 D804                       		add.b	d4,d4
0000D926 0244 0018                  		andi.w	#$18,d4
0000D92A 5044                       		addq.w	#8,d4
0000D92C 9044                       		sub.w	d4,d0
0000D92E D043                       		add.w	d3,d0
0000D930 0240 01FF                  		andi.w	#$1FF,d0
0000D934 6600                       		bne.s	loc_D876
0000D936 5240                       		addq.w	#1,d0
0000D938                            
0000D938                            loc_D876:
0000D938 34C0                       		move.w	d0,(a2)+
0000D93A 51C9 FFB0                  		dbf	d1,loc_D82A
0000D93E                            
0000D93E                            locret_D87C:
0000D93E 4E75                       		rts	
0000D940                            ; ---------------------------------------------------------------------------
0000D940                            ; Subroutine to	check if an object is on the screen
0000D940                            ; ---------------------------------------------------------------------------
0000D940                            
0000D940                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D940                            
0000D940                            
0000D940                            ChkObjOnScreen:
0000D940 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000D944 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000D948 6B00                       		bmi.s	NotOnScreen
0000D94A 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000D94E 6C00                       		bge.s	NotOnScreen	; if not, branch
0000D950                            
0000D950 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000D954 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000D958 6B00                       		bmi.s	NotOnScreen
0000D95A 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000D95E 6C00                       		bge.s	NotOnScreen	; if not, branch
0000D960                            
0000D960 7000                       		moveq	#0,d0		; set flag to 0
0000D962 4E75                       		rts	
0000D964                            ; ===========================================================================
0000D964                            
0000D964                            NotOnScreen:				; XREF: ChkObjOnScreen
0000D964 7001                       		moveq	#1,d0		; set flag to 1
0000D966 4E75                       		rts	
0000D968                            ; End of function ChkObjOnScreen
0000D968                            
0000D968                            
0000D968                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D968                            
0000D968                            
0000D968                            ChkObjOnScreen2:
0000D968 7200                       		moveq	#0,d1
0000D96A 1228 0019                  		move.b	$19(a0),d1
0000D96E 3028 0008                  		move.w	8(a0),d0
0000D972 9078 F700                  		sub.w	($FFFFF700).w,d0
0000D976 D041                       		add.w	d1,d0
0000D978 6B00                       		bmi.s	NotOnScreen2
0000D97A D241                       		add.w	d1,d1
0000D97C 9041                       		sub.w	d1,d0
0000D97E 0C40 0140                  		cmpi.w	#320,d0
0000D982 6C00                       		bge.s	NotOnScreen2
0000D984                            
0000D984 3228 000C                  		move.w	$C(a0),d1
0000D988 9278 F704                  		sub.w	($FFFFF704).w,d1
0000D98C 6B00                       		bmi.s	NotOnScreen2
0000D98E 0C41 00E0                  		cmpi.w	#224,d1
0000D992 6C00                       		bge.s	NotOnScreen2
0000D994                            
0000D994 7000                       		moveq	#0,d0
0000D996 4E75                       		rts	
0000D998                            ; ===========================================================================
0000D998                            
0000D998                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000D998 7001                       		moveq	#1,d0
0000D99A 4E75                       		rts	
0000D99C                            ; End of function ChkObjOnScreen2
0000D99C                            
0000D99C                            ; ---------------------------------------------------------------------------
0000D99C                            ; Subroutine to	load a level's objects
0000D99C                            ; ---------------------------------------------------------------------------
0000D99C                            
0000D99C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D99C                            
0000D99C                            
0000D99C                            ObjPosLoad:				; XREF: Level; et al
0000D99C 7000                       		moveq	#0,d0
0000D99E 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000D9A2 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000D9A6 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000D9AA                            ; End of function ObjPosLoad
0000D9AA                            
0000D9AA                            ; ===========================================================================
0000D9AA 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000D9AC 0000                       		dc.w OPL_Next-OPL_Index
0000D9AE                            ; ===========================================================================
0000D9AE                            
0000D9AE                            OPL_Main:				; XREF: OPL_Index
0000D9AE 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000D9B2 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000D9B6 ED08                       		lsl.b	#6,d0
0000D9B8 E848                       		lsr.w	#4,d0
0000D9BA 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000D9C0 2248                       		movea.l	a0,a1
0000D9C2 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000D9C6 21C8 F770                  		move.l	a0,($FFFFF770).w
0000D9CA 21C8 F774                  		move.l	a0,($FFFFF774).w
0000D9CE D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000D9D2 21C9 F778                  		move.l	a1,($FFFFF778).w
0000D9D6 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000D9DA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D9DE 34FC 0101                  		move.w	#$101,(a2)+
0000D9E2 303C 005E                  		move.w	#$5E,d0
0000D9E6                            
0000D9E6                            OPL_ClrList:
0000D9E6 429A                       		clr.l	(a2)+
0000D9E8 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000D9EC                            
0000D9EC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D9F0 7400                       		moveq	#0,d2
0000D9F2 3C38 F700                  		move.w	($FFFFF700).w,d6
0000D9F6 0446 0080                  		subi.w	#$80,d6
0000D9FA 6400                       		bcc.s	loc_D93C
0000D9FC 7C00                       		moveq	#0,d6
0000D9FE                            
0000D9FE                            loc_D93C:
0000D9FE 0246 FF80                  		andi.w	#$FF80,d6
0000DA02 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DA06                            
0000DA06                            loc_D944:
0000DA06 BC50                       		cmp.w	(a0),d6
0000DA08 6300                       		bls.s	loc_D956
0000DA0A 4A28 0004                  		tst.b	4(a0)
0000DA0E 6A00                       		bpl.s	loc_D952
0000DA10 1412                       		move.b	(a2),d2
0000DA12 5212                       		addq.b	#1,(a2)
0000DA14                            
0000DA14                            loc_D952:
0000DA14 5C48                       		addq.w	#6,a0
0000DA16 60EE                       		bra.s	loc_D944
0000DA18                            ; ===========================================================================
0000DA18                            
0000DA18                            loc_D956:
0000DA18 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DA1C 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DA20 0446 0080                  		subi.w	#$80,d6
0000DA24 6500                       		bcs.s	loc_D976
0000DA26                            
0000DA26                            loc_D964:
0000DA26 BC50                       		cmp.w	(a0),d6
0000DA28 6300                       		bls.s	loc_D976
0000DA2A 4A28 0004                  		tst.b	4(a0)
0000DA2E 6A00                       		bpl.s	loc_D972
0000DA30 522A 0001                  		addq.b	#1,1(a2)
0000DA34                            
0000DA34                            loc_D972:
0000DA34 5C48                       		addq.w	#6,a0
0000DA36 60EE                       		bra.s	loc_D964
0000DA38                            ; ===========================================================================
0000DA38                            
0000DA38                            loc_D976:
0000DA38 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DA3C 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000DA42                            
0000DA42                            OPL_Next:				; XREF: OPL_Index
0000DA42 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DA46 7400                       		moveq	#0,d2
0000DA48 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DA4C 0246 FF80                  		andi.w	#$FF80,d6
0000DA50 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000DA54 6700 0000                  		beq.w	locret_DA3A
0000DA58 6C00                       		bge.s	loc_D9F6
0000DA5A 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DA5E 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DA62 0446 0080                  		subi.w	#$80,d6
0000DA66 6500                       		bcs.s	loc_D9D2
0000DA68                            
0000DA68                            loc_D9A6:
0000DA68 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DA6C 6C00                       		bge.s	loc_D9D2
0000DA6E 5D48                       		subq.w	#6,a0
0000DA70 4A28 0004                  		tst.b	4(a0)
0000DA74 6A00                       		bpl.s	loc_D9BC
0000DA76 532A 0001                  		subq.b	#1,1(a2)
0000DA7A 142A 0001                  		move.b	1(a2),d2
0000DA7E                            
0000DA7E                            loc_D9BC:
0000DA7E 6100 0000                  		bsr.w	loc_DA3C
0000DA82 6600                       		bne.s	loc_D9C6
0000DA84 5D48                       		subq.w	#6,a0
0000DA86 60E0                       		bra.s	loc_D9A6
0000DA88                            ; ===========================================================================
0000DA88                            
0000DA88                            loc_D9C6:
0000DA88 4A28 0004                  		tst.b	4(a0)
0000DA8C 6A00                       		bpl.s	loc_D9D0
0000DA8E 522A 0001                  		addq.b	#1,1(a2)
0000DA92                            
0000DA92                            loc_D9D0:
0000DA92 5C48                       		addq.w	#6,a0
0000DA94                            
0000DA94                            loc_D9D2:
0000DA94 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DA98 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DA9C 0646 0300                  		addi.w	#$300,d6
0000DAA0                            
0000DAA0                            loc_D9DE:
0000DAA0 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DAA4 6E00                       		bgt.s	loc_D9F0
0000DAA6 4A28 FFFE                  		tst.b	-2(a0)
0000DAAA 6A00                       		bpl.s	loc_D9EC
0000DAAC 5312                       		subq.b	#1,(a2)
0000DAAE                            
0000DAAE                            loc_D9EC:
0000DAAE 5D48                       		subq.w	#6,a0
0000DAB0 60EE                       		bra.s	loc_D9DE
0000DAB2                            ; ===========================================================================
0000DAB2                            
0000DAB2                            loc_D9F0:
0000DAB2 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DAB6 4E75                       		rts	
0000DAB8                            ; ===========================================================================
0000DAB8                            
0000DAB8                            loc_D9F6:
0000DAB8 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DABC 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DAC0 0646 0280                  		addi.w	#$280,d6
0000DAC4                            
0000DAC4                            loc_DA02:
0000DAC4 BC50                       		cmp.w	(a0),d6
0000DAC6 6300                       		bls.s	loc_DA16
0000DAC8 4A28 0004                  		tst.b	4(a0)
0000DACC 6A00                       		bpl.s	loc_DA10
0000DACE 1412                       		move.b	(a2),d2
0000DAD0 5212                       		addq.b	#1,(a2)
0000DAD2                            
0000DAD2                            loc_DA10:
0000DAD2 6100 0000                  		bsr.w	loc_DA3C
0000DAD6 67EC                       		beq.s	loc_DA02
0000DAD8                            
0000DAD8                            loc_DA16:
0000DAD8 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DADC 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DAE0 0446 0300                  		subi.w	#$300,d6
0000DAE4 6500                       		bcs.s	loc_DA36
0000DAE6                            
0000DAE6                            loc_DA24:
0000DAE6 BC50                       		cmp.w	(a0),d6
0000DAE8 6300                       		bls.s	loc_DA36
0000DAEA 4A28 0004                  		tst.b	4(a0)
0000DAEE 6A00                       		bpl.s	loc_DA32
0000DAF0 522A 0001                  		addq.b	#1,1(a2)
0000DAF4                            
0000DAF4                            loc_DA32:
0000DAF4 5C48                       		addq.w	#6,a0
0000DAF6 60EE                       		bra.s	loc_DA24
0000DAF8                            ; ===========================================================================
0000DAF8                            
0000DAF8                            loc_DA36:
0000DAF8 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DAFC                            
0000DAFC                            locret_DA3A:
0000DAFC 4E75                       		rts	
0000DAFE                            ; ===========================================================================
0000DAFE                            
0000DAFE                            loc_DA3C:
0000DAFE 4A28 0004                  		tst.b	4(a0)
0000DB02 6A00                       		bpl.s	OPL_MakeItem
0000DB04 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000DB0A 6700                       		beq.s	OPL_MakeItem
0000DB0C 5C48                       		addq.w	#6,a0
0000DB0E 7000                       		moveq	#0,d0
0000DB10 4E75                       		rts	
0000DB12                            ; ===========================================================================
0000DB12                            
0000DB12                            OPL_MakeItem:
0000DB12 6100 0000                  		bsr.w	SingleObjLoad
0000DB16 6600                       		bne.s	locret_DA8A
0000DB18 3358 0008                  		move.w	(a0)+,8(a1)
0000DB1C 3018                       		move.w	(a0)+,d0
0000DB1E 3200                       		move.w	d0,d1
0000DB20 0240 0FFF                  		andi.w	#$FFF,d0
0000DB24 3340 000C                  		move.w	d0,$C(a1)
0000DB28 E559                       		rol.w	#2,d1
0000DB2A 0201 0003                  		andi.b	#3,d1
0000DB2E 1341 0001                  		move.b	d1,1(a1)
0000DB32 1341 0022                  		move.b	d1,$22(a1)
0000DB36 1018                       		move.b	(a0)+,d0
0000DB38 6A00                       		bpl.s	loc_DA80
0000DB3A 0200 007F                  		andi.b	#$7F,d0
0000DB3E 1342 0023                  		move.b	d2,$23(a1)
0000DB42                            
0000DB42                            loc_DA80:
0000DB42 1280                       		move.b	d0,0(a1)
0000DB44 1358 0028                  		move.b	(a0)+,$28(a1)
0000DB48 7000                       		moveq	#0,d0
0000DB4A                            
0000DB4A                            locret_DA8A:
0000DB4A 4E75                       		rts	
0000DB4C                            ; ---------------------------------------------------------------------------
0000DB4C                            ; Single object	loading	subroutine
0000DB4C                            ; ---------------------------------------------------------------------------
0000DB4C                            
0000DB4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB4C                            
0000DB4C                            
0000DB4C                            SingleObjLoad:
0000DB4C 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000DB50 303C 005F                  		move.w	#$5F,d0
0000DB54                            
0000DB54                            loc_DA94:
0000DB54 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000DB56 6700                       		beq.s	locret_DAA0	; if yes, branch
0000DB58 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000DB5C 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000DB60                            
0000DB60                            locret_DAA0:
0000DB60 4E75                       		rts	
0000DB62                            ; End of function SingleObjLoad
0000DB62                            
0000DB62                            
0000DB62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB62                            
0000DB62                            
0000DB62                            SingleObjLoad2:
0000DB62 2248                       		movea.l	a0,a1
0000DB64 303C F000                  		move.w	#-$1000,d0
0000DB68 9048                       		sub.w	a0,d0
0000DB6A EC48                       		lsr.w	#6,d0
0000DB6C 5340                       		subq.w	#1,d0
0000DB6E 6500                       		bcs.s	locret_DABC
0000DB70                            
0000DB70                            loc_DAB0:
0000DB70 4A11                       		tst.b	(a1)
0000DB72 6700                       		beq.s	locret_DABC
0000DB74 43E9 0040                  		lea	$40(a1),a1
0000DB78 51C8 FFF6                  		dbf	d0,loc_DAB0
0000DB7C                            
0000DB7C                            locret_DABC:
0000DB7C 4E75                       		rts	
0000DB7E                            ; End of function SingleObjLoad2
0000DB7E                            
0000DB7E                            ; ===========================================================================
0000DB7E                            ; ---------------------------------------------------------------------------
0000DB7E                            ; Object 41 - springs
0000DB7E                            ; ---------------------------------------------------------------------------
0000DB7E                            
0000DB7E                            Obj41:					; XREF: Obj_Index
0000DB7E 7000                       		moveq	#0,d0
0000DB80 1028 0024                  		move.b	$24(a0),d0
0000DB84 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000DB88 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000DB8C 6100 FB38                  		bsr.w	DisplaySprite
0000DB90 3028 0008                  		move.w	8(a0),d0
0000DB94 0240 FF80                  		andi.w	#$FF80,d0
0000DB98 3238 F700                  		move.w	($FFFFF700).w,d1
0000DB9C 0441 0080                  		subi.w	#$80,d1
0000DBA0 0241 FF80                  		andi.w	#$FF80,d1
0000DBA4 9041                       		sub.w	d1,d0
0000DBA6 0C40 0280                  		cmpi.w	#$280,d0
0000DBAA 6200 FB56                  		bhi.w	DeleteObject
0000DBAE 4E75                       		rts	
0000DBB0                            ; ===========================================================================
0000DBB0 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000DBB2 0000                       		dc.w Obj41_Up-Obj41_Index
0000DBB4 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000DBB6 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000DBB8 0000                       		dc.w Obj41_LR-Obj41_Index
0000DBBA 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000DBBC 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000DBBE 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000DBC0 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000DBC2 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000DBC4                            
0000DBC4 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000DBC6 F600                       		dc.w -$A00		; power	of yellow spring
0000DBC8                            ; ===========================================================================
0000DBC8                            
0000DBC8                            Obj41_Main:				; XREF: Obj41_Index
0000DBC8 5428 0024                  		addq.b	#2,$24(a0)
0000DBCC 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000DBD4 317C 0523 0002             		move.w	#$523,2(a0)
0000DBDA 0028 0004 0001             		ori.b	#4,1(a0)
0000DBE0 117C 0010 0019             		move.b	#$10,$19(a0)
0000DBE6 117C 0004 0018             		move.b	#4,$18(a0)
0000DBEC 1028 0028                  		move.b	$28(a0),d0
0000DBF0 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000DBF4 6700                       		beq.s	loc_DB54	; if not, branch
0000DBF6 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000DBFC 117C 0001 001C             		move.b	#1,$1C(a0)
0000DC02 117C 0003 001A             		move.b	#3,$1A(a0)
0000DC08 317C 0533 0002             		move.w	#$533,2(a0)
0000DC0E 117C 0008 0019             		move.b	#8,$19(a0)
0000DC14                            
0000DC14                            loc_DB54:
0000DC14 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000DC18 6700                       		beq.s	loc_DB66	; if not, branch
0000DC1A 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000DC20 08E8 0001 0022             		bset	#1,$22(a0)
0000DC26                            
0000DC26                            loc_DB66:
0000DC26 0800 0001                  		btst	#1,d0
0000DC2A 6700                       		beq.s	loc_DB72
0000DC2C 08E8 0005 0002             		bset	#5,2(a0)
0000DC32                            
0000DC32                            loc_DB72:
0000DC32 0240 000F                  		andi.w	#$F,d0
0000DC36 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000DC3C 4E75                       		rts	
0000DC3E                            ; ===========================================================================
0000DC3E                            
0000DC3E                            Obj41_Up:				; XREF: Obj41_Index
0000DC3E 323C 001B                  		move.w	#$1B,d1
0000DC42 343C 0008                  		move.w	#8,d2
0000DC46 363C 0010                  		move.w	#$10,d3
0000DC4A 3828 0008                  		move.w	8(a0),d4
0000DC4E 6100 0000                  		bsr.w	SolidObject
0000DC52 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000DC56 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000DC58 4E75                       		rts	
0000DC5A                            ; ===========================================================================
0000DC5A                            
0000DC5A                            Obj41_BounceUp:				; XREF: Obj41_Up
0000DC5A 5428 0024                  		addq.b	#2,$24(a0)
0000DC5E 5069 000C                  		addq.w	#8,$C(a1)
0000DC62 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000DC68 08E9 0001 0022             		bset	#1,$22(a1)
0000DC6E 08A9 0003 0022             		bclr	#3,$22(a1)
0000DC74 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000DC7A 137C 0002 0024             		move.b	#2,$24(a1)
0000DC80 08A8 0003 0022             		bclr	#3,$22(a0)
0000DC86 4228 0025                  		clr.b	$25(a0)
0000DC8A 303C 00CC                  		move.w	#$CC,d0
0000DC8E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
0000DC94                            
0000DC94                            Obj41_AniUp:				; XREF: Obj41_Index
0000DC94 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DC9A 6000 CB56                  		bra.w	AnimateSprite
0000DC9E                            ; ===========================================================================
0000DC9E                            
0000DC9E                            Obj41_ResetUp:				; XREF: Obj41_Index
0000DC9E 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000DCA4 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000DCA8 4E75                       		rts	
0000DCAA                            ; ===========================================================================
0000DCAA                            
0000DCAA                            Obj41_LR:				; XREF: Obj41_Index
0000DCAA 323C 0013                  		move.w	#$13,d1
0000DCAE 343C 000E                  		move.w	#$E,d2
0000DCB2 363C 000F                  		move.w	#$F,d3
0000DCB6 3828 0008                  		move.w	8(a0),d4
0000DCBA 6100 0000                  		bsr.w	SolidObject
0000DCBE 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000DCC4 6600                       		bne.s	loc_DC0C
0000DCC6 117C 0008 0024             		move.b	#8,$24(a0)
0000DCCC                            
0000DCCC                            loc_DC0C:
0000DCCC 0828 0005 0022             		btst	#5,$22(a0)
0000DCD2 6600                       		bne.s	Obj41_BounceLR
0000DCD4 4E75                       		rts	
0000DCD6                            ; ===========================================================================
0000DCD6                            
0000DCD6                            Obj41_BounceLR:				; XREF: Obj41_LR
0000DCD6 5428 0024                  		addq.b	#2,$24(a0)
0000DCDA 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000DCE0 5069 0008                  		addq.w	#8,8(a1)
0000DCE4 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000DCEA 6600                       		bne.s	loc_DC36	; if yes, branch
0000DCEC 0469 0010 0008             		subi.w	#$10,8(a1)
0000DCF2 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000DCF6                            
0000DCF6                            loc_DC36:
0000DCF6 337C 000F 003E             		move.w	#$F,$3E(a1)
0000DCFC 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DD02 0869 0000 0022             		bchg	#0,$22(a1)
0000DD08 0829 0002 0022             		btst	#2,$22(a1)
0000DD0E 6600                       		bne.s	loc_DC56
0000DD10 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000DD16                            
0000DD16                            loc_DC56:
0000DD16 08A8 0005 0022             		bclr	#5,$22(a0)
0000DD1C 08A9 0005 0022             		bclr	#5,$22(a1)
0000DD22 303C 00CC                  		move.w	#$CC,d0
0000DD26 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
0000DD2C                            
0000DD2C                            Obj41_AniLR:				; XREF: Obj41_Index
0000DD2C 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DD32 6000 CABE                  		bra.w	AnimateSprite
0000DD36                            ; ===========================================================================
0000DD36                            
0000DD36                            Obj41_ResetLR:				; XREF: Obj41_Index
0000DD36 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000DD3C 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000DD40 4E75                       		rts	
0000DD42                            ; ===========================================================================
0000DD42                            
0000DD42                            Obj41_Dwn:				; XREF: Obj41_Index
0000DD42 323C 001B                  		move.w	#$1B,d1
0000DD46 343C 0008                  		move.w	#8,d2
0000DD4A 363C 0010                  		move.w	#$10,d3
0000DD4E 3828 0008                  		move.w	8(a0),d4
0000DD52 6100 0000                  		bsr.w	SolidObject
0000DD56 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000DD5C 6600                       		bne.s	loc_DCA4
0000DD5E 117C 000E 0024             		move.b	#$E,$24(a0)
0000DD64                            
0000DD64                            loc_DCA4:
0000DD64 4A28 0025                  		tst.b	$25(a0)
0000DD68 6600                       		bne.s	locret_DCAE
0000DD6A 4A44                       		tst.w	d4
0000DD6C 6B00                       		bmi.s	Obj41_BounceDwn
0000DD6E                            
0000DD6E                            locret_DCAE:
0000DD6E 4E75                       		rts	
0000DD70                            ; ===========================================================================
0000DD70                            
0000DD70                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000DD70 5428 0024                  		addq.b	#2,$24(a0)
0000DD74 5169 000C                  		subq.w	#8,$C(a1)
0000DD78 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000DD7E 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000DD82 08E9 0001 0022             		bset	#1,$22(a1)
0000DD88 08A9 0003 0022             		bclr	#3,$22(a1)
0000DD8E 137C 0002 0024             		move.b	#2,$24(a1)
0000DD94 08A8 0003 0022             		bclr	#3,$22(a0)
0000DD9A 4228 0025                  		clr.b	$25(a0)
0000DD9E 303C 00CC                  		move.w	#$CC,d0
0000DDA2 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
0000DDA8                            
0000DDA8                            Obj41_AniDwn:				; XREF: Obj41_Index
0000DDA8 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DDAE 6000 CA42                  		bra.w	AnimateSprite
0000DDB2                            ; ===========================================================================
0000DDB2                            
0000DDB2                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000DDB2 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000DDB8 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000DDBC 4E75                       		rts	
0000DDBE                            ; ===========================================================================
0000DDBE                            Ani_obj41:
0000DDBE                            	include "_anim\obj41.asm"
0000DDBE                            ; ---------------------------------------------------------------------------
0000DDBE                            ; Animation script - springs
0000DDBE                            ; ---------------------------------------------------------------------------
0000DDBE 0000                       		dc.w byte_DD02-Ani_obj41
0000DDC0 0000                       		dc.w byte_DD0E-Ani_obj41
0000DDC2 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000DDCE 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000DDDA                            		even
0000DDDA                            		even
0000DDDA                            
0000DDDA                            ; ---------------------------------------------------------------------------
0000DDDA                            ; Sprite mappings - springs
0000DDDA                            ; ---------------------------------------------------------------------------
0000DDDA                            Map_obj41:
0000DDDA                            	include "_maps\obj41.asm"
0000DDDA                            ; ---------------------------------------------------------------------------
0000DDDA                            ; Sprite mappings - springs
0000DDDA                            ; ---------------------------------------------------------------------------
0000DDDA 0000                       		dc.w byte_DD26-Map_obj41
0000DDDC 0000                       		dc.w byte_DD31-Map_obj41
0000DDDE 0000                       		dc.w byte_DD37-Map_obj41
0000DDE0 0000                       		dc.w byte_DD47-Map_obj41
0000DDE2 0000                       		dc.w byte_DD4D-Map_obj41
0000DDE4 0000                       		dc.w byte_DD53-Map_obj41
0000DDE6 02                         byte_DD26:	dc.b 2
0000DDE7 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000DDEC 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000DDF1 01                         byte_DD31:	dc.b 1
0000DDF2 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000DDF7 03                         byte_DD37:	dc.b 3
0000DDF8 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000DDFD F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000DE02 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000DE07 01                         byte_DD47:	dc.b 1
0000DE08 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000DE0D 01                         byte_DD4D:	dc.b 1
0000DE0E F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000DE13 04                         byte_DD53:	dc.b 4
0000DE14 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000DE19 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000DE1E F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000DE23 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000DE28                            		even
0000DE28                            		even
0000DE28                            
0000DE28                            ; ===========================================================================
0000DE28                            ; ---------------------------------------------------------------------------
0000DE28                            ; Object 42 - Newtron enemy (GHZ)
0000DE28                            ; ---------------------------------------------------------------------------
0000DE28                            
0000DE28                            Obj42:					; XREF: Obj_Index
0000DE28 7000                       		moveq	#0,d0
0000DE2A 1028 0024                  		move.b	$24(a0),d0
0000DE2E 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000DE32 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000DE36                            ; ===========================================================================
0000DE36 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000DE38 0000                       		dc.w Obj42_Action-Obj42_Index
0000DE3A 0000                       		dc.w Obj42_Delete-Obj42_Index
0000DE3C                            ; ===========================================================================
0000DE3C                            
0000DE3C                            Obj42_Main:				; XREF: Obj42_Index
0000DE3C 5428 0024                  		addq.b	#2,$24(a0)
0000DE40 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000DE48 317C 049B 0002             		move.w	#$49B,2(a0)
0000DE4E 117C 0004 0001             		move.b	#4,1(a0)
0000DE54 117C 0004 0018             		move.b	#4,$18(a0)
0000DE5A 117C 0014 0019             		move.b	#$14,$19(a0)
0000DE60 117C 0010 0016             		move.b	#$10,$16(a0)
0000DE66 117C 0008 0017             		move.b	#8,$17(a0)
0000DE6C                            
0000DE6C                            Obj42_Action:				; XREF: Obj42_Index
0000DE6C 7000                       		moveq	#0,d0
0000DE6E 1028 0025                  		move.b	$25(a0),d0
0000DE72 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000DE76 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000DE7A 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000DE80 6100 C970                  		bsr.w	AnimateSprite
0000DE84 6000 0000                  		bra.w	MarkObjGone
0000DE88                            ; ===========================================================================
0000DE88 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000DE8A 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000DE8C 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000DE8E 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000DE90 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000DE92                            ; ===========================================================================
0000DE92                            
0000DE92                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000DE92 08E8 0000 0022             		bset	#0,$22(a0)
0000DE98 3038 D008                  		move.w	($FFFFD008).w,d0
0000DE9C 9068 0008                  		sub.w	8(a0),d0
0000DEA0 6400                       		bcc.s	loc_DDEA
0000DEA2 4440                       		neg.w	d0
0000DEA4 08A8 0000 0022             		bclr	#0,$22(a0)
0000DEAA                            
0000DEAA                            loc_DDEA:
0000DEAA 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000DEAE 6400                       		bcc.s	locret_DE12	; if not, branch
0000DEB0 5428 0025                  		addq.b	#2,$25(a0)
0000DEB4 117C 0001 001C             		move.b	#1,$1C(a0)
0000DEBA 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000DEBE 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000DEC0 317C 249B 0002             		move.w	#$249B,2(a0)
0000DEC6 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000DECC 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000DED2                            
0000DED2                            locret_DE12:
0000DED2 4E75                       		rts	
0000DED4                            ; ===========================================================================
0000DED4                            
0000DED4                            Obj42_Type00:				; XREF: Obj42_Index2
0000DED4 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000DEDA 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000DEDC 08E8 0000 0022             		bset	#0,$22(a0)
0000DEE2 3038 D008                  		move.w	($FFFFD008).w,d0
0000DEE6 9068 0008                  		sub.w	8(a0),d0
0000DEEA 6400                       		bcc.s	locret_DE32
0000DEEC 08A8 0000 0022             		bclr	#0,$22(a0)
0000DEF2                            
0000DEF2                            locret_DE32:
0000DEF2 4E75                       		rts	
0000DEF4                            ; ===========================================================================
0000DEF4                            
0000DEF4                            Obj42_Fall:				; XREF: Obj42_Type00
0000DEF4 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000DEFA 6600                       		bne.s	loc_DE42
0000DEFC 117C 000C 0020             		move.b	#$C,$20(a0)
0000DF02                            
0000DF02                            loc_DE42:
0000DF02 6100 F770                  		bsr.w	ObjectFall
0000DF06 6100 0000                  		bsr.w	ObjHitFloor
0000DF0A 4A41                       		tst.w	d1		; has newtron hit the floor?
0000DF0C 6A00                       		bpl.s	locret_DE86	; if not, branch
0000DF0E D368 000C                  		add.w	d1,$C(a0)
0000DF12 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000DF18 5428 0025                  		addq.b	#2,$25(a0)
0000DF1C 117C 0002 001C             		move.b	#2,$1C(a0)
0000DF22 0828 0005 0002             		btst	#5,2(a0)
0000DF28 6700                       		beq.s	Obj42_Move
0000DF2A 5228 001C                  		addq.b	#1,$1C(a0)
0000DF2E                            
0000DF2E                            Obj42_Move:
0000DF2E 117C 000D 0020             		move.b	#$D,$20(a0)
0000DF34 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000DF3A 0828 0000 0022             		btst	#0,$22(a0)
0000DF40 6600                       		bne.s	locret_DE86
0000DF42 4468 0010                  		neg.w	$10(a0)
0000DF46                            
0000DF46                            locret_DE86:
0000DF46 4E75                       		rts	
0000DF48                            ; ===========================================================================
0000DF48                            
0000DF48                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000DF48 6100 F756                  		bsr.w	SpeedToPos
0000DF4C 6100 0000                  		bsr.w	ObjHitFloor
0000DF50 0C41 FFF8                  		cmpi.w	#-8,d1
0000DF54 6D00                       		blt.s	loc_DEA2
0000DF56 0C41 000C                  		cmpi.w	#$C,d1
0000DF5A 6C00                       		bge.s	loc_DEA2
0000DF5C D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000DF60 4E75                       		rts	
0000DF62                            ; ===========================================================================
0000DF62                            
0000DF62                            loc_DEA2:
0000DF62 5428 0025                  		addq.b	#2,$25(a0)
0000DF66 4E75                       		rts	
0000DF68                            ; ===========================================================================
0000DF68                            
0000DF68                            Obj42_Speed:				; XREF: Obj42_Index2
0000DF68 6100 F736                  		bsr.w	SpeedToPos
0000DF6C 4E75                       		rts	
0000DF6E                            ; ===========================================================================
0000DF6E                            
0000DF6E                            Obj42_Type01:				; XREF: Obj42_Index2
0000DF6E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000DF74 6600                       		bne.s	Obj42_FireMissile
0000DF76 117C 000C 0020             		move.b	#$C,$20(a0)
0000DF7C                            
0000DF7C                            Obj42_FireMissile:
0000DF7C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000DF82 6600                       		bne.s	locret_DF14
0000DF84 4A28 0032                  		tst.b	$32(a0)
0000DF88 6600                       		bne.s	locret_DF14
0000DF8A 117C 0001 0032             		move.b	#1,$32(a0)
0000DF90 6100 FBBA                  		bsr.w	SingleObjLoad
0000DF94 6600                       		bne.s	locret_DF14
0000DF96 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000DF9A 3368 0008 0008             		move.w	8(a0),8(a1)
0000DFA0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DFA6 5169 000C                  		subq.w	#8,$C(a1)
0000DFAA 337C 0200 0010             		move.w	#$200,$10(a1)
0000DFB0 303C 0014                  		move.w	#$14,d0
0000DFB4 0828 0000 0022             		btst	#0,$22(a0)
0000DFBA 6600                       		bne.s	loc_DF04
0000DFBC 4440                       		neg.w	d0
0000DFBE 4469 0010                  		neg.w	$10(a1)
0000DFC2                            
0000DFC2                            loc_DF04:
0000DFC2 D169 0008                  		add.w	d0,8(a1)
0000DFC6 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000DFCC 137C 0001 0028             		move.b	#1,$28(a1)
0000DFD2                            
0000DFD2                            locret_DF14:
0000DFD2 4E75                       		rts	
0000DFD4                            ; ===========================================================================
0000DFD4                            
0000DFD4                            Obj42_Delete:				; XREF: Obj42_Index
0000DFD4 6000 F72C                  		bra.w	DeleteObject
0000DFD8                            ; ===========================================================================
0000DFD8                            Ani_obj42:
0000DFD8                            	include "_anim\obj42.asm"
0000DFD8                            ; ---------------------------------------------------------------------------
0000DFD8                            ; Animation script - Newtron enemy
0000DFD8                            ; ---------------------------------------------------------------------------
0000DFD8 0000                       		dc.w byte_DF24-Ani_obj42
0000DFDA 0000                       		dc.w byte_DF28-Ani_obj42
0000DFDC 0000                       		dc.w byte_DF30-Ani_obj42
0000DFDE 0000                       		dc.w byte_DF34-Ani_obj42
0000DFE0 0000                       		dc.w byte_DF38-Ani_obj42
0000DFE2 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000DFE6 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000DFEE 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000DFF2 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000DFF6 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E000                            		even
0000E000                            		even
0000E000                            
0000E000                            ; ---------------------------------------------------------------------------
0000E000                            ; Sprite mappings - Newtron enemy (GHZ)
0000E000                            ; ---------------------------------------------------------------------------
0000E000                            Map_obj42:
0000E000                            	include "_maps\obj42.asm"
0000E000                            ; ---------------------------------------------------------------------------
0000E000                            ; Sprite mappings - Newtron enemy (GHZ)
0000E000                            ; ---------------------------------------------------------------------------
0000E000 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E004 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E008 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E00C 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E010 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E014 0000                       		dc.w byte_DFF8-Map_obj42
0000E016 03                         byte_DF58:	dc.b 3
0000E017 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E01C F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E021 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E026 03                         byte_DF68:	dc.b 3
0000E027 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E02C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E031 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E036 03                         byte_DF78:	dc.b 3
0000E037 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E03C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E041 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E046 04                         byte_DF88:	dc.b 4
0000E047 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E04C EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E051 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E056 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E05B 03                         byte_DF9D:	dc.b 3
0000E05C F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E061 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E066 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E06B 02                         byte_DFAD:	dc.b 2
0000E06C F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E071 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E076 03                         byte_DFB8:	dc.b 3
0000E077 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E07C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E081 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E086 03                         byte_DFC8:	dc.b 3
0000E087 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E08C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E091 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E096 03                         byte_DFD8:	dc.b 3
0000E097 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E09C F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E0A1 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E0A6 03                         byte_DFE8:	dc.b 3
0000E0A7 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E0AC F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E0B1 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E0B6 00                         byte_DFF8:	dc.b 0
0000E0B8 00                         		even
0000E0B8 00                         		even
0000E0B8                            
0000E0B8                            ; ===========================================================================
0000E0B8                            ; ---------------------------------------------------------------------------
0000E0B8                            ; Object 43 - Roller enemy (SYZ)
0000E0B8                            ; ---------------------------------------------------------------------------
0000E0B8                            
0000E0B8                            Obj43:					; XREF: Obj_Index
0000E0B8 7000                       		moveq	#0,d0
0000E0BA 1028 0024                  		move.b	$24(a0),d0
0000E0BE 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E0C2 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E0C6                            ; ===========================================================================
0000E0C6 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E0C8 0000                       		dc.w Obj43_Action-Obj43_Index
0000E0CA                            ; ===========================================================================
0000E0CA                            
0000E0CA                            Obj43_Main:				; XREF: Obj43_Index
0000E0CA 117C 000E 0016             		move.b	#$E,$16(a0)
0000E0D0 117C 0008 0017             		move.b	#8,$17(a0)
0000E0D6 6100 F59C                  		bsr.w	ObjectFall
0000E0DA 6100 0000                  		bsr.w	ObjHitFloor
0000E0DE 4A41                       		tst.w	d1
0000E0E0 6A00                       		bpl.s	locret_E052
0000E0E2 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E0E6 317C 0000 0012             		move.w	#0,$12(a0)
0000E0EC 5428 0024                  		addq.b	#2,$24(a0)
0000E0F0 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E0F8 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E0FE 117C 0004 0001             		move.b	#4,1(a0)
0000E104 117C 0004 0018             		move.b	#4,$18(a0)
0000E10A 117C 0010 0019             		move.b	#$10,$19(a0)
0000E110                            
0000E110                            locret_E052:
0000E110 4E75                       		rts	
0000E112                            ; ===========================================================================
0000E112                            
0000E112                            Obj43_Action:				; XREF: Obj43_Index
0000E112 7000                       		moveq	#0,d0
0000E114 1028 0025                  		move.b	$25(a0),d0
0000E118 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E11C 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E120 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E126 6100 C6CA                  		bsr.w	AnimateSprite
0000E12A 3028 0008                  		move.w	8(a0),d0
0000E12E 0240 FF80                  		andi.w	#$FF80,d0
0000E132 3238 F700                  		move.w	($FFFFF700).w,d1
0000E136 0441 0080                  		subi.w	#$80,d1
0000E13A 0241 FF80                  		andi.w	#$FF80,d1
0000E13E 9041                       		sub.w	d1,d0
0000E140 0C40 0280                  		cmpi.w	#$280,d0
0000E144 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E148 6000 F57C                  		bra.w	DisplaySprite
0000E14C                            ; ===========================================================================
0000E14C                            
0000E14C                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E14C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E150 7000                       		moveq	#0,d0
0000E152 1028 0023                  		move.b	$23(a0),d0
0000E156 6700                       		beq.s	Obj43_Delete
0000E158 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E15E                            
0000E15E                            Obj43_Delete:
0000E15E 6000 F5A2                  		bra.w	DeleteObject
0000E162                            ; ===========================================================================
0000E162 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E164 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E166 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E168 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E16A                            ; ===========================================================================
0000E16A                            
0000E16A                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E16A 3038 D008                  		move.w	($FFFFD008).w,d0
0000E16E 0440 0100                  		subi.w	#$100,d0
0000E172 6500                       		bcs.s	loc_E0D2
0000E174 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E178 6500                       		bcs.s	loc_E0D2
0000E17A 5828 0025                  		addq.b	#4,$25(a0)
0000E17E 117C 0002 001C             		move.b	#2,$1C(a0)
0000E184 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E18A 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E190                            
0000E190                            loc_E0D2:
0000E190 588F                       		addq.l	#4,sp
0000E192 4E75                       		rts	
0000E194                            ; ===========================================================================
0000E194                            
0000E194                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E194 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E19A 6700                       		beq.s	loc_E0F8
0000E19C 5368 0030                  		subq.w	#1,$30(a0)
0000E1A0 6A00                       		bpl.s	locret_E0F6
0000E1A2 117C 0001 001C             		move.b	#1,$1C(a0)
0000E1A8 317C 0700 0010             		move.w	#$700,$10(a0)
0000E1AE 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E1B4                            
0000E1B4                            locret_E0F6:
0000E1B4 4E75                       		rts	
0000E1B6                            ; ===========================================================================
0000E1B6                            
0000E1B6                            loc_E0F8:
0000E1B6 5428 0025                  		addq.b	#2,$25(a0)
0000E1BA 4E75                       		rts	
0000E1BC                            ; ===========================================================================
0000E1BC                            
0000E1BC                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E1BC 6100 0000                  		bsr.w	Obj43_Stop
0000E1C0 6100 F4DE                  		bsr.w	SpeedToPos
0000E1C4 6100 0000                  		bsr.w	ObjHitFloor
0000E1C8 0C41 FFF8                  		cmpi.w	#-8,d1
0000E1CC 6D00                       		blt.s	Obj43_Jump
0000E1CE 0C41 000C                  		cmpi.w	#$C,d1
0000E1D2 6C00                       		bge.s	Obj43_Jump
0000E1D4 D368 000C                  		add.w	d1,$C(a0)
0000E1D8 4E75                       		rts	
0000E1DA                            ; ===========================================================================
0000E1DA                            
0000E1DA                            Obj43_Jump:
0000E1DA 5428 0025                  		addq.b	#2,$25(a0)
0000E1DE 08E8 0000 0032             		bset	#0,$32(a0)
0000E1E4 6700                       		beq.s	locret_E12E
0000E1E6 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E1EC                            
0000E1EC                            locret_E12E:
0000E1EC 4E75                       		rts	
0000E1EE                            ; ===========================================================================
0000E1EE                            
0000E1EE                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E1EE 6100 F484                  		bsr.w	ObjectFall
0000E1F2 4A68 0012                  		tst.w	$12(a0)
0000E1F6 6B00                       		bmi.s	locret_E150
0000E1F8 6100 0000                  		bsr.w	ObjHitFloor
0000E1FC 4A41                       		tst.w	d1
0000E1FE 6A00                       		bpl.s	locret_E150
0000E200 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E204 5528 0025                  		subq.b	#2,$25(a0)
0000E208 317C 0000 0012             		move.w	#0,$12(a0)
0000E20E                            
0000E20E                            locret_E150:
0000E20E 4E75                       		rts	
0000E210                            
0000E210                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E210                            
0000E210                            
0000E210                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E210 4A28 0032                  		tst.b	$32(a0)
0000E214 6B00                       		bmi.s	locret_E188
0000E216 3038 D008                  		move.w	($FFFFD008).w,d0
0000E21A 0440 0030                  		subi.w	#$30,d0
0000E21E 9068 0008                  		sub.w	8(a0),d0
0000E222 6400                       		bcc.s	locret_E188
0000E224 117C 0000 001C             		move.b	#0,$1C(a0)
0000E22A 117C 000E 0020             		move.b	#$E,$20(a0)
0000E230 4268 0010                  		clr.w	$10(a0)
0000E234 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E23A 117C 0002 0025             		move.b	#2,$25(a0)
0000E240 08E8 0007 0032             		bset	#7,$32(a0)
0000E246                            
0000E246                            locret_E188:
0000E246 4E75                       		rts	
0000E248                            ; End of function Obj43_Stop
0000E248                            
0000E248                            ; ===========================================================================
0000E248                            Ani_obj43:
0000E248                            	include "_anim\obj43.asm"
0000E248                            ; ---------------------------------------------------------------------------
0000E248                            ; Animation script - Roller enemy
0000E248                            ; ---------------------------------------------------------------------------
0000E248 0000                       		dc.w byte_E190-Ani_obj43
0000E24A 0000                       		dc.w byte_E196-Ani_obj43
0000E24C 0000                       		dc.w byte_E19C-Ani_obj43
0000E24E 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E254 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E25A 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E260 00                         		even
0000E260 00                         		even
0000E260                            
0000E260                            ; ---------------------------------------------------------------------------
0000E260                            ; Sprite mappings - Roller enemy (SYZ)
0000E260                            ; ---------------------------------------------------------------------------
0000E260                            Map_obj43:
0000E260                            	include "_maps\obj43.asm"
0000E260                            ; ---------------------------------------------------------------------------
0000E260                            ; Sprite mappings - Roller enemy (SYZ)
0000E260                            ; ---------------------------------------------------------------------------
0000E260 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000E264 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000E268 0000                       		dc.w byte_E1CE-Map_obj43
0000E26A 02                         byte_E1AC:	dc.b 2
0000E26B DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000E270 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000E275 02                         byte_E1B7:	dc.b 2
0000E276 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000E27B FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000E280 01                         byte_E1C2:	dc.b 1
0000E281 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000E286 01                         byte_E1C8:	dc.b 1
0000E287 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000E28C 01                         byte_E1CE:	dc.b 1
0000E28D F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000E292                            		even
0000E292                            		even
0000E292                            
0000E292                            ; ===========================================================================
0000E292                            ; ---------------------------------------------------------------------------
0000E292                            ; Object 44 - walls (GHZ)
0000E292                            ; ---------------------------------------------------------------------------
0000E292                            
0000E292                            Obj44:					; XREF: Obj_Index
0000E292 7000                       		moveq	#0,d0
0000E294 1028 0024                  		move.b	$24(a0),d0
0000E298 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E29C 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E2A0                            ; ===========================================================================
0000E2A0 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E2A2 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E2A4 0000                       		dc.w Obj44_Display-Obj44_Index
0000E2A6                            ; ===========================================================================
0000E2A6                            
0000E2A6                            Obj44_Main:				; XREF: Obj44_Index
0000E2A6 5428 0024                  		addq.b	#2,$24(a0)
0000E2AA 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E2B2 317C 434C 0002             		move.w	#$434C,2(a0)
0000E2B8 0028 0004 0001             		ori.b	#4,1(a0)
0000E2BE 117C 0008 0019             		move.b	#8,$19(a0)
0000E2C4 117C 0006 0018             		move.b	#6,$18(a0)
0000E2CA 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E2D0 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E2D6 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E2D8 5428 0024                  		addq.b	#2,$24(a0)
0000E2DC 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E2DE                            ; ===========================================================================
0000E2DE                            
0000E2DE                            Obj44_Solid:				; XREF: Obj44_Index
0000E2DE 323C 0013                  		move.w	#$13,d1
0000E2E2 343C 0028                  		move.w	#$28,d2
0000E2E6 6100 A872                  		bsr.w	Obj44_SolidWall
0000E2EA                            
0000E2EA                            Obj44_Display:				; XREF: Obj44_Index
0000E2EA 6100 F3DA                  		bsr.w	DisplaySprite
0000E2EE 3028 0008                  		move.w	8(a0),d0
0000E2F2 0240 FF80                  		andi.w	#$FF80,d0
0000E2F6 3238 F700                  		move.w	($FFFFF700).w,d1
0000E2FA 0441 0080                  		subi.w	#$80,d1
0000E2FE 0241 FF80                  		andi.w	#$FF80,d1
0000E302 9041                       		sub.w	d1,d0
0000E304 0C40 0280                  		cmpi.w	#$280,d0
0000E308 6200 F3F8                  		bhi.w	DeleteObject
0000E30C 4E75                       		rts	
0000E30E                            ; ===========================================================================
0000E30E                            ; ---------------------------------------------------------------------------
0000E30E                            ; Sprite mappings - walls (GHZ)
0000E30E                            ; ---------------------------------------------------------------------------
0000E30E                            Map_obj44:
0000E30E                            	include "_maps\obj44.asm"
0000E30E                            ; ---------------------------------------------------------------------------
0000E30E                            ; Sprite mappings - walls (GHZ)
0000E30E                            ; ---------------------------------------------------------------------------
0000E30E 0000                       		dc.w byte_E256-Map_obj44
0000E310 0000                       		dc.w byte_E26B-Map_obj44
0000E312 0000                       		dc.w byte_E280-Map_obj44
0000E314 04                         byte_E256:	dc.b 4
0000E315 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E31A F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E31F 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E324 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E329 04                         byte_E26B:	dc.b 4
0000E32A E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E32F F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E334 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E339 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E33E 04                         byte_E280:	dc.b 4
0000E33F E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E344 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E349 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E34E 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E354 00                         		even
0000E354 00                         		even
0000E354                            
0000E354                            ; ===========================================================================
0000E354                            ; ---------------------------------------------------------------------------
0000E354                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E354                            ; ---------------------------------------------------------------------------
0000E354                            
0000E354                            Obj13:					; XREF: Obj_Index
0000E354 7000                       		moveq	#0,d0
0000E356 1028 0024                  		move.b	$24(a0),d0
0000E35A 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E35E 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E362 6000 0000                  		bra.w	Obj14_ChkDel
0000E366                            ; ===========================================================================
0000E366 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E368 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E36A                            ; ---------------------------------------------------------------------------
0000E36A                            ;
0000E36A                            ; Lava ball production rates
0000E36A                            ;
0000E36A 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E370                            ; ===========================================================================
0000E370                            
0000E370                            Obj13_Main:				; XREF: Obj13_Index
0000E370 5428 0024                  		addq.b	#2,$24(a0)
0000E374 1028 0028                  		move.b	$28(a0),d0
0000E378 E848                       		lsr.w	#4,d0
0000E37A 0240 000F                  		andi.w	#$F,d0
0000E37E 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E384 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E38A 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E390                            
0000E390                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E390 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E394 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E396 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E39C 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E3A0 6600                       		bne.s	locret_E302
0000E3A2 6100 F7A8                  		bsr.w	SingleObjLoad
0000E3A6 6600                       		bne.s	locret_E302
0000E3A8 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E3AC 3368 0008 0008             		move.w	8(a0),8(a1)
0000E3B2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E3B8 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E3BE                            
0000E3BE                            locret_E302:
0000E3BE 4E75                       		rts	
0000E3C0                            ; ===========================================================================
0000E3C0                            ; ---------------------------------------------------------------------------
0000E3C0                            ; Object 14 - lava balls (MZ, SLZ)
0000E3C0                            ; ---------------------------------------------------------------------------
0000E3C0                            
0000E3C0                            Obj14:					; XREF: Obj_Index
0000E3C0 7000                       		moveq	#0,d0
0000E3C2 1028 0024                  		move.b	$24(a0),d0
0000E3C6 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E3CA 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E3CE 6000 F2F6                  		bra.w	DisplaySprite
0000E3D2                            ; ===========================================================================
0000E3D2 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E3D4 0000                       		dc.w Obj14_Action-Obj14_Index
0000E3D6 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E3D8                            
0000E3D8 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E3E2 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E3EA                            ; ===========================================================================
0000E3EA                            
0000E3EA                            Obj14_Main:				; XREF: Obj14_Index
0000E3EA 5428 0024                  		addq.b	#2,$24(a0)
0000E3EE 117C 0008 0016             		move.b	#8,$16(a0)
0000E3F4 117C 0008 0017             		move.b	#8,$17(a0)
0000E3FA 217C 0000 B444 0004        		move.l	#Map_obj14,4(a0)
0000E402 317C 0345 0002             		move.w	#$345,2(a0)
0000E408 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E40E 6600                       		bne.s	loc_E35A
0000E410 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E416                            
0000E416                            loc_E35A:
0000E416 117C 0004 0001             		move.b	#4,1(a0)
0000E41C 117C 0003 0018             		move.b	#3,$18(a0)
0000E422 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E428 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E42E 4A28 0029                  		tst.b	$29(a0)
0000E432 6700                       		beq.s	Obj14_SetSpeed
0000E434 5428 0018                  		addq.b	#2,$18(a0)
0000E438                            
0000E438                            Obj14_SetSpeed:
0000E438 7000                       		moveq	#0,d0
0000E43A 1028 0028                  		move.b	$28(a0),d0
0000E43E D040                       		add.w	d0,d0
0000E440 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E446 117C 0008 0019             		move.b	#8,$19(a0)
0000E44C 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E452 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E454 117C 0010 0019             		move.b	#$10,$19(a0)
0000E45A 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E460 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E466 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E46C                            
0000E46C                            Obj14_PlaySnd:
0000E46C 303C 00AE                  		move.w	#$AE,d0
0000E470 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E476                            
0000E476                            Obj14_Action:				; XREF: Obj14_Index
0000E476 7000                       		moveq	#0,d0
0000E478 1028 0028                  		move.b	$28(a0),d0
0000E47C D040                       		add.w	d0,d0
0000E47E 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E482 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E486 6100 F218                  		bsr.w	SpeedToPos
0000E48A 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E490 6100 C360                  		bsr.w	AnimateSprite
0000E494                            
0000E494                            Obj14_ChkDel:				; XREF: Obj13
0000E494 3028 0008                  		move.w	8(a0),d0
0000E498 0240 FF80                  		andi.w	#$FF80,d0
0000E49C 3238 F700                  		move.w	($FFFFF700).w,d1
0000E4A0 0441 0080                  		subi.w	#$80,d1
0000E4A4 0241 FF80                  		andi.w	#$FF80,d1
0000E4A8 9041                       		sub.w	d1,d0
0000E4AA 0C40 0280                  		cmpi.w	#$280,d0
0000E4AE 6200 F252                  		bhi.w	DeleteObject
0000E4B2 4E75                       		rts	
0000E4B4                            ; ===========================================================================
0000E4B4 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E4B8 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E4BC 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E4C0 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E4C4 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E4C6                            ; ===========================================================================
0000E4C6                            ; lavaball types 00-03 fly up and fall back down
0000E4C6                            
0000E4C6                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E4C6 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000E4CC 3028 0030                  		move.w	$30(a0),d0
0000E4D0 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000E4D4 6400                       		bcc.s	loc_E41E	; if not, branch
0000E4D6 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000E4DA                            
0000E4DA                            loc_E41E:
0000E4DA 08A8 0001 0022             		bclr	#1,$22(a0)
0000E4E0 4A68 0012                  		tst.w	$12(a0)
0000E4E4 6A00                       		bpl.s	locret_E430
0000E4E6 08E8 0001 0022             		bset	#1,$22(a0)
0000E4EC                            
0000E4EC                            locret_E430:
0000E4EC 4E75                       		rts	
0000E4EE                            ; ===========================================================================
0000E4EE                            ; lavaball type	04 flies up until it hits the ceiling
0000E4EE                            
0000E4EE                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000E4EE 08E8 0001 0022             		bset	#1,$22(a0)
0000E4F4 6100 0000                  		bsr.w	ObjHitCeiling
0000E4F8 4A41                       		tst.w	d1
0000E4FA 6A00                       		bpl.s	locret_E452
0000E4FC 117C 0008 0028             		move.b	#8,$28(a0)
0000E502 117C 0001 001C             		move.b	#1,$1C(a0)
0000E508 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000E50E                            
0000E50E                            locret_E452:
0000E50E 4E75                       		rts	
0000E510                            ; ===========================================================================
0000E510                            ; lavaball type	05 falls down until it hits the	floor
0000E510                            
0000E510                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000E510 08A8 0001 0022             		bclr	#1,$22(a0)
0000E516 6100 0000                  		bsr.w	ObjHitFloor
0000E51A 4A41                       		tst.w	d1
0000E51C 6A00                       		bpl.s	locret_E474
0000E51E 117C 0008 0028             		move.b	#8,$28(a0)
0000E524 117C 0001 001C             		move.b	#1,$1C(a0)
0000E52A 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000E530                            
0000E530                            locret_E474:
0000E530 4E75                       		rts	
0000E532                            ; ===========================================================================
0000E532                            ; lavaball types 06-07 move sideways
0000E532                            
0000E532                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000E532 08E8 0000 0022             		bset	#0,$22(a0)
0000E538 76F8                       		moveq	#-8,d3
0000E53A 6100 0000                  		bsr.w	ObjHitWallLeft
0000E53E 4A41                       		tst.w	d1
0000E540 6A00                       		bpl.s	locret_E498
0000E542 117C 0008 0028             		move.b	#8,$28(a0)
0000E548 117C 0003 001C             		move.b	#3,$1C(a0)
0000E54E 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E554                            
0000E554                            locret_E498:
0000E554 4E75                       		rts	
0000E556                            ; ===========================================================================
0000E556                            
0000E556                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000E556 08A8 0000 0022             		bclr	#0,$22(a0)
0000E55C 7608                       		moveq	#8,d3
0000E55E 6100 0000                  		bsr.w	ObjHitWallRight
0000E562 4A41                       		tst.w	d1
0000E564 6A00                       		bpl.s	locret_E4BC
0000E566 117C 0008 0028             		move.b	#8,$28(a0)
0000E56C 117C 0003 001C             		move.b	#3,$1C(a0)
0000E572 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E578                            
0000E578                            locret_E4BC:
0000E578 4E75                       		rts	
0000E57A                            ; ===========================================================================
0000E57A                            
0000E57A                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000E57A 4E75                       		rts	
0000E57C                            ; ===========================================================================
0000E57C                            
0000E57C                            Obj14_Delete:				; XREF: Obj14_Index
0000E57C 6000 F184                  		bra.w	DeleteObject
0000E580                            ; ===========================================================================
0000E580                            Ani_obj14:
0000E580                            	include "_anim\obj14.asm"
0000E580                            ; ---------------------------------------------------------------------------
0000E580                            ; Animation script - lava balls
0000E580                            ; ---------------------------------------------------------------------------
0000E580 0000                       		dc.w byte_E4CC-Ani_obj14
0000E582 0000                       		dc.w byte_E4D2-Ani_obj14
0000E584 0000                       		dc.w byte_E4D6-Ani_obj14
0000E586 0000                       		dc.w byte_E4DC-Ani_obj14
0000E588 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000E58E 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000E592 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000E598 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000E59C                            		even
0000E59C                            		even
0000E59C                            
0000E59C                            ; ===========================================================================
0000E59C                            ; ---------------------------------------------------------------------------
0000E59C                            ; Object 6D - flame thrower (SBZ)
0000E59C                            ; ---------------------------------------------------------------------------
0000E59C                            
0000E59C                            Obj6D:					; XREF: Obj_Index
0000E59C 7000                       		moveq	#0,d0
0000E59E 1028 0024                  		move.b	$24(a0),d0
0000E5A2 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000E5A6 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000E5AA                            ; ===========================================================================
0000E5AA 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000E5AC 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000E5AE                            ; ===========================================================================
0000E5AE                            
0000E5AE                            Obj6D_Main:				; XREF: Obj6D_Index
0000E5AE 5428 0024                  		addq.b	#2,$24(a0)
0000E5B2 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000E5BA 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000E5C0 0028 0004 0001             		ori.b	#4,1(a0)
0000E5C6 117C 0001 0018             		move.b	#1,$18(a0)
0000E5CC 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E5D2 117C 000C 0019             		move.b	#$C,$19(a0)
0000E5D8 1028 0028                  		move.b	$28(a0),d0
0000E5DC 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000E5E0 D040                       		add.w	d0,d0		; multiply by 2
0000E5E2 3140 0030                  		move.w	d0,$30(a0)
0000E5E6 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000E5EA 1028 0028                  		move.b	$28(a0),d0
0000E5EE 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000E5F2 EB48                       		lsl.w	#5,d0		; multiply by $20
0000E5F4 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000E5F8 117C 000A 0036             		move.b	#$A,$36(a0)
0000E5FE 0828 0001 0022             		btst	#1,$22(a0)
0000E604 6700                       		beq.s	Obj6D_Action
0000E606 117C 0002 001C             		move.b	#2,$1C(a0)
0000E60C 117C 0015 0036             		move.b	#$15,$36(a0)
0000E612                            
0000E612                            Obj6D_Action:				; XREF: Obj6D_Index
0000E612 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000E616 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000E618 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000E61E 0868 0000 001C             		bchg	#0,$1C(a0)
0000E624 6700                       		beq.s	loc_E57A
0000E626 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000E62C 303C 00B3                  		move.w	#$B3,d0
0000E630 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flame sound
0000E636                            
0000E636                            loc_E57A:
0000E636 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000E63C 6100 C1B4                  		bsr.w	AnimateSprite
0000E640 117C 0000 0020             		move.b	#0,$20(a0)
0000E646 1028 0036                  		move.b	$36(a0),d0
0000E64A B028 001A                  		cmp.b	$1A(a0),d0
0000E64E 6600                       		bne.s	Obj6D_ChkDel
0000E650 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000E656                            
0000E656                            Obj6D_ChkDel:
0000E656 3028 0008                  		move.w	8(a0),d0
0000E65A 0240 FF80                  		andi.w	#$FF80,d0
0000E65E 3238 F700                  		move.w	($FFFFF700).w,d1
0000E662 0441 0080                  		subi.w	#$80,d1
0000E666 0241 FF80                  		andi.w	#$FF80,d1
0000E66A 9041                       		sub.w	d1,d0
0000E66C 0C40 0280                  		cmpi.w	#$280,d0
0000E670 6200 F090                  		bhi.w	DeleteObject
0000E674 6000 F050                  		bra.w	DisplaySprite
0000E678                            ; ===========================================================================
0000E678                            Ani_obj6D:
0000E678                            	include "_anim\obj6D.asm"
0000E678                            ; ---------------------------------------------------------------------------
0000E678                            ; Animation script - flamethrower (SBZ)
0000E678                            ; ---------------------------------------------------------------------------
0000E678 0000                       		dc.w byte_E5C4-Ani_obj6D
0000E67A 0000                       		dc.w byte_E5D2-Ani_obj6D
0000E67C 0000                       		dc.w byte_E5DC-Ani_obj6D
0000E67E 0000                       		dc.w byte_E5EA-Ani_obj6D
0000E680 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000E68E 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000E698 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000E6A6 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000E6B0                            		even
0000E6B0                            		even
0000E6B0                            
0000E6B0                            ; ---------------------------------------------------------------------------
0000E6B0                            ; Sprite mappings - flame thrower (SBZ)
0000E6B0                            ; ---------------------------------------------------------------------------
0000E6B0                            Map_obj6D:
0000E6B0                            	include "_maps\obj6D.asm"
0000E6B0                            ; ---------------------------------------------------------------------------
0000E6B0                            ; Sprite mappings - flame thrower (SBZ)
0000E6B0                            ; ---------------------------------------------------------------------------
0000E6B0 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000E6B4 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000E6B8 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000E6BC 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000E6C0 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000E6C4 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000E6C8 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000E6CC 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000E6D0 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000E6D4 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000E6D8 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000E6DC 01                         byte_E620:	dc.b 1
0000E6DD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E6E2 02                         byte_E626:	dc.b 2
0000E6E3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E6E8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E6ED 02                         byte_E631:	dc.b 2
0000E6EE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E6F3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E6F8 03                         byte_E63C:	dc.b 3
0000E6F9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E6FE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E703 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E708 03                         byte_E64C:	dc.b 3
0000E709 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E70E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E713 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E718 04                         byte_E65C:	dc.b 4
0000E719 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E71E 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E723 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E728 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E72D 04                         byte_E671:	dc.b 4
0000E72E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E733 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E738 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E73D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E742 05                         byte_E686:	dc.b 5
0000E743 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000E748 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E74D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E752 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E757 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E75C 05                         byte_E6A0:	dc.b 5
0000E75D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E762 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E767 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E76C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E771 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E776 06                         byte_E6BA:	dc.b 6
0000E777 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000E77C F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000E781 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E786 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000E78B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E790 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E795 06                         byte_E6D9:	dc.b 6
0000E796 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000E79B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E7A0 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000E7A5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E7AA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E7AF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E7B4 01                         byte_E6F8:	dc.b 1
0000E7B5 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E7BA 02                         byte_E6FE:	dc.b 2
0000E7BB 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E7C0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E7C5 02                         byte_E709:	dc.b 2
0000E7C6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E7CB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E7D0 03                         byte_E714:	dc.b 3
0000E7D1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E7D6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E7DB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E7E0 03                         byte_E724:	dc.b 3
0000E7E1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E7E6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E7EB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E7F0 04                         byte_E734:	dc.b 4
0000E7F1 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E7F6 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E7FB 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E800 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E805 04                         byte_E749:	dc.b 4
0000E806 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E80B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E810 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E815 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E81A 05                         byte_E75E:	dc.b 5
0000E81B F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000E820 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E825 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E82A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E82F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E834 05                         byte_E778:	dc.b 5
0000E835 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E83A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E83F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E844 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E849 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E84E 06                         byte_E792:	dc.b 6
0000E84F E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000E854 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000E859 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E85E 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000E863 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E868 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E86D 06                         byte_E7B1:	dc.b 6
0000E86E E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000E873 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E878 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000E87D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E882 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E887 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E88C                            		even
0000E88C                            		even
0000E88C                            
0000E88C                            ; ===========================================================================
0000E88C                            ; ---------------------------------------------------------------------------
0000E88C                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000E88C                            ; ---------------------------------------------------------------------------
0000E88C                            
0000E88C                            Obj46:					; XREF: Obj_Index
0000E88C 7000                       		moveq	#0,d0
0000E88E 1028 0024                  		move.b	$24(a0),d0
0000E892 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000E896 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000E89A                            ; ===========================================================================
0000E89A 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000E89C 0000                       		dc.w Obj46_Action-Obj46_Index
0000E89E                            ; ===========================================================================
0000E89E                            
0000E89E                            Obj46_Main:				; XREF: Obj46_Index
0000E89E 5428 0024                  		addq.b	#2,$24(a0)
0000E8A2 117C 000F 0016             		move.b	#$F,$16(a0)
0000E8A8 117C 000F 0017             		move.b	#$F,$17(a0)
0000E8AE 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000E8B6 317C 4000 0002             		move.w	#$4000,2(a0)
0000E8BC 117C 0004 0001             		move.b	#4,1(a0)
0000E8C2 117C 0003 0018             		move.b	#3,$18(a0)
0000E8C8 117C 0010 0019             		move.b	#$10,$19(a0)
0000E8CE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E8D4 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000E8DA                            
0000E8DA                            Obj46_Action:				; XREF: Obj46_Index
0000E8DA 4A28 0001                  		tst.b	1(a0)
0000E8DE 6A00                       		bpl.s	Obj46_ChkDel
0000E8E0 7000                       		moveq	#0,d0
0000E8E2 1028 0028                  		move.b	$28(a0),d0	; get object type
0000E8E6 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000E8EA D040                       		add.w	d0,d0
0000E8EC 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000E8F0 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000E8F4 323C 001B                  		move.w	#$1B,d1
0000E8F8 343C 0010                  		move.w	#$10,d2
0000E8FC 363C 0011                  		move.w	#$11,d3
0000E900 3828 0008                  		move.w	8(a0),d4
0000E904 6100 0000                  		bsr.w	SolidObject
0000E908                            
0000E908                            Obj46_ChkDel:
0000E908 6100 EDBC                  		bsr.w	DisplaySprite
0000E90C 3028 0008                  		move.w	8(a0),d0
0000E910 0240 FF80                  		andi.w	#$FF80,d0
0000E914 3238 F700                  		move.w	($FFFFF700).w,d1
0000E918 0441 0080                  		subi.w	#$80,d1
0000E91C 0241 FF80                  		andi.w	#$FF80,d1
0000E920 9041                       		sub.w	d1,d0
0000E922 0C40 0280                  		cmpi.w	#$280,d0
0000E926 6200 EDDA                  		bhi.w	DeleteObject
0000E92A 4E75                       		rts	
0000E92C                            ; ===========================================================================
0000E92C 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000E92E 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000E930 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000E932 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000E934 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000E936                            ; ===========================================================================
0000E936                            
0000E936                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000E936 4E75                       		rts	
0000E938                            ; ===========================================================================
0000E938                            
0000E938                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000E938 3038 D008                  		move.w	($FFFFD008).w,d0
0000E93C 9068 0008                  		sub.w	8(a0),d0
0000E940 6400                       		bcc.s	loc_E888
0000E942 4440                       		neg.w	d0
0000E944                            
0000E944                            loc_E888:
0000E944 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000E948 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000E94A 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000E950                            
0000E950                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000E950 7000                       		moveq	#0,d0
0000E952 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000E956 0828 0003 0028             		btst	#3,$28(a0)
0000E95C 6700                       		beq.s	loc_E8A8
0000E95E 4440                       		neg.w	d0
0000E960 0640 0010                  		addi.w	#$10,d0
0000E964                            
0000E964                            loc_E8A8:
0000E964 3228 0030                  		move.w	$30(a0),d1
0000E968 9240                       		sub.w	d0,d1
0000E96A 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000E96E 4E75                       		rts	
0000E970                            ; ===========================================================================
0000E970                            
0000E970                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000E970 6100 ED2E                  		bsr.w	SpeedToPos
0000E974 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000E97A 6100 0000                  		bsr.w	ObjHitFloor
0000E97E 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000E980 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000E984 D368 000C                  		add.w	d1,$C(a0)
0000E988 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000E98C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E992 117C 0004 0028             		move.b	#4,$28(a0)
0000E998 3011                       		move.w	(a1),d0
0000E99A 0240 03FF                  		andi.w	#$3FF,d0
0000E99E 0C40 02E8                  		cmpi.w	#$2E8,d0
0000E9A2 6400                       		bcc.s	locret_E8EE
0000E9A4 117C 0000 0028             		move.b	#0,$28(a0)
0000E9AA                            
0000E9AA                            locret_E8EE:
0000E9AA 4E75                       		rts	
0000E9AC                            ; ===========================================================================
0000E9AC                            
0000E9AC                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000E9AC 7000                       		moveq	#0,d0
0000E9AE 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000E9B2 E648                       		lsr.w	#3,d0
0000E9B4 3228 0030                  		move.w	$30(a0),d1
0000E9B8 9240                       		sub.w	d0,d1
0000E9BA 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000E9BE 4E75                       		rts	
0000E9C0                            ; ===========================================================================
0000E9C0                            ; ---------------------------------------------------------------------------
0000E9C0                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000E9C0                            ; ---------------------------------------------------------------------------
0000E9C0                            Map_obj46:
0000E9C0                            	include "_maps\obj46.asm"
0000E9C0                            ; ---------------------------------------------------------------------------
0000E9C0                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000E9C0                            ; ---------------------------------------------------------------------------
0000E9C0 0000                       		dc.w byte_E906-Map_obj46
0000E9C2 01                         byte_E906:	dc.b 1
0000E9C3 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000E9C8                            		even
0000E9C8                            		even
0000E9C8                            
0000E9C8                            ; ===========================================================================
0000E9C8                            ; ---------------------------------------------------------------------------
0000E9C8                            ; Object 12 - lamp (SYZ)
0000E9C8                            ; ---------------------------------------------------------------------------
0000E9C8                            
0000E9C8                            Obj12:					; XREF: Obj_Index
0000E9C8 7000                       		moveq	#0,d0
0000E9CA 1028 0024                  		move.b	$24(a0),d0
0000E9CE 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000E9D2 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000E9D6                            ; ===========================================================================
0000E9D6 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000E9D8 0000                       		dc.w Obj12_Animate-Obj12_Index
0000E9DA                            ; ===========================================================================
0000E9DA                            
0000E9DA                            Obj12_Main:				; XREF: Obj12_Index
0000E9DA 5428 0024                  		addq.b	#2,$24(a0)
0000E9DE 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000E9E6 317C 0000 0002             		move.w	#0,2(a0)
0000E9EC 117C 0004 0001             		move.b	#4,1(a0)
0000E9F2 117C 0010 0019             		move.b	#$10,$19(a0)
0000E9F8 117C 0006 0018             		move.b	#6,$18(a0)
0000E9FE                            
0000E9FE                            Obj12_Animate:				; XREF: Obj12_Index
0000E9FE 5328 001E                  		subq.b	#1,$1E(a0)
0000EA02 6A00                       		bpl.s	Obj12_ChkDel
0000EA04 117C 0007 001E             		move.b	#7,$1E(a0)
0000EA0A 5228 001A                  		addq.b	#1,$1A(a0)
0000EA0E 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000EA14 6500                       		bcs.s	Obj12_ChkDel
0000EA16 117C 0000 001A             		move.b	#0,$1A(a0)
0000EA1C                            
0000EA1C                            Obj12_ChkDel:
0000EA1C 3028 0008                  		move.w	8(a0),d0
0000EA20 0240 FF80                  		andi.w	#$FF80,d0
0000EA24 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA28 0441 0080                  		subi.w	#$80,d1
0000EA2C 0241 FF80                  		andi.w	#$FF80,d1
0000EA30 9041                       		sub.w	d1,d0
0000EA32 0C40 0280                  		cmpi.w	#$280,d0
0000EA36 6200 ECCA                  		bhi.w	DeleteObject
0000EA3A 6000 EC8A                  		bra.w	DisplaySprite
0000EA3E                            ; ===========================================================================
0000EA3E                            ; ---------------------------------------------------------------------------
0000EA3E                            ; Sprite mappings - lamp (SYZ)
0000EA3E                            ; ---------------------------------------------------------------------------
0000EA3E                            Map_obj12:
0000EA3E                            	include "_maps\obj12.asm"
0000EA3E                            ; ---------------------------------------------------------------------------
0000EA3E                            ; Sprite mappings - lamp (SYZ)
0000EA3E                            ; ---------------------------------------------------------------------------
0000EA3E 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000EA42 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000EA46 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000EA4A 02                         byte_E98E:	dc.b 2
0000EA4B F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000EA50 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000EA55 02                         byte_E999:	dc.b 2
0000EA56 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000EA5B 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000EA60 02                         byte_E9A4:	dc.b 2
0000EA61 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000EA66 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000EA6B 02                         byte_E9AF:	dc.b 2
0000EA6C F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000EA71 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000EA76 02                         byte_E9BA:	dc.b 2
0000EA77 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000EA7C 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000EA81 02                         byte_E9C5:	dc.b 2
0000EA82 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000EA87 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000EA8C                            		even
0000EA8C                            		even
0000EA8C                            
0000EA8C                            ; ===========================================================================
0000EA8C                            ; ---------------------------------------------------------------------------
0000EA8C                            ; Object 47 - pinball bumper (SYZ)
0000EA8C                            ; ---------------------------------------------------------------------------
0000EA8C                            
0000EA8C                            Obj47:					; XREF: Obj_Index
0000EA8C 7000                       		moveq	#0,d0
0000EA8E 1028 0024                  		move.b	$24(a0),d0
0000EA92 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000EA96 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000EA9A                            ; ===========================================================================
0000EA9A 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000EA9C 0000                       		dc.w Obj47_Hit-Obj47_Index
0000EA9E                            ; ===========================================================================
0000EA9E                            
0000EA9E                            Obj47_Main:				; XREF: Obj47_Index
0000EA9E 5428 0024                  		addq.b	#2,$24(a0)
0000EAA2 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000EAAA 317C 0380 0002             		move.w	#$380,2(a0)
0000EAB0 117C 0004 0001             		move.b	#4,1(a0)
0000EAB6 117C 0010 0019             		move.b	#$10,$19(a0)
0000EABC 117C 0001 0018             		move.b	#1,$18(a0)
0000EAC2 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000EAC8                            
0000EAC8                            Obj47_Hit:				; XREF: Obj47_Index
0000EAC8 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000EACC 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000EAD0 4228 0021                  		clr.b	$21(a0)
0000EAD4 43F8 D000                  		lea	($FFFFD000).w,a1
0000EAD8 3228 0008                  		move.w	8(a0),d1
0000EADC 3428 000C                  		move.w	$C(a0),d2
0000EAE0 9269 0008                  		sub.w	8(a1),d1
0000EAE4 9469 000C                  		sub.w	$C(a1),d2
0000EAE8 4EB9 0000 2CA8             		jsr	(CalcAngle).l
0000EAEE 4EB9 0000 29DA             		jsr	(CalcSine).l
0000EAF4 C3FC F900                  		muls.w	#-$700,d1
0000EAF8 E081                       		asr.l	#8,d1
0000EAFA 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000EAFE C1FC F900                  		muls.w	#-$700,d0
0000EB02 E080                       		asr.l	#8,d0
0000EB04 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000EB08 08E9 0001 0022             		bset	#1,$22(a1)
0000EB0E 08A9 0004 0022             		bclr	#4,$22(a1)
0000EB14 08A9 0005 0022             		bclr	#5,$22(a1)
0000EB1A 4229 003C                  		clr.b	$3C(a1)
0000EB1E 117C 0001 001C             		move.b	#1,$1C(a0)
0000EB24 303C 00B4                  		move.w	#$B4,d0
0000EB28 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play bumper sound
0000EB2E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EB32 7000                       		moveq	#0,d0
0000EB34 1028 0023                  		move.b	$23(a0),d0
0000EB38 6700                       		beq.s	Obj47_Score
0000EB3A 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000EB40 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000EB42 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000EB46                            
0000EB46                            Obj47_Score:
0000EB46 7001                       		moveq	#1,d0
0000EB48 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000EB4E 6100 EFFC                  		bsr.w	SingleObjLoad
0000EB52 6600                       		bne.s	Obj47_Display
0000EB54 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000EB58 3368 0008 0008             		move.w	8(a0),8(a1)
0000EB5E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EB64 137C 0004 001A             		move.b	#4,$1A(a1)
0000EB6A                            
0000EB6A                            Obj47_Display:
0000EB6A 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000EB70 6100 BC80                  		bsr.w	AnimateSprite
0000EB74 3028 0008                  		move.w	8(a0),d0
0000EB78 0240 FF80                  		andi.w	#$FF80,d0
0000EB7C 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB80 0441 0080                  		subi.w	#$80,d1
0000EB84 0241 FF80                  		andi.w	#$FF80,d1
0000EB88 9041                       		sub.w	d1,d0
0000EB8A 0C40 0280                  		cmpi.w	#$280,d0
0000EB8E 6200                       		bhi.s	Obj47_ChkHit
0000EB90 6000 EB34                  		bra.w	DisplaySprite
0000EB94                            ; ===========================================================================
0000EB94                            
0000EB94                            Obj47_ChkHit:				; XREF: Obj47_Display
0000EB94 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EB98 7000                       		moveq	#0,d0
0000EB9A 1028 0023                  		move.b	$23(a0),d0
0000EB9E 6700                       		beq.s	Obj47_Delete
0000EBA0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EBA6                            
0000EBA6                            Obj47_Delete:
0000EBA6 6000 EB5A                  		bra.w	DeleteObject
0000EBAA                            ; ===========================================================================
0000EBAA                            Ani_obj47:
0000EBAA                            	include "_anim\obj47.asm"
0000EBAA                            ; ---------------------------------------------------------------------------
0000EBAA                            ; Animation script - flamethrower (SBZ)
0000EBAA                            ; ---------------------------------------------------------------------------
0000EBAA 0000                       		dc.w byte_EAF4-Ani_obj47
0000EBAC 0000                       		dc.w byte_EAF8-Ani_obj47
0000EBAE 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000EBB2 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000EBBA                            		even
0000EBBA                            		even
0000EBBA                            
0000EBBA                            ; ---------------------------------------------------------------------------
0000EBBA                            ; Sprite mappings - pinball bumper (SYZ)
0000EBBA                            ; ---------------------------------------------------------------------------
0000EBBA                            Map_obj47:
0000EBBA                            	include "_maps\obj47.asm"
0000EBBA                            ; ---------------------------------------------------------------------------
0000EBBA                            ; Sprite mappings - pinball bumper (SYZ)
0000EBBA                            ; ---------------------------------------------------------------------------
0000EBBA 0000                       		dc.w byte_EB06-Map_obj47
0000EBBC 0000                       		dc.w byte_EB11-Map_obj47
0000EBBE 0000                       		dc.w byte_EB1C-Map_obj47
0000EBC0 02                         byte_EB06:	dc.b 2
0000EBC1 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000EBC6 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000EBCB 02                         byte_EB11:	dc.b 2
0000EBCC F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000EBD1 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000EBD6 02                         byte_EB1C:	dc.b 2
0000EBD7 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000EBDC F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000EBE2 00                         		even
0000EBE2 00                         		even
0000EBE2                            
0000EBE2                            ; ===========================================================================
0000EBE2                            ; ---------------------------------------------------------------------------
0000EBE2                            ; Object 0D - signpost at the end of a level
0000EBE2                            ; ---------------------------------------------------------------------------
0000EBE2                            
0000EBE2                            Obj0D:					; XREF: Obj_Index
0000EBE2 7000                       		moveq	#0,d0
0000EBE4 1028 0024                  		move.b	$24(a0),d0
0000EBE8 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000EBEC 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000EBF0 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000EBF6 6100 BBFA                  		bsr.w	AnimateSprite
0000EBFA 6100 EACA                  		bsr.w	DisplaySprite
0000EBFE 3028 0008                  		move.w	8(a0),d0
0000EC02 0240 FF80                  		andi.w	#$FF80,d0
0000EC06 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC0A 0441 0080                  		subi.w	#$80,d1
0000EC0E 0241 FF80                  		andi.w	#$FF80,d1
0000EC12 9041                       		sub.w	d1,d0
0000EC14 0C40 0280                  		cmpi.w	#$280,d0
0000EC18 6200 EAE8                  		bhi.w	DeleteObject
0000EC1C 4E75                       		rts	
0000EC1E                            ; ===========================================================================
0000EC1E 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000EC20 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000EC22 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000EC24 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000EC26 0000                       		dc.w locret_ED1A-Obj0D_Index
0000EC28                            ; ===========================================================================
0000EC28                            
0000EC28                            Obj0D_Main:				; XREF: Obj0D_Index
0000EC28 5428 0024                  		addq.b	#2,$24(a0)
0000EC2C 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000EC34 317C 0680 0002             		move.w	#$680,2(a0)
0000EC3A 117C 0004 0001             		move.b	#4,1(a0)
0000EC40 117C 0018 0019             		move.b	#$18,$19(a0)
0000EC46 117C 0004 0018             		move.b	#4,$18(a0)
0000EC4C                            
0000EC4C                            Obj0D_Touch:				; XREF: Obj0D_Index
0000EC4C 3038 D008                  		move.w	($FFFFD008).w,d0
0000EC50 9068 0008                  		sub.w	8(a0),d0
0000EC54 6500                       		bcs.s	locret_EBBA
0000EC56 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000EC5A 6400                       		bcc.s	locret_EBBA	; if not, branch
0000EC5C 303C 00CF                  		move.w	#$CF,d0
0000EC60 4EB9 0000 1396             		jsr	(PlaySound).l	; play signpost	sound
0000EC66 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000EC6A 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000EC70 5428 0024                  		addq.b	#2,$24(a0)
0000EC74                            
0000EC74                            locret_EBBA:
0000EC74 4E75                       		rts	
0000EC76                            ; ===========================================================================
0000EC76                            
0000EC76                            Obj0D_Spin:				; XREF: Obj0D_Index
0000EC76 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000EC7A 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000EC7C 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000EC82 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000EC86 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000EC8C 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000EC8E 5428 0024                  		addq.b	#2,$24(a0)
0000EC92                            
0000EC92                            Obj0D_Sparkle:
0000EC92 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000EC96 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000EC98 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000EC9E 7000                       		moveq	#0,d0
0000ECA0 1028 0034                  		move.b	$34(a0),d0
0000ECA4 5428 0034                  		addq.b	#2,$34(a0)
0000ECA8 0228 000E 0034             		andi.b	#$E,$34(a0)
0000ECAE 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000ECB2 6100 EE98                  		bsr.w	SingleObjLoad
0000ECB6 6600                       		bne.s	locret_EC42
0000ECB8 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000ECBC 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000ECC2 101A                       		move.b	(a2)+,d0
0000ECC4 4880                       		ext.w	d0
0000ECC6 D068 0008                  		add.w	8(a0),d0
0000ECCA 3340 0008                  		move.w	d0,8(a1)
0000ECCE 101A                       		move.b	(a2)+,d0
0000ECD0 4880                       		ext.w	d0
0000ECD2 D068 000C                  		add.w	$C(a0),d0
0000ECD6 3340 000C                  		move.w	d0,$C(a1)
0000ECDA 237C 0000 A070 0004        		move.l	#Map_obj25,4(a1)
0000ECE2 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000ECE8 137C 0004 0001             		move.b	#4,1(a1)
0000ECEE 137C 0002 0018             		move.b	#2,$18(a1)
0000ECF4 137C 0008 0019             		move.b	#8,$19(a1)
0000ECFA                            
0000ECFA                            locret_EC42:
0000ECFA 4E75                       		rts	
0000ECFC                            ; ===========================================================================
0000ECFC E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000ECFE 0808                       		dc.b	8,   8
0000ED00 F000                       		dc.b -$10,   0
0000ED02 18F8                       		dc.b  $18,  -8
0000ED04 00F8                       		dc.b	0,  -8
0000ED06 1000                       		dc.b  $10,   0
0000ED08 E808                       		dc.b -$18,   8
0000ED0A 1810                       		dc.b  $18, $10
0000ED0C                            ; ===========================================================================
0000ED0C                            
0000ED0C                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000ED0C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000ED10 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000ED14 0838 0001 D022             		btst	#1,($FFFFD022).w
0000ED1A 6600                       		bne.s	loc_EC70
0000ED1C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000ED22 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000ED28                            
0000ED28                            loc_EC70:
0000ED28 4A38 D000                  		tst.b	($FFFFD000).w
0000ED2C 6700                       		beq.s	loc_EC86
0000ED2E 3038 D008                  		move.w	($FFFFD008).w,d0
0000ED32 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000ED36 0641 0128                  		addi.w	#$128,d1
0000ED3A B041                       		cmp.w	d1,d0
0000ED3C 6500                       		bcs.s	locret_ECEE
0000ED3E                            
0000ED3E                            loc_EC86:
0000ED3E 5428 0024                  		addq.b	#2,$24(a0)
0000ED42                            
0000ED42                            ; ---------------------------------------------------------------------------
0000ED42                            ; Subroutine to	set up bonuses at the end of an	act
0000ED42                            ; ---------------------------------------------------------------------------
0000ED42                            
0000ED42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ED42                            
0000ED42                            
0000ED42                            GotThroughAct:				; XREF: Obj3E_EndAct
0000ED42 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000ED46 6600                       		bne.s	locret_ECEE
0000ED48 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000ED4E 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000ED52 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000ED56 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000ED5C 7010                       		moveq	#$10,d0
0000ED5E 4EB9 0000 15B2             		jsr	(LoadPLC2).l	; load title card patterns
0000ED64 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000ED6A 7000                       		moveq	#0,d0
0000ED6C 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000ED70 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000ED74 7200                       		moveq	#0,d1
0000ED76 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000ED7A D041                       		add.w	d1,d0		; add up your time
0000ED7C 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000ED80 7214                       		moveq	#$14,d1
0000ED82 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000ED84 6500                       		bcs.s	loc_ECD0	; if not, branch
0000ED86 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000ED88                            
0000ED88                            loc_ECD0:
0000ED88 D040                       		add.w	d0,d0
0000ED8A 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000ED90 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000ED94 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000ED98 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000ED9C 303C 008E                  		move.w	#$8E,d0
0000EDA0 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000EDA6                            
0000EDA6                            locret_ECEE:
0000EDA6 4E75                       		rts	
0000EDA8                            ; End of function GotThroughAct
0000EDA8                            
0000EDA8                            ; ===========================================================================
0000EDA8 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000EDBC 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000EDD2                            ; ===========================================================================
0000EDD2                            
0000EDD2                            locret_ED1A:				; XREF: Obj0D_Index
0000EDD2 4E75                       		rts	
0000EDD4                            ; ===========================================================================
0000EDD4                            Ani_obj0D:
0000EDD4                            	include "_anim\obj0D.asm"
0000EDD4                            ; ---------------------------------------------------------------------------
0000EDD4                            ; Animation script - signpost
0000EDD4                            ; ---------------------------------------------------------------------------
0000EDD4 0000                       		dc.w byte_ED24-Ani_obj0D
0000EDD6 0000                       		dc.w byte_ED28-Ani_obj0D
0000EDD8 0000                       		dc.w byte_ED2E-Ani_obj0D
0000EDDA 0000                       		dc.w byte_ED34-Ani_obj0D
0000EDDC 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000EDE0 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000EDE6 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000EDEC 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000EDF0 00                         		even
0000EDF0 00                         		even
0000EDF0                            
0000EDF0                            ; ---------------------------------------------------------------------------
0000EDF0                            ; Sprite mappings - signpost
0000EDF0                            ; ---------------------------------------------------------------------------
0000EDF0                            Map_obj0D:
0000EDF0                            	include "_maps\obj0D.asm"
0000EDF0                            ; ---------------------------------------------------------------------------
0000EDF0                            ; Sprite mappings - signpost
0000EDF0                            ; ---------------------------------------------------------------------------
0000EDF0 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000EDF4 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000EDF8 0000                       		dc.w byte_ED73-Map_obj0D
0000EDFA 03                         byte_ED42:	dc.b 3
0000EDFB F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000EE00 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000EE05 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000EE0A 02                         byte_ED52:	dc.b 2
0000EE0B F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000EE10 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000EE15 02                         byte_ED5D:	dc.b 2
0000EE16 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000EE1B 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000EE20 02                         byte_ED68:	dc.b 2
0000EE21 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000EE26 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000EE2B 03                         byte_ED73:	dc.b 3
0000EE2C F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000EE31 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000EE36 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000EE3C 00                         		even
0000EE3C 00                         		even
0000EE3C                            
0000EE3C                            ; ===========================================================================
0000EE3C                            ; ---------------------------------------------------------------------------
0000EE3C                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000EE3C                            ; ---------------------------------------------------------------------------
0000EE3C                            
0000EE3C                            Obj4C:					; XREF: Obj_Index
0000EE3C 7000                       		moveq	#0,d0
0000EE3E 1028 0024                  		move.b	$24(a0),d0
0000EE42 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000EE46 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000EE4A 6000 0000                  		bra.w	Obj4D_ChkDel
0000EE4E                            ; ===========================================================================
0000EE4E 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000EE50 0000                       		dc.w loc_EDCC-Obj4C_Index
0000EE52 0000                       		dc.w loc_EE3E-Obj4C_Index
0000EE54 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000EE56 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000EE58 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000EE5A                            ; ===========================================================================
0000EE5A                            
0000EE5A                            Obj4C_Main:				; XREF: Obj4C_Index
0000EE5A 5428 0024                  		addq.b	#2,$24(a0)
0000EE5E 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000EE66 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000EE6C 117C 0004 0001             		move.b	#4,1(a0)
0000EE72 117C 0001 0018             		move.b	#1,$18(a0)
0000EE78 117C 0038 0019             		move.b	#$38,$19(a0)
0000EE7E 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000EE84                            
0000EE84                            loc_EDCC:				; XREF: Obj4C_Index
0000EE84 5368 0032                  		subq.w	#1,$32(a0)
0000EE88 6A00                       		bpl.s	locret_EDF0
0000EE8A 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000EE90 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000EE94 3228 000C                  		move.w	$C(a0),d1
0000EE98 B041                       		cmp.w	d1,d0
0000EE9A 6400                       		bcc.s	locret_EDF0
0000EE9C 0441 0170                  		subi.w	#$170,d1
0000EEA0 B041                       		cmp.w	d1,d0
0000EEA2 6500                       		bcs.s	locret_EDF0
0000EEA4 5428 0024                  		addq.b	#2,$24(a0)
0000EEA8                            
0000EEA8                            locret_EDF0:
0000EEA8 4E75                       		rts	
0000EEAA                            ; ===========================================================================
0000EEAA                            
0000EEAA                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000EEAA 5428 0024                  		addq.b	#2,$24(a0)
0000EEAE 6100 ECB2                  		bsr.w	SingleObjLoad2
0000EEB2 6600                       		bne.s	loc_EE18
0000EEB4 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000EEB8 3368 0008 0008             		move.w	8(a0),8(a1)
0000EEBE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EEC4 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EECA 2348 003C                  		move.l	a0,$3C(a1)
0000EECE                            
0000EECE                            loc_EE18:
0000EECE 117C 0001 001C             		move.b	#1,$1C(a0)
0000EED4 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000EED8 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000EEDA 117C 0004 001C             		move.b	#4,$1C(a0)
0000EEE0 6000                       		bra.s	Obj4C_Display
0000EEE2                            ; ===========================================================================
0000EEE2                            
0000EEE2                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000EEE2 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000EEE6 08E9 0001 0022             		bset	#1,$22(a1)
0000EEEC 337C FA80 0012             		move.w	#-$580,$12(a1)
0000EEF2 6000                       		bra.s	Obj4C_Display
0000EEF4                            ; ===========================================================================
0000EEF4                            
0000EEF4                            loc_EE3E:				; XREF: Obj4C_Index
0000EEF4 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000EEF8 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000EEFA 5428 0024                  		addq.b	#2,$24(a0)
0000EEFE 4E75                       		rts	
0000EF00                            ; ===========================================================================
0000EF00                            
0000EF00                            Obj4C_Display:				; XREF: Obj4C_Index
0000EF00 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000EF06 6100 B8EA                  		bsr.w	AnimateSprite
0000EF0A 6100 E7BA                  		bsr.w	DisplaySprite
0000EF0E 4E75                       		rts	
0000EF10                            ; ===========================================================================
0000EF10                            
0000EF10                            Obj4C_Delete:				; XREF: Obj4C_Index
0000EF10 117C 0000 001C             		move.b	#0,$1C(a0)
0000EF16 117C 0002 0024             		move.b	#2,$24(a0)
0000EF1C 4A28 0028                  		tst.b	$28(a0)
0000EF20 6700 E7E0                  		beq.w	DeleteObject
0000EF24 4E75                       		rts	
0000EF26                            ; ===========================================================================
0000EF26                            ; ---------------------------------------------------------------------------
0000EF26                            ; Object 4D - lava geyser / lavafall (MZ)
0000EF26                            ; ---------------------------------------------------------------------------
0000EF26                            
0000EF26                            Obj4D:					; XREF: Obj_Index
0000EF26 7000                       		moveq	#0,d0
0000EF28 1028 0024                  		move.b	$24(a0),d0
0000EF2C 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000EF30 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000EF34 6000 E790                  		bra.w	DisplaySprite
0000EF38                            ; ===========================================================================
0000EF38 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000EF3A 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000EF3C 0000                       		dc.w loc_EFFC-Obj4D_Index
0000EF3E 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000EF40                            
0000EF40 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000EF44                            ; ===========================================================================
0000EF44                            
0000EF44                            Obj4D_Main:				; XREF: Obj4D_Index
0000EF44 5428 0024                  		addq.b	#2,$24(a0)
0000EF48 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EF4E 4A28 0028                  		tst.b	$28(a0)
0000EF52 6700                       		beq.s	loc_EEA4
0000EF54 0468 0250 000C             		subi.w	#$250,$C(a0)
0000EF5A                            
0000EF5A                            loc_EEA4:
0000EF5A 7000                       		moveq	#0,d0
0000EF5C 1028 0028                  		move.b	$28(a0),d0
0000EF60 D040                       		add.w	d0,d0
0000EF62 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000EF68 2248                       		movea.l	a0,a1
0000EF6A 7201                       		moveq	#1,d1
0000EF6C 6100                       		bsr.s	Obj4D_MakeLava
0000EF6E 6000                       		bra.s	loc_EF10
0000EF70                            ; ===========================================================================
0000EF70                            
0000EF70                            Obj4D_Loop:
0000EF70 6100 EBF0                  		bsr.w	SingleObjLoad2
0000EF74 6600                       		bne.s	loc_EF0A
0000EF76                            
0000EF76                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000EF76 12BC 004D                  		move.b	#$4D,0(a1)
0000EF7A 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000EF82 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000EF88 137C 0004 0001             		move.b	#4,1(a1)
0000EF8E 137C 0020 0019             		move.b	#$20,$19(a1)
0000EF94 3368 0008 0008             		move.w	8(a0),8(a1)
0000EF9A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EFA0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EFA6 137C 0001 0018             		move.b	#1,$18(a1)
0000EFAC 137C 0005 001C             		move.b	#5,$1C(a1)
0000EFB2 4A28 0028                  		tst.b	$28(a0)
0000EFB6 6700                       		beq.s	loc_EF0A
0000EFB8 137C 0002 001C             		move.b	#2,$1C(a1)
0000EFBE                            
0000EFBE                            loc_EF0A:
0000EFBE 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000EFC2 4E75                       		rts	
0000EFC4                            ; ===========================================================================
0000EFC4                            
0000EFC4                            loc_EF10:				; XREF: Obj4D_Main
0000EFC4 0669 0060 000C             		addi.w	#$60,$C(a1)
0000EFCA 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000EFD0 0669 0060 0030             		addi.w	#$60,$30(a1)
0000EFD6 137C 0093 0020             		move.b	#$93,$20(a1)
0000EFDC 137C 0080 0016             		move.b	#$80,$16(a1)
0000EFE2 08E9 0004 0001             		bset	#4,1(a1)
0000EFE8 5829 0024                  		addq.b	#4,$24(a1)
0000EFEC 2348 003C                  		move.l	a0,$3C(a1)
0000EFF0 4A28 0028                  		tst.b	$28(a0)
0000EFF4 6700                       		beq.s	Obj4D_PlaySnd
0000EFF6 7200                       		moveq	#0,d1
0000EFF8 6100 FF76                  		bsr.w	Obj4D_Loop
0000EFFC 5429 0024                  		addq.b	#2,$24(a1)
0000F000 08E9 0004 0002             		bset	#4,2(a1)
0000F006 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F00C 137C 0000 0018             		move.b	#0,$18(a1)
0000F012 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F018 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F01E 117C 0000 0028             		move.b	#0,$28(a0)
0000F024                            
0000F024                            Obj4D_PlaySnd:
0000F024 303C 00C8                  		move.w	#$C8,d0
0000F028 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flame sound
0000F02E                            
0000F02E                            Obj4D_Action:				; XREF: Obj4D_Index
0000F02E 7000                       		moveq	#0,d0
0000F030 1028 0028                  		move.b	$28(a0),d0
0000F034 D040                       		add.w	d0,d0
0000F036 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F03A 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F03E 6100 E660                  		bsr.w	SpeedToPos
0000F042 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F048 6100 B7A8                  		bsr.w	AnimateSprite
0000F04C                            
0000F04C                            Obj4D_ChkDel:				; XREF: Obj4C
0000F04C 3028 0008                  		move.w	8(a0),d0
0000F050 0240 FF80                  		andi.w	#$FF80,d0
0000F054 3238 F700                  		move.w	($FFFFF700).w,d1
0000F058 0441 0080                  		subi.w	#$80,d1
0000F05C 0241 FF80                  		andi.w	#$FF80,d1
0000F060 9041                       		sub.w	d1,d0
0000F062 0C40 0280                  		cmpi.w	#$280,d0
0000F066 6200 E69A                  		bhi.w	DeleteObject
0000F06A 4E75                       		rts	
0000F06C                            ; ===========================================================================
0000F06C 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F06E 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F070                            ; ===========================================================================
0000F070                            
0000F070                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F070 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F076 3028 0030                  		move.w	$30(a0),d0
0000F07A B068 000C                  		cmp.w	$C(a0),d0
0000F07E 6400                       		bcc.s	locret_EFDA
0000F080 5828 0024                  		addq.b	#4,$24(a0)
0000F084 2268 003C                  		movea.l	$3C(a0),a1
0000F088 137C 0003 001C             		move.b	#3,$1C(a1)
0000F08E                            
0000F08E                            locret_EFDA:
0000F08E 4E75                       		rts	
0000F090                            ; ===========================================================================
0000F090                            
0000F090                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F090 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F096 3028 0030                  		move.w	$30(a0),d0
0000F09A B068 000C                  		cmp.w	$C(a0),d0
0000F09E 6400                       		bcc.s	locret_EFFA
0000F0A0 5828 0024                  		addq.b	#4,$24(a0)
0000F0A4 2268 003C                  		movea.l	$3C(a0),a1
0000F0A8 137C 0001 001C             		move.b	#1,$1C(a1)
0000F0AE                            
0000F0AE                            locret_EFFA:
0000F0AE 4E75                       		rts	
0000F0B0                            ; ===========================================================================
0000F0B0                            
0000F0B0                            loc_EFFC:				; XREF: Obj4D_Index
0000F0B0 2268 003C                  		movea.l	$3C(a0),a1
0000F0B4 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F0BA 6700 0000                  		beq.w	Obj4D_Delete
0000F0BE 3029 000C                  		move.w	$C(a1),d0
0000F0C2 0640 0060                  		addi.w	#$60,d0
0000F0C6 3140 000C                  		move.w	d0,$C(a0)
0000F0CA 9068 0030                  		sub.w	$30(a0),d0
0000F0CE 4440                       		neg.w	d0
0000F0D0 7208                       		moveq	#8,d1
0000F0D2 0C40 0040                  		cmpi.w	#$40,d0
0000F0D6 6C00                       		bge.s	loc_F026
0000F0D8 720B                       		moveq	#$B,d1
0000F0DA                            
0000F0DA                            loc_F026:
0000F0DA 0C40 0080                  		cmpi.w	#$80,d0
0000F0DE 6F00                       		ble.s	loc_F02E
0000F0E0 720E                       		moveq	#$E,d1
0000F0E2                            
0000F0E2                            loc_F02E:
0000F0E2 5328 001E                  		subq.b	#1,$1E(a0)
0000F0E6 6A00                       		bpl.s	loc_F04C
0000F0E8 117C 0007 001E             		move.b	#7,$1E(a0)
0000F0EE 5228 001B                  		addq.b	#1,$1B(a0)
0000F0F2 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F0F8 6500                       		bcs.s	loc_F04C
0000F0FA 117C 0000 001B             		move.b	#0,$1B(a0)
0000F100                            
0000F100                            loc_F04C:
0000F100 1028 001B                  		move.b	$1B(a0),d0
0000F104 D001                       		add.b	d1,d0
0000F106 1140 001A                  		move.b	d0,$1A(a0)
0000F10A 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F10E                            ; ===========================================================================
0000F10E                            
0000F10E                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F10E 6000 E5F2                  		bra.w	DeleteObject
0000F112                            ; ===========================================================================
0000F112                            ; ---------------------------------------------------------------------------
0000F112                            ; Object 4E - advancing	wall of	lava (MZ)
0000F112                            ; ---------------------------------------------------------------------------
0000F112                            
0000F112                            Obj4E:					; XREF: Obj_Index
0000F112 7000                       		moveq	#0,d0
0000F114 1028 0024                  		move.b	$24(a0),d0
0000F118 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F11C 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F120                            ; ===========================================================================
0000F120 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F122 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F124 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F126 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F128 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F12A                            ; ===========================================================================
0000F12A                            
0000F12A                            Obj4E_Main:				; XREF: Obj4E_Index
0000F12A 5828 0024                  		addq.b	#4,$24(a0)
0000F12E 2248                       		movea.l	a0,a1
0000F130 7201                       		moveq	#1,d1
0000F132 6000                       		bra.s	Obj4E_Main2
0000F134                            ; ===========================================================================
0000F134                            
0000F134                            Obj4E_Loop:
0000F134 6100 EA2C                  		bsr.w	SingleObjLoad2
0000F138 6600                       		bne.s	loc_F0C8
0000F13A                            
0000F13A                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F13A 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F13E 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F146 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F14C 137C 0004 0001             		move.b	#4,1(a1)
0000F152 137C 0050 0019             		move.b	#$50,$19(a1)
0000F158 3368 0008 0008             		move.w	8(a0),8(a1)
0000F15E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F164 137C 0001 0018             		move.b	#1,$18(a1)
0000F16A 137C 0000 001C             		move.b	#0,$1C(a1)
0000F170 137C 0094 0020             		move.b	#$94,$20(a1)
0000F176 2348 003C                  		move.l	a0,$3C(a1)
0000F17A                            
0000F17A                            loc_F0C8:
0000F17A 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F17E                            
0000F17E 5C29 0024                  		addq.b	#6,$24(a1)
0000F182 137C 0004 001A             		move.b	#4,$1A(a1)
0000F188                            
0000F188                            Obj4E_Action:				; XREF: Obj4E_Index
0000F188 3038 D008                  		move.w	($FFFFD008).w,d0
0000F18C 9068 0008                  		sub.w	8(a0),d0
0000F190 6400                       		bcc.s	Obj4E_ChkSonic
0000F192 4440                       		neg.w	d0
0000F194                            
0000F194                            Obj4E_ChkSonic:
0000F194 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F198 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F19A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F19E 9068 000C                  		sub.w	$C(a0),d0
0000F1A2 6400                       		bcc.s	loc_F0F4
0000F1A4 4440                       		neg.w	d0
0000F1A6                            
0000F1A6                            loc_F0F4:
0000F1A6 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F1AA 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F1AC 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F1B2 6000                       		bra.s	Obj4E_Solid
0000F1B4                            ; ===========================================================================
0000F1B4                            
0000F1B4                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F1B4 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F1B8 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F1BA 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F1C0 5528 0024                  		subq.b	#2,$24(a0)
0000F1C4                            
0000F1C4                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F1C4 323C 002B                  		move.w	#$2B,d1
0000F1C8 343C 0018                  		move.w	#$18,d2
0000F1CC 3602                       		move.w	d2,d3
0000F1CE 5243                       		addq.w	#1,d3
0000F1D0 3828 0008                  		move.w	8(a0),d4
0000F1D4 1028 0024                  		move.b	$24(a0),d0
0000F1D8 3F00                       		move.w	d0,-(sp)
0000F1DA 6100 0000                  		bsr.w	SolidObject
0000F1DE 301F                       		move.w	(sp)+,d0
0000F1E0 1140 0024                  		move.b	d0,$24(a0)
0000F1E4 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F1EA 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F1EC 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F1F0 4228 0036                  		clr.b	$36(a0)
0000F1F4                            
0000F1F4                            Obj4E_Animate:
0000F1F4 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F1FA 6100 B5F6                  		bsr.w	AnimateSprite
0000F1FE 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F204 6400                       		bcc.s	Obj4E_ChkDel
0000F206 6100 E498                  		bsr.w	SpeedToPos
0000F20A                            
0000F20A                            Obj4E_ChkDel:
0000F20A 6100 E4BA                  		bsr.w	DisplaySprite
0000F20E 4A28 0036                  		tst.b	$36(a0)
0000F212 6600                       		bne.s	locret_F17E
0000F214 3028 0008                  		move.w	8(a0),d0
0000F218 0240 FF80                  		andi.w	#$FF80,d0
0000F21C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F220 0441 0080                  		subi.w	#$80,d1
0000F224 0241 FF80                  		andi.w	#$FF80,d1
0000F228 9041                       		sub.w	d1,d0
0000F22A 0C40 0280                  		cmpi.w	#$280,d0
0000F22E 6200                       		bhi.s	Obj4E_ChkGone
0000F230                            
0000F230                            locret_F17E:
0000F230 4E75                       		rts	
0000F232                            ; ===========================================================================
0000F232                            
0000F232                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F232 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F236 7000                       		moveq	#0,d0
0000F238 1028 0023                  		move.b	$23(a0),d0
0000F23C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F242 117C 0008 0024             		move.b	#8,$24(a0)
0000F248 4E75                       		rts	
0000F24A                            ; ===========================================================================
0000F24A                            
0000F24A                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F24A 2268 003C                  		movea.l	$3C(a0),a1
0000F24E 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F254 6700                       		beq.s	Obj4E_Delete
0000F256 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F25C 0468 0080 0008             		subi.w	#$80,8(a0)
0000F262 6000 E462                  		bra.w	DisplaySprite
0000F266                            ; ===========================================================================
0000F266                            
0000F266                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F266 6000 E49A                  		bra.w	DeleteObject
0000F26A                            ; ===========================================================================
0000F26A                            ; ---------------------------------------------------------------------------
0000F26A                            ; Object 54 - invisible	lava tag (MZ)
0000F26A                            ; ---------------------------------------------------------------------------
0000F26A                            
0000F26A                            Obj54:					; XREF: Obj_Index
0000F26A 7000                       		moveq	#0,d0
0000F26C 1028 0024                  		move.b	$24(a0),d0
0000F270 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F274 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F278                            ; ===========================================================================
0000F278 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F27A 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F27C                            
0000F27C 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F280                            ; ===========================================================================
0000F280                            
0000F280                            Obj54_Main:				; XREF: Obj54_Index
0000F280 5428 0024                  		addq.b	#2,$24(a0)
0000F284 7000                       		moveq	#0,d0
0000F286 1028 0028                  		move.b	$28(a0),d0
0000F28A 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F290 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F298 117C 0084 0001             		move.b	#$84,1(a0)
0000F29E                            
0000F29E                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F29E 3028 0008                  		move.w	8(a0),d0
0000F2A2 0240 FF80                  		andi.w	#$FF80,d0
0000F2A6 3238 F700                  		move.w	($FFFFF700).w,d1
0000F2AA 0441 0080                  		subi.w	#$80,d1
0000F2AE 0241 FF80                  		andi.w	#$FF80,d1
0000F2B2 9041                       		sub.w	d1,d0
0000F2B4 6B00 E44C                  		bmi.w	DeleteObject
0000F2B8 0C40 0280                  		cmpi.w	#$280,d0
0000F2BC 6200 E444                  		bhi.w	DeleteObject
0000F2C0 4E75                       		rts	
0000F2C2                            ; ===========================================================================
0000F2C2                            ; ---------------------------------------------------------------------------
0000F2C2                            ; Sprite mappings - invisible lava tag (MZ)
0000F2C2                            ; ---------------------------------------------------------------------------
0000F2C2                            Map_obj54:
0000F2C2                            	include "_maps\obj54.asm"
0000F2C2                            ; ---------------------------------------------------------------------------
0000F2C2                            ; Sprite mappings - invisible lava tag (MZ)
0000F2C2                            ; ---------------------------------------------------------------------------
0000F2C2 0000                       		dc.w byte_F212-Map_obj54
0000F2C4 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F2C6 00                         		even
0000F2C6 00                         		even
0000F2C6                            
0000F2C6                            Ani_obj4C:
0000F2C6                            	include "_anim\obj4C.asm"
0000F2C6                            ; ---------------------------------------------------------------------------
0000F2C6                            ; Animation script - geyser of lava (MZ)
0000F2C6                            ; ---------------------------------------------------------------------------
0000F2C6 0000                       		dc.w byte_F220-Ani_obj4C
0000F2C8 0000                       		dc.w byte_F22A-Ani_obj4C
0000F2CA 0000                       		dc.w byte_F22E-Ani_obj4C
0000F2CC 0000                       		dc.w byte_F232-Ani_obj4C
0000F2CE 0000                       		dc.w byte_F23A-Ani_obj4C
0000F2D0 0000                       		dc.w byte_F23E-Ani_obj4C
0000F2D2 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F2DC 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F2E0 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F2E4 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F2EC 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F2F0 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F2F4                            		even
0000F2F4                            		even
0000F2F4                            
0000F2F4                            Ani_obj4E:
0000F2F4                            	include "_anim\obj4E.asm"
0000F2F4                            ; ---------------------------------------------------------------------------
0000F2F4                            ; Animation script - advancing wall of lava (MZ)
0000F2F4                            ; ---------------------------------------------------------------------------
0000F2F4 0000                       		dc.w byte_F244-Ani_obj4E
0000F2F6 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F2FC                            		even
0000F2FC                            		even
0000F2FC                            
0000F2FC                            ; ---------------------------------------------------------------------------
0000F2FC                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F2FC                            ; ---------------------------------------------------------------------------
0000F2FC                            Map_obj4C:
0000F2FC                            	include "_maps\obj4C.asm"
0000F2FC                            ; ---------------------------------------------------------------------------
0000F2FC                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F2FC                            ; ---------------------------------------------------------------------------
0000F2FC 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F300 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F304 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F308 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F30C 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F310 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F314 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F318 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F31C 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F320 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F324 02                         byte_F272:	dc.b 2
0000F325 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F32A EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F32F 02                         byte_F27D:	dc.b 2
0000F330 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F335 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F33A 04                         byte_F288:	dc.b 4
0000F33B EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F340 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F345 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F34A EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F34F 04                         byte_F29D:	dc.b 4
0000F350 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F355 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F35A F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F35F EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F364 06                         byte_F2B2:	dc.b 6
0000F365 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F36A F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F36F F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F374 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F379 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F37E E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F383 06                         byte_F2D1:	dc.b 6
0000F384 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F389 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F38E F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F393 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F398 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F39D E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F3A2 02                         byte_F2F0:	dc.b 2
0000F3A3 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F3A8 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F3AD 02                         byte_F2FB:	dc.b 2
0000F3AE E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F3B3 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F3B8 0A                         byte_F306:	dc.b $A
0000F3B9 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F3BE 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F3C3 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F3C8 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F3CD D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F3D2 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F3D7 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F3DC F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F3E1 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F3E6 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F3EB 0A                         byte_F339:	dc.b $A
0000F3EC 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F3F1 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F3F6 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F3FB B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F400 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F405 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F40A F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F40F F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F414 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F419 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F41E 0A                         byte_F36C:	dc.b $A
0000F41F 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F424 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F429 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F42E B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F433 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F438 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F43D F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F442 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F447 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F44C 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F451 06                         byte_F39F:	dc.b 6
0000F452 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F457 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F45C B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F461 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F466 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F46B D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F470 06                         byte_F3BE:	dc.b 6
0000F471 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F476 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F47B B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F480 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F485 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F48A D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F48F 06                         byte_F3DD:	dc.b 6
0000F490 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F495 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F49A B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F49F B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F4A4 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F4A9 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F4AE 10                         byte_F3FC:	dc.b $10
0000F4AF 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F4B4 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F4B9 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F4BE B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F4C3 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F4C8 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F4CD F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F4D2 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F4D7 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F4DC 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F4E1 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000F4E6 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000F4EB 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000F4F0 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000F4F5 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000F4FA 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000F4FF 10                         byte_F44D:	dc.b $10
0000F500 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F505 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F50A B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F50F B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F514 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F519 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F51E F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F523 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F528 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F52D 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F532 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000F537 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000F53C 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000F541 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000F546 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000F54B 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000F550 10                         byte_F49E:	dc.b $10
0000F551 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F556 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F55B B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F560 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F565 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F56A D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F56F F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F574 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F579 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F57E 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F583 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000F588 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000F58D 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000F592 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000F597 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000F59C 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000F5A1 06                         byte_F4EF:	dc.b 6
0000F5A2 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000F5A7 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000F5AC E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000F5B1 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000F5B6 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000F5BB D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000F5C0 06                         byte_F50E:	dc.b 6
0000F5C1 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000F5C6 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000F5CB E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000F5D0 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000F5D5 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000F5DA D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000F5DF 00                         byte_F52D:	dc.b 0
0000F5E0                            		even
0000F5E0                            		even
0000F5E0                            
0000F5E0                            ; ---------------------------------------------------------------------------
0000F5E0                            ; Sprite mappings - advancing wall of lava (MZ)
0000F5E0                            ; ---------------------------------------------------------------------------
0000F5E0                            Map_obj4E:
0000F5E0                            	include "_maps\obj4E.asm"
0000F5E0                            ; ---------------------------------------------------------------------------
0000F5E0                            ; Sprite mappings - advancing wall of lava (MZ)
0000F5E0                            ; ---------------------------------------------------------------------------
0000F5E0 0000                       		dc.w byte_F538-Map_obj4E
0000F5E2 0000                       		dc.w byte_F566-Map_obj4E
0000F5E4 0000                       		dc.w byte_F594-Map_obj4E
0000F5E6 0000                       		dc.w byte_F5C2-Map_obj4E
0000F5E8 0000                       		dc.w byte_F5F0-Map_obj4E
0000F5EA 09                         byte_F538:	dc.b 9
0000F5EB E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000F5F0 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F5F5 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F5FA E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F5FF 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F604 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F609 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F60E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F613 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F618 09                         byte_F566:	dc.b 9
0000F619 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000F61E 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000F623 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F628 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F62D 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F632 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F637 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F63C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F641 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F646 09                         byte_F594:	dc.b 9
0000F647 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000F64C 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F651 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F656 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F65B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F660 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F665 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F66A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F66F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F674 09                         byte_F5C2:	dc.b 9
0000F675 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000F67A 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000F67F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F684 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F689 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F68E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F693 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F698 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F69D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F6A2 08                         byte_F5F0:	dc.b 8
0000F6A3 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000F6A8 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F6AD E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F6B2 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F6B7 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F6BC 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F6C1 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F6C6 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F6CC 00                         		even
0000F6CC 00                         		even
0000F6CC                            
0000F6CC                            ; ===========================================================================
0000F6CC                            ; ---------------------------------------------------------------------------
0000F6CC                            ; Object 40 - Moto Bug enemy (GHZ)
0000F6CC                            ; ---------------------------------------------------------------------------
0000F6CC                            
0000F6CC                            Obj40:					; XREF: Obj_Index
0000F6CC 7000                       		moveq	#0,d0
0000F6CE 1028 0024                  		move.b	$24(a0),d0
0000F6D2 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000F6D6 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000F6DA                            ; ===========================================================================
0000F6DA 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000F6DC 0000                       		dc.w Obj40_Action-Obj40_Index
0000F6DE 0000                       		dc.w Obj40_Animate-Obj40_Index
0000F6E0 0000                       		dc.w Obj40_Delete-Obj40_Index
0000F6E2                            ; ===========================================================================
0000F6E2                            
0000F6E2                            Obj40_Main:				; XREF: Obj40_Index
0000F6E2 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000F6EA 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000F6F0 117C 0004 0001             		move.b	#4,1(a0)
0000F6F6 117C 0004 0018             		move.b	#4,$18(a0)
0000F6FC 117C 0014 0019             		move.b	#$14,$19(a0)
0000F702 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000F706 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000F708 117C 000E 0016             		move.b	#$E,$16(a0)
0000F70E 117C 0008 0017             		move.b	#8,$17(a0)
0000F714 117C 000C 0020             		move.b	#$C,$20(a0)
0000F71A 6100 DF58                  		bsr.w	ObjectFall
0000F71E 4EB9 0000 0000             		jsr	ObjHitFloor
0000F724 4A41                       		tst.w	d1
0000F726 6A00                       		bpl.s	locret_F68A
0000F728 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F72C 317C 0000 0012             		move.w	#0,$12(a0)
0000F732 5428 0024                  		addq.b	#2,$24(a0)
0000F736 0868 0000 0022             		bchg	#0,$22(a0)
0000F73C                            
0000F73C                            locret_F68A:
0000F73C 4E75                       		rts	
0000F73E                            ; ===========================================================================
0000F73E                            
0000F73E                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000F73E 5828 0024                  		addq.b	#4,$24(a0)
0000F742 6000 0000                  		bra.w	Obj40_Animate
0000F746                            ; ===========================================================================
0000F746                            
0000F746                            Obj40_Action:				; XREF: Obj40_Index
0000F746 7000                       		moveq	#0,d0
0000F748 1028 0025                  		move.b	$25(a0),d0
0000F74C 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000F750 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000F754 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000F75A 6100 B096                  		bsr.w	AnimateSprite
0000F75E                            
0000F75E                            ; ---------------------------------------------------------------------------
0000F75E                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000F75E                            ; ---------------------------------------------------------------------------
0000F75E                            
0000F75E                            MarkObjGone:
0000F75E 3028 0008                  		move.w	8(a0),d0
0000F762 0240 FF80                  		andi.w	#$FF80,d0
0000F766 3238 F700                  		move.w	($FFFFF700).w,d1
0000F76A 0441 0080                  		subi.w	#$80,d1
0000F76E 0241 FF80                  		andi.w	#$FF80,d1
0000F772 9041                       		sub.w	d1,d0
0000F774 0C40 0280                  		cmpi.w	#$280,d0
0000F778 6200 0000                  		bhi.w	Mark_ChkGone
0000F77C 6000 DF48                  		bra.w	DisplaySprite
0000F780                            ; ===========================================================================
0000F780                            
0000F780                            Mark_ChkGone:
0000F780 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F784 7000                       		moveq	#0,d0
0000F786 1028 0023                  		move.b	$23(a0),d0
0000F78A 6700                       		beq.s	Mark_Delete
0000F78C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F792                            
0000F792                            Mark_Delete:
0000F792 6000 DF6E                  		bra.w	DeleteObject
0000F796                            
0000F796                            ; ===========================================================================
0000F796 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000F798 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000F79A                            ; ===========================================================================
0000F79A                            
0000F79A                            Obj40_Move:				; XREF: Obj40_Index2
0000F79A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000F79E 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000F7A0 5428 0025                  		addq.b	#2,$25(a0)
0000F7A4 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000F7AA 117C 0001 001C             		move.b	#1,$1C(a0)
0000F7B0 0868 0000 0022             		bchg	#0,$22(a0)
0000F7B6 6600                       		bne.s	locret_F70A
0000F7B8 4468 0010                  		neg.w	$10(a0)		; change direction
0000F7BC                            
0000F7BC                            locret_F70A:
0000F7BC 4E75                       		rts	
0000F7BE                            ; ===========================================================================
0000F7BE                            
0000F7BE                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000F7BE 6100 DEE0                  		bsr.w	SpeedToPos
0000F7C2 4EB9 0000 0000             		jsr	ObjHitFloor
0000F7C8 0C41 FFF8                  		cmpi.w	#-8,d1
0000F7CC 6D00                       		blt.s	Obj40_Pause
0000F7CE 0C41 000C                  		cmpi.w	#$C,d1
0000F7D2 6C00                       		bge.s	Obj40_Pause
0000F7D4 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F7D8 5328 0033                  		subq.b	#1,$33(a0)
0000F7DC 6A00                       		bpl.s	locret_F756
0000F7DE 117C 000F 0033             		move.b	#$F,$33(a0)
0000F7E4 6100 E366                  		bsr.w	SingleObjLoad
0000F7E8 6600                       		bne.s	locret_F756
0000F7EA 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000F7EE 3368 0008 0008             		move.w	8(a0),8(a1)
0000F7F4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F7FA 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F800 137C 0002 001C             		move.b	#2,$1C(a1)
0000F806                            
0000F806                            locret_F756:
0000F806 4E75                       		rts	
0000F808                            ; ===========================================================================
0000F808                            
0000F808                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000F808 5528 0025                  		subq.b	#2,$25(a0)
0000F80C 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000F812 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000F818 117C 0000 001C             		move.b	#0,$1C(a0)
0000F81E 4E75                       		rts	
0000F820                            ; ===========================================================================
0000F820                            
0000F820                            Obj40_Animate:				; XREF: Obj40_Index
0000F820 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000F826 6100 AFCA                  		bsr.w	AnimateSprite
0000F82A 6000 DE9A                  		bra.w	DisplaySprite
0000F82E                            ; ===========================================================================
0000F82E                            
0000F82E                            Obj40_Delete:				; XREF: Obj40_Index
0000F82E 6000 DED2                  		bra.w	DeleteObject
0000F832                            ; ===========================================================================
0000F832                            Ani_obj40:
0000F832                            	include "_anim\obj40.asm"
0000F832                            ; ---------------------------------------------------------------------------
0000F832                            ; Animation script - Motobug enemy
0000F832                            ; ---------------------------------------------------------------------------
0000F832 0000                       		dc.w byte_F788-Ani_obj40
0000F834 0000                       		dc.w byte_F78C-Ani_obj40
0000F836 0000                       		dc.w byte_F792-Ani_obj40
0000F838 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000F83C 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000F842 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000F850                            		even
0000F850                            		even
0000F850                            
0000F850                            ; ---------------------------------------------------------------------------
0000F850                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000F850                            ; ---------------------------------------------------------------------------
0000F850                            Map_obj40:
0000F850                            	include "_maps\obj40.asm"
0000F850                            ; ---------------------------------------------------------------------------
0000F850                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000F850                            ; ---------------------------------------------------------------------------
0000F850 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
0000F854 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
0000F858 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
0000F85C 0000                       		dc.w byte_F804-Map_obj40
0000F85E 04                         byte_F7AE:	dc.b 4
0000F85F F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0000F864 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
0000F869 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0000F86E 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
0000F873 04                         byte_F7C3:	dc.b 4
0000F874 F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
0000F879 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
0000F87E F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
0000F883 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
0000F888 05                         byte_F7D8:	dc.b 5
0000F889 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0000F88E 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
0000F893 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0000F898 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
0000F89D 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
0000F8A2 01                         byte_F7F2:	dc.b 1
0000F8A3 FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
0000F8A8 01                         byte_F7F8:	dc.b 1
0000F8A9 FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
0000F8AE 01                         byte_F7FE:	dc.b 1
0000F8AF FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
0000F8B4 00                         byte_F804:	dc.b 0
0000F8B6 00                         		even
0000F8B6 00                         		even
0000F8B6                            
0000F8B6                            ; ===========================================================================
0000F8B6                            ; ---------------------------------------------------------------------------
0000F8B6                            ; Object 4F - blank
0000F8B6                            ; ---------------------------------------------------------------------------
0000F8B6                            
0000F8B6                            Obj4F:					; XREF: Obj_Index
0000F8B6 4E75                       		rts	
0000F8B8                            
0000F8B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F8B8                            
0000F8B8                            
0000F8B8                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000F8B8 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000F8BC D047                       		add.w	d7,d0
0000F8BE 0240 0003                  		andi.w	#3,d0
0000F8C2 6600                       		bne.s	loc_F836
0000F8C4 7600                       		moveq	#0,d3
0000F8C6 1628 0019                  		move.b	$19(a0),d3
0000F8CA 4A68 0010                  		tst.w	$10(a0)
0000F8CE 6B00                       		bmi.s	loc_F82C
0000F8D0 6100 0000                  		bsr.w	ObjHitWallRight
0000F8D4 4A41                       		tst.w	d1
0000F8D6 6A00                       		bpl.s	loc_F836
0000F8D8                            
0000F8D8                            loc_F828:
0000F8D8 7001                       		moveq	#1,d0
0000F8DA 4E75                       		rts	
0000F8DC                            ; ===========================================================================
0000F8DC                            
0000F8DC                            loc_F82C:
0000F8DC 4643                       		not.w	d3
0000F8DE 6100 0000                  		bsr.w	ObjHitWallLeft
0000F8E2 4A41                       		tst.w	d1
0000F8E4 6BF2                       		bmi.s	loc_F828
0000F8E6                            
0000F8E6                            loc_F836:
0000F8E6 7000                       		moveq	#0,d0
0000F8E8 4E75                       		rts	
0000F8EA                            ; End of function Obj50_ChkWall
0000F8EA                            
0000F8EA                            ; ===========================================================================
0000F8EA                            ; ---------------------------------------------------------------------------
0000F8EA                            ; Object 50 - Yadrin enemy (SYZ)
0000F8EA                            ; ---------------------------------------------------------------------------
0000F8EA                            
0000F8EA                            Obj50:					; XREF: Obj_Index
0000F8EA 7000                       		moveq	#0,d0
0000F8EC 1028 0024                  		move.b	$24(a0),d0
0000F8F0 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000F8F4 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000F8F8                            ; ===========================================================================
0000F8F8 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000F8FA 0000                       		dc.w Obj50_Action-Obj50_Index
0000F8FC                            ; ===========================================================================
0000F8FC                            
0000F8FC                            Obj50_Main:				; XREF: Obj50_Index
0000F8FC 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000F904 317C 247B 0002             		move.w	#$247B,2(a0)
0000F90A 117C 0004 0001             		move.b	#4,1(a0)
0000F910 117C 0004 0018             		move.b	#4,$18(a0)
0000F916 117C 0014 0019             		move.b	#$14,$19(a0)
0000F91C 117C 0011 0016             		move.b	#$11,$16(a0)
0000F922 117C 0008 0017             		move.b	#8,$17(a0)
0000F928 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000F92E 6100 DD44                  		bsr.w	ObjectFall
0000F932 6100 0000                  		bsr.w	ObjHitFloor
0000F936 4A41                       		tst.w	d1
0000F938 6A00                       		bpl.s	locret_F89E
0000F93A D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F93E 317C 0000 0012             		move.w	#0,$12(a0)
0000F944 5428 0024                  		addq.b	#2,$24(a0)
0000F948 0868 0000 0022             		bchg	#0,$22(a0)
0000F94E                            
0000F94E                            locret_F89E:
0000F94E 4E75                       		rts	
0000F950                            ; ===========================================================================
0000F950                            
0000F950                            Obj50_Action:				; XREF: Obj50_Index
0000F950 7000                       		moveq	#0,d0
0000F952 1028 0025                  		move.b	$25(a0),d0
0000F956 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000F95A 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000F95E 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000F964 6100 AE8C                  		bsr.w	AnimateSprite
0000F968 6000 FDF4                  		bra.w	MarkObjGone
0000F96C                            ; ===========================================================================
0000F96C 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000F96E 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000F970                            ; ===========================================================================
0000F970                            
0000F970                            Obj50_Move:				; XREF: Obj50_Index2
0000F970 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000F974 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000F976 5428 0025                  		addq.b	#2,$25(a0)
0000F97A 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000F980 117C 0001 001C             		move.b	#1,$1C(a0)
0000F986 0868 0000 0022             		bchg	#0,$22(a0)
0000F98C 6600                       		bne.s	locret_F8E2
0000F98E 4468 0010                  		neg.w	$10(a0)		; change direction
0000F992                            
0000F992                            locret_F8E2:
0000F992 4E75                       		rts	
0000F994                            ; ===========================================================================
0000F994                            
0000F994                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000F994 6100 DD0A                  		bsr.w	SpeedToPos
0000F998 6100 0000                  		bsr.w	ObjHitFloor
0000F99C 0C41 FFF8                  		cmpi.w	#-8,d1
0000F9A0 6D00                       		blt.s	Obj50_Pause
0000F9A2 0C41 000C                  		cmpi.w	#$C,d1
0000F9A6 6C00                       		bge.s	Obj50_Pause
0000F9A8 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000F9AC 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000F9B0 6600                       		bne.s	Obj50_Pause
0000F9B2 4E75                       		rts	
0000F9B4                            ; ===========================================================================
0000F9B4                            
0000F9B4                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000F9B4 5528 0025                  		subq.b	#2,$25(a0)
0000F9B8 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000F9BE 317C 0000 0010             		move.w	#0,$10(a0)
0000F9C4 117C 0000 001C             		move.b	#0,$1C(a0)
0000F9CA 4E75                       		rts	
0000F9CC                            ; ===========================================================================
0000F9CC                            Ani_obj50:
0000F9CC                            	include "_anim\obj50.asm"
0000F9CC                            ; ---------------------------------------------------------------------------
0000F9CC                            ; Animation script - Yadrin enemy
0000F9CC                            ; ---------------------------------------------------------------------------
0000F9CC 0000                       		dc.w byte_F920-Ani_obj50
0000F9CE 0000                       		dc.w byte_F924-Ani_obj50
0000F9D0 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000F9D4 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000F9DE                            		even
0000F9DE                            		even
0000F9DE                            
0000F9DE                            ; ---------------------------------------------------------------------------
0000F9DE                            ; Sprite mappings - Yadrin enemy (SYZ)
0000F9DE                            ; ---------------------------------------------------------------------------
0000F9DE                            Map_obj50:
0000F9DE                            	include "_maps\obj50.asm"
0000F9DE                            ; ---------------------------------------------------------------------------
0000F9DE                            ; Sprite mappings - Yadrin enemy (SYZ)
0000F9DE                            ; ---------------------------------------------------------------------------
0000F9DE 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000F9E2 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000F9E6 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000F9EA 05                         byte_F93A:	dc.b 5
0000F9EB F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000F9F0 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000F9F5 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000F9FA F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000F9FF 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FA04 05                         byte_F954:	dc.b 5
0000FA05 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FA0A FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FA0F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FA14 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FA19 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FA1E 05                         byte_F96E:	dc.b 5
0000FA1F F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FA24 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FA29 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FA2E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FA33 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FA38 05                         byte_F988:	dc.b 5
0000FA39 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FA3E FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FA43 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FA48 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FA4D 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FA52 05                         byte_F9A2:	dc.b 5
0000FA53 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FA58 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FA5D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FA62 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FA67 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FA6C 05                         byte_F9BC:	dc.b 5
0000FA6D F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FA72 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FA77 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FA7C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FA81 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FA86                            		even
0000FA86                            		even
0000FA86                            
0000FA86                            ; ---------------------------------------------------------------------------
0000FA86                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000FA86                            ;
0000FA86                            ; variables:
0000FA86                            ; d1 = width
0000FA86                            ; d2 = height /	2 (when	jumping)
0000FA86                            ; d3 = height /	2 (when	walking)
0000FA86                            ; d4 = x-axis position
0000FA86                            ; ---------------------------------------------------------------------------
0000FA86                            
0000FA86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FA86                            
0000FA86                            
0000FA86                            SolidObject:
0000FA86 4A28 0025                  		tst.b	$25(a0)
0000FA8A 6700 0000                  		beq.w	loc_FAC8
0000FA8E 3401                       		move.w	d1,d2
0000FA90 D442                       		add.w	d2,d2
0000FA92 43F8 D000                  		lea	($FFFFD000).w,a1
0000FA96 0829 0001 0022             		btst	#1,$22(a1)
0000FA9C 6600                       		bne.s	loc_F9FE
0000FA9E 3029 0008                  		move.w	8(a1),d0
0000FAA2 9068 0008                  		sub.w	8(a0),d0
0000FAA6 D041                       		add.w	d1,d0
0000FAA8 6B00                       		bmi.s	loc_F9FE
0000FAAA B042                       		cmp.w	d2,d0
0000FAAC 6500                       		bcs.s	loc_FA12
0000FAAE                            
0000FAAE                            loc_F9FE:
0000FAAE 08A9 0003 0022             		bclr	#3,$22(a1)
0000FAB4 08A8 0003 0022             		bclr	#3,$22(a0)
0000FABA 4228 0025                  		clr.b	$25(a0)
0000FABE 7800                       		moveq	#0,d4
0000FAC0 4E75                       		rts	
0000FAC2                            ; ===========================================================================
0000FAC2                            
0000FAC2                            loc_FA12:
0000FAC2 3404                       		move.w	d4,d2
0000FAC4 6100 815C                  		bsr.w	MvSonicOnPtfm
0000FAC8 7800                       		moveq	#0,d4
0000FACA 4E75                       		rts	
0000FACC                            ; ===========================================================================
0000FACC                            
0000FACC                            SolidObject71:				; XREF: Obj71_Solid
0000FACC 4A28 0025                  		tst.b	$25(a0)
0000FAD0 6700 0000                  		beq.w	loc_FAD0
0000FAD4 3401                       		move.w	d1,d2
0000FAD6 D442                       		add.w	d2,d2
0000FAD8 43F8 D000                  		lea	($FFFFD000).w,a1
0000FADC 0829 0001 0022             		btst	#1,$22(a1)
0000FAE2 6600                       		bne.s	loc_FA44
0000FAE4 3029 0008                  		move.w	8(a1),d0
0000FAE8 9068 0008                  		sub.w	8(a0),d0
0000FAEC D041                       		add.w	d1,d0
0000FAEE 6B00                       		bmi.s	loc_FA44
0000FAF0 B042                       		cmp.w	d2,d0
0000FAF2 6500                       		bcs.s	loc_FA58
0000FAF4                            
0000FAF4                            loc_FA44:
0000FAF4 08A9 0003 0022             		bclr	#3,$22(a1)
0000FAFA 08A8 0003 0022             		bclr	#3,$22(a0)
0000FB00 4228 0025                  		clr.b	$25(a0)
0000FB04 7800                       		moveq	#0,d4
0000FB06 4E75                       		rts	
0000FB08                            ; ===========================================================================
0000FB08                            
0000FB08                            loc_FA58:
0000FB08 3404                       		move.w	d4,d2
0000FB0A 6100 8116                  		bsr.w	MvSonicOnPtfm
0000FB0E 7800                       		moveq	#0,d4
0000FB10 4E75                       		rts	
0000FB12                            ; ===========================================================================
0000FB12                            
0000FB12                            SolidObject2F:				; XREF: Obj2F_Solid
0000FB12 43F8 D000                  		lea	($FFFFD000).w,a1
0000FB16 4A28 0001                  		tst.b	1(a0)
0000FB1A 6A00 0000                  		bpl.w	loc_FB92
0000FB1E 3029 0008                  		move.w	8(a1),d0
0000FB22 9068 0008                  		sub.w	8(a0),d0
0000FB26 D041                       		add.w	d1,d0
0000FB28 6B00 0000                  		bmi.w	loc_FB92
0000FB2C 3601                       		move.w	d1,d3
0000FB2E D643                       		add.w	d3,d3
0000FB30 B043                       		cmp.w	d3,d0
0000FB32 6200 0000                  		bhi.w	loc_FB92
0000FB36 3A00                       		move.w	d0,d5
0000FB38 0828 0000 0001             		btst	#0,1(a0)
0000FB3E 6700                       		beq.s	loc_FA94
0000FB40 4645                       		not.w	d5
0000FB42 DA43                       		add.w	d3,d5
0000FB44                            
0000FB44                            loc_FA94:
0000FB44 E24D                       		lsr.w	#1,d5
0000FB46 7600                       		moveq	#0,d3
0000FB48 1632 5000                  		move.b	(a2,d5.w),d3
0000FB4C 9612                       		sub.b	(a2),d3
0000FB4E 3A28 000C                  		move.w	$C(a0),d5
0000FB52 9A43                       		sub.w	d3,d5
0000FB54 1629 0016                  		move.b	$16(a1),d3
0000FB58 4883                       		ext.w	d3
0000FB5A D443                       		add.w	d3,d2
0000FB5C 3629 000C                  		move.w	$C(a1),d3
0000FB60 9645                       		sub.w	d5,d3
0000FB62 5843                       		addq.w	#4,d3
0000FB64 D642                       		add.w	d2,d3
0000FB66 6B00 0000                  		bmi.w	loc_FB92
0000FB6A 3802                       		move.w	d2,d4
0000FB6C D844                       		add.w	d4,d4
0000FB6E B644                       		cmp.w	d4,d3
0000FB70 6400 0000                  		bcc.w	loc_FB92
0000FB74 6000 0000                  		bra.w	loc_FB0E
0000FB78                            ; ===========================================================================
0000FB78                            
0000FB78                            loc_FAC8:
0000FB78 4A28 0001                  		tst.b	1(a0)
0000FB7C 6A00 0000                  		bpl.w	loc_FB92
0000FB80                            
0000FB80                            loc_FAD0:
0000FB80 43F8 D000                  		lea	($FFFFD000).w,a1
0000FB84 3029 0008                  		move.w	8(a1),d0
0000FB88 9068 0008                  		sub.w	8(a0),d0
0000FB8C D041                       		add.w	d1,d0
0000FB8E 6B00 0000                  		bmi.w	loc_FB92
0000FB92 3601                       		move.w	d1,d3
0000FB94 D643                       		add.w	d3,d3
0000FB96 B043                       		cmp.w	d3,d0
0000FB98 6200 0000                  		bhi.w	loc_FB92
0000FB9C 1629 0016                  		move.b	$16(a1),d3
0000FBA0 4883                       		ext.w	d3
0000FBA2 D443                       		add.w	d3,d2
0000FBA4 3629 000C                  		move.w	$C(a1),d3
0000FBA8 9668 000C                  		sub.w	$C(a0),d3
0000FBAC 5843                       		addq.w	#4,d3
0000FBAE D642                       		add.w	d2,d3
0000FBB0 6B00 0000                  		bmi.w	loc_FB92
0000FBB4 3802                       		move.w	d2,d4
0000FBB6 D844                       		add.w	d4,d4
0000FBB8 B644                       		cmp.w	d4,d3
0000FBBA 6400 0000                  		bcc.w	loc_FB92
0000FBBE                            
0000FBBE                            loc_FB0E:
0000FBBE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000FBC2 6B00 0000                  		bmi.w	loc_FB92
0000FBC6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000FBCC 6400 0000                  		bcc.w	loc_FB92
0000FBD0 4A78 FE08                  		tst.w	($FFFFFE08).w
0000FBD4 6600 0000                  		bne.w	loc_FBAC
0000FBD8 3A00                       		move.w	d0,d5
0000FBDA B240                       		cmp.w	d0,d1
0000FBDC 6400                       		bcc.s	loc_FB36
0000FBDE D241                       		add.w	d1,d1
0000FBE0 9041                       		sub.w	d1,d0
0000FBE2 3A00                       		move.w	d0,d5
0000FBE4 4445                       		neg.w	d5
0000FBE6                            
0000FBE6                            loc_FB36:
0000FBE6 3203                       		move.w	d3,d1
0000FBE8 B443                       		cmp.w	d3,d2
0000FBEA 6400                       		bcc.s	loc_FB44
0000FBEC 5943                       		subq.w	#4,d3
0000FBEE 9644                       		sub.w	d4,d3
0000FBF0 3203                       		move.w	d3,d1
0000FBF2 4441                       		neg.w	d1
0000FBF4                            
0000FBF4                            loc_FB44:
0000FBF4 BA41                       		cmp.w	d1,d5
0000FBF6 6200 0000                  		bhi.w	loc_FBB0
0000FBFA 0C41 0004                  		cmpi.w	#4,d1
0000FBFE 6300                       		bls.s	loc_FB8C
0000FC00 4A40                       		tst.w	d0
0000FC02 6700                       		beq.s	loc_FB70
0000FC04 6B00                       		bmi.s	loc_FB5E
0000FC06 4A69 0010                  		tst.w	$10(a1)
0000FC0A 6B00                       		bmi.s	loc_FB70
0000FC0C 6000                       		bra.s	loc_FB64
0000FC0E                            ; ===========================================================================
0000FC0E                            
0000FC0E                            loc_FB5E:
0000FC0E 4A69 0010                  		tst.w	$10(a1)
0000FC12 6A00                       		bpl.s	loc_FB70
0000FC14                            
0000FC14                            loc_FB64:
0000FC14 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0000FC1A 337C 0000 0010             		move.w	#0,$10(a1)
0000FC20                            
0000FC20                            loc_FB70:
0000FC20 9169 0008                  		sub.w	d0,8(a1)
0000FC24 0829 0001 0022             		btst	#1,$22(a1)
0000FC2A 6600                       		bne.s	loc_FB8C
0000FC2C 08E9 0005 0022             		bset	#5,$22(a1)
0000FC32 08E8 0005 0022             		bset	#5,$22(a0)
0000FC38 7801                       		moveq	#1,d4
0000FC3A 4E75                       		rts	
0000FC3C                            ; ===========================================================================
0000FC3C                            
0000FC3C                            loc_FB8C:
0000FC3C 6100                       		bsr.s	loc_FBA0
0000FC3E 7801                       		moveq	#1,d4
0000FC40 4E75                       		rts	
0000FC42                            ; ===========================================================================
0000FC42                            
0000FC42                            loc_FB92:
0000FC42 0828 0005 0022             		btst	#5,$22(a0)
0000FC48 6700                       		beq.s	loc_FBAC
0000FC4A 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0000FC50                            
0000FC50                            loc_FBA0:
0000FC50 08A8 0005 0022             		bclr	#5,$22(a0)
0000FC56 08A9 0005 0022             		bclr	#5,$22(a1)
0000FC5C                            
0000FC5C                            loc_FBAC:
0000FC5C 7800                       		moveq	#0,d4
0000FC5E 4E75                       		rts	
0000FC60                            ; ===========================================================================
0000FC60                            
0000FC60                            loc_FBB0:
0000FC60 4A43                       		tst.w	d3
0000FC62 6B00                       		bmi.s	loc_FBBC
0000FC64 0C43 0010                  		cmpi.w	#$10,d3
0000FC68 6500                       		bcs.s	loc_FBEE
0000FC6A 60D6                       		bra.s	loc_FB92
0000FC6C                            ; ===========================================================================
0000FC6C                            
0000FC6C                            loc_FBBC:
0000FC6C 4A69 0012                  		tst.w	$12(a1)
0000FC70 6700                       		beq.s	loc_FBD6
0000FC72 6A00                       		bpl.s	loc_FBD2
0000FC74 4A43                       		tst.w	d3
0000FC76 6A00                       		bpl.s	loc_FBD2
0000FC78 9769 000C                  		sub.w	d3,$C(a1)
0000FC7C 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0000FC82                            
0000FC82                            loc_FBD2:
0000FC82 78FF                       		moveq	#-1,d4
0000FC84 4E75                       		rts	
0000FC86                            ; ===========================================================================
0000FC86                            
0000FC86                            loc_FBD6:
0000FC86 0829 0001 0022             		btst	#1,$22(a1)
0000FC8C 66F4                       		bne.s	loc_FBD2
0000FC8E 2F08                       		move.l	a0,-(sp)
0000FC90 2049                       		movea.l	a1,a0
0000FC92 4EB9 0000 0000             		jsr	KillSonic
0000FC98 205F                       		movea.l	(sp)+,a0
0000FC9A 78FF                       		moveq	#-1,d4
0000FC9C 4E75                       		rts	
0000FC9E                            ; ===========================================================================
0000FC9E                            
0000FC9E                            loc_FBEE:
0000FC9E 5943                       		subq.w	#4,d3
0000FCA0 7200                       		moveq	#0,d1
0000FCA2 1228 0019                  		move.b	$19(a0),d1
0000FCA6 3401                       		move.w	d1,d2
0000FCA8 D442                       		add.w	d2,d2
0000FCAA D269 0008                  		add.w	8(a1),d1
0000FCAE 9268 0008                  		sub.w	8(a0),d1
0000FCB2 6B00                       		bmi.s	loc_FC28
0000FCB4 B242                       		cmp.w	d2,d1
0000FCB6 6400                       		bcc.s	loc_FC28
0000FCB8 4A69 0012                  		tst.w	$12(a1)
0000FCBC 6B00                       		bmi.s	loc_FC28
0000FCBE 9769 000C                  		sub.w	d3,$C(a1)
0000FCC2 5369 000C                  		subq.w	#1,$C(a1)
0000FCC6 6100                       		bsr.s	sub_FC2C
0000FCC8 117C 0002 0025             		move.b	#2,$25(a0)
0000FCCE 08E8 0003 0022             		bset	#3,$22(a0)
0000FCD4 78FF                       		moveq	#-1,d4
0000FCD6 4E75                       		rts	
0000FCD8                            ; ===========================================================================
0000FCD8                            
0000FCD8                            loc_FC28:
0000FCD8 7800                       		moveq	#0,d4
0000FCDA 4E75                       		rts	
0000FCDC                            ; End of function SolidObject
0000FCDC                            
0000FCDC                            
0000FCDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FCDC                            
0000FCDC                            
0000FCDC                            sub_FC2C:				; XREF: SolidObject
0000FCDC 0829 0003 0022             		btst	#3,$22(a1)
0000FCE2 6700                       		beq.s	loc_FC4E
0000FCE4 7000                       		moveq	#0,d0
0000FCE6 1029 003D                  		move.b	$3D(a1),d0
0000FCEA ED48                       		lsl.w	#6,d0
0000FCEC 0680 00FF D000             		addi.l	#$FFD000,d0
0000FCF2 2440                       		movea.l	d0,a2
0000FCF4 08AA 0003 0022             		bclr	#3,$22(a2)
0000FCFA 422A 0025                  		clr.b	$25(a2)
0000FCFE                            
0000FCFE                            loc_FC4E:
0000FCFE 3008                       		move.w	a0,d0
0000FD00 0440 D000                  		subi.w	#-$3000,d0
0000FD04 EC48                       		lsr.w	#6,d0
0000FD06 0240 007F                  		andi.w	#$7F,d0
0000FD0A 1340 003D                  		move.b	d0,$3D(a1)
0000FD0E 137C 0000 0026             		move.b	#0,$26(a1)
0000FD14 337C 0000 0012             		move.w	#0,$12(a1)
0000FD1A 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000FD20 0829 0001 0022             		btst	#1,$22(a1)
0000FD26 6700                       		beq.s	loc_FC84
0000FD28 2F08                       		move.l	a0,-(sp)
0000FD2A 2049                       		movea.l	a1,a0
0000FD2C 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000FD32 205F                       		movea.l	(sp)+,a0
0000FD34                            
0000FD34                            loc_FC84:
0000FD34 08E9 0003 0022             		bset	#3,$22(a1)
0000FD3A 08E8 0003 0022             		bset	#3,$22(a0)
0000FD40 4E75                       		rts	
0000FD42                            ; End of function sub_FC2C
0000FD42                            
0000FD42                            ; ===========================================================================
0000FD42                            ; ---------------------------------------------------------------------------
0000FD42                            ; Object 51 - smashable	green block (MZ)
0000FD42                            ; ---------------------------------------------------------------------------
0000FD42                            
0000FD42                            Obj51:					; XREF: Obj_Index
0000FD42 7000                       		moveq	#0,d0
0000FD44 1028 0024                  		move.b	$24(a0),d0
0000FD48 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0000FD4C 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0000FD50 6000 FA0C                  		bra.w	MarkObjGone
0000FD54                            ; ===========================================================================
0000FD54 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
0000FD56 0000                       		dc.w Obj51_Solid-Obj51_Index
0000FD58 0000                       		dc.w Obj51_Display-Obj51_Index
0000FD5A                            ; ===========================================================================
0000FD5A                            
0000FD5A                            Obj51_Main:				; XREF: Obj51_Index
0000FD5A 5428 0024                  		addq.b	#2,$24(a0)
0000FD5E 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
0000FD66 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000FD6C 117C 0004 0001             		move.b	#4,1(a0)
0000FD72 117C 0010 0019             		move.b	#$10,$19(a0)
0000FD78 117C 0004 0018             		move.b	#4,$18(a0)
0000FD7E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000FD84                            
0000FD84                            Obj51_Solid:				; XREF: Obj51_Index
0000FD84 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0000FD8A 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0000FD90 323C 001B                  		move.w	#$1B,d1
0000FD94 343C 0010                  		move.w	#$10,d2
0000FD98 363C 0011                  		move.w	#$11,d3
0000FD9C 3828 0008                  		move.w	8(a0),d4
0000FDA0 6100 FCE4                  		bsr.w	SolidObject
0000FDA4 0828 0003 0022             		btst	#3,$22(a0)
0000FDAA 6600                       		bne.s	Obj51_Smash
0000FDAC                            
0000FDAC                            locret_FCFC:
0000FDAC 4E75                       		rts	
0000FDAE                            ; ===========================================================================
0000FDAE                            
0000FDAE                            Obj51_Smash:				; XREF: Obj51_Solid
0000FDAE 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0000FDB4 66F6                       		bne.s	locret_FCFC	; if not, branch
0000FDB6 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0000FDBC 08E9 0002 0022             		bset	#2,$22(a1)
0000FDC2 137C 000E 0016             		move.b	#$E,$16(a1)
0000FDC8 137C 0007 0017             		move.b	#7,$17(a1)
0000FDCE 137C 0002 001C             		move.b	#2,$1C(a1)
0000FDD4 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0000FDDA 08E9 0001 0022             		bset	#1,$22(a1)
0000FDE0 08A9 0003 0022             		bclr	#3,$22(a1)
0000FDE6 137C 0002 0024             		move.b	#2,$24(a1)
0000FDEC 08A8 0003 0022             		bclr	#3,$22(a0)
0000FDF2 4228 0025                  		clr.b	$25(a0)
0000FDF6 117C 0001 001A             		move.b	#1,$1A(a0)
0000FDFC 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0000FE02 7203                       		moveq	#3,d1		; set number of	fragments to 4
0000FE04 343C 0038                  		move.w	#$38,d2
0000FE08 6100 D4AA                  		bsr.w	SmashObject
0000FE0C 6100 DD3E                  		bsr.w	SingleObjLoad
0000FE10 6600                       		bne.s	Obj51_Display
0000FE12 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000FE16 3368 0008 0008             		move.w	8(a0),8(a1)
0000FE1C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FE22 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
0000FE26 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0000FE2A 0C42 0006                  		cmpi.w	#6,d2
0000FE2E 6500                       		bcs.s	Obj51_Bonus
0000FE30 7406                       		moveq	#6,d2
0000FE32                            
0000FE32                            Obj51_Bonus:
0000FE32 7000                       		moveq	#0,d0
0000FE34 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
0000FE38 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0000FE3E 6500                       		bcs.s	loc_FD98	; if not, branch
0000FE40 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0000FE44 740A                       		moveq	#10,d2
0000FE46                            
0000FE46                            loc_FD98:
0000FE46 4EB9 0000 0000             		jsr	AddPoints
0000FE4C E24A                       		lsr.w	#1,d2
0000FE4E 1342 001A                  		move.b	d2,$1A(a1)
0000FE52                            
0000FE52                            Obj51_Display:				; XREF: Obj51_Index
0000FE52 6100 D84C                  		bsr.w	SpeedToPos
0000FE56 0668 0038 0012             		addi.w	#$38,$12(a0)
0000FE5C 6100 D868                  		bsr.w	DisplaySprite
0000FE60 4A28 0001                  		tst.b	1(a0)
0000FE64 6A00 D89C                  		bpl.w	DeleteObject
0000FE68 4E75                       		rts	
0000FE6A                            ; ===========================================================================
0000FE6A FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
0000FE6E FF00 FF00                  		dc.w $FF00, $FF00
0000FE72 0200 FE00                  		dc.w $200, $FE00
0000FE76 0100 FF00                  		dc.w $100, $FF00
0000FE7A                            
0000FE7A 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0000FE82                            ; ---------------------------------------------------------------------------
0000FE82                            ; Sprite mappings - smashable green block (MZ)
0000FE82                            ; ---------------------------------------------------------------------------
0000FE82                            Map_obj51:
0000FE82                            	include "_maps\obj51.asm"
0000FE82                            ; ---------------------------------------------------------------------------
0000FE82                            ; Sprite mappings - smashable green block (MZ)
0000FE82                            ; ---------------------------------------------------------------------------
0000FE82 0000                       		dc.w byte_FDD8-Map_obj51
0000FE84 0000                       		dc.w byte_FDE3-Map_obj51
0000FE86 02                         byte_FDD8:	dc.b 2
0000FE87 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0000FE8C 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0000FE91 04                         byte_FDE3:	dc.b 4
0000FE92 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
0000FE97 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
0000FE9C F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0000FEA1 0005 8000 00               		dc.b 0,	5, $80,	0, 0
0000FEA6                            		even
0000FEA6                            		even
0000FEA6                            
0000FEA6                            ; ===========================================================================
0000FEA6                            ; ---------------------------------------------------------------------------
0000FEA6                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0000FEA6                            ; ---------------------------------------------------------------------------
0000FEA6                            
0000FEA6                            Obj52:					; XREF: Obj_Index
0000FEA6 7000                       		moveq	#0,d0
0000FEA8 1028 0024                  		move.b	$24(a0),d0
0000FEAC 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0000FEB0 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0000FEB4                            ; ===========================================================================
0000FEB4 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
0000FEB6 0000                       		dc.w Obj52_Platform-Obj52_Index
0000FEB8 0000                       		dc.w Obj52_StandOn-Obj52_Index
0000FEBA                            
0000FEBA 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
0000FEBC 2001                       		dc.b $20, 1
0000FEBE 2002                       		dc.b $20, 2
0000FEC0 4003                       		dc.b $40, 3
0000FEC2 3004                       		dc.b $30, 4
0000FEC4                            ; ===========================================================================
0000FEC4                            
0000FEC4                            Obj52_Main:				; XREF: Obj52_Index
0000FEC4 5428 0024                  		addq.b	#2,$24(a0)
0000FEC8 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0000FED0 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000FED6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000FEDC 6600                       		bne.s	loc_FE44
0000FEDE 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
0000FEE6 317C 43BC 0002             		move.w	#$43BC,2(a0)
0000FEEC 117C 0007 0016             		move.b	#7,$16(a0)
0000FEF2                            
0000FEF2                            loc_FE44:
0000FEF2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000FEF8 6600                       		bne.s	loc_FE60
0000FEFA 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0000FF00 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
0000FF06 6700                       		beq.s	loc_FE60	; if yes, branch
0000FF08 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0000FF0E                            
0000FF0E                            loc_FE60:
0000FF0E 117C 0004 0001             		move.b	#4,1(a0)
0000FF14 7000                       		moveq	#0,d0
0000FF16 1028 0028                  		move.b	$28(a0),d0
0000FF1A E648                       		lsr.w	#3,d0
0000FF1C 0240 001E                  		andi.w	#$1E,d0
0000FF20 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0000FF24 115A 0019                  		move.b	(a2)+,$19(a0)
0000FF28 115A 001A                  		move.b	(a2)+,$1A(a0)
0000FF2C 117C 0004 0018             		move.b	#4,$18(a0)
0000FF32 3168 0008 0030             		move.w	8(a0),$30(a0)
0000FF38 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000FF3E 0228 000F 0028             		andi.b	#$F,$28(a0)
0000FF44                            
0000FF44                            Obj52_Platform:				; XREF: Obj52_Index
0000FF44 6100 0000                  		bsr.w	Obj52_Move
0000FF48 7200                       		moveq	#0,d1
0000FF4A 1228 0019                  		move.b	$19(a0),d1
0000FF4E 4EB9 0000 7550             		jsr	(PlatformObject).l
0000FF54 6000                       		bra.s	Obj52_ChkDel
0000FF56                            ; ===========================================================================
0000FF56                            
0000FF56                            Obj52_StandOn:				; XREF: Obj52_Index
0000FF56 7200                       		moveq	#0,d1
0000FF58 1228 0019                  		move.b	$19(a0),d1
0000FF5C 4EB9 0000 76C4             		jsr	(ExitPlatform).l
0000FF62 3F28 0008                  		move.w	8(a0),-(sp)
0000FF66 6100 0000                  		bsr.w	Obj52_Move
0000FF6A 341F                       		move.w	(sp)+,d2
0000FF6C 4EB9 0000 7C2E             		jsr	(MvSonicOnPtfm2).l
0000FF72                            
0000FF72                            Obj52_ChkDel:				; XREF: Obj52_Platform
0000FF72 3028 0030                  		move.w	$30(a0),d0
0000FF76 0240 FF80                  		andi.w	#$FF80,d0
0000FF7A 3238 F700                  		move.w	($FFFFF700).w,d1
0000FF7E 0441 0080                  		subi.w	#$80,d1
0000FF82 0241 FF80                  		andi.w	#$FF80,d1
0000FF86 9041                       		sub.w	d1,d0
0000FF88 0C40 0280                  		cmpi.w	#$280,d0
0000FF8C 6200 D774                  		bhi.w	DeleteObject
0000FF90 6000 D734                  		bra.w	DisplaySprite
0000FF94                            ; ===========================================================================
0000FF94                            
0000FF94                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0000FF94 7000                       		moveq	#0,d0
0000FF96 1028 0028                  		move.b	$28(a0),d0
0000FF9A 0240 000F                  		andi.w	#$F,d0
0000FF9E D040                       		add.w	d0,d0
0000FFA0 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0000FFA4 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
0000FFA8                            ; ===========================================================================
0000FFA8 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
0000FFAC 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0000FFB0 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0000FFB4 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
0000FFB8 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
0000FFBC 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
0000FFBE                            ; ===========================================================================
0000FFBE                            
0000FFBE                            Obj52_Type00:				; XREF: Obj52_TypeIndex
0000FFBE 4E75                       		rts	
0000FFC0                            ; ===========================================================================
0000FFC0                            
0000FFC0                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0000FFC0 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000FFC4 323C 0060                  		move.w	#$60,d1
0000FFC8 0828 0000 0022             		btst	#0,$22(a0)
0000FFCE 6700                       		beq.s	loc_FF26
0000FFD0 4440                       		neg.w	d0
0000FFD2 D041                       		add.w	d1,d0
0000FFD4                            
0000FFD4                            loc_FF26:
0000FFD4 3228 0030                  		move.w	$30(a0),d1
0000FFD8 9240                       		sub.w	d0,d1
0000FFDA 3141 0008                  		move.w	d1,8(a0)
0000FFDE 4E75                       		rts	
0000FFE0                            ; ===========================================================================
0000FFE0                            
0000FFE0                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0000FFE0 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
0000FFE6 6600                       		bne.s	Obj52_02_Wait
0000FFE8 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0000FFEC                            
0000FFEC                            Obj52_02_Wait:
0000FFEC 4E75                       		rts	
0000FFEE                            ; ===========================================================================
0000FFEE                            
0000FFEE                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0000FFEE 7600                       		moveq	#0,d3
0000FFF0 1628 0019                  		move.b	$19(a0),d3
0000FFF4 6100 0000                  		bsr.w	ObjHitWallRight
0000FFF8 4A41                       		tst.w	d1		; has the platform hit a wall?
0000FFFA 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
0000FFFC 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010000 3168 0008 0030             		move.w	8(a0),$30(a0)
00010006 4E75                       		rts	
00010008                            ; ===========================================================================
00010008                            
00010008                            Obj52_03_End:
00010008 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
0001000C 4E75                       		rts	
0001000E                            ; ===========================================================================
0001000E                            
0001000E                            Obj52_Type05:				; XREF: Obj52_TypeIndex
0001000E 7600                       		moveq	#0,d3
00010010 1628 0019                  		move.b	$19(a0),d3
00010014 6100 0000                  		bsr.w	ObjHitWallRight
00010018 4A41                       		tst.w	d1		; has the platform hit a wall?
0001001A 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
0001001C 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010020 3168 0008 0030             		move.w	8(a0),$30(a0)
00010026 4E75                       		rts	
00010028                            ; ===========================================================================
00010028                            
00010028                            Obj52_05_End:
00010028 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
0001002C 4E75                       		rts	
0001002E                            ; ===========================================================================
0001002E                            
0001002E                            Obj52_Type06:				; XREF: Obj52_TypeIndex
0001002E 6100 D670                  		bsr.w	SpeedToPos
00010032 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010038 6100 0000                  		bsr.w	ObjHitFloor
0001003C 4A41                       		tst.w	d1		; has platform hit the floor?
0001003E 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010042 D368 000C                  		add.w	d1,$C(a0)
00010046 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
0001004A 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
0001004E                            
0001004E                            locret_FFA0:
0001004E 4E75                       		rts	
00010050                            ; ===========================================================================
00010050                            
00010050                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010050 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010054 6700                       		beq.s	Obj52_07_ChkDel
00010056 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
0001005A                            
0001005A                            Obj52_07_ChkDel:
0001005A 588F                       		addq.l	#4,sp
0001005C 3028 0030                  		move.w	$30(a0),d0
00010060 0240 FF80                  		andi.w	#$FF80,d0
00010064 3238 F700                  		move.w	($FFFFF700).w,d1
00010068 0441 0080                  		subi.w	#$80,d1
0001006C 0241 FF80                  		andi.w	#$FF80,d1
00010070 9041                       		sub.w	d1,d0
00010072 0C40 0280                  		cmpi.w	#$280,d0
00010076 6200 D68A                  		bhi.w	DeleteObject
0001007A 4E75                       		rts	
0001007C                            ; ===========================================================================
0001007C                            
0001007C                            Obj52_Type08:				; XREF: Obj52_TypeIndex
0001007C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010080 323C 0080                  		move.w	#$80,d1
00010084 0828 0000 0022             		btst	#0,$22(a0)
0001008A 6700                       		beq.s	loc_FFE2
0001008C 4440                       		neg.w	d0
0001008E D041                       		add.w	d1,d0
00010090                            
00010090                            loc_FFE2:
00010090 3228 0032                  		move.w	$32(a0),d1
00010094 9240                       		sub.w	d0,d1
00010096 3141 000C                  		move.w	d1,$C(a0)
0001009A 4E75                       		rts	
0001009C                            ; ===========================================================================
0001009C                            
0001009C                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
0001009C 7600                       		moveq	#0,d3
0001009E 1628 0019                  		move.b	$19(a0),d3
000100A2 D643                       		add.w	d3,d3
000100A4 7208                       		moveq	#8,d1
000100A6 0828 0000 0022             		btst	#0,$22(a0)
000100AC 6700                       		beq.s	loc_10004
000100AE 4441                       		neg.w	d1
000100B0 4443                       		neg.w	d3
000100B2                            
000100B2                            loc_10004:
000100B2 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000100B6 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000100B8 3028 0008                  		move.w	8(a0),d0
000100BC 9068 0030                  		sub.w	$30(a0),d0
000100C0 B043                       		cmp.w	d3,d0
000100C2 6700                       		beq.s	Obj52_0A_Wait
000100C4 D368 0008                  		add.w	d1,8(a0)	; move platform
000100C8 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000100CE 4E75                       		rts	
000100D0                            ; ===========================================================================
000100D0                            
000100D0                            Obj52_0A_Wait:
000100D0 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000100D4 6600                       		bne.s	locret_1002E	; if time remains, branch
000100D6 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000100DC                            
000100DC                            locret_1002E:
000100DC 4E75                       		rts	
000100DE                            ; ===========================================================================
000100DE                            
000100DE                            Obj52_0A_Back:
000100DE 3028 0008                  		move.w	8(a0),d0
000100E2 9068 0030                  		sub.w	$30(a0),d0
000100E6 6700                       		beq.s	Obj52_0A_Reset
000100E8 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
000100EC 4E75                       		rts	
000100EE                            ; ===========================================================================
000100EE                            
000100EE                            Obj52_0A_Reset:
000100EE 4268 0036                  		clr.w	$36(a0)
000100F2 5328 0028                  		subq.b	#1,$28(a0)
000100F6 4E75                       		rts	
000100F8                            ; ===========================================================================
000100F8                            ; ---------------------------------------------------------------------------
000100F8                            ; Sprite mappings - moving blocks (MZ, SBZ)
000100F8                            ; ---------------------------------------------------------------------------
000100F8                            Map_obj52:
000100F8                            	include "_maps\obj52mz.asm"
000100F8                            ; ---------------------------------------------------------------------------
000100F8                            ; Sprite mappings - moving blocks (MZ, SBZ)
000100F8                            ; ---------------------------------------------------------------------------
000100F8 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000100FC 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010100 0000                       		dc.w byte_1008F-Map_obj52
00010102 01                         byte_10054:	dc.b 1
00010103 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010108 02                         byte_1005A:	dc.b 2
00010109 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0001010E F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010113 04                         byte_10065:	dc.b 4
00010114 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010119 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0001011E F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010123 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010128 04                         byte_1007A:	dc.b 4
00010129 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0001012E F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010133 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010138 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
0001013D 03                         byte_1008F:	dc.b 3
0001013E F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010143 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010148 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001014E 00                         		even
0001014E 00                         		even
0001014E                            
0001014E                            ; ---------------------------------------------------------------------------
0001014E                            ; Sprite mappings - moving block (LZ)
0001014E                            ; ---------------------------------------------------------------------------
0001014E                            Map_obj52a:
0001014E                            	include "_maps\obj52lz.asm"
0001014E                            ; ---------------------------------------------------------------------------
0001014E                            ; Sprite mappings - moving block (LZ)
0001014E                            ; ---------------------------------------------------------------------------
0001014E 0000                       		dc.w byte_100A2-Map_obj52a
00010150 01                         byte_100A2:	dc.b 1
00010151 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010156                            		even
00010156                            		even
00010156                            
00010156                            ; ===========================================================================
00010156                            ; ---------------------------------------------------------------------------
00010156                            ; Object 55 - Basaran enemy (MZ)
00010156                            ; ---------------------------------------------------------------------------
00010156                            
00010156                            Obj55:					; XREF: Obj_Index
00010156 7000                       		moveq	#0,d0
00010158 1028 0024                  		move.b	$24(a0),d0
0001015C 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010160 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010164                            ; ===========================================================================
00010164 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010166 0000                       		dc.w Obj55_Action-Obj55_Index
00010168                            ; ===========================================================================
00010168                            
00010168                            Obj55_Main:				; XREF: Obj55_Index
00010168 5428 0024                  		addq.b	#2,$24(a0)
0001016C 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010174 317C 84B8 0002             		move.w	#$84B8,2(a0)
0001017A 117C 0004 0001             		move.b	#4,1(a0)
00010180 117C 000C 0016             		move.b	#$C,$16(a0)
00010186 117C 0002 0018             		move.b	#2,$18(a0)
0001018C 117C 000B 0020             		move.b	#$B,$20(a0)
00010192 117C 0010 0019             		move.b	#$10,$19(a0)
00010198                            
00010198                            Obj55_Action:				; XREF: Obj55_Index
00010198 7000                       		moveq	#0,d0
0001019A 1028 0025                  		move.b	$25(a0),d0
0001019E 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
000101A2 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
000101A6 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000101AC 6100 A644                  		bsr.w	AnimateSprite
000101B0 6000 F5AC                  		bra.w	MarkObjGone
000101B4                            ; ===========================================================================
000101B4 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000101B6 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000101B8 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000101BA 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
000101BC                            ; ===========================================================================
000101BC                            
000101BC                            Obj55_ChkDrop:				; XREF: Obj55_Index2
000101BC 343C 0080                  		move.w	#$80,d2
000101C0 6100 0000                  		bsr.w	Obj55_ChkSonic
000101C4 6400                       		bcc.s	Obj55_NoDrop
000101C6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000101CA 3140 0036                  		move.w	d0,$36(a0)
000101CE 9068 000C                  		sub.w	$C(a0),d0
000101D2 6500                       		bcs.s	Obj55_NoDrop
000101D4 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
000101D8 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
000101DA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000101DE 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
000101E0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000101E4 D007                       		add.b	d7,d0
000101E6 0200 0007                  		andi.b	#7,d0
000101EA 6600                       		bne.s	Obj55_NoDrop
000101EC 117C 0001 001C             		move.b	#1,$1C(a0)
000101F2 5428 0025                  		addq.b	#2,$25(a0)
000101F6                            
000101F6                            Obj55_NoDrop:
000101F6 4E75                       		rts	
000101F8                            ; ===========================================================================
000101F8                            
000101F8                            Obj55_DropFly:				; XREF: Obj55_Index2
000101F8 6100 D4A6                  		bsr.w	SpeedToPos
000101FC 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010202 343C 0080                  		move.w	#$80,d2
00010206 6100 0000                  		bsr.w	Obj55_ChkSonic
0001020A 3028 0036                  		move.w	$36(a0),d0
0001020E 9068 000C                  		sub.w	$C(a0),d0
00010212 6500                       		bcs.s	Obj55_ChkDel
00010214 0C40 0010                  		cmpi.w	#$10,d0
00010218 6400                       		bcc.s	locret_10180
0001021A 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
0001021E 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010224 117C 0002 001C             		move.b	#2,$1C(a0)
0001022A 5428 0025                  		addq.b	#2,$25(a0)
0001022E                            
0001022E                            locret_10180:
0001022E 4E75                       		rts	
00010230                            ; ===========================================================================
00010230                            
00010230                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010230 4A28 0001                  		tst.b	1(a0)
00010234 6A00 D4CC                  		bpl.w	DeleteObject
00010238 4E75                       		rts	
0001023A                            ; ===========================================================================
0001023A                            
0001023A                            Obj55_PlaySnd:				; XREF: Obj55_Index2
0001023A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001023E 0200 000F                  		andi.b	#$F,d0
00010242 6600                       		bne.s	loc_101A0
00010244 303C 00C0                  		move.w	#$C0,d0
00010248 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flapping sound
0001024E                            
0001024E                            loc_101A0:
0001024E 6100 D450                  		bsr.w	SpeedToPos
00010252 3038 D008                  		move.w	($FFFFD008).w,d0
00010256 9068 0008                  		sub.w	8(a0),d0
0001025A 6400                       		bcc.s	loc_101B0
0001025C 4440                       		neg.w	d0
0001025E                            
0001025E                            loc_101B0:
0001025E 0C40 0080                  		cmpi.w	#$80,d0
00010262 6500                       		bcs.s	locret_101C6
00010264 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010268 D007                       		add.b	d7,d0
0001026A 0200 0007                  		andi.b	#7,d0
0001026E 6600                       		bne.s	locret_101C6
00010270 5428 0025                  		addq.b	#2,$25(a0)
00010274                            
00010274                            locret_101C6:
00010274 4E75                       		rts	
00010276                            ; ===========================================================================
00010276                            
00010276                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010276 6100 D428                  		bsr.w	SpeedToPos
0001027A 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010280 6100 0000                  		bsr.w	ObjHitCeiling
00010284 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010286 6A00                       		bpl.s	locret_101F4	; if not, branch
00010288 9368 000C                  		sub.w	d1,$C(a0)
0001028C 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010292 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010296 4268 0012                  		clr.w	$12(a0)
0001029A 4228 001C                  		clr.b	$1C(a0)
0001029E 4228 0025                  		clr.b	$25(a0)
000102A2                            
000102A2                            locret_101F4:
000102A2 4E75                       		rts	
000102A4                            ; ===========================================================================
000102A4                            
000102A4                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
000102A4 323C 0100                  		move.w	#$100,d1
000102A8 08E8 0000 0022             		bset	#0,$22(a0)
000102AE 3038 D008                  		move.w	($FFFFD008).w,d0
000102B2 9068 0008                  		sub.w	8(a0),d0
000102B6 6400                       		bcc.s	loc_10214
000102B8 4440                       		neg.w	d0
000102BA 4441                       		neg.w	d1
000102BC 08A8 0000 0022             		bclr	#0,$22(a0)
000102C2                            
000102C2                            loc_10214:
000102C2 B042                       		cmp.w	d2,d0
000102C4 4E75                       		rts	
000102C6                            ; ===========================================================================
000102C6 6100 D3D8                  		bsr.w	SpeedToPos
000102CA 6100 D3FA                  		bsr.w	DisplaySprite
000102CE 4A28 0001                  		tst.b	1(a0)
000102D2 6A00 D42E                  		bpl.w	DeleteObject
000102D6 4E75                       		rts	
000102D8                            ; ===========================================================================
000102D8                            Ani_obj55:
000102D8                            	include "_anim\obj55.asm"
000102D8                            ; ---------------------------------------------------------------------------
000102D8                            ; Animation script - Basaran enemy
000102D8                            ; ---------------------------------------------------------------------------
000102D8 0000                       		dc.w byte_10230-Ani_obj55
000102DA 0000                       		dc.w byte_10234-Ani_obj55
000102DC 0000                       		dc.w byte_10238-Ani_obj55
000102DE 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
000102E2 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
000102E6 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
000102EC                            		even
000102EC                            		even
000102EC                            
000102EC                            ; ---------------------------------------------------------------------------
000102EC                            ; Sprite mappings - Basaran enemy (MZ)
000102EC                            ; ---------------------------------------------------------------------------
000102EC                            Map_obj55:
000102EC                            	include "_maps\obj55.asm"
000102EC                            ; ---------------------------------------------------------------------------
000102EC                            ; Sprite mappings - Basaran enemy (MZ)
000102EC                            ; ---------------------------------------------------------------------------
000102EC 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
000102F0 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
000102F4 01                         byte_10246:	dc.b 1
000102F5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000102FA 03                         byte_1024C:	dc.b 3
000102FB F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010300 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010305 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
0001030A 04                         byte_1025C:	dc.b 4
0001030B F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010310 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010315 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
0001031A 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
0001031F 04                         byte_10271:	dc.b 4
00010320 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010325 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
0001032A 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
0001032F FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010334                            		even
00010334                            		even
00010334                            
00010334                            ; ===========================================================================
00010334                            ; ---------------------------------------------------------------------------
00010334                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010334                            ; ---------------------------------------------------------------------------
00010334                            
00010334                            Obj56:					; XREF: Obj_Index
00010334 7000                       		moveq	#0,d0
00010336 1028 0024                  		move.b	$24(a0),d0
0001033A 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
0001033E 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010342                            ; ===========================================================================
00010342 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010344 0000                       		dc.w Obj56_Action-Obj56_Index
00010346                            
00010346 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010348 2020                       		dc.b  $20, $20
0001034A 1020                       		dc.b  $10, $20
0001034C 201A                       		dc.b  $20, $1A
0001034E 1027                       		dc.b  $10, $27
00010350 1010                       		dc.b  $10, $10
00010352 0820                       		dc.b	8, $20
00010354 4010                       		dc.b  $40, $10
00010356                            ; ===========================================================================
00010356                            
00010356                            Obj56_Main:				; XREF: Obj56_Index
00010356 5428 0024                  		addq.b	#2,$24(a0)
0001035A 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010362 317C 4000 0002             		move.w	#$4000,2(a0)
00010368 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001036E 6600                       		bne.s	loc_102C8
00010370 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010376                            
00010376                            loc_102C8:
00010376 117C 0004 0001             		move.b	#4,1(a0)
0001037C 117C 0003 0018             		move.b	#3,$18(a0)
00010382 7000                       		moveq	#0,d0
00010384 1028 0028                  		move.b	$28(a0),d0
00010388 E648                       		lsr.w	#3,d0
0001038A 0240 000E                  		andi.w	#$E,d0
0001038E 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010392 115A 0019                  		move.b	(a2)+,$19(a0)
00010396 1152 0016                  		move.b	(a2),$16(a0)
0001039A E248                       		lsr.w	#1,d0
0001039C 1140 001A                  		move.b	d0,$1A(a0)
000103A0 3168 0008 0034             		move.w	8(a0),$34(a0)
000103A6 3168 000C 0030             		move.w	$C(a0),$30(a0)
000103AC 7000                       		moveq	#0,d0
000103AE 1012                       		move.b	(a2),d0
000103B0 D040                       		add.w	d0,d0
000103B2 3140 003A                  		move.w	d0,$3A(a0)
000103B6 7000                       		moveq	#0,d0
000103B8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000103BE 6700                       		beq.s	loc_10332
000103C0 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
000103C4 0240 000F                  		andi.w	#$F,d0
000103C8 5140                       		subq.w	#8,d0
000103CA 6500                       		bcs.s	loc_10332
000103CC E548                       		lsl.w	#2,d0
000103CE 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
000103D2 45F2 0000                  		lea	(a2,d0.w),a2
000103D6 4A52                       		tst.w	(a2)
000103D8 6A00                       		bpl.s	loc_10332
000103DA 0868 0000 0022             		bchg	#0,$22(a0)
000103E0                            
000103E0                            loc_10332:
000103E0 1028 0028                  		move.b	$28(a0),d0
000103E4 6A00                       		bpl.s	Obj56_Action
000103E6 0200 000F                  		andi.b	#$F,d0
000103EA 1140 003C                  		move.b	d0,$3C(a0)
000103EE 117C 0005 0028             		move.b	#5,$28(a0)
000103F4 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
000103FA 6600                       		bne.s	Obj56_ChkGone
000103FC 117C 000C 0028             		move.b	#$C,$28(a0)
00010402 317C 0080 003A             		move.w	#$80,$3A(a0)
00010408                            
00010408                            Obj56_ChkGone:
00010408 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001040C 7000                       		moveq	#0,d0
0001040E 1028 0023                  		move.b	$23(a0),d0
00010412 6700                       		beq.s	Obj56_Action
00010414 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001041A 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010420 6700                       		beq.s	Obj56_Action
00010422 5228 0028                  		addq.b	#1,$28(a0)
00010426 4268 003A                  		clr.w	$3A(a0)
0001042A                            
0001042A                            Obj56_Action:				; XREF: Obj56_Index
0001042A 3F28 0008                  		move.w	8(a0),-(sp)
0001042E 7000                       		moveq	#0,d0
00010430 1028 0028                  		move.b	$28(a0),d0	; get object type
00010434 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010438 D040                       		add.w	d0,d0
0001043A 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
0001043E 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010442 381F                       		move.w	(sp)+,d4
00010444 4A28 0001                  		tst.b	1(a0)
00010448 6A00                       		bpl.s	Obj56_ChkDel
0001044A 7200                       		moveq	#0,d1
0001044C 1228 0019                  		move.b	$19(a0),d1
00010450 0641 000B                  		addi.w	#$B,d1
00010454 7400                       		moveq	#0,d2
00010456 1428 0016                  		move.b	$16(a0),d2
0001045A 3602                       		move.w	d2,d3
0001045C 5243                       		addq.w	#1,d3
0001045E 6100 F626                  		bsr.w	SolidObject
00010462                            
00010462                            Obj56_ChkDel:
00010462 3028 0034                  		move.w	$34(a0),d0
00010466 0240 FF80                  		andi.w	#$FF80,d0
0001046A 3238 F700                  		move.w	($FFFFF700).w,d1
0001046E 0441 0080                  		subi.w	#$80,d1
00010472 0241 FF80                  		andi.w	#$FF80,d1
00010476 9041                       		sub.w	d1,d0
00010478 0C40 0280                  		cmpi.w	#$280,d0
0001047C 6200 D284                  		bhi.w	DeleteObject
00010480 6000 D244                  		bra.w	DisplaySprite
00010484                            ; ===========================================================================
00010484 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010488 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
0001048C 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010490 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010494 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010498 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
0001049C 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
000104A0                            ; ===========================================================================
000104A0                            
000104A0                            Obj56_Type00:				; XREF: Obj56_TypeIndex
000104A0 4E75                       		rts	
000104A2                            ; ===========================================================================
000104A2                            
000104A2                            Obj56_Type01:				; XREF: Obj56_TypeIndex
000104A2 323C 0040                  		move.w	#$40,d1
000104A6 7000                       		moveq	#0,d0
000104A8 1038 FE68                  		move.b	($FFFFFE68).w,d0
000104AC 6000                       		bra.s	Obj56_Move_LR
000104AE                            ; ===========================================================================
000104AE                            
000104AE                            Obj56_Type02:				; XREF: Obj56_TypeIndex
000104AE 323C 0080                  		move.w	#$80,d1
000104B2 7000                       		moveq	#0,d0
000104B4 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000104B8                            
000104B8                            Obj56_Move_LR:
000104B8 0828 0000 0022             		btst	#0,$22(a0)
000104BE 6700                       		beq.s	loc_10416
000104C0 4440                       		neg.w	d0
000104C2 D041                       		add.w	d1,d0
000104C4                            
000104C4                            loc_10416:
000104C4 3228 0034                  		move.w	$34(a0),d1
000104C8 9240                       		sub.w	d0,d1
000104CA 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000104CE 4E75                       		rts	
000104D0                            ; ===========================================================================
000104D0                            
000104D0                            Obj56_Type03:				; XREF: Obj56_TypeIndex
000104D0 323C 0040                  		move.w	#$40,d1
000104D4 7000                       		moveq	#0,d0
000104D6 1038 FE68                  		move.b	($FFFFFE68).w,d0
000104DA 6000                       		bra.s	Obj56_Move_UD
000104DC                            ; ===========================================================================
000104DC                            
000104DC                            Obj56_Type04:				; XREF: Obj56_TypeIndex
000104DC 323C 0080                  		move.w	#$80,d1
000104E0 7000                       		moveq	#0,d0
000104E2 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000104E6                            
000104E6                            Obj56_Move_UD:
000104E6 0828 0000 0022             		btst	#0,$22(a0)
000104EC 6700                       		beq.s	loc_10444
000104EE 4440                       		neg.w	d0
000104F0 D041                       		add.w	d1,d0
000104F2                            
000104F2                            loc_10444:
000104F2 3228 0030                  		move.w	$30(a0),d1
000104F6 9240                       		sub.w	d0,d1
000104F8 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000104FC 4E75                       		rts	
000104FE                            ; ===========================================================================
000104FE                            
000104FE                            Obj56_Type05:				; XREF: Obj56_TypeIndex
000104FE 4A28 0038                  		tst.b	$38(a0)
00010502 6600                       		bne.s	loc_104A4
00010504 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
0001050A 6600                       		bne.s	loc_1047A	; if not, branch
0001050C 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010512 6600                       		bne.s	loc_1047A
00010514 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010518 3038 D008                  		move.w	($FFFFD008).w,d0
0001051C B068 0008                  		cmp.w	8(a0),d0
00010520 6400                       		bcc.s	loc_1047A
00010522 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010528                            
00010528                            loc_1047A:
00010528 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001052C 7000                       		moveq	#0,d0
0001052E 1028 003C                  		move.b	$3C(a0),d0
00010532 0832 0000 0000             		btst	#0,(a2,d0.w)
00010538 6700                       		beq.s	loc_104AE
0001053A 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010540 6600                       		bne.s	loc_1049E	; if not, branch
00010542 0C00 0003                  		cmpi.b	#3,d0
00010546 6600                       		bne.s	loc_1049E
00010548 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001054C                            
0001054C                            loc_1049E:
0001054C 117C 0001 0038             		move.b	#1,$38(a0)
00010552                            
00010552                            loc_104A4:
00010552 4A68 003A                  		tst.w	$3A(a0)
00010556 6700                       		beq.s	loc_104C8
00010558 5568 003A                  		subq.w	#2,$3A(a0)
0001055C                            
0001055C                            loc_104AE:
0001055C 3028 003A                  		move.w	$3A(a0),d0
00010560 0828 0000 0022             		btst	#0,$22(a0)
00010566 6700                       		beq.s	loc_104BC
00010568 4440                       		neg.w	d0
0001056A                            
0001056A                            loc_104BC:
0001056A 3228 0030                  		move.w	$30(a0),d1
0001056E D240                       		add.w	d0,d1
00010570 3141 000C                  		move.w	d1,$C(a0)
00010574 4E75                       		rts	
00010576                            ; ===========================================================================
00010576                            
00010576                            loc_104C8:
00010576 5228 0028                  		addq.b	#1,$28(a0)
0001057A 4228 0038                  		clr.b	$38(a0)
0001057E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010582 7000                       		moveq	#0,d0
00010584 1028 0023                  		move.b	$23(a0),d0
00010588 67D2                       		beq.s	loc_104AE
0001058A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010590 60CA                       		bra.s	loc_104AE
00010592                            ; ===========================================================================
00010592                            
00010592                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010592 4A28 0038                  		tst.b	$38(a0)
00010596 6600                       		bne.s	loc_10500
00010598 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001059C 7000                       		moveq	#0,d0
0001059E 1028 003C                  		move.b	$3C(a0),d0
000105A2 4A32 0000                  		tst.b	(a2,d0.w)
000105A6 6A00                       		bpl.s	loc_10512
000105A8 117C 0001 0038             		move.b	#1,$38(a0)
000105AE                            
000105AE                            loc_10500:
000105AE 7000                       		moveq	#0,d0
000105B0 1028 0016                  		move.b	$16(a0),d0
000105B4 D040                       		add.w	d0,d0
000105B6 B068 003A                  		cmp.w	$3A(a0),d0
000105BA 6700                       		beq.s	loc_1052C
000105BC 5468 003A                  		addq.w	#2,$3A(a0)
000105C0                            
000105C0                            loc_10512:
000105C0 3028 003A                  		move.w	$3A(a0),d0
000105C4 0828 0000 0022             		btst	#0,$22(a0)
000105CA 6700                       		beq.s	loc_10520
000105CC 4440                       		neg.w	d0
000105CE                            
000105CE                            loc_10520:
000105CE 3228 0030                  		move.w	$30(a0),d1
000105D2 D240                       		add.w	d0,d1
000105D4 3141 000C                  		move.w	d1,$C(a0)
000105D8 4E75                       		rts	
000105DA                            ; ===========================================================================
000105DA                            
000105DA                            loc_1052C:
000105DA 5328 0028                  		subq.b	#1,$28(a0)
000105DE 4228 0038                  		clr.b	$38(a0)
000105E2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000105E6 7000                       		moveq	#0,d0
000105E8 1028 0023                  		move.b	$23(a0),d0
000105EC 67D2                       		beq.s	loc_10512
000105EE 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000105F4 60CA                       		bra.s	loc_10512
000105F6                            ; ===========================================================================
000105F6                            
000105F6                            Obj56_Type07:				; XREF: Obj56_TypeIndex
000105F6 4A28 0038                  		tst.b	$38(a0)
000105FA 6600                       		bne.s	loc_1055E
000105FC 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010600 6700                       		beq.s	locret_10578
00010602 117C 0001 0038             		move.b	#1,$38(a0)
00010608 4268 003A                  		clr.w	$3A(a0)
0001060C                            
0001060C                            loc_1055E:
0001060C 5268 0008                  		addq.w	#1,8(a0)
00010610 3168 0008 0034             		move.w	8(a0),$34(a0)
00010616 5268 003A                  		addq.w	#1,$3A(a0)
0001061A 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010620 6600                       		bne.s	locret_10578
00010622 4228 0028                  		clr.b	$28(a0)
00010626                            
00010626                            locret_10578:
00010626 4E75                       		rts	
00010628                            ; ===========================================================================
00010628                            
00010628                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010628 4A28 0038                  		tst.b	$38(a0)
0001062C 6600                       		bne.s	loc_10598
0001062E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010632 7000                       		moveq	#0,d0
00010634 1028 003C                  		move.b	$3C(a0),d0
00010638 0832 0000 0000             		btst	#0,(a2,d0.w)
0001063E 6700                       		beq.s	loc_105A2
00010640 117C 0001 0038             		move.b	#1,$38(a0)
00010646                            
00010646                            loc_10598:
00010646 4A68 003A                  		tst.w	$3A(a0)
0001064A 6700                       		beq.s	loc_105C0
0001064C 5568 003A                  		subq.w	#2,$3A(a0)
00010650                            
00010650                            loc_105A2:
00010650 3028 003A                  		move.w	$3A(a0),d0
00010654 0828 0000 0022             		btst	#0,$22(a0)
0001065A 6700                       		beq.s	loc_105B4
0001065C 4440                       		neg.w	d0
0001065E 0640 0080                  		addi.w	#$80,d0
00010662                            
00010662                            loc_105B4:
00010662 3228 0034                  		move.w	$34(a0),d1
00010666 D240                       		add.w	d0,d1
00010668 3141 0008                  		move.w	d1,8(a0)
0001066C 4E75                       		rts	
0001066E                            ; ===========================================================================
0001066E                            
0001066E                            loc_105C0:
0001066E 5228 0028                  		addq.b	#1,$28(a0)
00010672 4228 0038                  		clr.b	$38(a0)
00010676 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001067A 7000                       		moveq	#0,d0
0001067C 1028 0023                  		move.b	$23(a0),d0
00010680 67CE                       		beq.s	loc_105A2
00010682 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010688 60C6                       		bra.s	loc_105A2
0001068A                            ; ===========================================================================
0001068A                            
0001068A                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
0001068A 4A28 0038                  		tst.b	$38(a0)
0001068E 6600                       		bne.s	loc_105F8
00010690 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010694 7000                       		moveq	#0,d0
00010696 1028 003C                  		move.b	$3C(a0),d0
0001069A 4A32 0000                  		tst.b	(a2,d0.w)
0001069E 6A00                       		bpl.s	loc_10606
000106A0 117C 0001 0038             		move.b	#1,$38(a0)
000106A6                            
000106A6                            loc_105F8:
000106A6 303C 0080                  		move.w	#$80,d0
000106AA B068 003A                  		cmp.w	$3A(a0),d0
000106AE 6700                       		beq.s	loc_10624
000106B0 5468 003A                  		addq.w	#2,$3A(a0)
000106B4                            
000106B4                            loc_10606:
000106B4 3028 003A                  		move.w	$3A(a0),d0
000106B8 0828 0000 0022             		btst	#0,$22(a0)
000106BE 6700                       		beq.s	loc_10618
000106C0 4440                       		neg.w	d0
000106C2 0640 0080                  		addi.w	#$80,d0
000106C6                            
000106C6                            loc_10618:
000106C6 3228 0034                  		move.w	$34(a0),d1
000106CA D240                       		add.w	d0,d1
000106CC 3141 0008                  		move.w	d1,8(a0)
000106D0 4E75                       		rts	
000106D2                            ; ===========================================================================
000106D2                            
000106D2                            loc_10624:
000106D2 5328 0028                  		subq.b	#1,$28(a0)
000106D6 4228 0038                  		clr.b	$38(a0)
000106DA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000106DE 7000                       		moveq	#0,d0
000106E0 1028 0023                  		move.b	$23(a0),d0
000106E4 67CE                       		beq.s	loc_10606
000106E6 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000106EC 60C6                       		bra.s	loc_10606
000106EE                            ; ===========================================================================
000106EE                            
000106EE                            Obj56_Type08:				; XREF: Obj56_TypeIndex
000106EE 323C 0010                  		move.w	#$10,d1
000106F2 7000                       		moveq	#0,d0
000106F4 1038 FE88                  		move.b	($FFFFFE88).w,d0
000106F8 E248                       		lsr.w	#1,d0
000106FA 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
000106FE 6000                       		bra.s	Obj56_Move_Sqr
00010700                            ; ===========================================================================
00010700                            
00010700                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010700 323C 0030                  		move.w	#$30,d1
00010704 7000                       		moveq	#0,d0
00010706 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
0001070A 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
0001070E 6000                       		bra.s	Obj56_Move_Sqr
00010710                            ; ===========================================================================
00010710                            
00010710                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010710 323C 0050                  		move.w	#$50,d1
00010714 7000                       		moveq	#0,d0
00010716 1038 FE90                  		move.b	($FFFFFE90).w,d0
0001071A 3638 FE92                  		move.w	($FFFFFE92).w,d3
0001071E 6000                       		bra.s	Obj56_Move_Sqr
00010720                            ; ===========================================================================
00010720                            
00010720                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010720 323C 0070                  		move.w	#$70,d1
00010724 7000                       		moveq	#0,d0
00010726 1038 FE94                  		move.b	($FFFFFE94).w,d0
0001072A 3638 FE96                  		move.w	($FFFFFE96).w,d3
0001072E                            
0001072E                            Obj56_Move_Sqr:
0001072E 4A43                       		tst.w	d3
00010730 6600                       		bne.s	loc_1068E
00010732 5228 0022                  		addq.b	#1,$22(a0)
00010736 0228 0003 0022             		andi.b	#3,$22(a0)
0001073C                            
0001073C                            loc_1068E:
0001073C 1428 0022                  		move.b	$22(a0),d2
00010740 0202 0003                  		andi.b	#3,d2
00010744 6600                       		bne.s	loc_106AE
00010746 9041                       		sub.w	d1,d0
00010748 D068 0034                  		add.w	$34(a0),d0
0001074C 3140 0008                  		move.w	d0,8(a0)
00010750 4441                       		neg.w	d1
00010752 D268 0030                  		add.w	$30(a0),d1
00010756 3141 000C                  		move.w	d1,$C(a0)
0001075A 4E75                       		rts	
0001075C                            ; ===========================================================================
0001075C                            
0001075C                            loc_106AE:
0001075C 5302                       		subq.b	#1,d2
0001075E 6600                       		bne.s	loc_106CC
00010760 5341                       		subq.w	#1,d1
00010762 9041                       		sub.w	d1,d0
00010764 4440                       		neg.w	d0
00010766 D068 0030                  		add.w	$30(a0),d0
0001076A 3140 000C                  		move.w	d0,$C(a0)
0001076E 5241                       		addq.w	#1,d1
00010770 D268 0034                  		add.w	$34(a0),d1
00010774 3141 0008                  		move.w	d1,8(a0)
00010778 4E75                       		rts	
0001077A                            ; ===========================================================================
0001077A                            
0001077A                            loc_106CC:
0001077A 5302                       		subq.b	#1,d2
0001077C 6600                       		bne.s	loc_106EA
0001077E 5341                       		subq.w	#1,d1
00010780 9041                       		sub.w	d1,d0
00010782 4440                       		neg.w	d0
00010784 D068 0034                  		add.w	$34(a0),d0
00010788 3140 0008                  		move.w	d0,8(a0)
0001078C 5241                       		addq.w	#1,d1
0001078E D268 0030                  		add.w	$30(a0),d1
00010792 3141 000C                  		move.w	d1,$C(a0)
00010796 4E75                       		rts	
00010798                            ; ===========================================================================
00010798                            
00010798                            loc_106EA:
00010798 9041                       		sub.w	d1,d0
0001079A D068 0030                  		add.w	$30(a0),d0
0001079E 3140 000C                  		move.w	d0,$C(a0)
000107A2 4441                       		neg.w	d1
000107A4 D268 0034                  		add.w	$34(a0),d1
000107A8 3141 0008                  		move.w	d1,8(a0)
000107AC 4E75                       		rts	
000107AE                            ; ===========================================================================
000107AE                            ; ---------------------------------------------------------------------------
000107AE                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000107AE                            ; ---------------------------------------------------------------------------
000107AE                            Map_obj56:
000107AE                            	include "_maps\obj56.asm"
000107AE                            ; ---------------------------------------------------------------------------
000107AE                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
000107AE                            ; ---------------------------------------------------------------------------
000107AE 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
000107B2 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
000107B6 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
000107BA 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
000107BE 01                         byte_10710:	dc.b 1
000107BF F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
000107C4 04                         byte_10716:	dc.b 4
000107C5 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
000107CA E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
000107CF 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
000107D4 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
000107D9 02                         byte_1072B:	dc.b 2
000107DA E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
000107DF 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
000107E4 04                         byte_10736:	dc.b 4
000107E5 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
000107EA E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
000107EF 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
000107F4 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
000107F9 03                         byte_1074B:	dc.b 3
000107FA D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
000107FF F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010804 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010809 01                         byte_1075B:	dc.b 1
0001080A F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001080F 02                         byte_10761:	dc.b 2
00010810 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010815 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001081A 04                         byte_1076C:	dc.b 4
0001081B F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010820 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010825 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
0001082A F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010830 00                         		even
00010830 00                         		even
00010830                            
00010830                            ; ===========================================================================
00010830                            ; ---------------------------------------------------------------------------
00010830                            ; Object 57 - spiked balls (SYZ, LZ)
00010830                            ; ---------------------------------------------------------------------------
00010830                            
00010830                            Obj57:					; XREF: Obj_Index
00010830 7000                       		moveq	#0,d0
00010832 1028 0024                  		move.b	$24(a0),d0
00010836 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
0001083A 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
0001083E                            ; ===========================================================================
0001083E 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010840 0000                       		dc.w Obj57_Move-Obj57_Index
00010842 0000                       		dc.w Obj57_Display-Obj57_Index
00010844                            ; ===========================================================================
00010844                            
00010844                            Obj57_Main:				; XREF: Obj57_Index
00010844 5428 0024                  		addq.b	#2,$24(a0)
00010848 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010850 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010856 117C 0004 0001             		move.b	#4,1(a0)
0001085C 117C 0004 0018             		move.b	#4,$18(a0)
00010862 117C 0008 0019             		move.b	#8,$19(a0)
00010868 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001086E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010874 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
0001087A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010880 6600                       		bne.s	loc_107E8
00010882 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010888 317C 0310 0002             		move.w	#$310,2(a0)
0001088E 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010896                            
00010896                            loc_107E8:
00010896 1228 0028                  		move.b	$28(a0),d1	; get object type
0001089A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001089E 4881                       		ext.w	d1
000108A0 E741                       		asl.w	#3,d1		; multiply by 8
000108A2 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
000108A6 1028 0022                  		move.b	$22(a0),d0
000108AA E418                       		ror.b	#2,d0
000108AC 0200 00C0                  		andi.b	#-$40,d0
000108B0 1140 0026                  		move.b	d0,$26(a0)
000108B4 45E8 0029                  		lea	$29(a0),a2
000108B8 1228 0028                  		move.b	$28(a0),d1	; get object type
000108BC 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
000108C0 14FC 0000                  		move.b	#0,(a2)+
000108C4 3601                       		move.w	d1,d3
000108C6 E94B                       		lsl.w	#4,d3
000108C8 1143 003C                  		move.b	d3,$3C(a0)
000108CC 5341                       		subq.w	#1,d1		; set chain length (type-1)
000108CE 6500                       		bcs.s	loc_10894
000108D0 0828 0003 0028             		btst	#3,$28(a0)
000108D6 6700                       		beq.s	Obj57_MakeChain
000108D8 5341                       		subq.w	#1,d1
000108DA 6500                       		bcs.s	loc_10894
000108DC                            
000108DC                            Obj57_MakeChain:
000108DC 6100 D26E                  		bsr.w	SingleObjLoad
000108E0 6600                       		bne.s	loc_10894
000108E2 5228 0029                  		addq.b	#1,$29(a0)
000108E6 3A09                       		move.w	a1,d5
000108E8 0445 D000                  		subi.w	#-$3000,d5
000108EC EC4D                       		lsr.w	#6,d5
000108EE 0245 007F                  		andi.w	#$7F,d5
000108F2 14C5                       		move.b	d5,(a2)+
000108F4 137C 0004 0024             		move.b	#4,$24(a1)
000108FA 1290                       		move.b	0(a0),0(a1)
000108FC 2368 0004 0004             		move.l	4(a0),4(a1)
00010902 3368 0002 0002             		move.w	2(a0),2(a1)
00010908 1368 0001 0001             		move.b	1(a0),1(a1)
0001090E 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010914 1368 0019 0019             		move.b	$19(a0),$19(a1)
0001091A 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010920 0403 0010                  		subi.b	#$10,d3
00010924 1343 003C                  		move.b	d3,$3C(a1)
00010928 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001092E 6600                       		bne.s	loc_10890
00010930 4A03                       		tst.b	d3
00010932 6600                       		bne.s	loc_10890
00010934 137C 0002 001A             		move.b	#2,$1A(a1)
0001093A                            
0001093A                            loc_10890:
0001093A 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
0001093E                            
0001093E                            loc_10894:
0001093E 3A08                       		move.w	a0,d5
00010940 0445 D000                  		subi.w	#-$3000,d5
00010944 EC4D                       		lsr.w	#6,d5
00010946 0245 007F                  		andi.w	#$7F,d5
0001094A 14C5                       		move.b	d5,(a2)+
0001094C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010952 6600                       		bne.s	Obj57_Move
00010954 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
0001095A 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010960                            
00010960                            Obj57_Move:				; XREF: Obj57_Index
00010960 6100 0000                  		bsr.w	Obj57_MoveSub
00010964 6000 0000                  		bra.w	Obj57_ChkDel
00010968                            ; ===========================================================================
00010968                            
00010968                            Obj57_MoveSub:				; XREF: Obj57_Move
00010968 3028 003E                  		move.w	$3E(a0),d0
0001096C D168 0026                  		add.w	d0,$26(a0)
00010970 1028 0026                  		move.b	$26(a0),d0
00010974 4EB9 0000 29DA             		jsr	(CalcSine).l
0001097A 3428 0038                  		move.w	$38(a0),d2
0001097E 3628 003A                  		move.w	$3A(a0),d3
00010982 45E8 0029                  		lea	$29(a0),a2
00010986 7C00                       		moveq	#0,d6
00010988 1C1A                       		move.b	(a2)+,d6
0001098A                            
0001098A                            Obj57_MoveLoop:
0001098A 7800                       		moveq	#0,d4
0001098C 181A                       		move.b	(a2)+,d4
0001098E ED4C                       		lsl.w	#6,d4
00010990 0684 00FF D000             		addi.l	#$FFD000,d4
00010996 2244                       		movea.l	d4,a1
00010998 7800                       		moveq	#0,d4
0001099A 1829 003C                  		move.b	$3C(a1),d4
0001099E 2A04                       		move.l	d4,d5
000109A0 C9C0                       		muls.w	d0,d4
000109A2 E084                       		asr.l	#8,d4
000109A4 CBC1                       		muls.w	d1,d5
000109A6 E085                       		asr.l	#8,d5
000109A8 D842                       		add.w	d2,d4
000109AA DA43                       		add.w	d3,d5
000109AC 3344 000C                  		move.w	d4,$C(a1)
000109B0 3345 0008                  		move.w	d5,8(a1)
000109B4 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
000109B8 4E75                       		rts	
000109BA                            ; ===========================================================================
000109BA                            
000109BA                            Obj57_ChkDel:				; XREF: Obj57_Move
000109BA 3028 003A                  		move.w	$3A(a0),d0
000109BE 0240 FF80                  		andi.w	#$FF80,d0
000109C2 3238 F700                  		move.w	($FFFFF700).w,d1
000109C6 0441 0080                  		subi.w	#$80,d1
000109CA 0241 FF80                  		andi.w	#$FF80,d1
000109CE 9041                       		sub.w	d1,d0
000109D0 0C40 0280                  		cmpi.w	#$280,d0
000109D4 6200 0000                  		bhi.w	Obj57_Delete
000109D8 6000 CCEC                  		bra.w	DisplaySprite
000109DC                            ; ===========================================================================
000109DC                            
000109DC                            Obj57_Delete:				; XREF: Obj57_ChkDel
000109DC 7400                       		moveq	#0,d2
000109DE 45E8 0029                  		lea	$29(a0),a2
000109E2 141A                       		move.b	(a2)+,d2
000109E4                            
000109E4                            Obj57_DelLoop:
000109E4 7000                       		moveq	#0,d0
000109E6 101A                       		move.b	(a2)+,d0
000109E8 ED48                       		lsl.w	#6,d0
000109EA 0680 00FF D000             		addi.l	#$FFD000,d0
000109F0 2240                       		movea.l	d0,a1
000109F2 6100 CD10                  		bsr.w	DeleteObject2
000109F6 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
000109FA                            
000109FA 4E75                       		rts	
000109FC                            ; ===========================================================================
000109FC                            
000109FC                            Obj57_Display:				; XREF: Obj57_Index
000109FC 6000 CCC8                  		bra.w	DisplaySprite
00010A00                            ; ===========================================================================
00010A00                            ; ---------------------------------------------------------------------------
00010A00                            ; Sprite mappings - chain of spiked balls (SYZ)
00010A00                            ; ---------------------------------------------------------------------------
00010A00                            Map_obj57:
00010A00                            	include "_maps\obj57syz.asm"
00010A00                            ; ---------------------------------------------------------------------------
00010A00                            ; Sprite mappings - chain of spiked balls (SYZ)
00010A00                            ; ---------------------------------------------------------------------------
00010A00 0000                       		dc.w byte_10958-Map_obj57
00010A02 01                         byte_10958:	dc.b 1
00010A03 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010A08                            		even
00010A08                            		even
00010A08                            
00010A08                            ; ---------------------------------------------------------------------------
00010A08                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010A08                            ; ---------------------------------------------------------------------------
00010A08                            Map_obj57a:
00010A08                            	include "_maps\obj57lz.asm"
00010A08                            ; ---------------------------------------------------------------------------
00010A08                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010A08                            ; ---------------------------------------------------------------------------
00010A08 0000                       		dc.w byte_10964-Map_obj57a
00010A0A 0000                       		dc.w byte_1096A-Map_obj57a
00010A0C 0000                       		dc.w byte_10970-Map_obj57a
00010A0E 01                         byte_10964:	dc.b 1
00010A0F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010A14 01                         byte_1096A:	dc.b 1
00010A15 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010A1A 01                         byte_10970:	dc.b 1
00010A1B F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010A20                            		even
00010A20                            		even
00010A20                            
00010A20                            ; ===========================================================================
00010A20                            ; ---------------------------------------------------------------------------
00010A20                            ; Object 58 - giant spiked balls (SYZ)
00010A20                            ; ---------------------------------------------------------------------------
00010A20                            
00010A20                            Obj58:					; XREF: Obj_Index
00010A20 7000                       		moveq	#0,d0
00010A22 1028 0024                  		move.b	$24(a0),d0
00010A26 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010A2A 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010A2E                            ; ===========================================================================
00010A2E 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010A30 0000                       		dc.w Obj58_Move-Obj58_Index
00010A32                            ; ===========================================================================
00010A32                            
00010A32                            Obj58_Main:				; XREF: Obj58_Index
00010A32 5428 0024                  		addq.b	#2,$24(a0)
00010A36 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010A3E 317C 0396 0002             		move.w	#$396,2(a0)
00010A44 117C 0004 0001             		move.b	#4,1(a0)
00010A4A 117C 0004 0018             		move.b	#4,$18(a0)
00010A50 117C 0018 0019             		move.b	#$18,$19(a0)
00010A56 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010A5C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010A62 117C 0086 0020             		move.b	#$86,$20(a0)
00010A68 1228 0028                  		move.b	$28(a0),d1	; get object type
00010A6C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010A70 4881                       		ext.w	d1
00010A72 E741                       		asl.w	#3,d1		; multiply by 8
00010A74 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00010A78 1028 0022                  		move.b	$22(a0),d0
00010A7C E418                       		ror.b	#2,d0
00010A7E 0200 00C0                  		andi.b	#$C0,d0
00010A82 1140 0026                  		move.b	d0,$26(a0)
00010A86 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010A8C                            
00010A8C                            Obj58_Move:				; XREF: Obj58_Index
00010A8C 7000                       		moveq	#0,d0
00010A8E 1028 0028                  		move.b	$28(a0),d0	; get object type
00010A92 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00010A96 D040                       		add.w	d0,d0
00010A98 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010A9C 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010AA0 3028 003A                  		move.w	$3A(a0),d0
00010AA4 0240 FF80                  		andi.w	#$FF80,d0
00010AA8 3238 F700                  		move.w	($FFFFF700).w,d1
00010AAC 0441 0080                  		subi.w	#$80,d1
00010AB0 0241 FF80                  		andi.w	#$FF80,d1
00010AB4 9041                       		sub.w	d1,d0
00010AB6 0C40 0280                  		cmpi.w	#$280,d0
00010ABA 6200 CC46                  		bhi.w	DeleteObject
00010ABE 6000 CC06                  		bra.w	DisplaySprite
00010AC2                            ; ===========================================================================
00010AC2 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00010AC4 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00010AC6 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00010AC8 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00010ACA                            ; ===========================================================================
00010ACA                            
00010ACA                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00010ACA 4E75                       		rts	
00010ACC                            ; ===========================================================================
00010ACC                            
00010ACC                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00010ACC 323C 0060                  		move.w	#$60,d1
00010AD0 7000                       		moveq	#0,d0
00010AD2 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010AD6 0828 0000 0022             		btst	#0,$22(a0)
00010ADC 6700                       		beq.s	loc_10A38
00010ADE 4440                       		neg.w	d0
00010AE0 D041                       		add.w	d1,d0
00010AE2                            
00010AE2                            loc_10A38:
00010AE2 3228 003A                  		move.w	$3A(a0),d1
00010AE6 9240                       		sub.w	d0,d1
00010AE8 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010AEC 4E75                       		rts	
00010AEE                            ; ===========================================================================
00010AEE                            
00010AEE                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00010AEE 323C 0060                  		move.w	#$60,d1
00010AF2 7000                       		moveq	#0,d0
00010AF4 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010AF8 0828 0000 0022             		btst	#0,$22(a0)
00010AFE 6700                       		beq.s	loc_10A5C
00010B00 4440                       		neg.w	d0
00010B02 0640 0080                  		addi.w	#$80,d0
00010B06                            
00010B06                            loc_10A5C:
00010B06 3228 0038                  		move.w	$38(a0),d1
00010B0A 9240                       		sub.w	d0,d1
00010B0C 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010B10 4E75                       		rts	
00010B12                            ; ===========================================================================
00010B12                            
00010B12                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00010B12 3028 003E                  		move.w	$3E(a0),d0
00010B16 D168 0026                  		add.w	d0,$26(a0)
00010B1A 1028 0026                  		move.b	$26(a0),d0
00010B1E 4EB9 0000 29DA             		jsr	(CalcSine).l
00010B24 3428 0038                  		move.w	$38(a0),d2
00010B28 3628 003A                  		move.w	$3A(a0),d3
00010B2C 7800                       		moveq	#0,d4
00010B2E 1828 003C                  		move.b	$3C(a0),d4
00010B32 2A04                       		move.l	d4,d5
00010B34 C9C0                       		muls.w	d0,d4
00010B36 E084                       		asr.l	#8,d4
00010B38 CBC1                       		muls.w	d1,d5
00010B3A E085                       		asr.l	#8,d5
00010B3C D842                       		add.w	d2,d4
00010B3E DA43                       		add.w	d3,d5
00010B40 3144 000C                  		move.w	d4,$C(a0)
00010B44 3145 0008                  		move.w	d5,8(a0)
00010B48 4E75                       		rts	
00010B4A                            ; ===========================================================================
00010B4A                            ; ---------------------------------------------------------------------------
00010B4A                            ; Sprite mappings - SBZ	spiked ball on a chain
00010B4A                            ; ---------------------------------------------------------------------------
00010B4A                            Map_obj15b:
00010B4A                            	include "_maps\obj15sbz.asm"
00010B4A                            ; ---------------------------------------------------------------------------
00010B4A                            ; Sprite mappings - spiked ball on a chain (SBZ)
00010B4A                            ; ---------------------------------------------------------------------------
00010B4A 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00010B4E 0000                       		dc.w byte_10AC6-Map_obj15b
00010B50 05                         byte_10AA6:	dc.b 5
00010B51 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00010B56 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00010B5B F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00010B60 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00010B65 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00010B6A 01                         byte_10AC0:	dc.b 1
00010B6B F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00010B70 02                         byte_10AC6:	dc.b 2
00010B71 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00010B76 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00010B7C 00                         		even
00010B7C 00                         		even
00010B7C                            
00010B7C                            ; ===========================================================================
00010B7C                            ; ---------------------------------------------------------------------------
00010B7C                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00010B7C                            ; ---------------------------------------------------------------------------
00010B7C                            
00010B7C                            Obj59:					; XREF: Obj_Index
00010B7C 7000                       		moveq	#0,d0
00010B7E 1028 0024                  		move.b	$24(a0),d0
00010B82 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00010B86 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00010B8A 3028 0032                  		move.w	$32(a0),d0
00010B8E 0240 FF80                  		andi.w	#$FF80,d0
00010B92 3238 F700                  		move.w	($FFFFF700).w,d1
00010B96 0441 0080                  		subi.w	#$80,d1
00010B9A 0241 FF80                  		andi.w	#$FF80,d1
00010B9E 9041                       		sub.w	d1,d0
00010BA0 0C40 0280                  		cmpi.w	#$280,d0
00010BA4 6200 CB5C                  		bhi.w	DeleteObject
00010BA8 6000 CB1C                  		bra.w	DisplaySprite
00010BAC                            ; ===========================================================================
00010BAC 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00010BAE 0000                       		dc.w Obj59_Platform-Obj59_Index
00010BB0 0000                       		dc.w Obj59_Action-Obj59_Index
00010BB2 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00010BB4                            
00010BB4 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00010BB6                            
00010BB6 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00010BB8 2001                       		dc.b $20, 1
00010BBA 3401                       		dc.b $34, 1
00010BBC 1003                       		dc.b $10, 3
00010BBE 2003                       		dc.b $20, 3
00010BC0 3403                       		dc.b $34, 3
00010BC2 1401                       		dc.b $14, 1
00010BC4 2401                       		dc.b $24, 1
00010BC6 2C01                       		dc.b $2C, 1
00010BC8 1403                       		dc.b $14, 3
00010BCA 2403                       		dc.b $24, 3
00010BCC 2C03                       		dc.b $2C, 3
00010BCE 2005                       		dc.b $20, 5
00010BD0 2007                       		dc.b $20, 7
00010BD2 3009                       		dc.b $30, 9
00010BD4                            ; ===========================================================================
00010BD4                            
00010BD4                            Obj59_Main:				; XREF: Obj59_Index
00010BD4 5428 0024                  		addq.b	#2,$24(a0)
00010BD8 7000                       		moveq	#0,d0
00010BDA 1028 0028                  		move.b	$28(a0),d0
00010BDE 6A00                       		bpl.s	Obj59_Main2
00010BE0 5828 0024                  		addq.b	#4,$24(a0)
00010BE4 0240 007F                  		andi.w	#$7F,d0
00010BE8 C0FC 0006                  		mulu.w	#6,d0
00010BEC 3140 003C                  		move.w	d0,$3C(a0)
00010BF0 3140 003E                  		move.w	d0,$3E(a0)
00010BF4 588F                       		addq.l	#4,sp
00010BF6 4E75                       		rts	
00010BF8                            ; ===========================================================================
00010BF8                            
00010BF8                            Obj59_Main2:
00010BF8 E648                       		lsr.w	#3,d0
00010BFA 0240 001E                  		andi.w	#$1E,d0
00010BFE 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00010C02 115A 0019                  		move.b	(a2)+,$19(a0)
00010C06 115A 001A                  		move.b	(a2)+,$1A(a0)
00010C0A 7000                       		moveq	#0,d0
00010C0C 1028 0028                  		move.b	$28(a0),d0
00010C10 D040                       		add.w	d0,d0
00010C12 0240 001E                  		andi.w	#$1E,d0
00010C16 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00010C1A 101A                       		move.b	(a2)+,d0
00010C1C E548                       		lsl.w	#2,d0
00010C1E 3140 003C                  		move.w	d0,$3C(a0)
00010C22 115A 0028                  		move.b	(a2)+,$28(a0)
00010C26 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00010C2E 317C 4000 0002             		move.w	#$4000,2(a0)
00010C34 117C 0004 0001             		move.b	#4,1(a0)
00010C3A 117C 0004 0018             		move.b	#4,$18(a0)
00010C40 3168 0008 0032             		move.w	8(a0),$32(a0)
00010C46 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010C4C                            
00010C4C                            Obj59_Platform:				; XREF: Obj59_Index
00010C4C 7200                       		moveq	#0,d1
00010C4E 1228 0019                  		move.b	$19(a0),d1
00010C52 4EB9 0000 7550             		jsr	(PlatformObject).l
00010C58 6000 0000                  		bra.w	Obj59_Types
00010C5C                            ; ===========================================================================
00010C5C                            
00010C5C                            Obj59_Action:				; XREF: Obj59_Index
00010C5C 7200                       		moveq	#0,d1
00010C5E 1228 0019                  		move.b	$19(a0),d1
00010C62 4EB9 0000 76C4             		jsr	(ExitPlatform).l
00010C68 3F28 0008                  		move.w	8(a0),-(sp)
00010C6C 6100 0000                  		bsr.w	Obj59_Types
00010C70 341F                       		move.w	(sp)+,d2
00010C72 4A10                       		tst.b	0(a0)
00010C74 6700                       		beq.s	locret_10BD4
00010C76 4EF9 0000 7C2E             		jmp	(MvSonicOnPtfm2).l
00010C7C                            ; ===========================================================================
00010C7C                            
00010C7C                            locret_10BD4:
00010C7C 4E75                       		rts	
00010C7E                            ; ===========================================================================
00010C7E                            
00010C7E                            Obj59_Types:
00010C7E 7000                       		moveq	#0,d0
00010C80 1028 0028                  		move.b	$28(a0),d0
00010C84 0240 000F                  		andi.w	#$F,d0
00010C88 D040                       		add.w	d0,d0
00010C8A 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00010C8E 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00010C92                            ; ===========================================================================
00010C92 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010C96 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010C9A 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010C9E 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010CA2 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00010CA6                            ; ===========================================================================
00010CA6                            
00010CA6                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00010CA6 4E75                       		rts	
00010CA8                            ; ===========================================================================
00010CA8                            
00010CA8                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00010CA8 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00010CAE 6600                       		bne.s	locret_10C0C
00010CB0 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010CB4                            
00010CB4                            locret_10C0C:
00010CB4 4E75                       		rts	
00010CB6                            ; ===========================================================================
00010CB6                            
00010CB6                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00010CB6 6100 0000                  		bsr.w	Obj59_Move
00010CBA 3028 0034                  		move.w	$34(a0),d0
00010CBE 4440                       		neg.w	d0
00010CC0 D068 0030                  		add.w	$30(a0),d0
00010CC4 3140 000C                  		move.w	d0,$C(a0)
00010CC8 4E75                       		rts	
00010CCA                            ; ===========================================================================
00010CCA                            
00010CCA                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00010CCA 6100 0000                  		bsr.w	Obj59_Move
00010CCE 3028 0034                  		move.w	$34(a0),d0
00010CD2 D068 0030                  		add.w	$30(a0),d0
00010CD6 3140 000C                  		move.w	d0,$C(a0)
00010CDA 4E75                       		rts	
00010CDC                            ; ===========================================================================
00010CDC                            
00010CDC                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00010CDC 6100 0000                  		bsr.w	Obj59_Move
00010CE0 3028 0034                  		move.w	$34(a0),d0
00010CE4 E240                       		asr.w	#1,d0
00010CE6 4440                       		neg.w	d0
00010CE8 D068 0030                  		add.w	$30(a0),d0
00010CEC 3140 000C                  		move.w	d0,$C(a0)
00010CF0 3028 0034                  		move.w	$34(a0),d0
00010CF4 D068 0032                  		add.w	$32(a0),d0
00010CF8 3140 0008                  		move.w	d0,8(a0)
00010CFC 4E75                       		rts	
00010CFE                            ; ===========================================================================
00010CFE                            
00010CFE                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00010CFE 6100 0000                  		bsr.w	Obj59_Move
00010D02 3028 0034                  		move.w	$34(a0),d0
00010D06 E240                       		asr.w	#1,d0
00010D08 D068 0030                  		add.w	$30(a0),d0
00010D0C 3140 000C                  		move.w	d0,$C(a0)
00010D10 3028 0034                  		move.w	$34(a0),d0
00010D14 4440                       		neg.w	d0
00010D16 D068 0032                  		add.w	$32(a0),d0
00010D1A 3140 0008                  		move.w	d0,8(a0)
00010D1E 4E75                       		rts	
00010D20                            ; ===========================================================================
00010D20                            
00010D20                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00010D20 6100 0000                  		bsr.w	Obj59_Move
00010D24 3028 0034                  		move.w	$34(a0),d0
00010D28 4440                       		neg.w	d0
00010D2A D068 0030                  		add.w	$30(a0),d0
00010D2E 3140 000C                  		move.w	d0,$C(a0)
00010D32 4A28 0028                  		tst.b	$28(a0)
00010D36 6700 0000                  		beq.w	loc_10C94
00010D3A 4E75                       		rts	
00010D3C                            ; ===========================================================================
00010D3C                            
00010D3C                            loc_10C94:
00010D3C 0828 0003 0022             		btst	#3,$22(a0)
00010D42 6700                       		beq.s	Obj59_Delete
00010D44 08E9 0001 0022             		bset	#1,$22(a1)
00010D4A 08A9 0003 0022             		bclr	#3,$22(a1)
00010D50 137C 0002 0024             		move.b	#2,$24(a1)
00010D56                            
00010D56                            Obj59_Delete:
00010D56 6000 C9AA                  		bra.w	DeleteObject
00010D5A                            
00010D5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010D5A                            
00010D5A                            
00010D5A                            Obj59_Move:				; XREF: Obj59_Type02; et al
00010D5A 3028 0038                  		move.w	$38(a0),d0
00010D5E 4A28 003A                  		tst.b	$3A(a0)
00010D62 6600                       		bne.s	loc_10CC8
00010D64 0C40 0800                  		cmpi.w	#$800,d0
00010D68 6400                       		bcc.s	loc_10CD0
00010D6A 0640 0010                  		addi.w	#$10,d0
00010D6E 6000                       		bra.s	loc_10CD0
00010D70                            ; ===========================================================================
00010D70                            
00010D70                            loc_10CC8:
00010D70 4A40                       		tst.w	d0
00010D72 6700                       		beq.s	loc_10CD0
00010D74 0440 0010                  		subi.w	#$10,d0
00010D78                            
00010D78                            loc_10CD0:
00010D78 3140 0038                  		move.w	d0,$38(a0)
00010D7C 48C0                       		ext.l	d0
00010D7E E180                       		asl.l	#8,d0
00010D80 D0A8 0034                  		add.l	$34(a0),d0
00010D84 2140 0034                  		move.l	d0,$34(a0)
00010D88 4840                       		swap	d0
00010D8A 3428 003C                  		move.w	$3C(a0),d2
00010D8E B042                       		cmp.w	d2,d0
00010D90 6300                       		bls.s	loc_10CF0
00010D92 117C 0001 003A             		move.b	#1,$3A(a0)
00010D98                            
00010D98                            loc_10CF0:
00010D98 D442                       		add.w	d2,d2
00010D9A B042                       		cmp.w	d2,d0
00010D9C 6600                       		bne.s	locret_10CFA
00010D9E 4228 0028                  		clr.b	$28(a0)
00010DA2                            
00010DA2                            locret_10CFA:
00010DA2 4E75                       		rts	
00010DA4                            ; End of function Obj59_Move
00010DA4                            
00010DA4                            ; ===========================================================================
00010DA4                            
00010DA4                            Obj59_MakeMulti:			; XREF: Obj59_Index
00010DA4 5368 003C                  		subq.w	#1,$3C(a0)
00010DA8 6600                       		bne.s	Obj59_ChkDel
00010DAA 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00010DB0 6100 CD9A                  		bsr.w	SingleObjLoad
00010DB4 6600                       		bne.s	Obj59_ChkDel
00010DB6 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00010DBA 3368 0008 0008             		move.w	8(a0),8(a1)
00010DC0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010DC6 137C 000E 0028             		move.b	#$E,$28(a1)
00010DCC                            
00010DCC                            Obj59_ChkDel:
00010DCC 588F                       		addq.l	#4,sp
00010DCE 3028 0008                  		move.w	8(a0),d0
00010DD2 0240 FF80                  		andi.w	#$FF80,d0
00010DD6 3238 F700                  		move.w	($FFFFF700).w,d1
00010DDA 0441 0080                  		subi.w	#$80,d1
00010DDE 0241 FF80                  		andi.w	#$FF80,d1
00010DE2 9041                       		sub.w	d1,d0
00010DE4 0C40 0280                  		cmpi.w	#$280,d0
00010DE8 6200 C918                  		bhi.w	DeleteObject
00010DEC 4E75                       		rts	
00010DEE                            ; ===========================================================================
00010DEE                            ; ---------------------------------------------------------------------------
00010DEE                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00010DEE                            ; ---------------------------------------------------------------------------
00010DEE                            Map_obj59:
00010DEE                            	include "_maps\obj59.asm"
00010DEE                            ; ---------------------------------------------------------------------------
00010DEE                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00010DEE                            ; ---------------------------------------------------------------------------
00010DEE 0000                       		dc.w byte_10D4A-Map_obj59
00010DF0 03                         byte_10D4A:	dc.b 3
00010DF1 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00010DF6 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00010DFB F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00010E00                            		even
00010E00                            		even
00010E00                            
00010E00                            ; ===========================================================================
00010E00                            ; ---------------------------------------------------------------------------
00010E00                            ; Object 5A - platforms	moving in circles (SLZ)
00010E00                            ; ---------------------------------------------------------------------------
00010E00                            
00010E00                            Obj5A:					; XREF: Obj_Index
00010E00 7000                       		moveq	#0,d0
00010E02 1028 0024                  		move.b	$24(a0),d0
00010E06 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00010E0A 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00010E0E 3028 0032                  		move.w	$32(a0),d0
00010E12 0240 FF80                  		andi.w	#$FF80,d0
00010E16 3238 F700                  		move.w	($FFFFF700).w,d1
00010E1A 0441 0080                  		subi.w	#$80,d1
00010E1E 0241 FF80                  		andi.w	#$FF80,d1
00010E22 9041                       		sub.w	d1,d0
00010E24 0C40 0280                  		cmpi.w	#$280,d0
00010E28 6200 C8D8                  		bhi.w	DeleteObject
00010E2C 6000 C898                  		bra.w	DisplaySprite
00010E30                            ; ===========================================================================
00010E30 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00010E32 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00010E34 0000                       		dc.w Obj5A_Action-Obj5A_Index
00010E36                            ; ===========================================================================
00010E36                            
00010E36                            Obj5A_Main:				; XREF: Obj5A_Index
00010E36 5428 0024                  		addq.b	#2,$24(a0)
00010E3A 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00010E42 317C 4000 0002             		move.w	#$4000,2(a0)
00010E48 117C 0004 0001             		move.b	#4,1(a0)
00010E4E 117C 0004 0018             		move.b	#4,$18(a0)
00010E54 117C 0018 0019             		move.b	#$18,$19(a0)
00010E5A 3168 0008 0032             		move.w	8(a0),$32(a0)
00010E60 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010E66                            
00010E66                            Obj5A_Platform:				; XREF: Obj5A_Index
00010E66 7200                       		moveq	#0,d1
00010E68 1228 0019                  		move.b	$19(a0),d1
00010E6C 4EB9 0000 7550             		jsr	(PlatformObject).l
00010E72 6000 0000                  		bra.w	Obj5A_Types
00010E76                            ; ===========================================================================
00010E76                            
00010E76                            Obj5A_Action:				; XREF: Obj5A_Index
00010E76 7200                       		moveq	#0,d1
00010E78 1228 0019                  		move.b	$19(a0),d1
00010E7C 4EB9 0000 76C4             		jsr	(ExitPlatform).l
00010E82 3F28 0008                  		move.w	8(a0),-(sp)
00010E86 6100 0000                  		bsr.w	Obj5A_Types
00010E8A 341F                       		move.w	(sp)+,d2
00010E8C 4EF9 0000 7C2E             		jmp	(MvSonicOnPtfm2).l
00010E92                            ; ===========================================================================
00010E92                            
00010E92                            Obj5A_Types:
00010E92 7000                       		moveq	#0,d0
00010E94 1028 0028                  		move.b	$28(a0),d0
00010E98 0240 000C                  		andi.w	#$C,d0
00010E9C E248                       		lsr.w	#1,d0
00010E9E 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00010EA2 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00010EA6                            ; ===========================================================================
00010EA6 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00010EA8 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00010EAA                            ; ===========================================================================
00010EAA                            
00010EAA                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00010EAA 1238 FE80                  		move.b	($FFFFFE80).w,d1
00010EAE 0401 0050                  		subi.b	#$50,d1
00010EB2 4881                       		ext.w	d1
00010EB4 1438 FE84                  		move.b	($FFFFFE84).w,d2
00010EB8 0402 0050                  		subi.b	#$50,d2
00010EBC 4882                       		ext.w	d2
00010EBE 0828 0000 0028             		btst	#0,$28(a0)
00010EC4 6700                       		beq.s	loc_10E24
00010EC6 4441                       		neg.w	d1
00010EC8 4442                       		neg.w	d2
00010ECA                            
00010ECA                            loc_10E24:
00010ECA 0828 0001 0028             		btst	#1,$28(a0)
00010ED0 6700                       		beq.s	loc_10E30
00010ED2 4441                       		neg.w	d1
00010ED4 C342                       		exg	d1,d2
00010ED6                            
00010ED6                            loc_10E30:
00010ED6 D268 0032                  		add.w	$32(a0),d1
00010EDA 3141 0008                  		move.w	d1,8(a0)
00010EDE D468 0030                  		add.w	$30(a0),d2
00010EE2 3142 000C                  		move.w	d2,$C(a0)
00010EE6 4E75                       		rts	
00010EE8                            ; ===========================================================================
00010EE8                            
00010EE8                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00010EE8 1238 FE80                  		move.b	($FFFFFE80).w,d1
00010EEC 0401 0050                  		subi.b	#$50,d1
00010EF0 4881                       		ext.w	d1
00010EF2 1438 FE84                  		move.b	($FFFFFE84).w,d2
00010EF6 0402 0050                  		subi.b	#$50,d2
00010EFA 4882                       		ext.w	d2
00010EFC 0828 0000 0028             		btst	#0,$28(a0)
00010F02 6700                       		beq.s	loc_10E62
00010F04 4441                       		neg.w	d1
00010F06 4442                       		neg.w	d2
00010F08                            
00010F08                            loc_10E62:
00010F08 0828 0001 0028             		btst	#1,$28(a0)
00010F0E 6700                       		beq.s	loc_10E6E
00010F10 4441                       		neg.w	d1
00010F12 C342                       		exg	d1,d2
00010F14                            
00010F14                            loc_10E6E:
00010F14 4441                       		neg.w	d1
00010F16 D268 0032                  		add.w	$32(a0),d1
00010F1A 3141 0008                  		move.w	d1,8(a0)
00010F1E D468 0030                  		add.w	$30(a0),d2
00010F22 3142 000C                  		move.w	d2,$C(a0)
00010F26 4E75                       		rts	
00010F28                            ; ===========================================================================
00010F28                            ; ---------------------------------------------------------------------------
00010F28                            ; Sprite mappings - platforms that move	in circles (SLZ)
00010F28                            ; ---------------------------------------------------------------------------
00010F28                            Map_obj5A:
00010F28                            	include "_maps\obj5A.asm"
00010F28                            ; ---------------------------------------------------------------------------
00010F28                            ; Sprite mappings - platforms that move	in circles (SLZ)
00010F28                            ; ---------------------------------------------------------------------------
00010F28 0000                       		dc.w byte_10E84-Map_obj5A
00010F2A 02                         byte_10E84:	dc.b 2
00010F2B F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00010F30 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00010F36 00                         		even
00010F36 00                         		even
00010F36                            
00010F36                            ; ===========================================================================
00010F36                            ; ---------------------------------------------------------------------------
00010F36                            ; Object 5B - blocks that form a staircase (SLZ)
00010F36                            ; ---------------------------------------------------------------------------
00010F36                            
00010F36                            Obj5B:					; XREF: Obj_Index
00010F36 7000                       		moveq	#0,d0
00010F38 1028 0024                  		move.b	$24(a0),d0
00010F3C 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00010F40 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00010F44 3028 0030                  		move.w	$30(a0),d0
00010F48 0240 FF80                  		andi.w	#$FF80,d0
00010F4C 3238 F700                  		move.w	($FFFFF700).w,d1
00010F50 0441 0080                  		subi.w	#$80,d1
00010F54 0241 FF80                  		andi.w	#$FF80,d1
00010F58 9041                       		sub.w	d1,d0
00010F5A 0C40 0280                  		cmpi.w	#$280,d0
00010F5E 6200 C7A2                  		bhi.w	DeleteObject
00010F62 6000 C762                  		bra.w	DisplaySprite
00010F66                            ; ===========================================================================
00010F66 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00010F68 0000                       		dc.w Obj5B_Move-Obj5B_Index
00010F6A 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00010F6C                            ; ===========================================================================
00010F6C                            
00010F6C                            Obj5B_Main:				; XREF: Obj5B_Index
00010F6C 5428 0024                  		addq.b	#2,$24(a0)
00010F70 7638                       		moveq	#$38,d3
00010F72 7801                       		moveq	#1,d4
00010F74 0828 0000 0022             		btst	#0,$22(a0)
00010F7A 6700                       		beq.s	loc_10EDA
00010F7C 763B                       		moveq	#$3B,d3
00010F7E 78FF                       		moveq	#-1,d4
00010F80                            
00010F80                            loc_10EDA:
00010F80 3428 0008                  		move.w	8(a0),d2
00010F84 2248                       		movea.l	a0,a1
00010F86 7203                       		moveq	#3,d1
00010F88 6000                       		bra.s	Obj5B_MakeBlocks
00010F8A                            ; ===========================================================================
00010F8A                            
00010F8A                            Obj5B_Loop:
00010F8A 6100 CBD6                  		bsr.w	SingleObjLoad2
00010F8E 6600 0000                  		bne.w	Obj5B_Move
00010F92 137C 0004 0024             		move.b	#4,$24(a1)
00010F98                            
00010F98                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00010F98 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00010F9C 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00010FA4 337C 4000 0002             		move.w	#$4000,2(a1)
00010FAA 137C 0004 0001             		move.b	#4,1(a1)
00010FB0 137C 0003 0018             		move.b	#3,$18(a1)
00010FB6 137C 0010 0019             		move.b	#$10,$19(a1)
00010FBC 1368 0028 0028             		move.b	$28(a0),$28(a1)
00010FC2 3342 0008                  		move.w	d2,8(a1)
00010FC6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010FCC 3368 0008 0030             		move.w	8(a0),$30(a1)
00010FD2 3369 000C 0032             		move.w	$C(a1),$32(a1)
00010FD8 0642 0020                  		addi.w	#$20,d2
00010FDC 1343 0037                  		move.b	d3,$37(a1)
00010FE0 2348 003C                  		move.l	a0,$3C(a1)
00010FE4 D604                       		add.b	d4,d3
00010FE6 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00010FEA                            
00010FEA                            Obj5B_Move:				; XREF: Obj5B_Index
00010FEA 7000                       		moveq	#0,d0
00010FEC 1028 0028                  		move.b	$28(a0),d0
00010FF0 0240 0007                  		andi.w	#7,d0
00010FF4 D040                       		add.w	d0,d0
00010FF6 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00010FFA 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00010FFE                            
00010FFE                            Obj5B_Solid:				; XREF: Obj5B_Index
00010FFE 2468 003C                  		movea.l	$3C(a0),a2
00011002 7000                       		moveq	#0,d0
00011004 1028 0037                  		move.b	$37(a0),d0
00011008 1032 0000                  		move.b	(a2,d0.w),d0
0001100C D068 0032                  		add.w	$32(a0),d0
00011010 3140 000C                  		move.w	d0,$C(a0)
00011014 7200                       		moveq	#0,d1
00011016 1228 0019                  		move.b	$19(a0),d1
0001101A 0641 000B                  		addi.w	#$B,d1
0001101E 343C 0010                  		move.w	#$10,d2
00011022 363C 0011                  		move.w	#$11,d3
00011026 3828 0008                  		move.w	8(a0),d4
0001102A 6100 EA5A                  		bsr.w	SolidObject
0001102E 4A04                       		tst.b	d4
00011030 6A00                       		bpl.s	loc_10F92
00011032 1544 0036                  		move.b	d4,$36(a2)
00011036                            
00011036                            loc_10F92:
00011036 0828 0003 0022             		btst	#3,$22(a0)
0001103C 6700                       		beq.s	locret_10FA0
0001103E 157C 0001 0036             		move.b	#1,$36(a2)
00011044                            
00011044                            locret_10FA0:
00011044 4E75                       		rts	
00011046                            ; ===========================================================================
00011046 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011048 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001104A 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
0001104C 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001104E                            ; ===========================================================================
0001104E                            
0001104E                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
0001104E 4A68 0034                  		tst.w	$34(a0)
00011052 6600                       		bne.s	loc_10FC0
00011054 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001105A 6600                       		bne.s	locret_10FBE
0001105C 317C 001E 0034             		move.w	#$1E,$34(a0)
00011062                            
00011062                            locret_10FBE:
00011062 4E75                       		rts	
00011064                            ; ===========================================================================
00011064                            
00011064                            loc_10FC0:
00011064 5368 0034                  		subq.w	#1,$34(a0)
00011068 66F8                       		bne.s	locret_10FBE
0001106A 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001106E 4E75                       		rts	
00011070                            ; ===========================================================================
00011070                            
00011070                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011070 4A68 0034                  		tst.w	$34(a0)
00011074 6600                       		bne.s	loc_10FE0
00011076 4A28 0036                  		tst.b	$36(a0)
0001107A 6A00                       		bpl.s	locret_10FDE
0001107C 317C 003C 0034             		move.w	#$3C,$34(a0)
00011082                            
00011082                            locret_10FDE:
00011082 4E75                       		rts	
00011084                            ; ===========================================================================
00011084                            
00011084                            loc_10FE0:
00011084 5368 0034                  		subq.w	#1,$34(a0)
00011088 6600                       		bne.s	loc_10FEC
0001108A 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001108E 4E75                       		rts	
00011090                            ; ===========================================================================
00011090                            
00011090                            loc_10FEC:
00011090 43E8 0038                  		lea	$38(a0),a1
00011094 3028 0034                  		move.w	$34(a0),d0
00011098 E408                       		lsr.b	#2,d0
0001109A 0200 0001                  		andi.b	#1,d0
0001109E 12C0                       		move.b	d0,(a1)+
000110A0 0A00 0001                  		eori.b	#1,d0
000110A4 12C0                       		move.b	d0,(a1)+
000110A6 0A00 0001                  		eori.b	#1,d0
000110AA 12C0                       		move.b	d0,(a1)+
000110AC 0A00 0001                  		eori.b	#1,d0
000110B0 12C0                       		move.b	d0,(a1)+
000110B2 4E75                       		rts	
000110B4                            ; ===========================================================================
000110B4                            
000110B4                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000110B4 43E8 0038                  		lea	$38(a0),a1
000110B8 0C11 0080                  		cmpi.b	#$80,(a1)
000110BC 6700                       		beq.s	locret_11038
000110BE 5211                       		addq.b	#1,(a1)
000110C0 7200                       		moveq	#0,d1
000110C2 1219                       		move.b	(a1)+,d1
000110C4 4841                       		swap	d1
000110C6 E289                       		lsr.l	#1,d1
000110C8 2401                       		move.l	d1,d2
000110CA E289                       		lsr.l	#1,d1
000110CC 2601                       		move.l	d1,d3
000110CE D682                       		add.l	d2,d3
000110D0 4841                       		swap	d1
000110D2 4842                       		swap	d2
000110D4 4843                       		swap	d3
000110D6 12C3                       		move.b	d3,(a1)+
000110D8 12C2                       		move.b	d2,(a1)+
000110DA 12C1                       		move.b	d1,(a1)+
000110DC                            
000110DC                            locret_11038:
000110DC 4E75                       		rts	
000110DE 4E75                       		rts	
000110E0                            ; ===========================================================================
000110E0                            ; ---------------------------------------------------------------------------
000110E0                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000110E0                            ; ---------------------------------------------------------------------------
000110E0                            Map_obj5B:
000110E0                            	include "_maps\obj5B.asm"
000110E0                            ; ---------------------------------------------------------------------------
000110E0                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000110E0                            ; ---------------------------------------------------------------------------
000110E0 0000                       		dc.w byte_1103E-Map_obj5B
000110E2 01                         byte_1103E:	dc.b 1
000110E3 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000110E8                            		even
000110E8                            		even
000110E8                            
000110E8                            ; ===========================================================================
000110E8                            ; ---------------------------------------------------------------------------
000110E8                            ; Object 5C - metal girders in foreground (SLZ)
000110E8                            ; ---------------------------------------------------------------------------
000110E8                            
000110E8                            Obj5C:					; XREF: Obj_Index
000110E8 7000                       		moveq	#0,d0
000110EA 1028 0024                  		move.b	$24(a0),d0
000110EE 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
000110F2 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
000110F6                            ; ===========================================================================
000110F6 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000110F8 0000                       		dc.w Obj5C_Display-Obj5C_Index
000110FA                            ; ===========================================================================
000110FA                            
000110FA                            Obj5C_Main:				; XREF: Obj5C_Index
000110FA 5428 0024                  		addq.b	#2,$24(a0)
000110FE 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011106 317C 83CC 0002             		move.w	#$83CC,2(a0)
0001110C 117C 0010 0019             		move.b	#$10,$19(a0)
00011112                            
00011112                            Obj5C_Display:				; XREF: Obj5C_Index
00011112 2238 F700                  		move.l	($FFFFF700).w,d1
00011116 D281                       		add.l	d1,d1
00011118 4841                       		swap	d1
0001111A 4441                       		neg.w	d1
0001111C 3141 0008                  		move.w	d1,8(a0)
00011120 2238 F704                  		move.l	($FFFFF704).w,d1
00011124 D281                       		add.l	d1,d1
00011126 4841                       		swap	d1
00011128 0241 003F                  		andi.w	#$3F,d1
0001112C 4441                       		neg.w	d1
0001112E 0641 0100                  		addi.w	#$100,d1
00011132 3141 000A                  		move.w	d1,$A(a0)
00011136 6000 C58E                  		bra.w	DisplaySprite
0001113A                            ; ===========================================================================
0001113A                            ; ---------------------------------------------------------------------------
0001113A                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001113A                            ; ---------------------------------------------------------------------------
0001113A                            Map_obj5C:
0001113A                            	include "_maps\obj5C.asm"
0001113A                            ; ---------------------------------------------------------------------------
0001113A                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001113A                            ; ---------------------------------------------------------------------------
0001113A 0000                       		dc.w byte_11098-Map_obj5C
0001113C 09                         byte_11098:	dc.b 9
0001113D 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011142 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011147 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
0001114C E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011151 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011156 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001115B 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011160 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011165 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001116A                            		even
0001116A                            		even
0001116A                            
0001116A                            ; ===========================================================================
0001116A                            ; ---------------------------------------------------------------------------
0001116A                            ; Object 1B - water surface (LZ)
0001116A                            ; ---------------------------------------------------------------------------
0001116A                            
0001116A                            Obj1B:					; XREF: Obj_Index
0001116A 7000                       		moveq	#0,d0
0001116C 1028 0024                  		move.b	$24(a0),d0
00011170 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011174 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011178                            ; ===========================================================================
00011178 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
0001117A 0000                       		dc.w Obj1B_Action-Obj1B_Index
0001117C                            ; ===========================================================================
0001117C                            
0001117C                            Obj1B_Main:				; XREF: Obj1B_Index
0001117C 5428 0024                  		addq.b	#2,$24(a0)
00011180 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011188 317C C300 0002             		move.w	#$C300,2(a0)
0001118E 117C 0004 0001             		move.b	#4,1(a0)
00011194 117C 0080 0019             		move.b	#$80,$19(a0)
0001119A 3168 0008 0030             		move.w	8(a0),$30(a0)
000111A0                            
000111A0                            Obj1B_Action:				; XREF: Obj1B_Index
000111A0 3238 F700                  		move.w	($FFFFF700).w,d1
000111A4 0241 FFE0                  		andi.w	#$FFE0,d1
000111A8 D268 0030                  		add.w	$30(a0),d1
000111AC 0838 0000 FE05             		btst	#0,($FFFFFE05).w
000111B2 6700                       		beq.s	loc_11114
000111B4 0641 0020                  		addi.w	#$20,d1
000111B8                            
000111B8                            loc_11114:
000111B8 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
000111BC 3238 F646                  		move.w	($FFFFF646).w,d1
000111C0 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
000111C4 4A28 0032                  		tst.b	$32(a0)
000111C8 6600                       		bne.s	Obj1B_Animate
000111CA 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000111D0 6700                       		beq.s	loc_1114A	; if not, branch
000111D2 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
000111D6 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
000111DC 6000                       		bra.s	Obj1B_Display
000111DE                            ; ===========================================================================
000111DE                            
000111DE                            Obj1B_Animate:				; XREF: loc_11114
000111DE 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
000111E2 6600                       		bne.s	Obj1B_Display	; if yes, branch
000111E4 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
000111EA 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
000111EE                            
000111EE                            loc_1114A:				; XREF: loc_11114
000111EE 5328 001E                  		subq.b	#1,$1E(a0)
000111F2 6A00                       		bpl.s	Obj1B_Display
000111F4 117C 0007 001E             		move.b	#7,$1E(a0)
000111FA 5228 001A                  		addq.b	#1,$1A(a0)
000111FE 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011204 6500                       		bcs.s	Obj1B_Display
00011206 117C 0000 001A             		move.b	#0,$1A(a0)
0001120C                            
0001120C                            Obj1B_Display:
0001120C 6000 C4B8                  		bra.w	DisplaySprite
00011210                            ; ===========================================================================
00011210                            ; ---------------------------------------------------------------------------
00011210                            ; Sprite mappings - water surface (LZ)
00011210                            ; ---------------------------------------------------------------------------
00011210                            Map_obj1B:
00011210                            	include "_maps\obj1B.asm"
00011210                            ; ---------------------------------------------------------------------------
00011210                            ; Sprite mappings - water surface (LZ)
00011210                            ; ---------------------------------------------------------------------------
00011210 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011214 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011218 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
0001121C 03                         byte_11178:	dc.b 3
0001121D FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011222 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011227 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001122C 03                         byte_11188:	dc.b 3
0001122D FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011232 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011237 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001123C 03                         byte_11198:	dc.b 3
0001123D FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011242 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011247 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001124C 06                         byte_111A8:	dc.b 6
0001124D FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011252 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011257 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001125C FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011261 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011266 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
0001126B 06                         byte_111C7:	dc.b 6
0001126C FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011271 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011276 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001127B FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011280 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011285 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
0001128A 06                         byte_111E6:	dc.b 6
0001128B FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011290 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011295 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001129A FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
0001129F FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000112A4 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
000112AA 00                         		even
000112AA 00                         		even
000112AA                            
000112AA                            ; ===========================================================================
000112AA                            ; ---------------------------------------------------------------------------
000112AA                            ; Object 0B - pole that	breaks (LZ)
000112AA                            ; ---------------------------------------------------------------------------
000112AA                            
000112AA                            Obj0B:					; XREF: Obj_Index
000112AA 7000                       		moveq	#0,d0
000112AC 1028 0024                  		move.b	$24(a0),d0
000112B0 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
000112B4 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
000112B8                            ; ===========================================================================
000112B8 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
000112BA 0000                       		dc.w Obj0B_Action-Obj0B_Index
000112BC 0000                       		dc.w Obj0B_Display-Obj0B_Index
000112BE                            ; ===========================================================================
000112BE                            
000112BE                            Obj0B_Main:				; XREF: Obj0B_Index
000112BE 5428 0024                  		addq.b	#2,$24(a0)
000112C2 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
000112CA 317C 43DE 0002             		move.w	#$43DE,2(a0)
000112D0 117C 0004 0001             		move.b	#4,1(a0)
000112D6 117C 0008 0019             		move.b	#8,$19(a0)
000112DC 117C 0004 0018             		move.b	#4,$18(a0)
000112E2 117C 00E1 0020             		move.b	#$E1,$20(a0)
000112E8 7000                       		moveq	#0,d0
000112EA 1028 0028                  		move.b	$28(a0),d0	; get object type
000112EE C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000112F2 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
000112F6                            
000112F6                            Obj0B_Action:				; XREF: Obj0B_Index
000112F6 4A28 0032                  		tst.b	$32(a0)
000112FA 6700                       		beq.s	Obj0B_Grab
000112FC 4A68 0030                  		tst.w	$30(a0)
00011300 6700                       		beq.s	Obj0B_MoveUp
00011302 5368 0030                  		subq.w	#1,$30(a0)
00011306 6600                       		bne.s	Obj0B_MoveUp
00011308 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
0001130E 6000                       		bra.s	Obj0B_Release
00011310                            ; ===========================================================================
00011310                            
00011310                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011310 43F8 D000                  		lea	($FFFFD000).w,a1
00011314 3028 000C                  		move.w	$C(a0),d0
00011318 0440 0018                  		subi.w	#$18,d0
0001131C 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011322 6700                       		beq.s	Obj0B_MoveDown
00011324 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011328 B069 000C                  		cmp.w	$C(a1),d0
0001132C 6500                       		bcs.s	Obj0B_MoveDown
0001132E 3340 000C                  		move.w	d0,$C(a1)
00011332                            
00011332                            Obj0B_MoveDown:
00011332 0640 0024                  		addi.w	#$24,d0
00011336 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
0001133C 6700                       		beq.s	Obj0B_LetGo
0001133E 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011342 B069 000C                  		cmp.w	$C(a1),d0
00011346 6400                       		bcc.s	Obj0B_LetGo
00011348 3340 000C                  		move.w	d0,$C(a1)
0001134C                            
0001134C                            Obj0B_LetGo:
0001134C 1038 F603                  		move.b	($FFFFF603).w,d0
00011350 0240 0070                  		andi.w	#$70,d0
00011354 6700                       		beq.s	Obj0B_Display
00011356                            
00011356                            Obj0B_Release:				; XREF: Obj0B_Action
00011356 4228 0020                  		clr.b	$20(a0)
0001135A 5428 0024                  		addq.b	#2,$24(a0)
0001135E 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011362 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011366 4228 0032                  		clr.b	$32(a0)
0001136A 6000                       		bra.s	Obj0B_Display
0001136C                            ; ===========================================================================
0001136C                            
0001136C                            Obj0B_Grab:				; XREF: Obj0B_Action
0001136C 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011370 6700                       		beq.s	Obj0B_Display	; if not, branch
00011372 43F8 D000                  		lea	($FFFFD000).w,a1
00011376 3028 0008                  		move.w	8(a0),d0
0001137A 0640 0014                  		addi.w	#$14,d0
0001137E B069 0008                  		cmp.w	8(a1),d0
00011382 6400                       		bcc.s	Obj0B_Display
00011384 4228 0021                  		clr.b	$21(a0)
00011388 0C29 0004 0024             		cmpi.b	#4,$24(a1)
0001138E 6400                       		bcc.s	Obj0B_Display
00011390 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011394 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011398 3028 0008                  		move.w	8(a0),d0
0001139C 0640 0014                  		addi.w	#$14,d0
000113A0 3340 0008                  		move.w	d0,8(a1)
000113A4 08A9 0000 0022             		bclr	#0,$22(a1)
000113AA 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
000113B0 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000113B6 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000113BC 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
000113C2                            
000113C2                            Obj0B_Display:				; XREF: Obj0B_Index
000113C2 6000 E39A                  		bra.w	MarkObjGone
000113C6                            ; ===========================================================================
000113C6                            ; ---------------------------------------------------------------------------
000113C6                            ; Sprite mappings - pole that breaks (LZ)
000113C6                            ; ---------------------------------------------------------------------------
000113C6                            Map_obj0B:
000113C6                            	include "_maps\obj0B.asm"
000113C6                            ; ---------------------------------------------------------------------------
000113C6                            ; Sprite mappings - pole that breaks (LZ)
000113C6                            ; ---------------------------------------------------------------------------
000113C6 0000                       		dc.w byte_11326-Map_obj0B
000113C8 0000                       		dc.w byte_11331-Map_obj0B
000113CA 02                         byte_11326:	dc.b 2			; normal pole
000113CB E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
000113D0 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
000113D5 04                         byte_11331:	dc.b 4			; broken pole
000113D6 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
000113DB F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
000113E0 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000113E5 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
000113EA                            		even
000113EA                            		even
000113EA                            
000113EA                            ; ===========================================================================
000113EA                            ; ---------------------------------------------------------------------------
000113EA                            ; Object 0C - flapping door (LZ)
000113EA                            ; ---------------------------------------------------------------------------
000113EA                            
000113EA                            Obj0C:					; XREF: Obj_Index
000113EA 7000                       		moveq	#0,d0
000113EC 1028 0024                  		move.b	$24(a0),d0
000113F0 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
000113F4 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
000113F8                            ; ===========================================================================
000113F8 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
000113FA 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
000113FC                            ; ===========================================================================
000113FC                            
000113FC                            Obj0C_Main:				; XREF: Obj0C_Index
000113FC 5428 0024                  		addq.b	#2,$24(a0)
00011400 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011408 317C 4328 0002             		move.w	#$4328,2(a0)
0001140E 0028 0004 0001             		ori.b	#4,1(a0)
00011414 117C 0028 0019             		move.b	#$28,$19(a0)
0001141A 7000                       		moveq	#0,d0
0001141C 1028 0028                  		move.b	$28(a0),d0	; get object type
00011420 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011424 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011428                            
00011428                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011428 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0001142C 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
0001142E 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011434 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
0001143A 4A28 0001                  		tst.b	1(a0)
0001143E 6A00                       		bpl.s	Obj0C_Solid
00011440 303C 00BB                  		move.w	#$BB,d0
00011444 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play door sound
0001144A                            
0001144A                            Obj0C_Solid:
0001144A 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011450 6100 93A0                  		bsr.w	AnimateSprite
00011454 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011458 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0001145C 6600                       		bne.s	Obj0C_Display	; if yes, branch
0001145E 3038 D008                  		move.w	($FFFFD008).w,d0
00011462 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011466 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011468 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
0001146E 323C 0013                  		move.w	#$13,d1
00011472 343C 0020                  		move.w	#$20,d2
00011476 3602                       		move.w	d2,d3
00011478 5243                       		addq.w	#1,d3
0001147A 3828 0008                  		move.w	8(a0),d4
0001147E 6100 E606                  		bsr.w	SolidObject	; make the door	solid
00011482                            
00011482                            Obj0C_Display:
00011482 6000 E2DA                  		bra.w	MarkObjGone
00011486                            ; ===========================================================================
00011486                            Ani_obj0C:
00011486                            	include "_anim\obj0C.asm"
00011486                            ; ---------------------------------------------------------------------------
00011486                            ; Animation script - flapping door (LZ)
00011486                            ; ---------------------------------------------------------------------------
00011486 0000                       		dc.w byte_113E6-Ani_obj0C
00011488 0000                       		dc.w byte_113EC-Ani_obj0C
0001148A 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011490 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011496                            		even
00011496                            		even
00011496                            
00011496                            ; ---------------------------------------------------------------------------
00011496                            ; Sprite mappings - flapping door (LZ)
00011496                            ; ---------------------------------------------------------------------------
00011496                            Map_obj0C:
00011496                            	include "_maps\obj0C.asm"
00011496                            ; ---------------------------------------------------------------------------
00011496                            ; Sprite mappings - flapping door (LZ)
00011496                            ; ---------------------------------------------------------------------------
00011496 0000                       		dc.w byte_113F8-Map_obj0C
00011498 0000                       		dc.w byte_11403-Map_obj0C
0001149A 0000                       		dc.w byte_1140E-Map_obj0C
0001149C 02                         byte_113F8:	dc.b 2
0001149D E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000114A2 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000114A7 02                         byte_11403:	dc.b 2
000114A8 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
000114AD 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
000114B2 02                         byte_1140E:	dc.b 2
000114B3 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
000114B8 180D 1018 00               		dc.b $18, $D, $10, $18,	0
000114BE 00                         		even
000114BE 00                         		even
000114BE                            
000114BE                            ; ===========================================================================
000114BE                            ; ---------------------------------------------------------------------------
000114BE                            ; Object 71 - invisible	solid blocks
000114BE                            ; ---------------------------------------------------------------------------
000114BE                            
000114BE                            Obj71:					; XREF: Obj_Index
000114BE 7000                       		moveq	#0,d0
000114C0 1028 0024                  		move.b	$24(a0),d0
000114C4 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
000114C8 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
000114CC                            ; ===========================================================================
000114CC 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
000114CE 0000                       		dc.w Obj71_Solid-Obj71_Index
000114D0                            ; ===========================================================================
000114D0                            
000114D0                            Obj71_Main:				; XREF: Obj71_Index
000114D0 5428 0024                  		addq.b	#2,$24(a0)
000114D4 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
000114DC 317C 8680 0002             		move.w	#$8680,2(a0)
000114E2 0028 0004 0001             		ori.b	#4,1(a0)
000114E8 1028 0028                  		move.b	$28(a0),d0	; get object type
000114EC 1200                       		move.b	d0,d1
000114EE 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000114F2 0640 0010                  		addi.w	#$10,d0
000114F6 E248                       		lsr.w	#1,d0
000114F8 1140 0019                  		move.b	d0,$19(a0)	; set object width
000114FC 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011500 5241                       		addq.w	#1,d1
00011502 E749                       		lsl.w	#3,d1
00011504 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011508                            
00011508                            Obj71_Solid:				; XREF: Obj71_Index
00011508 6100 C436                  		bsr.w	ChkObjOnScreen
0001150C 6600                       		bne.s	Obj71_ChkDel
0001150E 7200                       		moveq	#0,d1
00011510 1228 0019                  		move.b	$19(a0),d1
00011514 0641 000B                  		addi.w	#$B,d1
00011518 7400                       		moveq	#0,d2
0001151A 1428 0016                  		move.b	$16(a0),d2
0001151E 3602                       		move.w	d2,d3
00011520 5243                       		addq.w	#1,d3
00011522 3828 0008                  		move.w	8(a0),d4
00011526 6100 E5A4                  		bsr.w	SolidObject71
0001152A                            
0001152A                            Obj71_ChkDel:
0001152A 3028 0008                  		move.w	8(a0),d0
0001152E 0240 FF80                  		andi.w	#$FF80,d0
00011532 3238 F700                  		move.w	($FFFFF700).w,d1
00011536 0441 0080                  		subi.w	#$80,d1
0001153A 0241 FF80                  		andi.w	#$FF80,d1
0001153E 9041                       		sub.w	d1,d0
00011540 0C40 0280                  		cmpi.w	#$280,d0
00011544 6200                       		bhi.s	Obj71_Delete
00011546 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
0001154A 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
0001154C 4EFA C178                  		jmp	DisplaySprite	; if yes, display the object
00011550                            ; ===========================================================================
00011550                            
00011550                            Obj71_NoDisplay:
00011550 4E75                       		rts	
00011552                            ; ===========================================================================
00011552                            
00011552                            Obj71_Delete:
00011552 4EFA C1AE                  		jmp	DeleteObject
00011556                            ; ===========================================================================
00011556                            ; ---------------------------------------------------------------------------
00011556                            ; Sprite mappings - invisible solid blocks
00011556                            ; ---------------------------------------------------------------------------
00011556                            Map_obj71:
00011556                            	include "_maps\obj71.asm"
00011556                            ; ---------------------------------------------------------------------------
00011556                            ; Sprite mappings - invisible solid blocks
00011556                            ; ---------------------------------------------------------------------------
00011556 0000                       		dc.w byte_114BC-Map_obj71
00011558 0000                       		dc.w byte_114D1-Map_obj71
0001155A 0000                       		dc.w byte_114E6-Map_obj71
0001155C 04                         byte_114BC:	dc.b 4
0001155D F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011562 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011567 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
0001156C 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011571 04                         byte_114D1:	dc.b 4
00011572 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011577 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
0001157C 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011581 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011586 04                         byte_114E6:	dc.b 4
00011587 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
0001158C E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011591 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011596 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
0001159C 00                         		even
0001159C 00                         		even
0001159C                            
0001159C                            ; ===========================================================================
0001159C                            ; ---------------------------------------------------------------------------
0001159C                            ; Object 5D - fans (SLZ)
0001159C                            ; ---------------------------------------------------------------------------
0001159C                            
0001159C                            Obj5D:					; XREF: Obj_Index
0001159C 7000                       		moveq	#0,d0
0001159E 1028 0024                  		move.b	$24(a0),d0
000115A2 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
000115A6 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
000115AA                            ; ===========================================================================
000115AA 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
000115AC 0000                       		dc.w Obj5D_Delay-Obj5D_Index
000115AE                            ; ===========================================================================
000115AE                            
000115AE                            Obj5D_Main:				; XREF: Obj5D_Index
000115AE 5428 0024                  		addq.b	#2,$24(a0)
000115B2 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
000115BA 317C 43A0 0002             		move.w	#$43A0,2(a0)
000115C0 0028 0004 0001             		ori.b	#4,1(a0)
000115C6 117C 0010 0019             		move.b	#$10,$19(a0)
000115CC 117C 0004 0018             		move.b	#4,$18(a0)
000115D2                            
000115D2                            Obj5D_Delay:				; XREF: Obj5D_Index
000115D2 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
000115D8 6600                       		bne.s	Obj5D_Blow	; if yes, branch
000115DA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000115DE 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
000115E0 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
000115E6 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
000115EC 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
000115EE 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
000115F4                            
000115F4                            Obj5D_Blow:
000115F4 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
000115F8 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
000115FC 43F8 D000                  		lea	($FFFFD000).w,a1
00011600 3029 0008                  		move.w	8(a1),d0
00011604 9068 0008                  		sub.w	8(a0),d0
00011608 0828 0000 0022             		btst	#0,$22(a0)
0001160E 6600                       		bne.s	Obj5D_ChkSonic
00011610 4440                       		neg.w	d0
00011612                            
00011612                            Obj5D_ChkSonic:
00011612 0640 0050                  		addi.w	#$50,d0
00011616 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
0001161A 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
0001161C 3229 000C                  		move.w	$C(a1),d1
00011620 0641 0060                  		addi.w	#$60,d1
00011624 9268 000C                  		sub.w	$C(a0),d1
00011628 6500                       		bcs.s	Obj5D_Animate
0001162A 0C41 0070                  		cmpi.w	#$70,d1
0001162E 6400                       		bcc.s	Obj5D_Animate
00011630 0440 0050                  		subi.w	#$50,d0
00011634 6400                       		bcc.s	loc_1159A
00011636 4640                       		not.w	d0
00011638 D040                       		add.w	d0,d0
0001163A                            
0001163A                            loc_1159A:
0001163A 0640 0060                  		addi.w	#$60,d0
0001163E 0828 0000 0022             		btst	#0,$22(a0)
00011644 6600                       		bne.s	loc_115A8
00011646 4440                       		neg.w	d0
00011648                            
00011648                            loc_115A8:
00011648 4400                       		neg.b	d0
0001164A E840                       		asr.w	#4,d0
0001164C 0828 0000 0028             		btst	#0,$28(a0)
00011652 6700                       		beq.s	Obj5D_MoveSonic
00011654 4440                       		neg.w	d0
00011656                            
00011656                            Obj5D_MoveSonic:
00011656 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
0001165A                            
0001165A                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
0001165A 5328 001E                  		subq.b	#1,$1E(a0)
0001165E 6A00                       		bpl.s	Obj5D_ChkDel
00011660 117C 0000 001E             		move.b	#0,$1E(a0)
00011666 5228 001B                  		addq.b	#1,$1B(a0)
0001166A 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011670 6500                       		bcs.s	loc_115D8
00011672 117C 0000 001B             		move.b	#0,$1B(a0)
00011678                            
00011678                            loc_115D8:
00011678 7000                       		moveq	#0,d0
0001167A 0828 0000 0028             		btst	#0,$28(a0)
00011680 6700                       		beq.s	loc_115E4
00011682 7002                       		moveq	#2,d0
00011684                            
00011684                            loc_115E4:
00011684 D028 001B                  		add.b	$1B(a0),d0
00011688 1140 001A                  		move.b	d0,$1A(a0)
0001168C                            
0001168C                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
0001168C 6100 C038                  		bsr.w	DisplaySprite
00011690 3028 0008                  		move.w	8(a0),d0
00011694 0240 FF80                  		andi.w	#$FF80,d0
00011698 3238 F700                  		move.w	($FFFFF700).w,d1
0001169C 0441 0080                  		subi.w	#$80,d1
000116A0 0241 FF80                  		andi.w	#$FF80,d1
000116A4 9041                       		sub.w	d1,d0
000116A6 0C40 0280                  		cmpi.w	#$280,d0
000116AA 6200 C056                  		bhi.w	DeleteObject
000116AE 4E75                       		rts	
000116B0                            ; ===========================================================================
000116B0                            ; ---------------------------------------------------------------------------
000116B0                            ; Sprite mappings - fans (SLZ)
000116B0                            ; ---------------------------------------------------------------------------
000116B0                            Map_obj5D:
000116B0                            	include "_maps\obj5D.asm"
000116B0                            ; ---------------------------------------------------------------------------
000116B0                            ; Sprite mappings - fans (SLZ)
000116B0                            ; ---------------------------------------------------------------------------
000116B0 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
000116B4 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
000116B8 0000                       		dc.w byte_1161A-Map_obj5D
000116BA 02                         byte_1161A:	dc.b 2
000116BB F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
000116C0 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
000116C5 02                         byte_11625:	dc.b 2
000116C6 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
000116CB 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
000116D0 02                         byte_11630:	dc.b 2
000116D1 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
000116D6 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
000116DC 00                         		even
000116DC 00                         		even
000116DC                            
000116DC                            ; ===========================================================================
000116DC                            ; ---------------------------------------------------------------------------
000116DC                            ; Object 5E - seesaws (SLZ)
000116DC                            ; ---------------------------------------------------------------------------
000116DC                            
000116DC                            Obj5E:					; XREF: Obj_Index
000116DC 7000                       		moveq	#0,d0
000116DE 1028 0024                  		move.b	$24(a0),d0
000116E2 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
000116E6 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
000116EA 3028 0030                  		move.w	$30(a0),d0
000116EE 0240 FF80                  		andi.w	#$FF80,d0
000116F2 3238 F700                  		move.w	($FFFFF700).w,d1
000116F6 0441 0080                  		subi.w	#$80,d1
000116FA 0241 FF80                  		andi.w	#$FF80,d1
000116FE 9041                       		sub.w	d1,d0
00011700 6B00 C000                  		bmi.w	DeleteObject
00011704 0C40 0280                  		cmpi.w	#$280,d0
00011708 6200 BFF8                  		bhi.w	DeleteObject
0001170C 6000 BFB8                  		bra.w	DisplaySprite
00011710                            ; ===========================================================================
00011710 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011712 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011714 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011716 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011718 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
0001171A 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
0001171C                            ; ===========================================================================
0001171C                            
0001171C                            Obj5E_Main:				; XREF: Obj5E_Index
0001171C 5428 0024                  		addq.b	#2,$24(a0)
00011720 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011728 317C 0374 0002             		move.w	#$374,2(a0)
0001172E 0028 0004 0001             		ori.b	#4,1(a0)
00011734 117C 0004 0018             		move.b	#4,$18(a0)
0001173A 117C 0030 0019             		move.b	#$30,$19(a0)
00011740 3168 0008 0030             		move.w	8(a0),$30(a0)
00011746 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
0001174A 6600                       		bne.s	loc_116D2	; if not, branch
0001174C 6100 C414                  		bsr.w	SingleObjLoad2
00011750 6600                       		bne.s	loc_116D2
00011752 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011756 5C29 0024                  		addq.b	#6,$24(a1)
0001175A 3368 0008 0008             		move.w	8(a0),8(a1)
00011760 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011766 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001176C 2348 003C                  		move.l	a0,$3C(a1)
00011770                            
00011770                            loc_116D2:
00011770 0828 0000 0022             		btst	#0,$22(a0)
00011776 6700                       		beq.s	loc_116E0
00011778 117C 0002 001A             		move.b	#2,$1A(a0)
0001177E                            
0001177E                            loc_116E0:
0001177E 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011784                            
00011784                            Obj5E_Slope:				; XREF: Obj5E_Index
00011784 1228 003A                  		move.b	$3A(a0),d1
00011788 6100 0000                  		bsr.w	loc_11766
0001178C 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011792 0828 0000 001A             		btst	#0,$1A(a0)
00011798 6700                       		beq.s	loc_11702
0001179A 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000117A0                            
000117A0                            loc_11702:
000117A0 43F8 D000                  		lea	($FFFFD000).w,a1
000117A4 3169 0012 0038             		move.w	$12(a1),$38(a0)
000117AA 323C 0030                  		move.w	#$30,d1
000117AE 4EB9 0000 7624             		jsr	(SlopeObject).l
000117B4 4E75                       		rts	
000117B6                            ; ===========================================================================
000117B6                            
000117B6                            Obj5E_Slope2:				; XREF: Obj5E_Index
000117B6 6100 0000                  		bsr.w	loc_1174A
000117BA 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000117C0 0828 0000 001A             		btst	#0,$1A(a0)
000117C6 6700                       		beq.s	loc_11730
000117C8 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000117CE                            
000117CE                            loc_11730:
000117CE 323C 0030                  		move.w	#$30,d1
000117D2 4EB9 0000 76C4             		jsr	(ExitPlatform).l
000117D8 323C 0030                  		move.w	#$30,d1
000117DC 3428 0008                  		move.w	8(a0),d2
000117E0 4EB9 0000 8622             		jsr	SlopeObject2
000117E6 4E75                       		rts	
000117E8                            ; ===========================================================================
000117E8                            
000117E8                            loc_1174A:				; XREF: Obj5E_Slope2
000117E8 7202                       		moveq	#2,d1
000117EA 43F8 D000                  		lea	($FFFFD000).w,a1
000117EE 3028 0008                  		move.w	8(a0),d0
000117F2 9069 0008                  		sub.w	8(a1),d0
000117F6 6400                       		bcc.s	loc_1175E
000117F8 4440                       		neg.w	d0
000117FA 7200                       		moveq	#0,d1
000117FC                            
000117FC                            loc_1175E:
000117FC 0C40 0008                  		cmpi.w	#8,d0
00011800 6400                       		bcc.s	loc_11766
00011802 7201                       		moveq	#1,d1
00011804                            
00011804                            loc_11766:
00011804 1028 001A                  		move.b	$1A(a0),d0
00011808 B001                       		cmp.b	d1,d0
0001180A 6700                       		beq.s	locret_11790
0001180C 6400                       		bcc.s	loc_11772
0001180E 5400                       		addq.b	#2,d0
00011810                            
00011810                            loc_11772:
00011810 5300                       		subq.b	#1,d0
00011812 1140 001A                  		move.b	d0,$1A(a0)
00011816 1141 003A                  		move.b	d1,$3A(a0)
0001181A 08A8 0000 0001             		bclr	#0,1(a0)
00011820 0828 0001 001A             		btst	#1,$1A(a0)
00011826 6700                       		beq.s	locret_11790
00011828 08E8 0000 0001             		bset	#0,1(a0)
0001182E                            
0001182E                            locret_11790:
0001182E 4E75                       		rts	
00011830                            ; ===========================================================================
00011830                            
00011830                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011830 5428 0024                  		addq.b	#2,$24(a0)
00011834 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
0001183C 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011842 0028 0004 0001             		ori.b	#4,1(a0)
00011848 117C 0004 0018             		move.b	#4,$18(a0)
0001184E 117C 008B 0020             		move.b	#$8B,$20(a0)
00011854 117C 000C 0019             		move.b	#$C,$19(a0)
0001185A 3168 0008 0030             		move.w	8(a0),$30(a0)
00011860 0668 0028 0008             		addi.w	#$28,8(a0)
00011866 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001186C 117C 0001 001A             		move.b	#1,$1A(a0)
00011872 0828 0000 0022             		btst	#0,$22(a0)
00011878 6700                       		beq.s	Obj5E_MoveSpike
0001187A 0468 0050 0008             		subi.w	#$50,8(a0)
00011880 117C 0002 003A             		move.b	#2,$3A(a0)
00011886                            
00011886                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011886 2268 003C                  		movea.l	$3C(a0),a1
0001188A 7000                       		moveq	#0,d0
0001188C 1028 003A                  		move.b	$3A(a0),d0
00011890 9029 003A                  		sub.b	$3A(a1),d0
00011894 6700                       		beq.s	loc_1183E
00011896 6400                       		bcc.s	loc_117FC
00011898 4400                       		neg.b	d0
0001189A                            
0001189A                            loc_117FC:
0001189A 323C F7E8                  		move.w	#-$818,d1
0001189E 343C FEEC                  		move.w	#-$114,d2
000118A2 0C00 0001                  		cmpi.b	#1,d0
000118A6 6700                       		beq.s	loc_11822
000118A8 323C F510                  		move.w	#-$AF0,d1
000118AC 343C FF34                  		move.w	#-$CC,d2
000118B0 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
000118B6 6D00                       		blt.s	loc_11822
000118B8 323C F200                  		move.w	#-$E00,d1
000118BC 343C FF60                  		move.w	#-$A0,d2
000118C0                            
000118C0                            loc_11822:
000118C0 3141 0012                  		move.w	d1,$12(a0)
000118C4 3142 0010                  		move.w	d2,$10(a0)
000118C8 3028 0008                  		move.w	8(a0),d0
000118CC 9068 0030                  		sub.w	$30(a0),d0
000118D0 6400                       		bcc.s	loc_11838
000118D2 4468 0010                  		neg.w	$10(a0)
000118D6                            
000118D6                            loc_11838:
000118D6 5428 0024                  		addq.b	#2,$24(a0)
000118DA 6000                       		bra.s	Obj5E_SpikeFall
000118DC                            ; ===========================================================================
000118DC                            
000118DC                            loc_1183E:				; XREF: Obj5E_MoveSpike
000118DC 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000118E2 7000                       		moveq	#0,d0
000118E4 1029 001A                  		move.b	$1A(a1),d0
000118E8 343C 0028                  		move.w	#$28,d2
000118EC 3228 0008                  		move.w	8(a0),d1
000118F0 9268 0030                  		sub.w	$30(a0),d1
000118F4 6400                       		bcc.s	loc_1185C
000118F6 4442                       		neg.w	d2
000118F8 5440                       		addq.w	#2,d0
000118FA                            
000118FA                            loc_1185C:
000118FA D040                       		add.w	d0,d0
000118FC 3228 0034                  		move.w	$34(a0),d1
00011900 D272 0000                  		add.w	(a2,d0.w),d1
00011904 3141 000C                  		move.w	d1,$C(a0)
00011908 D468 0030                  		add.w	$30(a0),d2
0001190C 3142 0008                  		move.w	d2,8(a0)
00011910 4268 000E                  		clr.w	$E(a0)
00011914 4268 000A                  		clr.w	$A(a0)
00011918 4E75                       		rts	
0001191A                            ; ===========================================================================
0001191A                            
0001191A                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
0001191A 4A68 0012                  		tst.w	$12(a0)
0001191E 6A00                       		bpl.s	loc_1189A
00011920 6100 BD52                  		bsr.w	ObjectFall
00011924 3028 0034                  		move.w	$34(a0),d0
00011928 0440 002F                  		subi.w	#$2F,d0
0001192C B068 000C                  		cmp.w	$C(a0),d0
00011930 6E00                       		bgt.s	locret_11898
00011932 6100 BD40                  		bsr.w	ObjectFall
00011936                            
00011936                            locret_11898:
00011936 4E75                       		rts	
00011938                            ; ===========================================================================
00011938                            
00011938                            loc_1189A:				; XREF: Obj5E_SpikeFall
00011938 6100 BD3A                  		bsr.w	ObjectFall
0001193C 2268 003C                  		movea.l	$3C(a0),a1
00011940 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011946 7000                       		moveq	#0,d0
00011948 1029 001A                  		move.b	$1A(a1),d0
0001194C 3228 0008                  		move.w	8(a0),d1
00011950 9268 0030                  		sub.w	$30(a0),d1
00011954 6400                       		bcc.s	loc_118BA
00011956 5440                       		addq.w	#2,d0
00011958                            
00011958                            loc_118BA:
00011958 D040                       		add.w	d0,d0
0001195A 3228 0034                  		move.w	$34(a0),d1
0001195E D272 0000                  		add.w	(a2,d0.w),d1
00011962 B268 000C                  		cmp.w	$C(a0),d1
00011966 6E00                       		bgt.s	locret_11938
00011968 2268 003C                  		movea.l	$3C(a0),a1
0001196C 7202                       		moveq	#2,d1
0001196E 4A68 0010                  		tst.w	$10(a0)
00011972 6B00                       		bmi.s	Obj5E_Spring
00011974 7200                       		moveq	#0,d1
00011976                            
00011976                            Obj5E_Spring:
00011976 1341 003A                  		move.b	d1,$3A(a1)
0001197A 1141 003A                  		move.b	d1,$3A(a0)
0001197E B229 001A                  		cmp.b	$1A(a1),d1
00011982 6700                       		beq.s	loc_1192C
00011984 08A9 0003 0022             		bclr	#3,$22(a1)
0001198A 6700                       		beq.s	loc_1192C
0001198C 4229 0025                  		clr.b	$25(a1)
00011990 137C 0002 0024             		move.b	#2,$24(a1)
00011996 45F8 D000                  		lea	($FFFFD000).w,a2
0001199A 3568 0012 0012             		move.w	$12(a0),$12(a2)
000119A0 446A 0012                  		neg.w	$12(a2)
000119A4 08EA 0001 0022             		bset	#1,$22(a2)
000119AA 08AA 0003 0022             		bclr	#3,$22(a2)
000119B0 422A 003C                  		clr.b	$3C(a2)
000119B4 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
000119BA 157C 0002 0024             		move.b	#2,$24(a2)
000119C0 303C 00CC                  		move.w	#$CC,d0
000119C4 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
000119CA                            
000119CA                            loc_1192C:
000119CA 4268 0010                  		clr.w	$10(a0)
000119CE 4268 0012                  		clr.w	$12(a0)
000119D2 5528 0024                  		subq.b	#2,$24(a0)
000119D6                            
000119D6                            locret_11938:
000119D6 4E75                       		rts	
000119D8                            ; ===========================================================================
000119D8 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000119E2                            
000119E2                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00011A12                            		even
00011A12                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011A42                            		even
00011A42                            ; ---------------------------------------------------------------------------
00011A42                            ; Sprite mappings - seesaws (SLZ)
00011A42                            ; ---------------------------------------------------------------------------
00011A42                            Map_obj5E:
00011A42                            	include "_maps\obj5E.asm"
00011A42                            ; ---------------------------------------------------------------------------
00011A42                            ; Sprite mappings - seesaws (SLZ)
00011A42                            ; ---------------------------------------------------------------------------
00011A42 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011A46 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011A4A 07                         byte_119AC:	dc.b 7
00011A4B D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011A50 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00011A55 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011A5A EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011A5F FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00011A64 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00011A69 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011A6E 04                         byte_119D0:	dc.b 4
00011A6F E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00011A74 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00011A79 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011A7E E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00011A84 00                         		even
00011A84 00                         		even
00011A84                            
00011A84                            ; ---------------------------------------------------------------------------
00011A84                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011A84                            ; ---------------------------------------------------------------------------
00011A84                            Map_obj5Ea:
00011A84                            	include "_maps\obj5Eballs.asm"
00011A84                            ; ---------------------------------------------------------------------------
00011A84                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011A84                            ; ---------------------------------------------------------------------------
00011A84 0000                       		dc.w byte_119EA-Map_obj5Ea
00011A86 0000                       		dc.w byte_119F0-Map_obj5Ea
00011A88 01                         byte_119EA:	dc.b 1
00011A89 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011A8E 01                         byte_119F0:	dc.b 1
00011A8F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00011A94                            		even
00011A94                            		even
00011A94                            
00011A94                            ; ===========================================================================
00011A94                            ; ---------------------------------------------------------------------------
00011A94                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00011A94                            ; ---------------------------------------------------------------------------
00011A94                            
00011A94                            Obj5F:					; XREF: Obj_Index
00011A94 7000                       		moveq	#0,d0
00011A96 1028 0024                  		move.b	$24(a0),d0
00011A9A 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011A9E 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011AA2                            ; ===========================================================================
00011AA2 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00011AA4 0000                       		dc.w Obj5F_Action-Obj5F_Index
00011AA6 0000                       		dc.w Obj5F_Display-Obj5F_Index
00011AA8 0000                       		dc.w Obj5F_End-Obj5F_Index
00011AAA                            ; ===========================================================================
00011AAA                            
00011AAA                            Obj5F_Main:				; XREF: Obj5F_Index
00011AAA 5428 0024                  		addq.b	#2,$24(a0)
00011AAE 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00011AB6 317C 0400 0002             		move.w	#$400,2(a0)
00011ABC 0028 0004 0001             		ori.b	#4,1(a0)
00011AC2 117C 0003 0018             		move.b	#3,$18(a0)
00011AC8 117C 000C 0019             		move.b	#$C,$19(a0)
00011ACE 1028 0028                  		move.b	$28(a0),d0
00011AD2 6700                       		beq.s	loc_11A3C
00011AD4 1140 0024                  		move.b	d0,$24(a0)
00011AD8 4E75                       		rts	
00011ADA                            ; ===========================================================================
00011ADA                            
00011ADA                            loc_11A3C:
00011ADA 117C 009A 0020             		move.b	#$9A,$20(a0)
00011AE0 0868 0000 0022             		bchg	#0,$22(a0)
00011AE6                            
00011AE6                            Obj5F_Action:				; XREF: Obj5F_Index
00011AE6 7000                       		moveq	#0,d0
00011AE8 1028 0025                  		move.b	$25(a0),d0
00011AEC 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00011AF0 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00011AF4 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011AFA 6100 8CF6                  		bsr.w	AnimateSprite
00011AFE 6000 DC5E                  		bra.w	MarkObjGone
00011B02                            ; ===========================================================================
00011B02 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00011B04 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00011B06 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00011B08                            ; ===========================================================================
00011B08                            
00011B08                            Obj5F_Walk:				; XREF: Obj5F_Index2
00011B08 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011B0C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011B10 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00011B12 5428 0025                  		addq.b	#2,$25(a0)
00011B16 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00011B1C 317C 0010 0010             		move.w	#$10,$10(a0)
00011B22 117C 0001 001C             		move.b	#1,$1C(a0)
00011B28 0868 0000 0022             		bchg	#0,$22(a0)
00011B2E 6700                       		beq.s	locret_11A96
00011B30 4468 0010                  		neg.w	$10(a0)		; change direction
00011B34                            
00011B34                            locret_11A96:
00011B34 4E75                       		rts	
00011B36                            ; ===========================================================================
00011B36                            
00011B36                            Obj5F_Wait:				; XREF: Obj5F_Index2
00011B36 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011B3A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011B3E 6B00                       		bmi.s	loc_11AA8
00011B40 6100 BB5E                  		bsr.w	SpeedToPos
00011B44 4E75                       		rts	
00011B46                            ; ===========================================================================
00011B46                            
00011B46                            loc_11AA8:
00011B46 5528 0025                  		subq.b	#2,$25(a0)
00011B4A 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00011B50 4268 0010                  		clr.w	$10(a0)		; stop walking
00011B54 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00011B5A 4E75                       		rts	
00011B5C                            ; ===========================================================================
00011B5C                            
00011B5C                            Obj5F_Explode:				; XREF: Obj5F_Index2
00011B5C 5368 0030                  		subq.w	#1,$30(a0)
00011B60 6A00                       		bpl.s	locret_11AD0
00011B62 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00011B66 117C 0000 0024             		move.b	#0,$24(a0)
00011B6C                            
00011B6C                            locret_11AD0:
00011B6C 4E75                       		rts	
00011B6E                            ; ===========================================================================
00011B6E                            
00011B6E                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00011B6E 3038 D008                  		move.w	($FFFFD008).w,d0
00011B72 9068 0008                  		sub.w	8(a0),d0
00011B76 6400                       		bcc.s	loc_11ADE
00011B78 4440                       		neg.w	d0
00011B7A                            
00011B7A                            loc_11ADE:
00011B7A 0C40 0060                  		cmpi.w	#$60,d0
00011B7E 6400                       		bcc.s	locret_11B5E
00011B80 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011B84 9068 000C                  		sub.w	$C(a0),d0
00011B88 6400                       		bcc.s	Obj5F_MakeFuse
00011B8A 4440                       		neg.w	d0
00011B8C                            
00011B8C                            Obj5F_MakeFuse:
00011B8C 0C40 0060                  		cmpi.w	#$60,d0
00011B90 6400                       		bcc.s	locret_11B5E
00011B92 4A78 FE08                  		tst.w	($FFFFFE08).w
00011B96 6600                       		bne.s	locret_11B5E
00011B98 117C 0004 0025             		move.b	#4,$25(a0)
00011B9E 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00011BA4 4268 0010                  		clr.w	$10(a0)
00011BA8 117C 0002 001C             		move.b	#2,$1C(a0)
00011BAE 6100 BFB2                  		bsr.w	SingleObjLoad2
00011BB2 6600                       		bne.s	locret_11B5E
00011BB4 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00011BB8 3368 0008 0008             		move.w	8(a0),8(a1)
00011BBE 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011BC4 3368 000C 0034             		move.w	$C(a0),$34(a1)
00011BCA 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011BD0 137C 0004 0028             		move.b	#4,$28(a1)
00011BD6 137C 0003 001C             		move.b	#3,$1C(a1)
00011BDC 337C 0010 0012             		move.w	#$10,$12(a1)
00011BE2 0828 0001 0022             		btst	#1,$22(a0)
00011BE8 6700                       		beq.s	loc_11B54
00011BEA 4469 0012                  		neg.w	$12(a1)
00011BEE                            
00011BEE                            loc_11B54:
00011BEE 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00011BF4 2348 003C                  		move.l	a0,$3C(a1)
00011BF8                            
00011BF8                            locret_11B5E:
00011BF8 4E75                       		rts	
00011BFA                            ; ===========================================================================
00011BFA                            
00011BFA                            Obj5F_Display:				; XREF: Obj5F_Index
00011BFA 6100                       		bsr.s	loc_11B70
00011BFC 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011C02 6100 8BEE                  		bsr.w	AnimateSprite
00011C06 6000 DB56                  		bra.w	MarkObjGone
00011C0A                            ; ===========================================================================
00011C0A                            
00011C0A                            loc_11B70:
00011C0A 5368 0030                  		subq.w	#1,$30(a0)
00011C0E 6B00                       		bmi.s	loc_11B7C
00011C10 6100 BA8E                  		bsr.w	SpeedToPos
00011C14 4E75                       		rts	
00011C16                            ; ===========================================================================
00011C16                            
00011C16                            loc_11B7C:
00011C16 4268 0030                  		clr.w	$30(a0)
00011C1A 4228 0024                  		clr.b	$24(a0)
00011C1E 3168 0034 000C             		move.w	$34(a0),$C(a0)
00011C24 7203                       		moveq	#3,d1
00011C26 2248                       		movea.l	a0,a1
00011C28 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00011C2E 6000                       		bra.s	Obj5F_MakeShrap
00011C30                            ; ===========================================================================
00011C30                            
00011C30                            Obj5F_Loop:
00011C30 6100 BF30                  		bsr.w	SingleObjLoad2
00011C34 6600                       		bne.s	loc_11BCE
00011C36                            
00011C36                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00011C36 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00011C3A 3368 0008 0008             		move.w	8(a0),8(a1)
00011C40 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011C46 137C 0006 0028             		move.b	#6,$28(a1)
00011C4C 137C 0004 001C             		move.b	#4,$1C(a1)
00011C52 335A 0010                  		move.w	(a2)+,$10(a1)
00011C56 335A 0012                  		move.w	(a2)+,$12(a1)
00011C5A 137C 0098 0020             		move.b	#$98,$20(a1)
00011C60 08E9 0007 0001             		bset	#7,1(a1)
00011C66                            
00011C66                            loc_11BCE:
00011C66 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00011C6A                            
00011C6A 117C 0006 0024             		move.b	#6,$24(a0)
00011C70                            
00011C70                            Obj5F_End:				; XREF: Obj5F_Index
00011C70 6100 BA2E                  		bsr.w	SpeedToPos
00011C74 0668 0018 0012             		addi.w	#$18,$12(a0)
00011C7A 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011C80 6100 8B70                  		bsr.w	AnimateSprite
00011C84 4A28 0001                  		tst.b	1(a0)
00011C88 6A00 BA78                  		bpl.w	DeleteObject
00011C8C 6000 BA38                  		bra.w	DisplaySprite
00011C90                            ; ===========================================================================
00011C90 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00011CA0                            
00011CA0                            Ani_obj5F:
00011CA0                            	include "_anim\obj5F.asm"
00011CA0                            ; ---------------------------------------------------------------------------
00011CA0                            ; Animation script - Bomb enemy
00011CA0                            ; ---------------------------------------------------------------------------
00011CA0 0000                       		dc.w byte_11C12-Ani_obj5F
00011CA2 0000                       		dc.w byte_11C16-Ani_obj5F
00011CA4 0000                       		dc.w byte_11C1C-Ani_obj5F
00011CA6 0000                       		dc.w byte_11C20-Ani_obj5F
00011CA8 0000                       		dc.w byte_11C24-Ani_obj5F
00011CAA 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00011CAE 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00011CB4 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00011CB8 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00011CBC 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00011CC0                            		even
00011CC0                            		even
00011CC0                            
00011CC0                            ; ---------------------------------------------------------------------------
00011CC0                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00011CC0                            ; ---------------------------------------------------------------------------
00011CC0                            Map_obj5F:
00011CC0                            	include "_maps\obj5F.asm"
00011CC0                            ; ---------------------------------------------------------------------------
00011CC0                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00011CC0                            ; ---------------------------------------------------------------------------
00011CC0 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00011CC4 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00011CC8 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00011CCC 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00011CD0 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00011CD4 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00011CD8 03                         byte_11C40:	dc.b 3
00011CD9 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00011CDE 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011CE3 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011CE8 03                         byte_11C50:	dc.b 3
00011CE9 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011CEE 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011CF3 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011CF8 03                         byte_11C60:	dc.b 3
00011CF9 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00011CFE 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00011D03 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00011D08 03                         byte_11C70:	dc.b 3
00011D09 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011D0E 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00011D13 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011D18 03                         byte_11C80:	dc.b 3
00011D19 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00011D1E 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00011D23 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00011D28 03                         byte_11C90:	dc.b 3
00011D29 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011D2E 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00011D33 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011D38 02                         byte_11CA0:	dc.b 2
00011D39 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00011D3E 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011D43 02                         byte_11CAB:	dc.b 2
00011D44 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011D49 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011D4E 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00011D4F E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00011D54 01                         byte_11CBC:	dc.b 1			; fuse
00011D55 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00011D5A 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00011D5B FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00011D60 01                         byte_11CC8:	dc.b 1			; fireball
00011D61 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00011D66                            		even
00011D66                            		even
00011D66                            
00011D66                            ; ===========================================================================
00011D66                            ; ---------------------------------------------------------------------------
00011D66                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00011D66                            ; ---------------------------------------------------------------------------
00011D66                            
00011D66                            Obj60:					; XREF: Obj_Index
00011D66 7000                       		moveq	#0,d0
00011D68 1028 0024                  		move.b	$24(a0),d0
00011D6C 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00011D70 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00011D74                            ; ===========================================================================
00011D74 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00011D76 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00011D78 0000                       		dc.w Obj60_Display-Obj60_Index
00011D7A 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00011D7C 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00011D7E                            ; ===========================================================================
00011D7E                            
00011D7E                            Obj60_Main:				; XREF: Obj60_Index
00011D7E 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00011D86 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00011D8C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00011D92 6700                       		beq.s	loc_11D02
00011D94 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00011D9A                            
00011D9A                            loc_11D02:
00011D9A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011DA0 6600                       		bne.s	loc_11D10
00011DA2 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00011DA8                            
00011DA8                            loc_11D10:
00011DA8 0028 0004 0001             		ori.b	#4,1(a0)
00011DAE 117C 0004 0018             		move.b	#4,$18(a0)
00011DB4 117C 000B 0020             		move.b	#$B,$20(a0)
00011DBA 117C 000C 0019             		move.b	#$C,$19(a0)
00011DC0 7400                       		moveq	#0,d2
00011DC2 45E8 0037                  		lea	$37(a0),a2
00011DC6 264A                       		movea.l	a2,a3
00011DC8 524A                       		addq.w	#1,a2
00011DCA 7203                       		moveq	#3,d1
00011DCC                            
00011DCC                            Obj60_MakeOrbs:
00011DCC 6100 BD94                  		bsr.w	SingleObjLoad2
00011DD0 6600                       		bne.s	loc_11D90
00011DD2 5213                       		addq.b	#1,(a3)
00011DD4 3A09                       		move.w	a1,d5
00011DD6 0445 D000                  		subi.w	#-$3000,d5
00011DDA EC4D                       		lsr.w	#6,d5
00011DDC 0245 007F                  		andi.w	#$7F,d5
00011DE0 14C5                       		move.b	d5,(a2)+
00011DE2 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00011DE4 137C 0006 0024             		move.b	#6,$24(a1)
00011DEA 2368 0004 0004             		move.l	4(a0),4(a1)
00011DF0 3368 0002 0002             		move.w	2(a0),2(a1)
00011DF6 0029 0004 0001             		ori.b	#4,1(a1)
00011DFC 137C 0004 0018             		move.b	#4,$18(a1)
00011E02 137C 0008 0019             		move.b	#8,$19(a1)
00011E08 137C 0003 001A             		move.b	#3,$1A(a1)
00011E0E 137C 0098 0020             		move.b	#$98,$20(a1)
00011E14 1342 0026                  		move.b	d2,$26(a1)
00011E18 0602 0040                  		addi.b	#$40,d2
00011E1C 2348 003C                  		move.l	a0,$3C(a1)
00011E20 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00011E24                            
00011E24                            loc_11D90:
00011E24 7001                       		moveq	#1,d0
00011E26 0828 0000 0022             		btst	#0,$22(a0)
00011E2C 6700                       		beq.s	Obj60_Move
00011E2E 4440                       		neg.w	d0
00011E30                            
00011E30                            Obj60_Move:
00011E30 1140 0036                  		move.b	d0,$36(a0)
00011E34 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00011E3A 5428 0024                  		addq.b	#2,$24(a0)
00011E3E 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00011E44 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00011E4A 6700                       		beq.s	locret_11DBC	; if not, branch
00011E4C 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00011E50                            
00011E50                            locret_11DBC:
00011E50 4E75                       		rts	
00011E52                            ; ===========================================================================
00011E52                            
00011E52                            Obj60_ChkSonic:				; XREF: Obj60_Index
00011E52 3038 D008                  		move.w	($FFFFD008).w,d0
00011E56 9068 0008                  		sub.w	8(a0),d0
00011E5A 6400                       		bcc.s	loc_11DCA
00011E5C 4440                       		neg.w	d0
00011E5E                            
00011E5E                            loc_11DCA:
00011E5E 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00011E62 6400                       		bcc.s	Obj60_Animate	; if not, branch
00011E64 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011E68 9068 000C                  		sub.w	$C(a0),d0
00011E6C 6400                       		bcc.s	loc_11DDC
00011E6E 4440                       		neg.w	d0
00011E70                            
00011E70                            loc_11DDC:
00011E70 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00011E74 6400                       		bcc.s	Obj60_Animate	; if not, branch
00011E76 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011E7A 6600                       		bne.s	Obj60_Animate	; if yes, branch
00011E7C 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00011E82                            
00011E82                            Obj60_Animate:
00011E82 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00011E88 6100 8968                  		bsr.w	AnimateSprite
00011E8C 6000 0000                  		bra.w	Obj60_ChkDel
00011E90                            ; ===========================================================================
00011E90                            
00011E90                            Obj60_Display:				; XREF: Obj60_Index
00011E90 6100 B80E                  		bsr.w	SpeedToPos
00011E94                            
00011E94                            Obj60_ChkDel:				; XREF: Obj60_Animate
00011E94 3028 0008                  		move.w	8(a0),d0
00011E98 0240 FF80                  		andi.w	#$FF80,d0
00011E9C 3238 F700                  		move.w	($FFFFF700).w,d1
00011EA0 0441 0080                  		subi.w	#$80,d1
00011EA4 0241 FF80                  		andi.w	#$FF80,d1
00011EA8 9041                       		sub.w	d1,d0
00011EAA 0C40 0280                  		cmpi.w	#$280,d0
00011EAE 6200 0000                  		bhi.w	Obj60_ChkGone
00011EB2 6000 B812                  		bra.w	DisplaySprite
00011EB6                            ; ===========================================================================
00011EB6                            
00011EB6                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00011EB6 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011EBA 7000                       		moveq	#0,d0
00011EBC 1028 0023                  		move.b	$23(a0),d0
00011EC0 6700                       		beq.s	loc_11E34
00011EC2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011EC8                            
00011EC8                            loc_11E34:
00011EC8 45E8 0037                  		lea	$37(a0),a2
00011ECC 7400                       		moveq	#0,d2
00011ECE 141A                       		move.b	(a2)+,d2
00011ED0 5342                       		subq.w	#1,d2
00011ED2 6500                       		bcs.s	Obj60_Delete
00011ED4                            
00011ED4                            loc_11E40:
00011ED4 7000                       		moveq	#0,d0
00011ED6 101A                       		move.b	(a2)+,d0
00011ED8 ED48                       		lsl.w	#6,d0
00011EDA 0680 00FF D000             		addi.l	#$FFD000,d0
00011EE0 2240                       		movea.l	d0,a1
00011EE2 6100 B820                  		bsr.w	DeleteObject2
00011EE6 51CA FFEC                  		dbf	d2,loc_11E40
00011EEA                            
00011EEA                            Obj60_Delete:
00011EEA 6000 B816                  		bra.w	DeleteObject
00011EEE                            ; ===========================================================================
00011EEE                            
00011EEE                            Obj60_MoveOrb:				; XREF: Obj60_Index
00011EEE 2268 003C                  		movea.l	$3C(a0),a1
00011EF2 0C11 0060                  		cmpi.b	#$60,0(a1)
00011EF6 6600 B80A                  		bne.w	DeleteObject
00011EFA 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00011F00 6600                       		bne.s	Obj60_Circle
00011F02 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00011F08 6600                       		bne.s	Obj60_Circle
00011F0A 5428 0024                  		addq.b	#2,$24(a0)
00011F0E 5329 0037                  		subq.b	#1,$37(a1)
00011F12 6600                       		bne.s	Obj60_FireOrb
00011F14 5429 0024                  		addq.b	#2,$24(a1)
00011F18                            
00011F18                            Obj60_FireOrb:
00011F18 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00011F1E 0829 0000 0022             		btst	#0,$22(a1)
00011F24 6700                       		beq.s	Obj60_Display2
00011F26 4468 0010                  		neg.w	$10(a0)
00011F2A                            
00011F2A                            Obj60_Display2:
00011F2A 6000 B79A                  		bra.w	DisplaySprite
00011F2E                            ; ===========================================================================
00011F2E                            
00011F2E                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00011F2E 1028 0026                  		move.b	$26(a0),d0
00011F32 4EB9 0000 29DA             		jsr	(CalcSine).l
00011F38 E841                       		asr.w	#4,d1
00011F3A D269 0008                  		add.w	8(a1),d1
00011F3E 3141 0008                  		move.w	d1,8(a0)
00011F42 E840                       		asr.w	#4,d0
00011F44 D069 000C                  		add.w	$C(a1),d0
00011F48 3140 000C                  		move.w	d0,$C(a0)
00011F4C 1029 0036                  		move.b	$36(a1),d0
00011F50 D128 0026                  		add.b	d0,$26(a0)
00011F54 6000 B770                  		bra.w	DisplaySprite
00011F58                            ; ===========================================================================
00011F58                            
00011F58                            Obj60_ChkDel2:				; XREF: Obj60_Index
00011F58 6100 B746                  		bsr.w	SpeedToPos
00011F5C 4A28 0001                  		tst.b	1(a0)
00011F60 6A00 B7A0                  		bpl.w	DeleteObject
00011F64 6000 B760                  		bra.w	DisplaySprite
00011F68                            ; ===========================================================================
00011F68                            Ani_obj60:
00011F68                            	include "_anim\obj60.asm"
00011F68                            ; ---------------------------------------------------------------------------
00011F68                            ; Animation script - Orbinaut enemy
00011F68                            ; ---------------------------------------------------------------------------
00011F68 0000                       		dc.w byte_11EDA-Ani_obj60
00011F6A 0000                       		dc.w byte_11EDE-Ani_obj60
00011F6C 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00011F70 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00011F76                            		even
00011F76                            		even
00011F76                            
00011F76                            ; ---------------------------------------------------------------------------
00011F76                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00011F76                            ; ---------------------------------------------------------------------------
00011F76                            Map_obj60:
00011F76                            	include "_maps\obj60.asm"
00011F76                            ; ---------------------------------------------------------------------------
00011F76                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00011F76                            ; ---------------------------------------------------------------------------
00011F76 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00011F7A 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00011F7E 01                         byte_11EEC:	dc.b 1
00011F7F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011F84 01                         byte_11EF2:	dc.b 1
00011F85 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00011F8A 01                         byte_11EF8:	dc.b 1
00011F8B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00011F90 01                         byte_11EFE:	dc.b 1
00011F91 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00011F96                            		even
00011F96                            		even
00011F96                            
00011F96                            ; ===========================================================================
00011F96                            ; ---------------------------------------------------------------------------
00011F96                            ; Object 16 - harpoon (LZ)
00011F96                            ; ---------------------------------------------------------------------------
00011F96                            
00011F96                            Obj16:					; XREF: Obj_Index
00011F96 7000                       		moveq	#0,d0
00011F98 1028 0024                  		move.b	$24(a0),d0
00011F9C 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00011FA0 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00011FA4                            ; ===========================================================================
00011FA4 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00011FA6 0000                       		dc.w Obj16_Move-Obj16_Index
00011FA8 0000                       		dc.w Obj16_Wait-Obj16_Index
00011FAA                            ; ===========================================================================
00011FAA                            
00011FAA                            Obj16_Main:				; XREF: Obj16_Index
00011FAA 5428 0024                  		addq.b	#2,$24(a0)
00011FAE 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00011FB6 317C 03CC 0002             		move.w	#$3CC,2(a0)
00011FBC 0028 0004 0001             		ori.b	#4,1(a0)
00011FC2 117C 0004 0018             		move.b	#4,$18(a0)
00011FC8 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00011FCE 117C 0014 0019             		move.b	#$14,$19(a0)
00011FD4 317C 003C 0030             		move.w	#60,$30(a0)
00011FDA                            
00011FDA                            Obj16_Move:				; XREF: Obj16_Index
00011FDA 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00011FE0 6100 8810                  		bsr.w	AnimateSprite
00011FE4 7000                       		moveq	#0,d0
00011FE6 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00011FEA 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00011FF0 6000 D76C                  		bra.w	MarkObjGone
00011FF4                            ; ===========================================================================
00011FF4 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00011FFA                            ; ===========================================================================
00011FFA                            
00011FFA                            Obj16_Wait:				; XREF: Obj16_Index
00011FFA 5368 0030                  		subq.w	#1,$30(a0)
00011FFE 6A00                       		bpl.s	Obj16_ChkDel
00012000 317C 003C 0030             		move.w	#60,$30(a0)
00012006 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
0001200A 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012010                            
00012010                            Obj16_ChkDel:
00012010 6000 D74C                  		bra.w	MarkObjGone
00012014                            ; ===========================================================================
00012014                            Ani_obj16:
00012014                            	include "_anim\obj16.asm"
00012014                            ; ---------------------------------------------------------------------------
00012014                            ; Animation script - harpoon (LZ)
00012014                            ; ---------------------------------------------------------------------------
00012014 0000                       		dc.w byte_11F8A-Ani_obj16
00012016 0000                       		dc.w byte_11F8E-Ani_obj16
00012018 0000                       		dc.w byte_11F92-Ani_obj16
0001201A 0000                       		dc.w byte_11F96-Ani_obj16
0001201C 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00012020 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00012024 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012028 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
0001202C                            		even
0001202C                            		even
0001202C                            
0001202C                            ; ---------------------------------------------------------------------------
0001202C                            ; Sprite mappings - harpoon (LZ)
0001202C                            ; ---------------------------------------------------------------------------
0001202C                            Map_obj16:
0001202C                            	include "_maps\obj16.asm"
0001202C                            ; ---------------------------------------------------------------------------
0001202C                            ; Sprite mappings - harpoon (LZ)
0001202C                            ; ---------------------------------------------------------------------------
0001202C 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00012030 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012034 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012038 01                         byte_11FA6:	dc.b 1
00012039 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0001203E 01                         byte_11FAC:	dc.b 1
0001203F FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012044 02                         byte_11FB2:	dc.b 2
00012045 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
0001204A FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
0001204F 01                         byte_11FBD:	dc.b 1
00012050 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012055 01                         byte_11FC3:	dc.b 1
00012056 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
0001205B 02                         byte_11FC9:	dc.b 2
0001205C D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012061 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012066                            		even
00012066                            		even
00012066                            
00012066                            ; ===========================================================================
00012066                            ; ---------------------------------------------------------------------------
00012066                            ; Object 61 - blocks (LZ)
00012066                            ; ---------------------------------------------------------------------------
00012066                            
00012066                            Obj61:					; XREF: Obj_Index
00012066 7000                       		moveq	#0,d0
00012068 1028 0024                  		move.b	$24(a0),d0
0001206C 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012070 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012074                            ; ===========================================================================
00012074 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012076 0000                       		dc.w Obj61_Action-Obj61_Index
00012078                            
00012078 1010                       Obj61_Var:	dc.b $10, $10		; width, height
0001207A 200C                       		dc.b $20, $C
0001207C 1010                       		dc.b $10, $10
0001207E 1010                       		dc.b $10, $10
00012080                            ; ===========================================================================
00012080                            
00012080                            Obj61_Main:				; XREF: Obj61_Index
00012080 5428 0024                  		addq.b	#2,$24(a0)
00012084 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
0001208C 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012092 117C 0004 0001             		move.b	#4,1(a0)
00012098 117C 0003 0018             		move.b	#3,$18(a0)
0001209E 7000                       		moveq	#0,d0
000120A0 1028 0028                  		move.b	$28(a0),d0
000120A4 E648                       		lsr.w	#3,d0
000120A6 0240 000E                  		andi.w	#$E,d0
000120AA 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000120AE 115A 0019                  		move.b	(a2)+,$19(a0)
000120B2 1152 0016                  		move.b	(a2),$16(a0)
000120B6 E248                       		lsr.w	#1,d0
000120B8 1140 001A                  		move.b	d0,$1A(a0)
000120BC 3168 0008 0034             		move.w	8(a0),$34(a0)
000120C2 3168 000C 0030             		move.w	$C(a0),$30(a0)
000120C8 1028 0028                  		move.b	$28(a0),d0
000120CC 0200 000F                  		andi.b	#$F,d0
000120D0 6700                       		beq.s	Obj61_Action
000120D2 0C00 0007                  		cmpi.b	#7,d0
000120D6 6700                       		beq.s	Obj61_Action
000120D8 117C 0001 0038             		move.b	#1,$38(a0)
000120DE                            
000120DE                            Obj61_Action:				; XREF: Obj61_Index
000120DE 3F28 0008                  		move.w	8(a0),-(sp)
000120E2 7000                       		moveq	#0,d0
000120E4 1028 0028                  		move.b	$28(a0),d0
000120E8 0240 000F                  		andi.w	#$F,d0
000120EC D040                       		add.w	d0,d0
000120EE 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000120F2 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000120F6 381F                       		move.w	(sp)+,d4
000120F8 4A28 0001                  		tst.b	1(a0)
000120FC 6A00                       		bpl.s	Obj61_ChkDel
000120FE 7200                       		moveq	#0,d1
00012100 1228 0019                  		move.b	$19(a0),d1
00012104 0641 000B                  		addi.w	#$B,d1
00012108 7400                       		moveq	#0,d2
0001210A 1428 0016                  		move.b	$16(a0),d2
0001210E 3602                       		move.w	d2,d3
00012110 5243                       		addq.w	#1,d3
00012112 6100 D972                  		bsr.w	SolidObject
00012116 1144 003F                  		move.b	d4,$3F(a0)
0001211A 6100 0000                  		bsr.w	loc_12180
0001211E                            
0001211E                            Obj61_ChkDel:
0001211E 3028 0034                  		move.w	$34(a0),d0
00012122 0240 FF80                  		andi.w	#$FF80,d0
00012126 3238 F700                  		move.w	($FFFFF700).w,d1
0001212A 0441 0080                  		subi.w	#$80,d1
0001212E 0241 FF80                  		andi.w	#$FF80,d1
00012132 9041                       		sub.w	d1,d0
00012134 0C40 0280                  		cmpi.w	#$280,d0
00012138 6200 B5C8                  		bhi.w	DeleteObject
0001213C 6000 B588                  		bra.w	DisplaySprite
00012140                            ; ===========================================================================
00012140 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012144 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012148 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
0001214C 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012150                            ; ===========================================================================
00012150                            
00012150                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012150 4E75                       		rts	
00012152                            ; ===========================================================================
00012152                            
00012152                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012152 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012156 6600                       		bne.s	loc_120D6	; if yes, branch
00012158 0828 0003 0022             		btst	#3,$22(a0)
0001215E 6700                       		beq.s	locret_120D4
00012160 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012166                            
00012166                            locret_120D4:
00012166 4E75                       		rts	
00012168                            ; ===========================================================================
00012168                            
00012168                            loc_120D6:
00012168 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
0001216C 66F8                       		bne.s	locret_120D4	; if time remains, branch
0001216E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012172 4228 0038                  		clr.b	$38(a0)
00012176 4E75                       		rts	
00012178                            ; ===========================================================================
00012178                            
00012178                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012178 6100 B526                  		bsr.w	SpeedToPos
0001217C 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012180 6100 0000                  		bsr.w	ObjHitFloor
00012184 4A41                       		tst.w	d1
00012186 6A00 0000                  		bpl.w	locret_12106
0001218A 5241                       		addq.w	#1,d1
0001218C D368 000C                  		add.w	d1,$C(a0)
00012190 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012194 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012198                            
00012198                            locret_12106:
00012198 4E75                       		rts	
0001219A                            ; ===========================================================================
0001219A                            
0001219A                            Obj61_Type04:				; XREF: Obj61_TypeIndex
0001219A 6100 B504                  		bsr.w	SpeedToPos
0001219E 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
000121A2 6100 0000                  		bsr.w	ObjHitCeiling
000121A6 4A41                       		tst.w	d1
000121A8 6A00 0000                  		bpl.w	locret_12126
000121AC 9368 000C                  		sub.w	d1,$C(a0)
000121B0 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
000121B4 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000121B8                            
000121B8                            locret_12126:
000121B8 4E75                       		rts	
000121BA                            ; ===========================================================================
000121BA                            
000121BA                            Obj61_Type05:				; XREF: Obj61_TypeIndex
000121BA 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
000121C0 6600                       		bne.s	locret_12138	; if not, branch
000121C2 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000121C6 4228 0038                  		clr.b	$38(a0)
000121CA                            
000121CA                            locret_12138:
000121CA 4E75                       		rts	
000121CC                            ; ===========================================================================
000121CC                            
000121CC                            Obj61_Type07:				; XREF: Obj61_TypeIndex
000121CC 3038 F646                  		move.w	($FFFFF646).w,d0
000121D0 9068 000C                  		sub.w	$C(a0),d0
000121D4 6700                       		beq.s	locret_1217E
000121D6 6400                       		bcc.s	loc_12162
000121D8 0C40 FFFE                  		cmpi.w	#-2,d0
000121DC 6C00                       		bge.s	loc_1214E
000121DE 70FE                       		moveq	#-2,d0
000121E0                            
000121E0                            loc_1214E:
000121E0 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
000121E4 6100 0000                  		bsr.w	ObjHitCeiling
000121E8 4A41                       		tst.w	d1
000121EA 6A00 0000                  		bpl.w	locret_12160
000121EE 9368 000C                  		sub.w	d1,$C(a0)
000121F2                            
000121F2                            locret_12160:
000121F2 4E75                       		rts	
000121F4                            ; ===========================================================================
000121F4                            
000121F4                            loc_12162:				; XREF: Obj61_Type07
000121F4 0C40 0002                  		cmpi.w	#2,d0
000121F8 6F00                       		ble.s	loc_1216A
000121FA 7002                       		moveq	#2,d0
000121FC                            
000121FC                            loc_1216A:
000121FC D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012200 6100 0000                  		bsr.w	ObjHitFloor
00012204 4A41                       		tst.w	d1
00012206 6A00 0000                  		bpl.w	locret_1217E
0001220A 5241                       		addq.w	#1,d1
0001220C D368 000C                  		add.w	d1,$C(a0)
00012210                            
00012210                            locret_1217E:
00012210 4E75                       		rts	
00012212                            ; ===========================================================================
00012212                            
00012212                            loc_12180:				; XREF: Obj61_Action
00012212 4A28 0038                  		tst.b	$38(a0)
00012216 6700                       		beq.s	locret_121C0
00012218 0828 0003 0022             		btst	#3,$22(a0)
0001221E 6600                       		bne.s	loc_1219A
00012220 4A28 003E                  		tst.b	$3E(a0)
00012224 6700                       		beq.s	locret_121C0
00012226 5928 003E                  		subq.b	#4,$3E(a0)
0001222A 6000                       		bra.s	loc_121A6
0001222C                            ; ===========================================================================
0001222C                            
0001222C                            loc_1219A:
0001222C 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012232 6700                       		beq.s	locret_121C0
00012234 5828 003E                  		addq.b	#4,$3E(a0)
00012238                            
00012238                            loc_121A6:
00012238 1028 003E                  		move.b	$3E(a0),d0
0001223C 4EB9 0000 29DA             		jsr	(CalcSine).l
00012242 323C 0400                  		move.w	#$400,d1
00012246 C1C1                       		muls.w	d1,d0
00012248 4840                       		swap	d0
0001224A D068 0030                  		add.w	$30(a0),d0
0001224E 3140 000C                  		move.w	d0,$C(a0)
00012252                            
00012252                            locret_121C0:
00012252 4E75                       		rts	
00012254                            ; ===========================================================================
00012254                            ; ---------------------------------------------------------------------------
00012254                            ; Sprite mappings - blocks (LZ)
00012254                            ; ---------------------------------------------------------------------------
00012254                            Map_obj61:
00012254                            	include "_maps\obj61.asm"
00012254                            ; ---------------------------------------------------------------------------
00012254                            ; Sprite mappings - blocks (LZ)
00012254                            ; ---------------------------------------------------------------------------
00012254 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012258 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
0001225C 01                         byte_121CA:	dc.b 1
0001225D F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012262 02                         byte_121D0:	dc.b 2
00012263 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012268 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
0001226D 01                         byte_121DB:	dc.b 1
0001226E F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012273 01                         byte_121E1:	dc.b 1
00012274 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
0001227A 00                         		even
0001227A 00                         		even
0001227A                            
0001227A                            ; ===========================================================================
0001227A                            ; ---------------------------------------------------------------------------
0001227A                            ; Object 62 - gargoyle head (LZ)
0001227A                            ; ---------------------------------------------------------------------------
0001227A                            
0001227A                            Obj62:					; XREF: Obj_Index
0001227A 7000                       		moveq	#0,d0
0001227C 1028 0024                  		move.b	$24(a0),d0
00012280 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012284 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012288 6000 D4D4                  		bra.w	MarkObjGone
0001228C                            ; ===========================================================================
0001228C 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
0001228E 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012290 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012292 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012294                            
00012294 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
0001229C                            ; ===========================================================================
0001229C                            
0001229C                            Obj62_Main:				; XREF: Obj62_Index
0001229C 5428 0024                  		addq.b	#2,$24(a0)
000122A0 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000122A8 317C 42E9 0002             		move.w	#$42E9,2(a0)
000122AE 0028 0004 0001             		ori.b	#4,1(a0)
000122B4 117C 0003 0018             		move.b	#3,$18(a0)
000122BA 117C 0010 0019             		move.b	#$10,$19(a0)
000122C0 1028 0028                  		move.b	$28(a0),d0	; get object type
000122C4 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000122C8 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
000122CE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000122D4 0228 000F 0028             		andi.b	#$F,$28(a0)
000122DA                            
000122DA                            Obj62_MakeFire:				; XREF: Obj62_Index
000122DA 5328 001E                  		subq.b	#1,$1E(a0)
000122DE 6600                       		bne.s	Obj62_NoFire
000122E0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000122E6 6100 B658                  		bsr.w	ChkObjOnScreen
000122EA 6600                       		bne.s	Obj62_NoFire
000122EC 6100 B85E                  		bsr.w	SingleObjLoad
000122F0 6600                       		bne.s	Obj62_NoFire
000122F2 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
000122F6 5829 0024                  		addq.b	#4,$24(a1)
000122FA 3368 0008 0008             		move.w	8(a0),8(a1)
00012300 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012306 1368 0001 0001             		move.b	1(a0),1(a1)
0001230C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012312                            
00012312                            Obj62_NoFire:
00012312 4E75                       		rts	
00012314                            ; ===========================================================================
00012314                            
00012314                            Obj62_FireBall:				; XREF: Obj62_Index
00012314 5428 0024                  		addq.b	#2,$24(a0)
00012318 117C 0008 0016             		move.b	#8,$16(a0)
0001231E 117C 0008 0017             		move.b	#8,$17(a0)
00012324 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001232C 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012332 0028 0004 0001             		ori.b	#4,1(a0)
00012338 117C 0004 0018             		move.b	#4,$18(a0)
0001233E 117C 0098 0020             		move.b	#$98,$20(a0)
00012344 117C 0008 0019             		move.b	#8,$19(a0)
0001234A 117C 0002 001A             		move.b	#2,$1A(a0)
00012350 5068 000C                  		addq.w	#8,$C(a0)
00012354 317C 0200 0010             		move.w	#$200,$10(a0)
0001235A 0828 0000 0022             		btst	#0,$22(a0)
00012360 6600                       		bne.s	Obj62_Sound
00012362 4468 0010                  		neg.w	$10(a0)
00012366                            
00012366                            Obj62_Sound:
00012366 303C 00AE                  		move.w	#$AE,d0
0001236A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012370                            
00012370                            Obj62_AniFire:				; XREF: Obj62_Index
00012370 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012374 0200 0007                  		andi.b	#7,d0
00012378 6600                       		bne.s	Obj62_StopFire
0001237A 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012380                            
00012380                            Obj62_StopFire:
00012380 6100 B31E                  		bsr.w	SpeedToPos
00012384 0828 0000 0022             		btst	#0,$22(a0)
0001238A 6600                       		bne.s	Obj62_StopFire2
0001238C 76F8                       		moveq	#-8,d3
0001238E 6100 0000                  		bsr.w	ObjHitWallLeft
00012392 4A41                       		tst.w	d1
00012394 6B00 B36C                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012398 4E75                       		rts	
0001239A                            ; ===========================================================================
0001239A                            
0001239A                            Obj62_StopFire2:
0001239A 7608                       		moveq	#8,d3
0001239C 6100 0000                  		bsr.w	ObjHitWallRight
000123A0 4A41                       		tst.w	d1
000123A2 6B00 B35E                  		bmi.w	DeleteObject
000123A6 4E75                       		rts	
000123A8                            ; ===========================================================================
000123A8                            ; ---------------------------------------------------------------------------
000123A8                            ; Sprite mappings - gargoyle head (LZ)
000123A8                            ; ---------------------------------------------------------------------------
000123A8                            Map_obj62:
000123A8                            	include "_maps\obj62.asm"
000123A8                            ; ---------------------------------------------------------------------------
000123A8                            ; Sprite mappings - gargoyle head (LZ)
000123A8                            ; ---------------------------------------------------------------------------
000123A8 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
000123AC 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
000123B0 03                         byte_12320:	dc.b 3
000123B1 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
000123B6 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000123BB 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
000123C0 01                         byte_12330:	dc.b 1
000123C1 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
000123C6 01                         byte_12336:	dc.b 1
000123C7 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
000123CC                            		even
000123CC                            		even
000123CC                            
000123CC                            ; ===========================================================================
000123CC                            ; ---------------------------------------------------------------------------
000123CC                            ; Object 63 - platforms	on a conveyor belt (LZ)
000123CC                            ; ---------------------------------------------------------------------------
000123CC                            
000123CC                            Obj63:					; XREF: Obj_Index
000123CC 7000                       		moveq	#0,d0
000123CE 1028 0024                  		move.b	$24(a0),d0
000123D2 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
000123D6 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
000123DA 3028 0030                  		move.w	$30(a0),d0
000123DE 0240 FF80                  		andi.w	#$FF80,d0
000123E2 3238 F700                  		move.w	($FFFFF700).w,d1
000123E6 0441 0080                  		subi.w	#$80,d1
000123EA 0241 FF80                  		andi.w	#$FF80,d1
000123EE 9041                       		sub.w	d1,d0
000123F0 0C40 0280                  		cmpi.w	#$280,d0
000123F4 6200                       		bhi.s	loc_1236A
000123F6                            
000123F6                            Obj63_Display:				; XREF: loc_1236A
000123F6 6000 B2CE                  		bra.w	DisplaySprite
000123FA                            ; ===========================================================================
000123FA                            
000123FA                            loc_1236A:				; XREF: Obj63
000123FA 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012400 6600                       		bne.s	loc_12378
00012402 0C40 FF80                  		cmpi.w	#-$80,d0
00012406 64EE                       		bcc.s	Obj63_Display
00012408                            
00012408                            loc_12378:
00012408 1028 002F                  		move.b	$2F(a0),d0
0001240C 6A00 B2F4                  		bpl.w	DeleteObject
00012410 0240 007F                  		andi.w	#$7F,d0
00012414 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012418 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001241E 6000 B2E2                  		bra.w	DeleteObject
00012422                            ; ===========================================================================
00012422 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012424 0000                       		dc.w loc_124B2-Obj63_Index
00012426 0000                       		dc.w loc_124C2-Obj63_Index
00012428 0000                       		dc.w loc_124DE-Obj63_Index
0001242A                            ; ===========================================================================
0001242A                            
0001242A                            Obj63_Main:				; XREF: Obj63_Index
0001242A 1028 0028                  		move.b	$28(a0),d0
0001242E 6B00 0000                  		bmi.w	loc_12460
00012432 5428 0024                  		addq.b	#2,$24(a0)
00012436 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
0001243E 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012444 0028 0004 0001             		ori.b	#4,1(a0)
0001244A 117C 0010 0019             		move.b	#$10,$19(a0)
00012450 117C 0004 0018             		move.b	#4,$18(a0)
00012456 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
0001245C 6600                       		bne.s	loc_123E2
0001245E 5828 0024                  		addq.b	#4,$24(a0)
00012462 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012468 117C 0001 0018             		move.b	#1,$18(a0)
0001246E 6000 0000                  		bra.w	loc_124DE
00012472                            ; ===========================================================================
00012472                            
00012472                            loc_123E2:
00012472 117C 0004 001A             		move.b	#4,$1A(a0)
00012478 7000                       		moveq	#0,d0
0001247A 1028 0028                  		move.b	$28(a0),d0
0001247E 3200                       		move.w	d0,d1
00012480 E648                       		lsr.w	#3,d0
00012482 0240 001E                  		andi.w	#$1E,d0
00012486 45FA 0000                  		lea	Obj63_Data(pc),a2
0001248A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001248E 315A 0038                  		move.w	(a2)+,$38(a0)
00012492 315A 0030                  		move.w	(a2)+,$30(a0)
00012496 214A 003C                  		move.l	a2,$3C(a0)
0001249A 0241 000F                  		andi.w	#$F,d1
0001249E E549                       		lsl.w	#2,d1
000124A0 1141 0038                  		move.b	d1,$38(a0)
000124A4 117C 0004 003A             		move.b	#4,$3A(a0)
000124AA 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000124AE 6700                       		beq.s	loc_1244C
000124B0 117C 0001 003B             		move.b	#1,$3B(a0)
000124B6 4428 003A                  		neg.b	$3A(a0)
000124BA 7200                       		moveq	#0,d1
000124BC 1228 0038                  		move.b	$38(a0),d1
000124C0 D228 003A                  		add.b	$3A(a0),d1
000124C4 B228 0039                  		cmp.b	$39(a0),d1
000124C8 6500                       		bcs.s	loc_12448
000124CA 1001                       		move.b	d1,d0
000124CC 7200                       		moveq	#0,d1
000124CE 4A00                       		tst.b	d0
000124D0 6A00                       		bpl.s	loc_12448
000124D2 1228 0039                  		move.b	$39(a0),d1
000124D6 5901                       		subq.b	#4,d1
000124D8                            
000124D8                            loc_12448:
000124D8 1141 0038                  		move.b	d1,$38(a0)
000124DC                            
000124DC                            loc_1244C:
000124DC 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000124E2 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000124E8 6100 0000                  		bsr.w	Obj63_ChangeDir
000124EC 6000 0000                  		bra.w	loc_124B2
000124F0                            ; ===========================================================================
000124F0                            
000124F0                            loc_12460:				; XREF: Obj63_Main
000124F0 1140 002F                  		move.b	d0,$2F(a0)
000124F4 0240 007F                  		andi.w	#$7F,d0
000124F8 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000124FC 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012502 6600 B1FE                  		bne.w	DeleteObject
00012506 D040                       		add.w	d0,d0
00012508 0240 001E                  		andi.w	#$1E,d0
0001250C 0640 0070                  		addi.w	#$70,d0
00012510 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012516 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001251A 321A                       		move.w	(a2)+,d1
0001251C 2248                       		movea.l	a0,a1
0001251E 6000                       		bra.s	Obj63_MakePtfms
00012520                            ; ===========================================================================
00012520                            
00012520                            Obj63_Loop:
00012520 6100 B62A                  		bsr.w	SingleObjLoad
00012524 6600                       		bne.s	loc_124AA
00012526                            
00012526                            Obj63_MakePtfms:			; XREF: loc_12460
00012526 12BC 0063                  		move.b	#$63,0(a1)
0001252A 335A 0008                  		move.w	(a2)+,8(a1)
0001252E 335A 000C                  		move.w	(a2)+,$C(a1)
00012532 301A                       		move.w	(a2)+,d0
00012534 1340 0028                  		move.b	d0,$28(a1)
00012538                            
00012538                            loc_124AA:
00012538 51C9 FFE6                  		dbf	d1,Obj63_Loop
0001253C                            
0001253C 588F                       		addq.l	#4,sp
0001253E 4E75                       		rts	
00012540                            ; ===========================================================================
00012540                            
00012540                            loc_124B2:				; XREF: Obj63_Index
00012540 7200                       		moveq	#0,d1
00012542 1228 0019                  		move.b	$19(a0),d1
00012546 4EB9 0000 7550             		jsr	(PlatformObject).l
0001254C 6000 0000                  		bra.w	sub_12502
00012550                            ; ===========================================================================
00012550                            
00012550                            loc_124C2:				; XREF: Obj63_Index
00012550 7200                       		moveq	#0,d1
00012552 1228 0019                  		move.b	$19(a0),d1
00012556 4EB9 0000 76C4             		jsr	(ExitPlatform).l
0001255C 3F28 0008                  		move.w	8(a0),-(sp)
00012560 6100 0000                  		bsr.w	sub_12502
00012564 341F                       		move.w	(sp)+,d2
00012566 4EF9 0000 7C2E             		jmp	(MvSonicOnPtfm2).l
0001256C                            ; ===========================================================================
0001256C                            
0001256C                            loc_124DE:				; XREF: Obj63_Index
0001256C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012570 0240 0003                  		andi.w	#3,d0
00012574 6600                       		bne.s	loc_124FC
00012576 7201                       		moveq	#1,d1
00012578 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001257C 6700                       		beq.s	loc_124F2
0001257E 4401                       		neg.b	d1
00012580                            
00012580                            loc_124F2:
00012580 D328 001A                  		add.b	d1,$1A(a0)
00012584 0228 0003 001A             		andi.b	#3,$1A(a0)
0001258A                            
0001258A                            loc_124FC:
0001258A 588F                       		addq.l	#4,sp
0001258C 6000 D1D0                  		bra.w	MarkObjGone
00012590                            
00012590                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012590                            
00012590                            
00012590                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012590 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012594 6700                       		beq.s	loc_12520
00012596 4A28 003B                  		tst.b	$3B(a0)
0001259A 6600                       		bne.s	loc_12520
0001259C 117C 0001 003B             		move.b	#1,$3B(a0)
000125A2 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
000125A8 4428 003A                  		neg.b	$3A(a0)
000125AC 6000                       		bra.s	loc_12534
000125AE                            ; ===========================================================================
000125AE                            
000125AE                            loc_12520:
000125AE 3028 0008                  		move.w	8(a0),d0
000125B2 B068 0034                  		cmp.w	$34(a0),d0
000125B6 6600                       		bne.s	loc_1256A
000125B8 3028 000C                  		move.w	$C(a0),d0
000125BC B068 0036                  		cmp.w	$36(a0),d0
000125C0 6600                       		bne.s	loc_1256A
000125C2                            
000125C2                            loc_12534:
000125C2 7200                       		moveq	#0,d1
000125C4 1228 0038                  		move.b	$38(a0),d1
000125C8 D228 003A                  		add.b	$3A(a0),d1
000125CC B228 0039                  		cmp.b	$39(a0),d1
000125D0 6500                       		bcs.s	loc_12552
000125D2 1001                       		move.b	d1,d0
000125D4 7200                       		moveq	#0,d1
000125D6 4A00                       		tst.b	d0
000125D8 6A00                       		bpl.s	loc_12552
000125DA 1228 0039                  		move.b	$39(a0),d1
000125DE 5901                       		subq.b	#4,d1
000125E0                            
000125E0                            loc_12552:
000125E0 1141 0038                  		move.b	d1,$38(a0)
000125E4 2268 003C                  		movea.l	$3C(a0),a1
000125E8 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000125EE 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000125F4 6100 0000                  		bsr.w	Obj63_ChangeDir
000125F8                            
000125F8                            loc_1256A:
000125F8 6100 B0A6                  		bsr.w	SpeedToPos
000125FC 4E75                       		rts	
000125FE                            ; End of function sub_12502
000125FE                            
000125FE                            
000125FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000125FE                            
000125FE                            
000125FE                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
000125FE 7000                       		moveq	#0,d0
00012600 343C FF00                  		move.w	#-$100,d2
00012604 3028 0008                  		move.w	8(a0),d0
00012608 9068 0034                  		sub.w	$34(a0),d0
0001260C 6400                       		bcc.s	loc_12584
0001260E 4440                       		neg.w	d0
00012610 4442                       		neg.w	d2
00012612                            
00012612                            loc_12584:
00012612 7200                       		moveq	#0,d1
00012614 363C FF00                  		move.w	#-$100,d3
00012618 3228 000C                  		move.w	$C(a0),d1
0001261C 9268 0036                  		sub.w	$36(a0),d1
00012620 6400                       		bcc.s	loc_12598
00012622 4441                       		neg.w	d1
00012624 4443                       		neg.w	d3
00012626                            
00012626                            loc_12598:
00012626 B240                       		cmp.w	d0,d1
00012628 6500                       		bcs.s	loc_125C2
0001262A 3028 0008                  		move.w	8(a0),d0
0001262E 9068 0034                  		sub.w	$34(a0),d0
00012632 6700                       		beq.s	loc_125AE
00012634 48C0                       		ext.l	d0
00012636 E180                       		asl.l	#8,d0
00012638 81C1                       		divs.w	d1,d0
0001263A 4440                       		neg.w	d0
0001263C                            
0001263C                            loc_125AE:
0001263C 3140 0010                  		move.w	d0,$10(a0)
00012640 3143 0012                  		move.w	d3,$12(a0)
00012644 4840                       		swap	d0
00012646 3140 000A                  		move.w	d0,$A(a0)
0001264A 4268 000E                  		clr.w	$E(a0)
0001264E 4E75                       		rts	
00012650                            ; ===========================================================================
00012650                            
00012650                            loc_125C2:				; XREF: Obj63_ChangeDir
00012650 3228 000C                  		move.w	$C(a0),d1
00012654 9268 0036                  		sub.w	$36(a0),d1
00012658 6700                       		beq.s	loc_125D4
0001265A 48C1                       		ext.l	d1
0001265C E181                       		asl.l	#8,d1
0001265E 83C0                       		divs.w	d0,d1
00012660 4441                       		neg.w	d1
00012662                            
00012662                            loc_125D4:
00012662 3141 0012                  		move.w	d1,$12(a0)
00012666 3142 0010                  		move.w	d2,$10(a0)
0001266A 4841                       		swap	d1
0001266C 3141 000E                  		move.w	d1,$E(a0)
00012670 4268 000A                  		clr.w	$A(a0)
00012674 4E75                       		rts	
00012676                            ; End of function Obj63_ChangeDir
00012676                            
00012676                            ; ===========================================================================
00012676 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012678 0000                       		dc.w word_12610-Obj63_Data
0001267A 0000                       		dc.w word_12628-Obj63_Data
0001267C 0000                       		dc.w word_1263C-Obj63_Data
0001267E 0000                       		dc.w word_12650-Obj63_Data
00012680 0000                       		dc.w word_12668-Obj63_Data
00012682 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012692 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
0001269E 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
000126AE 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
000126B6 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
000126CA 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
000126DE 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000126F6 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
0001270A                            
0001270A                            ; ---------------------------------------------------------------------------
0001270A                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001270A                            ; ---------------------------------------------------------------------------
0001270A                            Map_obj63:
0001270A                            	include "_maps\obj63.asm"
0001270A                            ; ---------------------------------------------------------------------------
0001270A                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001270A                            ; ---------------------------------------------------------------------------
0001270A 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
0001270E 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012712 0000                       		dc.w byte_1269E-Map_obj63
00012714 01                         byte_12686:	dc.b 1
00012715 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001271A 01                         byte_1268C:	dc.b 1
0001271B F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012720 01                         byte_12692:	dc.b 1
00012721 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012726 01                         byte_12698:	dc.b 1
00012727 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0001272C 01                         byte_1269E:	dc.b 1
0001272D F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012732                            		even
00012732                            		even
00012732                            
00012732                            ; ===========================================================================
00012732                            ; ---------------------------------------------------------------------------
00012732                            ; Object 64 - bubbles (LZ)
00012732                            ; ---------------------------------------------------------------------------
00012732                            
00012732                            Obj64:					; XREF: Obj_Index
00012732 7000                       		moveq	#0,d0
00012734 1028 0024                  		move.b	$24(a0),d0
00012738 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
0001273C 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012740                            ; ===========================================================================
00012740 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012742 0000                       		dc.w Obj64_Animate-Obj64_Index
00012744 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012746 0000                       		dc.w Obj64_Display2-Obj64_Index
00012748 0000                       		dc.w Obj64_Delete3-Obj64_Index
0001274A 0000                       		dc.w Obj64_BblMaker-Obj64_Index
0001274C                            ; ===========================================================================
0001274C                            
0001274C                            Obj64_Main:				; XREF: Obj64_Index
0001274C 5428 0024                  		addq.b	#2,$24(a0)
00012750 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012758 317C 8348 0002             		move.w	#$8348,2(a0)
0001275E 117C 0084 0001             		move.b	#$84,1(a0)
00012764 117C 0010 0019             		move.b	#$10,$19(a0)
0001276A 117C 0001 0018             		move.b	#1,$18(a0)
00012770 1028 0028                  		move.b	$28(a0),d0	; get object type
00012774 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012776 5028 0024                  		addq.b	#8,$24(a0)
0001277A 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
0001277E 1140 0032                  		move.b	d0,$32(a0)
00012782 1140 0033                  		move.b	d0,$33(a0)
00012786 117C 0006 001C             		move.b	#6,$1C(a0)
0001278C 6000 0000                  		bra.w	Obj64_BblMaker
00012790                            ; ===========================================================================
00012790                            
00012790                            Obj64_Bubble:				; XREF: Obj64_Main
00012790 1140 001C                  		move.b	d0,$1C(a0)
00012794 3168 0008 0030             		move.w	8(a0),$30(a0)
0001279A 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
000127A0 4EB9 0000 29B4             		jsr	(RandomNumber).l
000127A6 1140 0026                  		move.b	d0,$26(a0)
000127AA                            
000127AA                            Obj64_Animate:				; XREF: Obj64_Index
000127AA 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000127B0 4EBA 8040                  		jsr	AnimateSprite
000127B4 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
000127BA 6600                       		bne.s	Obj64_ChkWater
000127BC 117C 0001 002E             		move.b	#1,$2E(a0)
000127C2                            
000127C2                            Obj64_ChkWater:				; XREF: Obj64_Index
000127C2 3038 F646                  		move.w	($FFFFF646).w,d0
000127C6 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
000127CA 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
000127CC                            
000127CC                            Obj64_Burst:				; XREF: Obj64_Wobble
000127CC 117C 0006 0024             		move.b	#6,$24(a0)
000127D2 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
000127D6 6000 0000                  		bra.w	Obj64_Display2
000127DA                            ; ===========================================================================
000127DA                            
000127DA                            Obj64_Wobble:				; XREF: Obj64_ChkWater
000127DA 1028 0026                  		move.b	$26(a0),d0
000127DE 5228 0026                  		addq.b	#1,$26(a0)
000127E2 0240 007F                  		andi.w	#$7F,d0
000127E6 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000127EC 1031 0000                  		move.b	(a1,d0.w),d0
000127F0 4880                       		ext.w	d0
000127F2 D068 0030                  		add.w	$30(a0),d0
000127F6 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
000127FA 4A28 002E                  		tst.b	$2E(a0)
000127FE 6700                       		beq.s	Obj64_Display
00012800 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012804 6700                       		beq.s	Obj64_Display	; if not, branch
00012806                            
00012806 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
0001280A 303C 00AD                  		move.w	#$AD,d0
0001280E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012814 43F8 D000                  		lea	($FFFFD000).w,a1
00012818 4269 0010                  		clr.w	$10(a1)
0001281C 4269 0012                  		clr.w	$12(a1)
00012820 4269 0014                  		clr.w	$14(a1)
00012824 137C 0015 001C             		move.b	#$15,$1C(a1)
0001282A 337C 0023 003E             		move.w	#$23,$3E(a1)
00012830 137C 0000 003C             		move.b	#0,$3C(a1)
00012836 08A9 0005 0022             		bclr	#5,$22(a1)
0001283C 08A9 0004 0022             		bclr	#4,$22(a1)
00012842 0829 0002 0022             		btst	#2,$22(a1)
00012848 6700 FF82                  		beq.w	Obj64_Burst
0001284C 08A9 0002 0022             		bclr	#2,$22(a1)
00012852 137C 0013 0016             		move.b	#$13,$16(a1)
00012858 137C 0009 0017             		move.b	#9,$17(a1)
0001285E 5B69 000C                  		subq.w	#5,$C(a1)
00012862 6000 FF68                  		bra.w	Obj64_Burst
00012866                            ; ===========================================================================
00012866                            
00012866                            Obj64_Display:				; XREF: Obj64_Wobble
00012866 6100 AE38                  		bsr.w	SpeedToPos
0001286A 4A28 0001                  		tst.b	1(a0)
0001286E 6A00                       		bpl.s	Obj64_Delete
00012870 4EFA AE54                  		jmp	DisplaySprite
00012874                            ; ===========================================================================
00012874                            
00012874                            Obj64_Delete:
00012874 4EFA AE8C                  		jmp	DeleteObject
00012878                            ; ===========================================================================
00012878                            
00012878                            Obj64_Display2:				; XREF: Obj64_Index
00012878 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001287E 4EB9 0000 A7F2             		jsr	AnimateSprite
00012884 4A28 0001                  		tst.b	1(a0)
00012888 6A00                       		bpl.s	Obj64_Delete2
0001288A 4EFA AE3A                  		jmp	DisplaySprite
0001288E                            ; ===========================================================================
0001288E                            
0001288E                            Obj64_Delete2:
0001288E 4EFA AE72                  		jmp	DeleteObject
00012892                            ; ===========================================================================
00012892                            
00012892                            Obj64_Delete3:				; XREF: Obj64_Index
00012892 6000 AE6E                  		bra.w	DeleteObject
00012896                            ; ===========================================================================
00012896                            
00012896                            Obj64_BblMaker:				; XREF: Obj64_Index
00012896 4A68 0036                  		tst.w	$36(a0)
0001289A 6600                       		bne.s	loc_12874
0001289C 3038 F646                  		move.w	($FFFFF646).w,d0
000128A0 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
000128A4 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
000128A8 4A28 0001                  		tst.b	1(a0)
000128AC 6A00 0000                  		bpl.w	Obj64_ChkDel
000128B0 5368 0038                  		subq.w	#1,$38(a0)
000128B4 6A00 0000                  		bpl.w	loc_12914
000128B8 317C 0001 0036             		move.w	#1,$36(a0)
000128BE                            
000128BE                            loc_1283A:
000128BE 4EB9 0000 29B4             		jsr	(RandomNumber).l
000128C4 3200                       		move.w	d0,d1
000128C6 0240 0007                  		andi.w	#7,d0
000128CA 0C40 0006                  		cmpi.w	#6,d0
000128CE 64EE                       		bcc.s	loc_1283A
000128D0                            
000128D0 1140 0034                  		move.b	d0,$34(a0)
000128D4 0241 000C                  		andi.w	#$C,d1
000128D8 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
000128DE D2C1                       		adda.w	d1,a1
000128E0 2149 003C                  		move.l	a1,$3C(a0)
000128E4 5328 0032                  		subq.b	#1,$32(a0)
000128E8 6A00                       		bpl.s	loc_12872
000128EA 1168 0033 0032             		move.b	$33(a0),$32(a0)
000128F0 08E8 0007 0036             		bset	#7,$36(a0)
000128F6                            
000128F6                            loc_12872:
000128F6 6000                       		bra.s	loc_1287C
000128F8                            ; ===========================================================================
000128F8                            
000128F8                            loc_12874:				; XREF: Obj64_BblMaker
000128F8 5368 0038                  		subq.w	#1,$38(a0)
000128FC 6A00 0000                  		bpl.w	loc_12914
00012900                            
00012900                            loc_1287C:
00012900 4EB9 0000 29B4             		jsr	(RandomNumber).l
00012906 0240 001F                  		andi.w	#$1F,d0
0001290A 3140 0038                  		move.w	d0,$38(a0)
0001290E 6100 B23C                  		bsr.w	SingleObjLoad
00012912 6600                       		bne.s	loc_128F8
00012914 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012918 3368 0008 0008             		move.w	8(a0),8(a1)
0001291E 4EB9 0000 29B4             		jsr	(RandomNumber).l
00012924 0240 000F                  		andi.w	#$F,d0
00012928 5140                       		subq.w	#8,d0
0001292A D169 0008                  		add.w	d0,8(a1)
0001292E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012934 7000                       		moveq	#0,d0
00012936 1028 0034                  		move.b	$34(a0),d0
0001293A 2468 003C                  		movea.l	$3C(a0),a2
0001293E 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012944 0828 0007 0036             		btst	#7,$36(a0)
0001294A 6700                       		beq.s	loc_128F8
0001294C 4EB9 0000 29B4             		jsr	(RandomNumber).l
00012952 0240 0003                  		andi.w	#3,d0
00012956 6600                       		bne.s	loc_128E4
00012958 08E8 0006 0036             		bset	#6,$36(a0)
0001295E 6600                       		bne.s	loc_128F8
00012960 137C 0002 0028             		move.b	#2,$28(a1)
00012966                            
00012966                            loc_128E4:
00012966 4A28 0034                  		tst.b	$34(a0)
0001296A 6600                       		bne.s	loc_128F8
0001296C 08E8 0006 0036             		bset	#6,$36(a0)
00012972 6600                       		bne.s	loc_128F8
00012974 137C 0002 0028             		move.b	#2,$28(a1)
0001297A                            
0001297A                            loc_128F8:
0001297A 5328 0034                  		subq.b	#1,$34(a0)
0001297E 6A00                       		bpl.s	loc_12914
00012980 4EB9 0000 29B4             		jsr	(RandomNumber).l
00012986 0240 007F                  		andi.w	#$7F,d0
0001298A 0640 0080                  		addi.w	#$80,d0
0001298E D168 0038                  		add.w	d0,$38(a0)
00012992 4268 0036                  		clr.w	$36(a0)
00012996                            
00012996                            loc_12914:
00012996 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001299C 4EB9 0000 A7F2             		jsr	AnimateSprite
000129A2                            
000129A2                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000129A2 3028 0008                  		move.w	8(a0),d0
000129A6 0240 FF80                  		andi.w	#$FF80,d0
000129AA 3238 F700                  		move.w	($FFFFF700).w,d1
000129AE 0441 0080                  		subi.w	#$80,d1
000129B2 0241 FF80                  		andi.w	#$FF80,d1
000129B6 9041                       		sub.w	d1,d0
000129B8 0C40 0280                  		cmpi.w	#$280,d0
000129BC 6200 AD44                  		bhi.w	DeleteObject
000129C0 3038 F646                  		move.w	($FFFFF646).w,d0
000129C4 B068 000C                  		cmp.w	$C(a0),d0
000129C8 6500 ACFC                  		bcs.w	DisplaySprite
000129CC 4E75                       		rts	
000129CE                            ; ===========================================================================
000129CE                            ; bubble production sequence
000129CE                            
000129CE                            ; 0 = small bubble, 1 =	large bubble
000129CE                            
000129CE 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
000129E0                            
000129E0                            ; ===========================================================================
000129E0                            
000129E0                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
000129E0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000129E4 6B00                       		bmi.s	loc_12998
000129E6 43F8 D000                  		lea	($FFFFD000).w,a1
000129EA 3029 0008                  		move.w	8(a1),d0
000129EE 3228 0008                  		move.w	8(a0),d1
000129F2 0441 0010                  		subi.w	#$10,d1
000129F6 B240                       		cmp.w	d0,d1
000129F8 6400                       		bcc.s	loc_12998
000129FA 0641 0020                  		addi.w	#$20,d1
000129FE B240                       		cmp.w	d0,d1
00012A00 6500                       		bcs.s	loc_12998
00012A02 3029 000C                  		move.w	$C(a1),d0
00012A06 3228 000C                  		move.w	$C(a0),d1
00012A0A B240                       		cmp.w	d0,d1
00012A0C 6400                       		bcc.s	loc_12998
00012A0E 0641 0010                  		addi.w	#$10,d1
00012A12 B240                       		cmp.w	d0,d1
00012A14 6500                       		bcs.s	loc_12998
00012A16 7001                       		moveq	#1,d0
00012A18 4E75                       		rts	
00012A1A                            ; ===========================================================================
00012A1A                            
00012A1A                            loc_12998:
00012A1A 7000                       		moveq	#0,d0
00012A1C 4E75                       		rts	
00012A1E                            ; ===========================================================================
00012A1E                            Ani_obj64:
00012A1E                            	include "_anim\obj64.asm"
00012A1E                            ; ---------------------------------------------------------------------------
00012A1E                            ; Animation script - bubbles (LZ)
00012A1E                            ; ---------------------------------------------------------------------------
00012A1E 0000                       		dc.w byte_129AA-Ani_obj64
00012A20 0000                       		dc.w byte_129B0-Ani_obj64
00012A22 0000                       		dc.w byte_129B6-Ani_obj64
00012A24 0000                       		dc.w byte_129BE-Ani_obj64
00012A26 0000                       		dc.w byte_129BE-Ani_obj64
00012A28 0000                       		dc.w byte_129C0-Ani_obj64
00012A2A 0000                       		dc.w byte_129C6-Ani_obj64
00012A2C 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012A32 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00012A38 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012A40 04FC                       byte_129BE:	dc.b 4,	$FC
00012A42 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00012A48 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012A4E 00                         		even
00012A4E 00                         		even
00012A4E                            
00012A4E                            ; ---------------------------------------------------------------------------
00012A4E                            ; Sprite mappings - bubbles (LZ)
00012A4E                            ; ---------------------------------------------------------------------------
00012A4E                            Map_obj64:
00012A4E                            	include "_maps\obj64.asm"
00012A4E                            ; ---------------------------------------------------------------------------
00012A4E                            ; Sprite mappings - bubbles (LZ)
00012A4E                            ; ---------------------------------------------------------------------------
00012A4E 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012A52 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00012A56 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012A5A 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012A5E 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012A62 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00012A66 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012A6A 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012A6E 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012A72 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00012A76 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012A7A 0000                       		dc.w byte_12A9C-Map_obj64
00012A7C 01                         byte_129FA:	dc.b 1
00012A7D FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012A82 01                         byte_12A00:	dc.b 1
00012A83 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00012A88 01                         byte_12A06:	dc.b 1
00012A89 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012A8E 01                         byte_12A0C:	dc.b 1
00012A8F F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00012A94 01                         byte_12A12:	dc.b 1
00012A95 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012A9A 01                         byte_12A18:	dc.b 1
00012A9B F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012AA0 01                         byte_12A1E:	dc.b 1
00012AA1 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00012AA6 04                         byte_12A24:	dc.b 4
00012AA7 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012AAC F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012AB1 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00012AB6 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00012ABB 04                         byte_12A39:	dc.b 4
00012ABC F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00012AC1 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00012AC6 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00012ACB 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00012AD0 01                         byte_12A4E:	dc.b 1
00012AD1 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00012AD6 01                         byte_12A54:	dc.b 1
00012AD7 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00012ADC 01                         byte_12A5A:	dc.b 1
00012ADD F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00012AE2 01                         byte_12A60:	dc.b 1
00012AE3 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00012AE8 01                         byte_12A66:	dc.b 1
00012AE9 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00012AEE 01                         byte_12A6C:	dc.b 1
00012AEF F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00012AF4 01                         byte_12A72:	dc.b 1
00012AF5 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00012AFA 01                         byte_12A78:	dc.b 1
00012AFB F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00012B00 01                         byte_12A7E:	dc.b 1
00012B01 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00012B06 01                         byte_12A84:	dc.b 1
00012B07 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00012B0C 01                         byte_12A8A:	dc.b 1
00012B0D F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00012B12 01                         byte_12A90:	dc.b 1
00012B13 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00012B18 01                         byte_12A96:	dc.b 1
00012B19 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00012B1E 00                         byte_12A9C:	dc.b 0
00012B20 00                         		even
00012B20 00                         		even
00012B20                            
00012B20                            ; ===========================================================================
00012B20                            ; ---------------------------------------------------------------------------
00012B20                            ; Object 65 - waterfalls (LZ)
00012B20                            ; ---------------------------------------------------------------------------
00012B20                            
00012B20                            Obj65:					; XREF: Obj_Index
00012B20 7000                       		moveq	#0,d0
00012B22 1028 0024                  		move.b	$24(a0),d0
00012B26 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00012B2A 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00012B2E                            ; ===========================================================================
00012B2E 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00012B30 0000                       		dc.w Obj65_Animate-Obj65_Index
00012B32 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00012B34 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00012B36 0000                       		dc.w loc_12B36-Obj65_Index
00012B38                            ; ===========================================================================
00012B38                            
00012B38                            Obj65_Main:				; XREF: Obj65_Index
00012B38 5828 0024                  		addq.b	#4,$24(a0)
00012B3C 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00012B44 317C 4259 0002             		move.w	#$4259,2(a0)
00012B4A 0028 0004 0001             		ori.b	#4,1(a0)
00012B50 117C 0018 0019             		move.b	#$18,$19(a0)
00012B56 117C 0001 0018             		move.b	#1,$18(a0)
00012B5C 1028 0028                  		move.b	$28(a0),d0	; get object type
00012B60 6A00                       		bpl.s	loc_12AE6
00012B62 08E8 0007 0002             		bset	#7,2(a0)
00012B68                            
00012B68                            loc_12AE6:
00012B68 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00012B6C 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00012B70 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00012B74 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00012B76 4228 0018                  		clr.b	$18(a0)
00012B7A 5528 0024                  		subq.b	#2,$24(a0)
00012B7E 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00012B84 6700                       		beq.s	loc_12B0A	; if not, branch
00012B86 117C 0006 0024             		move.b	#6,$24(a0)
00012B8C                            
00012B8C                            loc_12B0A:
00012B8C 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00012B92 6700                       		beq.s	Obj65_Animate	; if not, branch
00012B94 117C 0008 0024             		move.b	#8,$24(a0)
00012B9A                            
00012B9A                            Obj65_Animate:				; XREF: Obj65_Index
00012B9A 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00012BA0 4EB9 0000 A7F2             		jsr	AnimateSprite
00012BA6                            
00012BA6                            Obj65_ChkDel:				; XREF: Obj65_Index
00012BA6 6000 CBB6                  		bra.w	MarkObjGone
00012BAA                            ; ===========================================================================
00012BAA                            
00012BAA                            Obj65_FixHeight:			; XREF: Obj65_Index
00012BAA 3038 F646                  		move.w	($FFFFF646).w,d0
00012BAE 0440 0010                  		subi.w	#$10,d0
00012BB2 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00012BB6 60E2                       		bra.s	Obj65_Animate
00012BB8                            ; ===========================================================================
00012BB8                            
00012BB8                            loc_12B36:				; XREF: Obj65_Index
00012BB8 08A8 0007 0002             		bclr	#7,2(a0)
00012BBE 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00012BC4 6600                       		bne.s	Obj65_Animate2
00012BC6 08E8 0007 0002             		bset	#7,2(a0)
00012BCC                            
00012BCC                            Obj65_Animate2:
00012BCC 60CC                       		bra.s	Obj65_Animate
00012BCE                            ; ===========================================================================
00012BCE                            Ani_obj65:
00012BCE                            	include "_anim\obj65.asm"
00012BCE                            ; ---------------------------------------------------------------------------
00012BCE                            ; Animation script - waterfall (LZ)
00012BCE                            ; ---------------------------------------------------------------------------
00012BCE 0000                       		dc.w byte_12B4E-Ani_obj65
00012BD0 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00012BD6 00                         		even
00012BD6 00                         		even
00012BD6                            
00012BD6                            ; ---------------------------------------------------------------------------
00012BD6                            ; Sprite mappings - waterfalls (LZ)
00012BD6                            ; ---------------------------------------------------------------------------
00012BD6                            Map_obj65:
00012BD6                            	include "_maps\obj65.asm"
00012BD6                            ; ---------------------------------------------------------------------------
00012BD6                            ; Sprite mappings - waterfalls (LZ)
00012BD6                            ; ---------------------------------------------------------------------------
00012BD6 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00012BDA 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00012BDE 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00012BE2 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00012BE6 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00012BEA 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00012BEE 01                         byte_12B6C:	dc.b 1
00012BEF F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00012BF4 02                         byte_12B72:	dc.b 2
00012BF5 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00012BFA 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00012BFF 02                         byte_12B7D:	dc.b 2
00012C00 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012C05 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012C0A 01                         byte_12B88:	dc.b 1
00012C0B F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00012C10 02                         byte_12B8E:	dc.b 2
00012C11 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012C16 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012C1B 01                         byte_12B99:	dc.b 1
00012C1C F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00012C21 01                         byte_12B9F:	dc.b 1
00012C22 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00012C27 01                         byte_12BA5:	dc.b 1
00012C28 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00012C2D 02                         byte_12BAB:	dc.b 2
00012C2E F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00012C33 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00012C38 02                         byte_12BB6:	dc.b 2
00012C39 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00012C3E F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00012C43 02                         byte_12BC1:	dc.b 2
00012C44 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00012C49 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00012C4E 02                         byte_12BCC:	dc.b 2
00012C4F F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00012C54 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00012C5A 00                         		even
00012C5A 00                         		even
00012C5A                            
00012C5A                            ; ===========================================================================
00012C5A                            ; ---------------------------------------------------------------------------
00012C5A                            ; Object 01 - Sonic
00012C5A                            ; ---------------------------------------------------------------------------
00012C5A                            
00012C5A                            Obj01:					; XREF: Obj_Index
00012C5A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00012C5E 6700                       		beq.s	Obj01_Normal	; if not, branch
00012C60 4EF9 0000 0000             		jmp	DebugMode
00012C66                            ; ===========================================================================
00012C66                            
00012C66                            Obj01_Normal:
00012C66 7000                       		moveq	#0,d0
00012C68 1028 0024                  		move.b	$24(a0),d0
00012C6C 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00012C70 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00012C74                            ; ===========================================================================
00012C74 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00012C76 0000                       		dc.w Obj01_Control-Obj01_Index
00012C78 0000                       		dc.w Obj01_Hurt-Obj01_Index
00012C7A 0000                       		dc.w Obj01_Death-Obj01_Index
00012C7C 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00012C7E                            ; ===========================================================================
00012C7E                            
00012C7E                            Obj01_Main:				; XREF: Obj01_Index
00012C7E 5428 0024                  		addq.b	#2,$24(a0)
00012C82 117C 0013 0016             		move.b	#$13,$16(a0)
00012C88 117C 0009 0017             		move.b	#9,$17(a0)
00012C8E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00012C96 317C 0780 0002             		move.w	#$780,2(a0)
00012C9C 117C 0002 0018             		move.b	#2,$18(a0)
00012CA2 117C 0018 0019             		move.b	#$18,$19(a0)
00012CA8 117C 0004 0001             		move.b	#4,1(a0)
00012CAE 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00012CB4 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00012CBA 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00012CC0                            
00012CC0                            Obj01_Control:				; XREF: Obj01_Index
00012CC0 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00012CC4 6700                       		beq.s	loc_12C58	; if not, branch
00012CC6 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00012CCC 6700                       		beq.s	loc_12C58	; if not, branch
00012CCE 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00012CD4 4238 F7CC                  		clr.b	($FFFFF7CC).w
00012CD8 4E75                       		rts	
00012CDA                            ; ===========================================================================
00012CDA                            
00012CDA                            loc_12C58:
00012CDA 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00012CDE 6600                       		bne.s	loc_12C64	; if yes, branch
00012CE0 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00012CE6                            
00012CE6                            loc_12C64:
00012CE6 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00012CEC 6600                       		bne.s	loc_12C7E	; if yes, branch
00012CEE 7000                       		moveq	#0,d0
00012CF0 1028 0022                  		move.b	$22(a0),d0
00012CF4 0240 0006                  		andi.w	#6,d0
00012CF8 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00012CFC 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00012D00                            
00012D00                            loc_12C7E:
00012D00 6100                       		bsr.s	Sonic_Display
00012D02 6100 0000                  		bsr.w	Sonic_RecordPos
00012D06 6100 0000                  		bsr.w	Sonic_Water
00012D0A 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00012D10 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00012D16 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00012D1A 6700                       		beq.s	loc_12CA6
00012D1C 4A28 001C                  		tst.b	$1C(a0)
00012D20 6600                       		bne.s	loc_12CA6
00012D22 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00012D28                            
00012D28                            loc_12CA6:
00012D28 6100 0000                  		bsr.w	Sonic_Animate
00012D2C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012D30 6B00                       		bmi.s	loc_12CB6
00012D32 4EB9 0000 0000             		jsr	TouchResponse
00012D38                            
00012D38                            loc_12CB6:
00012D38 6100 0000                  		bsr.w	Sonic_Loops
00012D3C 6100 0000                  		bsr.w	LoadSonicDynPLC
00012D40 4E75                       		rts	
00012D42                            ; ===========================================================================
00012D42 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00012D44 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00012D46 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00012D48 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00012D4A                            ; ---------------------------------------------------------------------------
00012D4A                            ; Music	to play	after invincibility wears off
00012D4A                            ; ---------------------------------------------------------------------------
00012D4A                            MusicList2:	incbin	misc\muslist2.bin
00012D50                            		even
00012D50                            ; ===========================================================================
00012D50                            
00012D50                            Sonic_Display:				; XREF: loc_12C7E
00012D50 3028 0030                  		move.w	$30(a0),d0
00012D54 6700                       		beq.s	Obj01_Display
00012D56 5368 0030                  		subq.w	#1,$30(a0)
00012D5A E648                       		lsr.w	#3,d0
00012D5C 6400                       		bcc.s	Obj01_ChkInvin
00012D5E                            
00012D5E                            Obj01_Display:
00012D5E 4EBA A966                  		jsr	DisplaySprite
00012D62                            
00012D62                            Obj01_ChkInvin:
00012D62 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00012D66 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
00012D68 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00012D6C 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
00012D6E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00012D72 6600                       		bne.s	Obj01_ChkShoes
00012D74 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00012D78 6600                       		bne.s	Obj01_RmvInvin
00012D7A 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00012D80 6500                       		bcs.s	Obj01_RmvInvin
00012D82 7000                       		moveq	#0,d0
00012D84 1038 FE10                  		move.b	($FFFFFE10).w,d0
00012D88 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
00012D8E 6600                       		bne.s	Obj01_PlayMusic
00012D90 7005                       		moveq	#5,d0		; play SBZ music
00012D92                            
00012D92                            Obj01_PlayMusic:
00012D92 43F9 0001 2D4A             		lea	(MusicList2).l,a1
00012D98 1031 0000                  		move.b	(a1,d0.w),d0
00012D9C 4EB9 0000 1396             		jsr	(PlaySound).l	; play normal music
00012DA2                            
00012DA2                            Obj01_RmvInvin:
00012DA2 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00012DA8                            
00012DA8                            Obj01_ChkShoes:
00012DA8 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00012DAC 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00012DAE 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00012DB2 6700                       		beq.s	Obj01_ExitChk
00012DB4 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00012DB8 6600                       		bne.s	Obj01_ExitChk
00012DBA 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00012DC0 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00012DC6 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00012DCC 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00012DD2 303C 00E3                  		move.w	#$E3,d0
00012DD6 4EF9 0000 1396             		jmp	(PlaySound).l	; run music at normal speed
00012DDC                            ; ===========================================================================
00012DDC                            
00012DDC                            Obj01_ExitChk:
00012DDC 4E75                       		rts	
00012DDE                            
00012DDE                            ; ---------------------------------------------------------------------------
00012DDE                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00012DDE                            ; ---------------------------------------------------------------------------
00012DDE                            
00012DDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012DDE                            
00012DDE                            
00012DDE                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00012DDE 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00012DE2 43F8 CB00                  		lea	($FFFFCB00).w,a1
00012DE6 43F1 0000                  		lea	(a1,d0.w),a1
00012DEA 32E8 0008                  		move.w	8(a0),(a1)+
00012DEE 32E8 000C                  		move.w	$C(a0),(a1)+
00012DF2 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00012DF6 4E75                       		rts	
00012DF8                            ; End of function Sonic_RecordPos
00012DF8                            
00012DF8                            ; ---------------------------------------------------------------------------
00012DF8                            ; Subroutine for Sonic when he's underwater
00012DF8                            ; ---------------------------------------------------------------------------
00012DF8                            
00012DF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012DF8                            
00012DF8                            
00012DF8                            Sonic_Water:				; XREF: loc_12C7E
00012DF8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00012DFE 6700                       		beq.s	Obj01_InWater	; if yes, branch
00012E00                            
00012E00                            locret_12D80:
00012E00 4E75                       		rts	
00012E02                            ; ===========================================================================
00012E02                            
00012E02                            Obj01_InWater:
00012E02 3038 F646                  		move.w	($FFFFF646).w,d0
00012E06 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00012E0A 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00012E0C 08E8 0006 0022             		bset	#6,$22(a0)
00012E12 66EC                       		bne.s	locret_12D80
00012E14 6100 0000                  		bsr.w	ResumeMusic
00012E18 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00012E1E 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00012E24 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00012E2A 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00012E30 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00012E36 E0E8 0010                  		asr	$10(a0)
00012E3A E0E8 0012                  		asr	$12(a0)
00012E3E E0E8 0012                  		asr	$12(a0)
00012E42 67BC                       		beq.s	locret_12D80
00012E44 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00012E4A 303C 00AA                  		move.w	#$AA,d0
00012E4E 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play splash sound
00012E54                            ; ===========================================================================
00012E54                            
00012E54                            Obj01_OutWater:
00012E54 08A8 0006 0022             		bclr	#6,$22(a0)
00012E5A 67A4                       		beq.s	locret_12D80
00012E5C 6100 0000                  		bsr.w	ResumeMusic
00012E60 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00012E66 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00012E6C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00012E72 E1E8 0012                  		asl	$12(a0)
00012E76 6700 FF88                  		beq.w	locret_12D80
00012E7A 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00012E80 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00012E86 6E00                       		bgt.s	loc_12E0E
00012E88 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00012E8E                            
00012E8E                            loc_12E0E:
00012E8E 303C 00AA                  		move.w	#$AA,d0
00012E92 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play splash sound
00012E98                            ; End of function Sonic_Water
00012E98                            
00012E98                            ; ===========================================================================
00012E98                            ; ---------------------------------------------------------------------------
00012E98                            ; Modes	for controlling	Sonic
00012E98                            ; ---------------------------------------------------------------------------
00012E98                            
00012E98                            Obj01_MdNormal:				; XREF: Obj01_Modes
00012E98 6100 0000                  		bsr.w	Sonic_Jump
00012E9C 6100 0000                  		bsr.w	Sonic_SlopeResist
00012EA0 6100 0000                  		bsr.w	Sonic_Move
00012EA4 6100 0000                  		bsr.w	Sonic_Roll
00012EA8 6100 0000                  		bsr.w	Sonic_LevelBound
00012EAC 4EBA A7F2                  		jsr	SpeedToPos
00012EB0 6100 0000                  		bsr.w	Sonic_AnglePos
00012EB4 6100 0000                  		bsr.w	Sonic_SlopeRepel
00012EB8 4E75                       		rts	
00012EBA                            ; ===========================================================================
00012EBA                            
00012EBA                            Obj01_MdJump:				; XREF: Obj01_Modes
00012EBA 6100 0000                  		bsr.w	Sonic_JumpHeight
00012EBE 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00012EC2 6100 0000                  		bsr.w	Sonic_LevelBound
00012EC6 4EBA A7AC                  		jsr	ObjectFall
00012ECA 0828 0006 0022             		btst	#6,$22(a0)
00012ED0 6700                       		beq.s	loc_12E5C
00012ED2 0468 0028 0012             		subi.w	#$28,$12(a0)
00012ED8                            
00012ED8                            loc_12E5C:
00012ED8 6100 0000                  		bsr.w	Sonic_JumpAngle
00012EDC 6100 0000                  		bsr.w	Sonic_Floor
00012EE0 4E75                       		rts	
00012EE2                            ; ===========================================================================
00012EE2                            
00012EE2                            Obj01_MdRoll:				; XREF: Obj01_Modes
00012EE2 6100 0000                  		bsr.w	Sonic_Jump
00012EE6 6100 0000                  		bsr.w	Sonic_RollRepel
00012EEA 6100 0000                  		bsr.w	Sonic_RollSpeed
00012EEE 6100 0000                  		bsr.w	Sonic_LevelBound
00012EF2 4EBA A7AC                  		jsr	SpeedToPos
00012EF6 6100 0000                  		bsr.w	Sonic_AnglePos
00012EFA 6100 0000                  		bsr.w	Sonic_SlopeRepel
00012EFE 4E75                       		rts	
00012F00                            ; ===========================================================================
00012F00                            
00012F00                            Obj01_MdJump2:				; XREF: Obj01_Modes
00012F00 6100 0000                  		bsr.w	Sonic_JumpHeight
00012F04 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00012F08 6100 0000                  		bsr.w	Sonic_LevelBound
00012F0C 4EBA A766                  		jsr	ObjectFall
00012F10 0828 0006 0022             		btst	#6,$22(a0)
00012F16 6700                       		beq.s	loc_12EA6
00012F18 0468 0028 0012             		subi.w	#$28,$12(a0)
00012F1E                            
00012F1E                            loc_12EA6:
00012F1E 6100 0000                  		bsr.w	Sonic_JumpAngle
00012F22 6100 0000                  		bsr.w	Sonic_Floor
00012F26 4E75                       		rts	
00012F28                            ; ---------------------------------------------------------------------------
00012F28                            ; Subroutine to	make Sonic walk/run
00012F28                            ; ---------------------------------------------------------------------------
00012F28                            
00012F28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012F28                            
00012F28                            
00012F28                            Sonic_Move:				; XREF: Obj01_MdNormal
00012F28 3C38 F760                  		move.w	($FFFFF760).w,d6
00012F2C 3A38 F762                  		move.w	($FFFFF762).w,d5
00012F30 3838 F764                  		move.w	($FFFFF764).w,d4
00012F34 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00012F38 6600 0000                  		bne.w	loc_12FEE
00012F3C 4A68 003E                  		tst.w	$3E(a0)
00012F40 6600 0000                  		bne.w	Obj01_ResetScr
00012F44 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00012F4A 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00012F4C 6100 0000                  		bsr.w	Sonic_MoveLeft
00012F50                            
00012F50                            Obj01_NotLeft:
00012F50 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00012F56 6700                       		beq.s	Obj01_NotRight	; if not, branch
00012F58 6100 0000                  		bsr.w	Sonic_MoveRight
00012F5C                            
00012F5C                            Obj01_NotRight:
00012F5C 1028 0026                  		move.b	$26(a0),d0
00012F60 0600 0020                  		addi.b	#$20,d0
00012F64 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00012F68 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00012F6C 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00012F70 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00012F74 08A8 0005 0022             		bclr	#5,$22(a0)
00012F7A 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00012F80 0828 0003 0022             		btst	#3,$22(a0)
00012F86 6700                       		beq.s	Sonic_Balance
00012F88 7000                       		moveq	#0,d0
00012F8A 1028 003D                  		move.b	$3D(a0),d0
00012F8E ED48                       		lsl.w	#6,d0
00012F90 43F8 D000                  		lea	($FFFFD000).w,a1
00012F94 43F1 0000                  		lea	(a1,d0.w),a1
00012F98 4A29 0022                  		tst.b	$22(a1)
00012F9C 6B00                       		bmi.s	Sonic_LookUp
00012F9E 7200                       		moveq	#0,d1
00012FA0 1229 0019                  		move.b	$19(a1),d1
00012FA4 3401                       		move.w	d1,d2
00012FA6 D442                       		add.w	d2,d2
00012FA8 5942                       		subq.w	#4,d2
00012FAA D268 0008                  		add.w	8(a0),d1
00012FAE 9269 0008                  		sub.w	8(a1),d1
00012FB2 0C41 0004                  		cmpi.w	#4,d1
00012FB6 6D00                       		blt.s	loc_12F6A
00012FB8 B242                       		cmp.w	d2,d1
00012FBA 6C00                       		bge.s	loc_12F5A
00012FBC 6000                       		bra.s	Sonic_LookUp
00012FBE                            ; ===========================================================================
00012FBE                            
00012FBE                            Sonic_Balance:
00012FBE 4EB9 0000 0000             		jsr	ObjHitFloor
00012FC4 0C41 000C                  		cmpi.w	#$C,d1
00012FC8 6D00                       		blt.s	Sonic_LookUp
00012FCA 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00012FD0 6600                       		bne.s	loc_12F62
00012FD2                            
00012FD2                            loc_12F5A:
00012FD2 08A8 0000 0022             		bclr	#0,$22(a0)
00012FD8 6000                       		bra.s	loc_12F70
00012FDA                            ; ===========================================================================
00012FDA                            
00012FDA                            loc_12F62:
00012FDA 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00012FE0 6600                       		bne.s	Sonic_LookUp
00012FE2                            
00012FE2                            loc_12F6A:
00012FE2 08E8 0000 0022             		bset	#0,$22(a0)
00012FE8                            
00012FE8                            loc_12F70:
00012FE8 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00012FEE 6000                       		bra.s	Obj01_ResetScr
00012FF0                            ; ===========================================================================
00012FF0                            
00012FF0                            Sonic_LookUp:
00012FF0 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00012FF6 6700                       		beq.s	Sonic_Duck	; if not, branch
00012FF8 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00012FFE 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013004 6700                       		beq.s	loc_12FC2
00013006 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001300A 6000                       		bra.s	loc_12FC2
0001300C                            ; ===========================================================================
0001300C                            
0001300C                            Sonic_Duck:
0001300C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013012 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013014 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001301A 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013020 6700                       		beq.s	loc_12FC2
00013022 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013026 6000                       		bra.s	loc_12FC2
00013028                            ; ===========================================================================
00013028                            
00013028                            Obj01_ResetScr:
00013028 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
0001302E 6700                       		beq.s	loc_12FC2	; if yes, branch
00013030 6400                       		bcc.s	loc_12FBE
00013032 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013036                            
00013036                            loc_12FBE:
00013036 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
0001303A                            
0001303A                            loc_12FC2:
0001303A 1038 F602                  		move.b	($FFFFF602).w,d0
0001303E 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013042 6600                       		bne.s	loc_12FEE	; if yes, branch
00013044 3028 0014                  		move.w	$14(a0),d0
00013048 6700                       		beq.s	loc_12FEE
0001304A 6B00                       		bmi.s	loc_12FE2
0001304C 9045                       		sub.w	d5,d0
0001304E 6400                       		bcc.s	loc_12FDC
00013050 303C 0000                  		move.w	#0,d0
00013054                            
00013054                            loc_12FDC:
00013054 3140 0014                  		move.w	d0,$14(a0)
00013058 6000                       		bra.s	loc_12FEE
0001305A                            ; ===========================================================================
0001305A                            
0001305A                            loc_12FE2:
0001305A D045                       		add.w	d5,d0
0001305C 6400                       		bcc.s	loc_12FEA
0001305E 303C 0000                  		move.w	#0,d0
00013062                            
00013062                            loc_12FEA:
00013062 3140 0014                  		move.w	d0,$14(a0)
00013066                            
00013066                            loc_12FEE:
00013066 1028 0026                  		move.b	$26(a0),d0
0001306A 4EB9 0000 29DA             		jsr	(CalcSine).l
00013070 C3E8 0014                  		muls.w	$14(a0),d1
00013074 E081                       		asr.l	#8,d1
00013076 3141 0010                  		move.w	d1,$10(a0)
0001307A C1E8 0014                  		muls.w	$14(a0),d0
0001307E E080                       		asr.l	#8,d0
00013080 3140 0012                  		move.w	d0,$12(a0)
00013084                            
00013084                            loc_1300C:
00013084 1028 0026                  		move.b	$26(a0),d0
00013088 0600 0040                  		addi.b	#$40,d0
0001308C 6B00                       		bmi.s	locret_1307C
0001308E 123C 0040                  		move.b	#$40,d1
00013092 4A68 0014                  		tst.w	$14(a0)
00013096 6700                       		beq.s	locret_1307C
00013098 6B00                       		bmi.s	loc_13024
0001309A 4441                       		neg.w	d1
0001309C                            
0001309C                            loc_13024:
0001309C 1028 0026                  		move.b	$26(a0),d0
000130A0 D001                       		add.b	d1,d0
000130A2 3F00                       		move.w	d0,-(sp)
000130A4 6100 0000                  		bsr.w	Sonic_WalkSpeed
000130A8 301F                       		move.w	(sp)+,d0
000130AA 4A41                       		tst.w	d1
000130AC 6A00                       		bpl.s	locret_1307C
000130AE E141                       		asl.w	#8,d1
000130B0 0600 0020                  		addi.b	#$20,d0
000130B4 0200 00C0                  		andi.b	#$C0,d0
000130B8 6700                       		beq.s	loc_13078
000130BA 0C00 0040                  		cmpi.b	#$40,d0
000130BE 6700                       		beq.s	loc_13066
000130C0 0C00 0080                  		cmpi.b	#$80,d0
000130C4 6700                       		beq.s	loc_13060
000130C6 D368 0010                  		add.w	d1,$10(a0)
000130CA 08E8 0005 0022             		bset	#5,$22(a0)
000130D0 317C 0000 0014             		move.w	#0,$14(a0)
000130D6 4E75                       		rts	
000130D8                            ; ===========================================================================
000130D8                            
000130D8                            loc_13060:
000130D8 9368 0012                  		sub.w	d1,$12(a0)
000130DC 4E75                       		rts	
000130DE                            ; ===========================================================================
000130DE                            
000130DE                            loc_13066:
000130DE 9368 0010                  		sub.w	d1,$10(a0)
000130E2 08E8 0005 0022             		bset	#5,$22(a0)
000130E8 317C 0000 0014             		move.w	#0,$14(a0)
000130EE 4E75                       		rts	
000130F0                            ; ===========================================================================
000130F0                            
000130F0                            loc_13078:
000130F0 D368 0012                  		add.w	d1,$12(a0)
000130F4                            
000130F4                            locret_1307C:
000130F4 4E75                       		rts	
000130F6                            ; End of function Sonic_Move
000130F6                            
000130F6                            
000130F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000130F6                            
000130F6                            
000130F6                            Sonic_MoveLeft:				; XREF: Sonic_Move
000130F6 3028 0014                  		move.w	$14(a0),d0
000130FA 6700                       		beq.s	loc_13086
000130FC 6A00                       		bpl.s	loc_130B2
000130FE                            
000130FE                            loc_13086:
000130FE 08E8 0000 0022             		bset	#0,$22(a0)
00013104 6600                       		bne.s	loc_1309A
00013106 08A8 0005 0022             		bclr	#5,$22(a0)
0001310C 117C 0001 001D             		move.b	#1,$1D(a0)
00013112                            
00013112                            loc_1309A:
00013112 9045                       		sub.w	d5,d0
00013114 3206                       		move.w	d6,d1
00013116 4441                       		neg.w	d1
00013118 B041                       		cmp.w	d1,d0
0001311A 6E00                       		bgt.s	loc_130A6
0001311C 3001                       		move.w	d1,d0
0001311E                            
0001311E                            loc_130A6:
0001311E 3140 0014                  		move.w	d0,$14(a0)
00013122 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013128 4E75                       		rts	
0001312A                            ; ===========================================================================
0001312A                            
0001312A                            loc_130B2:				; XREF: Sonic_MoveLeft
0001312A 9044                       		sub.w	d4,d0
0001312C 6400                       		bcc.s	loc_130BA
0001312E 303C FF80                  		move.w	#-$80,d0
00013132                            
00013132                            loc_130BA:
00013132 3140 0014                  		move.w	d0,$14(a0)
00013136 1028 0026                  		move.b	$26(a0),d0
0001313A 0600 0020                  		addi.b	#$20,d0
0001313E 0200 00C0                  		andi.b	#$C0,d0
00013142 6600                       		bne.s	locret_130E8
00013144 0C40 0400                  		cmpi.w	#$400,d0
00013148 6D00                       		blt.s	locret_130E8
0001314A 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013150 08A8 0000 0022             		bclr	#0,$22(a0)
00013156 303C 00A4                  		move.w	#$A4,d0
0001315A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stopping sound
00013160                            
00013160                            locret_130E8:
00013160 4E75                       		rts	
00013162                            ; End of function Sonic_MoveLeft
00013162                            
00013162                            
00013162                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013162                            
00013162                            
00013162                            Sonic_MoveRight:			; XREF: Sonic_Move
00013162 3028 0014                  		move.w	$14(a0),d0
00013166 6B00                       		bmi.s	loc_13118
00013168 08A8 0000 0022             		bclr	#0,$22(a0)
0001316E 6700                       		beq.s	loc_13104
00013170 08A8 0005 0022             		bclr	#5,$22(a0)
00013176 117C 0001 001D             		move.b	#1,$1D(a0)
0001317C                            
0001317C                            loc_13104:
0001317C D045                       		add.w	d5,d0
0001317E B046                       		cmp.w	d6,d0
00013180 6D00                       		blt.s	loc_1310C
00013182 3006                       		move.w	d6,d0
00013184                            
00013184                            loc_1310C:
00013184 3140 0014                  		move.w	d0,$14(a0)
00013188 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001318E 4E75                       		rts	
00013190                            ; ===========================================================================
00013190                            
00013190                            loc_13118:				; XREF: Sonic_MoveRight
00013190 D044                       		add.w	d4,d0
00013192 6400                       		bcc.s	loc_13120
00013194 303C 0080                  		move.w	#$80,d0
00013198                            
00013198                            loc_13120:
00013198 3140 0014                  		move.w	d0,$14(a0)
0001319C 1028 0026                  		move.b	$26(a0),d0
000131A0 0600 0020                  		addi.b	#$20,d0
000131A4 0200 00C0                  		andi.b	#$C0,d0
000131A8 6600                       		bne.s	locret_1314E
000131AA 0C40 FC00                  		cmpi.w	#-$400,d0
000131AE 6E00                       		bgt.s	locret_1314E
000131B0 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000131B6 08E8 0000 0022             		bset	#0,$22(a0)
000131BC 303C 00A4                  		move.w	#$A4,d0
000131C0 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stopping sound
000131C6                            
000131C6                            locret_1314E:
000131C6 4E75                       		rts	
000131C8                            ; End of function Sonic_MoveRight
000131C8                            
000131C8                            ; ---------------------------------------------------------------------------
000131C8                            ; Subroutine to	change Sonic's speed as he rolls
000131C8                            ; ---------------------------------------------------------------------------
000131C8                            
000131C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000131C8                            
000131C8                            
000131C8                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000131C8 3C38 F760                  		move.w	($FFFFF760).w,d6
000131CC E346                       		asl.w	#1,d6
000131CE 3A38 F762                  		move.w	($FFFFF762).w,d5
000131D2 E245                       		asr.w	#1,d5
000131D4 3838 F764                  		move.w	($FFFFF764).w,d4
000131D8 E444                       		asr.w	#2,d4
000131DA 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000131DE 6600 0000                  		bne.w	loc_131CC
000131E2 4A68 003E                  		tst.w	$3E(a0)
000131E6 6600                       		bne.s	loc_13188
000131E8 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000131EE 6700                       		beq.s	loc_1317C	; if not, branch
000131F0 6100 0000                  		bsr.w	Sonic_RollLeft
000131F4                            
000131F4                            loc_1317C:
000131F4 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000131FA 6700                       		beq.s	loc_13188	; if not, branch
000131FC 6100 0000                  		bsr.w	Sonic_RollRight
00013200                            
00013200                            loc_13188:
00013200 3028 0014                  		move.w	$14(a0),d0
00013204 6700                       		beq.s	loc_131AA
00013206 6B00                       		bmi.s	loc_1319E
00013208 9045                       		sub.w	d5,d0
0001320A 6400                       		bcc.s	loc_13198
0001320C 303C 0000                  		move.w	#0,d0
00013210                            
00013210                            loc_13198:
00013210 3140 0014                  		move.w	d0,$14(a0)
00013214 6000                       		bra.s	loc_131AA
00013216                            ; ===========================================================================
00013216                            
00013216                            loc_1319E:				; XREF: Sonic_RollSpeed
00013216 D045                       		add.w	d5,d0
00013218 6400                       		bcc.s	loc_131A6
0001321A 303C 0000                  		move.w	#0,d0
0001321E                            
0001321E                            loc_131A6:
0001321E 3140 0014                  		move.w	d0,$14(a0)
00013222                            
00013222                            loc_131AA:
00013222 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013226 6600                       		bne.s	loc_131CC	; if yes, branch
00013228 08A8 0002 0022             		bclr	#2,$22(a0)
0001322E 117C 0013 0016             		move.b	#$13,$16(a0)
00013234 117C 0009 0017             		move.b	#9,$17(a0)
0001323A 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013240 5B68 000C                  		subq.w	#5,$C(a0)
00013244                            
00013244                            loc_131CC:
00013244 1028 0026                  		move.b	$26(a0),d0
00013248 4EB9 0000 29DA             		jsr	(CalcSine).l
0001324E C1E8 0014                  		muls.w	$14(a0),d0
00013252 E080                       		asr.l	#8,d0
00013254 3140 0012                  		move.w	d0,$12(a0)
00013258 C3E8 0014                  		muls.w	$14(a0),d1
0001325C E081                       		asr.l	#8,d1
0001325E 0C41 1000                  		cmpi.w	#$1000,d1
00013262 6F00                       		ble.s	loc_131F0
00013264 323C 1000                  		move.w	#$1000,d1
00013268                            
00013268                            loc_131F0:
00013268 0C41 F000                  		cmpi.w	#-$1000,d1
0001326C 6C00                       		bge.s	loc_131FA
0001326E 323C F000                  		move.w	#-$1000,d1
00013272                            
00013272                            loc_131FA:
00013272 3141 0010                  		move.w	d1,$10(a0)
00013276 6000 FE0C                  		bra.w	loc_1300C
0001327A                            ; End of function Sonic_RollSpeed
0001327A                            
0001327A                            
0001327A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001327A                            
0001327A                            
0001327A                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
0001327A 3028 0014                  		move.w	$14(a0),d0
0001327E 6700                       		beq.s	loc_1320A
00013280 6A00                       		bpl.s	loc_13218
00013282                            
00013282                            loc_1320A:
00013282 08E8 0000 0022             		bset	#0,$22(a0)
00013288 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
0001328E 4E75                       		rts	
00013290                            ; ===========================================================================
00013290                            
00013290                            loc_13218:
00013290 9044                       		sub.w	d4,d0
00013292 6400                       		bcc.s	loc_13220
00013294 303C FF80                  		move.w	#-$80,d0
00013298                            
00013298                            loc_13220:
00013298 3140 0014                  		move.w	d0,$14(a0)
0001329C 4E75                       		rts	
0001329E                            ; End of function Sonic_RollLeft
0001329E                            
0001329E                            
0001329E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001329E                            
0001329E                            
0001329E                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
0001329E 3028 0014                  		move.w	$14(a0),d0
000132A2 6B00                       		bmi.s	loc_1323A
000132A4 08A8 0000 0022             		bclr	#0,$22(a0)
000132AA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000132B0 4E75                       		rts	
000132B2                            ; ===========================================================================
000132B2                            
000132B2                            loc_1323A:
000132B2 D044                       		add.w	d4,d0
000132B4 6400                       		bcc.s	loc_13242
000132B6 303C 0080                  		move.w	#$80,d0
000132BA                            
000132BA                            loc_13242:
000132BA 3140 0014                  		move.w	d0,$14(a0)
000132BE 4E75                       		rts	
000132C0                            ; End of function Sonic_RollRight
000132C0                            
000132C0                            ; ---------------------------------------------------------------------------
000132C0                            ; Subroutine to	change Sonic's direction while jumping
000132C0                            ; ---------------------------------------------------------------------------
000132C0                            
000132C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000132C0                            
000132C0                            
000132C0                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
000132C0 3C38 F760                  		move.w	($FFFFF760).w,d6
000132C4 3A38 F762                  		move.w	($FFFFF762).w,d5
000132C8 E345                       		asl.w	#1,d5
000132CA 0828 0004 0022             		btst	#4,$22(a0)
000132D0 6600                       		bne.s	Obj01_ResetScr2
000132D2 3028 0010                  		move.w	$10(a0),d0
000132D6 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000132DC 6700                       		beq.s	loc_13278	; if not, branch
000132DE 08E8 0000 0022             		bset	#0,$22(a0)
000132E4 9045                       		sub.w	d5,d0
000132E6 3206                       		move.w	d6,d1
000132E8 4441                       		neg.w	d1
000132EA B041                       		cmp.w	d1,d0
000132EC 6E00                       		bgt.s	loc_13278
000132EE 3001                       		move.w	d1,d0
000132F0                            
000132F0                            loc_13278:
000132F0 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000132F6 6700                       		beq.s	Obj01_JumpMove	; if not, branch
000132F8 08A8 0000 0022             		bclr	#0,$22(a0)
000132FE D045                       		add.w	d5,d0
00013300 B046                       		cmp.w	d6,d0
00013302 6D00                       		blt.s	Obj01_JumpMove
00013304 3006                       		move.w	d6,d0
00013306                            
00013306                            Obj01_JumpMove:
00013306 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
0001330A                            
0001330A                            Obj01_ResetScr2:
0001330A 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013310 6700                       		beq.s	loc_132A4	; if yes, branch
00013312 6400                       		bcc.s	loc_132A0
00013314 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013318                            
00013318                            loc_132A0:
00013318 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001331C                            
0001331C                            loc_132A4:
0001331C 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013322 6500                       		bcs.s	locret_132D2	; if yes, branch
00013324 3028 0010                  		move.w	$10(a0),d0
00013328 3200                       		move.w	d0,d1
0001332A EA41                       		asr.w	#5,d1
0001332C 6700                       		beq.s	locret_132D2
0001332E 6B00                       		bmi.s	loc_132C6
00013330 9041                       		sub.w	d1,d0
00013332 6400                       		bcc.s	loc_132C0
00013334 303C 0000                  		move.w	#0,d0
00013338                            
00013338                            loc_132C0:
00013338 3140 0010                  		move.w	d0,$10(a0)
0001333C 4E75                       		rts	
0001333E                            ; ===========================================================================
0001333E                            
0001333E                            loc_132C6:
0001333E 9041                       		sub.w	d1,d0
00013340 6500                       		bcs.s	loc_132CE
00013342 303C 0000                  		move.w	#0,d0
00013346                            
00013346                            loc_132CE:
00013346 3140 0010                  		move.w	d0,$10(a0)
0001334A                            
0001334A                            locret_132D2:
0001334A 4E75                       		rts	
0001334C                            ; End of function Sonic_ChgJumpDir
0001334C                            
0001334C                            ; ===========================================================================
0001334C                            ; ---------------------------------------------------------------------------
0001334C                            ; Unused subroutine to squash Sonic
0001334C                            ; ---------------------------------------------------------------------------
0001334C 1028 0026                  		move.b	$26(a0),d0
00013350 0600 0020                  		addi.b	#$20,d0
00013354 0200 00C0                  		andi.b	#$C0,d0
00013358 6600                       		bne.s	locret_13302
0001335A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001335E 4A41                       		tst.w	d1
00013360 6A00                       		bpl.s	locret_13302
00013362 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013368 317C 0000 0010             		move.w	#0,$10(a0)
0001336E 317C 0000 0012             		move.w	#0,$12(a0)
00013374 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
0001337A                            
0001337A                            locret_13302:
0001337A 4E75                       		rts	
0001337C                            ; ---------------------------------------------------------------------------
0001337C                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
0001337C                            ; ---------------------------------------------------------------------------
0001337C                            
0001337C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001337C                            
0001337C                            
0001337C                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
0001337C 2228 0008                  		move.l	8(a0),d1
00013380 3028 0010                  		move.w	$10(a0),d0
00013384 48C0                       		ext.l	d0
00013386 E180                       		asl.l	#8,d0
00013388 D280                       		add.l	d0,d1
0001338A 4841                       		swap	d1
0001338C 3038 F728                  		move.w	($FFFFF728).w,d0
00013390 0640 0010                  		addi.w	#$10,d0
00013394 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013396 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013398 3038 F72A                  		move.w	($FFFFF72A).w,d0
0001339C 0640 0128                  		addi.w	#$128,d0
000133A0 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000133A4 6600                       		bne.s	loc_13332
000133A6 0640 0040                  		addi.w	#$40,d0
000133AA                            
000133AA                            loc_13332:
000133AA B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000133AC 6300                       		bls.s	Boundary_Sides	; if yes, branch
000133AE                            
000133AE                            loc_13336:
000133AE 3038 F72E                  		move.w	($FFFFF72E).w,d0
000133B2 0640 00E0                  		addi.w	#$E0,d0
000133B6 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
000133BA 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
000133BC 4E75                       		rts	
000133BE                            ; ===========================================================================
000133BE                            
000133BE                            Boundary_Bottom:
000133BE 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
000133C4 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
000133C8 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
000133CE 6500 0000                  		bcs.w	KillSonic
000133D2 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
000133D6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000133DC 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
000133E2 4E75                       		rts	
000133E4                            ; ===========================================================================
000133E4                            
000133E4                            Boundary_Sides:
000133E4 3140 0008                  		move.w	d0,8(a0)
000133E8 317C 0000 000A             		move.w	#0,$A(a0)
000133EE 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
000133F4 317C 0000 0014             		move.w	#0,$14(a0)
000133FA 60B2                       		bra.s	loc_13336
000133FC                            ; End of function Sonic_LevelBound
000133FC                            
000133FC                            ; ---------------------------------------------------------------------------
000133FC                            ; Subroutine allowing Sonic to roll when he's moving
000133FC                            ; ---------------------------------------------------------------------------
000133FC                            
000133FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000133FC                            
000133FC                            
000133FC                            Sonic_Roll:				; XREF: Obj01_MdNormal
000133FC 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013400 6600                       		bne.s	Obj01_NoRoll
00013402 3028 0014                  		move.w	$14(a0),d0
00013406 6A00                       		bpl.s	loc_13392
00013408 4440                       		neg.w	d0
0001340A                            
0001340A                            loc_13392:
0001340A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
0001340E 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013410 1038 F602                  		move.b	($FFFFF602).w,d0
00013414 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013418 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
0001341A 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013420 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013422                            
00013422                            Obj01_NoRoll:
00013422 4E75                       		rts	
00013424                            ; ===========================================================================
00013424                            
00013424                            Obj01_ChkRoll:
00013424 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
0001342A 6700                       		beq.s	Obj01_DoRoll	; if not, branch
0001342C 4E75                       		rts	
0001342E                            ; ===========================================================================
0001342E                            
0001342E                            Obj01_DoRoll:
0001342E 08E8 0002 0022             		bset	#2,$22(a0)
00013434 117C 000E 0016             		move.b	#$E,$16(a0)
0001343A 117C 0007 0017             		move.b	#7,$17(a0)
00013440 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013446 5A68 000C                  		addq.w	#5,$C(a0)
0001344A 303C 00BE                  		move.w	#$BE,d0
0001344E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rolling sound
00013454 4A68 0014                  		tst.w	$14(a0)
00013458 6600                       		bne.s	locret_133E8
0001345A 317C 0200 0014             		move.w	#$200,$14(a0)
00013460                            
00013460                            locret_133E8:
00013460 4E75                       		rts	
00013462                            ; End of function Sonic_Roll
00013462                            
00013462                            ; ---------------------------------------------------------------------------
00013462                            ; Subroutine allowing Sonic to jump
00013462                            ; ---------------------------------------------------------------------------
00013462                            
00013462                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013462                            
00013462                            
00013462                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013462 1038 F603                  		move.b	($FFFFF603).w,d0
00013466 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001346A 6700 0000                  		beq.w	locret_1348E	; if not, branch
0001346E 7000                       		moveq	#0,d0
00013470 1028 0026                  		move.b	$26(a0),d0
00013474 0600 0080                  		addi.b	#$80,d0
00013478 6100 0000                  		bsr.w	sub_14D48
0001347C 0C41 0006                  		cmpi.w	#6,d1
00013480 6D00 0000                  		blt.w	locret_1348E
00013484 343C 0680                  		move.w	#$680,d2
00013488 0828 0006 0022             		btst	#6,$22(a0)
0001348E 6700                       		beq.s	loc_1341C
00013490 343C 0380                  		move.w	#$380,d2
00013494                            
00013494                            loc_1341C:
00013494 7000                       		moveq	#0,d0
00013496 1028 0026                  		move.b	$26(a0),d0
0001349A 0400 0040                  		subi.b	#$40,d0
0001349E 4EB9 0000 29DA             		jsr	(CalcSine).l
000134A4 C3C2                       		muls.w	d2,d1
000134A6 E081                       		asr.l	#8,d1
000134A8 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
000134AC C1C2                       		muls.w	d2,d0
000134AE E080                       		asr.l	#8,d0
000134B0 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
000134B4 08E8 0001 0022             		bset	#1,$22(a0)
000134BA 08A8 0005 0022             		bclr	#5,$22(a0)
000134C0 588F                       		addq.l	#4,sp
000134C2 117C 0001 003C             		move.b	#1,$3C(a0)
000134C8 4228 0038                  		clr.b	$38(a0)
000134CC 303C 00A0                  		move.w	#$A0,d0
000134D0 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play jumping sound
000134D6 117C 0013 0016             		move.b	#$13,$16(a0)
000134DC 117C 0009 0017             		move.b	#9,$17(a0)
000134E2 0828 0002 0022             		btst	#2,$22(a0)
000134E8 6600                       		bne.s	loc_13490
000134EA 117C 000E 0016             		move.b	#$E,$16(a0)
000134F0 117C 0007 0017             		move.b	#7,$17(a0)
000134F6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
000134FC 08E8 0002 0022             		bset	#2,$22(a0)
00013502 5A68 000C                  		addq.w	#5,$C(a0)
00013506                            
00013506                            locret_1348E:
00013506 4E75                       		rts	
00013508                            ; ===========================================================================
00013508                            
00013508                            loc_13490:
00013508 08E8 0004 0022             		bset	#4,$22(a0)
0001350E 4E75                       		rts	
00013510                            ; End of function Sonic_Jump
00013510                            
00013510                            
00013510                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013510                            
00013510                            
00013510                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013510 4A28 003C                  		tst.b	$3C(a0)
00013514 6700                       		beq.s	loc_134C4
00013516 323C FC00                  		move.w	#-$400,d1
0001351A 0828 0006 0022             		btst	#6,$22(a0)
00013520 6700                       		beq.s	loc_134AE
00013522 323C FE00                  		move.w	#-$200,d1
00013526                            
00013526                            loc_134AE:
00013526 B268 0012                  		cmp.w	$12(a0),d1
0001352A 6F00                       		ble.s	locret_134C2
0001352C 1038 F602                  		move.b	($FFFFF602).w,d0
00013530 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013534 6600                       		bne.s	locret_134C2	; if yes, branch
00013536 3141 0012                  		move.w	d1,$12(a0)
0001353A                            
0001353A                            locret_134C2:
0001353A 4E75                       		rts	
0001353C                            ; ===========================================================================
0001353C                            
0001353C                            loc_134C4:
0001353C 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013542 6C00                       		bge.s	locret_134D2
00013544 317C F040 0012             		move.w	#-$FC0,$12(a0)
0001354A                            
0001354A                            locret_134D2:
0001354A 4E75                       		rts	
0001354C                            ; End of function Sonic_JumpHeight
0001354C                            
0001354C                            ; ---------------------------------------------------------------------------
0001354C                            ; Subroutine to	slow Sonic walking up a	slope
0001354C                            ; ---------------------------------------------------------------------------
0001354C                            
0001354C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001354C                            
0001354C                            
0001354C                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
0001354C 1028 0026                  		move.b	$26(a0),d0
00013550 0600 0060                  		addi.b	#$60,d0
00013554 0C00 00C0                  		cmpi.b	#$C0,d0
00013558 6400                       		bcc.s	locret_13508
0001355A 1028 0026                  		move.b	$26(a0),d0
0001355E 4EB9 0000 29DA             		jsr	(CalcSine).l
00013564 C1FC 0020                  		muls.w	#$20,d0
00013568 E080                       		asr.l	#8,d0
0001356A 4A68 0014                  		tst.w	$14(a0)
0001356E 6700                       		beq.s	locret_13508
00013570 6B00                       		bmi.s	loc_13504
00013572 4A40                       		tst.w	d0
00013574 6700                       		beq.s	locret_13502
00013576 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
0001357A                            
0001357A                            locret_13502:
0001357A 4E75                       		rts	
0001357C                            ; ===========================================================================
0001357C                            
0001357C                            loc_13504:
0001357C D168 0014                  		add.w	d0,$14(a0)
00013580                            
00013580                            locret_13508:
00013580 4E75                       		rts	
00013582                            ; End of function Sonic_SlopeResist
00013582                            
00013582                            ; ---------------------------------------------------------------------------
00013582                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013582                            ; ---------------------------------------------------------------------------
00013582                            
00013582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013582                            
00013582                            
00013582                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013582 1028 0026                  		move.b	$26(a0),d0
00013586 0600 0060                  		addi.b	#$60,d0
0001358A 0C00 00C0                  		cmpi.b	#-$40,d0
0001358E 6400                       		bcc.s	locret_13544
00013590 1028 0026                  		move.b	$26(a0),d0
00013594 4EB9 0000 29DA             		jsr	(CalcSine).l
0001359A C1FC 0050                  		muls.w	#$50,d0
0001359E E080                       		asr.l	#8,d0
000135A0 4A68 0014                  		tst.w	$14(a0)
000135A4 6B00                       		bmi.s	loc_1353A
000135A6 4A40                       		tst.w	d0
000135A8 6A00                       		bpl.s	loc_13534
000135AA E480                       		asr.l	#2,d0
000135AC                            
000135AC                            loc_13534:
000135AC D168 0014                  		add.w	d0,$14(a0)
000135B0 4E75                       		rts	
000135B2                            ; ===========================================================================
000135B2                            
000135B2                            loc_1353A:
000135B2 4A40                       		tst.w	d0
000135B4 6B00                       		bmi.s	loc_13540
000135B6 E480                       		asr.l	#2,d0
000135B8                            
000135B8                            loc_13540:
000135B8 D168 0014                  		add.w	d0,$14(a0)
000135BC                            
000135BC                            locret_13544:
000135BC 4E75                       		rts	
000135BE                            ; End of function Sonic_RollRepel
000135BE                            
000135BE                            ; ---------------------------------------------------------------------------
000135BE                            ; Subroutine to	push Sonic down	a slope
000135BE                            ; ---------------------------------------------------------------------------
000135BE                            
000135BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135BE                            
000135BE                            
000135BE                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
000135BE 4E71                       		nop	
000135C0 4A28 0038                  		tst.b	$38(a0)
000135C4 6600                       		bne.s	locret_13580
000135C6 4A68 003E                  		tst.w	$3E(a0)
000135CA 6600                       		bne.s	loc_13582
000135CC 1028 0026                  		move.b	$26(a0),d0
000135D0 0600 0020                  		addi.b	#$20,d0
000135D4 0200 00C0                  		andi.b	#$C0,d0
000135D8 6700                       		beq.s	locret_13580
000135DA 3028 0014                  		move.w	$14(a0),d0
000135DE 6A00                       		bpl.s	loc_1356A
000135E0 4440                       		neg.w	d0
000135E2                            
000135E2                            loc_1356A:
000135E2 0C40 0280                  		cmpi.w	#$280,d0
000135E6 6400                       		bcc.s	locret_13580
000135E8 4268 0014                  		clr.w	$14(a0)
000135EC 08E8 0001 0022             		bset	#1,$22(a0)
000135F2 317C 001E 003E             		move.w	#$1E,$3E(a0)
000135F8                            
000135F8                            locret_13580:
000135F8 4E75                       		rts	
000135FA                            ; ===========================================================================
000135FA                            
000135FA                            loc_13582:
000135FA 5368 003E                  		subq.w	#1,$3E(a0)
000135FE 4E75                       		rts	
00013600                            ; End of function Sonic_SlopeRepel
00013600                            
00013600                            ; ---------------------------------------------------------------------------
00013600                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013600                            ; ---------------------------------------------------------------------------
00013600                            
00013600                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013600                            
00013600                            
00013600                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013600 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013604 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013606 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013608                            
00013608 5400                       		addq.b	#2,d0		; increase angle
0001360A 6400                       		bcc.s	loc_13596
0001360C 7000                       		moveq	#0,d0
0001360E                            
0001360E                            loc_13596:
0001360E 6000                       		bra.s	loc_1359E
00013610                            ; ===========================================================================
00013610                            
00013610                            loc_13598:
00013610 5500                       		subq.b	#2,d0		; decrease angle
00013612 6400                       		bcc.s	loc_1359E
00013614 7000                       		moveq	#0,d0
00013616                            
00013616                            loc_1359E:
00013616 1140 0026                  		move.b	d0,$26(a0)
0001361A                            
0001361A                            locret_135A2:
0001361A 4E75                       		rts	
0001361C                            ; End of function Sonic_JumpAngle
0001361C                            
0001361C                            ; ---------------------------------------------------------------------------
0001361C                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
0001361C                            ; ---------------------------------------------------------------------------
0001361C                            
0001361C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001361C                            
0001361C                            
0001361C                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
0001361C 3228 0010                  		move.w	$10(a0),d1
00013620 3428 0012                  		move.w	$12(a0),d2
00013624 4EB9 0000 2CA8             		jsr	(CalcAngle).l
0001362A 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
0001362E 0400 0020                  		subi.b	#$20,d0
00013632 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013636 0200 00C0                  		andi.b	#$C0,d0
0001363A 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
0001363E 0C00 0040                  		cmpi.b	#$40,d0
00013642 6700 0000                  		beq.w	loc_13680
00013646 0C00 0080                  		cmpi.b	#$80,d0
0001364A 6700 0000                  		beq.w	loc_136E2
0001364E 0C00 00C0                  		cmpi.b	#-$40,d0
00013652 6700 0000                  		beq.w	loc_1373E
00013656 6100 0000                  		bsr.w	Sonic_HitWall
0001365A 4A41                       		tst.w	d1
0001365C 6A00                       		bpl.s	loc_135F0
0001365E 9368 0008                  		sub.w	d1,8(a0)
00013662 317C 0000 0010             		move.w	#0,$10(a0)
00013668                            
00013668                            loc_135F0:
00013668 6100 0000                  		bsr.w	sub_14EB4
0001366C 4A41                       		tst.w	d1
0001366E 6A00                       		bpl.s	loc_13602
00013670 D368 0008                  		add.w	d1,8(a0)
00013674 317C 0000 0010             		move.w	#0,$10(a0)
0001367A                            
0001367A                            loc_13602:
0001367A 6100 0000                  		bsr.w	Sonic_HitFloor
0001367E 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013682 4A41                       		tst.w	d1
00013684 6A00                       		bpl.s	locret_1367E
00013686 1428 0012                  		move.b	$12(a0),d2
0001368A 5002                       		addq.b	#8,d2
0001368C 4402                       		neg.b	d2
0001368E B202                       		cmp.b	d2,d1
00013690 6C00                       		bge.s	loc_1361E
00013692 B002                       		cmp.b	d2,d0
00013694 6D00                       		blt.s	locret_1367E
00013696                            
00013696                            loc_1361E:
00013696 D368 000C                  		add.w	d1,$C(a0)
0001369A 1143 0026                  		move.b	d3,$26(a0)
0001369E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000136A2 117C 0000 001C             		move.b	#0,$1C(a0)
000136A8 1003                       		move.b	d3,d0
000136AA 0600 0020                  		addi.b	#$20,d0
000136AE 0200 0040                  		andi.b	#$40,d0
000136B2 6600                       		bne.s	loc_1365C
000136B4 1003                       		move.b	d3,d0
000136B6 0600 0010                  		addi.b	#$10,d0
000136BA 0200 0020                  		andi.b	#$20,d0
000136BE 6700                       		beq.s	loc_1364E
000136C0 E0E8 0012                  		asr	$12(a0)
000136C4 6000                       		bra.s	loc_13670
000136C6                            ; ===========================================================================
000136C6                            
000136C6                            loc_1364E:
000136C6 317C 0000 0012             		move.w	#0,$12(a0)
000136CC 3168 0010 0014             		move.w	$10(a0),$14(a0)
000136D2 4E75                       		rts	
000136D4                            ; ===========================================================================
000136D4                            
000136D4                            loc_1365C:
000136D4 317C 0000 0010             		move.w	#0,$10(a0)
000136DA 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
000136E0 6F00                       		ble.s	loc_13670
000136E2 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
000136E8                            
000136E8                            loc_13670:
000136E8 3168 0012 0014             		move.w	$12(a0),$14(a0)
000136EE 4A03                       		tst.b	d3
000136F0 6A00                       		bpl.s	locret_1367E
000136F2 4468 0014                  		neg.w	$14(a0)
000136F6                            
000136F6                            locret_1367E:
000136F6 4E75                       		rts	
000136F8                            ; ===========================================================================
000136F8                            
000136F8                            loc_13680:
000136F8 6100 0000                  		bsr.w	Sonic_HitWall
000136FC 4A41                       		tst.w	d1
000136FE 6A00                       		bpl.s	loc_1369A
00013700 9368 0008                  		sub.w	d1,8(a0)
00013704 317C 0000 0010             		move.w	#0,$10(a0)
0001370A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013710 4E75                       		rts	
00013712                            ; ===========================================================================
00013712                            
00013712                            loc_1369A:
00013712 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013716 4A41                       		tst.w	d1
00013718 6A00                       		bpl.s	loc_136B4
0001371A 9368 000C                  		sub.w	d1,$C(a0)
0001371E 4A68 0012                  		tst.w	$12(a0)
00013722 6A00                       		bpl.s	locret_136B2
00013724 317C 0000 0012             		move.w	#0,$12(a0)
0001372A                            
0001372A                            locret_136B2:
0001372A 4E75                       		rts	
0001372C                            ; ===========================================================================
0001372C                            
0001372C                            loc_136B4:
0001372C 4A68 0012                  		tst.w	$12(a0)
00013730 6B00                       		bmi.s	locret_136E0
00013732 6100 0000                  		bsr.w	Sonic_HitFloor
00013736 4A41                       		tst.w	d1
00013738 6A00                       		bpl.s	locret_136E0
0001373A D368 000C                  		add.w	d1,$C(a0)
0001373E 1143 0026                  		move.b	d3,$26(a0)
00013742 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013746 117C 0000 001C             		move.b	#0,$1C(a0)
0001374C 317C 0000 0012             		move.w	#0,$12(a0)
00013752 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013758                            
00013758                            locret_136E0:
00013758 4E75                       		rts	
0001375A                            ; ===========================================================================
0001375A                            
0001375A                            loc_136E2:
0001375A 6100 0000                  		bsr.w	Sonic_HitWall
0001375E 4A41                       		tst.w	d1
00013760 6A00                       		bpl.s	loc_136F4
00013762 9368 0008                  		sub.w	d1,8(a0)
00013766 317C 0000 0010             		move.w	#0,$10(a0)
0001376C                            
0001376C                            loc_136F4:
0001376C 6100 0000                  		bsr.w	sub_14EB4
00013770 4A41                       		tst.w	d1
00013772 6A00                       		bpl.s	loc_13706
00013774 D368 0008                  		add.w	d1,8(a0)
00013778 317C 0000 0010             		move.w	#0,$10(a0)
0001377E                            
0001377E                            loc_13706:
0001377E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013782 4A41                       		tst.w	d1
00013784 6A00                       		bpl.s	locret_1373C
00013786 9368 000C                  		sub.w	d1,$C(a0)
0001378A 1003                       		move.b	d3,d0
0001378C 0600 0020                  		addi.b	#$20,d0
00013790 0200 0040                  		andi.b	#$40,d0
00013794 6600                       		bne.s	loc_13726
00013796 317C 0000 0012             		move.w	#0,$12(a0)
0001379C 4E75                       		rts	
0001379E                            ; ===========================================================================
0001379E                            
0001379E                            loc_13726:
0001379E 1143 0026                  		move.b	d3,$26(a0)
000137A2 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000137A6 3168 0012 0014             		move.w	$12(a0),$14(a0)
000137AC 4A03                       		tst.b	d3
000137AE 6A00                       		bpl.s	locret_1373C
000137B0 4468 0014                  		neg.w	$14(a0)
000137B4                            
000137B4                            locret_1373C:
000137B4 4E75                       		rts	
000137B6                            ; ===========================================================================
000137B6                            
000137B6                            loc_1373E:
000137B6 6100 0000                  		bsr.w	sub_14EB4
000137BA 4A41                       		tst.w	d1
000137BC 6A00                       		bpl.s	loc_13758
000137BE D368 0008                  		add.w	d1,8(a0)
000137C2 317C 0000 0010             		move.w	#0,$10(a0)
000137C8 3168 0012 0014             		move.w	$12(a0),$14(a0)
000137CE 4E75                       		rts	
000137D0                            ; ===========================================================================
000137D0                            
000137D0                            loc_13758:
000137D0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000137D4 4A41                       		tst.w	d1
000137D6 6A00                       		bpl.s	loc_13772
000137D8 9368 000C                  		sub.w	d1,$C(a0)
000137DC 4A68 0012                  		tst.w	$12(a0)
000137E0 6A00                       		bpl.s	locret_13770
000137E2 317C 0000 0012             		move.w	#0,$12(a0)
000137E8                            
000137E8                            locret_13770:
000137E8 4E75                       		rts	
000137EA                            ; ===========================================================================
000137EA                            
000137EA                            loc_13772:
000137EA 4A68 0012                  		tst.w	$12(a0)
000137EE 6B00                       		bmi.s	locret_1379E
000137F0 6100 0000                  		bsr.w	Sonic_HitFloor
000137F4 4A41                       		tst.w	d1
000137F6 6A00                       		bpl.s	locret_1379E
000137F8 D368 000C                  		add.w	d1,$C(a0)
000137FC 1143 0026                  		move.b	d3,$26(a0)
00013800 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013804 117C 0000 001C             		move.b	#0,$1C(a0)
0001380A 317C 0000 0012             		move.w	#0,$12(a0)
00013810 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013816                            
00013816                            locret_1379E:
00013816 4E75                       		rts	
00013818                            ; End of function Sonic_Floor
00013818                            
00013818                            ; ---------------------------------------------------------------------------
00013818                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013818                            ; ---------------------------------------------------------------------------
00013818                            
00013818                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013818                            
00013818                            
00013818                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013818 0828 0004 0022             		btst	#4,$22(a0)
0001381E 6700                       		beq.s	loc_137AE
00013820 4E71                       		nop	
00013822 4E71                       		nop	
00013824 4E71                       		nop	
00013826                            
00013826                            loc_137AE:
00013826 08A8 0005 0022             		bclr	#5,$22(a0)
0001382C 08A8 0001 0022             		bclr	#1,$22(a0)
00013832 08A8 0004 0022             		bclr	#4,$22(a0)
00013838 0828 0002 0022             		btst	#2,$22(a0)
0001383E 6700                       		beq.s	loc_137E4
00013840 08A8 0002 0022             		bclr	#2,$22(a0)
00013846 117C 0013 0016             		move.b	#$13,$16(a0)
0001384C 117C 0009 0017             		move.b	#9,$17(a0)
00013852 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013858 5B68 000C                  		subq.w	#5,$C(a0)
0001385C                            
0001385C                            loc_137E4:
0001385C 117C 0000 003C             		move.b	#0,$3C(a0)
00013862 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00013868 4E75                       		rts	
0001386A                            ; End of function Sonic_ResetOnFloor
0001386A                            
0001386A                            ; ===========================================================================
0001386A                            ; ---------------------------------------------------------------------------
0001386A                            ; Sonic	when he	gets hurt
0001386A                            ; ---------------------------------------------------------------------------
0001386A                            
0001386A                            Obj01_Hurt:				; XREF: Obj01_Index
0001386A 4EBA 9E34                  		jsr	SpeedToPos
0001386E 0668 0030 0012             		addi.w	#$30,$12(a0)
00013874 0828 0006 0022             		btst	#6,$22(a0)
0001387A 6700                       		beq.s	loc_1380C
0001387C 0468 0020 0012             		subi.w	#$20,$12(a0)
00013882                            
00013882                            loc_1380C:
00013882 6100 0000                  		bsr.w	Sonic_HurtStop
00013886 6100 FAF4                  		bsr.w	Sonic_LevelBound
0001388A 6100 F552                  		bsr.w	Sonic_RecordPos
0001388E 6100 0000                  		bsr.w	Sonic_Animate
00013892 6100 0000                  		bsr.w	LoadSonicDynPLC
00013896 4EFA 9E2E                  		jmp	DisplaySprite
0001389A                            
0001389A                            ; ---------------------------------------------------------------------------
0001389A                            ; Subroutine to	stop Sonic falling after he's been hurt
0001389A                            ; ---------------------------------------------------------------------------
0001389A                            
0001389A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001389A                            
0001389A                            
0001389A                            Sonic_HurtStop:				; XREF: Obj01_Hurt
0001389A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001389E 0640 00E0                  		addi.w	#$E0,d0
000138A2 B068 000C                  		cmp.w	$C(a0),d0
000138A6 6500 0000                  		bcs.w	KillSonic
000138AA 6100 FD70                  		bsr.w	Sonic_Floor
000138AE 0828 0001 0022             		btst	#1,$22(a0)
000138B4 6600                       		bne.s	locret_13860
000138B6 7000                       		moveq	#0,d0
000138B8 3140 0012                  		move.w	d0,$12(a0)
000138BC 3140 0010                  		move.w	d0,$10(a0)
000138C0 3140 0014                  		move.w	d0,$14(a0)
000138C4 117C 0000 001C             		move.b	#0,$1C(a0)
000138CA 5528 0024                  		subq.b	#2,$24(a0)
000138CE 317C 0078 0030             		move.w	#$78,$30(a0)
000138D4                            
000138D4                            locret_13860:
000138D4 4E75                       		rts	
000138D6                            ; End of function Sonic_HurtStop
000138D6                            
000138D6                            ; ===========================================================================
000138D6                            ; ---------------------------------------------------------------------------
000138D6                            ; Sonic	when he	dies
000138D6                            ; ---------------------------------------------------------------------------
000138D6                            
000138D6                            Obj01_Death:				; XREF: Obj01_Index
000138D6 6100 0000                  		bsr.w	GameOver
000138DA 4EBA 9D98                  		jsr	ObjectFall
000138DE 6100 F4FE                  		bsr.w	Sonic_RecordPos
000138E2 6100 0000                  		bsr.w	Sonic_Animate
000138E6 6100 0000                  		bsr.w	LoadSonicDynPLC
000138EA 4EFA 9DDA                  		jmp	DisplaySprite
000138EE                            
000138EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138EE                            
000138EE                            
000138EE                            GameOver:				; XREF: Obj01_Death
000138EE 3038 F72E                  		move.w	($FFFFF72E).w,d0
000138F2 0640 0100                  		addi.w	#$100,d0
000138F6 B068 000C                  		cmp.w	$C(a0),d0
000138FA 6400 0000                  		bcc.w	locret_13900
000138FE 317C FFC8 0012             		move.w	#-$38,$12(a0)
00013904 5428 0024                  		addq.b	#2,$24(a0)
00013908 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001390C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00013910 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00013914 6600                       		bne.s	loc_138D4
00013916 317C 0000 003A             		move.w	#0,$3A(a0)
0001391C 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00013922 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013928 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
0001392E 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013932                            
00013932                            loc_138C2:
00013932 303C 008F                  		move.w	#$8F,d0
00013936 4EB9 0000 1396             		jsr	(PlaySound).l	; play game over music
0001393C 7003                       		moveq	#3,d0
0001393E 4EF9 0000 1580             		jmp	(LoadPLC).l	; load game over patterns
00013944                            ; ===========================================================================
00013944                            
00013944                            loc_138D4:
00013944 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0001394A 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
0001394E 6700                       		beq.s	locret_13900	; if not, branch
00013950 317C 0000 003A             		move.w	#0,$3A(a0)
00013956 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
0001395C 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013962 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00013968 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0001396E 60C2                       		bra.s	loc_138C2
00013970                            ; ===========================================================================
00013970                            
00013970                            locret_13900:
00013970 4E75                       		rts	
00013972                            ; End of function GameOver
00013972                            
00013972                            ; ===========================================================================
00013972                            ; ---------------------------------------------------------------------------
00013972                            ; Sonic	when the level is restarted
00013972                            ; ---------------------------------------------------------------------------
00013972                            
00013972                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013972 4A68 003A                  		tst.w	$3A(a0)
00013976 6700                       		beq.s	locret_13914
00013978 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0001397C 6600                       		bne.s	locret_13914
0001397E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013984                            
00013984                            locret_13914:
00013984 4E75                       		rts	
00013986                            
00013986                            ; ---------------------------------------------------------------------------
00013986                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00013986                            ; ---------------------------------------------------------------------------
00013986                            
00013986                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013986                            
00013986                            
00013986                            Sonic_Loops:				; XREF: Obj01_Control
00013986 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
0001398C 6700                       		beq.s	loc_13926	; if yes, branch
0001398E 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013992 6600 0000                  		bne.w	locret_139C2	; if not, branch
00013996                            
00013996                            loc_13926:
00013996 3028 000C                  		move.w	$C(a0),d0
0001399A E248                       		lsr.w	#1,d0
0001399C 0240 0380                  		andi.w	#$380,d0
000139A0 1228 0008                  		move.b	8(a0),d1
000139A4 0241 007F                  		andi.w	#$7F,d1
000139A8 D041                       		add.w	d1,d0
000139AA 43F8 A400                  		lea	($FFFFA400).w,a1
000139AE 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
000139B2 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
000139B6 6700 FA6C                  		beq.w	Obj01_ChkRoll
000139BA B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
000139BE 6700 FA64                  		beq.w	Obj01_ChkRoll
000139C2 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
000139C6 6700                       		beq.s	loc_13976
000139C8 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
000139CC 6700                       		beq.s	loc_13966
000139CE 08A8 0006 0001             		bclr	#6,1(a0)
000139D4 4E75                       		rts	
000139D6                            ; ===========================================================================
000139D6                            
000139D6                            loc_13966:
000139D6 0828 0001 0022             		btst	#1,$22(a0)
000139DC 6700                       		beq.s	loc_13976
000139DE 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000139E4 4E75                       		rts	
000139E6                            ; ===========================================================================
000139E6                            
000139E6                            loc_13976:
000139E6 3428 0008                  		move.w	8(a0),d2
000139EA 0C02 002C                  		cmpi.b	#$2C,d2
000139EE 6400                       		bcc.s	loc_13988
000139F0 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000139F6 4E75                       		rts	
000139F8                            ; ===========================================================================
000139F8                            
000139F8                            loc_13988:
000139F8 0C02 00E0                  		cmpi.b	#-$20,d2
000139FC 6500                       		bcs.s	loc_13996
000139FE 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013A04 4E75                       		rts	
00013A06                            ; ===========================================================================
00013A06                            
00013A06                            loc_13996:
00013A06 0828 0006 0001             		btst	#6,1(a0)
00013A0C 6600                       		bne.s	loc_139B2
00013A0E 1228 0026                  		move.b	$26(a0),d1
00013A12 6700                       		beq.s	locret_139C2
00013A14 0C01 0080                  		cmpi.b	#-$80,d1
00013A18 6200                       		bhi.s	locret_139C2
00013A1A 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013A20 4E75                       		rts	
00013A22                            ; ===========================================================================
00013A22                            
00013A22                            loc_139B2:
00013A22 1228 0026                  		move.b	$26(a0),d1
00013A26 0C01 0080                  		cmpi.b	#-$80,d1
00013A2A 6300                       		bls.s	locret_139C2
00013A2C 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013A32                            
00013A32                            locret_139C2:
00013A32 4E75                       		rts	
00013A34                            ; End of function Sonic_Loops
00013A34                            
00013A34                            ; ---------------------------------------------------------------------------
00013A34                            ; Subroutine to	animate	Sonic's sprites
00013A34                            ; ---------------------------------------------------------------------------
00013A34                            
00013A34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A34                            
00013A34                            
00013A34                            Sonic_Animate:				; XREF: Obj01_Control; et al
00013A34 43F9 0000 0000             		lea	(SonicAniData).l,a1
00013A3A 7000                       		moveq	#0,d0
00013A3C 1028 001C                  		move.b	$1C(a0),d0
00013A40 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00013A44 6700                       		beq.s	SAnim_Do	; if not, branch
00013A46 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00013A4A 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00013A50 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00013A56                            
00013A56                            SAnim_Do:
00013A56 D040                       		add.w	d0,d0
00013A58 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00013A5C 1011                       		move.b	(a1),d0
00013A5E 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00013A60 1228 0022                  		move.b	$22(a0),d1
00013A64 0201 0001                  		andi.b	#1,d1
00013A68 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013A6E 8328 0001                  		or.b	d1,1(a0)
00013A72 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013A76 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00013A78 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00013A7C                            
00013A7C                            SAnim_Do2:
00013A7C 7200                       		moveq	#0,d1
00013A7E 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00013A82 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00013A86 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00013A88                            
00013A88                            SAnim_Next:
00013A88 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00013A8C 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00013A90                            
00013A90                            SAnim_Delay:
00013A90 4E75                       		rts	
00013A92                            ; ===========================================================================
00013A92                            
00013A92                            SAnim_End_FF:
00013A92 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00013A94 6600                       		bne.s	SAnim_End_FE	; if not, branch
00013A96 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00013A9C 1029 0001                  		move.b	1(a1),d0	; read sprite number
00013AA0 60E6                       		bra.s	SAnim_Next
00013AA2                            ; ===========================================================================
00013AA2                            
00013AA2                            SAnim_End_FE:
00013AA2 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00013AA4 6600                       		bne.s	SAnim_End_FD	; if not, branch
00013AA6 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00013AAA 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00013AAE 9200                       		sub.b	d0,d1
00013AB0 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00013AB4 60D2                       		bra.s	SAnim_Next
00013AB6                            ; ===========================================================================
00013AB6                            
00013AB6                            SAnim_End_FD:
00013AB6 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00013AB8 6600                       		bne.s	SAnim_End	; if not, branch
00013ABA 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00013AC0                            
00013AC0                            SAnim_End:
00013AC0 4E75                       		rts	
00013AC2                            ; ===========================================================================
00013AC2                            
00013AC2                            SAnim_WalkRun:				; XREF: SAnim_Do
00013AC2 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013AC6 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00013AC8 5200                       		addq.b	#1,d0		; is animation walking/running?
00013ACA 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00013ACE 7200                       		moveq	#0,d1
00013AD0 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013AD4 1428 0022                  		move.b	$22(a0),d2
00013AD8 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00013ADC 6600                       		bne.s	loc_13A70	; if yes, branch
00013ADE 4600                       		not.b	d0		; reverse angle
00013AE0                            
00013AE0                            loc_13A70:
00013AE0 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00013AE4 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00013AE6 7203                       		moveq	#3,d1
00013AE8                            
00013AE8                            loc_13A78:
00013AE8 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013AEE B302                       		eor.b	d1,d2
00013AF0 8528 0001                  		or.b	d2,1(a0)
00013AF4 0828 0005 0022             		btst	#5,$22(a0)
00013AFA 6600 0000                  		bne.w	SAnim_Push
00013AFE E808                       		lsr.b	#4,d0		; divide angle by $10
00013B00 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00013B04 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013B08 6A00                       		bpl.s	loc_13A9C
00013B0A 4442                       		neg.w	d2
00013B0C                            
00013B0C                            loc_13A9C:
00013B0C 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00013B12 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00013B16 6400                       		bcc.s	loc_13AB4	; if yes, branch
00013B18 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00013B1E 1200                       		move.b	d0,d1
00013B20 E209                       		lsr.b	#1,d1
00013B22 D001                       		add.b	d1,d0
00013B24                            
00013B24                            loc_13AB4:
00013B24 D000                       		add.b	d0,d0
00013B26 1600                       		move.b	d0,d3
00013B28 4442                       		neg.w	d2
00013B2A 0642 0800                  		addi.w	#$800,d2
00013B2E 6A00                       		bpl.s	loc_13AC2
00013B30 7400                       		moveq	#0,d2
00013B32                            
00013B32                            loc_13AC2:
00013B32 E04A                       		lsr.w	#8,d2
00013B34 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013B38 6100 FF42                  		bsr.w	SAnim_Do2
00013B3C D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00013B40 4E75                       		rts	
00013B42                            ; ===========================================================================
00013B42                            
00013B42                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00013B42 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00013B44 6600                       		bne.s	SAnim_Push	; if not, branch
00013B46 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013B4A 6A00                       		bpl.s	loc_13ADE
00013B4C 4442                       		neg.w	d2
00013B4E                            
00013B4E                            loc_13ADE:
00013B4E 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00013B54 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00013B58 6400                       		bcc.s	loc_13AF0	; if yes, branch
00013B5A 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00013B60                            
00013B60                            loc_13AF0:
00013B60 4442                       		neg.w	d2
00013B62 0642 0400                  		addi.w	#$400,d2
00013B66 6A00                       		bpl.s	loc_13AFA
00013B68 7400                       		moveq	#0,d2
00013B6A                            
00013B6A                            loc_13AFA:
00013B6A E04A                       		lsr.w	#8,d2
00013B6C 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013B70 1228 0022                  		move.b	$22(a0),d1
00013B74 0201 0001                  		andi.b	#1,d1
00013B78 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013B7E 8328 0001                  		or.b	d1,1(a0)
00013B82 6000 FEF8                  		bra.w	SAnim_Do2
00013B86                            ; ===========================================================================
00013B86                            
00013B86                            SAnim_Push:				; XREF: SAnim_RollJump
00013B86 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013B8A 6B00                       		bmi.s	loc_13B1E
00013B8C 4442                       		neg.w	d2
00013B8E                            
00013B8E                            loc_13B1E:
00013B8E 0642 0800                  		addi.w	#$800,d2
00013B92 6A00                       		bpl.s	loc_13B26
00013B94 7400                       		moveq	#0,d2
00013B96                            
00013B96                            loc_13B26:
00013B96 EC4A                       		lsr.w	#6,d2
00013B98 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013B9C 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00013BA2 1228 0022                  		move.b	$22(a0),d1
00013BA6 0201 0001                  		andi.b	#1,d1
00013BAA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013BB0 8328 0001                  		or.b	d1,1(a0)
00013BB4 6000 FEC6                  		bra.w	SAnim_Do2
00013BB8                            ; End of function Sonic_Animate
00013BB8                            
00013BB8                            ; ===========================================================================
00013BB8                            SonicAniData:
00013BB8                            	include "_anim\Sonic.asm"
00013BB8                            ; ---------------------------------------------------------------------------
00013BB8                            ; Animation script - Sonic
00013BB8                            ; ---------------------------------------------------------------------------
00013BB8 0000                       		dc.w SonAni_Walk-SonicAniData
00013BBA 0000                       		dc.w SonAni_Run-SonicAniData
00013BBC 0000                       		dc.w SonAni_Roll-SonicAniData
00013BBE 0000                       		dc.w SonAni_Roll2-SonicAniData
00013BC0 0000                       		dc.w SonAni_Push-SonicAniData
00013BC2 0000                       		dc.w SonAni_Wait-SonicAniData
00013BC4 0000                       		dc.w SonAni_Balance-SonicAniData
00013BC6 0000                       		dc.w SonAni_LookUp-SonicAniData
00013BC8 0000                       		dc.w SonAni_Duck-SonicAniData
00013BCA 0000                       		dc.w SonAni_Warp1-SonicAniData
00013BCC 0000                       		dc.w SonAni_Warp2-SonicAniData
00013BCE 0000                       		dc.w SonAni_Warp3-SonicAniData
00013BD0 0000                       		dc.w SonAni_Warp4-SonicAniData
00013BD2 0000                       		dc.w SonAni_Stop-SonicAniData
00013BD4 0000                       		dc.w SonAni_Float1-SonicAniData
00013BD6 0000                       		dc.w SonAni_Float2-SonicAniData
00013BD8 0000                       		dc.w SonAni_Spring-SonicAniData
00013BDA 0000                       		dc.w SonAni_LZHang-SonicAniData
00013BDC 0000                       		dc.w SonAni_Leap1-SonicAniData
00013BDE 0000                       		dc.w SonAni_Leap2-SonicAniData
00013BE0 0000                       		dc.w SonAni_Surf-SonicAniData
00013BE2 0000                       		dc.w SonAni_Bubble-SonicAniData
00013BE4 0000                       		dc.w SonAni_Death1-SonicAniData
00013BE6 0000                       		dc.w SonAni_Drown-SonicAniData
00013BE8 0000                       		dc.w SonAni_Death2-SonicAniData
00013BEA 0000                       		dc.w SonAni_Shrink-SonicAniData
00013BEC 0000                       		dc.w SonAni_Hurt-SonicAniData
00013BEE 0000                       		dc.w SonAni_LZSlide-SonicAniData
00013BF0 0000                       		dc.w SonAni_Blank-SonicAniData
00013BF2 0000                       		dc.w SonAni_Float3-SonicAniData
00013BF4 0000                       		dc.w SonAni_Float4-SonicAniData
00013BF6 FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00013BFE FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00013C06 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00013C0E FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00013C16 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00013C1E 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00013C34 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
00013C38 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00013C3C 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00013C40 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00013C44 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00013C48 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00013C4C 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00013C50 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00013C54 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00013C58 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00013C60 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00013C64 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00013C68 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00013C6E 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00013C74 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00013C78 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00013C80 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00013C84 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00013C88 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00013C8C 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00013C96 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
00013C9A 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00013C9E 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00013CA2 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00013CAA 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00013CAE                            		even
00013CAE                            		even
00013CAE                            
00013CAE                            ; ---------------------------------------------------------------------------
00013CAE                            ; Sonic	pattern	loading	subroutine
00013CAE                            ; ---------------------------------------------------------------------------
00013CAE                            
00013CAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CAE                            
00013CAE                            
00013CAE                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00013CAE 7000                       		moveq	#0,d0
00013CB0 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00013CB4 B038 F766                  		cmp.b	($FFFFF766).w,d0
00013CB8 6700                       		beq.s	locret_13C96
00013CBA 11C0 F766                  		move.b	d0,($FFFFF766).w
00013CBE 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00013CC4 D040                       		add.w	d0,d0
00013CC6 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013CCA 7200                       		moveq	#0,d1
00013CCC 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00013CCE 5301                       		subq.b	#1,d1
00013CD0 6B00                       		bmi.s	locret_13C96
00013CD2 47F8 C800                  		lea	($FFFFC800).w,a3
00013CD6 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00013CDC                            
00013CDC                            SPLC_ReadEntry:
00013CDC 7400                       		moveq	#0,d2
00013CDE 141A                       		move.b	(a2)+,d2
00013CE0 3002                       		move.w	d2,d0
00013CE2 E808                       		lsr.b	#4,d0
00013CE4 E14A                       		lsl.w	#8,d2
00013CE6 141A                       		move.b	(a2)+,d2
00013CE8 EB4A                       		lsl.w	#5,d2
00013CEA 43F9 0000 0000             		lea	(Art_Sonic).l,a1
00013CF0 D3C2                       		adda.l	d2,a1
00013CF2                            
00013CF2                            SPLC_LoadTile:
00013CF2 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00013CF6 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00013CFA 47EB 0020                  		lea	$20(a3),a3	; next tile
00013CFE 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00013D02                            
00013D02 51C9 FFD8                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00013D06                            
00013D06                            locret_13C96:
00013D06 4E75                       		rts	
00013D08                            ; End of function LoadSonicDynPLC
00013D08                            
00013D08                            ; ===========================================================================
00013D08                            ; ---------------------------------------------------------------------------
00013D08                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00013D08                            ; ---------------------------------------------------------------------------
00013D08                            
00013D08                            Obj0A:					; XREF: Obj_Index
00013D08 7000                       		moveq	#0,d0
00013D0A 1028 0024                  		move.b	$24(a0),d0
00013D0E 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00013D12 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00013D16                            ; ===========================================================================
00013D16 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00013D1A 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00013D1E 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00013D22 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00013D26 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00013D28                            ; ===========================================================================
00013D28                            
00013D28                            Obj0A_Main:				; XREF: Obj0A_Index
00013D28 5428 0024                  		addq.b	#2,$24(a0)
00013D2C 217C 0001 2A4E 0004        		move.l	#Map_obj64,4(a0)
00013D34 317C 8348 0002             		move.w	#$8348,2(a0)
00013D3A 117C 0084 0001             		move.b	#$84,1(a0)
00013D40 117C 0010 0019             		move.b	#$10,$19(a0)
00013D46 117C 0001 0018             		move.b	#1,$18(a0)
00013D4C 1028 0028                  		move.b	$28(a0),d0
00013D50 6A00                       		bpl.s	loc_13D00
00013D52 5028 0024                  		addq.b	#8,$24(a0)
00013D56 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00013D5E 317C 0440 0002             		move.w	#$440,2(a0)
00013D64 0240 007F                  		andi.w	#$7F,d0
00013D68 1140 0033                  		move.b	d0,$33(a0)
00013D6C 6000 0000                  		bra.w	Obj0A_Countdown
00013D70                            ; ===========================================================================
00013D70                            
00013D70                            loc_13D00:
00013D70 1140 001C                  		move.b	d0,$1C(a0)
00013D74 3168 0008 0030             		move.w	8(a0),$30(a0)
00013D7A 317C FF78 0012             		move.w	#-$88,$12(a0)
00013D80                            
00013D80                            Obj0A_Animate:				; XREF: Obj0A_Index
00013D80 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00013D86 4EB9 0000 A7F2             		jsr	AnimateSprite
00013D8C                            
00013D8C                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00013D8C 3038 F646                  		move.w	($FFFFF646).w,d0
00013D90 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00013D94 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00013D96 117C 0006 0024             		move.b	#6,$24(a0)
00013D9C 5E28 001C                  		addq.b	#7,$1C(a0)
00013DA0 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00013DA6 6700                       		beq.s	Obj0A_Display
00013DA8 6000                       		bra.s	Obj0A_Display
00013DAA                            ; ===========================================================================
00013DAA                            
00013DAA                            Obj0A_Wobble:
00013DAA 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013DAE 6700                       		beq.s	loc_13D44
00013DB0 5868 0030                  		addq.w	#4,$30(a0)
00013DB4                            
00013DB4                            loc_13D44:
00013DB4 1028 0026                  		move.b	$26(a0),d0
00013DB8 5228 0026                  		addq.b	#1,$26(a0)
00013DBC 0240 007F                  		andi.w	#$7F,d0
00013DC0 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013DC6 1031 0000                  		move.b	(a1,d0.w),d0
00013DCA 4880                       		ext.w	d0
00013DCC D068 0030                  		add.w	$30(a0),d0
00013DD0 3140 0008                  		move.w	d0,8(a0)
00013DD4 6100                       		bsr.s	Obj0A_ShowNumber
00013DD6 4EBA 98C8                  		jsr	SpeedToPos
00013DDA 4A28 0001                  		tst.b	1(a0)
00013DDE 6A00                       		bpl.s	Obj0A_Delete
00013DE0 4EFA 98E4                  		jmp	DisplaySprite
00013DE4                            ; ===========================================================================
00013DE4                            
00013DE4                            Obj0A_Delete:
00013DE4 4EFA 991C                  		jmp	DeleteObject
00013DE8                            ; ===========================================================================
00013DE8                            
00013DE8                            Obj0A_Display:				; XREF: Obj0A_Index
00013DE8 6100                       		bsr.s	Obj0A_ShowNumber
00013DEA 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00013DF0 4EB9 0000 A7F2             		jsr	AnimateSprite
00013DF6 4EFA 98CE                  		jmp	DisplaySprite
00013DFA                            ; ===========================================================================
00013DFA                            
00013DFA                            Obj0A_Delete2:				; XREF: Obj0A_Index
00013DFA 4EFA 9906                  		jmp	DeleteObject
00013DFE                            ; ===========================================================================
00013DFE                            
00013DFE                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00013DFE 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00013E04 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00013E06 5368 0038                  		subq.w	#1,$38(a0)
00013E0A 6600                       		bne.s	Obj0A_Display2
00013E0C 117C 000E 0024             		move.b	#$E,$24(a0)
00013E12 5E28 001C                  		addq.b	#7,$1C(a0)
00013E16 60D0                       		bra.s	Obj0A_Display
00013E18                            ; ===========================================================================
00013E18                            
00013E18                            Obj0A_Display2:
00013E18 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00013E1E 4EB9 0000 A7F2             		jsr	AnimateSprite
00013E24 4A28 0001                  		tst.b	1(a0)
00013E28 6A00                       		bpl.s	Obj0A_Delete3
00013E2A 4EFA 989A                  		jmp	DisplaySprite
00013E2E                            ; ===========================================================================
00013E2E                            
00013E2E                            Obj0A_Delete3:
00013E2E 4EFA 98D2                  		jmp	DeleteObject
00013E32                            ; ===========================================================================
00013E32                            
00013E32                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00013E32 4A68 0038                  		tst.w	$38(a0)
00013E36 6700                       		beq.s	locret_13E1A
00013E38 5368 0038                  		subq.w	#1,$38(a0)
00013E3C 6600                       		bne.s	locret_13E1A
00013E3E 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00013E44 6400                       		bcc.s	locret_13E1A
00013E46 317C 000F 0038             		move.w	#$F,$38(a0)
00013E4C 4268 0012                  		clr.w	$12(a0)
00013E50 117C 0080 0001             		move.b	#$80,1(a0)
00013E56 3028 0008                  		move.w	8(a0),d0
00013E5A 9078 F700                  		sub.w	($FFFFF700).w,d0
00013E5E 0640 0080                  		addi.w	#$80,d0
00013E62 3140 0008                  		move.w	d0,8(a0)
00013E66 3028 000C                  		move.w	$C(a0),d0
00013E6A 9078 F704                  		sub.w	($FFFFF704).w,d0
00013E6E 0640 0080                  		addi.w	#$80,d0
00013E72 3140 000A                  		move.w	d0,$A(a0)
00013E76 117C 000C 0024             		move.b	#$C,$24(a0)
00013E7C                            
00013E7C                            locret_13E1A:
00013E7C 4E75                       		rts	
00013E7E                            ; ===========================================================================
00013E7E                            Obj0A_WobbleData:
00013E7E 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00013E8F 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00013EA0 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00013EB1 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00013EC1 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00013ECE FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00013EDB FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00013EE8 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00013EF5 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00013EFE                            ; ===========================================================================
00013EFE                            
00013EFE                            Obj0A_Countdown:			; XREF: Obj0A_Index
00013EFE 4A68 002C                  		tst.w	$2C(a0)
00013F02 6600 0000                  		bne.w	loc_13F86
00013F06 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00013F0C 6400 0000                  		bcc.w	locret_1408C
00013F10 0838 0006 D022             		btst	#6,($FFFFD022).w
00013F16 6700 0000                  		beq.w	locret_1408C
00013F1A 5368 0038                  		subq.w	#1,$38(a0)
00013F1E 6A00 0000                  		bpl.w	loc_13FAC
00013F22 317C 003B 0038             		move.w	#59,$38(a0)
00013F28 317C 0001 0036             		move.w	#1,$36(a0)
00013F2E 4EB9 0000 29B4             		jsr	(RandomNumber).l
00013F34 0240 0001                  		andi.w	#1,d0
00013F38 1140 0034                  		move.b	d0,$34(a0)
00013F3C 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00013F40 0C40 0019                  		cmpi.w	#$19,d0
00013F44 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00013F46 0C40 0014                  		cmpi.w	#$14,d0
00013F4A 6700                       		beq.s	Obj0A_WarnSound
00013F4C 0C40 000F                  		cmpi.w	#$F,d0
00013F50 6700                       		beq.s	Obj0A_WarnSound
00013F52 0C40 000C                  		cmpi.w	#$C,d0
00013F56 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00013F58 6600                       		bne.s	loc_13F02
00013F5A 303C 0092                  		move.w	#$92,d0
00013F5E 4EB9 0000 1396             		jsr	(PlaySound).l	; play countdown music
00013F64                            
00013F64                            loc_13F02:
00013F64 5328 0032                  		subq.b	#1,$32(a0)
00013F68 6A00                       		bpl.s	Obj0A_ReduceAir
00013F6A 1168 0033 0032             		move.b	$33(a0),$32(a0)
00013F70 08E8 0007 0036             		bset	#7,$36(a0)
00013F76 6000                       		bra.s	Obj0A_ReduceAir
00013F78                            ; ===========================================================================
00013F78                            
00013F78                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00013F78 303C 00C2                  		move.w	#$C2,d0
00013F7C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00013F82                            
00013F82                            Obj0A_ReduceAir:
00013F82 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00013F86 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00013F8A 6100 0000                  		bsr.w	ResumeMusic
00013F8E 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00013F94 303C 00B2                  		move.w	#$B2,d0
00013F98 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play drowning sound
00013F9E 117C 000A 0034             		move.b	#$A,$34(a0)
00013FA4 317C 0001 0036             		move.w	#1,$36(a0)
00013FAA 317C 0078 002C             		move.w	#$78,$2C(a0)
00013FB0 2F08                       		move.l	a0,-(sp)
00013FB2 41F8 D000                  		lea	($FFFFD000).w,a0
00013FB6 6100 F860                  		bsr.w	Sonic_ResetOnFloor
00013FBA 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00013FC0 08E8 0001 0022             		bset	#1,$22(a0)
00013FC6 08E8 0007 0002             		bset	#7,2(a0)
00013FCC 317C 0000 0012             		move.w	#0,$12(a0)
00013FD2 317C 0000 0010             		move.w	#0,$10(a0)
00013FD8 317C 0000 0014             		move.w	#0,$14(a0)
00013FDE 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00013FE4 205F                       		movea.l	(sp)+,a0
00013FE6 4E75                       		rts	
00013FE8                            ; ===========================================================================
00013FE8                            
00013FE8                            loc_13F86:
00013FE8 5368 002C                  		subq.w	#1,$2C(a0)
00013FEC 6600                       		bne.s	loc_13F94
00013FEE 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00013FF4 4E75                       		rts	
00013FF6                            ; ===========================================================================
00013FF6                            
00013FF6                            loc_13F94:
00013FF6 2F08                       		move.l	a0,-(sp)
00013FF8 41F8 D000                  		lea	($FFFFD000).w,a0
00013FFC 4EBA 96A2                  		jsr	SpeedToPos
00014000 0668 0010 0012             		addi.w	#$10,$12(a0)
00014006 205F                       		movea.l	(sp)+,a0
00014008 6000                       		bra.s	loc_13FAC
0001400A                            ; ===========================================================================
0001400A                            
0001400A                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
0001400A 6000                       		bra.s	Obj0A_MakeItem
0001400C                            ; ===========================================================================
0001400C                            
0001400C                            loc_13FAC:
0001400C 4A68 0036                  		tst.w	$36(a0)
00014010 6700 0000                  		beq.w	locret_1408C
00014014 5368 003A                  		subq.w	#1,$3A(a0)
00014018 6A00 0000                  		bpl.w	locret_1408C
0001401C                            
0001401C                            Obj0A_MakeItem:
0001401C 4EB9 0000 29B4             		jsr	(RandomNumber).l
00014022 0240 000F                  		andi.w	#$F,d0
00014026 3140 003A                  		move.w	d0,$3A(a0)
0001402A 4EBA 9B20                  		jsr	SingleObjLoad
0001402E 6600 0000                  		bne.w	locret_1408C
00014032 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014036 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
0001403C 7006                       		moveq	#6,d0
0001403E 0838 0000 D022             		btst	#0,($FFFFD022).w
00014044 6700                       		beq.s	loc_13FF2
00014046 4440                       		neg.w	d0
00014048 137C 0040 0026             		move.b	#$40,$26(a1)
0001404E                            
0001404E                            loc_13FF2:
0001404E D169 0008                  		add.w	d0,8(a1)
00014052 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014058 137C 0006 0028             		move.b	#6,$28(a1)
0001405E 4A68 002C                  		tst.w	$2C(a0)
00014062 6700 0000                  		beq.w	loc_1403E
00014066 0268 0007 003A             		andi.w	#7,$3A(a0)
0001406C 0668 0000 003A             		addi.w	#0,$3A(a0)
00014072 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014076 0440 000C                  		subi.w	#$C,d0
0001407A 3340 000C                  		move.w	d0,$C(a1)
0001407E 4EB9 0000 29B4             		jsr	(RandomNumber).l
00014084 1340 0026                  		move.b	d0,$26(a1)
00014088 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001408C 0200 0003                  		andi.b	#3,d0
00014090 6600                       		bne.s	loc_14082
00014092 137C 000E 0028             		move.b	#$E,$28(a1)
00014098 6000                       		bra.s	loc_14082
0001409A                            ; ===========================================================================
0001409A                            
0001409A                            loc_1403E:
0001409A 0828 0007 0036             		btst	#7,$36(a0)
000140A0 6700                       		beq.s	loc_14082
000140A2 3438 FE14                  		move.w	($FFFFFE14).w,d2
000140A6 E24A                       		lsr.w	#1,d2
000140A8 4EB9 0000 29B4             		jsr	(RandomNumber).l
000140AE 0240 0003                  		andi.w	#3,d0
000140B2 6600                       		bne.s	loc_1406A
000140B4 08E8 0006 0036             		bset	#6,$36(a0)
000140BA 6600                       		bne.s	loc_14082
000140BC 1342 0028                  		move.b	d2,$28(a1)
000140C0 337C 001C 0038             		move.w	#$1C,$38(a1)
000140C6                            
000140C6                            loc_1406A:
000140C6 4A28 0034                  		tst.b	$34(a0)
000140CA 6600                       		bne.s	loc_14082
000140CC 08E8 0006 0036             		bset	#6,$36(a0)
000140D2 6600                       		bne.s	loc_14082
000140D4 1342 0028                  		move.b	d2,$28(a1)
000140D8 337C 001C 0038             		move.w	#$1C,$38(a1)
000140DE                            
000140DE                            loc_14082:
000140DE 5328 0034                  		subq.b	#1,$34(a0)
000140E2 6A00                       		bpl.s	locret_1408C
000140E4 4268 0036                  		clr.w	$36(a0)
000140E8                            
000140E8                            locret_1408C:
000140E8 4E75                       		rts	
000140EA                            
000140EA                            ; ---------------------------------------------------------------------------
000140EA                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000140EA                            ; ---------------------------------------------------------------------------
000140EA                            
000140EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140EA                            
000140EA                            
000140EA                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
000140EA 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000140F0 6200                       		bhi.s	loc_140AC
000140F2 303C 0082                  		move.w	#$82,d0		; play LZ music
000140F6 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	0103 (SBZ3)
000140FC 6600                       		bne.s	loc_140A6
000140FE 303C 0086                  		move.w	#$86,d0		; play SBZ music
00014102                            
00014102                            loc_140A6:
00014102 4EB9 0000 1396             		jsr	(PlaySound).l
00014108                            
00014108                            loc_140AC:
00014108 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0001410E 4238 D372                  		clr.b	($FFFFD372).w
00014112 4E75                       		rts	
00014114                            ; End of function ResumeMusic
00014114                            
00014114                            ; ===========================================================================
00014114                            Ani_obj0A:
00014114                            	include "_anim\obj0A.asm"
00014114                            ; ---------------------------------------------------------------------------
00014114                            ; Animation script - countdown numbers and bubbles (LZ)
00014114                            ; ---------------------------------------------------------------------------
00014114 0000                       		dc.w byte_140D6-Ani_obj0A
00014116 0000                       		dc.w byte_140E0-Ani_obj0A
00014118 0000                       		dc.w byte_140EA-Ani_obj0A
0001411A 0000                       		dc.w byte_140F4-Ani_obj0A
0001411C 0000                       		dc.w byte_140FE-Ani_obj0A
0001411E 0000                       		dc.w byte_14108-Ani_obj0A
00014120 0000                       		dc.w byte_14112-Ani_obj0A
00014122 0000                       		dc.w byte_14118-Ani_obj0A
00014124 0000                       		dc.w byte_14120-Ani_obj0A
00014126 0000                       		dc.w byte_14128-Ani_obj0A
00014128 0000                       		dc.w byte_14130-Ani_obj0A
0001412A 0000                       		dc.w byte_14138-Ani_obj0A
0001412C 0000                       		dc.w byte_14140-Ani_obj0A
0001412E 0000                       		dc.w byte_14148-Ani_obj0A
00014130 0000                       		dc.w byte_1414A-Ani_obj0A
00014132 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
0001413C 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014146 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014150 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
0001415A 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014164 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
0001416E 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014174 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
0001417C 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014184 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
0001418C 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014194 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
0001419C 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
000141A4 0EFC                       byte_14148:	dc.b $E, $FC
000141A6 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
000141AC                            		even
000141AC                            		even
000141AC                            
000141AC                            ; ---------------------------------------------------------------------------
000141AC                            ; Sprite mappings - drowning countdown numbers (LZ)
000141AC                            ; ---------------------------------------------------------------------------
000141AC                            Map_obj0A:
000141AC                            	include "_maps\obj0A.asm"
000141AC                            ; ---------------------------------------------------------------------------
000141AC                            ; Sprite mappings - drowning countdown numbers (LZ)
000141AC                            ; ---------------------------------------------------------------------------
000141AC 0000                       		dc.w byte_14152-Map_obj0A
000141AE 01                         byte_14152:	dc.b 1
000141AF E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
000141B4                            		even
000141B4                            		even
000141B4                            
000141B4                            ; ===========================================================================
000141B4                            ; ---------------------------------------------------------------------------
000141B4                            ; Object 38 - shield and invincibility stars
000141B4                            ; ---------------------------------------------------------------------------
000141B4                            
000141B4                            Obj38:					; XREF: Obj_Index
000141B4 7000                       		moveq	#0,d0
000141B6 1028 0024                  		move.b	$24(a0),d0
000141BA 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
000141BE 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
000141C2                            ; ===========================================================================
000141C2 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
000141C4 0000                       		dc.w Obj38_Shield-Obj38_Index
000141C6 0000                       		dc.w Obj38_Stars-Obj38_Index
000141C8                            ; ===========================================================================
000141C8                            
000141C8                            Obj38_Main:				; XREF: Obj38_Index
000141C8 5428 0024                  		addq.b	#2,$24(a0)
000141CC 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
000141D4 117C 0004 0001             		move.b	#4,1(a0)
000141DA 117C 0001 0018             		move.b	#1,$18(a0)
000141E0 117C 0010 0019             		move.b	#$10,$19(a0)
000141E6 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
000141EA 6600                       		bne.s	Obj38_DoStars	; if not, branch
000141EC 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
000141F2 4E75                       		rts	
000141F4                            ; ===========================================================================
000141F4                            
000141F4                            Obj38_DoStars:
000141F4 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
000141F8 317C 055C 0002             		move.w	#$55C,2(a0)
000141FE 4E75                       		rts	
00014200                            ; ===========================================================================
00014200                            
00014200                            Obj38_Shield:				; XREF: Obj38_Index
00014200 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014204 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014206 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
0001420A 6700                       		beq.s	Obj38_Delete	; if not, branch
0001420C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014212 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014218 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001421E 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014224 4EB9 0000 A7F2             		jsr	AnimateSprite
0001422A 4EFA 949A                  		jmp	DisplaySprite
0001422E                            ; ===========================================================================
0001422E                            
0001422E                            Obj38_RmvShield:
0001422E 4E75                       		rts	
00014230                            ; ===========================================================================
00014230                            
00014230                            Obj38_Delete:
00014230 4EFA 94D0                  		jmp	DeleteObject
00014234                            ; ===========================================================================
00014234                            
00014234                            Obj38_Stars:				; XREF: Obj38_Index
00014234 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014238 6700                       		beq.s	Obj38_Delete2	; if not, branch
0001423A 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0001423E 1228 001C                  		move.b	$1C(a0),d1
00014242 5301                       		subq.b	#1,d1
00014244 6000                       		bra.s	Obj38_StarTrail
00014246                            ; ===========================================================================
00014246 E909                       		lsl.b	#4,d1
00014248 5801                       		addq.b	#4,d1
0001424A 9001                       		sub.b	d1,d0
0001424C 1228 0030                  		move.b	$30(a0),d1
00014250 9001                       		sub.b	d1,d0
00014252 5801                       		addq.b	#4,d1
00014254 0201 000F                  		andi.b	#$F,d1
00014258 1141 0030                  		move.b	d1,$30(a0)
0001425C 6000                       		bra.s	Obj38_StarTrail2a
0001425E                            ; ===========================================================================
0001425E                            
0001425E                            Obj38_StarTrail:			; XREF: Obj38_Stars
0001425E E709                       		lsl.b	#3,d1
00014260 1401                       		move.b	d1,d2
00014262 D201                       		add.b	d1,d1
00014264 D202                       		add.b	d2,d1
00014266 5801                       		addq.b	#4,d1
00014268 9001                       		sub.b	d1,d0
0001426A 1228 0030                  		move.b	$30(a0),d1
0001426E 9001                       		sub.b	d1,d0
00014270 5801                       		addq.b	#4,d1
00014272 0C01 0018                  		cmpi.b	#$18,d1
00014276 6500                       		bcs.s	Obj38_StarTrail2
00014278 7200                       		moveq	#0,d1
0001427A                            
0001427A                            Obj38_StarTrail2:
0001427A 1141 0030                  		move.b	d1,$30(a0)
0001427E                            
0001427E                            Obj38_StarTrail2a:
0001427E 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014282 43F1 0000                  		lea	(a1,d0.w),a1
00014286 3159 0008                  		move.w	(a1)+,8(a0)
0001428A 3159 000C                  		move.w	(a1)+,$C(a0)
0001428E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014294 43F9 0000 0000             		lea	(Ani_obj38).l,a1
0001429A 4EB9 0000 A7F2             		jsr	AnimateSprite
000142A0 4EFA 9424                  		jmp	DisplaySprite
000142A4                            ; ===========================================================================
000142A4                            
000142A4                            Obj38_Delete2:				; XREF: Obj38_Stars
000142A4 4EFA 945C                  		jmp	DeleteObject
000142A8                            ; ===========================================================================
000142A8                            ; ---------------------------------------------------------------------------
000142A8                            ; Object 4A - special stage entry from beta
000142A8                            ; ---------------------------------------------------------------------------
000142A8                            
000142A8                            Obj4A:					; XREF: Obj_Index
000142A8 7000                       		moveq	#0,d0
000142AA 1028 0024                  		move.b	$24(a0),d0
000142AE 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
000142B2 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
000142B6                            ; ===========================================================================
000142B6 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
000142B8 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
000142BA 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
000142BC                            ; ===========================================================================
000142BC                            
000142BC                            Obj4A_Main:				; XREF: Obj4A_Index
000142BC 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
000142C0 6700                       		beq.s	Obj4A_Main2	; if yes, branch
000142C2 4E75                       		rts	
000142C4                            ; ===========================================================================
000142C4                            
000142C4                            Obj4A_Main2:
000142C4 5428 0024                  		addq.b	#2,$24(a0)
000142C8 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
000142D0 117C 0004 0001             		move.b	#4,1(a0)
000142D6 117C 0001 0018             		move.b	#1,$18(a0)
000142DC 117C 0038 0019             		move.b	#$38,$19(a0)
000142E2 317C 0541 0002             		move.w	#$541,2(a0)
000142E8 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
000142EE                            
000142EE                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
000142EE 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000142F4 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000142FA 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014300 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014306 4EB9 0000 A7F2             		jsr	AnimateSprite
0001430C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014312 6600                       		bne.s	Obj4A_Display
00014314 4A38 D000                  		tst.b	($FFFFD000).w
00014318 6700                       		beq.s	Obj4A_Display
0001431A 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014320 303C 00A8                  		move.w	#$A8,d0
00014324 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
0001432A                            
0001432A                            Obj4A_Display:
0001432A 4EFA 939A                  		jmp	DisplaySprite
0001432E                            ; ===========================================================================
0001432E                            
0001432E                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
0001432E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014332 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014334 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0001433A 4EFA 93C6                  		jmp	DeleteObject
0001433E                            ; ===========================================================================
0001433E                            
0001433E                            Obj4A_Wait:
0001433E 4E75                       		rts	
00014340                            ; ===========================================================================
00014340                            ; ---------------------------------------------------------------------------
00014340                            ; Object 08 - water splash (LZ)
00014340                            ; ---------------------------------------------------------------------------
00014340                            
00014340                            Obj08:					; XREF: Obj_Index
00014340 7000                       		moveq	#0,d0
00014342 1028 0024                  		move.b	$24(a0),d0
00014346 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
0001434A 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
0001434E                            ; ===========================================================================
0001434E 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014350 0000                       		dc.w Obj08_Display-Obj08_Index
00014352 0000                       		dc.w Obj08_Delete-Obj08_Index
00014354                            ; ===========================================================================
00014354                            
00014354                            Obj08_Main:				; XREF: Obj08_Index
00014354 5428 0024                  		addq.b	#2,$24(a0)
00014358 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014360 0028 0004 0001             		ori.b	#4,1(a0)
00014366 117C 0001 0018             		move.b	#1,$18(a0)
0001436C 117C 0010 0019             		move.b	#$10,$19(a0)
00014372 317C 4259 0002             		move.w	#$4259,2(a0)
00014378 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
0001437E                            
0001437E                            Obj08_Display:				; XREF: Obj08_Index
0001437E 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014384 43F9 0000 0000             		lea	(Ani_obj08).l,a1
0001438A 4EB9 0000 A7F2             		jsr	AnimateSprite
00014390 4EFA 9334                  		jmp	DisplaySprite
00014394                            ; ===========================================================================
00014394                            
00014394                            Obj08_Delete:				; XREF: Obj08_Index
00014394 4EFA 936C                  		jmp	DeleteObject	; delete when animation	is complete
00014398                            ; ===========================================================================
00014398                            Ani_obj38:
00014398                            	include "_anim\obj38.asm"
00014398                            ; ---------------------------------------------------------------------------
00014398                            ; Animation script - shield and invincibility stars
00014398                            ; ---------------------------------------------------------------------------
00014398 0000                       		dc.w byte_14356-Ani_obj38
0001439A 0000                       		dc.w byte_1435E-Ani_obj38
0001439C 0000                       		dc.w byte_14364-Ani_obj38
0001439E 0000                       		dc.w byte_1437E-Ani_obj38
000143A0 0000                       		dc.w byte_14398-Ani_obj38
000143A2 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
000143AA 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
000143B0 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
000143C1 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
000143CA 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
000143DB 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
000143E4 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
000143F5 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
000143FE                            		even
000143FE                            		even
000143FE                            
000143FE                            ; ---------------------------------------------------------------------------
000143FE                            ; Sprite mappings - shield and invincibility stars
000143FE                            ; ---------------------------------------------------------------------------
000143FE                            Map_obj38:
000143FE                            	include "_maps\obj38.asm"
000143FE                            ; ---------------------------------------------------------------------------
000143FE                            ; Sprite mappings - shield and invincibility stars
000143FE                            ; ---------------------------------------------------------------------------
000143FE 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014402 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014406 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
0001440A 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
0001440E 04                         byte_143C2:	dc.b 4
0001440F E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014414 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014419 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
0001441E 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014423 04                         byte_143D7:	dc.b 4
00014424 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014429 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
0001442E 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014433 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014438 04                         byte_143EC:	dc.b 4
00014439 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
0001443E E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014443 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014448 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0001444D 04                         byte_14401:	dc.b 4
0001444E E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014453 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014458 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
0001445D 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014462 04                         byte_14416:	dc.b 4
00014463 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014468 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0001446D 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014472 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014477 04                         byte_1442B:	dc.b 4
00014478 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0001447D E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014482 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014487 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0001448C 04                         byte_14440:	dc.b 4
0001448D E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014492 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014497 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0001449C 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000144A2 00                         		even
000144A2 00                         		even
000144A2                            
000144A2                            Ani_obj4A:
000144A2                            	include "_anim\obj4A.asm"
000144A2                            ; ---------------------------------------------------------------------------
000144A2                            ; Animation script - special stage entry effect from beta
000144A2                            ; ---------------------------------------------------------------------------
000144A2 0000                       		dc.w byte_14458-Ani_obj4A
000144A4 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
000144B8                            		even
000144B8                            		even
000144B8                            
000144B8                            ; ---------------------------------------------------------------------------
000144B8                            ; Sprite mappings - special stage entry	from beta
000144B8                            ; ---------------------------------------------------------------------------
000144B8                            Map_obj4A:
000144B8                            	include "_maps\obj4A.asm"
000144B8                            ; ---------------------------------------------------------------------------
000144B8                            ; Sprite mappings - special stage entry	from beta
000144B8                            ; ---------------------------------------------------------------------------
000144B8 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
000144BC 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
000144C0 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
000144C4 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
000144C8 03                         byte_1447C:	dc.b 3
000144C9 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
000144CE 0004 0001 00               		dc.b 0,	4, 0, 1, 0
000144D3 0800 1000 08               		dc.b 8,	0, $10,	0, 8
000144D8 03                         byte_1448C:	dc.b 3
000144D9 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
000144DE 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
000144E3 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
000144E8 05                         byte_1449C:	dc.b 5
000144E9 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
000144EE EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
000144F3 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
000144F8 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
000144FD 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014502 09                         byte_144B6:	dc.b 9
00014503 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014508 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
0001450D 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014512 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014517 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
0001451C F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014521 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014526 0000 0825 28               		dc.b 0,	0, 8, $25, $28
0001452B F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014530 12                         byte_144E4:	dc.b $12
00014531 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014536 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
0001453B F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014540 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014545 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
0001454A 1000 1026 00               		dc.b $10, 0, $10, $26, 0
0001454F 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014554 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014559 0000 0026 10               		dc.b 0,	0, 0, $26, $10
0001455E 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014563 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014568 0800 0029 20               		dc.b 8,	0, 0, $29, $20
0001456D F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014572 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014577 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001457C F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014581 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014586 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001458B 11                         byte_1453F:	dc.b $11
0001458C F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014591 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014596 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001459B 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
000145A0 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
000145A5 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000145AA 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
000145AF F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000145B4 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000145B9 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000145BE 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000145C3 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000145C8 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000145CD 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000145D2 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000145D7 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000145DC 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000145E1 09                         byte_14595:	dc.b 9
000145E2 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000145E7 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000145EC 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000145F1 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000145F6 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000145FB FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014600 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014605 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
0001460A 04                         		dc.b 4
0001460B 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014610                            		even
00014610                            		even
00014610                            
00014610                            Ani_obj08:
00014610                            	include "_anim\obj08.asm"
00014610                            ; ---------------------------------------------------------------------------
00014610                            ; Animation script - water splash (LZ)
00014610                            ; ---------------------------------------------------------------------------
00014610 0000                       		dc.w byte_145C6-Ani_obj08
00014612 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014618                            		even
00014618                            		even
00014618                            
00014618                            ; ---------------------------------------------------------------------------
00014618                            ; Sprite mappings - water splash (LZ)
00014618                            ; ---------------------------------------------------------------------------
00014618                            Map_obj08:
00014618                            	include "_maps\obj08.asm"
00014618                            ; ---------------------------------------------------------------------------
00014618                            ; Sprite mappings - water splash (LZ)
00014618                            ; ---------------------------------------------------------------------------
00014618 0000                       		dc.w byte_145D2-Map_obj08
0001461A 0000                       		dc.w byte_145DD-Map_obj08
0001461C 0000                       		dc.w byte_145E8-Map_obj08
0001461E 02                         byte_145D2:	dc.b 2
0001461F F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014624 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014629 02                         byte_145DD:	dc.b 2
0001462A E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
0001462F EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014634 01                         byte_145E8:	dc.b 1
00014635 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
0001463A                            		even
0001463A                            		even
0001463A                            
0001463A                            ; ---------------------------------------------------------------------------
0001463A                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
0001463A                            ; ---------------------------------------------------------------------------
0001463A                            
0001463A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001463A                            
0001463A                            
0001463A                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
0001463A 0828 0003 0022             		btst	#3,$22(a0)
00014640 6700                       		beq.s	loc_14602
00014642 7000                       		moveq	#0,d0
00014644 11C0 F768                  		move.b	d0,($FFFFF768).w
00014648 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001464C 4E75                       		rts	
0001464E                            ; ===========================================================================
0001464E                            
0001464E                            loc_14602:
0001464E 7003                       		moveq	#3,d0
00014650 11C0 F768                  		move.b	d0,($FFFFF768).w
00014654 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014658 1028 0026                  		move.b	$26(a0),d0
0001465C 0600 0020                  		addi.b	#$20,d0
00014660 6A00                       		bpl.s	loc_14624
00014662 1028 0026                  		move.b	$26(a0),d0
00014666 6A00                       		bpl.s	loc_1461E
00014668 5300                       		subq.b	#1,d0
0001466A                            
0001466A                            loc_1461E:
0001466A 0600 0020                  		addi.b	#$20,d0
0001466E 6000                       		bra.s	loc_14630
00014670                            ; ===========================================================================
00014670                            
00014670                            loc_14624:
00014670 1028 0026                  		move.b	$26(a0),d0
00014674 6A00                       		bpl.s	loc_1462C
00014676 5200                       		addq.b	#1,d0
00014678                            
00014678                            loc_1462C:
00014678 0600 001F                  		addi.b	#$1F,d0
0001467C                            
0001467C                            loc_14630:
0001467C 0200 00C0                  		andi.b	#$C0,d0
00014680 0C00 0040                  		cmpi.b	#$40,d0
00014684 6700 0000                  		beq.w	Sonic_WalkVertL
00014688 0C00 0080                  		cmpi.b	#$80,d0
0001468C 6700 0000                  		beq.w	Sonic_WalkCeiling
00014690 0C00 00C0                  		cmpi.b	#$C0,d0
00014694 6700 0000                  		beq.w	Sonic_WalkVertR
00014698 3428 000C                  		move.w	$C(a0),d2
0001469C 3628 0008                  		move.w	8(a0),d3
000146A0 7000                       		moveq	#0,d0
000146A2 1028 0016                  		move.b	$16(a0),d0
000146A6 4880                       		ext.w	d0
000146A8 D440                       		add.w	d0,d2
000146AA 1028 0017                  		move.b	$17(a0),d0
000146AE 4880                       		ext.w	d0
000146B0 D640                       		add.w	d0,d3
000146B2 49F8 F768                  		lea	($FFFFF768).w,a4
000146B6 367C 0010                  		movea.w	#$10,a3
000146BA 3C3C 0000                  		move.w	#0,d6
000146BE 7A0D                       		moveq	#$D,d5
000146C0 6100 0000                  		bsr.w	FindFloor
000146C4 3F01                       		move.w	d1,-(sp)
000146C6 3428 000C                  		move.w	$C(a0),d2
000146CA 3628 0008                  		move.w	8(a0),d3
000146CE 7000                       		moveq	#0,d0
000146D0 1028 0016                  		move.b	$16(a0),d0
000146D4 4880                       		ext.w	d0
000146D6 D440                       		add.w	d0,d2
000146D8 1028 0017                  		move.b	$17(a0),d0
000146DC 4880                       		ext.w	d0
000146DE 4440                       		neg.w	d0
000146E0 D640                       		add.w	d0,d3
000146E2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000146E6 367C 0010                  		movea.w	#$10,a3
000146EA 3C3C 0000                  		move.w	#0,d6
000146EE 7A0D                       		moveq	#$D,d5
000146F0 6100 0000                  		bsr.w	FindFloor
000146F4 301F                       		move.w	(sp)+,d0
000146F6 6100 0000                  		bsr.w	Sonic_Angle
000146FA 4A41                       		tst.w	d1
000146FC 6700                       		beq.s	locret_146BE
000146FE 6A00                       		bpl.s	loc_146C0
00014700 0C41 FFF2                  		cmpi.w	#-$E,d1
00014704 6D00                       		blt.s	locret_146E6
00014706 D368 000C                  		add.w	d1,$C(a0)
0001470A                            
0001470A                            locret_146BE:
0001470A 4E75                       		rts	
0001470C                            ; ===========================================================================
0001470C                            
0001470C                            loc_146C0:
0001470C 0C41 000E                  		cmpi.w	#$E,d1
00014710 6E00                       		bgt.s	loc_146CC
00014712                            
00014712                            loc_146C6:
00014712 D368 000C                  		add.w	d1,$C(a0)
00014716 4E75                       		rts	
00014718                            ; ===========================================================================
00014718                            
00014718                            loc_146CC:
00014718 4A28 0038                  		tst.b	$38(a0)
0001471C 66F4                       		bne.s	loc_146C6
0001471E 08E8 0001 0022             		bset	#1,$22(a0)
00014724 08A8 0005 0022             		bclr	#5,$22(a0)
0001472A 117C 0001 001D             		move.b	#1,$1D(a0)
00014730 4E75                       		rts	
00014732                            ; ===========================================================================
00014732                            
00014732                            locret_146E6:
00014732 4E75                       		rts	
00014734                            ; End of function Sonic_AnglePos
00014734                            
00014734                            ; ===========================================================================
00014734 2428 0008                  		move.l	8(a0),d2
00014738 3028 0010                  		move.w	$10(a0),d0
0001473C 48C0                       		ext.l	d0
0001473E E180                       		asl.l	#8,d0
00014740 9480                       		sub.l	d0,d2
00014742 2142 0008                  		move.l	d2,8(a0)
00014746 303C 0038                  		move.w	#$38,d0
0001474A 48C0                       		ext.l	d0
0001474C E180                       		asl.l	#8,d0
0001474E 9680                       		sub.l	d0,d3
00014750 2143 000C                  		move.l	d3,$C(a0)
00014754 4E75                       		rts	
00014756                            ; ===========================================================================
00014756                            
00014756                            locret_1470A:
00014756 4E75                       		rts	
00014758                            ; ===========================================================================
00014758 2628 000C                  		move.l	$C(a0),d3
0001475C 3028 0012                  		move.w	$12(a0),d0
00014760 0440 0038                  		subi.w	#$38,d0
00014764 3140 0012                  		move.w	d0,$12(a0)
00014768 48C0                       		ext.l	d0
0001476A E180                       		asl.l	#8,d0
0001476C 9680                       		sub.l	d0,d3
0001476E 2143 000C                  		move.l	d3,$C(a0)
00014772 4E75                       		rts	
00014774 4E75                       		rts	
00014776                            ; ===========================================================================
00014776 2428 0008                  		move.l	8(a0),d2
0001477A 2628 000C                  		move.l	$C(a0),d3
0001477E 3028 0010                  		move.w	$10(a0),d0
00014782 48C0                       		ext.l	d0
00014784 E180                       		asl.l	#8,d0
00014786 9480                       		sub.l	d0,d2
00014788 3028 0012                  		move.w	$12(a0),d0
0001478C 48C0                       		ext.l	d0
0001478E E180                       		asl.l	#8,d0
00014790 9680                       		sub.l	d0,d3
00014792 2142 0008                  		move.l	d2,8(a0)
00014796 2143 000C                  		move.l	d3,$C(a0)
0001479A 4E75                       		rts	
0001479C                            
0001479C                            ; ---------------------------------------------------------------------------
0001479C                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001479C                            ; ---------------------------------------------------------------------------
0001479C                            
0001479C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001479C                            
0001479C                            
0001479C                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
0001479C 1438 F76A                  		move.b	($FFFFF76A).w,d2
000147A0 B240                       		cmp.w	d0,d1
000147A2 6F00                       		ble.s	loc_1475E
000147A4 1438 F768                  		move.b	($FFFFF768).w,d2
000147A8 3200                       		move.w	d0,d1
000147AA                            
000147AA                            loc_1475E:
000147AA 0802 0000                  		btst	#0,d2
000147AE 6600                       		bne.s	loc_1476A
000147B0 1142 0026                  		move.b	d2,$26(a0)
000147B4 4E75                       		rts	
000147B6                            ; ===========================================================================
000147B6                            
000147B6                            loc_1476A:
000147B6 1428 0026                  		move.b	$26(a0),d2
000147BA 0602 0020                  		addi.b	#$20,d2
000147BE 0202 00C0                  		andi.b	#$C0,d2
000147C2 1142 0026                  		move.b	d2,$26(a0)
000147C6 4E75                       		rts	
000147C8                            ; End of function Sonic_Angle
000147C8                            
000147C8                            ; ---------------------------------------------------------------------------
000147C8                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000147C8                            ; ---------------------------------------------------------------------------
000147C8                            
000147C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000147C8                            
000147C8                            
000147C8                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000147C8 3428 000C                  		move.w	$C(a0),d2
000147CC 3628 0008                  		move.w	8(a0),d3
000147D0 7000                       		moveq	#0,d0
000147D2 1028 0017                  		move.b	$17(a0),d0
000147D6 4880                       		ext.w	d0
000147D8 4440                       		neg.w	d0
000147DA D440                       		add.w	d0,d2
000147DC 1028 0016                  		move.b	$16(a0),d0
000147E0 4880                       		ext.w	d0
000147E2 D640                       		add.w	d0,d3
000147E4 49F8 F768                  		lea	($FFFFF768).w,a4
000147E8 367C 0010                  		movea.w	#$10,a3
000147EC 3C3C 0000                  		move.w	#0,d6
000147F0 7A0D                       		moveq	#$D,d5
000147F2 6100 0000                  		bsr.w	FindWall
000147F6 3F01                       		move.w	d1,-(sp)
000147F8 3428 000C                  		move.w	$C(a0),d2
000147FC 3628 0008                  		move.w	8(a0),d3
00014800 7000                       		moveq	#0,d0
00014802 1028 0017                  		move.b	$17(a0),d0
00014806 4880                       		ext.w	d0
00014808 D440                       		add.w	d0,d2
0001480A 1028 0016                  		move.b	$16(a0),d0
0001480E 4880                       		ext.w	d0
00014810 D640                       		add.w	d0,d3
00014812 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014816 367C 0010                  		movea.w	#$10,a3
0001481A 3C3C 0000                  		move.w	#0,d6
0001481E 7A0D                       		moveq	#$D,d5
00014820 6100 0000                  		bsr.w	FindWall
00014824 301F                       		move.w	(sp)+,d0
00014826 6100 FF74                  		bsr.w	Sonic_Angle
0001482A 4A41                       		tst.w	d1
0001482C 6700                       		beq.s	locret_147F0
0001482E 6A00                       		bpl.s	loc_147F2
00014830 0C41 FFF2                  		cmpi.w	#-$E,d1
00014834 6D00 FF20                  		blt.w	locret_1470A
00014838 D368 0008                  		add.w	d1,8(a0)
0001483C                            
0001483C                            locret_147F0:
0001483C 4E75                       		rts	
0001483E                            ; ===========================================================================
0001483E                            
0001483E                            loc_147F2:
0001483E 0C41 000E                  		cmpi.w	#$E,d1
00014842 6E00                       		bgt.s	loc_147FE
00014844                            
00014844                            loc_147F8:
00014844 D368 0008                  		add.w	d1,8(a0)
00014848 4E75                       		rts	
0001484A                            ; ===========================================================================
0001484A                            
0001484A                            loc_147FE:
0001484A 4A28 0038                  		tst.b	$38(a0)
0001484E 66F4                       		bne.s	loc_147F8
00014850 08E8 0001 0022             		bset	#1,$22(a0)
00014856 08A8 0005 0022             		bclr	#5,$22(a0)
0001485C 117C 0001 001D             		move.b	#1,$1D(a0)
00014862 4E75                       		rts	
00014864                            ; End of function Sonic_WalkVertR
00014864                            
00014864                            ; ---------------------------------------------------------------------------
00014864                            ; Subroutine allowing Sonic to walk upside-down
00014864                            ; ---------------------------------------------------------------------------
00014864                            
00014864                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014864                            
00014864                            
00014864                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014864 3428 000C                  		move.w	$C(a0),d2
00014868 3628 0008                  		move.w	8(a0),d3
0001486C 7000                       		moveq	#0,d0
0001486E 1028 0016                  		move.b	$16(a0),d0
00014872 4880                       		ext.w	d0
00014874 9440                       		sub.w	d0,d2
00014876 0A42 000F                  		eori.w	#$F,d2
0001487A 1028 0017                  		move.b	$17(a0),d0
0001487E 4880                       		ext.w	d0
00014880 D640                       		add.w	d0,d3
00014882 49F8 F768                  		lea	($FFFFF768).w,a4
00014886 367C FFF0                  		movea.w	#-$10,a3
0001488A 3C3C 1000                  		move.w	#$1000,d6
0001488E 7A0D                       		moveq	#$D,d5
00014890 6100 0000                  		bsr.w	FindFloor
00014894 3F01                       		move.w	d1,-(sp)
00014896 3428 000C                  		move.w	$C(a0),d2
0001489A 3628 0008                  		move.w	8(a0),d3
0001489E 7000                       		moveq	#0,d0
000148A0 1028 0016                  		move.b	$16(a0),d0
000148A4 4880                       		ext.w	d0
000148A6 9440                       		sub.w	d0,d2
000148A8 0A42 000F                  		eori.w	#$F,d2
000148AC 1028 0017                  		move.b	$17(a0),d0
000148B0 4880                       		ext.w	d0
000148B2 9640                       		sub.w	d0,d3
000148B4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000148B8 367C FFF0                  		movea.w	#-$10,a3
000148BC 3C3C 1000                  		move.w	#$1000,d6
000148C0 7A0D                       		moveq	#$D,d5
000148C2 6100 0000                  		bsr.w	FindFloor
000148C6 301F                       		move.w	(sp)+,d0
000148C8 6100 FED2                  		bsr.w	Sonic_Angle
000148CC 4A41                       		tst.w	d1
000148CE 6700                       		beq.s	locret_14892
000148D0 6A00                       		bpl.s	loc_14894
000148D2 0C41 FFF2                  		cmpi.w	#-$E,d1
000148D6 6D00 FE5A                  		blt.w	locret_146E6
000148DA 9368 000C                  		sub.w	d1,$C(a0)
000148DE                            
000148DE                            locret_14892:
000148DE 4E75                       		rts	
000148E0                            ; ===========================================================================
000148E0                            
000148E0                            loc_14894:
000148E0 0C41 000E                  		cmpi.w	#$E,d1
000148E4 6E00                       		bgt.s	loc_148A0
000148E6                            
000148E6                            loc_1489A:
000148E6 9368 000C                  		sub.w	d1,$C(a0)
000148EA 4E75                       		rts	
000148EC                            ; ===========================================================================
000148EC                            
000148EC                            loc_148A0:
000148EC 4A28 0038                  		tst.b	$38(a0)
000148F0 66F4                       		bne.s	loc_1489A
000148F2 08E8 0001 0022             		bset	#1,$22(a0)
000148F8 08A8 0005 0022             		bclr	#5,$22(a0)
000148FE 117C 0001 001D             		move.b	#1,$1D(a0)
00014904 4E75                       		rts	
00014906                            ; End of function Sonic_WalkCeiling
00014906                            
00014906                            ; ---------------------------------------------------------------------------
00014906                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00014906                            ; ---------------------------------------------------------------------------
00014906                            
00014906                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014906                            
00014906                            
00014906                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00014906 3428 000C                  		move.w	$C(a0),d2
0001490A 3628 0008                  		move.w	8(a0),d3
0001490E 7000                       		moveq	#0,d0
00014910 1028 0017                  		move.b	$17(a0),d0
00014914 4880                       		ext.w	d0
00014916 9440                       		sub.w	d0,d2
00014918 1028 0016                  		move.b	$16(a0),d0
0001491C 4880                       		ext.w	d0
0001491E 9640                       		sub.w	d0,d3
00014920 0A43 000F                  		eori.w	#$F,d3
00014924 49F8 F768                  		lea	($FFFFF768).w,a4
00014928 367C FFF0                  		movea.w	#-$10,a3
0001492C 3C3C 0800                  		move.w	#$800,d6
00014930 7A0D                       		moveq	#$D,d5
00014932 6100 0000                  		bsr.w	FindWall
00014936 3F01                       		move.w	d1,-(sp)
00014938 3428 000C                  		move.w	$C(a0),d2
0001493C 3628 0008                  		move.w	8(a0),d3
00014940 7000                       		moveq	#0,d0
00014942 1028 0017                  		move.b	$17(a0),d0
00014946 4880                       		ext.w	d0
00014948 D440                       		add.w	d0,d2
0001494A 1028 0016                  		move.b	$16(a0),d0
0001494E 4880                       		ext.w	d0
00014950 9640                       		sub.w	d0,d3
00014952 0A43 000F                  		eori.w	#$F,d3
00014956 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001495A 367C FFF0                  		movea.w	#-$10,a3
0001495E 3C3C 0800                  		move.w	#$800,d6
00014962 7A0D                       		moveq	#$D,d5
00014964 6100 0000                  		bsr.w	FindWall
00014968 301F                       		move.w	(sp)+,d0
0001496A 6100 FE30                  		bsr.w	Sonic_Angle
0001496E 4A41                       		tst.w	d1
00014970 6700                       		beq.s	locret_14934
00014972 6A00                       		bpl.s	loc_14936
00014974 0C41 FFF2                  		cmpi.w	#-$E,d1
00014978 6D00 FDDC                  		blt.w	locret_1470A
0001497C 9368 0008                  		sub.w	d1,8(a0)
00014980                            
00014980                            locret_14934:
00014980 4E75                       		rts	
00014982                            ; ===========================================================================
00014982                            
00014982                            loc_14936:
00014982 0C41 000E                  		cmpi.w	#$E,d1
00014986 6E00                       		bgt.s	loc_14942
00014988                            
00014988                            loc_1493C:
00014988 9368 0008                  		sub.w	d1,8(a0)
0001498C 4E75                       		rts	
0001498E                            ; ===========================================================================
0001498E                            
0001498E                            loc_14942:
0001498E 4A28 0038                  		tst.b	$38(a0)
00014992 66F4                       		bne.s	loc_1493C
00014994 08E8 0001 0022             		bset	#1,$22(a0)
0001499A 08A8 0005 0022             		bclr	#5,$22(a0)
000149A0 117C 0001 001D             		move.b	#1,$1D(a0)
000149A6 4E75                       		rts	
000149A8                            ; End of function Sonic_WalkVertL
000149A8                            
000149A8                            ; ---------------------------------------------------------------------------
000149A8                            ; Subroutine to	find which tile	the object is standing on
000149A8                            ; ---------------------------------------------------------------------------
000149A8                            
000149A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000149A8                            
000149A8                            
000149A8                            Floor_ChkTile:				; XREF: FindFloor; et al
000149A8 3002                       		move.w	d2,d0
000149AA E248                       		lsr.w	#1,d0
000149AC 0240 0380                  		andi.w	#$380,d0
000149B0 3203                       		move.w	d3,d1
000149B2 E049                       		lsr.w	#8,d1
000149B4 0241 007F                  		andi.w	#$7F,d1
000149B8 D041                       		add.w	d1,d0
000149BA 72FF                       		moveq	#-1,d1
000149BC 43F8 A400                  		lea	($FFFFA400).w,a1
000149C0 1231 0000                  		move.b	(a1,d0.w),d1
000149C4 6700                       		beq.s	loc_14996
000149C6 6B00                       		bmi.s	loc_1499A
000149C8 5301                       		subq.b	#1,d1
000149CA 4881                       		ext.w	d1
000149CC EE59                       		ror.w	#7,d1
000149CE 3002                       		move.w	d2,d0
000149D0 D040                       		add.w	d0,d0
000149D2 0240 01E0                  		andi.w	#$1E0,d0
000149D6 D240                       		add.w	d0,d1
000149D8 3003                       		move.w	d3,d0
000149DA E648                       		lsr.w	#3,d0
000149DC 0240 001E                  		andi.w	#$1E,d0
000149E0 D240                       		add.w	d0,d1
000149E2                            
000149E2                            loc_14996:
000149E2 2241                       		movea.l	d1,a1
000149E4 4E75                       		rts	
000149E6                            ; ===========================================================================
000149E6                            
000149E6                            loc_1499A:
000149E6 0241 007F                  		andi.w	#$7F,d1
000149EA 0828 0006 0001             		btst	#6,1(a0)
000149F0 6700                       		beq.s	loc_149B2
000149F2 5241                       		addq.w	#1,d1
000149F4 0C41 0029                  		cmpi.w	#$29,d1
000149F8 6600                       		bne.s	loc_149B2
000149FA 323C 0051                  		move.w	#$51,d1
000149FE                            
000149FE                            loc_149B2:
000149FE 5301                       		subq.b	#1,d1
00014A00 EE59                       		ror.w	#7,d1
00014A02 3002                       		move.w	d2,d0
00014A04 D040                       		add.w	d0,d0
00014A06 0240 01E0                  		andi.w	#$1E0,d0
00014A0A D240                       		add.w	d0,d1
00014A0C 3003                       		move.w	d3,d0
00014A0E E648                       		lsr.w	#3,d0
00014A10 0240 001E                  		andi.w	#$1E,d0
00014A14 D240                       		add.w	d0,d1
00014A16 2241                       		movea.l	d1,a1
00014A18 4E75                       		rts	
00014A1A                            ; End of function Floor_ChkTile
00014A1A                            
00014A1A                            
00014A1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A1A                            
00014A1A                            
00014A1A                            FindFloor:				; XREF: Sonic_AnglePos; et al
00014A1A 618C                       		bsr.s	Floor_ChkTile
00014A1C 3011                       		move.w	(a1),d0
00014A1E 3800                       		move.w	d0,d4
00014A20 0240 07FF                  		andi.w	#$7FF,d0
00014A24 6700                       		beq.s	loc_149DE
00014A26 0B04                       		btst	d5,d4
00014A28 6600                       		bne.s	loc_149EC
00014A2A                            
00014A2A                            loc_149DE:
00014A2A D44B                       		add.w	a3,d2
00014A2C 6100 0000                  		bsr.w	FindFloor2
00014A30 944B                       		sub.w	a3,d2
00014A32 0641 0010                  		addi.w	#$10,d1
00014A36 4E75                       		rts	
00014A38                            ; ===========================================================================
00014A38                            
00014A38                            loc_149EC:
00014A38 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00014A3C 1032 0000                  		move.b	(a2,d0.w),d0
00014A40 0240 00FF                  		andi.w	#$FF,d0
00014A44 67E4                       		beq.s	loc_149DE
00014A46 45F9 0000 0000             		lea	(AngleMap).l,a2
00014A4C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014A50 E948                       		lsl.w	#4,d0
00014A52 3203                       		move.w	d3,d1
00014A54 0804 000B                  		btst	#$B,d4
00014A58 6700                       		beq.s	loc_14A12
00014A5A 4641                       		not.w	d1
00014A5C 4414                       		neg.b	(a4)
00014A5E                            
00014A5E                            loc_14A12:
00014A5E 0804 000C                  		btst	#$C,d4
00014A62 6700                       		beq.s	loc_14A22
00014A64 0614 0040                  		addi.b	#$40,(a4)
00014A68 4414                       		neg.b	(a4)
00014A6A 0414 0040                  		subi.b	#$40,(a4)
00014A6E                            
00014A6E                            loc_14A22:
00014A6E 0241 000F                  		andi.w	#$F,d1
00014A72 D240                       		add.w	d0,d1
00014A74 45F9 0000 0000             		lea	(CollArray1).l,a2
00014A7A 1032 1000                  		move.b	(a2,d1.w),d0
00014A7E 4880                       		ext.w	d0
00014A80 BD44                       		eor.w	d6,d4
00014A82 0804 000C                  		btst	#$C,d4
00014A86 6700                       		beq.s	loc_14A3E
00014A88 4440                       		neg.w	d0
00014A8A                            
00014A8A                            loc_14A3E:
00014A8A 4A40                       		tst.w	d0
00014A8C 679C                       		beq.s	loc_149DE
00014A8E 6B00                       		bmi.s	loc_14A5A
00014A90 0C00 0010                  		cmpi.b	#$10,d0
00014A94 6700                       		beq.s	loc_14A66
00014A96 3202                       		move.w	d2,d1
00014A98 0241 000F                  		andi.w	#$F,d1
00014A9C D041                       		add.w	d1,d0
00014A9E 323C 000F                  		move.w	#$F,d1
00014AA2 9240                       		sub.w	d0,d1
00014AA4 4E75                       		rts	
00014AA6                            ; ===========================================================================
00014AA6                            
00014AA6                            loc_14A5A:
00014AA6 3202                       		move.w	d2,d1
00014AA8 0241 000F                  		andi.w	#$F,d1
00014AAC D041                       		add.w	d1,d0
00014AAE 6A00 FF7A                  		bpl.w	loc_149DE
00014AB2                            
00014AB2                            loc_14A66:
00014AB2 944B                       		sub.w	a3,d2
00014AB4 6100 0000                  		bsr.w	FindFloor2
00014AB8 D44B                       		add.w	a3,d2
00014ABA 0441 0010                  		subi.w	#$10,d1
00014ABE 4E75                       		rts	
00014AC0                            ; End of function FindFloor
00014AC0                            
00014AC0                            
00014AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014AC0                            
00014AC0                            
00014AC0                            FindFloor2:				; XREF: FindFloor
00014AC0 6100 FEE6                  		bsr.w	Floor_ChkTile
00014AC4 3011                       		move.w	(a1),d0
00014AC6 3800                       		move.w	d0,d4
00014AC8 0240 07FF                  		andi.w	#$7FF,d0
00014ACC 6700                       		beq.s	loc_14A86
00014ACE 0B04                       		btst	d5,d4
00014AD0 6600                       		bne.s	loc_14A94
00014AD2                            
00014AD2                            loc_14A86:
00014AD2 323C 000F                  		move.w	#$F,d1
00014AD6 3002                       		move.w	d2,d0
00014AD8 0240 000F                  		andi.w	#$F,d0
00014ADC 9240                       		sub.w	d0,d1
00014ADE 4E75                       		rts	
00014AE0                            ; ===========================================================================
00014AE0                            
00014AE0                            loc_14A94:
00014AE0 2478 F796                  		movea.l	($FFFFF796).w,a2
00014AE4 1032 0000                  		move.b	(a2,d0.w),d0
00014AE8 0240 00FF                  		andi.w	#$FF,d0
00014AEC 67E4                       		beq.s	loc_14A86
00014AEE 45F9 0000 0000             		lea	(AngleMap).l,a2
00014AF4 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014AF8 E948                       		lsl.w	#4,d0
00014AFA 3203                       		move.w	d3,d1
00014AFC 0804 000B                  		btst	#$B,d4
00014B00 6700                       		beq.s	loc_14ABA
00014B02 4641                       		not.w	d1
00014B04 4414                       		neg.b	(a4)
00014B06                            
00014B06                            loc_14ABA:
00014B06 0804 000C                  		btst	#$C,d4
00014B0A 6700                       		beq.s	loc_14ACA
00014B0C 0614 0040                  		addi.b	#$40,(a4)
00014B10 4414                       		neg.b	(a4)
00014B12 0414 0040                  		subi.b	#$40,(a4)
00014B16                            
00014B16                            loc_14ACA:
00014B16 0241 000F                  		andi.w	#$F,d1
00014B1A D240                       		add.w	d0,d1
00014B1C 45F9 0000 0000             		lea	(CollArray1).l,a2
00014B22 1032 1000                  		move.b	(a2,d1.w),d0
00014B26 4880                       		ext.w	d0
00014B28 BD44                       		eor.w	d6,d4
00014B2A 0804 000C                  		btst	#$C,d4
00014B2E 6700                       		beq.s	loc_14AE6
00014B30 4440                       		neg.w	d0
00014B32                            
00014B32                            loc_14AE6:
00014B32 4A40                       		tst.w	d0
00014B34 679C                       		beq.s	loc_14A86
00014B36 6B00                       		bmi.s	loc_14AFC
00014B38 3202                       		move.w	d2,d1
00014B3A 0241 000F                  		andi.w	#$F,d1
00014B3E D041                       		add.w	d1,d0
00014B40 323C 000F                  		move.w	#$F,d1
00014B44 9240                       		sub.w	d0,d1
00014B46 4E75                       		rts	
00014B48                            ; ===========================================================================
00014B48                            
00014B48                            loc_14AFC:
00014B48 3202                       		move.w	d2,d1
00014B4A 0241 000F                  		andi.w	#$F,d1
00014B4E D041                       		add.w	d1,d0
00014B50 6A00 FF80                  		bpl.w	loc_14A86
00014B54 4641                       		not.w	d1
00014B56 4E75                       		rts	
00014B58                            ; End of function FindFloor2
00014B58                            
00014B58                            
00014B58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B58                            
00014B58                            
00014B58                            FindWall:				; XREF: Sonic_WalkVertR; et al
00014B58 6100 FE4E                  		bsr.w	Floor_ChkTile
00014B5C 3011                       		move.w	(a1),d0
00014B5E 3800                       		move.w	d0,d4
00014B60 0240 07FF                  		andi.w	#$7FF,d0
00014B64 6700                       		beq.s	loc_14B1E
00014B66 0B04                       		btst	d5,d4
00014B68 6600                       		bne.s	loc_14B2C
00014B6A                            
00014B6A                            loc_14B1E:
00014B6A D64B                       		add.w	a3,d3
00014B6C 6100 0000                  		bsr.w	FindWall2
00014B70 964B                       		sub.w	a3,d3
00014B72 0641 0010                  		addi.w	#$10,d1
00014B76 4E75                       		rts	
00014B78                            ; ===========================================================================
00014B78                            
00014B78                            loc_14B2C:
00014B78 2478 F796                  		movea.l	($FFFFF796).w,a2
00014B7C 1032 0000                  		move.b	(a2,d0.w),d0
00014B80 0240 00FF                  		andi.w	#$FF,d0
00014B84 67E4                       		beq.s	loc_14B1E
00014B86 45F9 0000 0000             		lea	(AngleMap).l,a2
00014B8C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014B90 E948                       		lsl.w	#4,d0
00014B92 3202                       		move.w	d2,d1
00014B94 0804 000C                  		btst	#$C,d4
00014B98 6700                       		beq.s	loc_14B5A
00014B9A 4641                       		not.w	d1
00014B9C 0614 0040                  		addi.b	#$40,(a4)
00014BA0 4414                       		neg.b	(a4)
00014BA2 0414 0040                  		subi.b	#$40,(a4)
00014BA6                            
00014BA6                            loc_14B5A:
00014BA6 0804 000B                  		btst	#$B,d4
00014BAA 6700                       		beq.s	loc_14B62
00014BAC 4414                       		neg.b	(a4)
00014BAE                            
00014BAE                            loc_14B62:
00014BAE 0241 000F                  		andi.w	#$F,d1
00014BB2 D240                       		add.w	d0,d1
00014BB4 45F9 0000 0000             		lea	(CollArray2).l,a2
00014BBA 1032 1000                  		move.b	(a2,d1.w),d0
00014BBE 4880                       		ext.w	d0
00014BC0 BD44                       		eor.w	d6,d4
00014BC2 0804 000B                  		btst	#$B,d4
00014BC6 6700                       		beq.s	loc_14B7E
00014BC8 4440                       		neg.w	d0
00014BCA                            
00014BCA                            loc_14B7E:
00014BCA 4A40                       		tst.w	d0
00014BCC 679C                       		beq.s	loc_14B1E
00014BCE 6B00                       		bmi.s	loc_14B9A
00014BD0 0C00 0010                  		cmpi.b	#$10,d0
00014BD4 6700                       		beq.s	loc_14BA6
00014BD6 3203                       		move.w	d3,d1
00014BD8 0241 000F                  		andi.w	#$F,d1
00014BDC D041                       		add.w	d1,d0
00014BDE 323C 000F                  		move.w	#$F,d1
00014BE2 9240                       		sub.w	d0,d1
00014BE4 4E75                       		rts	
00014BE6                            ; ===========================================================================
00014BE6                            
00014BE6                            loc_14B9A:
00014BE6 3203                       		move.w	d3,d1
00014BE8 0241 000F                  		andi.w	#$F,d1
00014BEC D041                       		add.w	d1,d0
00014BEE 6A00 FF7A                  		bpl.w	loc_14B1E
00014BF2                            
00014BF2                            loc_14BA6:
00014BF2 964B                       		sub.w	a3,d3
00014BF4 6100 0000                  		bsr.w	FindWall2
00014BF8 D64B                       		add.w	a3,d3
00014BFA 0441 0010                  		subi.w	#$10,d1
00014BFE 4E75                       		rts	
00014C00                            ; End of function FindWall
00014C00                            
00014C00                            
00014C00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C00                            
00014C00                            
00014C00                            FindWall2:				; XREF: FindWall
00014C00 6100 FDA6                  		bsr.w	Floor_ChkTile
00014C04 3011                       		move.w	(a1),d0
00014C06 3800                       		move.w	d0,d4
00014C08 0240 07FF                  		andi.w	#$7FF,d0
00014C0C 6700                       		beq.s	loc_14BC6
00014C0E 0B04                       		btst	d5,d4
00014C10 6600                       		bne.s	loc_14BD4
00014C12                            
00014C12                            loc_14BC6:
00014C12 323C 000F                  		move.w	#$F,d1
00014C16 3003                       		move.w	d3,d0
00014C18 0240 000F                  		andi.w	#$F,d0
00014C1C 9240                       		sub.w	d0,d1
00014C1E 4E75                       		rts	
00014C20                            ; ===========================================================================
00014C20                            
00014C20                            loc_14BD4:
00014C20 2478 F796                  		movea.l	($FFFFF796).w,a2
00014C24 1032 0000                  		move.b	(a2,d0.w),d0
00014C28 0240 00FF                  		andi.w	#$FF,d0
00014C2C 67E4                       		beq.s	loc_14BC6
00014C2E 45F9 0000 0000             		lea	(AngleMap).l,a2
00014C34 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014C38 E948                       		lsl.w	#4,d0
00014C3A 3202                       		move.w	d2,d1
00014C3C 0804 000C                  		btst	#$C,d4
00014C40 6700                       		beq.s	loc_14C02
00014C42 4641                       		not.w	d1
00014C44 0614 0040                  		addi.b	#$40,(a4)
00014C48 4414                       		neg.b	(a4)
00014C4A 0414 0040                  		subi.b	#$40,(a4)
00014C4E                            
00014C4E                            loc_14C02:
00014C4E 0804 000B                  		btst	#$B,d4
00014C52 6700                       		beq.s	loc_14C0A
00014C54 4414                       		neg.b	(a4)
00014C56                            
00014C56                            loc_14C0A:
00014C56 0241 000F                  		andi.w	#$F,d1
00014C5A D240                       		add.w	d0,d1
00014C5C 45F9 0000 0000             		lea	(CollArray2).l,a2
00014C62 1032 1000                  		move.b	(a2,d1.w),d0
00014C66 4880                       		ext.w	d0
00014C68 BD44                       		eor.w	d6,d4
00014C6A 0804 000B                  		btst	#$B,d4
00014C6E 6700                       		beq.s	loc_14C26
00014C70 4440                       		neg.w	d0
00014C72                            
00014C72                            loc_14C26:
00014C72 4A40                       		tst.w	d0
00014C74 679C                       		beq.s	loc_14BC6
00014C76 6B00                       		bmi.s	loc_14C3C
00014C78 3203                       		move.w	d3,d1
00014C7A 0241 000F                  		andi.w	#$F,d1
00014C7E D041                       		add.w	d1,d0
00014C80 323C 000F                  		move.w	#$F,d1
00014C84 9240                       		sub.w	d0,d1
00014C86 4E75                       		rts	
00014C88                            ; ===========================================================================
00014C88                            
00014C88                            loc_14C3C:
00014C88 3203                       		move.w	d3,d1
00014C8A 0241 000F                  		andi.w	#$F,d1
00014C8E D041                       		add.w	d1,d0
00014C90 6A00 FF80                  		bpl.w	loc_14BC6
00014C94 4641                       		not.w	d1
00014C96 4E75                       		rts	
00014C98                            ; End of function FindWall2
00014C98                            
00014C98                            ; ---------------------------------------------------------------------------
00014C98                            ; Unused floor/wall subroutine - logs something	to do with collision
00014C98                            ; ---------------------------------------------------------------------------
00014C98                            
00014C98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C98                            
00014C98                            
00014C98                            FloorLog_Unk:				; XREF: Level
00014C98 4E75                       		rts	
00014C9A                            
00014C9A 43F9 0000 0000             		lea	(CollArray1).l,a1
00014CA0 45F9 0000 0000             		lea	(CollArray1).l,a2
00014CA6 363C 00FF                  		move.w	#$FF,d3
00014CAA                            
00014CAA                            loc_14C5E:
00014CAA 7A10                       		moveq	#$10,d5
00014CAC 343C 000F                  		move.w	#$F,d2
00014CB0                            
00014CB0                            loc_14C64:
00014CB0 7800                       		moveq	#0,d4
00014CB2 323C 000F                  		move.w	#$F,d1
00014CB6                            
00014CB6                            loc_14C6A:
00014CB6 3019                       		move.w	(a1)+,d0
00014CB8 EAA8                       		lsr.l	d5,d0
00014CBA D944                       		addx.w	d4,d4
00014CBC 51C9 FFF8                  		dbf	d1,loc_14C6A
00014CC0                            
00014CC0 34C4                       		move.w	d4,(a2)+
00014CC2 92FC 0020                  		suba.w	#$20,a1
00014CC6 5345                       		subq.w	#1,d5
00014CC8 51CA FFE6                  		dbf	d2,loc_14C64
00014CCC                            
00014CCC D2FC 0020                  		adda.w	#$20,a1
00014CD0 51CB FFD8                  		dbf	d3,loc_14C5E
00014CD4                            
00014CD4 43F9 0000 0000             		lea	(CollArray1).l,a1
00014CDA 45F9 0000 0000             		lea	(CollArray2).l,a2
00014CE0 6100                       		bsr.s	FloorLog_Unk2
00014CE2 43F9 0000 0000             		lea	(CollArray1).l,a1
00014CE8 45F9 0000 0000             		lea	(CollArray1).l,a2
00014CEE                            
00014CEE                            ; End of function FloorLog_Unk
00014CEE                            
00014CEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014CEE                            
00014CEE                            
00014CEE                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00014CEE 363C 0FFF                  		move.w	#$FFF,d3
00014CF2                            
00014CF2                            loc_14CA6:
00014CF2 7400                       		moveq	#0,d2
00014CF4 323C 000F                  		move.w	#$F,d1
00014CF8 3019                       		move.w	(a1)+,d0
00014CFA 6700                       		beq.s	loc_14CD4
00014CFC 6B00                       		bmi.s	loc_14CBE
00014CFE                            
00014CFE                            loc_14CB2:
00014CFE E248                       		lsr.w	#1,d0
00014D00 6400                       		bcc.s	loc_14CB8
00014D02 5202                       		addq.b	#1,d2
00014D04                            
00014D04                            loc_14CB8:
00014D04 51C9 FFF8                  		dbf	d1,loc_14CB2
00014D08                            
00014D08 6000                       		bra.s	loc_14CD6
00014D0A                            ; ===========================================================================
00014D0A                            
00014D0A                            loc_14CBE:
00014D0A 0C40 FFFF                  		cmpi.w	#-1,d0
00014D0E 6700                       		beq.s	loc_14CD0
00014D10                            
00014D10                            loc_14CC4:
00014D10 E348                       		lsl.w	#1,d0
00014D12 6400                       		bcc.s	loc_14CCA
00014D14 5302                       		subq.b	#1,d2
00014D16                            
00014D16                            loc_14CCA:
00014D16 51C9 FFF8                  		dbf	d1,loc_14CC4
00014D1A                            
00014D1A 6000                       		bra.s	loc_14CD6
00014D1C                            ; ===========================================================================
00014D1C                            
00014D1C                            loc_14CD0:
00014D1C 303C 0010                  		move.w	#$10,d0
00014D20                            
00014D20                            loc_14CD4:
00014D20 3400                       		move.w	d0,d2
00014D22                            
00014D22                            loc_14CD6:
00014D22 14C2                       		move.b	d2,(a2)+
00014D24 51CB FFCC                  		dbf	d3,loc_14CA6
00014D28                            
00014D28 4E75                       		rts	
00014D2A                            
00014D2A                            ; End of function FloorLog_Unk2
00014D2A                            
00014D2A                            
00014D2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D2A                            
00014D2A                            
00014D2A                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00014D2A 2628 0008                  		move.l	8(a0),d3
00014D2E 2428 000C                  		move.l	$C(a0),d2
00014D32 3228 0010                  		move.w	$10(a0),d1
00014D36 48C1                       		ext.l	d1
00014D38 E181                       		asl.l	#8,d1
00014D3A D681                       		add.l	d1,d3
00014D3C 3228 0012                  		move.w	$12(a0),d1
00014D40 48C1                       		ext.l	d1
00014D42 E181                       		asl.l	#8,d1
00014D44 D481                       		add.l	d1,d2
00014D46 4842                       		swap	d2
00014D48 4843                       		swap	d3
00014D4A 11C0 F768                  		move.b	d0,($FFFFF768).w
00014D4E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014D52 1200                       		move.b	d0,d1
00014D54 0600 0020                  		addi.b	#$20,d0
00014D58 6A00                       		bpl.s	loc_14D1A
00014D5A 1001                       		move.b	d1,d0
00014D5C 6A00                       		bpl.s	loc_14D14
00014D5E 5300                       		subq.b	#1,d0
00014D60                            
00014D60                            loc_14D14:
00014D60 0600 0020                  		addi.b	#$20,d0
00014D64 6000                       		bra.s	loc_14D24
00014D66                            ; ===========================================================================
00014D66                            
00014D66                            loc_14D1A:
00014D66 1001                       		move.b	d1,d0
00014D68 6A00                       		bpl.s	loc_14D20
00014D6A 5200                       		addq.b	#1,d0
00014D6C                            
00014D6C                            loc_14D20:
00014D6C 0600 001F                  		addi.b	#$1F,d0
00014D70                            
00014D70                            loc_14D24:
00014D70 0200 00C0                  		andi.b	#$C0,d0
00014D74 6700 0000                  		beq.w	loc_14DF0
00014D78 0C00 0080                  		cmpi.b	#$80,d0
00014D7C 6700 0000                  		beq.w	loc_14F7C
00014D80 0201 0038                  		andi.b	#$38,d1
00014D84 6600                       		bne.s	loc_14D3C
00014D86 5042                       		addq.w	#8,d2
00014D88                            
00014D88                            loc_14D3C:
00014D88 0C00 0040                  		cmpi.b	#$40,d0
00014D8C 6700 0000                  		beq.w	loc_1504A
00014D90 6000 0000                  		bra.w	loc_14EBC
00014D94                            
00014D94                            ; End of function Sonic_WalkSpeed
00014D94                            
00014D94                            
00014D94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D94                            
00014D94                            
00014D94                            sub_14D48:				; XREF: Sonic_Jump
00014D94 11C0 F768                  		move.b	d0,($FFFFF768).w
00014D98 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014D9C 0600 0020                  		addi.b	#$20,d0
00014DA0 0200 00C0                  		andi.b	#$C0,d0
00014DA4 0C00 0040                  		cmpi.b	#$40,d0
00014DA8 6700 0000                  		beq.w	loc_14FD6
00014DAC 0C00 0080                  		cmpi.b	#$80,d0
00014DB0 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00014DB4 0C00 00C0                  		cmpi.b	#$C0,d0
00014DB8 6700 0000                  		beq.w	sub_14E50
00014DBC                            
00014DBC                            ; End of function sub_14D48
00014DBC                            
00014DBC                            ; ---------------------------------------------------------------------------
00014DBC                            ; Subroutine to	make Sonic land	on the floor after jumping
00014DBC                            ; ---------------------------------------------------------------------------
00014DBC                            
00014DBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DBC                            
00014DBC                            
00014DBC                            Sonic_HitFloor:				; XREF: Sonic_Floor
00014DBC 3428 000C                  		move.w	$C(a0),d2
00014DC0 3628 0008                  		move.w	8(a0),d3
00014DC4 7000                       		moveq	#0,d0
00014DC6 1028 0016                  		move.b	$16(a0),d0
00014DCA 4880                       		ext.w	d0
00014DCC D440                       		add.w	d0,d2
00014DCE 1028 0017                  		move.b	$17(a0),d0
00014DD2 4880                       		ext.w	d0
00014DD4 D640                       		add.w	d0,d3
00014DD6 49F8 F768                  		lea	($FFFFF768).w,a4
00014DDA 367C 0010                  		movea.w	#$10,a3
00014DDE 3C3C 0000                  		move.w	#0,d6
00014DE2 7A0D                       		moveq	#$D,d5
00014DE4 6100 FC34                  		bsr.w	FindFloor
00014DE8 3F01                       		move.w	d1,-(sp)
00014DEA 3428 000C                  		move.w	$C(a0),d2
00014DEE 3628 0008                  		move.w	8(a0),d3
00014DF2 7000                       		moveq	#0,d0
00014DF4 1028 0016                  		move.b	$16(a0),d0
00014DF8 4880                       		ext.w	d0
00014DFA D440                       		add.w	d0,d2
00014DFC 1028 0017                  		move.b	$17(a0),d0
00014E00 4880                       		ext.w	d0
00014E02 9640                       		sub.w	d0,d3
00014E04 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014E08 367C 0010                  		movea.w	#$10,a3
00014E0C 3C3C 0000                  		move.w	#0,d6
00014E10 7A0D                       		moveq	#$D,d5
00014E12 6100 FC06                  		bsr.w	FindFloor
00014E16 301F                       		move.w	(sp)+,d0
00014E18 143C 0000                  		move.b	#0,d2
00014E1C                            
00014E1C                            loc_14DD0:
00014E1C 1638 F76A                  		move.b	($FFFFF76A).w,d3
00014E20 B240                       		cmp.w	d0,d1
00014E22 6F00                       		ble.s	loc_14DDE
00014E24 1638 F768                  		move.b	($FFFFF768).w,d3
00014E28 C141                       		exg	d0,d1
00014E2A                            
00014E2A                            loc_14DDE:
00014E2A 0803 0000                  		btst	#0,d3
00014E2E 6700                       		beq.s	locret_14DE6
00014E30 1602                       		move.b	d2,d3
00014E32                            
00014E32                            locret_14DE6:
00014E32 4E75                       		rts	
00014E34                            
00014E34                            ; End of function Sonic_HitFloor
00014E34                            
00014E34                            ; ===========================================================================
00014E34 3428 000C                  		move.w	$C(a0),d2
00014E38 3628 0008                  		move.w	8(a0),d3
00014E3C                            
00014E3C                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00014E3C 0642 000A                  		addi.w	#$A,d2
00014E40 49F8 F768                  		lea	($FFFFF768).w,a4
00014E44 367C 0010                  		movea.w	#$10,a3
00014E48 3C3C 0000                  		move.w	#0,d6
00014E4C 7A0E                       		moveq	#$E,d5
00014E4E 6100 FBCA                  		bsr.w	FindFloor
00014E52 143C 0000                  		move.b	#0,d2
00014E56                            
00014E56                            loc_14E0A:				; XREF: sub_14EB4
00014E56 1638 F768                  		move.b	($FFFFF768).w,d3
00014E5A 0803 0000                  		btst	#0,d3
00014E5E 6700                       		beq.s	locret_14E16
00014E60 1602                       		move.b	d2,d3
00014E62                            
00014E62                            locret_14E16:
00014E62 4E75                       		rts	
00014E64                            
00014E64                            ; ---------------------------------------------------------------------------
00014E64                            ; Subroutine allowing objects to interact with the floor
00014E64                            ; ---------------------------------------------------------------------------
00014E64                            
00014E64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E64                            
00014E64                            
00014E64                            ObjHitFloor:
00014E64 3628 0008                  		move.w	8(a0),d3
00014E68                            
00014E68                            ; End of function ObjHitFloor
00014E68                            
00014E68                            
00014E68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E68                            
00014E68                            
00014E68                            ObjHitFloor2:
00014E68 3428 000C                  		move.w	$C(a0),d2
00014E6C 7000                       		moveq	#0,d0
00014E6E 1028 0016                  		move.b	$16(a0),d0
00014E72 4880                       		ext.w	d0
00014E74 D440                       		add.w	d0,d2
00014E76 49F8 F768                  		lea	($FFFFF768).w,a4
00014E7A 18BC 0000                  		move.b	#0,(a4)
00014E7E 367C 0010                  		movea.w	#$10,a3
00014E82 3C3C 0000                  		move.w	#0,d6
00014E86 7A0D                       		moveq	#$D,d5
00014E88 6100 FB90                  		bsr.w	FindFloor
00014E8C 1638 F768                  		move.b	($FFFFF768).w,d3
00014E90 0803 0000                  		btst	#0,d3
00014E94 6700                       		beq.s	locret_14E4E
00014E96 163C 0000                  		move.b	#0,d3
00014E9A                            
00014E9A                            locret_14E4E:
00014E9A 4E75                       		rts	
00014E9C                            ; End of function ObjHitFloor2
00014E9C                            
00014E9C                            
00014E9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E9C                            
00014E9C                            
00014E9C                            sub_14E50:				; XREF: sub_14D48
00014E9C 3428 000C                  		move.w	$C(a0),d2
00014EA0 3628 0008                  		move.w	8(a0),d3
00014EA4 7000                       		moveq	#0,d0
00014EA6 1028 0017                  		move.b	$17(a0),d0
00014EAA 4880                       		ext.w	d0
00014EAC 9440                       		sub.w	d0,d2
00014EAE 1028 0016                  		move.b	$16(a0),d0
00014EB2 4880                       		ext.w	d0
00014EB4 D640                       		add.w	d0,d3
00014EB6 49F8 F768                  		lea	($FFFFF768).w,a4
00014EBA 367C 0010                  		movea.w	#$10,a3
00014EBE 3C3C 0000                  		move.w	#0,d6
00014EC2 7A0E                       		moveq	#$E,d5
00014EC4 6100 FC92                  		bsr.w	FindWall
00014EC8 3F01                       		move.w	d1,-(sp)
00014ECA 3428 000C                  		move.w	$C(a0),d2
00014ECE 3628 0008                  		move.w	8(a0),d3
00014ED2 7000                       		moveq	#0,d0
00014ED4 1028 0017                  		move.b	$17(a0),d0
00014ED8 4880                       		ext.w	d0
00014EDA D440                       		add.w	d0,d2
00014EDC 1028 0016                  		move.b	$16(a0),d0
00014EE0 4880                       		ext.w	d0
00014EE2 D640                       		add.w	d0,d3
00014EE4 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014EE8 367C 0010                  		movea.w	#$10,a3
00014EEC 3C3C 0000                  		move.w	#0,d6
00014EF0 7A0E                       		moveq	#$E,d5
00014EF2 6100 FC64                  		bsr.w	FindWall
00014EF6 301F                       		move.w	(sp)+,d0
00014EF8 143C 00C0                  		move.b	#-$40,d2
00014EFC 6000 FF1E                  		bra.w	loc_14DD0
00014F00                            
00014F00                            ; End of function sub_14E50
00014F00                            
00014F00                            
00014F00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F00                            
00014F00                            
00014F00                            sub_14EB4:				; XREF: Sonic_Floor
00014F00 3428 000C                  		move.w	$C(a0),d2
00014F04 3628 0008                  		move.w	8(a0),d3
00014F08                            
00014F08                            loc_14EBC:
00014F08 0643 000A                  		addi.w	#$A,d3
00014F0C 49F8 F768                  		lea	($FFFFF768).w,a4
00014F10 367C 0010                  		movea.w	#$10,a3
00014F14 3C3C 0000                  		move.w	#0,d6
00014F18 7A0E                       		moveq	#$E,d5
00014F1A 6100 FC3C                  		bsr.w	FindWall
00014F1E 143C 00C0                  		move.b	#-$40,d2
00014F22 6000 FF32                  		bra.w	loc_14E0A
00014F26                            
00014F26                            ; End of function sub_14EB4
00014F26                            
00014F26                            ; ---------------------------------------------------------------------------
00014F26                            ; Subroutine to	detect when an object hits a wall to its right
00014F26                            ; ---------------------------------------------------------------------------
00014F26                            
00014F26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F26                            
00014F26                            
00014F26                            ObjHitWallRight:
00014F26 D668 0008                  		add.w	8(a0),d3
00014F2A 3428 000C                  		move.w	$C(a0),d2
00014F2E 49F8 F768                  		lea	($FFFFF768).w,a4
00014F32 18BC 0000                  		move.b	#0,(a4)
00014F36 367C 0010                  		movea.w	#$10,a3
00014F3A 3C3C 0000                  		move.w	#0,d6
00014F3E 7A0E                       		moveq	#$E,d5
00014F40 6100 FC16                  		bsr.w	FindWall
00014F44 1638 F768                  		move.b	($FFFFF768).w,d3
00014F48 0803 0000                  		btst	#0,d3
00014F4C 6700                       		beq.s	locret_14F06
00014F4E 163C 00C0                  		move.b	#-$40,d3
00014F52                            
00014F52                            locret_14F06:
00014F52 4E75                       		rts	
00014F54                            
00014F54                            ; End of function ObjHitWallRight
00014F54                            
00014F54                            ; ---------------------------------------------------------------------------
00014F54                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00014F54                            ; touches them
00014F54                            ; ---------------------------------------------------------------------------
00014F54                            
00014F54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F54                            
00014F54                            
00014F54                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00014F54 3428 000C                  		move.w	$C(a0),d2
00014F58 3628 0008                  		move.w	8(a0),d3
00014F5C 7000                       		moveq	#0,d0
00014F5E 1028 0016                  		move.b	$16(a0),d0
00014F62 4880                       		ext.w	d0
00014F64 9440                       		sub.w	d0,d2
00014F66 0A42 000F                  		eori.w	#$F,d2
00014F6A 1028 0017                  		move.b	$17(a0),d0
00014F6E 4880                       		ext.w	d0
00014F70 D640                       		add.w	d0,d3
00014F72 49F8 F768                  		lea	($FFFFF768).w,a4
00014F76 367C FFF0                  		movea.w	#-$10,a3
00014F7A 3C3C 1000                  		move.w	#$1000,d6
00014F7E 7A0E                       		moveq	#$E,d5
00014F80 6100 FA98                  		bsr.w	FindFloor
00014F84 3F01                       		move.w	d1,-(sp)
00014F86 3428 000C                  		move.w	$C(a0),d2
00014F8A 3628 0008                  		move.w	8(a0),d3
00014F8E 7000                       		moveq	#0,d0
00014F90 1028 0016                  		move.b	$16(a0),d0
00014F94 4880                       		ext.w	d0
00014F96 9440                       		sub.w	d0,d2
00014F98 0A42 000F                  		eori.w	#$F,d2
00014F9C 1028 0017                  		move.b	$17(a0),d0
00014FA0 4880                       		ext.w	d0
00014FA2 9640                       		sub.w	d0,d3
00014FA4 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014FA8 367C FFF0                  		movea.w	#-$10,a3
00014FAC 3C3C 1000                  		move.w	#$1000,d6
00014FB0 7A0E                       		moveq	#$E,d5
00014FB2 6100 FA66                  		bsr.w	FindFloor
00014FB6 301F                       		move.w	(sp)+,d0
00014FB8 143C 0080                  		move.b	#-$80,d2
00014FBC 6000 FE5E                  		bra.w	loc_14DD0
00014FC0                            ; End of function Sonic_DontRunOnWalls
00014FC0                            
00014FC0                            ; ===========================================================================
00014FC0 3428 000C                  		move.w	$C(a0),d2
00014FC4 3628 0008                  		move.w	8(a0),d3
00014FC8                            
00014FC8                            loc_14F7C:
00014FC8 0442 000A                  		subi.w	#$A,d2
00014FCC 0A42 000F                  		eori.w	#$F,d2
00014FD0 49F8 F768                  		lea	($FFFFF768).w,a4
00014FD4 367C FFF0                  		movea.w	#-$10,a3
00014FD8 3C3C 1000                  		move.w	#$1000,d6
00014FDC 7A0E                       		moveq	#$E,d5
00014FDE 6100 FA3A                  		bsr.w	FindFloor
00014FE2 143C 0080                  		move.b	#-$80,d2
00014FE6 6000 FE6E                  		bra.w	loc_14E0A
00014FEA                            
00014FEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FEA                            
00014FEA                            
00014FEA                            ObjHitCeiling:
00014FEA 3428 000C                  		move.w	$C(a0),d2
00014FEE 3628 0008                  		move.w	8(a0),d3
00014FF2 7000                       		moveq	#0,d0
00014FF4 1028 0016                  		move.b	$16(a0),d0
00014FF8 4880                       		ext.w	d0
00014FFA 9440                       		sub.w	d0,d2
00014FFC 0A42 000F                  		eori.w	#$F,d2
00015000 49F8 F768                  		lea	($FFFFF768).w,a4
00015004 367C FFF0                  		movea.w	#-$10,a3
00015008 3C3C 1000                  		move.w	#$1000,d6
0001500C 7A0E                       		moveq	#$E,d5
0001500E 6100 FA0A                  		bsr.w	FindFloor
00015012 1638 F768                  		move.b	($FFFFF768).w,d3
00015016 0803 0000                  		btst	#0,d3
0001501A 6700                       		beq.s	locret_14FD4
0001501C 163C 0080                  		move.b	#-$80,d3
00015020                            
00015020                            locret_14FD4:
00015020 4E75                       		rts	
00015022                            ; End of function ObjHitCeiling
00015022                            
00015022                            ; ===========================================================================
00015022                            
00015022                            loc_14FD6:				; XREF: sub_14D48
00015022 3428 000C                  		move.w	$C(a0),d2
00015026 3628 0008                  		move.w	8(a0),d3
0001502A 7000                       		moveq	#0,d0
0001502C 1028 0017                  		move.b	$17(a0),d0
00015030 4880                       		ext.w	d0
00015032 9440                       		sub.w	d0,d2
00015034 1028 0016                  		move.b	$16(a0),d0
00015038 4880                       		ext.w	d0
0001503A 9640                       		sub.w	d0,d3
0001503C 0A43 000F                  		eori.w	#$F,d3
00015040 49F8 F768                  		lea	($FFFFF768).w,a4
00015044 367C FFF0                  		movea.w	#-$10,a3
00015048 3C3C 0800                  		move.w	#$800,d6
0001504C 7A0E                       		moveq	#$E,d5
0001504E 6100 FB08                  		bsr.w	FindWall
00015052 3F01                       		move.w	d1,-(sp)
00015054 3428 000C                  		move.w	$C(a0),d2
00015058 3628 0008                  		move.w	8(a0),d3
0001505C 7000                       		moveq	#0,d0
0001505E 1028 0017                  		move.b	$17(a0),d0
00015062 4880                       		ext.w	d0
00015064 D440                       		add.w	d0,d2
00015066 1028 0016                  		move.b	$16(a0),d0
0001506A 4880                       		ext.w	d0
0001506C 9640                       		sub.w	d0,d3
0001506E 0A43 000F                  		eori.w	#$F,d3
00015072 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015076 367C FFF0                  		movea.w	#-$10,a3
0001507A 3C3C 0800                  		move.w	#$800,d6
0001507E 7A0E                       		moveq	#$E,d5
00015080 6100 FAD6                  		bsr.w	FindWall
00015084 301F                       		move.w	(sp)+,d0
00015086 143C 0040                  		move.b	#$40,d2
0001508A 6000 FD90                  		bra.w	loc_14DD0
0001508E                            
0001508E                            ; ---------------------------------------------------------------------------
0001508E                            ; Subroutine to	stop Sonic when	he jumps at a wall
0001508E                            ; ---------------------------------------------------------------------------
0001508E                            
0001508E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001508E                            
0001508E                            
0001508E                            Sonic_HitWall:				; XREF: Sonic_Floor
0001508E 3428 000C                  		move.w	$C(a0),d2
00015092 3628 0008                  		move.w	8(a0),d3
00015096                            
00015096                            loc_1504A:
00015096 0443 000A                  		subi.w	#$A,d3
0001509A 0A43 000F                  		eori.w	#$F,d3
0001509E 49F8 F768                  		lea	($FFFFF768).w,a4
000150A2 367C FFF0                  		movea.w	#-$10,a3
000150A6 3C3C 0800                  		move.w	#$800,d6
000150AA 7A0E                       		moveq	#$E,d5
000150AC 6100 FAAA                  		bsr.w	FindWall
000150B0 143C 0040                  		move.b	#$40,d2
000150B4 6000 FDA0                  		bra.w	loc_14E0A
000150B8                            ; End of function Sonic_HitWall
000150B8                            
000150B8                            ; ---------------------------------------------------------------------------
000150B8                            ; Subroutine to	detect when an object hits a wall to its left
000150B8                            ; ---------------------------------------------------------------------------
000150B8                            
000150B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150B8                            
000150B8                            
000150B8                            ObjHitWallLeft:
000150B8 D668 0008                  		add.w	8(a0),d3
000150BC 3428 000C                  		move.w	$C(a0),d2
000150C0 49F8 F768                  		lea	($FFFFF768).w,a4
000150C4 18BC 0000                  		move.b	#0,(a4)
000150C8 367C FFF0                  		movea.w	#-$10,a3
000150CC 3C3C 0800                  		move.w	#$800,d6
000150D0 7A0E                       		moveq	#$E,d5
000150D2 6100 FA84                  		bsr.w	FindWall
000150D6 1638 F768                  		move.b	($FFFFF768).w,d3
000150DA 0803 0000                  		btst	#0,d3
000150DE 6700                       		beq.s	locret_15098
000150E0 163C 0040                  		move.b	#$40,d3
000150E4                            
000150E4                            locret_15098:
000150E4 4E75                       		rts	
000150E6                            ; End of function ObjHitWallLeft
000150E6                            
000150E6                            ; ===========================================================================
000150E6                            ; ---------------------------------------------------------------------------
000150E6                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
000150E6                            ; ---------------------------------------------------------------------------
000150E6                            
000150E6                            Obj66:					; XREF: Obj_Index
000150E6 7000                       		moveq	#0,d0
000150E8 1028 0024                  		move.b	$24(a0),d0
000150EC 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
000150F0 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
000150F4                            ; ===========================================================================
000150F4 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
000150F6 0000                       		dc.w Obj66_Action-Obj66_Index
000150F8 0000                       		dc.w Obj66_Display-Obj66_Index
000150FA 0000                       		dc.w Obj66_Release-Obj66_Index
000150FC                            ; ===========================================================================
000150FC                            
000150FC                            Obj66_Main:				; XREF: Obj66_Index
000150FC 5428 0024                  		addq.b	#2,$24(a0)
00015100 323C 0001                  		move.w	#1,d1
00015104 2248                       		movea.l	a0,a1
00015106 6000                       		bra.s	Obj66_MakeItem
00015108                            ; ===========================================================================
00015108                            
00015108                            Obj66_Loop:
00015108 6100 8A42                  		bsr.w	SingleObjLoad
0001510C 6600                       		bne.s	loc_150FE
0001510E 12BC 0066                  		move.b	#$66,0(a1)
00015112 5829 0024                  		addq.b	#4,$24(a1)
00015116 3368 0008 0008             		move.w	8(a0),8(a1)
0001511C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015122 137C 0003 0018             		move.b	#3,$18(a1)
00015128 137C 0010 001A             		move.b	#$10,$1A(a1)
0001512E                            
0001512E                            Obj66_MakeItem:				; XREF: Obj66_Main
0001512E 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015136 337C 4348 0002             		move.w	#$4348,2(a1)
0001513C 0029 0004 0001             		ori.b	#4,1(a1)
00015142 137C 0038 0019             		move.b	#$38,$19(a1)
00015148                            
00015148                            loc_150FE:
00015148 51C9 FFBE                  		dbf	d1,Obj66_Loop
0001514C                            
0001514C 117C 0030 0019             		move.b	#$30,$19(a0)
00015152 117C 0004 0018             		move.b	#4,$18(a0)
00015158 317C 003C 0030             		move.w	#$3C,$30(a0)
0001515E 117C 0001 0034             		move.b	#1,$34(a0)
00015164 1168 0028 0038             		move.b	$28(a0),$38(a0)
0001516A                            
0001516A                            Obj66_Action:				; XREF: Obj66_Index
0001516A 6100 0000                  		bsr.w	Obj66_ChkSwitch
0001516E 4A28 0001                  		tst.b	1(a0)
00015172 6A00 0000                  		bpl.w	Obj66_Display
00015176 323C 0030                  		move.w	#$30,d1
0001517A 3401                       		move.w	d1,d2
0001517C 3602                       		move.w	d2,d3
0001517E 5243                       		addq.w	#1,d3
00015180 3828 0008                  		move.w	8(a0),d4
00015184 6100 A900                  		bsr.w	SolidObject
00015188 0828 0005 0022             		btst	#5,$22(a0)
0001518E 6700 0000                  		beq.w	Obj66_Display
00015192 43F8 D000                  		lea	($FFFFD000).w,a1
00015196 720E                       		moveq	#$E,d1
00015198 3029 0008                  		move.w	8(a1),d0
0001519C B068 0008                  		cmp.w	8(a0),d0
000151A0 6500                       		bcs.s	Obj66_GrabSonic
000151A2 7207                       		moveq	#7,d1
000151A4                            
000151A4                            Obj66_GrabSonic:
000151A4 B228 001A                  		cmp.b	$1A(a0),d1
000151A8 6600                       		bne.s	Obj66_Display
000151AA 1141 0032                  		move.b	d1,$32(a0)
000151AE 5828 0024                  		addq.b	#4,$24(a0)
000151B2 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000151B8 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
000151BE 337C 0800 0014             		move.w	#$800,$14(a1)
000151C4 337C 0000 0010             		move.w	#0,$10(a1)
000151CA 337C 0000 0012             		move.w	#0,$12(a1)
000151D0 08A8 0005 0022             		bclr	#5,$22(a0)
000151D6 08A9 0005 0022             		bclr	#5,$22(a1)
000151DC 08E9 0001 0022             		bset	#1,$22(a1)
000151E2 3429 0008                  		move.w	8(a1),d2
000151E6 3629 000C                  		move.w	$C(a1),d3
000151EA 6100 0000                  		bsr.w	Obj66_ChgPos
000151EE D569 0008                  		add.w	d2,8(a1)
000151F2 D769 000C                  		add.w	d3,$C(a1)
000151F6 E0E9 0008                  		asr	8(a1)
000151FA E0E9 000C                  		asr	$C(a1)
000151FE                            
000151FE                            Obj66_Display:				; XREF: Obj66_Index
000151FE 6000 A55E                  		bra.w	MarkObjGone
00015202                            ; ===========================================================================
00015202                            
00015202                            Obj66_Release:				; XREF: Obj66_Index
00015202 1028 001A                  		move.b	$1A(a0),d0
00015206 0C00 0004                  		cmpi.b	#4,d0
0001520A 6700                       		beq.s	loc_151C8
0001520C 0C00 0007                  		cmpi.b	#7,d0
00015210 6600                       		bne.s	loc_151F8
00015212                            
00015212                            loc_151C8:
00015212 B028 0032                  		cmp.b	$32(a0),d0
00015216 6700                       		beq.s	loc_151F8
00015218 43F8 D000                  		lea	($FFFFD000).w,a1
0001521C 337C 0000 0010             		move.w	#0,$10(a1)
00015222 337C 0800 0012             		move.w	#$800,$12(a1)
00015228 0C00 0004                  		cmpi.b	#4,d0
0001522C 6700                       		beq.s	loc_151F0
0001522E 337C 0800 0010             		move.w	#$800,$10(a1)
00015234 337C 0800 0012             		move.w	#$800,$12(a1)
0001523A                            
0001523A                            loc_151F0:
0001523A 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
0001523E 5928 0024                  		subq.b	#4,$24(a0)
00015242                            
00015242                            loc_151F8:
00015242 6100                       		bsr.s	Obj66_ChkSwitch
00015244 6100                       		bsr.s	Obj66_ChgPos
00015246 6000 A516                  		bra.w	MarkObjGone
0001524A                            
0001524A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001524A                            
0001524A                            
0001524A                            Obj66_ChkSwitch:			; XREF: Obj66_Action
0001524A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001524E 7000                       		moveq	#0,d0
00015250 1028 0038                  		move.b	$38(a0),d0
00015254 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
0001525A 6700                       		beq.s	loc_15224	; if not, branch
0001525C 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015260 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015262 4428 0034                  		neg.b	$34(a0)
00015266 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
0001526C 6000                       		bra.s	Obj66_Animate
0001526E                            ; ===========================================================================
0001526E                            
0001526E                            loc_15224:
0001526E 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015272                            
00015272                            Obj66_Animate:
00015272 5328 001E                  		subq.b	#1,$1E(a0)
00015276 6A00                       		bpl.s	locret_15246
00015278 117C 0007 001E             		move.b	#7,$1E(a0)
0001527E 1228 0034                  		move.b	$34(a0),d1
00015282 1028 001A                  		move.b	$1A(a0),d0
00015286 D001                       		add.b	d1,d0
00015288 0200 000F                  		andi.b	#$F,d0
0001528C 1140 001A                  		move.b	d0,$1A(a0)
00015290                            
00015290                            locret_15246:
00015290 4E75                       		rts	
00015292                            ; End of function Obj66_ChkSwitch
00015292                            
00015292                            
00015292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015292                            
00015292                            
00015292                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015292 43F8 D000                  		lea	($FFFFD000).w,a1
00015296 7000                       		moveq	#0,d0
00015298 1028 001A                  		move.b	$1A(a0),d0
0001529C D040                       		add.w	d0,d0
0001529E 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
000152A2 101A                       		move.b	(a2)+,d0
000152A4 4880                       		ext.w	d0
000152A6 D068 0008                  		add.w	8(a0),d0
000152AA 3340 0008                  		move.w	d0,8(a1)
000152AE 101A                       		move.b	(a2)+,d0
000152B0 4880                       		ext.w	d0
000152B2 D068 000C                  		add.w	$C(a0),d0
000152B6 3340 000C                  		move.w	d0,$C(a1)
000152BA 4E75                       		rts	
000152BC                            ; End of function Obj66_ChgPos
000152BC                            
000152BC                            ; ===========================================================================
000152BC E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
000152C0 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
000152C4 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
000152C8 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
000152CC 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
000152D0 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
000152D4 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
000152D8 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
000152DC                            ; ---------------------------------------------------------------------------
000152DC                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000152DC                            ; ---------------------------------------------------------------------------
000152DC                            Map_obj66:
000152DC                            	include "_maps\obj66.asm"
000152DC                            ; ---------------------------------------------------------------------------
000152DC                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000152DC                            ; ---------------------------------------------------------------------------
000152DC 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
000152E0 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
000152E4 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
000152E8 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
000152EC 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
000152F0 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
000152F4 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
000152F8 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000152FC 0000                       		dc.w byte_154A4-Map_obj66
000152FE 06                         byte_152B4:	dc.b 6
000152FF E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015304 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015309 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
0001530E E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015313 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015318 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
0001531D 06                         byte_152D3:	dc.b 6
0001531E F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015323 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015328 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
0001532D F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015332 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015337 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
0001533C 06                         byte_152F2:	dc.b 6
0001533D 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015342 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015347 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
0001534C 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015351 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015356 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
0001535B 06                         byte_15311:	dc.b 6
0001535C 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015361 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015366 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
0001536B 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015370 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015375 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
0001537A 06                         byte_15330:	dc.b 6
0001537B 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015380 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015385 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
0001538A 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
0001538F 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015394 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015399 06                         byte_1534F:	dc.b 6
0001539A 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
0001539F 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
000153A4 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
000153A9 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
000153AE 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
000153B3 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
000153B8 06                         byte_1536E:	dc.b 6
000153B9 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
000153BE 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
000153C3 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
000153C8 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
000153CD 180A 1000 00               		dc.b $18, $A, $10, 0, 0
000153D2 180A 1800 18               		dc.b $18, $A, $18, 0, $18
000153D7 06                         byte_1538D:	dc.b 6
000153D8 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000153DD F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000153E2 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000153E7 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000153EC 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000153F1 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000153F6 06                         byte_153AC:	dc.b 6
000153F7 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000153FC 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015401 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015406 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
0001540B 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015410 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015415 06                         byte_153CB:	dc.b 6
00015416 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
0001541B E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015420 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015425 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
0001542A F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
0001542F F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015434 06                         byte_153EA:	dc.b 6
00015435 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
0001543A E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
0001543F D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015444 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015449 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
0001544E E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015453 06                         byte_15409:	dc.b 6
00015454 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015459 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
0001545E CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015463 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015468 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
0001546D E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015472 06                         byte_15428:	dc.b 6
00015473 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015478 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
0001547D C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015482 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015487 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
0001548C E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015491 06                         byte_15447:	dc.b 6
00015492 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015497 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
0001549C CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
000154A1 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
000154A6 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
000154AB E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
000154B0 06                         byte_15466:	dc.b 6
000154B1 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
000154B6 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
000154BB D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
000154C0 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
000154C5 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
000154CA E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
000154CF 06                         byte_15485:	dc.b 6
000154D0 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
000154D5 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
000154DA DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000154DF DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000154E4 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000154E9 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000154EE 0C                         byte_154A4:	dc.b $C
000154EF C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000154F4 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000154F9 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000154FE C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015503 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015508 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
0001550D 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015512 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015517 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
0001551C 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015521 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015526 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
0001552C 00                         		even
0001552C 00                         		even
0001552C                            
0001552C                            ; ===========================================================================
0001552C                            ; ---------------------------------------------------------------------------
0001552C                            ; Object 67 - disc that	you run	around (SBZ)
0001552C                            ; ---------------------------------------------------------------------------
0001552C                            
0001552C                            Obj67:					; XREF: Obj_Index
0001552C 7000                       		moveq	#0,d0
0001552E 1028 0024                  		move.b	$24(a0),d0
00015532 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015536 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
0001553A                            ; ===========================================================================
0001553A 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
0001553C 0000                       		dc.w Obj67_Action-Obj67_Index
0001553E                            ; ===========================================================================
0001553E                            
0001553E                            Obj67_Main:				; XREF: Obj67_Index
0001553E 5428 0024                  		addq.b	#2,$24(a0)
00015542 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
0001554A 317C C344 0002             		move.w	#$C344,2(a0)
00015550 117C 0004 0001             		move.b	#4,1(a0)
00015556 117C 0004 0018             		move.b	#4,$18(a0)
0001555C 117C 0008 0019             		move.b	#8,$19(a0)
00015562 3168 0008 0032             		move.w	8(a0),$32(a0)
00015568 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001556E 117C 0018 0034             		move.b	#$18,$34(a0)
00015574 117C 0048 0038             		move.b	#$48,$38(a0)
0001557A 1228 0028                  		move.b	$28(a0),d1	; get object type
0001557E 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015582 6700                       		beq.s	loc_15546
00015584 117C 0010 0034             		move.b	#$10,$34(a0)
0001558A 117C 0038 0038             		move.b	#$38,$38(a0)
00015590                            
00015590                            loc_15546:
00015590 1228 0028                  		move.b	$28(a0),d1	; get object type
00015594 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015598 4881                       		ext.w	d1
0001559A E741                       		asl.w	#3,d1
0001559C 3141 0036                  		move.w	d1,$36(a0)
000155A0 1028 0022                  		move.b	$22(a0),d0
000155A4 E418                       		ror.b	#2,d0
000155A6 0200 00C0                  		andi.b	#-$40,d0
000155AA 1140 0026                  		move.b	d0,$26(a0)
000155AE                            
000155AE                            Obj67_Action:				; XREF: Obj67_Index
000155AE 6100 0000                  		bsr.w	Obj67_MoveSonic
000155B2 6100 0000                  		bsr.w	Obj67_MoveSpot
000155B6 6000 0000                  		bra.w	Obj67_ChkDel
000155BA                            ; ===========================================================================
000155BA                            
000155BA                            Obj67_MoveSonic:			; XREF: Obj67_Action
000155BA 7400                       		moveq	#0,d2
000155BC 1428 0038                  		move.b	$38(a0),d2
000155C0 3602                       		move.w	d2,d3
000155C2 D643                       		add.w	d3,d3
000155C4 43F8 D000                  		lea	($FFFFD000).w,a1
000155C8 3029 0008                  		move.w	8(a1),d0
000155CC 9068 0032                  		sub.w	$32(a0),d0
000155D0 D042                       		add.w	d2,d0
000155D2 B043                       		cmp.w	d3,d0
000155D4 6400                       		bcc.s	loc_155A8
000155D6 3229 000C                  		move.w	$C(a1),d1
000155DA 9268 0030                  		sub.w	$30(a0),d1
000155DE D242                       		add.w	d2,d1
000155E0 B243                       		cmp.w	d3,d1
000155E2 6400                       		bcc.s	loc_155A8
000155E4 0829 0001 0022             		btst	#1,$22(a1)
000155EA 6700                       		beq.s	loc_155B8
000155EC 4228 003A                  		clr.b	$3A(a0)
000155F0 4E75                       		rts	
000155F2                            ; ===========================================================================
000155F2                            
000155F2                            loc_155A8:
000155F2 4A28 003A                  		tst.b	$3A(a0)
000155F6 6700                       		beq.s	locret_155B6
000155F8 4229 0038                  		clr.b	$38(a1)
000155FC 4228 003A                  		clr.b	$3A(a0)
00015600                            
00015600                            locret_155B6:
00015600 4E75                       		rts	
00015602                            ; ===========================================================================
00015602                            
00015602                            loc_155B8:
00015602 4A28 003A                  		tst.b	$3A(a0)
00015606 6600                       		bne.s	loc_155E2
00015608 117C 0001 003A             		move.b	#1,$3A(a0)
0001560E 0829 0002 0022             		btst	#2,$22(a1)
00015614 6600                       		bne.s	loc_155D0
00015616 4229 001C                  		clr.b	$1C(a1)
0001561A                            
0001561A                            loc_155D0:
0001561A 08A9 0005 0022             		bclr	#5,$22(a1)
00015620 137C 0001 001D             		move.b	#1,$1D(a1)
00015626 137C 0001 0038             		move.b	#1,$38(a1)
0001562C                            
0001562C                            loc_155E2:
0001562C 3029 0014                  		move.w	$14(a1),d0
00015630 4A68 0036                  		tst.w	$36(a0)
00015634 6A00                       		bpl.s	loc_15608
00015636 0C40 FC00                  		cmpi.w	#-$400,d0
0001563A 6F00                       		ble.s	loc_155FA
0001563C 337C FC00 0014             		move.w	#-$400,$14(a1)
00015642 4E75                       		rts	
00015644                            ; ===========================================================================
00015644                            
00015644                            loc_155FA:
00015644 0C40 F100                  		cmpi.w	#-$F00,d0
00015648 6C00                       		bge.s	locret_15606
0001564A 337C F100 0014             		move.w	#-$F00,$14(a1)
00015650                            
00015650                            locret_15606:
00015650 4E75                       		rts	
00015652                            ; ===========================================================================
00015652                            
00015652                            loc_15608:
00015652 0C40 0400                  		cmpi.w	#$400,d0
00015656 6C00                       		bge.s	loc_15616
00015658 337C 0400 0014             		move.w	#$400,$14(a1)
0001565E 4E75                       		rts	
00015660                            ; ===========================================================================
00015660                            
00015660                            loc_15616:
00015660 0C40 0F00                  		cmpi.w	#$F00,d0
00015664 6F00                       		ble.s	locret_15622
00015666 337C 0F00 0014             		move.w	#$F00,$14(a1)
0001566C                            
0001566C                            locret_15622:
0001566C 4E75                       		rts	
0001566E                            ; ===========================================================================
0001566E                            
0001566E                            Obj67_MoveSpot:				; XREF: Obj67_Action
0001566E 3028 0036                  		move.w	$36(a0),d0
00015672 D168 0026                  		add.w	d0,$26(a0)
00015676 1028 0026                  		move.b	$26(a0),d0
0001567A 4EB9 0000 29DA             		jsr	(CalcSine).l
00015680 3428 0030                  		move.w	$30(a0),d2
00015684 3628 0032                  		move.w	$32(a0),d3
00015688 7800                       		moveq	#0,d4
0001568A 1828 0034                  		move.b	$34(a0),d4
0001568E E14C                       		lsl.w	#8,d4
00015690 2A04                       		move.l	d4,d5
00015692 C9C0                       		muls.w	d0,d4
00015694 4844                       		swap	d4
00015696 CBC1                       		muls.w	d1,d5
00015698 4845                       		swap	d5
0001569A D842                       		add.w	d2,d4
0001569C DA43                       		add.w	d3,d5
0001569E 3144 000C                  		move.w	d4,$C(a0)
000156A2 3145 0008                  		move.w	d5,8(a0)
000156A6 4E75                       		rts	
000156A8                            ; ===========================================================================
000156A8                            
000156A8                            Obj67_ChkDel:				; XREF: Obj67_Action
000156A8 3028 0032                  		move.w	$32(a0),d0
000156AC 0240 FF80                  		andi.w	#-$80,d0
000156B0 3238 F700                  		move.w	($FFFFF700).w,d1
000156B4 0441 0080                  		subi.w	#$80,d1
000156B8 0241 FF80                  		andi.w	#-$80,d1
000156BC 9041                       		sub.w	d1,d0
000156BE 0C40 0280                  		cmpi.w	#$280,d0
000156C2 6200                       		bhi.s	Obj67_Delete
000156C4 4EF9 0000 D6C6             		jmp	DisplaySprite
000156CA                            ; ===========================================================================
000156CA                            
000156CA                            Obj67_Delete:
000156CA 4EFA 8036                  		jmp	DeleteObject
000156CE                            ; ===========================================================================
000156CE                            ; ---------------------------------------------------------------------------
000156CE                            ; Sprite mappings - disc that you run around (SBZ)
000156CE                            ; (It's just a small blob that moves around in a circle. The disc itself is
000156CE                            ; part of the level tiles.)
000156CE                            ; ---------------------------------------------------------------------------
000156CE                            Map_obj67:
000156CE                            	include "_maps\obj67.asm"
000156CE                            ; ---------------------------------------------------------------------------
000156CE                            ; Sprite mappings - disc that you run around (SBZ)
000156CE                            ; (It's just a small blob that moves around in a circle. The disc itself is
000156CE                            ; part of the level tiles.)
000156CE                            ; ---------------------------------------------------------------------------
000156CE 0000                       		dc.w byte_15688-Map_obj67
000156D0 01                         byte_15688:	dc.b 1
000156D1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000156D6                            		even
000156D6                            		even
000156D6                            
000156D6                            ; ===========================================================================
000156D6                            ; ---------------------------------------------------------------------------
000156D6                            ; Object 68 - conveyor belts (SBZ)
000156D6                            ; ---------------------------------------------------------------------------
000156D6                            
000156D6                            Obj68:					; XREF: Obj_Index
000156D6 7000                       		moveq	#0,d0
000156D8 1028 0024                  		move.b	$24(a0),d0
000156DC 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000156E0 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000156E4                            ; ===========================================================================
000156E4 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000156E6 0000                       		dc.w Obj68_Action-Obj68_Index
000156E8                            ; ===========================================================================
000156E8                            
000156E8                            Obj68_Main:				; XREF: Obj68_Index
000156E8 5428 0024                  		addq.b	#2,$24(a0)
000156EC 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000156F2 1228 0028                  		move.b	$28(a0),d1	; get object type
000156F6 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000156FA 6700                       		beq.s	loc_156BA	; if zero, branch
000156FC 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015702                            
00015702                            loc_156BA:
00015702 1228 0028                  		move.b	$28(a0),d1	; get object type
00015706 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001570A 4881                       		ext.w	d1
0001570C E841                       		asr.w	#4,d1
0001570E 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015712                            
00015712                            Obj68_Action:				; XREF: Obj68_Index
00015712 6100                       		bsr.s	Obj68_MoveSonic
00015714 3028 0008                  		move.w	8(a0),d0
00015718 0240 FF80                  		andi.w	#$FF80,d0
0001571C 3238 F700                  		move.w	($FFFFF700).w,d1
00015720 0441 0080                  		subi.w	#$80,d1
00015724 0241 FF80                  		andi.w	#$FF80,d1
00015728 9041                       		sub.w	d1,d0
0001572A 0C40 0280                  		cmpi.w	#$280,d0
0001572E 6200                       		bhi.s	Obj68_Delete
00015730 4E75                       		rts	
00015732                            ; ===========================================================================
00015732                            
00015732                            Obj68_Delete:
00015732 4EF9 0000 D702             		jmp	DeleteObject
00015738                            ; ===========================================================================
00015738                            
00015738                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015738 7400                       		moveq	#0,d2
0001573A 1428 0038                  		move.b	$38(a0),d2
0001573E 3602                       		move.w	d2,d3
00015740 D643                       		add.w	d3,d3
00015742 43F8 D000                  		lea	($FFFFD000).w,a1
00015746 3029 0008                  		move.w	8(a1),d0
0001574A 9068 0008                  		sub.w	8(a0),d0
0001574E D042                       		add.w	d2,d0
00015750 B043                       		cmp.w	d3,d0
00015752 6400                       		bcc.s	locret_1572E
00015754 3229 000C                  		move.w	$C(a1),d1
00015758 9268 000C                  		sub.w	$C(a0),d1
0001575C 0641 0030                  		addi.w	#$30,d1
00015760 0C41 0030                  		cmpi.w	#$30,d1
00015764 6400                       		bcc.s	locret_1572E
00015766 0829 0001 0022             		btst	#1,$22(a1)
0001576C 6600                       		bne.s	locret_1572E
0001576E 3028 0036                  		move.w	$36(a0),d0
00015772 D169 0008                  		add.w	d0,8(a1)
00015776                            
00015776                            locret_1572E:
00015776 4E75                       		rts	
00015778                            
00015778                            ; ===========================================================================
00015778                            ; ---------------------------------------------------------------------------
00015778                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015778                            ; ---------------------------------------------------------------------------
00015778                            
00015778                            Obj69:					; XREF: Obj_Index
00015778 7000                       		moveq	#0,d0
0001577A 1028 0024                  		move.b	$24(a0),d0
0001577E 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015782 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015786                            ; ===========================================================================
00015786 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015788 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
0001578A 0000                       		dc.w Obj69_Spinner-Obj69_Index
0001578C                            ; ===========================================================================
0001578C                            
0001578C                            Obj69_Main:				; XREF: Obj69_Index
0001578C 5428 0024                  		addq.b	#2,$24(a0)
00015790 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015798 317C 4492 0002             		move.w	#$4492,2(a0)
0001579E 0028 0004 0001             		ori.b	#4,1(a0)
000157A4 117C 0080 0019             		move.b	#$80,$19(a0)
000157AA 7000                       		moveq	#0,d0
000157AC 1028 0028                  		move.b	$28(a0),d0
000157B0 0240 000F                  		andi.w	#$F,d0
000157B4 C0FC 003C                  		mulu.w	#$3C,d0
000157B8 3140 0032                  		move.w	d0,$32(a0)
000157BC 4A28 0028                  		tst.b	$28(a0)
000157C0 6A00                       		bpl.s	Obj69_Trapdoor
000157C2 5428 0024                  		addq.b	#2,$24(a0)
000157C6 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000157CE 317C 04DF 0002             		move.w	#$4DF,2(a0)
000157D4 117C 0010 0019             		move.b	#$10,$19(a0)
000157DA 117C 0002 001C             		move.b	#2,$1C(a0)
000157E0 7000                       		moveq	#0,d0
000157E2 1028 0028                  		move.b	$28(a0),d0	; get object type
000157E6 3200                       		move.w	d0,d1
000157E8 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000157EC C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000157F0 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000157F4 3140 0032                  		move.w	d0,$32(a0)
000157F8 0241 0070                  		andi.w	#$70,d1
000157FC 0641 0010                  		addi.w	#$10,d1
00015800 E549                       		lsl.w	#2,d1
00015802 5341                       		subq.w	#1,d1
00015804 3141 0036                  		move.w	d1,$36(a0)
00015808 6000                       		bra.s	Obj69_Spinner
0001580A                            ; ===========================================================================
0001580A                            
0001580A                            Obj69_Trapdoor:				; XREF: Obj69_Index
0001580A 5368 0030                  		subq.w	#1,$30(a0)
0001580E 6A00                       		bpl.s	Obj69_Animate
00015810 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015816 0868 0000 001C             		bchg	#0,$1C(a0)
0001581C 4A28 0001                  		tst.b	1(a0)
00015820 6A00                       		bpl.s	Obj69_Animate
00015822 303C 00BB                  		move.w	#$BB,d0
00015826 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play door sound
0001582C                            
0001582C                            Obj69_Animate:
0001582C 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015832 4EB9 0000 A7F2             		jsr	AnimateSprite
00015838 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
0001583C 6600                       		bne.s	Obj69_NotSolid	; if not, branch
0001583E 323C 004B                  		move.w	#$4B,d1
00015842 343C 000C                  		move.w	#$C,d2
00015846 3602                       		move.w	d2,d3
00015848 5243                       		addq.w	#1,d3
0001584A 3828 0008                  		move.w	8(a0),d4
0001584E 6100 A236                  		bsr.w	SolidObject
00015852 6000 9F0A                  		bra.w	MarkObjGone
00015856                            ; ===========================================================================
00015856                            
00015856                            Obj69_NotSolid:
00015856 0828 0003 0022             		btst	#3,$22(a0)
0001585C 6700                       		beq.s	Obj69_Display
0001585E 43F8 D000                  		lea	($FFFFD000).w,a1
00015862 08A9 0003 0022             		bclr	#3,$22(a1)
00015868 08A8 0003 0022             		bclr	#3,$22(a0)
0001586E 4228 0025                  		clr.b	$25(a0)
00015872                            
00015872                            Obj69_Display:
00015872 6000 9EEA                  		bra.w	MarkObjGone
00015876                            ; ===========================================================================
00015876                            
00015876                            Obj69_Spinner:				; XREF: Obj69_Index
00015876 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001587A C068 0036                  		and.w	$36(a0),d0
0001587E 6600                       		bne.s	Obj69_Delay
00015880 117C 0001 0034             		move.b	#1,$34(a0)
00015886                            
00015886                            Obj69_Delay:
00015886 4A28 0034                  		tst.b	$34(a0)
0001588A 6700                       		beq.s	Obj69_Animate2
0001588C 5368 0030                  		subq.w	#1,$30(a0)
00015890 6A00                       		bpl.s	Obj69_Animate2
00015892 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015898 4228 0034                  		clr.b	$34(a0)
0001589C 0868 0000 001C             		bchg	#0,$1C(a0)
000158A2                            
000158A2                            Obj69_Animate2:
000158A2 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000158A8 4EB9 0000 A7F2             		jsr	AnimateSprite
000158AE 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
000158B2 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000158B4 323C 001B                  		move.w	#$1B,d1
000158B8 343C 0007                  		move.w	#7,d2
000158BC 3602                       		move.w	d2,d3
000158BE 5243                       		addq.w	#1,d3
000158C0 3828 0008                  		move.w	8(a0),d4
000158C4 6100 A1C0                  		bsr.w	SolidObject
000158C8 6000 9E94                  		bra.w	MarkObjGone
000158CC                            ; ===========================================================================
000158CC                            
000158CC                            Obj69_NotSolid2:
000158CC 0828 0003 0022             		btst	#3,$22(a0)
000158D2 6700                       		beq.s	Obj69_Display2
000158D4 43F8 D000                  		lea	($FFFFD000).w,a1
000158D8 08A9 0003 0022             		bclr	#3,$22(a1)
000158DE 08A8 0003 0022             		bclr	#3,$22(a0)
000158E4 4228 0025                  		clr.b	$25(a0)
000158E8                            
000158E8                            Obj69_Display2:
000158E8 6000 9E74                  		bra.w	MarkObjGone
000158EC                            ; ===========================================================================
000158EC                            Ani_obj69:
000158EC                            	include "_anim\obj69.asm"
000158EC                            ; ---------------------------------------------------------------------------
000158EC                            ; Animation script - trapdoor (SBZ)
000158EC                            ; ---------------------------------------------------------------------------
000158EC 0000                       		dc.w byte_158AC-Ani_obj69
000158EE 0000                       		dc.w byte_158B2-Ani_obj69
000158F0 0000                       		dc.w byte_158B8-Ani_obj69
000158F2 0000                       		dc.w byte_158CC-Ani_obj69
000158F4 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000158FA 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00015900 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001590D 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015914 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015921 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015928                            		even
00015928                            		even
00015928                            
00015928                            ; ---------------------------------------------------------------------------
00015928                            ; Sprite mappings - trapdoor (SBZ)
00015928                            ; ---------------------------------------------------------------------------
00015928                            Map_obj69:
00015928                            	include "_maps\obj69.asm"
00015928                            ; ---------------------------------------------------------------------------
00015928                            ; Sprite mappings - trapdoor (SBZ)
00015928                            ; ---------------------------------------------------------------------------
00015928 0000                       		dc.w byte_158E6-Map_obj69
0001592A 0000                       		dc.w byte_158FB-Map_obj69
0001592C 0000                       		dc.w byte_15924-Map_obj69
0001592E 04                         byte_158E6:	dc.b 4
0001592F F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00015934 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00015939 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
0001593E F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015943 08                         byte_158FB:	dc.b 8
00015944 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00015949 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
0001594E 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015953 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00015958 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
0001595D 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015962 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00015967 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
0001596C 04                         byte_15924:	dc.b 4
0001596D 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00015972 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00015977 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
0001597C 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00015982 00                         		even
00015982 00                         		even
00015982                            
00015982                            ; ---------------------------------------------------------------------------
00015982                            ; Sprite mappings - spinning platforms (SBZ)
00015982                            ; ---------------------------------------------------------------------------
00015982                            Map_obj69a:
00015982                            	include "_maps\obj69a.asm"
00015982                            ; ---------------------------------------------------------------------------
00015982                            ; Sprite mappings - spinning platforms (SBZ)
00015982                            ; ---------------------------------------------------------------------------
00015982 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00015986 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
0001598A 0000                       		dc.w byte_15970-Map_obj69a
0001598C 02                         byte_15944:	dc.b 2
0001598D F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00015992 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00015997 02                         byte_1594F:	dc.b 2
00015998 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
0001599D 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000159A2 02                         byte_1595A:	dc.b 2
000159A3 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000159A8 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000159AD 02                         byte_15965:	dc.b 2
000159AE F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000159B3 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000159B8 02                         byte_15970:	dc.b 2
000159B9 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000159BE 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000159C4 00                         		even
000159C4 00                         		even
000159C4                            
000159C4                            ; ===========================================================================
000159C4                            ; ---------------------------------------------------------------------------
000159C4                            ; Object 6A - ground saws and pizza cutters (SBZ)
000159C4                            ; ---------------------------------------------------------------------------
000159C4                            
000159C4                            Obj6A:					; XREF: Obj_Index
000159C4 7000                       		moveq	#0,d0
000159C6 1028 0024                  		move.b	$24(a0),d0
000159CA 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000159CE 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000159D2                            ; ===========================================================================
000159D2 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
000159D4 0000                       		dc.w Obj6A_Action-Obj6A_Index
000159D6                            ; ===========================================================================
000159D6                            
000159D6                            Obj6A_Main:				; XREF: Obj6A_Index
000159D6 5428 0024                  		addq.b	#2,$24(a0)
000159DA 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000159E2 317C 43B5 0002             		move.w	#$43B5,2(a0)
000159E8 117C 0004 0001             		move.b	#4,1(a0)
000159EE 117C 0004 0018             		move.b	#4,$18(a0)
000159F4 117C 0020 0019             		move.b	#$20,$19(a0)
000159FA 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015A00 3168 000C 0038             		move.w	$C(a0),$38(a0)
00015A06 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00015A0C 6400                       		bcc.s	Obj6A_Action
00015A0E 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015A14                            
00015A14                            Obj6A_Action:				; XREF: Obj6A_Index
00015A14 7000                       		moveq	#0,d0
00015A16 1028 0028                  		move.b	$28(a0),d0
00015A1A 0240 0007                  		andi.w	#7,d0
00015A1E D040                       		add.w	d0,d0
00015A20 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00015A24 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00015A28 3028 003A                  		move.w	$3A(a0),d0
00015A2C 0240 FF80                  		andi.w	#$FF80,d0
00015A30 3238 F700                  		move.w	($FFFFF700).w,d1
00015A34 0441 0080                  		subi.w	#$80,d1
00015A38 0241 FF80                  		andi.w	#$FF80,d1
00015A3C 9041                       		sub.w	d1,d0
00015A3E 0C40 0280                  		cmpi.w	#$280,d0
00015A42 6200                       		bhi.s	Obj6A_Delete
00015A44 4EF9 0000 D6C6             		jmp	DisplaySprite
00015A4A                            ; ===========================================================================
00015A4A                            
00015A4A                            Obj6A_Delete:
00015A4A 4EF9 0000 D702             		jmp	DeleteObject
00015A50                            ; ===========================================================================
00015A50 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00015A54 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00015A58 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00015A5A                            ; ===========================================================================
00015A5A                            
00015A5A                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00015A5A 4E75                       		rts	
00015A5C                            ; ===========================================================================
00015A5C                            
00015A5C                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00015A5C 323C 0060                  		move.w	#$60,d1
00015A60 7000                       		moveq	#0,d0
00015A62 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00015A66 0828 0000 0022             		btst	#0,$22(a0)
00015A6C 6700                       		beq.s	Obj6A_Animate01
00015A6E 4440                       		neg.w	d0
00015A70 D041                       		add.w	d1,d0
00015A72                            
00015A72                            Obj6A_Animate01:
00015A72 3228 003A                  		move.w	$3A(a0),d1
00015A76 9240                       		sub.w	d0,d1
00015A78 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00015A7C 5328 001E                  		subq.b	#1,$1E(a0)
00015A80 6A00                       		bpl.s	loc_15A46
00015A82 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00015A88 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00015A8E                            
00015A8E                            loc_15A46:
00015A8E 4A28 0001                  		tst.b	1(a0)
00015A92 6A00                       		bpl.s	locret_15A60
00015A94 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015A98 0240 000F                  		andi.w	#$F,d0
00015A9C 6600                       		bne.s	locret_15A60
00015A9E 303C 00B0                  		move.w	#$B0,d0
00015AA2 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015AA8                            
00015AA8                            locret_15A60:
00015AA8 4E75                       		rts	
00015AAA                            ; ===========================================================================
00015AAA                            
00015AAA                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00015AAA 323C 0030                  		move.w	#$30,d1
00015AAE 7000                       		moveq	#0,d0
00015AB0 1038 FE64                  		move.b	($FFFFFE64).w,d0
00015AB4 0828 0000 0022             		btst	#0,$22(a0)
00015ABA 6700                       		beq.s	Obj6A_Animate02
00015ABC 4440                       		neg.w	d0
00015ABE 0640 0080                  		addi.w	#$80,d0
00015AC2                            
00015AC2                            Obj6A_Animate02:
00015AC2 3228 0038                  		move.w	$38(a0),d1
00015AC6 9240                       		sub.w	d0,d1
00015AC8 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00015ACC 5328 001E                  		subq.b	#1,$1E(a0)
00015AD0 6A00                       		bpl.s	loc_15A96
00015AD2 117C 0002 001E             		move.b	#2,$1E(a0)
00015AD8 0868 0000 001A             		bchg	#0,$1A(a0)
00015ADE                            
00015ADE                            loc_15A96:
00015ADE 4A28 0001                  		tst.b	1(a0)
00015AE2 6A00                       		bpl.s	locret_15AB0
00015AE4 1038 FE64                  		move.b	($FFFFFE64).w,d0
00015AE8 0C00 0018                  		cmpi.b	#$18,d0
00015AEC 6600                       		bne.s	locret_15AB0
00015AEE 303C 00B0                  		move.w	#$B0,d0
00015AF2 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015AF8                            
00015AF8                            locret_15AB0:
00015AF8 4E75                       		rts	
00015AFA                            ; ===========================================================================
00015AFA                            
00015AFA                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00015AFA 4A28 003D                  		tst.b	$3D(a0)
00015AFE 6600                       		bne.s	Obj6A_Animate03
00015B00 3038 D008                  		move.w	($FFFFD008).w,d0
00015B04 0440 00C0                  		subi.w	#$C0,d0
00015B08 6500                       		bcs.s	loc_15B02
00015B0A 9068 0008                  		sub.w	8(a0),d0
00015B0E 6500                       		bcs.s	loc_15B02
00015B10 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015B14 0440 0080                  		subi.w	#$80,d0
00015B18 B068 000C                  		cmp.w	$C(a0),d0
00015B1C 6400                       		bcc.s	locret_15B04
00015B1E 0640 0100                  		addi.w	#$100,d0
00015B22 B068 000C                  		cmp.w	$C(a0),d0
00015B26 6500                       		bcs.s	locret_15B04
00015B28 117C 0001 003D             		move.b	#1,$3D(a0)
00015B2E 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00015B34 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015B3A 117C 0002 001A             		move.b	#2,$1A(a0)
00015B40 303C 00B0                  		move.w	#$B0,d0
00015B44 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015B4A                            
00015B4A                            loc_15B02:
00015B4A 588F                       		addq.l	#4,sp
00015B4C                            
00015B4C                            locret_15B04:
00015B4C 4E75                       		rts	
00015B4E                            ; ===========================================================================
00015B4E                            
00015B4E                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00015B4E 4EB9 0000 D6A0             		jsr	SpeedToPos
00015B54 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015B5A 5328 001E                  		subq.b	#1,$1E(a0)
00015B5E 6A00                       		bpl.s	locret_15B24
00015B60 117C 0002 001E             		move.b	#2,$1E(a0)
00015B66 0868 0000 001A             		bchg	#0,$1A(a0)
00015B6C                            
00015B6C                            locret_15B24:
00015B6C 4E75                       		rts	
00015B6E                            ; ===========================================================================
00015B6E                            
00015B6E                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00015B6E 4A28 003D                  		tst.b	$3D(a0)
00015B72 6600                       		bne.s	Obj6A_Animate04
00015B74 3038 D008                  		move.w	($FFFFD008).w,d0
00015B78 0640 00E0                  		addi.w	#$E0,d0
00015B7C 9068 0008                  		sub.w	8(a0),d0
00015B80 6400                       		bcc.s	loc_15B74
00015B82 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015B86 0440 0080                  		subi.w	#$80,d0
00015B8A B068 000C                  		cmp.w	$C(a0),d0
00015B8E 6400                       		bcc.s	locret_15B76
00015B90 0640 0100                  		addi.w	#$100,d0
00015B94 B068 000C                  		cmp.w	$C(a0),d0
00015B98 6500                       		bcs.s	locret_15B76
00015B9A 117C 0001 003D             		move.b	#1,$3D(a0)
00015BA0 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00015BA6 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015BAC 117C 0002 001A             		move.b	#2,$1A(a0)
00015BB2 303C 00B0                  		move.w	#$B0,d0
00015BB6 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015BBC                            
00015BBC                            loc_15B74:
00015BBC 588F                       		addq.l	#4,sp
00015BBE                            
00015BBE                            locret_15B76:
00015BBE 4E75                       		rts	
00015BC0                            ; ===========================================================================
00015BC0                            
00015BC0                            Obj6A_Animate04:
00015BC0 4EB9 0000 D6A0             		jsr	SpeedToPos
00015BC6 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015BCC 5328 001E                  		subq.b	#1,$1E(a0)
00015BD0 6A00                       		bpl.s	locret_15B96
00015BD2 117C 0002 001E             		move.b	#2,$1E(a0)
00015BD8 0868 0000 001A             		bchg	#0,$1A(a0)
00015BDE                            
00015BDE                            locret_15B96:
00015BDE 4E75                       		rts	
00015BE0                            ; ===========================================================================
00015BE0                            ; ---------------------------------------------------------------------------
00015BE0                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00015BE0                            ; ---------------------------------------------------------------------------
00015BE0                            Map_obj6A:
00015BE0                            	include "_maps\obj6A.asm"
00015BE0                            ; ---------------------------------------------------------------------------
00015BE0                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00015BE0                            ; ---------------------------------------------------------------------------
00015BE0 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00015BE4 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00015BE8 07                         byte_15BA0:	dc.b 7
00015BE9 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00015BEE D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00015BF3 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00015BF8 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00015BFD E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00015C02 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00015C07 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00015C0C 07                         byte_15BC4:	dc.b 7
00015C0D C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00015C12 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00015C17 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00015C1C E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00015C21 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00015C26 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00015C2B 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00015C30 04                         byte_15BE8:	dc.b 4
00015C31 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00015C36 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00015C3B 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00015C40 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00015C45 04                         byte_15BFD:	dc.b 4
00015C46 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00015C4B E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00015C50 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00015C55 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00015C5A                            		even
00015C5A                            		even
00015C5A                            
00015C5A                            ; ===========================================================================
00015C5A                            ; ---------------------------------------------------------------------------
00015C5A                            ; Object 6B - stomper (SBZ)
00015C5A                            ; ---------------------------------------------------------------------------
00015C5A                            
00015C5A                            Obj6B:					; XREF: Obj_Index
00015C5A 7000                       		moveq	#0,d0
00015C5C 1028 0024                  		move.b	$24(a0),d0
00015C60 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00015C64 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00015C68                            ; ===========================================================================
00015C68 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00015C6A 0000                       		dc.w Obj6B_Action-Obj6B_Index
00015C6C                            
00015C6C 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00015C70 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00015C74 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00015C78 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00015C7C 8040 0005                  		dc.b  $80, $40,	  0,   5
00015C80                            ; ===========================================================================
00015C80                            
00015C80                            Obj6B_Main:				; XREF: Obj6B_Index
00015C80 5428 0024                  		addq.b	#2,$24(a0)
00015C84 7000                       		moveq	#0,d0
00015C86 1028 0028                  		move.b	$28(a0),d0
00015C8A E448                       		lsr.w	#2,d0
00015C8C 0240 001C                  		andi.w	#$1C,d0
00015C90 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00015C94 115B 0019                  		move.b	(a3)+,$19(a0)
00015C98 115B 0016                  		move.b	(a3)+,$16(a0)
00015C9C E448                       		lsr.w	#2,d0
00015C9E 1140 001A                  		move.b	d0,$1A(a0)
00015CA2 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00015CAA 317C 22C0 0002             		move.w	#$22C0,2(a0)
00015CB0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00015CB6 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00015CB8 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00015CBE 6700                       		beq.s	Obj6B_SBZ3
00015CC0                            
00015CC0                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00015CC0 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015CC4 7000                       		moveq	#0,d0
00015CC6 1028 0023                  		move.b	$23(a0),d0
00015CCA 6700                       		beq.s	Obj6B_Delete
00015CCC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015CD2                            
00015CD2                            Obj6B_Delete:
00015CD2 4EF9 0000 D702             		jmp	DeleteObject
00015CD8                            ; ===========================================================================
00015CD8                            
00015CD8                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00015CD8 317C 41F0 0002             		move.w	#$41F0,2(a0)
00015CDE 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00015CE4 6600                       		bne.s	Obj6B_SBZ12
00015CE6 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015CEA 7000                       		moveq	#0,d0
00015CEC 1028 0023                  		move.b	$23(a0),d0
00015CF0 6700                       		beq.s	Obj6B_SBZ12
00015CF2 0832 0000 0002             		btst	#0,2(a2,d0.w)
00015CF8 6700                       		beq.s	Obj6B_SBZ12
00015CFA 4238 F7CB                  		clr.b	($FFFFF7CB).w
00015CFE 60C0                       		bra.s	Obj6B_ChkGone
00015D00                            ; ===========================================================================
00015D00                            
00015D00                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00015D00 0028 0004 0001             		ori.b	#4,1(a0)
00015D06 117C 0004 0018             		move.b	#4,$18(a0)
00015D0C 3168 0008 0034             		move.w	8(a0),$34(a0)
00015D12 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015D18 7000                       		moveq	#0,d0
00015D1A 101B                       		move.b	(a3)+,d0
00015D1C 3140 003C                  		move.w	d0,$3C(a0)
00015D20 7000                       		moveq	#0,d0
00015D22 1028 0028                  		move.b	$28(a0),d0
00015D26 6A00                       		bpl.s	Obj6B_Action
00015D28 0200 000F                  		andi.b	#$F,d0
00015D2C 1140 003E                  		move.b	d0,$3E(a0)
00015D30 1153 0028                  		move.b	(a3),$28(a0)
00015D34 0C13 0005                  		cmpi.b	#5,(a3)
00015D38 6600                       		bne.s	Obj6B_ChkGone2
00015D3A 08E8 0004 0001             		bset	#4,1(a0)
00015D40                            
00015D40                            Obj6B_ChkGone2:
00015D40 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015D44 7000                       		moveq	#0,d0
00015D46 1028 0023                  		move.b	$23(a0),d0
00015D4A 6700                       		beq.s	Obj6B_Action
00015D4C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015D52                            
00015D52                            Obj6B_Action:				; XREF: Obj6B_Index
00015D52 3F28 0008                  		move.w	8(a0),-(sp)
00015D56 7000                       		moveq	#0,d0
00015D58 1028 0028                  		move.b	$28(a0),d0
00015D5C 0240 000F                  		andi.w	#$F,d0
00015D60 D040                       		add.w	d0,d0
00015D62 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00015D66 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00015D6A 381F                       		move.w	(sp)+,d4
00015D6C 4A28 0001                  		tst.b	1(a0)
00015D70 6A00                       		bpl.s	Obj6B_ChkDel
00015D72 7200                       		moveq	#0,d1
00015D74 1228 0019                  		move.b	$19(a0),d1
00015D78 0641 000B                  		addi.w	#$B,d1
00015D7C 7400                       		moveq	#0,d2
00015D7E 1428 0016                  		move.b	$16(a0),d2
00015D82 3602                       		move.w	d2,d3
00015D84 5243                       		addq.w	#1,d3
00015D86 6100 9CFE                  		bsr.w	SolidObject
00015D8A                            
00015D8A                            Obj6B_ChkDel:
00015D8A 3028 0034                  		move.w	$34(a0),d0
00015D8E 0240 FF80                  		andi.w	#$FF80,d0
00015D92 3238 F700                  		move.w	($FFFFF700).w,d1
00015D96 0441 0080                  		subi.w	#$80,d1
00015D9A 0241 FF80                  		andi.w	#$FF80,d1
00015D9E 9041                       		sub.w	d1,d0
00015DA0 0C40 0280                  		cmpi.w	#$280,d0
00015DA4 6200                       		bhi.s	loc_15D64
00015DA6 4EF9 0000 D6C6             		jmp	DisplaySprite
00015DAC                            ; ===========================================================================
00015DAC                            
00015DAC                            loc_15D64:
00015DAC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00015DB2 6600                       		bne.s	Obj6B_Delete2
00015DB4 4238 F7CB                  		clr.b	($FFFFF7CB).w
00015DB8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015DBC 7000                       		moveq	#0,d0
00015DBE 1028 0023                  		move.b	$23(a0),d0
00015DC2 6700                       		beq.s	Obj6B_Delete2
00015DC4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015DCA                            
00015DCA                            Obj6B_Delete2:
00015DCA 4EF9 0000 D702             		jmp	DeleteObject
00015DD0                            ; ===========================================================================
00015DD0 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00015DD4 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00015DD8 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00015DDC                            ; ===========================================================================
00015DDC                            
00015DDC                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00015DDC 4E75                       		rts	
00015DDE                            ; ===========================================================================
00015DDE                            
00015DDE                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00015DDE 4A28 0038                  		tst.b	$38(a0)
00015DE2 6600                       		bne.s	loc_15DB4
00015DE4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015DE8 7000                       		moveq	#0,d0
00015DEA 1028 003E                  		move.b	$3E(a0),d0
00015DEE 0832 0000 0000             		btst	#0,(a2,d0.w)
00015DF4 6700                       		beq.s	loc_15DC2
00015DF6 117C 0001 0038             		move.b	#1,$38(a0)
00015DFC                            
00015DFC                            loc_15DB4:
00015DFC 3028 003C                  		move.w	$3C(a0),d0
00015E00 B068 003A                  		cmp.w	$3A(a0),d0
00015E04 6700                       		beq.s	loc_15DE0
00015E06 5468 003A                  		addq.w	#2,$3A(a0)
00015E0A                            
00015E0A                            loc_15DC2:
00015E0A 3028 003A                  		move.w	$3A(a0),d0
00015E0E 0828 0000 0022             		btst	#0,$22(a0)
00015E14 6700                       		beq.s	loc_15DD4
00015E16 4440                       		neg.w	d0
00015E18 0640 0080                  		addi.w	#$80,d0
00015E1C                            
00015E1C                            loc_15DD4:
00015E1C 3228 0034                  		move.w	$34(a0),d1
00015E20 9240                       		sub.w	d0,d1
00015E22 3141 0008                  		move.w	d1,8(a0)
00015E26 4E75                       		rts	
00015E28                            ; ===========================================================================
00015E28                            
00015E28                            loc_15DE0:
00015E28 5228 0028                  		addq.b	#1,$28(a0)
00015E2C 317C 00B4 0036             		move.w	#$B4,$36(a0)
00015E32 4228 0038                  		clr.b	$38(a0)
00015E36 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015E3A 7000                       		moveq	#0,d0
00015E3C 1028 0023                  		move.b	$23(a0),d0
00015E40 67C8                       		beq.s	loc_15DC2
00015E42 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00015E48 60C0                       		bra.s	loc_15DC2
00015E4A                            ; ===========================================================================
00015E4A                            
00015E4A                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00015E4A 4A28 0038                  		tst.b	$38(a0)
00015E4E 6600                       		bne.s	loc_15E14
00015E50 5368 0036                  		subq.w	#1,$36(a0)
00015E54 6600                       		bne.s	loc_15E1E
00015E56 117C 0001 0038             		move.b	#1,$38(a0)
00015E5C                            
00015E5C                            loc_15E14:
00015E5C 4A68 003A                  		tst.w	$3A(a0)
00015E60 6700                       		beq.s	loc_15E3C
00015E62 5568 003A                  		subq.w	#2,$3A(a0)
00015E66                            
00015E66                            loc_15E1E:
00015E66 3028 003A                  		move.w	$3A(a0),d0
00015E6A 0828 0000 0022             		btst	#0,$22(a0)
00015E70 6700                       		beq.s	loc_15E30
00015E72 4440                       		neg.w	d0
00015E74 0640 0080                  		addi.w	#$80,d0
00015E78                            
00015E78                            loc_15E30:
00015E78 3228 0034                  		move.w	$34(a0),d1
00015E7C 9240                       		sub.w	d0,d1
00015E7E 3141 0008                  		move.w	d1,8(a0)
00015E82 4E75                       		rts	
00015E84                            ; ===========================================================================
00015E84                            
00015E84                            loc_15E3C:
00015E84 5328 0028                  		subq.b	#1,$28(a0)
00015E88 4228 0038                  		clr.b	$38(a0)
00015E8C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015E90 7000                       		moveq	#0,d0
00015E92 1028 0023                  		move.b	$23(a0),d0
00015E96 67CE                       		beq.s	loc_15E1E
00015E98 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00015E9E 60C6                       		bra.s	loc_15E1E
00015EA0                            ; ===========================================================================
00015EA0                            
00015EA0                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00015EA0 4A28 0038                  		tst.b	$38(a0)
00015EA4 6600                       		bne.s	loc_15E7C
00015EA6 4A68 003A                  		tst.w	$3A(a0)
00015EAA 6700                       		beq.s	loc_15E6A
00015EAC 5368 003A                  		subq.w	#1,$3A(a0)
00015EB0 6000                       		bra.s	loc_15E8E
00015EB2                            ; ===========================================================================
00015EB2                            
00015EB2                            loc_15E6A:
00015EB2 5368 0036                  		subq.w	#1,$36(a0)
00015EB6 6A00                       		bpl.s	loc_15E8E
00015EB8 317C 003C 0036             		move.w	#$3C,$36(a0)
00015EBE 117C 0001 0038             		move.b	#1,$38(a0)
00015EC4                            
00015EC4                            loc_15E7C:
00015EC4 5068 003A                  		addq.w	#8,$3A(a0)
00015EC8 3028 003A                  		move.w	$3A(a0),d0
00015ECC B068 003C                  		cmp.w	$3C(a0),d0
00015ED0 6600                       		bne.s	loc_15E8E
00015ED2 4228 0038                  		clr.b	$38(a0)
00015ED6                            
00015ED6                            loc_15E8E:
00015ED6 3028 003A                  		move.w	$3A(a0),d0
00015EDA 0828 0000 0022             		btst	#0,$22(a0)
00015EE0 6700                       		beq.s	loc_15EA0
00015EE2 4440                       		neg.w	d0
00015EE4 0640 0038                  		addi.w	#$38,d0
00015EE8                            
00015EE8                            loc_15EA0:
00015EE8 3228 0030                  		move.w	$30(a0),d1
00015EEC D240                       		add.w	d0,d1
00015EEE 3141 000C                  		move.w	d1,$C(a0)
00015EF2 4E75                       		rts	
00015EF4                            ; ===========================================================================
00015EF4                            
00015EF4                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00015EF4 4A28 0038                  		tst.b	$38(a0)
00015EF8 6600                       		bne.s	loc_15ED0
00015EFA 4A68 003A                  		tst.w	$3A(a0)
00015EFE 6700                       		beq.s	loc_15EBE
00015F00 5168 003A                  		subq.w	#8,$3A(a0)
00015F04 6000                       		bra.s	loc_15EF0
00015F06                            ; ===========================================================================
00015F06                            
00015F06                            loc_15EBE:
00015F06 5368 0036                  		subq.w	#1,$36(a0)
00015F0A 6A00                       		bpl.s	loc_15EF0
00015F0C 317C 003C 0036             		move.w	#$3C,$36(a0)
00015F12 117C 0001 0038             		move.b	#1,$38(a0)
00015F18                            
00015F18                            loc_15ED0:
00015F18 3028 003A                  		move.w	$3A(a0),d0
00015F1C B068 003C                  		cmp.w	$3C(a0),d0
00015F20 6700                       		beq.s	loc_15EE0
00015F22 5068 003A                  		addq.w	#8,$3A(a0)
00015F26 6000                       		bra.s	loc_15EF0
00015F28                            ; ===========================================================================
00015F28                            
00015F28                            loc_15EE0:
00015F28 5368 0036                  		subq.w	#1,$36(a0)
00015F2C 6A00                       		bpl.s	loc_15EF0
00015F2E 317C 003C 0036             		move.w	#$3C,$36(a0)
00015F34 4228 0038                  		clr.b	$38(a0)
00015F38                            
00015F38                            loc_15EF0:
00015F38 3028 003A                  		move.w	$3A(a0),d0
00015F3C 0828 0000 0022             		btst	#0,$22(a0)
00015F42 6700                       		beq.s	loc_15F02
00015F44 4440                       		neg.w	d0
00015F46 0640 0038                  		addi.w	#$38,d0
00015F4A                            
00015F4A                            loc_15F02:
00015F4A 3228 0030                  		move.w	$30(a0),d1
00015F4E D240                       		add.w	d0,d1
00015F50 3141 000C                  		move.w	d1,$C(a0)
00015F54 4E75                       		rts	
00015F56                            ; ===========================================================================
00015F56                            
00015F56                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00015F56 4A28 0038                  		tst.b	$38(a0)
00015F5A 6600                       		bne.s	loc_15F3E
00015F5C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015F60 7000                       		moveq	#0,d0
00015F62 1028 003E                  		move.b	$3E(a0),d0
00015F66 0832 0000 0000             		btst	#0,(a2,d0.w)
00015F6C 6700                       		beq.s	locret_15F5C
00015F6E 117C 0001 0038             		move.b	#1,$38(a0)
00015F74 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015F78 7000                       		moveq	#0,d0
00015F7A 1028 0023                  		move.b	$23(a0),d0
00015F7E 6700                       		beq.s	loc_15F3E
00015F80 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00015F86                            
00015F86                            loc_15F3E:
00015F86 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00015F8E 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00015F96 3168 0008 0034             		move.w	8(a0),$34(a0)
00015F9C 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00015FA2 6700                       		beq.s	loc_15F5E
00015FA4                            
00015FA4                            locret_15F5C:
00015FA4 4E75                       		rts	
00015FA6                            ; ===========================================================================
00015FA6                            
00015FA6                            loc_15F5E:
00015FA6 4228 0028                  		clr.b	$28(a0)
00015FAA 4228 0038                  		clr.b	$38(a0)
00015FAE 4E75                       		rts	
00015FB0                            ; ===========================================================================
00015FB0                            ; ---------------------------------------------------------------------------
00015FB0                            ; Sprite mappings - stomper and	platforms (SBZ)
00015FB0                            ; ---------------------------------------------------------------------------
00015FB0                            Map_obj6B:
00015FB0                            	include "_maps\obj6B.asm"
00015FB0                            ; ---------------------------------------------------------------------------
00015FB0                            ; Sprite mappings - stomper and	platforms (SBZ)
00015FB0                            ; ---------------------------------------------------------------------------
00015FB0 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00015FB4 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00015FB8 0000                       		dc.w byte_15FB0-Map_obj6B
00015FBA 04                         byte_15F72:	dc.b 4
00015FBB F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00015FC0 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00015FC5 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00015FCA F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00015FCF 08                         byte_15F87:	dc.b 8
00015FD0 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00015FD5 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00015FDA E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00015FDF E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00015FE4 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00015FE9 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00015FEE 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00015FF3 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00015FF8 0E                         byte_15FB0:	dc.b $E
00015FF9 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00015FFE C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016003 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016008 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
0001600D C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016012 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016017 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
0001601C C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016021 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016026 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
0001602B E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016030 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016035 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
0001603A 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016040 00                         		even
00016040 00                         		even
00016040                            
00016040                            ; ===========================================================================
00016040                            ; ---------------------------------------------------------------------------
00016040                            ; Object 6C - vanishing	platforms (SBZ)
00016040                            ; ---------------------------------------------------------------------------
00016040                            
00016040                            Obj6C:					; XREF: Obj_Index
00016040 7000                       		moveq	#0,d0
00016042 1028 0024                  		move.b	$24(a0),d0
00016046 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
0001604A 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
0001604E                            ; ===========================================================================
0001604E 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016050 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016052 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016054 0000                       		dc.w loc_16068-Obj6C_Index
00016056                            ; ===========================================================================
00016056                            
00016056                            Obj6C_Main:				; XREF: Obj6C_Index
00016056 5C28 0024                  		addq.b	#6,$24(a0)
0001605A 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016062 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016068 0028 0004 0001             		ori.b	#4,1(a0)
0001606E 117C 0010 0019             		move.b	#$10,$19(a0)
00016074 117C 0004 0018             		move.b	#4,$18(a0)
0001607A 7000                       		moveq	#0,d0
0001607C 1028 0028                  		move.b	$28(a0),d0	; get object type
00016080 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016084 5240                       		addq.w	#1,d0		; add 1
00016086 EF48                       		lsl.w	#7,d0		; multiply by $80
00016088 3200                       		move.w	d0,d1
0001608A 5340                       		subq.w	#1,d0
0001608C 3140 0030                  		move.w	d0,$30(a0)
00016090 3140 0032                  		move.w	d0,$32(a0)
00016094 7000                       		moveq	#0,d0
00016096 1028 0028                  		move.b	$28(a0),d0	; get object type
0001609A 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
0001609E 0641 0080                  		addi.w	#$80,d1
000160A2 C0C1                       		mulu.w	d1,d0
000160A4 E088                       		lsr.l	#8,d0
000160A6 3140 0036                  		move.w	d0,$36(a0)
000160AA 5341                       		subq.w	#1,d1
000160AC 3141 0038                  		move.w	d1,$38(a0)
000160B0                            
000160B0                            loc_16068:				; XREF: Obj6C_Index
000160B0 3038 FE04                  		move.w	($FFFFFE04).w,d0
000160B4 9068 0036                  		sub.w	$36(a0),d0
000160B8 C068 0038                  		and.w	$38(a0),d0
000160BC 6600                       		bne.s	Obj6C_Animate
000160BE 5928 0024                  		subq.b	#4,$24(a0)
000160C2 6000                       		bra.s	Obj6C_Vanish
000160C4                            ; ===========================================================================
000160C4                            
000160C4                            Obj6C_Animate:
000160C4 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000160CA 4EB9 0000 A7F2             		jsr	AnimateSprite
000160D0 6000 968C                  		bra.w	MarkObjGone
000160D4                            ; ===========================================================================
000160D4                            
000160D4                            Obj6C_Vanish:				; XREF: Obj6C_Index
000160D4 5368 0030                  		subq.w	#1,$30(a0)
000160D8 6A00                       		bpl.s	loc_160AA
000160DA 317C 007F 0030             		move.w	#127,$30(a0)
000160E0 4A28 001C                  		tst.b	$1C(a0)
000160E4 6700                       		beq.s	loc_160A4
000160E6 3168 0032 0030             		move.w	$32(a0),$30(a0)
000160EC                            
000160EC                            loc_160A4:
000160EC 0868 0000 001C             		bchg	#0,$1C(a0)
000160F2                            
000160F2                            loc_160AA:
000160F2 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000160F8 4EB9 0000 A7F2             		jsr	AnimateSprite
000160FE 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016104 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016106 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0001610C 6600                       		bne.s	loc_160D6
0001610E 7200                       		moveq	#0,d1
00016110 1228 0019                  		move.b	$19(a0),d1
00016114 4EB9 0000 7550             		jsr	(PlatformObject).l
0001611A 6000 9642                  		bra.w	MarkObjGone
0001611E                            ; ===========================================================================
0001611E                            
0001611E                            loc_160D6:
0001611E 7200                       		moveq	#0,d1
00016120 1228 0019                  		move.b	$19(a0),d1
00016124 4EB9 0000 76C4             		jsr	(ExitPlatform).l
0001612A 3428 0008                  		move.w	8(a0),d2
0001612E 4EB9 0000 7C2E             		jsr	(MvSonicOnPtfm2).l
00016134 6000 9628                  		bra.w	MarkObjGone
00016138                            ; ===========================================================================
00016138                            
00016138                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016138 0828 0003 0022             		btst	#3,$22(a0)
0001613E 6700                       		beq.s	Obj6C_Display
00016140 43F8 D000                  		lea	($FFFFD000).w,a1
00016144 08A9 0003 0022             		bclr	#3,$22(a1)
0001614A 08A8 0003 0022             		bclr	#3,$22(a0)
00016150 117C 0002 0024             		move.b	#2,$24(a0)
00016156 4228 0025                  		clr.b	$25(a0)
0001615A                            
0001615A                            Obj6C_Display:
0001615A 6000 9602                  		bra.w	MarkObjGone
0001615E                            ; ===========================================================================
0001615E                            Ani_obj6C:
0001615E                            	include "_anim\obj6C.asm"
0001615E                            ; ---------------------------------------------------------------------------
0001615E                            ; Animation script - vanishing platforms (SBZ)
0001615E                            ; ---------------------------------------------------------------------------
0001615E 0000                       		dc.w byte_1611A-Ani_obj6C
00016160 0000                       		dc.w byte_16122-Ani_obj6C
00016162 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
0001616A 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016172                            		even
00016172                            		even
00016172                            
00016172                            ; ---------------------------------------------------------------------------
00016172                            ; Sprite mappings - vanishing platforms	(SBZ)
00016172                            ; ---------------------------------------------------------------------------
00016172                            Map_obj6C:
00016172                            	include "_maps\obj6C.asm"
00016172                            ; ---------------------------------------------------------------------------
00016172                            ; Sprite mappings - vanishing platforms	(SBZ)
00016172                            ; ---------------------------------------------------------------------------
00016172 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016176 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
0001617A 01                         byte_16132:	dc.b 1
0001617B F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016180 01                         byte_16138:	dc.b 1
00016181 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016186 01                         byte_1613E:	dc.b 1
00016187 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
0001618C 00                         byte_16144:	dc.b 0
0001618E 00                         		even
0001618E 00                         		even
0001618E                            
0001618E                            ; ===========================================================================
0001618E                            ; ---------------------------------------------------------------------------
0001618E                            ; Object 6E - electrocution orbs (SBZ)
0001618E                            ; ---------------------------------------------------------------------------
0001618E                            
0001618E                            Obj6E:					; XREF: Obj_Index
0001618E 7000                       		moveq	#0,d0
00016190 1028 0024                  		move.b	$24(a0),d0
00016194 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016198 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
0001619C                            ; ===========================================================================
0001619C 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
0001619E 0000                       		dc.w Obj6E_Shock-Obj6E_Index
000161A0                            ; ===========================================================================
000161A0                            
000161A0                            Obj6E_Main:				; XREF: Obj6E_Index
000161A0 5428 0024                  		addq.b	#2,$24(a0)
000161A4 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
000161AC 317C 047E 0002             		move.w	#$47E,2(a0)
000161B2 0028 0004 0001             		ori.b	#4,1(a0)
000161B8 117C 0028 0019             		move.b	#$28,$19(a0)
000161BE 7000                       		moveq	#0,d0
000161C0 1028 0028                  		move.b	$28(a0),d0	; read object type
000161C4 E948                       		lsl.w	#4,d0		; multiply by $10
000161C6 5340                       		subq.w	#1,d0
000161C8 3140 0034                  		move.w	d0,$34(a0)
000161CC                            
000161CC                            Obj6E_Shock:				; XREF: Obj6E_Index
000161CC 3038 FE04                  		move.w	($FFFFFE04).w,d0
000161D0 C068 0034                  		and.w	$34(a0),d0
000161D4 6600                       		bne.s	Obj6E_Animate
000161D6 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
000161DC 4A28 0001                  		tst.b	1(a0)
000161E0 6A00                       		bpl.s	Obj6E_Animate
000161E2 303C 00B1                  		move.w	#$B1,d0
000161E6 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play electricity sound
000161EC                            
000161EC                            Obj6E_Animate:
000161EC 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
000161F2 4EB9 0000 A7F2             		jsr	AnimateSprite
000161F8 117C 0000 0020             		move.b	#0,$20(a0)
000161FE 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016204 6600                       		bne.s	Obj6E_Display	; if not, branch
00016206 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
0001620C                            
0001620C                            Obj6E_Display:
0001620C 6000 9550                  		bra.w	MarkObjGone
00016210                            ; ===========================================================================
00016210                            Ani_obj6E:
00016210                            	include "_anim\obj6E.asm"
00016210                            ; ---------------------------------------------------------------------------
00016210                            ; Animation script - electrocution orbs (SBZ)
00016210                            ; ---------------------------------------------------------------------------
00016210 0000                       		dc.w byte_161CC-Ani_obj6E
00016212 0000                       		dc.w byte_161D0-Ani_obj6E
00016214 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016218 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016228                            		even
00016228                            		even
00016228                            
00016228                            ; ---------------------------------------------------------------------------
00016228                            ; Sprite mappings - electrocution orbs (SBZ)
00016228                            ; ---------------------------------------------------------------------------
00016228                            Map_obj6E:
00016228                            	include "_maps\obj6E.asm"
00016228                            ; ---------------------------------------------------------------------------
00016228                            ; Sprite mappings - electrocution orbs (SBZ)
00016228                            ; ---------------------------------------------------------------------------
00016228 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
0001622C 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00016230 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
00016234 02                         byte_161EC:	dc.b 2
00016235 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001623A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001623F 03                         byte_161F7:	dc.b 3
00016240 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00016245 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001624A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001624F 05                         byte_16207:	dc.b 5
00016250 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00016255 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001625A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001625F F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00016264 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00016269 04                         byte_16221:	dc.b 4
0001626A F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001626F 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016274 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00016279 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001627E 06                         byte_16236:	dc.b 6
0001627F F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016284 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016289 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
0001628E F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00016293 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
00016298 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
0001629D 04                         byte_16255:	dc.b 4
0001629E F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000162A3 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000162A8 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
000162AD F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
000162B2                            		even
000162B2                            		even
000162B2                            
000162B2                            ; ===========================================================================
000162B2                            ; ---------------------------------------------------------------------------
000162B2                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
000162B2                            ; ---------------------------------------------------------------------------
000162B2                            
000162B2                            Obj6F:					; XREF: Obj_Index
000162B2 7000                       		moveq	#0,d0
000162B4 1028 0024                  		move.b	$24(a0),d0
000162B8 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
000162BC 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
000162C0 3028 0030                  		move.w	$30(a0),d0
000162C4 0240 FF80                  		andi.w	#$FF80,d0
000162C8 3238 F700                  		move.w	($FFFFF700).w,d1
000162CC 0441 0080                  		subi.w	#$80,d1
000162D0 0241 FF80                  		andi.w	#$FF80,d1
000162D4 9041                       		sub.w	d1,d0
000162D6 0C40 0280                  		cmpi.w	#$280,d0
000162DA 6200                       		bhi.s	loc_1629A
000162DC                            
000162DC                            Obj6F_Display:
000162DC 4EF9 0000 D6C6             		jmp	DisplaySprite
000162E2                            ; ===========================================================================
000162E2                            
000162E2                            loc_1629A:
000162E2 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
000162E8 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
000162EA 0C40 FF80                  		cmpi.w	#-$80,d0
000162EE 64EC                       		bcc.s	Obj6F_Display
000162F0                            
000162F0                            Obj6F_Act1or2:
000162F0 1028 002F                  		move.b	$2F(a0),d0
000162F4 6A00                       		bpl.s	Obj6F_Delete
000162F6 0240 007F                  		andi.w	#$7F,d0
000162FA 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000162FE 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016304                            
00016304                            Obj6F_Delete:
00016304 4EF9 0000 D702             		jmp	DeleteObject
0001630A                            ; ===========================================================================
0001630A 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
0001630C 0000                       		dc.w loc_163D8-Obj6F_Index
0001630E                            ; ===========================================================================
0001630E                            
0001630E                            Obj6F_Main:				; XREF: Obj6F_Index
0001630E 1028 0028                  		move.b	$28(a0),d0
00016312 6B00 0000                  		bmi.w	loc_16380
00016316 5428 0024                  		addq.b	#2,$24(a0)
0001631A 217C 0001 5982 0004        		move.l	#Map_obj69a,4(a0)
00016322 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016328 117C 0010 0019             		move.b	#$10,$19(a0)
0001632E 0028 0004 0001             		ori.b	#4,1(a0)
00016334 117C 0004 0018             		move.b	#4,$18(a0)
0001633A 7000                       		moveq	#0,d0
0001633C 1028 0028                  		move.b	$28(a0),d0
00016340 3200                       		move.w	d0,d1
00016342 E648                       		lsr.w	#3,d0
00016344 0240 001E                  		andi.w	#$1E,d0
00016348 45FA 0000                  		lea	off_164A6(pc),a2
0001634C D4F2 0000                  		adda.w	(a2,d0.w),a2
00016350 315A 0038                  		move.w	(a2)+,$38(a0)
00016354 315A 0030                  		move.w	(a2)+,$30(a0)
00016358 214A 003C                  		move.l	a2,$3C(a0)
0001635C 0241 000F                  		andi.w	#$F,d1
00016360 E549                       		lsl.w	#2,d1
00016362 1141 0038                  		move.b	d1,$38(a0)
00016366 117C 0004 003A             		move.b	#4,$3A(a0)
0001636C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016370 6700                       		beq.s	loc_16356
00016372 117C 0001 003B             		move.b	#1,$3B(a0)
00016378 4428 003A                  		neg.b	$3A(a0)
0001637C 7200                       		moveq	#0,d1
0001637E 1228 0038                  		move.b	$38(a0),d1
00016382 D228 003A                  		add.b	$3A(a0),d1
00016386 B228 0039                  		cmp.b	$39(a0),d1
0001638A 6500                       		bcs.s	loc_16352
0001638C 1001                       		move.b	d1,d0
0001638E 7200                       		moveq	#0,d1
00016390 4A00                       		tst.b	d0
00016392 6A00                       		bpl.s	loc_16352
00016394 1228 0039                  		move.b	$39(a0),d1
00016398 5901                       		subq.b	#4,d1
0001639A                            
0001639A                            loc_16352:
0001639A 1141 0038                  		move.b	d1,$38(a0)
0001639E                            
0001639E                            loc_16356:
0001639E 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000163A4 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000163AA 4A41                       		tst.w	d1
000163AC 6600                       		bne.s	loc_1636C
000163AE 117C 0001 001C             		move.b	#1,$1C(a0)
000163B4                            
000163B4                            loc_1636C:
000163B4 0C41 0008                  		cmpi.w	#8,d1
000163B8 6600                       		bne.s	loc_16378
000163BA 117C 0000 001C             		move.b	#0,$1C(a0)
000163C0                            
000163C0                            loc_16378:
000163C0 6100 C23C                  		bsr.w	Obj63_ChangeDir
000163C4 6000 0000                  		bra.w	loc_163D8
000163C8                            ; ===========================================================================
000163C8                            
000163C8                            loc_16380:				; XREF: Obj6F_Main
000163C8 1140 002F                  		move.b	d0,$2F(a0)
000163CC 0240 007F                  		andi.w	#$7F,d0
000163D0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000163D4 08F2 0000 0000             		bset	#0,(a2,d0.w)
000163DA 6700                       		beq.s	loc_1639A
000163DC 4EF9 0000 D702             		jmp	DeleteObject
000163E2                            ; ===========================================================================
000163E2                            
000163E2                            loc_1639A:
000163E2 D040                       		add.w	d0,d0
000163E4 0240 001E                  		andi.w	#$1E,d0
000163E8 0640 0080                  		addi.w	#$80,d0
000163EC 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000163F2 D4F2 0000                  		adda.w	(a2,d0.w),a2
000163F6 321A                       		move.w	(a2)+,d1
000163F8 2248                       		movea.l	a0,a1
000163FA 6000                       		bra.s	Obj6F_LoadPform
000163FC                            ; ===========================================================================
000163FC                            
000163FC                            Obj6F_Loop:
000163FC 4EB9 0000 DB4C             		jsr	SingleObjLoad
00016402 6600                       		bne.s	loc_163D0
00016404                            
00016404                            Obj6F_LoadPform:			; XREF: loc_1639A
00016404 12BC 006F                  		move.b	#$6F,0(a1)
00016408 335A 0008                  		move.w	(a2)+,8(a1)
0001640C 335A 000C                  		move.w	(a2)+,$C(a1)
00016410 301A                       		move.w	(a2)+,d0
00016412 1340 0028                  		move.b	d0,$28(a1)
00016416                            
00016416                            loc_163D0:
00016416 51C9 FFE4                  		dbf	d1,Obj6F_Loop
0001641A                            
0001641A 588F                       		addq.l	#4,sp
0001641C 4E75                       		rts	
0001641E                            ; ===========================================================================
0001641E                            
0001641E                            loc_163D8:				; XREF: Obj6F_Index
0001641E 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016424 4EB9 0000 A7F2             		jsr	AnimateSprite
0001642A 4A28 001A                  		tst.b	$1A(a0)
0001642E 6600                       		bne.s	loc_16404
00016430 3F28 0008                  		move.w	8(a0),-(sp)
00016434 6100 0000                  		bsr.w	loc_16424
00016438 323C 001B                  		move.w	#$1B,d1
0001643C 343C 0007                  		move.w	#7,d2
00016440 3602                       		move.w	d2,d3
00016442 5243                       		addq.w	#1,d3
00016444 381F                       		move.w	(sp)+,d4
00016446 6000 963E                  		bra.w	SolidObject
0001644A                            ; ===========================================================================
0001644A                            
0001644A                            loc_16404:
0001644A 0828 0003 0022             		btst	#3,$22(a0)
00016450 6700                       		beq.s	loc_16420
00016452 43F8 D000                  		lea	($FFFFD000).w,a1
00016456 08A9 0003 0022             		bclr	#3,$22(a1)
0001645C 08A8 0003 0022             		bclr	#3,$22(a0)
00016462 4228 0025                  		clr.b	$25(a0)
00016466                            
00016466                            loc_16420:
00016466 6000 0002                  		bra.w	*+4
0001646A                            
0001646A                            loc_16424:
0001646A 3028 0008                  		move.w	8(a0),d0
0001646E B068 0034                  		cmp.w	$34(a0),d0
00016472 6600                       		bne.s	loc_16484
00016474 3028 000C                  		move.w	$C(a0),d0
00016478 B068 0036                  		cmp.w	$36(a0),d0
0001647C 6600                       		bne.s	loc_16484
0001647E 7200                       		moveq	#0,d1
00016480 1228 0038                  		move.b	$38(a0),d1
00016484 D228 003A                  		add.b	$3A(a0),d1
00016488 B228 0039                  		cmp.b	$39(a0),d1
0001648C 6500                       		bcs.s	loc_16456
0001648E 1001                       		move.b	d1,d0
00016490 7200                       		moveq	#0,d1
00016492 4A00                       		tst.b	d0
00016494 6A00                       		bpl.s	loc_16456
00016496 1228 0039                  		move.b	$39(a0),d1
0001649A 5901                       		subq.b	#4,d1
0001649C                            
0001649C                            loc_16456:
0001649C 1141 0038                  		move.b	d1,$38(a0)
000164A0 2268 003C                  		movea.l	$3C(a0),a1
000164A4 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000164AA 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000164B0 4A41                       		tst.w	d1
000164B2 6600                       		bne.s	loc_16474
000164B4 117C 0001 001C             		move.b	#1,$1C(a0)
000164BA                            
000164BA                            loc_16474:
000164BA 0C41 0008                  		cmpi.w	#8,d1
000164BE 6600                       		bne.s	loc_16480
000164C0 117C 0000 001C             		move.b	#0,$1C(a0)
000164C6                            
000164C6                            loc_16480:
000164C6 6100 C136                  		bsr.w	Obj63_ChangeDir
000164CA                            
000164CA                            loc_16484:
000164CA 4EF9 0000 D6A0             		jmp	SpeedToPos
000164D0                            ; ===========================================================================
000164D0                            Ani_obj6F:
000164D0                            	include "_anim\obj6F.asm"
000164D0                            ; ---------------------------------------------------------------------------
000164D0                            ; Animation script - platform on conveyor belt (SBZ)
000164D0                            ; ---------------------------------------------------------------------------
000164D0 0000                       		dc.w byte_1648E-Ani_obj6F
000164D2 0000                       		dc.w byte_164A2-Ani_obj6F
000164D4 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000164E1 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
000164E8 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
000164EC 00                         		even
000164EC 00                         		even
000164EC                            
000164EC 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000164F2 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
000164F8 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001650C 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016520 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016534 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016548 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
0001655C 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016570                            ; ===========================================================================
00016570                            ; ---------------------------------------------------------------------------
00016570                            ; Object 70 - large girder block (SBZ)
00016570                            ; ---------------------------------------------------------------------------
00016570                            
00016570                            Obj70:					; XREF: Obj_Index
00016570 7000                       		moveq	#0,d0
00016572 1028 0024                  		move.b	$24(a0),d0
00016576 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
0001657A 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
0001657E                            ; ===========================================================================
0001657E 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016580 0000                       		dc.w Obj70_Action-Obj70_Index
00016582                            ; ===========================================================================
00016582                            
00016582                            Obj70_Main:				; XREF: Obj70_Index
00016582 5428 0024                  		addq.b	#2,$24(a0)
00016586 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
0001658E 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016594 0028 0004 0001             		ori.b	#4,1(a0)
0001659A 117C 0004 0018             		move.b	#4,$18(a0)
000165A0 117C 0060 0019             		move.b	#$60,$19(a0)
000165A6 117C 0018 0016             		move.b	#$18,$16(a0)
000165AC 3168 0008 0032             		move.w	8(a0),$32(a0)
000165B2 3168 000C 0030             		move.w	$C(a0),$30(a0)
000165B8 6100 0000                  		bsr.w	Obj70_Move2
000165BC                            
000165BC                            Obj70_Action:				; XREF: Obj70_Index
000165BC 3F28 0008                  		move.w	8(a0),-(sp)
000165C0 4A68 003A                  		tst.w	$3A(a0)
000165C4 6700                       		beq.s	Obj70_Move
000165C6 5368 003A                  		subq.w	#1,$3A(a0)
000165CA 6600                       		bne.s	Obj70_Solid
000165CC                            
000165CC                            Obj70_Move:
000165CC 4EB9 0000 D6A0             		jsr	SpeedToPos
000165D2 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000165D6 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000165D8 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000165DC                            
000165DC                            Obj70_Solid:
000165DC 381F                       		move.w	(sp)+,d4
000165DE 4A28 0001                  		tst.b	1(a0)
000165E2 6A00                       		bpl.s	Obj70_ChkDel
000165E4 7200                       		moveq	#0,d1
000165E6 1228 0019                  		move.b	$19(a0),d1
000165EA 0641 000B                  		addi.w	#$B,d1
000165EE 7400                       		moveq	#0,d2
000165F0 1428 0016                  		move.b	$16(a0),d2
000165F4 3602                       		move.w	d2,d3
000165F6 5243                       		addq.w	#1,d3
000165F8 6100 948C                  		bsr.w	SolidObject
000165FC                            
000165FC                            Obj70_ChkDel:
000165FC 3028 0032                  		move.w	$32(a0),d0
00016600 0240 FF80                  		andi.w	#$FF80,d0
00016604 3238 F700                  		move.w	($FFFFF700).w,d1
00016608 0441 0080                  		subi.w	#$80,d1
0001660C 0241 FF80                  		andi.w	#$FF80,d1
00016610 9041                       		sub.w	d1,d0
00016612 0C40 0280                  		cmpi.w	#$280,d0
00016616 6200                       		bhi.s	Obj70_Delete
00016618 4EF9 0000 D6C6             		jmp	DisplaySprite
0001661E                            ; ===========================================================================
0001661E                            
0001661E                            Obj70_Delete:
0001661E 4EF9 0000 D702             		jmp	DeleteObject
00016624                            ; ===========================================================================
00016624                            
00016624                            Obj70_Move2:				; XREF: Obj70_Main
00016624 1028 0038                  		move.b	$38(a0),d0
00016628 0240 0018                  		andi.w	#$18,d0
0001662C 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016632 43F1 0000                  		lea	(a1,d0.w),a1
00016636 3159 0010                  		move.w	(a1)+,$10(a0)
0001663A 3159 0012                  		move.w	(a1)+,$12(a0)
0001663E 3159 0034                  		move.w	(a1)+,$34(a0)
00016642 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016646 317C 0007 003A             		move.w	#7,$3A(a0)
0001664C 4E75                       		rts	
0001664E                            ; ===========================================================================
0001664E 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016656 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
0001665E FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016666 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
0001666E                            ; ---------------------------------------------------------------------------
0001666E                            ; Sprite mappings - large girder block (SBZ)
0001666E                            ; ---------------------------------------------------------------------------
0001666E                            Map_obj70:
0001666E                            	include "_maps\obj70.asm"
0001666E                            ; ---------------------------------------------------------------------------
0001666E                            ; Sprite mappings - large girder block (SBZ)
0001666E                            ; ---------------------------------------------------------------------------
0001666E 0000                       		dc.w byte_1662A-Map_obj70
00016670 0C                         byte_1662A:	dc.b $C
00016671 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016676 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001667B E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016680 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016685 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001668A 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
0001668F E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016694 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016699 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001669E 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
000166A3 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000166A8 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000166AE 00                         		even
000166AE 00                         		even
000166AE                            
000166AE                            ; ===========================================================================
000166AE                            ; ---------------------------------------------------------------------------
000166AE                            ; Object 72 - teleporter (SBZ)
000166AE                            ; ---------------------------------------------------------------------------
000166AE                            
000166AE                            Obj72:					; XREF: Obj_Index
000166AE 7000                       		moveq	#0,d0
000166B0 1028 0024                  		move.b	$24(a0),d0
000166B4 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
000166B8 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
000166BC 3028 0008                  		move.w	8(a0),d0
000166C0 0240 FF80                  		andi.w	#$FF80,d0
000166C4 3238 F700                  		move.w	($FFFFF700).w,d1
000166C8 0441 0080                  		subi.w	#$80,d1
000166CC 0241 FF80                  		andi.w	#$FF80,d1
000166D0 9041                       		sub.w	d1,d0
000166D2 0C40 0280                  		cmpi.w	#$280,d0
000166D6 6200                       		bhi.s	Obj72_Delete
000166D8 4E75                       		rts	
000166DA                            ; ===========================================================================
000166DA                            
000166DA                            Obj72_Delete:
000166DA 4EF9 0000 D702             		jmp	DeleteObject
000166E0                            ; ===========================================================================
000166E0 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000166E2 0000                       		dc.w loc_166C8-Obj72_Index
000166E4 0000                       		dc.w loc_1675E-Obj72_Index
000166E6 0000                       		dc.w loc_16798-Obj72_Index
000166E8                            ; ===========================================================================
000166E8                            
000166E8                            Obj72_Main:				; XREF: Obj72_Index
000166E8 5428 0024                  		addq.b	#2,$24(a0)
000166EC 1028 0028                  		move.b	$28(a0),d0
000166F0 D040                       		add.w	d0,d0
000166F2 0240 001E                  		andi.w	#$1E,d0
000166F6 45FA 0000                  		lea	Obj72_Data(pc),a2
000166FA D4F2 0000                  		adda.w	(a2,d0.w),a2
000166FE 315A 003A                  		move.w	(a2)+,$3A(a0)
00016702 214A 003C                  		move.l	a2,$3C(a0)
00016706 315A 0036                  		move.w	(a2)+,$36(a0)
0001670A 315A 0038                  		move.w	(a2)+,$38(a0)
0001670E                            
0001670E                            loc_166C8:				; XREF: Obj72_Index
0001670E 43F8 D000                  		lea	($FFFFD000).w,a1
00016712 3029 0008                  		move.w	8(a1),d0
00016716 9068 0008                  		sub.w	8(a0),d0
0001671A 0828 0000 0022             		btst	#0,$22(a0)
00016720 6700                       		beq.s	loc_166E0
00016722 0640 000F                  		addi.w	#$F,d0
00016726                            
00016726                            loc_166E0:
00016726 0C40 0010                  		cmpi.w	#$10,d0
0001672A 6400                       		bcc.s	locret_1675C
0001672C 3229 000C                  		move.w	$C(a1),d1
00016730 9268 000C                  		sub.w	$C(a0),d1
00016734 0641 0020                  		addi.w	#$20,d1
00016738 0C41 0040                  		cmpi.w	#$40,d1
0001673C 6400                       		bcc.s	locret_1675C
0001673E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016742 6600                       		bne.s	locret_1675C
00016744 0C28 0007 0028             		cmpi.b	#7,$28(a0)
0001674A 6600                       		bne.s	loc_1670E
0001674C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016752 6500                       		bcs.s	locret_1675C
00016754                            
00016754                            loc_1670E:
00016754 5428 0024                  		addq.b	#2,$24(a0)
00016758 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001675E 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016764 337C 0800 0014             		move.w	#$800,$14(a1)
0001676A 337C 0000 0010             		move.w	#0,$10(a1)
00016770 337C 0000 0012             		move.w	#0,$12(a1)
00016776 08A8 0005 0022             		bclr	#5,$22(a0)
0001677C 08A9 0005 0022             		bclr	#5,$22(a1)
00016782 08E9 0001 0022             		bset	#1,$22(a1)
00016788 3368 0008 0008             		move.w	8(a0),8(a1)
0001678E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016794 4228 0032                  		clr.b	$32(a0)
00016798 303C 00BE                  		move.w	#$BE,d0
0001679C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
000167A2                            
000167A2                            locret_1675C:
000167A2 4E75                       		rts	
000167A4                            ; ===========================================================================
000167A4                            
000167A4                            loc_1675E:				; XREF: Obj72_Index
000167A4 43F8 D000                  		lea	($FFFFD000).w,a1
000167A8 1028 0032                  		move.b	$32(a0),d0
000167AC 5428 0032                  		addq.b	#2,$32(a0)
000167B0 4EB9 0000 29DA             		jsr	(CalcSine).l
000167B6 EA40                       		asr.w	#5,d0
000167B8 3428 000C                  		move.w	$C(a0),d2
000167BC 9440                       		sub.w	d0,d2
000167BE 3342 000C                  		move.w	d2,$C(a1)
000167C2 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000167C8 6600                       		bne.s	locret_16796
000167CA 6100 0000                  		bsr.w	sub_1681C
000167CE 5428 0024                  		addq.b	#2,$24(a0)
000167D2 303C 00BC                  		move.w	#$BC,d0
000167D6 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play teleport sound
000167DC                            
000167DC                            locret_16796:
000167DC 4E75                       		rts	
000167DE                            ; ===========================================================================
000167DE                            
000167DE                            loc_16798:				; XREF: Obj72_Index
000167DE 588F                       		addq.l	#4,sp
000167E0 43F8 D000                  		lea	($FFFFD000).w,a1
000167E4 5328 002E                  		subq.b	#1,$2E(a0)
000167E8 6A00                       		bpl.s	loc_167DA
000167EA 3368 0036 0008             		move.w	$36(a0),8(a1)
000167F0 3368 0038 000C             		move.w	$38(a0),$C(a1)
000167F6 7200                       		moveq	#0,d1
000167F8 1228 003A                  		move.b	$3A(a0),d1
000167FC 5801                       		addq.b	#4,d1
000167FE B228 003B                  		cmp.b	$3B(a0),d1
00016802 6500                       		bcs.s	loc_167C2
00016804 7200                       		moveq	#0,d1
00016806 6000                       		bra.s	loc_16800
00016808                            ; ===========================================================================
00016808                            
00016808                            loc_167C2:
00016808 1141 003A                  		move.b	d1,$3A(a0)
0001680C 2468 003C                  		movea.l	$3C(a0),a2
00016810 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00016816 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001681C 6000 0000                  		bra.w	sub_1681C
00016820                            ; ===========================================================================
00016820                            
00016820                            loc_167DA:
00016820 2429 0008                  		move.l	8(a1),d2
00016824 2629 000C                  		move.l	$C(a1),d3
00016828 3029 0010                  		move.w	$10(a1),d0
0001682C 48C0                       		ext.l	d0
0001682E E180                       		asl.l	#8,d0
00016830 D480                       		add.l	d0,d2
00016832 3029 0012                  		move.w	$12(a1),d0
00016836 48C0                       		ext.l	d0
00016838 E180                       		asl.l	#8,d0
0001683A D680                       		add.l	d0,d3
0001683C 2342 0008                  		move.l	d2,8(a1)
00016840 2343 000C                  		move.l	d3,$C(a1)
00016844 4E75                       		rts	
00016846                            ; ===========================================================================
00016846                            
00016846                            loc_16800:
00016846 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
0001684C 4228 0024                  		clr.b	$24(a0)
00016850 4238 F7C8                  		clr.b	($FFFFF7C8).w
00016854 337C 0000 0010             		move.w	#0,$10(a1)
0001685A 337C 0200 0012             		move.w	#$200,$12(a1)
00016860 4E75                       		rts	
00016862                            
00016862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016862                            
00016862                            
00016862                            sub_1681C:
00016862 7000                       		moveq	#0,d0
00016864 343C 1000                  		move.w	#$1000,d2
00016868 3028 0036                  		move.w	$36(a0),d0
0001686C 9069 0008                  		sub.w	8(a1),d0
00016870 6C00                       		bge.s	loc_16830
00016872 4440                       		neg.w	d0
00016874 4442                       		neg.w	d2
00016876                            
00016876                            loc_16830:
00016876 7200                       		moveq	#0,d1
00016878 363C 1000                  		move.w	#$1000,d3
0001687C 3228 0038                  		move.w	$38(a0),d1
00016880 9269 000C                  		sub.w	$C(a1),d1
00016884 6C00                       		bge.s	loc_16844
00016886 4441                       		neg.w	d1
00016888 4443                       		neg.w	d3
0001688A                            
0001688A                            loc_16844:
0001688A B240                       		cmp.w	d0,d1
0001688C 6500                       		bcs.s	loc_1687A
0001688E 7200                       		moveq	#0,d1
00016890 3228 0038                  		move.w	$38(a0),d1
00016894 9269 000C                  		sub.w	$C(a1),d1
00016898 4841                       		swap	d1
0001689A 83C3                       		divs.w	d3,d1
0001689C 7000                       		moveq	#0,d0
0001689E 3028 0036                  		move.w	$36(a0),d0
000168A2 9069 0008                  		sub.w	8(a1),d0
000168A6 6700                       		beq.s	loc_16866
000168A8 4840                       		swap	d0
000168AA 81C1                       		divs.w	d1,d0
000168AC                            
000168AC                            loc_16866:
000168AC 3340 0010                  		move.w	d0,$10(a1)
000168B0 3343 0012                  		move.w	d3,$12(a1)
000168B4 4A41                       		tst.w	d1
000168B6 6A00                       		bpl.s	loc_16874
000168B8 4441                       		neg.w	d1
000168BA                            
000168BA                            loc_16874:
000168BA 3141 002E                  		move.w	d1,$2E(a0)
000168BE 4E75                       		rts	
000168C0                            ; ===========================================================================
000168C0                            
000168C0                            loc_1687A:
000168C0 7000                       		moveq	#0,d0
000168C2 3028 0036                  		move.w	$36(a0),d0
000168C6 9069 0008                  		sub.w	8(a1),d0
000168CA 4840                       		swap	d0
000168CC 81C2                       		divs.w	d2,d0
000168CE 7200                       		moveq	#0,d1
000168D0 3228 0038                  		move.w	$38(a0),d1
000168D4 9269 000C                  		sub.w	$C(a1),d1
000168D8 6700                       		beq.s	loc_16898
000168DA 4841                       		swap	d1
000168DC 83C0                       		divs.w	d0,d1
000168DE                            
000168DE                            loc_16898:
000168DE 3341 0012                  		move.w	d1,$12(a1)
000168E2 3342 0010                  		move.w	d2,$10(a1)
000168E6 4A40                       		tst.w	d0
000168E8 6A00                       		bpl.s	loc_168A6
000168EA 4440                       		neg.w	d0
000168EC                            
000168EC                            loc_168A6:
000168EC 3140 002E                  		move.w	d0,$2E(a0)
000168F0 4E75                       		rts	
000168F2                            ; End of function sub_1681C
000168F2                            
000168F2                            ; ===========================================================================
000168F2 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000168F8 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000168FE 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00016902 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00016908 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
0001690E 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00016914 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001691A 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00016920 0884 0298 0894             		dc.w $884, $298, $894
00016926 0270 0894 0190             		dc.w $270, $894, $190
0001692C 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016932 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00016938 1184 0498 1158             		dc.w $1184, $498, $1158
0001693E 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00016944 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0001694A 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016950 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00016956 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
0001695C 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00016962 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00016968 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001696E FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00016974 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
0001697A                            ; ===========================================================================
0001697A                            ; ---------------------------------------------------------------------------
0001697A                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001697A                            ; ---------------------------------------------------------------------------
0001697A                            
0001697A                            Obj78:					; XREF: Obj_Index
0001697A 7000                       		moveq	#0,d0
0001697C 1028 0024                  		move.b	$24(a0),d0
00016980 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00016984 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00016988                            ; ===========================================================================
00016988 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
0001698A 0000                       		dc.w Obj78_Action-Obj78_Index
0001698C 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
0001698E 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00016990 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016992 0000                       		dc.w Obj78_Delete-Obj78_Index
00016994 0000                       		dc.w loc_16CC0-Obj78_Index
00016996                            ; ===========================================================================
00016996                            
00016996                            locret_16950:
00016996 4E75                       		rts	
00016998                            ; ===========================================================================
00016998                            
00016998                            Obj78_Main:				; XREF: Obj78_Index
00016998 117C 0007 0016             		move.b	#7,$16(a0)
0001699E 117C 0008 0017             		move.b	#8,$17(a0)
000169A4 4EB9 0000 D674             		jsr	ObjectFall
000169AA 4EBA E4B8                  		jsr	ObjHitFloor
000169AE 4A41                       		tst.w	d1
000169B0 6AE4                       		bpl.s	locret_16950
000169B2 D368 000C                  		add.w	d1,$C(a0)
000169B6 4268 0012                  		clr.w	$12(a0)
000169BA 5428 0024                  		addq.b	#2,$24(a0)
000169BE 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000169C6 317C 22B0 0002             		move.w	#$22B0,2(a0)
000169CC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000169D2 6700                       		beq.s	loc_16996
000169D4 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
000169DA                            
000169DA                            loc_16996:
000169DA 0228 0003 0001             		andi.b	#3,1(a0)
000169E0 0028 0004 0001             		ori.b	#4,1(a0)
000169E6 1168 0001 0022             		move.b	1(a0),$22(a0)
000169EC 117C 0004 0018             		move.b	#4,$18(a0)
000169F2 117C 0008 0019             		move.b	#8,$19(a0)
000169F8 117C 000B 0020             		move.b	#$B,$20(a0)
000169FE 3428 0008                  		move.w	8(a0),d2
00016A02 7A0C                       		moveq	#$C,d5
00016A04 0828 0000 0022             		btst	#0,$22(a0)
00016A0A 6700                       		beq.s	loc_169CA
00016A0C 4445                       		neg.w	d5
00016A0E                            
00016A0E                            loc_169CA:
00016A0E 1C3C 0004                  		move.b	#4,d6
00016A12 7600                       		moveq	#0,d3
00016A14 7804                       		moveq	#4,d4
00016A16 2448                       		movea.l	a0,a2
00016A18 7202                       		moveq	#2,d1
00016A1A                            
00016A1A                            Obj78_LoadBody:
00016A1A 4EB9 0000 DB62             		jsr	SingleObjLoad2
00016A20 6600                       		bne.s	Obj78_QuitLoad
00016A22 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00016A26 1346 0024                  		move.b	d6,$24(a1)
00016A2A 5406                       		addq.b	#2,d6
00016A2C 2368 0004 0004             		move.l	4(a0),4(a1)
00016A32 3368 0002 0002             		move.w	2(a0),2(a1)
00016A38 137C 0005 0018             		move.b	#5,$18(a1)
00016A3E 137C 0008 0019             		move.b	#8,$19(a1)
00016A44 137C 00CB 0020             		move.b	#$CB,$20(a1)
00016A4A D445                       		add.w	d5,d2
00016A4C 3342 0008                  		move.w	d2,8(a1)
00016A50 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016A56 1368 0022 0022             		move.b	$22(a0),$22(a1)
00016A5C 1368 0022 0001             		move.b	$22(a0),1(a1)
00016A62 137C 0008 001A             		move.b	#8,$1A(a1)
00016A68 234A 003C                  		move.l	a2,$3C(a1)
00016A6C 1344 003C                  		move.b	d4,$3C(a1)
00016A70 5804                       		addq.b	#4,d4
00016A72 2449                       		movea.l	a1,a2
00016A74                            
00016A74                            Obj78_QuitLoad:
00016A74 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00016A78                            
00016A78 117C 0007 002A             		move.b	#7,$2A(a0)
00016A7E 4228 003C                  		clr.b	$3C(a0)
00016A82                            
00016A82                            Obj78_Action:				; XREF: Obj78_Index
00016A82 4A28 0022                  		tst.b	$22(a0)
00016A86 6B00 0000                  		bmi.w	loc_16C96
00016A8A 7000                       		moveq	#0,d0
00016A8C 1028 0025                  		move.b	$25(a0),d0
00016A90 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00016A94 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00016A98 1228 002B                  		move.b	$2B(a0),d1
00016A9C 6A00                       		bpl.s	Obj78_Display
00016A9E 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00016AA4 1028 0026                  		move.b	$26(a0),d0
00016AA8 0240 007F                  		andi.w	#$7F,d0
00016AAC 5828 0026                  		addq.b	#4,$26(a0)
00016AB0 1031 0000                  		move.b	(a1,d0.w),d0
00016AB4 6A00                       		bpl.s	Obj78_AniHead
00016AB6 08A8 0007 002B             		bclr	#7,$2B(a0)
00016ABC 6000                       		bra.s	Obj78_Display
00016ABE                            ; ===========================================================================
00016ABE                            
00016ABE                            Obj78_AniHead:
00016ABE 0201 0010                  		andi.b	#$10,d1
00016AC2 D001                       		add.b	d1,d0
00016AC4 1140 001A                  		move.b	d0,$1A(a0)
00016AC8                            
00016AC8                            Obj78_Display:
00016AC8 3028 0008                  		move.w	8(a0),d0
00016ACC 0240 FF80                  		andi.w	#$FF80,d0
00016AD0 3238 F700                  		move.w	($FFFFF700).w,d1
00016AD4 0441 0080                  		subi.w	#$80,d1
00016AD8 0241 FF80                  		andi.w	#$FF80,d1
00016ADC 9041                       		sub.w	d1,d0
00016ADE 0C40 0280                  		cmpi.w	#$280,d0
00016AE2 6200 0000                  		bhi.w	Obj78_ChkGone
00016AE6 4EF9 0000 D6C6             		jmp	DisplaySprite
00016AEC                            ; ===========================================================================
00016AEC                            
00016AEC                            Obj78_ChkGone:
00016AEC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016AF0 7000                       		moveq	#0,d0
00016AF2 1028 0023                  		move.b	$23(a0),d0
00016AF6 6700                       		beq.s	loc_16ABC
00016AF8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016AFE                            
00016AFE                            loc_16ABC:
00016AFE 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00016B04 4E75                       		rts	
00016B06                            ; ===========================================================================
00016B06                            
00016B06                            Obj78_Delete:				; XREF: Obj78_Index
00016B06 4EF9 0000 D702             		jmp	DeleteObject
00016B0C                            ; ===========================================================================
00016B0C 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00016B0E 0000                       		dc.w loc_16B02-Obj78_Index2
00016B10                            ; ===========================================================================
00016B10                            
00016B10                            Obj78_Move:				; XREF: Obj78_Index2
00016B10 5328 002A                  		subq.b	#1,$2A(a0)
00016B14 6B00                       		bmi.s	Obj78_Move2
00016B16 4E75                       		rts	
00016B18                            ; ===========================================================================
00016B18                            
00016B18                            Obj78_Move2:
00016B18 5428 0025                  		addq.b	#2,$25(a0)
00016B1C 117C 0010 002A             		move.b	#$10,$2A(a0)
00016B22 317C FF40 0010             		move.w	#-$C0,$10(a0)
00016B28 317C 0040 0014             		move.w	#$40,$14(a0)
00016B2E 0868 0004 002B             		bchg	#4,$2B(a0)
00016B34 6600                       		bne.s	loc_16AFC
00016B36 4268 0010                  		clr.w	$10(a0)
00016B3A 4468 0014                  		neg.w	$14(a0)
00016B3E                            
00016B3E                            loc_16AFC:
00016B3E 08E8 0007 002B             		bset	#7,$2B(a0)
00016B44                            
00016B44                            loc_16B02:				; XREF: Obj78_Index2
00016B44 5328 002A                  		subq.b	#1,$2A(a0)
00016B48 6B00                       		bmi.s	loc_16B5E
00016B4A 2F28 0008                  		move.l	8(a0),-(sp)
00016B4E 2428 0008                  		move.l	8(a0),d2
00016B52 3028 0010                  		move.w	$10(a0),d0
00016B56 0828 0000 0022             		btst	#0,$22(a0)
00016B5C 6700                       		beq.s	loc_16B1E
00016B5E 4440                       		neg.w	d0
00016B60                            
00016B60                            loc_16B1E:
00016B60 48C0                       		ext.l	d0
00016B62 E180                       		asl.l	#8,d0
00016B64 D480                       		add.l	d0,d2
00016B66 2142 0008                  		move.l	d2,8(a0)
00016B6A 4EBA E2F8                  		jsr	ObjHitFloor
00016B6E 241F                       		move.l	(sp)+,d2
00016B70 0C41 FFF8                  		cmpi.w	#-8,d1
00016B74 6D00                       		blt.s	loc_16B70
00016B76 0C41 000C                  		cmpi.w	#$C,d1
00016B7A 6C00                       		bge.s	loc_16B70
00016B7C D368 000C                  		add.w	d1,$C(a0)
00016B80 4842                       		swap	d2
00016B82 B468 0008                  		cmp.w	8(a0),d2
00016B86 6700                       		beq.s	locret_16B5C
00016B88 7000                       		moveq	#0,d0
00016B8A 1028 003C                  		move.b	$3C(a0),d0
00016B8E 5228 003C                  		addq.b	#1,$3C(a0)
00016B92 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016B98 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016B9C                            
00016B9C                            locret_16B5C:
00016B9C 4E75                       		rts	
00016B9E                            ; ===========================================================================
00016B9E                            
00016B9E                            loc_16B5E:
00016B9E 5528 0025                  		subq.b	#2,$25(a0)
00016BA2 117C 0007 002A             		move.b	#7,$2A(a0)
00016BA8 317C 0000 0010             		move.w	#0,$10(a0)
00016BAE 4E75                       		rts	
00016BB0                            ; ===========================================================================
00016BB0                            
00016BB0                            loc_16B70:
00016BB0 2142 0008                  		move.l	d2,8(a0)
00016BB4 0868 0000 0022             		bchg	#0,$22(a0)
00016BBA 1168 0022 0001             		move.b	$22(a0),1(a0)
00016BC0 7000                       		moveq	#0,d0
00016BC2 1028 003C                  		move.b	$3C(a0),d0
00016BC6 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00016BCC 5228 003C                  		addq.b	#1,$3C(a0)
00016BD0 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016BD6 4E75                       		rts	
00016BD8                            ; ===========================================================================
00016BD8                            
00016BD8                            Obj78_BodySeg2:				; XREF: Obj78_Index
00016BD8 2268 003C                  		movea.l	$3C(a0),a1
00016BDC 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00016BE2 6A00                       		bpl.s	Obj78_BodySeg1
00016BE4 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00016BEA 1028 0026                  		move.b	$26(a0),d0
00016BEE 0240 007F                  		andi.w	#$7F,d0
00016BF2 5828 0026                  		addq.b	#4,$26(a0)
00016BF6 4A31 0004                  		tst.b	4(a1,d0.w)
00016BFA 6A00                       		bpl.s	Obj78_AniBody
00016BFC 5828 0026                  		addq.b	#4,$26(a0)
00016C00                            
00016C00                            Obj78_AniBody:
00016C00 1031 0000                  		move.b	(a1,d0.w),d0
00016C04 5000                       		addq.b	#8,d0
00016C06 1140 001A                  		move.b	d0,$1A(a0)
00016C0A                            
00016C0A                            Obj78_BodySeg1:				; XREF: Obj78_Index
00016C0A 2268 003C                  		movea.l	$3C(a0),a1
00016C0E 4A28 0022                  		tst.b	$22(a0)
00016C12 6B00 0000                  		bmi.w	loc_16C90
00016C16 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00016C1C 1169 0025 0025             		move.b	$25(a1),$25(a0)
00016C22 6700 0000                  		beq.w	loc_16C64
00016C26 3169 0014 0014             		move.w	$14(a1),$14(a0)
00016C2C 3029 0010                  		move.w	$10(a1),d0
00016C30 D069 0014                  		add.w	$14(a1),d0
00016C34 3140 0010                  		move.w	d0,$10(a0)
00016C38 2428 0008                  		move.l	8(a0),d2
00016C3C 2602                       		move.l	d2,d3
00016C3E 3028 0010                  		move.w	$10(a0),d0
00016C42 0828 0000 0022             		btst	#0,$22(a0)
00016C48 6700                       		beq.s	loc_16C0C
00016C4A 4440                       		neg.w	d0
00016C4C                            
00016C4C                            loc_16C0C:
00016C4C 48C0                       		ext.l	d0
00016C4E E180                       		asl.l	#8,d0
00016C50 D480                       		add.l	d0,d2
00016C52 2142 0008                  		move.l	d2,8(a0)
00016C56 4843                       		swap	d3
00016C58 B668 0008                  		cmp.w	8(a0),d3
00016C5C 6700                       		beq.s	loc_16C64
00016C5E 7000                       		moveq	#0,d0
00016C60 1028 003C                  		move.b	$3C(a0),d0
00016C64 1231 002C                  		move.b	$2C(a1,d0.w),d1
00016C68 0C01 0080                  		cmpi.b	#-$80,d1
00016C6C 6600                       		bne.s	loc_16C50
00016C6E 4843                       		swap	d3
00016C70 2143 0008                  		move.l	d3,8(a0)
00016C74 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016C78 0868 0000 0022             		bchg	#0,$22(a0)
00016C7E 1168 0022 0001             		move.b	$22(a0),1(a0)
00016C84 5228 003C                  		addq.b	#1,$3C(a0)
00016C88 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016C8E 6000                       		bra.s	loc_16C64
00016C90                            ; ===========================================================================
00016C90                            
00016C90                            loc_16C50:
00016C90 4881                       		ext.w	d1
00016C92 D368 000C                  		add.w	d1,$C(a0)
00016C96 5228 003C                  		addq.b	#1,$3C(a0)
00016C9A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016CA0 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016CA4                            
00016CA4                            loc_16C64:
00016CA4 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00016CAA 6700                       		beq.s	loc_16C90
00016CAC 0C11 0027                  		cmpi.b	#$27,0(a1)
00016CB0 6700                       		beq.s	loc_16C7C
00016CB2 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00016CB8 6600                       		bne.s	loc_16C82
00016CBA                            
00016CBA                            loc_16C7C:
00016CBA 117C 000A 0024             		move.b	#$A,$24(a0)
00016CC0                            
00016CC0                            loc_16C82:
00016CC0 4EF9 0000 D6C6             		jmp	DisplaySprite
00016CC6                            
00016CC6                            ; ===========================================================================
00016CC6 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00016CCE                            ; ===========================================================================
00016CCE                            
00016CCE                            loc_16C90:
00016CCE 08E9 0007 0022             		bset	#7,$22(a1)
00016CD4                            
00016CD4                            loc_16C96:
00016CD4 7000                       		moveq	#0,d0
00016CD6 1028 0024                  		move.b	$24(a0),d0
00016CDA 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00016CDE 0828 0000 0022             		btst	#0,$22(a0)
00016CE4 6700                       		beq.s	loc_16CAA
00016CE6 4440                       		neg.w	d0
00016CE8                            
00016CE8                            loc_16CAA:
00016CE8 3140 0010                  		move.w	d0,$10(a0)
00016CEC 317C FC00 0012             		move.w	#-$400,$12(a0)
00016CF2 117C 000C 0024             		move.b	#$C,$24(a0)
00016CF8 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00016CFE                            
00016CFE                            loc_16CC0:				; XREF: Obj78_Index
00016CFE 4EB9 0000 D674             		jsr	ObjectFall
00016D04 4A68 0012                  		tst.w	$12(a0)
00016D08 6B00                       		bmi.s	loc_16CE0
00016D0A 4EBA E158                  		jsr	ObjHitFloor
00016D0E 4A41                       		tst.w	d1
00016D10 6A00                       		bpl.s	loc_16CE0
00016D12 D368 000C                  		add.w	d1,$C(a0)
00016D16 317C FC00 0012             		move.w	#-$400,$12(a0)
00016D1C                            
00016D1C                            loc_16CE0:
00016D1C 4A28 0001                  		tst.b	1(a0)
00016D20 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00016D24 4EF9 0000 D6C6             		jmp	DisplaySprite
00016D2A                            ; ===========================================================================
00016D2A                            Ani_obj78:
00016D2A                            	include "_anim\obj78.asm"
00016D2A                            ; ---------------------------------------------------------------------------
00016D2A                            ; Animation script - Caterkiller enemy (uses non-standard format)
00016D2A                            ; ---------------------------------------------------------------------------
00016D2A 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00016D3A 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00016D4A 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00016D5A 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00016D6A 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00016D7A 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00016D8A 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00016D9A 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00016DAA                            	even
00016DAA                            	even
00016DAA                            
00016DAA                            ; ---------------------------------------------------------------------------
00016DAA                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00016DAA                            ; ---------------------------------------------------------------------------
00016DAA                            Map_obj78:
00016DAA                            	include "_maps\obj78.asm"
00016DAA                            ; ---------------------------------------------------------------------------
00016DAA                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00016DAA                            ; ---------------------------------------------------------------------------
00016DAA 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00016DAE 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00016DB2 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00016DB6 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00016DBA 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00016DBE 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00016DC2 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00016DC6 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00016DCA 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00016DCE 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00016DD2 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00016DD6 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00016DDA 01                         byte_16D9E:	dc.b 1
00016DDB F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00016DE0 01                         byte_16DA4:	dc.b 1
00016DE1 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00016DE6 01                         byte_16DAA:	dc.b 1
00016DE7 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00016DEC 01                         byte_16DB0:	dc.b 1
00016DED EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00016DF2 01                         byte_16DB6:	dc.b 1
00016DF3 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00016DF8 01                         byte_16DBC:	dc.b 1
00016DF9 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00016DFE 01                         byte_16DC2:	dc.b 1
00016DFF EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00016E04 01                         byte_16DC8:	dc.b 1
00016E05 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00016E0A 01                         byte_16DCE:	dc.b 1
00016E0B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00016E10 01                         byte_16DD4:	dc.b 1
00016E11 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00016E16 01                         byte_16DDA:	dc.b 1
00016E17 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00016E1C 01                         byte_16DE0:	dc.b 1
00016E1D F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00016E22 01                         byte_16DE6:	dc.b 1
00016E23 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00016E28 01                         byte_16DEC:	dc.b 1
00016E29 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00016E2E 01                         byte_16DF2:	dc.b 1
00016E2F F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00016E34 01                         byte_16DF8:	dc.b 1
00016E35 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00016E3A 01                         byte_16DFE:	dc.b 1
00016E3B F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00016E40 01                         byte_16E04:	dc.b 1
00016E41 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00016E46 01                         byte_16E0A:	dc.b 1
00016E47 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00016E4C 01                         byte_16E10:	dc.b 1
00016E4D EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00016E52 01                         byte_16E16:	dc.b 1
00016E53 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00016E58 01                         byte_16E1C:	dc.b 1
00016E59 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00016E5E 01                         byte_16E22:	dc.b 1
00016E5F EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00016E64 01                         byte_16E28:	dc.b 1
00016E65 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00016E6A                            		even
00016E6A                            		even
00016E6A                            
00016E6A                            ; ===========================================================================
00016E6A                            ; ---------------------------------------------------------------------------
00016E6A                            ; Object 79 - lamppost
00016E6A                            ; ---------------------------------------------------------------------------
00016E6A                            
00016E6A                            Obj79:					; XREF: Obj_Index
00016E6A 7000                       		moveq	#0,d0
00016E6C 1028 0024                  		move.b	$24(a0),d0
00016E70 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00016E74 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00016E78 4EFA 88E4                  		jmp	MarkObjGone
00016E7C                            ; ===========================================================================
00016E7C 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00016E7E 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00016E80 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00016E82 0000                       		dc.w Obj79_Twirl-Obj79_Index
00016E84                            ; ===========================================================================
00016E84                            
00016E84                            Obj79_Main:				; XREF: Obj79_Index
00016E84 5428 0024                  		addq.b	#2,$24(a0)
00016E88 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00016E90 317C 07A0 0002             		move.w	#$7A0,2(a0)
00016E96 117C 0004 0001             		move.b	#4,1(a0)
00016E9C 117C 0008 0019             		move.b	#8,$19(a0)
00016EA2 117C 0005 0018             		move.b	#5,$18(a0)
00016EA8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016EAC 7000                       		moveq	#0,d0
00016EAE 1028 0023                  		move.b	$23(a0),d0
00016EB2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016EB8 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016EBE 6600                       		bne.s	Obj79_RedLamp
00016EC0 1238 FE30                  		move.b	($FFFFFE30).w,d1
00016EC4 0201 007F                  		andi.b	#$7F,d1
00016EC8 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00016ECC 0202 007F                  		andi.b	#$7F,d2
00016ED0 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00016ED2 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00016ED4                            
00016ED4                            Obj79_RedLamp:
00016ED4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016EDA 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00016EE0 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00016EE6 4E75                       		rts	
00016EE8                            ; ===========================================================================
00016EE8                            
00016EE8                            Obj79_BlueLamp:				; XREF: Obj79_Index
00016EE8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00016EEC 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00016EF0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016EF4 6B00 0000                  		bmi.w	locret_16F90
00016EF8 1238 FE30                  		move.b	($FFFFFE30).w,d1
00016EFC 0201 007F                  		andi.b	#$7F,d1
00016F00 1428 0028                  		move.b	$28(a0),d2
00016F04 0202 007F                  		andi.b	#$7F,d2
00016F08 B202                       		cmp.b	d2,d1
00016F0A 6500                       		bcs.s	Obj79_HitLamp
00016F0C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016F10 7000                       		moveq	#0,d0
00016F12 1028 0023                  		move.b	$23(a0),d0
00016F16 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016F1C 117C 0004 0024             		move.b	#4,$24(a0)
00016F22 117C 0003 001A             		move.b	#3,$1A(a0)
00016F28 6000 0000                  		bra.w	locret_16F90
00016F2C                            ; ===========================================================================
00016F2C                            
00016F2C                            Obj79_HitLamp:
00016F2C 3038 D008                  		move.w	($FFFFD008).w,d0
00016F30 9068 0008                  		sub.w	8(a0),d0
00016F34 5040                       		addq.w	#8,d0
00016F36 0C40 0010                  		cmpi.w	#$10,d0
00016F3A 6400 0000                  		bcc.w	locret_16F90
00016F3E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016F42 9068 000C                  		sub.w	$C(a0),d0
00016F46 0640 0040                  		addi.w	#$40,d0
00016F4A 0C40 0068                  		cmpi.w	#$68,d0
00016F4E 6400                       		bcc.s	locret_16F90
00016F50 303C 00A1                  		move.w	#$A1,d0
00016F54 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lamppost sound
00016F5A 5428 0024                  		addq.b	#2,$24(a0)
00016F5E 4EB9 0000 DB4C             		jsr	SingleObjLoad
00016F64 6600                       		bne.s	loc_16F76
00016F66 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00016F6A 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00016F70 3368 0008 0030             		move.w	8(a0),$30(a1)
00016F76 3368 000C 0032             		move.w	$C(a0),$32(a1)
00016F7C 0469 0018 0032             		subi.w	#$18,$32(a1)
00016F82 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00016F8A 337C 07A0 0002             		move.w	#$7A0,2(a1)
00016F90 137C 0004 0001             		move.b	#4,1(a1)
00016F96 137C 0008 0019             		move.b	#8,$19(a1)
00016F9C 137C 0004 0018             		move.b	#4,$18(a1)
00016FA2 137C 0002 001A             		move.b	#2,$1A(a1)
00016FA8 337C 0020 0036             		move.w	#$20,$36(a1)
00016FAE                            
00016FAE                            loc_16F76:
00016FAE 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00016FB4 6100 0000                  		bsr.w	Obj79_StoreInfo
00016FB8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016FBC 7000                       		moveq	#0,d0
00016FBE 1028 0023                  		move.b	$23(a0),d0
00016FC2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016FC8                            
00016FC8                            locret_16F90:
00016FC8 4E75                       		rts	
00016FCA                            ; ===========================================================================
00016FCA                            
00016FCA                            Obj79_AfterHit:				; XREF: Obj79_Index
00016FCA 4E75                       		rts	
00016FCC                            ; ===========================================================================
00016FCC                            
00016FCC                            Obj79_Twirl:				; XREF: Obj79_Index
00016FCC 5368 0036                  		subq.w	#1,$36(a0)
00016FD0 6A00                       		bpl.s	loc_16FA0
00016FD2 117C 0004 0024             		move.b	#4,$24(a0)
00016FD8                            
00016FD8                            loc_16FA0:
00016FD8 1028 0026                  		move.b	$26(a0),d0
00016FDC 0428 0010 0026             		subi.b	#$10,$26(a0)
00016FE2 0400 0040                  		subi.b	#$40,d0
00016FE6 4EB9 0000 29DA             		jsr	(CalcSine).l
00016FEC C3FC 0C00                  		muls.w	#$C00,d1
00016FF0 4841                       		swap	d1
00016FF2 D268 0030                  		add.w	$30(a0),d1
00016FF6 3141 0008                  		move.w	d1,8(a0)
00016FFA C1FC 0C00                  		muls.w	#$C00,d0
00016FFE 4840                       		swap	d0
00017000 D068 0032                  		add.w	$32(a0),d0
00017004 3140 000C                  		move.w	d0,$C(a0)
00017008 4E75                       		rts	
0001700A                            ; ===========================================================================
0001700A                            ; ---------------------------------------------------------------------------
0001700A                            ; Subroutine to	store information when you hit a lamppost
0001700A                            ; ---------------------------------------------------------------------------
0001700A                            
0001700A                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
0001700A 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017010 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017016 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
0001701C 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017022 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017028 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
0001702E 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017034 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
0001703A 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017040 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017046 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
0001704C 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017052 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017058 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
0001705E 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017064 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
0001706A 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017070 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017076 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
0001707C 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017082 4E75                       		rts	
00017084                            
00017084                            ; ---------------------------------------------------------------------------
00017084                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017084                            ; ---------------------------------------------------------------------------
00017084                            
00017084                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017084                            
00017084                            
00017084                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017084 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
0001708A 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017090 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017096 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
0001709C 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
000170A2 4278 FE20                  		clr.w	($FFFFFE20).w
000170A6 4238 FE1B                  		clr.b	($FFFFFE1B).w
000170AA 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
000170B0 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
000170B6 5338 FE24                  		subq.b	#1,($FFFFFE24).w
000170BA 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
000170C0 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000170C6 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
000170CC 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
000170D2 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
000170D8 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
000170DE 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
000170E4 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
000170EA 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
000170F0 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
000170F6 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
000170FC 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017102 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017108 6600                       		bne.s	loc_170E4
0001710A 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017110 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017116 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0001711C                            
0001711C                            loc_170E4:
0001711C 4A38 FE30                  		tst.b	($FFFFFE30).w
00017120 6A00                       		bpl.s	locret_170F6
00017122 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017126 0440 00A0                  		subi.w	#$A0,d0
0001712A 31C0 F728                  		move.w	d0,($FFFFF728).w
0001712E                            
0001712E                            locret_170F6:
0001712E 4E75                       		rts	
00017130                            ; End of function Obj79_LoadInfo
00017130                            
00017130                            ; ===========================================================================
00017130                            ; ---------------------------------------------------------------------------
00017130                            ; Sprite mappings - lamppost
00017130                            ; ---------------------------------------------------------------------------
00017130                            Map_obj79:
00017130                            	include "_maps\obj79.asm"
00017130                            ; ---------------------------------------------------------------------------
00017130                            ; Sprite mappings - lamppost
00017130                            ; ---------------------------------------------------------------------------
00017130 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017134 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017138 06                         byte_17100:	dc.b 6
00017139 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001713E E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017143 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017148 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001714D D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017152 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017157 04                         byte_1711F:	dc.b 4
00017158 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001715D E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017162 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017167 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001716C 02                         byte_17134:	dc.b 2
0001716D F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017172 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017177 06                         byte_1713F:	dc.b 6
00017178 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001717D E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017182 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017187 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001718C D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017191 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017196                            		even
00017196                            		even
00017196                            
00017196                            ; ===========================================================================
00017196                            ; ---------------------------------------------------------------------------
00017196                            ; Object 7D - hidden points at the end of a level
00017196                            ; ---------------------------------------------------------------------------
00017196                            
00017196                            Obj7D:					; XREF: Obj_Index
00017196 7000                       		moveq	#0,d0
00017198 1028 0024                  		move.b	$24(a0),d0
0001719C 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
000171A0 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
000171A4                            ; ===========================================================================
000171A4 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
000171A6 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
000171A8                            ; ===========================================================================
000171A8                            
000171A8                            Obj7D_Main:				; XREF: Obj7D_Index
000171A8 7410                       		moveq	#$10,d2
000171AA 3602                       		move.w	d2,d3
000171AC D643                       		add.w	d3,d3
000171AE 43F8 D000                  		lea	($FFFFD000).w,a1
000171B2 3029 0008                  		move.w	8(a1),d0
000171B6 9068 0008                  		sub.w	8(a0),d0
000171BA D042                       		add.w	d2,d0
000171BC B043                       		cmp.w	d3,d0
000171BE 6400                       		bcc.s	Obj7D_ChkDel
000171C0 3229 000C                  		move.w	$C(a1),d1
000171C4 9268 000C                  		sub.w	$C(a0),d1
000171C8 D242                       		add.w	d2,d1
000171CA B243                       		cmp.w	d3,d1
000171CC 6400                       		bcc.s	Obj7D_ChkDel
000171CE 4A78 FE08                  		tst.w	($FFFFFE08).w
000171D2 6600                       		bne.s	Obj7D_ChkDel
000171D4 4A38 F7CD                  		tst.b	($FFFFF7CD).w
000171D8 6600                       		bne.s	Obj7D_ChkDel
000171DA 5428 0024                  		addq.b	#2,$24(a0)
000171DE 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
000171E6 317C 84B6 0002             		move.w	#$84B6,2(a0)
000171EC 0028 0004 0001             		ori.b	#4,1(a0)
000171F2 117C 0000 0018             		move.b	#0,$18(a0)
000171F8 117C 0010 0019             		move.b	#$10,$19(a0)
000171FE 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017204 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
0001720A 303C 00C9                  		move.w	#$C9,d0
0001720E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play bonus sound
00017214 7000                       		moveq	#0,d0
00017216 1028 0028                  		move.b	$28(a0),d0
0001721A D040                       		add.w	d0,d0
0001721C 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017220 4EB9 0000 0000             		jsr	AddPoints
00017226                            
00017226                            Obj7D_ChkDel:
00017226 3028 0008                  		move.w	8(a0),d0
0001722A 0240 FF80                  		andi.w	#$FF80,d0
0001722E 3238 F700                  		move.w	($FFFFF700).w,d1
00017232 0441 0080                  		subi.w	#$80,d1
00017236 0241 FF80                  		andi.w	#$FF80,d1
0001723A 9041                       		sub.w	d1,d0
0001723C 0C40 0280                  		cmpi.w	#$280,d0
00017240 6200                       		bhi.s	Obj7D_Delete
00017242 4E75                       		rts	
00017244                            ; ===========================================================================
00017244                            
00017244                            Obj7D_Delete:
00017244 4EF9 0000 D702             		jmp	DeleteObject
0001724A                            ; ===========================================================================
0001724A 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
0001724C 03E8                       		dc.w 1000
0001724E 0064                       		dc.w 100
00017250 0001                       		dc.w 1
00017252                            ; ===========================================================================
00017252                            
00017252                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017252 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017256 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017258 3028 0008                  		move.w	8(a0),d0
0001725C 0240 FF80                  		andi.w	#-$80,d0
00017260 3238 F700                  		move.w	($FFFFF700).w,d1
00017264 0441 0080                  		subi.w	#$80,d1
00017268 0241 FF80                  		andi.w	#-$80,d1
0001726C 9041                       		sub.w	d1,d0
0001726E 0C40 0280                  		cmpi.w	#$280,d0
00017272 6200                       		bhi.s	Obj7D_Delete2
00017274 4EF9 0000 D6C6             		jmp	DisplaySprite
0001727A                            ; ===========================================================================
0001727A                            
0001727A                            Obj7D_Delete2:
0001727A 4EF9 0000 D702             		jmp	DeleteObject
00017280                            ; ===========================================================================
00017280                            ; ---------------------------------------------------------------------------
00017280                            ; Sprite mappings - hidden points at the end of	a level
00017280                            ; ---------------------------------------------------------------------------
00017280                            Map_obj7D:
00017280                            	include "_maps\obj7D.asm"
00017280                            ; ---------------------------------------------------------------------------
00017280                            ; Sprite mappings - hidden points at the end of	a level
00017280                            ; ---------------------------------------------------------------------------
00017280 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017284 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017288 00                         byte_17250:	dc.b 0
00017289 01                         byte_17251:	dc.b 1
0001728A F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001728F 01                         byte_17257:	dc.b 1
00017290 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017295 01                         byte_1725D:	dc.b 1
00017296 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001729C 00                         		even
0001729C 00                         		even
0001729C                            
0001729C                            ; ===========================================================================
0001729C                            ; ---------------------------------------------------------------------------
0001729C                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001729C                            ; ---------------------------------------------------------------------------
0001729C                            
0001729C                            Obj8A:					; XREF: Obj_Index
0001729C 7000                       		moveq	#0,d0
0001729E 1028 0024                  		move.b	$24(a0),d0
000172A2 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
000172A6 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
000172AA                            ; ===========================================================================
000172AA 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
000172AC 0000                       		dc.w Obj8A_Display-Obj8A_Index
000172AE                            ; ===========================================================================
000172AE                            
000172AE                            Obj8A_Main:				; XREF: Obj8A_Index
000172AE 5428 0024                  		addq.b	#2,$24(a0)
000172B2 317C 0120 0008             		move.w	#$120,8(a0)
000172B8 317C 00F0 000A             		move.w	#$F0,$A(a0)
000172BE 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
000172C6 317C 05A0 0002             		move.w	#$5A0,2(a0)
000172CC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
000172D0 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
000172D4 117C 0000 0001             		move.b	#0,1(a0)
000172DA 117C 0000 0018             		move.b	#0,$18(a0)
000172E0 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
000172E6 6600                       		bne.s	Obj8A_Display	; if not, branch
000172E8 317C 00A6 0002             		move.w	#$A6,2(a0)
000172EE 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
000172F4 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
000172F8 6700                       		beq.s	Obj8A_Display	; if not, branch
000172FA 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017300 6600                       		bne.s	Obj8A_Display	; if not, branch
00017302 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017308 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
0001730E 4EF9 0000 D702             		jmp	DeleteObject
00017314                            ; ===========================================================================
00017314                            
00017314                            Obj8A_Display:				; XREF: Obj8A_Index
00017314 4EF9 0000 D6C6             		jmp	DisplaySprite
0001731A                            ; ===========================================================================
0001731A                            ; ---------------------------------------------------------------------------
0001731A                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001731A                            ; ---------------------------------------------------------------------------
0001731A                            Map_obj8A:
0001731A                            	include "_maps\obj8A.asm"
0001731A                            ; ---------------------------------------------------------------------------
0001731A                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
0001731A                            ; ---------------------------------------------------------------------------
0001731A 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
0001731E 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
00017322 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
00017326 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
0001732A 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
0001732E 0000                       		dc.w byte_176A9-Map_obj8A
00017330 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
00017331 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
00017336 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
0001733B F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00017340 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00017345 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
0001734A F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
0001734F F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00017354 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00017359 F809 0008 08               		dc.b $F8, 9, 0,	8, 8
0001735E F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00017363 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
00017368 F805 0004 48               		dc.b $F8, 5, 0,	4, $48
0001736D F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00017372 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
00017377 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
00017378 D805 0000 80               		dc.b $D8, 5, 0,	0, $80
0001737D D805 0004 90               		dc.b $D8, 5, 0,	4, $90
00017382 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
00017387 D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
0001738C D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
00017391 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
00017396 D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
0001739B D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
000173A0 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
000173A5 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
000173AA 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
000173AF 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
000173B4 0805 0016 08               		dc.b 8,	5, 0, $16, 8
000173B9 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
000173BE 0805 0004 30               		dc.b 8,	5, 0, 4, $30
000173C3 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
000173C8 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
000173C9 D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
000173CE D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
000173D3 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
000173D8 D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
000173DD D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
000173E2 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
000173E7 D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
000173EC 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
000173F1 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
000173F6 0805 0036 08               		dc.b 8,	5, 0, $36, 8
000173FB 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
000173FC D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
00017401 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
00017406 D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
0001740B D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
00017410 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00017415 D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
0001741A D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
0001741F D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
00017424 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00017429 D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
0001742E D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00017433 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
00017438 D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
0001743D D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00017442 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
00017447 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
0001744C 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00017451 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
00017456 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
0001745B 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00017460 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00017465 0805 0004 10               		dc.b 8,	5, 0, 4, $10
0001746A 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
0001746F 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00017474 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00017475 D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
0001747A D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
0001747F D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
00017484 D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
00017489 D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
0001748E D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
00017493 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
00017498 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
0001749D 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
000174A2 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
000174A7 0005 0004 24               		dc.b 0,	5, 0, 4, $24
000174AC 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
000174B1 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
000174B6 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
000174BB 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
000174C0 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
000174C5 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
000174CA 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
000174CF 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
000174D4 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
000174D9 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
000174DA D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
000174DF D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
000174E4 D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
000174E9 D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
000174EE D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
000174F3 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
000174F8 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
000174FD D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
00017502 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
00017507 D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
0001750C D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
00017511 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
00017516 0809 0008 88               		dc.b 8,	9, 0, 8, $88
0001751B 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
00017520 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
00017525 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
0001752A 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
0001752F 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
00017534 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
00017539 0805 0004 08               		dc.b 8,	5, 0, 4, 8
0001753E 0805 0058 18               		dc.b 8,	5, 0, $58, $18
00017543 0805 0004 28               		dc.b 8,	5, 0, 4, $28
00017548 0809 0008 38               		dc.b 8,	9, 0, 8, $38
0001754D 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00017552 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
00017557 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
0001755C 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
0001755D D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00017562 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
00017567 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
0001756C D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00017571 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
00017576 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
0001757B D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
00017580 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
00017585 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
0001758A D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
0001758F D005 0004 48               		dc.b $D0, 5, 0,	4, $48
00017594 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
00017599 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
0001759E 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
000175A3 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
000175A8 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
000175AD 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
000175B2 0005 0004 14               		dc.b 0,	5, 0, 4, $14
000175B7 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
000175BC 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
000175C1 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
000175C6 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
000175CB 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
000175D0 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
000175D1 D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
000175D6 D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
000175DB D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
000175E0 D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
000175E5 D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
000175EA D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
000175EF D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
000175F4 D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
000175F9 D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
000175FE D805 0004 18               		dc.b $D8, 5, 0,	4, $18
00017603 D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
00017608 D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
0001760D D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
00017612 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
00017617 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
0001761C 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00017621 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00017626 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
0001762B 0009 0008 00               		dc.b 0,	9, 0, 8, 0
00017630 0001 0046 14               		dc.b 0,	1, 0, $46, $14
00017635 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
0001763A 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
0001763F 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
00017644 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
00017649 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
0001764E 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
00017653 0001 0046 74               		dc.b 0,	1, 0, $46, $74
00017658 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
0001765D 2005 0004 08               		dc.b $20, 5, 0,	4, 8
00017662 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
00017667 2005 0004 28               		dc.b $20, 5, 0,	4, $28
0001766C 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
0001766D F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
00017672 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
00017677 F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
0001767C F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
00017681 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
00017686 F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
0001768B F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
00017690 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
00017695 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
0001769A F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
0001769F F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
000176A4 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
000176A9 F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
000176AE F805 0000 60               		dc.b $F8, 5, 0,	0, $60
000176B3 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
000176B8 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
000176B9 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
000176BE 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
000176C3 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
000176C8 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
000176CD 3005 0000 08               		dc.b $30, 5, 0,	0, 8
000176D2 3005 0004 18               		dc.b $30, 5, 0,	4, $18
000176D7 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
000176DC 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
000176E1 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
000176E2 E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
000176E7 E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
000176EC E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
000176F1 E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
000176F6 E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
000176FB E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
00017700 E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
00017705 E805 0004 24               		dc.b $E8, 5, 0,	4, $24
0001770A E809 0008 34               		dc.b $E8, 9, 0,	8, $34
0001770F 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
00017714 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
00017719 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
0001771E 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
00017723 0005 000E 00               		dc.b 0,	5, 0, $E, 0
00017728 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
0001772D 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
00017732 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
00017738 00                         		even
00017738 00                         		even
00017738                            
00017738                            ; ===========================================================================
00017738                            ; ---------------------------------------------------------------------------
00017738                            ; Object 3D - Eggman (GHZ)
00017738                            ; ---------------------------------------------------------------------------
00017738                            
00017738                            Obj3D:					; XREF: Obj_Index
00017738 7000                       		moveq	#0,d0
0001773A 1028 0024                  		move.b	$24(a0),d0
0001773E 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017742 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017746                            ; ===========================================================================
00017746 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017748 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
0001774A 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
0001774C 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
0001774E                            
0001774E 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017750 0401                       		dc.b 4,	1
00017752 0607                       		dc.b 6,	7
00017754                            ; ===========================================================================
00017754                            
00017754                            Obj3D_Main:				; XREF: Obj3D_Index
00017754 45F9 0001 774E             		lea	(Obj3D_ObjData).l,a2
0001775A 2248                       		movea.l	a0,a1
0001775C 7202                       		moveq	#2,d1
0001775E 6000                       		bra.s	Obj3D_LoadBoss
00017760                            ; ===========================================================================
00017760                            
00017760                            Obj3D_Loop:
00017760 4EB9 0000 DB62             		jsr	SingleObjLoad2
00017766 6600                       		bne.s	loc_17772
00017768                            
00017768                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017768 135A 0024                  		move.b	(a2)+,$24(a1)
0001776C 12BC 003D                  		move.b	#$3D,0(a1)
00017770 3368 0008 0008             		move.w	8(a0),8(a1)
00017776 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001777C 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017784 337C 0400 0002             		move.w	#$400,2(a1)
0001778A 137C 0004 0001             		move.b	#4,1(a1)
00017790 137C 0020 0019             		move.b	#$20,$19(a1)
00017796 137C 0003 0018             		move.b	#3,$18(a1)
0001779C 135A 001C                  		move.b	(a2)+,$1C(a1)
000177A0 2348 0034                  		move.l	a0,$34(a1)
000177A4 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
000177A8                            
000177A8                            loc_17772:
000177A8 3168 0008 0030             		move.w	8(a0),$30(a0)
000177AE 3168 000C 0038             		move.w	$C(a0),$38(a0)
000177B4 117C 000F 0020             		move.b	#$F,$20(a0)
000177BA 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000177C0                            
000177C0                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000177C0 7000                       		moveq	#0,d0
000177C2 1028 0025                  		move.b	$25(a0),d0
000177C6 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000177CA 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000177CE 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000177D4 4EB9 0000 A7F2             		jsr	AnimateSprite
000177DA 1028 0022                  		move.b	$22(a0),d0
000177DE 0200 0003                  		andi.b	#3,d0
000177E2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000177E8 8128 0001                  		or.b	d0,1(a0)
000177EC 4EF9 0000 D6C6             		jmp	DisplaySprite
000177F2                            ; ===========================================================================
000177F2 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000177F4 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000177F6 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000177F8 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000177FA 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000177FC 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000177FE 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017800                            ; ===========================================================================
00017800                            
00017800                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017800 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00017806 6100 0000                  		bsr.w	BossMove
0001780A 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017810 6600                       		bne.s	loc_177E6
00017812 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00017818 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
0001781C                            
0001781C                            loc_177E6:
0001781C 1028 003F                  		move.b	$3F(a0),d0
00017820 4EB9 0000 29DA             		jsr	(CalcSine).l
00017826 EC40                       		asr.w	#6,d0
00017828 D068 0038                  		add.w	$38(a0),d0
0001782C 3140 000C                  		move.w	d0,$C(a0)
00017830 3168 0030 0008             		move.w	$30(a0),8(a0)
00017836 5428 003F                  		addq.b	#2,$3F(a0)
0001783A 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017840 6400                       		bcc.s	locret_1784A
00017842 4A28 0022                  		tst.b	$22(a0)
00017846 6B00                       		bmi.s	loc_1784C
00017848 4A28 0020                  		tst.b	$20(a0)
0001784C 6600                       		bne.s	locret_1784A
0001784E 4A28 003E                  		tst.b	$3E(a0)
00017852 6600                       		bne.s	Obj3D_ShipFlash
00017854 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001785A 303C 00AC                  		move.w	#$AC,d0
0001785E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
00017864                            
00017864                            Obj3D_ShipFlash:
00017864 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00017868 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001786A 4A51                       		tst.w	(a1)
0001786C 6600                       		bne.s	loc_1783C
0001786E 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017872                            
00017872                            loc_1783C:
00017872 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017874 5328 003E                  		subq.b	#1,$3E(a0)
00017878 6600                       		bne.s	locret_1784A
0001787A 117C 000F 0020             		move.b	#$F,$20(a0)
00017880                            
00017880                            locret_1784A:
00017880 4E75                       		rts	
00017882                            ; ===========================================================================
00017882                            
00017882                            loc_1784C:				; XREF: loc_177E6
00017882 7064                       		moveq	#100,d0
00017884 6100 0000                  		bsr.w	AddPoints
00017888 117C 0008 0025             		move.b	#8,$25(a0)
0001788E 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00017894 4E75                       		rts	
00017896                            
00017896                            ; ---------------------------------------------------------------------------
00017896                            ; Defeated boss	subroutine
00017896                            ; ---------------------------------------------------------------------------
00017896                            
00017896                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017896                            
00017896                            
00017896                            BossDefeated:
00017896 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001789A 0200 0007                  		andi.b	#7,d0
0001789E 6600                       		bne.s	locret_178A2
000178A0 4EB9 0000 DB4C             		jsr	SingleObjLoad
000178A6 6600                       		bne.s	locret_178A2
000178A8 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
000178AC 3368 0008 0008             		move.w	8(a0),8(a1)
000178B2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000178B8 4EB9 0000 29B4             		jsr	(RandomNumber).l
000178BE 3200                       		move.w	d0,d1
000178C0 7200                       		moveq	#0,d1
000178C2 1200                       		move.b	d0,d1
000178C4 E409                       		lsr.b	#2,d1
000178C6 0441 0020                  		subi.w	#$20,d1
000178CA D369 0008                  		add.w	d1,8(a1)
000178CE E048                       		lsr.w	#8,d0
000178D0 E608                       		lsr.b	#3,d0
000178D2 D169 000C                  		add.w	d0,$C(a1)
000178D6                            
000178D6                            locret_178A2:
000178D6 4E75                       		rts	
000178D8                            ; End of function BossDefeated
000178D8                            
000178D8                            ; ---------------------------------------------------------------------------
000178D8                            ; Subroutine to	move a boss
000178D8                            ; ---------------------------------------------------------------------------
000178D8                            
000178D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000178D8                            
000178D8                            
000178D8                            BossMove:
000178D8 2428 0030                  		move.l	$30(a0),d2
000178DC 2628 0038                  		move.l	$38(a0),d3
000178E0 3028 0010                  		move.w	$10(a0),d0
000178E4 48C0                       		ext.l	d0
000178E6 E180                       		asl.l	#8,d0
000178E8 D480                       		add.l	d0,d2
000178EA 3028 0012                  		move.w	$12(a0),d0
000178EE 48C0                       		ext.l	d0
000178F0 E180                       		asl.l	#8,d0
000178F2 D680                       		add.l	d0,d3
000178F4 2142 0030                  		move.l	d2,$30(a0)
000178F8 2143 0038                  		move.l	d3,$38(a0)
000178FC 4E75                       		rts	
000178FE                            ; End of function BossMove
000178FE                            
000178FE                            ; ===========================================================================
000178FE                            
000178FE                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
000178FE 317C FF00 0010             		move.w	#-$100,$10(a0)
00017904 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001790A 6100 FFCC                  		bsr.w	BossMove
0001790E 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017914 6600                       		bne.s	loc_17916
00017916 317C 0000 0010             		move.w	#0,$10(a0)
0001791C 317C 0000 0012             		move.w	#0,$12(a0)
00017922 5428 0025                  		addq.b	#2,$25(a0)
00017926 4EB9 0000 DB62             		jsr	SingleObjLoad2
0001792C 6600                       		bne.s	loc_17910
0001792E 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00017932 3368 0030 0008             		move.w	$30(a0),8(a1)
00017938 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001793E 2348 0034                  		move.l	a0,$34(a1)
00017942                            
00017942                            loc_17910:
00017942 317C 0077 003C             		move.w	#$77,$3C(a0)
00017948                            
00017948                            loc_17916:
00017948 6000 FED2                  		bra.w	loc_177E6
0001794C                            ; ===========================================================================
0001794C                            
0001794C                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
0001794C 5368 003C                  		subq.w	#1,$3C(a0)
00017950 6A00                       		bpl.s	Obj3D_Reverse
00017952 5428 0025                  		addq.b	#2,$25(a0)
00017956 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001795C 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00017962 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017968 6600                       		bne.s	Obj3D_Reverse
0001796A 317C 007F 003C             		move.w	#$7F,$3C(a0)
00017970 317C 0040 0010             		move.w	#$40,$10(a0)
00017976                            
00017976                            Obj3D_Reverse:
00017976 0828 0000 0022             		btst	#0,$22(a0)
0001797C 6600                       		bne.s	loc_17950
0001797E 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00017982                            
00017982                            loc_17950:
00017982 6000 FE98                  		bra.w	loc_177E6
00017986                            ; ===========================================================================
00017986                            
00017986                            loc_17954:				; XREF: Obj3D_ShipIndex
00017986 5368 003C                  		subq.w	#1,$3C(a0)
0001798A 6B00                       		bmi.s	loc_17960
0001798C 6100 FF4A                  		bsr.w	BossMove
00017990 6000                       		bra.s	loc_17976
00017992                            ; ===========================================================================
00017992                            
00017992                            loc_17960:
00017992 0868 0000 0022             		bchg	#0,$22(a0)
00017998 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001799E 5528 0025                  		subq.b	#2,$25(a0)
000179A2 317C 0000 0010             		move.w	#0,$10(a0)
000179A8                            
000179A8                            loc_17976:
000179A8 6000 FE72                  		bra.w	loc_177E6
000179AC                            ; ===========================================================================
000179AC                            
000179AC                            loc_1797A:				; XREF: Obj3D_ShipIndex
000179AC 5368 003C                  		subq.w	#1,$3C(a0)
000179B0 6B00                       		bmi.s	loc_17984
000179B2 6000 FEE2                  		bra.w	BossDefeated
000179B6                            ; ===========================================================================
000179B6                            
000179B6                            loc_17984:
000179B6 08E8 0000 0022             		bset	#0,$22(a0)
000179BC 08A8 0007 0022             		bclr	#7,$22(a0)
000179C2 4268 0010                  		clr.w	$10(a0)
000179C6 5428 0025                  		addq.b	#2,$25(a0)
000179CA 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000179D0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000179D4 6600                       		bne.s	locret_179AA
000179D6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000179DC                            
000179DC                            locret_179AA:
000179DC 4E75                       		rts	
000179DE                            ; ===========================================================================
000179DE                            
000179DE                            loc_179AC:				; XREF: Obj3D_ShipIndex
000179DE 5268 003C                  		addq.w	#1,$3C(a0)
000179E2 6700                       		beq.s	loc_179BC
000179E4 6A00                       		bpl.s	loc_179C2
000179E6 0668 0018 0012             		addi.w	#$18,$12(a0)
000179EC 6000                       		bra.s	loc_179EE
000179EE                            ; ===========================================================================
000179EE                            
000179EE                            loc_179BC:
000179EE 4268 0012                  		clr.w	$12(a0)
000179F2 6000                       		bra.s	loc_179EE
000179F4                            ; ===========================================================================
000179F4                            
000179F4                            loc_179C2:
000179F4 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000179FA 6500                       		bcs.s	loc_179DA
000179FC 6700                       		beq.s	loc_179E0
000179FE 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00017A04 6500                       		bcs.s	loc_179EE
00017A06 5428 0025                  		addq.b	#2,$25(a0)
00017A0A 6000                       		bra.s	loc_179EE
00017A0C                            ; ===========================================================================
00017A0C                            
00017A0C                            loc_179DA:
00017A0C 5168 0012                  		subq.w	#8,$12(a0)
00017A10 6000                       		bra.s	loc_179EE
00017A12                            ; ===========================================================================
00017A12                            
00017A12                            loc_179E0:
00017A12 4268 0012                  		clr.w	$12(a0)
00017A16 303C 0081                  		move.w	#$81,d0
00017A1A 4EB9 0000 1396             		jsr	(PlaySound).l	; play GHZ music
00017A20                            
00017A20                            loc_179EE:
00017A20 6100 FEB6                  		bsr.w	BossMove
00017A24 6000 FDF6                  		bra.w	loc_177E6
00017A28                            ; ===========================================================================
00017A28                            
00017A28                            loc_179F6:				; XREF: Obj3D_ShipIndex
00017A28 317C 0400 0010             		move.w	#$400,$10(a0)
00017A2E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017A34 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00017A3A 6700                       		beq.s	loc_17A10
00017A3C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00017A40 6000                       		bra.s	loc_17A16
00017A42                            ; ===========================================================================
00017A42                            
00017A42                            loc_17A10:
00017A42 4A28 0001                  		tst.b	1(a0)
00017A46 6A00                       		bpl.s	Obj3D_ShipDel
00017A48                            
00017A48                            loc_17A16:
00017A48 6100 FE8E                  		bsr.w	BossMove
00017A4C 6000 FDCE                  		bra.w	loc_177E6
00017A50                            ; ===========================================================================
00017A50                            
00017A50                            Obj3D_ShipDel:
00017A50 4EF9 0000 D702             		jmp	DeleteObject
00017A56                            ; ===========================================================================
00017A56                            
00017A56                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00017A56 7000                       		moveq	#0,d0
00017A58 7201                       		moveq	#1,d1
00017A5A 2268 0034                  		movea.l	$34(a0),a1
00017A5E 1029 0025                  		move.b	$25(a1),d0
00017A62 5900                       		subq.b	#4,d0
00017A64 6600                       		bne.s	loc_17A3E
00017A66 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00017A6C 6600                       		bne.s	loc_17A46
00017A6E 7204                       		moveq	#4,d1
00017A70                            
00017A70                            loc_17A3E:
00017A70 5D00                       		subq.b	#6,d0
00017A72 6B00                       		bmi.s	loc_17A46
00017A74 720A                       		moveq	#$A,d1
00017A76 6000                       		bra.s	loc_17A5A
00017A78                            ; ===========================================================================
00017A78                            
00017A78                            loc_17A46:
00017A78 4A29 0020                  		tst.b	$20(a1)
00017A7C 6600                       		bne.s	loc_17A50
00017A7E 7205                       		moveq	#5,d1
00017A80 6000                       		bra.s	loc_17A5A
00017A82                            ; ===========================================================================
00017A82                            
00017A82                            loc_17A50:
00017A82 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00017A88 6500                       		bcs.s	loc_17A5A
00017A8A 7204                       		moveq	#4,d1
00017A8C                            
00017A8C                            loc_17A5A:
00017A8C 1141 001C                  		move.b	d1,$1C(a0)
00017A90 5500                       		subq.b	#2,d0
00017A92 6600                       		bne.s	Obj3D_FaceDisp
00017A94 117C 0006 001C             		move.b	#6,$1C(a0)
00017A9A 4A28 0001                  		tst.b	1(a0)
00017A9E 6A00                       		bpl.s	Obj3D_FaceDel
00017AA0                            
00017AA0                            Obj3D_FaceDisp:
00017AA0 6000                       		bra.s	Obj3D_Display
00017AA2                            ; ===========================================================================
00017AA2                            
00017AA2                            Obj3D_FaceDel:
00017AA2 4EF9 0000 D702             		jmp	DeleteObject
00017AA8                            ; ===========================================================================
00017AA8                            
00017AA8                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00017AA8 117C 0007 001C             		move.b	#7,$1C(a0)
00017AAE 2268 0034                  		movea.l	$34(a0),a1
00017AB2 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00017AB8 6600                       		bne.s	loc_17A96
00017ABA 117C 000B 001C             		move.b	#$B,$1C(a0)
00017AC0 4A28 0001                  		tst.b	1(a0)
00017AC4 6A00                       		bpl.s	Obj3D_FlameDel
00017AC6 6000                       		bra.s	Obj3D_FlameDisp
00017AC8                            ; ===========================================================================
00017AC8                            
00017AC8                            loc_17A96:
00017AC8 3029 0010                  		move.w	$10(a1),d0
00017ACC 6700                       		beq.s	Obj3D_FlameDisp
00017ACE 117C 0008 001C             		move.b	#8,$1C(a0)
00017AD4                            
00017AD4                            Obj3D_FlameDisp:
00017AD4 6000                       		bra.s	Obj3D_Display
00017AD6                            ; ===========================================================================
00017AD6                            
00017AD6                            Obj3D_FlameDel:
00017AD6 4EF9 0000 D702             		jmp	DeleteObject
00017ADC                            ; ===========================================================================
00017ADC                            
00017ADC                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00017ADC 2268 0034                  		movea.l	$34(a0),a1
00017AE0 3169 0008 0008             		move.w	8(a1),8(a0)
00017AE6 3169 000C 000C             		move.w	$C(a1),$C(a0)
00017AEC 1169 0022 0022             		move.b	$22(a1),$22(a0)
00017AF2 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017AF8 4EB9 0000 A7F2             		jsr	AnimateSprite
00017AFE 1028 0022                  		move.b	$22(a0),d0
00017B02 0200 0003                  		andi.b	#3,d0
00017B06 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017B0C 8128 0001                  		or.b	d0,1(a0)
00017B10 4EF9 0000 D6C6             		jmp	DisplaySprite
00017B16                            ; ===========================================================================
00017B16                            ; ---------------------------------------------------------------------------
00017B16                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00017B16                            ; ---------------------------------------------------------------------------
00017B16                            
00017B16                            Obj48:					; XREF: Obj_Index
00017B16 7000                       		moveq	#0,d0
00017B18 1028 0024                  		move.b	$24(a0),d0
00017B1C 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00017B20 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00017B24                            ; ===========================================================================
00017B24 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00017B26 0000                       		dc.w Obj48_Base-Obj48_Index
00017B28 0000                       		dc.w Obj48_Display2-Obj48_Index
00017B2A 0000                       		dc.w loc_17C68-Obj48_Index
00017B2C 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00017B2E                            ; ===========================================================================
00017B2E                            
00017B2E                            Obj48_Main:				; XREF: Obj48_Index
00017B2E 5428 0024                  		addq.b	#2,$24(a0)
00017B32 317C 4080 0026             		move.w	#$4080,$26(a0)
00017B38 317C FE00 003E             		move.w	#-$200,$3E(a0)
00017B3E 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00017B46 317C 046C 0002             		move.w	#$46C,2(a0)
00017B4C 45E8 0028                  		lea	$28(a0),a2
00017B50 14FC 0000                  		move.b	#0,(a2)+
00017B54 7205                       		moveq	#5,d1
00017B56 2248                       		movea.l	a0,a1
00017B58 6000                       		bra.s	loc_17B60
00017B5A                            ; ===========================================================================
00017B5A                            
00017B5A                            Obj48_MakeLinks:
00017B5A 4EB9 0000 DB62             		jsr	SingleObjLoad2
00017B60 6600                       		bne.s	Obj48_MakeBall
00017B62 3368 0008 0008             		move.w	8(a0),8(a1)
00017B68 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017B6E 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00017B72 137C 0006 0024             		move.b	#6,$24(a1)
00017B78 237C 0000 7D48 0004        		move.l	#Map_obj15,4(a1)
00017B80 337C 0380 0002             		move.w	#$380,2(a1)
00017B86 137C 0001 001A             		move.b	#1,$1A(a1)
00017B8C 5228 0028                  		addq.b	#1,$28(a0)
00017B90                            
00017B90                            loc_17B60:				; XREF: Obj48_Main
00017B90 3A09                       		move.w	a1,d5
00017B92 0445 D000                  		subi.w	#$D000,d5
00017B96 EC4D                       		lsr.w	#6,d5
00017B98 0245 007F                  		andi.w	#$7F,d5
00017B9C 14C5                       		move.b	d5,(a2)+
00017B9E 137C 0004 0001             		move.b	#4,1(a1)
00017BA4 137C 0008 0019             		move.b	#8,$19(a1)
00017BAA 137C 0006 0018             		move.b	#6,$18(a1)
00017BB0 2368 0034 0034             		move.l	$34(a0),$34(a1)
00017BB6 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00017BBA                            
00017BBA                            Obj48_MakeBall:
00017BBA 137C 0008 0024             		move.b	#8,$24(a1)
00017BC0 237C 0000 82A6 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00017BC8 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00017BCE 137C 0001 001A             		move.b	#1,$1A(a1)
00017BD4 137C 0005 0018             		move.b	#5,$18(a1)
00017BDA 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00017BE0 4E75                       		rts	
00017BE2                            ; ===========================================================================
00017BE2                            
00017BE2 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00017BE8                            
00017BE8                            ; ===========================================================================
00017BE8                            
00017BE8                            Obj48_Base:				; XREF: Obj48_Index
00017BE8 47F9 0001 7BE2             		lea	(Obj48_PosData).l,a3
00017BEE 45E8 0028                  		lea	$28(a0),a2
00017BF2 7C00                       		moveq	#0,d6
00017BF4 1C1A                       		move.b	(a2)+,d6
00017BF6                            
00017BF6                            loc_17BC6:
00017BF6 7800                       		moveq	#0,d4
00017BF8 181A                       		move.b	(a2)+,d4
00017BFA ED4C                       		lsl.w	#6,d4
00017BFC 0684 00FF D000             		addi.l	#$FFD000,d4
00017C02 2244                       		movea.l	d4,a1
00017C04 101B                       		move.b	(a3)+,d0
00017C06 B029 003C                  		cmp.b	$3C(a1),d0
00017C0A 6700                       		beq.s	loc_17BE0
00017C0C 5229 003C                  		addq.b	#1,$3C(a1)
00017C10                            
00017C10                            loc_17BE0:
00017C10 51CE FFE4                  		dbf	d6,loc_17BC6
00017C14                            
00017C14 B029 003C                  		cmp.b	$3C(a1),d0
00017C18 6600                       		bne.s	loc_17BFA
00017C1A 2268 0034                  		movea.l	$34(a0),a1
00017C1E 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00017C24 6600                       		bne.s	loc_17BFA
00017C26 5428 0024                  		addq.b	#2,$24(a0)
00017C2A                            
00017C2A                            loc_17BFA:
00017C2A 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00017C30 6700                       		beq.s	Obj48_Display
00017C32 5268 0032                  		addq.w	#1,$32(a0)
00017C36                            
00017C36                            Obj48_Display:
00017C36 6100 0000                  		bsr.w	sub_17C2A
00017C3A 1028 0026                  		move.b	$26(a0),d0
00017C3E 4EB9 0000 7CBA             		jsr	(Obj15_Move2).l
00017C44 4EF9 0000 D6C6             		jmp	DisplaySprite
00017C4A                            ; ===========================================================================
00017C4A                            
00017C4A                            Obj48_Display2:				; XREF: Obj48_Index
00017C4A 6100 0000                  		bsr.w	sub_17C2A
00017C4E 4EB9 0000 7C7A             		jsr	(Obj48_Move).l
00017C54 4EF9 0000 D6C6             		jmp	DisplaySprite
00017C5A                            
00017C5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017C5A                            
00017C5A                            
00017C5A                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00017C5A 2268 0034                  		movea.l	$34(a0),a1
00017C5E 0628 0020 001B             		addi.b	#$20,$1B(a0)
00017C64 6400                       		bcc.s	loc_17C3C
00017C66 0868 0000 001A             		bchg	#0,$1A(a0)
00017C6C                            
00017C6C                            loc_17C3C:
00017C6C 3169 0008 003A             		move.w	8(a1),$3A(a0)
00017C72 3029 000C                  		move.w	$C(a1),d0
00017C76 D068 0032                  		add.w	$32(a0),d0
00017C7A 3140 0038                  		move.w	d0,$38(a0)
00017C7E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00017C84 4A29 0022                  		tst.b	$22(a1)
00017C88 6A00                       		bpl.s	locret_17C66
00017C8A 10BC 003F                  		move.b	#$3F,0(a0)
00017C8E 117C 0000 0024             		move.b	#0,$24(a0)
00017C94                            
00017C94                            locret_17C66:
00017C94 4E75                       		rts	
00017C96                            ; End of function sub_17C2A
00017C96                            
00017C96                            ; ===========================================================================
00017C96                            
00017C96                            loc_17C68:				; XREF: Obj48_Index
00017C96 2268 0034                  		movea.l	$34(a0),a1
00017C9A 4A29 0022                  		tst.b	$22(a1)
00017C9E 6A00                       		bpl.s	Obj48_Display3
00017CA0 10BC 003F                  		move.b	#$3F,0(a0)
00017CA4 117C 0000 0024             		move.b	#0,$24(a0)
00017CAA                            
00017CAA                            Obj48_Display3:
00017CAA 4EF9 0000 D6C6             		jmp	DisplaySprite
00017CB0                            ; ===========================================================================
00017CB0                            
00017CB0                            Obj48_ChkVanish:			; XREF: Obj48_Index
00017CB0 7000                       		moveq	#0,d0
00017CB2 4A28 001A                  		tst.b	$1A(a0)
00017CB6 6600                       		bne.s	Obj48_Vanish
00017CB8 5200                       		addq.b	#1,d0
00017CBA                            
00017CBA                            Obj48_Vanish:
00017CBA 1140 001A                  		move.b	d0,$1A(a0)
00017CBE 2268 0034                  		movea.l	$34(a0),a1
00017CC2 4A29 0022                  		tst.b	$22(a1)
00017CC6 6A00                       		bpl.s	Obj48_Display4
00017CC8 117C 0000 0020             		move.b	#0,$20(a0)
00017CCE 6100 FBC6                  		bsr.w	BossDefeated
00017CD2 5328 003C                  		subq.b	#1,$3C(a0)
00017CD6 6A00                       		bpl.s	Obj48_Display4
00017CD8 10BC 003F                  		move.b	#$3F,(a0)
00017CDC 117C 0000 0024             		move.b	#0,$24(a0)
00017CE2                            
00017CE2                            Obj48_Display4:
00017CE2 4EF9 0000 D6C6             		jmp	DisplaySprite
00017CE8                            ; ===========================================================================
00017CE8                            Ani_Eggman:
00017CE8                            	include "_anim\Eggman.asm"
00017CE8                            ; ---------------------------------------------------------------------------
00017CE8                            ; Animation script - Eggman (bosses)
00017CE8                            ; ---------------------------------------------------------------------------
00017CE8 0000                       		dc.w byte_17CD4-Ani_Eggman
00017CEA 0000                       		dc.w byte_17CD8-Ani_Eggman
00017CEC 0000                       		dc.w byte_17CDC-Ani_Eggman
00017CEE 0000                       		dc.w byte_17CE0-Ani_Eggman
00017CF0 0000                       		dc.w byte_17CE4-Ani_Eggman
00017CF2 0000                       		dc.w byte_17CE8-Ani_Eggman
00017CF4 0000                       		dc.w byte_17CEC-Ani_Eggman
00017CF6 0000                       		dc.w byte_17CF0-Ani_Eggman
00017CF8 0000                       		dc.w byte_17CF4-Ani_Eggman
00017CFA 0000                       		dc.w byte_17CF8-Ani_Eggman
00017CFC 0000                       		dc.w byte_17CFC-Ani_Eggman
00017CFE 0000                       		dc.w byte_17D00-Ani_Eggman
00017D00 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00017D04 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00017D08 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00017D0C 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00017D10 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00017D14 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00017D18 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00017D1C 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00017D20 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00017D24 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00017D28 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00017D2C 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00017D38                            		even
00017D38                            		even
00017D38                            
00017D38                            ; ---------------------------------------------------------------------------
00017D38                            ; Sprite mappings - Eggman (boss levels)
00017D38                            ; ---------------------------------------------------------------------------
00017D38                            Map_Eggman:
00017D38                            	include "_maps\Eggman.asm"
00017D38                            ; ---------------------------------------------------------------------------
00017D38                            ; Sprite mappings - Eggman (boss levels)
00017D38                            ; ---------------------------------------------------------------------------
00017D38 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00017D3C 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00017D40 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
00017D44 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
00017D48 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00017D4C 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00017D50 0000                       		dc.w byte_17DC8-Map_Eggman
00017D52 06                         byte_17D26:	dc.b 6
00017D53 EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00017D58 EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
00017D5D FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00017D62 FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00017D67 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00017D6C 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00017D71 02                         byte_17D45:	dc.b 2
00017D72 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00017D77 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00017D7C 02                         byte_17D50:	dc.b 2
00017D7D E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00017D82 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00017D87 03                         byte_17D5B:	dc.b 3
00017D88 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00017D8D EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00017D92 EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00017D97 03                         byte_17D6B:	dc.b 3
00017D98 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00017D9D EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00017DA2 EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00017DA7 03                         byte_17D7B:	dc.b 3
00017DA8 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00017DAD EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00017DB2 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00017DB7 03                         byte_17D8B:	dc.b 3
00017DB8 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00017DBD E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00017DC2 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00017DC7 04                         byte_17D9B:	dc.b 4
00017DC8 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00017DCD E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00017DD2 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00017DD7 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00017DDC 01                         byte_17DB0:	dc.b 1
00017DDD 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00017DE2 01                         byte_17DB6:	dc.b 1
00017DE3 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00017DE8 00                         byte_17DBC:	dc.b 0
00017DE9 02                         byte_17DBD:	dc.b 2
00017DEA 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00017DEF 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00017DF4 02                         byte_17DC8:	dc.b 2
00017DF5 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00017DFA 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00017E00 00                         		even
00017E00 00                         		even
00017E00                            
00017E00                            ; ---------------------------------------------------------------------------
00017E00                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00017E00                            ; ---------------------------------------------------------------------------
00017E00                            Map_BossItems:
00017E00                            	include "_maps\Boss items.asm"
00017E00                            ; ---------------------------------------------------------------------------
00017E00                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00017E00                            ; ---------------------------------------------------------------------------
00017E00 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00017E04 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00017E08 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00017E0C 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00017E10 01                         byte_17DE4:	dc.b 1
00017E11 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017E16 02                         byte_17DEA:	dc.b 2
00017E17 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00017E1C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017E21 00                         		dc.b 0
00017E22 01                         byte_17DF6:	dc.b 1
00017E23 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00017E28 01                         byte_17DFC:	dc.b 1
00017E29 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00017E2E 01                         byte_17E02:	dc.b 1
00017E2F 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00017E34 04                         byte_17E08:	dc.b 4
00017E35 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00017E3A F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00017E3F F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00017E44 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00017E49 00                         		dc.b 0
00017E4A 02                         byte_17E1E:	dc.b 2
00017E4B 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00017E50 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00017E55 00                         		dc.b 0
00017E56 02                         byte_17E2A:	dc.b 2
00017E57 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00017E5C 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00017E62 00                         		even
00017E62 00                         		even
00017E62                            
00017E62                            ; ===========================================================================
00017E62                            ; ---------------------------------------------------------------------------
00017E62                            ; Object 77 - Eggman (LZ)
00017E62                            ; ---------------------------------------------------------------------------
00017E62                            
00017E62                            Obj77:					; XREF: Obj_Index
00017E62 7000                       		moveq	#0,d0
00017E64 1028 0024                  		move.b	$24(a0),d0
00017E68 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00017E6C 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00017E70                            ; ===========================================================================
00017E70 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00017E72 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00017E74 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00017E76 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00017E78                            
00017E78 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00017E7A 0401                       		dc.b 4,	1
00017E7C 0607                       		dc.b 6,	7
00017E7E                            ; ===========================================================================
00017E7E                            
00017E7E                            Obj77_Main:				; XREF: Obj77_Index
00017E7E 317C 1E10 0008             		move.w	#$1E10,8(a0)
00017E84 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00017E8A 3168 0008 0030             		move.w	8(a0),$30(a0)
00017E90 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017E96 117C 000F 0020             		move.b	#$F,$20(a0)
00017E9C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00017EA2 117C 0004 0018             		move.b	#4,$18(a0)
00017EA8 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00017EAC 2248                       		movea.l	a0,a1
00017EAE 7202                       		moveq	#2,d1
00017EB0 6000                       		bra.s	Obj77_LoadBoss
00017EB2                            ; ===========================================================================
00017EB2                            
00017EB2                            Obj77_Loop:
00017EB2 4EB9 0000 DB62             		jsr	SingleObjLoad2
00017EB8 6600                       		bne.s	Obj77_ShipMain
00017EBA 12BC 0077                  		move.b	#$77,0(a1)
00017EBE 3368 0008 0008             		move.w	8(a0),8(a1)
00017EC4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017ECA                            
00017ECA                            Obj77_LoadBoss:				; XREF: Obj77_Main
00017ECA 08A8 0000 0022             		bclr	#0,$22(a0)
00017ED0 4229 0025                  		clr.b	$25(a1)
00017ED4 135A 0024                  		move.b	(a2)+,$24(a1)
00017ED8 135A 001C                  		move.b	(a2)+,$1C(a1)
00017EDC 1368 0018 0018             		move.b	$18(a0),$18(a1)
00017EE2 237C 0001 7D38 0004        		move.l	#Map_Eggman,4(a1)
00017EEA 337C 0400 0002             		move.w	#$400,2(a1)
00017EF0 137C 0004 0001             		move.b	#4,1(a1)
00017EF6 137C 0020 0019             		move.b	#$20,$19(a1)
00017EFC 2348 0034                  		move.l	a0,$34(a1)
00017F00 51C9 FFB0                  		dbf	d1,Obj77_Loop
00017F04                            
00017F04                            Obj77_ShipMain:
00017F04 43F8 D000                  		lea	($FFFFD000).w,a1
00017F08 7000                       		moveq	#0,d0
00017F0A 1028 0025                  		move.b	$25(a0),d0
00017F0E 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00017F12 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00017F16 43F9 0001 7CE8             		lea	(Ani_Eggman).l,a1
00017F1C 4EB9 0000 A7F2             		jsr	AnimateSprite
00017F22 7003                       		moveq	#3,d0
00017F24 C028 0022                  		and.b	$22(a0),d0
00017F28 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017F2E 8128 0001                  		or.b	d0,1(a0)
00017F32 4EF9 0000 D6C6             		jmp	DisplaySprite
00017F38                            ; ===========================================================================
00017F38 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00017F3C 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00017F40 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00017F44 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00017F48                            ; ===========================================================================
00017F48                            
00017F48                            loc_17F1E:				; XREF: Obj77_ShipIndex
00017F48 3029 0008                  		move.w	8(a1),d0
00017F4C 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00017F50 6500                       		bcs.s	loc_17F38
00017F52 317C FE80 0012             		move.w	#-$180,$12(a0)
00017F58 317C 0060 0010             		move.w	#$60,$10(a0)
00017F5E 5428 0025                  		addq.b	#2,$25(a0)
00017F62                            
00017F62                            loc_17F38:
00017F62 6100 F974                  		bsr.w	BossMove
00017F66 3168 0038 000C             		move.w	$38(a0),$C(a0)
00017F6C 3168 0030 0008             		move.w	$30(a0),8(a0)
00017F72                            
00017F72                            loc_17F48:
00017F72 4A28 003D                  		tst.b	$3D(a0)
00017F76 6600                       		bne.s	loc_17F8E
00017F78 4A28 0022                  		tst.b	$22(a0)
00017F7C 6B00                       		bmi.s	loc_17F92
00017F7E 4A28 0020                  		tst.b	$20(a0)
00017F82 6600                       		bne.s	locret_17F8C
00017F84 4A28 003E                  		tst.b	$3E(a0)
00017F88 6600                       		bne.s	loc_17F70
00017F8A 117C 0020 003E             		move.b	#$20,$3E(a0)
00017F90 303C 00AC                  		move.w	#$AC,d0
00017F94 4EB9 0000 139C             		jsr	(PlaySound_Special).l
00017F9A                            
00017F9A                            loc_17F70:
00017F9A 43F8 FB22                  		lea	($FFFFFB22).w,a1
00017F9E 7000                       		moveq	#0,d0
00017FA0 4A51                       		tst.w	(a1)
00017FA2 6600                       		bne.s	loc_17F7E
00017FA4 303C 0EEE                  		move.w	#$EEE,d0
00017FA8                            
00017FA8                            loc_17F7E:
00017FA8 3280                       		move.w	d0,(a1)
00017FAA 5328 003E                  		subq.b	#1,$3E(a0)
00017FAE 6600                       		bne.s	locret_17F8C
00017FB0 117C 000F 0020             		move.b	#$F,$20(a0)
00017FB6                            
00017FB6                            locret_17F8C:
00017FB6 4E75                       		rts	
00017FB8                            ; ===========================================================================
00017FB8                            
00017FB8                            loc_17F8E:				; XREF: loc_17F48
00017FB8 6000 F8DC                  		bra.w	BossDefeated
00017FBC                            ; ===========================================================================
00017FBC                            
00017FBC                            loc_17F92:				; XREF: loc_17F48
00017FBC 7064                       		moveq	#100,d0
00017FBE 6100 0000                  		bsr.w	AddPoints
00017FC2 117C 00FF 003D             		move.b	#-1,$3D(a0)
00017FC8 4E75                       		rts	
00017FCA                            ; ===========================================================================
00017FCA                            
00017FCA                            loc_17FA0:				; XREF: Obj77_ShipIndex
00017FCA 70FE                       		moveq	#-2,d0
00017FCC 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00017FD2 6500                       		bcs.s	loc_17FB6
00017FD4 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00017FDA 4268 0010                  		clr.w	$10(a0)
00017FDE 5240                       		addq.w	#1,d0
00017FE0                            
00017FE0                            loc_17FB6:
00017FE0 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00017FE6 6E00                       		bgt.s	loc_17FCA
00017FE8 317C 0500 0038             		move.w	#$500,$38(a0)
00017FEE 4268 0012                  		clr.w	$12(a0)
00017FF2 5240                       		addq.w	#1,d0
00017FF4                            
00017FF4                            loc_17FCA:
00017FF4 6600                       		bne.s	loc_17FDC
00017FF6 317C 0140 0010             		move.w	#$140,$10(a0)
00017FFC 317C FE00 0012             		move.w	#-$200,$12(a0)
00018002 5428 0025                  		addq.b	#2,$25(a0)
00018006                            
00018006                            loc_17FDC:
00018006 6000 FF5A                  		bra.w	loc_17F38
0001800A                            ; ===========================================================================
0001800A                            
0001800A                            loc_17FE0:				; XREF: Obj77_ShipIndex
0001800A 70FE                       		moveq	#-2,d0
0001800C 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00018012 6500                       		bcs.s	loc_17FF6
00018014 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001801A 4268 0010                  		clr.w	$10(a0)
0001801E 5240                       		addq.w	#1,d0
00018020                            
00018020                            loc_17FF6:
00018020 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
00018026 6E00                       		bgt.s	loc_1800A
00018028 317C 04C0 0038             		move.w	#$4C0,$38(a0)
0001802E 4268 0012                  		clr.w	$12(a0)
00018032 5240                       		addq.w	#1,d0
00018034                            
00018034                            loc_1800A:
00018034 6600                       		bne.s	loc_1801A
00018036 317C FE80 0012             		move.w	#-$180,$12(a0)
0001803C 5428 0025                  		addq.b	#2,$25(a0)
00018040 4228 003F                  		clr.b	$3F(a0)
00018044                            
00018044                            loc_1801A:
00018044 6000 FF1C                  		bra.w	loc_17F38
00018048                            ; ===========================================================================
00018048                            
00018048                            loc_1801E:				; XREF: Obj77_ShipIndex
00018048 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
0001804E 6E00                       		bgt.s	loc_1804E
00018050 317C 0100 0038             		move.w	#$100,$38(a0)
00018056 317C 0140 0010             		move.w	#$140,$10(a0)
0001805C 317C FF80 0012             		move.w	#-$80,$12(a0)
00018062 4A28 003D                  		tst.b	$3D(a0)
00018066 6700                       		beq.s	loc_18046
00018068 E1E8 0010                  		asl	$10(a0)
0001806C E1E8 0012                  		asl	$12(a0)
00018070                            
00018070                            loc_18046:
00018070 5428 0025                  		addq.b	#2,$25(a0)
00018074 6000 FEEC                  		bra.w	loc_17F38
00018078                            ; ===========================================================================
00018078                            
00018078                            loc_1804E:
00018078 08E8 0000 0022             		bset	#0,$22(a0)
0001807E 5428 003F                  		addq.b	#2,$3F(a0)
00018082 1028 003F                  		move.b	$3F(a0),d0
00018086 4EB9 0000 29DA             		jsr	(CalcSine).l
0001808C 4A41                       		tst.w	d1
0001808E 6A00                       		bpl.s	loc_1806C
00018090 08A8 0000 0022             		bclr	#0,$22(a0)
00018096                            
00018096                            loc_1806C:
00018096 E840                       		asr.w	#4,d0
00018098 4840                       		swap	d0
0001809A 4240                       		clr.w	d0
0001809C D0A8 0030                  		add.l	$30(a0),d0
000180A0 4840                       		swap	d0
000180A2 3140 0008                  		move.w	d0,8(a0)
000180A6 3028 0012                  		move.w	$12(a0),d0
000180AA 3238 D00C                  		move.w	($FFFFD00C).w,d1
000180AE 9268 000C                  		sub.w	$C(a0),d1
000180B2 6500                       		bcs.s	loc_180A2
000180B4 0441 0048                  		subi.w	#$48,d1
000180B8 6500                       		bcs.s	loc_180A2
000180BA E240                       		asr.w	#1,d0
000180BC 0441 0028                  		subi.w	#$28,d1
000180C0 6500                       		bcs.s	loc_180A2
000180C2 E240                       		asr.w	#1,d0
000180C4 0441 0028                  		subi.w	#$28,d1
000180C8 6500                       		bcs.s	loc_180A2
000180CA 7000                       		moveq	#0,d0
000180CC                            
000180CC                            loc_180A2:
000180CC 48C0                       		ext.l	d0
000180CE E180                       		asl.l	#8,d0
000180D0 4A28 003D                  		tst.b	$3D(a0)
000180D4 6700                       		beq.s	loc_180AE
000180D6 D080                       		add.l	d0,d0
000180D8                            
000180D8                            loc_180AE:
000180D8 D1A8 0038                  		add.l	d0,$38(a0)
000180DC 3168 0038 000C             		move.w	$38(a0),$C(a0)
000180E2 6000 FE8E                  		bra.w	loc_17F48
000180E6                            ; ===========================================================================
000180E6                            
000180E6                            loc_180BC:				; XREF: Obj77_ShipIndex
000180E6 70FE                       		moveq	#-2,d0
000180E8 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
000180EE 6500                       		bcs.s	loc_180D2
000180F0 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
000180F6 4268 0010                  		clr.w	$10(a0)
000180FA 5240                       		addq.w	#1,d0
000180FC                            
000180FC                            loc_180D2:
000180FC 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00018102 6E00                       		bgt.s	loc_180E6
00018104 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001810A 4268 0012                  		clr.w	$12(a0)
0001810E 5240                       		addq.w	#1,d0
00018110                            
00018110                            loc_180E6:
00018110 6600                       		bne.s	loc_180F2
00018112 5428 0025                  		addq.b	#2,$25(a0)
00018116 08A8 0000 0022             		bclr	#0,$22(a0)
0001811C                            
0001811C                            loc_180F2:
0001811C 6000 FE44                  		bra.w	loc_17F38
00018120                            ; ===========================================================================
00018120                            
00018120                            loc_180F6:				; XREF: Obj77_ShipIndex
00018120 4A28 003D                  		tst.b	$3D(a0)
00018124 6600                       		bne.s	loc_18112
00018126 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
0001812C 6D00                       		blt.s	loc_18126
0001812E 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00018134 6E00                       		bgt.s	loc_18126
00018136 117C 0032 003C             		move.b	#$32,$3C(a0)
0001813C                            
0001813C                            loc_18112:
0001813C 303C 0082                  		move.w	#$82,d0
00018140 4EB9 0000 1396             		jsr	(PlaySound).l	; play LZ music
00018146 08E8 0000 0022             		bset	#0,$22(a0)
0001814C 5428 0025                  		addq.b	#2,$25(a0)
00018150                            
00018150                            loc_18126:
00018150 6000 FE10                  		bra.w	loc_17F38
00018154                            ; ===========================================================================
00018154                            
00018154                            loc_1812A:				; XREF: Obj77_ShipIndex
00018154 4A28 003D                  		tst.b	$3D(a0)
00018158 6600                       		bne.s	loc_18136
0001815A 5328 003C                  		subq.b	#1,$3C(a0)
0001815E 6600                       		bne.s	loc_1814E
00018160                            
00018160                            loc_18136:
00018160 4228 003C                  		clr.b	$3C(a0)
00018164 317C 0400 0010             		move.w	#$400,$10(a0)
0001816A 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018170 4228 003D                  		clr.b	$3D(a0)
00018174 5428 0025                  		addq.b	#2,$25(a0)
00018178                            
00018178                            loc_1814E:
00018178 6000 FDE8                  		bra.w	loc_17F38
0001817C                            ; ===========================================================================
0001817C                            
0001817C                            loc_18152:				; XREF: Obj77_ShipIndex
0001817C 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00018182 6400                       		bcc.s	loc_18160
00018184 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018188 6000                       		bra.s	loc_18166
0001818A                            ; ===========================================================================
0001818A                            
0001818A                            loc_18160:
0001818A 4A28 0001                  		tst.b	1(a0)
0001818E 6A00                       		bpl.s	Obj77_ShipDel
00018190                            
00018190                            loc_18166:
00018190 6000 FDD0                  		bra.w	loc_17F38
00018194                            ; ===========================================================================
00018194                            
00018194                            Obj77_ShipDel:
00018194 4EF9 0000 D702             		jmp	DeleteObject
0001819A                            ; ===========================================================================
0001819A                            
0001819A                            Obj77_FaceMain:				; XREF: Obj77_Index
0001819A 2268 0034                  		movea.l	$34(a0),a1
0001819E 1011                       		move.b	(a1),d0
000181A0 B010                       		cmp.b	(a0),d0
000181A2 6600                       		bne.s	Obj77_FaceDel
000181A4 7000                       		moveq	#0,d0
000181A6 1029 0025                  		move.b	$25(a1),d0
000181AA 7201                       		moveq	#1,d1
000181AC 4A28 003D                  		tst.b	$3D(a0)
000181B0 6700                       		beq.s	loc_1818C
000181B2 720A                       		moveq	#$A,d1
000181B4 6000                       		bra.s	loc_181A0
000181B6                            ; ===========================================================================
000181B6                            
000181B6                            loc_1818C:
000181B6 4A29 0020                  		tst.b	$20(a1)
000181BA 6600                       		bne.s	loc_18196
000181BC 7205                       		moveq	#5,d1
000181BE 6000                       		bra.s	loc_181A0
000181C0                            ; ===========================================================================
000181C0                            
000181C0                            loc_18196:
000181C0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000181C6 6500                       		bcs.s	loc_181A0
000181C8 7204                       		moveq	#4,d1
000181CA                            
000181CA                            loc_181A0:
000181CA 1141 001C                  		move.b	d1,$1C(a0)
000181CE 0C00 000E                  		cmpi.b	#$E,d0
000181D2 6600                       		bne.s	loc_181B6
000181D4 117C 0006 001C             		move.b	#6,$1C(a0)
000181DA 4A28 0001                  		tst.b	1(a0)
000181DE 6A00                       		bpl.s	Obj77_FaceDel
000181E0                            
000181E0                            loc_181B6:
000181E0 6000                       		bra.s	Obj77_Display
000181E2                            ; ===========================================================================
000181E2                            
000181E2                            Obj77_FaceDel:
000181E2 4EF9 0000 D702             		jmp	DeleteObject
000181E8                            ; ===========================================================================
000181E8                            
000181E8                            Obj77_FlameMain:			; XREF: Obj77_Index
000181E8 117C 0007 001C             		move.b	#7,$1C(a0)
000181EE 2268 0034                  		movea.l	$34(a0),a1
000181F2 1011                       		move.b	(a1),d0
000181F4 B010                       		cmp.b	(a0),d0
000181F6 6600                       		bne.s	Obj77_FlameDel
000181F8 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
000181FE 6600                       		bne.s	loc_181F0
00018200 117C 000B 001C             		move.b	#$B,$1C(a0)
00018206 4A28 0001                  		tst.b	1(a0)
0001820A 6A00                       		bpl.s	Obj77_FlameDel
0001820C 6000                       		bra.s	loc_181F0
0001820E                            ; ===========================================================================
0001820E 4A69 0010                  		tst.w	$10(a1)
00018212 6700                       		beq.s	loc_181F0
00018214 117C 0008 001C             		move.b	#8,$1C(a0)
0001821A                            
0001821A                            loc_181F0:
0001821A 6000                       		bra.s	Obj77_Display
0001821C                            ; ===========================================================================
0001821C                            
0001821C                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
0001821C 4EF9 0000 D702             		jmp	DeleteObject
00018222                            ; ===========================================================================
00018222                            
00018222                            Obj77_Display:
00018222 43F9 0001 7CE8             		lea	(Ani_Eggman).l,a1
00018228 4EB9 0000 A7F2             		jsr	AnimateSprite
0001822E 2268 0034                  		movea.l	$34(a0),a1
00018232 3169 0008 0008             		move.w	8(a1),8(a0)
00018238 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001823E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018244 7003                       		moveq	#3,d0
00018246 C028 0022                  		and.b	$22(a0),d0
0001824A 0228 00FC 0001             		andi.b	#-4,1(a0)
00018250 8128 0001                  		or.b	d0,1(a0)
00018254 4EF9 0000 D6C6             		jmp	DisplaySprite
0001825A                            ; ===========================================================================
0001825A                            ; ---------------------------------------------------------------------------
0001825A                            ; Object 73 - Eggman (MZ)
0001825A                            ; ---------------------------------------------------------------------------
0001825A                            
0001825A                            Obj73:					; XREF: Obj_Index
0001825A 7000                       		moveq	#0,d0
0001825C 1028 0024                  		move.b	$24(a0),d0
00018260 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018264 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018268                            ; ===========================================================================
00018268 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001826A 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001826C 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001826E 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018270 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018272                            
00018272 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018275 0401 04                    		dc.b 4,	1, 4
00018278 0607 04                    		dc.b 6,	7, 4
0001827B 0800 03                    		dc.b 8,	0, 3
0001827E                            ; ===========================================================================
0001827E                            
0001827E                            Obj73_Main:				; XREF: Obj73_Index
0001827E 3168 0008 0030             		move.w	8(a0),$30(a0)
00018284 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001828A 117C 000F 0020             		move.b	#$F,$20(a0)
00018290 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018296 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001829A 2248                       		movea.l	a0,a1
0001829C 7203                       		moveq	#3,d1
0001829E 6000                       		bra.s	Obj73_LoadBoss
000182A0                            ; ===========================================================================
000182A0                            
000182A0                            Obj73_Loop:
000182A0 4EB9 0000 DB62             		jsr	SingleObjLoad2
000182A6 6600                       		bne.s	Obj73_ShipMain
000182A8 12BC 0073                  		move.b	#$73,0(a1)
000182AC 3368 0008 0008             		move.w	8(a0),8(a1)
000182B2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000182B8                            
000182B8                            Obj73_LoadBoss:				; XREF: Obj73_Main
000182B8 08A8 0000 0022             		bclr	#0,$22(a0)
000182BE 4229 0025                  		clr.b	$25(a1)
000182C2 135A 0024                  		move.b	(a2)+,$24(a1)
000182C6 135A 001C                  		move.b	(a2)+,$1C(a1)
000182CA 135A 0018                  		move.b	(a2)+,$18(a1)
000182CE 237C 0001 7D38 0004        		move.l	#Map_Eggman,4(a1)
000182D6 337C 0400 0002             		move.w	#$400,2(a1)
000182DC 137C 0004 0001             		move.b	#4,1(a1)
000182E2 137C 0020 0019             		move.b	#$20,$19(a1)
000182E8 2348 0034                  		move.l	a0,$34(a1)
000182EC 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
000182F0                            
000182F0                            Obj73_ShipMain:
000182F0 7000                       		moveq	#0,d0
000182F2 1028 0025                  		move.b	$25(a0),d0
000182F6 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
000182FA 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
000182FE 43F9 0001 7CE8             		lea	(Ani_Eggman).l,a1
00018304 4EB9 0000 A7F2             		jsr	AnimateSprite
0001830A 7003                       		moveq	#3,d0
0001830C C028 0022                  		and.b	$22(a0),d0
00018310 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018316 8128 0001                  		or.b	d0,1(a0)
0001831A 4EF9 0000 D6C6             		jmp	DisplaySprite
00018320                            ; ===========================================================================
00018320 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018322 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018324 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018326 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018328 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001832A                            ; ===========================================================================
0001832A                            
0001832A                            loc_18302:				; XREF: Obj73_ShipIndex
0001832A 1028 003F                  		move.b	$3F(a0),d0
0001832E 5428 003F                  		addq.b	#2,$3F(a0)
00018332 4EB9 0000 29DA             		jsr	(CalcSine).l
00018338 E440                       		asr.w	#2,d0
0001833A 3140 0012                  		move.w	d0,$12(a0)
0001833E 317C FF00 0010             		move.w	#-$100,$10(a0)
00018344 6100 F592                  		bsr.w	BossMove
00018348 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
0001834E 6600                       		bne.s	loc_18334
00018350 5428 0025                  		addq.b	#2,$25(a0)
00018354 4228 0028                  		clr.b	$28(a0)
00018358 42A8 0010                  		clr.l	$10(a0)
0001835C                            
0001835C                            loc_18334:
0001835C 4EB9 0000 29B4             		jsr	(RandomNumber).l
00018362 1140 0034                  		move.b	d0,$34(a0)
00018366                            
00018366                            loc_1833E:
00018366 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001836C 3168 0030 0008             		move.w	$30(a0),8(a0)
00018372 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018378 6400                       		bcc.s	locret_18390
0001837A 4A28 0022                  		tst.b	$22(a0)
0001837E 6B00                       		bmi.s	loc_18392
00018380 4A28 0020                  		tst.b	$20(a0)
00018384 6600                       		bne.s	locret_18390
00018386 4A28 003E                  		tst.b	$3E(a0)
0001838A 6600                       		bne.s	loc_18374
0001838C 117C 0028 003E             		move.b	#$28,$3E(a0)
00018392 303C 00AC                  		move.w	#$AC,d0
00018396 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001839C                            
0001839C                            loc_18374:
0001839C 43F8 FB22                  		lea	($FFFFFB22).w,a1
000183A0 7000                       		moveq	#0,d0
000183A2 4A51                       		tst.w	(a1)
000183A4 6600                       		bne.s	loc_18382
000183A6 303C 0EEE                  		move.w	#$EEE,d0
000183AA                            
000183AA                            loc_18382:
000183AA 3280                       		move.w	d0,(a1)
000183AC 5328 003E                  		subq.b	#1,$3E(a0)
000183B0 6600                       		bne.s	locret_18390
000183B2 117C 000F 0020             		move.b	#$F,$20(a0)
000183B8                            
000183B8                            locret_18390:
000183B8 4E75                       		rts	
000183BA                            ; ===========================================================================
000183BA                            
000183BA                            loc_18392:				; XREF: loc_1833E
000183BA 7064                       		moveq	#100,d0
000183BC 6100 0000                  		bsr.w	AddPoints
000183C0 117C 0004 0025             		move.b	#4,$25(a0)
000183C6 317C 00B4 003C             		move.w	#$B4,$3C(a0)
000183CC 4268 0010                  		clr.w	$10(a0)
000183D0 4E75                       		rts	
000183D2                            ; ===========================================================================
000183D2                            
000183D2                            loc_183AA:				; XREF: Obj73_ShipIndex
000183D2 7000                       		moveq	#0,d0
000183D4 1028 0028                  		move.b	$28(a0),d0
000183D8 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
000183DC 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
000183E0 0228 0006 0028             		andi.b	#6,$28(a0)
000183E6 6000 FF7E                  		bra.w	loc_1833E
000183EA                            ; ===========================================================================
000183EA 0000                       off_183C2:	dc.w loc_183CA-off_183C2
000183EC 0000                       		dc.w Obj73_MakeLava2-off_183C2
000183EE 0000                       		dc.w loc_183CA-off_183C2
000183F0 0000                       		dc.w Obj73_MakeLava2-off_183C2
000183F2                            ; ===========================================================================
000183F2                            
000183F2                            loc_183CA:				; XREF: off_183C2
000183F2 4A68 0010                  		tst.w	$10(a0)
000183F6 6600                       		bne.s	loc_183FE
000183F8 7040                       		moveq	#$40,d0
000183FA 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018400 6700                       		beq.s	loc_183E6
00018402 6500                       		bcs.s	loc_183DE
00018404 4440                       		neg.w	d0
00018406                            
00018406                            loc_183DE:
00018406 3140 0012                  		move.w	d0,$12(a0)
0001840A 6000 F4CC                  		bra.w	BossMove
0001840E                            ; ===========================================================================
0001840E                            
0001840E                            loc_183E6:
0001840E 317C 0200 0010             		move.w	#$200,$10(a0)
00018414 317C 0100 0012             		move.w	#$100,$12(a0)
0001841A 0828 0000 0022             		btst	#0,$22(a0)
00018420 6600                       		bne.s	loc_183FE
00018422 4468 0010                  		neg.w	$10(a0)
00018426                            
00018426                            loc_183FE:
00018426 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
0001842C 6400                       		bcc.s	Obj73_MakeLava
0001842E 6100 F4A8                  		bsr.w	BossMove
00018432 5968 0012                  		subq.w	#4,$12(a0)
00018436                            
00018436                            Obj73_MakeLava:
00018436 5328 0034                  		subq.b	#1,$34(a0)
0001843A 6400                       		bcc.s	loc_1845C
0001843C 4EB9 0000 DB4C             		jsr	SingleObjLoad
00018442 6600                       		bne.s	loc_1844A
00018444 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018448 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
0001844E 4EB9 0000 29B4             		jsr	(RandomNumber).l
00018454 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001845A 80FC 0050                  		divu.w	#$50,d0
0001845E 4840                       		swap	d0
00018460 0640 1878                  		addi.w	#$1878,d0
00018464 3340 0008                  		move.w	d0,8(a1)
00018468 EE09                       		lsr.b	#7,d1
0001846A 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018470                            
00018470                            loc_1844A:
00018470 4EB9 0000 29B4             		jsr	(RandomNumber).l
00018476 0200 001F                  		andi.b	#$1F,d0
0001847A 0600 0040                  		addi.b	#$40,d0
0001847E 1140 0034                  		move.b	d0,$34(a0)
00018482                            
00018482                            loc_1845C:
00018482 0828 0000 0022             		btst	#0,$22(a0)
00018488 6700                       		beq.s	loc_18474
0001848A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018490 6D00                       		blt.s	locret_1849C
00018492 317C 1910 0030             		move.w	#$1910,$30(a0)
00018498 6000                       		bra.s	loc_18482
0001849A                            ; ===========================================================================
0001849A                            
0001849A                            loc_18474:
0001849A 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
000184A0 6E00                       		bgt.s	locret_1849C
000184A2 317C 1830 0030             		move.w	#$1830,$30(a0)
000184A8                            
000184A8                            loc_18482:
000184A8 4268 0010                  		clr.w	$10(a0)
000184AC 317C FE80 0012             		move.w	#-$180,$12(a0)
000184B2 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000184B8 6400                       		bcc.s	loc_18498
000184BA 4468 0012                  		neg.w	$12(a0)
000184BE                            
000184BE                            loc_18498:
000184BE 5428 0028                  		addq.b	#2,$28(a0)
000184C2                            
000184C2                            locret_1849C:
000184C2 4E75                       		rts	
000184C4                            ; ===========================================================================
000184C4                            
000184C4                            Obj73_MakeLava2:			; XREF: off_183C2
000184C4 6100 F412                  		bsr.w	BossMove
000184C8 3028 0038                  		move.w	$38(a0),d0
000184CC 0440 022C                  		subi.w	#$22C,d0
000184D0 6E00                       		bgt.s	locret_184F4
000184D2 303C 022C                  		move.w	#$22C,d0
000184D6 4A68 0012                  		tst.w	$12(a0)
000184DA 6700                       		beq.s	loc_184EA
000184DC 4268 0012                  		clr.w	$12(a0)
000184E0 317C 0050 003C             		move.w	#$50,$3C(a0)
000184E6 0868 0000 0022             		bchg	#0,$22(a0)
000184EC 4EB9 0000 DB4C             		jsr	SingleObjLoad
000184F2 6600                       		bne.s	loc_184EA
000184F4 3368 0030 0008             		move.w	$30(a0),8(a1)
000184FA 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018500 0669 0018 000C             		addi.w	#$18,$C(a1)
00018506 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001850A 137C 0001 0028             		move.b	#1,$28(a1)
00018510                            
00018510                            loc_184EA:
00018510 5368 003C                  		subq.w	#1,$3C(a0)
00018514 6600                       		bne.s	locret_184F4
00018516 5428 0028                  		addq.b	#2,$28(a0)
0001851A                            
0001851A                            locret_184F4:
0001851A 4E75                       		rts	
0001851C                            ; ===========================================================================
0001851C                            
0001851C                            loc_184F6:				; XREF: Obj73_ShipIndex
0001851C 5368 003C                  		subq.w	#1,$3C(a0)
00018520 6B00                       		bmi.s	loc_18500
00018522 6000 F372                  		bra.w	BossDefeated
00018526                            ; ===========================================================================
00018526                            
00018526                            loc_18500:
00018526 08E8 0000 0022             		bset	#0,$22(a0)
0001852C 08A8 0007 0022             		bclr	#7,$22(a0)
00018532 4268 0010                  		clr.w	$10(a0)
00018536 5428 0025                  		addq.b	#2,$25(a0)
0001853A 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018540 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018544 6600                       		bne.s	locret_1852A
00018546 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001854C 4268 0012                  		clr.w	$12(a0)
00018550                            
00018550                            locret_1852A:
00018550 4E75                       		rts	
00018552                            ; ===========================================================================
00018552                            
00018552                            loc_1852C:				; XREF: Obj73_ShipIndex
00018552 5268 003C                  		addq.w	#1,$3C(a0)
00018556 6700                       		beq.s	loc_18544
00018558 6A00                       		bpl.s	loc_1854E
0001855A 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018560 6400                       		bcc.s	loc_18544
00018562 0668 0018 0012             		addi.w	#$18,$12(a0)
00018568 6000                       		bra.s	loc_1857A
0001856A                            ; ===========================================================================
0001856A                            
0001856A                            loc_18544:
0001856A 4268 0012                  		clr.w	$12(a0)
0001856E 4268 003C                  		clr.w	$3C(a0)
00018572 6000                       		bra.s	loc_1857A
00018574                            ; ===========================================================================
00018574                            
00018574                            loc_1854E:
00018574 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001857A 6500                       		bcs.s	loc_18566
0001857C 6700                       		beq.s	loc_1856C
0001857E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018584 6500                       		bcs.s	loc_1857A
00018586 5428 0025                  		addq.b	#2,$25(a0)
0001858A 6000                       		bra.s	loc_1857A
0001858C                            ; ===========================================================================
0001858C                            
0001858C                            loc_18566:
0001858C 5168 0012                  		subq.w	#8,$12(a0)
00018590 6000                       		bra.s	loc_1857A
00018592                            ; ===========================================================================
00018592                            
00018592                            loc_1856C:
00018592 4268 0012                  		clr.w	$12(a0)
00018596 303C 0083                  		move.w	#$83,d0
0001859A 4EB9 0000 1396             		jsr	(PlaySound).l	; play MZ music
000185A0                            
000185A0                            loc_1857A:
000185A0 6100 F336                  		bsr.w	BossMove
000185A4 6000 FDC0                  		bra.w	loc_1833E
000185A8                            ; ===========================================================================
000185A8                            
000185A8                            loc_18582:				; XREF: Obj73_ShipIndex
000185A8 317C 0500 0010             		move.w	#$500,$10(a0)
000185AE 317C FFC0 0012             		move.w	#-$40,$12(a0)
000185B4 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
000185BA 6400                       		bcc.s	loc_1859C
000185BC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000185C0 6000                       		bra.s	loc_185A2
000185C2                            ; ===========================================================================
000185C2                            
000185C2                            loc_1859C:
000185C2 4A28 0001                  		tst.b	1(a0)
000185C6 6A00                       		bpl.s	Obj73_ShipDel
000185C8                            
000185C8                            loc_185A2:
000185C8 6100 F30E                  		bsr.w	BossMove
000185CC 6000 FD98                  		bra.w	loc_1833E
000185D0                            ; ===========================================================================
000185D0                            
000185D0                            Obj73_ShipDel:
000185D0 4EF9 0000 D702             		jmp	DeleteObject
000185D6                            ; ===========================================================================
000185D6                            
000185D6                            Obj73_FaceMain:				; XREF: Obj73_Index
000185D6 7000                       		moveq	#0,d0
000185D8 7201                       		moveq	#1,d1
000185DA 2268 0034                  		movea.l	$34(a0),a1
000185DE 1029 0025                  		move.b	$25(a1),d0
000185E2 5540                       		subq.w	#2,d0
000185E4 6600                       		bne.s	loc_185D2
000185E6 0829 0001 0028             		btst	#1,$28(a1)
000185EC 6700                       		beq.s	loc_185DA
000185EE 4A69 0012                  		tst.w	$12(a1)
000185F2 6600                       		bne.s	loc_185DA
000185F4 7204                       		moveq	#4,d1
000185F6 6000                       		bra.s	loc_185EE
000185F8                            ; ===========================================================================
000185F8                            
000185F8                            loc_185D2:
000185F8 5500                       		subq.b	#2,d0
000185FA 6B00                       		bmi.s	loc_185DA
000185FC 720A                       		moveq	#$A,d1
000185FE 6000                       		bra.s	loc_185EE
00018600                            ; ===========================================================================
00018600                            
00018600                            loc_185DA:
00018600 4A29 0020                  		tst.b	$20(a1)
00018604 6600                       		bne.s	loc_185E4
00018606 7205                       		moveq	#5,d1
00018608 6000                       		bra.s	loc_185EE
0001860A                            ; ===========================================================================
0001860A                            
0001860A                            loc_185E4:
0001860A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018610 6500                       		bcs.s	loc_185EE
00018612 7204                       		moveq	#4,d1
00018614                            
00018614                            loc_185EE:
00018614 1141 001C                  		move.b	d1,$1C(a0)
00018618 5900                       		subq.b	#4,d0
0001861A 6600                       		bne.s	loc_18602
0001861C 117C 0006 001C             		move.b	#6,$1C(a0)
00018622 4A28 0001                  		tst.b	1(a0)
00018626 6A00                       		bpl.s	Obj73_FaceDel
00018628                            
00018628                            loc_18602:
00018628 6000                       		bra.s	Obj73_Display
0001862A                            ; ===========================================================================
0001862A                            
0001862A                            Obj73_FaceDel:
0001862A 4EF9 0000 D702             		jmp	DeleteObject
00018630                            ; ===========================================================================
00018630                            
00018630                            Obj73_FlameMain:			; XREF: Obj73_Index
00018630 117C 0007 001C             		move.b	#7,$1C(a0)
00018636 2268 0034                  		movea.l	$34(a0),a1
0001863A 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018640 6D00                       		blt.s	loc_1862A
00018642 117C 000B 001C             		move.b	#$B,$1C(a0)
00018648 4A28 0001                  		tst.b	1(a0)
0001864C 6A00                       		bpl.s	Obj73_FlameDel
0001864E 6000                       		bra.s	loc_18636
00018650                            ; ===========================================================================
00018650                            
00018650                            loc_1862A:
00018650 4A69 0010                  		tst.w	$10(a1)
00018654 6700                       		beq.s	loc_18636
00018656 117C 0008 001C             		move.b	#8,$1C(a0)
0001865C                            
0001865C                            loc_18636:
0001865C 6000                       		bra.s	Obj73_Display
0001865E                            ; ===========================================================================
0001865E                            
0001865E                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
0001865E 4EF9 0000 D702             		jmp	DeleteObject
00018664                            ; ===========================================================================
00018664                            
00018664                            Obj73_Display:
00018664 43F9 0001 7CE8             		lea	(Ani_Eggman).l,a1
0001866A 4EB9 0000 A7F2             		jsr	AnimateSprite
00018670                            
00018670                            loc_1864A:
00018670 2268 0034                  		movea.l	$34(a0),a1
00018674 3169 0008 0008             		move.w	8(a1),8(a0)
0001867A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018680 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018686 7003                       		moveq	#3,d0
00018688 C028 0022                  		and.b	$22(a0),d0
0001868C 0228 00FC 0001             		andi.b	#-4,1(a0)
00018692 8128 0001                  		or.b	d0,1(a0)
00018696 4EF9 0000 D6C6             		jmp	DisplaySprite
0001869C                            ; ===========================================================================
0001869C                            
0001869C                            Obj73_TubeMain:				; XREF: Obj73_Index
0001869C 2268 0034                  		movea.l	$34(a0),a1
000186A0 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000186A6 6600                       		bne.s	loc_18688
000186A8 4A28 0001                  		tst.b	1(a0)
000186AC 6A00                       		bpl.s	Obj73_TubeDel
000186AE                            
000186AE                            loc_18688:
000186AE 217C 0001 7E00 0004        		move.l	#Map_BossItems,4(a0)
000186B6 317C 246C 0002             		move.w	#$246C,2(a0)
000186BC 117C 0004 001A             		move.b	#4,$1A(a0)
000186C2 60AC                       		bra.s	loc_1864A
000186C4                            ; ===========================================================================
000186C4                            
000186C4                            Obj73_TubeDel:
000186C4 4EF9 0000 D702             		jmp	DeleteObject
000186CA                            ; ===========================================================================
000186CA                            ; ---------------------------------------------------------------------------
000186CA                            ; Object 74 - lava that	Eggman drops (MZ)
000186CA                            ; ---------------------------------------------------------------------------
000186CA                            
000186CA                            Obj74:					; XREF: Obj_Index
000186CA 7000                       		moveq	#0,d0
000186CC 1028 0024                  		move.b	$24(a0),d0
000186D0 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
000186D4 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
000186D8 4EF9 0000 D6C6             		jmp	DisplaySprite
000186DE                            ; ===========================================================================
000186DE 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
000186E0 0000                       		dc.w Obj74_Action-Obj74_Index
000186E2 0000                       		dc.w loc_18886-Obj74_Index
000186E4 0000                       		dc.w Obj74_Delete3-Obj74_Index
000186E6                            ; ===========================================================================
000186E6                            
000186E6                            Obj74_Main:				; XREF: Obj74_Index
000186E6 117C 0008 0016             		move.b	#8,$16(a0)
000186EC 117C 0008 0017             		move.b	#8,$17(a0)
000186F2 217C 0000 B444 0004        		move.l	#Map_obj14,4(a0)
000186FA 317C 0345 0002             		move.w	#$345,2(a0)
00018700 117C 0004 0001             		move.b	#4,1(a0)
00018706 117C 0005 0018             		move.b	#5,$18(a0)
0001870C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018712 117C 0008 0019             		move.b	#8,$19(a0)
00018718 5428 0024                  		addq.b	#2,$24(a0)
0001871C 4A28 0028                  		tst.b	$28(a0)
00018720 6600                       		bne.s	loc_1870A
00018722 117C 008B 0020             		move.b	#$8B,$20(a0)
00018728 5428 0024                  		addq.b	#2,$24(a0)
0001872C 6000 0000                  		bra.w	loc_18886
00018730                            ; ===========================================================================
00018730                            
00018730                            loc_1870A:
00018730 117C 001E 0029             		move.b	#$1E,$29(a0)
00018736 303C 00AE                  		move.w	#$AE,d0
0001873A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lava sound
00018740                            
00018740                            Obj74_Action:				; XREF: Obj74_Index
00018740 7000                       		moveq	#0,d0
00018742 1028 0025                  		move.b	$25(a0),d0
00018746 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001874A 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
0001874E 4EB9 0000 D6A0             		jsr	SpeedToPos
00018754 43F9 0000 E580             		lea	(Ani_obj14).l,a1
0001875A 4EB9 0000 A7F2             		jsr	AnimateSprite
00018760 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018766 6200                       		bhi.s	Obj74_Delete
00018768 4E75                       		rts	
0001876A                            ; ===========================================================================
0001876A                            
0001876A                            Obj74_Delete:
0001876A 4EF9 0000 D702             		jmp	DeleteObject
00018770                            ; ===========================================================================
00018770 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018772 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018774 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018776 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018778                            ; ===========================================================================
00018778                            
00018778                            Obj74_Drop:				; XREF: Obj74_Index2
00018778 08E8 0001 0022             		bset	#1,$22(a0)
0001877E 5328 0029                  		subq.b	#1,$29(a0)
00018782 6A00                       		bpl.s	locret_18780
00018784 117C 008B 0020             		move.b	#$8B,$20(a0)
0001878A 4228 0028                  		clr.b	$28(a0)
0001878E 0668 0018 0012             		addi.w	#$18,$12(a0)
00018794 08A8 0001 0022             		bclr	#1,$22(a0)
0001879A 6100 C6C8                  		bsr.w	ObjHitFloor
0001879E 4A41                       		tst.w	d1
000187A0 6A00                       		bpl.s	locret_18780
000187A2 5428 0025                  		addq.b	#2,$25(a0)
000187A6                            
000187A6                            locret_18780:
000187A6 4E75                       		rts	
000187A8                            ; ===========================================================================
000187A8                            
000187A8                            Obj74_MakeFlame:			; XREF: Obj74_Index2
000187A8 5568 000C                  		subq.w	#2,$C(a0)
000187AC 08E8 0007 0002             		bset	#7,2(a0)
000187B2 317C 00A0 0010             		move.w	#$A0,$10(a0)
000187B8 4268 0012                  		clr.w	$12(a0)
000187BC 3168 0008 0030             		move.w	8(a0),$30(a0)
000187C2 3168 000C 0038             		move.w	$C(a0),$38(a0)
000187C8 117C 0003 0029             		move.b	#3,$29(a0)
000187CE 4EB9 0000 DB62             		jsr	SingleObjLoad2
000187D4 6600                       		bne.s	loc_187CA
000187D6 47D1                       		lea	(a1),a3
000187D8 45D0                       		lea	(a0),a2
000187DA 7003                       		moveq	#3,d0
000187DC                            
000187DC                            Obj74_Loop:
000187DC 26DA                       		move.l	(a2)+,(a3)+
000187DE 26DA                       		move.l	(a2)+,(a3)+
000187E0 26DA                       		move.l	(a2)+,(a3)+
000187E2 26DA                       		move.l	(a2)+,(a3)+
000187E4 51C8 FFF6                  		dbf	d0,Obj74_Loop
000187E8                            
000187E8 4469 0010                  		neg.w	$10(a1)
000187EC 5429 0025                  		addq.b	#2,$25(a1)
000187F0                            
000187F0                            loc_187CA:
000187F0 5428 0025                  		addq.b	#2,$25(a0)
000187F4 4E75                       		rts	
000187F6                            
000187F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000187F6                            
000187F6                            
000187F6                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
000187F6 4EB9 0000 DB62             		jsr	SingleObjLoad2
000187FC 6600                       		bne.s	locret_187EE
000187FE 3368 0008 0008             		move.w	8(a0),8(a1)
00018804 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001880A 12BC 0074                  		move.b	#$74,(a1)
0001880E 337C 0067 0028             		move.w	#$67,$28(a1)
00018814                            
00018814                            locret_187EE:
00018814 4E75                       		rts	
00018816                            ; End of function Obj74_Duplicate2
00018816                            
00018816                            ; ===========================================================================
00018816                            
00018816                            Obj74_Duplicate:			; XREF: Obj74_Index2
00018816 6100 C64C                  		bsr.w	ObjHitFloor
0001881A 4A41                       		tst.w	d1
0001881C 6A00                       		bpl.s	loc_18826
0001881E 3028 0008                  		move.w	8(a0),d0
00018822 0C40 1940                  		cmpi.w	#$1940,d0
00018826 6E00                       		bgt.s	loc_1882C
00018828 3228 0030                  		move.w	$30(a0),d1
0001882C B240                       		cmp.w	d0,d1
0001882E 6700                       		beq.s	loc_1881E
00018830 0240 0010                  		andi.w	#$10,d0
00018834 0241 0010                  		andi.w	#$10,d1
00018838 B240                       		cmp.w	d0,d1
0001883A 6700                       		beq.s	loc_1881E
0001883C 61B8                       		bsr.s	Obj74_Duplicate2
0001883E 3168 0008 0032             		move.w	8(a0),$32(a0)
00018844                            
00018844                            loc_1881E:
00018844 3168 0008 0030             		move.w	8(a0),$30(a0)
0001884A 4E75                       		rts	
0001884C                            ; ===========================================================================
0001884C                            
0001884C                            loc_18826:
0001884C 5428 0025                  		addq.b	#2,$25(a0)
00018850 4E75                       		rts	
00018852                            ; ===========================================================================
00018852                            
00018852                            loc_1882C:
00018852 5428 0024                  		addq.b	#2,$24(a0)
00018856 4E75                       		rts	
00018858                            ; ===========================================================================
00018858                            
00018858                            Obj74_FallEdge:				; XREF: Obj74_Index2
00018858 08A8 0001 0022             		bclr	#1,$22(a0)
0001885E 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00018864 3028 0008                  		move.w	8(a0),d0
00018868 9068 0032                  		sub.w	$32(a0),d0
0001886C 6A00                       		bpl.s	loc_1884A
0001886E 4440                       		neg.w	d0
00018870                            
00018870                            loc_1884A:
00018870 0C40 0012                  		cmpi.w	#$12,d0
00018874 6600                       		bne.s	loc_18856
00018876 08A8 0007 0002             		bclr	#7,2(a0)
0001887C                            
0001887C                            loc_18856:
0001887C 6100 C5E6                  		bsr.w	ObjHitFloor
00018880 4A41                       		tst.w	d1
00018882 6A00                       		bpl.s	locret_1887E
00018884 5328 0029                  		subq.b	#1,$29(a0)
00018888 6700                       		beq.s	Obj74_Delete2
0001888A 4268 0012                  		clr.w	$12(a0)
0001888E 3168 0032 0008             		move.w	$32(a0),8(a0)
00018894 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001889A 08E8 0007 0002             		bset	#7,2(a0)
000188A0 5528 0025                  		subq.b	#2,$25(a0)
000188A4                            
000188A4                            locret_1887E:
000188A4 4E75                       		rts	
000188A6                            ; ===========================================================================
000188A6                            
000188A6                            Obj74_Delete2:
000188A6 4EF9 0000 D702             		jmp	DeleteObject
000188AC                            ; ===========================================================================
000188AC                            
000188AC                            loc_18886:				; XREF: Obj74_Index
000188AC 08E8 0007 0002             		bset	#7,2(a0)
000188B2 5328 0029                  		subq.b	#1,$29(a0)
000188B6 6600                       		bne.s	Obj74_Animate
000188B8 117C 0001 001C             		move.b	#1,$1C(a0)
000188BE 5968 000C                  		subq.w	#4,$C(a0)
000188C2 4228 0020                  		clr.b	$20(a0)
000188C6                            
000188C6                            Obj74_Animate:
000188C6 43F9 0000 E580             		lea	(Ani_obj14).l,a1
000188CC 4EF9 0000 A7F2             		jmp	AnimateSprite
000188D2                            ; ===========================================================================
000188D2                            
000188D2                            Obj74_Delete3:				; XREF: Obj74_Index
000188D2 4EF9 0000 D702             		jmp	DeleteObject
000188D8                            ; ===========================================================================
000188D8                            
000188D8                            Obj7A_Delete:
000188D8 4EF9 0000 D702             		jmp	DeleteObject
000188DE                            ; ===========================================================================
000188DE                            ; ---------------------------------------------------------------------------
000188DE                            ; Object 7A - Eggman (SLZ)
000188DE                            ; ---------------------------------------------------------------------------
000188DE                            
000188DE                            Obj7A:					; XREF: Obj_Index
000188DE 7000                       		moveq	#0,d0
000188E0 1028 0024                  		move.b	$24(a0),d0
000188E4 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
000188E8 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
000188EC                            ; ===========================================================================
000188EC 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
000188EE 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
000188F0 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
000188F2 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
000188F4 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
000188F6                            
000188F6 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000188F9 0401 04                    		dc.b 4,	1, 4
000188FC 0607 04                    		dc.b 6,	7, 4
000188FF 0800 03                    		dc.b 8,	0, 3
00018902                            ; ===========================================================================
00018902                            
00018902                            Obj7A_Main:				; XREF: Obj7A_Index
00018902 317C 2188 0008             		move.w	#$2188,8(a0)
00018908 317C 0228 000C             		move.w	#$228,$C(a0)
0001890E 3168 0008 0030             		move.w	8(a0),$30(a0)
00018914 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001891A 117C 000F 0020             		move.b	#$F,$20(a0)
00018920 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018926 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001892A 2248                       		movea.l	a0,a1
0001892C 7203                       		moveq	#3,d1
0001892E 6000                       		bra.s	Obj7A_LoadBoss
00018930                            ; ===========================================================================
00018930                            
00018930                            Obj7A_Loop:
00018930 4EB9 0000 DB62             		jsr	SingleObjLoad2
00018936 6600                       		bne.s	loc_1895C
00018938 12BC 007A                  		move.b	#$7A,0(a1)
0001893C 3368 0008 0008             		move.w	8(a0),8(a1)
00018942 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018948                            
00018948                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00018948 08A8 0000 0022             		bclr	#0,$22(a0)
0001894E 4229 0025                  		clr.b	$25(a1)
00018952 135A 0024                  		move.b	(a2)+,$24(a1)
00018956 135A 001C                  		move.b	(a2)+,$1C(a1)
0001895A 135A 0018                  		move.b	(a2)+,$18(a1)
0001895E 237C 0001 7D38 0004        		move.l	#Map_Eggman,4(a1)
00018966 337C 0400 0002             		move.w	#$400,2(a1)
0001896C 137C 0004 0001             		move.b	#4,1(a1)
00018972 137C 0020 0019             		move.b	#$20,$19(a1)
00018978 2348 0034                  		move.l	a0,$34(a1)
0001897C 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00018980                            
00018980                            loc_1895C:
00018980 43F8 D040                  		lea	($FFFFD040).w,a1
00018984 45E8 002A                  		lea	$2A(a0),a2
00018988 705E                       		moveq	#$5E,d0
0001898A 723E                       		moveq	#$3E,d1
0001898C                            
0001898C                            loc_18968:
0001898C B011                       		cmp.b	(a1),d0
0001898E 6600                       		bne.s	loc_18974
00018990 4A29 0028                  		tst.b	$28(a1)
00018994 6700                       		beq.s	loc_18974
00018996 34C9                       		move.w	a1,(a2)+
00018998                            
00018998                            loc_18974:
00018998 D2FC 0040                  		adda.w	#$40,a1
0001899C 51C9 FFEE                  		dbf	d1,loc_18968
000189A0                            
000189A0                            Obj7A_ShipMain:				; XREF: Obj7A_Index
000189A0 7000                       		moveq	#0,d0
000189A2 1028 0025                  		move.b	$25(a0),d0
000189A6 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
000189AA 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
000189AE 43F9 0001 7CE8             		lea	(Ani_Eggman).l,a1
000189B4 4EB9 0000 A7F2             		jsr	AnimateSprite
000189BA 7003                       		moveq	#3,d0
000189BC C028 0022                  		and.b	$22(a0),d0
000189C0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000189C6 8128 0001                  		or.b	d0,1(a0)
000189CA 4EF9 0000 D6C6             		jmp	DisplaySprite
000189D0                            ; ===========================================================================
000189D0 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
000189D2 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
000189D4 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
000189D6 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
000189D8 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
000189DA 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
000189DC                            ; ===========================================================================
000189DC                            
000189DC                            loc_189B8:				; XREF: Obj7A_ShipIndex
000189DC 317C FF00 0010             		move.w	#-$100,$10(a0)
000189E2 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000189E8 6400                       		bcc.s	loc_189CA
000189EA 5428 0025                  		addq.b	#2,$25(a0)
000189EE                            
000189EE                            loc_189CA:
000189EE 6100 EEE8                  		bsr.w	BossMove
000189F2 1028 003F                  		move.b	$3F(a0),d0
000189F6 5428 003F                  		addq.b	#2,$3F(a0)
000189FA 4EB9 0000 29DA             		jsr	(CalcSine).l
00018A00 EC40                       		asr.w	#6,d0
00018A02 D068 0038                  		add.w	$38(a0),d0
00018A06 3140 000C                  		move.w	d0,$C(a0)
00018A0A 3168 0030 0008             		move.w	$30(a0),8(a0)
00018A10 6000                       		bra.s	loc_189FE
00018A12                            ; ===========================================================================
00018A12                            
00018A12                            loc_189EE:
00018A12 6100 EEC4                  		bsr.w	BossMove
00018A16 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018A1C 3168 0030 0008             		move.w	$30(a0),8(a0)
00018A22                            
00018A22                            loc_189FE:
00018A22 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00018A28 6400                       		bcc.s	locret_18A44
00018A2A 4A28 0022                  		tst.b	$22(a0)
00018A2E 6B00                       		bmi.s	loc_18A46
00018A30 4A28 0020                  		tst.b	$20(a0)
00018A34 6600                       		bne.s	locret_18A44
00018A36 4A28 003E                  		tst.b	$3E(a0)
00018A3A 6600                       		bne.s	loc_18A28
00018A3C 117C 0020 003E             		move.b	#$20,$3E(a0)
00018A42 303C 00AC                  		move.w	#$AC,d0
00018A46 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018A4C                            
00018A4C                            loc_18A28:
00018A4C 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018A50 7000                       		moveq	#0,d0
00018A52 4A51                       		tst.w	(a1)
00018A54 6600                       		bne.s	loc_18A36
00018A56 303C 0EEE                  		move.w	#$EEE,d0
00018A5A                            
00018A5A                            loc_18A36:
00018A5A 3280                       		move.w	d0,(a1)
00018A5C 5328 003E                  		subq.b	#1,$3E(a0)
00018A60 6600                       		bne.s	locret_18A44
00018A62 117C 000F 0020             		move.b	#$F,$20(a0)
00018A68                            
00018A68                            locret_18A44:
00018A68 4E75                       		rts	
00018A6A                            ; ===========================================================================
00018A6A                            
00018A6A                            loc_18A46:
00018A6A 7064                       		moveq	#100,d0
00018A6C 6100 0000                  		bsr.w	AddPoints
00018A70 117C 0006 0025             		move.b	#6,$25(a0)
00018A76 117C 0078 003C             		move.b	#$78,$3C(a0)
00018A7C 4268 0010                  		clr.w	$10(a0)
00018A80 4E75                       		rts	
00018A82                            ; ===========================================================================
00018A82                            
00018A82                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00018A82 3028 0030                  		move.w	$30(a0),d0
00018A86 317C 0200 0010             		move.w	#$200,$10(a0)
00018A8C 0828 0000 0022             		btst	#0,$22(a0)
00018A92 6600                       		bne.s	loc_18A7C
00018A94 4468 0010                  		neg.w	$10(a0)
00018A98 0C40 2008                  		cmpi.w	#$2008,d0
00018A9C 6E00                       		bgt.s	loc_18A88
00018A9E 6000                       		bra.s	loc_18A82
00018AA0                            ; ===========================================================================
00018AA0                            
00018AA0                            loc_18A7C:
00018AA0 0C40 2138                  		cmpi.w	#$2138,d0
00018AA4 6D00                       		blt.s	loc_18A88
00018AA6                            
00018AA6                            loc_18A82:
00018AA6 0868 0000 0022             		bchg	#0,$22(a0)
00018AAC                            
00018AAC                            loc_18A88:
00018AAC 3028 0008                  		move.w	8(a0),d0
00018AB0 72FF                       		moveq	#-1,d1
00018AB2 7402                       		moveq	#2,d2
00018AB4 45E8 002A                  		lea	$2A(a0),a2
00018AB8 7828                       		moveq	#$28,d4
00018ABA 4A68 0010                  		tst.w	$10(a0)
00018ABE 6A00                       		bpl.s	loc_18A9E
00018AC0 4444                       		neg.w	d4
00018AC2                            
00018AC2                            loc_18A9E:
00018AC2 321A                       		move.w	(a2)+,d1
00018AC4 2641                       		movea.l	d1,a3
00018AC6 082B 0003 0022             		btst	#3,$22(a3)
00018ACC 6600                       		bne.s	loc_18AB4
00018ACE 362B 0008                  		move.w	8(a3),d3
00018AD2 D644                       		add.w	d4,d3
00018AD4 9640                       		sub.w	d0,d3
00018AD6 6700                       		beq.s	loc_18AC0
00018AD8                            
00018AD8                            loc_18AB4:
00018AD8 51CA FFE8                  		dbf	d2,loc_18A9E
00018ADC                            
00018ADC 1142 0028                  		move.b	d2,$28(a0)
00018AE0 6000 FF0C                  		bra.w	loc_189CA
00018AE4                            ; ===========================================================================
00018AE4                            
00018AE4                            loc_18AC0:
00018AE4 1142 0028                  		move.b	d2,$28(a0)
00018AE8 5428 0025                  		addq.b	#2,$25(a0)
00018AEC 117C 0028 003C             		move.b	#$28,$3C(a0)
00018AF2 6000 FEFA                  		bra.w	loc_189CA
00018AF6                            ; ===========================================================================
00018AF6                            
00018AF6                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00018AF6 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00018AFC 6600                       		bne.s	loc_18B36
00018AFE 70FF                       		moveq	#-1,d0
00018B00 1028 0028                  		move.b	$28(a0),d0
00018B04 4880                       		ext.w	d0
00018B06 6B00                       		bmi.s	loc_18B40
00018B08 5540                       		subq.w	#2,d0
00018B0A 4440                       		neg.w	d0
00018B0C D040                       		add.w	d0,d0
00018B0E 43E8 002A                  		lea	$2A(a0),a1
00018B12 3031 0000                  		move.w	(a1,d0.w),d0
00018B16 2440                       		movea.l	d0,a2
00018B18 43F8 D040                  		lea	($FFFFD040).w,a1
00018B1C 723E                       		moveq	#$3E,d1
00018B1E                            
00018B1E                            loc_18AFA:
00018B1E B0A9 003C                  		cmp.l	$3C(a1),d0
00018B22 6700                       		beq.s	loc_18B40
00018B24 D2FC 0040                  		adda.w	#$40,a1
00018B28 51C9 FFF4                  		dbf	d1,loc_18AFA
00018B2C                            
00018B2C 2F08                       		move.l	a0,-(sp)
00018B2E 41D2                       		lea	(a2),a0
00018B30 4EB9 0000 DB62             		jsr	SingleObjLoad2
00018B36 205F                       		movea.l	(sp)+,a0
00018B38 6600                       		bne.s	loc_18B40
00018B3A 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00018B3E 3368 0008 0008             		move.w	8(a0),8(a1)
00018B44 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018B4A 0669 0020 000C             		addi.w	#$20,$C(a1)
00018B50 136A 0022 0022             		move.b	$22(a2),$22(a1)
00018B56 234A 003C                  		move.l	a2,$3C(a1)
00018B5A                            
00018B5A                            loc_18B36:
00018B5A 5328 003C                  		subq.b	#1,$3C(a0)
00018B5E 6700                       		beq.s	loc_18B40
00018B60 6000 FEC0                  		bra.w	loc_189FE
00018B64                            ; ===========================================================================
00018B64                            
00018B64                            loc_18B40:
00018B64 5528 0025                  		subq.b	#2,$25(a0)
00018B68 6000 FE84                  		bra.w	loc_189CA
00018B6C                            ; ===========================================================================
00018B6C                            
00018B6C                            loc_18B48:				; XREF: Obj7A_ShipIndex
00018B6C 5328 003C                  		subq.b	#1,$3C(a0)
00018B70 6B00                       		bmi.s	loc_18B52
00018B72 6000 ED22                  		bra.w	BossDefeated
00018B76                            ; ===========================================================================
00018B76                            
00018B76                            loc_18B52:
00018B76 5428 0025                  		addq.b	#2,$25(a0)
00018B7A 4268 0012                  		clr.w	$12(a0)
00018B7E 08E8 0000 0022             		bset	#0,$22(a0)
00018B84 08A8 0007 0022             		bclr	#7,$22(a0)
00018B8A 4268 0010                  		clr.w	$10(a0)
00018B8E 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00018B94 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018B98 6600                       		bne.s	loc_18B7C
00018B9A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018BA0                            
00018BA0                            loc_18B7C:
00018BA0 6000 FE80                  		bra.w	loc_189FE
00018BA4                            ; ===========================================================================
00018BA4                            
00018BA4                            loc_18B80:				; XREF: Obj7A_ShipIndex
00018BA4 5228 003C                  		addq.b	#1,$3C(a0)
00018BA8 6700                       		beq.s	loc_18B90
00018BAA 6A00                       		bpl.s	loc_18B96
00018BAC 0668 0018 0012             		addi.w	#$18,$12(a0)
00018BB2 6000                       		bra.s	loc_18BC2
00018BB4                            ; ===========================================================================
00018BB4                            
00018BB4                            loc_18B90:
00018BB4 4268 0012                  		clr.w	$12(a0)
00018BB8 6000                       		bra.s	loc_18BC2
00018BBA                            ; ===========================================================================
00018BBA                            
00018BBA                            loc_18B96:
00018BBA 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00018BC0 6500                       		bcs.s	loc_18BAE
00018BC2 6700                       		beq.s	loc_18BB4
00018BC4 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00018BCA 6500                       		bcs.s	loc_18BC2
00018BCC 5428 0025                  		addq.b	#2,$25(a0)
00018BD0 6000                       		bra.s	loc_18BC2
00018BD2                            ; ===========================================================================
00018BD2                            
00018BD2                            loc_18BAE:
00018BD2 5168 0012                  		subq.w	#8,$12(a0)
00018BD6 6000                       		bra.s	loc_18BC2
00018BD8                            ; ===========================================================================
00018BD8                            
00018BD8                            loc_18BB4:
00018BD8 4268 0012                  		clr.w	$12(a0)
00018BDC 303C 0084                  		move.w	#$84,d0
00018BE0 4EB9 0000 1396             		jsr	(PlaySound).l	; play SLZ music
00018BE6                            
00018BE6                            loc_18BC2:
00018BE6 6000 FE2A                  		bra.w	loc_189EE
00018BEA                            ; ===========================================================================
00018BEA                            
00018BEA                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00018BEA 317C 0400 0010             		move.w	#$400,$10(a0)
00018BF0 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018BF6 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00018BFC 6400                       		bcc.s	loc_18BE0
00018BFE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018C02 6000                       		bra.s	loc_18BE8
00018C04                            ; ===========================================================================
00018C04                            
00018C04                            loc_18BE0:
00018C04 4A28 0001                  		tst.b	1(a0)
00018C08 6A00 FCCE                  		bpl.w	Obj7A_Delete
00018C0C                            
00018C0C                            loc_18BE8:
00018C0C 6100 ECCA                  		bsr.w	BossMove
00018C10 6000 FDDC                  		bra.w	loc_189CA
00018C14                            ; ===========================================================================
00018C14                            
00018C14                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00018C14 7000                       		moveq	#0,d0
00018C16 7201                       		moveq	#1,d1
00018C18 2268 0034                  		movea.l	$34(a0),a1
00018C1C 1029 0025                  		move.b	$25(a1),d0
00018C20 0C00 0006                  		cmpi.b	#6,d0
00018C24 6B00                       		bmi.s	loc_18C06
00018C26 720A                       		moveq	#$A,d1
00018C28 6000                       		bra.s	loc_18C1A
00018C2A                            ; ===========================================================================
00018C2A                            
00018C2A                            loc_18C06:
00018C2A 4A29 0020                  		tst.b	$20(a1)
00018C2E 6600                       		bne.s	loc_18C10
00018C30 7205                       		moveq	#5,d1
00018C32 6000                       		bra.s	loc_18C1A
00018C34                            ; ===========================================================================
00018C34                            
00018C34                            loc_18C10:
00018C34 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018C3A 6500                       		bcs.s	loc_18C1A
00018C3C 7204                       		moveq	#4,d1
00018C3E                            
00018C3E                            loc_18C1A:
00018C3E 1141 001C                  		move.b	d1,$1C(a0)
00018C42 0C00 000A                  		cmpi.b	#$A,d0
00018C46 6600                       		bne.s	loc_18C32
00018C48 117C 0006 001C             		move.b	#6,$1C(a0)
00018C4E 4A28 0001                  		tst.b	1(a0)
00018C52 6A00 FC84                  		bpl.w	Obj7A_Delete
00018C56                            
00018C56                            loc_18C32:
00018C56 6000                       		bra.s	loc_18C6C
00018C58                            ; ===========================================================================
00018C58                            
00018C58                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00018C58 117C 0008 001C             		move.b	#8,$1C(a0)
00018C5E 2268 0034                  		movea.l	$34(a0),a1
00018C62 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00018C68 6600                       		bne.s	loc_18C56
00018C6A 4A28 0001                  		tst.b	1(a0)
00018C6E 6A00 FC68                  		bpl.w	Obj7A_Delete
00018C72 117C 000B 001C             		move.b	#$B,$1C(a0)
00018C78 6000                       		bra.s	loc_18C6C
00018C7A                            ; ===========================================================================
00018C7A                            
00018C7A                            loc_18C56:
00018C7A 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018C80 6E00                       		bgt.s	loc_18C6C
00018C82 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00018C88 6D00                       		blt.s	loc_18C6C
00018C8A 117C 0007 001C             		move.b	#7,$1C(a0)
00018C90                            
00018C90                            loc_18C6C:
00018C90 43F9 0001 7CE8             		lea	(Ani_Eggman).l,a1
00018C96 4EB9 0000 A7F2             		jsr	AnimateSprite
00018C9C                            
00018C9C                            loc_18C78:
00018C9C 2268 0034                  		movea.l	$34(a0),a1
00018CA0 3169 0008 0008             		move.w	8(a1),8(a0)
00018CA6 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018CAC 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018CB2 7003                       		moveq	#3,d0
00018CB4 C028 0022                  		and.b	$22(a0),d0
00018CB8 0228 00FC 0001             		andi.b	#-4,1(a0)
00018CBE 8128 0001                  		or.b	d0,1(a0)
00018CC2 4EF9 0000 D6C6             		jmp	DisplaySprite
00018CC8                            ; ===========================================================================
00018CC8                            
00018CC8                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00018CC8 2268 0034                  		movea.l	$34(a0),a1
00018CCC 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00018CD2 6600                       		bne.s	loc_18CB8
00018CD4 4A28 0001                  		tst.b	1(a0)
00018CD8 6A00 FBFE                  		bpl.w	Obj7A_Delete
00018CDC                            
00018CDC                            loc_18CB8:
00018CDC 217C 0001 7E00 0004        		move.l	#Map_BossItems,4(a0)
00018CE4 317C 246C 0002             		move.w	#$246C,2(a0)
00018CEA 117C 0003 001A             		move.b	#3,$1A(a0)
00018CF0 60AA                       		bra.s	loc_18C78
00018CF2                            ; ===========================================================================
00018CF2                            ; ---------------------------------------------------------------------------
00018CF2                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00018CF2                            ; ---------------------------------------------------------------------------
00018CF2                            
00018CF2                            Obj7B:					; XREF: Obj_Index
00018CF2 7000                       		moveq	#0,d0
00018CF4 1028 0024                  		move.b	$24(a0),d0
00018CF8 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00018CFC 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00018D00 3028 0030                  		move.w	$30(a0),d0
00018D04 0240 FF80                  		andi.w	#$FF80,d0
00018D08 3238 F700                  		move.w	($FFFFF700).w,d1
00018D0C 0441 0080                  		subi.w	#$80,d1
00018D10 0241 FF80                  		andi.w	#$FF80,d1
00018D14 9041                       		sub.w	d1,d0
00018D16 6B00 FBC0                  		bmi.w	Obj7A_Delete
00018D1A 0C40 0280                  		cmpi.w	#$280,d0
00018D1E 6200 FBB8                  		bhi.w	Obj7A_Delete
00018D22 4EF9 0000 D6C6             		jmp	DisplaySprite
00018D28                            ; ===========================================================================
00018D28 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00018D2A 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00018D2C 0000                       		dc.w loc_18DC6-Obj7B_Index
00018D2E 0000                       		dc.w loc_18EAA-Obj7B_Index
00018D30 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00018D32 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00018D34                            ; ===========================================================================
00018D34                            
00018D34                            Obj7B_Main:				; XREF: Obj7B_Index
00018D34 217C 0001 1A84 0004        		move.l	#Map_obj5Ea,4(a0)
00018D3C 317C 0518 0002             		move.w	#$518,2(a0)
00018D42 117C 0001 001A             		move.b	#1,$1A(a0)
00018D48 0028 0004 0001             		ori.b	#4,1(a0)
00018D4E 117C 0004 0018             		move.b	#4,$18(a0)
00018D54 117C 008B 0020             		move.b	#$8B,$20(a0)
00018D5A 117C 000C 0019             		move.b	#$C,$19(a0)
00018D60 2268 003C                  		movea.l	$3C(a0),a1
00018D64 3169 0008 0030             		move.w	8(a1),$30(a0)
00018D6A 3169 000C 0034             		move.w	$C(a1),$34(a0)
00018D70 08E8 0000 0022             		bset	#0,$22(a0)
00018D76 3028 0008                  		move.w	8(a0),d0
00018D7A B069 0008                  		cmp.w	8(a1),d0
00018D7E 6E00                       		bgt.s	loc_18D68
00018D80 08A8 0000 0022             		bclr	#0,$22(a0)
00018D86 117C 0002 003A             		move.b	#2,$3A(a0)
00018D8C                            
00018D8C                            loc_18D68:
00018D8C 5428 0024                  		addq.b	#2,$24(a0)
00018D90                            
00018D90                            Obj7B_Fall:				; XREF: Obj7B_Index
00018D90 4EB9 0000 D674             		jsr	ObjectFall
00018D96 2268 003C                  		movea.l	$3C(a0),a1
00018D9A 45F9 0000 0000             		lea	(word_19018).l,a2
00018DA0 7000                       		moveq	#0,d0
00018DA2 1029 001A                  		move.b	$1A(a1),d0
00018DA6 3228 0008                  		move.w	8(a0),d1
00018DAA 9268 0030                  		sub.w	$30(a0),d1
00018DAE 6400                       		bcc.s	loc_18D8E
00018DB0 5440                       		addq.w	#2,d0
00018DB2                            
00018DB2                            loc_18D8E:
00018DB2 D040                       		add.w	d0,d0
00018DB4 3228 0034                  		move.w	$34(a0),d1
00018DB8 D272 0000                  		add.w	(a2,d0.w),d1
00018DBC B268 000C                  		cmp.w	$C(a0),d1
00018DC0 6E00                       		bgt.s	locret_18DC4
00018DC2 2268 003C                  		movea.l	$3C(a0),a1
00018DC6 7202                       		moveq	#2,d1
00018DC8 0828 0000 0022             		btst	#0,$22(a0)
00018DCE 6700                       		beq.s	loc_18DAE
00018DD0 7200                       		moveq	#0,d1
00018DD2                            
00018DD2                            loc_18DAE:
00018DD2 317C 00F0 0028             		move.w	#$F0,$28(a0)
00018DD8 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00018DDE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00018DE4 6000 0000                  		bra.w	loc_18FA2
00018DE8                            ; ===========================================================================
00018DE8                            
00018DE8                            locret_18DC4:
00018DE8 4E75                       		rts	
00018DEA                            ; ===========================================================================
00018DEA                            
00018DEA                            loc_18DC6:				; XREF: Obj7B_Index
00018DEA 2268 003C                  		movea.l	$3C(a0),a1
00018DEE 7000                       		moveq	#0,d0
00018DF0 1028 003A                  		move.b	$3A(a0),d0
00018DF4 9029 003A                  		sub.b	$3A(a1),d0
00018DF8 6700                       		beq.s	loc_18E2A
00018DFA 6400                       		bcc.s	loc_18DDA
00018DFC 4400                       		neg.b	d0
00018DFE                            
00018DFE                            loc_18DDA:
00018DFE 323C F7E8                  		move.w	#-$818,d1
00018E02 343C FEEC                  		move.w	#-$114,d2
00018E06 0C00 0001                  		cmpi.b	#1,d0
00018E0A 6700                       		beq.s	loc_18E00
00018E0C 323C F6A0                  		move.w	#-$960,d1
00018E10 343C FF0C                  		move.w	#-$F4,d2
00018E14 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00018E1A 6D00                       		blt.s	loc_18E00
00018E1C 323C F5E0                  		move.w	#-$A20,d1
00018E20 343C FF80                  		move.w	#-$80,d2
00018E24                            
00018E24                            loc_18E00:
00018E24 3141 0012                  		move.w	d1,$12(a0)
00018E28 3142 0010                  		move.w	d2,$10(a0)
00018E2C 3028 0008                  		move.w	8(a0),d0
00018E30 9068 0030                  		sub.w	$30(a0),d0
00018E34 6400                       		bcc.s	loc_18E16
00018E36 4468 0010                  		neg.w	$10(a0)
00018E3A                            
00018E3A                            loc_18E16:
00018E3A 117C 0001 001A             		move.b	#1,$1A(a0)
00018E40 317C 0020 0028             		move.w	#$20,$28(a0)
00018E46 5428 0024                  		addq.b	#2,$24(a0)
00018E4A 6000 0000                  		bra.w	loc_18EAA
00018E4E                            ; ===========================================================================
00018E4E                            
00018E4E                            loc_18E2A:				; XREF: loc_18DC6
00018E4E 45F9 0000 0000             		lea	(word_19018).l,a2
00018E54 7000                       		moveq	#0,d0
00018E56 1029 001A                  		move.b	$1A(a1),d0
00018E5A 343C 0028                  		move.w	#$28,d2
00018E5E 3228 0008                  		move.w	8(a0),d1
00018E62 9268 0030                  		sub.w	$30(a0),d1
00018E66 6400                       		bcc.s	loc_18E48
00018E68 4442                       		neg.w	d2
00018E6A 5440                       		addq.w	#2,d0
00018E6C                            
00018E6C                            loc_18E48:
00018E6C D040                       		add.w	d0,d0
00018E6E 3228 0034                  		move.w	$34(a0),d1
00018E72 D272 0000                  		add.w	(a2,d0.w),d1
00018E76 3141 000C                  		move.w	d1,$C(a0)
00018E7A D468 0030                  		add.w	$30(a0),d2
00018E7E 3142 0008                  		move.w	d2,8(a0)
00018E82 4268 000E                  		clr.w	$E(a0)
00018E86 4268 000A                  		clr.w	$A(a0)
00018E8A 5368 0028                  		subq.w	#1,$28(a0)
00018E8E 6600                       		bne.s	loc_18E7A
00018E90 317C 0020 0028             		move.w	#$20,$28(a0)
00018E96 117C 0008 0024             		move.b	#8,$24(a0)
00018E9C 4E75                       		rts	
00018E9E                            ; ===========================================================================
00018E9E                            
00018E9E                            loc_18E7A:
00018E9E 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00018EA4 6600                       		bne.s	loc_18E88
00018EA6 117C 0005 001F             		move.b	#5,$1F(a0)
00018EAC                            
00018EAC                            loc_18E88:
00018EAC 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00018EB2 6600                       		bne.s	loc_18E96
00018EB4 117C 0002 001F             		move.b	#2,$1F(a0)
00018EBA                            
00018EBA                            loc_18E96:
00018EBA 5328 001E                  		subq.b	#1,$1E(a0)
00018EBE 6E00                       		bgt.s	locret_18EA8
00018EC0 0868 0000 001A             		bchg	#0,$1A(a0)
00018EC6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00018ECC                            
00018ECC                            locret_18EA8:
00018ECC 4E75                       		rts	
00018ECE                            ; ===========================================================================
00018ECE                            
00018ECE                            loc_18EAA:				; XREF: Obj7B_Index
00018ECE 43F8 D040                  		lea	($FFFFD040).w,a1
00018ED2 707A                       		moveq	#$7A,d0
00018ED4 7240                       		moveq	#$40,d1
00018ED6 743E                       		moveq	#$3E,d2
00018ED8                            
00018ED8                            loc_18EB4:
00018ED8 B011                       		cmp.b	(a1),d0
00018EDA 6700                       		beq.s	loc_18EC0
00018EDC D2C1                       		adda.w	d1,a1
00018EDE 51CA FFF8                  		dbf	d2,loc_18EB4
00018EE2                            
00018EE2 6000                       		bra.s	loc_18F38
00018EE4                            ; ===========================================================================
00018EE4                            
00018EE4                            loc_18EC0:
00018EE4 3029 0008                  		move.w	8(a1),d0
00018EE8 3229 000C                  		move.w	$C(a1),d1
00018EEC 3428 0008                  		move.w	8(a0),d2
00018EF0 3628 000C                  		move.w	$C(a0),d3
00018EF4 45FA 0000                  		lea	byte_19022(pc),a2
00018EF8 47FA 0000                  		lea	byte_19026(pc),a3
00018EFC 181A                       		move.b	(a2)+,d4
00018EFE 4884                       		ext.w	d4
00018F00 D044                       		add.w	d4,d0
00018F02 181B                       		move.b	(a3)+,d4
00018F04 4884                       		ext.w	d4
00018F06 D444                       		add.w	d4,d2
00018F08 B440                       		cmp.w	d0,d2
00018F0A 6500                       		bcs.s	loc_18F38
00018F0C 181A                       		move.b	(a2)+,d4
00018F0E 4884                       		ext.w	d4
00018F10 D044                       		add.w	d4,d0
00018F12 181B                       		move.b	(a3)+,d4
00018F14 4884                       		ext.w	d4
00018F16 D444                       		add.w	d4,d2
00018F18 B042                       		cmp.w	d2,d0
00018F1A 6500                       		bcs.s	loc_18F38
00018F1C 181A                       		move.b	(a2)+,d4
00018F1E 4884                       		ext.w	d4
00018F20 D244                       		add.w	d4,d1
00018F22 181B                       		move.b	(a3)+,d4
00018F24 4884                       		ext.w	d4
00018F26 D644                       		add.w	d4,d3
00018F28 B641                       		cmp.w	d1,d3
00018F2A 6500                       		bcs.s	loc_18F38
00018F2C 181A                       		move.b	(a2)+,d4
00018F2E 4884                       		ext.w	d4
00018F30 D244                       		add.w	d4,d1
00018F32 181B                       		move.b	(a3)+,d4
00018F34 4884                       		ext.w	d4
00018F36 D644                       		add.w	d4,d3
00018F38 B243                       		cmp.w	d3,d1
00018F3A 6500                       		bcs.s	loc_18F38
00018F3C 5428 0024                  		addq.b	#2,$24(a0)
00018F40 4268 0028                  		clr.w	$28(a0)
00018F44 4229 0020                  		clr.b	$20(a1)
00018F48 5329 0021                  		subq.b	#1,$21(a1)
00018F4C 6600                       		bne.s	loc_18F38
00018F4E 08E9 0007 0022             		bset	#7,$22(a1)
00018F54 4268 0010                  		clr.w	$10(a0)
00018F58 4268 0012                  		clr.w	$12(a0)
00018F5C                            
00018F5C                            loc_18F38:
00018F5C 4A68 0012                  		tst.w	$12(a0)
00018F60 6A00                       		bpl.s	loc_18F5C
00018F62 4EB9 0000 D674             		jsr	ObjectFall
00018F68 3028 0034                  		move.w	$34(a0),d0
00018F6C 0440 002F                  		subi.w	#$2F,d0
00018F70 B068 000C                  		cmp.w	$C(a0),d0
00018F74 6E00                       		bgt.s	loc_18F58
00018F76 4EB9 0000 D674             		jsr	ObjectFall
00018F7C                            
00018F7C                            loc_18F58:
00018F7C 6000 FF20                  		bra.w	loc_18E7A
00018F80                            ; ===========================================================================
00018F80                            
00018F80                            loc_18F5C:
00018F80 4EB9 0000 D674             		jsr	ObjectFall
00018F86 2268 003C                  		movea.l	$3C(a0),a1
00018F8A 45F9 0000 0000             		lea	(word_19018).l,a2
00018F90 7000                       		moveq	#0,d0
00018F92 1029 001A                  		move.b	$1A(a1),d0
00018F96 3228 0008                  		move.w	8(a0),d1
00018F9A 9268 0030                  		sub.w	$30(a0),d1
00018F9E 6400                       		bcc.s	loc_18F7E
00018FA0 5440                       		addq.w	#2,d0
00018FA2                            
00018FA2                            loc_18F7E:
00018FA2 D040                       		add.w	d0,d0
00018FA4 3228 0034                  		move.w	$34(a0),d1
00018FA8 D272 0000                  		add.w	(a2,d0.w),d1
00018FAC B268 000C                  		cmp.w	$C(a0),d1
00018FB0 6ECA                       		bgt.s	loc_18F58
00018FB2 2268 003C                  		movea.l	$3C(a0),a1
00018FB6 7202                       		moveq	#2,d1
00018FB8 4A68 0010                  		tst.w	$10(a0)
00018FBC 6B00                       		bmi.s	loc_18F9C
00018FBE 7200                       		moveq	#0,d1
00018FC0                            
00018FC0                            loc_18F9C:
00018FC0 317C 0000 0028             		move.w	#0,$28(a0)
00018FC6                            
00018FC6                            loc_18FA2:
00018FC6 1341 003A                  		move.b	d1,$3A(a1)
00018FCA 1141 003A                  		move.b	d1,$3A(a0)
00018FCE B229 001A                  		cmp.b	$1A(a1),d1
00018FD2 6700                       		beq.s	loc_19008
00018FD4 08A9 0003 0022             		bclr	#3,$22(a1)
00018FDA 6700                       		beq.s	loc_19008
00018FDC 4229 0025                  		clr.b	$25(a1)
00018FE0 137C 0002 0024             		move.b	#2,$24(a1)
00018FE6 45F8 D000                  		lea	($FFFFD000).w,a2
00018FEA 3568 0012 0012             		move.w	$12(a0),$12(a2)
00018FF0 446A 0012                  		neg.w	$12(a2)
00018FF4 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00018FFA 6600                       		bne.s	loc_18FDC
00018FFC E0EA 0012                  		asr	$12(a2)
00019000                            
00019000                            loc_18FDC:
00019000 08EA 0001 0022             		bset	#1,$22(a2)
00019006 08AA 0003 0022             		bclr	#3,$22(a2)
0001900C 422A 003C                  		clr.b	$3C(a2)
00019010 2F08                       		move.l	a0,-(sp)
00019012 41D2                       		lea	(a2),a0
00019014 4EBA A40E                  		jsr	Obj01_ChkRoll
00019018 205F                       		movea.l	(sp)+,a0
0001901A 157C 0002 0024             		move.b	#2,$24(a2)
00019020 303C 00CC                  		move.w	#$CC,d0
00019024 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001902A                            
0001902A                            loc_19008:
0001902A 4268 0010                  		clr.w	$10(a0)
0001902E 4268 0012                  		clr.w	$12(a0)
00019032 5428 0024                  		addq.b	#2,$24(a0)
00019036 6000 FE66                  		bra.w	loc_18E7A
0001903A                            ; ===========================================================================
0001903A FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019044                            		even
00019044 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019048                            		even
00019048 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001904C                            		even
0001904C                            ; ===========================================================================
0001904C                            
0001904C                            Obj7B_Explode:				; XREF: Obj7B_Index
0001904C 10BC 003F                  		move.b	#$3F,(a0)
00019050 4228 0024                  		clr.b	$24(a0)
00019054 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001905A 6700                       		beq.s	Obj7B_MakeFrag
0001905C 4E75                       		rts	
0001905E                            ; ===========================================================================
0001905E                            
0001905E                            Obj7B_MakeFrag:
0001905E 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019064 7203                       		moveq	#3,d1
00019066 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001906A                            
0001906A                            Obj7B_Loop:
0001906A 4EB9 0000 DB4C             		jsr	SingleObjLoad
00019070 6600                       		bne.s	loc_1909A
00019072 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019076 137C 000A 0024             		move.b	#$A,$24(a1)
0001907C 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019084 137C 0003 0018             		move.b	#3,$18(a1)
0001908A 337C 0518 0002             		move.w	#$518,2(a1)
00019090 3368 0008 0008             		move.w	8(a0),8(a1)
00019096 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001909C 335A 0010                  		move.w	(a2)+,$10(a1)
000190A0 335A 0012                  		move.w	(a2)+,$12(a1)
000190A4 137C 0098 0020             		move.b	#$98,$20(a1)
000190AA 0029 0004 0001             		ori.b	#4,1(a1)
000190B0 08E9 0007 0001             		bset	#7,1(a1)
000190B6 137C 000C 0019             		move.b	#$C,$19(a1)
000190BC                            
000190BC                            loc_1909A:
000190BC 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
000190C0                            
000190C0 4E75                       		rts	
000190C2                            ; ===========================================================================
000190C2 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
000190C6 FF60 FDC0                  		dc.w $FF60, $FDC0
000190CA 0100 FCC0                  		dc.w $100, $FCC0
000190CE 00A0 FDC0                  		dc.w $A0, $FDC0
000190D2                            ; ===========================================================================
000190D2                            
000190D2                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
000190D2 4EB9 0000 D6A0             		jsr	SpeedToPos
000190D8 3168 0008 0030             		move.w	8(a0),$30(a0)
000190DE 3168 000C 0034             		move.w	$C(a0),$34(a0)
000190E4 0668 0018 0012             		addi.w	#$18,$12(a0)
000190EA 7004                       		moveq	#4,d0
000190EC C078 FE0E                  		and.w	($FFFFFE0E).w,d0
000190F0 E448                       		lsr.w	#2,d0
000190F2 1140 001A                  		move.b	d0,$1A(a0)
000190F6 4A28 0001                  		tst.b	1(a0)
000190FA 6A00 F7DC                  		bpl.w	Obj7A_Delete
000190FE 4E75                       		rts	
00019100                            ; ===========================================================================
00019100                            ; ---------------------------------------------------------------------------
00019100                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019100                            ; ---------------------------------------------------------------------------
00019100                            Map_obj7B:
00019100                            	include "_maps\obj7B.asm"
00019100                            ; ---------------------------------------------------------------------------
00019100                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019100                            ; ---------------------------------------------------------------------------
00019100 0000                       		dc.w byte_190E2-Map_obj7B
00019102 0000                       		dc.w byte_190E8-Map_obj7B
00019104 01                         byte_190E2:	dc.b 1
00019105 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001910A 01                         byte_190E8:	dc.b 1
0001910B FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019110                            		even
00019110                            		even
00019110                            
00019110                            ; ===========================================================================
00019110                            ; ---------------------------------------------------------------------------
00019110                            ; Object 75 - Eggman (SYZ)
00019110                            ; ---------------------------------------------------------------------------
00019110                            
00019110                            Obj75:					; XREF: Obj_Index
00019110 7000                       		moveq	#0,d0
00019112 1028 0024                  		move.b	$24(a0),d0
00019116 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001911A 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001911E                            ; ===========================================================================
0001911E 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019120 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019122 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019124 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019126 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019128                            
00019128 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001912B 0401 05                    		dc.b 4,	1, 5
0001912E 0607 05                    		dc.b 6,	7, 5
00019131 0800 05                    		dc.b 8,	0, 5
00019134                            ; ===========================================================================
00019134                            
00019134                            Obj75_Main:				; XREF: Obj75_Index
00019134 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001913A 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019140 3168 0008 0030             		move.w	8(a0),$30(a0)
00019146 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001914C 117C 000F 0020             		move.b	#$F,$20(a0)
00019152 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019158 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001915C 2248                       		movea.l	a0,a1
0001915E 7203                       		moveq	#3,d1
00019160 6000                       		bra.s	Obj75_LoadBoss
00019162                            ; ===========================================================================
00019162                            
00019162                            Obj75_Loop:
00019162 4EB9 0000 DB62             		jsr	SingleObjLoad2
00019168 6600                       		bne.s	Obj75_ShipMain
0001916A 12BC 0075                  		move.b	#$75,(a1)
0001916E 3368 0008 0008             		move.w	8(a0),8(a1)
00019174 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001917A                            
0001917A                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001917A 08A8 0000 0022             		bclr	#0,$22(a0)
00019180 4229 0025                  		clr.b	$25(a1)
00019184 135A 0024                  		move.b	(a2)+,$24(a1)
00019188 135A 001C                  		move.b	(a2)+,$1C(a1)
0001918C 135A 0018                  		move.b	(a2)+,$18(a1)
00019190 237C 0001 7D38 0004        		move.l	#Map_Eggman,4(a1)
00019198 337C 0400 0002             		move.w	#$400,2(a1)
0001919E 137C 0004 0001             		move.b	#4,1(a1)
000191A4 137C 0020 0019             		move.b	#$20,$19(a1)
000191AA 2348 0034                  		move.l	a0,$34(a1)
000191AE 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
000191B2                            
000191B2                            Obj75_ShipMain:				; XREF: Obj75_Index
000191B2 7000                       		moveq	#0,d0
000191B4 1028 0025                  		move.b	$25(a0),d0
000191B8 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
000191BC 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
000191C0 43F9 0001 7CE8             		lea	(Ani_Eggman).l,a1
000191C6 4EB9 0000 A7F2             		jsr	AnimateSprite
000191CC 7003                       		moveq	#3,d0
000191CE C028 0022                  		and.b	$22(a0),d0
000191D2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000191D8 8128 0001                  		or.b	d0,1(a0)
000191DC 4EF9 0000 D6C6             		jmp	DisplaySprite
000191E2                            ; ===========================================================================
000191E2 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
000191E6 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
000191EA 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
000191EE                            ; ===========================================================================
000191EE                            
000191EE                            loc_191CC:				; XREF: Obj75_ShipIndex
000191EE 317C FF00 0010             		move.w	#-$100,$10(a0)
000191F4 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
000191FA 6400                       		bcc.s	loc_191DE
000191FC 5428 0025                  		addq.b	#2,$25(a0)
00019200                            
00019200                            loc_191DE:
00019200 1028 003F                  		move.b	$3F(a0),d0
00019204 5428 003F                  		addq.b	#2,$3F(a0)
00019208 4EB9 0000 29DA             		jsr	(CalcSine).l
0001920E E440                       		asr.w	#2,d0
00019210 3140 0012                  		move.w	d0,$12(a0)
00019214                            
00019214                            loc_191F2:
00019214 6100 E6C2                  		bsr.w	BossMove
00019218 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001921E 3168 0030 0008             		move.w	$30(a0),8(a0)
00019224                            
00019224                            loc_19202:
00019224 3028 0008                  		move.w	8(a0),d0
00019228 0440 2C00                  		subi.w	#$2C00,d0
0001922C EA48                       		lsr.w	#5,d0
0001922E 1140 0034                  		move.b	d0,$34(a0)
00019232 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019238 6400                       		bcc.s	locret_19256
0001923A 4A28 0022                  		tst.b	$22(a0)
0001923E 6B00                       		bmi.s	loc_19258
00019240 4A28 0020                  		tst.b	$20(a0)
00019244 6600                       		bne.s	locret_19256
00019246 4A28 003E                  		tst.b	$3E(a0)
0001924A 6600                       		bne.s	loc_1923A
0001924C 117C 0020 003E             		move.b	#$20,$3E(a0)
00019252 303C 00AC                  		move.w	#$AC,d0
00019256 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001925C                            
0001925C                            loc_1923A:
0001925C 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019260 7000                       		moveq	#0,d0
00019262 4A51                       		tst.w	(a1)
00019264 6600                       		bne.s	loc_19248
00019266 303C 0EEE                  		move.w	#$EEE,d0
0001926A                            
0001926A                            loc_19248:
0001926A 3280                       		move.w	d0,(a1)
0001926C 5328 003E                  		subq.b	#1,$3E(a0)
00019270 6600                       		bne.s	locret_19256
00019272 117C 000F 0020             		move.b	#$F,$20(a0)
00019278                            
00019278                            locret_19256:
00019278 4E75                       		rts	
0001927A                            ; ===========================================================================
0001927A                            
0001927A                            loc_19258:				; XREF: loc_19202
0001927A 7064                       		moveq	#100,d0
0001927C 6100 0000                  		bsr.w	AddPoints
00019280 117C 0006 0025             		move.b	#6,$25(a0)
00019286 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001928C 4268 0010                  		clr.w	$10(a0)
00019290 4E75                       		rts	
00019292                            ; ===========================================================================
00019292                            
00019292                            loc_19270:				; XREF: Obj75_ShipIndex
00019292 3028 0030                  		move.w	$30(a0),d0
00019296 317C 0140 0010             		move.w	#$140,$10(a0)
0001929C 0828 0000 0022             		btst	#0,$22(a0)
000192A2 6600                       		bne.s	loc_1928E
000192A4 4468 0010                  		neg.w	$10(a0)
000192A8 0C40 2C08                  		cmpi.w	#$2C08,d0
000192AC 6E00                       		bgt.s	loc_1929E
000192AE 6000                       		bra.s	loc_19294
000192B0                            ; ===========================================================================
000192B0                            
000192B0                            loc_1928E:
000192B0 0C40 2D38                  		cmpi.w	#$2D38,d0
000192B4 6D00                       		blt.s	loc_1929E
000192B6                            
000192B6                            loc_19294:
000192B6 0868 0000 0022             		bchg	#0,$22(a0)
000192BC 4228 003D                  		clr.b	$3D(a0)
000192C0                            
000192C0                            loc_1929E:
000192C0 0440 2C10                  		subi.w	#$2C10,d0
000192C4 0240 001F                  		andi.w	#$1F,d0
000192C8 0440 001F                  		subi.w	#$1F,d0
000192CC 6A00                       		bpl.s	loc_192AE
000192CE 4440                       		neg.w	d0
000192D0                            
000192D0                            loc_192AE:
000192D0 5340                       		subq.w	#1,d0
000192D2 6E00                       		bgt.s	loc_192E8
000192D4 4A28 003D                  		tst.b	$3D(a0)
000192D8 6600                       		bne.s	loc_192E8
000192DA 3238 D008                  		move.w	($FFFFD008).w,d1
000192DE 0441 2C00                  		subi.w	#$2C00,d1
000192E2 EA41                       		asr.w	#5,d1
000192E4 B228 0034                  		cmp.b	$34(a0),d1
000192E8 6600                       		bne.s	loc_192E8
000192EA 7000                       		moveq	#0,d0
000192EC 1028 0034                  		move.b	$34(a0),d0
000192F0 EB40                       		asl.w	#5,d0
000192F2 0640 2C10                  		addi.w	#$2C10,d0
000192F6 3140 0030                  		move.w	d0,$30(a0)
000192FA 6100 0000                  		bsr.w	Obj75_FindBlocks
000192FE 5428 0025                  		addq.b	#2,$25(a0)
00019302 4268 0028                  		clr.w	$28(a0)
00019306 4268 0010                  		clr.w	$10(a0)
0001930A                            
0001930A                            loc_192E8:
0001930A 6000 FEF4                  		bra.w	loc_191DE
0001930E                            ; ===========================================================================
0001930E                            
0001930E                            loc_192EC:				; XREF: Obj75_ShipIndex
0001930E 7000                       		moveq	#0,d0
00019310 1028 0028                  		move.b	$28(a0),d0
00019314 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019318 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001931C                            ; ===========================================================================
0001931C 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001931E 0000                       		dc.w loc_19348-off_192FA
00019320 0000                       		dc.w loc_1938E-off_192FA
00019322 0000                       		dc.w loc_193D0-off_192FA
00019324                            ; ===========================================================================
00019324                            
00019324                            loc_19302:				; XREF: off_192FA
00019324 317C 0180 0012             		move.w	#$180,$12(a0)
0001932A 3028 0038                  		move.w	$38(a0),d0
0001932E 0C40 0556                  		cmpi.w	#$556,d0
00019332 6500                       		bcs.s	loc_19344
00019334 317C 0556 0038             		move.w	#$556,$38(a0)
0001933A 4268 003C                  		clr.w	$3C(a0)
0001933E 70FF                       		moveq	#-1,d0
00019340 3028 0036                  		move.w	$36(a0),d0
00019344 6700                       		beq.s	loc_1933C
00019346 2240                       		movea.l	d0,a1
00019348 137C 00FF 0029             		move.b	#-1,$29(a1)
0001934E 117C 00FF 0029             		move.b	#-1,$29(a0)
00019354 2348 0034                  		move.l	a0,$34(a1)
00019358 317C 0032 003C             		move.w	#$32,$3C(a0)
0001935E                            
0001935E                            loc_1933C:
0001935E 4268 0012                  		clr.w	$12(a0)
00019362 5428 0028                  		addq.b	#2,$28(a0)
00019366                            
00019366                            loc_19344:
00019366 6000 FEAC                  		bra.w	loc_191F2
0001936A                            ; ===========================================================================
0001936A                            
0001936A                            loc_19348:				; XREF: off_192FA
0001936A 5368 003C                  		subq.w	#1,$3C(a0)
0001936E 6A00                       		bpl.s	loc_19366
00019370 5428 0028                  		addq.b	#2,$28(a0)
00019374 317C F800 0012             		move.w	#-$800,$12(a0)
0001937A 4A68 0036                  		tst.w	$36(a0)
0001937E 6600                       		bne.s	loc_19362
00019380 E0E8 0012                  		asr	$12(a0)
00019384                            
00019384                            loc_19362:
00019384 7000                       		moveq	#0,d0
00019386 6000                       		bra.s	loc_1937C
00019388                            ; ===========================================================================
00019388                            
00019388                            loc_19366:
00019388 7000                       		moveq	#0,d0
0001938A 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019390 6E00                       		bgt.s	loc_1937C
00019392 7002                       		moveq	#2,d0
00019394 0828 0001 003D             		btst	#1,$3D(a0)
0001939A 6700                       		beq.s	loc_1937C
0001939C 4440                       		neg.w	d0
0001939E                            
0001939E                            loc_1937C:
0001939E D068 0038                  		add.w	$38(a0),d0
000193A2 3140 000C                  		move.w	d0,$C(a0)
000193A6 3168 0030 0008             		move.w	$30(a0),8(a0)
000193AC 6000 FE76                  		bra.w	loc_19202
000193B0                            ; ===========================================================================
000193B0                            
000193B0                            loc_1938E:				; XREF: off_192FA
000193B0 303C 04DA                  		move.w	#$4DA,d0
000193B4 4A68 0036                  		tst.w	$36(a0)
000193B8 6700                       		beq.s	loc_1939C
000193BA 0440 0018                  		subi.w	#$18,d0
000193BE                            
000193BE                            loc_1939C:
000193BE B068 0038                  		cmp.w	$38(a0),d0
000193C2 6D00                       		blt.s	loc_193BE
000193C4 317C 0008 003C             		move.w	#8,$3C(a0)
000193CA 4A68 0036                  		tst.w	$36(a0)
000193CE 6700                       		beq.s	loc_193B4
000193D0 317C 002D 003C             		move.w	#$2D,$3C(a0)
000193D6                            
000193D6                            loc_193B4:
000193D6 5428 0028                  		addq.b	#2,$28(a0)
000193DA 4268 0012                  		clr.w	$12(a0)
000193DE 6000                       		bra.s	loc_193CC
000193E0                            ; ===========================================================================
000193E0                            
000193E0                            loc_193BE:
000193E0 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
000193E6 6C00                       		bge.s	loc_193CC
000193E8 0668 000C 0012             		addi.w	#$C,$12(a0)
000193EE                            
000193EE                            loc_193CC:
000193EE 6000 FE24                  		bra.w	loc_191F2
000193F2                            ; ===========================================================================
000193F2                            
000193F2                            loc_193D0:				; XREF: off_192FA
000193F2 5368 003C                  		subq.w	#1,$3C(a0)
000193F6 6E00                       		bgt.s	loc_19406
000193F8 6B00                       		bmi.s	loc_193EE
000193FA 70FF                       		moveq	#-1,d0
000193FC 3028 0036                  		move.w	$36(a0),d0
00019400 6700                       		beq.s	loc_193E8
00019402 2240                       		movea.l	d0,a1
00019404 137C 000A 0029             		move.b	#$A,$29(a1)
0001940A                            
0001940A                            loc_193E8:
0001940A 4268 0036                  		clr.w	$36(a0)
0001940E 6000                       		bra.s	loc_19406
00019410                            ; ===========================================================================
00019410                            
00019410                            loc_193EE:
00019410 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019416 6600                       		bne.s	loc_19406
00019418 4228 0029                  		clr.b	$29(a0)
0001941C 5528 0025                  		subq.b	#2,$25(a0)
00019420 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019426 6000                       		bra.s	loc_19446
00019428                            ; ===========================================================================
00019428                            
00019428                            loc_19406:
00019428 7001                       		moveq	#1,d0
0001942A 4A68 0036                  		tst.w	$36(a0)
0001942E 6700                       		beq.s	loc_19410
00019430 7002                       		moveq	#2,d0
00019432                            
00019432                            loc_19410:
00019432 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019438 6700                       		beq.s	loc_19424
0001943A 6D00                       		blt.s	loc_1941C
0001943C 4440                       		neg.w	d0
0001943E                            
0001943E                            loc_1941C:
0001943E 4A68 0036                  		tst.w	$36(a0)
00019442 D168 0038                  		add.w	d0,$38(a0)
00019446                            
00019446                            loc_19424:
00019446 7000                       		moveq	#0,d0
00019448 4A68 0036                  		tst.w	$36(a0)
0001944C 6700                       		beq.s	loc_19438
0001944E 7002                       		moveq	#2,d0
00019450 0828 0000 003D             		btst	#0,$3D(a0)
00019456 6700                       		beq.s	loc_19438
00019458 4440                       		neg.w	d0
0001945A                            
0001945A                            loc_19438:
0001945A D068 0038                  		add.w	$38(a0),d0
0001945E 3140 000C                  		move.w	d0,$C(a0)
00019462 3168 0030 0008             		move.w	$30(a0),8(a0)
00019468                            
00019468                            loc_19446:
00019468 6000 FDBA                  		bra.w	loc_19202
0001946C                            
0001946C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001946C                            
0001946C                            
0001946C                            Obj75_FindBlocks:			; XREF: loc_192AE
0001946C 4268 0036                  		clr.w	$36(a0)
00019470 43F8 D040                  		lea	($FFFFD040).w,a1
00019474 703E                       		moveq	#$3E,d0
00019476 7276                       		moveq	#$76,d1
00019478 1428 0034                  		move.b	$34(a0),d2
0001947C                            
0001947C                            Obj75_FindLoop:
0001947C B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001947E 6600                       		bne.s	loc_1946A	; if not, branch
00019480 B429 0028                  		cmp.b	$28(a1),d2
00019484 6600                       		bne.s	loc_1946A
00019486 3149 0036                  		move.w	a1,$36(a0)
0001948A 6000                       		bra.s	locret_19472
0001948C                            ; ===========================================================================
0001948C                            
0001948C                            loc_1946A:
0001948C 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019490 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019494                            
00019494                            locret_19472:
00019494 4E75                       		rts	
00019496                            ; End of function Obj75_FindBlocks
00019496                            
00019496                            ; ===========================================================================
00019496                            
00019496                            loc_19474:				; XREF: Obj75_ShipIndex
00019496 5368 003C                  		subq.w	#1,$3C(a0)
0001949A 6B00                       		bmi.s	loc_1947E
0001949C 6000 E3F8                  		bra.w	BossDefeated
000194A0                            ; ===========================================================================
000194A0                            
000194A0                            loc_1947E:
000194A0 5428 0025                  		addq.b	#2,$25(a0)
000194A4 4268 0012                  		clr.w	$12(a0)
000194A8 08E8 0000 0022             		bset	#0,$22(a0)
000194AE 08A8 0007 0022             		bclr	#7,$22(a0)
000194B4 4268 0010                  		clr.w	$10(a0)
000194B8 317C FFFF 003C             		move.w	#-1,$3C(a0)
000194BE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000194C2 6600                       		bne.s	loc_194A8
000194C4 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000194CA                            
000194CA                            loc_194A8:
000194CA 6000 FD58                  		bra.w	loc_19202
000194CE                            ; ===========================================================================
000194CE                            
000194CE                            loc_194AC:				; XREF: Obj75_ShipIndex
000194CE 5268 003C                  		addq.w	#1,$3C(a0)
000194D2 6700                       		beq.s	loc_194BC
000194D4 6A00                       		bpl.s	loc_194C2
000194D6 0668 0018 0012             		addi.w	#$18,$12(a0)
000194DC 6000                       		bra.s	loc_194EE
000194DE                            ; ===========================================================================
000194DE                            
000194DE                            loc_194BC:
000194DE 4268 0012                  		clr.w	$12(a0)
000194E2 6000                       		bra.s	loc_194EE
000194E4                            ; ===========================================================================
000194E4                            
000194E4                            loc_194C2:
000194E4 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
000194EA 6500                       		bcs.s	loc_194DA
000194EC 6700                       		beq.s	loc_194E0
000194EE 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
000194F4 6500                       		bcs.s	loc_194EE
000194F6 5428 0025                  		addq.b	#2,$25(a0)
000194FA 6000                       		bra.s	loc_194EE
000194FC                            ; ===========================================================================
000194FC                            
000194FC                            loc_194DA:
000194FC 5168 0012                  		subq.w	#8,$12(a0)
00019500 6000                       		bra.s	loc_194EE
00019502                            ; ===========================================================================
00019502                            
00019502                            loc_194E0:
00019502 4268 0012                  		clr.w	$12(a0)
00019506 303C 0085                  		move.w	#$85,d0
0001950A 4EB9 0000 1396             		jsr	(PlaySound).l	; play SYZ music
00019510                            
00019510                            loc_194EE:
00019510 6000 FD02                  		bra.w	loc_191F2
00019514                            ; ===========================================================================
00019514                            
00019514                            loc_194F2:				; XREF: Obj75_ShipIndex
00019514 317C 0400 0010             		move.w	#$400,$10(a0)
0001951A 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019520 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019526 6400                       		bcc.s	loc_1950C
00019528 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001952C 6000                       		bra.s	loc_19512
0001952E                            ; ===========================================================================
0001952E                            
0001952E                            loc_1950C:
0001952E 4A28 0001                  		tst.b	1(a0)
00019532 6A00                       		bpl.s	Obj75_ShipDelete
00019534                            
00019534                            loc_19512:
00019534 6100 E3A2                  		bsr.w	BossMove
00019538 6000 FCC6                  		bra.w	loc_191DE
0001953C                            ; ===========================================================================
0001953C                            
0001953C                            Obj75_ShipDelete:
0001953C 4EF9 0000 D702             		jmp	DeleteObject
00019542                            ; ===========================================================================
00019542                            
00019542                            Obj75_FaceMain:				; XREF: Obj75_Index
00019542 7201                       		moveq	#1,d1
00019544 2268 0034                  		movea.l	$34(a0),a1
00019548 7000                       		moveq	#0,d0
0001954A 1029 0025                  		move.b	$25(a1),d0
0001954E 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019552 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019556 1141 001C                  		move.b	d1,$1C(a0)
0001955A 1010                       		move.b	(a0),d0
0001955C B011                       		cmp.b	(a1),d0
0001955E 6600                       		bne.s	Obj75_FaceDelete
00019560 6000                       		bra.s	loc_195BE
00019562                            ; ===========================================================================
00019562                            
00019562                            Obj75_FaceDelete:
00019562 4EF9 0000 D702             		jmp	DeleteObject
00019568                            ; ===========================================================================
00019568 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001956C 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019570 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019574                            ; ===========================================================================
00019574                            
00019574                            loc_19552:				; XREF: off_19546
00019574 720A                       		moveq	#$A,d1
00019576 4E75                       		rts	
00019578                            ; ===========================================================================
00019578                            
00019578                            loc_19556:				; XREF: off_19546
00019578 7206                       		moveq	#6,d1
0001957A 4E75                       		rts	
0001957C                            ; ===========================================================================
0001957C                            
0001957C                            loc_1955A:				; XREF: off_19546
0001957C 7000                       		moveq	#0,d0
0001957E 1029 0028                  		move.b	$28(a1),d0
00019582 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019586 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001958A                            ; ===========================================================================
0001958A 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001958E 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019592                            ; ===========================================================================
00019592                            
00019592                            loc_19570:				; XREF: off_19568
00019592 6000                       		bra.s	loc_19574
00019594                            ; ===========================================================================
00019594                            
00019594                            loc_19572:				; XREF: off_19568
00019594 7206                       		moveq	#6,d1
00019596                            
00019596                            loc_19574:				; XREF: off_19546
00019596 4A29 0020                  		tst.b	$20(a1)
0001959A 6600                       		bne.s	loc_1957E
0001959C 7205                       		moveq	#5,d1
0001959E 4E75                       		rts	
000195A0                            ; ===========================================================================
000195A0                            
000195A0                            loc_1957E:
000195A0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000195A6 6500                       		bcs.s	locret_19588
000195A8 7204                       		moveq	#4,d1
000195AA                            
000195AA                            locret_19588:
000195AA 4E75                       		rts	
000195AC                            ; ===========================================================================
000195AC                            
000195AC                            Obj75_FlameMain:			; XREF: Obj75_Index
000195AC 117C 0007 001C             		move.b	#7,$1C(a0)
000195B2 2268 0034                  		movea.l	$34(a0),a1
000195B6 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000195BC 6600                       		bne.s	loc_195AA
000195BE 117C 000B 001C             		move.b	#$B,$1C(a0)
000195C4 4A28 0001                  		tst.b	1(a0)
000195C8 6A00                       		bpl.s	Obj75_FlameDelete
000195CA 6000                       		bra.s	loc_195B6
000195CC                            ; ===========================================================================
000195CC                            
000195CC                            loc_195AA:
000195CC 4A69 0010                  		tst.w	$10(a1)
000195D0 6700                       		beq.s	loc_195B6
000195D2 117C 0008 001C             		move.b	#8,$1C(a0)
000195D8                            
000195D8                            loc_195B6:
000195D8 6000                       		bra.s	loc_195BE
000195DA                            ; ===========================================================================
000195DA                            
000195DA                            Obj75_FlameDelete:
000195DA 4EF9 0000 D702             		jmp	DeleteObject
000195E0                            ; ===========================================================================
000195E0                            
000195E0                            loc_195BE:
000195E0 43F9 0001 7CE8             		lea	(Ani_Eggman).l,a1
000195E6 4EB9 0000 A7F2             		jsr	AnimateSprite
000195EC 2268 0034                  		movea.l	$34(a0),a1
000195F0 3169 0008 0008             		move.w	8(a1),8(a0)
000195F6 3169 000C 000C             		move.w	$C(a1),$C(a0)
000195FC                            
000195FC                            loc_195DA:
000195FC 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019602 7003                       		moveq	#3,d0
00019604 C028 0022                  		and.b	$22(a0),d0
00019608 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001960E 8128 0001                  		or.b	d0,1(a0)
00019612 4EF9 0000 D6C6             		jmp	DisplaySprite
00019618                            ; ===========================================================================
00019618                            
00019618                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019618 217C 0001 7E00 0004        		move.l	#Map_BossItems,4(a0)
00019620 317C 246C 0002             		move.w	#$246C,2(a0)
00019626 117C 0005 001A             		move.b	#5,$1A(a0)
0001962C 2268 0034                  		movea.l	$34(a0),a1
00019630 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019636 6600                       		bne.s	loc_1961C
00019638 4A28 0001                  		tst.b	1(a0)
0001963C 6A00                       		bpl.s	Obj75_SpikeDelete
0001963E                            
0001963E                            loc_1961C:
0001963E 3169 0008 0008             		move.w	8(a1),8(a0)
00019644 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001964A 3028 003C                  		move.w	$3C(a0),d0
0001964E 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019654 6600                       		bne.s	loc_19652
00019656 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001965C 6700                       		beq.s	loc_1964C
0001965E 4A29 0028                  		tst.b	$28(a1)
00019662 6600                       		bne.s	loc_19658
00019664 0C40 0094                  		cmpi.w	#$94,d0
00019668 6C00                       		bge.s	loc_19658
0001966A 5E40                       		addq.w	#7,d0
0001966C 6000                       		bra.s	loc_19658
0001966E                            ; ===========================================================================
0001966E                            
0001966E                            loc_1964C:
0001966E 4A69 003C                  		tst.w	$3C(a1)
00019672 6A00                       		bpl.s	loc_19658
00019674                            
00019674                            loc_19652:
00019674 4A40                       		tst.w	d0
00019676 6F00                       		ble.s	loc_19658
00019678 5B40                       		subq.w	#5,d0
0001967A                            
0001967A                            loc_19658:
0001967A 3140 003C                  		move.w	d0,$3C(a0)
0001967E E440                       		asr.w	#2,d0
00019680 D168 000C                  		add.w	d0,$C(a0)
00019684 117C 0008 0019             		move.b	#8,$19(a0)
0001968A 117C 000C 0016             		move.b	#$C,$16(a0)
00019690 4228 0020                  		clr.b	$20(a0)
00019694 2268 0034                  		movea.l	$34(a0),a1
00019698 4A29 0020                  		tst.b	$20(a1)
0001969C 6700                       		beq.s	loc_19688
0001969E 4A29 0029                  		tst.b	$29(a1)
000196A2 6600                       		bne.s	loc_19688
000196A4 117C 0084 0020             		move.b	#$84,$20(a0)
000196AA                            
000196AA                            loc_19688:
000196AA 6000 FF50                  		bra.w	loc_195DA
000196AE                            ; ===========================================================================
000196AE                            
000196AE                            Obj75_SpikeDelete:
000196AE 4EF9 0000 D702             		jmp	DeleteObject
000196B4                            ; ===========================================================================
000196B4                            ; ---------------------------------------------------------------------------
000196B4                            ; Object 76 - blocks that Eggman picks up (SYZ)
000196B4                            ; ---------------------------------------------------------------------------
000196B4                            
000196B4                            Obj76:					; XREF: Obj_Index
000196B4 7000                       		moveq	#0,d0
000196B6 1028 0024                  		move.b	$24(a0),d0
000196BA 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
000196BE 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
000196C2                            ; ===========================================================================
000196C2 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
000196C4 0000                       		dc.w Obj76_Action-Obj76_Index
000196C6 0000                       		dc.w loc_19762-Obj76_Index
000196C8                            ; ===========================================================================
000196C8                            
000196C8                            Obj76_Main:				; XREF: Obj76_Index
000196C8 7800                       		moveq	#0,d4
000196CA 3A3C 2C10                  		move.w	#$2C10,d5
000196CE 7C09                       		moveq	#9,d6
000196D0 43D0                       		lea	(a0),a1
000196D2 6000                       		bra.s	Obj76_MakeBlock
000196D4                            ; ===========================================================================
000196D4                            
000196D4                            Obj76_Loop:
000196D4 4EB9 0000 DB4C             		jsr	SingleObjLoad
000196DA 6600                       		bne.s	Obj76_ExitLoop
000196DC                            
000196DC                            Obj76_MakeBlock:			; XREF: Obj76_Main
000196DC 12BC 0076                  		move.b	#$76,(a1)
000196E0 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
000196E8 337C 4000 0002             		move.w	#$4000,2(a1)
000196EE 137C 0004 0001             		move.b	#4,1(a1)
000196F4 137C 0010 0019             		move.b	#$10,$19(a1)
000196FA 137C 0010 0016             		move.b	#$10,$16(a1)
00019700 137C 0003 0018             		move.b	#3,$18(a1)
00019706 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001970A 337C 0582 000C             		move.w	#$582,$C(a1)
00019710 3344 0028                  		move.w	d4,$28(a1)
00019714 0644 0101                  		addi.w	#$101,d4
00019718 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001971C 5429 0024                  		addq.b	#2,$24(a1)
00019720 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019724                            
00019724                            Obj76_ExitLoop:
00019724 4E75                       		rts	
00019726                            ; ===========================================================================
00019726                            
00019726                            Obj76_Action:				; XREF: Obj76_Index
00019726 1028 0029                  		move.b	$29(a0),d0
0001972A B028 0028                  		cmp.b	$28(a0),d0
0001972E 6700                       		beq.s	Obj76_Solid
00019730 4A00                       		tst.b	d0
00019732 6B00                       		bmi.s	loc_19718
00019734                            
00019734                            loc_19712:
00019734 6100 0000                  		bsr.w	Obj76_Break
00019738 6000                       		bra.s	Obj76_Display
0001973A                            ; ===========================================================================
0001973A                            
0001973A                            loc_19718:
0001973A 2268 0034                  		movea.l	$34(a0),a1
0001973E 4A29 0021                  		tst.b	$21(a1)
00019742 67F0                       		beq.s	loc_19712
00019744 3169 0008 0008             		move.w	8(a1),8(a0)
0001974A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019750 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019756 B2C8                       		cmpa.w	a0,a1
00019758 6500                       		bcs.s	Obj76_Display
0001975A 3029 0012                  		move.w	$12(a1),d0
0001975E 48C0                       		ext.l	d0
00019760 E080                       		asr.l	#8,d0
00019762 D168 000C                  		add.w	d0,$C(a0)
00019766 6000                       		bra.s	Obj76_Display
00019768                            ; ===========================================================================
00019768                            
00019768                            Obj76_Solid:				; XREF: Obj76_Action
00019768 323C 001B                  		move.w	#$1B,d1
0001976C 343C 0010                  		move.w	#$10,d2
00019770 363C 0011                  		move.w	#$11,d3
00019774 3828 0008                  		move.w	8(a0),d4
00019778 4EB9 0000 FA86             		jsr	SolidObject
0001977E                            
0001977E                            Obj76_Display:				; XREF: Obj76_Action
0001977E 4EF9 0000 D6C6             		jmp	DisplaySprite
00019784                            ; ===========================================================================
00019784                            
00019784                            loc_19762:				; XREF: Obj76_Index
00019784 4A28 0001                  		tst.b	1(a0)
00019788 6A00                       		bpl.s	Obj76_Delete
0001978A 4EB9 0000 D674             		jsr	ObjectFall
00019790 4EF9 0000 D6C6             		jmp	DisplaySprite
00019796                            ; ===========================================================================
00019796                            
00019796                            Obj76_Delete:
00019796 4EF9 0000 D702             		jmp	DeleteObject
0001979C                            
0001979C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001979C                            
0001979C                            
0001979C                            Obj76_Break:				; XREF: Obj76_Action
0001979C 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
000197A0 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
000197A4 7801                       		moveq	#1,d4
000197A6 7203                       		moveq	#3,d1
000197A8 7438                       		moveq	#$38,d2
000197AA 5428 0024                  		addq.b	#2,$24(a0)
000197AE 117C 0008 0019             		move.b	#8,$19(a0)
000197B4 117C 0008 0016             		move.b	#8,$16(a0)
000197BA 43D0                       		lea	(a0),a1
000197BC 6000                       		bra.s	Obj76_MakeFrag
000197BE                            ; ===========================================================================
000197BE                            
000197BE                            Obj76_LoopFrag:
000197BE 4EB9 0000 DB62             		jsr	SingleObjLoad2
000197C4 6600                       		bne.s	loc_197D4
000197C6                            
000197C6                            Obj76_MakeFrag:
000197C6 45D0                       		lea	(a0),a2
000197C8 47D1                       		lea	(a1),a3
000197CA 7603                       		moveq	#3,d3
000197CC                            
000197CC                            loc_197AA:
000197CC 26DA                       		move.l	(a2)+,(a3)+
000197CE 26DA                       		move.l	(a2)+,(a3)+
000197D0 26DA                       		move.l	(a2)+,(a3)+
000197D2 26DA                       		move.l	(a2)+,(a3)+
000197D4 51CB FFF6                  		dbf	d3,loc_197AA
000197D8                            
000197D8 335C 0010                  		move.w	(a4)+,$10(a1)
000197DC 335C 0012                  		move.w	(a4)+,$12(a1)
000197E0 361D                       		move.w	(a5)+,d3
000197E2 D769 0008                  		add.w	d3,8(a1)
000197E6 361D                       		move.w	(a5)+,d3
000197E8 D769 000C                  		add.w	d3,$C(a1)
000197EC 1344 001A                  		move.b	d4,$1A(a1)
000197F0 5244                       		addq.w	#1,d4
000197F2 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
000197F6                            
000197F6                            loc_197D4:
000197F6 303C 00CB                  		move.w	#$CB,d0
000197FA 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play smashing sound
00019800                            ; End of function Obj76_Break
00019800                            
00019800                            ; ===========================================================================
00019800 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00019804 0180 FE00                  		dc.w $180, $FE00
00019808 FF00 FF00                  		dc.w $FF00, $FF00
0001980C 0100 FF00                  		dc.w $100, $FF00
00019810 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00019814 0010 0000                  		dc.w $10, 0
00019818 0000 0010                  		dc.w 0,	$10
0001981C 0010 0010                  		dc.w $10, $10
00019820                            ; ---------------------------------------------------------------------------
00019820                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019820                            ; ---------------------------------------------------------------------------
00019820                            Map_obj76:
00019820                            	include "_maps\obj76.asm"
00019820                            ; ---------------------------------------------------------------------------
00019820                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019820                            ; ---------------------------------------------------------------------------
00019820 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00019824 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
00019828 0000                       		dc.w byte_19826-Map_obj76
0001982A 02                         byte_19808:	dc.b 2
0001982B F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019830 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019835 00                         		dc.b 0
00019836 01                         byte_19814:	dc.b 1
00019837 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001983C 01                         byte_1981A:	dc.b 1
0001983D F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019842 01                         byte_19820:	dc.b 1
00019843 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00019848 01                         byte_19826:	dc.b 1
00019849 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001984E                            		even
0001984E                            		even
0001984E                            
0001984E                            ; ===========================================================================
0001984E                            
0001984E                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001984E 4EF9 0000 D702             		jmp	DeleteObject
00019854                            ; ===========================================================================
00019854                            ; ---------------------------------------------------------------------------
00019854                            ; Object 82 - Eggman (SBZ2)
00019854                            ; ---------------------------------------------------------------------------
00019854                            
00019854                            Obj82:					; XREF: Obj_Index
00019854 7000                       		moveq	#0,d0
00019856 1028 0024                  		move.b	$24(a0),d0
0001985A 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001985E 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00019862                            ; ===========================================================================
00019862 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00019864 0000                       		dc.w Obj82_Eggman-Obj82_Index
00019866 0000                       		dc.w Obj82_Switch-Obj82_Index
00019868                            
00019868 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001986B 0400 03                    		dc.b 4,	0, 3
0001986E                            ; ===========================================================================
0001986E                            
0001986E                            Obj82_Main:				; XREF: Obj82_Index
0001986E 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00019872 317C 2160 0008             		move.w	#$2160,8(a0)
00019878 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001987E 117C 000F 0020             		move.b	#$F,$20(a0)
00019884 117C 0010 0021             		move.b	#$10,$21(a0)
0001988A 08A8 0000 0022             		bclr	#0,$22(a0)
00019890 4228 0025                  		clr.b	$25(a0)
00019894 115A 0024                  		move.b	(a2)+,$24(a0)
00019898 115A 001C                  		move.b	(a2)+,$1C(a0)
0001989C 115A 0018                  		move.b	(a2)+,$18(a0)
000198A0 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
000198A8 317C 0400 0002             		move.w	#$400,2(a0)
000198AE 117C 0004 0001             		move.b	#4,1(a0)
000198B4 08E8 0007 0001             		bset	#7,1(a0)
000198BA 117C 0020 0019             		move.b	#$20,$19(a0)
000198C0 4EB9 0000 DB62             		jsr	SingleObjLoad2
000198C6 6600                       		bne.s	Obj82_Eggman
000198C8 2348 0034                  		move.l	a0,$34(a1)
000198CC 12BC 0082                  		move.b	#$82,(a1)	; load switch object
000198D0 337C 2130 0008             		move.w	#$2130,8(a1)
000198D6 337C 05BC 000C             		move.w	#$5BC,$C(a1)
000198DC 4228 0025                  		clr.b	$25(a0)
000198E0 135A 0024                  		move.b	(a2)+,$24(a1)
000198E4 135A 001C                  		move.b	(a2)+,$1C(a1)
000198E8 135A 0018                  		move.b	(a2)+,$18(a1)
000198EC 237C 0000 BF74 0004        		move.l	#Map_obj32,4(a1)
000198F4 337C 04A4 0002             		move.w	#$4A4,2(a1)
000198FA 137C 0004 0001             		move.b	#4,1(a1)
00019900 08E9 0007 0001             		bset	#7,1(a1)
00019906 137C 0010 0019             		move.b	#$10,$19(a1)
0001990C 137C 0000 001A             		move.b	#0,$1A(a1)
00019912                            
00019912                            Obj82_Eggman:				; XREF: Obj82_Index
00019912 7000                       		moveq	#0,d0
00019914 1028 0025                  		move.b	$25(a0),d0
00019918 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001991C 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
00019920 43FA 0000                  		lea	Ani_obj82(pc),a1
00019924 4EB9 0000 A7F2             		jsr	AnimateSprite
0001992A 4EF9 0000 D6C6             		jmp	DisplaySprite
00019930                            ; ===========================================================================
00019930 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
00019932 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
00019934 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
00019936 0000                       		dc.w loc_19934-Obj82_EggIndex
00019938                            ; ===========================================================================
00019938                            
00019938                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
00019938 3028 0008                  		move.w	8(a0),d0
0001993C 9078 D008                  		sub.w	($FFFFD008).w,d0
00019940 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
00019944 6400                       		bcc.s	loc_19934	; if not, branch
00019946 5428 0025                  		addq.b	#2,$25(a0)
0001994A 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
00019950 117C 0001 001C             		move.b	#1,$1C(a0)
00019956                            
00019956                            loc_19934:				; XREF: Obj82_EggIndex
00019956 4EF9 0000 D6A0             		jmp	SpeedToPos
0001995C                            ; ===========================================================================
0001995C                            
0001995C                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001995C 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
00019960 6600                       		bne.s	loc_19954	; if time remains, branch
00019962 5428 0025                  		addq.b	#2,$25(a0)
00019966 117C 0002 001C             		move.b	#2,$1C(a0)
0001996C 5868 000C                  		addq.w	#4,$C(a0)
00019970 317C 000F 003C             		move.w	#15,$3C(a0)
00019976                            
00019976                            loc_19954:
00019976 60DE                       		bra.s	loc_19934
00019978                            ; ===========================================================================
00019978                            
00019978                            Obj82_Leap:				; XREF: Obj82_EggIndex
00019978 5368 003C                  		subq.w	#1,$3C(a0)
0001997C 6E00                       		bgt.s	loc_199D0
0001997E 6600                       		bne.s	loc_1996A
00019980 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
00019986 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001998C                            
0001998C                            loc_1996A:
0001998C 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
00019992 6E00                       		bgt.s	loc_19976
00019994 4268 0010                  		clr.w	$10(a0)
00019998                            
00019998                            loc_19976:
00019998 0668 0024 0012             		addi.w	#$24,$12(a0)
0001999E 4A68 0012                  		tst.w	$12(a0)
000199A2 6B00                       		bmi.s	Obj82_FindBlocks
000199A4 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
000199AA 6500                       		bcs.s	Obj82_FindBlocks
000199AC 317C 5357 0028             		move.w	#$5357,$28(a0)
000199B2 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
000199B8 6500                       		bcs.s	Obj82_FindBlocks
000199BA 317C 059B 000C             		move.w	#$59B,$C(a0)
000199C0 4268 0012                  		clr.w	$12(a0)
000199C4                            
000199C4                            Obj82_FindBlocks:
000199C4 3028 0010                  		move.w	$10(a0),d0
000199C8 8068 0012                  		or.w	$12(a0),d0
000199CC 6600                       		bne.s	loc_199D0
000199CE 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
000199D2 703E                       		moveq	#$3E,d0
000199D4 7240                       		moveq	#$40,d1
000199D6                            
000199D6                            Obj82_FindLoop:	
000199D6 D2C1                       		adda.w	d1,a1		; jump to next object RAM
000199D8 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
000199DC 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
000199E0                            
000199E0 6600                       		bne.s	loc_199D0
000199E2 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
000199E8 5428 0025                  		addq.b	#2,$25(a0)
000199EC 117C 0001 001C             		move.b	#1,$1C(a0)
000199F2                            
000199F2                            loc_199D0:
000199F2 6000 FF62                  		bra.w	loc_19934
000199F6                            ; ===========================================================================
000199F6                            
000199F6                            Obj82_Switch:				; XREF: Obj82_Index
000199F6 7000                       		moveq	#0,d0
000199F8 1028 0025                  		move.b	$25(a0),d0
000199FC 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
00019A00 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
00019A04                            ; ===========================================================================
00019A04 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
00019A06 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
00019A08                            ; ===========================================================================
00019A08                            
00019A08                            loc_199E6:				; XREF: Obj82_SwIndex
00019A08 2268 0034                  		movea.l	$34(a0),a1
00019A0C 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
00019A12 6600                       		bne.s	Obj82_SwDisplay
00019A14 117C 0001 001A             		move.b	#1,$1A(a0)
00019A1A 5428 0025                  		addq.b	#2,$25(a0)
00019A1E                            
00019A1E                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
00019A1E 4EF9 0000 D6C6             		jmp	DisplaySprite
00019A24                            ; ===========================================================================
00019A24                            Ani_obj82:
00019A24                            	include "_anim\obj82.asm"
00019A24                            ; ---------------------------------------------------------------------------
00019A24                            ; Animation script - Eggman (SBZ2)
00019A24                            ; ---------------------------------------------------------------------------
00019A24 0000                       		dc.w byte_19A10-Ani_obj82
00019A26 0000                       		dc.w byte_19A14-Ani_obj82
00019A28 0000                       		dc.w byte_19A18-Ani_obj82
00019A2A 0000                       		dc.w byte_19A20-Ani_obj82
00019A2C 0000                       		dc.w byte_19A24-Ani_obj82
00019A2E 0000                       		dc.w byte_19A2A-Ani_obj82
00019A30 0000                       		dc.w byte_19A30-Ani_obj82
00019A32 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
00019A36 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
00019A3A 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
00019A42 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
00019A46 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
00019A4C 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
00019A52 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
00019A56                            		even
00019A56                            		even
00019A56                            
00019A56                            ; ---------------------------------------------------------------------------
00019A56                            ; Sprite mappings - Eggman (SBZ2)
00019A56                            ; ---------------------------------------------------------------------------
00019A56                            Map_obj82:
00019A56                            	include "_maps\obj82.asm"
00019A56                            ; ---------------------------------------------------------------------------
00019A56                            ; Sprite mappings - Eggman (SBZ2)
00019A56                            ; ---------------------------------------------------------------------------
00019A56 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
00019A5A 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
00019A5E 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
00019A62 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
00019A66 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
00019A6A 0000                       		dc.w byte_19B4F-Map_obj82
00019A6C 03                         byte_19A4A:	dc.b 3
00019A6D FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00019A72 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019A77 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019A7C 04                         byte_19A5A:	dc.b 4
00019A7D E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
00019A82 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019A87 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019A8C FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00019A91 00                         		dc.b 0
00019A92 04                         byte_19A70:	dc.b 4
00019A93 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
00019A98 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
00019A9D 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
00019AA2 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
00019AA7 00                         		dc.b 0
00019AA8 04                         byte_19A86:	dc.b 4
00019AA9 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
00019AAE F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
00019AB3 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
00019AB8 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
00019ABD 00                         		dc.b 0
00019ABE 04                         byte_19A9C:	dc.b 4
00019ABF F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019AC4 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
00019AC9 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
00019ACE E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019AD3 00                         		dc.b 0
00019AD4 04                         byte_19AB2:	dc.b 4
00019AD5 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019ADA E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019ADF E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019AE4 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019AE9 00                         		dc.b 0
00019AEA 07                         byte_19AC8:	dc.b 7
00019AEB E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019AF0 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019AF5 0409 0834 00               		dc.b 4,	9, 8, $34, 0
00019AFA 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
00019AFF F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019B04 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
00019B09 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
00019B0E 05                         byte_19AEC:	dc.b 5
00019B0F F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019B14 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
00019B19 0409 0834 00               		dc.b 4,	9, 8, $34, 0
00019B1E 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
00019B23 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019B28 06                         byte_19B06:	dc.b 6
00019B29 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
00019B2E EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
00019B33 0905 0844 00               		dc.b 9,	5, 8, $44, 0
00019B38 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
00019B3D 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
00019B42 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
00019B47 00                         		dc.b 0
00019B48 08                         byte_19B26:	dc.b 8
00019B49 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019B4E E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019B53 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019B58 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019B5D E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
00019B62 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
00019B67 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
00019B6C 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
00019B71 03                         byte_19B4F:	dc.b 3
00019B72 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
00019B77 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
00019B7C EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
00019B82 00                         		even
00019B82 00                         		even
00019B82                            
00019B82                            ; ===========================================================================
00019B82                            ; ---------------------------------------------------------------------------
00019B82                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
00019B82                            ; ---------------------------------------------------------------------------
00019B82                            
00019B82                            Obj83:					; XREF: Obj_Index
00019B82 7000                       		moveq	#0,d0
00019B84 1028 0024                  		move.b	$24(a0),d0
00019B88 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
00019B8C 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
00019B90                            ; ===========================================================================
00019B90 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
00019B92 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
00019B94 0000                       		dc.w loc_19C36-Obj83_Index
00019B96 0000                       		dc.w loc_19C62-Obj83_Index
00019B98 0000                       		dc.w loc_19C72-Obj83_Index
00019B9A 0000                       		dc.w loc_19C80-Obj83_Index
00019B9C                            ; ===========================================================================
00019B9C                            
00019B9C                            Obj83_Main:				; XREF: Obj83_Index
00019B9C 317C 2080 0008             		move.w	#$2080,8(a0)
00019BA2 317C 05D0 000C             		move.w	#$5D0,$C(a0)
00019BA8 117C 0080 0019             		move.b	#$80,$19(a0)
00019BAE 117C 0010 0016             		move.b	#$10,$16(a0)
00019BB4 117C 0004 0001             		move.b	#4,1(a0)
00019BBA 08E8 0007 0001             		bset	#7,1(a0)
00019BC0 7800                       		moveq	#0,d4
00019BC2 3A3C 2010                  		move.w	#$2010,d5
00019BC6 7C07                       		moveq	#7,d6
00019BC8 45E8 0030                  		lea	$30(a0),a2
00019BCC                            
00019BCC                            Obj83_MakeBlock:
00019BCC 4EB9 0000 DB4C             		jsr	SingleObjLoad
00019BD2 6600                       		bne.s	Obj83_ExitMake
00019BD4 34C9                       		move.w	a1,(a2)+
00019BD6 12BC 0083                  		move.b	#$83,(a1)	; load block object
00019BDA 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
00019BE2 337C 4518 0002             		move.w	#$4518,2(a1)
00019BE8 137C 0004 0001             		move.b	#4,1(a1)
00019BEE 137C 0010 0019             		move.b	#$10,$19(a1)
00019BF4 137C 0010 0016             		move.b	#$10,$16(a1)
00019BFA 137C 0003 0018             		move.b	#3,$18(a1)
00019C00 3345 0008                  		move.w	d5,8(a1)	; set X	position
00019C04 337C 05D0 000C             		move.w	#$5D0,$C(a1)
00019C0A 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
00019C0E 137C 0008 0024             		move.b	#8,$24(a1)
00019C14 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
00019C18                            
00019C18                            Obj83_ExitMake:
00019C18 5428 0024                  		addq.b	#2,$24(a0)
00019C1C 4E75                       		rts	
00019C1E                            ; ===========================================================================
00019C1E                            
00019C1E                            Obj83_ChkBreak:				; XREF: Obj83_Index
00019C1E 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
00019C24 6600                       		bne.s	Obj83_Solid	; if not, branch
00019C26 4228 001A                  		clr.b	$1A(a0)
00019C2A 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
00019C2E                            
00019C2E                            Obj83_Solid:
00019C2E 7000                       		moveq	#0,d0
00019C30 1028 001A                  		move.b	$1A(a0),d0
00019C34 4400                       		neg.b	d0
00019C36 4880                       		ext.w	d0
00019C38 5040                       		addq.w	#8,d0
00019C3A E940                       		asl.w	#4,d0
00019C3C 383C 2100                  		move.w	#$2100,d4
00019C40 9840                       		sub.w	d0,d4
00019C42 1140 0019                  		move.b	d0,$19(a0)
00019C46 3144 0008                  		move.w	d4,8(a0)
00019C4A 720B                       		moveq	#$B,d1
00019C4C D240                       		add.w	d0,d1
00019C4E 7410                       		moveq	#$10,d2
00019C50 7611                       		moveq	#$11,d3
00019C52 4EF9 0000 FA86             		jmp	SolidObject
00019C58                            ; ===========================================================================
00019C58                            
00019C58                            loc_19C36:				; XREF: Obj83_Index
00019C58 0428 000E 001E             		subi.b	#$E,$1E(a0)
00019C5E 6400                       		bcc.s	Obj83_Solid2
00019C60 70FF                       		moveq	#-1,d0
00019C62 1028 001A                  		move.b	$1A(a0),d0
00019C66 4880                       		ext.w	d0
00019C68 D040                       		add.w	d0,d0
00019C6A 3030 0030                  		move.w	$30(a0,d0.w),d0
00019C6E 2240                       		movea.l	d0,a1
00019C70 337C 474F 0028             		move.w	#$474F,$28(a1)
00019C76 5228 001A                  		addq.b	#1,$1A(a0)
00019C7A 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
00019C80 6700                       		beq.s	loc_19C62
00019C82                            
00019C82                            Obj83_Solid2:
00019C82 60AA                       		bra.s	Obj83_Solid
00019C84                            ; ===========================================================================
00019C84                            
00019C84                            loc_19C62:				; XREF: Obj83_Index
00019C84 08A8 0003 0022             		bclr	#3,$22(a0)
00019C8A 08B8 0003 D022             		bclr	#3,($FFFFD022).w
00019C90 6000 FBBC                  		bra.w	loc_1982C
00019C94                            ; ===========================================================================
00019C94                            
00019C94                            loc_19C72:				; XREF: Obj83_Index
00019C94 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
00019C9A 6700                       		beq.s	Obj83_Break	; if yes, branch
00019C9C 4EF9 0000 D6C6             		jmp	DisplaySprite
00019CA2                            ; ===========================================================================
00019CA2                            
00019CA2                            loc_19C80:				; XREF: Obj83_Index
00019CA2 4A28 0001                  		tst.b	1(a0)
00019CA6 6A00 FBA6                  		bpl.w	loc_1982C
00019CAA 4EB9 0000 D674             		jsr	ObjectFall
00019CB0 4EF9 0000 D6C6             		jmp	DisplaySprite
00019CB6                            ; ===========================================================================
00019CB6                            
00019CB6                            Obj83_Break:				; XREF: loc_19C72
00019CB6 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
00019CBA 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
00019CBE 7801                       		moveq	#1,d4
00019CC0 7203                       		moveq	#3,d1
00019CC2 7438                       		moveq	#$38,d2
00019CC4 5428 0024                  		addq.b	#2,$24(a0)
00019CC8 117C 0008 0019             		move.b	#8,$19(a0)
00019CCE 117C 0008 0016             		move.b	#8,$16(a0)
00019CD4 43D0                       		lea	(a0),a1
00019CD6 6000                       		bra.s	Obj83_MakeFrag
00019CD8                            ; ===========================================================================
00019CD8                            
00019CD8                            Obj83_LoopFrag:
00019CD8 4EB9 0000 DB62             		jsr	SingleObjLoad2
00019CDE 6600                       		bne.s	Obj83_BreakSnd
00019CE0                            
00019CE0                            Obj83_MakeFrag:				; XREF: Obj83_Break
00019CE0 45D0                       		lea	(a0),a2
00019CE2 47D1                       		lea	(a1),a3
00019CE4 7603                       		moveq	#3,d3
00019CE6                            
00019CE6                            loc_19CC4:
00019CE6 26DA                       		move.l	(a2)+,(a3)+
00019CE8 26DA                       		move.l	(a2)+,(a3)+
00019CEA 26DA                       		move.l	(a2)+,(a3)+
00019CEC 26DA                       		move.l	(a2)+,(a3)+
00019CEE 51CB FFF6                  		dbf	d3,loc_19CC4
00019CF2                            
00019CF2 335C 0012                  		move.w	(a4)+,$12(a1)
00019CF6 361D                       		move.w	(a5)+,d3
00019CF8 D769 0008                  		add.w	d3,8(a1)
00019CFC 361D                       		move.w	(a5)+,d3
00019CFE D769 000C                  		add.w	d3,$C(a1)
00019D02 1344 001A                  		move.b	d4,$1A(a1)
00019D06 5244                       		addq.w	#1,d4
00019D08 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
00019D0C                            
00019D0C                            Obj83_BreakSnd:
00019D0C 303C 00CB                  		move.w	#$CB,d0
00019D10 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play smashing sound
00019D16 4EF9 0000 D6C6             		jmp	DisplaySprite
00019D1C                            ; ===========================================================================
00019D1C 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
00019D20 0120 00C0                  		dc.w $120, $C0
00019D24 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
00019D28 0010 0000                  		dc.w $10, 0
00019D2C 0000 0010                  		dc.w 0,	$10
00019D30 0010 0010                  		dc.w $10, $10
00019D34                            ; ---------------------------------------------------------------------------
00019D34                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
00019D34                            ; ---------------------------------------------------------------------------
00019D34                            Map_obj83:
00019D34                            	include "_maps\obj83.asm"
00019D34                            ; ---------------------------------------------------------------------------
00019D34                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
00019D34                            ; ---------------------------------------------------------------------------
00019D34 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
00019D38 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
00019D3C 0000                       		dc.w byte_19D46-Map_obj83
00019D3E 01                         byte_19D1C:	dc.b 1
00019D3F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00019D44 02                         byte_19D22:	dc.b 2
00019D45 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
00019D4A F801 0004 00               		dc.b $F8, 1, 0,	4, 0
00019D4F 00                         		dc.b 0
00019D50 02                         byte_19D2E:	dc.b 2
00019D51 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00019D56 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
00019D5B 00                         		dc.b 0
00019D5C 02                         byte_19D3A:	dc.b 2
00019D5D F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
00019D62 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
00019D67 00                         		dc.b 0
00019D68 02                         byte_19D46:	dc.b 2
00019D69 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
00019D6E F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
00019D74 00                         		even
00019D74 00                         		even
00019D74                            
00019D74                            ; ===========================================================================
00019D74                            ; ---------------------------------------------------------------------------
00019D74                            ; Object 85 - Eggman (FZ)
00019D74                            ; ---------------------------------------------------------------------------
00019D74                            
00019D74                            Obj85_Delete:
00019D74 4EF9 0000 D702             		jmp	DeleteObject
00019D7A                            ; ===========================================================================
00019D7A                            
00019D7A                            Obj85:					; XREF: Obj_Index
00019D7A 7000                       		moveq	#0,d0
00019D7C 1028 0024                  		move.b	$24(a0),d0
00019D80 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
00019D84 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
00019D88                            ; ===========================================================================
00019D88 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
00019D8A 0000                       		dc.w Obj85_Eggman-Obj85_Index
00019D8C 0000                       		dc.w loc_1A38E-Obj85_Index
00019D8E 0000                       		dc.w loc_1A346-Obj85_Index
00019D90 0000                       		dc.w loc_1A2C6-Obj85_Index
00019D92 0000                       		dc.w loc_1A3AC-Obj85_Index
00019D94 0000                       		dc.w loc_1A264-Obj85_Index
00019D96                            
00019D96 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
00019D9C 0001 9A56                  		dc.l Map_obj82		; mappings pointer
00019DA0 25B0 0590 0300             		dc.w $25B0, $590, $300
00019DA6 0000 0000                  		dc.l Map_obj84
00019DAA 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
00019DB0 0000 0000                  		dc.l Map_FZBoss
00019DB4 26E0 0596 0470             		dc.w $26E0, $596, $470
00019DBA 0001 9A56                  		dc.l Map_obj82
00019DBE 26E0 0596 0400             		dc.w $26E0, $596, $400
00019DC4 0001 7D38                  		dc.l Map_Eggman
00019DC8 26E0 0596 0400             		dc.w $26E0, $596, $400
00019DCE 0001 7D38                  		dc.l Map_Eggman
00019DD2                            
00019DD2 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
00019DD7 0400 0112 08               		dc.b 4,	0, 1, $12, 8
00019DDC 0600 0300 00               		dc.b 6,	0, 3, 0, 0
00019DE1 0800 0300 00               		dc.b 8,	0, 3, 0, 0
00019DE6 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
00019DEB 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
00019DF0                            ; ===========================================================================
00019DF0                            
00019DF0                            Obj85_Main:				; XREF: Obj85_Index
00019DF0 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
00019DF4 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
00019DF8 2248                       		movea.l	a0,a1
00019DFA 7205                       		moveq	#5,d1
00019DFC 6000                       		bra.s	Obj85_LoadBoss
00019DFE                            ; ===========================================================================
00019DFE                            
00019DFE                            Obj85_Loop:
00019DFE 4EB9 0000 DB62             		jsr	SingleObjLoad2
00019E04 6600                       		bne.s	loc_19E20
00019E06                            
00019E06                            Obj85_LoadBoss:				; XREF: Obj85_Main
00019E06 12BC 0085                  		move.b	#$85,(a1)
00019E0A 335A 0008                  		move.w	(a2)+,8(a1)
00019E0E 335A 000C                  		move.w	(a2)+,$C(a1)
00019E12 335A 0002                  		move.w	(a2)+,2(a1)
00019E16 235A 0004                  		move.l	(a2)+,4(a1)
00019E1A 135B 0024                  		move.b	(a3)+,$24(a1)
00019E1E 135B 001C                  		move.b	(a3)+,$1C(a1)
00019E22 135B 0018                  		move.b	(a3)+,$18(a1)
00019E26 135B 0017                  		move.b	(a3)+,$17(a1)
00019E2A 135B 0016                  		move.b	(a3)+,$16(a1)
00019E2E 137C 0004 0001             		move.b	#4,1(a1)
00019E34 08E8 0007 0001             		bset	#7,1(a0)
00019E3A 2348 0034                  		move.l	a0,$34(a1)
00019E3E 51C9 FFBE                  		dbf	d1,Obj85_Loop
00019E42                            
00019E42                            loc_19E20:
00019E42 45E8 0036                  		lea	$36(a0),a2
00019E46 4EB9 0000 DB4C             		jsr	SingleObjLoad
00019E4C 6600                       		bne.s	loc_19E5A
00019E4E 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
00019E52 3489                       		move.w	a1,(a2)
00019E54 2348 0034                  		move.l	a0,$34(a1)
00019E58 45E8 0038                  		lea	$38(a0),a2
00019E5C 7400                       		moveq	#0,d2
00019E5E 7203                       		moveq	#3,d1
00019E60                            
00019E60                            loc_19E3E:
00019E60 4EB9 0000 DB62             		jsr	SingleObjLoad2
00019E66 6600                       		bne.s	loc_19E5A
00019E68 34C9                       		move.w	a1,(a2)+
00019E6A 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
00019E6E 2348 0034                  		move.l	a0,$34(a1)
00019E72 1342 0028                  		move.b	d2,$28(a1)
00019E76 5442                       		addq.w	#2,d2
00019E78 51C9 FFE6                  		dbf	d1,loc_19E3E
00019E7C                            
00019E7C                            loc_19E5A:
00019E7C 317C 0000 0034             		move.w	#0,$34(a0)
00019E82 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019E88 317C FFFF 0030             		move.w	#-1,$30(a0)
00019E8E                            
00019E8E                            Obj85_Eggman:				; XREF: Obj85_Index
00019E8E 7000                       		moveq	#0,d0
00019E90 1028 0034                  		move.b	$34(a0),d0
00019E94 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
00019E98 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
00019E9C 4EF9 0000 D6C6             		jmp	DisplaySprite
00019EA2                            ; ===========================================================================
00019EA2 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
00019EA6 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
00019EAA 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
00019EAE 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
00019EB2                            ; ===========================================================================
00019EB2                            
00019EB2                            loc_19E90:				; XREF: off_19E80
00019EB2 4AB8 F680                  		tst.l	($FFFFF680).w
00019EB6 6600                       		bne.s	loc_19EA2
00019EB8 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00019EBE 6500                       		bcs.s	loc_19EA2
00019EC0 5428 0034                  		addq.b	#2,$34(a0)
00019EC4                            
00019EC4                            loc_19EA2:
00019EC4 52B8 F636                  		addq.l	#1,($FFFFF636).w
00019EC8 4E75                       		rts	
00019ECA                            ; ===========================================================================
00019ECA                            
00019ECA                            loc_19EA8:				; XREF: off_19E80
00019ECA 4A68 0030                  		tst.w	$30(a0)
00019ECE 6A00                       		bpl.s	loc_19F10
00019ED0 4268 0030                  		clr.w	$30(a0)
00019ED4 4EB9 0000 29B4             		jsr	(RandomNumber).l
00019EDA 0240 000C                  		andi.w	#$C,d0
00019EDE 3200                       		move.w	d0,d1
00019EE0 5441                       		addq.w	#2,d1
00019EE2 4A80                       		tst.l	d0
00019EE4 6A00                       		bpl.s	loc_19EC6
00019EE6 C141                       		exg	d1,d0
00019EE8                            
00019EE8                            loc_19EC6:
00019EE8 43FA 0000                  		lea	word_19FD6(pc),a1
00019EEC 3031 0000                  		move.w	(a1,d0.w),d0
00019EF0 3231 1000                  		move.w	(a1,d1.w),d1
00019EF4 3140 0030                  		move.w	d0,$30(a0)
00019EF8 74FF                       		moveq	#-1,d2
00019EFA 3430 0038                  		move.w	$38(a0,d0.w),d2
00019EFE 2242                       		movea.l	d2,a1
00019F00 137C 00FF 0029             		move.b	#-1,$29(a1)
00019F06 337C FFFF 0030             		move.w	#-1,$30(a1)
00019F0C 3430 1038                  		move.w	$38(a0,d1.w),d2
00019F10 2242                       		movea.l	d2,a1
00019F12 137C 0001 0029             		move.b	#1,$29(a1)
00019F18 337C 0000 0030             		move.w	#0,$30(a1)
00019F1E 317C 0001 0032             		move.w	#1,$32(a0)
00019F24 4228 0035                  		clr.b	$35(a0)
00019F28 303C 00B7                  		move.w	#$B7,d0
00019F2C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rumbling sound
00019F32                            
00019F32                            loc_19F10:
00019F32 4A68 0032                  		tst.w	$32(a0)
00019F36 6B00 0000                  		bmi.w	loc_19FA6
00019F3A 08A8 0000 0022             		bclr	#0,$22(a0)
00019F40 3038 D008                  		move.w	($FFFFD008).w,d0
00019F44 9068 0008                  		sub.w	8(a0),d0
00019F48 6500                       		bcs.s	loc_19F2E
00019F4A 08E8 0000 0022             		bset	#0,$22(a0)
00019F50                            
00019F50                            loc_19F2E:
00019F50 323C 002B                  		move.w	#$2B,d1
00019F54 343C 0014                  		move.w	#$14,d2
00019F58 363C 0014                  		move.w	#$14,d3
00019F5C 3828 0008                  		move.w	8(a0),d4
00019F60 4EB9 0000 FA86             		jsr	SolidObject
00019F66 4A44                       		tst.w	d4
00019F68 6E00                       		bgt.s	loc_19F50
00019F6A                            
00019F6A                            loc_19F48:
00019F6A 4A28 0035                  		tst.b	$35(a0)
00019F6E 6600                       		bne.s	loc_19F88
00019F70 6000                       		bra.s	loc_19F96
00019F72                            ; ===========================================================================
00019F72                            
00019F72                            loc_19F50:
00019F72 5E78 F636                  		addq.w	#7,($FFFFF636).w
00019F76 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
00019F7C 66EC                       		bne.s	loc_19F48
00019F7E 303C 0300                  		move.w	#$300,d0
00019F82 0828 0000 0022             		btst	#0,$22(a0)
00019F88 6600                       		bne.s	loc_19F6A
00019F8A 4440                       		neg.w	d0
00019F8C                            
00019F8C                            loc_19F6A:
00019F8C 31C0 D010                  		move.w	d0,($FFFFD010).w
00019F90 4A28 0035                  		tst.b	$35(a0)
00019F94 6600                       		bne.s	loc_19F88
00019F96 5328 0021                  		subq.b	#1,$21(a0)
00019F9A 117C 0064 0035             		move.b	#$64,$35(a0)
00019FA0 303C 00AC                  		move.w	#$AC,d0
00019FA4 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019FAA                            
00019FAA                            loc_19F88:
00019FAA 5328 0035                  		subq.b	#1,$35(a0)
00019FAE 6700                       		beq.s	loc_19F96
00019FB0 117C 0003 001C             		move.b	#3,$1C(a0)
00019FB6 6000                       		bra.s	loc_19F9C
00019FB8                            ; ===========================================================================
00019FB8                            
00019FB8                            loc_19F96:
00019FB8 117C 0001 001C             		move.b	#1,$1C(a0)
00019FBE                            
00019FBE                            loc_19F9C:
00019FBE 43FA FA64                  		lea	Ani_obj82(pc),a1
00019FC2 4EF9 0000 A7F2             		jmp	AnimateSprite
00019FC8                            ; ===========================================================================
00019FC8                            
00019FC8                            loc_19FA6:
00019FC8 4A28 0021                  		tst.b	$21(a0)
00019FCC 6700                       		beq.s	loc_19FBC
00019FCE 5428 0034                  		addq.b	#2,$34(a0)
00019FD2 317C FFFF 0030             		move.w	#-1,$30(a0)
00019FD8 4268 0032                  		clr.w	$32(a0)
00019FDC 4E75                       		rts	
00019FDE                            ; ===========================================================================
00019FDE                            
00019FDE                            loc_19FBC:
00019FDE 117C 0006 0034             		move.b	#6,$34(a0)
00019FE4 317C 25C0 0008             		move.w	#$25C0,8(a0)
00019FEA 317C 053C 000C             		move.w	#$53C,$C(a0)
00019FF0 117C 0014 0016             		move.b	#$14,$16(a0)
00019FF6 4E75                       		rts	
00019FF8                            ; ===========================================================================
00019FF8 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A008                            ; ===========================================================================
0001A008                            
0001A008                            loc_19FE6:				; XREF: off_19E80
0001A008 70FF                       		moveq	#-1,d0
0001A00A 3028 0036                  		move.w	$36(a0),d0
0001A00E 2240                       		movea.l	d0,a1
0001A010 4A68 0030                  		tst.w	$30(a0)
0001A014 6A00                       		bpl.s	loc_1A000
0001A016 4268 0030                  		clr.w	$30(a0)
0001A01A 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A020 6100                       		bsr.s	loc_1A020
0001A022                            
0001A022                            loc_1A000:
0001A022 700F                       		moveq	#$F,d0
0001A024 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A028 6600                       		bne.s	loc_1A00A
0001A02A 6100                       		bsr.s	loc_1A020
0001A02C                            
0001A02C                            loc_1A00A:
0001A02C 4A68 0032                  		tst.w	$32(a0)
0001A030 6700                       		beq.s	locret_1A01E
0001A032 5528 0034                  		subq.b	#2,$34(a0)
0001A036 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A03C 4268 0032                  		clr.w	$32(a0)
0001A040                            
0001A040                            locret_1A01E:
0001A040 4E75                       		rts	
0001A042                            ; ===========================================================================
0001A042                            
0001A042                            loc_1A020:
0001A042 303C 00B1                  		move.w	#$B1,d0
0001A046 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A04C                            ; ===========================================================================
0001A04C                            
0001A04C                            loc_1A02A:				; XREF: off_19E80
0001A04C 117C 0030 0017             		move.b	#$30,$17(a0)
0001A052 08E8 0000 0022             		bset	#0,$22(a0)
0001A058 4EB9 0000 D6A0             		jsr	SpeedToPos
0001A05E 117C 0006 001A             		move.b	#6,$1A(a0)
0001A064 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A06A 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A070 6500                       		bcs.s	loc_1A070
0001A072 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A078 5428 0034                  		addq.b	#2,$34(a0)
0001A07C 117C 0020 0017             		move.b	#$20,$17(a0)
0001A082 317C 0100 0010             		move.w	#$100,$10(a0)
0001A088 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A08E 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A092                            
0001A092                            loc_1A070:
0001A092 6000 0000                  		bra.w	loc_1A166
0001A096                            ; ===========================================================================
0001A096                            
0001A096                            loc_1A074:				; XREF: off_19E80
0001A096 08E8 0000 0022             		bset	#0,$22(a0)
0001A09C 117C 0004 001C             		move.b	#4,$1C(a0)
0001A0A2 4EB9 0000 D6A0             		jsr	SpeedToPos
0001A0A8 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A0AE 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A0B4 6500                       		bcs.s	loc_1A09A
0001A0B6 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A0BC                            
0001A0BC                            loc_1A09A:
0001A0BC 317C 0400 0010             		move.w	#$400,$10(a0)
0001A0C2 3028 0008                  		move.w	8(a0),d0
0001A0C6 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A0CA 6A00                       		bpl.s	loc_1A0B4
0001A0CC 317C 0500 0010             		move.w	#$500,$10(a0)
0001A0D2 6000 0000                  		bra.w	loc_1A0F2
0001A0D6                            ; ===========================================================================
0001A0D6                            
0001A0D6                            loc_1A0B4:
0001A0D6 0440 0070                  		subi.w	#$70,d0
0001A0DA 6500                       		bcs.s	loc_1A0F2
0001A0DC 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A0E2 5140                       		subq.w	#8,d0
0001A0E4 6500                       		bcs.s	loc_1A0F2
0001A0E6 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A0EC 5140                       		subq.w	#8,d0
0001A0EE 6500                       		bcs.s	loc_1A0F2
0001A0F0 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A0F6 5140                       		subq.w	#8,d0
0001A0F8 6500                       		bcs.s	loc_1A0F2
0001A0FA 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A100 5140                       		subq.w	#8,d0
0001A102 6500                       		bcs.s	loc_1A0F2
0001A104 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A10A 0440 0038                  		subi.w	#$38,d0
0001A10E 6500                       		bcs.s	loc_1A0F2
0001A110 4268 0010                  		clr.w	$10(a0)
0001A114                            
0001A114                            loc_1A0F2:
0001A114 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A11A 6500                       		bcs.s	loc_1A110
0001A11C 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A122 317C 0240 0010             		move.w	#$240,$10(a0)
0001A128 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A12E 5428 0034                  		addq.b	#2,$34(a0)
0001A132                            
0001A132                            loc_1A110:
0001A132 6000                       		bra.s	loc_1A15C
0001A134                            ; ===========================================================================
0001A134                            
0001A134                            loc_1A112:				; XREF: off_19E80
0001A134 4EB9 0000 D6A0             		jsr	SpeedToPos
0001A13A 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A140 6500                       		bcs.s	loc_1A124
0001A142 4268 0010                  		clr.w	$10(a0)
0001A146                            
0001A146                            loc_1A124:
0001A146 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A14C 4A68 0012                  		tst.w	$12(a0)
0001A150 6B00                       		bmi.s	loc_1A142
0001A152 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A158 6500                       		bcs.s	loc_1A142
0001A15A 317C 0592 000C             		move.w	#$592,$C(a0)
0001A160 4268 0012                  		clr.w	$12(a0)
0001A164                            
0001A164                            loc_1A142:
0001A164 3028 0010                  		move.w	$10(a0),d0
0001A168 8068 0012                  		or.w	$12(a0),d0
0001A16C 6600                       		bne.s	loc_1A15C
0001A16E 5428 0034                  		addq.b	#2,$34(a0)
0001A172 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A178 117C 0001 0021             		move.b	#1,$21(a0)
0001A17E                            
0001A17E                            loc_1A15C:
0001A17E 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001A182 4EB9 0000 A7F2             		jsr	AnimateSprite
0001A188                            
0001A188                            loc_1A166:
0001A188 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A18E 6C00                       		bge.s	loc_1A172
0001A190 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A194                            
0001A194                            loc_1A172:
0001A194 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A19A 6C00                       		bge.s	locret_1A190
0001A19C 323C 001B                  		move.w	#$1B,d1
0001A1A0 343C 0070                  		move.w	#$70,d2
0001A1A4 363C 0071                  		move.w	#$71,d3
0001A1A8 3828 0008                  		move.w	8(a0),d4
0001A1AC 4EF9 0000 FA86             		jmp	SolidObject
0001A1B2                            ; ===========================================================================
0001A1B2                            
0001A1B2                            locret_1A190:
0001A1B2 4E75                       		rts	
0001A1B4                            ; ===========================================================================
0001A1B4                            
0001A1B4                            loc_1A192:				; XREF: off_19E80
0001A1B4 217C 0001 7D38 0004        		move.l	#Map_Eggman,4(a0)
0001A1BC 317C 0400 0002             		move.w	#$400,2(a0)
0001A1C2 117C 0000 001C             		move.b	#0,$1C(a0)
0001A1C8 08E8 0000 0022             		bset	#0,$22(a0)
0001A1CE 4EB9 0000 D6A0             		jsr	SpeedToPos
0001A1D4 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A1DA 6400                       		bcc.s	loc_1A1D0
0001A1DC 317C 0180 0010             		move.w	#$180,$10(a0)
0001A1E2 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A1E8 117C 000F 0020             		move.b	#$F,$20(a0)
0001A1EE 5428 0034                  		addq.b	#2,$34(a0)
0001A1F2                            
0001A1F2                            loc_1A1D0:
0001A1F2 6000 FF8A                  		bra.w	loc_1A15C
0001A1F6                            ; ===========================================================================
0001A1F6                            
0001A1F6                            loc_1A1D4:				; XREF: off_19E80
0001A1F6 08E8 0000 0022             		bset	#0,$22(a0)
0001A1FC 4EB9 0000 D6A0             		jsr	SpeedToPos
0001A202 4A68 0030                  		tst.w	$30(a0)
0001A206 6600                       		bne.s	loc_1A1FC
0001A208 4A28 0020                  		tst.b	$20(a0)
0001A20C 6600                       		bne.s	loc_1A216
0001A20E 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A214 303C 00AC                  		move.w	#$AC,d0
0001A218 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A21E                            
0001A21E                            loc_1A1FC:
0001A21E 5368 0030                  		subq.w	#1,$30(a0)
0001A222 6600                       		bne.s	loc_1A216
0001A224 4A28 0022                  		tst.b	$22(a0)
0001A228 6A00                       		bpl.s	loc_1A210
0001A22A 317C 0060 0012             		move.w	#$60,$12(a0)
0001A230 6000                       		bra.s	loc_1A216
0001A232                            ; ===========================================================================
0001A232                            
0001A232                            loc_1A210:
0001A232 117C 000F 0020             		move.b	#$F,$20(a0)
0001A238                            
0001A238                            loc_1A216:
0001A238 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A23E 6D00                       		blt.s	loc_1A23A
0001A240 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A246 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A24C 4278 D014                  		clr.w	($FFFFD014).w
0001A250 4A68 0012                  		tst.w	$12(a0)
0001A254 6A00                       		bpl.s	loc_1A248
0001A256 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A25C                            
0001A25C                            loc_1A23A:
0001A25C 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A262 6D00                       		blt.s	loc_1A248
0001A264 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A26A                            
0001A26A                            loc_1A248:
0001A26A 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A270 6500                       		bcs.s	loc_1A260
0001A272 4A28 0001                  		tst.b	1(a0)
0001A276 6B00                       		bmi.s	loc_1A260
0001A278 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A27E 6000 FAF4                  		bra.w	Obj85_Delete
0001A282                            ; ===========================================================================
0001A282                            
0001A282                            loc_1A260:
0001A282 6000 FEFA                  		bra.w	loc_1A15C
0001A286                            ; ===========================================================================
0001A286                            
0001A286                            loc_1A264:				; XREF: Obj85_Index
0001A286 2268 0034                  		movea.l	$34(a0),a1
0001A28A 1011                       		move.b	(a1),d0
0001A28C B010                       		cmp.b	(a0),d0
0001A28E 6600 FAE4                  		bne.w	Obj85_Delete
0001A292 117C 0007 001C             		move.b	#7,$1C(a0)
0001A298 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A29E 6C00                       		bge.s	loc_1A280
0001A2A0 6000                       		bra.s	loc_1A2A6
0001A2A2                            ; ===========================================================================
0001A2A2                            
0001A2A2                            loc_1A280:
0001A2A2 4A69 0010                  		tst.w	$10(a1)
0001A2A6 6700                       		beq.s	loc_1A28C
0001A2A8 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A2AE                            
0001A2AE                            loc_1A28C:
0001A2AE 43FA DA38                  		lea	Ani_Eggman(pc),a1
0001A2B2 4EB9 0000 A7F2             		jsr	AnimateSprite
0001A2B8                            
0001A2B8                            loc_1A296:
0001A2B8 2268 0034                  		movea.l	$34(a0),a1
0001A2BC 3169 0008 0008             		move.w	8(a1),8(a0)
0001A2C2 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A2C8                            
0001A2C8                            loc_1A2A6:
0001A2C8 2268 0034                  		movea.l	$34(a0),a1
0001A2CC 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A2D2 7003                       		moveq	#3,d0
0001A2D4 C028 0022                  		and.b	$22(a0),d0
0001A2D8 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A2DE 8128 0001                  		or.b	d0,1(a0)
0001A2E2 4EF9 0000 D6C6             		jmp	DisplaySprite
0001A2E8                            ; ===========================================================================
0001A2E8                            
0001A2E8                            loc_1A2C6:				; XREF: Obj85_Index
0001A2E8 2268 0034                  		movea.l	$34(a0),a1
0001A2EC 1011                       		move.b	(a1),d0
0001A2EE B010                       		cmp.b	(a0),d0
0001A2F0 6600 FA82                  		bne.w	Obj85_Delete
0001A2F4 0CA9 0001 7D38 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A2FC 6700                       		beq.s	loc_1A2E4
0001A2FE 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A304 60C2                       		bra.s	loc_1A2A6
0001A306                            ; ===========================================================================
0001A306                            
0001A306                            loc_1A2E4:
0001A306 117C 0001 001C             		move.b	#1,$1C(a0)
0001A30C 4A29 0021                  		tst.b	$21(a1)
0001A310 6F00                       		ble.s	loc_1A312
0001A312 117C 0006 001C             		move.b	#6,$1C(a0)
0001A318 217C 0001 7D38 0004        		move.l	#Map_Eggman,4(a0)
0001A320 317C 0400 0002             		move.w	#$400,2(a0)
0001A326 43FA D9C0                  		lea	Ani_Eggman(pc),a1
0001A32A 4EB9 0000 A7F2             		jsr	AnimateSprite
0001A330 6000 FF86                  		bra.w	loc_1A296
0001A334                            ; ===========================================================================
0001A334                            
0001A334                            loc_1A312:
0001A334 4A28 0001                  		tst.b	1(a0)
0001A338 6A00 FA3A                  		bpl.w	Obj85_Delete
0001A33C 6100 D558                  		bsr.w	BossDefeated
0001A340 117C 0002 0018             		move.b	#2,$18(a0)
0001A346 117C 0000 001C             		move.b	#0,$1C(a0)
0001A34C 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001A354 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001A35A 43FA 0000                  		lea	Ani_obj85(pc),a1
0001A35E 4EB9 0000 A7F2             		jsr	AnimateSprite
0001A364 6000 FF52                  		bra.w	loc_1A296
0001A368                            ; ===========================================================================
0001A368                            
0001A368                            loc_1A346:				; XREF: Obj85_Index
0001A368 08E8 0000 0022             		bset	#0,$22(a0)
0001A36E 2268 0034                  		movea.l	$34(a0),a1
0001A372 0CA9 0001 7D38 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A37A 6700                       		beq.s	loc_1A35E
0001A37C 6000 FF4A                  		bra.w	loc_1A2A6
0001A380                            ; ===========================================================================
0001A380                            
0001A380                            loc_1A35E:
0001A380 3169 0008 0008             		move.w	8(a1),8(a0)
0001A386 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A38C 4A28 001E                  		tst.b	$1E(a0)
0001A390 6600                       		bne.s	loc_1A376
0001A392 117C 0014 001E             		move.b	#$14,$1E(a0)
0001A398                            
0001A398                            loc_1A376:
0001A398 5328 001E                  		subq.b	#1,$1E(a0)
0001A39C 6E00                       		bgt.s	loc_1A38A
0001A39E 5228 001A                  		addq.b	#1,$1A(a0)
0001A3A2 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001A3A8 6E00 F9CA                  		bgt.w	Obj85_Delete
0001A3AC                            
0001A3AC                            loc_1A38A:
0001A3AC 6000 FF0A                  		bra.w	loc_1A296
0001A3B0                            ; ===========================================================================
0001A3B0                            
0001A3B0                            loc_1A38E:				; XREF: Obj85_Index
0001A3B0 117C 000B 001A             		move.b	#$B,$1A(a0)
0001A3B6 3038 D008                  		move.w	($FFFFD008).w,d0
0001A3BA 9068 0008                  		sub.w	8(a0),d0
0001A3BE 6500                       		bcs.s	loc_1A3A6
0001A3C0 4A28 0001                  		tst.b	1(a0)
0001A3C4 6A00 F9AE                  		bpl.w	Obj85_Delete
0001A3C8                            
0001A3C8                            loc_1A3A6:
0001A3C8 4EF9 0000 D6C6             		jmp	DisplaySprite
0001A3CE                            ; ===========================================================================
0001A3CE                            
0001A3CE                            loc_1A3AC:				; XREF: Obj85_Index
0001A3CE 117C 0000 001A             		move.b	#0,$1A(a0)
0001A3D4 08E8 0000 0022             		bset	#0,$22(a0)
0001A3DA 2268 0034                  		movea.l	$34(a0),a1
0001A3DE 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A3E4 6600                       		bne.s	loc_1A3D0
0001A3E6 0CA9 0001 7D38 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A3EE 6700 F984                  		beq.w	Obj85_Delete
0001A3F2                            
0001A3F2                            loc_1A3D0:
0001A3F2 6000 FED4                  		bra.w	loc_1A2A6
0001A3F6                            ; ===========================================================================
0001A3F6                            Ani_obj85:
0001A3F6                            	include "_anim\obj85.asm"
0001A3F6                            ; ---------------------------------------------------------------------------
0001A3F6                            ; Animation script - Eggman (FZ)
0001A3F6                            ; ---------------------------------------------------------------------------
0001A3F6 0000                       		dc.w byte_1A3D6-Ani_obj85
0001A3F8 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001A3FC                            		even
0001A3FC                            		even
0001A3FC                            
0001A3FC                            Map_Eggman2:
0001A3FC                            	include "_maps\Eggman2.asm"
0001A3FC                            ; ---------------------------------------------------------------------------
0001A3FC                            ; Sprite mappings - Eggman (FZ)
0001A3FC                            ; ---------------------------------------------------------------------------
0001A3FC 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001A3FE 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001A400 06                         byte_1A3DE:	dc.b 6
0001A401 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001A406 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001A40B EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A410 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A415 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A41A 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A41F 06                         byte_1A3FD:	dc.b 6
0001A420 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001A425 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001A42A EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A42F FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A434 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A439 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A43E                            		even
0001A43E                            		even
0001A43E                            
0001A43E                            Map_FZBoss:
0001A43E                            	include "_maps\FZ boss.asm"
0001A43E                            ; ---------------------------------------------------------------------------
0001A43E                            ; Sprite mappings - boss (FZ)
0001A43E                            ; ---------------------------------------------------------------------------
0001A43E 0000                       		dc.w byte_1A422-Map_FZBoss
0001A440 0000                       		dc.w byte_1A42D-Map_FZBoss
0001A442 0000                       		dc.w byte_1A43D-Map_FZBoss
0001A444 02                         byte_1A422:	dc.b 2
0001A445 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001A44A 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001A44F 03                         byte_1A42D:	dc.b 3
0001A450 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001A455 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001A45A 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001A45F 02                         byte_1A43D:	dc.b 2
0001A460 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001A465 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001A46A                            		even
0001A46A                            		even
0001A46A                            
0001A46A                            ; ===========================================================================
0001A46A                            
0001A46A                            Obj84_Delete:
0001A46A 4EF9 0000 D702             		jmp	DeleteObject
0001A470                            ; ===========================================================================
0001A470                            ; ---------------------------------------------------------------------------
0001A470                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001A470                            ; ---------------------------------------------------------------------------
0001A470                            
0001A470                            Obj84:					; XREF: Obj_Index
0001A470 7000                       		moveq	#0,d0
0001A472 1028 0024                  		move.b	$24(a0),d0
0001A476 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001A47A 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001A47E                            ; ===========================================================================
0001A47E 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001A480 0000                       		dc.w loc_1A4CE-Obj84_Index
0001A482 0000                       		dc.w loc_1A57E-Obj84_Index
0001A484                            
0001A484 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001A488 2550 0620                  		dc.w $2550, $620
0001A48C 2490 04C0                  		dc.w $2490, $4C0
0001A490 2510 04C0                  		dc.w $2510, $4C0
0001A494                            ; ===========================================================================
0001A494                            
0001A494                            Obj84_Main:				; XREF: Obj84_Index
0001A494 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001A498 7000                       		moveq	#0,d0
0001A49A 1028 0028                  		move.b	$28(a0),d0
0001A49E D040                       		add.w	d0,d0
0001A4A0 D2C0                       		adda.w	d0,a1
0001A4A2 117C 0004 0001             		move.b	#4,1(a0)
0001A4A8 08E8 0007 0001             		bset	#7,1(a0)
0001A4AE 08E8 0004 0001             		bset	#4,1(a0)
0001A4B4 317C 0300 0002             		move.w	#$300,2(a0)
0001A4BA 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001A4C2 3159 0008                  		move.w	(a1)+,8(a0)
0001A4C6 3151 000C                  		move.w	(a1),$C(a0)
0001A4CA 3159 0038                  		move.w	(a1)+,$38(a0)
0001A4CE 117C 0020 0016             		move.b	#$20,$16(a0)
0001A4D4 117C 0060 0017             		move.b	#$60,$17(a0)
0001A4DA 117C 0020 0019             		move.b	#$20,$19(a0)
0001A4E0 117C 0060 0016             		move.b	#$60,$16(a0)
0001A4E6 117C 0003 0018             		move.b	#3,$18(a0)
0001A4EC 5428 0024                  		addq.b	#2,$24(a0)
0001A4F0                            
0001A4F0                            loc_1A4CE:				; XREF: Obj84_Index
0001A4F0 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A4F6 6F00                       		ble.s	loc_1A4DC
0001A4F8 08E8 0001 0001             		bset	#1,1(a0)
0001A4FE                            
0001A4FE                            loc_1A4DC:
0001A4FE 42A8 003C                  		clr.l	$3C(a0)
0001A502 4A28 0029                  		tst.b	$29(a0)
0001A506 6700                       		beq.s	loc_1A4EA
0001A508 5428 0024                  		addq.b	#2,$24(a0)
0001A50C                            
0001A50C                            loc_1A4EA:
0001A50C 2028 003C                  		move.l	$3C(a0),d0
0001A510 2228 0038                  		move.l	$38(a0),d1
0001A514 D280                       		add.l	d0,d1
0001A516 4841                       		swap	d1
0001A518 3141 000C                  		move.w	d1,$C(a0)
0001A51C 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001A522 6600                       		bne.s	loc_1A524
0001A524 4A68 0030                  		tst.w	$30(a0)
0001A528 6A00                       		bpl.s	loc_1A524
0001A52A 70F6                       		moveq	#-$A,d0
0001A52C 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A532 6F00                       		ble.s	loc_1A514
0001A534 700E                       		moveq	#$E,d0
0001A536                            
0001A536                            loc_1A514:
0001A536 D240                       		add.w	d0,d1
0001A538 2268 0034                  		movea.l	$34(a0),a1
0001A53C 3341 000C                  		move.w	d1,$C(a1)
0001A540 3368 0008 0008             		move.w	8(a0),8(a1)
0001A546                            
0001A546                            loc_1A524:
0001A546 323C 002B                  		move.w	#$2B,d1
0001A54A 343C 0060                  		move.w	#$60,d2
0001A54E 363C 0061                  		move.w	#$61,d3
0001A552 3828 0008                  		move.w	8(a0),d4
0001A556 4EB9 0000 FA86             		jsr	SolidObject
0001A55C 7000                       		moveq	#0,d0
0001A55E 3228 003C                  		move.w	$3C(a0),d1
0001A562 6A00                       		bpl.s	loc_1A550
0001A564 4441                       		neg.w	d1
0001A566 5141                       		subq.w	#8,d1
0001A568 6500                       		bcs.s	loc_1A55C
0001A56A 5200                       		addq.b	#1,d0
0001A56C E841                       		asr.w	#4,d1
0001A56E D041                       		add.w	d1,d0
0001A570 6000                       		bra.s	loc_1A55C
0001A572                            ; ===========================================================================
0001A572                            
0001A572                            loc_1A550:
0001A572 0441 0027                  		subi.w	#$27,d1
0001A576 6500                       		bcs.s	loc_1A55C
0001A578 5200                       		addq.b	#1,d0
0001A57A E841                       		asr.w	#4,d1
0001A57C D041                       		add.w	d1,d0
0001A57E                            
0001A57E                            loc_1A55C:
0001A57E 1140 001A                  		move.b	d0,$1A(a0)
0001A582 3038 D008                  		move.w	($FFFFD008).w,d0
0001A586 9068 0008                  		sub.w	8(a0),d0
0001A58A 6B00                       		bmi.s	loc_1A578
0001A58C 0440 0140                  		subi.w	#$140,d0
0001A590 6B00                       		bmi.s	loc_1A578
0001A592 4A28 0001                  		tst.b	1(a0)
0001A596 6A00 FED2                  		bpl.w	Obj84_Delete
0001A59A                            
0001A59A                            loc_1A578:
0001A59A 4EF9 0000 D6C6             		jmp	DisplaySprite
0001A5A0                            ; ===========================================================================
0001A5A0                            
0001A5A0                            loc_1A57E:				; XREF: Obj84_Index
0001A5A0 7000                       		moveq	#0,d0
0001A5A2 1028 0028                  		move.b	$28(a0),d0
0001A5A6 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001A5AA 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001A5AE 6000 FF5C                  		bra.w	loc_1A4EA
0001A5B2                            ; ===========================================================================
0001A5B2 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001A5B4 0000                       		dc.w loc_1A598-off_1A590
0001A5B6 0000                       		dc.w loc_1A604-off_1A590
0001A5B8 0000                       		dc.w loc_1A604-off_1A590
0001A5BA                            ; ===========================================================================
0001A5BA                            
0001A5BA                            loc_1A598:				; XREF: off_1A590
0001A5BA 4A28 0029                  		tst.b	$29(a0)
0001A5BE 6600                       		bne.s	loc_1A5D4
0001A5C0 2268 0034                  		movea.l	$34(a0),a1
0001A5C4 4A29 0021                  		tst.b	$21(a1)
0001A5C8 6600                       		bne.s	loc_1A5B4
0001A5CA 6100 D2CA                  		bsr.w	BossDefeated
0001A5CE 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001A5D6                            
0001A5D6                            loc_1A5B4:
0001A5D6 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001A5DE 6400                       		bcc.s	locret_1A602
0001A5E0 42A8 003C                  		clr.l	$3C(a0)
0001A5E4 2268 0034                  		movea.l	$34(a0),a1
0001A5E8 5369 0032                  		subq.w	#1,$32(a1)
0001A5EC 4269 0030                  		clr.w	$30(a1)
0001A5F0 5528 0024                  		subq.b	#2,$24(a0)
0001A5F4 4E75                       		rts	
0001A5F6                            ; ===========================================================================
0001A5F6                            
0001A5F6                            loc_1A5D4:
0001A5F6 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001A5FC 6C00                       		bge.s	loc_1A5E4
0001A5FE 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001A606                            
0001A606                            loc_1A5E4:
0001A606 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001A60E 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001A614 6E00                       		bgt.s	locret_1A602
0001A616 4268 003E                  		clr.w	$3E(a0)
0001A61A 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001A620 4228 0029                  		clr.b	$29(a0)
0001A624                            
0001A624                            locret_1A602:
0001A624 4E75                       		rts	
0001A626                            ; ===========================================================================
0001A626                            
0001A626                            loc_1A604:				; XREF: off_1A590
0001A626 08E8 0001 0001             		bset	#1,1(a0)
0001A62C 4A28 0029                  		tst.b	$29(a0)
0001A630 6600                       		bne.s	loc_1A646
0001A632 2268 0034                  		movea.l	$34(a0),a1
0001A636 4A29 0021                  		tst.b	$21(a1)
0001A63A 6600                       		bne.s	loc_1A626
0001A63C 6100 D258                  		bsr.w	BossDefeated
0001A640 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001A648                            
0001A648                            loc_1A626:
0001A648 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001A650 6400                       		bcc.s	locret_1A674
0001A652 42A8 003C                  		clr.l	$3C(a0)
0001A656 2268 0034                  		movea.l	$34(a0),a1
0001A65A 5369 0032                  		subq.w	#1,$32(a1)
0001A65E 4269 0030                  		clr.w	$30(a1)
0001A662 5528 0024                  		subq.b	#2,$24(a0)
0001A666 4E75                       		rts	
0001A668                            ; ===========================================================================
0001A668                            
0001A668                            loc_1A646:
0001A668 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001A66E 6D00                       		blt.s	loc_1A656
0001A670 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001A678                            
0001A678                            loc_1A656:
0001A678 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001A680 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001A686 6D00                       		blt.s	locret_1A674
0001A688 4268 003E                  		clr.w	$3E(a0)
0001A68C 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001A692 4228 0029                  		clr.b	$29(a0)
0001A696                            
0001A696                            locret_1A674:
0001A696 4E75                       		rts	
0001A698                            ; ===========================================================================
0001A698                            ; ---------------------------------------------------------------------------
0001A698                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001A698                            ; ---------------------------------------------------------------------------
0001A698                            Map_obj84:
0001A698                            	include "_maps\obj84.asm"
0001A698                            ; ---------------------------------------------------------------------------
0001A698                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001A698                            ; ---------------------------------------------------------------------------
0001A698 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001A69C 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001A6A0 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001A6A4 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001A6A8 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001A6AC 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001A6B0 06                         byte_1A68E:	dc.b 6
0001A6B1 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A6B6 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A6BB B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A6C0 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A6C5 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A6CA B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A6CF 08                         byte_1A6AD:	dc.b 8
0001A6D0 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A6D5 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A6DA B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A6DF B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A6E4 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A6E9 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A6EE D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A6F3 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A6F8 0A                         byte_1A6D6:	dc.b $A
0001A6F9 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A6FE A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A703 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A708 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A70D B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A712 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A717 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A71C D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A721 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A726 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A72B 0C                         byte_1A709:	dc.b $C
0001A72C A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A731 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A736 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A73B B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A740 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A745 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A74A D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A74F D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A754 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A759 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A75E 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001A763 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001A768 0D                         byte_1A746:	dc.b $D
0001A769 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A76E A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A773 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A778 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A77D B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A782 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A787 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A78C D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A791 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A796 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A79B 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001A7A0 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001A7A5 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001A7AA 0E                         byte_1A788:	dc.b $E
0001A7AB A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A7B0 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A7B5 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A7BA B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A7BF B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A7C4 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A7C9 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A7CE D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A7D3 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A7D8 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A7DD 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001A7E2 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001A7E7 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001A7EC 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001A7F1 02                         byte_1A7CF:	dc.b 2
0001A7F2 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001A7F7 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001A7FC                            		even
0001A7FC                            		even
0001A7FC                            
0001A7FC                            ; ===========================================================================
0001A7FC                            ; ---------------------------------------------------------------------------
0001A7FC                            ; Object 86 - energy balls (FZ)
0001A7FC                            ; ---------------------------------------------------------------------------
0001A7FC                            
0001A7FC                            Obj86:					; XREF: Obj_Index
0001A7FC 7000                       		moveq	#0,d0
0001A7FE 1028 0024                  		move.b	$24(a0),d0
0001A802 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001A806 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001A80A                            ; ===========================================================================
0001A80A 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001A80C 0000                       		dc.w Obj86_Generator-Obj86_Index
0001A80E 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001A810 0000                       		dc.w loc_1A962-Obj86_Index
0001A812 0000                       		dc.w loc_1A982-Obj86_Index
0001A814                            ; ===========================================================================
0001A814                            
0001A814                            Obj86_Main:				; XREF: Obj86_Index
0001A814 317C 2588 0008             		move.w	#$2588,8(a0)
0001A81A 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A820 317C 0300 0002             		move.w	#$300,2(a0)
0001A826 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001A82E 117C 0000 001C             		move.b	#0,$1C(a0)
0001A834 117C 0003 0018             		move.b	#3,$18(a0)
0001A83A 117C 0008 0017             		move.b	#8,$17(a0)
0001A840 117C 0008 0016             		move.b	#8,$16(a0)
0001A846 117C 0004 0001             		move.b	#4,1(a0)
0001A84C 08E8 0007 0001             		bset	#7,1(a0)
0001A852 5428 0024                  		addq.b	#2,$24(a0)
0001A856                            
0001A856                            Obj86_Generator:			; XREF: Obj86_Index
0001A856 2268 0034                  		movea.l	$34(a0),a1
0001A85A 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001A860 6600                       		bne.s	loc_1A850
0001A862 10BC 003F                  		move.b	#$3F,(a0)
0001A866 117C 0000 0024             		move.b	#0,$24(a0)
0001A86C 4EF9 0000 D6C6             		jmp	DisplaySprite
0001A872                            ; ===========================================================================
0001A872                            
0001A872                            loc_1A850:
0001A872 117C 0000 001C             		move.b	#0,$1C(a0)
0001A878 4A28 0029                  		tst.b	$29(a0)
0001A87C 6700                       		beq.s	loc_1A86C
0001A87E 5428 0024                  		addq.b	#2,$24(a0)
0001A882 117C 0001 001C             		move.b	#1,$1C(a0)
0001A888 117C 003E 0028             		move.b	#$3E,$28(a0)
0001A88E                            
0001A88E                            loc_1A86C:
0001A88E 323C 0013                  		move.w	#$13,d1
0001A892 343C 0008                  		move.w	#8,d2
0001A896 363C 0011                  		move.w	#$11,d3
0001A89A 3828 0008                  		move.w	8(a0),d4
0001A89E 4EB9 0000 FA86             		jsr	SolidObject
0001A8A4 3038 D008                  		move.w	($FFFFD008).w,d0
0001A8A8 9068 0008                  		sub.w	8(a0),d0
0001A8AC 6B00                       		bmi.s	loc_1A89A
0001A8AE 0440 0140                  		subi.w	#$140,d0
0001A8B2 6B00                       		bmi.s	loc_1A89A
0001A8B4 4A28 0001                  		tst.b	1(a0)
0001A8B8 6A00 FBB0                  		bpl.w	Obj84_Delete
0001A8BC                            
0001A8BC                            loc_1A89A:
0001A8BC 43FA 0000                  		lea	Ani_obj86(pc),a1
0001A8C0 4EB9 0000 A7F2             		jsr	AnimateSprite
0001A8C6 4EF9 0000 D6C6             		jmp	DisplaySprite
0001A8CC                            ; ===========================================================================
0001A8CC                            
0001A8CC                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001A8CC 4A28 0029                  		tst.b	$29(a0)
0001A8D0 6700 0000                  		beq.w	loc_1A954
0001A8D4 4228 0029                  		clr.b	$29(a0)
0001A8D8 D068 0030                  		add.w	$30(a0),d0
0001A8DC 0240 001E                  		andi.w	#$1E,d0
0001A8E0 D4C0                       		adda.w	d0,a2
0001A8E2 5868 0030                  		addq.w	#4,$30(a0)
0001A8E6 4268 0032                  		clr.w	$32(a0)
0001A8EA 7403                       		moveq	#3,d2
0001A8EC                            
0001A8EC                            Obj86_Loop:
0001A8EC 4EB9 0000 DB62             		jsr	SingleObjLoad2
0001A8F2 6600 0000                  		bne.w	loc_1A954
0001A8F6 12BC 0086                  		move.b	#$86,(a1)
0001A8FA 3368 0008 0008             		move.w	8(a0),8(a1)
0001A900 337C 053C 000C             		move.w	#$53C,$C(a1)
0001A906 137C 0008 0024             		move.b	#8,$24(a1)
0001A90C 337C 2300 0002             		move.w	#$2300,2(a1)
0001A912 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001A91A 137C 000C 0016             		move.b	#$C,$16(a1)
0001A920 137C 000C 0017             		move.b	#$C,$17(a1)
0001A926 137C 0000 0020             		move.b	#0,$20(a1)
0001A92C 137C 0003 0018             		move.b	#3,$18(a1)
0001A932 337C 003E 0028             		move.w	#$3E,$28(a1)
0001A938 137C 0004 0001             		move.b	#4,1(a1)
0001A93E 08E9 0007 0001             		bset	#7,1(a1)
0001A944 2348 0034                  		move.l	a0,$34(a1)
0001A948 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001A94E 3228 0032                  		move.w	$32(a0),d1
0001A952 C3FC FFB1                  		muls.w	#-$4F,d1
0001A956 0641 2578                  		addi.w	#$2578,d1
0001A95A 0240 001F                  		andi.w	#$1F,d0
0001A95E 0440 0010                  		subi.w	#$10,d0
0001A962 D041                       		add.w	d1,d0
0001A964 3340 0030                  		move.w	d0,$30(a1)
0001A968 5268 0032                  		addq.w	#1,$32(a0)
0001A96C 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001A972 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001A976                            
0001A976                            loc_1A954:
0001A976 4A68 0032                  		tst.w	$32(a0)
0001A97A 6600                       		bne.s	loc_1A95E
0001A97C 5428 0024                  		addq.b	#2,$24(a0)
0001A980                            
0001A980                            loc_1A95E:
0001A980 6000 FF0C                  		bra.w	loc_1A86C
0001A984                            ; ===========================================================================
0001A984                            
0001A984                            loc_1A962:				; XREF: Obj86_Index
0001A984 117C 0002 001C             		move.b	#2,$1C(a0)
0001A98A 4A68 0038                  		tst.w	$38(a0)
0001A98E 6600                       		bne.s	loc_1A97E
0001A990 117C 0002 0024             		move.b	#2,$24(a0)
0001A996 2268 0034                  		movea.l	$34(a0),a1
0001A99A 337C FFFF 0032             		move.w	#-1,$32(a1)
0001A9A0                            
0001A9A0                            loc_1A97E:
0001A9A0 6000 FEEC                  		bra.w	loc_1A86C
0001A9A4                            ; ===========================================================================
0001A9A4                            
0001A9A4                            loc_1A982:				; XREF: Obj86_Index
0001A9A4 7000                       		moveq	#0,d0
0001A9A6 1028 0025                  		move.b	$25(a0),d0
0001A9AA 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001A9AE 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001A9B2 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001A9B6 4EB9 0000 A7F2             		jsr	AnimateSprite
0001A9BC 4EF9 0000 D6C6             		jmp	DisplaySprite
0001A9C2                            ; ===========================================================================
0001A9C2 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001A9C4 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001A9C6 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001A9C8                            ; ===========================================================================
0001A9C8                            
0001A9C8                            loc_1A9A6:				; XREF: Obj86_Index2
0001A9C8 3028 0030                  		move.w	$30(a0),d0
0001A9CC 9068 0008                  		sub.w	8(a0),d0
0001A9D0 E940                       		asl.w	#4,d0
0001A9D2 3140 0010                  		move.w	d0,$10(a0)
0001A9D6 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001A9DC 5428 0025                  		addq.b	#2,$25(a0)
0001A9E0 4E75                       		rts	
0001A9E2                            ; ===========================================================================
0001A9E2                            
0001A9E2                            loc_1A9C0:				; XREF: Obj86_Index2
0001A9E2 4A68 0010                  		tst.w	$10(a0)
0001A9E6 6700                       		beq.s	loc_1A9E6
0001A9E8 4EB9 0000 D6A0             		jsr	SpeedToPos
0001A9EE 3028 0008                  		move.w	8(a0),d0
0001A9F2 9068 0030                  		sub.w	$30(a0),d0
0001A9F6 6400                       		bcc.s	loc_1A9E6
0001A9F8 4268 0010                  		clr.w	$10(a0)
0001A9FC D168 0008                  		add.w	d0,8(a0)
0001AA00 2268 0034                  		movea.l	$34(a0),a1
0001AA04 5369 0032                  		subq.w	#1,$32(a1)
0001AA08                            
0001AA08                            loc_1A9E6:
0001AA08 117C 0000 001C             		move.b	#0,$1C(a0)
0001AA0E 5368 0028                  		subq.w	#1,$28(a0)
0001AA12 6600                       		bne.s	locret_1AA1C
0001AA14 5428 0025                  		addq.b	#2,$25(a0)
0001AA18 117C 0001 001C             		move.b	#1,$1C(a0)
0001AA1E 117C 009A 0020             		move.b	#$9A,$20(a0)
0001AA24 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AA2A 7000                       		moveq	#0,d0
0001AA2C 3038 D008                  		move.w	($FFFFD008).w,d0
0001AA30 9068 0008                  		sub.w	8(a0),d0
0001AA34 3140 0010                  		move.w	d0,$10(a0)
0001AA38 317C 0140 0012             		move.w	#$140,$12(a0)
0001AA3E                            
0001AA3E                            locret_1AA1C:
0001AA3E 4E75                       		rts	
0001AA40                            ; ===========================================================================
0001AA40                            
0001AA40                            loc_1AA1E:				; XREF: Obj86_Index2
0001AA40 4EB9 0000 D6A0             		jsr	SpeedToPos
0001AA46 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001AA4C 6400                       		bcc.s	loc_1AA34
0001AA4E 5368 0028                  		subq.w	#1,$28(a0)
0001AA52 6700                       		beq.s	loc_1AA34
0001AA54 4E75                       		rts	
0001AA56                            ; ===========================================================================
0001AA56                            
0001AA56                            loc_1AA34:
0001AA56 2268 0034                  		movea.l	$34(a0),a1
0001AA5A 5369 0038                  		subq.w	#1,$38(a1)
0001AA5E 6000 FA0A                  		bra.w	Obj84_Delete
0001AA62                            ; ===========================================================================
0001AA62                            Ani_obj86:
0001AA62                            	include "_anim\obj86.asm"
0001AA62                            ; ---------------------------------------------------------------------------
0001AA62                            ; Animation script - energy ball launcher (FZ)
0001AA62                            ; ---------------------------------------------------------------------------
0001AA62 0000                       		dc.w byte_1AA46-Ani_obj86
0001AA64 0000                       		dc.w byte_1AA4A-Ani_obj86
0001AA66 0000                       		dc.w byte_1AA50-Ani_obj86
0001AA68 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001AA6C 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001AA72 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001AA78                            		even
0001AA78                            		even
0001AA78                            
0001AA78                            ; ---------------------------------------------------------------------------
0001AA78                            ; Sprite mappings - energy ball	launcher (FZ)
0001AA78                            ; ---------------------------------------------------------------------------
0001AA78                            Map_obj86:
0001AA78                            	include "_maps\obj86.asm"
0001AA78                            ; ---------------------------------------------------------------------------
0001AA78                            ; Sprite mappings - energy ball	launcher (FZ)
0001AA78                            ; ---------------------------------------------------------------------------
0001AA78 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001AA7C 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001AA80 01                         byte_1AA5E:	dc.b 1
0001AA81 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001AA86 01                         byte_1AA64:	dc.b 1
0001AA87 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001AA8C 01                         byte_1AA6A:	dc.b 1
0001AA8D F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001AA92 01                         byte_1AA70:	dc.b 1
0001AA93 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001AA98                            		even
0001AA98                            		even
0001AA98                            
0001AA98                            Ani_obj86a:
0001AA98                            	include "_anim\obj86a.asm"
0001AA98                            ; ---------------------------------------------------------------------------
0001AA98                            ; Animation script - energy balls (FZ)
0001AA98                            ; ---------------------------------------------------------------------------
0001AA98 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001AA9A 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001AA9C 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001AAAB 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001AABA 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001AABE 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001AAC8                            		even
0001AAC8                            		even
0001AAC8                            
0001AAC8                            ; ---------------------------------------------------------------------------
0001AAC8                            ; Sprite mappings - energy balls (FZ)
0001AAC8                            ; ---------------------------------------------------------------------------
0001AAC8                            Map_obj86a:
0001AAC8                            	include "_maps\obj86a.asm"
0001AAC8                            ; ---------------------------------------------------------------------------
0001AAC8                            ; Sprite mappings - energy balls (FZ)
0001AAC8                            ; ---------------------------------------------------------------------------
0001AAC8 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001AACC 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001AAD0 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001AAD4 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001AAD8 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001AADC 0000                       		dc.w byte_1AB20-Map_obj86a
0001AADE 02                         byte_1AABC:	dc.b 2
0001AADF F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001AAE4 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001AAE9 02                         byte_1AAC7:	dc.b 2
0001AAEA F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001AAEF F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001AAF4 02                         byte_1AAD2:	dc.b 2
0001AAF5 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001AAFA 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001AAFF 02                         byte_1AADD:	dc.b 2
0001AB00 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001AB05 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001AB0A 02                         byte_1AAE8:	dc.b 2
0001AB0B F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001AB10 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001AB15 02                         byte_1AAF3:	dc.b 2
0001AB16 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001AB1B F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001AB20 01                         byte_1AAFE:	dc.b 1
0001AB21 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001AB26 01                         byte_1AB04:	dc.b 1
0001AB27 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001AB2C 02                         byte_1AB0A:	dc.b 2
0001AB2D F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001AB32 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001AB37 02                         byte_1AB15:	dc.b 2
0001AB38 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001AB3D F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001AB42 00                         byte_1AB20:	dc.b 0
0001AB44 00                         		even
0001AB44 00                         		even
0001AB44                            
0001AB44                            ; ===========================================================================
0001AB44                            ; ---------------------------------------------------------------------------
0001AB44                            ; Object 3E - prison capsule
0001AB44                            ; ---------------------------------------------------------------------------
0001AB44                            
0001AB44                            Obj3E:					; XREF: Obj_Index
0001AB44 7000                       		moveq	#0,d0
0001AB46 1028 0024                  		move.b	$24(a0),d0
0001AB4A 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001AB4E 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001AB52 3028 0008                  		move.w	8(a0),d0
0001AB56 0240 FF80                  		andi.w	#$FF80,d0
0001AB5A 3238 F700                  		move.w	($FFFFF700).w,d1
0001AB5E 0441 0080                  		subi.w	#$80,d1
0001AB62 0241 FF80                  		andi.w	#$FF80,d1
0001AB66 9041                       		sub.w	d1,d0
0001AB68 0C40 0280                  		cmpi.w	#$280,d0
0001AB6C 6200                       		bhi.s	Obj3E_Delete
0001AB6E 4EF9 0000 D6C6             		jmp	DisplaySprite
0001AB74                            ; ===========================================================================
0001AB74                            
0001AB74                            Obj3E_Delete:
0001AB74 4EF9 0000 D702             		jmp	DeleteObject
0001AB7A                            ; ===========================================================================
0001AB7A 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001AB7C 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001AB7E 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001AB80 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AB82 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AB84 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AB86 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001AB88 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001AB8A                            
0001AB8A 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001AB8E 040C 0501                  		dc.b 4,	$C, 5, 1
0001AB92 0610 0403                  		dc.b 6,	$10, 4,	3
0001AB96 0810 0305                  		dc.b 8,	$10, 3,	5
0001AB9A                            ; ===========================================================================
0001AB9A                            
0001AB9A                            Obj3E_Main:				; XREF: Obj3E_Index
0001AB9A 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001ABA2 317C 049D 0002             		move.w	#$49D,2(a0)
0001ABA8 117C 0004 0001             		move.b	#4,1(a0)
0001ABAE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001ABB4 7000                       		moveq	#0,d0
0001ABB6 1028 0028                  		move.b	$28(a0),d0
0001ABBA E548                       		lsl.w	#2,d0
0001ABBC 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001ABC0 1159 0024                  		move.b	(a1)+,$24(a0)
0001ABC4 1159 0019                  		move.b	(a1)+,$19(a0)
0001ABC8 1159 0018                  		move.b	(a1)+,$18(a0)
0001ABCC 1159 001A                  		move.b	(a1)+,$1A(a0)
0001ABD0 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001ABD4 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001ABD6 117C 0006 0020             		move.b	#6,$20(a0)
0001ABDC 117C 0008 0021             		move.b	#8,$21(a0)
0001ABE2                            
0001ABE2                            Obj3E_Not02:
0001ABE2 4E75                       		rts	
0001ABE4                            ; ===========================================================================
0001ABE4                            
0001ABE4                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001ABE4 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001ABEA 6700                       		beq.s	Obj3E_ChkOpened
0001ABEC 323C 002B                  		move.w	#$2B,d1
0001ABF0 343C 0018                  		move.w	#$18,d2
0001ABF4 363C 0018                  		move.w	#$18,d3
0001ABF8 3828 0008                  		move.w	8(a0),d4
0001ABFC 4EF9 0000 FA86             		jmp	SolidObject
0001AC02                            ; ===========================================================================
0001AC02                            
0001AC02                            Obj3E_ChkOpened:
0001AC02 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001AC06 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001AC08 4228 0025                  		clr.b	$25(a0)
0001AC0C 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001AC12 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001AC18                            
0001AC18                            Obj3E_DoOpen:
0001AC18 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001AC1E 4E75                       		rts	
0001AC20                            ; ===========================================================================
0001AC20                            
0001AC20                            Obj3E_Switched:				; XREF: Obj3E_Index
0001AC20 323C 0017                  		move.w	#$17,d1
0001AC24 343C 0008                  		move.w	#8,d2
0001AC28 363C 0008                  		move.w	#8,d3
0001AC2C 3828 0008                  		move.w	8(a0),d4
0001AC30 4EB9 0000 FA86             		jsr	SolidObject
0001AC36 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001AC3C 4EB9 0000 A7F2             		jsr	AnimateSprite
0001AC42 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001AC48 4A28 0025                  		tst.b	$25(a0)
0001AC4C 6700                       		beq.s	locret_1AC60
0001AC4E 5068 000C                  		addq.w	#8,$C(a0)
0001AC52 117C 000A 0024             		move.b	#$A,$24(a0)
0001AC58 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001AC5E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001AC62 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001AC66 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001AC6C 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001AC72 4228 0025                  		clr.b	$25(a0)
0001AC76 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001AC7C 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001AC82                            
0001AC82                            locret_1AC60:
0001AC82 4E75                       		rts	
0001AC84                            ; ===========================================================================
0001AC84                            
0001AC84                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001AC84 7007                       		moveq	#7,d0
0001AC86 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001AC8A 6600                       		bne.s	loc_1ACA0
0001AC8C 4EB9 0000 DB4C             		jsr	SingleObjLoad
0001AC92 6600                       		bne.s	loc_1ACA0
0001AC94 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001AC98 3368 0008 0008             		move.w	8(a0),8(a1)
0001AC9E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001ACA4 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001ACAA 7200                       		moveq	#0,d1
0001ACAC 1200                       		move.b	d0,d1
0001ACAE E409                       		lsr.b	#2,d1
0001ACB0 0441 0020                  		subi.w	#$20,d1
0001ACB4 D369 0008                  		add.w	d1,8(a1)
0001ACB8 E048                       		lsr.w	#8,d0
0001ACBA E608                       		lsr.b	#3,d0
0001ACBC D169 000C                  		add.w	d0,$C(a1)
0001ACC0                            
0001ACC0                            loc_1ACA0:
0001ACC0 5368 001E                  		subq.w	#1,$1E(a0)
0001ACC4 6700                       		beq.s	Obj3E_MakeAnimal
0001ACC6 4E75                       		rts	
0001ACC8                            ; ===========================================================================
0001ACC8                            
0001ACC8                            Obj3E_MakeAnimal:
0001ACC8 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001ACCE 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001ACD4 117C 0006 001A             		move.b	#6,$1A(a0)
0001ACDA 317C 0096 001E             		move.w	#$96,$1E(a0)
0001ACE0 0668 0020 000C             		addi.w	#$20,$C(a0)
0001ACE6 7C07                       		moveq	#7,d6
0001ACE8 3A3C 009A                  		move.w	#$9A,d5
0001ACEC 78E4                       		moveq	#-$1C,d4
0001ACEE                            
0001ACEE                            Obj3E_Loop:
0001ACEE 4EB9 0000 DB4C             		jsr	SingleObjLoad
0001ACF4 6600                       		bne.s	locret_1ACF8
0001ACF6 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001ACFA 3368 0008 0008             		move.w	8(a0),8(a1)
0001AD00 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AD06 D969 0008                  		add.w	d4,8(a1)
0001AD0A 5E44                       		addq.w	#7,d4
0001AD0C 3345 0036                  		move.w	d5,$36(a1)
0001AD10 5145                       		subq.w	#8,d5
0001AD12 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001AD16                            
0001AD16                            locret_1ACF8:
0001AD16 4E75                       		rts	
0001AD18                            ; ===========================================================================
0001AD18                            
0001AD18                            Obj3E_Animals:				; XREF: Obj3E_Index
0001AD18 7007                       		moveq	#7,d0
0001AD1A C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001AD1E 6600                       		bne.s	loc_1AD38
0001AD20 4EB9 0000 DB4C             		jsr	SingleObjLoad
0001AD26 6600                       		bne.s	loc_1AD38
0001AD28 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001AD2C 3368 0008 0008             		move.w	8(a0),8(a1)
0001AD32 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AD38 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001AD3E 0240 001F                  		andi.w	#$1F,d0
0001AD42 5D40                       		subq.w	#6,d0
0001AD44 4A41                       		tst.w	d1
0001AD46 6A00                       		bpl.s	loc_1AD2E
0001AD48 4440                       		neg.w	d0
0001AD4A                            
0001AD4A                            loc_1AD2E:
0001AD4A D169 0008                  		add.w	d0,8(a1)
0001AD4E 337C 000C 0036             		move.w	#$C,$36(a1)
0001AD54                            
0001AD54                            loc_1AD38:
0001AD54 5368 001E                  		subq.w	#1,$1E(a0)
0001AD58 6600                       		bne.s	locret_1AD48
0001AD5A 5428 0024                  		addq.b	#2,$24(a0)
0001AD5E 317C 00B4 001E             		move.w	#180,$1E(a0)
0001AD64                            
0001AD64                            locret_1AD48:
0001AD64 4E75                       		rts	
0001AD66                            ; ===========================================================================
0001AD66                            
0001AD66                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001AD66 703E                       		moveq	#$3E,d0
0001AD68 7228                       		moveq	#$28,d1
0001AD6A 7440                       		moveq	#$40,d2
0001AD6C 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001AD70                            
0001AD70                            Obj3E_FindObj28:
0001AD70 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001AD72 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001AD74 D2C2                       		adda.w	d2,a1		; next object RAM
0001AD76 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001AD7A                            
0001AD7A 4EB9 0000 ED42             		jsr	GotThroughAct
0001AD80 4EF9 0000 D702             		jmp	DeleteObject
0001AD86                            ; ===========================================================================
0001AD86                            
0001AD86                            Obj3E_Obj28Found:
0001AD86 4E75                       		rts	
0001AD88                            ; ===========================================================================
0001AD88                            Ani_obj3E:
0001AD88                            	include "_anim\obj3E.asm"
0001AD88                            ; ---------------------------------------------------------------------------
0001AD88                            ; Animation script - prison capsule
0001AD88                            ; ---------------------------------------------------------------------------
0001AD88 0000                       		dc.w byte_1AD70-Ani_obj3E
0001AD8A 0000                       		dc.w byte_1AD70-Ani_obj3E
0001AD8C 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001AD90                            		even
0001AD90                            		even
0001AD90                            
0001AD90                            ; ---------------------------------------------------------------------------
0001AD90                            ; Sprite mappings - prison capsule
0001AD90                            ; ---------------------------------------------------------------------------
0001AD90                            Map_obj3E:
0001AD90                            	include "_maps\obj3E.asm"
0001AD90                            ; ---------------------------------------------------------------------------
0001AD90                            ; Sprite mappings - prison capsule
0001AD90                            ; ---------------------------------------------------------------------------
0001AD90 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001AD94 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001AD98 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001AD9C 0000                       		dc.w byte_1ADE2-Map_obj3E
0001AD9E 07                         byte_1AD82:	dc.b 7
0001AD9F E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001ADA4 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001ADA9 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001ADAE F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001ADB3 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001ADB8 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001ADBD 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001ADC2 01                         byte_1ADA6:	dc.b 1
0001ADC3 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001ADC8 06                         byte_1ADAC:	dc.b 6
0001ADC9 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001ADCE 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001ADD3 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001ADD8 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001ADDD 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001ADE2 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001ADE7 01                         byte_1ADCB:	dc.b 1
0001ADE8 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001ADED 02                         byte_1ADD1:	dc.b 2
0001ADEE E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001ADF3 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001ADF8 01                         byte_1ADDC:	dc.b 1
0001ADF9 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001ADFE 00                         byte_1ADE2:	dc.b 0
0001AE00 00                         		even
0001AE00 00                         		even
0001AE00                            
0001AE00                            ; ---------------------------------------------------------------------------
0001AE00                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001AE00                            ; ---------------------------------------------------------------------------
0001AE00                            
0001AE00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AE00                            
0001AE00                            
0001AE00                            TouchResponse:				; XREF: Obj01
0001AE00 4E71                       		nop	
0001AE02 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001AE06 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001AE0A 5142                       		subq.w	#8,d2
0001AE0C 7A00                       		moveq	#0,d5
0001AE0E 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001AE12 5705                       		subq.b	#3,d5
0001AE14 9645                       		sub.w	d5,d3
0001AE16 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001AE1C 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001AE1E 0643 000C                  		addi.w	#$C,d3
0001AE22 7A0A                       		moveq	#$A,d5
0001AE24                            
0001AE24                            Touch_NoDuck:
0001AE24 383C 0010                  		move.w	#$10,d4
0001AE28 DA45                       		add.w	d5,d5
0001AE2A 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001AE2E 3C3C 005F                  		move.w	#$5F,d6
0001AE32                            
0001AE32                            Touch_Loop:
0001AE32 4A29 0001                  		tst.b	1(a1)
0001AE36 6A00                       		bpl.s	Touch_NextObj
0001AE38 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001AE3C 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001AE3E                            
0001AE3E                            Touch_NextObj:
0001AE3E 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001AE42 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001AE46                            
0001AE46 7000                       		moveq	#0,d0
0001AE48 4E75                       		rts	
0001AE4A                            ; ===========================================================================
0001AE4A 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001AE4C 0C14                       		dc.b   $C, $14
0001AE4E 140C                       		dc.b  $14,  $C
0001AE50 0410                       		dc.b	4, $10
0001AE52 0C12                       		dc.b   $C, $12
0001AE54 1010                       		dc.b  $10, $10
0001AE56 0606                       		dc.b	6,   6
0001AE58 180C                       		dc.b  $18,  $C
0001AE5A 0C10                       		dc.b   $C, $10
0001AE5C 100C                       		dc.b  $10,  $C
0001AE5E 0808                       		dc.b	8,   8
0001AE60 1410                       		dc.b  $14, $10
0001AE62 1408                       		dc.b  $14,   8
0001AE64 0E0E                       		dc.b   $E,  $E
0001AE66 1818                       		dc.b  $18, $18
0001AE68 2810                       		dc.b  $28, $10
0001AE6A 1018                       		dc.b  $10, $18
0001AE6C 0810                       		dc.b	8, $10
0001AE6E 2070                       		dc.b  $20, $70
0001AE70 4020                       		dc.b  $40, $20
0001AE72 8020                       		dc.b  $80, $20
0001AE74 2020                       		dc.b  $20, $20
0001AE76 0808                       		dc.b	8,   8
0001AE78 0404                       		dc.b	4,   4
0001AE7A 2008                       		dc.b  $20,   8
0001AE7C 0C0C                       		dc.b   $C,  $C
0001AE7E 0804                       		dc.b	8,   4
0001AE80 1804                       		dc.b  $18,   4
0001AE82 2804                       		dc.b  $28,   4
0001AE84 0408                       		dc.b	4,   8
0001AE86 0418                       		dc.b	4, $18
0001AE88 0428                       		dc.b	4, $28
0001AE8A 0420                       		dc.b	4, $20
0001AE8C 1818                       		dc.b  $18, $18
0001AE8E 0C18                       		dc.b   $C, $18
0001AE90 4808                       		dc.b  $48,   8
0001AE92                            ; ===========================================================================
0001AE92                            
0001AE92                            Touch_Height:				; XREF: TouchResponse
0001AE92 0240 003F                  		andi.w	#$3F,d0
0001AE96 D040                       		add.w	d0,d0
0001AE98 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001AE9C 7200                       		moveq	#0,d1
0001AE9E 121A                       		move.b	(a2)+,d1
0001AEA0 3029 0008                  		move.w	8(a1),d0
0001AEA4 9041                       		sub.w	d1,d0
0001AEA6 9042                       		sub.w	d2,d0
0001AEA8 6400                       		bcc.s	loc_1AE98
0001AEAA D241                       		add.w	d1,d1
0001AEAC D041                       		add.w	d1,d0
0001AEAE 6500                       		bcs.s	Touch_Width
0001AEB0 6000 FF8C                  		bra.w	Touch_NextObj
0001AEB4                            ; ===========================================================================
0001AEB4                            
0001AEB4                            loc_1AE98:
0001AEB4 B044                       		cmp.w	d4,d0
0001AEB6 6200 FF86                  		bhi.w	Touch_NextObj
0001AEBA                            
0001AEBA                            Touch_Width:
0001AEBA 7200                       		moveq	#0,d1
0001AEBC 121A                       		move.b	(a2)+,d1
0001AEBE 3029 000C                  		move.w	$C(a1),d0
0001AEC2 9041                       		sub.w	d1,d0
0001AEC4 9043                       		sub.w	d3,d0
0001AEC6 6400                       		bcc.s	loc_1AEB6
0001AEC8 D241                       		add.w	d1,d1
0001AECA D240                       		add.w	d0,d1
0001AECC 6500                       		bcs.s	Touch_ChkValue
0001AECE 6000 FF6E                  		bra.w	Touch_NextObj
0001AED2                            ; ===========================================================================
0001AED2                            
0001AED2                            loc_1AEB6:
0001AED2 B045                       		cmp.w	d5,d0
0001AED4 6200 FF68                  		bhi.w	Touch_NextObj
0001AED8                            
0001AED8                            Touch_ChkValue:
0001AED8 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001AEDC 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001AEE0 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001AEE4 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001AEE8 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001AEEC 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001AEEE 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001AEF2                            
0001AEF2                            ; touch	response is $40-$7F
0001AEF2                            
0001AEF2 1029 0020                  		move.b	$20(a1),d0
0001AEF6 0200 003F                  		andi.b	#$3F,d0
0001AEFA 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001AEFE 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001AF00 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001AF06 6400 0000                  		bcc.w	locret_1AEF2
0001AF0A 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001AF0E                            
0001AF0E                            locret_1AEF2:
0001AF0E 4E75                       		rts	
0001AF10                            ; ===========================================================================
0001AF10                            
0001AF10                            Touch_Monitor:
0001AF10 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001AF14 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001AF16 3028 000C                  		move.w	$C(a0),d0
0001AF1A 0440 0010                  		subi.w	#$10,d0
0001AF1E B069 000C                  		cmp.w	$C(a1),d0
0001AF22 6500                       		bcs.s	locret_1AF2E
0001AF24 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001AF28 337C FE80 0012             		move.w	#-$180,$12(a1)
0001AF2E 4A29 0025                  		tst.b	$25(a1)
0001AF32 6600                       		bne.s	locret_1AF2E
0001AF34 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001AF38 4E75                       		rts	
0001AF3A                            ; ===========================================================================
0001AF3A                            
0001AF3A                            loc_1AF1E:
0001AF3A 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001AF40 6600                       		bne.s	locret_1AF2E
0001AF42 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001AF46 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001AF4A                            
0001AF4A                            locret_1AF2E:
0001AF4A 4E75                       		rts	
0001AF4C                            ; ===========================================================================
0001AF4C                            
0001AF4C                            Touch_Enemy:				; XREF: Touch_ChkValue
0001AF4C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001AF50 6600                       		bne.s	loc_1AF40	; if yes, branch
0001AF52 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001AF58 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001AF5C                            
0001AF5C                            loc_1AF40:
0001AF5C 4A29 0021                  		tst.b	$21(a1)
0001AF60 6700                       		beq.s	Touch_KillEnemy
0001AF62 4468 0010                  		neg.w	$10(a0)
0001AF66 4468 0012                  		neg.w	$12(a0)
0001AF6A E0E8 0010                  		asr	$10(a0)
0001AF6E E0E8 0012                  		asr	$12(a0)
0001AF72 137C 0000 0020             		move.b	#0,$20(a1)
0001AF78 5329 0021                  		subq.b	#1,$21(a1)
0001AF7C 6600                       		bne.s	locret_1AF68
0001AF7E 08E9 0007 0022             		bset	#7,$22(a1)
0001AF84                            
0001AF84                            locret_1AF68:
0001AF84 4E75                       		rts	
0001AF86                            ; ===========================================================================
0001AF86                            
0001AF86                            Touch_KillEnemy:
0001AF86 08E9 0007 0022             		bset	#7,$22(a1)
0001AF8C 7000                       		moveq	#0,d0
0001AF8E 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001AF92 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001AF96 0C40 0006                  		cmpi.w	#6,d0
0001AF9A 6500                       		bcs.s	loc_1AF82
0001AF9C 7006                       		moveq	#6,d0
0001AF9E                            
0001AF9E                            loc_1AF82:
0001AF9E 3340 003E                  		move.w	d0,$3E(a1)
0001AFA2 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001AFA6 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001AFAC 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001AFAE 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001AFB2 337C 000A 003E             		move.w	#$A,$3E(a1)
0001AFB8                            
0001AFB8                            loc_1AF9C:
0001AFB8 6100 0000                  		bsr.w	AddPoints
0001AFBC 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001AFC0 137C 0000 0024             		move.b	#0,$24(a1)
0001AFC6 4A68 0012                  		tst.w	$12(a0)
0001AFCA 6B00                       		bmi.s	loc_1AFC2
0001AFCC 3028 000C                  		move.w	$C(a0),d0
0001AFD0 B069 000C                  		cmp.w	$C(a1),d0
0001AFD4 6400                       		bcc.s	loc_1AFCA
0001AFD6 4468 0012                  		neg.w	$12(a0)
0001AFDA 4E75                       		rts	
0001AFDC                            ; ===========================================================================
0001AFDC                            
0001AFDC                            loc_1AFC2:
0001AFDC 0668 0100 0012             		addi.w	#$100,$12(a0)
0001AFE2 4E75                       		rts	
0001AFE4                            ; ===========================================================================
0001AFE4                            
0001AFE4                            loc_1AFCA:
0001AFE4 0468 0100 0012             		subi.w	#$100,$12(a0)
0001AFEA 4E75                       		rts	
0001AFEC                            ; ===========================================================================
0001AFEC 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001AFF4                            ; ===========================================================================
0001AFF4                            
0001AFF4                            loc_1AFDA:				; XREF: Touch_CatKiller
0001AFF4 08E9 0007 0022             		bset	#7,$22(a1)
0001AFFA                            
0001AFFA                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001AFFA 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001AFFE 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B000                            
0001B000                            loc_1AFE6:				; XREF: Touch_Hurt
0001B000 70FF                       		moveq	#-1,d0
0001B002 4E75                       		rts	
0001B004                            ; ===========================================================================
0001B004                            
0001B004                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B004 4E71                       		nop	
0001B006 4A68 0030                  		tst.w	$30(a0)
0001B00A 66F4                       		bne.s	loc_1AFE6
0001B00C 2449                       		movea.l	a1,a2
0001B00E                            
0001B00E                            ; End of function TouchResponse
0001B00E                            ; continue straight to HurtSonic
0001B00E                            
0001B00E                            ; ---------------------------------------------------------------------------
0001B00E                            ; Hurting Sonic	subroutine
0001B00E                            ; ---------------------------------------------------------------------------
0001B00E                            
0001B00E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B00E                            
0001B00E                            
0001B00E                            HurtSonic:
0001B00E 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B012 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B014 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B018 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B01C 4EB9 0000 DB4C             		jsr	SingleObjLoad
0001B022 6600                       		bne.s	Hurt_Shield
0001B024 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B028 3368 0008 0008             		move.w	8(a0),8(a1)
0001B02E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B034                            
0001B034                            Hurt_Shield:
0001B034 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B03A 117C 0004 0024             		move.b	#4,$24(a0)
0001B040 6100 87D6                  		bsr.w	Sonic_ResetOnFloor
0001B044 08E8 0001 0022             		bset	#1,$22(a0)
0001B04A 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B050 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B056 0828 0006 0022             		btst	#6,$22(a0)
0001B05C 6700                       		beq.s	Hurt_Reverse
0001B05E 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B064 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B06A                            
0001B06A                            Hurt_Reverse:
0001B06A 3028 0008                  		move.w	8(a0),d0
0001B06E B06A 0008                  		cmp.w	8(a2),d0
0001B072 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B074 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B078                            
0001B078                            Hurt_ChkSpikes:
0001B078 317C 0000 0014             		move.w	#0,$14(a0)
0001B07E 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B084 317C 0078 0030             		move.w	#$78,$30(a0)
0001B08A 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B08E 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B092 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B094 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B098 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B09A 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B09E                            
0001B09E                            Hurt_Sound:
0001B09E 4EB9 0000 139C             		jsr	(PlaySound_Special).l
0001B0A4 70FF                       		moveq	#-1,d0
0001B0A6 4E75                       		rts	
0001B0A8                            ; ===========================================================================
0001B0A8                            
0001B0A8                            Hurt_NoRings:
0001B0A8 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B0AC 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B0B0                            ; End of function HurtSonic
0001B0B0                            
0001B0B0                            ; ---------------------------------------------------------------------------
0001B0B0                            ; Subroutine to	kill Sonic
0001B0B0                            ; ---------------------------------------------------------------------------
0001B0B0                            
0001B0B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B0B0                            
0001B0B0                            
0001B0B0                            KillSonic:
0001B0B0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B0B4 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B0B6 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B0BC 117C 0006 0024             		move.b	#6,$24(a0)
0001B0C2 6100 8754                  		bsr.w	Sonic_ResetOnFloor
0001B0C6 08E8 0001 0022             		bset	#1,$22(a0)
0001B0CC 317C F900 0012             		move.w	#-$700,$12(a0)
0001B0D2 317C 0000 0010             		move.w	#0,$10(a0)
0001B0D8 317C 0000 0014             		move.w	#0,$14(a0)
0001B0DE 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B0E4 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B0EA 08E8 0007 0002             		bset	#7,2(a0)
0001B0F0 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B0F4 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B0F8 6600                       		bne.s	Kill_Sound
0001B0FA 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B0FE                            
0001B0FE                            Kill_Sound:
0001B0FE 4EB9 0000 139C             		jsr	(PlaySound_Special).l
0001B104                            
0001B104                            Kill_NoDeath:
0001B104 70FF                       		moveq	#-1,d0
0001B106 4E75                       		rts	
0001B108                            ; End of function KillSonic
0001B108                            
0001B108                            
0001B108                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B108                            
0001B108                            
0001B108                            Touch_Special:				; XREF: Touch_ChkValue
0001B108 1229 0020                  		move.b	$20(a1),d1
0001B10C 0201 003F                  		andi.b	#$3F,d1
0001B110 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B114 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B116 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B11A 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B11C 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B120 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B122 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B126 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B128 4E75                       		rts	
0001B12A                            ; ===========================================================================
0001B12A                            
0001B12A                            Touch_CatKiller:			; XREF: Touch_Special
0001B12A 6000 FEC8                  		bra.w	loc_1AFDA
0001B12E                            ; ===========================================================================
0001B12E                            
0001B12E                            Touch_Yadrin:				; XREF: Touch_Special
0001B12E 9A40                       		sub.w	d0,d5
0001B130 0C45 0008                  		cmpi.w	#8,d5
0001B134 6400                       		bcc.s	loc_1B144
0001B136 3029 0008                  		move.w	8(a1),d0
0001B13A 5940                       		subq.w	#4,d0
0001B13C 0829 0000 0022             		btst	#0,$22(a1)
0001B142 6700                       		beq.s	loc_1B130
0001B144 0440 0010                  		subi.w	#$10,d0
0001B148                            
0001B148                            loc_1B130:
0001B148 9042                       		sub.w	d2,d0
0001B14A 6400                       		bcc.s	loc_1B13C
0001B14C 0640 0018                  		addi.w	#$18,d0
0001B150 6500                       		bcs.s	loc_1B140
0001B152 6000                       		bra.s	loc_1B144
0001B154                            ; ===========================================================================
0001B154                            
0001B154                            loc_1B13C:
0001B154 B044                       		cmp.w	d4,d0
0001B156 6200                       		bhi.s	loc_1B144
0001B158                            
0001B158                            loc_1B140:
0001B158 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B15C                            ; ===========================================================================
0001B15C                            
0001B15C                            loc_1B144:
0001B15C 6000 FDEE                  		bra.w	Touch_Enemy
0001B160                            ; ===========================================================================
0001B160                            
0001B160                            Touch_D7orE1:				; XREF: Touch_Special
0001B160 5229 0021                  		addq.b	#1,$21(a1)
0001B164 4E75                       		rts	
0001B166                            ; End of function Touch_Special
0001B166                            
0001B166                            ; ---------------------------------------------------------------------------
0001B166                            ; Subroutine to	show the special stage layout
0001B166                            ; ---------------------------------------------------------------------------
0001B166                            
0001B166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B166                            
0001B166                            
0001B166                            SS_ShowLayout:				; XREF: SpecialStage
0001B166 6100 0000                  		bsr.w	SS_AniWallsRings
0001B16A 6100 0000                  		bsr.w	SS_AniItems
0001B16E 3F05                       		move.w	d5,-(sp)
0001B170 43F8 8000                  		lea	($FFFF8000).w,a1
0001B174 1038 F780                  		move.b	($FFFFF780).w,d0
0001B178 0200 00FC                  		andi.b	#$FC,d0
0001B17C 4EB9 0000 29DA             		jsr	(CalcSine).l
0001B182 3800                       		move.w	d0,d4
0001B184 3A01                       		move.w	d1,d5
0001B186 C9FC 0018                  		muls.w	#$18,d4
0001B18A CBFC 0018                  		muls.w	#$18,d5
0001B18E 7400                       		moveq	#0,d2
0001B190 3438 F700                  		move.w	($FFFFF700).w,d2
0001B194 84FC 0018                  		divu.w	#$18,d2
0001B198 4842                       		swap	d2
0001B19A 4442                       		neg.w	d2
0001B19C 0642 FF4C                  		addi.w	#-$B4,d2
0001B1A0 7600                       		moveq	#0,d3
0001B1A2 3638 F704                  		move.w	($FFFFF704).w,d3
0001B1A6 86FC 0018                  		divu.w	#$18,d3
0001B1AA 4843                       		swap	d3
0001B1AC 4443                       		neg.w	d3
0001B1AE 0643 FF4C                  		addi.w	#-$B4,d3
0001B1B2 3E3C 000F                  		move.w	#$F,d7
0001B1B6                            
0001B1B6                            loc_1B19E:
0001B1B6 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B1BA 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B1BE 4440                       		neg.w	d0
0001B1C0 C3C2                       		muls.w	d2,d1
0001B1C2 C1C3                       		muls.w	d3,d0
0001B1C4 2C00                       		move.l	d0,d6
0001B1C6 DC81                       		add.l	d1,d6
0001B1C8 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B1CC C1C2                       		muls.w	d2,d0
0001B1CE C3C3                       		muls.w	d3,d1
0001B1D0 D280                       		add.l	d0,d1
0001B1D2 2406                       		move.l	d6,d2
0001B1D4 3C3C 000F                  		move.w	#$F,d6
0001B1D8                            
0001B1D8                            loc_1B1C0:
0001B1D8 2002                       		move.l	d2,d0
0001B1DA E080                       		asr.l	#8,d0
0001B1DC 32C0                       		move.w	d0,(a1)+
0001B1DE 2001                       		move.l	d1,d0
0001B1E0 E080                       		asr.l	#8,d0
0001B1E2 32C0                       		move.w	d0,(a1)+
0001B1E4 D485                       		add.l	d5,d2
0001B1E6 D284                       		add.l	d4,d1
0001B1E8 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B1EC                            
0001B1EC 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B1F0 0643 0018                  		addi.w	#$18,d3
0001B1F4 51CF FFC0                  		dbf	d7,loc_1B19E
0001B1F8                            
0001B1F8 3A1F                       		move.w	(sp)+,d5
0001B1FA 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B200 7000                       		moveq	#0,d0
0001B202 3038 F704                  		move.w	($FFFFF704).w,d0
0001B206 80FC 0018                  		divu.w	#$18,d0
0001B20A C0FC 0080                  		mulu.w	#$80,d0
0001B20E D1C0                       		adda.l	d0,a0
0001B210 7000                       		moveq	#0,d0
0001B212 3038 F700                  		move.w	($FFFFF700).w,d0
0001B216 80FC 0018                  		divu.w	#$18,d0
0001B21A D0C0                       		adda.w	d0,a0
0001B21C 49F8 8000                  		lea	($FFFF8000).w,a4
0001B220 3E3C 000F                  		move.w	#$F,d7
0001B224                            
0001B224                            loc_1B20C:
0001B224 3C3C 000F                  		move.w	#$F,d6
0001B228                            
0001B228                            loc_1B210:
0001B228 7000                       		moveq	#0,d0
0001B22A 1018                       		move.b	(a0)+,d0
0001B22C 6700                       		beq.s	loc_1B268
0001B22E 0C00 004E                  		cmpi.b	#$4E,d0
0001B232 6200                       		bhi.s	loc_1B268
0001B234 3614                       		move.w	(a4),d3
0001B236 0643 0120                  		addi.w	#$120,d3
0001B23A 0C43 0070                  		cmpi.w	#$70,d3
0001B23E 6500                       		bcs.s	loc_1B268
0001B240 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B244 6400                       		bcc.s	loc_1B268
0001B246 342C 0002                  		move.w	2(a4),d2
0001B24A 0642 00F0                  		addi.w	#$F0,d2
0001B24E 0C42 0070                  		cmpi.w	#$70,d2
0001B252 6500                       		bcs.s	loc_1B268
0001B254 0C42 0170                  		cmpi.w	#$170,d2
0001B258 6400                       		bcc.s	loc_1B268
0001B25A 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B260 E748                       		lsl.w	#3,d0
0001B262 4BF5 0000                  		lea	(a5,d0.w),a5
0001B266 225D                       		movea.l	(a5)+,a1
0001B268 321D                       		move.w	(a5)+,d1
0001B26A D241                       		add.w	d1,d1
0001B26C D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B270 365D                       		movea.w	(a5)+,a3
0001B272 7200                       		moveq	#0,d1
0001B274 1219                       		move.b	(a1)+,d1
0001B276 5301                       		subq.b	#1,d1
0001B278 6B00                       		bmi.s	loc_1B268
0001B27A 4EB9 0000 D824             		jsr	sub_D762
0001B280                            
0001B280                            loc_1B268:
0001B280 584C                       		addq.w	#4,a4
0001B282 51CE FFA4                  		dbf	d6,loc_1B210
0001B286                            
0001B286 41E8 0070                  		lea	$70(a0),a0
0001B28A 51CF FF98                  		dbf	d7,loc_1B20C
0001B28E                            
0001B28E 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B292 0C05 0050                  		cmpi.b	#$50,d5
0001B296 6700                       		beq.s	loc_1B288
0001B298 24BC 0000 0000             		move.l	#0,(a2)
0001B29E 4E75                       		rts	
0001B2A0                            ; ===========================================================================
0001B2A0                            
0001B2A0                            loc_1B288:
0001B2A0 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B2A6 4E75                       		rts	
0001B2A8                            ; End of function SS_ShowLayout
0001B2A8                            
0001B2A8                            ; ---------------------------------------------------------------------------
0001B2A8                            ; Subroutine to	animate	walls and rings	in the special stage
0001B2A8                            ; ---------------------------------------------------------------------------
0001B2A8                            
0001B2A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B2A8                            
0001B2A8                            
0001B2A8                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B2A8 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B2AE 7000                       		moveq	#0,d0
0001B2B0 1038 F780                  		move.b	($FFFFF780).w,d0
0001B2B4 E408                       		lsr.b	#2,d0
0001B2B6 0240 000F                  		andi.w	#$F,d0
0001B2BA 7223                       		moveq	#$23,d1
0001B2BC                            
0001B2BC                            loc_1B2A4:
0001B2BC 3280                       		move.w	d0,(a1)
0001B2BE 5049                       		addq.w	#8,a1
0001B2C0 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001B2C4                            
0001B2C4 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B2CA 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B2CE 6A00                       		bpl.s	loc_1B2C8
0001B2D0 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B2D6 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B2DA 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B2E0                            
0001B2E0                            loc_1B2C8:
0001B2E0 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B2E6 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B2EA 6A00                       		bpl.s	loc_1B2E4
0001B2EC 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001B2F2 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001B2F6 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001B2FC                            
0001B2FC                            loc_1B2E4:
0001B2FC 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001B300 1340 0138                  		move.b	d0,$138(a1)
0001B304 1340 0160                  		move.b	d0,$160(a1)
0001B308 1340 0148                  		move.b	d0,$148(a1)
0001B30C 1340 0150                  		move.b	d0,$150(a1)
0001B310 1340 01D8                  		move.b	d0,$1D8(a1)
0001B314 1340 01E0                  		move.b	d0,$1E0(a1)
0001B318 1340 01E8                  		move.b	d0,$1E8(a1)
0001B31C 1340 01F0                  		move.b	d0,$1F0(a1)
0001B320 1340 01F8                  		move.b	d0,$1F8(a1)
0001B324 1340 0200                  		move.b	d0,$200(a1)
0001B328 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001B32C 6A00                       		bpl.s	loc_1B326
0001B32E 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001B334 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001B338 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001B33E                            
0001B33E                            loc_1B326:
0001B33E 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001B342 1340 0168                  		move.b	d0,$168(a1)
0001B346 1340 0170                  		move.b	d0,$170(a1)
0001B34A 1340 0178                  		move.b	d0,$178(a1)
0001B34E 1340 0180                  		move.b	d0,$180(a1)
0001B352 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001B356 6A00                       		bpl.s	loc_1B350
0001B358 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001B35E 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001B362 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001B368                            
0001B368                            loc_1B350:
0001B368 43F9 00FF 4016             		lea	($FF4016).l,a1
0001B36E 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001B374 7000                       		moveq	#0,d0
0001B376 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001B37A D040                       		add.w	d0,d0
0001B37C 41F0 0000                  		lea	(a0,d0.w),a0
0001B380 3290                       		move.w	(a0),(a1)
0001B382 3368 0002 0008             		move.w	2(a0),8(a1)
0001B388 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B38E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B394 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B39A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B3A0 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B3A6 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B3AC D0FC 0020                  		adda.w	#$20,a0
0001B3B0 D2FC 0048                  		adda.w	#$48,a1
0001B3B4 3290                       		move.w	(a0),(a1)
0001B3B6 3368 0002 0008             		move.w	2(a0),8(a1)
0001B3BC 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B3C2 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B3C8 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B3CE 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B3D4 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B3DA 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B3E0 D0FC 0020                  		adda.w	#$20,a0
0001B3E4 D2FC 0048                  		adda.w	#$48,a1
0001B3E8 3290                       		move.w	(a0),(a1)
0001B3EA 3368 0002 0008             		move.w	2(a0),8(a1)
0001B3F0 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B3F6 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B3FC 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B402 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B408 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B40E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B414 D0FC 0020                  		adda.w	#$20,a0
0001B418 D2FC 0048                  		adda.w	#$48,a1
0001B41C 3290                       		move.w	(a0),(a1)
0001B41E 3368 0002 0008             		move.w	2(a0),8(a1)
0001B424 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B42A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B430 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B436 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B43C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B442 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B448 D0FC 0020                  		adda.w	#$20,a0
0001B44C D2FC 0048                  		adda.w	#$48,a1
0001B450 4E75                       		rts	
0001B452                            ; End of function SS_AniWallsRings
0001B452                            
0001B452                            ; ===========================================================================
0001B452 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B462 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B472 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B482 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B492 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B4A2 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B4B2 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B4C2 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B4D2                            ; ---------------------------------------------------------------------------
0001B4D2                            ; Subroutine to	remove items when you collect them in the special stage
0001B4D2                            ; ---------------------------------------------------------------------------
0001B4D2                            
0001B4D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B4D2                            
0001B4D2                            
0001B4D2                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001B4D2 45F9 00FF 4400             		lea	($FF4400).l,a2
0001B4D8 303C 001F                  		move.w	#$1F,d0
0001B4DC                            
0001B4DC                            loc_1B4C4:
0001B4DC 4A12                       		tst.b	(a2)
0001B4DE 6700                       		beq.s	locret_1B4CE
0001B4E0 504A                       		addq.w	#8,a2
0001B4E2 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001B4E6                            
0001B4E6                            locret_1B4CE:
0001B4E6 4E75                       		rts	
0001B4E8                            ; End of function SS_RemoveCollectedItem
0001B4E8                            
0001B4E8                            ; ---------------------------------------------------------------------------
0001B4E8                            ; Subroutine to	animate	special	stage items when you touch them
0001B4E8                            ; ---------------------------------------------------------------------------
0001B4E8                            
0001B4E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B4E8                            
0001B4E8                            
0001B4E8                            SS_AniItems:				; XREF: SS_ShowLayout
0001B4E8 41F9 00FF 4400             		lea	($FF4400).l,a0
0001B4EE 3E3C 001F                  		move.w	#$1F,d7
0001B4F2                            
0001B4F2                            loc_1B4DA:
0001B4F2 7000                       		moveq	#0,d0
0001B4F4 1010                       		move.b	(a0),d0
0001B4F6 6700                       		beq.s	loc_1B4E8
0001B4F8 E548                       		lsl.w	#2,d0
0001B4FA 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001B4FE 4E91                       		jsr	(a1)
0001B500                            
0001B500                            loc_1B4E8:
0001B500 5048                       		addq.w	#8,a0
0001B502                            
0001B502                            loc_1B4EA:
0001B502 51CF FFEE                  		dbf	d7,loc_1B4DA
0001B506                            
0001B506 4E75                       		rts	
0001B508                            ; End of function SS_AniItems
0001B508                            
0001B508                            ; ===========================================================================
0001B508 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001B50C 0000 0000                  		dc.l SS_AniBumper
0001B510 0000 0000                  		dc.l SS_Ani1Up
0001B514 0000 0000                  		dc.l SS_AniReverse
0001B518 0000 0000                  		dc.l SS_AniEmeraldSparks
0001B51C 0000 0000                  		dc.l SS_AniGlassBlock
0001B520                            ; ===========================================================================
0001B520                            
0001B520                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001B520 5328 0002                  		subq.b	#1,2(a0)
0001B524 6A00                       		bpl.s	locret_1B530
0001B526 117C 0005 0002             		move.b	#5,2(a0)
0001B52C 7000                       		moveq	#0,d0
0001B52E 1028 0003                  		move.b	3(a0),d0
0001B532 5228 0003                  		addq.b	#1,3(a0)
0001B536 2268 0004                  		movea.l	4(a0),a1
0001B53A 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001B53E 1280                       		move.b	d0,(a1)
0001B540 6600                       		bne.s	locret_1B530
0001B542 4290                       		clr.l	(a0)
0001B544 42A8 0004                  		clr.l	4(a0)
0001B548                            
0001B548                            locret_1B530:
0001B548 4E75                       		rts	
0001B54A                            ; ===========================================================================
0001B54A 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001B550                            ; ===========================================================================
0001B550                            
0001B550                            SS_AniBumper:				; XREF: SS_AniIndex
0001B550 5328 0002                  		subq.b	#1,2(a0)
0001B554 6A00                       		bpl.s	locret_1B566
0001B556 117C 0007 0002             		move.b	#7,2(a0)
0001B55C 7000                       		moveq	#0,d0
0001B55E 1028 0003                  		move.b	3(a0),d0
0001B562 5228 0003                  		addq.b	#1,3(a0)
0001B566 2268 0004                  		movea.l	4(a0),a1
0001B56A 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001B56E 6600                       		bne.s	loc_1B564
0001B570 4290                       		clr.l	(a0)
0001B572 42A8 0004                  		clr.l	4(a0)
0001B576 12BC 0025                  		move.b	#$25,(a1)
0001B57A 4E75                       		rts	
0001B57C                            ; ===========================================================================
0001B57C                            
0001B57C                            loc_1B564:
0001B57C 1280                       		move.b	d0,(a1)
0001B57E                            
0001B57E                            locret_1B566:
0001B57E 4E75                       		rts	
0001B580                            ; ===========================================================================
0001B580 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001B586                            ; ===========================================================================
0001B586                            
0001B586                            SS_Ani1Up:				; XREF: SS_AniIndex
0001B586 5328 0002                  		subq.b	#1,2(a0)
0001B58A 6A00                       		bpl.s	locret_1B596
0001B58C 117C 0005 0002             		move.b	#5,2(a0)
0001B592 7000                       		moveq	#0,d0
0001B594 1028 0003                  		move.b	3(a0),d0
0001B598 5228 0003                  		addq.b	#1,3(a0)
0001B59C 2268 0004                  		movea.l	4(a0),a1
0001B5A0 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001B5A4 1280                       		move.b	d0,(a1)
0001B5A6 6600                       		bne.s	locret_1B596
0001B5A8 4290                       		clr.l	(a0)
0001B5AA 42A8 0004                  		clr.l	4(a0)
0001B5AE                            
0001B5AE                            locret_1B596:
0001B5AE 4E75                       		rts	
0001B5B0                            ; ===========================================================================
0001B5B0 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001B5B6                            ; ===========================================================================
0001B5B6                            
0001B5B6                            SS_AniReverse:				; XREF: SS_AniIndex
0001B5B6 5328 0002                  		subq.b	#1,2(a0)
0001B5BA 6A00                       		bpl.s	locret_1B5CC
0001B5BC 117C 0007 0002             		move.b	#7,2(a0)
0001B5C2 7000                       		moveq	#0,d0
0001B5C4 1028 0003                  		move.b	3(a0),d0
0001B5C8 5228 0003                  		addq.b	#1,3(a0)
0001B5CC 2268 0004                  		movea.l	4(a0),a1
0001B5D0 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001B5D4 6600                       		bne.s	loc_1B5CA
0001B5D6 4290                       		clr.l	(a0)
0001B5D8 42A8 0004                  		clr.l	4(a0)
0001B5DC 12BC 002B                  		move.b	#$2B,(a1)
0001B5E0 4E75                       		rts	
0001B5E2                            ; ===========================================================================
0001B5E2                            
0001B5E2                            loc_1B5CA:
0001B5E2 1280                       		move.b	d0,(a1)
0001B5E4                            
0001B5E4                            locret_1B5CC:
0001B5E4 4E75                       		rts	
0001B5E6                            ; ===========================================================================
0001B5E6 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001B5EC                            ; ===========================================================================
0001B5EC                            
0001B5EC                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001B5EC 5328 0002                  		subq.b	#1,2(a0)
0001B5F0 6A00                       		bpl.s	locret_1B60C
0001B5F2 117C 0005 0002             		move.b	#5,2(a0)
0001B5F8 7000                       		moveq	#0,d0
0001B5FA 1028 0003                  		move.b	3(a0),d0
0001B5FE 5228 0003                  		addq.b	#1,3(a0)
0001B602 2268 0004                  		movea.l	4(a0),a1
0001B606 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001B60A 1280                       		move.b	d0,(a1)
0001B60C 6600                       		bne.s	locret_1B60C
0001B60E 4290                       		clr.l	(a0)
0001B610 42A8 0004                  		clr.l	4(a0)
0001B614 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001B61A 303C 00A8                  		move.w	#$A8,d0
0001B61E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001B624                            
0001B624                            locret_1B60C:
0001B624 4E75                       		rts	
0001B626                            ; ===========================================================================
0001B626 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001B62C                            ; ===========================================================================
0001B62C                            
0001B62C                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001B62C 5328 0002                  		subq.b	#1,2(a0)
0001B630 6A00                       		bpl.s	locret_1B640
0001B632 117C 0001 0002             		move.b	#1,2(a0)
0001B638 7000                       		moveq	#0,d0
0001B63A 1028 0003                  		move.b	3(a0),d0
0001B63E 5228 0003                  		addq.b	#1,3(a0)
0001B642 2268 0004                  		movea.l	4(a0),a1
0001B646 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001B64A 1280                       		move.b	d0,(a1)
0001B64C 6600                       		bne.s	locret_1B640
0001B64E 12A8 0004                  		move.b	4(a0),(a1)
0001B652 4290                       		clr.l	(a0)
0001B654 42A8 0004                  		clr.l	4(a0)
0001B658                            
0001B658                            locret_1B640:
0001B658 4E75                       		rts	
0001B65A                            ; ===========================================================================
0001B65A 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001B664                            ; ---------------------------------------------------------------------------
0001B664                            ; Special stage	layout pointers
0001B664                            ; ---------------------------------------------------------------------------
0001B664                            SS_LayoutIndex:
0001B664                            	include "_inc\Special stage layout pointers.asm"
0001B664                            ; ---------------------------------------------------------------------------
0001B664                            ; Special stage	layout pointers
0001B664                            ; ---------------------------------------------------------------------------
0001B664 0000 0000                  	dc.l SS_1
0001B668 0000 0000                  	dc.l SS_2
0001B66C 0000 0000                  	dc.l SS_3
0001B670 0000 0000                  	dc.l SS_4
0001B674 0000 0000                  	dc.l SS_5
0001B678 0000 0000                  	dc.l SS_6
0001B67C                            	even
0001B67C                            	even
0001B67C                            
0001B67C                            ; ---------------------------------------------------------------------------
0001B67C                            ; Special stage	start locations
0001B67C                            ; ---------------------------------------------------------------------------
0001B67C                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001B694                            		even
0001B694                            
0001B694                            ; ---------------------------------------------------------------------------
0001B694                            ; Subroutine to	load special stage layout
0001B694                            ; ---------------------------------------------------------------------------
0001B694                            
0001B694                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B694                            
0001B694                            
0001B694                            SS_Load:				; XREF: SpecialStage
0001B694 7000                       		moveq	#0,d0
0001B696 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001B69A 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001B69E 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001B6A4 6500                       		bcs.s	SS_ChkEmldNum
0001B6A6 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001B6AC                            
0001B6AC                            SS_ChkEmldNum:
0001B6AC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001B6B2 6700                       		beq.s	SS_LoadData	; if yes, branch
0001B6B4 7200                       		moveq	#0,d1
0001B6B6 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001B6BA 5301                       		subq.b	#1,d1
0001B6BC 6500                       		bcs.s	SS_LoadData
0001B6BE 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001B6C2                            
0001B6C2                            SS_ChkEmldLoop:	
0001B6C2 B033 1000                  		cmp.b	(a3,d1.w),d0
0001B6C6 6600                       		bne.s	SS_ChkEmldRepeat
0001B6C8 60CA                       		bra.s	SS_Load
0001B6CA                            ; ===========================================================================
0001B6CA                            
0001B6CA                            SS_ChkEmldRepeat:
0001B6CA 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001B6CE                            
0001B6CE                            SS_LoadData:
0001B6CE E548                       		lsl.w	#2,d0
0001B6D0 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001B6D4 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001B6D8 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001B6DC 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001B6E0 43F9 00FF 4000             		lea	($FF4000).l,a1
0001B6E6 303C 0000                  		move.w	#0,d0
0001B6EA 4EB9 0000 171E             		jsr	(EniDec).l
0001B6F0 43F9 00FF 0000             		lea	($FF0000).l,a1
0001B6F6 303C 0FFF                  		move.w	#$FFF,d0
0001B6FA                            
0001B6FA                            SS_ClrRAM3:
0001B6FA 4299                       		clr.l	(a1)+
0001B6FC 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001B700                            
0001B700 43F9 00FF 1020             		lea	($FF1020).l,a1
0001B706 41F9 00FF 4000             		lea	($FF4000).l,a0
0001B70C 723F                       		moveq	#$3F,d1
0001B70E                            
0001B70E                            loc_1B6F6:
0001B70E 743F                       		moveq	#$3F,d2
0001B710                            
0001B710                            loc_1B6F8:
0001B710 12D8                       		move.b	(a0)+,(a1)+
0001B712 51CA FFFC                  		dbf	d2,loc_1B6F8
0001B716                            
0001B716 43E9 0040                  		lea	$40(a1),a1
0001B71A 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001B71E                            
0001B71E 43F9 00FF 4008             		lea	($FF4008).l,a1
0001B724 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001B72A 724D                       		moveq	#$4D,d1
0001B72C                            
0001B72C                            loc_1B714:
0001B72C 22D8                       		move.l	(a0)+,(a1)+
0001B72E 32FC 0000                  		move.w	#0,(a1)+
0001B732 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001B738 32D8                       		move.w	(a0)+,(a1)+
0001B73A 51C9 FFF0                  		dbf	d1,loc_1B714
0001B73E                            
0001B73E 43F9 00FF 4400             		lea	($FF4400).l,a1
0001B744 323C 003F                  		move.w	#$3F,d1
0001B748                            
0001B748                            loc_1B730:
0001B748                            
0001B748 4299                       		clr.l	(a1)+
0001B74A 51C9 FFFC                  		dbf	d1,loc_1B730
0001B74E                            
0001B74E 4E75                       		rts	
0001B750                            ; End of function SS_Load
0001B750                            
0001B750                            ; ===========================================================================
0001B750                            ; ---------------------------------------------------------------------------
0001B750                            ; Special stage	mappings and VRAM pointers
0001B750                            ; ---------------------------------------------------------------------------
0001B750                            SS_MapIndex:
0001B750                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001B750                            ; ---------------------------------------------------------------------------
0001B750                            ; Special stage	mappings and VRAM pointers
0001B750                            ; ---------------------------------------------------------------------------
0001B750 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001B754 0142                       	dc.w $142		; VRAM setting
0001B756 0000 0000                  	dc.l Map_SSWalls
0001B75A 0142                       	dc.w $142
0001B75C 0000 0000                  	dc.l Map_SSWalls
0001B760 0142                       	dc.w $142
0001B762 0000 0000                  	dc.l Map_SSWalls
0001B766 0142                       	dc.w $142
0001B768 0000 0000                  	dc.l Map_SSWalls
0001B76C 0142                       	dc.w $142
0001B76E 0000 0000                  	dc.l Map_SSWalls
0001B772 0142                       	dc.w $142
0001B774 0000 0000                  	dc.l Map_SSWalls
0001B778 0142                       	dc.w $142
0001B77A 0000 0000                  	dc.l Map_SSWalls
0001B77E 0142                       	dc.w $142
0001B780 0000 0000                  	dc.l Map_SSWalls
0001B784 0142                       	dc.w $142
0001B786 0000 0000                  	dc.l Map_SSWalls
0001B78A 2142                       	dc.w $2142
0001B78C 0000 0000                  	dc.l Map_SSWalls
0001B790 2142                       	dc.w $2142
0001B792 0000 0000                  	dc.l Map_SSWalls
0001B796 2142                       	dc.w $2142
0001B798 0000 0000                  	dc.l Map_SSWalls
0001B79C 2142                       	dc.w $2142
0001B79E 0000 0000                  	dc.l Map_SSWalls
0001B7A2 2142                       	dc.w $2142
0001B7A4 0000 0000                  	dc.l Map_SSWalls
0001B7A8 2142                       	dc.w $2142
0001B7AA 0000 0000                  	dc.l Map_SSWalls
0001B7AE 2142                       	dc.w $2142
0001B7B0 0000 0000                  	dc.l Map_SSWalls
0001B7B4 2142                       	dc.w $2142
0001B7B6 0000 0000                  	dc.l Map_SSWalls
0001B7BA 2142                       	dc.w $2142
0001B7BC 0000 0000                  	dc.l Map_SSWalls
0001B7C0 4142                       	dc.w $4142
0001B7C2 0000 0000                  	dc.l Map_SSWalls
0001B7C6 4142                       	dc.w $4142
0001B7C8 0000 0000                  	dc.l Map_SSWalls
0001B7CC 4142                       	dc.w $4142
0001B7CE 0000 0000                  	dc.l Map_SSWalls
0001B7D2 4142                       	dc.w $4142
0001B7D4 0000 0000                  	dc.l Map_SSWalls
0001B7D8 4142                       	dc.w $4142
0001B7DA 0000 0000                  	dc.l Map_SSWalls
0001B7DE 4142                       	dc.w $4142
0001B7E0 0000 0000                  	dc.l Map_SSWalls
0001B7E4 4142                       	dc.w $4142
0001B7E6 0000 0000                  	dc.l Map_SSWalls
0001B7EA 4142                       	dc.w $4142
0001B7EC 0000 0000                  	dc.l Map_SSWalls
0001B7F0 4142                       	dc.w $4142
0001B7F2 0000 0000                  	dc.l Map_SSWalls
0001B7F6 6142                       	dc.w $6142
0001B7F8 0000 0000                  	dc.l Map_SSWalls
0001B7FC 6142                       	dc.w $6142
0001B7FE 0000 0000                  	dc.l Map_SSWalls
0001B802 6142                       	dc.w $6142
0001B804 0000 0000                  	dc.l Map_SSWalls
0001B808 6142                       	dc.w $6142
0001B80A 0000 0000                  	dc.l Map_SSWalls
0001B80E 6142                       	dc.w $6142
0001B810 0000 0000                  	dc.l Map_SSWalls
0001B814 6142                       	dc.w $6142
0001B816 0000 0000                  	dc.l Map_SSWalls
0001B81A 6142                       	dc.w $6142
0001B81C 0000 0000                  	dc.l Map_SSWalls
0001B820 6142                       	dc.w $6142
0001B822 0000 0000                  	dc.l Map_SSWalls
0001B826 6142                       	dc.w $6142
0001B828 0000 EBBA                  	dc.l Map_obj47
0001B82C 023B                       	dc.w $23B
0001B82E 0000 0000                  	dc.l Map_SS_R
0001B832 0570                       	dc.w $570
0001B834 0000 0000                  	dc.l Map_SS_R
0001B838 0251                       	dc.w $251
0001B83A 0000 0000                  	dc.l Map_SS_R
0001B83E 0370                       	dc.w $370
0001B840 0000 0000                  	dc.l Map_SS_Up
0001B844 0263                       	dc.w $263
0001B846 0000 0000                  	dc.l Map_SS_Down
0001B84A 0263                       	dc.w $263
0001B84C 0000 0000                  	dc.l Map_SS_R
0001B850 22F0                       	dc.w $22F0
0001B852 0000 0000                  	dc.l Map_SS_Glass
0001B856 0470                       	dc.w $470
0001B858 0000 0000                  	dc.l Map_SS_Glass
0001B85C 05F0                       	dc.w $5F0
0001B85E 0000 0000                  	dc.l Map_SS_Glass
0001B862 65F0                       	dc.w $65F0
0001B864 0000 0000                  	dc.l Map_SS_Glass
0001B868 25F0                       	dc.w $25F0
0001B86A 0000 0000                  	dc.l Map_SS_Glass
0001B86E 45F0                       	dc.w $45F0
0001B870 0000 0000                  	dc.l Map_SS_R
0001B874 02F0                       	dc.w $2F0
0001B876 0100 EBBA                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001B87A 023B                       	dc.w $23B
0001B87C 0200 EBBA                  	dc.l Map_obj47+$2000000
0001B880 023B                       	dc.w $23B
0001B882 0000 0000                  	dc.l Map_SS_R
0001B886 0797                       	dc.w $797
0001B888 0000 0000                  	dc.l Map_SS_R
0001B88C 07A0                       	dc.w $7A0
0001B88E 0000 0000                  	dc.l Map_SS_R
0001B892 07A9                       	dc.w $7A9
0001B894 0000 0000                  	dc.l Map_SS_R
0001B898 0797                       	dc.w $797
0001B89A 0000 0000                  	dc.l Map_SS_R
0001B89E 07A0                       	dc.w $7A0
0001B8A0 0000 0000                  	dc.l Map_SS_R
0001B8A4 07A9                       	dc.w $7A9
0001B8A6 0000 A070                  	dc.l Map_obj25
0001B8AA 27B2                       	dc.w $27B2
0001B8AC 0000 0000                  	dc.l Map_SS_Chaos3
0001B8B0 0770                       	dc.w $770
0001B8B2 0000 0000                  	dc.l Map_SS_Chaos3
0001B8B6 2770                       	dc.w $2770
0001B8B8 0000 0000                  	dc.l Map_SS_Chaos3
0001B8BC 4770                       	dc.w $4770
0001B8BE 0000 0000                  	dc.l Map_SS_Chaos3
0001B8C2 6770                       	dc.w $6770
0001B8C4 0000 0000                  	dc.l Map_SS_Chaos1
0001B8C8 0770                       	dc.w $770
0001B8CA 0000 0000                  	dc.l Map_SS_Chaos2
0001B8CE 0770                       	dc.w $770
0001B8D0 0000 0000                  	dc.l Map_SS_R
0001B8D4 04F0                       	dc.w $4F0
0001B8D6 0400 A070                  	dc.l Map_obj25+$4000000
0001B8DA 27B2                       	dc.w $27B2
0001B8DC 0500 A070                  	dc.l Map_obj25+$5000000
0001B8E0 27B2                       	dc.w $27B2
0001B8E2 0600 A070                  	dc.l Map_obj25+$6000000
0001B8E6 27B2                       	dc.w $27B2
0001B8E8 0700 A070                  	dc.l Map_obj25+$7000000
0001B8EC 27B2                       	dc.w $27B2
0001B8EE 0000 0000                  	dc.l Map_SS_Glass
0001B8F2 23F0                       	dc.w $23F0
0001B8F4 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001B8F8 23F0                       	dc.w $23F0
0001B8FA 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001B8FE 23F0                       	dc.w $23F0
0001B900 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001B904 23F0                       	dc.w $23F0
0001B906 0000 0000                  	dc.l Map_SS_R+$2000000
0001B90A 04F0                       	dc.w $4F0
0001B90C 0000 0000                  	dc.l Map_SS_Glass
0001B910 05F0                       	dc.w $5F0
0001B912 0000 0000                  	dc.l Map_SS_Glass
0001B916 65F0                       	dc.w $65F0
0001B918 0000 0000                  	dc.l Map_SS_Glass
0001B91C 25F0                       	dc.w $25F0
0001B91E 0000 0000                  	dc.l Map_SS_Glass
0001B922 45F0                       	dc.w $45F0
0001B922 45F0                       	dc.w $45F0
0001B924                            
0001B924                            ; ---------------------------------------------------------------------------
0001B924                            ; Sprite mappings - special stage "R" block
0001B924                            ; ---------------------------------------------------------------------------
0001B924                            Map_SS_R:
0001B924                            	include "_maps\SSRblock.asm"
0001B924                            ; ---------------------------------------------------------------------------
0001B924                            ; Sprite mappings - special stage "R" block
0001B924                            ; ---------------------------------------------------------------------------
0001B924 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001B928 0000                       		dc.w byte_1B91E-Map_SS_R
0001B92A 01                         byte_1B912:	dc.b 1
0001B92B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001B930 01                         byte_1B918:	dc.b 1
0001B931 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001B936 00                         byte_1B91E:	dc.b 0
0001B938 00                         		even
0001B938 00                         		even
0001B938                            
0001B938                            ; ---------------------------------------------------------------------------
0001B938                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001B938                            ; ---------------------------------------------------------------------------
0001B938                            Map_SS_Glass:
0001B938                            	include "_maps\SSglassblock.asm"
0001B938                            ; ---------------------------------------------------------------------------
0001B938                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001B938                            ; ---------------------------------------------------------------------------
0001B938 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001B93C 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001B940 01                         byte_1B928:	dc.b 1
0001B941 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001B946 01                         byte_1B92E:	dc.b 1
0001B947 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001B94C 01                         byte_1B934:	dc.b 1
0001B94D F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001B952 01                         byte_1B93A:	dc.b 1
0001B953 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001B958                            		even
0001B958                            		even
0001B958                            
0001B958                            ; ---------------------------------------------------------------------------
0001B958                            ; Sprite mappings - special stage "UP" block
0001B958                            ; ---------------------------------------------------------------------------
0001B958                            Map_SS_Up:
0001B958                            	include "_maps\SSUPblock.asm"
0001B958                            ; ---------------------------------------------------------------------------
0001B958                            ; Sprite mappings - special stage "UP" block
0001B958                            ; ---------------------------------------------------------------------------
0001B958 0000                       		dc.w byte_1B944-Map_SS_Up
0001B95A 0000                       		dc.w byte_1B94A-Map_SS_Up
0001B95C 01                         byte_1B944:	dc.b 1
0001B95D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001B962 01                         byte_1B94A:	dc.b 1
0001B963 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001B968                            		even
0001B968                            		even
0001B968                            
0001B968                            ; ---------------------------------------------------------------------------
0001B968                            ; Sprite mappings - special stage "DOWN" block
0001B968                            ; ---------------------------------------------------------------------------
0001B968                            Map_SS_Down:
0001B968                            	include "_maps\SSDOWNblock.asm"
0001B968                            ; ---------------------------------------------------------------------------
0001B968                            ; Sprite mappings - special stage "DOWN" block
0001B968                            ; ---------------------------------------------------------------------------
0001B968 0000                       		dc.w byte_1B954-Map_SS_Down
0001B96A 0000                       		dc.w byte_1B95A-Map_SS_Down
0001B96C 01                         byte_1B954:	dc.b 1
0001B96D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001B972 01                         byte_1B95A:	dc.b 1
0001B973 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001B978                            		even
0001B978                            		even
0001B978                            
0001B978                            ; ---------------------------------------------------------------------------
0001B978                            ; Sprite mappings - special stage chaos	emeralds
0001B978                            ; ---------------------------------------------------------------------------
0001B978 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001B97A 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001B97C 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001B97E 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001B980 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001B982 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001B984 01                         byte_1B96C:	dc.b 1
0001B985 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001B98A 01                         byte_1B972:	dc.b 1
0001B98B F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001B990 01                         byte_1B978:	dc.b 1
0001B991 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001B996 01                         byte_1B97E:	dc.b 1
0001B997 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001B99C                            		even
0001B99C                            ; ===========================================================================
0001B99C                            ; ---------------------------------------------------------------------------
0001B99C                            ; Object 09 - Sonic (special stage)
0001B99C                            ; ---------------------------------------------------------------------------
0001B99C                            
0001B99C                            Obj09:					; XREF: Obj_Index
0001B99C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001B9A0 6700                       		beq.s	Obj09_Normal	; if not, branch
0001B9A2 6100 0000                  		bsr.w	SS_FixCamera
0001B9A6 6000 0000                  		bra.w	DebugMode
0001B9AA                            ; ===========================================================================
0001B9AA                            
0001B9AA                            Obj09_Normal:
0001B9AA 7000                       		moveq	#0,d0
0001B9AC 1028 0024                  		move.b	$24(a0),d0
0001B9B0 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001B9B4 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001B9B8                            ; ===========================================================================
0001B9B8 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001B9BA 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001B9BC 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001B9BE 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001B9C0                            ; ===========================================================================
0001B9C0                            
0001B9C0                            Obj09_Main:				; XREF: Obj09_Index
0001B9C0 5428 0024                  		addq.b	#2,$24(a0)
0001B9C4 117C 000E 0016             		move.b	#$E,$16(a0)
0001B9CA 117C 0007 0017             		move.b	#7,$17(a0)
0001B9D0 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001B9D8 317C 0780 0002             		move.w	#$780,2(a0)
0001B9DE 117C 0004 0001             		move.b	#4,1(a0)
0001B9E4 117C 0000 0018             		move.b	#0,$18(a0)
0001B9EA 117C 0002 001C             		move.b	#2,$1C(a0)
0001B9F0 08E8 0002 0022             		bset	#2,$22(a0)
0001B9F6 08E8 0001 0022             		bset	#1,$22(a0)
0001B9FC                            
0001B9FC                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001B9FC 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001BA00 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BA02 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001BA08 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BA0A 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001BA10                            
0001BA10                            Obj09_NoDebug:
0001BA10 117C 0000 0030             		move.b	#0,$30(a0)
0001BA16 7000                       		moveq	#0,d0
0001BA18 1028 0022                  		move.b	$22(a0),d0
0001BA1C 0240 0002                  		andi.w	#2,d0
0001BA20 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001BA24 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001BA28 4EBA 8284                  		jsr	LoadSonicDynPLC
0001BA2C 4EF9 0000 D6C6             		jmp	DisplaySprite
0001BA32                            ; ===========================================================================
0001BA32 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001BA34 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001BA36                            ; ===========================================================================
0001BA36                            
0001BA36                            Obj09_OnWall:				; XREF: Obj09_Modes
0001BA36 6100 0000                  		bsr.w	Obj09_Jump
0001BA3A 6100 0000                  		bsr.w	Obj09_Move
0001BA3E 6100 0000                  		bsr.w	Obj09_Fall
0001BA42 6000                       		bra.s	Obj09_Display
0001BA44                            ; ===========================================================================
0001BA44                            
0001BA44                            Obj09_InAir:				; XREF: Obj09_Modes
0001BA44 6100 0000                  		bsr.w	nullsub_2
0001BA48 6100 0000                  		bsr.w	Obj09_Move
0001BA4C 6100 0000                  		bsr.w	Obj09_Fall
0001BA50                            
0001BA50                            Obj09_Display:				; XREF: Obj09_OnWall
0001BA50 6100 0000                  		bsr.w	Obj09_ChkItems
0001BA54 6100 0000                  		bsr.w	Obj09_ChkItems2
0001BA58 4EB9 0000 D6A0             		jsr	SpeedToPos
0001BA5E 6100 0000                  		bsr.w	SS_FixCamera
0001BA62 3038 F780                  		move.w	($FFFFF780).w,d0
0001BA66 D078 F782                  		add.w	($FFFFF782).w,d0
0001BA6A 31C0 F780                  		move.w	d0,($FFFFF780).w
0001BA6E 4EB9 0001 3A34             		jsr	Sonic_Animate
0001BA74 4E75                       		rts	
0001BA76                            
0001BA76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA76                            
0001BA76                            
0001BA76                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001BA76 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001BA7C 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001BA7E 6100 0000                  		bsr.w	Obj09_MoveLeft
0001BA82                            
0001BA82                            Obj09_ChkRight:
0001BA82 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001BA88 6700                       		beq.s	loc_1BA78	; if not, branch
0001BA8A 6100 0000                  		bsr.w	Obj09_MoveRight
0001BA8E                            
0001BA8E                            loc_1BA78:
0001BA8E 1038 F602                  		move.b	($FFFFF602).w,d0
0001BA92 0200 000C                  		andi.b	#$C,d0
0001BA96 6600                       		bne.s	loc_1BAA8
0001BA98 3028 0014                  		move.w	$14(a0),d0
0001BA9C 6700                       		beq.s	loc_1BAA8
0001BA9E 6B00                       		bmi.s	loc_1BA9A
0001BAA0 0440 000C                  		subi.w	#$C,d0
0001BAA4 6400                       		bcc.s	loc_1BA94
0001BAA6 303C 0000                  		move.w	#0,d0
0001BAAA                            
0001BAAA                            loc_1BA94:
0001BAAA 3140 0014                  		move.w	d0,$14(a0)
0001BAAE 6000                       		bra.s	loc_1BAA8
0001BAB0                            ; ===========================================================================
0001BAB0                            
0001BAB0                            loc_1BA9A:
0001BAB0 0640 000C                  		addi.w	#$C,d0
0001BAB4 6400                       		bcc.s	loc_1BAA4
0001BAB6 303C 0000                  		move.w	#0,d0
0001BABA                            
0001BABA                            loc_1BAA4:
0001BABA 3140 0014                  		move.w	d0,$14(a0)
0001BABE                            
0001BABE                            loc_1BAA8:
0001BABE 1038 F780                  		move.b	($FFFFF780).w,d0
0001BAC2 0600 0020                  		addi.b	#$20,d0
0001BAC6 0200 00C0                  		andi.b	#$C0,d0
0001BACA 4400                       		neg.b	d0
0001BACC 4EB9 0000 29DA             		jsr	(CalcSine).l
0001BAD2 C3E8 0014                  		muls.w	$14(a0),d1
0001BAD6 D3A8 0008                  		add.l	d1,8(a0)
0001BADA C1E8 0014                  		muls.w	$14(a0),d0
0001BADE D1A8 000C                  		add.l	d0,$C(a0)
0001BAE2 48E7 C000                  		movem.l	d0-d1,-(sp)
0001BAE6 2428 000C                  		move.l	$C(a0),d2
0001BAEA 2628 0008                  		move.l	8(a0),d3
0001BAEE 6100 0000                  		bsr.w	sub_1BCE8
0001BAF2 6700                       		beq.s	loc_1BAF2
0001BAF4 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001BAF8 93A8 0008                  		sub.l	d1,8(a0)
0001BAFC 91A8 000C                  		sub.l	d0,$C(a0)
0001BB00 317C 0000 0014             		move.w	#0,$14(a0)
0001BB06 4E75                       		rts	
0001BB08                            ; ===========================================================================
0001BB08                            
0001BB08                            loc_1BAF2:
0001BB08 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001BB0C 4E75                       		rts	
0001BB0E                            ; End of function Obj09_Move
0001BB0E                            
0001BB0E                            
0001BB0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB0E                            
0001BB0E                            
0001BB0E                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001BB0E 08E8 0000 0022             		bset	#0,$22(a0)
0001BB14 3028 0014                  		move.w	$14(a0),d0
0001BB18 6700                       		beq.s	loc_1BB06
0001BB1A 6A00                       		bpl.s	loc_1BB1A
0001BB1C                            
0001BB1C                            loc_1BB06:
0001BB1C 0440 000C                  		subi.w	#$C,d0
0001BB20 0C40 F800                  		cmpi.w	#-$800,d0
0001BB24 6E00                       		bgt.s	loc_1BB14
0001BB26 303C F800                  		move.w	#-$800,d0
0001BB2A                            
0001BB2A                            loc_1BB14:
0001BB2A 3140 0014                  		move.w	d0,$14(a0)
0001BB2E 4E75                       		rts	
0001BB30                            ; ===========================================================================
0001BB30                            
0001BB30                            loc_1BB1A:
0001BB30 0440 0040                  		subi.w	#$40,d0
0001BB34 6400                       		bcc.s	loc_1BB22
0001BB36 4E71                       		nop	
0001BB38                            
0001BB38                            loc_1BB22:
0001BB38 3140 0014                  		move.w	d0,$14(a0)
0001BB3C 4E75                       		rts	
0001BB3E                            ; End of function Obj09_MoveLeft
0001BB3E                            
0001BB3E                            
0001BB3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB3E                            
0001BB3E                            
0001BB3E                            Obj09_MoveRight:			; XREF: Obj09_Move
0001BB3E 08A8 0000 0022             		bclr	#0,$22(a0)
0001BB44 3028 0014                  		move.w	$14(a0),d0
0001BB48 6B00                       		bmi.s	loc_1BB48
0001BB4A 0640 000C                  		addi.w	#$C,d0
0001BB4E 0C40 0800                  		cmpi.w	#$800,d0
0001BB52 6D00                       		blt.s	loc_1BB42
0001BB54 303C 0800                  		move.w	#$800,d0
0001BB58                            
0001BB58                            loc_1BB42:
0001BB58 3140 0014                  		move.w	d0,$14(a0)
0001BB5C 6000                       		bra.s	locret_1BB54
0001BB5E                            ; ===========================================================================
0001BB5E                            
0001BB5E                            loc_1BB48:
0001BB5E 0640 0040                  		addi.w	#$40,d0
0001BB62 6400                       		bcc.s	loc_1BB50
0001BB64 4E71                       		nop	
0001BB66                            
0001BB66                            loc_1BB50:
0001BB66 3140 0014                  		move.w	d0,$14(a0)
0001BB6A                            
0001BB6A                            locret_1BB54:
0001BB6A 4E75                       		rts	
0001BB6C                            ; End of function Obj09_MoveRight
0001BB6C                            
0001BB6C                            
0001BB6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB6C                            
0001BB6C                            
0001BB6C                            Obj09_Jump:				; XREF: Obj09_OnWall
0001BB6C 1038 F603                  		move.b	($FFFFF603).w,d0
0001BB70 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001BB74 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001BB76 1038 F780                  		move.b	($FFFFF780).w,d0
0001BB7A 0200 00FC                  		andi.b	#$FC,d0
0001BB7E 4400                       		neg.b	d0
0001BB80 0400 0040                  		subi.b	#$40,d0
0001BB84 4EB9 0000 29DA             		jsr	(CalcSine).l
0001BB8A C3FC 0680                  		muls.w	#$680,d1
0001BB8E E081                       		asr.l	#8,d1
0001BB90 3141 0010                  		move.w	d1,$10(a0)
0001BB94 C1FC 0680                  		muls.w	#$680,d0
0001BB98 E080                       		asr.l	#8,d0
0001BB9A 3140 0012                  		move.w	d0,$12(a0)
0001BB9E 08E8 0001 0022             		bset	#1,$22(a0)
0001BBA4 303C 00A0                  		move.w	#$A0,d0
0001BBA8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play jumping sound
0001BBAE                            
0001BBAE                            Obj09_NoJump:
0001BBAE 4E75                       		rts	
0001BBB0                            ; End of function Obj09_Jump
0001BBB0                            
0001BBB0                            
0001BBB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BBB0                            
0001BBB0                            
0001BBB0                            nullsub_2:				; XREF: Obj09_InAir
0001BBB0 4E75                       		rts	
0001BBB2                            ; End of function nullsub_2
0001BBB2                            
0001BBB2                            ; ===========================================================================
0001BBB2                            ; ---------------------------------------------------------------------------
0001BBB2                            ; unused subroutine to limit Sonic's upward vertical speed
0001BBB2                            ; ---------------------------------------------------------------------------
0001BBB2 323C FC00                  		move.w	#-$400,d1
0001BBB6 B268 0012                  		cmp.w	$12(a0),d1
0001BBBA 6F00                       		ble.s	locret_1BBB4
0001BBBC 1038 F602                  		move.b	($FFFFF602).w,d0
0001BBC0 0200 0070                  		andi.b	#$70,d0
0001BBC4 6600                       		bne.s	locret_1BBB4
0001BBC6 3141 0012                  		move.w	d1,$12(a0)
0001BBCA                            
0001BBCA                            locret_1BBB4:
0001BBCA 4E75                       		rts	
0001BBCC                            ; ---------------------------------------------------------------------------
0001BBCC                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001BBCC                            ; ---------------------------------------------------------------------------
0001BBCC                            
0001BBCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BBCC                            
0001BBCC                            
0001BBCC                            SS_FixCamera:				; XREF: Obj09
0001BBCC 3428 000C                  		move.w	$C(a0),d2
0001BBD0 3628 0008                  		move.w	8(a0),d3
0001BBD4 3038 F700                  		move.w	($FFFFF700).w,d0
0001BBD8 0443 00A0                  		subi.w	#$A0,d3
0001BBDC 6500                       		bcs.s	loc_1BBCE
0001BBDE 9043                       		sub.w	d3,d0
0001BBE0 9178 F700                  		sub.w	d0,($FFFFF700).w
0001BBE4                            
0001BBE4                            loc_1BBCE:
0001BBE4 3038 F704                  		move.w	($FFFFF704).w,d0
0001BBE8 0442 0070                  		subi.w	#$70,d2
0001BBEC 6500                       		bcs.s	locret_1BBDE
0001BBEE 9042                       		sub.w	d2,d0
0001BBF0 9178 F704                  		sub.w	d0,($FFFFF704).w
0001BBF4                            
0001BBF4                            locret_1BBDE:
0001BBF4 4E75                       		rts	
0001BBF6                            ; End of function SS_FixCamera
0001BBF6                            
0001BBF6                            ; ===========================================================================
0001BBF6                            
0001BBF6                            Obj09_ExitStage:			; XREF: Obj09_Index
0001BBF6 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001BBFC 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001BC02 6600                       		bne.s	loc_1BBF4
0001BC04 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001BC0A                            
0001BC0A                            loc_1BBF4:
0001BC0A 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001BC10 6D00                       		blt.s	loc_1BC12
0001BC12 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001BC18 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001BC1E 5428 0024                  		addq.b	#2,$24(a0)
0001BC22 317C 003C 0038             		move.w	#$3C,$38(a0)
0001BC28                            
0001BC28                            loc_1BC12:
0001BC28 3038 F780                  		move.w	($FFFFF780).w,d0
0001BC2C D078 F782                  		add.w	($FFFFF782).w,d0
0001BC30 31C0 F780                  		move.w	d0,($FFFFF780).w
0001BC34 4EB9 0001 3A34             		jsr	Sonic_Animate
0001BC3A 4EBA 8072                  		jsr	LoadSonicDynPLC
0001BC3E 6100 FF8C                  		bsr.w	SS_FixCamera
0001BC42 4EF9 0000 D6C6             		jmp	DisplaySprite
0001BC48                            ; ===========================================================================
0001BC48                            
0001BC48                            Obj09_Exit2:				; XREF: Obj09_Index
0001BC48 5368 0038                  		subq.w	#1,$38(a0)
0001BC4C 6600                       		bne.s	loc_1BC40
0001BC4E 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001BC54                            
0001BC54                            loc_1BC40:
0001BC54 4EB9 0001 3A34             		jsr	Sonic_Animate
0001BC5A 4EBA 8052                  		jsr	LoadSonicDynPLC
0001BC5E 6100 FF6C                  		bsr.w	SS_FixCamera
0001BC62 4EF9 0000 D6C6             		jmp	DisplaySprite
0001BC68                            
0001BC68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC68                            
0001BC68                            
0001BC68                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001BC68 2428 000C                  		move.l	$C(a0),d2
0001BC6C 2628 0008                  		move.l	8(a0),d3
0001BC70 1038 F780                  		move.b	($FFFFF780).w,d0
0001BC74 0200 00FC                  		andi.b	#$FC,d0
0001BC78 4EB9 0000 29DA             		jsr	(CalcSine).l
0001BC7E 3828 0010                  		move.w	$10(a0),d4
0001BC82 48C4                       		ext.l	d4
0001BC84 E184                       		asl.l	#8,d4
0001BC86 C1FC 002A                  		muls.w	#$2A,d0
0001BC8A D084                       		add.l	d4,d0
0001BC8C 3828 0012                  		move.w	$12(a0),d4
0001BC90 48C4                       		ext.l	d4
0001BC92 E184                       		asl.l	#8,d4
0001BC94 C3FC 002A                  		muls.w	#$2A,d1
0001BC98 D284                       		add.l	d4,d1
0001BC9A D680                       		add.l	d0,d3
0001BC9C 6100 0000                  		bsr.w	sub_1BCE8
0001BCA0 6700                       		beq.s	loc_1BCB0
0001BCA2 9680                       		sub.l	d0,d3
0001BCA4 7000                       		moveq	#0,d0
0001BCA6 3140 0010                  		move.w	d0,$10(a0)
0001BCAA 08A8 0001 0022             		bclr	#1,$22(a0)
0001BCB0 D481                       		add.l	d1,d2
0001BCB2 6100 0000                  		bsr.w	sub_1BCE8
0001BCB6 6700                       		beq.s	loc_1BCC6
0001BCB8 9481                       		sub.l	d1,d2
0001BCBA 7200                       		moveq	#0,d1
0001BCBC 3141 0012                  		move.w	d1,$12(a0)
0001BCC0 4E75                       		rts	
0001BCC2                            ; ===========================================================================
0001BCC2                            
0001BCC2                            loc_1BCB0:
0001BCC2 D481                       		add.l	d1,d2
0001BCC4 6100 0000                  		bsr.w	sub_1BCE8
0001BCC8 6700                       		beq.s	loc_1BCD4
0001BCCA 9481                       		sub.l	d1,d2
0001BCCC 7200                       		moveq	#0,d1
0001BCCE 3141 0012                  		move.w	d1,$12(a0)
0001BCD2 08A8 0001 0022             		bclr	#1,$22(a0)
0001BCD8                            
0001BCD8                            loc_1BCC6:
0001BCD8 E080                       		asr.l	#8,d0
0001BCDA E081                       		asr.l	#8,d1
0001BCDC 3140 0010                  		move.w	d0,$10(a0)
0001BCE0 3141 0012                  		move.w	d1,$12(a0)
0001BCE4 4E75                       		rts	
0001BCE6                            ; ===========================================================================
0001BCE6                            
0001BCE6                            loc_1BCD4:
0001BCE6 E080                       		asr.l	#8,d0
0001BCE8 E081                       		asr.l	#8,d1
0001BCEA 3140 0010                  		move.w	d0,$10(a0)
0001BCEE 3141 0012                  		move.w	d1,$12(a0)
0001BCF2 08E8 0001 0022             		bset	#1,$22(a0)
0001BCF8 4E75                       		rts	
0001BCFA                            ; End of function Obj09_Fall
0001BCFA                            
0001BCFA                            
0001BCFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BCFA                            
0001BCFA                            
0001BCFA                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001BCFA 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BD00 7800                       		moveq	#0,d4
0001BD02 4842                       		swap	d2
0001BD04 3802                       		move.w	d2,d4
0001BD06 4842                       		swap	d2
0001BD08 0644 0044                  		addi.w	#$44,d4
0001BD0C 88FC 0018                  		divu.w	#$18,d4
0001BD10 C8FC 0080                  		mulu.w	#$80,d4
0001BD14 D3C4                       		adda.l	d4,a1
0001BD16 7800                       		moveq	#0,d4
0001BD18 4843                       		swap	d3
0001BD1A 3803                       		move.w	d3,d4
0001BD1C 4843                       		swap	d3
0001BD1E 0644 0014                  		addi.w	#$14,d4
0001BD22 88FC 0018                  		divu.w	#$18,d4
0001BD26 D2C4                       		adda.w	d4,a1
0001BD28 7A00                       		moveq	#0,d5
0001BD2A 1819                       		move.b	(a1)+,d4
0001BD2C 6100                       		bsr.s	sub_1BD30
0001BD2E 1819                       		move.b	(a1)+,d4
0001BD30 6100                       		bsr.s	sub_1BD30
0001BD32 D2FC 007E                  		adda.w	#$7E,a1
0001BD36 1819                       		move.b	(a1)+,d4
0001BD38 6100                       		bsr.s	sub_1BD30
0001BD3A 1819                       		move.b	(a1)+,d4
0001BD3C 6100                       		bsr.s	sub_1BD30
0001BD3E 4A05                       		tst.b	d5
0001BD40 4E75                       		rts	
0001BD42                            ; End of function sub_1BCE8
0001BD42                            
0001BD42                            
0001BD42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD42                            
0001BD42                            
0001BD42                            sub_1BD30:				; XREF: sub_1BCE8
0001BD42 6700                       		beq.s	locret_1BD44
0001BD44 0C04 0028                  		cmpi.b	#$28,d4
0001BD48 6700                       		beq.s	locret_1BD44
0001BD4A 0C04 003A                  		cmpi.b	#$3A,d4
0001BD4E 6500                       		bcs.s	loc_1BD46
0001BD50 0C04 004B                  		cmpi.b	#$4B,d4
0001BD54 6400                       		bcc.s	loc_1BD46
0001BD56                            
0001BD56                            locret_1BD44:
0001BD56 4E75                       		rts	
0001BD58                            ; ===========================================================================
0001BD58                            
0001BD58                            loc_1BD46:
0001BD58 1144 0030                  		move.b	d4,$30(a0)
0001BD5C 2149 0032                  		move.l	a1,$32(a0)
0001BD60 7AFF                       		moveq	#-1,d5
0001BD62 4E75                       		rts	
0001BD64                            ; End of function sub_1BD30
0001BD64                            
0001BD64                            
0001BD64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD64                            
0001BD64                            
0001BD64                            Obj09_ChkItems:				; XREF: Obj09_Display
0001BD64 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BD6A 7800                       		moveq	#0,d4
0001BD6C 3828 000C                  		move.w	$C(a0),d4
0001BD70 0644 0050                  		addi.w	#$50,d4
0001BD74 88FC 0018                  		divu.w	#$18,d4
0001BD78 C8FC 0080                  		mulu.w	#$80,d4
0001BD7C D3C4                       		adda.l	d4,a1
0001BD7E 7800                       		moveq	#0,d4
0001BD80 3828 0008                  		move.w	8(a0),d4
0001BD84 0644 0020                  		addi.w	#$20,d4
0001BD88 88FC 0018                  		divu.w	#$18,d4
0001BD8C D2C4                       		adda.w	d4,a1
0001BD8E 1811                       		move.b	(a1),d4
0001BD90 6600                       		bne.s	Obj09_ChkCont
0001BD92 4A28 003A                  		tst.b	$3A(a0)
0001BD96 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001BD9A 7800                       		moveq	#0,d4
0001BD9C 4E75                       		rts	
0001BD9E                            ; ===========================================================================
0001BD9E                            
0001BD9E                            Obj09_ChkCont:
0001BD9E 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001BDA2 6600                       		bne.s	Obj09_Chk1Up
0001BDA4 6100 F72C                  		bsr.w	SS_RemoveCollectedItem
0001BDA8 6600                       		bne.s	Obj09_GetCont
0001BDAA 14BC 0001                  		move.b	#1,(a2)
0001BDAE 2549 0004                  		move.l	a1,4(a2)
0001BDB2                            
0001BDB2                            Obj09_GetCont:
0001BDB2 4EB9 0000 9D58             		jsr	CollectRing
0001BDB8 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001BDBE 6500                       		bcs.s	Obj09_NoCont
0001BDC0 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001BDC6 6600                       		bne.s	Obj09_NoCont
0001BDC8 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001BDCC 303C 00BF                  		move.w	#$BF,d0
0001BDD0 4EB9 0000 1396             		jsr	(PlaySound).l	; play extra continue sound
0001BDD6                            
0001BDD6                            Obj09_NoCont:
0001BDD6 7800                       		moveq	#0,d4
0001BDD8 4E75                       		rts	
0001BDDA                            ; ===========================================================================
0001BDDA                            
0001BDDA                            Obj09_Chk1Up:
0001BDDA 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001BDDE 6600                       		bne.s	Obj09_ChkEmer
0001BDE0 6100 F6F0                  		bsr.w	SS_RemoveCollectedItem
0001BDE4 6600                       		bne.s	Obj09_Get1Up
0001BDE6 14BC 0003                  		move.b	#3,(a2)
0001BDEA 2549 0004                  		move.l	a1,4(a2)
0001BDEE                            
0001BDEE                            Obj09_Get1Up:
0001BDEE 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001BDF2 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001BDF6 303C 0088                  		move.w	#$88,d0
0001BDFA 4EB9 0000 1396             		jsr	(PlaySound).l	; play extra life music
0001BE00 7800                       		moveq	#0,d4
0001BE02 4E75                       		rts	
0001BE04                            ; ===========================================================================
0001BE04                            
0001BE04                            Obj09_ChkEmer:
0001BE04 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001BE08 6500                       		bcs.s	Obj09_ChkGhost
0001BE0A 0C04 0040                  		cmpi.b	#$40,d4
0001BE0E 6200                       		bhi.s	Obj09_ChkGhost
0001BE10 6100 F6C0                  		bsr.w	SS_RemoveCollectedItem
0001BE14 6600                       		bne.s	Obj09_GetEmer
0001BE16 14BC 0005                  		move.b	#5,(a2)
0001BE1A 2549 0004                  		move.l	a1,4(a2)
0001BE1E                            
0001BE1E                            Obj09_GetEmer:
0001BE1E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001BE24 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001BE26 0404 003B                  		subi.b	#$3B,d4
0001BE2A 7000                       		moveq	#0,d0
0001BE2C 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001BE30 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001BE34 1584 0000                  		move.b	d4,(a2,d0.w)
0001BE38 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001BE3C                            
0001BE3C                            Obj09_NoEmer:
0001BE3C 303C 0093                  		move.w	#$93,d0
0001BE40 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play emerald music
0001BE46 7800                       		moveq	#0,d4
0001BE48 4E75                       		rts	
0001BE4A                            ; ===========================================================================
0001BE4A                            
0001BE4A                            Obj09_ChkGhost:
0001BE4A 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001BE4E 6600                       		bne.s	Obj09_ChkGhostTag
0001BE50 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001BE56                            
0001BE56                            Obj09_ChkGhostTag:
0001BE56 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001BE5A 6600                       		bne.s	Obj09_NoGhost
0001BE5C 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001BE62 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001BE64 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001BE6A                            
0001BE6A                            Obj09_NoGhost:
0001BE6A 78FF                       		moveq	#-1,d4
0001BE6C 4E75                       		rts	
0001BE6E                            ; ===========================================================================
0001BE6E                            
0001BE6E                            Obj09_MakeGhostSolid:
0001BE6E 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001BE74 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001BE76 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BE7C 723F                       		moveq	#$3F,d1
0001BE7E                            
0001BE7E                            Obj09_GhostLoop2:
0001BE7E 743F                       		moveq	#$3F,d2
0001BE80                            
0001BE80                            Obj09_GhostLoop:
0001BE80 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001BE84 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001BE86 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001BE8A                            
0001BE8A                            Obj09_NoReplace:
0001BE8A 5249                       		addq.w	#1,a1
0001BE8C 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001BE90 43E9 0040                  		lea	$40(a1),a1
0001BE94 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001BE98                            
0001BE98                            Obj09_GhostNotSolid:
0001BE98 4228 003A                  		clr.b	$3A(a0)
0001BE9C 7800                       		moveq	#0,d4
0001BE9E 4E75                       		rts	
0001BEA0                            ; End of function Obj09_ChkItems
0001BEA0                            
0001BEA0                            
0001BEA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BEA0                            
0001BEA0                            
0001BEA0                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001BEA0 1028 0030                  		move.b	$30(a0),d0
0001BEA4 6600                       		bne.s	Obj09_ChkBumper
0001BEA6 5328 0036                  		subq.b	#1,$36(a0)
0001BEAA 6A00                       		bpl.s	loc_1BEA0
0001BEAC 117C 0000 0036             		move.b	#0,$36(a0)
0001BEB2                            
0001BEB2                            loc_1BEA0:
0001BEB2 5328 0037                  		subq.b	#1,$37(a0)
0001BEB6 6A00                       		bpl.s	locret_1BEAC
0001BEB8 117C 0000 0037             		move.b	#0,$37(a0)
0001BEBE                            
0001BEBE                            locret_1BEAC:
0001BEBE 4E75                       		rts	
0001BEC0                            ; ===========================================================================
0001BEC0                            
0001BEC0                            Obj09_ChkBumper:
0001BEC0 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001BEC4 6600                       		bne.s	Obj09_GOAL
0001BEC6 2228 0032                  		move.l	$32(a0),d1
0001BECA 0481 00FF 0001             		subi.l	#$FF0001,d1
0001BED0 3401                       		move.w	d1,d2
0001BED2 0241 007F                  		andi.w	#$7F,d1
0001BED6 C2FC 0018                  		mulu.w	#$18,d1
0001BEDA 0441 0014                  		subi.w	#$14,d1
0001BEDE EE4A                       		lsr.w	#7,d2
0001BEE0 0242 007F                  		andi.w	#$7F,d2
0001BEE4 C4FC 0018                  		mulu.w	#$18,d2
0001BEE8 0442 0044                  		subi.w	#$44,d2
0001BEEC 9268 0008                  		sub.w	8(a0),d1
0001BEF0 9468 000C                  		sub.w	$C(a0),d2
0001BEF4 4EB9 0000 2CA8             		jsr	(CalcAngle).l
0001BEFA 4EB9 0000 29DA             		jsr	(CalcSine).l
0001BF00 C3FC F900                  		muls.w	#-$700,d1
0001BF04 E081                       		asr.l	#8,d1
0001BF06 3141 0010                  		move.w	d1,$10(a0)
0001BF0A C1FC F900                  		muls.w	#-$700,d0
0001BF0E E080                       		asr.l	#8,d0
0001BF10 3140 0012                  		move.w	d0,$12(a0)
0001BF14 08E8 0001 0022             		bset	#1,$22(a0)
0001BF1A 6100 F5B6                  		bsr.w	SS_RemoveCollectedItem
0001BF1E 6600                       		bne.s	Obj09_BumpSnd
0001BF20 14BC 0002                  		move.b	#2,(a2)
0001BF24 2028 0032                  		move.l	$32(a0),d0
0001BF28 5380                       		subq.l	#1,d0
0001BF2A 2540 0004                  		move.l	d0,4(a2)
0001BF2E                            
0001BF2E                            Obj09_BumpSnd:
0001BF2E 303C 00B4                  		move.w	#$B4,d0
0001BF32 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play bumper sound
0001BF38                            ; ===========================================================================
0001BF38                            
0001BF38                            Obj09_GOAL:
0001BF38 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001BF3C 6600                       		bne.s	Obj09_UPblock
0001BF3E 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001BF42 303C 00A8                  		move.w	#$A8,d0		; change item
0001BF46 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001BF4C 4E75                       		rts	
0001BF4E                            ; ===========================================================================
0001BF4E                            
0001BF4E                            Obj09_UPblock:
0001BF4E 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001BF52 6600                       		bne.s	Obj09_DOWNblock
0001BF54 4A28 0036                  		tst.b	$36(a0)
0001BF58 6600 0000                  		bne.w	Obj09_NoGlass
0001BF5C 117C 001E 0036             		move.b	#$1E,$36(a0)
0001BF62 0838 0006 F783             		btst	#6,($FFFFF783).w
0001BF68 6700                       		beq.s	Obj09_UPsnd
0001BF6A E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001BF6E 2268 0032                  		movea.l	$32(a0),a1
0001BF72 5389                       		subq.l	#1,a1
0001BF74 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001BF78                            
0001BF78                            Obj09_UPsnd:
0001BF78 303C 00A9                  		move.w	#$A9,d0
0001BF7C 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play up/down sound
0001BF82                            ; ===========================================================================
0001BF82                            
0001BF82                            Obj09_DOWNblock:
0001BF82 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001BF86 6600                       		bne.s	Obj09_Rblock
0001BF88 4A28 0036                  		tst.b	$36(a0)
0001BF8C 6600 0000                  		bne.w	Obj09_NoGlass
0001BF90 117C 001E 0036             		move.b	#$1E,$36(a0)
0001BF96 0838 0006 F783             		btst	#6,($FFFFF783).w
0001BF9C 6600                       		bne.s	Obj09_DOWNsnd
0001BF9E E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001BFA2 2268 0032                  		movea.l	$32(a0),a1
0001BFA6 5389                       		subq.l	#1,a1
0001BFA8 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001BFAC                            
0001BFAC                            Obj09_DOWNsnd:
0001BFAC 303C 00A9                  		move.w	#$A9,d0
0001BFB0 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play up/down sound
0001BFB6                            ; ===========================================================================
0001BFB6                            
0001BFB6                            Obj09_Rblock:
0001BFB6 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001BFBA 6600                       		bne.s	Obj09_ChkGlass
0001BFBC 4A28 0037                  		tst.b	$37(a0)
0001BFC0 6600 0000                  		bne.w	Obj09_NoGlass
0001BFC4 117C 001E 0037             		move.b	#$1E,$37(a0)
0001BFCA 6100 F506                  		bsr.w	SS_RemoveCollectedItem
0001BFCE 6600                       		bne.s	Obj09_RevStage
0001BFD0 14BC 0004                  		move.b	#4,(a2)
0001BFD4 2028 0032                  		move.l	$32(a0),d0
0001BFD8 5380                       		subq.l	#1,d0
0001BFDA 2540 0004                  		move.l	d0,4(a2)
0001BFDE                            
0001BFDE                            Obj09_RevStage:
0001BFDE 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001BFE2 303C 00A9                  		move.w	#$A9,d0
0001BFE6 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play sound
0001BFEC                            ; ===========================================================================
0001BFEC                            
0001BFEC                            Obj09_ChkGlass:
0001BFEC 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001BFF0 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001BFF2 0C00 002E                  		cmpi.b	#$2E,d0
0001BFF6 6700                       		beq.s	Obj09_Glass
0001BFF8 0C00 002F                  		cmpi.b	#$2F,d0
0001BFFC 6700                       		beq.s	Obj09_Glass
0001BFFE 0C00 0030                  		cmpi.b	#$30,d0
0001C002 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C004                            
0001C004                            Obj09_Glass:
0001C004 6100 F4CC                  		bsr.w	SS_RemoveCollectedItem
0001C008 6600                       		bne.s	Obj09_GlassSnd
0001C00A 14BC 0006                  		move.b	#6,(a2)
0001C00E 2268 0032                  		movea.l	$32(a0),a1
0001C012 5389                       		subq.l	#1,a1
0001C014 2549 0004                  		move.l	a1,4(a2)
0001C018 1011                       		move.b	(a1),d0
0001C01A 5200                       		addq.b	#1,d0		; change glass type when touched
0001C01C 0C00 0030                  		cmpi.b	#$30,d0
0001C020 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C022 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C024                            
0001C024                            Obj09_GlassUpdate:
0001C024 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C028                            
0001C028                            Obj09_GlassSnd:
0001C028 303C 00BA                  		move.w	#$BA,d0
0001C02C 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C032                            ; ===========================================================================
0001C032                            
0001C032                            Obj09_NoGlass:
0001C032 4E75                       		rts	
0001C034                            ; End of function Obj09_ChkItems2
0001C034                            
0001C034                            ; ===========================================================================
0001C034                            ; ---------------------------------------------------------------------------
0001C034                            ; Object 10 - blank
0001C034                            ; ---------------------------------------------------------------------------
0001C034                            
0001C034                            Obj10:					; XREF: Obj_Index
0001C034 4E75                       		rts	
0001C036                            ; ---------------------------------------------------------------------------
0001C036                            ; Subroutine to	animate	level graphics
0001C036                            ; ---------------------------------------------------------------------------
0001C036                            
0001C036                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C036                            
0001C036                            
0001C036                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C036 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C03A 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C03C 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C042 6100 0000                  		bsr.w	AniArt_GiantRing
0001C046 7000                       		moveq	#0,d0
0001C048 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C04C D040                       		add.w	d0,d0
0001C04E 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C052 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C056                            ; ===========================================================================
0001C056                            
0001C056                            AniArt_Pause:
0001C056 4E75                       		rts	
0001C058                            ; End of function AniArt_Load
0001C058                            
0001C058                            ; ===========================================================================
0001C058 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C05C 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C060 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C064 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C066                            ; ===========================================================================
0001C066                            ; ---------------------------------------------------------------------------
0001C066                            ; Animated pattern routine - Green Hill
0001C066                            ; ---------------------------------------------------------------------------
0001C066                            
0001C066                            AniArt_GHZ:				; XREF: AniArt_Index
0001C066 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C06A 6A00                       		bpl.s	loc_1C08A
0001C06C 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C072 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C078 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C07C 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C080 0240 0001                  		andi.w	#1,d0
0001C084 6700                       		beq.s	loc_1C078
0001C086 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C08A                            
0001C08A                            loc_1C078:
0001C08A 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C094 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C098 6000 0000                  		bra.w	LoadTiles
0001C09C                            ; ===========================================================================
0001C09C                            
0001C09C                            loc_1C08A:
0001C09C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C0A0 6A00                       		bpl.s	loc_1C0C0
0001C0A2 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C0A8 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C0AE 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C0B2 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C0B6 0240 0001                  		andi.w	#1,d0
0001C0BA 6700                       		beq.s	loc_1C0AE
0001C0BC 43E9 0200                  		lea	$200(a1),a1
0001C0C0                            
0001C0C0                            loc_1C0AE:
0001C0C0 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C0CA 323C 000F                  		move.w	#$F,d1
0001C0CE 6000 0000                  		bra.w	LoadTiles
0001C0D2                            ; ===========================================================================
0001C0D2                            
0001C0D2                            loc_1C0C0:
0001C0D2 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C0D6 6A00                       		bpl.s	locret_1C10C
0001C0D8 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C0DE 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C0E2 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C0E6 0240 0003                  		andi.w	#3,d0
0001C0EA 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C0EE 0800 0000                  		btst	#0,d0
0001C0F2 6600                       		bne.s	loc_1C0E8
0001C0F4 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C0FA                            
0001C0FA                            loc_1C0E8:
0001C0FA EF48                       		lsl.w	#7,d0
0001C0FC 3200                       		move.w	d0,d1
0001C0FE D040                       		add.w	d0,d0
0001C100 D041                       		add.w	d1,d0
0001C102 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C10C 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C112 43F1 0000                  		lea	(a1,d0.w),a1
0001C116 323C 000B                  		move.w	#$B,d1
0001C11A 6100 0000                  		bsr.w	LoadTiles
0001C11E                            
0001C11E                            locret_1C10C:
0001C11E 4E75                       		rts	
0001C120                            ; ===========================================================================
0001C120 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C124                            ; ===========================================================================
0001C124                            ; ---------------------------------------------------------------------------
0001C124                            ; Animated pattern routine - Marble
0001C124                            ; ---------------------------------------------------------------------------
0001C124                            
0001C124                            AniArt_MZ:				; XREF: AniArt_Index
0001C124 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C128 6A00                       		bpl.s	loc_1C150
0001C12A 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C130 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C136 7000                       		moveq	#0,d0
0001C138 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C13C 5200                       		addq.b	#1,d0
0001C13E 0C00 0003                  		cmpi.b	#3,d0
0001C142 6600                       		bne.s	loc_1C134
0001C144 7000                       		moveq	#0,d0
0001C146                            
0001C146                            loc_1C134:
0001C146 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C14A C0FC 0100                  		mulu.w	#$100,d0
0001C14E D2C0                       		adda.w	d0,a1
0001C150 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C15A 323C 0007                  		move.w	#7,d1
0001C15E 6100 0000                  		bsr.w	LoadTiles
0001C162                            
0001C162                            loc_1C150:
0001C162 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C166 6A00                       		bpl.s	loc_1C1AE
0001C168 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C16E 7000                       		moveq	#0,d0
0001C170 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C174 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C17A EE58                       		ror.w	#7,d0
0001C17C D8C0                       		adda.w	d0,a4
0001C17E 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C188 7600                       		moveq	#0,d3
0001C18A 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C18E 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C192 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C196 343C 0003                  		move.w	#3,d2
0001C19A                            
0001C19A                            loc_1C188:
0001C19A 3003                       		move.w	d3,d0
0001C19C D040                       		add.w	d0,d0
0001C19E 0240 001E                  		andi.w	#$1E,d0
0001C1A2 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C1A8 3033 0000                  		move.w	(a3,d0.w),d0
0001C1AC 47F3 0000                  		lea	(a3,d0.w),a3
0001C1B0 224C                       		movea.l	a4,a1
0001C1B2 323C 001F                  		move.w	#$1F,d1
0001C1B6 4E93                       		jsr	(a3)
0001C1B8 5843                       		addq.w	#4,d3
0001C1BA 51CA FFDE                  		dbf	d2,loc_1C188
0001C1BE 4E75                       		rts	
0001C1C0                            ; ===========================================================================
0001C1C0                            
0001C1C0                            loc_1C1AE:
0001C1C0 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C1C4 6A00 0000                  		bpl.w	locret_1C1EA
0001C1C8 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C1CE 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C1D4 7000                       		moveq	#0,d0
0001C1D6 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C1DA 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C1DE 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C1E4 C0FC 00C0                  		mulu.w	#$C0,d0
0001C1E8 D2C0                       		adda.w	d0,a1
0001C1EA 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C1F4 323C 0005                  		move.w	#5,d1
0001C1F8 6000 0000                  		bra.w	LoadTiles
0001C1FC                            ; ===========================================================================
0001C1FC                            
0001C1FC                            locret_1C1EA:
0001C1FC 4E75                       		rts	
0001C1FE                            ; ===========================================================================
0001C1FE                            ; ---------------------------------------------------------------------------
0001C1FE                            ; Animated pattern routine - Scrap Brain
0001C1FE                            ; ---------------------------------------------------------------------------
0001C1FE                            
0001C1FE                            AniArt_SBZ:				; XREF: AniArt_Index
0001C1FE 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C202 6700                       		beq.s	loc_1C1F8
0001C204 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C208 6000                       		bra.s	loc_1C250
0001C20A                            ; ===========================================================================
0001C20A                            
0001C20A                            loc_1C1F8:
0001C20A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C20E 6A00                       		bpl.s	loc_1C250
0001C210 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C216 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C21C 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C226 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C22A 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C22E 0240 0007                  		andi.w	#7,d0
0001C232 6700                       		beq.s	loc_1C234
0001C234 5340                       		subq.w	#1,d0
0001C236 C0FC 0180                  		mulu.w	#$180,d0
0001C23A 43F1 0000                  		lea	(a1,d0.w),a1
0001C23E 323C 000B                  		move.w	#$B,d1
0001C242 6000 0000                  		bra.w	LoadTiles
0001C246                            ; ===========================================================================
0001C246                            
0001C246                            loc_1C234:
0001C246 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C24C                            
0001C24C                            loc_1C23A:
0001C24C 323C 0005                  		move.w	#5,d1
0001C250 6100 0000                  		bsr.w	LoadTiles
0001C254 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C25A 323C 0005                  		move.w	#5,d1
0001C25E 6000 0000                  		bra.w	LoadTiles
0001C262                            ; ===========================================================================
0001C262                            
0001C262                            loc_1C250:
0001C262 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C266 6700                       		beq.s	loc_1C25C
0001C268 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C26C 6000                       		bra.s	locret_1C2A0
0001C26E                            ; ===========================================================================
0001C26E                            
0001C26E                            loc_1C25C:
0001C26E 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C272 6A00                       		bpl.s	locret_1C2A0
0001C274 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C27A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C280 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C28A 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C28E 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C292 0240 0007                  		andi.w	#7,d0
0001C296 6700                       		beq.s	loc_1C298
0001C298 5340                       		subq.w	#1,d0
0001C29A C0FC 0180                  		mulu.w	#$180,d0
0001C29E 43F1 0000                  		lea	(a1,d0.w),a1
0001C2A2 323C 000B                  		move.w	#$B,d1
0001C2A6 6000 0000                  		bra.w	LoadTiles
0001C2AA                            ; ===========================================================================
0001C2AA                            
0001C2AA                            loc_1C298:
0001C2AA 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C2B0 609A                       		bra.s	loc_1C23A
0001C2B2                            ; ===========================================================================
0001C2B2                            
0001C2B2                            locret_1C2A0:
0001C2B2 4E75                       		rts	
0001C2B4                            ; ===========================================================================
0001C2B4                            ; ---------------------------------------------------------------------------
0001C2B4                            ; Animated pattern routine - ending sequence
0001C2B4                            ; ---------------------------------------------------------------------------
0001C2B4                            
0001C2B4                            AniArt_Ending:				; XREF: AniArt_Index
0001C2B4 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C2B8 6A00                       		bpl.s	loc_1C2F4
0001C2BA 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C2C0 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C2C6 45F8 9400                  		lea	($FFFF9400).w,a2
0001C2CA 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C2CE 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C2D2 0240 0001                  		andi.w	#1,d0
0001C2D6 6700                       		beq.s	loc_1C2CE
0001C2D8 43E9 0200                  		lea	$200(a1),a1
0001C2DC 45EA 0200                  		lea	$200(a2),a2
0001C2E0                            
0001C2E0                            loc_1C2CE:
0001C2E0 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C2EA 323C 000F                  		move.w	#$F,d1
0001C2EE 6100 0000                  		bsr.w	LoadTiles
0001C2F2 224A                       		movea.l	a2,a1
0001C2F4 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001C2FE 323C 000F                  		move.w	#$F,d1
0001C302 6000 0000                  		bra.w	LoadTiles
0001C306                            ; ===========================================================================
0001C306                            
0001C306                            loc_1C2F4:
0001C306 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C30A 6A00                       		bpl.s	loc_1C33C
0001C30C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C312 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C316 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C31A 0240 0007                  		andi.w	#7,d0
0001C31E 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001C322 EF48                       		lsl.w	#7,d0
0001C324 3200                       		move.w	d0,d1
0001C326 D040                       		add.w	d0,d0
0001C328 D041                       		add.w	d1,d0
0001C32A 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C334 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C33A 43F1 0000                  		lea	(a1,d0.w),a1
0001C33E 323C 000B                  		move.w	#$B,d1
0001C342 6000 0000                  		bra.w	LoadTiles
0001C346                            ; ===========================================================================
0001C346 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001C34E                            ; ===========================================================================
0001C34E                            
0001C34E                            loc_1C33C:
0001C34E 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001C352 6A00                       		bpl.s	loc_1C37A
0001C354 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001C35A 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001C35E 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001C362 0240 0003                  		andi.w	#3,d0
0001C366 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001C36A E148                       		lsl.w	#8,d0
0001C36C D040                       		add.w	d0,d0
0001C36E 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001C378 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001C37C 43F1 0000                  		lea	(a1,d0.w),a1
0001C380 323C 000F                  		move.w	#$F,d1
0001C384 6000 0000                  		bra.w	LoadTiles
0001C388                            ; ===========================================================================
0001C388 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001C38C                            ; ===========================================================================
0001C38C                            
0001C38C                            loc_1C37A:
0001C38C 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001C390 6A00                       		bpl.s	locret_1C3B4
0001C392 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001C398 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001C39C 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001C3A0 0240 0003                  		andi.w	#3,d0
0001C3A4 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001C3A8 E148                       		lsl.w	#8,d0
0001C3AA D040                       		add.w	d0,d0
0001C3AC 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001C3B6 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001C3BA 43F1 0000                  		lea	(a1,d0.w),a1
0001C3BE 323C 000F                  		move.w	#$F,d1
0001C3C2 6000 0000                  		bra.w	LoadTiles
0001C3C6                            ; ===========================================================================
0001C3C6                            
0001C3C6                            locret_1C3B4:
0001C3C6 4E75                       		rts	
0001C3C8                            ; ===========================================================================
0001C3C8                            
0001C3C8                            AniArt_none:				; XREF: AniArt_Index
0001C3C8 4E75                       		rts	
0001C3CA                            
0001C3CA                            ; ---------------------------------------------------------------------------
0001C3CA                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001C3CA                            ; ---------------------------------------------------------------------------
0001C3CA                            
0001C3CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3CA                            
0001C3CA                            
0001C3CA                            LoadTiles:
0001C3CA 2C99                       		move.l	(a1)+,(a6)
0001C3CC 2C99                       		move.l	(a1)+,(a6)
0001C3CE 2C99                       		move.l	(a1)+,(a6)
0001C3D0 2C99                       		move.l	(a1)+,(a6)
0001C3D2 2C99                       		move.l	(a1)+,(a6)
0001C3D4 2C99                       		move.l	(a1)+,(a6)
0001C3D6 2C99                       		move.l	(a1)+,(a6)
0001C3D8 2C99                       		move.l	(a1)+,(a6)
0001C3DA 51C9 FFEE                  		dbf	d1,LoadTiles
0001C3DE 4E75                       		rts	
0001C3E0                            ; End of function LoadTiles
0001C3E0                            
0001C3E0                            ; ===========================================================================
0001C3E0                            ; ---------------------------------------------------------------------------
0001C3E0                            ; Animated pattern routine - more Marble Zone
0001C3E0                            ; ---------------------------------------------------------------------------
0001C3E0 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001C3E4 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001C3E8 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001C3EC 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001C3F0 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001C3F4 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001C3F8 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001C3FC 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001C400                            ; ===========================================================================
0001C400                            
0001C400                            loc_1C3EE:				; XREF: AniArt_MZextra
0001C400 2C91                       		move.l	(a1),(a6)
0001C402 43E9 0010                  		lea	$10(a1),a1
0001C406 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001C40A 4E75                       		rts	
0001C40C                            ; ===========================================================================
0001C40C                            
0001C40C                            loc_1C3FA:				; XREF: AniArt_MZextra
0001C40C 2029 0002                  		move.l	2(a1),d0
0001C410 1029 0001                  		move.b	1(a1),d0
0001C414 E098                       		ror.l	#8,d0
0001C416 2C80                       		move.l	d0,(a6)
0001C418 43E9 0010                  		lea	$10(a1),a1
0001C41C 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001C420 4E75                       		rts	
0001C422                            ; ===========================================================================
0001C422                            
0001C422                            loc_1C410:				; XREF: AniArt_MZextra
0001C422 2CA9 0002                  		move.l	2(a1),(a6)
0001C426 43E9 0010                  		lea	$10(a1),a1
0001C42A 51C9 FFF6                  		dbf	d1,loc_1C410
0001C42E 4E75                       		rts	
0001C430                            ; ===========================================================================
0001C430                            
0001C430                            loc_1C41E:				; XREF: AniArt_MZextra
0001C430 2029 0004                  		move.l	4(a1),d0
0001C434 1029 0003                  		move.b	3(a1),d0
0001C438 E098                       		ror.l	#8,d0
0001C43A 2C80                       		move.l	d0,(a6)
0001C43C 43E9 0010                  		lea	$10(a1),a1
0001C440 51C9 FFEE                  		dbf	d1,loc_1C41E
0001C444 4E75                       		rts	
0001C446                            ; ===========================================================================
0001C446                            
0001C446                            loc_1C434:				; XREF: AniArt_MZextra
0001C446 2CA9 0004                  		move.l	4(a1),(a6)
0001C44A 43E9 0010                  		lea	$10(a1),a1
0001C44E 51C9 FFF6                  		dbf	d1,loc_1C434
0001C452 4E75                       		rts	
0001C454                            ; ===========================================================================
0001C454                            
0001C454                            loc_1C442:				; XREF: AniArt_MZextra
0001C454 2029 0006                  		move.l	6(a1),d0
0001C458 1029 0005                  		move.b	5(a1),d0
0001C45C E098                       		ror.l	#8,d0
0001C45E 2C80                       		move.l	d0,(a6)
0001C460 43E9 0010                  		lea	$10(a1),a1
0001C464 51C9 FFEE                  		dbf	d1,loc_1C442
0001C468 4E75                       		rts	
0001C46A                            ; ===========================================================================
0001C46A                            
0001C46A                            loc_1C458:				; XREF: AniArt_MZextra
0001C46A 2CA9 0006                  		move.l	6(a1),(a6)
0001C46E 43E9 0010                  		lea	$10(a1),a1
0001C472 51C9 FFF6                  		dbf	d1,loc_1C458
0001C476 4E75                       		rts	
0001C478                            ; ===========================================================================
0001C478                            
0001C478                            loc_1C466:				; XREF: AniArt_MZextra
0001C478 2029 0008                  		move.l	8(a1),d0
0001C47C 1029 0007                  		move.b	7(a1),d0
0001C480 E098                       		ror.l	#8,d0
0001C482 2C80                       		move.l	d0,(a6)
0001C484 43E9 0010                  		lea	$10(a1),a1
0001C488 51C9 FFEE                  		dbf	d1,loc_1C466
0001C48C 4E75                       		rts	
0001C48E                            ; ===========================================================================
0001C48E                            
0001C48E                            loc_1C47C:				; XREF: AniArt_MZextra
0001C48E 2CA9 0008                  		move.l	8(a1),(a6)
0001C492 43E9 0010                  		lea	$10(a1),a1
0001C496 51C9 FFF6                  		dbf	d1,loc_1C47C
0001C49A 4E75                       		rts	
0001C49C                            ; ===========================================================================
0001C49C                            
0001C49C                            loc_1C48A:				; XREF: AniArt_MZextra
0001C49C 2029 000A                  		move.l	$A(a1),d0
0001C4A0 1029 0009                  		move.b	9(a1),d0
0001C4A4 E098                       		ror.l	#8,d0
0001C4A6 2C80                       		move.l	d0,(a6)
0001C4A8 43E9 0010                  		lea	$10(a1),a1
0001C4AC 51C9 FFEE                  		dbf	d1,loc_1C48A
0001C4B0 4E75                       		rts	
0001C4B2                            ; ===========================================================================
0001C4B2                            
0001C4B2                            loc_1C4A0:				; XREF: AniArt_MZextra
0001C4B2 2CA9 000A                  		move.l	$A(a1),(a6)
0001C4B6 43E9 0010                  		lea	$10(a1),a1
0001C4BA 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001C4BE 4E75                       		rts	
0001C4C0                            ; ===========================================================================
0001C4C0                            
0001C4C0                            loc_1C4AE:				; XREF: AniArt_MZextra
0001C4C0 2029 000C                  		move.l	$C(a1),d0
0001C4C4 1029 000B                  		move.b	$B(a1),d0
0001C4C8 E098                       		ror.l	#8,d0
0001C4CA 2C80                       		move.l	d0,(a6)
0001C4CC 43E9 0010                  		lea	$10(a1),a1
0001C4D0 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001C4D4 4E75                       		rts	
0001C4D6                            ; ===========================================================================
0001C4D6                            
0001C4D6                            loc_1C4C4:				; XREF: AniArt_MZextra
0001C4D6 2CA9 000C                  		move.l	$C(a1),(a6)
0001C4DA 43E9 0010                  		lea	$10(a1),a1
0001C4DE 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001C4E2 4E75                       		rts	
0001C4E4                            ; ===========================================================================
0001C4E4                            
0001C4E4                            loc_1C4D2:				; XREF: AniArt_MZextra
0001C4E4 2029 000C                  		move.l	$C(a1),d0
0001C4E8 E198                       		rol.l	#8,d0
0001C4EA 1011                       		move.b	0(a1),d0
0001C4EC 2C80                       		move.l	d0,(a6)
0001C4EE 43E9 0010                  		lea	$10(a1),a1
0001C4F2 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001C4F6 4E75                       		rts	
0001C4F8                            ; ===========================================================================
0001C4F8                            
0001C4F8                            loc_1C4E8:				; XREF: AniArt_MZextra
0001C4F8 3CA9 000E                  		move.w	$E(a1),(a6)
0001C4FC 3C91                       		move.w	0(a1),(a6)
0001C4FE 43E9 0010                  		lea	$10(a1),a1
0001C502 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001C506 4E75                       		rts	
0001C508                            ; ===========================================================================
0001C508                            
0001C508                            loc_1C4FA:				; XREF: AniArt_MZextra
0001C508 2011                       		move.l	0(a1),d0
0001C50A 1029 000F                  		move.b	$F(a1),d0
0001C50E E098                       		ror.l	#8,d0
0001C510 2C80                       		move.l	d0,(a6)
0001C512 43E9 0010                  		lea	$10(a1),a1
0001C516 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001C51A 4E75                       		rts	
0001C51C                            
0001C51C                            ; ---------------------------------------------------------------------------
0001C51C                            ; Animated pattern routine - giant ring
0001C51C                            ; ---------------------------------------------------------------------------
0001C51C                            
0001C51C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C51C                            
0001C51C                            
0001C51C                            AniArt_GiantRing:			; XREF: AniArt_Load
0001C51C 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001C520 6600                       		bne.s	loc_1C518
0001C522 4E75                       		rts	
0001C524                            ; ===========================================================================
0001C524                            
0001C524                            loc_1C518:
0001C524 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001C52A 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001C530 7000                       		moveq	#0,d0
0001C532 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001C536 43F1 0000                  		lea	(a1,d0.w),a1
0001C53A 0640 8000                  		addi.w	#$8000,d0
0001C53E E588                       		lsl.l	#2,d0
0001C540 E448                       		lsr.w	#2,d0
0001C542 0040 4000                  		ori.w	#$4000,d0
0001C546 4840                       		swap	d0
0001C548 2D40 0004                  		move.l	d0,4(a6)
0001C54C 323C 000D                  		move.w	#$D,d1
0001C550 6000 FE78                  		bra.w	LoadTiles
0001C554                            ; End of function AniArt_GiantRing
0001C554                            
0001C554                            ; ===========================================================================
0001C554                            ; ---------------------------------------------------------------------------
0001C554                            ; Object 21 - SCORE, TIME, RINGS
0001C554                            ; ---------------------------------------------------------------------------
0001C554                            
0001C554                            Obj21:					; XREF: Obj_Index
0001C554 7000                       		moveq	#0,d0
0001C556 1028 0024                  		move.b	$24(a0),d0
0001C55A 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001C55E 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001C562                            ; ===========================================================================
0001C562 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001C564 0000                       		dc.w Obj21_Flash-Obj21_Index
0001C566                            ; ===========================================================================
0001C566                            
0001C566                            Obj21_Main:				; XREF: Obj21_Main
0001C566 5428 0024                  		addq.b	#2,$24(a0)
0001C56A 317C 0090 0008             		move.w	#$90,8(a0)
0001C570 317C 0108 000A             		move.w	#$108,$A(a0)
0001C576 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001C57E 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001C584 117C 0000 0001             		move.b	#0,1(a0)
0001C58A 117C 0000 0018             		move.b	#0,$18(a0)
0001C590                            
0001C590                            Obj21_Flash:				; XREF: Obj21_Main
0001C590 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001C594 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001C596 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001C59A 4EF9 0000 D6C6             		jmp	DisplaySprite
0001C5A0                            ; ===========================================================================
0001C5A0                            
0001C5A0                            Obj21_Flash2:
0001C5A0 7000                       		moveq	#0,d0
0001C5A2 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001C5A8 6600                       		bne.s	Obj21_Display
0001C5AA 5240                       		addq.w	#1,d0		; make ring counter flash red
0001C5AC 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001C5B2 6600                       		bne.s	Obj21_Display	; if not, branch
0001C5B4 5440                       		addq.w	#2,d0		; make time counter flash red
0001C5B6                            
0001C5B6                            Obj21_Display:
0001C5B6 1140 001A                  		move.b	d0,$1A(a0)
0001C5BA 4EF9 0000 D6C6             		jmp	DisplaySprite
0001C5C0                            ; ===========================================================================
0001C5C0                            ; ---------------------------------------------------------------------------
0001C5C0                            ; Sprite mappings - SCORE, TIME, RINGS
0001C5C0                            ; ---------------------------------------------------------------------------
0001C5C0                            Map_obj21:
0001C5C0                            	include "_maps\obj21.asm"
0001C5C0                            ; ---------------------------------------------------------------------------
0001C5C0                            ; Sprite mappings - SCORE, TIME, RINGS
0001C5C0                            ; ---------------------------------------------------------------------------
0001C5C0 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001C5C4 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001C5C8 0A                         byte_1C5BC:	dc.b $A
0001C5C9 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C5CE 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C5D3 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C5D8 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001C5DD 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C5E2 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001C5E7 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001C5EC A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C5F1 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C5F6 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C5FB 00                         		dc.b 0
0001C5FC 0A                         byte_1C5F0:	dc.b $A
0001C5FD 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C602 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C607 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C60C 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001C611 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C616 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001C61B A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001C620 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C625 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C62A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C62F 00                         		dc.b 0
0001C630 0A                         byte_1C624:	dc.b $A
0001C631 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C636 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C63B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C640 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001C645 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C64A A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001C64F A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001C654 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C659 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C65E 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C663 00                         		dc.b 0
0001C664 0A                         byte_1C658:	dc.b $A
0001C665 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C66A 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C66F 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C674 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001C679 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C67E A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001C683 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001C688 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C68D 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C692 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C698 00                         		even
0001C698 00                         		even
0001C698                            
0001C698                            ; ---------------------------------------------------------------------------
0001C698                            ; Add points subroutine
0001C698                            ; ---------------------------------------------------------------------------
0001C698                            
0001C698                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C698                            
0001C698                            
0001C698                            AddPoints:
0001C698 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001C69E 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001C6A2 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001C6A6 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001C6A8 223C 000F 423F             		move.l	#999999,d1
0001C6AE B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001C6B0 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001C6B4 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001C6B6 2481                       		move.l	d1,(a2)
0001C6B8                            
0001C6B8                            loc_1C6AC:
0001C6B8 2013                       		move.l	(a3),d0
0001C6BA B092                       		cmp.l	(a2),d0
0001C6BC 6500 0000                  		bcs.w	locret_1C6B6
0001C6C0 2480                       		move.l	d0,(a2)
0001C6C2                            
0001C6C2                            locret_1C6B6:
0001C6C2 4E75                       		rts	
0001C6C4                            ; End of function AddPoints
0001C6C4                            
0001C6C4                            ; ---------------------------------------------------------------------------
0001C6C4                            ; Subroutine to	update the HUD
0001C6C4                            ; ---------------------------------------------------------------------------
0001C6C4                            
0001C6C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6C4                            
0001C6C4                            
0001C6C4                            HudUpdate:
0001C6C4 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001C6C8 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001C6CC 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001C6D0 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001C6D2 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001C6D6 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001C6DC 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001C6E0 6100 0000                  		bsr.w	Hud_Score
0001C6E4                            
0001C6E4                            Hud_ChkRings:
0001C6E4 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001C6E8 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001C6EA 6A00                       		bpl.s	loc_1C6E4
0001C6EC 6100 0000                  		bsr.w	Hud_LoadZero
0001C6F0                            
0001C6F0                            loc_1C6E4:
0001C6F0 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001C6F4 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001C6FA 7200                       		moveq	#0,d1
0001C6FC 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001C700 6100 0000                  		bsr.w	Hud_Rings
0001C704                            
0001C704                            Hud_ChkTime:
0001C704 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001C708 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001C70A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C70E 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001C710 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001C714 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001C71A 6700                       		beq.s	TimeOver	; if yes, branch
0001C71C 5221                       		addq.b	#1,-(a1)
0001C71E 0C11 003C                  		cmpi.b	#60,(a1)
0001C722 6500                       		bcs.s	Hud_ChkLives
0001C724 12BC 0000                  		move.b	#0,(a1)
0001C728 5221                       		addq.b	#1,-(a1)
0001C72A 0C11 003C                  		cmpi.b	#60,(a1)
0001C72E 6500                       		bcs.s	loc_1C734
0001C730 12BC 0000                  		move.b	#0,(a1)
0001C734 5221                       		addq.b	#1,-(a1)
0001C736 0C11 0009                  		cmpi.b	#9,(a1)
0001C73A 6500                       		bcs.s	loc_1C734
0001C73C 12BC 0009                  		move.b	#9,(a1)
0001C740                            
0001C740                            loc_1C734:
0001C740 203C 5E40 0003             		move.l	#$5E400003,d0
0001C746 7200                       		moveq	#0,d1
0001C748 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001C74C 6100 0000                  		bsr.w	Hud_Mins
0001C750 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001C756 7200                       		moveq	#0,d1
0001C758 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001C75C 6100 0000                  		bsr.w	Hud_Secs
0001C760                            
0001C760                            Hud_ChkLives:
0001C760 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001C764 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001C766 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001C76A 6100 0000                  		bsr.w	Hud_Lives
0001C76E                            
0001C76E                            Hud_ChkBonus:
0001C76E 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001C772 6700                       		beq.s	Hud_End		; if not, branch
0001C774 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001C778 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001C782 7200                       		moveq	#0,d1
0001C784 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001C788 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C78C 7200                       		moveq	#0,d1
0001C78E 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001C792 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C796                            
0001C796                            Hud_End:
0001C796 4E75                       		rts	
0001C798                            ; ===========================================================================
0001C798                            
0001C798                            TimeOver:				; XREF: Hud_ChkTime
0001C798 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001C79C 41F8 D000                  		lea	($FFFFD000).w,a0
0001C7A0 2448                       		movea.l	a0,a2
0001C7A2 6100 E90C                  		bsr.w	KillSonic
0001C7A6 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001C7AC 4E75                       		rts	
0001C7AE                            ; ===========================================================================
0001C7AE                            
0001C7AE                            HudDebug:				; XREF: HudUpdate
0001C7AE 6100 0000                  		bsr.w	HudDb_XY
0001C7B2 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001C7B6 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001C7B8 6A00                       		bpl.s	HudDb_Rings
0001C7BA 6100 0000                  		bsr.w	Hud_LoadZero
0001C7BE                            
0001C7BE                            HudDb_Rings:
0001C7BE 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001C7C2 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001C7C8 7200                       		moveq	#0,d1
0001C7CA 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001C7CE 6100 0000                  		bsr.w	Hud_Rings
0001C7D2                            
0001C7D2                            HudDb_ObjCount:
0001C7D2 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001C7D8 7200                       		moveq	#0,d1
0001C7DA 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001C7DE 6100 0000                  		bsr.w	Hud_Secs
0001C7E2 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001C7E6 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001C7E8 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001C7EC 6100 0000                  		bsr.w	Hud_Lives
0001C7F0                            
0001C7F0                            HudDb_ChkBonus:
0001C7F0 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001C7F4 6700                       		beq.s	HudDb_End	; if not, branch
0001C7F6 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001C7FA 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001C804 7200                       		moveq	#0,d1
0001C806 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001C80A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C80E 7200                       		moveq	#0,d1
0001C810 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001C814 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C818                            
0001C818                            HudDb_End:
0001C818 4E75                       		rts	
0001C81A                            ; End of function HudUpdate
0001C81A                            
0001C81A                            ; ---------------------------------------------------------------------------
0001C81A                            ; Subroutine to	load "0" on the	HUD
0001C81A                            ; ---------------------------------------------------------------------------
0001C81A                            
0001C81A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C81A                            
0001C81A                            
0001C81A                            Hud_LoadZero:				; XREF: HudUpdate
0001C81A 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001C824 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001C828 343C 0002                  		move.w	#2,d2
0001C82C 6000                       		bra.s	loc_1C83E
0001C82E                            ; End of function Hud_LoadZero
0001C82E                            
0001C82E                            ; ---------------------------------------------------------------------------
0001C82E                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001C82E                            ; ---------------------------------------------------------------------------
0001C82E                            
0001C82E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C82E                            
0001C82E                            
0001C82E                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001C82E 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C834 6100 0000                  		bsr.w	Hud_Lives
0001C838 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001C842 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001C846 343C 000E                  		move.w	#$E,d2
0001C84A                            
0001C84A                            loc_1C83E:				; XREF: Hud_LoadZero
0001C84A 43FA 0000                  		lea	Art_Hud(pc),a1
0001C84E                            
0001C84E                            loc_1C842:
0001C84E 323C 000F                  		move.w	#$F,d1
0001C852 101A                       		move.b	(a2)+,d0
0001C854 6B00                       		bmi.s	loc_1C85E
0001C856 4880                       		ext.w	d0
0001C858 EB48                       		lsl.w	#5,d0
0001C85A 47F1 0000                  		lea	(a1,d0.w),a3
0001C85E                            
0001C85E                            loc_1C852:
0001C85E 2C9B                       		move.l	(a3)+,(a6)
0001C860 51C9 FFFC                  		dbf	d1,loc_1C852
0001C864                            
0001C864                            loc_1C858:
0001C864 51CA FFE8                  		dbf	d2,loc_1C842
0001C868                            
0001C868 4E75                       		rts	
0001C86A                            ; ===========================================================================
0001C86A                            
0001C86A                            loc_1C85E:
0001C86A 2CBC 0000 0000             		move.l	#0,(a6)
0001C870 51C9 FFF8                  		dbf	d1,loc_1C85E
0001C874                            
0001C874 60EE                       		bra.s	loc_1C858
0001C876                            ; End of function Hud_Base
0001C876                            
0001C876                            ; ===========================================================================
0001C876 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001C882 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001C886                            ; ---------------------------------------------------------------------------
0001C886                            ; Subroutine to	load debug mode	numbers	patterns
0001C886                            ; ---------------------------------------------------------------------------
0001C886                            
0001C886                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C886                            
0001C886                            
0001C886                            HudDb_XY:				; XREF: HudDebug
0001C886 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001C890 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001C894 4841                       		swap	d1
0001C896 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001C89A 6100                       		bsr.s	HudDb_XY2
0001C89C 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001C8A0 4841                       		swap	d1
0001C8A2 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001C8A6                            ; End of function HudDb_XY
0001C8A6                            
0001C8A6                            
0001C8A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8A6                            
0001C8A6                            
0001C8A6                            HudDb_XY2:
0001C8A6 7C07                       		moveq	#7,d6
0001C8A8 43F9 0000 05F0             		lea	(Art_Text).l,a1
0001C8AE                            
0001C8AE                            HudDb_XYLoop:
0001C8AE E959                       		rol.w	#4,d1
0001C8B0 3401                       		move.w	d1,d2
0001C8B2 0242 000F                  		andi.w	#$F,d2
0001C8B6 0C42 000A                  		cmpi.w	#$A,d2
0001C8BA 6500                       		bcs.s	loc_1C8B2
0001C8BC 5E42                       		addq.w	#7,d2
0001C8BE                            
0001C8BE                            loc_1C8B2:
0001C8BE EB4A                       		lsl.w	#5,d2
0001C8C0 47F1 2000                  		lea	(a1,d2.w),a3
0001C8C4 2C9B                       		move.l	(a3)+,(a6)
0001C8C6 2C9B                       		move.l	(a3)+,(a6)
0001C8C8 2C9B                       		move.l	(a3)+,(a6)
0001C8CA 2C9B                       		move.l	(a3)+,(a6)
0001C8CC 2C9B                       		move.l	(a3)+,(a6)
0001C8CE 2C9B                       		move.l	(a3)+,(a6)
0001C8D0 2C9B                       		move.l	(a3)+,(a6)
0001C8D2 2C9B                       		move.l	(a3)+,(a6)
0001C8D4 4841                       		swap	d1
0001C8D6 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001C8DA                            
0001C8DA 4E75                       		rts	
0001C8DC                            ; End of function HudDb_XY2
0001C8DC                            
0001C8DC                            ; ---------------------------------------------------------------------------
0001C8DC                            ; Subroutine to	load rings numbers patterns
0001C8DC                            ; ---------------------------------------------------------------------------
0001C8DC                            
0001C8DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8DC                            
0001C8DC                            
0001C8DC                            Hud_Rings:				; XREF: HudUpdate
0001C8DC 45F9 0000 0000             		lea	(Hud_100).l,a2
0001C8E2 7C02                       		moveq	#2,d6
0001C8E4 6000                       		bra.s	Hud_LoadArt
0001C8E6                            ; End of function Hud_Rings
0001C8E6                            
0001C8E6                            ; ---------------------------------------------------------------------------
0001C8E6                            ; Subroutine to	load score numbers patterns
0001C8E6                            ; ---------------------------------------------------------------------------
0001C8E6                            
0001C8E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8E6                            
0001C8E6                            
0001C8E6                            Hud_Score:				; XREF: HudUpdate
0001C8E6 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001C8EC 7C05                       		moveq	#5,d6
0001C8EE                            
0001C8EE                            Hud_LoadArt:
0001C8EE 7800                       		moveq	#0,d4
0001C8F0 43FA 0000                  		lea	Art_Hud(pc),a1
0001C8F4                            
0001C8F4                            Hud_ScoreLoop:
0001C8F4 7400                       		moveq	#0,d2
0001C8F6 261A                       		move.l	(a2)+,d3
0001C8F8                            
0001C8F8                            loc_1C8EC:
0001C8F8 9283                       		sub.l	d3,d1
0001C8FA 6500                       		bcs.s	loc_1C8F4
0001C8FC 5242                       		addq.w	#1,d2
0001C8FE 60F8                       		bra.s	loc_1C8EC
0001C900                            ; ===========================================================================
0001C900                            
0001C900                            loc_1C8F4:
0001C900 D283                       		add.l	d3,d1
0001C902 4A42                       		tst.w	d2
0001C904 6700                       		beq.s	loc_1C8FE
0001C906 383C 0001                  		move.w	#1,d4
0001C90A                            
0001C90A                            loc_1C8FE:
0001C90A 4A44                       		tst.w	d4
0001C90C 6700                       		beq.s	loc_1C92C
0001C90E ED4A                       		lsl.w	#6,d2
0001C910 2D40 0004                  		move.l	d0,4(a6)
0001C914 47F1 2000                  		lea	(a1,d2.w),a3
0001C918 2C9B                       		move.l	(a3)+,(a6)
0001C91A 2C9B                       		move.l	(a3)+,(a6)
0001C91C 2C9B                       		move.l	(a3)+,(a6)
0001C91E 2C9B                       		move.l	(a3)+,(a6)
0001C920 2C9B                       		move.l	(a3)+,(a6)
0001C922 2C9B                       		move.l	(a3)+,(a6)
0001C924 2C9B                       		move.l	(a3)+,(a6)
0001C926 2C9B                       		move.l	(a3)+,(a6)
0001C928 2C9B                       		move.l	(a3)+,(a6)
0001C92A 2C9B                       		move.l	(a3)+,(a6)
0001C92C 2C9B                       		move.l	(a3)+,(a6)
0001C92E 2C9B                       		move.l	(a3)+,(a6)
0001C930 2C9B                       		move.l	(a3)+,(a6)
0001C932 2C9B                       		move.l	(a3)+,(a6)
0001C934 2C9B                       		move.l	(a3)+,(a6)
0001C936 2C9B                       		move.l	(a3)+,(a6)
0001C938                            
0001C938                            loc_1C92C:
0001C938 0680 0040 0000             		addi.l	#$400000,d0
0001C93E 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001C942                            
0001C942 4E75                       		rts	
0001C944                            ; End of function Hud_Score
0001C944                            
0001C944                            ; ---------------------------------------------------------------------------
0001C944                            ; Subroutine to	load countdown numbers on the continue screen
0001C944                            ; ---------------------------------------------------------------------------
0001C944                            
0001C944                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C944                            
0001C944                            
0001C944                            ContScrCounter:				; XREF: ContinueScreen
0001C944 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001C94E 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C954 45F9 0000 0000             		lea	(Hud_10).l,a2
0001C95A 7C01                       		moveq	#1,d6
0001C95C 7800                       		moveq	#0,d4
0001C95E 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001C962                            
0001C962                            ContScr_Loop:
0001C962 7400                       		moveq	#0,d2
0001C964 261A                       		move.l	(a2)+,d3
0001C966                            
0001C966                            loc_1C95A:
0001C966 9283                       		sub.l	d3,d1
0001C968 6500                       		bcs.s	loc_1C962
0001C96A 5242                       		addq.w	#1,d2
0001C96C 60F8                       		bra.s	loc_1C95A
0001C96E                            ; ===========================================================================
0001C96E                            
0001C96E                            loc_1C962:
0001C96E D283                       		add.l	d3,d1
0001C970 ED4A                       		lsl.w	#6,d2
0001C972 47F1 2000                  		lea	(a1,d2.w),a3
0001C976 2C9B                       		move.l	(a3)+,(a6)
0001C978 2C9B                       		move.l	(a3)+,(a6)
0001C97A 2C9B                       		move.l	(a3)+,(a6)
0001C97C 2C9B                       		move.l	(a3)+,(a6)
0001C97E 2C9B                       		move.l	(a3)+,(a6)
0001C980 2C9B                       		move.l	(a3)+,(a6)
0001C982 2C9B                       		move.l	(a3)+,(a6)
0001C984 2C9B                       		move.l	(a3)+,(a6)
0001C986 2C9B                       		move.l	(a3)+,(a6)
0001C988 2C9B                       		move.l	(a3)+,(a6)
0001C98A 2C9B                       		move.l	(a3)+,(a6)
0001C98C 2C9B                       		move.l	(a3)+,(a6)
0001C98E 2C9B                       		move.l	(a3)+,(a6)
0001C990 2C9B                       		move.l	(a3)+,(a6)
0001C992 2C9B                       		move.l	(a3)+,(a6)
0001C994 2C9B                       		move.l	(a3)+,(a6)
0001C996 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001C99A                            
0001C99A 4E75                       		rts	
0001C99C                            ; End of function ContScrCounter
0001C99C                            
0001C99C                            ; ===========================================================================
0001C99C                            ; ---------------------------------------------------------------------------
0001C99C                            ; HUD counter sizes
0001C99C                            ; ---------------------------------------------------------------------------
0001C99C 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001C9A0 0000 2710                  Hud_10000:	dc.l 10000
0001C9A4 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001C9A8 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001C9AC 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001C9B0 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001C9B4                            
0001C9B4                            ; ---------------------------------------------------------------------------
0001C9B4                            ; Subroutine to	load time numbers patterns
0001C9B4                            ; ---------------------------------------------------------------------------
0001C9B4                            
0001C9B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9B4                            
0001C9B4                            
0001C9B4                            Hud_Mins:				; XREF: Hud_ChkTime
0001C9B4 45F9 0001 C9B0             		lea	(Hud_1).l,a2
0001C9BA 7C00                       		moveq	#0,d6
0001C9BC 6000                       		bra.s	loc_1C9BA
0001C9BE                            ; End of function Hud_Mins
0001C9BE                            
0001C9BE                            
0001C9BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9BE                            
0001C9BE                            
0001C9BE                            Hud_Secs:				; XREF: Hud_ChkTime
0001C9BE 45F9 0001 C9AC             		lea	(Hud_10).l,a2
0001C9C4 7C01                       		moveq	#1,d6
0001C9C6                            
0001C9C6                            loc_1C9BA:
0001C9C6 7800                       		moveq	#0,d4
0001C9C8 43FA 0000                  		lea	Art_Hud(pc),a1
0001C9CC                            
0001C9CC                            Hud_TimeLoop:
0001C9CC 7400                       		moveq	#0,d2
0001C9CE 261A                       		move.l	(a2)+,d3
0001C9D0                            
0001C9D0                            loc_1C9C4:
0001C9D0 9283                       		sub.l	d3,d1
0001C9D2 6500                       		bcs.s	loc_1C9CC
0001C9D4 5242                       		addq.w	#1,d2
0001C9D6 60F8                       		bra.s	loc_1C9C4
0001C9D8                            ; ===========================================================================
0001C9D8                            
0001C9D8                            loc_1C9CC:
0001C9D8 D283                       		add.l	d3,d1
0001C9DA 4A42                       		tst.w	d2
0001C9DC 6700                       		beq.s	loc_1C9D6
0001C9DE 383C 0001                  		move.w	#1,d4
0001C9E2                            
0001C9E2                            loc_1C9D6:
0001C9E2 ED4A                       		lsl.w	#6,d2
0001C9E4 2D40 0004                  		move.l	d0,4(a6)
0001C9E8 47F1 2000                  		lea	(a1,d2.w),a3
0001C9EC 2C9B                       		move.l	(a3)+,(a6)
0001C9EE 2C9B                       		move.l	(a3)+,(a6)
0001C9F0 2C9B                       		move.l	(a3)+,(a6)
0001C9F2 2C9B                       		move.l	(a3)+,(a6)
0001C9F4 2C9B                       		move.l	(a3)+,(a6)
0001C9F6 2C9B                       		move.l	(a3)+,(a6)
0001C9F8 2C9B                       		move.l	(a3)+,(a6)
0001C9FA 2C9B                       		move.l	(a3)+,(a6)
0001C9FC 2C9B                       		move.l	(a3)+,(a6)
0001C9FE 2C9B                       		move.l	(a3)+,(a6)
0001CA00 2C9B                       		move.l	(a3)+,(a6)
0001CA02 2C9B                       		move.l	(a3)+,(a6)
0001CA04 2C9B                       		move.l	(a3)+,(a6)
0001CA06 2C9B                       		move.l	(a3)+,(a6)
0001CA08 2C9B                       		move.l	(a3)+,(a6)
0001CA0A 2C9B                       		move.l	(a3)+,(a6)
0001CA0C 0680 0040 0000             		addi.l	#$400000,d0
0001CA12 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001CA16                            
0001CA16 4E75                       		rts	
0001CA18                            ; End of function Hud_Secs
0001CA18                            
0001CA18                            ; ---------------------------------------------------------------------------
0001CA18                            ; Subroutine to	load time/ring bonus numbers patterns
0001CA18                            ; ---------------------------------------------------------------------------
0001CA18                            
0001CA18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA18                            
0001CA18                            
0001CA18                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001CA18 45F9 0001 C9A4             		lea	(Hud_1000).l,a2
0001CA1E 7C03                       		moveq	#3,d6
0001CA20 7800                       		moveq	#0,d4
0001CA22 43FA 0000                  		lea	Art_Hud(pc),a1
0001CA26                            
0001CA26                            Hud_BonusLoop:
0001CA26 7400                       		moveq	#0,d2
0001CA28 261A                       		move.l	(a2)+,d3
0001CA2A                            
0001CA2A                            loc_1CA1E:
0001CA2A 9283                       		sub.l	d3,d1
0001CA2C 6500                       		bcs.s	loc_1CA26
0001CA2E 5242                       		addq.w	#1,d2
0001CA30 60F8                       		bra.s	loc_1CA1E
0001CA32                            ; ===========================================================================
0001CA32                            
0001CA32                            loc_1CA26:
0001CA32 D283                       		add.l	d3,d1
0001CA34 4A42                       		tst.w	d2
0001CA36 6700                       		beq.s	loc_1CA30
0001CA38 383C 0001                  		move.w	#1,d4
0001CA3C                            
0001CA3C                            loc_1CA30:
0001CA3C 4A44                       		tst.w	d4
0001CA3E 6700                       		beq.s	Hud_ClrBonus
0001CA40 ED4A                       		lsl.w	#6,d2
0001CA42 47F1 2000                  		lea	(a1,d2.w),a3
0001CA46 2C9B                       		move.l	(a3)+,(a6)
0001CA48 2C9B                       		move.l	(a3)+,(a6)
0001CA4A 2C9B                       		move.l	(a3)+,(a6)
0001CA4C 2C9B                       		move.l	(a3)+,(a6)
0001CA4E 2C9B                       		move.l	(a3)+,(a6)
0001CA50 2C9B                       		move.l	(a3)+,(a6)
0001CA52 2C9B                       		move.l	(a3)+,(a6)
0001CA54 2C9B                       		move.l	(a3)+,(a6)
0001CA56 2C9B                       		move.l	(a3)+,(a6)
0001CA58 2C9B                       		move.l	(a3)+,(a6)
0001CA5A 2C9B                       		move.l	(a3)+,(a6)
0001CA5C 2C9B                       		move.l	(a3)+,(a6)
0001CA5E 2C9B                       		move.l	(a3)+,(a6)
0001CA60 2C9B                       		move.l	(a3)+,(a6)
0001CA62 2C9B                       		move.l	(a3)+,(a6)
0001CA64 2C9B                       		move.l	(a3)+,(a6)
0001CA66                            
0001CA66                            loc_1CA5A:
0001CA66 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001CA6A                            
0001CA6A 4E75                       		rts	
0001CA6C                            ; ===========================================================================
0001CA6C                            
0001CA6C                            Hud_ClrBonus:
0001CA6C 7A0F                       		moveq	#$F,d5
0001CA6E                            
0001CA6E                            Hud_ClrBonusLoop:
0001CA6E 2CBC 0000 0000             		move.l	#0,(a6)
0001CA74 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001CA78                            
0001CA78 60EC                       		bra.s	loc_1CA5A
0001CA7A                            ; End of function Hud_TimeRingBonus
0001CA7A                            
0001CA7A                            ; ---------------------------------------------------------------------------
0001CA7A                            ; Subroutine to	load uncompressed lives	counter	patterns
0001CA7A                            ; ---------------------------------------------------------------------------
0001CA7A                            
0001CA7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA7A                            
0001CA7A                            
0001CA7A                            Hud_Lives:				; XREF: Hud_ChkLives
0001CA7A 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001CA80 7200                       		moveq	#0,d1
0001CA82 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001CA86 45F9 0001 C9AC             		lea	(Hud_10).l,a2
0001CA8C 7C01                       		moveq	#1,d6
0001CA8E 7800                       		moveq	#0,d4
0001CA90 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001CA94                            
0001CA94                            Hud_LivesLoop:
0001CA94 2D40 0004                  		move.l	d0,4(a6)
0001CA98 7400                       		moveq	#0,d2
0001CA9A 261A                       		move.l	(a2)+,d3
0001CA9C                            
0001CA9C                            loc_1CA90:
0001CA9C 9283                       		sub.l	d3,d1
0001CA9E 6500                       		bcs.s	loc_1CA98
0001CAA0 5242                       		addq.w	#1,d2
0001CAA2 60F8                       		bra.s	loc_1CA90
0001CAA4                            ; ===========================================================================
0001CAA4                            
0001CAA4                            loc_1CA98:
0001CAA4 D283                       		add.l	d3,d1
0001CAA6 4A42                       		tst.w	d2
0001CAA8 6700                       		beq.s	loc_1CAA2
0001CAAA 383C 0001                  		move.w	#1,d4
0001CAAE                            
0001CAAE                            loc_1CAA2:
0001CAAE 4A44                       		tst.w	d4
0001CAB0 6700                       		beq.s	Hud_ClrLives
0001CAB2                            
0001CAB2                            loc_1CAA6:
0001CAB2 EB4A                       		lsl.w	#5,d2
0001CAB4 47F1 2000                  		lea	(a1,d2.w),a3
0001CAB8 2C9B                       		move.l	(a3)+,(a6)
0001CABA 2C9B                       		move.l	(a3)+,(a6)
0001CABC 2C9B                       		move.l	(a3)+,(a6)
0001CABE 2C9B                       		move.l	(a3)+,(a6)
0001CAC0 2C9B                       		move.l	(a3)+,(a6)
0001CAC2 2C9B                       		move.l	(a3)+,(a6)
0001CAC4 2C9B                       		move.l	(a3)+,(a6)
0001CAC6 2C9B                       		move.l	(a3)+,(a6)
0001CAC8                            
0001CAC8                            loc_1CABC:
0001CAC8 0680 0040 0000             		addi.l	#$400000,d0
0001CACE 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001CAD2                            
0001CAD2 4E75                       		rts	
0001CAD4                            ; ===========================================================================
0001CAD4                            
0001CAD4                            Hud_ClrLives:
0001CAD4 4A46                       		tst.w	d6
0001CAD6 67DA                       		beq.s	loc_1CAA6
0001CAD8 7A07                       		moveq	#7,d5
0001CADA                            
0001CADA                            Hud_ClrLivesLoop:
0001CADA 2CBC 0000 0000             		move.l	#0,(a6)
0001CAE0 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001CAE4 60E2                       		bra.s	loc_1CABC
0001CAE6                            ; End of function Hud_Lives
0001CAE6                            
0001CAE6                            ; ===========================================================================
0001CAE6                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001CDE6                            		even
0001CDE6                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001CF26                            		even
0001CF26                            ; ===========================================================================
0001CF26                            ; ---------------------------------------------------------------------------
0001CF26                            ; When debug mode is currently in use
0001CF26                            ; ---------------------------------------------------------------------------
0001CF26                            
0001CF26                            DebugMode:				; XREF: Obj01; Obj09
0001CF26 7000                       		moveq	#0,d0
0001CF28 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001CF2C 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001CF30 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001CF34                            ; ===========================================================================
0001CF34 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001CF36 0000                       		dc.w Debug_Skip-Debug_Index
0001CF38                            ; ===========================================================================
0001CF38                            
0001CF38                            Debug_Main:				; XREF: Debug_Index
0001CF38 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001CF3C 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001CF42 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001CF48 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001CF4E 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001CF54 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001CF5A 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001CF60 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001CF66 117C 0000 001A             		move.b	#0,$1A(a0)
0001CF6C 117C 0000 001C             		move.b	#0,$1C(a0)
0001CF72 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001CF78 6600                       		bne.s	Debug_Zone	; if not, branch
0001CF7A 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001CF80 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001CF86 7006                       		moveq	#6,d0		; use 6th debug	item list
0001CF88 6000                       		bra.s	Debug_UseList
0001CF8A                            ; ===========================================================================
0001CF8A                            
0001CF8A                            Debug_Zone:
0001CF8A 7000                       		moveq	#0,d0
0001CF8C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001CF90                            
0001CF90                            Debug_UseList:
0001CF90 45F9 0000 0000             		lea	(DebugList).l,a2
0001CF96 D040                       		add.w	d0,d0
0001CF98 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001CF9C 3C1A                       		move.w	(a2)+,d6
0001CF9E BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001CFA2 6200                       		bhi.s	loc_1CF9E
0001CFA4 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001CFAA                            
0001CFAA                            loc_1CF9E:
0001CFAA 6100 0000                  		bsr.w	Debug_ShowItem
0001CFAE 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001CFB4 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001CFBA                            
0001CFBA                            Debug_Skip:				; XREF: Debug_Index
0001CFBA 7006                       		moveq	#6,d0
0001CFBC 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001CFC2 6700                       		beq.s	loc_1CFBE
0001CFC4 7000                       		moveq	#0,d0
0001CFC6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001CFCA                            
0001CFCA                            loc_1CFBE:
0001CFCA 45F9 0000 0000             		lea	(DebugList).l,a2
0001CFD0 D040                       		add.w	d0,d0
0001CFD2 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001CFD6 3C1A                       		move.w	(a2)+,d6
0001CFD8 6100 0000                  		bsr.w	Debug_Control
0001CFDC 4EF9 0000 D6C6             		jmp	DisplaySprite
0001CFE2                            
0001CFE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFE2                            
0001CFE2                            
0001CFE2                            Debug_Control:
0001CFE2 7800                       		moveq	#0,d4
0001CFE4 323C 0001                  		move.w	#1,d1
0001CFE8 1838 F605                  		move.b	($FFFFF605).w,d4
0001CFEC 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001CFF0 6600                       		bne.s	loc_1D018	; if yes, branch
0001CFF2 1038 F604                  		move.b	($FFFFF604).w,d0
0001CFF6 0240 000F                  		andi.w	#$F,d0
0001CFFA 6600                       		bne.s	loc_1D000
0001CFFC 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D002 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D008 6000 0000                  		bra.w	Debug_BackItem
0001D00C                            ; ===========================================================================
0001D00C                            
0001D00C                            loc_1D000:
0001D00C 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D010 6600                       		bne.s	loc_1D01C
0001D012 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D018 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D01C 6600                       		bne.s	loc_1D018
0001D01E 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D024                            
0001D024                            loc_1D018:
0001D024 1838 F604                  		move.b	($FFFFF604).w,d4
0001D028                            
0001D028                            loc_1D01C:
0001D028 7200                       		moveq	#0,d1
0001D02A 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D02E 5241                       		addq.w	#1,d1
0001D030 4841                       		swap	d1
0001D032 E881                       		asr.l	#4,d1
0001D034 2428 000C                  		move.l	$C(a0),d2
0001D038 2628 0008                  		move.l	8(a0),d3
0001D03C 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D040 6700                       		beq.s	loc_1D03C	; if not, branch
0001D042 9481                       		sub.l	d1,d2
0001D044 6400                       		bcc.s	loc_1D03C
0001D046 7400                       		moveq	#0,d2
0001D048                            
0001D048                            loc_1D03C:
0001D048 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D04C 6700                       		beq.s	loc_1D052	; if not, branch
0001D04E D481                       		add.l	d1,d2
0001D050 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D056 6500                       		bcs.s	loc_1D052
0001D058 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D05E                            
0001D05E                            loc_1D052:
0001D05E 0804 0002                  		btst	#2,d4
0001D062 6700                       		beq.s	loc_1D05E
0001D064 9681                       		sub.l	d1,d3
0001D066 6400                       		bcc.s	loc_1D05E
0001D068 7600                       		moveq	#0,d3
0001D06A                            
0001D06A                            loc_1D05E:
0001D06A 0804 0003                  		btst	#3,d4
0001D06E 6700                       		beq.s	loc_1D066
0001D070 D681                       		add.l	d1,d3
0001D072                            
0001D072                            loc_1D066:
0001D072 2142 000C                  		move.l	d2,$C(a0)
0001D076 2143 0008                  		move.l	d3,8(a0)
0001D07A                            
0001D07A                            Debug_BackItem:
0001D07A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D080 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D082 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D088 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D08A 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D08E 6400                       		bcc.s	Debug_NoLoop
0001D090 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D094 6000                       		bra.s	Debug_NoLoop
0001D096                            ; ===========================================================================
0001D096                            
0001D096                            Debug_NextItem:
0001D096 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D09C 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D09E 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D0A2 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D0A6 6200                       		bhi.s	Debug_NoLoop
0001D0A8 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D0AE                            
0001D0AE                            Debug_NoLoop:
0001D0AE 6000 0000                  		bra.w	Debug_ShowItem
0001D0B2                            ; ===========================================================================
0001D0B2                            
0001D0B2                            Debug_MakeItem:
0001D0B2 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D0B8 6700                       		beq.s	Debug_Exit	; if not, branch
0001D0BA 4EB9 0000 DB4C             		jsr	SingleObjLoad
0001D0C0 6600                       		bne.s	Debug_Exit
0001D0C2 3368 0008 0008             		move.w	8(a0),8(a1)
0001D0C8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D0CE 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D0D2 1368 0001 0001             		move.b	1(a0),1(a1)
0001D0D8 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D0DE 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D0E4 7000                       		moveq	#0,d0
0001D0E6 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D0EA E748                       		lsl.w	#3,d0
0001D0EC 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D0F2 4E75                       		rts	
0001D0F4                            ; ===========================================================================
0001D0F4                            
0001D0F4                            Debug_Exit:
0001D0F4 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D0FA 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D0FC 7000                       		moveq	#0,d0
0001D0FE 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D102 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D10A 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D110 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D114 3140 000A                  		move.w	d0,$A(a0)
0001D118 3140 000E                  		move.w	d0,$E(a0)
0001D11C 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D122 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D128 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D12E 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D130 4278 F780                  		clr.w	($FFFFF780).w
0001D134 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D13A 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D142 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D148 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D14E 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D154 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D15A                            
0001D15A                            Debug_DoNothing:
0001D15A 4E75                       		rts	
0001D15C                            ; End of function Debug_Control
0001D15C                            
0001D15C                            
0001D15C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D15C                            
0001D15C                            
0001D15C                            Debug_ShowItem:				; XREF: Debug_Main
0001D15C 7000                       		moveq	#0,d0
0001D15E 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D162 E748                       		lsl.w	#3,d0
0001D164 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D16A 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D170 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D176 4E75                       		rts	
0001D178                            ; End of function Debug_ShowItem
0001D178                            
0001D178                            ; ===========================================================================
0001D178                            ; ---------------------------------------------------------------------------
0001D178                            ; Debug	list pointers
0001D178                            ; ---------------------------------------------------------------------------
0001D178                            DebugList:
0001D178                            	include "_inc\Debug list pointers.asm"
0001D178                            ; ---------------------------------------------------------------------------
0001D178                            ; Debug	list pointers
0001D178                            ; ---------------------------------------------------------------------------
0001D178 0000                       	dc.w Debug_GHZ-DebugList
0001D17A 0000                       	dc.w Debug_LZ-DebugList
0001D17C 0000                       	dc.w Debug_MZ-DebugList
0001D17E 0000                       	dc.w Debug_SLZ-DebugList
0001D180 0000                       	dc.w Debug_SYZ-DebugList
0001D182 0000                       	dc.w Debug_SBZ-DebugList
0001D184 0000                       	dc.w Debug_Ending-DebugList
0001D184 0000                       	dc.w Debug_Ending-DebugList
0001D186                            
0001D186                            ; ---------------------------------------------------------------------------
0001D186                            ; Debug	list - Green Hill
0001D186                            ; ---------------------------------------------------------------------------
0001D186                            Debug_GHZ:
0001D186                            	include "_inc\Debug list - GHZ.asm"
0001D186                            ; ---------------------------------------------------------------------------
0001D186                            ; Debug	list - Green Hill
0001D186                            ; ---------------------------------------------------------------------------
0001D186 0010                       	dc.w $10			; number of items in list
0001D188 2500 A070                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D18C 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D190 2600 A664                  	dc.l Map_obj26+$26000000
0001D194 0000 0680                  	dc.b 0,	0, 6, $80
0001D198 1F00 983A                  	dc.l Map_obj1F+$1F000000
0001D19C 0000 0400                  	dc.b 0,	0, 4, 0
0001D1A0 2200 9B1A                  	dc.l Map_obj22+$22000000
0001D1A4 0000 0444                  	dc.b 0,	0, 4, $44
0001D1A8 2B00 ACA4                  	dc.l Map_obj2B+$2B000000
0001D1AC 0000 047B                  	dc.b 0,	0, 4, $7B
0001D1B0 3600 D0AE                  	dc.l Map_obj36+$36000000
0001D1B4 0000 051B                  	dc.b 0,	0, 5, $1B
0001D1B8 1800 8238                  	dc.l Map_obj18+$18000000
0001D1BC 0000 4000                  	dc.b 0,	0, $40,	0
0001D1C0 3B00 D1D4                  	dc.l Map_obj3B+$3B000000
0001D1C4 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D1C8 4000 F850                  	dc.l Map_obj40+$40000000
0001D1CC 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D1D0 4100 DDDA                  	dc.l Map_obj41+$41000000
0001D1D4 0000 0523                  	dc.b 0,	0, 5, $23
0001D1D8 4200 E000                  	dc.l Map_obj42+$42000000
0001D1DC 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D1E0 4400 E30E                  	dc.l Map_obj44+$44000000
0001D1E4 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D1E8 1900 82A6                  	dc.l Map_obj48+$19000000
0001D1EC 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D1F0 7901 7130                  	dc.l Map_obj79+$79000000
0001D1F4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D1F8 4B00 A0B0                  	dc.l Map_obj4B+$4B000000
0001D1FC 0000 2400                  	dc.b 0,	0, $24,	0
0001D200 7D01 7280                  	dc.l Map_obj7D+$7D000000
0001D204 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D208                            	even
0001D208                            	even
0001D208                            
0001D208                            ; ---------------------------------------------------------------------------
0001D208                            ; Debug	list - Labyrinth
0001D208                            ; ---------------------------------------------------------------------------
0001D208                            Debug_LZ:
0001D208                            	include "_inc\Debug list - LZ.asm"
0001D208                            ; ---------------------------------------------------------------------------
0001D208                            ; Debug	list - Labyrinth
0001D208                            ; ---------------------------------------------------------------------------
0001D208 0019                       	dc.w $19
0001D20A 2500 A070                  	dc.l Map_obj25+$25000000
0001D20E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D212 2600 A664                  	dc.l Map_obj26+$26000000
0001D216 0000 0680                  	dc.b 0,	0, 6, $80
0001D21A 4100 DDDA                  	dc.l Map_obj41+$41000000
0001D21E 0000 0523                  	dc.b 0,	0, 5, $23
0001D222 2C00 AD4A                  	dc.l Map_obj2C+$2C000000
0001D226 0800 2486                  	dc.b 8,	0, $24,	$86
0001D22A 2D00 AF36                  	dc.l Map_obj2D+$2D000000
0001D22E 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D232 1601 202C                  	dc.l Map_obj16+$16000000
0001D236 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D23A 1601 202C                  	dc.l Map_obj16+$16000000
0001D23E 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D242 3300 C3B4                  	dc.l Map_obj33+$33000000
0001D246 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D24A 3200 BF74                  	dc.l Map_obj32+$32000000
0001D24E 0000 0513                  	dc.b 0,	0, 5, $13
0001D252 3600 D0AE                  	dc.l Map_obj36+$36000000
0001D256 0000 051B                  	dc.b 0,	0, 5, $1B
0001D25A 5201 014E                  	dc.l Map_obj52a+$52000000
0001D25E 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D262 6101 2254                  	dc.l Map_obj61+$61000000
0001D266 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D26A 6101 2254                  	dc.l Map_obj61+$61000000
0001D26E 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D272 6101 2254                  	dc.l Map_obj61+$61000000
0001D276 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D27A 6201 23A8                  	dc.l Map_obj62+$62000000
0001D27E 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D282 6101 2254                  	dc.l Map_obj61+$61000000
0001D286 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D28A 6101 2254                  	dc.l Map_obj61+$61000000
0001D28E 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D292 6301 270A                  	dc.l Map_obj63+$63000000
0001D296 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D29A 6001 1F76                  	dc.l Map_obj60+$60000000
0001D29E 0000 0467                  	dc.b 0,	0, 4, $67
0001D2A2 6401 2A4E                  	dc.l Map_obj64+$64000000
0001D2A6 8413 8348                  	dc.b $84, $13, $83, $48
0001D2AA 6501 2BD6                  	dc.l Map_obj65+$65000000
0001D2AE 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D2B2 6501 2BD6                  	dc.l Map_obj65+$65000000
0001D2B6 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D2BA 0B01 13C6                  	dc.l Map_obj0B+$B000000
0001D2BE 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D2C2 0C01 1496                  	dc.l Map_obj0C+$C000000
0001D2C6 0200 4328                  	dc.b 2,	0, $43,	$28
0001D2CA 7901 7130                  	dc.l Map_obj79+$79000000
0001D2CE 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D2D2                            	even
0001D2D2                            	even
0001D2D2                            
0001D2D2                            ; ---------------------------------------------------------------------------
0001D2D2                            ; Debug	list - Marble
0001D2D2                            ; ---------------------------------------------------------------------------
0001D2D2                            Debug_MZ:
0001D2D2                            	include "_inc\Debug list - MZ.asm"
0001D2D2                            ; ---------------------------------------------------------------------------
0001D2D2                            ; Debug	list - Marble
0001D2D2                            ; ---------------------------------------------------------------------------
0001D2D2 0012                       	dc.w $12
0001D2D4 2500 A070                  	dc.l Map_obj25+$25000000
0001D2D8 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D2DC 2600 A664                  	dc.l Map_obj26+$26000000
0001D2E0 0000 0680                  	dc.b 0,	0, 6, $80
0001D2E4 2200 9B1A                  	dc.l Map_obj22+$22000000
0001D2E8 0000 0444                  	dc.b 0,	0, 4, $44
0001D2EC 3600 D0AE                  	dc.l Map_obj36+$36000000
0001D2F0 0000 051B                  	dc.b 0,	0, 5, $1B
0001D2F4 4100 DDDA                  	dc.l Map_obj41+$41000000
0001D2F8 0000 0523                  	dc.b 0,	0, 5, $23
0001D2FC 1300 B444                  	dc.l Map_obj14+$13000000
0001D300 0000 0345                  	dc.b 0,	0, 3, $45
0001D304 4600 E9C0                  	dc.l Map_obj46+$46000000
0001D308 0000 4000                  	dc.b 0,	0, $40,	0
0001D30C 4C00 F2FC                  	dc.l Map_obj4C+$4C000000
0001D310 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D314 4E00 F5E0                  	dc.l Map_obj4E+$4E000000
0001D318 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D31C 3300 C3B4                  	dc.l Map_obj33+$33000000
0001D320 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D324 5000 F9DE                  	dc.l Map_obj50+$50000000
0001D328 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D32C 5100 FE82                  	dc.l Map_obj51+$51000000
0001D330 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D334 5201 00F8                  	dc.l Map_obj52+$52000000
0001D338 0000 02B8                  	dc.b 0,	0, 2, $B8
0001D33C 5300 883E                  	dc.l Map_obj53+$53000000
0001D340 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001D344 5400 F2C2                  	dc.l Map_obj54+$54000000
0001D348 0000 8680                  	dc.b 0,	0, $86,	$80
0001D34C 5501 02EC                  	dc.l Map_obj55+$55000000
0001D350 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D354 7801 6DAA                  	dc.l Map_obj78+$78000000
0001D358 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D35C 7901 7130                  	dc.l Map_obj79+$79000000
0001D360 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D364                            	even
0001D364                            	even
0001D364                            
0001D364                            ; ---------------------------------------------------------------------------
0001D364                            ; Debug	list - Star Light
0001D364                            ; ---------------------------------------------------------------------------
0001D364                            Debug_SLZ:
0001D364                            	include "_inc\Debug list - SLZ.asm"
0001D364                            ; ---------------------------------------------------------------------------
0001D364                            ; Debug	list - Star Light
0001D364                            ; ---------------------------------------------------------------------------
0001D364 000F                       	dc.w $F
0001D366 2500 A070                  	dc.l Map_obj25+$25000000
0001D36A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D36E 2600 A664                  	dc.l Map_obj26+$26000000
0001D372 0000 0680                  	dc.b 0,	0, 6, $80
0001D376 5901 0DEE                  	dc.l Map_obj59+$59000000
0001D37A 0000 4000                  	dc.b 0,	0, $40,	0
0001D37E 5300 883E                  	dc.l Map_obj53+$53000000
0001D382 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001D386 1800 8296                  	dc.l Map_obj18b+$18000000
0001D38A 0000 4000                  	dc.b 0,	0, $40,	0
0001D38E 5A01 0F28                  	dc.l Map_obj5A+$5A000000
0001D392 0000 4000                  	dc.b 0,	0, $40,	0
0001D396 5B01 10E0                  	dc.l Map_obj5B+$5B000000
0001D39A 0000 4000                  	dc.b 0,	0, $40,	0
0001D39E 5D01 16B0                  	dc.l Map_obj5D+$5D000000
0001D3A2 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001D3A6 5E01 1A42                  	dc.l Map_obj5E+$5E000000
0001D3AA 0000 0374                  	dc.b 0,	0, 3, $74
0001D3AE 4100 DDDA                  	dc.l Map_obj41+$41000000
0001D3B2 0000 0523                  	dc.b 0,	0, 5, $23
0001D3B6 1300 B444                  	dc.l Map_obj14+$13000000
0001D3BA 0000 0480                  	dc.b 0,	0, 4, $80
0001D3BE 1C00 894E                  	dc.l Map_obj1C+$1C000000
0001D3C2 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001D3C6 5F01 1CC0                  	dc.l Map_obj5F+$5F000000
0001D3CA 0000 0400                  	dc.b 0,	0, 4, 0
0001D3CE 6001 1F76                  	dc.l Map_obj60+$60000000
0001D3D2 0000 2429                  	dc.b 0,	0, $24,	$29
0001D3D6 7901 7130                  	dc.l Map_obj79+$79000000
0001D3DA 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D3DE                            	even
0001D3DE                            	even
0001D3DE                            
0001D3DE                            ; ---------------------------------------------------------------------------
0001D3DE                            ; Debug	list - Spring Yard
0001D3DE                            ; ---------------------------------------------------------------------------
0001D3DE                            Debug_SYZ:
0001D3DE                            	include "_inc\Debug list - SYZ.asm"
0001D3DE                            ; ---------------------------------------------------------------------------
0001D3DE                            ; Debug	list - Spring Yard
0001D3DE                            ; ---------------------------------------------------------------------------
0001D3DE 000F                       	dc.w $F
0001D3E0 2500 A070                  	dc.l Map_obj25+$25000000
0001D3E4 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D3E8 2600 A664                  	dc.l Map_obj26+$26000000
0001D3EC 0000 0680                  	dc.b 0,	0, 6, $80
0001D3F0 3600 D0AE                  	dc.l Map_obj36+$36000000
0001D3F4 0000 051B                  	dc.b 0,	0, 5, $1B
0001D3F8 4100 DDDA                  	dc.l Map_obj41+$41000000
0001D3FC 0000 0523                  	dc.b 0,	0, 5, $23
0001D400 4300 E260                  	dc.l Map_obj43+$43000000
0001D404 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D408 1200 EA3E                  	dc.l Map_obj12+$12000000
0001D40C 0000 0000                  	dc.b 0,	0, 0, 0
0001D410 4700 EBBA                  	dc.l Map_obj47+$47000000
0001D414 0000 0380                  	dc.b 0,	0, 3, $80
0001D418 1F00 983A                  	dc.l Map_obj1F+$1F000000
0001D41C 0000 0400                  	dc.b 0,	0, 4, 0
0001D420 2200 9B1A                  	dc.l Map_obj22+$22000000
0001D424 0000 0444                  	dc.b 0,	0, 4, $44
0001D428 5000 F9DE                  	dc.l Map_obj50+$50000000
0001D42C 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D430 1800 8284                  	dc.l Map_obj18a+$18000000
0001D434 0000 4000                  	dc.b 0,	0, $40,	0
0001D438 5601 07AE                  	dc.l Map_obj56+$56000000
0001D43C 0000 4000                  	dc.b 0,	0, $40,	0
0001D440 3200 BF74                  	dc.l Map_obj32+$32000000
0001D444 0000 0513                  	dc.b 0,	0, 5, $13
0001D448 7801 6DAA                  	dc.l Map_obj78+$78000000
0001D44C 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D450 7901 7130                  	dc.l Map_obj79+$79000000
0001D454 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D458                            	even
0001D458                            	even
0001D458                            
0001D458                            ; ---------------------------------------------------------------------------
0001D458                            ; Debug	list - Scrap Brain
0001D458                            ; ---------------------------------------------------------------------------
0001D458                            Debug_SBZ:
0001D458                            	include "_inc\Debug list - SBZ.asm"
0001D458                            ; ---------------------------------------------------------------------------
0001D458                            ; Debug	list - Scrap Brain
0001D458                            ; ---------------------------------------------------------------------------
0001D458 001D                       	dc.w $1D
0001D45A 2500 A070                  	dc.l Map_obj25+$25000000
0001D45E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D462 2600 A664                  	dc.l Map_obj26+$26000000
0001D466 0000 0680                  	dc.b 0,	0, 6, $80
0001D46A 5F01 1CC0                  	dc.l Map_obj5F+$5F000000
0001D46E 0000 0400                  	dc.b 0,	0, 4, 0
0001D472 6001 1F76                  	dc.l Map_obj60+$60000000
0001D476 0000 0429                  	dc.b 0,	0, 4, $29
0001D47A 7801 6DAA                  	dc.l Map_obj78+$78000000
0001D47E 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001D482 1501 0B4A                  	dc.l Map_obj15b+$15000000
0001D486 0702 4391                  	dc.b 7,	2, $43,	$91
0001D48A 6701 56CE                  	dc.l Map_obj67+$67000000
0001D48E E000 C344                  	dc.b $E0, 0, $C3, $44
0001D492 5201 00F8                  	dc.l Map_obj52+$52000000
0001D496 2802 22C0                  	dc.b $28, 2, $22, $C0
0001D49A 3200 BF74                  	dc.l Map_obj32+$32000000
0001D49E 0000 0513                  	dc.b 0,	0, 5, $13
0001D4A2 6901 5928                  	dc.l Map_obj69+$69000000
0001D4A6 0300 4492                  	dc.b 3,	0, $44,	$92
0001D4AA 6901 5982                  	dc.l Map_obj69a+$69000000
0001D4AE 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001D4B2 6A01 5BE0                  	dc.l Map_obj6A+$6A000000
0001D4B6 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001D4BA 5300 883E                  	dc.l Map_obj53+$53000000
0001D4BE 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001D4C2 5201 00F8                  	dc.l Map_obj52+$52000000
0001D4C6 3903 4460                  	dc.b $39, 3, $44, $60
0001D4CA 6B01 5FB0                  	dc.l Map_obj6B+$6B000000
0001D4CE 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001D4D2 2A00 8AE4                  	dc.l Map_obj2A+$2A000000
0001D4D6 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001D4DA 6B01 5FB0                  	dc.l Map_obj6B+$6B000000
0001D4DE 1301 22C0                  	dc.b $13, 1, $22, $C0
0001D4E2 6A01 5BE0                  	dc.l Map_obj6A+$6A000000
0001D4E6 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001D4EA 6B01 5FB0                  	dc.l Map_obj6B+$6B000000
0001D4EE 2401 22C0                  	dc.b $24, 1, $22, $C0
0001D4F2 6A01 5BE0                  	dc.l Map_obj6A+$6A000000
0001D4F6 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001D4FA 6B01 5FB0                  	dc.l Map_obj6B+$6B000000
0001D4FE 3401 22C0                  	dc.b $34, 1, $22, $C0
0001D502 6C01 6172                  	dc.l Map_obj6C+$6C000000
0001D506 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001D50A 6D00 E6B0                  	dc.l Map_obj6D+$6D000000
0001D50E 6400 83D9                  	dc.b $64, 0, $83, $D9
0001D512 6D00 E6B0                  	dc.l Map_obj6D+$6D000000
0001D516 640B 83D9                  	dc.b $64, $B, $83, $D9
0001D51A 6E01 6228                  	dc.l Map_obj6E+$6E000000
0001D51E 0400 047E                  	dc.b 4,	0, 4, $7E
0001D522 7001 666E                  	dc.l Map_obj70+$70000000
0001D526 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001D52A 7101 1556                  	dc.l Map_obj71+$71000000
0001D52E 1100 8680                  	dc.b $11, 0, $86, $80
0001D532 1E00 8F52                  	dc.l Map_obj1E+$1E000000
0001D536 0400 2302                  	dc.b 4,	0, $23,	2
0001D53A 7901 7130                  	dc.l Map_obj79+$79000000
0001D53E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D542                            	even
0001D542                            	even
0001D542                            
0001D542                            ; ---------------------------------------------------------------------------
0001D542                            ; Debug	list - ending sequence / special stage
0001D542                            ; ---------------------------------------------------------------------------
0001D542                            Debug_Ending:
0001D542                            	include "_inc\Debug list - Ending and SS.asm"
0001D542                            ; ---------------------------------------------------------------------------
0001D542                            ; Debug	list - ending sequence / special stage
0001D542                            ; ---------------------------------------------------------------------------
0001D542 000D                       	dc.w $D
0001D544 2500 A070                  	dc.l Map_obj25+$25000000
0001D548 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D54C 4700 EBBA                  	dc.l Map_obj47+$47000000
0001D550 0000 0380                  	dc.b 0,	0, 3, $80
0001D554 2800 956C                  	dc.l Map_obj28a+$28000000
0001D558 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001D55C 2800 956C                  	dc.l Map_obj28a+$28000000
0001D560 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001D564 2800 956C                  	dc.l Map_obj28a+$28000000
0001D568 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001D56C 2800 9554                  	dc.l Map_obj28+$28000000
0001D570 0D00 0553                  	dc.b $D, 0, 5, $53
0001D574 2800 9554                  	dc.l Map_obj28+$28000000
0001D578 0E00 0553                  	dc.b $E, 0, 5, $53
0001D57C 2800 9554                  	dc.l Map_obj28+$28000000
0001D580 0F00 0573                  	dc.b $F, 0, 5, $73
0001D584 2800 9554                  	dc.l Map_obj28+$28000000
0001D588 1000 0573                  	dc.b $10, 0, 5,	$73
0001D58C 2800 956C                  	dc.l Map_obj28a+$28000000
0001D590 1100 0585                  	dc.b $11, 0, 5,	$85
0001D594 2800 9584                  	dc.l Map_obj28b+$28000000
0001D598 1200 0593                  	dc.b $12, 0, 5,	$93
0001D59C 2800 956C                  	dc.l Map_obj28a+$28000000
0001D5A0 1300 0565                  	dc.b $13, 0, 5,	$65
0001D5A4 2800 9584                  	dc.l Map_obj28b+$28000000
0001D5A8 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001D5AC                            	even
0001D5AC                            	even
0001D5AC                            
0001D5AC                            ; ---------------------------------------------------------------------------
0001D5AC                            ; Main level load blocks
0001D5AC                            ; ---------------------------------------------------------------------------
0001D5AC                            MainLoadBlocks:
0001D5AC                            	include "_inc\Main level load blocks.asm"
0001D5AC                            ; ---------------------------------------------------------------------------
0001D5AC                            ; Main level load blocks
0001D5AC                            ;
0001D5AC                            ; ===FORMAT===
0001D5AC                            ; level	patterns + (1st	PLC num	* 10^6)
0001D5AC                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001D5AC                            ; 256x256 mappings
0001D5AC                            ; blank, music (unused), pal index (unused), pal index
0001D5AC                            ; ---------------------------------------------------------------------------
0001D5AC 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001D5B0 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001D5B4 0000 0000                  	dc.l Blk256_GHZ
0001D5B8 0081 0404                  	dc.b 0,	$81, 4,	4
0001D5BC 0000 0000                  	dc.l Nem_LZ+$6000000
0001D5C0 0000 0000                  	dc.l Blk16_LZ+$7000000
0001D5C4 0000 0000                  	dc.l Blk256_LZ
0001D5C8 0082 0505                  	dc.b 0,	$82, 5,	5
0001D5CC 0000 0000                  	dc.l Nem_MZ+$8000000
0001D5D0 0000 0000                  	dc.l Blk16_MZ+$9000000
0001D5D4 0000 0000                  	dc.l Blk256_MZ
0001D5D8 0083 0606                  	dc.b 0,	$83, 6,	6
0001D5DC 0000 0000                  	dc.l Nem_SLZ+$A000000
0001D5E0 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001D5E4 0000 0000                  	dc.l Blk256_SLZ
0001D5E8 0084 0707                  	dc.b 0,	$84, 7,	7
0001D5EC 0000 0000                  	dc.l Nem_SYZ+$C000000
0001D5F0 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001D5F4 0000 0000                  	dc.l Blk256_SYZ
0001D5F8 0085 0808                  	dc.b 0,	$85, 8,	8
0001D5FC 0000 0000                  	dc.l Nem_SBZ+$E000000
0001D600 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001D604 0000 0000                  	dc.l Blk256_SBZ
0001D608 0086 0909                  	dc.b 0,	$86, 9,	9
0001D60C 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001D610 0000 0000                  	dc.l Blk16_GHZ
0001D614 0000 0000                  	dc.l Blk256_GHZ
0001D618 0086 1313                  	dc.b 0,	$86, $13, $13
0001D61C                            	even
0001D61C                            	even
0001D61C                            
0001D61C                            ; ---------------------------------------------------------------------------
0001D61C                            ; Pattern load cues
0001D61C                            ; ---------------------------------------------------------------------------
0001D61C                            ArtLoadCues:
0001D61C                            	include "_inc\Pattern load cues.asm"
0001D61C                            ; ---------------------------------------------------------------------------
0001D61C                            ; Pattern load cues - index
0001D61C                            ; ---------------------------------------------------------------------------
0001D61C 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001D620 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001D624 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001D628 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001D62C 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001D630 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001D634 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001D638 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001D63C 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001D640 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001D644 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001D648 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001D64C 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001D650 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001D654 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001D658 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001D65C                            ; ---------------------------------------------------------------------------
0001D65C                            ; Pattern load cues - standard block 1
0001D65C                            ; ---------------------------------------------------------------------------
0001D65C 0004                       PLC_Main:	dc.w 4
0001D65E 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001D662 F400                       		dc.w $F400
0001D664 0000 0000                  		dc.l Nem_Hud		; HUD
0001D668 D940                       		dc.w $D940
0001D66A 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001D66E FA80                       		dc.w $FA80
0001D670 0000 0000                  		dc.l Nem_Ring		; rings
0001D674 F640                       		dc.w $F640
0001D676 0000 0000                  		dc.l Nem_Points		; points from enemy
0001D67A F2E0                       		dc.w $F2E0
0001D67C                            ; ---------------------------------------------------------------------------
0001D67C                            ; Pattern load cues - standard block 2
0001D67C                            ; ---------------------------------------------------------------------------
0001D67C 0002                       PLC_Main2:	dc.w 2
0001D67E 0000 0000                  		dc.l Nem_Monitors	; monitors
0001D682 D000                       		dc.w $D000
0001D684 0000 0000                  		dc.l Nem_Shield		; shield
0001D688 A820                       		dc.w $A820
0001D68A 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001D68E AB80                       		dc.w $AB80
0001D690                            ; ---------------------------------------------------------------------------
0001D690                            ; Pattern load cues - explosion
0001D690                            ; ---------------------------------------------------------------------------
0001D690 0000                       PLC_Explode:	dc.w 0
0001D692 0000 0000                  		dc.l Nem_Explode	; explosion
0001D696 B400                       		dc.w $B400
0001D698                            ; ---------------------------------------------------------------------------
0001D698                            ; Pattern load cues - game/time	over
0001D698                            ; ---------------------------------------------------------------------------
0001D698 0000                       PLC_GameOver:	dc.w 0
0001D69A 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001D69E ABC0                       		dc.w $ABC0
0001D6A0                            ; ---------------------------------------------------------------------------
0001D6A0                            ; Pattern load cues - Green Hill
0001D6A0                            ; ---------------------------------------------------------------------------
0001D6A0 000B                       PLC_GHZ:	dc.w $B
0001D6A2 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001D6A6 0000                       		dc.w 0
0001D6A8 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001D6AC 39A0                       		dc.w $39A0
0001D6AE 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001D6B2 6B00                       		dc.w $6B00
0001D6B4 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001D6B8 7A00                       		dc.w $7A00
0001D6BA 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001D6BE 8000                       		dc.w $8000
0001D6C0 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001D6C4 8880                       		dc.w $8880
0001D6C6 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001D6CA 8F60                       		dc.w $8F60
0001D6CC 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001D6D0 9360                       		dc.w $9360
0001D6D2 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001D6D6 9E00                       		dc.w $9E00
0001D6D8 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D6DC A360                       		dc.w $A360
0001D6DE 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D6E2 A460                       		dc.w $A460
0001D6E4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D6E8 A660                       		dc.w $A660
0001D6EA 0005                       PLC_GHZ2:	dc.w 5
0001D6EC 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001D6F0 7000                       		dc.w $7000
0001D6F2 0000 0000                  		dc.l Nem_Bridge		; bridge
0001D6F6 71C0                       		dc.w $71C0
0001D6F8 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001D6FC 7300                       		dc.w $7300
0001D6FE 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001D702 7540                       		dc.w $7540
0001D704 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001D708 A1E0                       		dc.w $A1E0
0001D70A 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001D70E 6980                       		dc.w $6980
0001D710                            ; ---------------------------------------------------------------------------
0001D710                            ; Pattern load cues - Labyrinth
0001D710                            ; ---------------------------------------------------------------------------
0001D710 000B                       PLC_LZ:		dc.w $B
0001D712 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001D716 0000                       		dc.w 0
0001D718 0000 0000                  		dc.l Nem_LzBlock1	; block
0001D71C 3C00                       		dc.w $3C00
0001D71E 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001D722 3E00                       		dc.w $3E00
0001D724 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001D728 4B20                       		dc.w $4B20
0001D72A 0000 0000                  		dc.l Nem_Water		; water	surface
0001D72E 6000                       		dc.w $6000
0001D730 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001D734 6200                       		dc.w $6200
0001D736 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001D73A 6500                       		dc.w $6500
0001D73C 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001D740 6900                       		dc.w $6900
0001D742 0000 0000                  		dc.l Nem_LzBlock3	; block
0001D746 7780                       		dc.w $7780
0001D748 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001D74C 7880                       		dc.w $7880
0001D74E 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001D752 7980                       		dc.w $7980
0001D754 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001D758 94C0                       		dc.w $94C0
0001D75A 000C                       PLC_LZ2:	dc.w $C
0001D75C 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001D760 7BC0                       		dc.w $7BC0
0001D762 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001D766 7CC0                       		dc.w $7CC0
0001D768 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001D76C 7EC0                       		dc.w $7EC0
0001D76E 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001D772 5D20                       		dc.w $5D20
0001D774 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001D778 8800                       		dc.w $8800
0001D77A 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001D77E 89E0                       		dc.w $89E0
0001D780 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001D784 8CE0                       		dc.w $8CE0
0001D786 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001D78A 90C0                       		dc.w $90C0
0001D78C 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001D790 A1E0                       		dc.w $A1E0
0001D792 0000 0000                  		dc.l Nem_Cork		; cork block
0001D796 A000                       		dc.w $A000
0001D798 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D79C A360                       		dc.w $A360
0001D79E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D7A2 A460                       		dc.w $A460
0001D7A4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D7A8 A660                       		dc.w $A660
0001D7AA                            ; ---------------------------------------------------------------------------
0001D7AA                            ; Pattern load cues - Marble
0001D7AA                            ; ---------------------------------------------------------------------------
0001D7AA 0009                       PLC_MZ:		dc.w 9
0001D7AC 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001D7B0 0000                       		dc.w 0
0001D7B2 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001D7B6 6000                       		dc.w $6000
0001D7B8 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001D7BC 68A0                       		dc.w $68A0
0001D7BE 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001D7C2 7000                       		dc.w $7000
0001D7C4 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001D7C8 71C0                       		dc.w $71C0
0001D7CA 0000 0000                  		dc.l Nem_Lava		; lava
0001D7CE 7500                       		dc.w $7500
0001D7D0 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001D7D4 8880                       		dc.w $8880
0001D7D6 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001D7DA 8F60                       		dc.w $8F60
0001D7DC 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001D7E0 9700                       		dc.w $9700
0001D7E2 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001D7E6 9FE0                       		dc.w $9FE0
0001D7E8 0004                       PLC_MZ2:	dc.w 4
0001D7EA 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001D7EE A260                       		dc.w $A260
0001D7F0 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D7F4 A360                       		dc.w $A360
0001D7F6 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D7FA A460                       		dc.w $A460
0001D7FC 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D800 A660                       		dc.w $A660
0001D802 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001D806 5700                       		dc.w $5700
0001D808                            ; ---------------------------------------------------------------------------
0001D808                            ; Pattern load cues - Star Light
0001D808                            ; ---------------------------------------------------------------------------
0001D808 0008                       PLC_SLZ:	dc.w 8
0001D80A 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001D80E 0000                       		dc.w 0
0001D810 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001D814 8000                       		dc.w $8000
0001D816 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001D81A 8520                       		dc.w $8520
0001D81C 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001D820 9000                       		dc.w $9000
0001D822 0000 0000                  		dc.l Nem_SlzBlock	; block
0001D826 9C00                       		dc.w $9C00
0001D828 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001D82C A260                       		dc.w $A260
0001D82E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D832 A360                       		dc.w $A360
0001D834 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D838 A460                       		dc.w $A460
0001D83A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D83E A660                       		dc.w $A660
0001D840 0005                       PLC_SLZ2:	dc.w 5
0001D842 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001D846 6E80                       		dc.w $6E80
0001D848 0000 0000                  		dc.l Nem_Fan		; fan
0001D84C 7400                       		dc.w $7400
0001D84E 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001D852 7980                       		dc.w $7980
0001D854 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001D858 7B80                       		dc.w $7B80
0001D85A 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001D85E 9B00                       		dc.w $9B00
0001D860 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001D864 9E00                       		dc.w $9E00
0001D866                            ; ---------------------------------------------------------------------------
0001D866                            ; Pattern load cues - Spring Yard
0001D866                            ; ---------------------------------------------------------------------------
0001D866 0004                       PLC_SYZ:	dc.w 4
0001D868 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001D86C 0000                       		dc.w 0
0001D86E 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001D872 8000                       		dc.w $8000
0001D874 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001D878 8880                       		dc.w $8880
0001D87A 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001D87E 8F60                       		dc.w $8F60
0001D880 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001D884 9700                       		dc.w $9700
0001D886 0007                       PLC_SYZ2:	dc.w 7
0001D888 0000 0000                  		dc.l Nem_Bumper		; bumper
0001D88C 7000                       		dc.w $7000
0001D88E 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001D892 72C0                       		dc.w $72C0
0001D894 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001D898 7740                       		dc.w $7740
0001D89A 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001D89E 9FE0                       		dc.w $9FE0
0001D8A0 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001D8A4 A1E0                       		dc.w $A1E0
0001D8A6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D8AA A360                       		dc.w $A360
0001D8AC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D8B0 A460                       		dc.w $A460
0001D8B2 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D8B6 A660                       		dc.w $A660
0001D8B8                            ; ---------------------------------------------------------------------------
0001D8B8                            ; Pattern load cues - Scrap Brain
0001D8B8                            ; ---------------------------------------------------------------------------
0001D8B8 000B                       PLC_SBZ:	dc.w $B
0001D8BA 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001D8BE 0000                       		dc.w 0
0001D8C0 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001D8C4 5800                       		dc.w $5800
0001D8C6 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001D8CA 5D00                       		dc.w $5D00
0001D8CC 0000 0000                  		dc.l Nem_Girder		; girder
0001D8D0 5E00                       		dc.w $5E00
0001D8D2 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001D8D6 6040                       		dc.w $6040
0001D8D8 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001D8DC 6880                       		dc.w $6880
0001D8DE 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001D8E2 6900                       		dc.w $6900
0001D8E4 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001D8E8 7220                       		dc.w $7220
0001D8EA 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001D8EE 76A0                       		dc.w $76A0
0001D8F0 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001D8F4 7B20                       		dc.w $7B20
0001D8F6 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001D8FA 7EA0                       		dc.w $7EA0
0001D8FC 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001D900 9860                       		dc.w $9860
0001D902 000C                       PLC_SBZ2:	dc.w $C
0001D904 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001D908 5600                       		dc.w $5600
0001D90A 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001D90E 8000                       		dc.w $8000
0001D910 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001D914 8520                       		dc.w $8520
0001D916 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001D91A 8C00                       		dc.w $8C00
0001D91C 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001D920 8DE0                       		dc.w $8DE0
0001D922 0000 0000                  		dc.l Nem_Electric	; electric orb
0001D926 8FC0                       		dc.w $8FC0
0001D928 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001D92C 9240                       		dc.w $9240
0001D92E 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001D932 7F20                       		dc.w $7F20
0001D934 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001D938 9BE0                       		dc.w $9BE0
0001D93A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001D93E A1E0                       		dc.w $A1E0
0001D940 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D944 A360                       		dc.w $A360
0001D946 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D94A A460                       		dc.w $A460
0001D94C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D950 A660                       		dc.w $A660
0001D952                            ; ---------------------------------------------------------------------------
0001D952                            ; Pattern load cues - title card
0001D952                            ; ---------------------------------------------------------------------------
0001D952 0000                       PLC_TitleCard:	dc.w 0
0001D954 0000 0000                  		dc.l Nem_TitleCard
0001D958 B000                       		dc.w $B000
0001D95A                            ; ---------------------------------------------------------------------------
0001D95A                            ; Pattern load cues - act 3 boss
0001D95A                            ; ---------------------------------------------------------------------------
0001D95A 0005                       PLC_Boss:	dc.w 5
0001D95C 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001D960 8000                       		dc.w $8000
0001D962 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001D966 8D80                       		dc.w $8D80
0001D968 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001D96C 93A0                       		dc.w $93A0
0001D96E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001D972 A300                       		dc.w $A300
0001D974 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001D978 A300                       		dc.w $A300
0001D97A 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001D97E A540                       		dc.w $A540
0001D980                            ; ---------------------------------------------------------------------------
0001D980                            ; Pattern load cues - act 1/2 signpost
0001D980                            ; ---------------------------------------------------------------------------
0001D980 0002                       PLC_Signpost:	dc.w 2
0001D982 0000 0000                  		dc.l Nem_SignPost	; signpost
0001D986 D000                       		dc.w $D000
0001D988 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001D98C 96C0                       		dc.w $96C0
0001D98E 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001D992 8C40                       		dc.w $8C40
0001D994                            ; ---------------------------------------------------------------------------
0001D994                            ; Pattern load cues - beta special stage warp effect
0001D994                            ; ---------------------------------------------------------------------------
0001D994 0000                       PLC_Warp:	dc.w 0
0001D996 0000 0000                  		dc.l Nem_Warp
0001D99A A820                       		dc.w $A820
0001D99C                            ; ---------------------------------------------------------------------------
0001D99C                            ; Pattern load cues - special stage
0001D99C                            ; ---------------------------------------------------------------------------
0001D99C 0010                       PLC_SpeStage:	dc.w $10
0001D99E 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001D9A2 0000                       		dc.w 0
0001D9A4 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001D9A8 0A20                       		dc.w $A20
0001D9AA 0000 0000                  		dc.l Nem_SSWalls	; walls
0001D9AE 2840                       		dc.w $2840
0001D9B0 0000 0000                  		dc.l Nem_Bumper		; bumper
0001D9B4 4760                       		dc.w $4760
0001D9B6 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001D9BA 4A20                       		dc.w $4A20
0001D9BC 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001D9C0 4C60                       		dc.w $4C60
0001D9C2 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001D9C6 5E00                       		dc.w $5E00
0001D9C8 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001D9CC 6E00                       		dc.w $6E00
0001D9CE 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001D9D2 7E00                       		dc.w $7E00
0001D9D4 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001D9D8 8E00                       		dc.w $8E00
0001D9DA 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001D9DE 9E00                       		dc.w $9E00
0001D9E0 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001D9E4 AE00                       		dc.w $AE00
0001D9E6 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001D9EA BE00                       		dc.w $BE00
0001D9EC 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001D9F0 EE00                       		dc.w $EE00
0001D9F2 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001D9F6 F2E0                       		dc.w $F2E0
0001D9F8 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001D9FC F400                       		dc.w $F400
0001D9FE 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001DA02 F520                       		dc.w $F520
0001DA04 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001DA08 F2E0                       		dc.w $F2E0
0001DA0A 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001DA0E F400                       		dc.w $F400
0001DA10 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001DA14 F520                       		dc.w $F520
0001DA16                            ; ---------------------------------------------------------------------------
0001DA16                            ; Pattern load cues - GHZ animals
0001DA16                            ; ---------------------------------------------------------------------------
0001DA16 0001                       PLC_GHZAnimals:	dc.w 1
0001DA18 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DA1C B000                       		dc.w $B000
0001DA1E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DA22 B240                       		dc.w $B240
0001DA24                            ; ---------------------------------------------------------------------------
0001DA24                            ; Pattern load cues - LZ animals
0001DA24                            ; ---------------------------------------------------------------------------
0001DA24 0001                       PLC_LZAnimals:	dc.w 1
0001DA26 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001DA2A B000                       		dc.w $B000
0001DA2C 0000 0000                  		dc.l Nem_Seal		; seal
0001DA30 B240                       		dc.w $B240
0001DA32                            ; ---------------------------------------------------------------------------
0001DA32                            ; Pattern load cues - MZ animals
0001DA32                            ; ---------------------------------------------------------------------------
0001DA32 0001                       PLC_MZAnimals:	dc.w 1
0001DA34 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001DA38 B000                       		dc.w $B000
0001DA3A 0000 0000                  		dc.l Nem_Seal		; seal
0001DA3E B240                       		dc.w $B240
0001DA40                            ; ---------------------------------------------------------------------------
0001DA40                            ; Pattern load cues - SLZ animals
0001DA40                            ; ---------------------------------------------------------------------------
0001DA40 0001                       PLC_SLZAnimals:	dc.w 1
0001DA42 0000 0000                  		dc.l Nem_Pig		; pig
0001DA46 B000                       		dc.w $B000
0001DA48 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DA4C B240                       		dc.w $B240
0001DA4E                            ; ---------------------------------------------------------------------------
0001DA4E                            ; Pattern load cues - SYZ animals
0001DA4E                            ; ---------------------------------------------------------------------------
0001DA4E 0001                       PLC_SYZAnimals:	dc.w 1
0001DA50 0000 0000                  		dc.l Nem_Pig		; pig
0001DA54 B000                       		dc.w $B000
0001DA56 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DA5A B240                       		dc.w $B240
0001DA5C                            ; ---------------------------------------------------------------------------
0001DA5C                            ; Pattern load cues - SBZ animals
0001DA5C                            ; ---------------------------------------------------------------------------
0001DA5C 0001                       PLC_SBZAnimals:	dc.w 1
0001DA5E 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DA62 B000                       		dc.w $B000
0001DA64 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DA68 B240                       		dc.w $B240
0001DA6A                            ; ---------------------------------------------------------------------------
0001DA6A                            ; Pattern load cues - special stage results screen
0001DA6A                            ; ---------------------------------------------------------------------------
0001DA6A 0001                       PLC_SpeStResult:dc.w 1
0001DA6C 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001DA70 A820                       		dc.w $A820
0001DA72 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001DA76 AA20                       		dc.w $AA20
0001DA78                            ; ---------------------------------------------------------------------------
0001DA78                            ; Pattern load cues - ending sequence
0001DA78                            ; ---------------------------------------------------------------------------
0001DA78 000E                       PLC_Ending:	dc.w $E
0001DA7A 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DA7E 0000                       		dc.w 0
0001DA80 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DA84 39A0                       		dc.w $39A0
0001DA86 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DA8A 6B00                       		dc.w $6B00
0001DA8C 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001DA90 7400                       		dc.w $7400
0001DA92 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001DA96 78A0                       		dc.w $78A0
0001DA98 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001DA9C 7C20                       		dc.w $7C20
0001DA9E 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001DAA2 A480                       		dc.w $A480
0001DAA4 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DAA8 AA60                       		dc.w $AA60
0001DAAA 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DAAE ACA0                       		dc.w $ACA0
0001DAB0 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001DAB4 AE60                       		dc.w $AE60
0001DAB6 0000 0000                  		dc.l Nem_Seal		; seal
0001DABA B0A0                       		dc.w $B0A0
0001DABC 0000 0000                  		dc.l Nem_Pig		; pig
0001DAC0 B260                       		dc.w $B260
0001DAC2 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DAC6 B4A0                       		dc.w $B4A0
0001DAC8 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001DACC B660                       		dc.w $B660
0001DACE 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001DAD2 B8A0                       		dc.w $B8A0
0001DAD4                            ; ---------------------------------------------------------------------------
0001DAD4                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001DAD4                            ; ---------------------------------------------------------------------------
0001DAD4 0002                       PLC_TryAgain:	dc.w 2
0001DAD6 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001DADA 78A0                       		dc.w $78A0
0001DADC 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001DAE0 7C20                       		dc.w $7C20
0001DAE2 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001DAE6 B400                       		dc.w $B400
0001DAE8                            ; ---------------------------------------------------------------------------
0001DAE8                            ; Pattern load cues - Eggman on SBZ 2
0001DAE8                            ; ---------------------------------------------------------------------------
0001DAE8 0002                       PLC_EggmanSBZ2:	dc.w 2
0001DAEA 0000 0000                  		dc.l Nem_SbzBlock	; block
0001DAEE A300                       		dc.w $A300
0001DAF0 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001DAF4 8000                       		dc.w $8000
0001DAF6 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DAFA 9400                       		dc.w $9400
0001DAFC                            ; ---------------------------------------------------------------------------
0001DAFC                            ; Pattern load cues - final boss
0001DAFC                            ; ---------------------------------------------------------------------------
0001DAFC 0004                       PLC_FZBoss:	dc.w 4
0001DAFE 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001DB02 7400                       		dc.w $7400
0001DB04 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001DB08 6000                       		dc.w $6000
0001DB0A 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DB0E 8000                       		dc.w $8000
0001DB10 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001DB14 8E00                       		dc.w $8E00
0001DB16 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DB1A A540                       		dc.w $A540
0001DB1C                            		even
0001DB1C                            		even
0001DB1C                            
0001DB1C                            		incbin	misc\padding.bin
0001DC0A                            		even
0001DC0A                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E06C                            		even
0001E06C                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E164                            		even
0001E164                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E278                            		even
0001E278                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F284                            		even
0001F284                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00020C52                            		even
00020C52                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00020C86                            		even
00020C86                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00020D44                            		even
00020D44                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
000211EC                            		even
000211EC                            ; ---------------------------------------------------------------------------
000211EC                            ; Sprite mappings - Sonic
000211EC                            ; ---------------------------------------------------------------------------
000211EC                            Map_Sonic:
000211EC                            	include "_maps\Sonic.asm"
000211EC                            Map_9339:
000211EC 0000                       Map_9339_0: 	dc.w Map_9339_B0-Map_9339
000211EE 0000                       Map_9339_2: 	dc.w Map_9339_B1-Map_9339
000211F0 0000                       Map_9339_4: 	dc.w Map_9339_BC-Map_9339
000211F2 0000                       Map_9339_6: 	dc.w Map_9339_CC-Map_9339
000211F4 0000                       Map_9339_8: 	dc.w Map_9339_DC-Map_9339
000211F6 0000                       Map_9339_A: 	dc.w Map_9339_EC-Map_9339
000211F8 0000                       Map_9339_C: 	dc.w Map_9339_FC-Map_9339
000211FA 0000                       Map_9339_E: 	dc.w Map_9339_111-Map_9339
000211FC 0000                       Map_9339_10: 	dc.w Map_9339_11C-Map_9339
000211FE 0000                       Map_9339_12: 	dc.w Map_9339_127-Map_9339
00021200 0000                       Map_9339_14: 	dc.w Map_9339_13C-Map_9339
00021202 0000                       Map_9339_16: 	dc.w Map_9339_147-Map_9339
00021204 0000                       Map_9339_18: 	dc.w Map_9339_157-Map_9339
00021206 0000                       Map_9339_1A: 	dc.w Map_9339_171-Map_9339
00021208 0000                       Map_9339_1C: 	dc.w Map_9339_190-Map_9339
0002120A 0000                       Map_9339_1E: 	dc.w Map_9339_1A5-Map_9339
0002120C 0000                       Map_9339_20: 	dc.w Map_9339_1BF-Map_9339
0002120E 0000                       Map_9339_22: 	dc.w Map_9339_1D4-Map_9339
00021210 0000                       Map_9339_24: 	dc.w Map_9339_1EE-Map_9339
00021212 0000                       Map_9339_26: 	dc.w Map_9339_203-Map_9339
00021214 0000                       Map_9339_28: 	dc.w Map_9339_20E-Map_9339
00021216 0000                       Map_9339_2A: 	dc.w Map_9339_219-Map_9339
00021218 0000                       Map_9339_2C: 	dc.w Map_9339_22E-Map_9339
0002121A 0000                       Map_9339_2E: 	dc.w Map_9339_239-Map_9339
0002121C 0000                       Map_9339_30: 	dc.w Map_9339_249-Map_9339
0002121E 0000                       Map_9339_32: 	dc.w Map_9339_268-Map_9339
00021220 0000                       Map_9339_34: 	dc.w Map_9339_287-Map_9339
00021222 0000                       Map_9339_36: 	dc.w Map_9339_29C-Map_9339
00021224 0000                       Map_9339_38: 	dc.w Map_9339_2B6-Map_9339
00021226 0000                       Map_9339_3A: 	dc.w Map_9339_2CB-Map_9339
00021228 0000                       Map_9339_3C: 	dc.w Map_9339_2E5-Map_9339
0002122A 0000                       Map_9339_3E: 	dc.w Map_9339_2F0-Map_9339
0002122C 0000                       Map_9339_40: 	dc.w Map_9339_2FB-Map_9339
0002122E 0000                       Map_9339_42: 	dc.w Map_9339_306-Map_9339
00021230 0000                       Map_9339_44: 	dc.w Map_9339_311-Map_9339
00021232 0000                       Map_9339_46: 	dc.w Map_9339_326-Map_9339
00021234 0000                       Map_9339_48: 	dc.w Map_9339_336-Map_9339
00021236 0000                       Map_9339_4A: 	dc.w Map_9339_34B-Map_9339
00021238 0000                       Map_9339_4C: 	dc.w Map_9339_35B-Map_9339
0002123A 0000                       Map_9339_4E: 	dc.w Map_9339_366-Map_9339
0002123C 0000                       Map_9339_50: 	dc.w Map_9339_371-Map_9339
0002123E 0000                       Map_9339_52: 	dc.w Map_9339_37C-Map_9339
00021240 0000                       Map_9339_54: 	dc.w Map_9339_387-Map_9339
00021242 0000                       Map_9339_56: 	dc.w Map_9339_39C-Map_9339
00021244 0000                       Map_9339_58: 	dc.w Map_9339_3A7-Map_9339
00021246 0000                       Map_9339_5A: 	dc.w Map_9339_3BC-Map_9339
00021248 0000                       Map_9339_5C: 	dc.w Map_9339_3C7-Map_9339
0002124A 0000                       Map_9339_5E: 	dc.w Map_9339_3CD-Map_9339
0002124C 0000                       Map_9339_60: 	dc.w Map_9339_3D3-Map_9339
0002124E 0000                       Map_9339_62: 	dc.w Map_9339_3D9-Map_9339
00021250 0000                       Map_9339_64: 	dc.w Map_9339_3DF-Map_9339
00021252 0000                       Map_9339_66: 	dc.w Map_9339_3E5-Map_9339
00021254 0000                       Map_9339_68: 	dc.w Map_9339_3F0-Map_9339
00021256 0000                       Map_9339_6A: 	dc.w Map_9339_3F6-Map_9339
00021258 0000                       Map_9339_6C: 	dc.w Map_9339_401-Map_9339
0002125A 0000                       Map_9339_6E: 	dc.w Map_9339_407-Map_9339
0002125C 0000                       Map_9339_70: 	dc.w Map_9339_412-Map_9339
0002125E 0000                       Map_9339_72: 	dc.w Map_9339_427-Map_9339
00021260 0000                       Map_9339_74: 	dc.w Map_9339_43C-Map_9339
00021262 0000                       Map_9339_76: 	dc.w Map_9339_44C-Map_9339
00021264 0000                       Map_9339_78: 	dc.w Map_9339_45C-Map_9339
00021266 0000                       Map_9339_7A: 	dc.w Map_9339_46C-Map_9339
00021268 0000                       Map_9339_7C: 	dc.w Map_9339_477-Map_9339
0002126A 0000                       Map_9339_7E: 	dc.w Map_9339_487-Map_9339
0002126C 0000                       Map_9339_80: 	dc.w Map_9339_497-Map_9339
0002126E 0000                       Map_9339_82: 	dc.w Map_9339_4A7-Map_9339
00021270 0000                       Map_9339_84: 	dc.w Map_9339_4BC-Map_9339
00021272 0000                       Map_9339_86: 	dc.w Map_9339_4D1-Map_9339
00021274 0000                       Map_9339_88: 	dc.w Map_9339_4EB-Map_9339
00021276 0000                       Map_9339_8A: 	dc.w Map_9339_505-Map_9339
00021278 0000                       Map_9339_8C: 	dc.w Map_9339_510-Map_9339
0002127A 0000                       Map_9339_8E: 	dc.w Map_9339_520-Map_9339
0002127C 0000                       Map_9339_90: 	dc.w Map_9339_52B-Map_9339
0002127E 0000                       Map_9339_92: 	dc.w Map_9339_53B-Map_9339
00021280 0000                       Map_9339_94: 	dc.w Map_9339_546-Map_9339
00021282 0000                       Map_9339_96: 	dc.w Map_9339_556-Map_9339
00021284 0000                       Map_9339_98: 	dc.w Map_9339_566-Map_9339
00021286 0000                       Map_9339_9A: 	dc.w Map_9339_580-Map_9339
00021288 0000                       Map_9339_9C: 	dc.w Map_9339_59A-Map_9339
0002128A 0000                       Map_9339_9E: 	dc.w Map_9339_5A5-Map_9339
0002128C 0000                       Map_9339_A0: 	dc.w Map_9339_5B5-Map_9339
0002128E 0000                       Map_9339_A2: 	dc.w Map_9339_5BB-Map_9339
00021290 0000                       Map_9339_A4: 	dc.w Map_9339_5C1-Map_9339
00021292 0000                       Map_9339_A6: 	dc.w Map_9339_5C7-Map_9339
00021294 0000                       Map_9339_A8: 	dc.w Map_9339_5D7-Map_9339
00021296 0000                       Map_9339_AA: 	dc.w Map_9339_5E7-Map_9339
00021298 0000                       Map_9339_AC: 	dc.w Map_9339_5F7-Map_9339
0002129A 0000                       Map_9339_AE: 	dc.w Map_9339_607-Map_9339
0002129C 00                         Map_9339_B0: 	dc.b $0
0002129D 02                         Map_9339_B1: 	dc.b $2
0002129E ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
000212A3 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
000212A8 03                         Map_9339_BC: 	dc.b $3
000212A9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000212AE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000212B3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000212B8 03                         Map_9339_CC: 	dc.b $3
000212B9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000212BE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000212C3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000212C8 03                         Map_9339_DC: 	dc.b $3
000212C9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000212CE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000212D3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000212D8 03                         Map_9339_EC: 	dc.b $3
000212D9 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000212DE 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
000212E3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000212E8 04                         Map_9339_FC: 	dc.b $4
000212E9 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
000212EE FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
000212F3 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
000212F8 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
000212FD 02                         Map_9339_111: 	dc.b $2
000212FE EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00021303 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00021308 02                         Map_9339_11C: 	dc.b $2
00021309 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
0002130E FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00021313 04                         Map_9339_127: 	dc.b $4
00021314 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00021319 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
0002131E FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00021323 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00021328 02                         Map_9339_13C: 	dc.b $2
00021329 EC09 0000 F3               	dc.b $EC, $9, $0, $0, $F3
0002132E FC0E 0006 EB               	dc.b $FC, $E, $0, $6, $EB
00021333 03                         Map_9339_147: 	dc.b $3
00021334 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00021339 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
0002133E 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00021343 05                         Map_9339_157: 	dc.b $5
00021344 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00021349 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
0002134E FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00021353 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00021358 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
0002135D 06                         Map_9339_171: 	dc.b $6
0002135E EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00021363 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00021368 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
0002136D 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00021372 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00021377 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
0002137C 04                         Map_9339_190: 	dc.b $4
0002137D ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00021382 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00021387 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
0002138C 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00021391 05                         Map_9339_1A5: 	dc.b $5
00021392 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00021397 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
0002139C FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
000213A1 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
000213A6 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
000213AB 04                         Map_9339_1BF: 	dc.b $4
000213AC EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
000213B1 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
000213B6 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
000213BB 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
000213C0 05                         Map_9339_1D4: 	dc.b $5
000213C1 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000213C6 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000213CB FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
000213D0 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
000213D5 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
000213DA 04                         Map_9339_1EE: 	dc.b $4
000213DB F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
000213E0 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
000213E5 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
000213EA 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
000213EF 02                         Map_9339_203: 	dc.b $2
000213F0 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
000213F5 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
000213FA 02                         Map_9339_20E: 	dc.b $2
000213FB F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00021400 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00021405 04                         Map_9339_219: 	dc.b $4
00021406 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
0002140B EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00021410 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00021415 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
0002141A 02                         Map_9339_22E: 	dc.b $2
0002141B F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00021420 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00021425 03                         Map_9339_239: 	dc.b $3
00021426 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
0002142B EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00021430 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00021435 06                         Map_9339_249: 	dc.b $6
00021436 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002143B ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00021440 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00021445 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
0002144A 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
0002144F FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00021454 06                         Map_9339_268: 	dc.b $6
00021455 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
0002145A E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
0002145F EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00021464 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00021469 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
0002146E 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00021473 04                         Map_9339_287: 	dc.b $4
00021474 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00021479 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
0002147E EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00021483 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00021488 05                         Map_9339_29C: 	dc.b $5
00021489 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002148E ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00021493 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00021498 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
0002149D 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
000214A2 04                         Map_9339_2B6: 	dc.b $4
000214A3 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000214A8 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
000214AD EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
000214B2 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
000214B7 05                         Map_9339_2CB: 	dc.b $5
000214B8 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000214BD EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
000214C2 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
000214C7 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000214CC 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
000214D1 02                         Map_9339_2E5: 	dc.b $2
000214D2 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000214D7 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000214DC 02                         Map_9339_2F0: 	dc.b $2
000214DD EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000214E2 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000214E7 02                         Map_9339_2FB: 	dc.b $2
000214E8 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000214ED FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000214F2 02                         Map_9339_306: 	dc.b $2
000214F3 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000214F8 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000214FD 04                         Map_9339_311: 	dc.b $4
000214FE EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00021503 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00021508 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002150D FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00021512 03                         Map_9339_326: 	dc.b $3
00021513 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00021518 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002151D FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00021522 04                         Map_9339_336: 	dc.b $4
00021523 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00021528 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002152D FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00021532 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00021537 03                         Map_9339_34B: 	dc.b $3
00021538 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002153D EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00021542 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00021547 02                         Map_9339_35B: 	dc.b $2
00021548 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002154D F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00021552 02                         Map_9339_366: 	dc.b $2
00021553 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00021558 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002155D 02                         Map_9339_371: 	dc.b $2
0002155E F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00021563 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00021568 02                         Map_9339_37C: 	dc.b $2
00021569 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002156E F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00021573 04                         Map_9339_387: 	dc.b $4
00021574 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00021579 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002157E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00021583 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00021588 02                         Map_9339_39C: 	dc.b $2
00021589 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002158E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00021593 04                         Map_9339_3A7: 	dc.b $4
00021594 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00021599 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002159E EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000215A3 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000215A8 02                         Map_9339_3BC: 	dc.b $2
000215A9 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000215AE EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000215B3 01                         Map_9339_3C7: 	dc.b $1
000215B4 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000215B9 01                         Map_9339_3CD: 	dc.b $1
000215BA F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000215BF 01                         Map_9339_3D3: 	dc.b $1
000215C0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000215C5 01                         Map_9339_3D9: 	dc.b $1
000215C6 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000215CB 01                         Map_9339_3DF: 	dc.b $1
000215CC F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000215D1 02                         Map_9339_3E5: 	dc.b $2
000215D2 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
000215D7 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
000215DC 01                         Map_9339_3F0: 	dc.b $1
000215DD F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000215E2 02                         Map_9339_3F6: 	dc.b $2
000215E3 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000215E8 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
000215ED 01                         Map_9339_401: 	dc.b $1
000215EE F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000215F3 02                         Map_9339_407: 	dc.b $2
000215F4 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000215F9 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000215FE 04                         Map_9339_412: 	dc.b $4
000215FF ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00021604 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00021609 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
0002160E 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00021613 04                         Map_9339_427: 	dc.b $4
00021614 F404 0000 FC               	dc.b $F4, $4, $0, $0, $FC
00021619 FC0D 0002 F4               	dc.b $FC, $D, $0, $2, $F4
0002161E 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00021623 0400 000D EC               	dc.b $4, $0, $0, $D, $EC
00021628 03                         Map_9339_43C: 	dc.b $3
00021629 EC08 0800 E8               	dc.b $EC, $8, $8, $0, $E8
0002162E F402 0803 00               	dc.b $F4, $2, $8, $3, $0
00021633 F40F 0806 E0               	dc.b $F4, $F, $8, $6, $E0
00021638 03                         Map_9339_44C: 	dc.b $3
00021639 EC0E 0800 E8               	dc.b $EC, $E, $8, $0, $E8
0002163E 040D 080C E0               	dc.b $4, $D, $8, $C, $E0
00021643 0C00 1814 00               	dc.b $C, $0, $18, $14, $0
00021648 03                         Map_9339_45C: 	dc.b $3
00021649 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002164E FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00021653 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00021658 02                         Map_9339_46C: 	dc.b $2
00021659 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
0002165E F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00021663 03                         Map_9339_477: 	dc.b $3
00021664 F40D 0000 E4               	dc.b $F4, $D, $0, $0, $E4
00021669 FC00 0008 04               	dc.b $FC, $0, $0, $8, $4
0002166E 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00021673 03                         Map_9339_487: 	dc.b $3
00021674 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00021679 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
0002167E 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00021683 03                         Map_9339_497: 	dc.b $3
00021684 E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
00021689 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
0002168E 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
00021693 04                         Map_9339_4A7: 	dc.b $4
00021694 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00021699 0005 000C 08               	dc.b $0, $5, $0, $C, $8
0002169E F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000216A3 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000216A8 04                         Map_9339_4BC: 	dc.b $4
000216A9 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000216AE 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000216B3 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000216B8 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000216BD 05                         Map_9339_4D1: 	dc.b $5
000216BE E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000216C3 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
000216C8 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000216CD 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000216D2 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000216D7 05                         Map_9339_4EB: 	dc.b $5
000216D8 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000216DD E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000216E2 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000216E7 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000216EC 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000216F1 02                         Map_9339_505: 	dc.b $2
000216F2 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000216F7 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000216FC 03                         Map_9339_510: 	dc.b $3
000216FD EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00021702 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00021707 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
0002170C 02                         Map_9339_520: 	dc.b $2
0002170D ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00021712 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00021717 03                         Map_9339_52B: 	dc.b $3
00021718 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
0002171D 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00021722 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00021727 02                         Map_9339_53B: 	dc.b $2
00021728 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002172D FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00021732 03                         Map_9339_546: 	dc.b $3
00021733 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00021738 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
0002173D E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00021742 03                         Map_9339_556: 	dc.b $3
00021743 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00021748 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002174D F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00021752 05                         Map_9339_566: 	dc.b $5
00021753 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00021758 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002175D F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00021762 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00021767 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002176C 05                         Map_9339_580: 	dc.b $5
0002176D E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00021772 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00021777 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002177C 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00021781 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00021786 02                         Map_9339_59A: 	dc.b $2
00021787 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002178C F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00021791 03                         Map_9339_5A5: 	dc.b $3
00021792 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00021797 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
0002179C 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
000217A1 01                         Map_9339_5B5: 	dc.b $1
000217A2 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
000217A7 01                         Map_9339_5BB: 	dc.b $1
000217A8 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
000217AD 01                         Map_9339_5C1: 	dc.b $1
000217AE F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000217B3 03                         Map_9339_5C7: 	dc.b $3
000217B4 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
000217B9 FC05 0808 04               	dc.b $FC, $5, $8, $8, $4
000217BE 0408 080C EC               	dc.b $4, $8, $8, $C, $EC
000217C3 03                         Map_9339_5D7: 	dc.b $3
000217C4 F40D 0800 FC               	dc.b $F4, $D, $8, $0, $FC
000217C9 FC00 0808 F4               	dc.b $FC, $0, $8, $8, $F4
000217CE 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
000217D3 03                         Map_9339_5E7: 	dc.b $3
000217D4 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
000217D9 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000217DE 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
000217E3 03                         Map_9339_5F7: 	dc.b $3
000217E4 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000217E9 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000217EE 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000217F3 02                         Map_9339_607: 	dc.b $2
000217F4 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000217F9 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000217FE                            	even
000217FE                            	even
000217FE                            
000217FE                            ; ---------------------------------------------------------------------------
000217FE                            ; Uncompressed graphics	loading	array for Sonic
000217FE                            ; ---------------------------------------------------------------------------
000217FE                            SonicDynPLC:
000217FE                            	include "_inc\Sonic dynamic pattern load cues.asm"
000217FE                            DPLC_3959:
000217FE 0000                       DPLC_3959_0: 	dc.w DPLC_3959_B0-DPLC_3959
00021800 0000                       DPLC_3959_2: 	dc.w DPLC_3959_B1-DPLC_3959
00021802 0000                       DPLC_3959_4: 	dc.w DPLC_3959_B6-DPLC_3959
00021804 0000                       DPLC_3959_6: 	dc.w DPLC_3959_BD-DPLC_3959
00021806 0000                       DPLC_3959_8: 	dc.w DPLC_3959_C4-DPLC_3959
00021808 0000                       DPLC_3959_A: 	dc.w DPLC_3959_CB-DPLC_3959
0002180A 0000                       DPLC_3959_C: 	dc.w DPLC_3959_D2-DPLC_3959
0002180C 0000                       DPLC_3959_E: 	dc.w DPLC_3959_DB-DPLC_3959
0002180E 0000                       DPLC_3959_10: 	dc.w DPLC_3959_E0-DPLC_3959
00021810 0000                       DPLC_3959_12: 	dc.w DPLC_3959_E5-DPLC_3959
00021812 0000                       DPLC_3959_14: 	dc.w DPLC_3959_EE-DPLC_3959
00021814 0000                       DPLC_3959_16: 	dc.w DPLC_3959_F3-DPLC_3959
00021816 0000                       DPLC_3959_18: 	dc.w DPLC_3959_FA-DPLC_3959
00021818 0000                       DPLC_3959_1A: 	dc.w DPLC_3959_105-DPLC_3959
0002181A 0000                       DPLC_3959_1C: 	dc.w DPLC_3959_112-DPLC_3959
0002181C 0000                       DPLC_3959_1E: 	dc.w DPLC_3959_11B-DPLC_3959
0002181E 0000                       DPLC_3959_20: 	dc.w DPLC_3959_126-DPLC_3959
00021820 0000                       DPLC_3959_22: 	dc.w DPLC_3959_12F-DPLC_3959
00021822 0000                       DPLC_3959_24: 	dc.w DPLC_3959_13A-DPLC_3959
00021824 0000                       DPLC_3959_26: 	dc.w DPLC_3959_143-DPLC_3959
00021826 0000                       DPLC_3959_28: 	dc.w DPLC_3959_148-DPLC_3959
00021828 0000                       DPLC_3959_2A: 	dc.w DPLC_3959_14D-DPLC_3959
0002182A 0000                       DPLC_3959_2C: 	dc.w DPLC_3959_156-DPLC_3959
0002182C 0000                       DPLC_3959_2E: 	dc.w DPLC_3959_15B-DPLC_3959
0002182E 0000                       DPLC_3959_30: 	dc.w DPLC_3959_162-DPLC_3959
00021830 0000                       DPLC_3959_32: 	dc.w DPLC_3959_16F-DPLC_3959
00021832 0000                       DPLC_3959_34: 	dc.w DPLC_3959_17C-DPLC_3959
00021834 0000                       DPLC_3959_36: 	dc.w DPLC_3959_185-DPLC_3959
00021836 0000                       DPLC_3959_38: 	dc.w DPLC_3959_190-DPLC_3959
00021838 0000                       DPLC_3959_3A: 	dc.w DPLC_3959_199-DPLC_3959
0002183A 0000                       DPLC_3959_3C: 	dc.w DPLC_3959_1A4-DPLC_3959
0002183C 0000                       DPLC_3959_3E: 	dc.w DPLC_3959_1A9-DPLC_3959
0002183E 0000                       DPLC_3959_40: 	dc.w DPLC_3959_1AE-DPLC_3959
00021840 0000                       DPLC_3959_42: 	dc.w DPLC_3959_1B3-DPLC_3959
00021842 0000                       DPLC_3959_44: 	dc.w DPLC_3959_1B8-DPLC_3959
00021844 0000                       DPLC_3959_46: 	dc.w DPLC_3959_1C1-DPLC_3959
00021846 0000                       DPLC_3959_48: 	dc.w DPLC_3959_1C8-DPLC_3959
00021848 0000                       DPLC_3959_4A: 	dc.w DPLC_3959_1D1-DPLC_3959
0002184A 0000                       DPLC_3959_4C: 	dc.w DPLC_3959_1D8-DPLC_3959
0002184C 0000                       DPLC_3959_4E: 	dc.w DPLC_3959_1DD-DPLC_3959
0002184E 0000                       DPLC_3959_50: 	dc.w DPLC_3959_1E2-DPLC_3959
00021850 0000                       DPLC_3959_52: 	dc.w DPLC_3959_1E7-DPLC_3959
00021852 0000                       DPLC_3959_54: 	dc.w DPLC_3959_1EC-DPLC_3959
00021854 0000                       DPLC_3959_56: 	dc.w DPLC_3959_1F5-DPLC_3959
00021856 0000                       DPLC_3959_58: 	dc.w DPLC_3959_1FA-DPLC_3959
00021858 0000                       DPLC_3959_5A: 	dc.w DPLC_3959_203-DPLC_3959
0002185A 0000                       DPLC_3959_5C: 	dc.w DPLC_3959_208-DPLC_3959
0002185C 0000                       DPLC_3959_5E: 	dc.w DPLC_3959_20B-DPLC_3959
0002185E 0000                       DPLC_3959_60: 	dc.w DPLC_3959_20E-DPLC_3959
00021860 0000                       DPLC_3959_62: 	dc.w DPLC_3959_211-DPLC_3959
00021862 0000                       DPLC_3959_64: 	dc.w DPLC_3959_214-DPLC_3959
00021864 0000                       DPLC_3959_66: 	dc.w DPLC_3959_217-DPLC_3959
00021866 0000                       DPLC_3959_68: 	dc.w DPLC_3959_21C-DPLC_3959
00021868 0000                       DPLC_3959_6A: 	dc.w DPLC_3959_21F-DPLC_3959
0002186A 0000                       DPLC_3959_6C: 	dc.w DPLC_3959_224-DPLC_3959
0002186C 0000                       DPLC_3959_6E: 	dc.w DPLC_3959_227-DPLC_3959
0002186E 0000                       DPLC_3959_70: 	dc.w DPLC_3959_22C-DPLC_3959
00021870 0000                       DPLC_3959_72: 	dc.w DPLC_3959_235-DPLC_3959
00021872 0000                       DPLC_3959_74: 	dc.w DPLC_3959_23E-DPLC_3959
00021874 0000                       DPLC_3959_76: 	dc.w DPLC_3959_245-DPLC_3959
00021876 0000                       DPLC_3959_78: 	dc.w DPLC_3959_24C-DPLC_3959
00021878 0000                       DPLC_3959_7A: 	dc.w DPLC_3959_253-DPLC_3959
0002187A 0000                       DPLC_3959_7C: 	dc.w DPLC_3959_256-DPLC_3959
0002187C 0000                       DPLC_3959_7E: 	dc.w DPLC_3959_25D-DPLC_3959
0002187E 0000                       DPLC_3959_80: 	dc.w DPLC_3959_264-DPLC_3959
00021880 0000                       DPLC_3959_82: 	dc.w DPLC_3959_26B-DPLC_3959
00021882 0000                       DPLC_3959_84: 	dc.w DPLC_3959_274-DPLC_3959
00021884 0000                       DPLC_3959_86: 	dc.w DPLC_3959_27D-DPLC_3959
00021886 0000                       DPLC_3959_88: 	dc.w DPLC_3959_288-DPLC_3959
00021888 0000                       DPLC_3959_8A: 	dc.w DPLC_3959_293-DPLC_3959
0002188A 0000                       DPLC_3959_8C: 	dc.w DPLC_3959_298-DPLC_3959
0002188C 0000                       DPLC_3959_8E: 	dc.w DPLC_3959_29F-DPLC_3959
0002188E 0000                       DPLC_3959_90: 	dc.w DPLC_3959_2A4-DPLC_3959
00021890 0000                       DPLC_3959_92: 	dc.w DPLC_3959_2AB-DPLC_3959
00021892 0000                       DPLC_3959_94: 	dc.w DPLC_3959_2B0-DPLC_3959
00021894 0000                       DPLC_3959_96: 	dc.w DPLC_3959_2B7-DPLC_3959
00021896 0000                       DPLC_3959_98: 	dc.w DPLC_3959_2BE-DPLC_3959
00021898 0000                       DPLC_3959_9A: 	dc.w DPLC_3959_2C9-DPLC_3959
0002189A 0000                       DPLC_3959_9C: 	dc.w DPLC_3959_2D4-DPLC_3959
0002189C 0000                       DPLC_3959_9E: 	dc.w DPLC_3959_2D9-DPLC_3959
0002189E 0000                       DPLC_3959_A0: 	dc.w DPLC_3959_2E0-DPLC_3959
000218A0 0000                       DPLC_3959_A2: 	dc.w DPLC_3959_2E3-DPLC_3959
000218A2 0000                       DPLC_3959_A4: 	dc.w DPLC_3959_2E6-DPLC_3959
000218A4 0000                       DPLC_3959_A6: 	dc.w DPLC_3959_2E9-DPLC_3959
000218A6 0000                       DPLC_3959_A8: 	dc.w DPLC_3959_2F0-DPLC_3959
000218A8 0000                       DPLC_3959_AA: 	dc.w DPLC_3959_2F7-DPLC_3959
000218AA 0000                       DPLC_3959_AC: 	dc.w DPLC_3959_2FE-DPLC_3959
000218AC 0000                       DPLC_3959_AE: 	dc.w DPLC_3959_305-DPLC_3959
000218AE 00                         DPLC_3959_B0: 	dc.b $0
000218AF 02                         DPLC_3959_B1: 	dc.b $2
000218B0 F000                       	dc.b $F0, $0
000218B2 1010                       	dc.b $10, $10
000218B4 03                         DPLC_3959_B6: 	dc.b $3
000218B5 5012                       	dc.b $50, $12
000218B7 5018                       	dc.b $50, $18
000218B9 201E                       	dc.b $20, $1E
000218BB 03                         DPLC_3959_BD: 	dc.b $3
000218BC 5021                       	dc.b $50, $21
000218BE 5018                       	dc.b $50, $18
000218C0 201E                       	dc.b $20, $1E
000218C2 03                         DPLC_3959_C4: 	dc.b $3
000218C3 5021                       	dc.b $50, $21
000218C5 5018                       	dc.b $50, $18
000218C7 2027                       	dc.b $20, $27
000218C9 03                         DPLC_3959_CB: 	dc.b $3
000218CA 802A                       	dc.b $80, $2A
000218CC 2033                       	dc.b $20, $33
000218CE 2036                       	dc.b $20, $36
000218D0 04                         DPLC_3959_D2: 	dc.b $4
000218D1 7039                       	dc.b $70, $39
000218D3 5041                       	dc.b $50, $41
000218D5 5047                       	dc.b $50, $47
000218D7 104D                       	dc.b $10, $4D
000218D9 02                         DPLC_3959_DB: 	dc.b $2
000218DA 7039                       	dc.b $70, $39
000218DC B04F                       	dc.b $B0, $4F
000218DE 02                         DPLC_3959_E0: 	dc.b $2
000218DF 505B                       	dc.b $50, $5B
000218E1 8061                       	dc.b $80, $61
000218E3 04                         DPLC_3959_E5: 	dc.b $4
000218E4 505B                       	dc.b $50, $5B
000218E6 506A                       	dc.b $50, $6A
000218E8 5070                       	dc.b $50, $70
000218EA 1076                       	dc.b $10, $76
000218EC 02                         DPLC_3959_EE: 	dc.b $2
000218ED 505B                       	dc.b $50, $5B
000218EF B078                       	dc.b $B0, $78
000218F1 03                         DPLC_3959_F3: 	dc.b $3
000218F2 7039                       	dc.b $70, $39
000218F4 3084                       	dc.b $30, $84
000218F6 5088                       	dc.b $50, $88
000218F8 05                         DPLC_3959_FA: 	dc.b $5
000218F9 508E                       	dc.b $50, $8E
000218FB 5094                       	dc.b $50, $94
000218FD 209A                       	dc.b $20, $9A
000218FF 509D                       	dc.b $50, $9D
00021901 00A3                       	dc.b $0, $A3
00021903 06                         DPLC_3959_105: 	dc.b $6
00021904 508E                       	dc.b $50, $8E
00021906 10A4                       	dc.b $10, $A4
00021908 30A6                       	dc.b $30, $A6
0002190A 50AA                       	dc.b $50, $AA
0002190C 30B0                       	dc.b $30, $B0
0002190E 00B4                       	dc.b $0, $B4
00021910 04                         DPLC_3959_112: 	dc.b $4
00021911 50B5                       	dc.b $50, $B5
00021913 10BB                       	dc.b $10, $BB
00021915 70BD                       	dc.b $70, $BD
00021917 20C5                       	dc.b $20, $C5
00021919 05                         DPLC_3959_11B: 	dc.b $5
0002191A 50C8                       	dc.b $50, $C8
0002191C 30CE                       	dc.b $30, $CE
0002191E 70D2                       	dc.b $70, $D2
00021920 20DA                       	dc.b $20, $DA
00021922 10DD                       	dc.b $10, $DD
00021924 04                         DPLC_3959_126: 	dc.b $4
00021925 50C8                       	dc.b $50, $C8
00021927 10DF                       	dc.b $10, $DF
00021929 70E1                       	dc.b $70, $E1
0002192B 20E9                       	dc.b $20, $E9
0002192D 05                         DPLC_3959_12F: 	dc.b $5
0002192E 508E                       	dc.b $50, $8E
00021930 10A4                       	dc.b $10, $A4
00021932 009A                       	dc.b $0, $9A
00021934 70EC                       	dc.b $70, $EC
00021936 20F4                       	dc.b $20, $F4
00021938 04                         DPLC_3959_13A: 	dc.b $4
00021939 70F7                       	dc.b $70, $F7
0002193B 50FF                       	dc.b $50, $FF
0002193D 1105                       	dc.b $11, $5
0002193F 5107                       	dc.b $51, $7
00021941 02                         DPLC_3959_143: 	dc.b $2
00021942 70F7                       	dc.b $70, $F7
00021944 B10D                       	dc.b $B1, $D
00021946 02                         DPLC_3959_148: 	dc.b $2
00021947 5119                       	dc.b $51, $19
00021949 811F                       	dc.b $81, $1F
0002194B 04                         DPLC_3959_14D: 	dc.b $4
0002194C 5119                       	dc.b $51, $19
0002194E 5128                       	dc.b $51, $28
00021950 112E                       	dc.b $11, $2E
00021952 5130                       	dc.b $51, $30
00021954 02                         DPLC_3959_156: 	dc.b $2
00021955 5119                       	dc.b $51, $19
00021957 B136                       	dc.b $B1, $36
00021959 03                         DPLC_3959_15B: 	dc.b $3
0002195A 70F7                       	dc.b $70, $F7
0002195C 010D                       	dc.b $1, $D
0002195E 8142                       	dc.b $81, $42
00021960 06                         DPLC_3959_162: 	dc.b $6
00021961 514B                       	dc.b $51, $4B
00021963 1151                       	dc.b $11, $51
00021965 1153                       	dc.b $11, $53
00021967 8155                       	dc.b $81, $55
00021969 015E                       	dc.b $1, $5E
0002196B 015F                       	dc.b $1, $5F
0002196D 06                         DPLC_3959_16F: 	dc.b $6
0002196E 514B                       	dc.b $51, $4B
00021970 2160                       	dc.b $21, $60
00021972 1163                       	dc.b $11, $63
00021974 1165                       	dc.b $11, $65
00021976 8167                       	dc.b $81, $67
00021978 015E                       	dc.b $1, $5E
0002197A 04                         DPLC_3959_17C: 	dc.b $4
0002197B 5170                       	dc.b $51, $70
0002197D 1176                       	dc.b $11, $76
0002197F 8178                       	dc.b $81, $78
00021981 1181                       	dc.b $11, $81
00021983 05                         DPLC_3959_185: 	dc.b $5
00021984 5183                       	dc.b $51, $83
00021986 2189                       	dc.b $21, $89
00021988 118C                       	dc.b $11, $8C
0002198A 718E                       	dc.b $71, $8E
0002198C 2196                       	dc.b $21, $96
0002198E 04                         DPLC_3959_190: 	dc.b $4
0002198F 5183                       	dc.b $51, $83
00021991 1199                       	dc.b $11, $99
00021993 819B                       	dc.b $81, $9B
00021995 11A4                       	dc.b $11, $A4
00021997 05                         DPLC_3959_199: 	dc.b $5
00021998 514B                       	dc.b $51, $4B
0002199A 81A6                       	dc.b $81, $A6
0002199C 1165                       	dc.b $11, $65
0002199E 11AF                       	dc.b $11, $AF
000219A0 015E                       	dc.b $1, $5E
000219A2 02                         DPLC_3959_1A4: 	dc.b $2
000219A3 51B1                       	dc.b $51, $B1
000219A5 B1B7                       	dc.b $B1, $B7
000219A7 02                         DPLC_3959_1A9: 	dc.b $2
000219A8 505B                       	dc.b $50, $5B
000219AA B1C3                       	dc.b $B1, $C3
000219AC 02                         DPLC_3959_1AE: 	dc.b $2
000219AD 51B1                       	dc.b $51, $B1
000219AF B1CF                       	dc.b $B1, $CF
000219B1 02                         DPLC_3959_1B3: 	dc.b $2
000219B2 505B                       	dc.b $50, $5B
000219B4 B1DB                       	dc.b $B1, $DB
000219B6 04                         DPLC_3959_1B8: 	dc.b $4
000219B7 51E7                       	dc.b $51, $E7
000219B9 11ED                       	dc.b $11, $ED
000219BB B1EF                       	dc.b $B1, $EF
000219BD 01FB                       	dc.b $1, $FB
000219BF 03                         DPLC_3959_1C1: 	dc.b $3
000219C0 51FC                       	dc.b $51, $FC
000219C2 1202                       	dc.b $12, $2
000219C4 B204                       	dc.b $B2, $4
000219C6 04                         DPLC_3959_1C8: 	dc.b $4
000219C7 51E7                       	dc.b $51, $E7
000219C9 1210                       	dc.b $12, $10
000219CB B212                       	dc.b $B2, $12
000219CD 01FB                       	dc.b $1, $FB
000219CF 03                         DPLC_3959_1D1: 	dc.b $3
000219D0 51FC                       	dc.b $51, $FC
000219D2 1202                       	dc.b $12, $2
000219D4 B21E                       	dc.b $B2, $1E
000219D6 02                         DPLC_3959_1D8: 	dc.b $2
000219D7 522A                       	dc.b $52, $2A
000219D9 B230                       	dc.b $B2, $30
000219DB 02                         DPLC_3959_1DD: 	dc.b $2
000219DC 5119                       	dc.b $51, $19
000219DE B23C                       	dc.b $B2, $3C
000219E0 02                         DPLC_3959_1E2: 	dc.b $2
000219E1 522A                       	dc.b $52, $2A
000219E3 B248                       	dc.b $B2, $48
000219E5 02                         DPLC_3959_1E7: 	dc.b $2
000219E6 5119                       	dc.b $51, $19
000219E8 B254                       	dc.b $B2, $54
000219EA 04                         DPLC_3959_1EC: 	dc.b $4
000219EB 5260                       	dc.b $52, $60
000219ED 1266                       	dc.b $12, $66
000219EF B268                       	dc.b $B2, $68
000219F1 0274                       	dc.b $2, $74
000219F3 02                         DPLC_3959_1F5: 	dc.b $2
000219F4 7275                       	dc.b $72, $75
000219F6 B27D                       	dc.b $B2, $7D
000219F8 04                         DPLC_3959_1FA: 	dc.b $4
000219F9 5260                       	dc.b $52, $60
000219FB 1289                       	dc.b $12, $89
000219FD B28B                       	dc.b $B2, $8B
000219FF 0274                       	dc.b $2, $74
00021A01 02                         DPLC_3959_203: 	dc.b $2
00021A02 7275                       	dc.b $72, $75
00021A04 B297                       	dc.b $B2, $97
00021A06 01                         DPLC_3959_208: 	dc.b $1
00021A07 F2A3                       	dc.b $F2, $A3
00021A09 01                         DPLC_3959_20B: 	dc.b $1
00021A0A F2B3                       	dc.b $F2, $B3
00021A0C 01                         DPLC_3959_20E: 	dc.b $1
00021A0D F2C3                       	dc.b $F2, $C3
00021A0F 01                         DPLC_3959_211: 	dc.b $1
00021A10 F2D3                       	dc.b $F2, $D3
00021A12 01                         DPLC_3959_214: 	dc.b $1
00021A13 F2E3                       	dc.b $F2, $E3
00021A15 02                         DPLC_3959_217: 	dc.b $2
00021A16 B2F3                       	dc.b $B2, $F3
00021A18 22FF                       	dc.b $22, $FF
00021A1A 01                         DPLC_3959_21C: 	dc.b $1
00021A1B F302                       	dc.b $F3, $2
00021A1D 02                         DPLC_3959_21F: 	dc.b $2
00021A1E B312                       	dc.b $B3, $12
00021A20 231E                       	dc.b $23, $1E
00021A22 01                         DPLC_3959_224: 	dc.b $1
00021A23 F321                       	dc.b $F3, $21
00021A25 02                         DPLC_3959_227: 	dc.b $2
00021A26 5331                       	dc.b $53, $31
00021A28 B337                       	dc.b $B3, $37
00021A2A 04                         DPLC_3959_22C: 	dc.b $4
00021A2B 5343                       	dc.b $53, $43
00021A2D 7349                       	dc.b $73, $49
00021A2F 1351                       	dc.b $13, $51
00021A31 0353                       	dc.b $3, $53
00021A33 04                         DPLC_3959_235: 	dc.b $4
00021A34 1354                       	dc.b $13, $54
00021A36 7356                       	dc.b $73, $56
00021A38 235E                       	dc.b $23, $5E
00021A3A 0361                       	dc.b $3, $61
00021A3C 03                         DPLC_3959_23E: 	dc.b $3
00021A3D 2362                       	dc.b $23, $62
00021A3F 2365                       	dc.b $23, $65
00021A41 F368                       	dc.b $F3, $68
00021A43 03                         DPLC_3959_245: 	dc.b $3
00021A44 B378                       	dc.b $B3, $78
00021A46 7384                       	dc.b $73, $84
00021A48 0078                       	dc.b $0, $78
00021A4A 03                         DPLC_3959_24C: 	dc.b $3
00021A4B 738C                       	dc.b $73, $8C
00021A4D 3394                       	dc.b $33, $94
00021A4F 2398                       	dc.b $23, $98
00021A51 01                         DPLC_3959_253: 	dc.b $1
00021A52 839B                       	dc.b $83, $9B
00021A54 03                         DPLC_3959_256: 	dc.b $3
00021A55 73A4                       	dc.b $73, $A4
00021A57 03AC                       	dc.b $3, $AC
00021A59 33AD                       	dc.b $33, $AD
00021A5B 03                         DPLC_3959_25D: 	dc.b $3
00021A5C 73B1                       	dc.b $73, $B1
00021A5E 33B9                       	dc.b $33, $B9
00021A60 23BD                       	dc.b $23, $BD
00021A62 03                         DPLC_3959_264: 	dc.b $3
00021A63 B3C0                       	dc.b $B3, $C0
00021A65 13CC                       	dc.b $13, $CC
00021A67 03CE                       	dc.b $3, $CE
00021A69 04                         DPLC_3959_26B: 	dc.b $4
00021A6A B3CF                       	dc.b $B3, $CF
00021A6C 33DB                       	dc.b $33, $DB
00021A6E 03DF                       	dc.b $3, $DF
00021A70 03E0                       	dc.b $3, $E0
00021A72 04                         DPLC_3959_274: 	dc.b $4
00021A73 B3E1                       	dc.b $B3, $E1
00021A75 33ED                       	dc.b $33, $ED
00021A77 03F1                       	dc.b $3, $F1
00021A79 03F2                       	dc.b $3, $F2
00021A7B 05                         DPLC_3959_27D: 	dc.b $5
00021A7C 83F3                       	dc.b $83, $F3
00021A7E 13FC                       	dc.b $13, $FC
00021A80 53FE                       	dc.b $53, $FE
00021A82 1404                       	dc.b $14, $4
00021A84 0406                       	dc.b $4, $6
00021A86 05                         DPLC_3959_288: 	dc.b $5
00021A87 8407                       	dc.b $84, $7
00021A89 1410                       	dc.b $14, $10
00021A8B 53FE                       	dc.b $53, $FE
00021A8D 1404                       	dc.b $14, $4
00021A8F 0406                       	dc.b $4, $6
00021A91 02                         DPLC_3959_293: 	dc.b $2
00021A92 8412                       	dc.b $84, $12
00021A94 741B                       	dc.b $74, $1B
00021A96 03                         DPLC_3959_298: 	dc.b $3
00021A97 8423                       	dc.b $84, $23
00021A99 242C                       	dc.b $24, $2C
00021A9B 142F                       	dc.b $14, $2F
00021A9D 02                         DPLC_3959_29F: 	dc.b $2
00021A9E 8431                       	dc.b $84, $31
00021AA0 743A                       	dc.b $74, $3A
00021AA2 03                         DPLC_3959_2A4: 	dc.b $3
00021AA3 8423                       	dc.b $84, $23
00021AA5 2442                       	dc.b $24, $42
00021AA7 1445                       	dc.b $14, $45
00021AA9 02                         DPLC_3959_2AB: 	dc.b $2
00021AAA 5447                       	dc.b $54, $47
00021AAC B44D                       	dc.b $B4, $4D
00021AAE 03                         DPLC_3959_2B0: 	dc.b $3
00021AAF 8459                       	dc.b $84, $59
00021AB1 3462                       	dc.b $34, $62
00021AB3 0466                       	dc.b $4, $66
00021AB5 03                         DPLC_3959_2B7: 	dc.b $3
00021AB6 7467                       	dc.b $74, $67
00021AB8 146F                       	dc.b $14, $6F
00021ABA B471                       	dc.b $B4, $71
00021ABC 05                         DPLC_3959_2BE: 	dc.b $5
00021ABD 747D                       	dc.b $74, $7D
00021ABF 1485                       	dc.b $14, $85
00021AC1 5487                       	dc.b $54, $87
00021AC3 348D                       	dc.b $34, $8D
00021AC5 0491                       	dc.b $4, $91
00021AC7 05                         DPLC_3959_2C9: 	dc.b $5
00021AC8 7492                       	dc.b $74, $92
00021ACA 1485                       	dc.b $14, $85
00021ACC 549A                       	dc.b $54, $9A
00021ACE 348D                       	dc.b $34, $8D
00021AD0 0491                       	dc.b $4, $91
00021AD2 02                         DPLC_3959_2D4: 	dc.b $2
00021AD3 24A0                       	dc.b $24, $A0
00021AD5 F4A3                       	dc.b $F4, $A3
00021AD7 03                         DPLC_3959_2D9: 	dc.b $3
00021AD8 24B3                       	dc.b $24, $B3
00021ADA B4B6                       	dc.b $B4, $B6
00021ADC 24C2                       	dc.b $24, $C2
00021ADE 01                         DPLC_3959_2E0: 	dc.b $1
00021ADF B4C5                       	dc.b $B4, $C5
00021AE1 01                         DPLC_3959_2E3: 	dc.b $1
00021AE2 54D1                       	dc.b $54, $D1
00021AE4 01                         DPLC_3959_2E6: 	dc.b $1
00021AE5 14D7                       	dc.b $14, $D7
00021AE7 03                         DPLC_3959_2E9: 	dc.b $3
00021AE8 738C                       	dc.b $73, $8C
00021AEA 3394                       	dc.b $33, $94
00021AEC 2398                       	dc.b $23, $98
00021AEE 03                         DPLC_3959_2F0: 	dc.b $3
00021AEF 73A4                       	dc.b $73, $A4
00021AF1 03AC                       	dc.b $3, $AC
00021AF3 33AD                       	dc.b $33, $AD
00021AF5 03                         DPLC_3959_2F7: 	dc.b $3
00021AF6 B4D9                       	dc.b $B4, $D9
00021AF8 14E5                       	dc.b $14, $E5
00021AFA 34E7                       	dc.b $34, $E7
00021AFC 03                         DPLC_3959_2FE: 	dc.b $3
00021AFD 54EB                       	dc.b $54, $EB
00021AFF B4F1                       	dc.b $B4, $F1
00021B01 1074                       	dc.b $10, $74
00021B03 02                         DPLC_3959_305: 	dc.b $2
00021B04 F4FD                       	dc.b $F4, $FD
00021B06 250D                       	dc.b $25, $D
00021B08                            	even
00021B08                            	even
00021B08                            
00021B08                            ; ---------------------------------------------------------------------------
00021B08                            ; Uncompressed graphics	- Sonic
00021B08                            ; ---------------------------------------------------------------------------
00021B08                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002BD08                            		even
0002BD08                            ; ---------------------------------------------------------------------------
0002BD08                            ; Compressed graphics - various
0002BD08                            ; ---------------------------------------------------------------------------
0002BD08                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002BE0C                            		even
0002BE0C                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002BE46                            		even
0002BE46                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0002BFDC                            		even
0002BFDC                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0002C124                            		even
0002C124                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002C22E                            		even
0002C22E                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002C280                            		even
0002C280                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002C4C8                            		even
0002C4C8                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002C64E                            		even
0002C64E                            ; ---------------------------------------------------------------------------
0002C64E                            ; Sprite mappings - walls of the special stage
0002C64E                            ; ---------------------------------------------------------------------------
0002C64E                            Map_SSWalls:
0002C64E                            	include "_maps\SSwalls.asm"
0002C64E                            ; ---------------------------------------------------------------------------
0002C64E                            ; Sprite mappings - walls of the special stage
0002C64E                            ; ---------------------------------------------------------------------------
0002C64E 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002C652 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002C656 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002C65A 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002C65E 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002C662 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002C666 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002C66A 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002C66E 01                         byte_2C584:	dc.b 1
0002C66F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002C674 01                         byte_2C58A:	dc.b 1
0002C675 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002C67A 01                         byte_2C590:	dc.b 1
0002C67B F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002C680 01                         byte_2C596:	dc.b 1
0002C681 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002C686 01                         byte_2C59C:	dc.b 1
0002C687 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002C68C 01                         byte_2C5A2:	dc.b 1
0002C68D F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002C692 01                         byte_2C5A8:	dc.b 1
0002C693 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002C698 01                         byte_2C5AE:	dc.b 1
0002C699 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002C69E 01                         byte_2C5B4:	dc.b 1
0002C69F F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002C6A4 01                         byte_2C5BA:	dc.b 1
0002C6A5 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002C6AA 01                         byte_2C5C0:	dc.b 1
0002C6AB F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002C6B0 01                         byte_2C5C6:	dc.b 1
0002C6B1 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002C6B6 01                         byte_2C5CC:	dc.b 1
0002C6B7 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002C6BC 01                         byte_2C5D2:	dc.b 1
0002C6BD F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002C6C2 01                         byte_2C5D8:	dc.b 1
0002C6C3 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002C6C8 01                         byte_2C5DE:	dc.b 1
0002C6C9 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002C6CE                            		even
0002C6CE                            		even
0002C6CE                            ; ---------------------------------------------------------------------------
0002C6CE                            ; Compressed graphics - special stage
0002C6CE                            ; ---------------------------------------------------------------------------
0002C6CE                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0002D006                            		even
0002D006                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0002D13A                            		even
0002D13A                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0002DDCA                            		even
0002DDCA                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0002E0CA                            		even
0002E0CA                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0002E5BE                            		even
0002E5BE                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0002E6AC                            		even
0002E6AC                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0002E77C                            		even
0002E77C                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
0002E872                            		even
0002E872                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0002E8D0                            		even
0002E8D0                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
0002E962                            		even
0002E962                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
0002EA24                            		even
0002EA24                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
0002EAF2                            		even
0002EAF2                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0002EBBE                            		even
0002EBBE                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
0002EC86                            		even
0002EC86                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0002ED50                            		even
0002ED50                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
0002EE20                            		even
0002EE20                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
0002F014                            		even
0002F014                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0002F17C                            		even
0002F17C                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0002F22C                            		even
0002F22C                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
0002F306                            		even
0002F306                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0002F38A                            		even
0002F38A                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0002F508                            		even
0002F508                            ; ---------------------------------------------------------------------------
0002F508                            ; Compressed graphics - GHZ stuff
0002F508                            ; ---------------------------------------------------------------------------
0002F508                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
0002F552                            		even
0002F552                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0002F66C                            		even
0002F66C                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0002F758                            		even
0002F758                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
0002F7A0                            		even
0002F7A0                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
0002F93E                            		even
0002F93E                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0002F9BA                            		even
0002F9BA                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0002FBCE                            		even
0002FBCE                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0002FCFA                            		even
0002FCFA                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
0002FE28                            		even
0002FE28                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
0002FEC6                            		even
0002FEC6                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
0002FF26                            		even
0002FF26                            ; ---------------------------------------------------------------------------
0002FF26                            ; Compressed graphics - LZ stuff
0002FF26                            ; ---------------------------------------------------------------------------
0002FF26                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
0003004A                            		even
0003004A                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
0003083E                            		even
0003083E                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
000309BE                            		even
000309BE                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00030B28                            		even
00030B28                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003117E                            		even
0003117E                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00031234                            		even
00031234                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
000312D6                            		even
000312D6                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00031432                            		even
00031432                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00031496                            		even
00031496                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
000315E8                            		even
000315E8                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00031ACA                            		even
00031ACA                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00031C3A                            		even
00031C3A                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00031EF2                            		even
00031EF2                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0003202A                            		even
0003202A                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00032154                            		even
00032154                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00032264                            		even
00032264                            ; ---------------------------------------------------------------------------
00032264                            ; Compressed graphics - MZ stuff
00032264                            ; ---------------------------------------------------------------------------
00032264                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
000324F2                            		even
000324F2                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
000325B0                            		even
000325B0                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00032668                            		even
00032668                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
000326BC                            		even
000326BC                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
0003299A                            		even
0003299A                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
000332B0                            		even
000332B0                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00033414                            		even
00033414                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
0003349C                            		even
0003349C                            ; ---------------------------------------------------------------------------
0003349C                            ; Compressed graphics - SLZ stuff
0003349C                            ; ---------------------------------------------------------------------------
0003349C                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
000336D8                            		even
000336D8                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
0003381E                            		even
0003381E                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00033A62                            		even
00033A62                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00033AC4                            		even
00033AC4                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00033BA6                            		even
00033BA6                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00033D88                            		even
00033D88                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00033E94                            		even
00033E94                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00033F38                            		even
00033F38                            ; ---------------------------------------------------------------------------
00033F38                            ; Compressed graphics - SYZ stuff
00033F38                            ; ---------------------------------------------------------------------------
00033F38                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
000340A2                            		even
000340A2                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00034104                            		even
00034104                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
000341E6                            		even
000341E6                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00034474                            		even
00034474                            ; ---------------------------------------------------------------------------
00034474                            ; Compressed graphics - SBZ stuff
00034474                            ; ---------------------------------------------------------------------------
00034474                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
000344C8                            		even
000344C8                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00034764                            		even
00034764                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00034968                            		even
00034968                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00034B06                            		even
00034B06                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00034E36                            		even
00034E36                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00035014                            		even
00035014                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003506C                            		even
0003506C                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
000351EC                            		even
000351EC                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
000352EA                            		even
000352EA                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00035476                            		even
00035476                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
000354C6                            		even
000354C6                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003551E                            		even
0003551E                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003561A                            		even
0003561A                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00035730                            		even
00035730                            ; ---------------------------------------------------------------------------
00035730                            ; Compressed graphics - enemies
00035730                            ; ---------------------------------------------------------------------------
00035730                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00035AF0                            		even
00035AF0                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00035FDE                            		even
00035FDE                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
00036384                            		even
00036384                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003656C                            		even
0003656C                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
00036C56                            		even
00036C56                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00036EBE                            		even
00036EBE                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
00037148                            		even
00037148                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003766C                            		even
0003766C                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
000378F6                            		even
000378F6                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
00037F14                            		even
00037F14                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
000382FC                            		even
000382FC                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
000385F8                            		even
000385F8                            Nem_Splats:	incbin	artnem\splats.bin	; splats
00038840                            		even
00038840                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
00038AD8                            		even
00038AD8                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
00038CB6                            		even
00038CB6                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
00038E44                            		even
00038E44                            ; ---------------------------------------------------------------------------
00038E44                            ; Compressed graphics - various
00038E44                            ; ---------------------------------------------------------------------------
00038E44                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
00039452                            		even
00039452                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
00039548                            		even
00039548                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003964E                            		even
0003964E                            Nem_Ring:	incbin	artnem\rings.bin	; rings
00039742                            		even
00039742                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
00039BA2                            		even
00039BA2                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003A208                            		even
0003A208                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003A2B8                            		even
0003A2B8                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003A44A                            		even
0003A44A                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003A54C                            		even
0003A54C                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003A628                            		even
0003A628                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003AAA4                            		even
0003AAA4                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003AB64                            		even
0003AB64                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003ACD8                            		even
0003ACD8                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003AFDA                            		even
0003AFDA                            ; ---------------------------------------------------------------------------
0003AFDA                            ; Compressed graphics - continue screen
0003AFDA                            ; ---------------------------------------------------------------------------
0003AFDA                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003B28A                            		even
0003B28A                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003B4C4                            		even
0003B4C4                            ; ---------------------------------------------------------------------------
0003B4C4                            ; Compressed graphics - animals
0003B4C4                            ; ---------------------------------------------------------------------------
0003B4C4                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003B61C                            		even
0003B61C                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003B778                            		even
0003B778                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003B8F4                            		even
0003B8F4                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003BA10                            		even
0003BA10                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003BB46                            		even
0003BB46                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003BC80                            		even
0003BC80                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003BDDC                            		even
0003BDDC                            ; ---------------------------------------------------------------------------
0003BDDC                            ; Compressed graphics - primary patterns and block mappings
0003BDDC                            ; ---------------------------------------------------------------------------
0003BDDC                            Blk16_GHZ:	incbin	map16\ghz.bin
0003C77C                            		even
0003C77C                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
0003DDDC                            		even
0003DDDC                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
0003F184                            		even
0003F184                            Blk256_GHZ:	incbin	map256\ghz.bin
00041294                            		even
00041294                            Blk16_LZ:	incbin	map16\lz.bin
000415BE                            		even
000415BE                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00043106                            		even
00043106                            Blk256_LZ:	incbin	map256\lz.bin
000458F6                            		even
000458F6                            Blk16_MZ:	incbin	map16\mz.bin
00046100                            		even
00046100                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
00048944                            		even
00048944                            Blk256_MZ:	incbin	map256\mz.bin
0004A104                            		even
0004A104                            Blk16_SLZ:	incbin	map16\slz.bin
0004A3EA                            		even
0004A3EA                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0004B50C                            		even
0004B50C                            Blk256_SLZ:	incbin	map256\slz.bin
0004B6C6                            		even
0004B6C6                            Blk16_SYZ:	incbin	map16\syz.bin
0004C034                            		even
0004C034                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0004F760                            		even
0004F760                            Blk256_SYZ:	incbin	map256\syz.bin
00051B10                            		even
00051B10                            Blk16_SBZ:	incbin	map16\sbz.bin
000529AA                            		even
000529AA                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
00055156                            		even
00055156                            Blk256_SBZ:	incbin	map256\sbz.bin
00057BA6                            		even
00057BA6                            ; ---------------------------------------------------------------------------
00057BA6                            ; Compressed graphics - bosses and ending sequence
00057BA6                            ; ---------------------------------------------------------------------------
00057BA6                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0005840A                            		even
0005840A                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
000586F4                            		even
000586F4                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00058F78                            		even
00058F78                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
000597A4                            		even
000597A4                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00059F0C                            		even
00059F0C                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0005A48C                            		even
0005A48C                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0005A5AC                            		even
0005A5AC                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0005A7AA                            		even
0005A7AA                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0005B988                            		even
0005B988                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0005C2CC                            		even
0005C2CC                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0005C6A2                            		even
0005C6A2                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0005CC32                            		even
0005CC32                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0005CEBA                            		even
0005CEBA                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0005D4B8                            		even
0005D4B8                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0005D740                            		even
0005D740                            		incbin	misc\padding2.bin
0005D844                            		even
0005D844                            ; ---------------------------------------------------------------------------
0005D844                            ; Collision data
0005D844                            ; ---------------------------------------------------------------------------
0005D844                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0005D944                            		even
0005D944                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
0005E944                            		even
0005E944                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0005F944                            		even
0005F944                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
0005FADE                            		even
0005FADE                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0005FBA6                            		even
0005FBA6                            Col_MZ:		incbin	collide\mz.bin		; MZ index
0005FD36                            		even
0005FD36                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0005FF2A                            		even
0005FF2A                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
0006011E                            		even
0006011E                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00060376                            		even
00060376                            ; ---------------------------------------------------------------------------
00060376                            ; Special layouts
00060376                            ; ---------------------------------------------------------------------------
00060376                            SS_1:		incbin	sslayout\1.bin
000605F0                            		even
000605F0                            SS_2:		incbin	sslayout\2.bin
00060A02                            		even
00060A02                            SS_3:		incbin	sslayout\3.bin
00060D5E                            		even
00060D5E                            SS_4:		incbin	sslayout\4.bin
00061238                            		even
00061238                            SS_5:		incbin	sslayout\5.bin
0006170A                            		even
0006170A                            SS_6:		incbin	sslayout\6.bin
00061A1A                            		even
00061A1A                            ; ---------------------------------------------------------------------------
00061A1A                            ; Animated uncompressed graphics
00061A1A                            ; ---------------------------------------------------------------------------
00061A1A                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00061C1A                            		even
00061C1A                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006201A                            		even
0006201A                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006249A                            		even
0006249A                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006279A                            		even
0006279A                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00062D9A                            		even
00062D9A                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006309A                            		even
0006309A                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00063B1A                            		even
00063B1A                            
00063B1A                            ; ---------------------------------------------------------------------------
00063B1A                            ; Level	layout index
00063B1A                            ; ---------------------------------------------------------------------------
00063B1A 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00063B20 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00063B26 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00063B2C 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00063B32 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00063B38 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00063B3E 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00063B44 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00063B4A 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00063B50 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00063B56 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00063B5C 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00063B62 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00063B68 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00063B6E 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00063B74 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00063B7A 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00063B80 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00063B86 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00063B8C 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00063B92 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00063B98 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00063B9E 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00063BA4 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00063BAA 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00063BB0 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00063BB6 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00063BBC 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00063BC2                            
00063BC2                            Level_GHZ1:	incbin	levels\ghz1.bin
00063CB4                            		even
00063CB4 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00063CB8                            Level_GHZ2:	incbin	levels\ghz2.bin
00063D80                            		even
00063D80 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00063D84                            Level_GHZ3:	incbin	levels\ghz3.bin
00063EA6                            		even
00063EA6                            Level_GHZbg:	incbin	levels\ghzbg.bin
00063EC8                            		even
00063EC8 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00063ECC 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00063ED0                            
00063ED0                            Level_LZ1:	incbin	levels\lz1.bin
00063FD2                            		even
00063FD2                            Level_LZbg:	incbin	levels\lzbg.bin
000640D4                            		even
000640D4 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
000640D8                            Level_LZ2:	incbin	levels\lz2.bin
00064172                            		even
00064172 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00064176                            Level_LZ3:	incbin	levels\lz3.bin
00064290                            		even
00064290 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00064294                            Level_SBZ3:	incbin	levels\sbz3.bin
0006434E                            		even
0006434E 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00064352                            
00064352                            Level_MZ1:	incbin	levels\mz1.bin
000643F0                            		even
000643F0                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006446A                            		even
0006446A                            Level_MZ2:	incbin	levels\mz2.bin
0006450E                            		even
0006450E                            Level_MZ2bg:	incbin	levels\mz2bg.bin
000645A0                            		even
000645A0 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
000645A4                            Level_MZ3:	incbin	levels\mz3.bin
00064686                            		even
00064686                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006472A                            		even
0006472A 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006472E 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00064732                            
00064732                            Level_SLZ1:	incbin	levels\slz1.bin
00064844                            		even
00064844                            Level_SLZbg:	incbin	levels\slzbg.bin
0006485E                            		even
0006485E                            Level_SLZ2:	incbin	levels\slz2.bin
0006494E                            		even
0006494E                            Level_SLZ3:	incbin	levels\slz3.bin
00064A68                            		even
00064A68 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00064A6C                            
00064A6C                            Level_SYZ1:	incbin	levels\syz1.bin
00064B28                            		even
00064B28                            Level_SYZbg:	incbin	levels\syzbg.bin
00064B62                            		even
00064B62 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00064B66                            Level_SYZ2:	incbin	levels\syz2.bin
00064C6A                            		even
00064C6A 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00064C6E                            Level_SYZ3:	incbin	levels\syz3.bin
00064DC8                            		even
00064DC8 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00064DCC 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00064DD0                            
00064DD0                            Level_SBZ1:	incbin	levels\sbz1.bin
00064EF2                            		even
00064EF2                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
00064F30                            		even
00064F30                            Level_SBZ2:	incbin	levels\sbz2.bin
00065072                            		even
00065072                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
000651DC                            		even
000651DC 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
000651E0 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
000651E4                            Level_End:	incbin	levels\ending.bin
00065204                            		even
00065204 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00065208                            
00065208                            ; ---------------------------------------------------------------------------
00065208                            ; Animated uncompressed giant ring graphics
00065208                            ; ---------------------------------------------------------------------------
00065208                            Art_BigRing:	incbin	artunc\bigring.bin
00065E48                            		even
00065E48                            
00065E48                            		incbin	misc\padding3.bin
00065EE4                            		even
00065EE4                            
00065EE4                            ; ---------------------------------------------------------------------------
00065EE4                            ; Sprite locations index
00065EE4                            ; ---------------------------------------------------------------------------
00065EE4 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065EE8 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065EEC 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065EF0 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065EF4 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065EF8 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065EFC 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F00 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F04 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F08 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F0C 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F10 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F14 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F18 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F1C 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F20 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F24 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F28 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F2C 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F30 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F34 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F38 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F3C 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F40 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F44 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F48 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F4C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F50 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00065F54 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00065F58 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00065F5C 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
00065F60 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00065F64 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00065F68 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00065F6C 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
00065F70 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00065F74 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00065F7A                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
00066484                            		even
00066484                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
00066A42                            		even
00066A42                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
000670FC                            		even
000670FC                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006756A                            		even
0006756A                            ObjPos_LZ2:	incbin	objpos\lz2.bin
000678AC                            		even
000678AC                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00067E8E                            		even
00067E8E                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
00068326                            		even
00068326                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
00068358                            		even
00068358                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0006838A                            		even
0006838A                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
000683BC                            		even
000683BC                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000683EE                            		even
000683EE                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00068438                            		even
00068438                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00068476                            		even
00068476                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000687E2                            		even
000687E2                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00068C8C                            		even
00068C8C                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00069202                            		even
00069202                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00069742                            		even
00069742                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00069BAA                            		even
00069BAA                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0006A18C                            		even
0006A18C                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0006A618                            		even
0006A618                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0006AB82                            		even
0006AB82                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0006B188                            		even
0006B188                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0006B8C6                            		even
0006B8C6                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0006BFA4                            		even
0006BFA4                            ObjPos_FZ:	incbin	objpos\fz.bin
0006BFB6                            		even
0006BFB6                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0006BFE8                            		even
0006BFE8                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0006C01A                            		even
0006C01A                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0006C04C                            		even
0006C04C                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0006C07E                            		even
0006C07E                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0006C0B0                            		even
0006C0B0                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0006C0E8                            		even
0006C0E8                            ObjPos_End:	incbin	objpos\ending.bin
0006C244                            		even
0006C244 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0006C24A                            ; ---------------------------------------------------------------------------
0006C24A                            		incbin	misc\padding4.bin
0006C874                            		even
0006C874                            
0006C874 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0006C878 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0006C87C 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0006C880 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0006C884 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0006C888 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0006C88C                            ; ---------------------------------------------------------------------------
0006C88C                            ; PSG instruments used in music
0006C88C                            ; ---------------------------------------------------------------------------
0006C88C 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0006C898 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0006C8A4 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0006C8B0                            PSG1:		incbin	sound\psg1.bin
0006C8C7                            PSG2:		incbin	sound\psg2.bin
0006C8CE                            PSG3:		incbin	sound\psg3.bin
0006C8DF                            PSG4:		incbin	sound\psg4.bin
0006C8EA                            PSG6:		incbin	sound\psg6.bin
0006C8F9                            PSG5:		incbin	sound\psg5.bin
0006C923                            PSG7:		incbin	sound\psg7.bin
0006C93F                            PSG8:		incbin	sound\psg8.bin
0006C967                            PSG9:		incbin	sound\psg9.bin
0006C978                            
0006C978 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0006C980                            ; ---------------------------------------------------------------------------
0006C980                            ; Music	Pointers
0006C980                            ; ---------------------------------------------------------------------------
0006C980 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0006C988 0000 0000 0000 0000        		dc.l Music83, Music84
0006C990 0000 0000 0000 0000        		dc.l Music85, Music86
0006C998 0000 0000 0000 0000        		dc.l Music87, Music88
0006C9A0 0000 0000 0000 0000        		dc.l Music89, Music8A
0006C9A8 0000 0000 0000 0000        		dc.l Music8B, Music8C
0006C9B0 0000 0000 0000 0000        		dc.l Music8D, Music8E
0006C9B8 0000 0000 0000 0000        		dc.l Music8F, Music90
0006C9C0 0000 0000 0000 0000        		dc.l Music91, Music92
0006C9C8 0000 0000                  		dc.l Music93
0006C9CC                            ; ---------------------------------------------------------------------------
0006C9CC                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0006C9CC                            ; ---------------------------------------------------------------------------
0006C9CC 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0006C9DC 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0006C9EC 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0006C9FC 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0006CA0C 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0006CA1C 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0006CA2C 9090 9090                  		dc.b $90, $90, $90, $90
0006CA30                            
0006CA30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CA30                            
0006CA30                            
0006CA30                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0006CA30 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0006CA38 4E71                       		nop	
0006CA3A 4E71                       		nop	
0006CA3C 4E71                       		nop	
0006CA3E                            
0006CA3E                            loc_71B5A:
0006CA3E 0839 0000 00A1 1100        		btst	#0,($A11100).l
0006CA46 66F6                       		bne.s	loc_71B5A
0006CA48                            
0006CA48 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0006CA50 6700                       		beq.s	loc_71B82
0006CA52 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0006CA5A 4E71                       		nop	
0006CA5C 4E71                       		nop	
0006CA5E 4E71                       		nop	
0006CA60 4E71                       		nop	
0006CA62 4E71                       		nop	
0006CA64 60CA                       		bra.s	sub_71B4C
0006CA66                            ; ===========================================================================
0006CA66                            
0006CA66                            loc_71B82:
0006CA66 4DF9 00FF F000             		lea	($FFF000).l,a6
0006CA6C 422E 000E                  		clr.b	$E(a6)
0006CA70 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0006CA74 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0006CA78 532E 0001                  		subq.b	#1,1(a6)
0006CA7C 6600                       		bne.s	loc_71B9E
0006CA7E 4EBA 0000                  		jsr	sub_7260C(pc)
0006CA82                            
0006CA82                            loc_71B9E:
0006CA82 102E 0004                  		move.b	4(a6),d0
0006CA86 6700                       		beq.s	loc_71BA8
0006CA88 4EBA 0000                  		jsr	sub_72504(pc)
0006CA8C                            
0006CA8C                            loc_71BA8:
0006CA8C 4A2E 0024                  		tst.b	$24(a6)
0006CA90 6700                       		beq.s	loc_71BB2
0006CA92 4EBA 0000                  		jsr	sub_7267C(pc)
0006CA96                            
0006CA96                            loc_71BB2:
0006CA96 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0006CA9A 6700                       		beq.s	loc_71BBC	; if not, branch
0006CA9C 4EBA 0000                  		jsr	Sound_Play(pc)
0006CAA0                            
0006CAA0                            loc_71BBC:
0006CAA0 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0006CAA6 6700                       		beq.s	loc_71BC8
0006CAA8 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0006CAAC                            
0006CAAC                            loc_71BC8:
0006CAAC 4BEE 0040                  		lea	$40(a6),a5
0006CAB0 4A15                       		tst.b	(a5)
0006CAB2 6A00                       		bpl.s	loc_71BD4
0006CAB4 4EBA 0000                  		jsr	sub_71C4E(pc)
0006CAB8                            
0006CAB8                            loc_71BD4:
0006CAB8 422E 0008                  		clr.b	8(a6)
0006CABC 7E05                       		moveq	#5,d7
0006CABE                            
0006CABE                            loc_71BDA:
0006CABE DAFC 0030                  		adda.w	#$30,a5
0006CAC2 4A15                       		tst.b	(a5)
0006CAC4 6A00                       		bpl.s	loc_71BE6
0006CAC6 4EBA 0000                  		jsr	sub_71CCA(pc)
0006CACA                            
0006CACA                            loc_71BE6:
0006CACA 51CF FFF2                  		dbf	d7,loc_71BDA
0006CACE                            
0006CACE 7E02                       		moveq	#2,d7
0006CAD0                            
0006CAD0                            loc_71BEC:
0006CAD0 DAFC 0030                  		adda.w	#$30,a5
0006CAD4 4A15                       		tst.b	(a5)
0006CAD6 6A00                       		bpl.s	loc_71BF8
0006CAD8 4EBA 0000                  		jsr	sub_72850(pc)
0006CADC                            
0006CADC                            loc_71BF8:
0006CADC 51CF FFF2                  		dbf	d7,loc_71BEC
0006CAE0                            
0006CAE0 1D7C 0080 000E             		move.b	#$80,$E(a6)
0006CAE6 7E02                       		moveq	#2,d7
0006CAE8                            
0006CAE8                            loc_71C04:
0006CAE8 DAFC 0030                  		adda.w	#$30,a5
0006CAEC 4A15                       		tst.b	(a5)
0006CAEE 6A00                       		bpl.s	loc_71C10
0006CAF0 4EBA 0000                  		jsr	sub_71CCA(pc)
0006CAF4                            
0006CAF4                            loc_71C10:
0006CAF4 51CF FFF2                  		dbf	d7,loc_71C04
0006CAF8                            
0006CAF8 7E02                       		moveq	#2,d7
0006CAFA                            
0006CAFA                            loc_71C16:
0006CAFA DAFC 0030                  		adda.w	#$30,a5
0006CAFE 4A15                       		tst.b	(a5)
0006CB00 6A00                       		bpl.s	loc_71C22
0006CB02 4EBA 0000                  		jsr	sub_72850(pc)
0006CB06                            
0006CB06                            loc_71C22:
0006CB06 51CF FFF2                  		dbf	d7,loc_71C16
0006CB0A 1D7C 0040 000E             		move.b	#$40,$E(a6)
0006CB10 DAFC 0030                  		adda.w	#$30,a5
0006CB14 4A15                       		tst.b	(a5)
0006CB16 6A00                       		bpl.s	loc_71C38
0006CB18 4EBA 0000                  		jsr	sub_71CCA(pc)
0006CB1C                            
0006CB1C                            loc_71C38:
0006CB1C DAFC 0030                  		adda.w	#$30,a5
0006CB20 4A15                       		tst.b	(a5)
0006CB22 6A00                       		bpl.s	loc_71C44
0006CB24 4EBA 0000                  		jsr	sub_72850(pc)
0006CB28                            
0006CB28                            loc_71C44:
0006CB28 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0006CB30 4E75                       		rts	
0006CB32                            ; End of function sub_71B4C
0006CB32                            
0006CB32                            
0006CB32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CB32                            
0006CB32                            
0006CB32                            sub_71C4E:				; XREF: sub_71B4C
0006CB32 532D 000E                  		subq.b	#1,$E(a5)
0006CB36 6600                       		bne.s	locret_71CAA
0006CB38 1D7C 0080 0008             		move.b	#$80,8(a6)
0006CB3E 286D 0004                  		movea.l	4(a5),a4
0006CB42                            
0006CB42                            loc_71C5E:
0006CB42 7A00                       		moveq	#0,d5
0006CB44 1A1C                       		move.b	(a4)+,d5
0006CB46 0C05 00E0                  		cmpi.b	#-$20,d5
0006CB4A 6500                       		bcs.s	loc_71C6E
0006CB4C 4EBA 0000                  		jsr	sub_72A5A(pc)
0006CB50 60F0                       		bra.s	loc_71C5E
0006CB52                            ; ===========================================================================
0006CB52                            
0006CB52                            loc_71C6E:
0006CB52 4A05                       		tst.b	d5
0006CB54 6A00                       		bpl.s	loc_71C84
0006CB56 1B45 0010                  		move.b	d5,$10(a5)
0006CB5A 1A1C                       		move.b	(a4)+,d5
0006CB5C 6A00                       		bpl.s	loc_71C84
0006CB5E 534C                       		subq.w	#1,a4
0006CB60 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0006CB66 6000                       		bra.s	loc_71C88
0006CB68                            ; ===========================================================================
0006CB68                            
0006CB68                            loc_71C84:
0006CB68 4EBA 0000                  		jsr	sub_71D40(pc)
0006CB6C                            
0006CB6C                            loc_71C88:
0006CB6C 2B4C 0004                  		move.l	a4,4(a5)
0006CB70 0815 0002                  		btst	#2,(a5)
0006CB74 6600                       		bne.s	locret_71CAA
0006CB76 7000                       		moveq	#0,d0
0006CB78 102D 0010                  		move.b	$10(a5),d0
0006CB7C 0C00 0080                  		cmpi.b	#$80,d0
0006CB80 6700                       		beq.s	locret_71CAA
0006CB82 0800 0003                  		btst	#3,d0
0006CB86 6600                       		bne.s	loc_71CAC
0006CB88 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0006CB8E                            
0006CB8E                            locret_71CAA:
0006CB8E 4E75                       		rts	
0006CB90                            ; ===========================================================================
0006CB90                            
0006CB90                            loc_71CAC:
0006CB90 0400 0088                  		subi.b	#$88,d0
0006CB94 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0006CB98 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0006CB9E 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0006CBA6 4E75                       		rts	
0006CBA8                            ; End of function sub_71C4E
0006CBA8                            
0006CBA8                            ; ===========================================================================
0006CBA8 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0006CBAE                            
0006CBAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CBAE                            
0006CBAE                            
0006CBAE                            sub_71CCA:				; XREF: sub_71B4C
0006CBAE 532D 000E                  		subq.b	#1,$E(a5)
0006CBB2 6600                       		bne.s	loc_71CE0
0006CBB4 0895 0004                  		bclr	#4,(a5)
0006CBB8 4EBA 0000                  		jsr	sub_71CEC(pc)
0006CBBC 4EBA 0000                  		jsr	sub_71E18(pc)
0006CBC0 6000 0000                  		bra.w	loc_726E2
0006CBC4                            ; ===========================================================================
0006CBC4                            
0006CBC4                            loc_71CE0:
0006CBC4 4EBA 0000                  		jsr	sub_71D9E(pc)
0006CBC8 4EBA 0000                  		jsr	sub_71DC6(pc)
0006CBCC 6000 0000                  		bra.w	loc_71E24
0006CBD0                            ; End of function sub_71CCA
0006CBD0                            
0006CBD0                            
0006CBD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CBD0                            
0006CBD0                            
0006CBD0                            sub_71CEC:				; XREF: sub_71CCA
0006CBD0 286D 0004                  		movea.l	4(a5),a4
0006CBD4 0895 0001                  		bclr	#1,(a5)
0006CBD8                            
0006CBD8                            loc_71CF4:
0006CBD8 7A00                       		moveq	#0,d5
0006CBDA 1A1C                       		move.b	(a4)+,d5
0006CBDC 0C05 00E0                  		cmpi.b	#-$20,d5
0006CBE0 6500                       		bcs.s	loc_71D04
0006CBE2 4EBA 0000                  		jsr	sub_72A5A(pc)
0006CBE6 60F0                       		bra.s	loc_71CF4
0006CBE8                            ; ===========================================================================
0006CBE8                            
0006CBE8                            loc_71D04:
0006CBE8 4EBA 0000                  		jsr	sub_726FE(pc)
0006CBEC 4A05                       		tst.b	d5
0006CBEE 6A00                       		bpl.s	loc_71D1A
0006CBF0 4EBA 0000                  		jsr	sub_71D22(pc)
0006CBF4 1A1C                       		move.b	(a4)+,d5
0006CBF6 6A00                       		bpl.s	loc_71D1A
0006CBF8 534C                       		subq.w	#1,a4
0006CBFA 6000 0000                  		bra.w	sub_71D60
0006CBFE                            ; ===========================================================================
0006CBFE                            
0006CBFE                            loc_71D1A:
0006CBFE 4EBA 0000                  		jsr	sub_71D40(pc)
0006CC02 6000 0000                  		bra.w	sub_71D60
0006CC06                            ; End of function sub_71CEC
0006CC06                            
0006CC06                            
0006CC06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CC06                            
0006CC06                            
0006CC06                            sub_71D22:				; XREF: sub_71CEC
0006CC06 0405 0080                  		subi.b	#$80,d5
0006CC0A 6700                       		beq.s	loc_71D58
0006CC0C DA2D 0008                  		add.b	8(a5),d5
0006CC10 0245 007F                  		andi.w	#$7F,d5
0006CC14 E34D                       		lsl.w	#1,d5
0006CC16 41FA 0000                  		lea	word_72790(pc),a0
0006CC1A 3C30 5000                  		move.w	(a0,d5.w),d6
0006CC1E 3B46 0010                  		move.w	d6,$10(a5)
0006CC22 4E75                       		rts	
0006CC24                            ; End of function sub_71D22
0006CC24                            
0006CC24                            
0006CC24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CC24                            
0006CC24                            
0006CC24                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0006CC24 1005                       		move.b	d5,d0
0006CC26 122D 0002                  		move.b	2(a5),d1
0006CC2A                            
0006CC2A                            loc_71D46:
0006CC2A 5301                       		subq.b	#1,d1
0006CC2C 6700                       		beq.s	loc_71D4E
0006CC2E D005                       		add.b	d5,d0
0006CC30 60F8                       		bra.s	loc_71D46
0006CC32                            ; ===========================================================================
0006CC32                            
0006CC32                            loc_71D4E:
0006CC32 1B40 000F                  		move.b	d0,$F(a5)
0006CC36 1B40 000E                  		move.b	d0,$E(a5)
0006CC3A 4E75                       		rts	
0006CC3C                            ; End of function sub_71D40
0006CC3C                            
0006CC3C                            ; ===========================================================================
0006CC3C                            
0006CC3C                            loc_71D58:				; XREF: sub_71D22
0006CC3C 08D5 0001                  		bset	#1,(a5)
0006CC40 426D 0010                  		clr.w	$10(a5)
0006CC44                            
0006CC44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CC44                            
0006CC44                            
0006CC44                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0006CC44 2B4C 0004                  		move.l	a4,4(a5)
0006CC48 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0006CC4E 0815 0004                  		btst	#4,(a5)
0006CC52 6600                       		bne.s	locret_71D9C
0006CC54 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0006CC5A 422D 000C                  		clr.b	$C(a5)
0006CC5E 0815 0003                  		btst	#3,(a5)
0006CC62 6700                       		beq.s	locret_71D9C
0006CC64 206D 0014                  		movea.l	$14(a5),a0
0006CC68 1B58 0018                  		move.b	(a0)+,$18(a5)
0006CC6C 1B58 0019                  		move.b	(a0)+,$19(a5)
0006CC70 1B58 001A                  		move.b	(a0)+,$1A(a5)
0006CC74 1018                       		move.b	(a0)+,d0
0006CC76 E208                       		lsr.b	#1,d0
0006CC78 1B40 001B                  		move.b	d0,$1B(a5)
0006CC7C 426D 001C                  		clr.w	$1C(a5)
0006CC80                            
0006CC80                            locret_71D9C:
0006CC80 4E75                       		rts	
0006CC82                            ; End of function sub_71D60
0006CC82                            
0006CC82                            
0006CC82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CC82                            
0006CC82                            
0006CC82                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0006CC82 4A2D 0012                  		tst.b	$12(a5)
0006CC86 6700                       		beq.s	locret_71DC4
0006CC88 532D 0012                  		subq.b	#1,$12(a5)
0006CC8C 6600                       		bne.s	locret_71DC4
0006CC8E 08D5 0001                  		bset	#1,(a5)
0006CC92 4A2D 0001                  		tst.b	1(a5)
0006CC96 6B00 0000                  		bmi.w	loc_71DBE
0006CC9A 4EBA 0000                  		jsr	sub_726FE(pc)
0006CC9E 584F                       		addq.w	#4,sp
0006CCA0 4E75                       		rts	
0006CCA2                            ; ===========================================================================
0006CCA2                            
0006CCA2                            loc_71DBE:
0006CCA2 4EBA 0000                  		jsr	sub_729A0(pc)
0006CCA6 584F                       		addq.w	#4,sp
0006CCA8                            
0006CCA8                            locret_71DC4:
0006CCA8 4E75                       		rts	
0006CCAA                            ; End of function sub_71D9E
0006CCAA                            
0006CCAA                            
0006CCAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CCAA                            
0006CCAA                            
0006CCAA                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0006CCAA 584F                       		addq.w	#4,sp
0006CCAC 0815 0003                  		btst	#3,(a5)
0006CCB0 6700                       		beq.s	locret_71E16
0006CCB2 4A2D 0018                  		tst.b	$18(a5)
0006CCB6 6700                       		beq.s	loc_71DDA
0006CCB8 532D 0018                  		subq.b	#1,$18(a5)
0006CCBC 4E75                       		rts	
0006CCBE                            ; ===========================================================================
0006CCBE                            
0006CCBE                            loc_71DDA:
0006CCBE 532D 0019                  		subq.b	#1,$19(a5)
0006CCC2 6700                       		beq.s	loc_71DE2
0006CCC4 4E75                       		rts	
0006CCC6                            ; ===========================================================================
0006CCC6                            
0006CCC6                            loc_71DE2:
0006CCC6 206D 0014                  		movea.l	$14(a5),a0
0006CCCA 1B68 0001 0019             		move.b	1(a0),$19(a5)
0006CCD0 4A2D 001B                  		tst.b	$1B(a5)
0006CCD4 6600                       		bne.s	loc_71DFE
0006CCD6 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0006CCDC 442D 001A                  		neg.b	$1A(a5)
0006CCE0 4E75                       		rts	
0006CCE2                            ; ===========================================================================
0006CCE2                            
0006CCE2                            loc_71DFE:
0006CCE2 532D 001B                  		subq.b	#1,$1B(a5)
0006CCE6 1C2D 001A                  		move.b	$1A(a5),d6
0006CCEA 4886                       		ext.w	d6
0006CCEC DC6D 001C                  		add.w	$1C(a5),d6
0006CCF0 3B46 001C                  		move.w	d6,$1C(a5)
0006CCF4 DC6D 0010                  		add.w	$10(a5),d6
0006CCF8 594F                       		subq.w	#4,sp
0006CCFA                            
0006CCFA                            locret_71E16:
0006CCFA 4E75                       		rts	
0006CCFC                            ; End of function sub_71DC6
0006CCFC                            
0006CCFC                            
0006CCFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CCFC                            
0006CCFC                            
0006CCFC                            sub_71E18:				; XREF: sub_71CCA
0006CCFC 0815 0001                  		btst	#1,(a5)
0006CD00 6600                       		bne.s	locret_71E48
0006CD02 3C2D 0010                  		move.w	$10(a5),d6
0006CD06 6700                       		beq.s	loc_71E4A
0006CD08                            
0006CD08                            loc_71E24:				; XREF: sub_71CCA
0006CD08 102D 001E                  		move.b	$1E(a5),d0
0006CD0C 4880                       		ext.w	d0
0006CD0E DC40                       		add.w	d0,d6
0006CD10 0815 0002                  		btst	#2,(a5)
0006CD14 6600                       		bne.s	locret_71E48
0006CD16 3206                       		move.w	d6,d1
0006CD18 E049                       		lsr.w	#8,d1
0006CD1A 103C 00A4                  		move.b	#-$5C,d0
0006CD1E 4EBA 0000                  		jsr	sub_72722(pc)
0006CD22 1206                       		move.b	d6,d1
0006CD24 103C 00A0                  		move.b	#-$60,d0
0006CD28 4EBA 0000                  		jsr	sub_72722(pc)
0006CD2C                            
0006CD2C                            locret_71E48:
0006CD2C 4E75                       		rts	
0006CD2E                            ; ===========================================================================
0006CD2E                            
0006CD2E                            loc_71E4A:
0006CD2E 08D5 0001                  		bset	#1,(a5)
0006CD32 4E75                       		rts	
0006CD34                            ; End of function sub_71E18
0006CD34                            
0006CD34                            ; ===========================================================================
0006CD34                            
0006CD34                            loc_71E50:				; XREF: sub_71B4C
0006CD34 6B00                       		bmi.s	loc_71E94
0006CD36 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0006CD3C 6700 0000                  		beq.w	loc_71EFE
0006CD40 1D7C 0002 0003             		move.b	#2,3(a6)
0006CD46 7602                       		moveq	#2,d3
0006CD48 103C 00B4                  		move.b	#-$4C,d0
0006CD4C 7200                       		moveq	#0,d1
0006CD4E                            
0006CD4E                            loc_71E6A:
0006CD4E 4EBA 0000                  		jsr	sub_7272E(pc)
0006CD52 4EBA 0000                  		jsr	sub_72764(pc)
0006CD56 5200                       		addq.b	#1,d0
0006CD58 51CB FFF4                  		dbf	d3,loc_71E6A
0006CD5C                            
0006CD5C 7602                       		moveq	#2,d3
0006CD5E 7028                       		moveq	#$28,d0
0006CD60                            
0006CD60                            loc_71E7C:
0006CD60 1203                       		move.b	d3,d1
0006CD62 4EBA 0000                  		jsr	sub_7272E(pc)
0006CD66 5801                       		addq.b	#4,d1
0006CD68 4EBA 0000                  		jsr	sub_7272E(pc)
0006CD6C 51CB FFF2                  		dbf	d3,loc_71E7C
0006CD70                            
0006CD70 4EBA 0000                  		jsr	sub_729B6(pc)
0006CD74 6000 FDB2                  		bra.w	loc_71C44
0006CD78                            ; ===========================================================================
0006CD78                            
0006CD78                            loc_71E94:				; XREF: loc_71E50
0006CD78 422E 0003                  		clr.b	3(a6)
0006CD7C 7630                       		moveq	#$30,d3
0006CD7E 4BEE 0040                  		lea	$40(a6),a5
0006CD82 7806                       		moveq	#6,d4
0006CD84                            
0006CD84                            loc_71EA0:
0006CD84 0815 0007                  		btst	#7,(a5)
0006CD88 6700                       		beq.s	loc_71EB8
0006CD8A 0815 0002                  		btst	#2,(a5)
0006CD8E 6600                       		bne.s	loc_71EB8
0006CD90 103C 00B4                  		move.b	#-$4C,d0
0006CD94 122D 000A                  		move.b	$A(a5),d1
0006CD98 4EBA 0000                  		jsr	sub_72722(pc)
0006CD9C                            
0006CD9C                            loc_71EB8:
0006CD9C DAC3                       		adda.w	d3,a5
0006CD9E 51CC FFE4                  		dbf	d4,loc_71EA0
0006CDA2                            
0006CDA2 4BEE 0220                  		lea	$220(a6),a5
0006CDA6 7802                       		moveq	#2,d4
0006CDA8                            
0006CDA8                            loc_71EC4:
0006CDA8 0815 0007                  		btst	#7,(a5)
0006CDAC 6700                       		beq.s	loc_71EDC
0006CDAE 0815 0002                  		btst	#2,(a5)
0006CDB2 6600                       		bne.s	loc_71EDC
0006CDB4 103C 00B4                  		move.b	#-$4C,d0
0006CDB8 122D 000A                  		move.b	$A(a5),d1
0006CDBC 4EBA 0000                  		jsr	sub_72722(pc)
0006CDC0                            
0006CDC0                            loc_71EDC:
0006CDC0 DAC3                       		adda.w	d3,a5
0006CDC2 51CC FFE4                  		dbf	d4,loc_71EC4
0006CDC6                            
0006CDC6 4BEE 0340                  		lea	$340(a6),a5
0006CDCA 0815 0007                  		btst	#7,(a5)
0006CDCE 6700                       		beq.s	loc_71EFE
0006CDD0 0815 0002                  		btst	#2,(a5)
0006CDD4 6600                       		bne.s	loc_71EFE
0006CDD6 103C 00B4                  		move.b	#-$4C,d0
0006CDDA 122D 000A                  		move.b	$A(a5),d1
0006CDDE 4EBA 0000                  		jsr	sub_72722(pc)
0006CDE2                            
0006CDE2                            loc_71EFE:
0006CDE2 6000 FD44                  		bra.w	loc_71C44
0006CDE6                            
0006CDE6                            ; ---------------------------------------------------------------------------
0006CDE6                            ; Subroutine to	play a sound or	music track
0006CDE6                            ; ---------------------------------------------------------------------------
0006CDE6                            
0006CDE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CDE6                            
0006CDE6                            
0006CDE6                            Sound_Play:				; XREF: sub_71B4C
0006CDE6 2079 0006 C874             		movea.l	(Go_SoundTypes).l,a0
0006CDEC 43EE 000A                  		lea	$A(a6),a1	; load music track number
0006CDF0 1616                       		move.b	0(a6),d3
0006CDF2 7802                       		moveq	#2,d4
0006CDF4                            
0006CDF4                            loc_71F12:
0006CDF4 1011                       		move.b	(a1),d0		; move track number to d0
0006CDF6 1200                       		move.b	d0,d1
0006CDF8 4219                       		clr.b	(a1)+
0006CDFA 0400 0081                  		subi.b	#$81,d0
0006CDFE 6500                       		bcs.s	loc_71F3E
0006CE00 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0006CE06 6700                       		beq.s	loc_71F2C
0006CE08 1D41 000A                  		move.b	d1,$A(a6)
0006CE0C 6000                       		bra.s	loc_71F3E
0006CE0E                            ; ===========================================================================
0006CE0E                            
0006CE0E                            loc_71F2C:
0006CE0E 0240 007F                  		andi.w	#$7F,d0
0006CE12 1430 0000                  		move.b	(a0,d0.w),d2
0006CE16 B403                       		cmp.b	d3,d2
0006CE18 6500                       		bcs.s	loc_71F3E
0006CE1A 1602                       		move.b	d2,d3
0006CE1C 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0006CE20                            
0006CE20                            loc_71F3E:
0006CE20 51CC FFD2                  		dbf	d4,loc_71F12
0006CE24                            
0006CE24 4A03                       		tst.b	d3
0006CE26 6B00                       		bmi.s	locret_71F4A
0006CE28 1C83                       		move.b	d3,0(a6)
0006CE2A                            
0006CE2A                            locret_71F4A:
0006CE2A 4E75                       		rts	
0006CE2C                            ; End of function Sound_Play
0006CE2C                            
0006CE2C                            
0006CE2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CE2C                            
0006CE2C                            
0006CE2C                            Sound_ChkValue:				; XREF: sub_71B4C
0006CE2C 7E00                       		moveq	#0,d7
0006CE2E 1E2E 0009                  		move.b	9(a6),d7
0006CE32 6700 0000                  		beq.w	Sound_E4
0006CE36 6A00                       		bpl.s	locret_71F8C
0006CE38 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0006CE3E 0C07 009F                  		cmpi.b	#$9F,d7
0006CE42 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0006CE46 0C07 00A0                  		cmpi.b	#$A0,d7
0006CE4A 6500 0000                  		bcs.w	locret_71F8C
0006CE4E 0C07 00CF                  		cmpi.b	#$CF,d7
0006CE52 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0006CE56 0C07 00D0                  		cmpi.b	#$D0,d7
0006CE5A 6500 0000                  		bcs.w	locret_71F8C
0006CE5E 0C07 00E0                  		cmpi.b	#$E0,d7
0006CE62 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0006CE66 0C07 00E4                  		cmpi.b	#$E4,d7
0006CE6A 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
0006CE6C                            
0006CE6C                            locret_71F8C:
0006CE6C 4E75                       		rts	
0006CE6E                            ; ===========================================================================
0006CE6E                            
0006CE6E                            Sound_E0toE4:				; XREF: Sound_ChkValue
0006CE6E 0407 00E0                  		subi.b	#$E0,d7
0006CE72 E54F                       		lsl.w	#2,d7
0006CE74 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0006CE78                            ; ===========================================================================
0006CE78                            
0006CE78                            Sound_ExIndex:
0006CE78 6000 0000                  		bra.w	Sound_E0
0006CE7C                            ; ===========================================================================
0006CE7C 6000 0000                  		bra.w	Sound_E1
0006CE80                            ; ===========================================================================
0006CE80 6000 0000                  		bra.w	Sound_E2
0006CE84                            ; ===========================================================================
0006CE84 6000 0000                  		bra.w	Sound_E3
0006CE88                            ; ===========================================================================
0006CE88 6000 0000                  		bra.w	Sound_E4
0006CE8C                            ; ===========================================================================
0006CE8C                            ; ---------------------------------------------------------------------------
0006CE8C                            ; Play "Say-gaa" PCM sound
0006CE8C                            ; ---------------------------------------------------------------------------
0006CE8C                            
0006CE8C                            Sound_E1:				  
0006CE8C 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0006CE92 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0006CE98 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0006CEA0                            PlayPCM_Loop:	  
0006CEA0 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0006CEA6 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0006CEAA 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0006CEAE 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0006CEB0 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0006CEB2 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0006CEB6 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0006CEBC 4EB8 11F4                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0006CEC0 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0006CEC6 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0006CEC8 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0006CECA                            return_PlayPCM: 
0006CECA 584F                       		addq.w	#4,sp 
0006CECC 4E75                       		rts
0006CECE                            ; ===========================================================================
0006CECE                            ; ---------------------------------------------------------------------------
0006CECE                            ; Play music track $81-$9F
0006CECE                            ; ---------------------------------------------------------------------------
0006CECE                            
0006CECE                            Sound_81to9F:				; XREF: Sound_ChkValue
0006CECE 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0006CED2 6600                       		bne.s	loc_72024	; if not, branch
0006CED4 4A2E 0027                  		tst.b	$27(a6)
0006CED8 6600 0000                  		bne.w	loc_721B6
0006CEDC 4BEE 0040                  		lea	$40(a6),a5
0006CEE0 7009                       		moveq	#9,d0
0006CEE2                            
0006CEE2                            loc_71FE6:
0006CEE2 0895 0002                  		bclr	#2,(a5)
0006CEE6 DAFC 0030                  		adda.w	#$30,a5
0006CEEA 51C8 FFF6                  		dbf	d0,loc_71FE6
0006CEEE                            
0006CEEE 4BEE 0220                  		lea	$220(a6),a5
0006CEF2 7005                       		moveq	#5,d0
0006CEF4                            
0006CEF4                            loc_71FF8:
0006CEF4 0895 0007                  		bclr	#7,(a5)
0006CEF8 DAFC 0030                  		adda.w	#$30,a5
0006CEFC 51C8 FFF6                  		dbf	d0,loc_71FF8
0006CF00 4216                       		clr.b	0(a6)
0006CF02 204E                       		movea.l	a6,a0
0006CF04 43EE 03A0                  		lea	$3A0(a6),a1
0006CF08 303C 0087                  		move.w	#$87,d0
0006CF0C                            
0006CF0C                            loc_72012:
0006CF0C 22D8                       		move.l	(a0)+,(a1)+
0006CF0E 51C8 FFFC                  		dbf	d0,loc_72012
0006CF12                            
0006CF12 1D7C 0080 0027             		move.b	#$80,$27(a6)
0006CF18 4216                       		clr.b	0(a6)
0006CF1A 6000                       		bra.s	loc_7202C
0006CF1C                            ; ===========================================================================
0006CF1C                            
0006CF1C                            loc_72024:
0006CF1C 422E 0027                  		clr.b	$27(a6)
0006CF20 422E 0026                  		clr.b	$26(a6)
0006CF24                            
0006CF24                            loc_7202C:
0006CF24 4EBA 0000                  		jsr	sub_725CA(pc)
0006CF28 2879 0006 C884             		movea.l	(off_719A0).l,a4
0006CF2E 0407 0081                  		subi.b	#$81,d7
0006CF32 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0006CF38 2879 0006 C87C             		movea.l	(Go_MusicIndex).l,a4
0006CF3E E54F                       		lsl.w	#2,d7
0006CF40 2874 7000                  		movea.l	(a4,d7.w),a4
0006CF44 7000                       		moveq	#0,d0
0006CF46 3014                       		move.w	(a4),d0
0006CF48 D08C                       		add.l	a4,d0
0006CF4A 2D40 0018                  		move.l	d0,$18(a6)
0006CF4E 102C 0005                  		move.b	5(a4),d0
0006CF52 1D40 0028                  		move.b	d0,$28(a6)
0006CF56 4A2E 002A                  		tst.b	$2A(a6)
0006CF5A 6700                       		beq.s	loc_72068
0006CF5C 102E 0029                  		move.b	$29(a6),d0
0006CF60                            
0006CF60                            loc_72068:
0006CF60 1D40 0002                  		move.b	d0,2(a6)
0006CF64 1D40 0001                  		move.b	d0,1(a6)
0006CF68 7200                       		moveq	#0,d1
0006CF6A 264C                       		movea.l	a4,a3
0006CF6C 5C4C                       		addq.w	#6,a4
0006CF6E 7E00                       		moveq	#0,d7
0006CF70 1E2B 0002                  		move.b	2(a3),d7
0006CF74 6700 0000                  		beq.w	loc_72114
0006CF78 5307                       		subq.b	#1,d7
0006CF7A 123C 00C0                  		move.b	#-$40,d1
0006CF7E 182B 0004                  		move.b	4(a3),d4
0006CF82 7C30                       		moveq	#$30,d6
0006CF84 1A3C 0001                  		move.b	#1,d5
0006CF88 43EE 0040                  		lea	$40(a6),a1
0006CF8C 45FA 0000                  		lea	byte_721BA(pc),a2
0006CF90                            
0006CF90                            loc_72098:
0006CF90 08D1 0007                  		bset	#7,(a1)
0006CF94 135A 0001                  		move.b	(a2)+,1(a1)
0006CF98 1344 0002                  		move.b	d4,2(a1)
0006CF9C 1346 000D                  		move.b	d6,$D(a1)
0006CFA0 1341 000A                  		move.b	d1,$A(a1)
0006CFA4 1345 000E                  		move.b	d5,$E(a1)
0006CFA8 7000                       		moveq	#0,d0
0006CFAA 301C                       		move.w	(a4)+,d0
0006CFAC D08B                       		add.l	a3,d0
0006CFAE 2340 0004                  		move.l	d0,4(a1)
0006CFB2 335C 0008                  		move.w	(a4)+,8(a1)
0006CFB6 D2C6                       		adda.w	d6,a1
0006CFB8 51CF FFD6                  		dbf	d7,loc_72098
0006CFBC 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0006CFC2 6600                       		bne.s	loc_720D8
0006CFC4 702B                       		moveq	#$2B,d0
0006CFC6 7200                       		moveq	#0,d1
0006CFC8 4EBA 0000                  		jsr	sub_7272E(pc)
0006CFCC 6000 0000                  		bra.w	loc_72114
0006CFD0                            ; ===========================================================================
0006CFD0                            
0006CFD0                            loc_720D8:
0006CFD0 7028                       		moveq	#$28,d0
0006CFD2 7206                       		moveq	#6,d1
0006CFD4 4EBA 0000                  		jsr	sub_7272E(pc)
0006CFD8 103C 0042                  		move.b	#$42,d0
0006CFDC 727F                       		moveq	#$7F,d1
0006CFDE 4EBA 0000                  		jsr	sub_72764(pc)
0006CFE2 103C 004A                  		move.b	#$4A,d0
0006CFE6 727F                       		moveq	#$7F,d1
0006CFE8 4EBA 0000                  		jsr	sub_72764(pc)
0006CFEC 103C 0046                  		move.b	#$46,d0
0006CFF0 727F                       		moveq	#$7F,d1
0006CFF2 4EBA 0000                  		jsr	sub_72764(pc)
0006CFF6 103C 004E                  		move.b	#$4E,d0
0006CFFA 727F                       		moveq	#$7F,d1
0006CFFC 4EBA 0000                  		jsr	sub_72764(pc)
0006D000 103C 00B6                  		move.b	#-$4A,d0
0006D004 123C 00C0                  		move.b	#-$40,d1
0006D008 4EBA 0000                  		jsr	sub_72764(pc)
0006D00C                            
0006D00C                            loc_72114:
0006D00C 7E00                       		moveq	#0,d7
0006D00E 1E2B 0003                  		move.b	3(a3),d7
0006D012 6700                       		beq.s	loc_72154
0006D014 5307                       		subq.b	#1,d7
0006D016 43EE 0190                  		lea	$190(a6),a1
0006D01A 45FA 0000                  		lea	byte_721C2(pc),a2
0006D01E                            
0006D01E                            loc_72126:
0006D01E 08D1 0007                  		bset	#7,(a1)
0006D022 135A 0001                  		move.b	(a2)+,1(a1)
0006D026 1344 0002                  		move.b	d4,2(a1)
0006D02A 1346 000D                  		move.b	d6,$D(a1)
0006D02E 1345 000E                  		move.b	d5,$E(a1)
0006D032 7000                       		moveq	#0,d0
0006D034 301C                       		move.w	(a4)+,d0
0006D036 D08B                       		add.l	a3,d0
0006D038 2340 0004                  		move.l	d0,4(a1)
0006D03C 335C 0008                  		move.w	(a4)+,8(a1)
0006D040 101C                       		move.b	(a4)+,d0
0006D042 135C 000B                  		move.b	(a4)+,$B(a1)
0006D046 D2C6                       		adda.w	d6,a1
0006D048 51CF FFD4                  		dbf	d7,loc_72126
0006D04C                            
0006D04C                            loc_72154:
0006D04C 43EE 0220                  		lea	$220(a6),a1
0006D050 7E05                       		moveq	#5,d7
0006D052                            
0006D052                            loc_7215A:
0006D052 4A11                       		tst.b	(a1)
0006D054 6A00 0000                  		bpl.w	loc_7217C
0006D058 7000                       		moveq	#0,d0
0006D05A 1029 0001                  		move.b	1(a1),d0
0006D05E 6B00                       		bmi.s	loc_7216E
0006D060 5500                       		subq.b	#2,d0
0006D062 E508                       		lsl.b	#2,d0
0006D064 6000                       		bra.s	loc_72170
0006D066                            ; ===========================================================================
0006D066                            
0006D066                            loc_7216E:
0006D066 E608                       		lsr.b	#3,d0
0006D068                            
0006D068                            loc_72170:
0006D068 41FA 0000                  		lea	dword_722CC(pc),a0
0006D06C 2070 0000                  		movea.l	(a0,d0.w),a0
0006D070 08D0 0002                  		bset	#2,(a0)
0006D074                            
0006D074                            loc_7217C:
0006D074 D2C6                       		adda.w	d6,a1
0006D076 51CF FFDA                  		dbf	d7,loc_7215A
0006D07A                            
0006D07A 4A6E 0340                  		tst.w	$340(a6)
0006D07E 6A00                       		bpl.s	loc_7218E
0006D080 08EE 0002 0100             		bset	#2,$100(a6)
0006D086                            
0006D086                            loc_7218E:
0006D086 4A6E 0370                  		tst.w	$370(a6)
0006D08A 6A00                       		bpl.s	loc_7219A
0006D08C 08EE 0002 01F0             		bset	#2,$1F0(a6)
0006D092                            
0006D092                            loc_7219A:
0006D092 4BEE 0070                  		lea	$70(a6),a5
0006D096 7805                       		moveq	#5,d4
0006D098                            
0006D098                            loc_721A0:
0006D098 4EBA 0000                  		jsr	sub_726FE(pc)
0006D09C DAC6                       		adda.w	d6,a5
0006D09E 51CC FFF8                  		dbf	d4,loc_721A0
0006D0A2 7802                       		moveq	#2,d4
0006D0A4                            
0006D0A4                            loc_721AC:
0006D0A4 4EBA 0000                  		jsr	sub_729A0(pc)
0006D0A8 DAC6                       		adda.w	d6,a5
0006D0AA 51CC FFF8                  		dbf	d4,loc_721AC
0006D0AE                            
0006D0AE                            loc_721B6:
0006D0AE 584F                       		addq.w	#4,sp
0006D0B0 4E75                       		rts	
0006D0B2                            ; ===========================================================================
0006D0B2 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0006D0BA                            		even
0006D0BA 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0006D0BE                            		even
0006D0BE                            ; ===========================================================================
0006D0BE                            ; ---------------------------------------------------------------------------
0006D0BE                            ; Play normal sound effect
0006D0BE                            ; ---------------------------------------------------------------------------
0006D0BE                            
0006D0BE                            Sound_A0toCF:				; XREF: Sound_ChkValue
0006D0BE 4A2E 0027                  		tst.b	$27(a6)
0006D0C2 6600 0000                  		bne.w	loc_722C6
0006D0C6 4A2E 0004                  		tst.b	4(a6)
0006D0CA 6600 0000                  		bne.w	loc_722C6
0006D0CE 4A2E 0024                  		tst.b	$24(a6)
0006D0D2 6600 0000                  		bne.w	loc_722C6
0006D0D6 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0006D0DA 6600                       		bne.s	Sound_notB5	; if not, branch
0006D0DC 4A2E 002B                  		tst.b	$2B(a6)
0006D0E0 6600                       		bne.s	loc_721EE
0006D0E2 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0006D0E6                            
0006D0E6                            loc_721EE:
0006D0E6 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0006D0EC                            
0006D0EC                            Sound_notB5:
0006D0EC 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0006D0F0 6600                       		bne.s	Sound_notA7	; if not, branch
0006D0F2 4A2E 002C                  		tst.b	$2C(a6)
0006D0F6 6600 0000                  		bne.w	locret_722C4
0006D0FA 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0006D100                            
0006D100                            Sound_notA7:
0006D100 2079 0006 C880             		movea.l	(Go_SoundIndex).l,a0
0006D106 0407 00A0                  		subi.b	#$A0,d7
0006D10A E54F                       		lsl.w	#2,d7
0006D10C 2670 7000                  		movea.l	(a0,d7.w),a3
0006D110 224B                       		movea.l	a3,a1
0006D112 7200                       		moveq	#0,d1
0006D114 3219                       		move.w	(a1)+,d1
0006D116 D28B                       		add.l	a3,d1
0006D118 1A19                       		move.b	(a1)+,d5
0006D11A 1E19                       		move.b	(a1)+,d7
0006D11C 5307                       		subq.b	#1,d7
0006D11E 7C30                       		moveq	#$30,d6
0006D120                            
0006D120                            loc_72228:
0006D120 7600                       		moveq	#0,d3
0006D122 1629 0001                  		move.b	1(a1),d3
0006D126 1803                       		move.b	d3,d4
0006D128 6B00                       		bmi.s	loc_72244
0006D12A 5543                       		subq.w	#2,d3
0006D12C E54B                       		lsl.w	#2,d3
0006D12E 4BFA 0000                  		lea	dword_722CC(pc),a5
0006D132 2A75 3000                  		movea.l	(a5,d3.w),a5
0006D136 08D5 0002                  		bset	#2,(a5)
0006D13A 6000                       		bra.s	loc_7226E
0006D13C                            ; ===========================================================================
0006D13C                            
0006D13C                            loc_72244:
0006D13C E64B                       		lsr.w	#3,d3
0006D13E 4BFA 0000                  		lea	dword_722CC(pc),a5
0006D142 2A75 3000                  		movea.l	(a5,d3.w),a5
0006D146 08D5 0002                  		bset	#2,(a5)
0006D14A 0C04 00C0                  		cmpi.b	#$C0,d4
0006D14E 6600                       		bne.s	loc_7226E
0006D150 1004                       		move.b	d4,d0
0006D152 0000 001F                  		ori.b	#$1F,d0
0006D156 13C0 00C0 0011             		move.b	d0,($C00011).l
0006D15C 0840 0005                  		bchg	#5,d0
0006D160 13C0 00C0 0011             		move.b	d0,($C00011).l
0006D166                            
0006D166                            loc_7226E:
0006D166 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0006D16A 244D                       		movea.l	a5,a2
0006D16C 700B                       		moveq	#$B,d0
0006D16E                            
0006D16E                            loc_72276:
0006D16E 429A                       		clr.l	(a2)+
0006D170 51C8 FFFC                  		dbf	d0,loc_72276
0006D174                            
0006D174 3A99                       		move.w	(a1)+,(a5)
0006D176 1B45 0002                  		move.b	d5,2(a5)
0006D17A 7000                       		moveq	#0,d0
0006D17C 3019                       		move.w	(a1)+,d0
0006D17E D08B                       		add.l	a3,d0
0006D180 2B40 0004                  		move.l	d0,4(a5)
0006D184 3B59 0008                  		move.w	(a1)+,8(a5)
0006D188 1B7C 0001 000E             		move.b	#1,$E(a5)
0006D18E 1B46 000D                  		move.b	d6,$D(a5)
0006D192 4A04                       		tst.b	d4
0006D194 6B00                       		bmi.s	loc_722A8
0006D196 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0006D19C 2B41 0020                  		move.l	d1,$20(a5)
0006D1A0                            
0006D1A0                            loc_722A8:
0006D1A0 51CF FF7E                  		dbf	d7,loc_72228
0006D1A4                            
0006D1A4 4A2E 0250                  		tst.b	$250(a6)
0006D1A8 6A00                       		bpl.s	loc_722B8
0006D1AA 08EE 0002 0340             		bset	#2,$340(a6)
0006D1B0                            
0006D1B0                            loc_722B8:
0006D1B0 4A2E 0310                  		tst.b	$310(a6)
0006D1B4 6A00                       		bpl.s	locret_722C4
0006D1B6 08EE 0002 0370             		bset	#2,$370(a6)
0006D1BC                            
0006D1BC                            locret_722C4:
0006D1BC 4E75                       		rts	
0006D1BE                            ; ===========================================================================
0006D1BE                            
0006D1BE                            loc_722C6:
0006D1BE 4216                       		clr.b	0(a6)
0006D1C0 4E75                       		rts	
0006D1C2                            ; ===========================================================================
0006D1C2 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0006D1C6 0000 0000                  		dc.l 0
0006D1CA 00FF F100                  		dc.l $FFF100
0006D1CE 00FF F130                  		dc.l $FFF130
0006D1D2 00FF F190                  		dc.l $FFF190
0006D1D6 00FF F1C0                  		dc.l $FFF1C0
0006D1DA 00FF F1F0                  		dc.l $FFF1F0
0006D1DE 00FF F1F0                  		dc.l $FFF1F0
0006D1E2 00FF F220                  dword_722EC:	dc.l $FFF220
0006D1E6 0000 0000                  		dc.l 0
0006D1EA 00FF F250                  		dc.l $FFF250
0006D1EE 00FF F280                  		dc.l $FFF280
0006D1F2 00FF F2B0                  		dc.l $FFF2B0
0006D1F6 00FF F2E0                  		dc.l $FFF2E0
0006D1FA 00FF F310                  		dc.l $FFF310
0006D1FE 00FF F310                  		dc.l $FFF310
0006D202                            ; ===========================================================================
0006D202                            ; ---------------------------------------------------------------------------
0006D202                            ; Play GHZ waterfall sound
0006D202                            ; ---------------------------------------------------------------------------
0006D202                            
0006D202                            Sound_D0toDF:				; XREF: Sound_ChkValue
0006D202 4A2E 0027                  		tst.b	$27(a6)
0006D206 6600 0000                  		bne.w	locret_723C6
0006D20A 4A2E 0004                  		tst.b	4(a6)
0006D20E 6600 0000                  		bne.w	locret_723C6
0006D212 4A2E 0024                  		tst.b	$24(a6)
0006D216 6600 0000                  		bne.w	locret_723C6
0006D21A 2079 0006 C878             		movea.l	(Go_SoundD0).l,a0
0006D220 0407 00D0                  		subi.b	#$D0,d7
0006D224 E54F                       		lsl.w	#2,d7
0006D226 2670 7000                  		movea.l	(a0,d7.w),a3
0006D22A 224B                       		movea.l	a3,a1
0006D22C 7000                       		moveq	#0,d0
0006D22E 3019                       		move.w	(a1)+,d0
0006D230 D08B                       		add.l	a3,d0
0006D232 2D40 0020                  		move.l	d0,$20(a6)
0006D236 1A19                       		move.b	(a1)+,d5
0006D238 1E19                       		move.b	(a1)+,d7
0006D23A 5307                       		subq.b	#1,d7
0006D23C 7C30                       		moveq	#$30,d6
0006D23E                            
0006D23E                            loc_72348:
0006D23E 1829 0001                  		move.b	1(a1),d4
0006D242 6B00                       		bmi.s	loc_7235A
0006D244 08EE 0002 0100             		bset	#2,$100(a6)
0006D24A 4BEE 0340                  		lea	$340(a6),a5
0006D24E 6000                       		bra.s	loc_72364
0006D250                            ; ===========================================================================
0006D250                            
0006D250                            loc_7235A:
0006D250 08EE 0002 01F0             		bset	#2,$1F0(a6)
0006D256 4BEE 0370                  		lea	$370(a6),a5
0006D25A                            
0006D25A                            loc_72364:
0006D25A 244D                       		movea.l	a5,a2
0006D25C 700B                       		moveq	#$B,d0
0006D25E                            
0006D25E                            loc_72368:
0006D25E 429A                       		clr.l	(a2)+
0006D260 51C8 FFFC                  		dbf	d0,loc_72368
0006D264                            
0006D264 3A99                       		move.w	(a1)+,(a5)
0006D266 1B45 0002                  		move.b	d5,2(a5)
0006D26A 7000                       		moveq	#0,d0
0006D26C 3019                       		move.w	(a1)+,d0
0006D26E D08B                       		add.l	a3,d0
0006D270 2B40 0004                  		move.l	d0,4(a5)
0006D274 3B59 0008                  		move.w	(a1)+,8(a5)
0006D278 1B7C 0001 000E             		move.b	#1,$E(a5)
0006D27E 1B46 000D                  		move.b	d6,$D(a5)
0006D282 4A04                       		tst.b	d4
0006D284 6B00                       		bmi.s	loc_72396
0006D286 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0006D28C                            
0006D28C                            loc_72396:
0006D28C 51CF FFB0                  		dbf	d7,loc_72348
0006D290                            
0006D290 4A2E 0250                  		tst.b	$250(a6)
0006D294 6A00                       		bpl.s	loc_723A6
0006D296 08EE 0002 0340             		bset	#2,$340(a6)
0006D29C                            
0006D29C                            loc_723A6:
0006D29C 4A2E 0310                  		tst.b	$310(a6)
0006D2A0 6A00                       		bpl.s	locret_723C6
0006D2A2 08EE 0002 0370             		bset	#2,$370(a6)
0006D2A8 0004 001F                  		ori.b	#$1F,d4
0006D2AC 13C4 00C0 0011             		move.b	d4,($C00011).l
0006D2B2 0844 0005                  		bchg	#5,d4
0006D2B6 13C4 00C0 0011             		move.b	d4,($C00011).l
0006D2BC                            
0006D2BC                            locret_723C6:
0006D2BC 4E75                       		rts	
0006D2BE                            ; End of function Sound_ChkValue
0006D2BE                            
0006D2BE                            ; ===========================================================================
0006D2BE 00FF F100                  		dc.l $FFF100
0006D2C2 00FF F1F0                  		dc.l $FFF1F0
0006D2C6 00FF F250                  		dc.l $FFF250
0006D2CA 00FF F310                  		dc.l $FFF310
0006D2CE 00FF F340                  		dc.l $FFF340
0006D2D2 00FF F370                  		dc.l $FFF370
0006D2D6                            
0006D2D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D2D6                            
0006D2D6                            
0006D2D6                            Snd_FadeOut1:				; XREF: Sound_E0
0006D2D6 4216                       		clr.b	0(a6)
0006D2D8 4BEE 0220                  		lea	$220(a6),a5
0006D2DC 7E05                       		moveq	#5,d7
0006D2DE                            
0006D2DE                            loc_723EA:
0006D2DE 4A15                       		tst.b	(a5)
0006D2E0 6A00 0000                  		bpl.w	loc_72472
0006D2E4 0895 0007                  		bclr	#7,(a5)
0006D2E8 7600                       		moveq	#0,d3
0006D2EA 162D 0001                  		move.b	1(a5),d3
0006D2EE 6B00                       		bmi.s	loc_7243C
0006D2F0 4EBA 0000                  		jsr	sub_726FE(pc)
0006D2F4 0C03 0004                  		cmpi.b	#4,d3
0006D2F8 6600                       		bne.s	loc_72416
0006D2FA 4A2E 0340                  		tst.b	$340(a6)
0006D2FE 6A00                       		bpl.s	loc_72416
0006D300 4BEE 0340                  		lea	$340(a6),a5
0006D304 226E 0020                  		movea.l	$20(a6),a1
0006D308 6000                       		bra.s	loc_72428
0006D30A                            ; ===========================================================================
0006D30A                            
0006D30A                            loc_72416:
0006D30A 5503                       		subq.b	#2,d3
0006D30C E50B                       		lsl.b	#2,d3
0006D30E 41FA FEB2                  		lea	dword_722CC(pc),a0
0006D312 264D                       		movea.l	a5,a3
0006D314 2A70 3000                  		movea.l	(a0,d3.w),a5
0006D318 226E 0018                  		movea.l	$18(a6),a1
0006D31C                            
0006D31C                            loc_72428:
0006D31C 0895 0002                  		bclr	#2,(a5)
0006D320 08D5 0001                  		bset	#1,(a5)
0006D324 102D 000B                  		move.b	$B(a5),d0
0006D328 4EBA 0000                  		jsr	sub_72C4E(pc)
0006D32C 2A4B                       		movea.l	a3,a5
0006D32E 6000                       		bra.s	loc_72472
0006D330                            ; ===========================================================================
0006D330                            
0006D330                            loc_7243C:
0006D330 4EBA 0000                  		jsr	sub_729A0(pc)
0006D334 41EE 0370                  		lea	$370(a6),a0
0006D338 0C03 00E0                  		cmpi.b	#$E0,d3
0006D33C 6700                       		beq.s	loc_7245A
0006D33E 0C03 00C0                  		cmpi.b	#$C0,d3
0006D342 6700                       		beq.s	loc_7245A
0006D344 E60B                       		lsr.b	#3,d3
0006D346 41FA FE7A                  		lea	dword_722CC(pc),a0
0006D34A 2070 3000                  		movea.l	(a0,d3.w),a0
0006D34E                            
0006D34E                            loc_7245A:
0006D34E 0890 0002                  		bclr	#2,(a0)
0006D352 08D0 0001                  		bset	#1,(a0)
0006D356 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0006D35C 6600                       		bne.s	loc_72472
0006D35E 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0006D366                            
0006D366                            loc_72472:
0006D366 DAFC 0030                  		adda.w	#$30,a5
0006D36A 51CF FF72                  		dbf	d7,loc_723EA
0006D36E                            
0006D36E 4E75                       		rts	
0006D370                            ; End of function Snd_FadeOut1
0006D370                            
0006D370                            
0006D370                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D370                            
0006D370                            
0006D370                            Snd_FadeOut2:				; XREF: Sound_E0
0006D370 4BEE 0340                  		lea	$340(a6),a5
0006D374 4A15                       		tst.b	(a5)
0006D376 6A00                       		bpl.s	loc_724AE
0006D378 0895 0007                  		bclr	#7,(a5)
0006D37C 0815 0002                  		btst	#2,(a5)
0006D380 6600                       		bne.s	loc_724AE
0006D382 4EBA 0000                  		jsr	loc_7270A(pc)
0006D386 4BEE 0100                  		lea	$100(a6),a5
0006D38A 0895 0002                  		bclr	#2,(a5)
0006D38E 08D5 0001                  		bset	#1,(a5)
0006D392 4A15                       		tst.b	(a5)
0006D394 6A00                       		bpl.s	loc_724AE
0006D396 226E 0018                  		movea.l	$18(a6),a1
0006D39A 102D 000B                  		move.b	$B(a5),d0
0006D39E 4EBA 0000                  		jsr	sub_72C4E(pc)
0006D3A2                            
0006D3A2                            loc_724AE:
0006D3A2 4BEE 0370                  		lea	$370(a6),a5
0006D3A6 4A15                       		tst.b	(a5)
0006D3A8 6A00                       		bpl.s	locret_724E4
0006D3AA 0895 0007                  		bclr	#7,(a5)
0006D3AE 0815 0002                  		btst	#2,(a5)
0006D3B2 6600                       		bne.s	locret_724E4
0006D3B4 4EBA 0000                  		jsr	loc_729A6(pc)
0006D3B8 4BEE 01F0                  		lea	$1F0(a6),a5
0006D3BC 0895 0002                  		bclr	#2,(a5)
0006D3C0 08D5 0001                  		bset	#1,(a5)
0006D3C4 4A15                       		tst.b	(a5)
0006D3C6 6A00                       		bpl.s	locret_724E4
0006D3C8 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0006D3CE 6600                       		bne.s	locret_724E4
0006D3D0 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0006D3D8                            
0006D3D8                            locret_724E4:
0006D3D8 4E75                       		rts	
0006D3DA                            ; End of function Snd_FadeOut2
0006D3DA                            
0006D3DA                            ; ===========================================================================
0006D3DA                            ; ---------------------------------------------------------------------------
0006D3DA                            ; Fade out music
0006D3DA                            ; ---------------------------------------------------------------------------
0006D3DA                            
0006D3DA                            Sound_E0:				; XREF: Sound_ExIndex
0006D3DA 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0006D3DE 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0006D3E2 1D7C 0003 0006             		move.b	#3,6(a6)
0006D3E8 1D7C 0028 0004             		move.b	#$28,4(a6)
0006D3EE 422E 0040                  		clr.b	$40(a6)
0006D3F2 422E 002A                  		clr.b	$2A(a6)
0006D3F6 4E75                       		rts	
0006D3F8                            
0006D3F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D3F8                            
0006D3F8                            
0006D3F8                            sub_72504:				; XREF: sub_71B4C
0006D3F8 102E 0006                  		move.b	6(a6),d0
0006D3FC 6700                       		beq.s	loc_72510
0006D3FE 532E 0006                  		subq.b	#1,6(a6)
0006D402 4E75                       		rts	
0006D404                            ; ===========================================================================
0006D404                            
0006D404                            loc_72510:
0006D404 532E 0004                  		subq.b	#1,4(a6)
0006D408 6700 0000                  		beq.w	Sound_E4
0006D40C 1D7C 0003 0006             		move.b	#3,6(a6)
0006D412 4BEE 0070                  		lea	$70(a6),a5
0006D416 7E05                       		moveq	#5,d7
0006D418                            
0006D418                            loc_72524:
0006D418 4A15                       		tst.b	(a5)
0006D41A 6A00                       		bpl.s	loc_72538
0006D41C 522D 0009                  		addq.b	#1,9(a5)
0006D420 6A00                       		bpl.s	loc_72534
0006D422 0895 0007                  		bclr	#7,(a5)
0006D426 6000                       		bra.s	loc_72538
0006D428                            ; ===========================================================================
0006D428                            
0006D428                            loc_72534:
0006D428 4EBA 0000                  		jsr	sub_72CB4(pc)
0006D42C                            
0006D42C                            loc_72538:
0006D42C DAFC 0030                  		adda.w	#$30,a5
0006D430 51CF FFE6                  		dbf	d7,loc_72524
0006D434                            
0006D434 7E02                       		moveq	#2,d7
0006D436                            
0006D436                            loc_72542:
0006D436 4A15                       		tst.b	(a5)
0006D438 6A00                       		bpl.s	loc_72560
0006D43A 522D 0009                  		addq.b	#1,9(a5)
0006D43E 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0006D444 6500                       		bcs.s	loc_72558
0006D446 0895 0007                  		bclr	#7,(a5)
0006D44A 6000                       		bra.s	loc_72560
0006D44C                            ; ===========================================================================
0006D44C                            
0006D44C                            loc_72558:
0006D44C 1C2D 0009                  		move.b	9(a5),d6
0006D450 4EBA 0000                  		jsr	sub_7296A(pc)
0006D454                            
0006D454                            loc_72560:
0006D454 DAFC 0030                  		adda.w	#$30,a5
0006D458 51CF FFDC                  		dbf	d7,loc_72542
0006D45C                            
0006D45C 4E75                       		rts	
0006D45E                            ; End of function sub_72504
0006D45E                            
0006D45E                            
0006D45E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D45E                            
0006D45E                            
0006D45E                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0006D45E 7602                       		moveq	#2,d3
0006D460 7028                       		moveq	#$28,d0
0006D462                            
0006D462                            loc_7256E:
0006D462 1203                       		move.b	d3,d1
0006D464 4EBA 0000                  		jsr	sub_7272E(pc)
0006D468 5801                       		addq.b	#4,d1
0006D46A 4EBA 0000                  		jsr	sub_7272E(pc)
0006D46E 51CB FFF2                  		dbf	d3,loc_7256E
0006D472                            
0006D472 7040                       		moveq	#$40,d0
0006D474 727F                       		moveq	#$7F,d1
0006D476 7802                       		moveq	#2,d4
0006D478                            
0006D478                            loc_72584:
0006D478 7603                       		moveq	#3,d3
0006D47A                            
0006D47A                            loc_72586:
0006D47A 4EBA 0000                  		jsr	sub_7272E(pc)
0006D47E 4EBA 0000                  		jsr	sub_72764(pc)
0006D482 5840                       		addq.w	#4,d0
0006D484 51CB FFF4                  		dbf	d3,loc_72586
0006D488                            
0006D488 0400 000F                  		subi.b	#$F,d0
0006D48C 51CC FFEA                  		dbf	d4,loc_72584
0006D490                            
0006D490 4E75                       		rts	
0006D492                            ; End of function sub_7256A
0006D492                            
0006D492                            ; ===========================================================================
0006D492                            ; ---------------------------------------------------------------------------
0006D492                            ; Stop music
0006D492                            ; ---------------------------------------------------------------------------
0006D492                            
0006D492                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0006D492 702B                       		moveq	#$2B,d0
0006D494 123C 0080                  		move.b	#$80,d1
0006D498 4EBA 0000                  		jsr	sub_7272E(pc)
0006D49C 7027                       		moveq	#$27,d0
0006D49E 7200                       		moveq	#0,d1
0006D4A0 4EBA 0000                  		jsr	sub_7272E(pc)
0006D4A4 204E                       		movea.l	a6,a0
0006D4A6 303C 00E3                  		move.w	#$E3,d0
0006D4AA                            
0006D4AA                            loc_725B6:
0006D4AA 4298                       		clr.l	(a0)+
0006D4AC 51C8 FFFC                  		dbf	d0,loc_725B6
0006D4B0                            
0006D4B0 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0006D4B6 4EBA FFA6                  		jsr	sub_7256A(pc)
0006D4BA 6000 0000                  		bra.w	sub_729B6
0006D4BE                            
0006D4BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D4BE                            
0006D4BE                            
0006D4BE                            sub_725CA:				; XREF: Sound_ChkValue
0006D4BE 204E                       		movea.l	a6,a0
0006D4C0 1216                       		move.b	0(a6),d1
0006D4C2 142E 0027                  		move.b	$27(a6),d2
0006D4C6 162E 002A                  		move.b	$2A(a6),d3
0006D4CA 182E 0026                  		move.b	$26(a6),d4
0006D4CE 3A2E 000A                  		move.w	$A(a6),d5
0006D4D2 303C 0087                  		move.w	#$87,d0
0006D4D6                            
0006D4D6                            loc_725E4:
0006D4D6 4298                       		clr.l	(a0)+
0006D4D8 51C8 FFFC                  		dbf	d0,loc_725E4
0006D4DC                            
0006D4DC 1C81                       		move.b	d1,0(a6)
0006D4DE 1D42 0027                  		move.b	d2,$27(a6)
0006D4E2 1D43 002A                  		move.b	d3,$2A(a6)
0006D4E6 1D44 0026                  		move.b	d4,$26(a6)
0006D4EA 3D45 000A                  		move.w	d5,$A(a6)
0006D4EE 1D7C 0080 0009             		move.b	#$80,9(a6)
0006D4F4 4EBA FF68                  		jsr	sub_7256A(pc)
0006D4F8 6000 0000                  		bra.w	sub_729B6
0006D4FC                            ; End of function sub_725CA
0006D4FC                            
0006D4FC                            
0006D4FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D4FC                            
0006D4FC                            
0006D4FC                            sub_7260C:				; XREF: sub_71B4C
0006D4FC 1D6E 0002 0001             		move.b	2(a6),1(a6)
0006D502 41EE 004E                  		lea	$4E(a6),a0
0006D506 7030                       		moveq	#$30,d0
0006D508 7209                       		moveq	#9,d1
0006D50A                            
0006D50A                            loc_7261A:
0006D50A 5210                       		addq.b	#1,(a0)
0006D50C D0C0                       		adda.w	d0,a0
0006D50E 51C9 FFFA                  		dbf	d1,loc_7261A
0006D512                            
0006D512 4E75                       		rts	
0006D514                            ; End of function sub_7260C
0006D514                            
0006D514                            ; ===========================================================================
0006D514                            ; ---------------------------------------------------------------------------
0006D514                            ; Speed	up music
0006D514                            ; ---------------------------------------------------------------------------
0006D514                            
0006D514                            Sound_E2:				; XREF: Sound_ExIndex
0006D514 4A2E 0027                  		tst.b	$27(a6)
0006D518 6600                       		bne.s	loc_7263E
0006D51A 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0006D520 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0006D526 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0006D52C 4E75                       		rts	
0006D52E                            ; ===========================================================================
0006D52E                            
0006D52E                            loc_7263E:
0006D52E 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0006D534 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0006D53A 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0006D540 4E75                       		rts	
0006D542                            ; ===========================================================================
0006D542                            ; ---------------------------------------------------------------------------
0006D542                            ; Change music back to normal speed
0006D542                            ; ---------------------------------------------------------------------------
0006D542                            
0006D542                            Sound_E3:				; XREF: Sound_ExIndex
0006D542 4A2E 0027                  		tst.b	$27(a6)
0006D546 6600                       		bne.s	loc_7266A
0006D548 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0006D54E 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0006D554 422E 002A                  		clr.b	$2A(a6)
0006D558 4E75                       		rts	
0006D55A                            ; ===========================================================================
0006D55A                            
0006D55A                            loc_7266A:
0006D55A 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0006D560 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0006D566 422E 03CA                  		clr.b	$3CA(a6)
0006D56A 4E75                       		rts	
0006D56C                            
0006D56C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D56C                            
0006D56C                            
0006D56C                            sub_7267C:				; XREF: sub_71B4C
0006D56C 4A2E 0025                  		tst.b	$25(a6)
0006D570 6700                       		beq.s	loc_72688
0006D572 532E 0025                  		subq.b	#1,$25(a6)
0006D576 4E75                       		rts	
0006D578                            ; ===========================================================================
0006D578                            
0006D578                            loc_72688:
0006D578 4A2E 0026                  		tst.b	$26(a6)
0006D57C 6700                       		beq.s	loc_726D6
0006D57E 532E 0026                  		subq.b	#1,$26(a6)
0006D582 1D7C 0002 0025             		move.b	#2,$25(a6)
0006D588 4BEE 0070                  		lea	$70(a6),a5
0006D58C 7E05                       		moveq	#5,d7
0006D58E                            
0006D58E                            loc_7269E:
0006D58E 4A15                       		tst.b	(a5)
0006D590 6A00                       		bpl.s	loc_726AA
0006D592 532D 0009                  		subq.b	#1,9(a5)
0006D596 4EBA 0000                  		jsr	sub_72CB4(pc)
0006D59A                            
0006D59A                            loc_726AA:
0006D59A DAFC 0030                  		adda.w	#$30,a5
0006D59E 51CF FFEE                  		dbf	d7,loc_7269E
0006D5A2 7E02                       		moveq	#2,d7
0006D5A4                            
0006D5A4                            loc_726B4:
0006D5A4 4A15                       		tst.b	(a5)
0006D5A6 6A00                       		bpl.s	loc_726CC
0006D5A8 532D 0009                  		subq.b	#1,9(a5)
0006D5AC 1C2D 0009                  		move.b	9(a5),d6
0006D5B0 0C06 0010                  		cmpi.b	#$10,d6
0006D5B4 6500                       		bcs.s	loc_726C8
0006D5B6 7C0F                       		moveq	#$F,d6
0006D5B8                            
0006D5B8                            loc_726C8:
0006D5B8 4EBA 0000                  		jsr	sub_7296A(pc)
0006D5BC                            
0006D5BC                            loc_726CC:
0006D5BC DAFC 0030                  		adda.w	#$30,a5
0006D5C0 51CF FFE2                  		dbf	d7,loc_726B4
0006D5C4 4E75                       		rts	
0006D5C6                            ; ===========================================================================
0006D5C6                            
0006D5C6                            loc_726D6:
0006D5C6 08AE 0002 0040             		bclr	#2,$40(a6)
0006D5CC 422E 0024                  		clr.b	$24(a6)
0006D5D0 4E75                       		rts	
0006D5D2                            ; End of function sub_7267C
0006D5D2                            
0006D5D2                            ; ===========================================================================
0006D5D2                            
0006D5D2                            loc_726E2:				; XREF: sub_71CCA
0006D5D2 0815 0001                  		btst	#1,(a5)
0006D5D6 6600                       		bne.s	locret_726FC
0006D5D8 0815 0002                  		btst	#2,(a5)
0006D5DC 6600                       		bne.s	locret_726FC
0006D5DE 7028                       		moveq	#$28,d0
0006D5E0 122D 0001                  		move.b	1(a5),d1
0006D5E4 0001 00F0                  		ori.b	#-$10,d1
0006D5E8 6000 0000                  		bra.w	sub_7272E
0006D5EC                            ; ===========================================================================
0006D5EC                            
0006D5EC                            locret_726FC:
0006D5EC 4E75                       		rts	
0006D5EE                            
0006D5EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D5EE                            
0006D5EE                            
0006D5EE                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0006D5EE 0815 0004                  		btst	#4,(a5)
0006D5F2 6600                       		bne.s	locret_72714
0006D5F4 0815 0002                  		btst	#2,(a5)
0006D5F8 6600                       		bne.s	locret_72714
0006D5FA                            
0006D5FA                            loc_7270A:				; XREF: Snd_FadeOut2
0006D5FA 7028                       		moveq	#$28,d0
0006D5FC 122D 0001                  		move.b	1(a5),d1
0006D600 6000 0000                  		bra.w	sub_7272E
0006D604                            ; ===========================================================================
0006D604                            
0006D604                            locret_72714:
0006D604 4E75                       		rts	
0006D606                            ; End of function sub_726FE
0006D606                            
0006D606                            ; ===========================================================================
0006D606                            
0006D606                            loc_72716:				; XREF: sub_72A5A
0006D606 0815 0002                  		btst	#2,(a5)
0006D60A 6600                       		bne.s	locret_72720
0006D60C 6000 0000                  		bra.w	sub_72722
0006D610                            ; ===========================================================================
0006D610                            
0006D610                            locret_72720:
0006D610 4E75                       		rts	
0006D612                            
0006D612                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D612                            
0006D612                            
0006D612                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0006D612 082D 0002 0001             		btst	#2,1(a5)
0006D618 6600                       		bne.s	loc_7275A
0006D61A D02D 0001                  		add.b	1(a5),d0
0006D61E                            ; End of function sub_72722
0006D61E                            
0006D61E                            
0006D61E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D61E                            
0006D61E                            
0006D61E                            sub_7272E:				; XREF: loc_71E6A
0006D61E 1439 00A0 4000             		move.b	($A04000).l,d2
0006D624 0802 0007                  		btst	#7,d2
0006D628 66F4                       		bne.s	sub_7272E
0006D62A 13C0 00A0 4000             		move.b	d0,($A04000).l
0006D630 4E71                       		nop	
0006D632 4E71                       		nop	
0006D634 4E71                       		nop	
0006D636                            
0006D636                            loc_72746:
0006D636 1439 00A0 4000             		move.b	($A04000).l,d2
0006D63C 0802 0007                  		btst	#7,d2
0006D640 66F4                       		bne.s	loc_72746
0006D642                            
0006D642 13C1 00A0 4001             		move.b	d1,($A04001).l
0006D648 4E75                       		rts	
0006D64A                            ; End of function sub_7272E
0006D64A                            
0006D64A                            ; ===========================================================================
0006D64A                            
0006D64A                            loc_7275A:				; XREF: sub_72722
0006D64A 142D 0001                  		move.b	1(a5),d2
0006D64E 0882 0002                  		bclr	#2,d2
0006D652 D002                       		add.b	d2,d0
0006D654                            
0006D654                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D654                            
0006D654                            
0006D654                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0006D654 1439 00A0 4000             		move.b	($A04000).l,d2
0006D65A 0802 0007                  		btst	#7,d2
0006D65E 66F4                       		bne.s	sub_72764
0006D660 13C0 00A0 4002             		move.b	d0,($A04002).l
0006D666 4E71                       		nop	
0006D668 4E71                       		nop	
0006D66A 4E71                       		nop	
0006D66C                            
0006D66C                            loc_7277C:
0006D66C 1439 00A0 4000             		move.b	($A04000).l,d2
0006D672 0802 0007                  		btst	#7,d2
0006D676 66F4                       		bne.s	loc_7277C
0006D678                            
0006D678 13C1 00A0 4003             		move.b	d1,($A04003).l
0006D67E 4E75                       		rts	
0006D680                            ; End of function sub_72764
0006D680                            
0006D680                            ; ===========================================================================
0006D680 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0006D692 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0006D6A4 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0006D6B4 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0006D6C4 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0006D6D4 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0006D6E4 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0006D6F4 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0006D704 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0006D714 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0006D724 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0006D734 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0006D740                            
0006D740                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D740                            
0006D740                            
0006D740                            sub_72850:				; XREF: sub_71B4C
0006D740 532D 000E                  		subq.b	#1,$E(a5)
0006D744 6600                       		bne.s	loc_72866
0006D746 0895 0004                  		bclr	#4,(a5)
0006D74A 4EBA 0000                  		jsr	sub_72878(pc)
0006D74E 4EBA 0000                  		jsr	sub_728DC(pc)
0006D752 6000 0000                  		bra.w	loc_7292E
0006D756                            ; ===========================================================================
0006D756                            
0006D756                            loc_72866:
0006D756 4EBA F52A                  		jsr	sub_71D9E(pc)
0006D75A 4EBA 0000                  		jsr	sub_72926(pc)
0006D75E 4EBA F54A                  		jsr	sub_71DC6(pc)
0006D762 4EBA 0000                  		jsr	sub_728E2(pc)
0006D766 4E75                       		rts	
0006D768                            ; End of function sub_72850
0006D768                            
0006D768                            
0006D768                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D768                            
0006D768                            
0006D768                            sub_72878:				; XREF: sub_72850
0006D768 0895 0001                  		bclr	#1,(a5)
0006D76C 286D 0004                  		movea.l	4(a5),a4
0006D770                            
0006D770                            loc_72880:
0006D770 7A00                       		moveq	#0,d5
0006D772 1A1C                       		move.b	(a4)+,d5
0006D774 0C05 00E0                  		cmpi.b	#$E0,d5
0006D778 6500                       		bcs.s	loc_72890
0006D77A 4EBA 0000                  		jsr	sub_72A5A(pc)
0006D77E 60F0                       		bra.s	loc_72880
0006D780                            ; ===========================================================================
0006D780                            
0006D780                            loc_72890:
0006D780 4A05                       		tst.b	d5
0006D782 6A00                       		bpl.s	loc_728A4
0006D784 4EBA 0000                  		jsr	sub_728AC(pc)
0006D788 1A1C                       		move.b	(a4)+,d5
0006D78A 4A05                       		tst.b	d5
0006D78C 6A00                       		bpl.s	loc_728A4
0006D78E 534C                       		subq.w	#1,a4
0006D790 6000 F4B2                  		bra.w	sub_71D60
0006D794                            ; ===========================================================================
0006D794                            
0006D794                            loc_728A4:
0006D794 4EBA F48E                  		jsr	sub_71D40(pc)
0006D798 6000 F4AA                  		bra.w	sub_71D60
0006D79C                            ; End of function sub_72878
0006D79C                            
0006D79C                            
0006D79C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D79C                            
0006D79C                            
0006D79C                            sub_728AC:				; XREF: sub_72878
0006D79C 0405 0081                  		subi.b	#$81,d5
0006D7A0 6500                       		bcs.s	loc_728CA
0006D7A2 DA2D 0008                  		add.b	8(a5),d5
0006D7A6 0245 007F                  		andi.w	#$7F,d5
0006D7AA E34D                       		lsl.w	#1,d5
0006D7AC 41FA 0000                  		lea	word_729CE(pc),a0
0006D7B0 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0006D7B6 6000 F48C                  		bra.w	sub_71D60
0006D7BA                            ; ===========================================================================
0006D7BA                            
0006D7BA                            loc_728CA:
0006D7BA 08D5 0001                  		bset	#1,(a5)
0006D7BE 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0006D7C4 4EBA F47E                  		jsr	sub_71D60(pc)
0006D7C8 6000 0000                  		bra.w	sub_729A0
0006D7CC                            ; End of function sub_728AC
0006D7CC                            
0006D7CC                            
0006D7CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D7CC                            
0006D7CC                            
0006D7CC                            sub_728DC:				; XREF: sub_72850
0006D7CC 3C2D 0010                  		move.w	$10(a5),d6
0006D7D0 6B00                       		bmi.s	loc_72920
0006D7D2                            ; End of function sub_728DC
0006D7D2                            
0006D7D2                            
0006D7D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D7D2                            
0006D7D2                            
0006D7D2                            sub_728E2:				; XREF: sub_72850
0006D7D2 102D 001E                  		move.b	$1E(a5),d0
0006D7D6 4880                       		ext.w	d0
0006D7D8 DC40                       		add.w	d0,d6
0006D7DA 0815 0002                  		btst	#2,(a5)
0006D7DE 6600                       		bne.s	locret_7291E
0006D7E0 0815 0001                  		btst	#1,(a5)
0006D7E4 6600                       		bne.s	locret_7291E
0006D7E6 102D 0001                  		move.b	1(a5),d0
0006D7EA 0C00 00E0                  		cmpi.b	#$E0,d0
0006D7EE 6600                       		bne.s	loc_72904
0006D7F0 103C 00C0                  		move.b	#$C0,d0
0006D7F4                            
0006D7F4                            loc_72904:
0006D7F4 3206                       		move.w	d6,d1
0006D7F6 0201 000F                  		andi.b	#$F,d1
0006D7FA 8001                       		or.b	d1,d0
0006D7FC E84E                       		lsr.w	#4,d6
0006D7FE 0206 003F                  		andi.b	#$3F,d6
0006D802 13C0 00C0 0011             		move.b	d0,($C00011).l
0006D808 13C6 00C0 0011             		move.b	d6,($C00011).l
0006D80E                            
0006D80E                            locret_7291E:
0006D80E 4E75                       		rts	
0006D810                            ; End of function sub_728E2
0006D810                            
0006D810                            ; ===========================================================================
0006D810                            
0006D810                            loc_72920:				; XREF: sub_728DC
0006D810 08D5 0001                  		bset	#1,(a5)
0006D814 4E75                       		rts	
0006D816                            
0006D816                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D816                            
0006D816                            
0006D816                            sub_72926:				; XREF: sub_72850
0006D816 4A2D 000B                  		tst.b	$B(a5)
0006D81A 6700 0000                  		beq.w	locret_7298A
0006D81E                            
0006D81E                            loc_7292E:				; XREF: sub_72850
0006D81E 1C2D 0009                  		move.b	9(a5),d6
0006D822 7000                       		moveq	#0,d0
0006D824 102D 000B                  		move.b	$B(a5),d0
0006D828 6700                       		beq.s	sub_7296A
0006D82A 2079 0006 C888             		movea.l	(Go_PSGIndex).l,a0
0006D830 5340                       		subq.w	#1,d0
0006D832 E548                       		lsl.w	#2,d0
0006D834 2070 0000                  		movea.l	(a0,d0.w),a0
0006D838 102D 000C                  		move.b	$C(a5),d0
0006D83C 1030 0000                  		move.b	(a0,d0.w),d0
0006D840 522D 000C                  		addq.b	#1,$C(a5)
0006D844 0800 0007                  		btst	#7,d0
0006D848 6700                       		beq.s	loc_72960
0006D84A 0C00 0080                  		cmpi.b	#$80,d0
0006D84E 6700                       		beq.s	loc_7299A
0006D850                            
0006D850                            loc_72960:
0006D850 DC40                       		add.w	d0,d6
0006D852 0C06 0010                  		cmpi.b	#$10,d6
0006D856 6500                       		bcs.s	sub_7296A
0006D858 7C0F                       		moveq	#$F,d6
0006D85A                            ; End of function sub_72926
0006D85A                            
0006D85A                            
0006D85A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D85A                            
0006D85A                            
0006D85A                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0006D85A 0815 0001                  		btst	#1,(a5)
0006D85E 6600                       		bne.s	locret_7298A
0006D860 0815 0002                  		btst	#2,(a5)
0006D864 6600                       		bne.s	locret_7298A
0006D866 0815 0004                  		btst	#4,(a5)
0006D86A 6600                       		bne.s	loc_7298C
0006D86C                            
0006D86C                            loc_7297C:
0006D86C 8C2D 0001                  		or.b	1(a5),d6
0006D870 0606 0010                  		addi.b	#$10,d6
0006D874 13C6 00C0 0011             		move.b	d6,($C00011).l
0006D87A                            
0006D87A                            locret_7298A:
0006D87A 4E75                       		rts	
0006D87C                            ; ===========================================================================
0006D87C                            
0006D87C                            loc_7298C:
0006D87C 4A2D 0013                  		tst.b	$13(a5)
0006D880 67EA                       		beq.s	loc_7297C
0006D882 4A2D 0012                  		tst.b	$12(a5)
0006D886 66E4                       		bne.s	loc_7297C
0006D888 4E75                       		rts	
0006D88A                            ; End of function sub_7296A
0006D88A                            
0006D88A                            ; ===========================================================================
0006D88A                            
0006D88A                            loc_7299A:				; XREF: sub_72926
0006D88A 532D 000C                  		subq.b	#1,$C(a5)
0006D88E 4E75                       		rts	
0006D890                            
0006D890                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D890                            
0006D890                            
0006D890                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0006D890 0815 0002                  		btst	#2,(a5)
0006D894 6600                       		bne.s	locret_729B4
0006D896                            
0006D896                            loc_729A6:				; XREF: Snd_FadeOut2
0006D896 102D 0001                  		move.b	1(a5),d0
0006D89A 0000 001F                  		ori.b	#$1F,d0
0006D89E 13C0 00C0 0011             		move.b	d0,($C00011).l
0006D8A4                            
0006D8A4                            locret_729B4:
0006D8A4 4E75                       		rts	
0006D8A6                            ; End of function sub_729A0
0006D8A6                            
0006D8A6                            
0006D8A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D8A6                            
0006D8A6                            
0006D8A6                            sub_729B6:				; XREF: loc_71E7C
0006D8A6 41F9 00C0 0011             		lea	($C00011).l,a0
0006D8AC 10BC 009F                  		move.b	#$9F,(a0)
0006D8B0 10BC 00BF                  		move.b	#$BF,(a0)
0006D8B4 10BC 00DF                  		move.b	#$DF,(a0)
0006D8B8 10BC 00FF                  		move.b	#$FF,(a0)
0006D8BC 4E75                       		rts	
0006D8BE                            ; End of function sub_729B6
0006D8BE                            
0006D8BE                            ; ===========================================================================
0006D8BE 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0006D8D0 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0006D8E2 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0006D8F6 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0006D90A 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0006D91E 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0006D932 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0006D946 0011 0000                  		dc.w $11, 0
0006D94A                            
0006D94A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D94A                            
0006D94A                            
0006D94A                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0006D94A 0445 00E0                  		subi.w	#$E0,d5
0006D94E E54D                       		lsl.w	#2,d5
0006D950 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0006D954                            ; End of function sub_72A5A
0006D954                            
0006D954                            ; ===========================================================================
0006D954                            
0006D954                            loc_72A64:
0006D954 6000 0000                  		bra.w	loc_72ACC
0006D958                            ; ===========================================================================
0006D958 6000 0000                  		bra.w	loc_72AEC
0006D95C                            ; ===========================================================================
0006D95C 6000 0000                  		bra.w	loc_72AF2
0006D960                            ; ===========================================================================
0006D960 6000 0000                  		bra.w	loc_72AF8
0006D964                            ; ===========================================================================
0006D964 6000 0000                  		bra.w	loc_72B14
0006D968                            ; ===========================================================================
0006D968 6000 0000                  		bra.w	loc_72B9E
0006D96C                            ; ===========================================================================
0006D96C 6000 0000                  		bra.w	loc_72BA4
0006D970                            ; ===========================================================================
0006D970 6000 0000                  		bra.w	loc_72BAE
0006D974                            ; ===========================================================================
0006D974 6000 0000                  		bra.w	loc_72BB4
0006D978                            ; ===========================================================================
0006D978 6000 0000                  		bra.w	loc_72BBE
0006D97C                            ; ===========================================================================
0006D97C 6000 0000                  		bra.w	loc_72BC6
0006D980                            ; ===========================================================================
0006D980 6000 0000                  		bra.w	loc_72BD0
0006D984                            ; ===========================================================================
0006D984 6000 0000                  		bra.w	loc_72BE6
0006D988                            ; ===========================================================================
0006D988 6000 0000                  		bra.w	loc_72BEE
0006D98C                            ; ===========================================================================
0006D98C 6000 0000                  		bra.w	loc_72BF4
0006D990                            ; ===========================================================================
0006D990 6000 0000                  		bra.w	loc_72C26
0006D994                            ; ===========================================================================
0006D994 6000 0000                  		bra.w	loc_72D30
0006D998                            ; ===========================================================================
0006D998 6000 0000                  		bra.w	loc_72D52
0006D99C                            ; ===========================================================================
0006D99C 6000 0000                  		bra.w	loc_72D58
0006D9A0                            ; ===========================================================================
0006D9A0 6000 0000                  		bra.w	loc_72E06
0006D9A4                            ; ===========================================================================
0006D9A4 6000 0000                  		bra.w	loc_72E20
0006D9A8                            ; ===========================================================================
0006D9A8 6000 0000                  		bra.w	loc_72E26
0006D9AC                            ; ===========================================================================
0006D9AC 6000 0000                  		bra.w	loc_72E2C
0006D9B0                            ; ===========================================================================
0006D9B0 6000 0000                  		bra.w	loc_72E38
0006D9B4                            ; ===========================================================================
0006D9B4 6000 0000                  		bra.w	loc_72E52
0006D9B8                            ; ===========================================================================
0006D9B8 6000 0000                  		bra.w	loc_72E64
0006D9BC                            ; ===========================================================================
0006D9BC                            
0006D9BC                            loc_72ACC:				; XREF: loc_72A64
0006D9BC 121C                       		move.b	(a4)+,d1
0006D9BE 4A2D 0001                  		tst.b	1(a5)
0006D9C2 6B00                       		bmi.s	locret_72AEA
0006D9C4 102D 000A                  		move.b	$A(a5),d0
0006D9C8 0200 0037                  		andi.b	#$37,d0
0006D9CC 8200                       		or.b	d0,d1
0006D9CE 1B41 000A                  		move.b	d1,$A(a5)
0006D9D2 103C 00B4                  		move.b	#$B4,d0
0006D9D6 6000 FC2E                  		bra.w	loc_72716
0006D9DA                            ; ===========================================================================
0006D9DA                            
0006D9DA                            locret_72AEA:
0006D9DA 4E75                       		rts	
0006D9DC                            ; ===========================================================================
0006D9DC                            
0006D9DC                            loc_72AEC:				; XREF: loc_72A64
0006D9DC 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0006D9E0 4E75                       		rts	
0006D9E2                            ; ===========================================================================
0006D9E2                            
0006D9E2                            loc_72AF2:				; XREF: loc_72A64
0006D9E2 1D5C 0007                  		move.b	(a4)+,7(a6)
0006D9E6 4E75                       		rts	
0006D9E8                            ; ===========================================================================
0006D9E8                            
0006D9E8                            loc_72AF8:				; XREF: loc_72A64
0006D9E8 7000                       		moveq	#0,d0
0006D9EA 102D 000D                  		move.b	$D(a5),d0
0006D9EE 2875 0000                  		movea.l	(a5,d0.w),a4
0006D9F2 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0006D9FA 544C                       		addq.w	#2,a4
0006D9FC 5800                       		addq.b	#4,d0
0006D9FE 1B40 000D                  		move.b	d0,$D(a5)
0006DA02 4E75                       		rts	
0006DA04                            ; ===========================================================================
0006DA04                            
0006DA04                            loc_72B14:				; XREF: loc_72A64
0006DA04 204E                       		movea.l	a6,a0
0006DA06 43EE 03A0                  		lea	$3A0(a6),a1
0006DA0A 303C 0087                  		move.w	#$87,d0
0006DA0E                            
0006DA0E                            loc_72B1E:
0006DA0E 20D9                       		move.l	(a1)+,(a0)+
0006DA10 51C8 FFFC                  		dbf	d0,loc_72B1E
0006DA14                            
0006DA14 08EE 0002 0040             		bset	#2,$40(a6)
0006DA1A 264D                       		movea.l	a5,a3
0006DA1C 1C3C 0028                  		move.b	#$28,d6
0006DA20 9C2E 0026                  		sub.b	$26(a6),d6
0006DA24 7E05                       		moveq	#5,d7
0006DA26 4BEE 0070                  		lea	$70(a6),a5
0006DA2A                            
0006DA2A                            loc_72B3A:
0006DA2A 0815 0007                  		btst	#7,(a5)
0006DA2E 6700                       		beq.s	loc_72B5C
0006DA30 08D5 0001                  		bset	#1,(a5)
0006DA34 DD2D 0009                  		add.b	d6,9(a5)
0006DA38 0815 0002                  		btst	#2,(a5)
0006DA3C 6600                       		bne.s	loc_72B5C
0006DA3E 7000                       		moveq	#0,d0
0006DA40 102D 000B                  		move.b	$B(a5),d0
0006DA44 226E 0018                  		movea.l	$18(a6),a1
0006DA48 4EBA 0000                  		jsr	sub_72C4E(pc)
0006DA4C                            
0006DA4C                            loc_72B5C:
0006DA4C DAFC 0030                  		adda.w	#$30,a5
0006DA50 51CF FFD8                  		dbf	d7,loc_72B3A
0006DA54                            
0006DA54 7E02                       		moveq	#2,d7
0006DA56                            
0006DA56                            loc_72B66:
0006DA56 0815 0007                  		btst	#7,(a5)
0006DA5A 6700                       		beq.s	loc_72B78
0006DA5C 08D5 0001                  		bset	#1,(a5)
0006DA60 4EBA FE2E                  		jsr	sub_729A0(pc)
0006DA64 DD2D 0009                  		add.b	d6,9(a5)
0006DA68                            
0006DA68                            loc_72B78:
0006DA68 DAFC 0030                  		adda.w	#$30,a5
0006DA6C 51CF FFE8                  		dbf	d7,loc_72B66
0006DA70 2A4B                       		movea.l	a3,a5
0006DA72 1D7C 0080 0024             		move.b	#$80,$24(a6)
0006DA78 1D7C 0028 0026             		move.b	#$28,$26(a6)
0006DA7E 422E 0027                  		clr.b	$27(a6)
0006DA82 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0006DA8A 504F                       		addq.w	#8,sp
0006DA8C 4E75                       		rts	
0006DA8E                            ; ===========================================================================
0006DA8E                            
0006DA8E                            loc_72B9E:				; XREF: loc_72A64
0006DA8E 1B5C 0002                  		move.b	(a4)+,2(a5)
0006DA92 4E75                       		rts	
0006DA94                            ; ===========================================================================
0006DA94                            
0006DA94                            loc_72BA4:				; XREF: loc_72A64
0006DA94 101C                       		move.b	(a4)+,d0
0006DA96 D12D 0009                  		add.b	d0,9(a5)
0006DA9A 6000 0000                  		bra.w	sub_72CB4
0006DA9E                            ; ===========================================================================
0006DA9E                            
0006DA9E                            loc_72BAE:				; XREF: loc_72A64
0006DA9E 08D5 0004                  		bset	#4,(a5)
0006DAA2 4E75                       		rts	
0006DAA4                            ; ===========================================================================
0006DAA4                            
0006DAA4                            loc_72BB4:				; XREF: loc_72A64
0006DAA4 1B54 0012                  		move.b	(a4),$12(a5)
0006DAA8 1B5C 0013                  		move.b	(a4)+,$13(a5)
0006DAAC 4E75                       		rts	
0006DAAE                            ; ===========================================================================
0006DAAE                            
0006DAAE                            loc_72BBE:				; XREF: loc_72A64
0006DAAE 101C                       		move.b	(a4)+,d0
0006DAB0 D12D 0008                  		add.b	d0,8(a5)
0006DAB4 4E75                       		rts	
0006DAB6                            ; ===========================================================================
0006DAB6                            
0006DAB6                            loc_72BC6:				; XREF: loc_72A64
0006DAB6 1D54 0002                  		move.b	(a4),2(a6)
0006DABA 1D5C 0001                  		move.b	(a4)+,1(a6)
0006DABE 4E75                       		rts	
0006DAC0                            ; ===========================================================================
0006DAC0                            
0006DAC0                            loc_72BD0:				; XREF: loc_72A64
0006DAC0 41EE 0040                  		lea	$40(a6),a0
0006DAC4 101C                       		move.b	(a4)+,d0
0006DAC6 7230                       		moveq	#$30,d1
0006DAC8 7409                       		moveq	#9,d2
0006DACA                            
0006DACA                            loc_72BDA:
0006DACA 1140 0002                  		move.b	d0,2(a0)
0006DACE D0C1                       		adda.w	d1,a0
0006DAD0 51CA FFF8                  		dbf	d2,loc_72BDA
0006DAD4                            
0006DAD4 4E75                       		rts	
0006DAD6                            ; ===========================================================================
0006DAD6                            
0006DAD6                            loc_72BE6:				; XREF: loc_72A64
0006DAD6 101C                       		move.b	(a4)+,d0
0006DAD8 D12D 0009                  		add.b	d0,9(a5)
0006DADC 4E75                       		rts	
0006DADE                            ; ===========================================================================
0006DADE                            
0006DADE                            loc_72BEE:				; XREF: loc_72A64
0006DADE 422E 002C                  		clr.b	$2C(a6)
0006DAE2 4E75                       		rts	
0006DAE4                            ; ===========================================================================
0006DAE4                            
0006DAE4                            loc_72BF4:				; XREF: loc_72A64
0006DAE4 0895 0007                  		bclr	#7,(a5)
0006DAE8 0895 0004                  		bclr	#4,(a5)
0006DAEC 4EBA FB00                  		jsr	sub_726FE(pc)
0006DAF0 4A2E 0250                  		tst.b	$250(a6)
0006DAF4 6B00                       		bmi.s	loc_72C22
0006DAF6 264D                       		movea.l	a5,a3
0006DAF8 4BEE 0100                  		lea	$100(a6),a5
0006DAFC 226E 0018                  		movea.l	$18(a6),a1
0006DB00 0895 0002                  		bclr	#2,(a5)
0006DB04 08D5 0001                  		bset	#1,(a5)
0006DB08 102D 000B                  		move.b	$B(a5),d0
0006DB0C 4EBA 0000                  		jsr	sub_72C4E(pc)
0006DB10 2A4B                       		movea.l	a3,a5
0006DB12                            
0006DB12                            loc_72C22:
0006DB12 504F                       		addq.w	#8,sp
0006DB14 4E75                       		rts	
0006DB16                            ; ===========================================================================
0006DB16                            
0006DB16                            loc_72C26:				; XREF: loc_72A64
0006DB16 7000                       		moveq	#0,d0
0006DB18 101C                       		move.b	(a4)+,d0
0006DB1A 1B40 000B                  		move.b	d0,$B(a5)
0006DB1E 0815 0002                  		btst	#2,(a5)
0006DB22 6600 0000                  		bne.w	locret_72CAA
0006DB26 226E 0018                  		movea.l	$18(a6),a1
0006DB2A 4A2E 000E                  		tst.b	$E(a6)
0006DB2E 6700                       		beq.s	sub_72C4E
0006DB30 226D 0020                  		movea.l	$20(a5),a1
0006DB34 4A2E 000E                  		tst.b	$E(a6)
0006DB38 6B00                       		bmi.s	sub_72C4E
0006DB3A 226E 0020                  		movea.l	$20(a6),a1
0006DB3E                            
0006DB3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006DB3E                            
0006DB3E                            
0006DB3E                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0006DB3E 5340                       		subq.w	#1,d0
0006DB40 6B00                       		bmi.s	loc_72C5C
0006DB42 323C 0019                  		move.w	#$19,d1
0006DB46                            
0006DB46                            loc_72C56:
0006DB46 D2C1                       		adda.w	d1,a1
0006DB48 51C8 FFFC                  		dbf	d0,loc_72C56
0006DB4C                            
0006DB4C                            loc_72C5C:
0006DB4C 1219                       		move.b	(a1)+,d1
0006DB4E 1B41 001F                  		move.b	d1,$1F(a5)
0006DB52 1801                       		move.b	d1,d4
0006DB54 103C 00B0                  		move.b	#$B0,d0
0006DB58 4EBA FAB8                  		jsr	sub_72722(pc)
0006DB5C 45FA 0000                  		lea	byte_72D18(pc),a2
0006DB60 7613                       		moveq	#$13,d3
0006DB62                            
0006DB62                            loc_72C72:
0006DB62 101A                       		move.b	(a2)+,d0
0006DB64 1219                       		move.b	(a1)+,d1
0006DB66 4EBA FAAA                  		jsr	sub_72722(pc)
0006DB6A 51CB FFF6                  		dbf	d3,loc_72C72
0006DB6E 7A03                       		moveq	#3,d5
0006DB70 0244 0007                  		andi.w	#7,d4
0006DB74 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0006DB78 162D 0009                  		move.b	9(a5),d3
0006DB7C                            
0006DB7C                            loc_72C8C:
0006DB7C 101A                       		move.b	(a2)+,d0
0006DB7E 1219                       		move.b	(a1)+,d1
0006DB80 E20C                       		lsr.b	#1,d4
0006DB82 6400                       		bcc.s	loc_72C96
0006DB84 D203                       		add.b	d3,d1
0006DB86                            
0006DB86                            loc_72C96:
0006DB86 4EBA FA8A                  		jsr	sub_72722(pc)
0006DB8A 51CD FFF0                  		dbf	d5,loc_72C8C
0006DB8E 103C 00B4                  		move.b	#$B4,d0
0006DB92 122D 000A                  		move.b	$A(a5),d1
0006DB96 4EBA FA7A                  		jsr	sub_72722(pc)
0006DB9A                            
0006DB9A                            locret_72CAA:
0006DB9A 4E75                       		rts	
0006DB9C                            ; End of function sub_72C4E
0006DB9C                            
0006DB9C                            ; ===========================================================================
0006DB9C 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0006DBA4                            
0006DBA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006DBA4                            
0006DBA4                            
0006DBA4                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0006DBA4 0815 0002                  		btst	#2,(a5)
0006DBA8 6600                       		bne.s	locret_72D16
0006DBAA 7000                       		moveq	#0,d0
0006DBAC 102D 000B                  		move.b	$B(a5),d0
0006DBB0 226E 0018                  		movea.l	$18(a6),a1
0006DBB4 4A2E 000E                  		tst.b	$E(a6)
0006DBB8 6700                       		beq.s	loc_72CD8
0006DBBA 226E 0020                  		movea.l	$20(a6),a1
0006DBBE 4A2E 000E                  		tst.b	$E(a6)
0006DBC2 6B00                       		bmi.s	loc_72CD8
0006DBC4 226E 0020                  		movea.l	$20(a6),a1
0006DBC8                            
0006DBC8                            loc_72CD8:
0006DBC8 5340                       		subq.w	#1,d0
0006DBCA 6B00                       		bmi.s	loc_72CE6
0006DBCC 323C 0019                  		move.w	#$19,d1
0006DBD0                            
0006DBD0                            loc_72CE0:
0006DBD0 D2C1                       		adda.w	d1,a1
0006DBD2 51C8 FFFC                  		dbf	d0,loc_72CE0
0006DBD6                            
0006DBD6                            loc_72CE6:
0006DBD6 D2FC 0015                  		adda.w	#$15,a1
0006DBDA 45FA 0000                  		lea	byte_72D2C(pc),a2
0006DBDE 102D 001F                  		move.b	$1F(a5),d0
0006DBE2 0240 0007                  		andi.w	#7,d0
0006DBE6 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0006DBEA 162D 0009                  		move.b	9(a5),d3
0006DBEE 6B00                       		bmi.s	locret_72D16
0006DBF0 7A03                       		moveq	#3,d5
0006DBF2                            
0006DBF2                            loc_72D02:
0006DBF2 101A                       		move.b	(a2)+,d0
0006DBF4 1219                       		move.b	(a1)+,d1
0006DBF6 E20C                       		lsr.b	#1,d4
0006DBF8 6400                       		bcc.s	loc_72D12
0006DBFA D203                       		add.b	d3,d1
0006DBFC 6500                       		bcs.s	loc_72D12
0006DBFE 4EBA FA12                  		jsr	sub_72722(pc)
0006DC02                            
0006DC02                            loc_72D12:
0006DC02 51CD FFEE                  		dbf	d5,loc_72D02
0006DC06                            
0006DC06                            locret_72D16:
0006DC06 4E75                       		rts	
0006DC08                            ; End of function sub_72CB4
0006DC08                            
0006DC08                            ; ===========================================================================
0006DC08 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0006DC12 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0006DC1C 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0006DC20                            ; ===========================================================================
0006DC20                            
0006DC20                            loc_72D30:				; XREF: loc_72A64
0006DC20 08D5 0003                  		bset	#3,(a5)
0006DC24 2B4C 0014                  		move.l	a4,$14(a5)
0006DC28 1B5C 0018                  		move.b	(a4)+,$18(a5)
0006DC2C 1B5C 0019                  		move.b	(a4)+,$19(a5)
0006DC30 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0006DC34 101C                       		move.b	(a4)+,d0
0006DC36 E208                       		lsr.b	#1,d0
0006DC38 1B40 001B                  		move.b	d0,$1B(a5)
0006DC3C 426D 001C                  		clr.w	$1C(a5)
0006DC40 4E75                       		rts	
0006DC42                            ; ===========================================================================
0006DC42                            
0006DC42                            loc_72D52:				; XREF: loc_72A64
0006DC42 08D5 0003                  		bset	#3,(a5)
0006DC46 4E75                       		rts	
0006DC48                            ; ===========================================================================
0006DC48                            
0006DC48                            loc_72D58:				; XREF: loc_72A64
0006DC48 0895 0007                  		bclr	#7,(a5)
0006DC4C 0895 0004                  		bclr	#4,(a5)
0006DC50 4A2D 0001                  		tst.b	1(a5)
0006DC54 6B00                       		bmi.s	loc_72D74
0006DC56 4A2E 0008                  		tst.b	8(a6)
0006DC5A 6B00 0000                  		bmi.w	loc_72E02
0006DC5E 4EBA F98E                  		jsr	sub_726FE(pc)
0006DC62 6000                       		bra.s	loc_72D78
0006DC64                            ; ===========================================================================
0006DC64                            
0006DC64                            loc_72D74:
0006DC64 4EBA FC2A                  		jsr	sub_729A0(pc)
0006DC68                            
0006DC68                            loc_72D78:
0006DC68 4A2E 000E                  		tst.b	$E(a6)
0006DC6C 6A00 0000                  		bpl.w	loc_72E02
0006DC70 4216                       		clr.b	0(a6)
0006DC72 7000                       		moveq	#0,d0
0006DC74 102D 0001                  		move.b	1(a5),d0
0006DC78 6B00                       		bmi.s	loc_72DCC
0006DC7A 41FA F546                  		lea	dword_722CC(pc),a0
0006DC7E 264D                       		movea.l	a5,a3
0006DC80 0C00 0004                  		cmpi.b	#4,d0
0006DC84 6600                       		bne.s	loc_72DA8
0006DC86 4A2E 0340                  		tst.b	$340(a6)
0006DC8A 6A00                       		bpl.s	loc_72DA8
0006DC8C 4BEE 0340                  		lea	$340(a6),a5
0006DC90 226E 0020                  		movea.l	$20(a6),a1
0006DC94 6000                       		bra.s	loc_72DB8
0006DC96                            ; ===========================================================================
0006DC96                            
0006DC96                            loc_72DA8:
0006DC96 5500                       		subq.b	#2,d0
0006DC98 E508                       		lsl.b	#2,d0
0006DC9A 2A70 0000                  		movea.l	(a0,d0.w),a5
0006DC9E 4A15                       		tst.b	(a5)
0006DCA0 6A00                       		bpl.s	loc_72DC8
0006DCA2 226E 0018                  		movea.l	$18(a6),a1
0006DCA6                            
0006DCA6                            loc_72DB8:
0006DCA6 0895 0002                  		bclr	#2,(a5)
0006DCAA 08D5 0001                  		bset	#1,(a5)
0006DCAE 102D 000B                  		move.b	$B(a5),d0
0006DCB2 4EBA FE8A                  		jsr	sub_72C4E(pc)
0006DCB6                            
0006DCB6                            loc_72DC8:
0006DCB6 2A4B                       		movea.l	a3,a5
0006DCB8 6000                       		bra.s	loc_72E02
0006DCBA                            ; ===========================================================================
0006DCBA                            
0006DCBA                            loc_72DCC:
0006DCBA 41EE 0370                  		lea	$370(a6),a0
0006DCBE 4A10                       		tst.b	(a0)
0006DCC0 6A00                       		bpl.s	loc_72DE0
0006DCC2 0C00 00E0                  		cmpi.b	#$E0,d0
0006DCC6 6700                       		beq.s	loc_72DEA
0006DCC8 0C00 00C0                  		cmpi.b	#$C0,d0
0006DCCC 6700                       		beq.s	loc_72DEA
0006DCCE                            
0006DCCE                            loc_72DE0:
0006DCCE 41FA F4F2                  		lea	dword_722CC(pc),a0
0006DCD2 E608                       		lsr.b	#3,d0
0006DCD4 2070 0000                  		movea.l	(a0,d0.w),a0
0006DCD8                            
0006DCD8                            loc_72DEA:
0006DCD8 0890 0002                  		bclr	#2,(a0)
0006DCDC 08D0 0001                  		bset	#1,(a0)
0006DCE0 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0006DCE6 6600                       		bne.s	loc_72E02
0006DCE8 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0006DCF0                            
0006DCF0                            loc_72E02:
0006DCF0 504F                       		addq.w	#8,sp
0006DCF2 4E75                       		rts	
0006DCF4                            ; ===========================================================================
0006DCF4                            
0006DCF4                            loc_72E06:				; XREF: loc_72A64
0006DCF4 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0006DCFA 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0006DCFE 0815 0002                  		btst	#2,(a5)
0006DD02 6600                       		bne.s	locret_72E1E
0006DD04 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0006DD0C                            
0006DD0C                            locret_72E1E:
0006DD0C 4E75                       		rts	
0006DD0E                            ; ===========================================================================
0006DD0E                            
0006DD0E                            loc_72E20:				; XREF: loc_72A64
0006DD0E 0895 0003                  		bclr	#3,(a5)
0006DD12 4E75                       		rts	
0006DD14                            ; ===========================================================================
0006DD14                            
0006DD14                            loc_72E26:				; XREF: loc_72A64
0006DD14 1B5C 000B                  		move.b	(a4)+,$B(a5)
0006DD18 4E75                       		rts	
0006DD1A                            ; ===========================================================================
0006DD1A                            
0006DD1A                            loc_72E2C:				; XREF: loc_72A64
0006DD1A 101C                       		move.b	(a4)+,d0
0006DD1C E148                       		lsl.w	#8,d0
0006DD1E 101C                       		move.b	(a4)+,d0
0006DD20 D8C0                       		adda.w	d0,a4
0006DD22 534C                       		subq.w	#1,a4
0006DD24 4E75                       		rts	
0006DD26                            ; ===========================================================================
0006DD26                            
0006DD26                            loc_72E38:				; XREF: loc_72A64
0006DD26 7000                       		moveq	#0,d0
0006DD28 101C                       		move.b	(a4)+,d0
0006DD2A 121C                       		move.b	(a4)+,d1
0006DD2C 4A35 0024                  		tst.b	$24(a5,d0.w)
0006DD30 6600                       		bne.s	loc_72E48
0006DD32 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0006DD36                            
0006DD36                            loc_72E48:
0006DD36 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0006DD3A 66DE                       		bne.s	loc_72E2C
0006DD3C 544C                       		addq.w	#2,a4
0006DD3E 4E75                       		rts	
0006DD40                            ; ===========================================================================
0006DD40                            
0006DD40                            loc_72E52:				; XREF: loc_72A64
0006DD40 7000                       		moveq	#0,d0
0006DD42 102D 000D                  		move.b	$D(a5),d0
0006DD46 5900                       		subq.b	#4,d0
0006DD48 2B8C 0000                  		move.l	a4,(a5,d0.w)
0006DD4C 1B40 000D                  		move.b	d0,$D(a5)
0006DD50 60C8                       		bra.s	loc_72E2C
0006DD52                            ; ===========================================================================
0006DD52                            
0006DD52                            loc_72E64:				; XREF: loc_72A64
0006DD52 103C 0088                  		move.b	#$88,d0
0006DD56 123C 000F                  		move.b	#$F,d1
0006DD5A 4EBA F8C2                  		jsr	sub_7272E(pc)
0006DD5E 103C 008C                  		move.b	#$8C,d0
0006DD62 123C 000F                  		move.b	#$F,d1
0006DD66 6000 F8B6                  		bra.w	sub_7272E
0006DD6A                            ; ===========================================================================
0006DD6A                            Kos_Z80:	incbin	sound\z80_1.bin
0006DE1A 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
0006DE1C 21                         		dc.b $21
0006DE1D 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
0006DE1F                            		incbin	sound\z80_2.bin
0006F4CA                            		even
0006F4CA                            Music81:	incbin	sound\jahl.bin
00075CCA                            		even
00075CCA                            Music82:	incbin	sound\music82.bin
0007611A                            		even
0007611A                            Music83:	incbin	sound\music83.bin
00076578                            		even
00076578                            Music84:	include	sound\music84.asm
00076578                            music84_Header:
00076578 =00000001                  smpsHeaderStartSong = 1
00076578 0000                       	smpsHeaderVoice     music84_Voices
0007657A 0603                       	smpsHeaderChan      $06, $03
0007657C 0205                       	smpsHeaderTempo     $02, $05
0007657E                            
00076582 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
00076586 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
0007658A 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
0007658E 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
00076592 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
00076596 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
0007659C 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
000765A2 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
000765A8                            
000765A8                            ; FM1 Data
000765A8                            music84_FM1:
000765A8 E0C0                       	smpsPan             panCenter, $00
000765AC E107                       	smpsAlterNote       $07
000765AE 9B03 8007                  	dc.b	nD2, $03, nRst, $07
000765B2 E106                       	smpsAlterNote       $06
000765B4 9903 800B                  	dc.b	nC2, $03, nRst, $0B
000765B8 E10B                       	smpsAlterNote       $0B
000765BA 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
000765C0 E10C                       	smpsAlterNote       $0C
000765C2 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000765C5 E10B                       	smpsAlterNote       $0B
000765C7 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000765CA E109                       	smpsAlterNote       $09
000765CC E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
000765D1 E108                       	smpsAlterNote       $08
000765D3 8001                       	dc.b	nRst, $01
000765D5 E10B                       	smpsAlterNote       $0B
000765D7 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
000765DD E107                       	smpsAlterNote       $07
000765DF 9B03                       	dc.b	nD2, $03
000765E1                            
000765E1                            music84_Jump04:
000765E1 E107                       	smpsAlterNote       $07
000765E3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000765E7 E10B                       	smpsAlterNote       $0B
000765E9 A202 8001                  	dc.b	nA2, $02, nRst, $01
000765ED E107                       	smpsAlterNote       $07
000765EF 9B03                       	dc.b	nD2, $03
000765F1 E11A                       	smpsAlterNote       $1A
000765F3 A301                       	dc.b	nBb2, $01
000765F5 E1F2                       	smpsAlterNote       $F2
000765F7 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000765FA E1FF                       	smpsAlterNote       $FF
000765FC E701                       	dc.b	smpsNoAttack, $01
000765FE E111                       	smpsAlterNote       $11
00076600 E701                       	dc.b	smpsNoAttack, $01
00076602 E106                       	smpsAlterNote       $06
00076604 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00076607 E107                       	smpsAlterNote       $07
00076609 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0007660D E108                       	smpsAlterNote       $08
0007660F 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
00076617 E109                       	smpsAlterNote       $09
00076619 A003                       	dc.b	nG2, $03
0007661B E10C                       	smpsAlterNote       $0C
0007661D A303 8001                  	dc.b	nBb2, $03, nRst, $01
00076621 E1FD                       	smpsAlterNote       $FD
00076623 A401                       	dc.b	nB2, $01
00076625 E109                       	smpsAlterNote       $09
00076627 E701                       	dc.b	smpsNoAttack, $01
00076629 E106                       	smpsAlterNote       $06
0007662B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0007662E E109                       	smpsAlterNote       $09
00076630 A007                       	dc.b	nG2, $07
00076632 E108                       	smpsAlterNote       $08
00076634 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00076638 E107                       	smpsAlterNote       $07
0007663A 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00076640 E10B                       	smpsAlterNote       $0B
00076642 A203 8001                  	dc.b	nA2, $03, nRst, $01
00076646 E107                       	smpsAlterNote       $07
00076648 9B03                       	dc.b	nD2, $03
0007664A E11A                       	smpsAlterNote       $1A
0007664C A301                       	dc.b	nBb2, $01
0007664E E1F9                       	smpsAlterNote       $F9
00076650 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00076653 E107                       	smpsAlterNote       $07
00076655 E701                       	dc.b	smpsNoAttack, $01
00076657 E111                       	smpsAlterNote       $11
00076659 E701                       	dc.b	smpsNoAttack, $01
0007665B E106                       	smpsAlterNote       $06
0007665D E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00076662 E107                       	smpsAlterNote       $07
00076664 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0007666C E1EC                       	smpsAlterNote       $EC
0007666E A101                       	dc.b	nAb2, $01
00076670 E108                       	smpsAlterNote       $08
00076672 E701                       	dc.b	smpsNoAttack, $01
00076674 E116                       	smpsAlterNote       $16
00076676 E701                       	dc.b	smpsNoAttack, $01
00076678 E1F5                       	smpsAlterNote       $F5
0007667A E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0007667D E10B                       	smpsAlterNote       $0B
0007667F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00076683 E107                       	smpsAlterNote       $07
00076685 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0007668B E109                       	smpsAlterNote       $09
0007668D 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00076691 E10B                       	smpsAlterNote       $0B
00076693 9603                       	dc.b	nA1, $03
00076695 E107                       	smpsAlterNote       $07
00076697 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0007669D E10B                       	smpsAlterNote       $0B
0007669F A203 8001                  	dc.b	nA2, $03, nRst, $01
000766A3 E107                       	smpsAlterNote       $07
000766A5 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000766A9 E11A                       	smpsAlterNote       $1A
000766AB A301                       	dc.b	nBb2, $01
000766AD E1F9                       	smpsAlterNote       $F9
000766AF E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000766B2 E107                       	smpsAlterNote       $07
000766B4 E701                       	dc.b	smpsNoAttack, $01
000766B6 E1FB                       	smpsAlterNote       $FB
000766B8 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000766BB E106                       	smpsAlterNote       $06
000766BD E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000766C1 E107                       	smpsAlterNote       $07
000766C3 9B03                       	dc.b	nD2, $03
000766C5 E108                       	smpsAlterNote       $08
000766C7 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000766CD E109                       	smpsAlterNote       $09
000766CF A002 8001                  	dc.b	nG2, $02, nRst, $01
000766D3 E10C                       	smpsAlterNote       $0C
000766D5 A303                       	dc.b	nBb2, $03
000766D7 E1F0                       	smpsAlterNote       $F0
000766D9 A401                       	dc.b	nB2, $01
000766DB E1FD                       	smpsAlterNote       $FD
000766DD E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
000766E2 E106                       	smpsAlterNote       $06
000766E4 8001                       	dc.b	nRst, $01
000766E6 E109                       	smpsAlterNote       $09
000766E8 A006 8001                  	dc.b	nG2, $06, nRst, $01
000766EC E108                       	smpsAlterNote       $08
000766EE 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
000766F2 E107                       	smpsAlterNote       $07
000766F4 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000766FA E10B                       	smpsAlterNote       $0B
000766FC A203                       	dc.b	nA2, $03
000766FE E107                       	smpsAlterNote       $07
00076700 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00076704 E1F2                       	smpsAlterNote       $F2
00076706 A401                       	dc.b	nB2, $01
00076708 E1FF                       	smpsAlterNote       $FF
0007670A E701                       	dc.b	smpsNoAttack, $01
0007670C E107                       	smpsAlterNote       $07
0007670E E701                       	dc.b	smpsNoAttack, $01
00076710 E1FB                       	smpsAlterNote       $FB
00076712 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00076715 E106                       	smpsAlterNote       $06
00076717 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0007671B E107                       	smpsAlterNote       $07
0007671D 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
00076727 E117                       	smpsAlterNote       $17
00076729 A001                       	dc.b	nG2, $01
0007672B E1FA                       	smpsAlterNote       $FA
0007672D E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00076730 E108                       	smpsAlterNote       $08
00076732 E701                       	dc.b	smpsNoAttack, $01
00076734 E1E7                       	smpsAlterNote       $E7
00076736 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00076739 E103                       	smpsAlterNote       $03
0007673B E701                       	dc.b	smpsNoAttack, $01
0007673D E10B                       	smpsAlterNote       $0B
0007673F E702                       	dc.b	smpsNoAttack, $02
00076741 E107                       	smpsAlterNote       $07
00076743 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
0007674B E106                       	smpsAlterNote       $06
0007674D 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
00076753 E10C                       	smpsAlterNote       $0C
00076755 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
0007675B E109                       	smpsAlterNote       $09
0007675D 9E03                       	dc.b	nF2, $03
0007675F E10C                       	smpsAlterNote       $0C
00076761 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00076765 E1EA                       	smpsAlterNote       $EA
00076767 A201                       	dc.b	nA2, $01
00076769 E106                       	smpsAlterNote       $06
0007676B E701                       	dc.b	smpsNoAttack, $01
0007676D E1E2                       	smpsAlterNote       $E2
0007676F E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00076772 E1F0                       	smpsAlterNote       $F0
00076774 E701                       	dc.b	smpsNoAttack, $01
00076776 E10C                       	smpsAlterNote       $0C
00076778 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00076784 E116                       	smpsAlterNote       $16
00076786 9C01                       	dc.b	nEb2, $01
00076788 E105                       	smpsAlterNote       $05
0007678A E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0007678D E1F1                       	smpsAlterNote       $F1
0007678F E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00076792 E1FF                       	smpsAlterNote       $FF
00076794 E701                       	dc.b	smpsNoAttack, $01
00076796 E109                       	smpsAlterNote       $09
00076798 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0007679C E10C                       	smpsAlterNote       $0C
0007679E 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000767AA 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
000767B0 E109                       	smpsAlterNote       $09
000767B2 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000767B6 E10C                       	smpsAlterNote       $0C
000767B8 9703                       	dc.b	nBb1, $03
000767BA E11A                       	smpsAlterNote       $1A
000767BC A101                       	dc.b	nAb2, $01
000767BE E1FB                       	smpsAlterNote       $FB
000767C0 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000767C3 E10A                       	smpsAlterNote       $0A
000767C5 E701                       	dc.b	smpsNoAttack, $01
000767C7 E1E8                       	smpsAlterNote       $E8
000767C9 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000767CC E106                       	smpsAlterNote       $06
000767CE E701                       	dc.b	smpsNoAttack, $01
000767D0 E10C                       	smpsAlterNote       $0C
000767D2 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
000767DE E1F9                       	smpsAlterNote       $F9
000767E0 9D01                       	dc.b	nE2, $01
000767E2 E108                       	smpsAlterNote       $08
000767E4 E701                       	dc.b	smpsNoAttack, $01
000767E6 E1F6                       	smpsAlterNote       $F6
000767E8 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000767EB E109                       	smpsAlterNote       $09
000767ED E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
000767F1 E10C                       	smpsAlterNote       $0C
000767F3 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
000767FF E108                       	smpsAlterNote       $08
00076801 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00076807 E106                       	smpsAlterNote       $06
00076809 A403 8001                  	dc.b	nB2, $03, nRst, $01
0007680D E108                       	smpsAlterNote       $08
0007680F 9D03                       	dc.b	nE2, $03
00076811 E1EB                       	smpsAlterNote       $EB
00076813 A801                       	dc.b	nEb3, $01
00076815 E109                       	smpsAlterNote       $09
00076817 E701                       	dc.b	smpsNoAttack, $01
00076819 E1FA                       	smpsAlterNote       $FA
0007681B E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0007681E E108                       	smpsAlterNote       $08
00076820 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
0007682C E1E9                       	smpsAlterNote       $E9
0007682E A301                       	dc.b	nBb2, $01
00076830 E107                       	smpsAlterNote       $07
00076832 E701                       	dc.b	smpsNoAttack, $01
00076834 E1F0                       	smpsAlterNote       $F0
00076836 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00076839 E1F7                       	smpsAlterNote       $F7
0007683B E701                       	dc.b	smpsNoAttack, $01
0007683D E107                       	smpsAlterNote       $07
0007683F E701                       	dc.b	smpsNoAttack, $01
00076841 E106                       	smpsAlterNote       $06
00076843 E701                       	dc.b	smpsNoAttack, $01
00076845 E108                       	smpsAlterNote       $08
00076847 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0007684D E106                       	smpsAlterNote       $06
0007684F A403 8001                  	dc.b	nB2, $03, nRst, $01
00076853 E108                       	smpsAlterNote       $08
00076855 9D03                       	dc.b	nE2, $03
00076857 E10B                       	smpsAlterNote       $0B
00076859 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
00076861 E108                       	smpsAlterNote       $08
00076863 9D03                       	dc.b	nE2, $03
00076865 E10B                       	smpsAlterNote       $0B
00076867 9603 8001                  	dc.b	nA1, $03, nRst, $01
0007686B E113                       	smpsAlterNote       $13
0007686D A001                       	dc.b	nG2, $01
0007686F E118                       	smpsAlterNote       $18
00076871 E701                       	dc.b	smpsNoAttack, $01
00076873 E1E9                       	smpsAlterNote       $E9
00076875 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00076878 E1F3                       	smpsAlterNote       $F3
0007687A E701                       	dc.b	smpsNoAttack, $01
0007687C E1FD                       	smpsAlterNote       $FD
0007687E E701                       	dc.b	smpsNoAttack, $01
00076880 E102                       	smpsAlterNote       $02
00076882 E701                       	dc.b	smpsNoAttack, $01
00076884 E107                       	smpsAlterNote       $07
00076886 8001                       	dc.b	nRst, $01
00076888 E10B                       	smpsAlterNote       $0B
0007688A 9603                       	dc.b	nA1, $03
0007688C E10C                       	smpsAlterNote       $0C
0007688E 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
00076894 E10B                       	smpsAlterNote       $0B
00076896 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000768A2 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
000768A8 E107                       	smpsAlterNote       $07
000768AA 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000768B0 E10B                       	smpsAlterNote       $0B
000768B2 A203                       	dc.b	nA2, $03
000768B4 E107                       	smpsAlterNote       $07
000768B6 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000768BA E1F2                       	smpsAlterNote       $F2
000768BC A401                       	dc.b	nB2, $01
000768BE E1FF                       	smpsAlterNote       $FF
000768C0 E701                       	dc.b	smpsNoAttack, $01
000768C2 E107                       	smpsAlterNote       $07
000768C4 E701                       	dc.b	smpsNoAttack, $01
000768C6 E1FB                       	smpsAlterNote       $FB
000768C8 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000768CB E106                       	smpsAlterNote       $06
000768CD E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000768D1 E107                       	smpsAlterNote       $07
000768D3 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000768D7 E108                       	smpsAlterNote       $08
000768D9 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000768DF E109                       	smpsAlterNote       $09
000768E1 A003 8001                  	dc.b	nG2, $03, nRst, $01
000768E5 E10C                       	smpsAlterNote       $0C
000768E7 A302 8001                  	dc.b	nBb2, $02, nRst, $01
000768EB E1F0                       	smpsAlterNote       $F0
000768ED A401                       	dc.b	nB2, $01
000768EF E109                       	smpsAlterNote       $09
000768F1 E701                       	dc.b	smpsNoAttack, $01
000768F3 E106                       	smpsAlterNote       $06
000768F5 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000768F8 E109                       	smpsAlterNote       $09
000768FA A007                       	dc.b	nG2, $07
000768FC E108                       	smpsAlterNote       $08
000768FE 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00076902 E107                       	smpsAlterNote       $07
00076904 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0007690A E10B                       	smpsAlterNote       $0B
0007690C A202 8001                  	dc.b	nA2, $02, nRst, $01
00076910 E107                       	smpsAlterNote       $07
00076912 9B03                       	dc.b	nD2, $03
00076914 E11A                       	smpsAlterNote       $1A
00076916 A301                       	dc.b	nBb2, $01
00076918 E1F2                       	smpsAlterNote       $F2
0007691A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0007691D E1FF                       	smpsAlterNote       $FF
0007691F E701                       	dc.b	smpsNoAttack, $01
00076921 E111                       	smpsAlterNote       $11
00076923 E701                       	dc.b	smpsNoAttack, $01
00076925 E106                       	smpsAlterNote       $06
00076927 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0007692A E107                       	smpsAlterNote       $07
0007692C 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00076938 E117                       	smpsAlterNote       $17
0007693A A001                       	dc.b	nG2, $01
0007693C E1FA                       	smpsAlterNote       $FA
0007693E E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00076941 E116                       	smpsAlterNote       $16
00076943 E701                       	dc.b	smpsNoAttack, $01
00076945 E1F5                       	smpsAlterNote       $F5
00076947 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0007694A E103                       	smpsAlterNote       $03
0007694C E701                       	dc.b	smpsNoAttack, $01
0007694E E10B                       	smpsAlterNote       $0B
00076950 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00076954 E107                       	smpsAlterNote       $07
00076956 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0007695C E109                       	smpsAlterNote       $09
0007695E 9E03                       	dc.b	nF2, $03
00076960 E10B                       	smpsAlterNote       $0B
00076962 9603 8001                  	dc.b	nA1, $03, nRst, $01
00076966 E107                       	smpsAlterNote       $07
00076968 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0007696E E10B                       	smpsAlterNote       $0B
00076970 A203 8001                  	dc.b	nA2, $03, nRst, $01
00076974 E107                       	smpsAlterNote       $07
00076976 9B03                       	dc.b	nD2, $03
00076978 E11A                       	smpsAlterNote       $1A
0007697A A301                       	dc.b	nBb2, $01
0007697C E1F9                       	smpsAlterNote       $F9
0007697E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00076981 E107                       	smpsAlterNote       $07
00076983 E701                       	dc.b	smpsNoAttack, $01
00076985 E111                       	smpsAlterNote       $11
00076987 E701                       	dc.b	smpsNoAttack, $01
00076989 E106                       	smpsAlterNote       $06
0007698B E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00076990 E107                       	smpsAlterNote       $07
00076992 9B03                       	dc.b	nD2, $03
00076994 E108                       	smpsAlterNote       $08
00076996 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0007699C E109                       	smpsAlterNote       $09
0007699E A003                       	dc.b	nG2, $03
000769A0 E10C                       	smpsAlterNote       $0C
000769A2 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000769A6 E1FD                       	smpsAlterNote       $FD
000769A8 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
000769AD E106                       	smpsAlterNote       $06
000769AF 8001                       	dc.b	nRst, $01
000769B1 E109                       	smpsAlterNote       $09
000769B3 A006 8001                  	dc.b	nG2, $06, nRst, $01
000769B7 E108                       	smpsAlterNote       $08
000769B9 9C03                       	dc.b	nEb2, $03
000769BB E107                       	smpsAlterNote       $07
000769BD 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000769C3 E10B                       	smpsAlterNote       $0B
000769C5 A203 8001                  	dc.b	nA2, $03, nRst, $01
000769C9 E107                       	smpsAlterNote       $07
000769CB 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000769CF E11A                       	smpsAlterNote       $1A
000769D1 A301                       	dc.b	nBb2, $01
000769D3 E1F9                       	smpsAlterNote       $F9
000769D5 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000769D8 E107                       	smpsAlterNote       $07
000769DA E701                       	dc.b	smpsNoAttack, $01
000769DC E1FB                       	smpsAlterNote       $FB
000769DE E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000769E1 E106                       	smpsAlterNote       $06
000769E3 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000769E7 E107                       	smpsAlterNote       $07
000769E9 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000769F1 E1EC                       	smpsAlterNote       $EC
000769F3 A101                       	dc.b	nAb2, $01
000769F5 E108                       	smpsAlterNote       $08
000769F7 E701                       	dc.b	smpsNoAttack, $01
000769F9 E1E7                       	smpsAlterNote       $E7
000769FB E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000769FE E1F5                       	smpsAlterNote       $F5
00076A00 E701                       	dc.b	smpsNoAttack, $01
00076A02 E10B                       	smpsAlterNote       $0B
00076A04 E702                       	dc.b	smpsNoAttack, $02
00076A06 E107                       	smpsAlterNote       $07
00076A08 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00076A0E E106                       	smpsAlterNote       $06
00076A10 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00076A16 E10C                       	smpsAlterNote       $0C
00076A18 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00076A20 E109                       	smpsAlterNote       $09
00076A22 9E03                       	dc.b	nF2, $03
00076A24 E10C                       	smpsAlterNote       $0C
00076A26 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00076A2A E1EA                       	smpsAlterNote       $EA
00076A2C A201                       	dc.b	nA2, $01
00076A2E E106                       	smpsAlterNote       $06
00076A30 E701                       	dc.b	smpsNoAttack, $01
00076A32 E114                       	smpsAlterNote       $14
00076A34 E701                       	dc.b	smpsNoAttack, $01
00076A36 E1F0                       	smpsAlterNote       $F0
00076A38 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00076A3B E10C                       	smpsAlterNote       $0C
00076A3D E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00076A49 9703                       	dc.b	nBb1, $03
00076A4B E116                       	smpsAlterNote       $16
00076A4D 9C01                       	dc.b	nEb2, $01
00076A4F E105                       	smpsAlterNote       $05
00076A51 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00076A54 E113                       	smpsAlterNote       $13
00076A56 E701                       	dc.b	smpsNoAttack, $01
00076A58 E1FF                       	smpsAlterNote       $FF
00076A5A E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00076A5D E109                       	smpsAlterNote       $09
00076A5F E703                       	dc.b	smpsNoAttack, $03
00076A61 E10C                       	smpsAlterNote       $0C
00076A63 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00076A6F 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00076A77 E109                       	smpsAlterNote       $09
00076A79 9E03                       	dc.b	nF2, $03
00076A7B E10C                       	smpsAlterNote       $0C
00076A7D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00076A81 E1EC                       	smpsAlterNote       $EC
00076A83 A201                       	dc.b	nA2, $01
00076A85 E10A                       	smpsAlterNote       $0A
00076A87 E701                       	dc.b	smpsNoAttack, $01
00076A89 E1E8                       	smpsAlterNote       $E8
00076A8B E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00076A8E E1F7                       	smpsAlterNote       $F7
00076A90 E701                       	dc.b	smpsNoAttack, $01
00076A92 E10C                       	smpsAlterNote       $0C
00076A94 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00076AA0 E1EA                       	smpsAlterNote       $EA
00076AA2 9D01                       	dc.b	nE2, $01
00076AA4 E108                       	smpsAlterNote       $08
00076AA6 E701                       	dc.b	smpsNoAttack, $01
00076AA8 E1F6                       	smpsAlterNote       $F6
00076AAA E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00076AAD E105                       	smpsAlterNote       $05
00076AAF E701                       	dc.b	smpsNoAttack, $01
00076AB1 E109                       	smpsAlterNote       $09
00076AB3 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00076AB7 E10C                       	smpsAlterNote       $0C
00076AB9 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00076AC5 E108                       	smpsAlterNote       $08
00076AC7 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00076ACD E106                       	smpsAlterNote       $06
00076ACF A403 8001                  	dc.b	nB2, $03, nRst, $01
00076AD3 E108                       	smpsAlterNote       $08
00076AD5 9D03                       	dc.b	nE2, $03
00076AD7 E1EB                       	smpsAlterNote       $EB
00076AD9 A801                       	dc.b	nEb3, $01
00076ADB E109                       	smpsAlterNote       $09
00076ADD E701                       	dc.b	smpsNoAttack, $01
00076ADF E1EB                       	smpsAlterNote       $EB
00076AE1 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00076AE4 E108                       	smpsAlterNote       $08
00076AE6 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
00076AF2 E1E9                       	smpsAlterNote       $E9
00076AF4 A301                       	dc.b	nBb2, $01
00076AF6 E1F8                       	smpsAlterNote       $F8
00076AF8 E701                       	dc.b	smpsNoAttack, $01
00076AFA E116                       	smpsAlterNote       $16
00076AFC E701                       	dc.b	smpsNoAttack, $01
00076AFE E1F7                       	smpsAlterNote       $F7
00076B00 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00076B03 E107                       	smpsAlterNote       $07
00076B05 E701                       	dc.b	smpsNoAttack, $01
00076B07 E1EE                       	smpsAlterNote       $EE
00076B09 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00076B0C E106                       	smpsAlterNote       $06
00076B0E 8001                       	dc.b	nRst, $01
00076B10 E108                       	smpsAlterNote       $08
00076B12 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00076B18 E106                       	smpsAlterNote       $06
00076B1A A402 8001                  	dc.b	nB2, $02, nRst, $01
00076B1E E108                       	smpsAlterNote       $08
00076B20 9D03                       	dc.b	nE2, $03
00076B22 E10B                       	smpsAlterNote       $0B
00076B24 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00076B2A E108                       	smpsAlterNote       $08
00076B2C 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00076B30 E10B                       	smpsAlterNote       $0B
00076B32 9603                       	dc.b	nA1, $03
00076B34 E10E                       	smpsAlterNote       $0E
00076B36 A001                       	dc.b	nG2, $01
00076B38 E118                       	smpsAlterNote       $18
00076B3A E701                       	dc.b	smpsNoAttack, $01
00076B3C E1E9                       	smpsAlterNote       $E9
00076B3E E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00076B41 E1EE                       	smpsAlterNote       $EE
00076B43 E701                       	dc.b	smpsNoAttack, $01
00076B45 E1F8                       	smpsAlterNote       $F8
00076B47 E701                       	dc.b	smpsNoAttack, $01
00076B49 E102                       	smpsAlterNote       $02
00076B4B E701                       	dc.b	smpsNoAttack, $01
00076B4D E107                       	smpsAlterNote       $07
00076B4F 8001                       	dc.b	nRst, $01
00076B51 E10B                       	smpsAlterNote       $0B
00076B53 9603                       	dc.b	nA1, $03
00076B55 E10C                       	smpsAlterNote       $0C
00076B57 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00076B5D E10B                       	smpsAlterNote       $0B
00076B5F 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00076B6B 8001 9603                  	dc.b	nRst, $01, nA1, $03
00076B6F E10C                       	smpsAlterNote       $0C
00076B71 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00076B7D 8001                       	dc.b	nRst, $01
00076B7F E10B                       	smpsAlterNote       $0B
00076B81 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00076B89 E107                       	smpsAlterNote       $07
00076B8B 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00076B8F E10B                       	smpsAlterNote       $0B
00076B91 9603                       	dc.b	nA1, $03
00076B93 E109                       	smpsAlterNote       $09
00076B95 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00076B99 E108                       	smpsAlterNote       $08
00076B9B 9D06                       	dc.b	nE2, $06
00076B9D E107                       	smpsAlterNote       $07
00076B9F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00076BA3 E106                       	smpsAlterNote       $06
00076BA5 9903                       	dc.b	nC2, $03
00076BA7 E10C                       	smpsAlterNote       $0C
00076BA9 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00076BAD E10B                       	smpsAlterNote       $0B
00076BAF 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00076BBB 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00076BC5 E10C                       	smpsAlterNote       $0C
00076BC7 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00076BD3 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00076BDF 8001                       	dc.b	nRst, $01
00076BE1 E10B                       	smpsAlterNote       $0B
00076BE3 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00076BEF 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00076BFB 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00076C07 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00076C11 E10C                       	smpsAlterNote       $0C
00076C13 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00076C1F E10B                       	smpsAlterNote       $0B
00076C21 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00076C29 E107                       	smpsAlterNote       $07
00076C2B 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00076C2F E10B                       	smpsAlterNote       $0B
00076C31 9603                       	dc.b	nA1, $03
00076C33 E109                       	smpsAlterNote       $09
00076C35 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00076C39 E108                       	smpsAlterNote       $08
00076C3B 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00076C3F E107                       	smpsAlterNote       $07
00076C41 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00076C45 E106                       	smpsAlterNote       $06
00076C47 9903                       	dc.b	nC2, $03
00076C49 E10C                       	smpsAlterNote       $0C
00076C4B 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00076C4F E10B                       	smpsAlterNote       $0B
00076C51 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00076C5D 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00076C67 E10C                       	smpsAlterNote       $0C
00076C69 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00076C75 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00076C81 8001                       	dc.b	nRst, $01
00076C83 E10B                       	smpsAlterNote       $0B
00076C85 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00076C91 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00076C9B E10C                       	smpsAlterNote       $0C
00076C9D 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00076CA9 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00076CB5 E10B                       	smpsAlterNote       $0B
00076CB7 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00076CC3 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00076CCD E10C                       	smpsAlterNote       $0C
00076CCF 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00076CDB 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00076CE7 E10B                       	smpsAlterNote       $0B
00076CE9 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00076CF5 8001                       	dc.b	nRst, $01
00076CF7 E1EC                       	smpsAlterNote       $EC
00076CF9 A101                       	dc.b	nAb2, $01
00076CFB E1FA                       	smpsAlterNote       $FA
00076CFD E701                       	dc.b	smpsNoAttack, $01
00076CFF E116                       	smpsAlterNote       $16
00076D01 E701                       	dc.b	smpsNoAttack, $01
00076D03 E1F5                       	smpsAlterNote       $F5
00076D05 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00076D08 E10B                       	smpsAlterNote       $0B
00076D0A E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00076D16 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00076D22 E107                       	smpsAlterNote       $07
00076D24 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00076D2A E10B                       	smpsAlterNote       $0B
00076D2C A203                       	dc.b	nA2, $03
00076D2E E107                       	smpsAlterNote       $07
00076D30 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00076D34 E1F3                       	smpsAlterNote       $F3
00076D36 A401                       	dc.b	nB2, $01
00076D38 E102                       	smpsAlterNote       $02
00076D3A E701                       	dc.b	smpsNoAttack, $01
00076D3C E109                       	smpsAlterNote       $09
00076D3E E701                       	dc.b	smpsNoAttack, $01
00076D40 E102                       	smpsAlterNote       $02
00076D42 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00076D45 E106                       	smpsAlterNote       $06
00076D47 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00076D4B E107                       	smpsAlterNote       $07
00076D4D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00076D51 E108                       	smpsAlterNote       $08
00076D53 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00076D59 E109                       	smpsAlterNote       $09
00076D5B A003 8001                  	dc.b	nG2, $03, nRst, $01
00076D5F E1F2                       	smpsAlterNote       $F2
00076D61 A401                       	dc.b	nB2, $01
00076D63 E1FF                       	smpsAlterNote       $FF
00076D65 E701                       	dc.b	smpsNoAttack, $01
00076D67 E111                       	smpsAlterNote       $11
00076D69 E701                       	dc.b	smpsNoAttack, $01
00076D6B E1FB                       	smpsAlterNote       $FB
00076D6D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00076D70 E106                       	smpsAlterNote       $06
00076D72 E702                       	dc.b	smpsNoAttack, $02
00076D74 E109                       	smpsAlterNote       $09
00076D76 A007                       	dc.b	nG2, $07
00076D78 E108                       	smpsAlterNote       $08
00076D7A 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00076D7E E107                       	smpsAlterNote       $07
00076D80 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00076D86 E10B                       	smpsAlterNote       $0B
00076D88 A202 8001                  	dc.b	nA2, $02, nRst, $01
00076D8C E107                       	smpsAlterNote       $07
00076D8E 9B03                       	dc.b	nD2, $03
00076D90 E11A                       	smpsAlterNote       $1A
00076D92 A301                       	dc.b	nBb2, $01
00076D94 E1F2                       	smpsAlterNote       $F2
00076D96 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00076D99 E1FF                       	smpsAlterNote       $FF
00076D9B E701                       	dc.b	smpsNoAttack, $01
00076D9D E111                       	smpsAlterNote       $11
00076D9F E701                       	dc.b	smpsNoAttack, $01
00076DA1 E106                       	smpsAlterNote       $06
00076DA3 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00076DA6 E107                       	smpsAlterNote       $07
00076DA8 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00076DB4 E117                       	smpsAlterNote       $17
00076DB6 A001                       	dc.b	nG2, $01
00076DB8 E1FA                       	smpsAlterNote       $FA
00076DBA E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00076DBD E116                       	smpsAlterNote       $16
00076DBF E701                       	dc.b	smpsNoAttack, $01
00076DC1 E1F5                       	smpsAlterNote       $F5
00076DC3 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00076DC6 E103                       	smpsAlterNote       $03
00076DC8 E701                       	dc.b	smpsNoAttack, $01
00076DCA E10B                       	smpsAlterNote       $0B
00076DCC E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00076DD0 E107                       	smpsAlterNote       $07
00076DD2 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00076DD8 E109                       	smpsAlterNote       $09
00076DDA 9E03                       	dc.b	nF2, $03
00076DDC E10B                       	smpsAlterNote       $0B
00076DDE 9603 8001                  	dc.b	nA1, $03, nRst, $01
00076DE2 E107                       	smpsAlterNote       $07
00076DE4 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00076DEA E10B                       	smpsAlterNote       $0B
00076DEC A203 8001                  	dc.b	nA2, $03, nRst, $01
00076DF0 E107                       	smpsAlterNote       $07
00076DF2 9B03                       	dc.b	nD2, $03
00076DF4 E11A                       	smpsAlterNote       $1A
00076DF6 A301                       	dc.b	nBb2, $01
00076DF8 E1F9                       	smpsAlterNote       $F9
00076DFA E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00076DFD E1FF                       	smpsAlterNote       $FF
00076DFF E701                       	dc.b	smpsNoAttack, $01
00076E01 E111                       	smpsAlterNote       $11
00076E03 E701                       	dc.b	smpsNoAttack, $01
00076E05 E106                       	smpsAlterNote       $06
00076E07 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00076E0A E107                       	smpsAlterNote       $07
00076E0C 9B03                       	dc.b	nD2, $03
00076E0E E108                       	smpsAlterNote       $08
00076E10 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00076E16 E109                       	smpsAlterNote       $09
00076E18 A003                       	dc.b	nG2, $03
00076E1A E1F0                       	smpsAlterNote       $F0
00076E1C A501                       	dc.b	nC3, $01
00076E1E E106                       	smpsAlterNote       $06
00076E20 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00076E24 E109                       	smpsAlterNote       $09
00076E26 A006 8001                  	dc.b	nG2, $06, nRst, $01
00076E2A E108                       	smpsAlterNote       $08
00076E2C 9C03                       	dc.b	nEb2, $03
00076E2E E107                       	smpsAlterNote       $07
00076E30 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00076E36 E10B                       	smpsAlterNote       $0B
00076E38 A203 8001                  	dc.b	nA2, $03, nRst, $01
00076E3C E107                       	smpsAlterNote       $07
00076E3E 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00076E42 E11A                       	smpsAlterNote       $1A
00076E44 A301                       	dc.b	nBb2, $01
00076E46 E1F9                       	smpsAlterNote       $F9
00076E48 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00076E4B E107                       	smpsAlterNote       $07
00076E4D E701                       	dc.b	smpsNoAttack, $01
00076E4F E1FB                       	smpsAlterNote       $FB
00076E51 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00076E54 E106                       	smpsAlterNote       $06
00076E56 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00076E5A E107                       	smpsAlterNote       $07
00076E5C 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00076E64 E1EC                       	smpsAlterNote       $EC
00076E66 A101                       	dc.b	nAb2, $01
00076E68 E108                       	smpsAlterNote       $08
00076E6A E701                       	dc.b	smpsNoAttack, $01
00076E6C E1E7                       	smpsAlterNote       $E7
00076E6E E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00076E71 E1F5                       	smpsAlterNote       $F5
00076E73 E701                       	dc.b	smpsNoAttack, $01
00076E75 E10B                       	smpsAlterNote       $0B
00076E77 E702                       	dc.b	smpsNoAttack, $02
00076E79 E107                       	smpsAlterNote       $07
00076E7B 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00076E81 E106                       	smpsAlterNote       $06
00076E83 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00076E89 E10C                       	smpsAlterNote       $0C
00076E8B 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00076E93 E109                       	smpsAlterNote       $09
00076E95 9E03                       	dc.b	nF2, $03
00076E97 E10C                       	smpsAlterNote       $0C
00076E99 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00076E9D E1EA                       	smpsAlterNote       $EA
00076E9F A201                       	dc.b	nA2, $01
00076EA1 E106                       	smpsAlterNote       $06
00076EA3 E701                       	dc.b	smpsNoAttack, $01
00076EA5 E114                       	smpsAlterNote       $14
00076EA7 E701                       	dc.b	smpsNoAttack, $01
00076EA9 E1F0                       	smpsAlterNote       $F0
00076EAB E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00076EAE E10C                       	smpsAlterNote       $0C
00076EB0 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00076EBC 9703                       	dc.b	nBb1, $03
00076EBE E116                       	smpsAlterNote       $16
00076EC0 9C01                       	dc.b	nEb2, $01
00076EC2 E105                       	smpsAlterNote       $05
00076EC4 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00076EC7 E113                       	smpsAlterNote       $13
00076EC9 E701                       	dc.b	smpsNoAttack, $01
00076ECB E1FF                       	smpsAlterNote       $FF
00076ECD E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00076ED0 E109                       	smpsAlterNote       $09
00076ED2 E703                       	dc.b	smpsNoAttack, $03
00076ED4 E10C                       	smpsAlterNote       $0C
00076ED6 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00076EE2 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00076EEA E109                       	smpsAlterNote       $09
00076EEC 9E03                       	dc.b	nF2, $03
00076EEE E10C                       	smpsAlterNote       $0C
00076EF0 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00076EF4 E1EA                       	smpsAlterNote       $EA
00076EF6 A201                       	dc.b	nA2, $01
00076EF8 E106                       	smpsAlterNote       $06
00076EFA E701                       	dc.b	smpsNoAttack, $01
00076EFC E1E2                       	smpsAlterNote       $E2
00076EFE E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00076F01 E1F0                       	smpsAlterNote       $F0
00076F03 E701                       	dc.b	smpsNoAttack, $01
00076F05 E10C                       	smpsAlterNote       $0C
00076F07 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00076F13 E116                       	smpsAlterNote       $16
00076F15 9C01                       	dc.b	nEb2, $01
00076F17 E105                       	smpsAlterNote       $05
00076F19 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00076F1C E1F1                       	smpsAlterNote       $F1
00076F1E E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00076F21 E1FF                       	smpsAlterNote       $FF
00076F23 E701                       	dc.b	smpsNoAttack, $01
00076F25 E109                       	smpsAlterNote       $09
00076F27 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00076F2B E10C                       	smpsAlterNote       $0C
00076F2D 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00076F39 E106                       	smpsAlterNote       $06
00076F3B 9903                       	dc.b	nC2, $03
00076F3D E107                       	smpsAlterNote       $07
00076F3F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00076F43 E109                       	smpsAlterNote       $09
00076F45 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00076F4B E107                       	smpsAlterNote       $07
00076F4D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00076F51 E108                       	smpsAlterNote       $08
00076F53 9D03                       	dc.b	nE2, $03
00076F55 E10B                       	smpsAlterNote       $0B
00076F57 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00076F5D E109                       	smpsAlterNote       $09
00076F5F 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00076F65 E10C                       	smpsAlterNote       $0C
00076F67 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00076F6D E106                       	smpsAlterNote       $06
00076F6F 9903                       	dc.b	nC2, $03
00076F71 E11A                       	smpsAlterNote       $1A
00076F73 A301                       	dc.b	nBb2, $01
00076F75 E1F9                       	smpsAlterNote       $F9
00076F77 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00076F7A E1FF                       	smpsAlterNote       $FF
00076F7C E701                       	dc.b	smpsNoAttack, $01
00076F7E E111                       	smpsAlterNote       $11
00076F80 E701                       	dc.b	smpsNoAttack, $01
00076F82 E106                       	smpsAlterNote       $06
00076F84 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00076F8B E109                       	smpsAlterNote       $09
00076F8D A003                       	dc.b	nG2, $03
00076F8F E106                       	smpsAlterNote       $06
00076F91 9907                       	dc.b	nC2, $07
00076F93 E107                       	smpsAlterNote       $07
00076F95 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00076F9D E10B                       	smpsAlterNote       $0B
00076F9F A203                       	dc.b	nA2, $03
00076FA1 E107                       	smpsAlterNote       $07
00076FA3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00076FA7 E1F2                       	smpsAlterNote       $F2
00076FA9 A401                       	dc.b	nB2, $01
00076FAB E1F9                       	smpsAlterNote       $F9
00076FAD E701                       	dc.b	smpsNoAttack, $01
00076FAF E107                       	smpsAlterNote       $07
00076FB1 E701                       	dc.b	smpsNoAttack, $01
00076FB3 E1FB                       	smpsAlterNote       $FB
00076FB5 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00076FB8 E106                       	smpsAlterNote       $06
00076FBA E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00076FBE E107                       	smpsAlterNote       $07
00076FC0 9B03                       	dc.b	nD2, $03
00076FC2 E108                       	smpsAlterNote       $08
00076FC4 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00076FCA E109                       	smpsAlterNote       $09
00076FCC A003 8001                  	dc.b	nG2, $03, nRst, $01
00076FD0 E1F2                       	smpsAlterNote       $F2
00076FD2 A401                       	dc.b	nB2, $01
00076FD4 E1F9                       	smpsAlterNote       $F9
00076FD6 E701                       	dc.b	smpsNoAttack, $01
00076FD8 E107                       	smpsAlterNote       $07
00076FDA E701                       	dc.b	smpsNoAttack, $01
00076FDC E1FB                       	smpsAlterNote       $FB
00076FDE E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00076FE1 E106                       	smpsAlterNote       $06
00076FE3 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00076FE7 E108                       	smpsAlterNote       $08
00076FE9 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00076FED E10C                       	smpsAlterNote       $0C
00076FEF A302 8001                  	dc.b	nBb2, $02, nRst, $01
00076FF3 E107                       	smpsAlterNote       $07
00076FF5 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00076FFB E10B                       	smpsAlterNote       $0B
00076FFD A203                       	dc.b	nA2, $03
00076FFF E107                       	smpsAlterNote       $07
00077001 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00077005 E1F2                       	smpsAlterNote       $F2
00077007 A401                       	dc.b	nB2, $01
00077009 E1FF                       	smpsAlterNote       $FF
0007700B E701                       	dc.b	smpsNoAttack, $01
0007700D E107                       	smpsAlterNote       $07
0007700F E701                       	dc.b	smpsNoAttack, $01
00077011 E1FB                       	smpsAlterNote       $FB
00077013 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00077016 E106                       	smpsAlterNote       $06
00077018 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0007701C E107                       	smpsAlterNote       $07
0007701E 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00077022 E108                       	smpsAlterNote       $08
00077024 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0007702A E109                       	smpsAlterNote       $09
0007702C A003 8001                  	dc.b	nG2, $03, nRst, $01
00077030 E1F2                       	smpsAlterNote       $F2
00077032 A401                       	dc.b	nB2, $01
00077034 E1FF                       	smpsAlterNote       $FF
00077036 E701                       	dc.b	smpsNoAttack, $01
00077038 E111                       	smpsAlterNote       $11
0007703A E701                       	dc.b	smpsNoAttack, $01
0007703C E1FB                       	smpsAlterNote       $FB
0007703E E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00077041 E106                       	smpsAlterNote       $06
00077043 E702                       	dc.b	smpsNoAttack, $02
00077045 E108                       	smpsAlterNote       $08
00077047 9C07                       	dc.b	nEb2, $07
00077049 E10C                       	smpsAlterNote       $0C
0007704B A303 8001                  	dc.b	nBb2, $03, nRst, $01
0007704F E107                       	smpsAlterNote       $07
00077051 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00077057 E10B                       	smpsAlterNote       $0B
00077059 A202 8001                  	dc.b	nA2, $02, nRst, $01
0007705D E107                       	smpsAlterNote       $07
0007705F 9B03                       	dc.b	nD2, $03
00077061 E11A                       	smpsAlterNote       $1A
00077063 A301                       	dc.b	nBb2, $01
00077065 E1F2                       	smpsAlterNote       $F2
00077067 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0007706A E1FF                       	smpsAlterNote       $FF
0007706C E701                       	dc.b	smpsNoAttack, $01
0007706E E111                       	smpsAlterNote       $11
00077070 E701                       	dc.b	smpsNoAttack, $01
00077072 E106                       	smpsAlterNote       $06
00077074 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00077077 E107                       	smpsAlterNote       $07
00077079 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0007707D E108                       	smpsAlterNote       $08
0007707F 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
00077087 E109                       	smpsAlterNote       $09
00077089 A003                       	dc.b	nG2, $03
0007708B E11A                       	smpsAlterNote       $1A
0007708D A301                       	dc.b	nBb2, $01
0007708F E1F2                       	smpsAlterNote       $F2
00077091 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00077094 E1FF                       	smpsAlterNote       $FF
00077096 E701                       	dc.b	smpsNoAttack, $01
00077098 E111                       	smpsAlterNote       $11
0007709A E701                       	dc.b	smpsNoAttack, $01
0007709C E106                       	smpsAlterNote       $06
0007709E E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000770A1 E108                       	smpsAlterNote       $08
000770A3 9C07                       	dc.b	nEb2, $07
000770A5 E10C                       	smpsAlterNote       $0C
000770A7 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000770AB E107                       	smpsAlterNote       $07
000770AD 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
000770B9 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
000770C3 E108                       	smpsAlterNote       $08
000770C5 9C06                       	dc.b	nEb2, $06
000770C7 E10C                       	smpsAlterNote       $0C
000770C9 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000770CD E108                       	smpsAlterNote       $08
000770CF 9C03                       	dc.b	nEb2, $03
000770D1 E109                       	smpsAlterNote       $09
000770D3 A003 8001                  	dc.b	nG2, $03, nRst, $01
000770D7 E10C                       	smpsAlterNote       $0C
000770D9 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
000770E1 E107                       	smpsAlterNote       $07
000770E3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000770E7 F6F4 F8                    	smpsJump            music84_Jump04
000770EA                            
000770EA                            ; FM2 Data
000770EA                            music84_FM2:
000770EA E0C0                       	smpsPan             panCenter, $00
000770EE E10B                       	smpsAlterNote       $0B
000770F0 C603 8007                  	dc.b	nA5, $03, nRst, $07
000770F4 E109                       	smpsAlterNote       $09
000770F6 C403 800B                  	dc.b	nG5, $03, nRst, $0B
000770FA E108                       	smpsAlterNote       $08
000770FC C103 8004                  	dc.b	nE5, $03, nRst, $04
00077102 E080                       	smpsPan             panLeft, $00
00077104 E10C                       	smpsAlterNote       $0C
00077106 E6F9                       	smpsAlterVol        $F9
00077108 C703                       	dc.b	nBb5, $03
0007710A E10B                       	smpsAlterNote       $0B
0007710C C603 8001                  	dc.b	nA5, $03, nRst, $01
00077110 E109                       	smpsAlterNote       $09
00077112 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00077118 E108                       	smpsAlterNote       $08
0007711A C103 8001                  	dc.b	nE5, $03, nRst, $01
0007711E E106                       	smpsAlterNote       $06
00077120 BD03                       	dc.b	nC5, $03
00077122 E10B                       	smpsAlterNote       $0B
00077124 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0007712A E0C0                       	smpsPan             panCenter, $00
0007712C E107                       	smpsAlterNote       $07
0007712E E606                       	smpsAlterVol        $06
00077130 BF03                       	dc.b	nD5, $03
00077132                            
00077132                            music84_Jump03:
00077132 E108                       	smpsAlterNote       $08
00077134 C103 8001                  	dc.b	nE5, $03, nRst, $01
00077138 E109                       	smpsAlterNote       $09
0007713A C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00077140 E10B                       	smpsAlterNote       $0B
00077142 C607                       	dc.b	nA5, $07
00077144 E107                       	smpsAlterNote       $07
00077146 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0007714A E106                       	smpsAlterNote       $06
0007714C C90D                       	dc.b	nC6, $0D
0007714E E100                       	smpsAlterNote       $00
00077150 E701                       	dc.b	smpsNoAttack, $01
00077152 E1FF                       	smpsAlterNote       $FF
00077154 E701                       	dc.b	smpsNoAttack, $01
00077156 E103                       	smpsAlterNote       $03
00077158 E701                       	dc.b	smpsNoAttack, $01
0007715A E109                       	smpsAlterNote       $09
0007715C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077160 E106                       	smpsAlterNote       $06
00077162 E701                       	dc.b	smpsNoAttack, $01
00077164 E100                       	smpsAlterNote       $00
00077166 E701                       	dc.b	smpsNoAttack, $01
00077168 E10C                       	smpsAlterNote       $0C
0007716A C703 8001                  	dc.b	nBb5, $03, nRst, $01
0007716E E10B                       	smpsAlterNote       $0B
00077170 C603                       	dc.b	nA5, $03
00077172 E109                       	smpsAlterNote       $09
00077174 C403 8001                  	dc.b	nG5, $03, nRst, $01
00077178 E10B                       	smpsAlterNote       $0B
0007717A C60D                       	dc.b	nA5, $0D
0007717C E105                       	smpsAlterNote       $05
0007717E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077182 E10B                       	smpsAlterNote       $0B
00077184 E701                       	dc.b	smpsNoAttack, $01
00077186 E10E                       	smpsAlterNote       $0E
00077188 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007718C E108                       	smpsAlterNote       $08
0007718E E701                       	dc.b	smpsNoAttack, $01
00077190 E104                       	smpsAlterNote       $04
00077192 E701                       	dc.b	smpsNoAttack, $01
00077194 E105                       	smpsAlterNote       $05
00077196 E701                       	dc.b	smpsNoAttack, $01
00077198 E10B                       	smpsAlterNote       $0B
0007719A E701                       	dc.b	smpsNoAttack, $01
0007719C E10F                       	smpsAlterNote       $0F
0007719E E701                       	dc.b	smpsNoAttack, $01
000771A0 E10B                       	smpsAlterNote       $0B
000771A2 E701                       	dc.b	smpsNoAttack, $01
000771A4 E108                       	smpsAlterNote       $08
000771A6 E701                       	dc.b	smpsNoAttack, $01
000771A8 E104                       	smpsAlterNote       $04
000771AA E701                       	dc.b	smpsNoAttack, $01
000771AC E108                       	smpsAlterNote       $08
000771AE E701                       	dc.b	smpsNoAttack, $01
000771B0 E10E                       	smpsAlterNote       $0E
000771B2 E701                       	dc.b	smpsNoAttack, $01
000771B4 E10F                       	smpsAlterNote       $0F
000771B6 E701                       	dc.b	smpsNoAttack, $01
000771B8 E10B                       	smpsAlterNote       $0B
000771BA E701                       	dc.b	smpsNoAttack, $01
000771BC E105                       	smpsAlterNote       $05
000771BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000771C2 E108                       	smpsAlterNote       $08
000771C4 E701                       	dc.b	smpsNoAttack, $01
000771C6 E10E                       	smpsAlterNote       $0E
000771C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000771CC E108                       	smpsAlterNote       $08
000771CE E701                       	dc.b	smpsNoAttack, $01
000771D0 E105                       	smpsAlterNote       $05
000771D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000771D6 E10B                       	smpsAlterNote       $0B
000771D8 E701                       	dc.b	smpsNoAttack, $01
000771DA E10F                       	smpsAlterNote       $0F
000771DC E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000771E0 E107                       	smpsAlterNote       $07
000771E2 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000771E6 E108                       	smpsAlterNote       $08
000771E8 C103                       	dc.b	nE5, $03
000771EA E109                       	smpsAlterNote       $09
000771EC C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
000771F4 E10B                       	smpsAlterNote       $0B
000771F6 C606 8001                  	dc.b	nA5, $06, nRst, $01
000771FA E107                       	smpsAlterNote       $07
000771FC BF03                       	dc.b	nD5, $03
000771FE E106                       	smpsAlterNote       $06
00077200 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00077204 E107                       	smpsAlterNote       $07
00077206 CB03                       	dc.b	nD6, $03
00077208 E10C                       	smpsAlterNote       $0C
0007720A C704 8001                  	dc.b	nBb5, $04, nRst, $01
0007720E E10B                       	smpsAlterNote       $0B
00077210 C604 8001                  	dc.b	nA5, $04, nRst, $01
00077214 E109                       	smpsAlterNote       $09
00077216 C404                       	dc.b	nG5, $04
00077218 E10B                       	smpsAlterNote       $0B
0007721A C60D                       	dc.b	nA5, $0D
0007721C E108                       	smpsAlterNote       $08
0007721E E701                       	dc.b	smpsNoAttack, $01
00077220 E104                       	smpsAlterNote       $04
00077222 E701                       	dc.b	smpsNoAttack, $01
00077224 E108                       	smpsAlterNote       $08
00077226 E701                       	dc.b	smpsNoAttack, $01
00077228 E10B                       	smpsAlterNote       $0B
0007722A E701                       	dc.b	smpsNoAttack, $01
0007722C E10F                       	smpsAlterNote       $0F
0007722E E701                       	dc.b	smpsNoAttack, $01
00077230 E10B                       	smpsAlterNote       $0B
00077232 E701                       	dc.b	smpsNoAttack, $01
00077234 E105                       	smpsAlterNote       $05
00077236 E701                       	dc.b	smpsNoAttack, $01
00077238 E104                       	smpsAlterNote       $04
0007723A E701                       	dc.b	smpsNoAttack, $01
0007723C E108                       	smpsAlterNote       $08
0007723E E701                       	dc.b	smpsNoAttack, $01
00077240 E10E                       	smpsAlterNote       $0E
00077242 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077246 E10B                       	smpsAlterNote       $0B
00077248 E701                       	dc.b	smpsNoAttack, $01
0007724A E105                       	smpsAlterNote       $05
0007724C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077250 E10B                       	smpsAlterNote       $0B
00077252 E701                       	dc.b	smpsNoAttack, $01
00077254 E10E                       	smpsAlterNote       $0E
00077256 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007725A E108                       	smpsAlterNote       $08
0007725C E701                       	dc.b	smpsNoAttack, $01
0007725E E104                       	smpsAlterNote       $04
00077260 E701                       	dc.b	smpsNoAttack, $01
00077262 E105                       	smpsAlterNote       $05
00077264 E701                       	dc.b	smpsNoAttack, $01
00077266 E10B                       	smpsAlterNote       $0B
00077268 E701                       	dc.b	smpsNoAttack, $01
0007726A E10F                       	smpsAlterNote       $0F
0007726C E701                       	dc.b	smpsNoAttack, $01
0007726E E10B                       	smpsAlterNote       $0B
00077270 E701                       	dc.b	smpsNoAttack, $01
00077272 E108                       	smpsAlterNote       $08
00077274 E701                       	dc.b	smpsNoAttack, $01
00077276 E105                       	smpsAlterNote       $05
00077278 8001                       	dc.b	nRst, $01
0007727A E109                       	smpsAlterNote       $09
0007727C C401                       	dc.b	nG5, $01
0007727E E10B                       	smpsAlterNote       $0B
00077280 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00077289 E109                       	smpsAlterNote       $09
0007728B C404 8001                  	dc.b	nG5, $04, nRst, $01
0007728F E10B                       	smpsAlterNote       $0B
00077291 C604 8001                  	dc.b	nA5, $04, nRst, $01
00077295 E107                       	smpsAlterNote       $07
00077297 BF0D                       	dc.b	nD5, $0D
00077299 E101                       	smpsAlterNote       $01
0007729B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007729F E104                       	smpsAlterNote       $04
000772A1 E701                       	dc.b	smpsNoAttack, $01
000772A3 E10A                       	smpsAlterNote       $0A
000772A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000772A9 E104                       	smpsAlterNote       $04
000772AB E701                       	dc.b	smpsNoAttack, $01
000772AD E101                       	smpsAlterNote       $01
000772AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000772B3 E107                       	smpsAlterNote       $07
000772B5 E701                       	dc.b	smpsNoAttack, $01
000772B7 E10B                       	smpsAlterNote       $0B
000772B9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000772BD E108                       	smpsAlterNote       $08
000772BF C101                       	dc.b	nE5, $01
000772C1 E109                       	smpsAlterNote       $09
000772C3 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000772C8 E10B                       	smpsAlterNote       $0B
000772CA C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000772D2 E108                       	smpsAlterNote       $08
000772D4 CD06                       	dc.b	nE6, $06
000772D6 E109                       	smpsAlterNote       $09
000772D8 CE07                       	dc.b	nF6, $07
000772DA E108                       	smpsAlterNote       $08
000772DC CD03 8001                  	dc.b	nE6, $03, nRst, $01
000772E0 E106                       	smpsAlterNote       $06
000772E2 C903                       	dc.b	nC6, $03
000772E4 E109                       	smpsAlterNote       $09
000772E6 C403 8001                  	dc.b	nG5, $03, nRst, $01
000772EA E10C                       	smpsAlterNote       $0C
000772EC C70D                       	dc.b	nBb5, $0D
000772EE E106                       	smpsAlterNote       $06
000772F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000772F4 E109                       	smpsAlterNote       $09
000772F6 E701                       	dc.b	smpsNoAttack, $01
000772F8 E10F                       	smpsAlterNote       $0F
000772FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000772FE E109                       	smpsAlterNote       $09
00077300 E701                       	dc.b	smpsNoAttack, $01
00077302 E106                       	smpsAlterNote       $06
00077304 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077308 E10C                       	smpsAlterNote       $0C
0007730A E701                       	dc.b	smpsNoAttack, $01
0007730C E110                       	smpsAlterNote       $10
0007730E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00077312 E10B                       	smpsAlterNote       $0B
00077314 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00077318 E105                       	smpsAlterNote       $05
0007731A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007731E E10B                       	smpsAlterNote       $0B
00077320 E701                       	dc.b	smpsNoAttack, $01
00077322 E10E                       	smpsAlterNote       $0E
00077324 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077328 E108                       	smpsAlterNote       $08
0007732A E701                       	dc.b	smpsNoAttack, $01
0007732C E104                       	smpsAlterNote       $04
0007732E E701                       	dc.b	smpsNoAttack, $01
00077330 E105                       	smpsAlterNote       $05
00077332 E701                       	dc.b	smpsNoAttack, $01
00077334 E10B                       	smpsAlterNote       $0B
00077336 E701                       	dc.b	smpsNoAttack, $01
00077338 E10F                       	smpsAlterNote       $0F
0007733A E701                       	dc.b	smpsNoAttack, $01
0007733C E10B                       	smpsAlterNote       $0B
0007733E E701                       	dc.b	smpsNoAttack, $01
00077340 E108                       	smpsAlterNote       $08
00077342 E701                       	dc.b	smpsNoAttack, $01
00077344 E104                       	smpsAlterNote       $04
00077346 E701                       	dc.b	smpsNoAttack, $01
00077348 E108                       	smpsAlterNote       $08
0007734A E701                       	dc.b	smpsNoAttack, $01
0007734C E10E                       	smpsAlterNote       $0E
0007734E E701                       	dc.b	smpsNoAttack, $01
00077350 E10F                       	smpsAlterNote       $0F
00077352 E701                       	dc.b	smpsNoAttack, $01
00077354 E10B                       	smpsAlterNote       $0B
00077356 E701                       	dc.b	smpsNoAttack, $01
00077358 E105                       	smpsAlterNote       $05
0007735A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007735E E108                       	smpsAlterNote       $08
00077360 E701                       	dc.b	smpsNoAttack, $01
00077362 E10E                       	smpsAlterNote       $0E
00077364 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077368 E108                       	smpsAlterNote       $08
0007736A E701                       	dc.b	smpsNoAttack, $01
0007736C E105                       	smpsAlterNote       $05
0007736E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077372 E10B                       	smpsAlterNote       $0B
00077374 E701                       	dc.b	smpsNoAttack, $01
00077376 E10F                       	smpsAlterNote       $0F
00077378 E701                       	dc.b	smpsNoAttack, $01
0007737A E10E                       	smpsAlterNote       $0E
0007737C E701                       	dc.b	smpsNoAttack, $01
0007737E E108                       	smpsAlterNote       $08
00077380 E701                       	dc.b	smpsNoAttack, $01
00077382 E104                       	smpsAlterNote       $04
00077384 E701                       	dc.b	smpsNoAttack, $01
00077386 E108                       	smpsAlterNote       $08
00077388 E701                       	dc.b	smpsNoAttack, $01
0007738A E10E                       	smpsAlterNote       $0E
0007738C E701                       	dc.b	smpsNoAttack, $01
0007738E E10F                       	smpsAlterNote       $0F
00077390 E701                       	dc.b	smpsNoAttack, $01
00077392 E10B                       	smpsAlterNote       $0B
00077394 E701                       	dc.b	smpsNoAttack, $01
00077396 E105                       	smpsAlterNote       $05
00077398 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007739C E108                       	smpsAlterNote       $08
0007739E E701                       	dc.b	smpsNoAttack, $01
000773A0 E10E                       	smpsAlterNote       $0E
000773A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000773A6 E108                       	smpsAlterNote       $08
000773A8 E701                       	dc.b	smpsNoAttack, $01
000773AA E105                       	smpsAlterNote       $05
000773AC E701                       	dc.b	smpsNoAttack, $01
000773AE E10B                       	smpsAlterNote       $0B
000773B0 C60D                       	dc.b	nA5, $0D
000773B2 E108                       	smpsAlterNote       $08
000773B4 E701                       	dc.b	smpsNoAttack, $01
000773B6 E104                       	smpsAlterNote       $04
000773B8 E701                       	dc.b	smpsNoAttack, $01
000773BA E105                       	smpsAlterNote       $05
000773BC E701                       	dc.b	smpsNoAttack, $01
000773BE E10B                       	smpsAlterNote       $0B
000773C0 E701                       	dc.b	smpsNoAttack, $01
000773C2 E10F                       	smpsAlterNote       $0F
000773C4 E701                       	dc.b	smpsNoAttack, $01
000773C6 E10B                       	smpsAlterNote       $0B
000773C8 E701                       	dc.b	smpsNoAttack, $01
000773CA E108                       	smpsAlterNote       $08
000773CC E701                       	dc.b	smpsNoAttack, $01
000773CE E104                       	smpsAlterNote       $04
000773D0 E701                       	dc.b	smpsNoAttack, $01
000773D2 E108                       	smpsAlterNote       $08
000773D4 E701                       	dc.b	smpsNoAttack, $01
000773D6 E10E                       	smpsAlterNote       $0E
000773D8 E701                       	dc.b	smpsNoAttack, $01
000773DA E10F                       	smpsAlterNote       $0F
000773DC E701                       	dc.b	smpsNoAttack, $01
000773E0 E109                       	smpsAlterNote       $09
000773E2 E6FF                       	smpsAlterVol        $FF
000773E4 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
000773EE E108                       	smpsAlterNote       $08
000773F0 C103 800E                  	dc.b	nE5, $03, nRst, $0E
000773F6 E107                       	smpsAlterNote       $07
000773F8 E601                       	smpsAlterVol        $01
000773FA BF03                       	dc.b	nD5, $03
000773FC E108                       	smpsAlterNote       $08
000773FE C103 8001                  	dc.b	nE5, $03, nRst, $01
00077402 E109                       	smpsAlterNote       $09
00077404 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0007740A E10B                       	smpsAlterNote       $0B
0007740C C606 8001                  	dc.b	nA5, $06, nRst, $01
00077410 E107                       	smpsAlterNote       $07
00077412 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00077416 E106                       	smpsAlterNote       $06
00077418 C90D                       	dc.b	nC6, $0D
0007741A E103                       	smpsAlterNote       $03
0007741C E701                       	dc.b	smpsNoAttack, $01
0007741E E1FF                       	smpsAlterNote       $FF
00077420 E701                       	dc.b	smpsNoAttack, $01
00077422 E103                       	smpsAlterNote       $03
00077424 E701                       	dc.b	smpsNoAttack, $01
00077426 E109                       	smpsAlterNote       $09
00077428 E701                       	dc.b	smpsNoAttack, $01
0007742A E10A                       	smpsAlterNote       $0A
0007742C E701                       	dc.b	smpsNoAttack, $01
0007742E E106                       	smpsAlterNote       $06
00077430 E701                       	dc.b	smpsNoAttack, $01
00077432 E100                       	smpsAlterNote       $00
00077434 E701                       	dc.b	smpsNoAttack, $01
00077436 E10C                       	smpsAlterNote       $0C
00077438 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0007743C E10B                       	smpsAlterNote       $0B
0007743E C603                       	dc.b	nA5, $03
00077440 E109                       	smpsAlterNote       $09
00077442 C403 8001                  	dc.b	nG5, $03, nRst, $01
00077446 E10B                       	smpsAlterNote       $0B
00077448 C60D                       	dc.b	nA5, $0D
0007744A E105                       	smpsAlterNote       $05
0007744C E701                       	dc.b	smpsNoAttack, $01
0007744E E104                       	smpsAlterNote       $04
00077450 E701                       	dc.b	smpsNoAttack, $01
00077452 E108                       	smpsAlterNote       $08
00077454 E701                       	dc.b	smpsNoAttack, $01
00077456 E10E                       	smpsAlterNote       $0E
00077458 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007745C E10B                       	smpsAlterNote       $0B
0007745E E701                       	dc.b	smpsNoAttack, $01
00077460 E105                       	smpsAlterNote       $05
00077462 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077466 E10B                       	smpsAlterNote       $0B
00077468 E701                       	dc.b	smpsNoAttack, $01
0007746A E10E                       	smpsAlterNote       $0E
0007746C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077470 E108                       	smpsAlterNote       $08
00077472 E701                       	dc.b	smpsNoAttack, $01
00077474 E104                       	smpsAlterNote       $04
00077476 E701                       	dc.b	smpsNoAttack, $01
00077478 E105                       	smpsAlterNote       $05
0007747A E701                       	dc.b	smpsNoAttack, $01
0007747C E10B                       	smpsAlterNote       $0B
0007747E E701                       	dc.b	smpsNoAttack, $01
00077480 E10F                       	smpsAlterNote       $0F
00077482 E701                       	dc.b	smpsNoAttack, $01
00077484 E10B                       	smpsAlterNote       $0B
00077486 E701                       	dc.b	smpsNoAttack, $01
00077488 E108                       	smpsAlterNote       $08
0007748A E701                       	dc.b	smpsNoAttack, $01
0007748C E104                       	smpsAlterNote       $04
0007748E E701                       	dc.b	smpsNoAttack, $01
00077490 E108                       	smpsAlterNote       $08
00077492 E701                       	dc.b	smpsNoAttack, $01
00077494 E10E                       	smpsAlterNote       $0E
00077496 E701                       	dc.b	smpsNoAttack, $01
00077498 E10F                       	smpsAlterNote       $0F
0007749A E701                       	dc.b	smpsNoAttack, $01
0007749C E10B                       	smpsAlterNote       $0B
0007749E E701                       	dc.b	smpsNoAttack, $01
000774A0 E105                       	smpsAlterNote       $05
000774A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000774A6 E108                       	smpsAlterNote       $08
000774A8 E701                       	dc.b	smpsNoAttack, $01
000774AA E10E                       	smpsAlterNote       $0E
000774AC E701                       	dc.b	smpsNoAttack, $01
000774AE E10F                       	smpsAlterNote       $0F
000774B0 800F                       	dc.b	nRst, $0F
000774B2 E107                       	smpsAlterNote       $07
000774B4 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000774B8 E108                       	smpsAlterNote       $08
000774BA C103                       	dc.b	nE5, $03
000774BC E109                       	smpsAlterNote       $09
000774BE C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000774C4 E10B                       	smpsAlterNote       $0B
000774C6 C606 8001                  	dc.b	nA5, $06, nRst, $01
000774CA E107                       	smpsAlterNote       $07
000774CC BF03                       	dc.b	nD5, $03
000774CE E106                       	smpsAlterNote       $06
000774D0 C90E                       	dc.b	nC6, $0E
000774D2 E107                       	smpsAlterNote       $07
000774D4 CB03 8001                  	dc.b	nD6, $03, nRst, $01
000774D8 E10C                       	smpsAlterNote       $0C
000774DA C704                       	dc.b	nBb5, $04
000774DC E10B                       	smpsAlterNote       $0B
000774DE C604 8001                  	dc.b	nA5, $04, nRst, $01
000774E2 E109                       	smpsAlterNote       $09
000774E4 C404                       	dc.b	nG5, $04
000774E6 E10B                       	smpsAlterNote       $0B
000774E8 C60D                       	dc.b	nA5, $0D
000774EA E108                       	smpsAlterNote       $08
000774EC E701                       	dc.b	smpsNoAttack, $01
000774EE E105                       	smpsAlterNote       $05
000774F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000774F4 E10B                       	smpsAlterNote       $0B
000774F6 E701                       	dc.b	smpsNoAttack, $01
000774F8 E10F                       	smpsAlterNote       $0F
000774FA E701                       	dc.b	smpsNoAttack, $01
000774FC E10E                       	smpsAlterNote       $0E
000774FE E701                       	dc.b	smpsNoAttack, $01
00077500 E108                       	smpsAlterNote       $08
00077502 E701                       	dc.b	smpsNoAttack, $01
00077504 E104                       	smpsAlterNote       $04
00077506 E701                       	dc.b	smpsNoAttack, $01
00077508 E108                       	smpsAlterNote       $08
0007750A E701                       	dc.b	smpsNoAttack, $01
0007750C E10B                       	smpsAlterNote       $0B
0007750E E701                       	dc.b	smpsNoAttack, $01
00077510 E10F                       	smpsAlterNote       $0F
00077512 E701                       	dc.b	smpsNoAttack, $01
00077514 E10B                       	smpsAlterNote       $0B
00077516 E701                       	dc.b	smpsNoAttack, $01
00077518 E105                       	smpsAlterNote       $05
0007751A E701                       	dc.b	smpsNoAttack, $01
0007751C E104                       	smpsAlterNote       $04
0007751E E701                       	dc.b	smpsNoAttack, $01
00077520 E108                       	smpsAlterNote       $08
00077522 E701                       	dc.b	smpsNoAttack, $01
00077524 E10E                       	smpsAlterNote       $0E
00077526 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007752A E10B                       	smpsAlterNote       $0B
0007752C E701                       	dc.b	smpsNoAttack, $01
0007752E E105                       	smpsAlterNote       $05
00077530 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077534 E10B                       	smpsAlterNote       $0B
00077536 E701                       	dc.b	smpsNoAttack, $01
00077538 E10E                       	smpsAlterNote       $0E
0007753A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007753E E108                       	smpsAlterNote       $08
00077540 E701                       	dc.b	smpsNoAttack, $01
00077542 E105                       	smpsAlterNote       $05
00077544 8001                       	dc.b	nRst, $01
00077546 E109                       	smpsAlterNote       $09
00077548 C402                       	dc.b	nG5, $02
0007754A E10B                       	smpsAlterNote       $0B
0007754C E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00077555 E109                       	smpsAlterNote       $09
00077557 C404                       	dc.b	nG5, $04
00077559 E10B                       	smpsAlterNote       $0B
0007755B C604 8001                  	dc.b	nA5, $04, nRst, $01
0007755F E107                       	smpsAlterNote       $07
00077561 BF0D                       	dc.b	nD5, $0D
00077563 E101                       	smpsAlterNote       $01
00077565 E701                       	dc.b	smpsNoAttack, $01
00077567 E100                       	smpsAlterNote       $00
00077569 E701                       	dc.b	smpsNoAttack, $01
0007756B E104                       	smpsAlterNote       $04
0007756D E701                       	dc.b	smpsNoAttack, $01
0007756F E10A                       	smpsAlterNote       $0A
00077571 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077575 E107                       	smpsAlterNote       $07
00077577 E701                       	dc.b	smpsNoAttack, $01
00077579 E101                       	smpsAlterNote       $01
0007757B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007757F E107                       	smpsAlterNote       $07
00077581 E701                       	dc.b	smpsNoAttack, $01
00077583 E10A                       	smpsAlterNote       $0A
00077585 E701                       	dc.b	smpsNoAttack, $01
00077587 E10B                       	smpsAlterNote       $0B
00077589 8001                       	dc.b	nRst, $01
0007758B E108                       	smpsAlterNote       $08
0007758D C101                       	dc.b	nE5, $01
0007758F E109                       	smpsAlterNote       $09
00077591 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00077596 E10B                       	smpsAlterNote       $0B
00077598 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000775A0 E108                       	smpsAlterNote       $08
000775A2 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000775A6 E109                       	smpsAlterNote       $09
000775A8 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000775AC E108                       	smpsAlterNote       $08
000775AE CD02 8001                  	dc.b	nE6, $02, nRst, $01
000775B2 E106                       	smpsAlterNote       $06
000775B4 C903                       	dc.b	nC6, $03
000775B6 E109                       	smpsAlterNote       $09
000775B8 C403 8001                  	dc.b	nG5, $03, nRst, $01
000775BC E10C                       	smpsAlterNote       $0C
000775BE C70D                       	dc.b	nBb5, $0D
000775C0 E109                       	smpsAlterNote       $09
000775C2 E701                       	dc.b	smpsNoAttack, $01
000775C4 E105                       	smpsAlterNote       $05
000775C6 E701                       	dc.b	smpsNoAttack, $01
000775C8 E109                       	smpsAlterNote       $09
000775CA E701                       	dc.b	smpsNoAttack, $01
000775CC E10F                       	smpsAlterNote       $0F
000775CE E701                       	dc.b	smpsNoAttack, $01
000775D0 E110                       	smpsAlterNote       $10
000775D2 E701                       	dc.b	smpsNoAttack, $01
000775D4 E10C                       	smpsAlterNote       $0C
000775D6 E701                       	dc.b	smpsNoAttack, $01
000775D8 E106                       	smpsAlterNote       $06
000775DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000775DE E109                       	smpsAlterNote       $09
000775E0 E701                       	dc.b	smpsNoAttack, $01
000775E2 E10F                       	smpsAlterNote       $0F
000775E4 E701                       	dc.b	smpsNoAttack, $01
000775E6 E110                       	smpsAlterNote       $10
000775E8 8001                       	dc.b	nRst, $01
000775EA E10B                       	smpsAlterNote       $0B
000775EC C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
000775F2 E105                       	smpsAlterNote       $05
000775F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000775F8 E108                       	smpsAlterNote       $08
000775FA E701                       	dc.b	smpsNoAttack, $01
000775FC E10E                       	smpsAlterNote       $0E
000775FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077602 E108                       	smpsAlterNote       $08
00077604 E701                       	dc.b	smpsNoAttack, $01
00077606 E105                       	smpsAlterNote       $05
00077608 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007760C E10B                       	smpsAlterNote       $0B
0007760E E701                       	dc.b	smpsNoAttack, $01
00077610 E10F                       	smpsAlterNote       $0F
00077612 E701                       	dc.b	smpsNoAttack, $01
00077614 E10E                       	smpsAlterNote       $0E
00077616 E701                       	dc.b	smpsNoAttack, $01
00077618 E108                       	smpsAlterNote       $08
0007761A E701                       	dc.b	smpsNoAttack, $01
0007761C E104                       	smpsAlterNote       $04
0007761E E701                       	dc.b	smpsNoAttack, $01
00077620 E108                       	smpsAlterNote       $08
00077622 E701                       	dc.b	smpsNoAttack, $01
00077624 E10B                       	smpsAlterNote       $0B
00077626 E701                       	dc.b	smpsNoAttack, $01
00077628 E10F                       	smpsAlterNote       $0F
0007762A E701                       	dc.b	smpsNoAttack, $01
0007762C E10B                       	smpsAlterNote       $0B
0007762E E701                       	dc.b	smpsNoAttack, $01
00077630 E105                       	smpsAlterNote       $05
00077632 E701                       	dc.b	smpsNoAttack, $01
00077634 E104                       	smpsAlterNote       $04
00077636 E701                       	dc.b	smpsNoAttack, $01
00077638 E108                       	smpsAlterNote       $08
0007763A E701                       	dc.b	smpsNoAttack, $01
0007763C E10E                       	smpsAlterNote       $0E
0007763E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077642 E10B                       	smpsAlterNote       $0B
00077644 E701                       	dc.b	smpsNoAttack, $01
00077646 E105                       	smpsAlterNote       $05
00077648 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007764C E10B                       	smpsAlterNote       $0B
0007764E E701                       	dc.b	smpsNoAttack, $01
00077650 E10E                       	smpsAlterNote       $0E
00077652 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077656 E108                       	smpsAlterNote       $08
00077658 E701                       	dc.b	smpsNoAttack, $01
0007765A E104                       	smpsAlterNote       $04
0007765C E701                       	dc.b	smpsNoAttack, $01
0007765E E105                       	smpsAlterNote       $05
00077660 E701                       	dc.b	smpsNoAttack, $01
00077662 E10B                       	smpsAlterNote       $0B
00077664 E701                       	dc.b	smpsNoAttack, $01
00077666 E10F                       	smpsAlterNote       $0F
00077668 E701                       	dc.b	smpsNoAttack, $01
0007766A E10B                       	smpsAlterNote       $0B
0007766C E701                       	dc.b	smpsNoAttack, $01
0007766E E108                       	smpsAlterNote       $08
00077670 E701                       	dc.b	smpsNoAttack, $01
00077672 E104                       	smpsAlterNote       $04
00077674 E701                       	dc.b	smpsNoAttack, $01
00077676 E108                       	smpsAlterNote       $08
00077678 E701                       	dc.b	smpsNoAttack, $01
0007767A E10E                       	smpsAlterNote       $0E
0007767C E701                       	dc.b	smpsNoAttack, $01
0007767E E10F                       	smpsAlterNote       $0F
00077680 E701                       	dc.b	smpsNoAttack, $01
00077682 E10B                       	smpsAlterNote       $0B
00077684 E701                       	dc.b	smpsNoAttack, $01
00077686 E105                       	smpsAlterNote       $05
00077688 E701                       	dc.b	smpsNoAttack, $01
0007768A E10B                       	smpsAlterNote       $0B
0007768C C60E                       	dc.b	nA5, $0E
0007768E E105                       	smpsAlterNote       $05
00077690 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077694 E10B                       	smpsAlterNote       $0B
00077696 E701                       	dc.b	smpsNoAttack, $01
00077698 E10E                       	smpsAlterNote       $0E
0007769A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007769E E108                       	smpsAlterNote       $08
000776A0 E701                       	dc.b	smpsNoAttack, $01
000776A2 E104                       	smpsAlterNote       $04
000776A4 E701                       	dc.b	smpsNoAttack, $01
000776A6 E105                       	smpsAlterNote       $05
000776A8 E701                       	dc.b	smpsNoAttack, $01
000776AA E10B                       	smpsAlterNote       $0B
000776AC E701                       	dc.b	smpsNoAttack, $01
000776AE E10F                       	smpsAlterNote       $0F
000776B0 E701                       	dc.b	smpsNoAttack, $01
000776B2 E10B                       	smpsAlterNote       $0B
000776B4 E701                       	dc.b	smpsNoAttack, $01
000776B6 E108                       	smpsAlterNote       $08
000776B8 E701                       	dc.b	smpsNoAttack, $01
000776BA E104                       	smpsAlterNote       $04
000776BC E701                       	dc.b	smpsNoAttack, $01
000776BE E108                       	smpsAlterNote       $08
000776C0 E701                       	dc.b	smpsNoAttack, $01
000776C2 E10E                       	smpsAlterNote       $0E
000776C4 E701                       	dc.b	smpsNoAttack, $01
000776C6 E10F                       	smpsAlterNote       $0F
000776C8 E701                       	dc.b	smpsNoAttack, $01
000776CA E10B                       	smpsAlterNote       $0B
000776CC E701                       	dc.b	smpsNoAttack, $01
000776CE E105                       	smpsAlterNote       $05
000776D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000776D4 E108                       	smpsAlterNote       $08
000776D6 E701                       	dc.b	smpsNoAttack, $01
000776D8 E10E                       	smpsAlterNote       $0E
000776DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000776DE E108                       	smpsAlterNote       $08
000776E0 E701                       	dc.b	smpsNoAttack, $01
000776E2 E105                       	smpsAlterNote       $05
000776E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000776E8 E10B                       	smpsAlterNote       $0B
000776EA E701                       	dc.b	smpsNoAttack, $01
000776EC E10F                       	smpsAlterNote       $0F
000776EE E701                       	dc.b	smpsNoAttack, $01
000776F0 E10E                       	smpsAlterNote       $0E
000776F2 E701                       	dc.b	smpsNoAttack, $01
000776F4 E108                       	smpsAlterNote       $08
000776F6 E701                       	dc.b	smpsNoAttack, $01
000776F8 E104                       	smpsAlterNote       $04
000776FA E701                       	dc.b	smpsNoAttack, $01
000776FC E108                       	smpsAlterNote       $08
000776FE E701                       	dc.b	smpsNoAttack, $01
00077700 E10E                       	smpsAlterNote       $0E
00077702 E701                       	dc.b	smpsNoAttack, $01
00077704 E10F                       	smpsAlterNote       $0F
00077706 E701                       	dc.b	smpsNoAttack, $01
00077708 E10B                       	smpsAlterNote       $0B
0007770A E701                       	dc.b	smpsNoAttack, $01
0007770C E105                       	smpsAlterNote       $05
0007770E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077712 E108                       	smpsAlterNote       $08
00077714 E701                       	dc.b	smpsNoAttack, $01
00077716 E10E                       	smpsAlterNote       $0E
00077718 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007771C E108                       	smpsAlterNote       $08
0007771E E701                       	dc.b	smpsNoAttack, $01
00077720 E105                       	smpsAlterNote       $05
00077722 E701                       	dc.b	smpsNoAttack, $01
00077726 E10B                       	smpsAlterNote       $0B
00077728 E6FD                       	smpsAlterVol        $FD
0007772A C604 8001                  	dc.b	nA5, $04, nRst, $01
0007772E E109                       	smpsAlterNote       $09
00077730 C404                       	dc.b	nG5, $04
00077732 E10B                       	smpsAlterNote       $0B
00077734 C604 8001                  	dc.b	nA5, $04, nRst, $01
00077738 E107                       	smpsAlterNote       $07
0007773A BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00077740 E10B                       	smpsAlterNote       $0B
00077742 C604                       	dc.b	nA5, $04
00077744 E109                       	smpsAlterNote       $09
00077746 C404 8001                  	dc.b	nG5, $04, nRst, $01
0007774A E10B                       	smpsAlterNote       $0B
0007774C C604                       	dc.b	nA5, $04
0007774E E108                       	smpsAlterNote       $08
00077750 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
00077758 E106                       	smpsAlterNote       $06
0007775A C904 8001                  	dc.b	nC6, $04, nRst, $01
0007775E E10C                       	smpsAlterNote       $0C
00077760 C704                       	dc.b	nBb5, $04
00077762 E10B                       	smpsAlterNote       $0B
00077764 C604 8001                  	dc.b	nA5, $04, nRst, $01
00077768 E109                       	smpsAlterNote       $09
0007776A C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00077774 E10B                       	smpsAlterNote       $0B
00077776 C60D                       	dc.b	nA5, $0D
00077778 E108                       	smpsAlterNote       $08
0007777A E701                       	dc.b	smpsNoAttack, $01
0007777C E104                       	smpsAlterNote       $04
0007777E E701                       	dc.b	smpsNoAttack, $01
00077780 E108                       	smpsAlterNote       $08
00077782 E701                       	dc.b	smpsNoAttack, $01
00077784 E10E                       	smpsAlterNote       $0E
00077786 E701                       	dc.b	smpsNoAttack, $01
00077788 E10F                       	smpsAlterNote       $0F
0007778A E701                       	dc.b	smpsNoAttack, $01
0007778C E10B                       	smpsAlterNote       $0B
0007778E E701                       	dc.b	smpsNoAttack, $01
00077790 E105                       	smpsAlterNote       $05
00077792 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077796 E108                       	smpsAlterNote       $08
00077798 E701                       	dc.b	smpsNoAttack, $01
0007779A E10E                       	smpsAlterNote       $0E
0007779C E701                       	dc.b	smpsNoAttack, $01
0007779E E10F                       	smpsAlterNote       $0F
000777A0 8001                       	dc.b	nRst, $01
000777A2 E109                       	smpsAlterNote       $09
000777A4 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000777AA E108                       	smpsAlterNote       $08
000777AC C10D                       	dc.b	nE5, $0D
000777AE E102                       	smpsAlterNote       $02
000777B0 E701                       	dc.b	smpsNoAttack, $01
000777B2 E101                       	smpsAlterNote       $01
000777B4 E701                       	dc.b	smpsNoAttack, $01
000777B6 E105                       	smpsAlterNote       $05
000777B8 E701                       	dc.b	smpsNoAttack, $01
000777BA E10B                       	smpsAlterNote       $0B
000777BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000777C0 E108                       	smpsAlterNote       $08
000777C2 E701                       	dc.b	smpsNoAttack, $01
000777C4 E102                       	smpsAlterNote       $02
000777C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000777CA E108                       	smpsAlterNote       $08
000777CC E701                       	dc.b	smpsNoAttack, $01
000777CE E10B                       	smpsAlterNote       $0B
000777D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000777D4 E105                       	smpsAlterNote       $05
000777D6 E701                       	dc.b	smpsNoAttack, $01
000777D8 E101                       	smpsAlterNote       $01
000777DA E701                       	dc.b	smpsNoAttack, $01
000777DC E102                       	smpsAlterNote       $02
000777DE E701                       	dc.b	smpsNoAttack, $01
000777E0 E108                       	smpsAlterNote       $08
000777E2 E701                       	dc.b	smpsNoAttack, $01
000777E4 E10C                       	smpsAlterNote       $0C
000777E6 E701                       	dc.b	smpsNoAttack, $01
000777E8 E108                       	smpsAlterNote       $08
000777EA E701                       	dc.b	smpsNoAttack, $01
000777EC E105                       	smpsAlterNote       $05
000777EE E701                       	dc.b	smpsNoAttack, $01
000777F0 E101                       	smpsAlterNote       $01
000777F2 E701                       	dc.b	smpsNoAttack, $01
000777F4 E105                       	smpsAlterNote       $05
000777F6 E701                       	dc.b	smpsNoAttack, $01
000777F8 E10B                       	smpsAlterNote       $0B
000777FA E701                       	dc.b	smpsNoAttack, $01
000777FC E10C                       	smpsAlterNote       $0C
000777FE E701                       	dc.b	smpsNoAttack, $01
00077800 E108                       	smpsAlterNote       $08
00077802 E701                       	dc.b	smpsNoAttack, $01
00077804 E102                       	smpsAlterNote       $02
00077806 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007780A E105                       	smpsAlterNote       $05
0007780C E701                       	dc.b	smpsNoAttack, $01
0007780E E10B                       	smpsAlterNote       $0B
00077810 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077814 E105                       	smpsAlterNote       $05
00077816 E701                       	dc.b	smpsNoAttack, $01
00077818 E102                       	smpsAlterNote       $02
0007781A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007781E E108                       	smpsAlterNote       $08
00077820 E701                       	dc.b	smpsNoAttack, $01
00077822 E10C                       	smpsAlterNote       $0C
00077824 E701                       	dc.b	smpsNoAttack, $01
00077826 E10B                       	smpsAlterNote       $0B
00077828 E701                       	dc.b	smpsNoAttack, $01
0007782A E105                       	smpsAlterNote       $05
0007782C E701                       	dc.b	smpsNoAttack, $01
0007782E E101                       	smpsAlterNote       $01
00077830 E701                       	dc.b	smpsNoAttack, $01
00077832 E105                       	smpsAlterNote       $05
00077834 E701                       	dc.b	smpsNoAttack, $01
00077836 E108                       	smpsAlterNote       $08
00077838 E701                       	dc.b	smpsNoAttack, $01
0007783A E10C                       	smpsAlterNote       $0C
0007783C E701                       	dc.b	smpsNoAttack, $01
0007783E E108                       	smpsAlterNote       $08
00077840 E701                       	dc.b	smpsNoAttack, $01
00077842 E102                       	smpsAlterNote       $02
00077844 E701                       	dc.b	smpsNoAttack, $01
00077846 E101                       	smpsAlterNote       $01
00077848 E701                       	dc.b	smpsNoAttack, $01
0007784A E105                       	smpsAlterNote       $05
0007784C E701                       	dc.b	smpsNoAttack, $01
0007784E E10B                       	smpsAlterNote       $0B
00077850 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077854 E108                       	smpsAlterNote       $08
00077856 E701                       	dc.b	smpsNoAttack, $01
00077858 E102                       	smpsAlterNote       $02
0007785A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007785E E108                       	smpsAlterNote       $08
00077860 E701                       	dc.b	smpsNoAttack, $01
00077862 E10B                       	smpsAlterNote       $0B
00077864 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077868 E105                       	smpsAlterNote       $05
0007786A E701                       	dc.b	smpsNoAttack, $01
0007786C E101                       	smpsAlterNote       $01
0007786E E701                       	dc.b	smpsNoAttack, $01
00077870 E102                       	smpsAlterNote       $02
00077872 E701                       	dc.b	smpsNoAttack, $01
00077874 E108                       	smpsAlterNote       $08
00077876 E701                       	dc.b	smpsNoAttack, $01
00077878 E10C                       	smpsAlterNote       $0C
0007787A E701                       	dc.b	smpsNoAttack, $01
0007787C E108                       	smpsAlterNote       $08
0007787E E701                       	dc.b	smpsNoAttack, $01
00077880 E105                       	smpsAlterNote       $05
00077882 E701                       	dc.b	smpsNoAttack, $01
00077884 E101                       	smpsAlterNote       $01
00077886 E701                       	dc.b	smpsNoAttack, $01
00077888 E105                       	smpsAlterNote       $05
0007788A E701                       	dc.b	smpsNoAttack, $01
0007788C E10B                       	smpsAlterNote       $0B
0007788E E701                       	dc.b	smpsNoAttack, $01
00077890 E10C                       	smpsAlterNote       $0C
00077892 E701                       	dc.b	smpsNoAttack, $01
00077894 E108                       	smpsAlterNote       $08
00077896 E701                       	dc.b	smpsNoAttack, $01
00077898 E102                       	smpsAlterNote       $02
0007789A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007789E E105                       	smpsAlterNote       $05
000778A0 E701                       	dc.b	smpsNoAttack, $01
000778A2 E10B                       	smpsAlterNote       $0B
000778A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000778A8 E105                       	smpsAlterNote       $05
000778AA E701                       	dc.b	smpsNoAttack, $01
000778AC E101                       	smpsAlterNote       $01
000778AE E701                       	dc.b	smpsNoAttack, $01
000778B0 E102                       	smpsAlterNote       $02
000778B2 E701                       	dc.b	smpsNoAttack, $01
000778B4 E108                       	smpsAlterNote       $08
000778B6 E701                       	dc.b	smpsNoAttack, $01
000778B8 E10C                       	smpsAlterNote       $0C
000778BA E701                       	dc.b	smpsNoAttack, $01
000778BC E108                       	smpsAlterNote       $08
000778BE E701                       	dc.b	smpsNoAttack, $01
000778C0 E105                       	smpsAlterNote       $05
000778C2 E701                       	dc.b	smpsNoAttack, $01
000778C4 E101                       	smpsAlterNote       $01
000778C6 E701                       	dc.b	smpsNoAttack, $01
000778C8 E105                       	smpsAlterNote       $05
000778CA E701                       	dc.b	smpsNoAttack, $01
000778CC E10B                       	smpsAlterNote       $0B
000778CE E701                       	dc.b	smpsNoAttack, $01
000778D0 E10C                       	smpsAlterNote       $0C
000778D2 E701                       	dc.b	smpsNoAttack, $01
000778D4 E108                       	smpsAlterNote       $08
000778D6 E701                       	dc.b	smpsNoAttack, $01
000778D8 E102                       	smpsAlterNote       $02
000778DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000778DE E105                       	smpsAlterNote       $05
000778E0 E701                       	dc.b	smpsNoAttack, $01
000778E2 E10B                       	smpsAlterNote       $0B
000778E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000778E8 E105                       	smpsAlterNote       $05
000778EA E701                       	dc.b	smpsNoAttack, $01
000778EC E102                       	smpsAlterNote       $02
000778EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000778F2 E108                       	smpsAlterNote       $08
000778F4 E701                       	dc.b	smpsNoAttack, $01
000778F6 E10C                       	smpsAlterNote       $0C
000778F8 E701                       	dc.b	smpsNoAttack, $01
000778FA E10B                       	smpsAlterNote       $0B
000778FC E701                       	dc.b	smpsNoAttack, $01
000778FE E105                       	smpsAlterNote       $05
00077900 E701                       	dc.b	smpsNoAttack, $01
00077902 E101                       	smpsAlterNote       $01
00077904 E701                       	dc.b	smpsNoAttack, $01
00077906 E105                       	smpsAlterNote       $05
00077908 E701                       	dc.b	smpsNoAttack, $01
0007790A E108                       	smpsAlterNote       $08
0007790C E701                       	dc.b	smpsNoAttack, $01
0007790E E10C                       	smpsAlterNote       $0C
00077910 E701                       	dc.b	smpsNoAttack, $01
00077914 E10B                       	smpsAlterNote       $0B
00077916 C604 8001                  	dc.b	nA5, $04, nRst, $01
0007791A E109                       	smpsAlterNote       $09
0007791C C404                       	dc.b	nG5, $04
0007791E E10B                       	smpsAlterNote       $0B
00077920 C604 8001                  	dc.b	nA5, $04, nRst, $01
00077924 E107                       	smpsAlterNote       $07
00077926 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0007792C E10B                       	smpsAlterNote       $0B
0007792E C604                       	dc.b	nA5, $04
00077930 E109                       	smpsAlterNote       $09
00077932 C404 8001                  	dc.b	nG5, $04, nRst, $01
00077936 E10B                       	smpsAlterNote       $0B
00077938 C604                       	dc.b	nA5, $04
0007793A E108                       	smpsAlterNote       $08
0007793C C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
00077942 E106                       	smpsAlterNote       $06
00077944 C904 8001                  	dc.b	nC6, $04, nRst, $01
00077948 E10C                       	smpsAlterNote       $0C
0007794A C704                       	dc.b	nBb5, $04
0007794C E10B                       	smpsAlterNote       $0B
0007794E C604 8001                  	dc.b	nA5, $04, nRst, $01
00077952 E109                       	smpsAlterNote       $09
00077954 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0007795E E10B                       	smpsAlterNote       $0B
00077960 C60D                       	dc.b	nA5, $0D
00077962 E108                       	smpsAlterNote       $08
00077964 E701                       	dc.b	smpsNoAttack, $01
00077966 E104                       	smpsAlterNote       $04
00077968 E701                       	dc.b	smpsNoAttack, $01
0007796A E108                       	smpsAlterNote       $08
0007796C E701                       	dc.b	smpsNoAttack, $01
0007796E E10B                       	smpsAlterNote       $0B
00077970 E701                       	dc.b	smpsNoAttack, $01
00077972 E10F                       	smpsAlterNote       $0F
00077974 E701                       	dc.b	smpsNoAttack, $01
00077976 E10B                       	smpsAlterNote       $0B
00077978 E701                       	dc.b	smpsNoAttack, $01
0007797A E105                       	smpsAlterNote       $05
0007797C E701                       	dc.b	smpsNoAttack, $01
0007797E E104                       	smpsAlterNote       $04
00077980 E701                       	dc.b	smpsNoAttack, $01
00077982 E108                       	smpsAlterNote       $08
00077984 E701                       	dc.b	smpsNoAttack, $01
00077986 E10E                       	smpsAlterNote       $0E
00077988 E701                       	dc.b	smpsNoAttack, $01
0007798A E10F                       	smpsAlterNote       $0F
0007798C 8001                       	dc.b	nRst, $01
0007798E E109                       	smpsAlterNote       $09
00077990 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00077996 E108                       	smpsAlterNote       $08
00077998 C10D                       	dc.b	nE5, $0D
0007799A E105                       	smpsAlterNote       $05
0007799C E701                       	dc.b	smpsNoAttack, $01
0007799E E101                       	smpsAlterNote       $01
000779A0 E701                       	dc.b	smpsNoAttack, $01
000779A2 E105                       	smpsAlterNote       $05
000779A4 E701                       	dc.b	smpsNoAttack, $01
000779A6 E10B                       	smpsAlterNote       $0B
000779A8 E701                       	dc.b	smpsNoAttack, $01
000779AA E10C                       	smpsAlterNote       $0C
000779AC E701                       	dc.b	smpsNoAttack, $01
000779AE E108                       	smpsAlterNote       $08
000779B0 E701                       	dc.b	smpsNoAttack, $01
000779B2 E102                       	smpsAlterNote       $02
000779B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000779B8 E105                       	smpsAlterNote       $05
000779BA E701                       	dc.b	smpsNoAttack, $01
000779BC E10B                       	smpsAlterNote       $0B
000779BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000779C2 E105                       	smpsAlterNote       $05
000779C4 E701                       	dc.b	smpsNoAttack, $01
000779C6 E102                       	smpsAlterNote       $02
000779C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000779CC E108                       	smpsAlterNote       $08
000779CE E701                       	dc.b	smpsNoAttack, $01
000779D0 E10C                       	smpsAlterNote       $0C
000779D2 E701                       	dc.b	smpsNoAttack, $01
000779D4 E10B                       	smpsAlterNote       $0B
000779D6 E701                       	dc.b	smpsNoAttack, $01
000779D8 E105                       	smpsAlterNote       $05
000779DA E701                       	dc.b	smpsNoAttack, $01
000779DC E101                       	smpsAlterNote       $01
000779DE E701                       	dc.b	smpsNoAttack, $01
000779E0 E105                       	smpsAlterNote       $05
000779E2 E701                       	dc.b	smpsNoAttack, $01
000779E4 E108                       	smpsAlterNote       $08
000779E6 E701                       	dc.b	smpsNoAttack, $01
000779E8 E10C                       	smpsAlterNote       $0C
000779EA E701                       	dc.b	smpsNoAttack, $01
000779EC E108                       	smpsAlterNote       $08
000779EE E701                       	dc.b	smpsNoAttack, $01
000779F0 E102                       	smpsAlterNote       $02
000779F2 E701                       	dc.b	smpsNoAttack, $01
000779F4 E101                       	smpsAlterNote       $01
000779F6 E701                       	dc.b	smpsNoAttack, $01
000779F8 E105                       	smpsAlterNote       $05
000779FA E701                       	dc.b	smpsNoAttack, $01
000779FC E10B                       	smpsAlterNote       $0B
000779FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077A02 E108                       	smpsAlterNote       $08
00077A04 E701                       	dc.b	smpsNoAttack, $01
00077A06 E102                       	smpsAlterNote       $02
00077A08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077A0C E108                       	smpsAlterNote       $08
00077A0E E701                       	dc.b	smpsNoAttack, $01
00077A10 E10B                       	smpsAlterNote       $0B
00077A12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077A16 E105                       	smpsAlterNote       $05
00077A18 E701                       	dc.b	smpsNoAttack, $01
00077A1A E101                       	smpsAlterNote       $01
00077A1C E701                       	dc.b	smpsNoAttack, $01
00077A1E E102                       	smpsAlterNote       $02
00077A20 E701                       	dc.b	smpsNoAttack, $01
00077A22 E108                       	smpsAlterNote       $08
00077A24 E701                       	dc.b	smpsNoAttack, $01
00077A26 E10C                       	smpsAlterNote       $0C
00077A28 E701                       	dc.b	smpsNoAttack, $01
00077A2A E108                       	smpsAlterNote       $08
00077A2C E701                       	dc.b	smpsNoAttack, $01
00077A2E E105                       	smpsAlterNote       $05
00077A30 E701                       	dc.b	smpsNoAttack, $01
00077A32 E101                       	smpsAlterNote       $01
00077A34 E701                       	dc.b	smpsNoAttack, $01
00077A36 E105                       	smpsAlterNote       $05
00077A38 E701                       	dc.b	smpsNoAttack, $01
00077A3A E10B                       	smpsAlterNote       $0B
00077A3C E701                       	dc.b	smpsNoAttack, $01
00077A3E E10C                       	smpsAlterNote       $0C
00077A40 E701                       	dc.b	smpsNoAttack, $01
00077A42 E108                       	smpsAlterNote       $08
00077A44 E701                       	dc.b	smpsNoAttack, $01
00077A46 E102                       	smpsAlterNote       $02
00077A48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077A4C E108                       	smpsAlterNote       $08
00077A4E E701                       	dc.b	smpsNoAttack, $01
00077A50 E10B                       	smpsAlterNote       $0B
00077A52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077A56 E105                       	smpsAlterNote       $05
00077A58 E701                       	dc.b	smpsNoAttack, $01
00077A5A E101                       	smpsAlterNote       $01
00077A5C E701                       	dc.b	smpsNoAttack, $01
00077A5E E102                       	smpsAlterNote       $02
00077A60 E701                       	dc.b	smpsNoAttack, $01
00077A62 E108                       	smpsAlterNote       $08
00077A64 E701                       	dc.b	smpsNoAttack, $01
00077A66 E10C                       	smpsAlterNote       $0C
00077A68 E701                       	dc.b	smpsNoAttack, $01
00077A6A E108                       	smpsAlterNote       $08
00077A6C E701                       	dc.b	smpsNoAttack, $01
00077A6E E105                       	smpsAlterNote       $05
00077A70 E701                       	dc.b	smpsNoAttack, $01
00077A72 E101                       	smpsAlterNote       $01
00077A74 E701                       	dc.b	smpsNoAttack, $01
00077A76 E105                       	smpsAlterNote       $05
00077A78 E701                       	dc.b	smpsNoAttack, $01
00077A7A E10B                       	smpsAlterNote       $0B
00077A7C E701                       	dc.b	smpsNoAttack, $01
00077A7E E10C                       	smpsAlterNote       $0C
00077A80 E701                       	dc.b	smpsNoAttack, $01
00077A82 E108                       	smpsAlterNote       $08
00077A84 E701                       	dc.b	smpsNoAttack, $01
00077A86 E102                       	smpsAlterNote       $02
00077A88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077A8C E105                       	smpsAlterNote       $05
00077A8E E701                       	dc.b	smpsNoAttack, $01
00077A90 E10B                       	smpsAlterNote       $0B
00077A92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077A96 E105                       	smpsAlterNote       $05
00077A98 E701                       	dc.b	smpsNoAttack, $01
00077A9A E102                       	smpsAlterNote       $02
00077A9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077AA0 E108                       	smpsAlterNote       $08
00077AA2 E701                       	dc.b	smpsNoAttack, $01
00077AA4 E10C                       	smpsAlterNote       $0C
00077AA6 E701                       	dc.b	smpsNoAttack, $01
00077AA8 E10B                       	smpsAlterNote       $0B
00077AAA E701                       	dc.b	smpsNoAttack, $01
00077AAC E105                       	smpsAlterNote       $05
00077AAE E701                       	dc.b	smpsNoAttack, $01
00077AB0 E101                       	smpsAlterNote       $01
00077AB2 E701                       	dc.b	smpsNoAttack, $01
00077AB4 E105                       	smpsAlterNote       $05
00077AB6 E701                       	dc.b	smpsNoAttack, $01
00077AB8 E108                       	smpsAlterNote       $08
00077ABA E701                       	dc.b	smpsNoAttack, $01
00077ABC E10C                       	smpsAlterNote       $0C
00077ABE E701                       	dc.b	smpsNoAttack, $01
00077AC0 E108                       	smpsAlterNote       $08
00077AC2 E701                       	dc.b	smpsNoAttack, $01
00077AC4 E102                       	smpsAlterNote       $02
00077AC6 E701                       	dc.b	smpsNoAttack, $01
00077AC8 E101                       	smpsAlterNote       $01
00077ACA E701                       	dc.b	smpsNoAttack, $01
00077ACC E105                       	smpsAlterNote       $05
00077ACE E701                       	dc.b	smpsNoAttack, $01
00077AD0 E10B                       	smpsAlterNote       $0B
00077AD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077AD6 E108                       	smpsAlterNote       $08
00077AD8 E701                       	dc.b	smpsNoAttack, $01
00077ADA E102                       	smpsAlterNote       $02
00077ADC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077AE0 E108                       	smpsAlterNote       $08
00077AE2 E701                       	dc.b	smpsNoAttack, $01
00077AE4 E10B                       	smpsAlterNote       $0B
00077AE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077AEA E105                       	smpsAlterNote       $05
00077AEC E701                       	dc.b	smpsNoAttack, $01
00077AEE E102                       	smpsAlterNote       $02
00077AF0 8001                       	dc.b	nRst, $01
00077AF2 E107                       	smpsAlterNote       $07
00077AF4 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00077AF8 E108                       	smpsAlterNote       $08
00077AFA C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00077AFE E102                       	smpsAlterNote       $02
00077B00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077B04 E108                       	smpsAlterNote       $08
00077B06 E701                       	dc.b	smpsNoAttack, $01
00077B08 E10B                       	smpsAlterNote       $0B
00077B0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077B0E E105                       	smpsAlterNote       $05
00077B10 E701                       	dc.b	smpsNoAttack, $01
00077B12 E101                       	smpsAlterNote       $01
00077B14 E701                       	dc.b	smpsNoAttack, $01
00077B16 E102                       	smpsAlterNote       $02
00077B18 E701                       	dc.b	smpsNoAttack, $01
00077B1A E108                       	smpsAlterNote       $08
00077B1C E701                       	dc.b	smpsNoAttack, $01
00077B1E E10C                       	smpsAlterNote       $0C
00077B20 E701                       	dc.b	smpsNoAttack, $01
00077B22 E108                       	smpsAlterNote       $08
00077B24 E701                       	dc.b	smpsNoAttack, $01
00077B26 E105                       	smpsAlterNote       $05
00077B28 E701                       	dc.b	smpsNoAttack, $01
00077B2A E101                       	smpsAlterNote       $01
00077B2C E701                       	dc.b	smpsNoAttack, $01
00077B2E E105                       	smpsAlterNote       $05
00077B30 E701                       	dc.b	smpsNoAttack, $01
00077B32 E10B                       	smpsAlterNote       $0B
00077B34 E701                       	dc.b	smpsNoAttack, $01
00077B36 E10C                       	smpsAlterNote       $0C
00077B38 E701                       	dc.b	smpsNoAttack, $01
00077B3A E108                       	smpsAlterNote       $08
00077B3C E701                       	dc.b	smpsNoAttack, $01
00077B3E E102                       	smpsAlterNote       $02
00077B40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077B44 E105                       	smpsAlterNote       $05
00077B46 E701                       	dc.b	smpsNoAttack, $01
00077B48 E10B                       	smpsAlterNote       $0B
00077B4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077B4E E105                       	smpsAlterNote       $05
00077B50 E701                       	dc.b	smpsNoAttack, $01
00077B52 E102                       	smpsAlterNote       $02
00077B54 E701                       	dc.b	smpsNoAttack, $01
00077B56 E109                       	smpsAlterNote       $09
00077B58 C40A C207                  	dc.b	nG5, $0A, nF5, $07
00077B5C E108                       	smpsAlterNote       $08
00077B5E C10D                       	dc.b	nE5, $0D
00077B60 E105                       	smpsAlterNote       $05
00077B62 E701                       	dc.b	smpsNoAttack, $01
00077B64 E101                       	smpsAlterNote       $01
00077B66 E701                       	dc.b	smpsNoAttack, $01
00077B68 E102                       	smpsAlterNote       $02
00077B6A E701                       	dc.b	smpsNoAttack, $01
00077B6C E108                       	smpsAlterNote       $08
00077B6E E701                       	dc.b	smpsNoAttack, $01
00077B70 E10C                       	smpsAlterNote       $0C
00077B72 E701                       	dc.b	smpsNoAttack, $01
00077B74 E108                       	smpsAlterNote       $08
00077B76 E701                       	dc.b	smpsNoAttack, $01
00077B78 E105                       	smpsAlterNote       $05
00077B7A E701                       	dc.b	smpsNoAttack, $01
00077B7C E101                       	smpsAlterNote       $01
00077B7E E701                       	dc.b	smpsNoAttack, $01
00077B80 E105                       	smpsAlterNote       $05
00077B82 E701                       	dc.b	smpsNoAttack, $01
00077B84 E10B                       	smpsAlterNote       $0B
00077B86 E701                       	dc.b	smpsNoAttack, $01
00077B88 E10C                       	smpsAlterNote       $0C
00077B8A E701                       	dc.b	smpsNoAttack, $01
00077B8C E108                       	smpsAlterNote       $08
00077B8E E701                       	dc.b	smpsNoAttack, $01
00077B90 E102                       	smpsAlterNote       $02
00077B92 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00077B9A E10B                       	smpsAlterNote       $0B
00077B9C BA01 8001                  	dc.b	nA4, $01, nRst, $01
00077BA0 E10C                       	smpsAlterNote       $0C
00077BA2 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00077BA6 E10B                       	smpsAlterNote       $0B
00077BA8 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00077BAE E107                       	smpsAlterNote       $07
00077BB0 BF03                       	dc.b	nD5, $03
00077BB2 E108                       	smpsAlterNote       $08
00077BB4 C103 8001                  	dc.b	nE5, $03, nRst, $01
00077BB8 E109                       	smpsAlterNote       $09
00077BBA C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00077BC0 E10B                       	smpsAlterNote       $0B
00077BC2 C606 8001                  	dc.b	nA5, $06, nRst, $01
00077BC6 E107                       	smpsAlterNote       $07
00077BC8 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00077BCC E106                       	smpsAlterNote       $06
00077BCE C90D                       	dc.b	nC6, $0D
00077BD0 E103                       	smpsAlterNote       $03
00077BD2 E701                       	dc.b	smpsNoAttack, $01
00077BD4 E1FF                       	smpsAlterNote       $FF
00077BD6 E701                       	dc.b	smpsNoAttack, $01
00077BD8 E103                       	smpsAlterNote       $03
00077BDA E701                       	dc.b	smpsNoAttack, $01
00077BDC E109                       	smpsAlterNote       $09
00077BDE E701                       	dc.b	smpsNoAttack, $01
00077BE0 E10A                       	smpsAlterNote       $0A
00077BE2 E701                       	dc.b	smpsNoAttack, $01
00077BE4 E106                       	smpsAlterNote       $06
00077BE6 E701                       	dc.b	smpsNoAttack, $01
00077BE8 E100                       	smpsAlterNote       $00
00077BEA E701                       	dc.b	smpsNoAttack, $01
00077BEC E10C                       	smpsAlterNote       $0C
00077BEE C703 8001                  	dc.b	nBb5, $03, nRst, $01
00077BF2 E10B                       	smpsAlterNote       $0B
00077BF4 C603                       	dc.b	nA5, $03
00077BF6 E109                       	smpsAlterNote       $09
00077BF8 C403 8001                  	dc.b	nG5, $03, nRst, $01
00077BFC E10B                       	smpsAlterNote       $0B
00077BFE C60D                       	dc.b	nA5, $0D
00077C00 E105                       	smpsAlterNote       $05
00077C02 E701                       	dc.b	smpsNoAttack, $01
00077C04 E104                       	smpsAlterNote       $04
00077C06 E701                       	dc.b	smpsNoAttack, $01
00077C08 E108                       	smpsAlterNote       $08
00077C0A E701                       	dc.b	smpsNoAttack, $01
00077C0C E10E                       	smpsAlterNote       $0E
00077C0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077C12 E10B                       	smpsAlterNote       $0B
00077C14 E701                       	dc.b	smpsNoAttack, $01
00077C16 E105                       	smpsAlterNote       $05
00077C18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077C1C E10B                       	smpsAlterNote       $0B
00077C1E E701                       	dc.b	smpsNoAttack, $01
00077C20 E10E                       	smpsAlterNote       $0E
00077C22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077C26 E108                       	smpsAlterNote       $08
00077C28 E701                       	dc.b	smpsNoAttack, $01
00077C2A E104                       	smpsAlterNote       $04
00077C2C E701                       	dc.b	smpsNoAttack, $01
00077C2E E105                       	smpsAlterNote       $05
00077C30 E701                       	dc.b	smpsNoAttack, $01
00077C32 E10B                       	smpsAlterNote       $0B
00077C34 E701                       	dc.b	smpsNoAttack, $01
00077C36 E10F                       	smpsAlterNote       $0F
00077C38 E701                       	dc.b	smpsNoAttack, $01
00077C3A E10B                       	smpsAlterNote       $0B
00077C3C E701                       	dc.b	smpsNoAttack, $01
00077C3E E108                       	smpsAlterNote       $08
00077C40 E701                       	dc.b	smpsNoAttack, $01
00077C42 E104                       	smpsAlterNote       $04
00077C44 E701                       	dc.b	smpsNoAttack, $01
00077C46 E108                       	smpsAlterNote       $08
00077C48 E701                       	dc.b	smpsNoAttack, $01
00077C4A E10E                       	smpsAlterNote       $0E
00077C4C E701                       	dc.b	smpsNoAttack, $01
00077C4E E10F                       	smpsAlterNote       $0F
00077C50 E701                       	dc.b	smpsNoAttack, $01
00077C52 E10B                       	smpsAlterNote       $0B
00077C54 E701                       	dc.b	smpsNoAttack, $01
00077C56 E105                       	smpsAlterNote       $05
00077C58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077C5C E108                       	smpsAlterNote       $08
00077C5E E701                       	dc.b	smpsNoAttack, $01
00077C60 E10E                       	smpsAlterNote       $0E
00077C62 E701                       	dc.b	smpsNoAttack, $01
00077C64 E10F                       	smpsAlterNote       $0F
00077C66 800F                       	dc.b	nRst, $0F
00077C68 E107                       	smpsAlterNote       $07
00077C6A BF02 8001                  	dc.b	nD5, $02, nRst, $01
00077C6E E108                       	smpsAlterNote       $08
00077C70 C103                       	dc.b	nE5, $03
00077C72 E109                       	smpsAlterNote       $09
00077C74 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00077C7A E10B                       	smpsAlterNote       $0B
00077C7C C607                       	dc.b	nA5, $07
00077C7E E107                       	smpsAlterNote       $07
00077C80 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00077C84 E106                       	smpsAlterNote       $06
00077C86 C90D                       	dc.b	nC6, $0D
00077C88 E107                       	smpsAlterNote       $07
00077C8A CB03 8001                  	dc.b	nD6, $03, nRst, $01
00077C8E E10C                       	smpsAlterNote       $0C
00077C90 C704                       	dc.b	nBb5, $04
00077C92 E10B                       	smpsAlterNote       $0B
00077C94 C604 8001                  	dc.b	nA5, $04, nRst, $01
00077C98 E109                       	smpsAlterNote       $09
00077C9A C404                       	dc.b	nG5, $04
00077C9C E10B                       	smpsAlterNote       $0B
00077C9E C60D                       	dc.b	nA5, $0D
00077CA0 E108                       	smpsAlterNote       $08
00077CA2 E701                       	dc.b	smpsNoAttack, $01
00077CA4 E105                       	smpsAlterNote       $05
00077CA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077CAA E10B                       	smpsAlterNote       $0B
00077CAC E701                       	dc.b	smpsNoAttack, $01
00077CAE E10F                       	smpsAlterNote       $0F
00077CB0 E701                       	dc.b	smpsNoAttack, $01
00077CB2 E10E                       	smpsAlterNote       $0E
00077CB4 E701                       	dc.b	smpsNoAttack, $01
00077CB6 E108                       	smpsAlterNote       $08
00077CB8 E701                       	dc.b	smpsNoAttack, $01
00077CBA E104                       	smpsAlterNote       $04
00077CBC E701                       	dc.b	smpsNoAttack, $01
00077CBE E108                       	smpsAlterNote       $08
00077CC0 E701                       	dc.b	smpsNoAttack, $01
00077CC2 E10B                       	smpsAlterNote       $0B
00077CC4 E701                       	dc.b	smpsNoAttack, $01
00077CC6 E10F                       	smpsAlterNote       $0F
00077CC8 E701                       	dc.b	smpsNoAttack, $01
00077CCA E10B                       	smpsAlterNote       $0B
00077CCC E701                       	dc.b	smpsNoAttack, $01
00077CCE E105                       	smpsAlterNote       $05
00077CD0 E701                       	dc.b	smpsNoAttack, $01
00077CD2 E104                       	smpsAlterNote       $04
00077CD4 E701                       	dc.b	smpsNoAttack, $01
00077CD6 E108                       	smpsAlterNote       $08
00077CD8 E701                       	dc.b	smpsNoAttack, $01
00077CDA E10E                       	smpsAlterNote       $0E
00077CDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077CE0 E10B                       	smpsAlterNote       $0B
00077CE2 E701                       	dc.b	smpsNoAttack, $01
00077CE4 E105                       	smpsAlterNote       $05
00077CE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077CEA E10B                       	smpsAlterNote       $0B
00077CEC E701                       	dc.b	smpsNoAttack, $01
00077CEE E10E                       	smpsAlterNote       $0E
00077CF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077CF4 E108                       	smpsAlterNote       $08
00077CF6 E701                       	dc.b	smpsNoAttack, $01
00077CF8 E105                       	smpsAlterNote       $05
00077CFA 8001                       	dc.b	nRst, $01
00077CFC E109                       	smpsAlterNote       $09
00077CFE C401 8001                  	dc.b	nG5, $01, nRst, $01
00077D02 E10B                       	smpsAlterNote       $0B
00077D04 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00077D0C E109                       	smpsAlterNote       $09
00077D0E C404                       	dc.b	nG5, $04
00077D10 E10B                       	smpsAlterNote       $0B
00077D12 C604 8001                  	dc.b	nA5, $04, nRst, $01
00077D16 E107                       	smpsAlterNote       $07
00077D18 BF0D                       	dc.b	nD5, $0D
00077D1A E101                       	smpsAlterNote       $01
00077D1C E701                       	dc.b	smpsNoAttack, $01
00077D1E E100                       	smpsAlterNote       $00
00077D20 E701                       	dc.b	smpsNoAttack, $01
00077D22 E104                       	smpsAlterNote       $04
00077D24 E701                       	dc.b	smpsNoAttack, $01
00077D26 E10A                       	smpsAlterNote       $0A
00077D28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077D2C E107                       	smpsAlterNote       $07
00077D2E E701                       	dc.b	smpsNoAttack, $01
00077D30 E101                       	smpsAlterNote       $01
00077D32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077D36 E107                       	smpsAlterNote       $07
00077D38 E701                       	dc.b	smpsNoAttack, $01
00077D3A E10A                       	smpsAlterNote       $0A
00077D3C E701                       	dc.b	smpsNoAttack, $01
00077D3E E10B                       	smpsAlterNote       $0B
00077D40 8001                       	dc.b	nRst, $01
00077D42 E108                       	smpsAlterNote       $08
00077D44 8001                       	dc.b	nRst, $01
00077D46 E109                       	smpsAlterNote       $09
00077D48 8001 C401                  	dc.b	nRst, $01, nG5, $01
00077D4C E10B                       	smpsAlterNote       $0B
00077D4E C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00077D56 E108                       	smpsAlterNote       $08
00077D58 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00077D5C E109                       	smpsAlterNote       $09
00077D5E CE06 8001                  	dc.b	nF6, $06, nRst, $01
00077D62 E108                       	smpsAlterNote       $08
00077D64 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00077D68 E106                       	smpsAlterNote       $06
00077D6A C903                       	dc.b	nC6, $03
00077D6C E109                       	smpsAlterNote       $09
00077D6E C403 8001                  	dc.b	nG5, $03, nRst, $01
00077D72 E10C                       	smpsAlterNote       $0C
00077D74 C70D                       	dc.b	nBb5, $0D
00077D76 E109                       	smpsAlterNote       $09
00077D78 E701                       	dc.b	smpsNoAttack, $01
00077D7A E105                       	smpsAlterNote       $05
00077D7C E701                       	dc.b	smpsNoAttack, $01
00077D7E E109                       	smpsAlterNote       $09
00077D80 E701                       	dc.b	smpsNoAttack, $01
00077D82 E10F                       	smpsAlterNote       $0F
00077D84 E701                       	dc.b	smpsNoAttack, $01
00077D86 E110                       	smpsAlterNote       $10
00077D88 E701                       	dc.b	smpsNoAttack, $01
00077D8A E10C                       	smpsAlterNote       $0C
00077D8C E701                       	dc.b	smpsNoAttack, $01
00077D8E E106                       	smpsAlterNote       $06
00077D90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077D94 E109                       	smpsAlterNote       $09
00077D96 E701                       	dc.b	smpsNoAttack, $01
00077D98 E10F                       	smpsAlterNote       $0F
00077D9A E701                       	dc.b	smpsNoAttack, $01
00077D9C E110                       	smpsAlterNote       $10
00077D9E 8001                       	dc.b	nRst, $01
00077DA0 E10B                       	smpsAlterNote       $0B
00077DA2 C606 8001                  	dc.b	nA5, $06, nRst, $01
00077DA6 E109                       	smpsAlterNote       $09
00077DA8 C40D                       	dc.b	nG5, $0D
00077DAA E103                       	smpsAlterNote       $03
00077DAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077DB0 E106                       	smpsAlterNote       $06
00077DB2 E701                       	dc.b	smpsNoAttack, $01
00077DB4 E10C                       	smpsAlterNote       $0C
00077DB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077DBA E106                       	smpsAlterNote       $06
00077DBC E701                       	dc.b	smpsNoAttack, $01
00077DBE E103                       	smpsAlterNote       $03
00077DC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077DC4 E109                       	smpsAlterNote       $09
00077DC6 E701                       	dc.b	smpsNoAttack, $01
00077DC8 E10D                       	smpsAlterNote       $0D
00077DCA E701                       	dc.b	smpsNoAttack, $01
00077DCC E10C                       	smpsAlterNote       $0C
00077DCE E701                       	dc.b	smpsNoAttack, $01
00077DD0 E106                       	smpsAlterNote       $06
00077DD2 E701                       	dc.b	smpsNoAttack, $01
00077DD4 E102                       	smpsAlterNote       $02
00077DD6 E701                       	dc.b	smpsNoAttack, $01
00077DD8 E103                       	smpsAlterNote       $03
00077DDA 8001                       	dc.b	nRst, $01
00077DDC E10B                       	smpsAlterNote       $0B
00077DDE C60D                       	dc.b	nA5, $0D
00077DE0 E108                       	smpsAlterNote       $08
00077DE2 E701                       	dc.b	smpsNoAttack, $01
00077DE4 E104                       	smpsAlterNote       $04
00077DE6 E701                       	dc.b	smpsNoAttack, $01
00077DE8 E108                       	smpsAlterNote       $08
00077DEA E701                       	dc.b	smpsNoAttack, $01
00077DEC E10B                       	smpsAlterNote       $0B
00077DEE E701                       	dc.b	smpsNoAttack, $01
00077DF0 E10F                       	smpsAlterNote       $0F
00077DF2 E701                       	dc.b	smpsNoAttack, $01
00077DF4 E10B                       	smpsAlterNote       $0B
00077DF6 E701                       	dc.b	smpsNoAttack, $01
00077DF8 E105                       	smpsAlterNote       $05
00077DFA E701                       	dc.b	smpsNoAttack, $01
00077DFC E104                       	smpsAlterNote       $04
00077DFE E701                       	dc.b	smpsNoAttack, $01
00077E00 E108                       	smpsAlterNote       $08
00077E02 E701                       	dc.b	smpsNoAttack, $01
00077E04 E10E                       	smpsAlterNote       $0E
00077E06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077E0A E10B                       	smpsAlterNote       $0B
00077E0C E701                       	dc.b	smpsNoAttack, $01
00077E0E E105                       	smpsAlterNote       $05
00077E10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077E14 E10C                       	smpsAlterNote       $0C
00077E16 C70E                       	dc.b	nBb5, $0E
00077E18 E106                       	smpsAlterNote       $06
00077E1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077E1E E10C                       	smpsAlterNote       $0C
00077E20 E701                       	dc.b	smpsNoAttack, $01
00077E22 E10F                       	smpsAlterNote       $0F
00077E24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077E28 E109                       	smpsAlterNote       $09
00077E2A E701                       	dc.b	smpsNoAttack, $01
00077E2C E105                       	smpsAlterNote       $05
00077E2E E701                       	dc.b	smpsNoAttack, $01
00077E30 E106                       	smpsAlterNote       $06
00077E32 E701                       	dc.b	smpsNoAttack, $01
00077E34 E10C                       	smpsAlterNote       $0C
00077E36 E701                       	dc.b	smpsNoAttack, $01
00077E38 E110                       	smpsAlterNote       $10
00077E3A E701                       	dc.b	smpsNoAttack, $01
00077E3C E10C                       	smpsAlterNote       $0C
00077E3E E701                       	dc.b	smpsNoAttack, $01
00077E40 E109                       	smpsAlterNote       $09
00077E42 E701                       	dc.b	smpsNoAttack, $01
00077E44 E105                       	smpsAlterNote       $05
00077E46 E701                       	dc.b	smpsNoAttack, $01
00077E48 E106                       	smpsAlterNote       $06
00077E4A 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00077E4E E107                       	smpsAlterNote       $07
00077E50 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00077E55 E108                       	smpsAlterNote       $08
00077E57 CD0D                       	dc.b	nE6, $0D
00077E59 E107                       	smpsAlterNote       $07
00077E5B CB0D                       	dc.b	nD6, $0D
00077E5D E104                       	smpsAlterNote       $04
00077E5F E701                       	dc.b	smpsNoAttack, $01
00077E61 E100                       	smpsAlterNote       $00
00077E63 E701                       	dc.b	smpsNoAttack, $01
00077E65 E101                       	smpsAlterNote       $01
00077E67 E701                       	dc.b	smpsNoAttack, $01
00077E69 E107                       	smpsAlterNote       $07
00077E6B E701                       	dc.b	smpsNoAttack, $01
00077E6D E10B                       	smpsAlterNote       $0B
00077E6F E701                       	dc.b	smpsNoAttack, $01
00077E71 E107                       	smpsAlterNote       $07
00077E73 E701                       	dc.b	smpsNoAttack, $01
00077E75 E104                       	smpsAlterNote       $04
00077E77 E701                       	dc.b	smpsNoAttack, $01
00077E79 E100                       	smpsAlterNote       $00
00077E7B E701                       	dc.b	smpsNoAttack, $01
00077E7D E104                       	smpsAlterNote       $04
00077E7F E701                       	dc.b	smpsNoAttack, $01
00077E81 E10A                       	smpsAlterNote       $0A
00077E83 E701                       	dc.b	smpsNoAttack, $01
00077E85 E10B                       	smpsAlterNote       $0B
00077E87 E701                       	dc.b	smpsNoAttack, $01
00077E89 E108                       	smpsAlterNote       $08
00077E8B CC0D                       	dc.b	nEb6, $0D
00077E8D E105                       	smpsAlterNote       $05
00077E8F E701                       	dc.b	smpsNoAttack, $01
00077E91 E101                       	smpsAlterNote       $01
00077E93 E701                       	dc.b	smpsNoAttack, $01
00077E95 E102                       	smpsAlterNote       $02
00077E97 E701                       	dc.b	smpsNoAttack, $01
00077E99 E108                       	smpsAlterNote       $08
00077E9B E701                       	dc.b	smpsNoAttack, $01
00077E9D E106                       	smpsAlterNote       $06
00077E9F C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00077EAB 8001                       	dc.b	nRst, $01
00077EAD E107                       	smpsAlterNote       $07
00077EAF CB0D                       	dc.b	nD6, $0D
00077EB1 E104                       	smpsAlterNote       $04
00077EB3 E701                       	dc.b	smpsNoAttack, $01
00077EB5 E100                       	smpsAlterNote       $00
00077EB7 E701                       	dc.b	smpsNoAttack, $01
00077EB9 E104                       	smpsAlterNote       $04
00077EBB E701                       	dc.b	smpsNoAttack, $01
00077EBD E107                       	smpsAlterNote       $07
00077EBF E701                       	dc.b	smpsNoAttack, $01
00077EC1 E10B                       	smpsAlterNote       $0B
00077EC3 E701                       	dc.b	smpsNoAttack, $01
00077EC5 E107                       	smpsAlterNote       $07
00077EC7 E701                       	dc.b	smpsNoAttack, $01
00077EC9 E101                       	smpsAlterNote       $01
00077ECB E701                       	dc.b	smpsNoAttack, $01
00077ECD E100                       	smpsAlterNote       $00
00077ECF E701                       	dc.b	smpsNoAttack, $01
00077ED1 E104                       	smpsAlterNote       $04
00077ED3 E701                       	dc.b	smpsNoAttack, $01
00077ED5 E10A                       	smpsAlterNote       $0A
00077ED7 E701                       	dc.b	smpsNoAttack, $01
00077ED9 E10B                       	smpsAlterNote       $0B
00077EDB 8001                       	dc.b	nRst, $01
00077EDD E109                       	smpsAlterNote       $09
00077EDF CE0A                       	dc.b	nF6, $0A
00077EE1 E108                       	smpsAlterNote       $08
00077EE3 CC07                       	dc.b	nEb6, $07
00077EE5 E106                       	smpsAlterNote       $06
00077EE7 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00077EF3 E107                       	smpsAlterNote       $07
00077EF5 CB0D                       	dc.b	nD6, $0D
00077EF7 E101                       	smpsAlterNote       $01
00077EF9 E701                       	dc.b	smpsNoAttack, $01
00077EFB E100                       	smpsAlterNote       $00
00077EFD E701                       	dc.b	smpsNoAttack, $01
00077EFF E104                       	smpsAlterNote       $04
00077F01 E701                       	dc.b	smpsNoAttack, $01
00077F03 E10A                       	smpsAlterNote       $0A
00077F05 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077F09 E107                       	smpsAlterNote       $07
00077F0B E701                       	dc.b	smpsNoAttack, $01
00077F0D E101                       	smpsAlterNote       $01
00077F0F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077F13 E107                       	smpsAlterNote       $07
00077F15 E701                       	dc.b	smpsNoAttack, $01
00077F17 E10A                       	smpsAlterNote       $0A
00077F19 E701                       	dc.b	smpsNoAttack, $01
00077F1B E10B                       	smpsAlterNote       $0B
00077F1D 8001                       	dc.b	nRst, $01
00077F1F E108                       	smpsAlterNote       $08
00077F21 CC0D                       	dc.b	nEb6, $0D
00077F23 E102                       	smpsAlterNote       $02
00077F25 E701                       	dc.b	smpsNoAttack, $01
00077F27 E101                       	smpsAlterNote       $01
00077F29 E701                       	dc.b	smpsNoAttack, $01
00077F2B E105                       	smpsAlterNote       $05
00077F2D E701                       	dc.b	smpsNoAttack, $01
00077F2F E108                       	smpsAlterNote       $08
00077F31 8001                       	dc.b	nRst, $01
00077F33 E106                       	smpsAlterNote       $06
00077F35 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00077F41 8001                       	dc.b	nRst, $01
00077F43 E107                       	smpsAlterNote       $07
00077F45 CB0D                       	dc.b	nD6, $0D
00077F47 E101                       	smpsAlterNote       $01
00077F49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077F4D E104                       	smpsAlterNote       $04
00077F4F E701                       	dc.b	smpsNoAttack, $01
00077F51 E10A                       	smpsAlterNote       $0A
00077F53 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077F57 E104                       	smpsAlterNote       $04
00077F59 E701                       	dc.b	smpsNoAttack, $01
00077F5B E101                       	smpsAlterNote       $01
00077F5D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077F61 E107                       	smpsAlterNote       $07
00077F63 E701                       	dc.b	smpsNoAttack, $01
00077F65 E10B                       	smpsAlterNote       $0B
00077F67 E701                       	dc.b	smpsNoAttack, $01
00077F69 E10A                       	smpsAlterNote       $0A
00077F6B E701                       	dc.b	smpsNoAttack, $01
00077F6D E104                       	smpsAlterNote       $04
00077F6F E701                       	dc.b	smpsNoAttack, $01
00077F71 E100                       	smpsAlterNote       $00
00077F73 E701                       	dc.b	smpsNoAttack, $01
00077F75 E101                       	smpsAlterNote       $01
00077F77 801C                       	dc.b	nRst, $1C
00077F7B E107                       	smpsAlterNote       $07
00077F7D BF03 8001                  	dc.b	nD5, $03, nRst, $01
00077F81 E603                       	smpsAlterVol        $03
00077F83 F6F1 AD                    	smpsJump            music84_Jump03
00077F86                            
00077F86                            ; FM3 Data
00077F86                            music84_FM3:
00077F86 E0C0                       	smpsPan             panCenter, $00
00077F8A E109                       	smpsAlterNote       $09
00077F8C C203 8007                  	dc.b	nF5, $03, nRst, $07
00077F90 E108                       	smpsAlterNote       $08
00077F92 C103 800B                  	dc.b	nE5, $03, nRst, $0B
00077F96 E10B                       	smpsAlterNote       $0B
00077F98 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00077F9E E040                       	smpsPan             panRight, $00
00077FA0 E110                       	smpsAlterNote       $10
00077FA2 E6F9                       	smpsAlterVol        $F9
00077FA4 C702 8001                  	dc.b	nBb5, $02, nRst, $01
00077FA8 E10F                       	smpsAlterNote       $0F
00077FAA C603                       	dc.b	nA5, $03
00077FAC E10D                       	smpsAlterNote       $0D
00077FAE C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00077FB4 E10C                       	smpsAlterNote       $0C
00077FB6 C103 8001                  	dc.b	nE5, $03, nRst, $01
00077FBA E10A                       	smpsAlterNote       $0A
00077FBC BD02 8001                  	dc.b	nC5, $02, nRst, $01
00077FC0 E10F                       	smpsAlterNote       $0F
00077FC2 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00077FC6 E0C0                       	smpsPan             panCenter, $00
00077FCA E109                       	smpsAlterNote       $09
00077FCC E609                       	smpsAlterVol        $09
00077FCE B603                       	dc.b	nF4, $03
00077FD0                            
00077FD0                            music84_Jump02:
00077FD0 E70A                       	dc.b	smpsNoAttack, $0A
00077FD2 E103                       	smpsAlterNote       $03
00077FD4 E701                       	dc.b	smpsNoAttack, $01
00077FD6 E102                       	smpsAlterNote       $02
00077FD8 E701                       	dc.b	smpsNoAttack, $01
00077FDA E106                       	smpsAlterNote       $06
00077FDC E701                       	dc.b	smpsNoAttack, $01
00077FDE E10C                       	smpsAlterNote       $0C
00077FE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077FE4 E109                       	smpsAlterNote       $09
00077FE6 E701                       	dc.b	smpsNoAttack, $01
00077FE8 E103                       	smpsAlterNote       $03
00077FEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077FEE E109                       	smpsAlterNote       $09
00077FF0 E701                       	dc.b	smpsNoAttack, $01
00077FF2 E10C                       	smpsAlterNote       $0C
00077FF4 E701                       	dc.b	smpsNoAttack, $01
00077FF6 E10D                       	smpsAlterNote       $0D
00077FF8 8001                       	dc.b	nRst, $01
00077FFA E109                       	smpsAlterNote       $09
00077FFC B80D                       	dc.b	nG4, $0D
00077FFE E103                       	smpsAlterNote       $03
00078000 E701                       	dc.b	smpsNoAttack, $01
00078002 E102                       	smpsAlterNote       $02
00078004 E701                       	dc.b	smpsNoAttack, $01
00078006 E106                       	smpsAlterNote       $06
00078008 E701                       	dc.b	smpsNoAttack, $01
0007800A E10C                       	smpsAlterNote       $0C
0007800C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078010 E109                       	smpsAlterNote       $09
00078012 E701                       	dc.b	smpsNoAttack, $01
00078014 E103                       	smpsAlterNote       $03
00078016 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007801A E109                       	smpsAlterNote       $09
0007801C E701                       	dc.b	smpsNoAttack, $01
0007801E E10C                       	smpsAlterNote       $0C
00078020 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078024 E106                       	smpsAlterNote       $06
00078026 E701                       	dc.b	smpsNoAttack, $01
00078028 E102                       	smpsAlterNote       $02
0007802A E701                       	dc.b	smpsNoAttack, $01
0007802C E103                       	smpsAlterNote       $03
0007802E E701                       	dc.b	smpsNoAttack, $01
00078030 E109                       	smpsAlterNote       $09
00078032 E701                       	dc.b	smpsNoAttack, $01
00078034 E10D                       	smpsAlterNote       $0D
00078036 E701                       	dc.b	smpsNoAttack, $01
00078038 E109                       	smpsAlterNote       $09
0007803A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007803E E10B                       	smpsAlterNote       $0B
00078040 BA0D                       	dc.b	nA4, $0D
00078042 E105                       	smpsAlterNote       $05
00078044 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078048 E108                       	smpsAlterNote       $08
0007804A E701                       	dc.b	smpsNoAttack, $01
0007804C E10E                       	smpsAlterNote       $0E
0007804E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078052 E108                       	smpsAlterNote       $08
00078054 E701                       	dc.b	smpsNoAttack, $01
00078056 E104                       	smpsAlterNote       $04
00078058 E701                       	dc.b	smpsNoAttack, $01
0007805A E105                       	smpsAlterNote       $05
0007805C E701                       	dc.b	smpsNoAttack, $01
0007805E E10B                       	smpsAlterNote       $0B
00078060 E701                       	dc.b	smpsNoAttack, $01
00078062 E10F                       	smpsAlterNote       $0F
00078064 E701                       	dc.b	smpsNoAttack, $01
00078066 E10B                       	smpsAlterNote       $0B
00078068 E701                       	dc.b	smpsNoAttack, $01
0007806A E108                       	smpsAlterNote       $08
0007806C E701                       	dc.b	smpsNoAttack, $01
0007806E E104                       	smpsAlterNote       $04
00078070 E701                       	dc.b	smpsNoAttack, $01
00078072 E108                       	smpsAlterNote       $08
00078074 E701                       	dc.b	smpsNoAttack, $01
00078076 E10E                       	smpsAlterNote       $0E
00078078 E701                       	dc.b	smpsNoAttack, $01
0007807A E10F                       	smpsAlterNote       $0F
0007807C E701                       	dc.b	smpsNoAttack, $01
0007807E E10B                       	smpsAlterNote       $0B
00078080 E701                       	dc.b	smpsNoAttack, $01
00078082 E105                       	smpsAlterNote       $05
00078084 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078088 E108                       	smpsAlterNote       $08
0007808A E701                       	dc.b	smpsNoAttack, $01
0007808C E10E                       	smpsAlterNote       $0E
0007808E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078092 E108                       	smpsAlterNote       $08
00078094 E701                       	dc.b	smpsNoAttack, $01
00078096 E105                       	smpsAlterNote       $05
00078098 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007809C E10B                       	smpsAlterNote       $0B
0007809E E701                       	dc.b	smpsNoAttack, $01
000780A0 E10F                       	smpsAlterNote       $0F
000780A2 E701                       	dc.b	smpsNoAttack, $01
000780A4 E10E                       	smpsAlterNote       $0E
000780A6 E701                       	dc.b	smpsNoAttack, $01
000780A8 E108                       	smpsAlterNote       $08
000780AA E701                       	dc.b	smpsNoAttack, $01
000780AC E104                       	smpsAlterNote       $04
000780AE E701                       	dc.b	smpsNoAttack, $01
000780B0 E105                       	smpsAlterNote       $05
000780B2 8001                       	dc.b	nRst, $01
000780B4 E108                       	smpsAlterNote       $08
000780B6 B50A                       	dc.b	nE4, $0A
000780B8 E109                       	smpsAlterNote       $09
000780BA B60D                       	dc.b	nF4, $0D
000780BC E106                       	smpsAlterNote       $06
000780BE E701                       	dc.b	smpsNoAttack, $01
000780C0 E103                       	smpsAlterNote       $03
000780C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000780C6 E109                       	smpsAlterNote       $09
000780C8 E701                       	dc.b	smpsNoAttack, $01
000780CA E10D                       	smpsAlterNote       $0D
000780CC E701                       	dc.b	smpsNoAttack, $01
000780CE E10C                       	smpsAlterNote       $0C
000780D0 E701                       	dc.b	smpsNoAttack, $01
000780D2 E106                       	smpsAlterNote       $06
000780D4 E701                       	dc.b	smpsNoAttack, $01
000780D6 E102                       	smpsAlterNote       $02
000780D8 E701                       	dc.b	smpsNoAttack, $01
000780DA E106                       	smpsAlterNote       $06
000780DC E701                       	dc.b	smpsNoAttack, $01
000780DE E109                       	smpsAlterNote       $09
000780E0 E701                       	dc.b	smpsNoAttack, $01
000780E2 E10D                       	smpsAlterNote       $0D
000780E4 E701                       	dc.b	smpsNoAttack, $01
000780E6 E109                       	smpsAlterNote       $09
000780E8 B80D                       	dc.b	nG4, $0D
000780EA E106                       	smpsAlterNote       $06
000780EC E701                       	dc.b	smpsNoAttack, $01
000780EE E103                       	smpsAlterNote       $03
000780F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000780F4 E109                       	smpsAlterNote       $09
000780F6 E701                       	dc.b	smpsNoAttack, $01
000780F8 E10D                       	smpsAlterNote       $0D
000780FA E701                       	dc.b	smpsNoAttack, $01
000780FC E10C                       	smpsAlterNote       $0C
000780FE E701                       	dc.b	smpsNoAttack, $01
00078100 E106                       	smpsAlterNote       $06
00078102 E701                       	dc.b	smpsNoAttack, $01
00078104 E102                       	smpsAlterNote       $02
00078106 E701                       	dc.b	smpsNoAttack, $01
00078108 E106                       	smpsAlterNote       $06
0007810A E701                       	dc.b	smpsNoAttack, $01
0007810C E109                       	smpsAlterNote       $09
0007810E E701                       	dc.b	smpsNoAttack, $01
00078110 E10D                       	smpsAlterNote       $0D
00078112 E701                       	dc.b	smpsNoAttack, $01
00078114 E109                       	smpsAlterNote       $09
00078116 E701                       	dc.b	smpsNoAttack, $01
00078118 E103                       	smpsAlterNote       $03
0007811A E701                       	dc.b	smpsNoAttack, $01
0007811C E102                       	smpsAlterNote       $02
0007811E E701                       	dc.b	smpsNoAttack, $01
00078120 E106                       	smpsAlterNote       $06
00078122 E701                       	dc.b	smpsNoAttack, $01
00078124 E10C                       	smpsAlterNote       $0C
00078126 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007812A E109                       	smpsAlterNote       $09
0007812C E701                       	dc.b	smpsNoAttack, $01
0007812E E10B                       	smpsAlterNote       $0B
00078130 BA0D                       	dc.b	nA4, $0D
00078132 E108                       	smpsAlterNote       $08
00078134 E701                       	dc.b	smpsNoAttack, $01
00078136 E104                       	smpsAlterNote       $04
00078138 E701                       	dc.b	smpsNoAttack, $01
0007813A E108                       	smpsAlterNote       $08
0007813C E701                       	dc.b	smpsNoAttack, $01
0007813E E10B                       	smpsAlterNote       $0B
00078140 E701                       	dc.b	smpsNoAttack, $01
00078142 E10F                       	smpsAlterNote       $0F
00078144 E701                       	dc.b	smpsNoAttack, $01
00078146 E10B                       	smpsAlterNote       $0B
00078148 E701                       	dc.b	smpsNoAttack, $01
0007814A E105                       	smpsAlterNote       $05
0007814C E701                       	dc.b	smpsNoAttack, $01
0007814E E104                       	smpsAlterNote       $04
00078150 E701                       	dc.b	smpsNoAttack, $01
00078152 E108                       	smpsAlterNote       $08
00078154 E701                       	dc.b	smpsNoAttack, $01
00078156 E10E                       	smpsAlterNote       $0E
00078158 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007815C E10B                       	smpsAlterNote       $0B
0007815E E701                       	dc.b	smpsNoAttack, $01
00078160 E105                       	smpsAlterNote       $05
00078162 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078166 E10B                       	smpsAlterNote       $0B
00078168 E701                       	dc.b	smpsNoAttack, $01
0007816A E10E                       	smpsAlterNote       $0E
0007816C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078170 E108                       	smpsAlterNote       $08
00078172 E701                       	dc.b	smpsNoAttack, $01
00078174 E104                       	smpsAlterNote       $04
00078176 E701                       	dc.b	smpsNoAttack, $01
00078178 E105                       	smpsAlterNote       $05
0007817A E701                       	dc.b	smpsNoAttack, $01
0007817C E10B                       	smpsAlterNote       $0B
0007817E E701                       	dc.b	smpsNoAttack, $01
00078180 E10F                       	smpsAlterNote       $0F
00078182 E701                       	dc.b	smpsNoAttack, $01
00078184 E10B                       	smpsAlterNote       $0B
00078186 E701                       	dc.b	smpsNoAttack, $01
00078188 E108                       	smpsAlterNote       $08
0007818A E701                       	dc.b	smpsNoAttack, $01
0007818C E105                       	smpsAlterNote       $05
0007818E 8001                       	dc.b	nRst, $01
00078190 E109                       	smpsAlterNote       $09
00078192 B609 8001                  	dc.b	nF4, $09, nRst, $01
00078196 E108                       	smpsAlterNote       $08
00078198 B506 8001                  	dc.b	nE4, $06, nRst, $01
0007819C E107                       	smpsAlterNote       $07
0007819E B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000781A2 E108                       	smpsAlterNote       $08
000781A4 B502 8001                  	dc.b	nE4, $02, nRst, $01
000781A8 E109                       	smpsAlterNote       $09
000781AA B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
000781B0 E10B                       	smpsAlterNote       $0B
000781B2 BA0D                       	dc.b	nA4, $0D
000781B4 E108                       	smpsAlterNote       $08
000781B6 E701                       	dc.b	smpsNoAttack, $01
000781B8 E104                       	smpsAlterNote       $04
000781BA E701                       	dc.b	smpsNoAttack, $01
000781BC E108                       	smpsAlterNote       $08
000781BE E701                       	dc.b	smpsNoAttack, $01
000781C0 E10E                       	smpsAlterNote       $0E
000781C2 E701                       	dc.b	smpsNoAttack, $01
000781C4 E10F                       	smpsAlterNote       $0F
000781C6 E701                       	dc.b	smpsNoAttack, $01
000781C8 E10B                       	smpsAlterNote       $0B
000781CA E701                       	dc.b	smpsNoAttack, $01
000781CC E105                       	smpsAlterNote       $05
000781CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000781D2 E108                       	smpsAlterNote       $08
000781D4 E701                       	dc.b	smpsNoAttack, $01
000781D6 E10E                       	smpsAlterNote       $0E
000781D8 E701                       	dc.b	smpsNoAttack, $01
000781DA E10F                       	smpsAlterNote       $0F
000781DC 8001                       	dc.b	nRst, $01
000781DE E109                       	smpsAlterNote       $09
000781E0 C20D                       	dc.b	nF5, $0D
000781E2 E103                       	smpsAlterNote       $03
000781E4 E701                       	dc.b	smpsNoAttack, $01
000781E6 E102                       	smpsAlterNote       $02
000781E8 E701                       	dc.b	smpsNoAttack, $01
000781EA E106                       	smpsAlterNote       $06
000781EC E701                       	dc.b	smpsNoAttack, $01
000781EE E10C                       	smpsAlterNote       $0C
000781F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000781F4 E109                       	smpsAlterNote       $09
000781F6 E701                       	dc.b	smpsNoAttack, $01
000781F8 E103                       	smpsAlterNote       $03
000781FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000781FE E109                       	smpsAlterNote       $09
00078200 E701                       	dc.b	smpsNoAttack, $01
00078202 E10C                       	smpsAlterNote       $0C
00078204 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078208 E106                       	smpsAlterNote       $06
0007820A E701                       	dc.b	smpsNoAttack, $01
0007820C E102                       	smpsAlterNote       $02
0007820E E701                       	dc.b	smpsNoAttack, $01
00078210 E103                       	smpsAlterNote       $03
00078212 E701                       	dc.b	smpsNoAttack, $01
00078214 E109                       	smpsAlterNote       $09
00078216 E701                       	dc.b	smpsNoAttack, $01
00078218 E10D                       	smpsAlterNote       $0D
0007821A E701                       	dc.b	smpsNoAttack, $01
0007821C E109                       	smpsAlterNote       $09
0007821E E701                       	dc.b	smpsNoAttack, $01
00078220 E106                       	smpsAlterNote       $06
00078222 E701                       	dc.b	smpsNoAttack, $01
00078224 E102                       	smpsAlterNote       $02
00078226 E701                       	dc.b	smpsNoAttack, $01
00078228 E106                       	smpsAlterNote       $06
0007822A E701                       	dc.b	smpsNoAttack, $01
0007822C E10C                       	smpsAlterNote       $0C
0007822E E701                       	dc.b	smpsNoAttack, $01
00078230 E10D                       	smpsAlterNote       $0D
00078232 E701                       	dc.b	smpsNoAttack, $01
00078234 E109                       	smpsAlterNote       $09
00078236 E701                       	dc.b	smpsNoAttack, $01
00078238 E103                       	smpsAlterNote       $03
0007823A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007823E E106                       	smpsAlterNote       $06
00078240 E701                       	dc.b	smpsNoAttack, $01
00078242 E10C                       	smpsAlterNote       $0C
00078244 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078248 E106                       	smpsAlterNote       $06
0007824A E701                       	dc.b	smpsNoAttack, $01
0007824C E103                       	smpsAlterNote       $03
0007824E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078252 E109                       	smpsAlterNote       $09
00078254 E701                       	dc.b	smpsNoAttack, $01
00078256 E10D                       	smpsAlterNote       $0D
00078258 E701                       	dc.b	smpsNoAttack, $01
0007825A E10C                       	smpsAlterNote       $0C
0007825C E701                       	dc.b	smpsNoAttack, $01
0007825E E106                       	smpsAlterNote       $06
00078260 E701                       	dc.b	smpsNoAttack, $01
00078262 E102                       	smpsAlterNote       $02
00078264 E701                       	dc.b	smpsNoAttack, $01
00078266 E106                       	smpsAlterNote       $06
00078268 E701                       	dc.b	smpsNoAttack, $01
0007826A E109                       	smpsAlterNote       $09
0007826C E701                       	dc.b	smpsNoAttack, $01
0007826E E10D                       	smpsAlterNote       $0D
00078270 E701                       	dc.b	smpsNoAttack, $01
00078272 E109                       	smpsAlterNote       $09
00078274 E701                       	dc.b	smpsNoAttack, $01
00078276 E103                       	smpsAlterNote       $03
00078278 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007827C E109                       	smpsAlterNote       $09
0007827E C206                       	dc.b	nF5, $06
00078280 E108                       	smpsAlterNote       $08
00078282 C10E                       	dc.b	nE5, $0E
00078284 E102                       	smpsAlterNote       $02
00078286 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007828A E108                       	smpsAlterNote       $08
0007828C E701                       	dc.b	smpsNoAttack, $01
0007828E E10B                       	smpsAlterNote       $0B
00078290 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078294 E105                       	smpsAlterNote       $05
00078296 E701                       	dc.b	smpsNoAttack, $01
00078298 E101                       	smpsAlterNote       $01
0007829A E701                       	dc.b	smpsNoAttack, $01
0007829C E102                       	smpsAlterNote       $02
0007829E E701                       	dc.b	smpsNoAttack, $01
000782A0 E108                       	smpsAlterNote       $08
000782A2 E701                       	dc.b	smpsNoAttack, $01
000782A4 E10C                       	smpsAlterNote       $0C
000782A6 E701                       	dc.b	smpsNoAttack, $01
000782A8 E107                       	smpsAlterNote       $07
000782AA BF0E                       	dc.b	nD5, $0E
000782AC E101                       	smpsAlterNote       $01
000782AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000782B2 E107                       	smpsAlterNote       $07
000782B4 E701                       	dc.b	smpsNoAttack, $01
000782B6 E10A                       	smpsAlterNote       $0A
000782B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000782BC E104                       	smpsAlterNote       $04
000782BE E701                       	dc.b	smpsNoAttack, $01
000782C0 E100                       	smpsAlterNote       $00
000782C2 E701                       	dc.b	smpsNoAttack, $01
000782C4 E104                       	smpsAlterNote       $04
000782C6 E701                       	dc.b	smpsNoAttack, $01
000782C8 E107                       	smpsAlterNote       $07
000782CA E701                       	dc.b	smpsNoAttack, $01
000782CC E10B                       	smpsAlterNote       $0B
000782CE E701                       	dc.b	smpsNoAttack, $01
000782D0 E107                       	smpsAlterNote       $07
000782D2 E701                       	dc.b	smpsNoAttack, $01
000782D4 E101                       	smpsAlterNote       $01
000782D6 E701                       	dc.b	smpsNoAttack, $01
000782D8 E100                       	smpsAlterNote       $00
000782DA E701                       	dc.b	smpsNoAttack, $01
000782DC E104                       	smpsAlterNote       $04
000782DE E701                       	dc.b	smpsNoAttack, $01
000782E0 E10A                       	smpsAlterNote       $0A
000782E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000782E6 E107                       	smpsAlterNote       $07
000782E8 E701                       	dc.b	smpsNoAttack, $01
000782EA E101                       	smpsAlterNote       $01
000782EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000782F0 E107                       	smpsAlterNote       $07
000782F2 E701                       	dc.b	smpsNoAttack, $01
000782F4 E10A                       	smpsAlterNote       $0A
000782F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000782FA E104                       	smpsAlterNote       $04
000782FC E701                       	dc.b	smpsNoAttack, $01
000782FE E100                       	smpsAlterNote       $00
00078300 E701                       	dc.b	smpsNoAttack, $01
00078302 E101                       	smpsAlterNote       $01
00078304 E701                       	dc.b	smpsNoAttack, $01
00078306 E107                       	smpsAlterNote       $07
00078308 E701                       	dc.b	smpsNoAttack, $01
0007830A E10B                       	smpsAlterNote       $0B
0007830C E701                       	dc.b	smpsNoAttack, $01
0007830E E107                       	smpsAlterNote       $07
00078310 E701                       	dc.b	smpsNoAttack, $01
00078312 E104                       	smpsAlterNote       $04
00078314 E701                       	dc.b	smpsNoAttack, $01
00078316 E100                       	smpsAlterNote       $00
00078318 E701                       	dc.b	smpsNoAttack, $01
0007831A E104                       	smpsAlterNote       $04
0007831C E701                       	dc.b	smpsNoAttack, $01
0007831E E10A                       	smpsAlterNote       $0A
00078320 E701                       	dc.b	smpsNoAttack, $01
00078322 E10B                       	smpsAlterNote       $0B
00078324 E701                       	dc.b	smpsNoAttack, $01
00078326 E107                       	smpsAlterNote       $07
00078328 E701                       	dc.b	smpsNoAttack, $01
0007832A E101                       	smpsAlterNote       $01
0007832C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078330 E104                       	smpsAlterNote       $04
00078332 E701                       	dc.b	smpsNoAttack, $01
00078334 E10A                       	smpsAlterNote       $0A
00078336 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007833A E104                       	smpsAlterNote       $04
0007833C E701                       	dc.b	smpsNoAttack, $01
0007833E E101                       	smpsAlterNote       $01
00078340 E701                       	dc.b	smpsNoAttack, $01
00078344 E107                       	smpsAlterNote       $07
00078346 E6FF                       	smpsAlterVol        $FF
00078348 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00078354 8004                       	dc.b	nRst, $04
00078358 E109                       	smpsAlterNote       $09
0007835A E602                       	smpsAlterVol        $02
0007835C B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00078362 E108                       	smpsAlterNote       $08
00078364 B502 8001                  	dc.b	nE4, $02, nRst, $01
00078368 E109                       	smpsAlterNote       $09
0007836A B60D                       	dc.b	nF4, $0D
0007836C E106                       	smpsAlterNote       $06
0007836E E701                       	dc.b	smpsNoAttack, $01
00078370 E102                       	smpsAlterNote       $02
00078372 E701                       	dc.b	smpsNoAttack, $01
00078374 E106                       	smpsAlterNote       $06
00078376 E701                       	dc.b	smpsNoAttack, $01
00078378 E109                       	smpsAlterNote       $09
0007837A E701                       	dc.b	smpsNoAttack, $01
0007837C E10D                       	smpsAlterNote       $0D
0007837E E701                       	dc.b	smpsNoAttack, $01
00078380 E109                       	smpsAlterNote       $09
00078382 E701                       	dc.b	smpsNoAttack, $01
00078384 E103                       	smpsAlterNote       $03
00078386 E701                       	dc.b	smpsNoAttack, $01
00078388 E102                       	smpsAlterNote       $02
0007838A E701                       	dc.b	smpsNoAttack, $01
0007838C E106                       	smpsAlterNote       $06
0007838E E701                       	dc.b	smpsNoAttack, $01
00078390 E10C                       	smpsAlterNote       $0C
00078392 E701                       	dc.b	smpsNoAttack, $01
00078394 E10D                       	smpsAlterNote       $0D
00078396 8001                       	dc.b	nRst, $01
00078398 E109                       	smpsAlterNote       $09
0007839A B80D                       	dc.b	nG4, $0D
0007839C E106                       	smpsAlterNote       $06
0007839E E701                       	dc.b	smpsNoAttack, $01
000783A0 E102                       	smpsAlterNote       $02
000783A2 E701                       	dc.b	smpsNoAttack, $01
000783A4 E106                       	smpsAlterNote       $06
000783A6 E701                       	dc.b	smpsNoAttack, $01
000783A8 E10C                       	smpsAlterNote       $0C
000783AA E701                       	dc.b	smpsNoAttack, $01
000783AC E10D                       	smpsAlterNote       $0D
000783AE E701                       	dc.b	smpsNoAttack, $01
000783B0 E109                       	smpsAlterNote       $09
000783B2 E701                       	dc.b	smpsNoAttack, $01
000783B4 E103                       	smpsAlterNote       $03
000783B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000783BA E106                       	smpsAlterNote       $06
000783BC E701                       	dc.b	smpsNoAttack, $01
000783BE E10C                       	smpsAlterNote       $0C
000783C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000783C4 E106                       	smpsAlterNote       $06
000783C6 E701                       	dc.b	smpsNoAttack, $01
000783C8 E103                       	smpsAlterNote       $03
000783CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000783CE E109                       	smpsAlterNote       $09
000783D0 E701                       	dc.b	smpsNoAttack, $01
000783D2 E10D                       	smpsAlterNote       $0D
000783D4 E701                       	dc.b	smpsNoAttack, $01
000783D6 E10C                       	smpsAlterNote       $0C
000783D8 E701                       	dc.b	smpsNoAttack, $01
000783DA E109                       	smpsAlterNote       $09
000783DC 8001                       	dc.b	nRst, $01
000783DE E10B                       	smpsAlterNote       $0B
000783E0 BA03                       	dc.b	nA4, $03
000783E2 E10C                       	smpsAlterNote       $0C
000783E4 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
000783E8 E10B                       	smpsAlterNote       $0B
000783EA BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
000783F0 E10C                       	smpsAlterNote       $0C
000783F2 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000783F6 E10B                       	smpsAlterNote       $0B
000783F8 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
000783FE E10C                       	smpsAlterNote       $0C
00078400 D303                       	dc.b	nBb6, $03
00078402 E10B                       	smpsAlterNote       $0B
00078404 D20D                       	dc.b	nA6, $0D
00078406 E108                       	smpsAlterNote       $08
00078408 E701                       	dc.b	smpsNoAttack, $01
0007840A E104                       	smpsAlterNote       $04
0007840C E701                       	dc.b	smpsNoAttack, $01
0007840E E105                       	smpsAlterNote       $05
00078410 E701                       	dc.b	smpsNoAttack, $01
00078412 E10B                       	smpsAlterNote       $0B
00078414 E701                       	dc.b	smpsNoAttack, $01
00078416 E10F                       	smpsAlterNote       $0F
00078418 E701                       	dc.b	smpsNoAttack, $01
0007841A E10B                       	smpsAlterNote       $0B
0007841C E701                       	dc.b	smpsNoAttack, $01
0007841E E108                       	smpsAlterNote       $08
00078420 E701                       	dc.b	smpsNoAttack, $01
00078422 E104                       	smpsAlterNote       $04
00078424 E701                       	dc.b	smpsNoAttack, $01
00078426 E108                       	smpsAlterNote       $08
00078428 E701                       	dc.b	smpsNoAttack, $01
0007842A E10E                       	smpsAlterNote       $0E
0007842C E701                       	dc.b	smpsNoAttack, $01
0007842E E10F                       	smpsAlterNote       $0F
00078430 E701                       	dc.b	smpsNoAttack, $01
00078432 E10B                       	smpsAlterNote       $0B
00078434 E701                       	dc.b	smpsNoAttack, $01
00078436 E105                       	smpsAlterNote       $05
00078438 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0007843E E109                       	smpsAlterNote       $09
00078440 CE07                       	dc.b	nF6, $07
00078442 E108                       	smpsAlterNote       $08
00078444 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00078448 E109                       	smpsAlterNote       $09
0007844A CE03 8001                  	dc.b	nF6, $03, nRst, $01
0007844E E108                       	smpsAlterNote       $08
00078450 CC0D                       	dc.b	nEb6, $0D
00078452 E102                       	smpsAlterNote       $02
00078454 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078458 E108                       	smpsAlterNote       $08
0007845A E701                       	dc.b	smpsNoAttack, $01
0007845C E10B                       	smpsAlterNote       $0B
0007845E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078462 E105                       	smpsAlterNote       $05
00078464 E701                       	dc.b	smpsNoAttack, $01
00078466 E101                       	smpsAlterNote       $01
00078468 E701                       	dc.b	smpsNoAttack, $01
0007846A E102                       	smpsAlterNote       $02
0007846C E701                       	dc.b	smpsNoAttack, $01
0007846E E108                       	smpsAlterNote       $08
00078470 E701                       	dc.b	smpsNoAttack, $01
00078472 E10C                       	smpsAlterNote       $0C
00078474 E701                       	dc.b	smpsNoAttack, $01
00078476 E108                       	smpsAlterNote       $08
00078478 E701                       	dc.b	smpsNoAttack, $01
0007847A E105                       	smpsAlterNote       $05
0007847C E701                       	dc.b	smpsNoAttack, $01
0007847E E101                       	smpsAlterNote       $01
00078480 E701                       	dc.b	smpsNoAttack, $01
00078482 E105                       	smpsAlterNote       $05
00078484 E701                       	dc.b	smpsNoAttack, $01
00078486 E10B                       	smpsAlterNote       $0B
00078488 E701                       	dc.b	smpsNoAttack, $01
0007848A E10C                       	smpsAlterNote       $0C
0007848C E701                       	dc.b	smpsNoAttack, $01
0007848E E108                       	smpsAlterNote       $08
00078490 E701                       	dc.b	smpsNoAttack, $01
00078492 E107                       	smpsAlterNote       $07
00078494 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
0007849E E10B                       	smpsAlterNote       $0B
000784A0 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000784AA E109                       	smpsAlterNote       $09
000784AC C203                       	dc.b	nF5, $03
000784AE E108                       	smpsAlterNote       $08
000784B0 C103 8001                  	dc.b	nE5, $03, nRst, $01
000784B4 E109                       	smpsAlterNote       $09
000784B6 C20D                       	dc.b	nF5, $0D
000784B8 E108                       	smpsAlterNote       $08
000784BA C10E                       	dc.b	nE5, $0E
000784BC E107                       	smpsAlterNote       $07
000784BE BF0D                       	dc.b	nD5, $0D
000784C0 E104                       	smpsAlterNote       $04
000784C2 E701                       	dc.b	smpsNoAttack, $01
000784C4 E100                       	smpsAlterNote       $00
000784C6 E701                       	dc.b	smpsNoAttack, $01
000784C8 E104                       	smpsAlterNote       $04
000784CA E701                       	dc.b	smpsNoAttack, $01
000784CC E107                       	smpsAlterNote       $07
000784CE E701                       	dc.b	smpsNoAttack, $01
000784D0 E10B                       	smpsAlterNote       $0B
000784D2 E701                       	dc.b	smpsNoAttack, $01
000784D4 E107                       	smpsAlterNote       $07
000784D6 E701                       	dc.b	smpsNoAttack, $01
000784D8 E101                       	smpsAlterNote       $01
000784DA E701                       	dc.b	smpsNoAttack, $01
000784DC E100                       	smpsAlterNote       $00
000784DE E701                       	dc.b	smpsNoAttack, $01
000784E0 E104                       	smpsAlterNote       $04
000784E2 E701                       	dc.b	smpsNoAttack, $01
000784E4 E10A                       	smpsAlterNote       $0A
000784E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000784EA E107                       	smpsAlterNote       $07
000784EC E701                       	dc.b	smpsNoAttack, $01
000784EE E101                       	smpsAlterNote       $01
000784F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000784F4 E107                       	smpsAlterNote       $07
000784F6 E701                       	dc.b	smpsNoAttack, $01
000784F8 E10A                       	smpsAlterNote       $0A
000784FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000784FE E104                       	smpsAlterNote       $04
00078500 E701                       	dc.b	smpsNoAttack, $01
00078502 E100                       	smpsAlterNote       $00
00078504 E701                       	dc.b	smpsNoAttack, $01
00078506 E101                       	smpsAlterNote       $01
00078508 E701                       	dc.b	smpsNoAttack, $01
0007850A E107                       	smpsAlterNote       $07
0007850C E701                       	dc.b	smpsNoAttack, $01
0007850E E10B                       	smpsAlterNote       $0B
00078510 E701                       	dc.b	smpsNoAttack, $01
00078512 E107                       	smpsAlterNote       $07
00078514 E701                       	dc.b	smpsNoAttack, $01
00078516 E104                       	smpsAlterNote       $04
00078518 E701                       	dc.b	smpsNoAttack, $01
0007851A E100                       	smpsAlterNote       $00
0007851C E701                       	dc.b	smpsNoAttack, $01
0007851E E104                       	smpsAlterNote       $04
00078520 E701                       	dc.b	smpsNoAttack, $01
00078522 E10A                       	smpsAlterNote       $0A
00078524 E701                       	dc.b	smpsNoAttack, $01
00078526 E10B                       	smpsAlterNote       $0B
00078528 E701                       	dc.b	smpsNoAttack, $01
0007852A E107                       	smpsAlterNote       $07
0007852C E701                       	dc.b	smpsNoAttack, $01
0007852E E101                       	smpsAlterNote       $01
00078530 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078534 E104                       	smpsAlterNote       $04
00078536 E701                       	dc.b	smpsNoAttack, $01
00078538 E10A                       	smpsAlterNote       $0A
0007853A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007853E E104                       	smpsAlterNote       $04
00078540 E701                       	dc.b	smpsNoAttack, $01
00078542 E101                       	smpsAlterNote       $01
00078544 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078548 E107                       	smpsAlterNote       $07
0007854A E701                       	dc.b	smpsNoAttack, $01
0007854C E10B                       	smpsAlterNote       $0B
0007854E E701                       	dc.b	smpsNoAttack, $01
00078550 E10A                       	smpsAlterNote       $0A
00078552 E701                       	dc.b	smpsNoAttack, $01
00078554 E104                       	smpsAlterNote       $04
00078556 E701                       	dc.b	smpsNoAttack, $01
00078558 E100                       	smpsAlterNote       $00
0007855A E701                       	dc.b	smpsNoAttack, $01
0007855C E104                       	smpsAlterNote       $04
0007855E E701                       	dc.b	smpsNoAttack, $01
00078560 E107                       	smpsAlterNote       $07
00078562 E701                       	dc.b	smpsNoAttack, $01
00078564 E10B                       	smpsAlterNote       $0B
00078566 E701                       	dc.b	smpsNoAttack, $01
00078568 E107                       	smpsAlterNote       $07
0007856A E701                       	dc.b	smpsNoAttack, $01
0007856C E101                       	smpsAlterNote       $01
0007856E E701                       	dc.b	smpsNoAttack, $01
00078570 E100                       	smpsAlterNote       $00
00078572 E701                       	dc.b	smpsNoAttack, $01
00078574 E104                       	smpsAlterNote       $04
00078576 E701                       	dc.b	smpsNoAttack, $01
00078578 E10A                       	smpsAlterNote       $0A
0007857A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007857E E107                       	smpsAlterNote       $07
00078580 E701                       	dc.b	smpsNoAttack, $01
00078582 E101                       	smpsAlterNote       $01
00078584 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078588 E107                       	smpsAlterNote       $07
0007858A E701                       	dc.b	smpsNoAttack, $01
0007858C E10A                       	smpsAlterNote       $0A
0007858E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078592 E104                       	smpsAlterNote       $04
00078594 E701                       	dc.b	smpsNoAttack, $01
00078596 E100                       	smpsAlterNote       $00
00078598 E701                       	dc.b	smpsNoAttack, $01
0007859A E101                       	smpsAlterNote       $01
0007859C E701                       	dc.b	smpsNoAttack, $01
0007859E E107                       	smpsAlterNote       $07
000785A0 E701                       	dc.b	smpsNoAttack, $01
000785A2 E10B                       	smpsAlterNote       $0B
000785A4 E701                       	dc.b	smpsNoAttack, $01
000785A6 E107                       	smpsAlterNote       $07
000785A8 E701                       	dc.b	smpsNoAttack, $01
000785AA E104                       	smpsAlterNote       $04
000785AC E701                       	dc.b	smpsNoAttack, $01
000785AE E100                       	smpsAlterNote       $00
000785B0 E701                       	dc.b	smpsNoAttack, $01
000785B2 E101                       	smpsAlterNote       $01
000785B4 8001                       	dc.b	nRst, $01
000785B6 E109                       	smpsAlterNote       $09
000785B8 C20D                       	dc.b	nF5, $0D
000785BA E106                       	smpsAlterNote       $06
000785BC E701                       	dc.b	smpsNoAttack, $01
000785BE E102                       	smpsAlterNote       $02
000785C0 E701                       	dc.b	smpsNoAttack, $01
000785C2 E106                       	smpsAlterNote       $06
000785C4 E701                       	dc.b	smpsNoAttack, $01
000785C6 E10C                       	smpsAlterNote       $0C
000785C8 E701                       	dc.b	smpsNoAttack, $01
000785CA E10D                       	smpsAlterNote       $0D
000785CC E701                       	dc.b	smpsNoAttack, $01
000785CE E109                       	smpsAlterNote       $09
000785D0 E701                       	dc.b	smpsNoAttack, $01
000785D2 E103                       	smpsAlterNote       $03
000785D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000785D8 E106                       	smpsAlterNote       $06
000785DA E701                       	dc.b	smpsNoAttack, $01
000785DC E10C                       	smpsAlterNote       $0C
000785DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000785E2 E106                       	smpsAlterNote       $06
000785E4 E701                       	dc.b	smpsNoAttack, $01
000785E6 E103                       	smpsAlterNote       $03
000785E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000785EC E109                       	smpsAlterNote       $09
000785EE E701                       	dc.b	smpsNoAttack, $01
000785F0 E10D                       	smpsAlterNote       $0D
000785F2 E701                       	dc.b	smpsNoAttack, $01
000785F4 E10C                       	smpsAlterNote       $0C
000785F6 E701                       	dc.b	smpsNoAttack, $01
000785F8 E109                       	smpsAlterNote       $09
000785FA 8001                       	dc.b	nRst, $01
000785FC E108                       	smpsAlterNote       $08
000785FE C10D                       	dc.b	nE5, $0D
00078600 E109                       	smpsAlterNote       $09
00078602 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
00078606 E108                       	smpsAlterNote       $08
00078608 C10D                       	dc.b	nE5, $0D
0007860A E102                       	smpsAlterNote       $02
0007860C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078610 E105                       	smpsAlterNote       $05
00078612 E701                       	dc.b	smpsNoAttack, $01
00078614 E108                       	smpsAlterNote       $08
00078616 8001                       	dc.b	nRst, $01
00078618 E107                       	smpsAlterNote       $07
0007861A BF0D                       	dc.b	nD5, $0D
0007861C E108                       	smpsAlterNote       $08
0007861E C107                       	dc.b	nE5, $07
00078620 E109                       	smpsAlterNote       $09
00078622 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00078628 E10B                       	smpsAlterNote       $0B
0007862A C603                       	dc.b	nA5, $03
0007862C E10C                       	smpsAlterNote       $0C
0007862E C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00078634 E10B                       	smpsAlterNote       $0B
00078636 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
0007863C E109                       	smpsAlterNote       $09
0007863E D003                       	dc.b	nG6, $03
00078640 E108                       	smpsAlterNote       $08
00078642 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00078646 E10B                       	smpsAlterNote       $0B
00078648 C601 8001                  	dc.b	nA5, $01, nRst, $01
0007864C E108                       	smpsAlterNote       $08
0007864E C102                       	dc.b	nE5, $02
00078652 E10C                       	smpsAlterNote       $0C
00078654 E6FB                       	smpsAlterVol        $FB
00078656 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
00078662 8001                       	dc.b	nRst, $01
00078664 E10B                       	smpsAlterNote       $0B
00078666 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0007866E E107                       	smpsAlterNote       $07
00078670 A706 8001                  	dc.b	nD3, $06, nRst, $01
00078674 E10B                       	smpsAlterNote       $0B
00078676 A203                       	dc.b	nA2, $03
00078678 E109                       	smpsAlterNote       $09
0007867A AA03 8001                  	dc.b	nF3, $03, nRst, $01
0007867E E108                       	smpsAlterNote       $08
00078680 A906                       	dc.b	nE3, $06
00078682 E107                       	smpsAlterNote       $07
00078684 A703 8001                  	dc.b	nD3, $03, nRst, $01
00078688 E106                       	smpsAlterNote       $06
0007868A A503                       	dc.b	nC3, $03
0007868C E10C                       	smpsAlterNote       $0C
0007868E A303 8001                  	dc.b	nBb2, $03, nRst, $01
00078692 E10B                       	smpsAlterNote       $0B
00078694 A203 8004                  	dc.b	nA2, $03, nRst, $04
00078698 E11B                       	smpsAlterNote       $1B
0007869A C401                       	dc.b	nG5, $01
0007869C E1F4                       	smpsAlterNote       $F4
0007869E E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000786A1 E106                       	smpsAlterNote       $06
000786A3 E701                       	dc.b	smpsNoAttack, $01
000786A5 E10F                       	smpsAlterNote       $0F
000786A7 E701                       	dc.b	smpsNoAttack, $01
000786A9 E1E4                       	smpsAlterNote       $E4
000786AB E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000786AE E1F6                       	smpsAlterNote       $F6
000786B0 E701                       	dc.b	smpsNoAttack, $01
000786B2 E108                       	smpsAlterNote       $08
000786B4 E701                       	dc.b	smpsNoAttack, $01
000786B6 E10B                       	smpsAlterNote       $0B
000786B8 E706                       	dc.b	smpsNoAttack, $06
000786BA E105                       	smpsAlterNote       $05
000786BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000786C0 E108                       	smpsAlterNote       $08
000786C2 E701                       	dc.b	smpsNoAttack, $01
000786C4 E10E                       	smpsAlterNote       $0E
000786C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000786CA E108                       	smpsAlterNote       $08
000786CC E701                       	dc.b	smpsNoAttack, $01
000786CE E105                       	smpsAlterNote       $05
000786D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000786D4 E10B                       	smpsAlterNote       $0B
000786D6 E701                       	dc.b	smpsNoAttack, $01
000786D8 E10F                       	smpsAlterNote       $0F
000786DA E701                       	dc.b	smpsNoAttack, $01
000786DC E10E                       	smpsAlterNote       $0E
000786DE E701                       	dc.b	smpsNoAttack, $01
000786E0 E108                       	smpsAlterNote       $08
000786E2 E701                       	dc.b	smpsNoAttack, $01
000786E4 E104                       	smpsAlterNote       $04
000786E6 E701                       	dc.b	smpsNoAttack, $01
000786E8 E108                       	smpsAlterNote       $08
000786EA E701                       	dc.b	smpsNoAttack, $01
000786EC E10B                       	smpsAlterNote       $0B
000786EE E701                       	dc.b	smpsNoAttack, $01
000786F0 E10F                       	smpsAlterNote       $0F
000786F2 E701                       	dc.b	smpsNoAttack, $01
000786F4 E10B                       	smpsAlterNote       $0B
000786F6 E701                       	dc.b	smpsNoAttack, $01
000786F8 E105                       	smpsAlterNote       $05
000786FA E701                       	dc.b	smpsNoAttack, $01
000786FC E104                       	smpsAlterNote       $04
000786FE E701                       	dc.b	smpsNoAttack, $01
00078700 E108                       	smpsAlterNote       $08
00078702 E701                       	dc.b	smpsNoAttack, $01
00078704 E10E                       	smpsAlterNote       $0E
00078706 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007870A E10B                       	smpsAlterNote       $0B
0007870C E701                       	dc.b	smpsNoAttack, $01
0007870E E105                       	smpsAlterNote       $05
00078710 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078714 E10B                       	smpsAlterNote       $0B
00078716 E701                       	dc.b	smpsNoAttack, $01
00078718 E10E                       	smpsAlterNote       $0E
0007871A E701                       	dc.b	smpsNoAttack, $01
0007871C E10F                       	smpsAlterNote       $0F
0007871E 8001                       	dc.b	nRst, $01
00078720 E109                       	smpsAlterNote       $09
00078722 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00078728 E108                       	smpsAlterNote       $08
0007872A C101 8001                  	dc.b	nE5, $01, nRst, $01
0007872E E109                       	smpsAlterNote       $09
00078730 C202                       	dc.b	nF5, $02
00078732 E108                       	smpsAlterNote       $08
00078734 C102                       	dc.b	nE5, $02
00078736 E107                       	smpsAlterNote       $07
00078738 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0007873C E108                       	smpsAlterNote       $08
0007873E C101 8001                  	dc.b	nE5, $01, nRst, $01
00078742 E107                       	smpsAlterNote       $07
00078744 BF02                       	dc.b	nD5, $02
00078746 E106                       	smpsAlterNote       $06
00078748 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0007874C E107                       	smpsAlterNote       $07
0007874E BF01 8001                  	dc.b	nD5, $01, nRst, $01
00078752 E106                       	smpsAlterNote       $06
00078754 BD02                       	dc.b	nC5, $02
00078756 E10C                       	smpsAlterNote       $0C
00078758 BB02                       	dc.b	nBb4, $02
0007875A E106                       	smpsAlterNote       $06
0007875C BD02 8001                  	dc.b	nC5, $02, nRst, $01
00078760 E10C                       	smpsAlterNote       $0C
00078762 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00078766 E10B                       	smpsAlterNote       $0B
00078768 BA02                       	dc.b	nA4, $02
0007876A E10C                       	smpsAlterNote       $0C
0007876C BB02                       	dc.b	nBb4, $02
0007876E E10B                       	smpsAlterNote       $0B
00078770 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0007877A E108                       	smpsAlterNote       $08
0007877C B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
00078784 E107                       	smpsAlterNote       $07
00078786 BE02                       	dc.b	nCs5, $02
00078788 E10B                       	smpsAlterNote       $0B
0007878A BA02                       	dc.b	nA4, $02
0007878C E109                       	smpsAlterNote       $09
0007878E B802 8001                  	dc.b	nG4, $02, nRst, $01
00078792 E108                       	smpsAlterNote       $08
00078794 B501 8001                  	dc.b	nE4, $01, nRst, $01
00078798 E10B                       	smpsAlterNote       $0B
0007879A AE02                       	dc.b	nA3, $02
0007879C E10C                       	smpsAlterNote       $0C
0007879E A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
000787AA E10B                       	smpsAlterNote       $0B
000787AC A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000787B4 E107                       	smpsAlterNote       $07
000787B6 A706 8001                  	dc.b	nD3, $06, nRst, $01
000787BA E10B                       	smpsAlterNote       $0B
000787BC A203                       	dc.b	nA2, $03
000787BE E109                       	smpsAlterNote       $09
000787C0 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000787C4 E108                       	smpsAlterNote       $08
000787C6 A906 8001                  	dc.b	nE3, $06, nRst, $01
000787CA E107                       	smpsAlterNote       $07
000787CC A702 8001                  	dc.b	nD3, $02, nRst, $01
000787D0 E106                       	smpsAlterNote       $06
000787D2 A503                       	dc.b	nC3, $03
000787D4 E10C                       	smpsAlterNote       $0C
000787D6 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000787DC E107                       	smpsAlterNote       $07
000787DE B20D                       	dc.b	nCs4, $0D
000787E0 E104                       	smpsAlterNote       $04
000787E2 E701                       	dc.b	smpsNoAttack, $01
000787E4 E100                       	smpsAlterNote       $00
000787E6 E701                       	dc.b	smpsNoAttack, $01
000787E8 E104                       	smpsAlterNote       $04
000787EA E701                       	dc.b	smpsNoAttack, $01
000787EC E10A                       	smpsAlterNote       $0A
000787EE E701                       	dc.b	smpsNoAttack, $01
000787F0 E10B                       	smpsAlterNote       $0B
000787F2 E701                       	dc.b	smpsNoAttack, $01
000787F4 E107                       	smpsAlterNote       $07
000787F6 E701                       	dc.b	smpsNoAttack, $01
000787F8 E101                       	smpsAlterNote       $01
000787FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000787FE E104                       	smpsAlterNote       $04
00078800 E701                       	dc.b	smpsNoAttack, $01
00078802 E10A                       	smpsAlterNote       $0A
00078804 E701                       	dc.b	smpsNoAttack, $01
00078806 E10B                       	smpsAlterNote       $0B
00078808 8001                       	dc.b	nRst, $01
0007880A E107                       	smpsAlterNote       $07
0007880C B30D                       	dc.b	nD4, $0D
0007880E E104                       	smpsAlterNote       $04
00078810 E701                       	dc.b	smpsNoAttack, $01
00078812 E100                       	smpsAlterNote       $00
00078814 E701                       	dc.b	smpsNoAttack, $01
00078816 E104                       	smpsAlterNote       $04
00078818 E701                       	dc.b	smpsNoAttack, $01
0007881A E10A                       	smpsAlterNote       $0A
0007881C E701                       	dc.b	smpsNoAttack, $01
0007881E E10B                       	smpsAlterNote       $0B
00078820 E701                       	dc.b	smpsNoAttack, $01
00078822 E107                       	smpsAlterNote       $07
00078824 E701                       	dc.b	smpsNoAttack, $01
00078826 E101                       	smpsAlterNote       $01
00078828 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007882C E104                       	smpsAlterNote       $04
0007882E E701                       	dc.b	smpsNoAttack, $01
00078830 E10A                       	smpsAlterNote       $0A
00078832 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078836 E104                       	smpsAlterNote       $04
00078838 E701                       	dc.b	smpsNoAttack, $01
0007883A E101                       	smpsAlterNote       $01
0007883C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078840 E107                       	smpsAlterNote       $07
00078842 E701                       	dc.b	smpsNoAttack, $01
00078844 E10B                       	smpsAlterNote       $0B
00078846 E701                       	dc.b	smpsNoAttack, $01
00078848 E10A                       	smpsAlterNote       $0A
0007884A E701                       	dc.b	smpsNoAttack, $01
0007884C E107                       	smpsAlterNote       $07
0007884E 8001                       	dc.b	nRst, $01
00078850 E108                       	smpsAlterNote       $08
00078852 B50D                       	dc.b	nE4, $0D
00078854 E102                       	smpsAlterNote       $02
00078856 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007885A E105                       	smpsAlterNote       $05
0007885C E701                       	dc.b	smpsNoAttack, $01
0007885E E10B                       	smpsAlterNote       $0B
00078860 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078864 E105                       	smpsAlterNote       $05
00078866 E701                       	dc.b	smpsNoAttack, $01
00078868 E102                       	smpsAlterNote       $02
0007886A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007886E E108                       	smpsAlterNote       $08
00078870 E701                       	dc.b	smpsNoAttack, $01
00078872 E10C                       	smpsAlterNote       $0C
00078874 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00078878 E107                       	smpsAlterNote       $07
0007887A B30D                       	dc.b	nD4, $0D
0007887C E101                       	smpsAlterNote       $01
0007887E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078882 E104                       	smpsAlterNote       $04
00078884 E701                       	dc.b	smpsNoAttack, $01
00078886 E10A                       	smpsAlterNote       $0A
00078888 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007888C E104                       	smpsAlterNote       $04
0007888E E701                       	dc.b	smpsNoAttack, $01
00078890 E101                       	smpsAlterNote       $01
00078892 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078896 E107                       	smpsAlterNote       $07
00078898 E701                       	dc.b	smpsNoAttack, $01
0007889A E10B                       	smpsAlterNote       $0B
0007889C E701                       	dc.b	smpsNoAttack, $01
0007889E E10A                       	smpsAlterNote       $0A
000788A0 E701                       	dc.b	smpsNoAttack, $01
000788A2 E104                       	smpsAlterNote       $04
000788A4 E701                       	dc.b	smpsNoAttack, $01
000788A6 E100                       	smpsAlterNote       $00
000788A8 E701                       	dc.b	smpsNoAttack, $01
000788AA E104                       	smpsAlterNote       $04
000788AC E701                       	dc.b	smpsNoAttack, $01
000788AE E107                       	smpsAlterNote       $07
000788B0 E701                       	dc.b	smpsNoAttack, $01
000788B2 E10B                       	smpsAlterNote       $0B
000788B4 E701                       	dc.b	smpsNoAttack, $01
000788B6 E107                       	smpsAlterNote       $07
000788B8 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
000788BC E101                       	smpsAlterNote       $01
000788BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000788C2 E107                       	smpsAlterNote       $07
000788C4 E701                       	dc.b	smpsNoAttack, $01
000788C6 E10A                       	smpsAlterNote       $0A
000788C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000788CC E104                       	smpsAlterNote       $04
000788CE E701                       	dc.b	smpsNoAttack, $01
000788D0 E100                       	smpsAlterNote       $00
000788D2 E701                       	dc.b	smpsNoAttack, $01
000788D4 E101                       	smpsAlterNote       $01
000788D6 E701                       	dc.b	smpsNoAttack, $01
000788D8 E107                       	smpsAlterNote       $07
000788DA E701                       	dc.b	smpsNoAttack, $01
000788DC E10B                       	smpsAlterNote       $0B
000788DE E701                       	dc.b	smpsNoAttack, $01
000788E0 E107                       	smpsAlterNote       $07
000788E2 B30E                       	dc.b	nD4, $0E
000788E4 E101                       	smpsAlterNote       $01
000788E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000788EA E107                       	smpsAlterNote       $07
000788EC E701                       	dc.b	smpsNoAttack, $01
000788EE E10A                       	smpsAlterNote       $0A
000788F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000788F4 E104                       	smpsAlterNote       $04
000788F6 E701                       	dc.b	smpsNoAttack, $01
000788F8 E100                       	smpsAlterNote       $00
000788FA E701                       	dc.b	smpsNoAttack, $01
000788FC E101                       	smpsAlterNote       $01
000788FE E701                       	dc.b	smpsNoAttack, $01
00078900 E107                       	smpsAlterNote       $07
00078902 E701                       	dc.b	smpsNoAttack, $01
00078904 E10B                       	smpsAlterNote       $0B
00078906 E701                       	dc.b	smpsNoAttack, $01
00078908 E107                       	smpsAlterNote       $07
0007890A E701                       	dc.b	smpsNoAttack, $01
0007890C E104                       	smpsAlterNote       $04
0007890E E701                       	dc.b	smpsNoAttack, $01
00078910 E100                       	smpsAlterNote       $00
00078912 E701                       	dc.b	smpsNoAttack, $01
00078914 E104                       	smpsAlterNote       $04
00078916 E701                       	dc.b	smpsNoAttack, $01
00078918 E10A                       	smpsAlterNote       $0A
0007891A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007891E E107                       	smpsAlterNote       $07
00078920 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00078924 E104                       	smpsAlterNote       $04
00078926 E701                       	dc.b	smpsNoAttack, $01
00078928 E100                       	smpsAlterNote       $00
0007892A E701                       	dc.b	smpsNoAttack, $01
0007892C E101                       	smpsAlterNote       $01
0007892E E701                       	dc.b	smpsNoAttack, $01
00078930 E107                       	smpsAlterNote       $07
00078932 E701                       	dc.b	smpsNoAttack, $01
00078934 E10B                       	smpsAlterNote       $0B
00078936 E701                       	dc.b	smpsNoAttack, $01
00078938 E107                       	smpsAlterNote       $07
0007893A E701                       	dc.b	smpsNoAttack, $01
0007893C E104                       	smpsAlterNote       $04
0007893E E701                       	dc.b	smpsNoAttack, $01
00078940 E100                       	smpsAlterNote       $00
00078942 E701                       	dc.b	smpsNoAttack, $01
00078944 E104                       	smpsAlterNote       $04
00078946 E701                       	dc.b	smpsNoAttack, $01
00078948 E10A                       	smpsAlterNote       $0A
0007894A E701                       	dc.b	smpsNoAttack, $01
0007894C E10B                       	smpsAlterNote       $0B
0007894E E701                       	dc.b	smpsNoAttack, $01
00078952 E6FF                       	smpsAlterVol        $FF
00078954 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
00078960 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
00078968 E109                       	smpsAlterNote       $09
0007896A E601                       	smpsAlterVol        $01
0007896C B60D                       	dc.b	nF4, $0D
0007896E E106                       	smpsAlterNote       $06
00078970 E701                       	dc.b	smpsNoAttack, $01
00078972 E102                       	smpsAlterNote       $02
00078974 E701                       	dc.b	smpsNoAttack, $01
00078976 E106                       	smpsAlterNote       $06
00078978 E701                       	dc.b	smpsNoAttack, $01
0007897A E109                       	smpsAlterNote       $09
0007897C E701                       	dc.b	smpsNoAttack, $01
0007897E E10D                       	smpsAlterNote       $0D
00078980 E701                       	dc.b	smpsNoAttack, $01
00078982 E109                       	smpsAlterNote       $09
00078984 E701                       	dc.b	smpsNoAttack, $01
00078986 E103                       	smpsAlterNote       $03
00078988 E701                       	dc.b	smpsNoAttack, $01
0007898A E102                       	smpsAlterNote       $02
0007898C E701                       	dc.b	smpsNoAttack, $01
0007898E E106                       	smpsAlterNote       $06
00078990 E701                       	dc.b	smpsNoAttack, $01
00078992 E10C                       	smpsAlterNote       $0C
00078994 E701                       	dc.b	smpsNoAttack, $01
00078996 E10D                       	smpsAlterNote       $0D
00078998 8001                       	dc.b	nRst, $01
0007899A E109                       	smpsAlterNote       $09
0007899C B80D                       	dc.b	nG4, $0D
0007899E E106                       	smpsAlterNote       $06
000789A0 E701                       	dc.b	smpsNoAttack, $01
000789A2 E102                       	smpsAlterNote       $02
000789A4 E701                       	dc.b	smpsNoAttack, $01
000789A6 E106                       	smpsAlterNote       $06
000789A8 E701                       	dc.b	smpsNoAttack, $01
000789AA E109                       	smpsAlterNote       $09
000789AC E701                       	dc.b	smpsNoAttack, $01
000789AE E10D                       	smpsAlterNote       $0D
000789B0 E701                       	dc.b	smpsNoAttack, $01
000789B2 E109                       	smpsAlterNote       $09
000789B4 E701                       	dc.b	smpsNoAttack, $01
000789B6 E103                       	smpsAlterNote       $03
000789B8 E701                       	dc.b	smpsNoAttack, $01
000789BA E102                       	smpsAlterNote       $02
000789BC E701                       	dc.b	smpsNoAttack, $01
000789BE E106                       	smpsAlterNote       $06
000789C0 E701                       	dc.b	smpsNoAttack, $01
000789C2 E10C                       	smpsAlterNote       $0C
000789C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000789C8 E106                       	smpsAlterNote       $06
000789CA E701                       	dc.b	smpsNoAttack, $01
000789CC E103                       	smpsAlterNote       $03
000789CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000789D2 E109                       	smpsAlterNote       $09
000789D4 E701                       	dc.b	smpsNoAttack, $01
000789D6 E10D                       	smpsAlterNote       $0D
000789D8 E701                       	dc.b	smpsNoAttack, $01
000789DA E10C                       	smpsAlterNote       $0C
000789DC E701                       	dc.b	smpsNoAttack, $01
000789DE E109                       	smpsAlterNote       $09
000789E0 8001                       	dc.b	nRst, $01
000789E2 E10B                       	smpsAlterNote       $0B
000789E4 BA0D                       	dc.b	nA4, $0D
000789E6 E105                       	smpsAlterNote       $05
000789E8 E701                       	dc.b	smpsNoAttack, $01
000789EA E104                       	smpsAlterNote       $04
000789EC E701                       	dc.b	smpsNoAttack, $01
000789EE E108                       	smpsAlterNote       $08
000789F0 E701                       	dc.b	smpsNoAttack, $01
000789F2 E10E                       	smpsAlterNote       $0E
000789F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000789F8 E10B                       	smpsAlterNote       $0B
000789FA E701                       	dc.b	smpsNoAttack, $01
000789FC E105                       	smpsAlterNote       $05
000789FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078A02 E10B                       	smpsAlterNote       $0B
00078A04 E701                       	dc.b	smpsNoAttack, $01
00078A06 E10E                       	smpsAlterNote       $0E
00078A08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078A0C E108                       	smpsAlterNote       $08
00078A0E E701                       	dc.b	smpsNoAttack, $01
00078A10 E104                       	smpsAlterNote       $04
00078A12 E701                       	dc.b	smpsNoAttack, $01
00078A14 E105                       	smpsAlterNote       $05
00078A16 E701                       	dc.b	smpsNoAttack, $01
00078A18 E10B                       	smpsAlterNote       $0B
00078A1A E701                       	dc.b	smpsNoAttack, $01
00078A1C E10F                       	smpsAlterNote       $0F
00078A1E E701                       	dc.b	smpsNoAttack, $01
00078A20 E10B                       	smpsAlterNote       $0B
00078A22 E701                       	dc.b	smpsNoAttack, $01
00078A24 E108                       	smpsAlterNote       $08
00078A26 E701                       	dc.b	smpsNoAttack, $01
00078A28 E104                       	smpsAlterNote       $04
00078A2A E701                       	dc.b	smpsNoAttack, $01
00078A2C E108                       	smpsAlterNote       $08
00078A2E E701                       	dc.b	smpsNoAttack, $01
00078A30 E10E                       	smpsAlterNote       $0E
00078A32 E701                       	dc.b	smpsNoAttack, $01
00078A34 E10F                       	smpsAlterNote       $0F
00078A36 E701                       	dc.b	smpsNoAttack, $01
00078A38 E10B                       	smpsAlterNote       $0B
00078A3A E701                       	dc.b	smpsNoAttack, $01
00078A3C E105                       	smpsAlterNote       $05
00078A3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078A42 E108                       	smpsAlterNote       $08
00078A44 E701                       	dc.b	smpsNoAttack, $01
00078A46 E10E                       	smpsAlterNote       $0E
00078A48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078A4C E108                       	smpsAlterNote       $08
00078A4E E701                       	dc.b	smpsNoAttack, $01
00078A50 E105                       	smpsAlterNote       $05
00078A52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078A56 E108                       	smpsAlterNote       $08
00078A58 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00078A5C E109                       	smpsAlterNote       $09
00078A5E B60D                       	dc.b	nF4, $0D
00078A60 E103                       	smpsAlterNote       $03
00078A62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078A66 E106                       	smpsAlterNote       $06
00078A68 E701                       	dc.b	smpsNoAttack, $01
00078A6A E10C                       	smpsAlterNote       $0C
00078A6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078A70 E106                       	smpsAlterNote       $06
00078A72 E701                       	dc.b	smpsNoAttack, $01
00078A74 E103                       	smpsAlterNote       $03
00078A76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078A7A E109                       	smpsAlterNote       $09
00078A7C E701                       	dc.b	smpsNoAttack, $01
00078A7E E10D                       	smpsAlterNote       $0D
00078A80 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00078A84 E109                       	smpsAlterNote       $09
00078A86 B80D                       	dc.b	nG4, $0D
00078A88 E103                       	smpsAlterNote       $03
00078A8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078A8E E109                       	smpsAlterNote       $09
00078A90 E701                       	dc.b	smpsNoAttack, $01
00078A92 E10C                       	smpsAlterNote       $0C
00078A94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078A98 E106                       	smpsAlterNote       $06
00078A9A E701                       	dc.b	smpsNoAttack, $01
00078A9C E102                       	smpsAlterNote       $02
00078A9E E701                       	dc.b	smpsNoAttack, $01
00078AA0 E103                       	smpsAlterNote       $03
00078AA2 E701                       	dc.b	smpsNoAttack, $01
00078AA4 E109                       	smpsAlterNote       $09
00078AA6 E701                       	dc.b	smpsNoAttack, $01
00078AA8 E10D                       	smpsAlterNote       $0D
00078AAA E701                       	dc.b	smpsNoAttack, $01
00078AAC E109                       	smpsAlterNote       $09
00078AAE E701                       	dc.b	smpsNoAttack, $01
00078AB0 E106                       	smpsAlterNote       $06
00078AB2 E701                       	dc.b	smpsNoAttack, $01
00078AB4 E102                       	smpsAlterNote       $02
00078AB6 E701                       	dc.b	smpsNoAttack, $01
00078AB8 E106                       	smpsAlterNote       $06
00078ABA E701                       	dc.b	smpsNoAttack, $01
00078ABC E10C                       	smpsAlterNote       $0C
00078ABE E701                       	dc.b	smpsNoAttack, $01
00078AC0 E10D                       	smpsAlterNote       $0D
00078AC2 E701                       	dc.b	smpsNoAttack, $01
00078AC4 E109                       	smpsAlterNote       $09
00078AC6 E701                       	dc.b	smpsNoAttack, $01
00078AC8 E10B                       	smpsAlterNote       $0B
00078ACA BA0D                       	dc.b	nA4, $0D
00078ACC E108                       	smpsAlterNote       $08
00078ACE E701                       	dc.b	smpsNoAttack, $01
00078AD0 E105                       	smpsAlterNote       $05
00078AD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078AD6 E10B                       	smpsAlterNote       $0B
00078AD8 E701                       	dc.b	smpsNoAttack, $01
00078ADA E10F                       	smpsAlterNote       $0F
00078ADC E701                       	dc.b	smpsNoAttack, $01
00078ADE E10E                       	smpsAlterNote       $0E
00078AE0 E701                       	dc.b	smpsNoAttack, $01
00078AE2 E108                       	smpsAlterNote       $08
00078AE4 E701                       	dc.b	smpsNoAttack, $01
00078AE6 E104                       	smpsAlterNote       $04
00078AE8 E701                       	dc.b	smpsNoAttack, $01
00078AEA E108                       	smpsAlterNote       $08
00078AEC E701                       	dc.b	smpsNoAttack, $01
00078AEE E10B                       	smpsAlterNote       $0B
00078AF0 E701                       	dc.b	smpsNoAttack, $01
00078AF2 E10F                       	smpsAlterNote       $0F
00078AF4 E701                       	dc.b	smpsNoAttack, $01
00078AF6 E10B                       	smpsAlterNote       $0B
00078AF8 E701                       	dc.b	smpsNoAttack, $01
00078AFA E105                       	smpsAlterNote       $05
00078AFC E701                       	dc.b	smpsNoAttack, $01
00078AFE E104                       	smpsAlterNote       $04
00078B00 E701                       	dc.b	smpsNoAttack, $01
00078B02 E108                       	smpsAlterNote       $08
00078B04 E701                       	dc.b	smpsNoAttack, $01
00078B06 E10E                       	smpsAlterNote       $0E
00078B08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078B0C E10B                       	smpsAlterNote       $0B
00078B0E E701                       	dc.b	smpsNoAttack, $01
00078B10 E105                       	smpsAlterNote       $05
00078B12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078B16 E10B                       	smpsAlterNote       $0B
00078B18 E701                       	dc.b	smpsNoAttack, $01
00078B1A E10E                       	smpsAlterNote       $0E
00078B1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078B20 E108                       	smpsAlterNote       $08
00078B22 E701                       	dc.b	smpsNoAttack, $01
00078B24 E105                       	smpsAlterNote       $05
00078B26 8001                       	dc.b	nRst, $01
00078B28 E109                       	smpsAlterNote       $09
00078B2A B60A                       	dc.b	nF4, $0A
00078B2C E108                       	smpsAlterNote       $08
00078B2E B507                       	dc.b	nE4, $07
00078B30 E107                       	smpsAlterNote       $07
00078B32 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00078B36 E108                       	smpsAlterNote       $08
00078B38 B503                       	dc.b	nE4, $03
00078B3A E109                       	smpsAlterNote       $09
00078B3C B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
00078B44 E10B                       	smpsAlterNote       $0B
00078B46 BA0D                       	dc.b	nA4, $0D
00078B48 E108                       	smpsAlterNote       $08
00078B4A E701                       	dc.b	smpsNoAttack, $01
00078B4C E104                       	smpsAlterNote       $04
00078B4E E701                       	dc.b	smpsNoAttack, $01
00078B50 E108                       	smpsAlterNote       $08
00078B52 E701                       	dc.b	smpsNoAttack, $01
00078B54 E10B                       	smpsAlterNote       $0B
00078B56 E701                       	dc.b	smpsNoAttack, $01
00078B58 E10F                       	smpsAlterNote       $0F
00078B5A E701                       	dc.b	smpsNoAttack, $01
00078B5C E10B                       	smpsAlterNote       $0B
00078B5E E701                       	dc.b	smpsNoAttack, $01
00078B60 E105                       	smpsAlterNote       $05
00078B62 E701                       	dc.b	smpsNoAttack, $01
00078B64 E104                       	smpsAlterNote       $04
00078B66 E701                       	dc.b	smpsNoAttack, $01
00078B68 E108                       	smpsAlterNote       $08
00078B6A E701                       	dc.b	smpsNoAttack, $01
00078B6C E10E                       	smpsAlterNote       $0E
00078B6E E701                       	dc.b	smpsNoAttack, $01
00078B70 E10F                       	smpsAlterNote       $0F
00078B72 8001                       	dc.b	nRst, $01
00078B74 E109                       	smpsAlterNote       $09
00078B76 C20D                       	dc.b	nF5, $0D
00078B78 E106                       	smpsAlterNote       $06
00078B7A E701                       	dc.b	smpsNoAttack, $01
00078B7C E102                       	smpsAlterNote       $02
00078B7E E701                       	dc.b	smpsNoAttack, $01
00078B80 E106                       	smpsAlterNote       $06
00078B82 E701                       	dc.b	smpsNoAttack, $01
00078B84 E109                       	smpsAlterNote       $09
00078B86 E701                       	dc.b	smpsNoAttack, $01
00078B88 E10D                       	smpsAlterNote       $0D
00078B8A E701                       	dc.b	smpsNoAttack, $01
00078B8C E109                       	smpsAlterNote       $09
00078B8E E701                       	dc.b	smpsNoAttack, $01
00078B90 E103                       	smpsAlterNote       $03
00078B92 E701                       	dc.b	smpsNoAttack, $01
00078B94 E102                       	smpsAlterNote       $02
00078B96 E701                       	dc.b	smpsNoAttack, $01
00078B98 E106                       	smpsAlterNote       $06
00078B9A E701                       	dc.b	smpsNoAttack, $01
00078B9C E10C                       	smpsAlterNote       $0C
00078B9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078BA2 E109                       	smpsAlterNote       $09
00078BA4 E701                       	dc.b	smpsNoAttack, $01
00078BA6 E103                       	smpsAlterNote       $03
00078BA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078BAC E109                       	smpsAlterNote       $09
00078BAE E701                       	dc.b	smpsNoAttack, $01
00078BB0 E10C                       	smpsAlterNote       $0C
00078BB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078BB6 E106                       	smpsAlterNote       $06
00078BB8 E701                       	dc.b	smpsNoAttack, $01
00078BBA E102                       	smpsAlterNote       $02
00078BBC E701                       	dc.b	smpsNoAttack, $01
00078BBE E103                       	smpsAlterNote       $03
00078BC0 E701                       	dc.b	smpsNoAttack, $01
00078BC2 E109                       	smpsAlterNote       $09
00078BC4 E701                       	dc.b	smpsNoAttack, $01
00078BC6 E10D                       	smpsAlterNote       $0D
00078BC8 E701                       	dc.b	smpsNoAttack, $01
00078BCA E109                       	smpsAlterNote       $09
00078BCC E701                       	dc.b	smpsNoAttack, $01
00078BCE E106                       	smpsAlterNote       $06
00078BD0 E701                       	dc.b	smpsNoAttack, $01
00078BD2 E102                       	smpsAlterNote       $02
00078BD4 E701                       	dc.b	smpsNoAttack, $01
00078BD6 E106                       	smpsAlterNote       $06
00078BD8 E701                       	dc.b	smpsNoAttack, $01
00078BDA E10C                       	smpsAlterNote       $0C
00078BDC E701                       	dc.b	smpsNoAttack, $01
00078BDE E10D                       	smpsAlterNote       $0D
00078BE0 E701                       	dc.b	smpsNoAttack, $01
00078BE2 E109                       	smpsAlterNote       $09
00078BE4 E701                       	dc.b	smpsNoAttack, $01
00078BE6 E103                       	smpsAlterNote       $03
00078BE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078BEC E106                       	smpsAlterNote       $06
00078BEE E701                       	dc.b	smpsNoAttack, $01
00078BF0 E10C                       	smpsAlterNote       $0C
00078BF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078BF6 E106                       	smpsAlterNote       $06
00078BF8 E701                       	dc.b	smpsNoAttack, $01
00078BFA E103                       	smpsAlterNote       $03
00078BFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078C00 E109                       	smpsAlterNote       $09
00078C02 E701                       	dc.b	smpsNoAttack, $01
00078C04 E10D                       	smpsAlterNote       $0D
00078C06 E701                       	dc.b	smpsNoAttack, $01
00078C08 E10C                       	smpsAlterNote       $0C
00078C0A E701                       	dc.b	smpsNoAttack, $01
00078C0C E106                       	smpsAlterNote       $06
00078C0E E701                       	dc.b	smpsNoAttack, $01
00078C10 E103                       	smpsAlterNote       $03
00078C12 8001                       	dc.b	nRst, $01
00078C14 E109                       	smpsAlterNote       $09
00078C16 C206 8001                  	dc.b	nF5, $06, nRst, $01
00078C1C E10C                       	smpsAlterNote       $0C
00078C1E E601                       	smpsAlterVol        $01
00078C20 BB0D                       	dc.b	nBb4, $0D
00078C22 E106                       	smpsAlterNote       $06
00078C24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078C28 E109                       	smpsAlterNote       $09
00078C2A E701                       	dc.b	smpsNoAttack, $01
00078C2C E10F                       	smpsAlterNote       $0F
00078C2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078C32 E109                       	smpsAlterNote       $09
00078C34 E701                       	dc.b	smpsNoAttack, $01
00078C36 E106                       	smpsAlterNote       $06
00078C38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078C3C E10C                       	smpsAlterNote       $0C
00078C3E E701                       	dc.b	smpsNoAttack, $01
00078C40 E110                       	smpsAlterNote       $10
00078C42 E701                       	dc.b	smpsNoAttack, $01
00078C44 E10F                       	smpsAlterNote       $0F
00078C46 E701                       	dc.b	smpsNoAttack, $01
00078C48 E109                       	smpsAlterNote       $09
00078C4A E701                       	dc.b	smpsNoAttack, $01
00078C4C E105                       	smpsAlterNote       $05
00078C4E E701                       	dc.b	smpsNoAttack, $01
00078C50 E106                       	smpsAlterNote       $06
00078C52 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00078C56 E103                       	smpsAlterNote       $03
00078C58 E701                       	dc.b	smpsNoAttack, $01
00078C5A E1FF                       	smpsAlterNote       $FF
00078C5C E701                       	dc.b	smpsNoAttack, $01
00078C5E E103                       	smpsAlterNote       $03
00078C60 E701                       	dc.b	smpsNoAttack, $01
00078C62 E106                       	smpsAlterNote       $06
00078C64 E701                       	dc.b	smpsNoAttack, $01
00078C66 E10A                       	smpsAlterNote       $0A
00078C68 E701                       	dc.b	smpsNoAttack, $01
00078C6A E106                       	smpsAlterNote       $06
00078C6C E701                       	dc.b	smpsNoAttack, $01
00078C6E E100                       	smpsAlterNote       $00
00078C70 E701                       	dc.b	smpsNoAttack, $01
00078C72 E1FF                       	smpsAlterNote       $FF
00078C74 E701                       	dc.b	smpsNoAttack, $01
00078C76 E103                       	smpsAlterNote       $03
00078C78 E701                       	dc.b	smpsNoAttack, $01
00078C7A E109                       	smpsAlterNote       $09
00078C7C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078C80 E106                       	smpsAlterNote       $06
00078C82 E701                       	dc.b	smpsNoAttack, $01
00078C84 E100                       	smpsAlterNote       $00
00078C86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078C8A E107                       	smpsAlterNote       $07
00078C8C BF0E                       	dc.b	nD5, $0E
00078C8E E101                       	smpsAlterNote       $01
00078C90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078C94 E107                       	smpsAlterNote       $07
00078C96 E701                       	dc.b	smpsNoAttack, $01
00078C98 E10A                       	smpsAlterNote       $0A
00078C9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078C9E E104                       	smpsAlterNote       $04
00078CA0 E701                       	dc.b	smpsNoAttack, $01
00078CA2 E100                       	smpsAlterNote       $00
00078CA4 E701                       	dc.b	smpsNoAttack, $01
00078CA6 E101                       	smpsAlterNote       $01
00078CA8 E701                       	dc.b	smpsNoAttack, $01
00078CAA E107                       	smpsAlterNote       $07
00078CAC E701                       	dc.b	smpsNoAttack, $01
00078CAE E10B                       	smpsAlterNote       $0B
00078CB0 E701                       	dc.b	smpsNoAttack, $01
00078CB2 E107                       	smpsAlterNote       $07
00078CB4 E701                       	dc.b	smpsNoAttack, $01
00078CB6 E104                       	smpsAlterNote       $04
00078CB8 E701                       	dc.b	smpsNoAttack, $01
00078CBA E100                       	smpsAlterNote       $00
00078CBC E701                       	dc.b	smpsNoAttack, $01
00078CBE E101                       	smpsAlterNote       $01
00078CC0 8001                       	dc.b	nRst, $01
00078CC2 E108                       	smpsAlterNote       $08
00078CC4 C10C                       	dc.b	nE5, $0C
00078CC6 E109                       	smpsAlterNote       $09
00078CC8 C201 8001                  	dc.b	nF5, $01, nRst, $01
00078CCC E10A                       	smpsAlterNote       $0A
00078CCE 8001                       	dc.b	nRst, $01
00078CD0 E109                       	smpsAlterNote       $09
00078CD2 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00078CD6 E106                       	smpsAlterNote       $06
00078CD8 E701                       	dc.b	smpsNoAttack, $01
00078CDA E102                       	smpsAlterNote       $02
00078CDC E701                       	dc.b	smpsNoAttack, $01
00078CDE E103                       	smpsAlterNote       $03
00078CE0 E701                       	dc.b	smpsNoAttack, $01
00078CE2 E109                       	smpsAlterNote       $09
00078CE4 E701                       	dc.b	smpsNoAttack, $01
00078CE6 E10D                       	smpsAlterNote       $0D
00078CE8 E701                       	dc.b	smpsNoAttack, $01
00078CEA E109                       	smpsAlterNote       $09
00078CEC E701                       	dc.b	smpsNoAttack, $01
00078CEE E106                       	smpsAlterNote       $06
00078CF0 E701                       	dc.b	smpsNoAttack, $01
00078CF2 E102                       	smpsAlterNote       $02
00078CF4 E701                       	dc.b	smpsNoAttack, $01
00078CF6 E106                       	smpsAlterNote       $06
00078CF8 E701                       	dc.b	smpsNoAttack, $01
00078CFA E10C                       	smpsAlterNote       $0C
00078CFC E701                       	dc.b	smpsNoAttack, $01
00078CFE E10D                       	smpsAlterNote       $0D
00078D00 E701                       	dc.b	smpsNoAttack, $01
00078D02 E109                       	smpsAlterNote       $09
00078D04 C40D                       	dc.b	nG5, $0D
00078D06 E106                       	smpsAlterNote       $06
00078D08 E701                       	dc.b	smpsNoAttack, $01
00078D0A E102                       	smpsAlterNote       $02
00078D0C E701                       	dc.b	smpsNoAttack, $01
00078D0E E103                       	smpsAlterNote       $03
00078D10 E701                       	dc.b	smpsNoAttack, $01
00078D12 E109                       	smpsAlterNote       $09
00078D14 E701                       	dc.b	smpsNoAttack, $01
00078D16 E108                       	smpsAlterNote       $08
00078D18 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
00078D24 E109                       	smpsAlterNote       $09
00078D26 C20D                       	dc.b	nF5, $0D
00078D28 E106                       	smpsAlterNote       $06
00078D2A E701                       	dc.b	smpsNoAttack, $01
00078D2C E102                       	smpsAlterNote       $02
00078D2E E701                       	dc.b	smpsNoAttack, $01
00078D30 E106                       	smpsAlterNote       $06
00078D32 E701                       	dc.b	smpsNoAttack, $01
00078D34 E109                       	smpsAlterNote       $09
00078D36 E701                       	dc.b	smpsNoAttack, $01
00078D38 E10D                       	smpsAlterNote       $0D
00078D3A E701                       	dc.b	smpsNoAttack, $01
00078D3C E109                       	smpsAlterNote       $09
00078D3E E701                       	dc.b	smpsNoAttack, $01
00078D40 E103                       	smpsAlterNote       $03
00078D42 E701                       	dc.b	smpsNoAttack, $01
00078D44 E102                       	smpsAlterNote       $02
00078D46 E701                       	dc.b	smpsNoAttack, $01
00078D48 E106                       	smpsAlterNote       $06
00078D4A E701                       	dc.b	smpsNoAttack, $01
00078D4C E10C                       	smpsAlterNote       $0C
00078D4E E701                       	dc.b	smpsNoAttack, $01
00078D50 E10D                       	smpsAlterNote       $0D
00078D52 8001                       	dc.b	nRst, $01
00078D54 E112                       	smpsAlterNote       $12
00078D56 C401                       	dc.b	nG5, $01
00078D58 E1EB                       	smpsAlterNote       $EB
00078D5A E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00078D5D E1FD                       	smpsAlterNote       $FD
00078D5F E701                       	dc.b	smpsNoAttack, $01
00078D61 E10F                       	smpsAlterNote       $0F
00078D63 E701                       	dc.b	smpsNoAttack, $01
00078D65 E118                       	smpsAlterNote       $18
00078D67 E701                       	dc.b	smpsNoAttack, $01
00078D69 E1ED                       	smpsAlterNote       $ED
00078D6B E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00078D6E E1FF                       	smpsAlterNote       $FF
00078D70 E701                       	dc.b	smpsNoAttack, $01
00078D72 E10B                       	smpsAlterNote       $0B
00078D74 E703                       	dc.b	smpsNoAttack, $03
00078D76 E109                       	smpsAlterNote       $09
00078D78 C407                       	dc.b	nG5, $07
00078D7A E108                       	smpsAlterNote       $08
00078D7C C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
00078D88 E109                       	smpsAlterNote       $09
00078D8A C20D                       	dc.b	nF5, $0D
00078D8C E103                       	smpsAlterNote       $03
00078D8E E701                       	dc.b	smpsNoAttack, $01
00078D90 E102                       	smpsAlterNote       $02
00078D92 E701                       	dc.b	smpsNoAttack, $01
00078D94 E106                       	smpsAlterNote       $06
00078D96 E701                       	dc.b	smpsNoAttack, $01
00078D98 E10C                       	smpsAlterNote       $0C
00078D9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078D9E E109                       	smpsAlterNote       $09
00078DA0 E701                       	dc.b	smpsNoAttack, $01
00078DA2 E103                       	smpsAlterNote       $03
00078DA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078DA8 E109                       	smpsAlterNote       $09
00078DAA E701                       	dc.b	smpsNoAttack, $01
00078DAC E10C                       	smpsAlterNote       $0C
00078DAE E701                       	dc.b	smpsNoAttack, $01
00078DB0 E10D                       	smpsAlterNote       $0D
00078DB2 8001                       	dc.b	nRst, $01
00078DB4 E10B                       	smpsAlterNote       $0B
00078DB6 C609 8001                  	dc.b	nA5, $09, nRst, $01
00078DBA E109                       	smpsAlterNote       $09
00078DBC B806 8001                  	dc.b	nG4, $06, nRst, $01
00078DC0 E108                       	smpsAlterNote       $08
00078DC2 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00078DCE 8001                       	dc.b	nRst, $01
00078DD0 E109                       	smpsAlterNote       $09
00078DD2 C20D                       	dc.b	nF5, $0D
00078DD4 E103                       	smpsAlterNote       $03
00078DD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078DDA E106                       	smpsAlterNote       $06
00078DDC E701                       	dc.b	smpsNoAttack, $01
00078DDE E10C                       	smpsAlterNote       $0C
00078DE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078DE4 E106                       	smpsAlterNote       $06
00078DE6 E701                       	dc.b	smpsNoAttack, $01
00078DE8 E103                       	smpsAlterNote       $03
00078DEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078DEE E109                       	smpsAlterNote       $09
00078DF0 E701                       	dc.b	smpsNoAttack, $01
00078DF2 E10D                       	smpsAlterNote       $0D
00078DF4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00078DFA E108                       	smpsAlterNote       $08
00078DFC E6FF                       	smpsAlterVol        $FF
00078DFE A806                       	dc.b	nEb3, $06
00078E00 E10C                       	smpsAlterNote       $0C
00078E02 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00078E06 E108                       	smpsAlterNote       $08
00078E08 A803                       	dc.b	nEb3, $03
00078E0A E109                       	smpsAlterNote       $09
00078E0C AC03 8001                  	dc.b	nG3, $03, nRst, $01
00078E10 E10C                       	smpsAlterNote       $0C
00078E12 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00078E1C E109                       	smpsAlterNote       $09
00078E1E E602                       	smpsAlterVol        $02
00078E20 B604                       	dc.b	nF4, $04
00078E22 E602                       	smpsAlterVol        $02
00078E24 F6F1 AA                    	smpsJump            music84_Jump02
00078E27                            
00078E27                            ; FM4 Data
00078E27                            music84_FM4:
00078E29 E040                       	smpsPan             panRight, $00
00078E2B 8003                       	dc.b	nRst, $03
00078E2D E10F                       	smpsAlterNote       $0F
00078E2F C603 8008                  	dc.b	nA5, $03, nRst, $08
00078E33 E10D                       	smpsAlterNote       $0D
00078E35 C403 800A                  	dc.b	nG5, $03, nRst, $0A
00078E39 E10C                       	smpsAlterNote       $0C
00078E3B C103 8004                  	dc.b	nE5, $03, nRst, $04
00078E41 E6FE                       	smpsAlterVol        $FE
00078E43 E110                       	smpsAlterNote       $10
00078E45 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00078E49 E10F                       	smpsAlterNote       $0F
00078E4B C602 8001                  	dc.b	nA5, $02, nRst, $01
00078E4F E10D                       	smpsAlterNote       $0D
00078E51 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00078E5A E10C                       	smpsAlterNote       $0C
00078E5C C103                       	dc.b	nE5, $03
00078E5E E10A                       	smpsAlterNote       $0A
00078E60 BD03 8001                  	dc.b	nC5, $03, nRst, $01
00078E66 03                         	dc.b	$03
00078E67                            
00078E67                            music84_Jump01:
00078E67 E10B                       	smpsAlterNote       $0B
00078E69 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00078E6D E10C                       	smpsAlterNote       $0C
00078E6F C102 8001                  	dc.b	nE5, $02, nRst, $01
00078E73 E10D                       	smpsAlterNote       $0D
00078E75 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00078E7F E10B                       	smpsAlterNote       $0B
00078E81 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00078E85 E107                       	smpsAlterNote       $07
00078E87 E701                       	dc.b	smpsNoAttack, $01
00078E89 E103                       	smpsAlterNote       $03
00078E8B E701                       	dc.b	smpsNoAttack, $01
00078E8D E104                       	smpsAlterNote       $04
00078E8F E701                       	dc.b	smpsNoAttack, $01
00078E91 E10A                       	smpsAlterNote       $0A
00078E93 E701                       	dc.b	smpsNoAttack, $01
00078E95 E10E                       	smpsAlterNote       $0E
00078E97 E701                       	dc.b	smpsNoAttack, $01
00078E99 E10A                       	smpsAlterNote       $0A
00078E9B E701                       	dc.b	smpsNoAttack, $01
00078E9D E107                       	smpsAlterNote       $07
00078E9F E701                       	dc.b	smpsNoAttack, $01
00078EA1 E104                       	smpsAlterNote       $04
00078EA3 8001                       	dc.b	nRst, $01
00078EA5 E110                       	smpsAlterNote       $10
00078EA7 C703                       	dc.b	nBb5, $03
00078EA9 E10F                       	smpsAlterNote       $0F
00078EAB C603 8001                  	dc.b	nA5, $03, nRst, $01
00078EAF E10D                       	smpsAlterNote       $0D
00078EB1 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
00078EB7 E10C                       	smpsAlterNote       $0C
00078EB9 E701                       	dc.b	smpsNoAttack, $01
00078EBB E108                       	smpsAlterNote       $08
00078EBD E701                       	dc.b	smpsNoAttack, $01
00078EBF E10C                       	smpsAlterNote       $0C
00078EC1 E701                       	dc.b	smpsNoAttack, $01
00078EC3 E10F                       	smpsAlterNote       $0F
00078EC5 E701                       	dc.b	smpsNoAttack, $01
00078EC7 E113                       	smpsAlterNote       $13
00078EC9 E701                       	dc.b	smpsNoAttack, $01
00078ECB E10F                       	smpsAlterNote       $0F
00078ECD E701                       	dc.b	smpsNoAttack, $01
00078ECF E109                       	smpsAlterNote       $09
00078ED1 E701                       	dc.b	smpsNoAttack, $01
00078ED3 E108                       	smpsAlterNote       $08
00078ED5 E701                       	dc.b	smpsNoAttack, $01
00078ED7 E10C                       	smpsAlterNote       $0C
00078ED9 E701                       	dc.b	smpsNoAttack, $01
00078EDB E112                       	smpsAlterNote       $12
00078EDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078EE1 E10C                       	smpsAlterNote       $0C
00078EE3 E701                       	dc.b	smpsNoAttack, $01
00078EE5 E109                       	smpsAlterNote       $09
00078EE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078EEB E10F                       	smpsAlterNote       $0F
00078EED E701                       	dc.b	smpsNoAttack, $01
00078EEF E113                       	smpsAlterNote       $13
00078EF1 E701                       	dc.b	smpsNoAttack, $01
00078EF3 E112                       	smpsAlterNote       $12
00078EF5 E701                       	dc.b	smpsNoAttack, $01
00078EF7 E10C                       	smpsAlterNote       $0C
00078EF9 E701                       	dc.b	smpsNoAttack, $01
00078EFB E108                       	smpsAlterNote       $08
00078EFD E701                       	dc.b	smpsNoAttack, $01
00078EFF E10C                       	smpsAlterNote       $0C
00078F01 E701                       	dc.b	smpsNoAttack, $01
00078F03 E10F                       	smpsAlterNote       $0F
00078F05 E701                       	dc.b	smpsNoAttack, $01
00078F07 E113                       	smpsAlterNote       $13
00078F09 E701                       	dc.b	smpsNoAttack, $01
00078F0B E10F                       	smpsAlterNote       $0F
00078F0D E701                       	dc.b	smpsNoAttack, $01
00078F0F E109                       	smpsAlterNote       $09
00078F11 E701                       	dc.b	smpsNoAttack, $01
00078F13 E108                       	smpsAlterNote       $08
00078F15 E701                       	dc.b	smpsNoAttack, $01
00078F17 E10C                       	smpsAlterNote       $0C
00078F19 E701                       	dc.b	smpsNoAttack, $01
00078F1B E112                       	smpsAlterNote       $12
00078F1D E701                       	dc.b	smpsNoAttack, $01
00078F1F E113                       	smpsAlterNote       $13
00078F21 800F                       	dc.b	nRst, $0F
00078F23 E10B                       	smpsAlterNote       $0B
00078F25 BF03                       	dc.b	nD5, $03
00078F27 E10C                       	smpsAlterNote       $0C
00078F29 C103 8001                  	dc.b	nE5, $03, nRst, $01
00078F2D E10D                       	smpsAlterNote       $0D
00078F2F C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00078F37 E10B                       	smpsAlterNote       $0B
00078F39 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
00078F43 E110                       	smpsAlterNote       $10
00078F45 C704                       	dc.b	nBb5, $04
00078F47 E10F                       	smpsAlterNote       $0F
00078F49 C604 8001                  	dc.b	nA5, $04, nRst, $01
00078F4D E10D                       	smpsAlterNote       $0D
00078F4F C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00078F55 E109                       	smpsAlterNote       $09
00078F57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078F5B E10F                       	smpsAlterNote       $0F
00078F5D E701                       	dc.b	smpsNoAttack, $01
00078F5F E112                       	smpsAlterNote       $12
00078F61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078F65 E10C                       	smpsAlterNote       $0C
00078F67 E701                       	dc.b	smpsNoAttack, $01
00078F69 E108                       	smpsAlterNote       $08
00078F6B E701                       	dc.b	smpsNoAttack, $01
00078F6D E109                       	smpsAlterNote       $09
00078F6F E701                       	dc.b	smpsNoAttack, $01
00078F71 E10F                       	smpsAlterNote       $0F
00078F73 E701                       	dc.b	smpsNoAttack, $01
00078F75 E113                       	smpsAlterNote       $13
00078F77 E701                       	dc.b	smpsNoAttack, $01
00078F79 E10F                       	smpsAlterNote       $0F
00078F7B E701                       	dc.b	smpsNoAttack, $01
00078F7D E10C                       	smpsAlterNote       $0C
00078F7F E701                       	dc.b	smpsNoAttack, $01
00078F81 E108                       	smpsAlterNote       $08
00078F83 E701                       	dc.b	smpsNoAttack, $01
00078F85 E10C                       	smpsAlterNote       $0C
00078F87 E701                       	dc.b	smpsNoAttack, $01
00078F89 E112                       	smpsAlterNote       $12
00078F8B E701                       	dc.b	smpsNoAttack, $01
00078F8D E113                       	smpsAlterNote       $13
00078F8F E701                       	dc.b	smpsNoAttack, $01
00078F91 E10F                       	smpsAlterNote       $0F
00078F93 E701                       	dc.b	smpsNoAttack, $01
00078F95 E109                       	smpsAlterNote       $09
00078F97 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078F9B E10C                       	smpsAlterNote       $0C
00078F9D E701                       	dc.b	smpsNoAttack, $01
00078F9F E112                       	smpsAlterNote       $12
00078FA1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078FA5 E10C                       	smpsAlterNote       $0C
00078FA7 E701                       	dc.b	smpsNoAttack, $01
00078FA9 E109                       	smpsAlterNote       $09
00078FAB E701                       	dc.b	smpsNoAttack, $01
00078FAD E10D                       	smpsAlterNote       $0D
00078FAF C401 8001                  	dc.b	nG5, $01, nRst, $01
00078FB3 E10F                       	smpsAlterNote       $0F
00078FB5 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00078FBF E10D                       	smpsAlterNote       $0D
00078FC1 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00078FC7 E10B                       	smpsAlterNote       $0B
00078FC9 BF0D                       	dc.b	nD5, $0D
00078FCB E108                       	smpsAlterNote       $08
00078FCD E701                       	dc.b	smpsNoAttack, $01
00078FCF E104                       	smpsAlterNote       $04
00078FD1 E701                       	dc.b	smpsNoAttack, $01
00078FD3 E108                       	smpsAlterNote       $08
00078FD5 E701                       	dc.b	smpsNoAttack, $01
00078FD7 E10B                       	smpsAlterNote       $0B
00078FD9 E701                       	dc.b	smpsNoAttack, $01
00078FDB E10F                       	smpsAlterNote       $0F
00078FDD E701                       	dc.b	smpsNoAttack, $01
00078FDF E10B                       	smpsAlterNote       $0B
00078FE1 E701                       	dc.b	smpsNoAttack, $01
00078FE3 E105                       	smpsAlterNote       $05
00078FE5 E701                       	dc.b	smpsNoAttack, $01
00078FE7 E104                       	smpsAlterNote       $04
00078FE9 E701                       	dc.b	smpsNoAttack, $01
00078FEB E108                       	smpsAlterNote       $08
00078FED E701                       	dc.b	smpsNoAttack, $01
00078FEF E10E                       	smpsAlterNote       $0E
00078FF1 E701                       	dc.b	smpsNoAttack, $01
00078FF3 E10F                       	smpsAlterNote       $0F
00078FF5 8001                       	dc.b	nRst, $01
00078FF7 E10C                       	smpsAlterNote       $0C
00078FF9 C101                       	dc.b	nE5, $01
00078FFB E10D                       	smpsAlterNote       $0D
00078FFD C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00079003 E10F                       	smpsAlterNote       $0F
00079005 C606 8001                  	dc.b	nA5, $06, nRst, $01
00079009 E10C                       	smpsAlterNote       $0C
0007900B CD06 8001                  	dc.b	nE6, $06, nRst, $01
0007900F E10D                       	smpsAlterNote       $0D
00079011 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00079015 E10C                       	smpsAlterNote       $0C
00079017 CD03                       	dc.b	nE6, $03
00079019 E10A                       	smpsAlterNote       $0A
0007901B C903 8001                  	dc.b	nC6, $03, nRst, $01
0007901F E10D                       	smpsAlterNote       $0D
00079021 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
00079029 E109                       	smpsAlterNote       $09
0007902B E701                       	dc.b	smpsNoAttack, $01
0007902D E10D                       	smpsAlterNote       $0D
0007902F E701                       	dc.b	smpsNoAttack, $01
00079031 E110                       	smpsAlterNote       $10
00079033 E701                       	dc.b	smpsNoAttack, $01
00079035 E114                       	smpsAlterNote       $14
00079037 E701                       	dc.b	smpsNoAttack, $01
00079039 E110                       	smpsAlterNote       $10
0007903B E701                       	dc.b	smpsNoAttack, $01
0007903D E10A                       	smpsAlterNote       $0A
0007903F E701                       	dc.b	smpsNoAttack, $01
00079041 E109                       	smpsAlterNote       $09
00079043 E701                       	dc.b	smpsNoAttack, $01
00079045 E10D                       	smpsAlterNote       $0D
00079047 E701                       	dc.b	smpsNoAttack, $01
00079049 E113                       	smpsAlterNote       $13
0007904B E701                       	dc.b	smpsNoAttack, $01
0007904D E114                       	smpsAlterNote       $14
0007904F 8001                       	dc.b	nRst, $01
00079051 E10F                       	smpsAlterNote       $0F
00079053 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00079059 E10C                       	smpsAlterNote       $0C
0007905B E701                       	dc.b	smpsNoAttack, $01
0007905D E108                       	smpsAlterNote       $08
0007905F E701                       	dc.b	smpsNoAttack, $01
00079061 E10C                       	smpsAlterNote       $0C
00079063 E701                       	dc.b	smpsNoAttack, $01
00079065 E112                       	smpsAlterNote       $12
00079067 E701                       	dc.b	smpsNoAttack, $01
00079069 E113                       	smpsAlterNote       $13
0007906B E701                       	dc.b	smpsNoAttack, $01
0007906D E10F                       	smpsAlterNote       $0F
0007906F E701                       	dc.b	smpsNoAttack, $01
00079071 E109                       	smpsAlterNote       $09
00079073 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079077 E10C                       	smpsAlterNote       $0C
00079079 E701                       	dc.b	smpsNoAttack, $01
0007907B E112                       	smpsAlterNote       $12
0007907D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079081 E10C                       	smpsAlterNote       $0C
00079083 E701                       	dc.b	smpsNoAttack, $01
00079085 E109                       	smpsAlterNote       $09
00079087 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007908B E10F                       	smpsAlterNote       $0F
0007908D E701                       	dc.b	smpsNoAttack, $01
0007908F E113                       	smpsAlterNote       $13
00079091 E701                       	dc.b	smpsNoAttack, $01
00079093 E112                       	smpsAlterNote       $12
00079095 E701                       	dc.b	smpsNoAttack, $01
00079097 E10C                       	smpsAlterNote       $0C
00079099 E701                       	dc.b	smpsNoAttack, $01
0007909B E108                       	smpsAlterNote       $08
0007909D E701                       	dc.b	smpsNoAttack, $01
0007909F E10C                       	smpsAlterNote       $0C
000790A1 E701                       	dc.b	smpsNoAttack, $01
000790A3 E10F                       	smpsAlterNote       $0F
000790A5 E701                       	dc.b	smpsNoAttack, $01
000790A7 E113                       	smpsAlterNote       $13
000790A9 E701                       	dc.b	smpsNoAttack, $01
000790AB E10F                       	smpsAlterNote       $0F
000790AD E701                       	dc.b	smpsNoAttack, $01
000790AF E109                       	smpsAlterNote       $09
000790B1 E701                       	dc.b	smpsNoAttack, $01
000790B3 E108                       	smpsAlterNote       $08
000790B5 E701                       	dc.b	smpsNoAttack, $01
000790B7 E10C                       	smpsAlterNote       $0C
000790B9 E701                       	dc.b	smpsNoAttack, $01
000790BB E112                       	smpsAlterNote       $12
000790BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000790C1 E10F                       	smpsAlterNote       $0F
000790C3 E701                       	dc.b	smpsNoAttack, $01
000790C5 E109                       	smpsAlterNote       $09
000790C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000790CB E10F                       	smpsAlterNote       $0F
000790CD E701                       	dc.b	smpsNoAttack, $01
000790CF E113                       	smpsAlterNote       $13
000790D1 E701                       	dc.b	smpsNoAttack, $01
000790D3 E112                       	smpsAlterNote       $12
000790D5 E701                       	dc.b	smpsNoAttack, $01
000790D7 E10C                       	smpsAlterNote       $0C
000790D9 E701                       	dc.b	smpsNoAttack, $01
000790DB E108                       	smpsAlterNote       $08
000790DD E701                       	dc.b	smpsNoAttack, $01
000790DF E10C                       	smpsAlterNote       $0C
000790E1 E701                       	dc.b	smpsNoAttack, $01
000790E3 E10F                       	smpsAlterNote       $0F
000790E5 E701                       	dc.b	smpsNoAttack, $01
000790E7 E113                       	smpsAlterNote       $13
000790E9 E701                       	dc.b	smpsNoAttack, $01
000790EB E10F                       	smpsAlterNote       $0F
000790ED E701                       	dc.b	smpsNoAttack, $01
000790EF E109                       	smpsAlterNote       $09
000790F1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000790F5 E10F                       	smpsAlterNote       $0F
000790F7 C60D                       	dc.b	nA5, $0D
000790F9 E109                       	smpsAlterNote       $09
000790FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000790FF E10C                       	smpsAlterNote       $0C
00079101 E701                       	dc.b	smpsNoAttack, $01
00079103 E112                       	smpsAlterNote       $12
00079105 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079109 E10C                       	smpsAlterNote       $0C
0007910B E701                       	dc.b	smpsNoAttack, $01
0007910D E109                       	smpsAlterNote       $09
0007910F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079113 E10F                       	smpsAlterNote       $0F
00079115 E701                       	dc.b	smpsNoAttack, $01
00079117 E113                       	smpsAlterNote       $13
00079119 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007911F E10D                       	smpsAlterNote       $0D
00079121 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
00079129 E10C                       	smpsAlterNote       $0C
0007912B C103 800E                  	dc.b	nE5, $03, nRst, $0E
00079131 E6FF                       	smpsAlterVol        $FF
00079133 E10B                       	smpsAlterNote       $0B
00079135 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00079139 E10C                       	smpsAlterNote       $0C
0007913B C103                       	dc.b	nE5, $03
0007913D E10D                       	smpsAlterNote       $0D
0007913F C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00079149 E10B                       	smpsAlterNote       $0B
0007914B BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0007914F E107                       	smpsAlterNote       $07
00079151 E701                       	dc.b	smpsNoAttack, $01
00079153 E104                       	smpsAlterNote       $04
00079155 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079159 E10A                       	smpsAlterNote       $0A
0007915B E701                       	dc.b	smpsNoAttack, $01
0007915D E10D                       	smpsAlterNote       $0D
0007915F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079163 E107                       	smpsAlterNote       $07
00079165 E701                       	dc.b	smpsNoAttack, $01
00079167 E104                       	smpsAlterNote       $04
00079169 8001                       	dc.b	nRst, $01
0007916B E110                       	smpsAlterNote       $10
0007916D C703                       	dc.b	nBb5, $03
0007916F E10F                       	smpsAlterNote       $0F
00079171 C603 8001                  	dc.b	nA5, $03, nRst, $01
00079175 E10D                       	smpsAlterNote       $0D
00079177 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0007917B E10C                       	smpsAlterNote       $0C
0007917D E701                       	dc.b	smpsNoAttack, $01
0007917F E108                       	smpsAlterNote       $08
00079181 E701                       	dc.b	smpsNoAttack, $01
00079183 E109                       	smpsAlterNote       $09
00079185 E701                       	dc.b	smpsNoAttack, $01
00079187 E10F                       	smpsAlterNote       $0F
00079189 E701                       	dc.b	smpsNoAttack, $01
0007918B E113                       	smpsAlterNote       $13
0007918D E701                       	dc.b	smpsNoAttack, $01
0007918F E10F                       	smpsAlterNote       $0F
00079191 E701                       	dc.b	smpsNoAttack, $01
00079193 E10C                       	smpsAlterNote       $0C
00079195 E701                       	dc.b	smpsNoAttack, $01
00079197 E108                       	smpsAlterNote       $08
00079199 E701                       	dc.b	smpsNoAttack, $01
0007919B E10C                       	smpsAlterNote       $0C
0007919D E701                       	dc.b	smpsNoAttack, $01
0007919F E112                       	smpsAlterNote       $12
000791A1 E701                       	dc.b	smpsNoAttack, $01
000791A3 E113                       	smpsAlterNote       $13
000791A5 E701                       	dc.b	smpsNoAttack, $01
000791A7 E10F                       	smpsAlterNote       $0F
000791A9 E701                       	dc.b	smpsNoAttack, $01
000791AB E109                       	smpsAlterNote       $09
000791AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000791B1 E10C                       	smpsAlterNote       $0C
000791B3 E701                       	dc.b	smpsNoAttack, $01
000791B5 E112                       	smpsAlterNote       $12
000791B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000791BB E10C                       	smpsAlterNote       $0C
000791BD E701                       	dc.b	smpsNoAttack, $01
000791BF E109                       	smpsAlterNote       $09
000791C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000791C5 E10F                       	smpsAlterNote       $0F
000791C7 E701                       	dc.b	smpsNoAttack, $01
000791C9 E113                       	smpsAlterNote       $13
000791CB E701                       	dc.b	smpsNoAttack, $01
000791CD E112                       	smpsAlterNote       $12
000791CF E701                       	dc.b	smpsNoAttack, $01
000791D1 E10C                       	smpsAlterNote       $0C
000791D3 E701                       	dc.b	smpsNoAttack, $01
000791D5 E108                       	smpsAlterNote       $08
000791D7 E701                       	dc.b	smpsNoAttack, $01
000791D9 E10C                       	smpsAlterNote       $0C
000791DB E701                       	dc.b	smpsNoAttack, $01
000791DD E10F                       	smpsAlterNote       $0F
000791DF E701                       	dc.b	smpsNoAttack, $01
000791E1 E113                       	smpsAlterNote       $13
000791E3 E701                       	dc.b	smpsNoAttack, $01
000791E5 E10F                       	smpsAlterNote       $0F
000791E7 BA03 8001                  	dc.b	nA4, $03, nRst, $01
000791EB E110                       	smpsAlterNote       $10
000791ED BB03                       	dc.b	nBb4, $03
000791EF E10F                       	smpsAlterNote       $0F
000791F1 BA06 8001                  	dc.b	nA4, $06, nRst, $01
000791F5 E10B                       	smpsAlterNote       $0B
000791F7 BF03                       	dc.b	nD5, $03
000791F9 E10C                       	smpsAlterNote       $0C
000791FB C103 8001                  	dc.b	nE5, $03, nRst, $01
000791FF E10D                       	smpsAlterNote       $0D
00079201 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0007920B E10B                       	smpsAlterNote       $0B
0007920D BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00079219 E110                       	smpsAlterNote       $10
0007921B C704 8001                  	dc.b	nBb5, $04, nRst, $01
0007921F E10F                       	smpsAlterNote       $0F
00079221 C604                       	dc.b	nA5, $04
00079223 E10D                       	smpsAlterNote       $0D
00079225 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0007922B E109                       	smpsAlterNote       $09
0007922D E701                       	dc.b	smpsNoAttack, $01
0007922F E108                       	smpsAlterNote       $08
00079231 E701                       	dc.b	smpsNoAttack, $01
00079233 E10C                       	smpsAlterNote       $0C
00079235 E701                       	dc.b	smpsNoAttack, $01
00079237 E112                       	smpsAlterNote       $12
00079239 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007923D E10F                       	smpsAlterNote       $0F
0007923F E701                       	dc.b	smpsNoAttack, $01
00079241 E109                       	smpsAlterNote       $09
00079243 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079247 E10F                       	smpsAlterNote       $0F
00079249 E701                       	dc.b	smpsNoAttack, $01
0007924B E112                       	smpsAlterNote       $12
0007924D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079251 E10C                       	smpsAlterNote       $0C
00079253 E701                       	dc.b	smpsNoAttack, $01
00079255 E108                       	smpsAlterNote       $08
00079257 E701                       	dc.b	smpsNoAttack, $01
00079259 E109                       	smpsAlterNote       $09
0007925B E701                       	dc.b	smpsNoAttack, $01
0007925D E10F                       	smpsAlterNote       $0F
0007925F E701                       	dc.b	smpsNoAttack, $01
00079261 E113                       	smpsAlterNote       $13
00079263 E701                       	dc.b	smpsNoAttack, $01
00079265 E10F                       	smpsAlterNote       $0F
00079267 E701                       	dc.b	smpsNoAttack, $01
00079269 E10C                       	smpsAlterNote       $0C
0007926B E701                       	dc.b	smpsNoAttack, $01
0007926D E108                       	smpsAlterNote       $08
0007926F E701                       	dc.b	smpsNoAttack, $01
00079271 E10C                       	smpsAlterNote       $0C
00079273 E701                       	dc.b	smpsNoAttack, $01
00079275 E112                       	smpsAlterNote       $12
00079277 E701                       	dc.b	smpsNoAttack, $01
00079279 E113                       	smpsAlterNote       $13
0007927B E701                       	dc.b	smpsNoAttack, $01
0007927D E10F                       	smpsAlterNote       $0F
0007927F E701                       	dc.b	smpsNoAttack, $01
00079281 E109                       	smpsAlterNote       $09
00079283 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079287 E10C                       	smpsAlterNote       $0C
00079289 E701                       	dc.b	smpsNoAttack, $01
0007928B E112                       	smpsAlterNote       $12
0007928D E701                       	dc.b	smpsNoAttack, $01
0007928F E113                       	smpsAlterNote       $13
00079291 8001                       	dc.b	nRst, $01
00079293 E10F                       	smpsAlterNote       $0F
00079295 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
000792A1 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
000792A9 E10D                       	smpsAlterNote       $0D
000792AB C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000792B1 E10B                       	smpsAlterNote       $0B
000792B3 BF0D                       	dc.b	nD5, $0D
000792B5 E108                       	smpsAlterNote       $08
000792B7 E701                       	dc.b	smpsNoAttack, $01
000792B9 E104                       	smpsAlterNote       $04
000792BB E701                       	dc.b	smpsNoAttack, $01
000792BD E105                       	smpsAlterNote       $05
000792BF E701                       	dc.b	smpsNoAttack, $01
000792C1 E10B                       	smpsAlterNote       $0B
000792C3 E701                       	dc.b	smpsNoAttack, $01
000792C5 E10F                       	smpsAlterNote       $0F
000792C7 E701                       	dc.b	smpsNoAttack, $01
000792C9 E10B                       	smpsAlterNote       $0B
000792CB E701                       	dc.b	smpsNoAttack, $01
000792CD E108                       	smpsAlterNote       $08
000792CF E701                       	dc.b	smpsNoAttack, $01
000792D1 E104                       	smpsAlterNote       $04
000792D3 E701                       	dc.b	smpsNoAttack, $01
000792D5 E108                       	smpsAlterNote       $08
000792D7 E701                       	dc.b	smpsNoAttack, $01
000792D9 E10E                       	smpsAlterNote       $0E
000792DB E701                       	dc.b	smpsNoAttack, $01
000792DD E10F                       	smpsAlterNote       $0F
000792DF E701                       	dc.b	smpsNoAttack, $01
000792E1 E10C                       	smpsAlterNote       $0C
000792E3 C101                       	dc.b	nE5, $01
000792E5 E10D                       	smpsAlterNote       $0D
000792E7 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
000792EF E10F                       	smpsAlterNote       $0F
000792F1 C607                       	dc.b	nA5, $07
000792F3 E10C                       	smpsAlterNote       $0C
000792F5 CD07                       	dc.b	nE6, $07
000792F7 E10D                       	smpsAlterNote       $0D
000792F9 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000792FD E10C                       	smpsAlterNote       $0C
000792FF CD03                       	dc.b	nE6, $03
00079301 E10A                       	smpsAlterNote       $0A
00079303 C903 8001                  	dc.b	nC6, $03, nRst, $01
00079307 E10D                       	smpsAlterNote       $0D
00079309 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0007930F E10A                       	smpsAlterNote       $0A
00079311 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079315 E110                       	smpsAlterNote       $10
00079317 E701                       	dc.b	smpsNoAttack, $01
00079319 E114                       	smpsAlterNote       $14
0007931B E701                       	dc.b	smpsNoAttack, $01
0007931D E113                       	smpsAlterNote       $13
0007931F E701                       	dc.b	smpsNoAttack, $01
00079321 E10D                       	smpsAlterNote       $0D
00079323 E701                       	dc.b	smpsNoAttack, $01
00079325 E109                       	smpsAlterNote       $09
00079327 E701                       	dc.b	smpsNoAttack, $01
00079329 E10D                       	smpsAlterNote       $0D
0007932B E701                       	dc.b	smpsNoAttack, $01
0007932D E110                       	smpsAlterNote       $10
0007932F E701                       	dc.b	smpsNoAttack, $01
00079331 E114                       	smpsAlterNote       $14
00079333 E701                       	dc.b	smpsNoAttack, $01
00079335 E10F                       	smpsAlterNote       $0F
00079337 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0007933B E10C                       	smpsAlterNote       $0C
0007933D E701                       	dc.b	smpsNoAttack, $01
0007933F E108                       	smpsAlterNote       $08
00079341 E701                       	dc.b	smpsNoAttack, $01
00079343 E10C                       	smpsAlterNote       $0C
00079345 E701                       	dc.b	smpsNoAttack, $01
00079347 E10F                       	smpsAlterNote       $0F
00079349 E701                       	dc.b	smpsNoAttack, $01
0007934B E113                       	smpsAlterNote       $13
0007934D E701                       	dc.b	smpsNoAttack, $01
0007934F E10F                       	smpsAlterNote       $0F
00079351 E701                       	dc.b	smpsNoAttack, $01
00079353 E109                       	smpsAlterNote       $09
00079355 E701                       	dc.b	smpsNoAttack, $01
00079357 E108                       	smpsAlterNote       $08
00079359 E701                       	dc.b	smpsNoAttack, $01
0007935B E10C                       	smpsAlterNote       $0C
0007935D E701                       	dc.b	smpsNoAttack, $01
0007935F E112                       	smpsAlterNote       $12
00079361 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079365 E10F                       	smpsAlterNote       $0F
00079367 E701                       	dc.b	smpsNoAttack, $01
00079369 E109                       	smpsAlterNote       $09
0007936B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007936F E10F                       	smpsAlterNote       $0F
00079371 E701                       	dc.b	smpsNoAttack, $01
00079373 E112                       	smpsAlterNote       $12
00079375 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079379 E10C                       	smpsAlterNote       $0C
0007937B E701                       	dc.b	smpsNoAttack, $01
0007937D E108                       	smpsAlterNote       $08
0007937F E701                       	dc.b	smpsNoAttack, $01
00079381 E109                       	smpsAlterNote       $09
00079383 E701                       	dc.b	smpsNoAttack, $01
00079385 E10F                       	smpsAlterNote       $0F
00079387 E701                       	dc.b	smpsNoAttack, $01
00079389 E113                       	smpsAlterNote       $13
0007938B E701                       	dc.b	smpsNoAttack, $01
0007938D E10F                       	smpsAlterNote       $0F
0007938F E701                       	dc.b	smpsNoAttack, $01
00079391 E10C                       	smpsAlterNote       $0C
00079393 E701                       	dc.b	smpsNoAttack, $01
00079395 E108                       	smpsAlterNote       $08
00079397 E701                       	dc.b	smpsNoAttack, $01
00079399 E10C                       	smpsAlterNote       $0C
0007939B E701                       	dc.b	smpsNoAttack, $01
0007939D E112                       	smpsAlterNote       $12
0007939F E701                       	dc.b	smpsNoAttack, $01
000793A1 E113                       	smpsAlterNote       $13
000793A3 E701                       	dc.b	smpsNoAttack, $01
000793A5 E10F                       	smpsAlterNote       $0F
000793A7 E701                       	dc.b	smpsNoAttack, $01
000793A9 E109                       	smpsAlterNote       $09
000793AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000793AF E10C                       	smpsAlterNote       $0C
000793B1 E701                       	dc.b	smpsNoAttack, $01
000793B3 E112                       	smpsAlterNote       $12
000793B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000793B9 E10C                       	smpsAlterNote       $0C
000793BB E701                       	dc.b	smpsNoAttack, $01
000793BD E109                       	smpsAlterNote       $09
000793BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000793C3 E10F                       	smpsAlterNote       $0F
000793C5 E701                       	dc.b	smpsNoAttack, $01
000793C7 E113                       	smpsAlterNote       $13
000793C9 E701                       	dc.b	smpsNoAttack, $01
000793CB E112                       	smpsAlterNote       $12
000793CD E701                       	dc.b	smpsNoAttack, $01
000793CF E10C                       	smpsAlterNote       $0C
000793D1 E701                       	dc.b	smpsNoAttack, $01
000793D3 E109                       	smpsAlterNote       $09
000793D5 8001                       	dc.b	nRst, $01
000793D7 E10F                       	smpsAlterNote       $0F
000793D9 C60D                       	dc.b	nA5, $0D
000793DB E10C                       	smpsAlterNote       $0C
000793DD E701                       	dc.b	smpsNoAttack, $01
000793DF E108                       	smpsAlterNote       $08
000793E1 E701                       	dc.b	smpsNoAttack, $01
000793E3 E10C                       	smpsAlterNote       $0C
000793E5 E701                       	dc.b	smpsNoAttack, $01
000793E7 E112                       	smpsAlterNote       $12
000793E9 E701                       	dc.b	smpsNoAttack, $01
000793EB E113                       	smpsAlterNote       $13
000793ED E701                       	dc.b	smpsNoAttack, $01
000793EF E10F                       	smpsAlterNote       $0F
000793F1 E701                       	dc.b	smpsNoAttack, $01
000793F3 E109                       	smpsAlterNote       $09
000793F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000793F9 E10C                       	smpsAlterNote       $0C
000793FB E701                       	dc.b	smpsNoAttack, $01
000793FD E112                       	smpsAlterNote       $12
000793FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079403 E10C                       	smpsAlterNote       $0C
00079405 E701                       	dc.b	smpsNoAttack, $01
00079407 E109                       	smpsAlterNote       $09
00079409 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007940D E10F                       	smpsAlterNote       $0F
0007940F E701                       	dc.b	smpsNoAttack, $01
00079411 E113                       	smpsAlterNote       $13
00079413 E701                       	dc.b	smpsNoAttack, $01
00079415 E112                       	smpsAlterNote       $12
00079417 E701                       	dc.b	smpsNoAttack, $01
00079419 E10C                       	smpsAlterNote       $0C
0007941B E701                       	dc.b	smpsNoAttack, $01
0007941D E108                       	smpsAlterNote       $08
0007941F E701                       	dc.b	smpsNoAttack, $01
00079421 E10C                       	smpsAlterNote       $0C
00079423 E701                       	dc.b	smpsNoAttack, $01
00079425 E10F                       	smpsAlterNote       $0F
00079427 E701                       	dc.b	smpsNoAttack, $01
00079429 E113                       	smpsAlterNote       $13
0007942B E701                       	dc.b	smpsNoAttack, $01
0007942D E10F                       	smpsAlterNote       $0F
0007942F E701                       	dc.b	smpsNoAttack, $01
00079431 E109                       	smpsAlterNote       $09
00079433 E701                       	dc.b	smpsNoAttack, $01
00079435 E108                       	smpsAlterNote       $08
00079437 E701                       	dc.b	smpsNoAttack, $01
00079439 E10C                       	smpsAlterNote       $0C
0007943B E701                       	dc.b	smpsNoAttack, $01
0007943D E112                       	smpsAlterNote       $12
0007943F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079443 E10F                       	smpsAlterNote       $0F
00079445 E701                       	dc.b	smpsNoAttack, $01
00079447 E109                       	smpsAlterNote       $09
00079449 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007944D E10F                       	smpsAlterNote       $0F
0007944F E701                       	dc.b	smpsNoAttack, $01
00079451 E112                       	smpsAlterNote       $12
00079453 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079457 E10C                       	smpsAlterNote       $0C
00079459 E701                       	dc.b	smpsNoAttack, $01
0007945B E108                       	smpsAlterNote       $08
0007945D E701                       	dc.b	smpsNoAttack, $01
0007945F E10C                       	smpsAlterNote       $0C
00079461 E701                       	dc.b	smpsNoAttack, $01
00079463 E10F                       	smpsAlterNote       $0F
00079465 E701                       	dc.b	smpsNoAttack, $01
00079467 E113                       	smpsAlterNote       $13
00079469 E701                       	dc.b	smpsNoAttack, $01
0007946B E10F                       	smpsAlterNote       $0F
0007946D E701                       	dc.b	smpsNoAttack, $01
0007946F E109                       	smpsAlterNote       $09
00079471 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00079477 E601                       	smpsAlterVol        $01
00079479 E10F                       	smpsAlterNote       $0F
0007947B C604                       	dc.b	nA5, $04
0007947D E10D                       	smpsAlterNote       $0D
0007947F C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00079485 E10B                       	smpsAlterNote       $0B
00079487 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0007948F E10F                       	smpsAlterNote       $0F
00079491 C604 8001                  	dc.b	nA5, $04, nRst, $01
00079495 E10D                       	smpsAlterNote       $0D
00079497 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0007949D E10C                       	smpsAlterNote       $0C
0007949F C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
000794A5 E10A                       	smpsAlterNote       $0A
000794A7 C904 8001                  	dc.b	nC6, $04, nRst, $01
000794AB E110                       	smpsAlterNote       $10
000794AD C704 8001                  	dc.b	nBb5, $04, nRst, $01
000794B1 E10F                       	smpsAlterNote       $0F
000794B3 C604                       	dc.b	nA5, $04
000794B5 E10D                       	smpsAlterNote       $0D
000794B7 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000794C3 E109                       	smpsAlterNote       $09
000794C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000794C9 E10F                       	smpsAlterNote       $0F
000794CB E701                       	dc.b	smpsNoAttack, $01
000794CD E112                       	smpsAlterNote       $12
000794CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000794D3 E10C                       	smpsAlterNote       $0C
000794D5 E701                       	dc.b	smpsNoAttack, $01
000794D7 E108                       	smpsAlterNote       $08
000794D9 E701                       	dc.b	smpsNoAttack, $01
000794DB E10C                       	smpsAlterNote       $0C
000794DD E701                       	dc.b	smpsNoAttack, $01
000794DF E10F                       	smpsAlterNote       $0F
000794E1 E701                       	dc.b	smpsNoAttack, $01
000794E3 E113                       	smpsAlterNote       $13
000794E5 E701                       	dc.b	smpsNoAttack, $01
000794E7 E10D                       	smpsAlterNote       $0D
000794E9 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000794EF E10C                       	smpsAlterNote       $0C
000794F1 C10D                       	dc.b	nE5, $0D
000794F3 E109                       	smpsAlterNote       $09
000794F5 E701                       	dc.b	smpsNoAttack, $01
000794F7 E105                       	smpsAlterNote       $05
000794F9 E701                       	dc.b	smpsNoAttack, $01
000794FB E106                       	smpsAlterNote       $06
000794FD E701                       	dc.b	smpsNoAttack, $01
000794FF E10C                       	smpsAlterNote       $0C
00079501 E701                       	dc.b	smpsNoAttack, $01
00079503 E110                       	smpsAlterNote       $10
00079505 E701                       	dc.b	smpsNoAttack, $01
00079507 E10C                       	smpsAlterNote       $0C
00079509 E701                       	dc.b	smpsNoAttack, $01
0007950B E109                       	smpsAlterNote       $09
0007950D E701                       	dc.b	smpsNoAttack, $01
0007950F E105                       	smpsAlterNote       $05
00079511 E701                       	dc.b	smpsNoAttack, $01
00079513 E109                       	smpsAlterNote       $09
00079515 E701                       	dc.b	smpsNoAttack, $01
00079517 E10F                       	smpsAlterNote       $0F
00079519 E701                       	dc.b	smpsNoAttack, $01
0007951B E110                       	smpsAlterNote       $10
0007951D E701                       	dc.b	smpsNoAttack, $01
0007951F E10C                       	smpsAlterNote       $0C
00079521 E701                       	dc.b	smpsNoAttack, $01
00079523 E106                       	smpsAlterNote       $06
00079525 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079529 E109                       	smpsAlterNote       $09
0007952B E701                       	dc.b	smpsNoAttack, $01
0007952D E10F                       	smpsAlterNote       $0F
0007952F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079533 E109                       	smpsAlterNote       $09
00079535 E701                       	dc.b	smpsNoAttack, $01
00079537 E106                       	smpsAlterNote       $06
00079539 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007953D E10C                       	smpsAlterNote       $0C
0007953F E701                       	dc.b	smpsNoAttack, $01
00079541 E110                       	smpsAlterNote       $10
00079543 E701                       	dc.b	smpsNoAttack, $01
00079545 E10F                       	smpsAlterNote       $0F
00079547 E701                       	dc.b	smpsNoAttack, $01
00079549 E109                       	smpsAlterNote       $09
0007954B E701                       	dc.b	smpsNoAttack, $01
0007954D E105                       	smpsAlterNote       $05
0007954F E701                       	dc.b	smpsNoAttack, $01
00079551 E109                       	smpsAlterNote       $09
00079553 E701                       	dc.b	smpsNoAttack, $01
00079555 E10C                       	smpsAlterNote       $0C
00079557 E701                       	dc.b	smpsNoAttack, $01
00079559 E110                       	smpsAlterNote       $10
0007955B E701                       	dc.b	smpsNoAttack, $01
0007955D E10C                       	smpsAlterNote       $0C
0007955F E701                       	dc.b	smpsNoAttack, $01
00079561 E106                       	smpsAlterNote       $06
00079563 E701                       	dc.b	smpsNoAttack, $01
00079565 E105                       	smpsAlterNote       $05
00079567 E701                       	dc.b	smpsNoAttack, $01
00079569 E109                       	smpsAlterNote       $09
0007956B E701                       	dc.b	smpsNoAttack, $01
0007956D E10F                       	smpsAlterNote       $0F
0007956F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079573 E10C                       	smpsAlterNote       $0C
00079575 E701                       	dc.b	smpsNoAttack, $01
00079577 E106                       	smpsAlterNote       $06
00079579 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007957D E10C                       	smpsAlterNote       $0C
0007957F E701                       	dc.b	smpsNoAttack, $01
00079581 E10F                       	smpsAlterNote       $0F
00079583 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079587 E109                       	smpsAlterNote       $09
00079589 E701                       	dc.b	smpsNoAttack, $01
0007958B E105                       	smpsAlterNote       $05
0007958D E701                       	dc.b	smpsNoAttack, $01
0007958F E106                       	smpsAlterNote       $06
00079591 E701                       	dc.b	smpsNoAttack, $01
00079593 E10C                       	smpsAlterNote       $0C
00079595 E701                       	dc.b	smpsNoAttack, $01
00079597 E110                       	smpsAlterNote       $10
00079599 E701                       	dc.b	smpsNoAttack, $01
0007959B E10C                       	smpsAlterNote       $0C
0007959D E701                       	dc.b	smpsNoAttack, $01
0007959F E109                       	smpsAlterNote       $09
000795A1 E701                       	dc.b	smpsNoAttack, $01
000795A3 E105                       	smpsAlterNote       $05
000795A5 E701                       	dc.b	smpsNoAttack, $01
000795A7 E109                       	smpsAlterNote       $09
000795A9 E701                       	dc.b	smpsNoAttack, $01
000795AB E10F                       	smpsAlterNote       $0F
000795AD E701                       	dc.b	smpsNoAttack, $01
000795AF E110                       	smpsAlterNote       $10
000795B1 E701                       	dc.b	smpsNoAttack, $01
000795B3 E10C                       	smpsAlterNote       $0C
000795B5 E701                       	dc.b	smpsNoAttack, $01
000795B7 E106                       	smpsAlterNote       $06
000795B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000795BD E109                       	smpsAlterNote       $09
000795BF E701                       	dc.b	smpsNoAttack, $01
000795C1 E10F                       	smpsAlterNote       $0F
000795C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000795C7 E109                       	smpsAlterNote       $09
000795C9 E701                       	dc.b	smpsNoAttack, $01
000795CB E106                       	smpsAlterNote       $06
000795CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000795D1 E10C                       	smpsAlterNote       $0C
000795D3 E701                       	dc.b	smpsNoAttack, $01
000795D5 E110                       	smpsAlterNote       $10
000795D7 E701                       	dc.b	smpsNoAttack, $01
000795D9 E10F                       	smpsAlterNote       $0F
000795DB E701                       	dc.b	smpsNoAttack, $01
000795DD E109                       	smpsAlterNote       $09
000795DF E701                       	dc.b	smpsNoAttack, $01
000795E1 E105                       	smpsAlterNote       $05
000795E3 E701                       	dc.b	smpsNoAttack, $01
000795E5 E109                       	smpsAlterNote       $09
000795E7 E701                       	dc.b	smpsNoAttack, $01
000795E9 E10C                       	smpsAlterNote       $0C
000795EB E701                       	dc.b	smpsNoAttack, $01
000795ED E110                       	smpsAlterNote       $10
000795EF E701                       	dc.b	smpsNoAttack, $01
000795F1 E10C                       	smpsAlterNote       $0C
000795F3 E701                       	dc.b	smpsNoAttack, $01
000795F5 E106                       	smpsAlterNote       $06
000795F7 E701                       	dc.b	smpsNoAttack, $01
000795F9 E105                       	smpsAlterNote       $05
000795FB E701                       	dc.b	smpsNoAttack, $01
000795FD E109                       	smpsAlterNote       $09
000795FF E701                       	dc.b	smpsNoAttack, $01
00079601 E10F                       	smpsAlterNote       $0F
00079603 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079607 E109                       	smpsAlterNote       $09
00079609 E701                       	dc.b	smpsNoAttack, $01
0007960B E106                       	smpsAlterNote       $06
0007960D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079611 E10C                       	smpsAlterNote       $0C
00079613 E701                       	dc.b	smpsNoAttack, $01
00079615 E110                       	smpsAlterNote       $10
00079617 E701                       	dc.b	smpsNoAttack, $01
00079619 E10F                       	smpsAlterNote       $0F
0007961B E701                       	dc.b	smpsNoAttack, $01
0007961D E109                       	smpsAlterNote       $09
0007961F E701                       	dc.b	smpsNoAttack, $01
00079621 E105                       	smpsAlterNote       $05
00079623 E701                       	dc.b	smpsNoAttack, $01
00079625 E109                       	smpsAlterNote       $09
00079627 E701                       	dc.b	smpsNoAttack, $01
00079629 E10C                       	smpsAlterNote       $0C
0007962B E701                       	dc.b	smpsNoAttack, $01
0007962D E110                       	smpsAlterNote       $10
0007962F E701                       	dc.b	smpsNoAttack, $01
00079631 E10C                       	smpsAlterNote       $0C
00079633 E701                       	dc.b	smpsNoAttack, $01
00079635 E106                       	smpsAlterNote       $06
00079637 E701                       	dc.b	smpsNoAttack, $01
00079639 E105                       	smpsAlterNote       $05
0007963B E701                       	dc.b	smpsNoAttack, $01
0007963D E109                       	smpsAlterNote       $09
0007963F E701                       	dc.b	smpsNoAttack, $01
00079641 E10F                       	smpsAlterNote       $0F
00079643 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079647 E10C                       	smpsAlterNote       $0C
00079649 E701                       	dc.b	smpsNoAttack, $01
0007964B E106                       	smpsAlterNote       $06
0007964D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079651 E10C                       	smpsAlterNote       $0C
00079653 E701                       	dc.b	smpsNoAttack, $01
00079655 E10F                       	smpsAlterNote       $0F
00079657 E701                       	dc.b	smpsNoAttack, $01
00079659 E110                       	smpsAlterNote       $10
0007965B 8001                       	dc.b	nRst, $01
0007965D E10F                       	smpsAlterNote       $0F
0007965F C604                       	dc.b	nA5, $04
00079661 E10D                       	smpsAlterNote       $0D
00079663 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00079669 E10B                       	smpsAlterNote       $0B
0007966B BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
00079671 E10F                       	smpsAlterNote       $0F
00079673 C604 8001                  	dc.b	nA5, $04, nRst, $01
00079677 E10D                       	smpsAlterNote       $0D
00079679 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0007967F E10C                       	smpsAlterNote       $0C
00079681 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
00079687 E10A                       	smpsAlterNote       $0A
00079689 C904                       	dc.b	nC6, $04
0007968B E110                       	smpsAlterNote       $10
0007968D C704 8001                  	dc.b	nBb5, $04, nRst, $01
00079691 E10F                       	smpsAlterNote       $0F
00079693 C604                       	dc.b	nA5, $04
00079695 E10D                       	smpsAlterNote       $0D
00079697 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000796A3 E109                       	smpsAlterNote       $09
000796A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000796A9 E10F                       	smpsAlterNote       $0F
000796AB E701                       	dc.b	smpsNoAttack, $01
000796AD E112                       	smpsAlterNote       $12
000796AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000796B3 E10C                       	smpsAlterNote       $0C
000796B5 E701                       	dc.b	smpsNoAttack, $01
000796B7 E108                       	smpsAlterNote       $08
000796B9 E701                       	dc.b	smpsNoAttack, $01
000796BB E109                       	smpsAlterNote       $09
000796BD E701                       	dc.b	smpsNoAttack, $01
000796BF E10F                       	smpsAlterNote       $0F
000796C1 E701                       	dc.b	smpsNoAttack, $01
000796C3 E113                       	smpsAlterNote       $13
000796C5 E701                       	dc.b	smpsNoAttack, $01
000796C7 E10D                       	smpsAlterNote       $0D
000796C9 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000796CF E10C                       	smpsAlterNote       $0C
000796D1 C10D                       	dc.b	nE5, $0D
000796D3 E109                       	smpsAlterNote       $09
000796D5 E701                       	dc.b	smpsNoAttack, $01
000796D7 E106                       	smpsAlterNote       $06
000796D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000796DD E10C                       	smpsAlterNote       $0C
000796DF E701                       	dc.b	smpsNoAttack, $01
000796E1 E110                       	smpsAlterNote       $10
000796E3 E701                       	dc.b	smpsNoAttack, $01
000796E5 E10F                       	smpsAlterNote       $0F
000796E7 E701                       	dc.b	smpsNoAttack, $01
000796E9 E109                       	smpsAlterNote       $09
000796EB E701                       	dc.b	smpsNoAttack, $01
000796ED E105                       	smpsAlterNote       $05
000796EF E701                       	dc.b	smpsNoAttack, $01
000796F1 E109                       	smpsAlterNote       $09
000796F3 E701                       	dc.b	smpsNoAttack, $01
000796F5 E10C                       	smpsAlterNote       $0C
000796F7 E701                       	dc.b	smpsNoAttack, $01
000796F9 E110                       	smpsAlterNote       $10
000796FB E701                       	dc.b	smpsNoAttack, $01
000796FD E10C                       	smpsAlterNote       $0C
000796FF E701                       	dc.b	smpsNoAttack, $01
00079701 E106                       	smpsAlterNote       $06
00079703 E701                       	dc.b	smpsNoAttack, $01
00079705 E105                       	smpsAlterNote       $05
00079707 E701                       	dc.b	smpsNoAttack, $01
00079709 E109                       	smpsAlterNote       $09
0007970B E701                       	dc.b	smpsNoAttack, $01
0007970D E10F                       	smpsAlterNote       $0F
0007970F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079713 E10C                       	smpsAlterNote       $0C
00079715 E701                       	dc.b	smpsNoAttack, $01
00079717 E106                       	smpsAlterNote       $06
00079719 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007971D E10C                       	smpsAlterNote       $0C
0007971F E701                       	dc.b	smpsNoAttack, $01
00079721 E10F                       	smpsAlterNote       $0F
00079723 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079727 E109                       	smpsAlterNote       $09
00079729 E701                       	dc.b	smpsNoAttack, $01
0007972B E105                       	smpsAlterNote       $05
0007972D E701                       	dc.b	smpsNoAttack, $01
0007972F E106                       	smpsAlterNote       $06
00079731 E701                       	dc.b	smpsNoAttack, $01
00079733 E10C                       	smpsAlterNote       $0C
00079735 E701                       	dc.b	smpsNoAttack, $01
00079737 E110                       	smpsAlterNote       $10
00079739 E701                       	dc.b	smpsNoAttack, $01
0007973B E10C                       	smpsAlterNote       $0C
0007973D E701                       	dc.b	smpsNoAttack, $01
0007973F E109                       	smpsAlterNote       $09
00079741 E701                       	dc.b	smpsNoAttack, $01
00079743 E105                       	smpsAlterNote       $05
00079745 E701                       	dc.b	smpsNoAttack, $01
00079747 E109                       	smpsAlterNote       $09
00079749 E701                       	dc.b	smpsNoAttack, $01
0007974B E10F                       	smpsAlterNote       $0F
0007974D E701                       	dc.b	smpsNoAttack, $01
0007974F E110                       	smpsAlterNote       $10
00079751 E701                       	dc.b	smpsNoAttack, $01
00079753 E10C                       	smpsAlterNote       $0C
00079755 E701                       	dc.b	smpsNoAttack, $01
00079757 E106                       	smpsAlterNote       $06
00079759 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007975D E109                       	smpsAlterNote       $09
0007975F E701                       	dc.b	smpsNoAttack, $01
00079761 E10F                       	smpsAlterNote       $0F
00079763 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079767 E109                       	smpsAlterNote       $09
00079769 E701                       	dc.b	smpsNoAttack, $01
0007976B E106                       	smpsAlterNote       $06
0007976D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079771 E10C                       	smpsAlterNote       $0C
00079773 E701                       	dc.b	smpsNoAttack, $01
00079775 E110                       	smpsAlterNote       $10
00079777 E701                       	dc.b	smpsNoAttack, $01
00079779 E10F                       	smpsAlterNote       $0F
0007977B E701                       	dc.b	smpsNoAttack, $01
0007977D E109                       	smpsAlterNote       $09
0007977F E701                       	dc.b	smpsNoAttack, $01
00079781 E105                       	smpsAlterNote       $05
00079783 E701                       	dc.b	smpsNoAttack, $01
00079785 E109                       	smpsAlterNote       $09
00079787 E701                       	dc.b	smpsNoAttack, $01
00079789 E10F                       	smpsAlterNote       $0F
0007978B E701                       	dc.b	smpsNoAttack, $01
0007978D E110                       	smpsAlterNote       $10
0007978F E701                       	dc.b	smpsNoAttack, $01
00079791 E10C                       	smpsAlterNote       $0C
00079793 E701                       	dc.b	smpsNoAttack, $01
00079795 E106                       	smpsAlterNote       $06
00079797 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007979B E109                       	smpsAlterNote       $09
0007979D E701                       	dc.b	smpsNoAttack, $01
0007979F E10F                       	smpsAlterNote       $0F
000797A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000797A5 E109                       	smpsAlterNote       $09
000797A7 E701                       	dc.b	smpsNoAttack, $01
000797A9 E106                       	smpsAlterNote       $06
000797AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000797AF E10C                       	smpsAlterNote       $0C
000797B1 E701                       	dc.b	smpsNoAttack, $01
000797B3 E110                       	smpsAlterNote       $10
000797B5 E701                       	dc.b	smpsNoAttack, $01
000797B7 E10F                       	smpsAlterNote       $0F
000797B9 E701                       	dc.b	smpsNoAttack, $01
000797BB E109                       	smpsAlterNote       $09
000797BD E701                       	dc.b	smpsNoAttack, $01
000797BF E105                       	smpsAlterNote       $05
000797C1 E701                       	dc.b	smpsNoAttack, $01
000797C3 E109                       	smpsAlterNote       $09
000797C5 E701                       	dc.b	smpsNoAttack, $01
000797C7 E10C                       	smpsAlterNote       $0C
000797C9 E701                       	dc.b	smpsNoAttack, $01
000797CB E110                       	smpsAlterNote       $10
000797CD E701                       	dc.b	smpsNoAttack, $01
000797CF E10C                       	smpsAlterNote       $0C
000797D1 E701                       	dc.b	smpsNoAttack, $01
000797D3 E106                       	smpsAlterNote       $06
000797D5 E701                       	dc.b	smpsNoAttack, $01
000797D7 E105                       	smpsAlterNote       $05
000797D9 E701                       	dc.b	smpsNoAttack, $01
000797DB E109                       	smpsAlterNote       $09
000797DD E701                       	dc.b	smpsNoAttack, $01
000797DF E10F                       	smpsAlterNote       $0F
000797E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000797E5 E10C                       	smpsAlterNote       $0C
000797E7 E701                       	dc.b	smpsNoAttack, $01
000797E9 E106                       	smpsAlterNote       $06
000797EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000797EF E10C                       	smpsAlterNote       $0C
000797F1 E701                       	dc.b	smpsNoAttack, $01
000797F3 E10F                       	smpsAlterNote       $0F
000797F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000797F9 E109                       	smpsAlterNote       $09
000797FB E701                       	dc.b	smpsNoAttack, $01
000797FD E105                       	smpsAlterNote       $05
000797FF E701                       	dc.b	smpsNoAttack, $01
00079801 E106                       	smpsAlterNote       $06
00079803 E701                       	dc.b	smpsNoAttack, $01
00079805 E10C                       	smpsAlterNote       $0C
00079807 E701                       	dc.b	smpsNoAttack, $01
00079809 E110                       	smpsAlterNote       $10
0007980B E701                       	dc.b	smpsNoAttack, $01
0007980D E10C                       	smpsAlterNote       $0C
0007980F E701                       	dc.b	smpsNoAttack, $01
00079811 E109                       	smpsAlterNote       $09
00079813 E701                       	dc.b	smpsNoAttack, $01
00079815 E105                       	smpsAlterNote       $05
00079817 E701                       	dc.b	smpsNoAttack, $01
00079819 E109                       	smpsAlterNote       $09
0007981B E701                       	dc.b	smpsNoAttack, $01
0007981D E10F                       	smpsAlterNote       $0F
0007981F E701                       	dc.b	smpsNoAttack, $01
00079821 E110                       	smpsAlterNote       $10
00079823 E701                       	dc.b	smpsNoAttack, $01
00079825 E10C                       	smpsAlterNote       $0C
00079827 E701                       	dc.b	smpsNoAttack, $01
00079829 E106                       	smpsAlterNote       $06
0007982B E701                       	dc.b	smpsNoAttack, $01
0007982D E10B                       	smpsAlterNote       $0B
0007982F BF02                       	dc.b	nD5, $02
00079831 E10C                       	smpsAlterNote       $0C
00079833 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
00079839 E109                       	smpsAlterNote       $09
0007983B E701                       	dc.b	smpsNoAttack, $01
0007983D E105                       	smpsAlterNote       $05
0007983F E701                       	dc.b	smpsNoAttack, $01
00079841 E109                       	smpsAlterNote       $09
00079843 E701                       	dc.b	smpsNoAttack, $01
00079845 E10F                       	smpsAlterNote       $0F
00079847 E701                       	dc.b	smpsNoAttack, $01
00079849 E110                       	smpsAlterNote       $10
0007984B E701                       	dc.b	smpsNoAttack, $01
0007984D E10C                       	smpsAlterNote       $0C
0007984F E701                       	dc.b	smpsNoAttack, $01
00079851 E106                       	smpsAlterNote       $06
00079853 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079857 E109                       	smpsAlterNote       $09
00079859 E701                       	dc.b	smpsNoAttack, $01
0007985B E10F                       	smpsAlterNote       $0F
0007985D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079861 E109                       	smpsAlterNote       $09
00079863 E701                       	dc.b	smpsNoAttack, $01
00079865 E106                       	smpsAlterNote       $06
00079867 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007986B E10C                       	smpsAlterNote       $0C
0007986D E701                       	dc.b	smpsNoAttack, $01
0007986F E110                       	smpsAlterNote       $10
00079871 E701                       	dc.b	smpsNoAttack, $01
00079873 E10F                       	smpsAlterNote       $0F
00079875 E701                       	dc.b	smpsNoAttack, $01
00079877 E109                       	smpsAlterNote       $09
00079879 E701                       	dc.b	smpsNoAttack, $01
0007987B E105                       	smpsAlterNote       $05
0007987D E701                       	dc.b	smpsNoAttack, $01
0007987F E109                       	smpsAlterNote       $09
00079881 E701                       	dc.b	smpsNoAttack, $01
00079883 E10C                       	smpsAlterNote       $0C
00079885 E701                       	dc.b	smpsNoAttack, $01
00079887 E110                       	smpsAlterNote       $10
00079889 E701                       	dc.b	smpsNoAttack, $01
0007988B E10C                       	smpsAlterNote       $0C
0007988D E701                       	dc.b	smpsNoAttack, $01
0007988F E106                       	smpsAlterNote       $06
00079891 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00079895 E10D                       	smpsAlterNote       $0D
00079897 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0007989F E10C                       	smpsAlterNote       $0C
000798A1 C10D                       	dc.b	nE5, $0D
000798A3 E106                       	smpsAlterNote       $06
000798A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000798A9 E109                       	smpsAlterNote       $09
000798AB E701                       	dc.b	smpsNoAttack, $01
000798AD E10F                       	smpsAlterNote       $0F
000798AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000798B3 E109                       	smpsAlterNote       $09
000798B5 E701                       	dc.b	smpsNoAttack, $01
000798B7 E106                       	smpsAlterNote       $06
000798B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000798BD E10C                       	smpsAlterNote       $0C
000798BF E701                       	dc.b	smpsNoAttack, $01
000798C1 E110                       	smpsAlterNote       $10
000798C3 E701                       	dc.b	smpsNoAttack, $01
000798C5 E10F                       	smpsAlterNote       $0F
000798C7 E701                       	dc.b	smpsNoAttack, $01
000798C9 E109                       	smpsAlterNote       $09
000798CB E701                       	dc.b	smpsNoAttack, $01
000798CD E105                       	smpsAlterNote       $05
000798CF E701                       	dc.b	smpsNoAttack, $01
000798D1 E106                       	smpsAlterNote       $06
000798D3 800F                       	dc.b	nRst, $0F
000798D7 E6FF                       	smpsAlterVol        $FF
000798D9 E10F                       	smpsAlterNote       $0F
000798DB BA01                       	dc.b	nA4, $01
000798DD E110                       	smpsAlterNote       $10
000798DF BB02                       	dc.b	nBb4, $02
000798E1 E10F                       	smpsAlterNote       $0F
000798E3 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
000798E9 E10B                       	smpsAlterNote       $0B
000798EB BF03 8001                  	dc.b	nD5, $03, nRst, $01
000798EF E10C                       	smpsAlterNote       $0C
000798F1 C103                       	dc.b	nE5, $03
000798F3 E10D                       	smpsAlterNote       $0D
000798F5 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
000798FF E10B                       	smpsAlterNote       $0B
00079901 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
00079905 E104                       	smpsAlterNote       $04
00079907 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007990B E10A                       	smpsAlterNote       $0A
0007990D E701                       	dc.b	smpsNoAttack, $01
0007990F E10D                       	smpsAlterNote       $0D
00079911 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079915 E107                       	smpsAlterNote       $07
00079917 E701                       	dc.b	smpsNoAttack, $01
00079919 E104                       	smpsAlterNote       $04
0007991B 8001                       	dc.b	nRst, $01
0007991D E110                       	smpsAlterNote       $10
0007991F C703                       	dc.b	nBb5, $03
00079921 E10F                       	smpsAlterNote       $0F
00079923 C603 8001                  	dc.b	nA5, $03, nRst, $01
00079927 E10D                       	smpsAlterNote       $0D
00079929 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0007992D E10C                       	smpsAlterNote       $0C
0007992F E701                       	dc.b	smpsNoAttack, $01
00079931 E108                       	smpsAlterNote       $08
00079933 E701                       	dc.b	smpsNoAttack, $01
00079935 E109                       	smpsAlterNote       $09
00079937 E701                       	dc.b	smpsNoAttack, $01
00079939 E10F                       	smpsAlterNote       $0F
0007993B E701                       	dc.b	smpsNoAttack, $01
0007993D E113                       	smpsAlterNote       $13
0007993F E701                       	dc.b	smpsNoAttack, $01
00079941 E10F                       	smpsAlterNote       $0F
00079943 E701                       	dc.b	smpsNoAttack, $01
00079945 E10C                       	smpsAlterNote       $0C
00079947 E701                       	dc.b	smpsNoAttack, $01
00079949 E108                       	smpsAlterNote       $08
0007994B E701                       	dc.b	smpsNoAttack, $01
0007994D E10C                       	smpsAlterNote       $0C
0007994F E701                       	dc.b	smpsNoAttack, $01
00079951 E112                       	smpsAlterNote       $12
00079953 E701                       	dc.b	smpsNoAttack, $01
00079955 E113                       	smpsAlterNote       $13
00079957 E701                       	dc.b	smpsNoAttack, $01
00079959 E10F                       	smpsAlterNote       $0F
0007995B E701                       	dc.b	smpsNoAttack, $01
0007995D E109                       	smpsAlterNote       $09
0007995F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079963 E10C                       	smpsAlterNote       $0C
00079965 E701                       	dc.b	smpsNoAttack, $01
00079967 E112                       	smpsAlterNote       $12
00079969 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007996D E10C                       	smpsAlterNote       $0C
0007996F E701                       	dc.b	smpsNoAttack, $01
00079971 E109                       	smpsAlterNote       $09
00079973 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079977 E10F                       	smpsAlterNote       $0F
00079979 E701                       	dc.b	smpsNoAttack, $01
0007997B E113                       	smpsAlterNote       $13
0007997D E701                       	dc.b	smpsNoAttack, $01
0007997F E112                       	smpsAlterNote       $12
00079981 E701                       	dc.b	smpsNoAttack, $01
00079983 E10C                       	smpsAlterNote       $0C
00079985 E701                       	dc.b	smpsNoAttack, $01
00079987 E108                       	smpsAlterNote       $08
00079989 E701                       	dc.b	smpsNoAttack, $01
0007998B E10C                       	smpsAlterNote       $0C
0007998D E701                       	dc.b	smpsNoAttack, $01
0007998F E10F                       	smpsAlterNote       $0F
00079991 E701                       	dc.b	smpsNoAttack, $01
00079993 E113                       	smpsAlterNote       $13
00079995 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00079999 E10B                       	smpsAlterNote       $0B
0007999B BF03                       	dc.b	nD5, $03
0007999D E10C                       	smpsAlterNote       $0C
0007999F C103 8001                  	dc.b	nE5, $03, nRst, $01
000799A3 E10D                       	smpsAlterNote       $0D
000799A5 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000799AF E10B                       	smpsAlterNote       $0B
000799B1 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
000799BD E110                       	smpsAlterNote       $10
000799BF C704 8001                  	dc.b	nBb5, $04, nRst, $01
000799C3 E10F                       	smpsAlterNote       $0F
000799C5 C604                       	dc.b	nA5, $04
000799C7 E10D                       	smpsAlterNote       $0D
000799C9 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000799CF E109                       	smpsAlterNote       $09
000799D1 E701                       	dc.b	smpsNoAttack, $01
000799D3 E108                       	smpsAlterNote       $08
000799D5 E701                       	dc.b	smpsNoAttack, $01
000799D7 E10C                       	smpsAlterNote       $0C
000799D9 E701                       	dc.b	smpsNoAttack, $01
000799DB E112                       	smpsAlterNote       $12
000799DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000799E1 E10F                       	smpsAlterNote       $0F
000799E3 E701                       	dc.b	smpsNoAttack, $01
000799E5 E109                       	smpsAlterNote       $09
000799E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000799EB E10F                       	smpsAlterNote       $0F
000799ED E701                       	dc.b	smpsNoAttack, $01
000799EF E112                       	smpsAlterNote       $12
000799F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000799F5 E10C                       	smpsAlterNote       $0C
000799F7 E701                       	dc.b	smpsNoAttack, $01
000799F9 E108                       	smpsAlterNote       $08
000799FB E701                       	dc.b	smpsNoAttack, $01
000799FD E109                       	smpsAlterNote       $09
000799FF E701                       	dc.b	smpsNoAttack, $01
00079A01 E10F                       	smpsAlterNote       $0F
00079A03 E701                       	dc.b	smpsNoAttack, $01
00079A05 E113                       	smpsAlterNote       $13
00079A07 E701                       	dc.b	smpsNoAttack, $01
00079A09 E10F                       	smpsAlterNote       $0F
00079A0B E701                       	dc.b	smpsNoAttack, $01
00079A0D E10C                       	smpsAlterNote       $0C
00079A0F E701                       	dc.b	smpsNoAttack, $01
00079A11 E108                       	smpsAlterNote       $08
00079A13 E701                       	dc.b	smpsNoAttack, $01
00079A15 E10C                       	smpsAlterNote       $0C
00079A17 E701                       	dc.b	smpsNoAttack, $01
00079A19 E112                       	smpsAlterNote       $12
00079A1B E701                       	dc.b	smpsNoAttack, $01
00079A1D E113                       	smpsAlterNote       $13
00079A1F E701                       	dc.b	smpsNoAttack, $01
00079A21 E10F                       	smpsAlterNote       $0F
00079A23 E701                       	dc.b	smpsNoAttack, $01
00079A25 E109                       	smpsAlterNote       $09
00079A27 E701                       	dc.b	smpsNoAttack, $01
00079A29 E10D                       	smpsAlterNote       $0D
00079A2B C402                       	dc.b	nG5, $02
00079A2D E10F                       	smpsAlterNote       $0F
00079A2F C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
00079A39 E10D                       	smpsAlterNote       $0D
00079A3B C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00079A41 E10B                       	smpsAlterNote       $0B
00079A43 BF0D                       	dc.b	nD5, $0D
00079A45 E108                       	smpsAlterNote       $08
00079A47 E701                       	dc.b	smpsNoAttack, $01
00079A49 E104                       	smpsAlterNote       $04
00079A4B E701                       	dc.b	smpsNoAttack, $01
00079A4D E105                       	smpsAlterNote       $05
00079A4F E701                       	dc.b	smpsNoAttack, $01
00079A51 E10B                       	smpsAlterNote       $0B
00079A53 E701                       	dc.b	smpsNoAttack, $01
00079A55 E10F                       	smpsAlterNote       $0F
00079A57 E701                       	dc.b	smpsNoAttack, $01
00079A59 E10B                       	smpsAlterNote       $0B
00079A5B E701                       	dc.b	smpsNoAttack, $01
00079A5D E108                       	smpsAlterNote       $08
00079A5F E701                       	dc.b	smpsNoAttack, $01
00079A61 E104                       	smpsAlterNote       $04
00079A63 E701                       	dc.b	smpsNoAttack, $01
00079A65 E108                       	smpsAlterNote       $08
00079A67 E701                       	dc.b	smpsNoAttack, $01
00079A69 E10E                       	smpsAlterNote       $0E
00079A6B E701                       	dc.b	smpsNoAttack, $01
00079A6D E10F                       	smpsAlterNote       $0F
00079A6F E701                       	dc.b	smpsNoAttack, $01
00079A71 E10C                       	smpsAlterNote       $0C
00079A73 C101                       	dc.b	nE5, $01
00079A75 E10D                       	smpsAlterNote       $0D
00079A77 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00079A7F E10F                       	smpsAlterNote       $0F
00079A81 C607                       	dc.b	nA5, $07
00079A83 E10C                       	smpsAlterNote       $0C
00079A85 CD07                       	dc.b	nE6, $07
00079A87 E10D                       	smpsAlterNote       $0D
00079A89 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00079A8D E10C                       	smpsAlterNote       $0C
00079A8F CD03                       	dc.b	nE6, $03
00079A91 E10A                       	smpsAlterNote       $0A
00079A93 C903 8001                  	dc.b	nC6, $03, nRst, $01
00079A97 E10D                       	smpsAlterNote       $0D
00079A99 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00079A9F E10A                       	smpsAlterNote       $0A
00079AA1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079AA5 E110                       	smpsAlterNote       $10
00079AA7 E701                       	dc.b	smpsNoAttack, $01
00079AA9 E114                       	smpsAlterNote       $14
00079AAB E701                       	dc.b	smpsNoAttack, $01
00079AAD E113                       	smpsAlterNote       $13
00079AAF E701                       	dc.b	smpsNoAttack, $01
00079AB1 E10D                       	smpsAlterNote       $0D
00079AB3 E701                       	dc.b	smpsNoAttack, $01
00079AB5 E109                       	smpsAlterNote       $09
00079AB7 E701                       	dc.b	smpsNoAttack, $01
00079AB9 E10D                       	smpsAlterNote       $0D
00079ABB E701                       	dc.b	smpsNoAttack, $01
00079ABD E110                       	smpsAlterNote       $10
00079ABF E701                       	dc.b	smpsNoAttack, $01
00079AC1 E114                       	smpsAlterNote       $14
00079AC3 E701                       	dc.b	smpsNoAttack, $01
00079AC5 E10F                       	smpsAlterNote       $0F
00079AC7 C607                       	dc.b	nA5, $07
00079AC9 E10D                       	smpsAlterNote       $0D
00079ACB C40D                       	dc.b	nG5, $0D
00079ACD E10A                       	smpsAlterNote       $0A
00079ACF E701                       	dc.b	smpsNoAttack, $01
00079AD1 E106                       	smpsAlterNote       $06
00079AD3 E701                       	dc.b	smpsNoAttack, $01
00079AD5 E10A                       	smpsAlterNote       $0A
00079AD7 E701                       	dc.b	smpsNoAttack, $01
00079AD9 E10D                       	smpsAlterNote       $0D
00079ADB E701                       	dc.b	smpsNoAttack, $01
00079ADD E111                       	smpsAlterNote       $11
00079ADF E701                       	dc.b	smpsNoAttack, $01
00079AE1 E10D                       	smpsAlterNote       $0D
00079AE3 E701                       	dc.b	smpsNoAttack, $01
00079AE5 E107                       	smpsAlterNote       $07
00079AE7 E701                       	dc.b	smpsNoAttack, $01
00079AE9 E106                       	smpsAlterNote       $06
00079AEB E701                       	dc.b	smpsNoAttack, $01
00079AED E10A                       	smpsAlterNote       $0A
00079AEF E701                       	dc.b	smpsNoAttack, $01
00079AF1 E110                       	smpsAlterNote       $10
00079AF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079AF7 E10D                       	smpsAlterNote       $0D
00079AF9 E701                       	dc.b	smpsNoAttack, $01
00079AFB E107                       	smpsAlterNote       $07
00079AFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079B01 E10F                       	smpsAlterNote       $0F
00079B03 C60E                       	dc.b	nA5, $0E
00079B05 E109                       	smpsAlterNote       $09
00079B07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079B0B E10F                       	smpsAlterNote       $0F
00079B0D E701                       	dc.b	smpsNoAttack, $01
00079B0F E112                       	smpsAlterNote       $12
00079B11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079B15 E10C                       	smpsAlterNote       $0C
00079B17 E701                       	dc.b	smpsNoAttack, $01
00079B19 E108                       	smpsAlterNote       $08
00079B1B E701                       	dc.b	smpsNoAttack, $01
00079B1D E109                       	smpsAlterNote       $09
00079B1F E701                       	dc.b	smpsNoAttack, $01
00079B21 E10F                       	smpsAlterNote       $0F
00079B23 E701                       	dc.b	smpsNoAttack, $01
00079B25 E113                       	smpsAlterNote       $13
00079B27 E701                       	dc.b	smpsNoAttack, $01
00079B29 E10F                       	smpsAlterNote       $0F
00079B2B E701                       	dc.b	smpsNoAttack, $01
00079B2D E10C                       	smpsAlterNote       $0C
00079B2F E701                       	dc.b	smpsNoAttack, $01
00079B31 E108                       	smpsAlterNote       $08
00079B33 E701                       	dc.b	smpsNoAttack, $01
00079B35 E109                       	smpsAlterNote       $09
00079B37 8001                       	dc.b	nRst, $01
00079B39 E110                       	smpsAlterNote       $10
00079B3B C70D                       	dc.b	nBb5, $0D
00079B3D E10D                       	smpsAlterNote       $0D
00079B3F E701                       	dc.b	smpsNoAttack, $01
00079B41 E109                       	smpsAlterNote       $09
00079B43 E701                       	dc.b	smpsNoAttack, $01
00079B45 E10D                       	smpsAlterNote       $0D
00079B47 E701                       	dc.b	smpsNoAttack, $01
00079B49 E113                       	smpsAlterNote       $13
00079B4B E701                       	dc.b	smpsNoAttack, $01
00079B4D E114                       	smpsAlterNote       $14
00079B4F E701                       	dc.b	smpsNoAttack, $01
00079B51 E110                       	smpsAlterNote       $10
00079B53 E701                       	dc.b	smpsNoAttack, $01
00079B55 E10A                       	smpsAlterNote       $0A
00079B57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079B5B E10D                       	smpsAlterNote       $0D
00079B5D E701                       	dc.b	smpsNoAttack, $01
00079B5F E113                       	smpsAlterNote       $13
00079B61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079B65 E10D                       	smpsAlterNote       $0D
00079B67 E701                       	dc.b	smpsNoAttack, $01
00079B69 E10A                       	smpsAlterNote       $0A
00079B6B E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
00079B75 E10B                       	smpsAlterNote       $0B
00079B77 8001                       	dc.b	nRst, $01
00079B79 E10C                       	smpsAlterNote       $0C
00079B7B CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
00079B7F E10B                       	smpsAlterNote       $0B
00079B81 CB0D                       	dc.b	nD6, $0D
00079B83 E105                       	smpsAlterNote       $05
00079B85 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079B89 E108                       	smpsAlterNote       $08
00079B8B E701                       	dc.b	smpsNoAttack, $01
00079B8D E10E                       	smpsAlterNote       $0E
00079B8F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079B93 E108                       	smpsAlterNote       $08
00079B95 E701                       	dc.b	smpsNoAttack, $01
00079B97 E105                       	smpsAlterNote       $05
00079B99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079B9D E10B                       	smpsAlterNote       $0B
00079B9F E701                       	dc.b	smpsNoAttack, $01
00079BA1 E10F                       	smpsAlterNote       $0F
00079BA3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00079BA7 E10C                       	smpsAlterNote       $0C
00079BA9 CC0D                       	dc.b	nEb6, $0D
00079BAB E106                       	smpsAlterNote       $06
00079BAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079BB1 E109                       	smpsAlterNote       $09
00079BB3 E701                       	dc.b	smpsNoAttack, $01
00079BB5 E10C                       	smpsAlterNote       $0C
00079BB7 8001                       	dc.b	nRst, $01
00079BB9 E10A                       	smpsAlterNote       $0A
00079BBB C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00079BC7 CB0E                       	dc.b	nD6, $0E
00079BC9 E105                       	smpsAlterNote       $05
00079BCB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079BCF E10B                       	smpsAlterNote       $0B
00079BD1 E701                       	dc.b	smpsNoAttack, $01
00079BD3 E10E                       	smpsAlterNote       $0E
00079BD5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079BD9 E108                       	smpsAlterNote       $08
00079BDB E701                       	dc.b	smpsNoAttack, $01
00079BDD E104                       	smpsAlterNote       $04
00079BDF E701                       	dc.b	smpsNoAttack, $01
00079BE1 E105                       	smpsAlterNote       $05
00079BE3 E701                       	dc.b	smpsNoAttack, $01
00079BE5 E10B                       	smpsAlterNote       $0B
00079BE7 E701                       	dc.b	smpsNoAttack, $01
00079BE9 E10F                       	smpsAlterNote       $0F
00079BEB E701                       	dc.b	smpsNoAttack, $01
00079BED E10D                       	smpsAlterNote       $0D
00079BEF CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
00079BF3 E10C                       	smpsAlterNote       $0C
00079BF5 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
00079BF9 E10A                       	smpsAlterNote       $0A
00079BFB C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
00079C07 CB0D                       	dc.b	nD6, $0D
00079C09 E108                       	smpsAlterNote       $08
00079C0B E701                       	dc.b	smpsNoAttack, $01
00079C0D E104                       	smpsAlterNote       $04
00079C0F E701                       	dc.b	smpsNoAttack, $01
00079C11 E105                       	smpsAlterNote       $05
00079C13 E701                       	dc.b	smpsNoAttack, $01
00079C15 E10B                       	smpsAlterNote       $0B
00079C17 E701                       	dc.b	smpsNoAttack, $01
00079C19 E10F                       	smpsAlterNote       $0F
00079C1B E701                       	dc.b	smpsNoAttack, $01
00079C1D E10B                       	smpsAlterNote       $0B
00079C1F E701                       	dc.b	smpsNoAttack, $01
00079C21 E108                       	smpsAlterNote       $08
00079C23 E701                       	dc.b	smpsNoAttack, $01
00079C25 E104                       	smpsAlterNote       $04
00079C27 E701                       	dc.b	smpsNoAttack, $01
00079C29 E108                       	smpsAlterNote       $08
00079C2B E701                       	dc.b	smpsNoAttack, $01
00079C2D E10E                       	smpsAlterNote       $0E
00079C2F E701                       	dc.b	smpsNoAttack, $01
00079C31 E10F                       	smpsAlterNote       $0F
00079C33 E701                       	dc.b	smpsNoAttack, $01
00079C35 E10C                       	smpsAlterNote       $0C
00079C37 CC0D                       	dc.b	nEb6, $0D
00079C39 E109                       	smpsAlterNote       $09
00079C3B E701                       	dc.b	smpsNoAttack, $01
00079C3D E105                       	smpsAlterNote       $05
00079C3F E701                       	dc.b	smpsNoAttack, $01
00079C41 E106                       	smpsAlterNote       $06
00079C43 E701                       	dc.b	smpsNoAttack, $01
00079C45 E10C                       	smpsAlterNote       $0C
00079C47 E701                       	dc.b	smpsNoAttack, $01
00079C49 E10A                       	smpsAlterNote       $0A
00079C4B C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
00079C57 CB0D                       	dc.b	nD6, $0D
00079C59 E108                       	smpsAlterNote       $08
00079C5B E701                       	dc.b	smpsNoAttack, $01
00079C5D E104                       	smpsAlterNote       $04
00079C5F E701                       	dc.b	smpsNoAttack, $01
00079C61 E108                       	smpsAlterNote       $08
00079C63 E701                       	dc.b	smpsNoAttack, $01
00079C65 E10B                       	smpsAlterNote       $0B
00079C67 E701                       	dc.b	smpsNoAttack, $01
00079C69 E10F                       	smpsAlterNote       $0F
00079C6B E701                       	dc.b	smpsNoAttack, $01
00079C6D E10B                       	smpsAlterNote       $0B
00079C6F E701                       	dc.b	smpsNoAttack, $01
00079C71 E105                       	smpsAlterNote       $05
00079C73 E701                       	dc.b	smpsNoAttack, $01
00079C75 E104                       	smpsAlterNote       $04
00079C77 E701                       	dc.b	smpsNoAttack, $01
00079C79 E108                       	smpsAlterNote       $08
00079C7B E701                       	dc.b	smpsNoAttack, $01
00079C7D E10E                       	smpsAlterNote       $0E
00079C7F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079C83 E10B                       	smpsAlterNote       $0B
00079C85 E701                       	dc.b	smpsNoAttack, $01
00079C87 E105                       	smpsAlterNote       $05
00079C89 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
00079C91 03                         	dc.b	$03
00079C92 E601                       	smpsAlterVol        $01
00079C94 F6F1 D1                    	smpsJump            music84_Jump01
00079C97                            
00079C97                            ; FM5 Data
00079C97                            music84_FM5:
00079C99 E080                       	smpsPan             panLeft, $00
00079C9B 8003                       	dc.b	nRst, $03
00079C9D E10D                       	smpsAlterNote       $0D
00079C9F C203 8008                  	dc.b	nF5, $03, nRst, $08
00079CA3 E10C                       	smpsAlterNote       $0C
00079CA5 C103 800A                  	dc.b	nE5, $03, nRst, $0A
00079CA9 E10F                       	smpsAlterNote       $0F
00079CAB BA03 8006                  	dc.b	nA4, $03, nRst, $06
00079CB1 E6FE                       	smpsAlterVol        $FE
00079CB3 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
00079CB9 E10D                       	smpsAlterNote       $0D
00079CBB C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00079CC1 E10C                       	smpsAlterNote       $0C
00079CC3 C102 8001                  	dc.b	nE5, $02, nRst, $01
00079CC7 E10A                       	smpsAlterNote       $0A
00079CC9 BD01 8001                  	dc.b	nC5, $01, nRst, $01
00079CCF 03                         	dc.b	$03
00079CD0                            
00079CD0                            music84_Jump00:
00079CD0 8004                       	dc.b	nRst, $04
00079CD2 E602                       	smpsAlterVol        $02
00079CD4 E10D                       	smpsAlterNote       $0D
00079CD6 B60D                       	dc.b	nF4, $0D
00079CD8 E107                       	smpsAlterNote       $07
00079CDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079CDE E10A                       	smpsAlterNote       $0A
00079CE0 E701                       	dc.b	smpsNoAttack, $01
00079CE2 E110                       	smpsAlterNote       $10
00079CE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079CE8 E10A                       	smpsAlterNote       $0A
00079CEA E701                       	dc.b	smpsNoAttack, $01
00079CEC E107                       	smpsAlterNote       $07
00079CEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079CF2 E10D                       	smpsAlterNote       $0D
00079CF4 E701                       	dc.b	smpsNoAttack, $01
00079CF6 E111                       	smpsAlterNote       $11
00079CF8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00079CFC E10D                       	smpsAlterNote       $0D
00079CFE B80D                       	dc.b	nG4, $0D
00079D00 E107                       	smpsAlterNote       $07
00079D02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079D06 E10A                       	smpsAlterNote       $0A
00079D08 E701                       	dc.b	smpsNoAttack, $01
00079D0A E110                       	smpsAlterNote       $10
00079D0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079D10 E10A                       	smpsAlterNote       $0A
00079D12 E701                       	dc.b	smpsNoAttack, $01
00079D14 E107                       	smpsAlterNote       $07
00079D16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079D1A E10D                       	smpsAlterNote       $0D
00079D1C E701                       	dc.b	smpsNoAttack, $01
00079D1E E111                       	smpsAlterNote       $11
00079D20 E701                       	dc.b	smpsNoAttack, $01
00079D22 E110                       	smpsAlterNote       $10
00079D24 E701                       	dc.b	smpsNoAttack, $01
00079D26 E10A                       	smpsAlterNote       $0A
00079D28 E701                       	dc.b	smpsNoAttack, $01
00079D2A E106                       	smpsAlterNote       $06
00079D2C E701                       	dc.b	smpsNoAttack, $01
00079D2E E10A                       	smpsAlterNote       $0A
00079D30 E701                       	dc.b	smpsNoAttack, $01
00079D32 E10D                       	smpsAlterNote       $0D
00079D34 E701                       	dc.b	smpsNoAttack, $01
00079D36 E111                       	smpsAlterNote       $11
00079D38 E701                       	dc.b	smpsNoAttack, $01
00079D3A E10D                       	smpsAlterNote       $0D
00079D3C E701                       	dc.b	smpsNoAttack, $01
00079D3E E10F                       	smpsAlterNote       $0F
00079D40 BA0E                       	dc.b	nA4, $0E
00079D42 E109                       	smpsAlterNote       $09
00079D44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079D48 E10F                       	smpsAlterNote       $0F
00079D4A E701                       	dc.b	smpsNoAttack, $01
00079D4C E112                       	smpsAlterNote       $12
00079D4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079D52 E10C                       	smpsAlterNote       $0C
00079D54 E701                       	dc.b	smpsNoAttack, $01
00079D56 E108                       	smpsAlterNote       $08
00079D58 E701                       	dc.b	smpsNoAttack, $01
00079D5A E109                       	smpsAlterNote       $09
00079D5C E701                       	dc.b	smpsNoAttack, $01
00079D5E E10F                       	smpsAlterNote       $0F
00079D60 E701                       	dc.b	smpsNoAttack, $01
00079D62 E113                       	smpsAlterNote       $13
00079D64 E701                       	dc.b	smpsNoAttack, $01
00079D66 E10F                       	smpsAlterNote       $0F
00079D68 E701                       	dc.b	smpsNoAttack, $01
00079D6A E109                       	smpsAlterNote       $09
00079D6C E701                       	dc.b	smpsNoAttack, $01
00079D6E E108                       	smpsAlterNote       $08
00079D70 E701                       	dc.b	smpsNoAttack, $01
00079D72 E10C                       	smpsAlterNote       $0C
00079D74 E701                       	dc.b	smpsNoAttack, $01
00079D76 E112                       	smpsAlterNote       $12
00079D78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079D7C E10F                       	smpsAlterNote       $0F
00079D7E E701                       	dc.b	smpsNoAttack, $01
00079D80 E109                       	smpsAlterNote       $09
00079D82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079D86 E10F                       	smpsAlterNote       $0F
00079D88 E701                       	dc.b	smpsNoAttack, $01
00079D8A E112                       	smpsAlterNote       $12
00079D8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079D90 E10C                       	smpsAlterNote       $0C
00079D92 E701                       	dc.b	smpsNoAttack, $01
00079D94 E108                       	smpsAlterNote       $08
00079D96 E701                       	dc.b	smpsNoAttack, $01
00079D98 E109                       	smpsAlterNote       $09
00079D9A E701                       	dc.b	smpsNoAttack, $01
00079D9C E10F                       	smpsAlterNote       $0F
00079D9E E701                       	dc.b	smpsNoAttack, $01
00079DA0 E113                       	smpsAlterNote       $13
00079DA2 E701                       	dc.b	smpsNoAttack, $01
00079DA4 E10F                       	smpsAlterNote       $0F
00079DA6 E701                       	dc.b	smpsNoAttack, $01
00079DA8 E10C                       	smpsAlterNote       $0C
00079DAA E701                       	dc.b	smpsNoAttack, $01
00079DAC E108                       	smpsAlterNote       $08
00079DAE E701                       	dc.b	smpsNoAttack, $01
00079DB0 E109                       	smpsAlterNote       $09
00079DB2 8001                       	dc.b	nRst, $01
00079DB4 E10C                       	smpsAlterNote       $0C
00079DB6 B50A                       	dc.b	nE4, $0A
00079DB8 E10D                       	smpsAlterNote       $0D
00079DBA B60D                       	dc.b	nF4, $0D
00079DBC E10A                       	smpsAlterNote       $0A
00079DBE E701                       	dc.b	smpsNoAttack, $01
00079DC0 E106                       	smpsAlterNote       $06
00079DC2 E701                       	dc.b	smpsNoAttack, $01
00079DC4 E107                       	smpsAlterNote       $07
00079DC6 E701                       	dc.b	smpsNoAttack, $01
00079DC8 E10D                       	smpsAlterNote       $0D
00079DCA E701                       	dc.b	smpsNoAttack, $01
00079DCC E111                       	smpsAlterNote       $11
00079DCE E701                       	dc.b	smpsNoAttack, $01
00079DD0 E10D                       	smpsAlterNote       $0D
00079DD2 E701                       	dc.b	smpsNoAttack, $01
00079DD4 E10A                       	smpsAlterNote       $0A
00079DD6 E701                       	dc.b	smpsNoAttack, $01
00079DD8 E106                       	smpsAlterNote       $06
00079DDA E701                       	dc.b	smpsNoAttack, $01
00079DDC E10A                       	smpsAlterNote       $0A
00079DDE E701                       	dc.b	smpsNoAttack, $01
00079DE0 E110                       	smpsAlterNote       $10
00079DE2 E701                       	dc.b	smpsNoAttack, $01
00079DE4 E111                       	smpsAlterNote       $11
00079DE6 E701                       	dc.b	smpsNoAttack, $01
00079DE8 E10D                       	smpsAlterNote       $0D
00079DEA B80D                       	dc.b	nG4, $0D
00079DEC E10A                       	smpsAlterNote       $0A
00079DEE E701                       	dc.b	smpsNoAttack, $01
00079DF0 E106                       	smpsAlterNote       $06
00079DF2 E701                       	dc.b	smpsNoAttack, $01
00079DF4 E107                       	smpsAlterNote       $07
00079DF6 E701                       	dc.b	smpsNoAttack, $01
00079DF8 E10D                       	smpsAlterNote       $0D
00079DFA E701                       	dc.b	smpsNoAttack, $01
00079DFC E111                       	smpsAlterNote       $11
00079DFE E701                       	dc.b	smpsNoAttack, $01
00079E00 E10D                       	smpsAlterNote       $0D
00079E02 E701                       	dc.b	smpsNoAttack, $01
00079E04 E10A                       	smpsAlterNote       $0A
00079E06 E701                       	dc.b	smpsNoAttack, $01
00079E08 E106                       	smpsAlterNote       $06
00079E0A E701                       	dc.b	smpsNoAttack, $01
00079E0C E10A                       	smpsAlterNote       $0A
00079E0E E701                       	dc.b	smpsNoAttack, $01
00079E10 E110                       	smpsAlterNote       $10
00079E12 E701                       	dc.b	smpsNoAttack, $01
00079E14 E111                       	smpsAlterNote       $11
00079E16 E701                       	dc.b	smpsNoAttack, $01
00079E18 E10D                       	smpsAlterNote       $0D
00079E1A E701                       	dc.b	smpsNoAttack, $01
00079E1C E107                       	smpsAlterNote       $07
00079E1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079E22 E10A                       	smpsAlterNote       $0A
00079E24 E701                       	dc.b	smpsNoAttack, $01
00079E26 E110                       	smpsAlterNote       $10
00079E28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079E2C E10D                       	smpsAlterNote       $0D
00079E2E 8001                       	dc.b	nRst, $01
00079E30 E10F                       	smpsAlterNote       $0F
00079E32 BA0D                       	dc.b	nA4, $0D
00079E34 E10C                       	smpsAlterNote       $0C
00079E36 E701                       	dc.b	smpsNoAttack, $01
00079E38 E108                       	smpsAlterNote       $08
00079E3A E701                       	dc.b	smpsNoAttack, $01
00079E3C E10C                       	smpsAlterNote       $0C
00079E3E E701                       	dc.b	smpsNoAttack, $01
00079E40 E112                       	smpsAlterNote       $12
00079E42 E701                       	dc.b	smpsNoAttack, $01
00079E44 E113                       	smpsAlterNote       $13
00079E46 E701                       	dc.b	smpsNoAttack, $01
00079E48 E10F                       	smpsAlterNote       $0F
00079E4A E701                       	dc.b	smpsNoAttack, $01
00079E4C E109                       	smpsAlterNote       $09
00079E4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079E52 E10C                       	smpsAlterNote       $0C
00079E54 E701                       	dc.b	smpsNoAttack, $01
00079E56 E112                       	smpsAlterNote       $12
00079E58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079E5C E10C                       	smpsAlterNote       $0C
00079E5E E701                       	dc.b	smpsNoAttack, $01
00079E60 E109                       	smpsAlterNote       $09
00079E62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079E66 E10F                       	smpsAlterNote       $0F
00079E68 E701                       	dc.b	smpsNoAttack, $01
00079E6A E113                       	smpsAlterNote       $13
00079E6C E701                       	dc.b	smpsNoAttack, $01
00079E6E E112                       	smpsAlterNote       $12
00079E70 E701                       	dc.b	smpsNoAttack, $01
00079E72 E10C                       	smpsAlterNote       $0C
00079E74 E701                       	dc.b	smpsNoAttack, $01
00079E76 E108                       	smpsAlterNote       $08
00079E78 E701                       	dc.b	smpsNoAttack, $01
00079E7A E10C                       	smpsAlterNote       $0C
00079E7C E701                       	dc.b	smpsNoAttack, $01
00079E7E E10F                       	smpsAlterNote       $0F
00079E80 E701                       	dc.b	smpsNoAttack, $01
00079E82 E113                       	smpsAlterNote       $13
00079E84 E701                       	dc.b	smpsNoAttack, $01
00079E86 E10F                       	smpsAlterNote       $0F
00079E88 E701                       	dc.b	smpsNoAttack, $01
00079E8A E109                       	smpsAlterNote       $09
00079E8C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00079E90 E10D                       	smpsAlterNote       $0D
00079E92 B609 8001                  	dc.b	nF4, $09, nRst, $01
00079E96 E10C                       	smpsAlterNote       $0C
00079E98 B506 8001                  	dc.b	nE4, $06, nRst, $01
00079E9C E10B                       	smpsAlterNote       $0B
00079E9E B30D                       	dc.b	nD4, $0D
00079EA0 E10C                       	smpsAlterNote       $0C
00079EA2 B503 8001                  	dc.b	nE4, $03, nRst, $01
00079EA6 E10D                       	smpsAlterNote       $0D
00079EA8 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
00079EB0 E109                       	smpsAlterNote       $09
00079EB2 E701                       	dc.b	smpsNoAttack, $01
00079EB4 E108                       	smpsAlterNote       $08
00079EB6 E701                       	dc.b	smpsNoAttack, $01
00079EB8 E10C                       	smpsAlterNote       $0C
00079EBA E701                       	dc.b	smpsNoAttack, $01
00079EBC E112                       	smpsAlterNote       $12
00079EBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079EC2 E10F                       	smpsAlterNote       $0F
00079EC4 E701                       	dc.b	smpsNoAttack, $01
00079EC6 E109                       	smpsAlterNote       $09
00079EC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079ECC E10F                       	smpsAlterNote       $0F
00079ECE E701                       	dc.b	smpsNoAttack, $01
00079ED0 E112                       	smpsAlterNote       $12
00079ED2 E701                       	dc.b	smpsNoAttack, $01
00079ED4 E113                       	smpsAlterNote       $13
00079ED6 8001                       	dc.b	nRst, $01
00079ED8 E10D                       	smpsAlterNote       $0D
00079EDA C20D                       	dc.b	nF5, $0D
00079EDC E107                       	smpsAlterNote       $07
00079EDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079EE2 E10A                       	smpsAlterNote       $0A
00079EE4 E701                       	dc.b	smpsNoAttack, $01
00079EE6 E110                       	smpsAlterNote       $10
00079EE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079EEC E10A                       	smpsAlterNote       $0A
00079EEE E701                       	dc.b	smpsNoAttack, $01
00079EF0 E107                       	smpsAlterNote       $07
00079EF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079EF6 E10D                       	smpsAlterNote       $0D
00079EF8 E701                       	dc.b	smpsNoAttack, $01
00079EFA E111                       	smpsAlterNote       $11
00079EFC E701                       	dc.b	smpsNoAttack, $01
00079EFE E110                       	smpsAlterNote       $10
00079F00 E701                       	dc.b	smpsNoAttack, $01
00079F02 E10A                       	smpsAlterNote       $0A
00079F04 E701                       	dc.b	smpsNoAttack, $01
00079F06 E106                       	smpsAlterNote       $06
00079F08 E701                       	dc.b	smpsNoAttack, $01
00079F0A E10A                       	smpsAlterNote       $0A
00079F0C E701                       	dc.b	smpsNoAttack, $01
00079F0E E10D                       	smpsAlterNote       $0D
00079F10 E701                       	dc.b	smpsNoAttack, $01
00079F12 E111                       	smpsAlterNote       $11
00079F14 E701                       	dc.b	smpsNoAttack, $01
00079F16 E10D                       	smpsAlterNote       $0D
00079F18 E701                       	dc.b	smpsNoAttack, $01
00079F1A E107                       	smpsAlterNote       $07
00079F1C E701                       	dc.b	smpsNoAttack, $01
00079F1E E106                       	smpsAlterNote       $06
00079F20 E701                       	dc.b	smpsNoAttack, $01
00079F22 E10A                       	smpsAlterNote       $0A
00079F24 E701                       	dc.b	smpsNoAttack, $01
00079F26 E110                       	smpsAlterNote       $10
00079F28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079F2C E10D                       	smpsAlterNote       $0D
00079F2E E701                       	dc.b	smpsNoAttack, $01
00079F30 E107                       	smpsAlterNote       $07
00079F32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079F36 E10D                       	smpsAlterNote       $0D
00079F38 E701                       	dc.b	smpsNoAttack, $01
00079F3A E110                       	smpsAlterNote       $10
00079F3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079F40 E10A                       	smpsAlterNote       $0A
00079F42 E701                       	dc.b	smpsNoAttack, $01
00079F44 E106                       	smpsAlterNote       $06
00079F46 E701                       	dc.b	smpsNoAttack, $01
00079F48 E107                       	smpsAlterNote       $07
00079F4A E701                       	dc.b	smpsNoAttack, $01
00079F4C E10D                       	smpsAlterNote       $0D
00079F4E E701                       	dc.b	smpsNoAttack, $01
00079F50 E111                       	smpsAlterNote       $11
00079F52 E701                       	dc.b	smpsNoAttack, $01
00079F54 E10D                       	smpsAlterNote       $0D
00079F56 E701                       	dc.b	smpsNoAttack, $01
00079F58 E10A                       	smpsAlterNote       $0A
00079F5A E701                       	dc.b	smpsNoAttack, $01
00079F5C E106                       	smpsAlterNote       $06
00079F5E E701                       	dc.b	smpsNoAttack, $01
00079F60 E10A                       	smpsAlterNote       $0A
00079F62 E701                       	dc.b	smpsNoAttack, $01
00079F64 E110                       	smpsAlterNote       $10
00079F66 E701                       	dc.b	smpsNoAttack, $01
00079F68 E111                       	smpsAlterNote       $11
00079F6A E701                       	dc.b	smpsNoAttack, $01
00079F6C E10D                       	smpsAlterNote       $0D
00079F6E E701                       	dc.b	smpsNoAttack, $01
00079F70 E107                       	smpsAlterNote       $07
00079F72 E701                       	dc.b	smpsNoAttack, $01
00079F74 E10D                       	smpsAlterNote       $0D
00079F76 C207                       	dc.b	nF5, $07
00079F78 E10C                       	smpsAlterNote       $0C
00079F7A C10D                       	dc.b	nE5, $0D
00079F7C E109                       	smpsAlterNote       $09
00079F7E E701                       	dc.b	smpsNoAttack, $01
00079F80 E106                       	smpsAlterNote       $06
00079F82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079F86 E10C                       	smpsAlterNote       $0C
00079F88 E701                       	dc.b	smpsNoAttack, $01
00079F8A E110                       	smpsAlterNote       $10
00079F8C E701                       	dc.b	smpsNoAttack, $01
00079F8E E10F                       	smpsAlterNote       $0F
00079F90 E701                       	dc.b	smpsNoAttack, $01
00079F92 E109                       	smpsAlterNote       $09
00079F94 E701                       	dc.b	smpsNoAttack, $01
00079F96 E105                       	smpsAlterNote       $05
00079F98 E701                       	dc.b	smpsNoAttack, $01
00079F9A E109                       	smpsAlterNote       $09
00079F9C E701                       	dc.b	smpsNoAttack, $01
00079F9E E10C                       	smpsAlterNote       $0C
00079FA0 E701                       	dc.b	smpsNoAttack, $01
00079FA2 E110                       	smpsAlterNote       $10
00079FA4 E701                       	dc.b	smpsNoAttack, $01
00079FA6 E10B                       	smpsAlterNote       $0B
00079FA8 BF0D                       	dc.b	nD5, $0D
00079FAA E108                       	smpsAlterNote       $08
00079FAC E701                       	dc.b	smpsNoAttack, $01
00079FAE E105                       	smpsAlterNote       $05
00079FB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079FB4 E10B                       	smpsAlterNote       $0B
00079FB6 E701                       	dc.b	smpsNoAttack, $01
00079FB8 E10F                       	smpsAlterNote       $0F
00079FBA E701                       	dc.b	smpsNoAttack, $01
00079FBC E10E                       	smpsAlterNote       $0E
00079FBE E701                       	dc.b	smpsNoAttack, $01
00079FC0 E108                       	smpsAlterNote       $08
00079FC2 E701                       	dc.b	smpsNoAttack, $01
00079FC4 E104                       	smpsAlterNote       $04
00079FC6 E701                       	dc.b	smpsNoAttack, $01
00079FC8 E108                       	smpsAlterNote       $08
00079FCA E701                       	dc.b	smpsNoAttack, $01
00079FCC E10E                       	smpsAlterNote       $0E
00079FCE E701                       	dc.b	smpsNoAttack, $01
00079FD0 E10F                       	smpsAlterNote       $0F
00079FD2 E701                       	dc.b	smpsNoAttack, $01
00079FD4 E10B                       	smpsAlterNote       $0B
00079FD6 E701                       	dc.b	smpsNoAttack, $01
00079FD8 E105                       	smpsAlterNote       $05
00079FDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079FDE E108                       	smpsAlterNote       $08
00079FE0 E701                       	dc.b	smpsNoAttack, $01
00079FE2 E10E                       	smpsAlterNote       $0E
00079FE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079FE8 E108                       	smpsAlterNote       $08
00079FEA E701                       	dc.b	smpsNoAttack, $01
00079FEC E105                       	smpsAlterNote       $05
00079FEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079FF2 E10B                       	smpsAlterNote       $0B
00079FF4 E701                       	dc.b	smpsNoAttack, $01
00079FF6 E10F                       	smpsAlterNote       $0F
00079FF8 E701                       	dc.b	smpsNoAttack, $01
00079FFA E10E                       	smpsAlterNote       $0E
00079FFC E701                       	dc.b	smpsNoAttack, $01
00079FFE E108                       	smpsAlterNote       $08
0007A000 E701                       	dc.b	smpsNoAttack, $01
0007A002 E104                       	smpsAlterNote       $04
0007A004 E701                       	dc.b	smpsNoAttack, $01
0007A006 E108                       	smpsAlterNote       $08
0007A008 E701                       	dc.b	smpsNoAttack, $01
0007A00A E10B                       	smpsAlterNote       $0B
0007A00C E701                       	dc.b	smpsNoAttack, $01
0007A00E E10F                       	smpsAlterNote       $0F
0007A010 E701                       	dc.b	smpsNoAttack, $01
0007A012 E10B                       	smpsAlterNote       $0B
0007A014 E701                       	dc.b	smpsNoAttack, $01
0007A016 E105                       	smpsAlterNote       $05
0007A018 E701                       	dc.b	smpsNoAttack, $01
0007A01A E104                       	smpsAlterNote       $04
0007A01C E701                       	dc.b	smpsNoAttack, $01
0007A01E E108                       	smpsAlterNote       $08
0007A020 E701                       	dc.b	smpsNoAttack, $01
0007A022 E10E                       	smpsAlterNote       $0E
0007A024 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A028 E10B                       	smpsAlterNote       $0B
0007A02A E701                       	dc.b	smpsNoAttack, $01
0007A02C E105                       	smpsAlterNote       $05
0007A02E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A032 E10B                       	smpsAlterNote       $0B
0007A034 E701                       	dc.b	smpsNoAttack, $01
0007A036 E10E                       	smpsAlterNote       $0E
0007A038 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A03C E108                       	smpsAlterNote       $08
0007A03E E701                       	dc.b	smpsNoAttack, $01
0007A040 E105                       	smpsAlterNote       $05
0007A042 8001                       	dc.b	nRst, $01
0007A046 E601                       	smpsAlterVol        $01
0007A048 E10B                       	smpsAlterNote       $0B
0007A04A BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0007A056 8004                       	dc.b	nRst, $04
0007A05A E6FF                       	smpsAlterVol        $FF
0007A05C E10D                       	smpsAlterNote       $0D
0007A05E B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0007A066 E10C                       	smpsAlterNote       $0C
0007A068 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0007A06D E10D                       	smpsAlterNote       $0D
0007A06F B60D                       	dc.b	nF4, $0D
0007A071 E10A                       	smpsAlterNote       $0A
0007A073 E701                       	dc.b	smpsNoAttack, $01
0007A075 E106                       	smpsAlterNote       $06
0007A077 E701                       	dc.b	smpsNoAttack, $01
0007A079 E10A                       	smpsAlterNote       $0A
0007A07B E701                       	dc.b	smpsNoAttack, $01
0007A07D E110                       	smpsAlterNote       $10
0007A07F E701                       	dc.b	smpsNoAttack, $01
0007A081 E111                       	smpsAlterNote       $11
0007A083 E701                       	dc.b	smpsNoAttack, $01
0007A085 E10D                       	smpsAlterNote       $0D
0007A087 E701                       	dc.b	smpsNoAttack, $01
0007A089 E107                       	smpsAlterNote       $07
0007A08B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A08F E10A                       	smpsAlterNote       $0A
0007A091 E701                       	dc.b	smpsNoAttack, $01
0007A093 E110                       	smpsAlterNote       $10
0007A095 E701                       	dc.b	smpsNoAttack, $01
0007A097 E111                       	smpsAlterNote       $11
0007A099 8001                       	dc.b	nRst, $01
0007A09B E10D                       	smpsAlterNote       $0D
0007A09D B80D                       	dc.b	nG4, $0D
0007A09F E10A                       	smpsAlterNote       $0A
0007A0A1 E701                       	dc.b	smpsNoAttack, $01
0007A0A3 E106                       	smpsAlterNote       $06
0007A0A5 E701                       	dc.b	smpsNoAttack, $01
0007A0A7 E10A                       	smpsAlterNote       $0A
0007A0A9 E701                       	dc.b	smpsNoAttack, $01
0007A0AB E110                       	smpsAlterNote       $10
0007A0AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A0B1 E10D                       	smpsAlterNote       $0D
0007A0B3 E701                       	dc.b	smpsNoAttack, $01
0007A0B5 E107                       	smpsAlterNote       $07
0007A0B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A0BB E10D                       	smpsAlterNote       $0D
0007A0BD E701                       	dc.b	smpsNoAttack, $01
0007A0BF E110                       	smpsAlterNote       $10
0007A0C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A0C5 E10A                       	smpsAlterNote       $0A
0007A0C7 E701                       	dc.b	smpsNoAttack, $01
0007A0C9 E106                       	smpsAlterNote       $06
0007A0CB E701                       	dc.b	smpsNoAttack, $01
0007A0CD E107                       	smpsAlterNote       $07
0007A0CF E701                       	dc.b	smpsNoAttack, $01
0007A0D1 E10D                       	smpsAlterNote       $0D
0007A0D3 E701                       	dc.b	smpsNoAttack, $01
0007A0D5 E111                       	smpsAlterNote       $11
0007A0D7 E701                       	dc.b	smpsNoAttack, $01
0007A0D9 E10D                       	smpsAlterNote       $0D
0007A0DB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007A0DF E10F                       	smpsAlterNote       $0F
0007A0E1 BA02 8001                  	dc.b	nA4, $02, nRst, $01
0007A0E5 E110                       	smpsAlterNote       $10
0007A0E7 BB03                       	dc.b	nBb4, $03
0007A0E9 E10F                       	smpsAlterNote       $0F
0007A0EB BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0007A0F1 E110                       	smpsAlterNote       $10
0007A0F3 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0007A0F7 E10F                       	smpsAlterNote       $0F
0007A0F9 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0007A0FF E110                       	smpsAlterNote       $10
0007A101 D302 8001                  	dc.b	nBb6, $02, nRst, $01
0007A105 E10F                       	smpsAlterNote       $0F
0007A107 D20D                       	dc.b	nA6, $0D
0007A109 E10C                       	smpsAlterNote       $0C
0007A10B E701                       	dc.b	smpsNoAttack, $01
0007A10D E108                       	smpsAlterNote       $08
0007A10F E701                       	dc.b	smpsNoAttack, $01
0007A111 E10C                       	smpsAlterNote       $0C
0007A113 E701                       	dc.b	smpsNoAttack, $01
0007A115 E10F                       	smpsAlterNote       $0F
0007A117 E701                       	dc.b	smpsNoAttack, $01
0007A119 E113                       	smpsAlterNote       $13
0007A11B E701                       	dc.b	smpsNoAttack, $01
0007A11D E10F                       	smpsAlterNote       $0F
0007A11F E701                       	dc.b	smpsNoAttack, $01
0007A121 E109                       	smpsAlterNote       $09
0007A123 E701                       	dc.b	smpsNoAttack, $01
0007A125 E108                       	smpsAlterNote       $08
0007A127 E701                       	dc.b	smpsNoAttack, $01
0007A129 E10C                       	smpsAlterNote       $0C
0007A12B E701                       	dc.b	smpsNoAttack, $01
0007A12D E112                       	smpsAlterNote       $12
0007A12F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A133 E10F                       	smpsAlterNote       $0F
0007A135 E701                       	dc.b	smpsNoAttack, $01
0007A137 E109                       	smpsAlterNote       $09
0007A139 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0007A13F E10D                       	smpsAlterNote       $0D
0007A141 CE07                       	dc.b	nF6, $07
0007A143 E10C                       	smpsAlterNote       $0C
0007A145 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0007A149 E10D                       	smpsAlterNote       $0D
0007A14B CE03                       	dc.b	nF6, $03
0007A14D E10C                       	smpsAlterNote       $0C
0007A14F CC0D                       	dc.b	nEb6, $0D
0007A151 E109                       	smpsAlterNote       $09
0007A153 E701                       	dc.b	smpsNoAttack, $01
0007A155 E106                       	smpsAlterNote       $06
0007A157 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A15B E10C                       	smpsAlterNote       $0C
0007A15D E701                       	dc.b	smpsNoAttack, $01
0007A15F E110                       	smpsAlterNote       $10
0007A161 E701                       	dc.b	smpsNoAttack, $01
0007A163 E10F                       	smpsAlterNote       $0F
0007A165 E701                       	dc.b	smpsNoAttack, $01
0007A167 E109                       	smpsAlterNote       $09
0007A169 E701                       	dc.b	smpsNoAttack, $01
0007A16B E105                       	smpsAlterNote       $05
0007A16D E701                       	dc.b	smpsNoAttack, $01
0007A16F E109                       	smpsAlterNote       $09
0007A171 E701                       	dc.b	smpsNoAttack, $01
0007A173 E10C                       	smpsAlterNote       $0C
0007A175 E701                       	dc.b	smpsNoAttack, $01
0007A177 E110                       	smpsAlterNote       $10
0007A179 E701                       	dc.b	smpsNoAttack, $01
0007A17B E10C                       	smpsAlterNote       $0C
0007A17D E701                       	dc.b	smpsNoAttack, $01
0007A17F E106                       	smpsAlterNote       $06
0007A181 E701                       	dc.b	smpsNoAttack, $01
0007A183 E105                       	smpsAlterNote       $05
0007A185 E701                       	dc.b	smpsNoAttack, $01
0007A187 E109                       	smpsAlterNote       $09
0007A189 E701                       	dc.b	smpsNoAttack, $01
0007A18B E10F                       	smpsAlterNote       $0F
0007A18D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A191 E10C                       	smpsAlterNote       $0C
0007A193 E701                       	dc.b	smpsNoAttack, $01
0007A195 E10B                       	smpsAlterNote       $0B
0007A197 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0007A1A1 E10F                       	smpsAlterNote       $0F
0007A1A3 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0007A1AD E10D                       	smpsAlterNote       $0D
0007A1AF C203                       	dc.b	nF5, $03
0007A1B1 E10C                       	smpsAlterNote       $0C
0007A1B3 C103 8001                  	dc.b	nE5, $03, nRst, $01
0007A1B7 E10D                       	smpsAlterNote       $0D
0007A1B9 C20D                       	dc.b	nF5, $0D
0007A1BB E10C                       	smpsAlterNote       $0C
0007A1BD C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0007A1C1 E10B                       	smpsAlterNote       $0B
0007A1C3 BF0D                       	dc.b	nD5, $0D
0007A1C5 E108                       	smpsAlterNote       $08
0007A1C7 E701                       	dc.b	smpsNoAttack, $01
0007A1C9 E104                       	smpsAlterNote       $04
0007A1CB E701                       	dc.b	smpsNoAttack, $01
0007A1CD E108                       	smpsAlterNote       $08
0007A1CF E701                       	dc.b	smpsNoAttack, $01
0007A1D1 E10E                       	smpsAlterNote       $0E
0007A1D3 E701                       	dc.b	smpsNoAttack, $01
0007A1D5 E10F                       	smpsAlterNote       $0F
0007A1D7 E701                       	dc.b	smpsNoAttack, $01
0007A1D9 E10B                       	smpsAlterNote       $0B
0007A1DB E701                       	dc.b	smpsNoAttack, $01
0007A1DD E105                       	smpsAlterNote       $05
0007A1DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A1E3 E108                       	smpsAlterNote       $08
0007A1E5 E701                       	dc.b	smpsNoAttack, $01
0007A1E7 E10E                       	smpsAlterNote       $0E
0007A1E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A1ED E108                       	smpsAlterNote       $08
0007A1EF E701                       	dc.b	smpsNoAttack, $01
0007A1F1 E105                       	smpsAlterNote       $05
0007A1F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A1F7 E10B                       	smpsAlterNote       $0B
0007A1F9 E701                       	dc.b	smpsNoAttack, $01
0007A1FB E10F                       	smpsAlterNote       $0F
0007A1FD E701                       	dc.b	smpsNoAttack, $01
0007A1FF E10E                       	smpsAlterNote       $0E
0007A201 E701                       	dc.b	smpsNoAttack, $01
0007A203 E108                       	smpsAlterNote       $08
0007A205 E701                       	dc.b	smpsNoAttack, $01
0007A207 E104                       	smpsAlterNote       $04
0007A209 E701                       	dc.b	smpsNoAttack, $01
0007A20B E108                       	smpsAlterNote       $08
0007A20D E701                       	dc.b	smpsNoAttack, $01
0007A20F E10B                       	smpsAlterNote       $0B
0007A211 E701                       	dc.b	smpsNoAttack, $01
0007A213 E10F                       	smpsAlterNote       $0F
0007A215 E701                       	dc.b	smpsNoAttack, $01
0007A217 E10B                       	smpsAlterNote       $0B
0007A219 E701                       	dc.b	smpsNoAttack, $01
0007A21B E105                       	smpsAlterNote       $05
0007A21D E701                       	dc.b	smpsNoAttack, $01
0007A21F E104                       	smpsAlterNote       $04
0007A221 E701                       	dc.b	smpsNoAttack, $01
0007A223 E108                       	smpsAlterNote       $08
0007A225 E701                       	dc.b	smpsNoAttack, $01
0007A227 E10E                       	smpsAlterNote       $0E
0007A229 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A22D E10B                       	smpsAlterNote       $0B
0007A22F E701                       	dc.b	smpsNoAttack, $01
0007A231 E105                       	smpsAlterNote       $05
0007A233 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A237 E10B                       	smpsAlterNote       $0B
0007A239 E701                       	dc.b	smpsNoAttack, $01
0007A23B E10E                       	smpsAlterNote       $0E
0007A23D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A241 E108                       	smpsAlterNote       $08
0007A243 E701                       	dc.b	smpsNoAttack, $01
0007A245 E104                       	smpsAlterNote       $04
0007A247 E701                       	dc.b	smpsNoAttack, $01
0007A249 E105                       	smpsAlterNote       $05
0007A24B E701                       	dc.b	smpsNoAttack, $01
0007A24D E10B                       	smpsAlterNote       $0B
0007A24F E701                       	dc.b	smpsNoAttack, $01
0007A251 E10F                       	smpsAlterNote       $0F
0007A253 E701                       	dc.b	smpsNoAttack, $01
0007A255 E10B                       	smpsAlterNote       $0B
0007A257 E701                       	dc.b	smpsNoAttack, $01
0007A259 E108                       	smpsAlterNote       $08
0007A25B E701                       	dc.b	smpsNoAttack, $01
0007A25D E104                       	smpsAlterNote       $04
0007A25F E701                       	dc.b	smpsNoAttack, $01
0007A261 E108                       	smpsAlterNote       $08
0007A263 E701                       	dc.b	smpsNoAttack, $01
0007A265 E10E                       	smpsAlterNote       $0E
0007A267 E701                       	dc.b	smpsNoAttack, $01
0007A269 E10F                       	smpsAlterNote       $0F
0007A26B E701                       	dc.b	smpsNoAttack, $01
0007A26D E10B                       	smpsAlterNote       $0B
0007A26F E701                       	dc.b	smpsNoAttack, $01
0007A271 E105                       	smpsAlterNote       $05
0007A273 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A277 E108                       	smpsAlterNote       $08
0007A279 E701                       	dc.b	smpsNoAttack, $01
0007A27B E10E                       	smpsAlterNote       $0E
0007A27D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A281 E108                       	smpsAlterNote       $08
0007A283 E701                       	dc.b	smpsNoAttack, $01
0007A285 E105                       	smpsAlterNote       $05
0007A287 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A28B E10B                       	smpsAlterNote       $0B
0007A28D E701                       	dc.b	smpsNoAttack, $01
0007A28F E10F                       	smpsAlterNote       $0F
0007A291 E701                       	dc.b	smpsNoAttack, $01
0007A293 E10E                       	smpsAlterNote       $0E
0007A295 E701                       	dc.b	smpsNoAttack, $01
0007A297 E108                       	smpsAlterNote       $08
0007A299 E701                       	dc.b	smpsNoAttack, $01
0007A29B E104                       	smpsAlterNote       $04
0007A29D E701                       	dc.b	smpsNoAttack, $01
0007A29F E108                       	smpsAlterNote       $08
0007A2A1 E701                       	dc.b	smpsNoAttack, $01
0007A2A3 E10B                       	smpsAlterNote       $0B
0007A2A5 E701                       	dc.b	smpsNoAttack, $01
0007A2A7 E10F                       	smpsAlterNote       $0F
0007A2A9 E701                       	dc.b	smpsNoAttack, $01
0007A2AB E10B                       	smpsAlterNote       $0B
0007A2AD E701                       	dc.b	smpsNoAttack, $01
0007A2AF E105                       	smpsAlterNote       $05
0007A2B1 E701                       	dc.b	smpsNoAttack, $01
0007A2B3 E104                       	smpsAlterNote       $04
0007A2B5 E701                       	dc.b	smpsNoAttack, $01
0007A2B7 E105                       	smpsAlterNote       $05
0007A2B9 8001                       	dc.b	nRst, $01
0007A2BB E10D                       	smpsAlterNote       $0D
0007A2BD C20D                       	dc.b	nF5, $0D
0007A2BF E107                       	smpsAlterNote       $07
0007A2C1 E701                       	dc.b	smpsNoAttack, $01
0007A2C3 E106                       	smpsAlterNote       $06
0007A2C5 E701                       	dc.b	smpsNoAttack, $01
0007A2C7 E10A                       	smpsAlterNote       $0A
0007A2C9 E701                       	dc.b	smpsNoAttack, $01
0007A2CB E110                       	smpsAlterNote       $10
0007A2CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A2D1 E10D                       	smpsAlterNote       $0D
0007A2D3 E701                       	dc.b	smpsNoAttack, $01
0007A2D5 E107                       	smpsAlterNote       $07
0007A2D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A2DB E10D                       	smpsAlterNote       $0D
0007A2DD E701                       	dc.b	smpsNoAttack, $01
0007A2DF E110                       	smpsAlterNote       $10
0007A2E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A2E5 E10A                       	smpsAlterNote       $0A
0007A2E7 E701                       	dc.b	smpsNoAttack, $01
0007A2E9 E106                       	smpsAlterNote       $06
0007A2EB E701                       	dc.b	smpsNoAttack, $01
0007A2ED E107                       	smpsAlterNote       $07
0007A2EF E701                       	dc.b	smpsNoAttack, $01
0007A2F1 E10D                       	smpsAlterNote       $0D
0007A2F3 E701                       	dc.b	smpsNoAttack, $01
0007A2F5 E111                       	smpsAlterNote       $11
0007A2F7 E701                       	dc.b	smpsNoAttack, $01
0007A2F9 E10D                       	smpsAlterNote       $0D
0007A2FB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007A2FF E10C                       	smpsAlterNote       $0C
0007A301 C10D                       	dc.b	nE5, $0D
0007A303 E10D                       	smpsAlterNote       $0D
0007A305 C20A                       	dc.b	nF5, $0A
0007A307 E10C                       	smpsAlterNote       $0C
0007A309 C10E                       	dc.b	nE5, $0E
0007A30B E106                       	smpsAlterNote       $06
0007A30D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A311 E10C                       	smpsAlterNote       $0C
0007A313 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007A317 E10B                       	smpsAlterNote       $0B
0007A319 BF0D                       	dc.b	nD5, $0D
0007A31B E10C                       	smpsAlterNote       $0C
0007A31D C107                       	dc.b	nE5, $07
0007A31F E10D                       	smpsAlterNote       $0D
0007A321 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0007A32B E110                       	smpsAlterNote       $10
0007A32D C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0007A333 E10F                       	smpsAlterNote       $0F
0007A335 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0007A33D E10D                       	smpsAlterNote       $0D
0007A33F D003                       	dc.b	nG6, $03
0007A343 E0C0                       	smpsPan             panCenter, $00
0007A345 E6FF                       	smpsAlterVol        $FF
0007A347 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0007A353 8001                       	dc.b	nRst, $01
0007A355 E10C                       	smpsAlterNote       $0C
0007A357 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0007A361 E604                       	smpsAlterVol        $04
0007A363 E10B                       	smpsAlterNote       $0B
0007A365 B306 8001                  	dc.b	nD4, $06, nRst, $01
0007A369 E10F                       	smpsAlterNote       $0F
0007A36B AE03                       	dc.b	nA3, $03
0007A36D E10D                       	smpsAlterNote       $0D
0007A36F B603 8001                  	dc.b	nF4, $03, nRst, $01
0007A373 E10C                       	smpsAlterNote       $0C
0007A375 B506 8001                  	dc.b	nE4, $06, nRst, $01
0007A379 E10B                       	smpsAlterNote       $0B
0007A37B B302 8001                  	dc.b	nD4, $02, nRst, $01
0007A37F E10A                       	smpsAlterNote       $0A
0007A381 B103                       	dc.b	nC4, $03
0007A383 E110                       	smpsAlterNote       $10
0007A385 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0007A389 E10F                       	smpsAlterNote       $0F
0007A38B AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0007A38F E080                       	smpsPan             panLeft, $00
0007A391 01                         	dc.b	$01
0007A394 E6FB                       	smpsAlterVol        $FB
0007A396 E1E4                       	smpsAlterNote       $E4
0007A398 C501                       	dc.b	nAb5, $01
0007A39A E1F4                       	smpsAlterNote       $F4
0007A39C E701                       	dc.b	smpsNoAttack, $01
0007A39E E104                       	smpsAlterNote       $04
0007A3A0 E701                       	dc.b	smpsNoAttack, $01
0007A3A2 E114                       	smpsAlterNote       $14
0007A3A4 E701                       	dc.b	smpsNoAttack, $01
0007A3A6 E11C                       	smpsAlterNote       $1C
0007A3A8 E701                       	dc.b	smpsNoAttack, $01
0007A3AA E1EF                       	smpsAlterNote       $EF
0007A3AC E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0007A3AF E1FF                       	smpsAlterNote       $FF
0007A3B1 E701                       	dc.b	smpsNoAttack, $01
0007A3B3 E10F                       	smpsAlterNote       $0F
0007A3B5 C606                       	dc.b	nA5, $06
0007A3B7 E109                       	smpsAlterNote       $09
0007A3B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A3BD E10F                       	smpsAlterNote       $0F
0007A3BF E701                       	dc.b	smpsNoAttack, $01
0007A3C1 E112                       	smpsAlterNote       $12
0007A3C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A3C7 E10C                       	smpsAlterNote       $0C
0007A3C9 E701                       	dc.b	smpsNoAttack, $01
0007A3CB E108                       	smpsAlterNote       $08
0007A3CD E701                       	dc.b	smpsNoAttack, $01
0007A3CF E109                       	smpsAlterNote       $09
0007A3D1 E701                       	dc.b	smpsNoAttack, $01
0007A3D3 E10F                       	smpsAlterNote       $0F
0007A3D5 E701                       	dc.b	smpsNoAttack, $01
0007A3D7 E113                       	smpsAlterNote       $13
0007A3D9 E701                       	dc.b	smpsNoAttack, $01
0007A3DB E10F                       	smpsAlterNote       $0F
0007A3DD E701                       	dc.b	smpsNoAttack, $01
0007A3DF E10C                       	smpsAlterNote       $0C
0007A3E1 E701                       	dc.b	smpsNoAttack, $01
0007A3E3 E108                       	smpsAlterNote       $08
0007A3E5 E701                       	dc.b	smpsNoAttack, $01
0007A3E7 E10C                       	smpsAlterNote       $0C
0007A3E9 E701                       	dc.b	smpsNoAttack, $01
0007A3EB E112                       	smpsAlterNote       $12
0007A3ED E701                       	dc.b	smpsNoAttack, $01
0007A3EF E113                       	smpsAlterNote       $13
0007A3F1 E701                       	dc.b	smpsNoAttack, $01
0007A3F3 E10F                       	smpsAlterNote       $0F
0007A3F5 E701                       	dc.b	smpsNoAttack, $01
0007A3F7 E109                       	smpsAlterNote       $09
0007A3F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A3FD E10C                       	smpsAlterNote       $0C
0007A3FF E701                       	dc.b	smpsNoAttack, $01
0007A401 E112                       	smpsAlterNote       $12
0007A403 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A407 E10C                       	smpsAlterNote       $0C
0007A409 E701                       	dc.b	smpsNoAttack, $01
0007A40B E109                       	smpsAlterNote       $09
0007A40D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A411 E10F                       	smpsAlterNote       $0F
0007A413 E701                       	dc.b	smpsNoAttack, $01
0007A415 E113                       	smpsAlterNote       $13
0007A417 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007A41B E10D                       	smpsAlterNote       $0D
0007A41D C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0007A423 E10C                       	smpsAlterNote       $0C
0007A425 C102 8001                  	dc.b	nE5, $02, nRst, $01
0007A429 E10D                       	smpsAlterNote       $0D
0007A42B C201 8001                  	dc.b	nF5, $01, nRst, $01
0007A42F E10C                       	smpsAlterNote       $0C
0007A431 C102                       	dc.b	nE5, $02
0007A433 E10B                       	smpsAlterNote       $0B
0007A435 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0007A439 E10C                       	smpsAlterNote       $0C
0007A43B C101 8001                  	dc.b	nE5, $01, nRst, $01
0007A43F E10B                       	smpsAlterNote       $0B
0007A441 BF02                       	dc.b	nD5, $02
0007A443 E10A                       	smpsAlterNote       $0A
0007A445 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0007A44F E110                       	smpsAlterNote       $10
0007A451 BB02                       	dc.b	nBb4, $02
0007A453 E10A                       	smpsAlterNote       $0A
0007A455 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0007A459 E110                       	smpsAlterNote       $10
0007A45B BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0007A45F E10F                       	smpsAlterNote       $0F
0007A461 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0007A465 E110                       	smpsAlterNote       $10
0007A467 BB02                       	dc.b	nBb4, $02
0007A469 E10F                       	smpsAlterNote       $0F
0007A46B BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0007A475 E10C                       	smpsAlterNote       $0C
0007A477 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0007A47F E10B                       	smpsAlterNote       $0B
0007A481 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0007A485 E10F                       	smpsAlterNote       $0F
0007A487 BA02                       	dc.b	nA4, $02
0007A48B E0C0                       	smpsPan             panCenter, $00
0007A48D E601                       	smpsAlterVol        $01
0007A48F E109                       	smpsAlterNote       $09
0007A491 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0007A49D E108                       	smpsAlterNote       $08
0007A49F A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0007A4A5 E107                       	smpsAlterNote       $07
0007A4A7 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0007A4AD E109                       	smpsAlterNote       $09
0007A4AF B603 8001                  	dc.b	nF4, $03, nRst, $01
0007A4B3 E108                       	smpsAlterNote       $08
0007A4B5 B506 8001                  	dc.b	nE4, $06, nRst, $01
0007A4B9 E107                       	smpsAlterNote       $07
0007A4BB B302 8001                  	dc.b	nD4, $02, nRst, $01
0007A4BF E106                       	smpsAlterNote       $06
0007A4C1 B103                       	dc.b	nC4, $03
0007A4C3 E10C                       	smpsAlterNote       $0C
0007A4C5 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0007A4CB E080                       	smpsPan             panLeft, $00
0007A4CD 07                         	dc.b	$07
0007A4CE E6FE                       	smpsAlterVol        $FE
0007A4D0 E10B                       	smpsAlterNote       $0B
0007A4D2 B20D                       	dc.b	nCs4, $0D
0007A4D4 E105                       	smpsAlterNote       $05
0007A4D6 E701                       	dc.b	smpsNoAttack, $01
0007A4D8 E104                       	smpsAlterNote       $04
0007A4DA E701                       	dc.b	smpsNoAttack, $01
0007A4DC E108                       	smpsAlterNote       $08
0007A4DE E701                       	dc.b	smpsNoAttack, $01
0007A4E0 E10E                       	smpsAlterNote       $0E
0007A4E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A4E6 E10B                       	smpsAlterNote       $0B
0007A4E8 E701                       	dc.b	smpsNoAttack, $01
0007A4EA E105                       	smpsAlterNote       $05
0007A4EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A4F0 E10B                       	smpsAlterNote       $0B
0007A4F2 E701                       	dc.b	smpsNoAttack, $01
0007A4F4 E10E                       	smpsAlterNote       $0E
0007A4F6 E701                       	dc.b	smpsNoAttack, $01
0007A4F8 E10F                       	smpsAlterNote       $0F
0007A4FA 8001                       	dc.b	nRst, $01
0007A4FC E10B                       	smpsAlterNote       $0B
0007A4FE B30D                       	dc.b	nD4, $0D
0007A500 E105                       	smpsAlterNote       $05
0007A502 E701                       	dc.b	smpsNoAttack, $01
0007A504 E104                       	smpsAlterNote       $04
0007A506 E701                       	dc.b	smpsNoAttack, $01
0007A508 E108                       	smpsAlterNote       $08
0007A50A E701                       	dc.b	smpsNoAttack, $01
0007A50C E10E                       	smpsAlterNote       $0E
0007A50E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A512 E10B                       	smpsAlterNote       $0B
0007A514 E701                       	dc.b	smpsNoAttack, $01
0007A516 E105                       	smpsAlterNote       $05
0007A518 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A51C E10B                       	smpsAlterNote       $0B
0007A51E E701                       	dc.b	smpsNoAttack, $01
0007A520 E10E                       	smpsAlterNote       $0E
0007A522 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A526 E108                       	smpsAlterNote       $08
0007A528 E701                       	dc.b	smpsNoAttack, $01
0007A52A E104                       	smpsAlterNote       $04
0007A52C E701                       	dc.b	smpsNoAttack, $01
0007A52E E105                       	smpsAlterNote       $05
0007A530 E701                       	dc.b	smpsNoAttack, $01
0007A532 E10B                       	smpsAlterNote       $0B
0007A534 E701                       	dc.b	smpsNoAttack, $01
0007A536 E10F                       	smpsAlterNote       $0F
0007A538 E701                       	dc.b	smpsNoAttack, $01
0007A53A E10B                       	smpsAlterNote       $0B
0007A53C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007A540 E10C                       	smpsAlterNote       $0C
0007A542 B50D                       	dc.b	nE4, $0D
0007A544 E106                       	smpsAlterNote       $06
0007A546 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A54A E10C                       	smpsAlterNote       $0C
0007A54C E701                       	dc.b	smpsNoAttack, $01
0007A54E E10F                       	smpsAlterNote       $0F
0007A550 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A554 E109                       	smpsAlterNote       $09
0007A556 E701                       	dc.b	smpsNoAttack, $01
0007A558 E105                       	smpsAlterNote       $05
0007A55A E701                       	dc.b	smpsNoAttack, $01
0007A55C E106                       	smpsAlterNote       $06
0007A55E E701                       	dc.b	smpsNoAttack, $01
0007A560 E10C                       	smpsAlterNote       $0C
0007A562 E701                       	dc.b	smpsNoAttack, $01
0007A564 E110                       	smpsAlterNote       $10
0007A566 E701                       	dc.b	smpsNoAttack, $01
0007A568 E10B                       	smpsAlterNote       $0B
0007A56A B30E                       	dc.b	nD4, $0E
0007A56C E105                       	smpsAlterNote       $05
0007A56E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A572 E10B                       	smpsAlterNote       $0B
0007A574 E701                       	dc.b	smpsNoAttack, $01
0007A576 E10E                       	smpsAlterNote       $0E
0007A578 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A57C E108                       	smpsAlterNote       $08
0007A57E E701                       	dc.b	smpsNoAttack, $01
0007A580 E104                       	smpsAlterNote       $04
0007A582 E701                       	dc.b	smpsNoAttack, $01
0007A584 E105                       	smpsAlterNote       $05
0007A586 E701                       	dc.b	smpsNoAttack, $01
0007A588 E10B                       	smpsAlterNote       $0B
0007A58A E701                       	dc.b	smpsNoAttack, $01
0007A58C E10F                       	smpsAlterNote       $0F
0007A58E E701                       	dc.b	smpsNoAttack, $01
0007A590 E10B                       	smpsAlterNote       $0B
0007A592 E701                       	dc.b	smpsNoAttack, $01
0007A594 E108                       	smpsAlterNote       $08
0007A596 E701                       	dc.b	smpsNoAttack, $01
0007A598 E104                       	smpsAlterNote       $04
0007A59A E701                       	dc.b	smpsNoAttack, $01
0007A59C E108                       	smpsAlterNote       $08
0007A59E E701                       	dc.b	smpsNoAttack, $01
0007A5A0 E10E                       	smpsAlterNote       $0E
0007A5A2 E701                       	dc.b	smpsNoAttack, $01
0007A5A4 E10F                       	smpsAlterNote       $0F
0007A5A6 E701                       	dc.b	smpsNoAttack, $01
0007A5A8 E10B                       	smpsAlterNote       $0B
0007A5AA E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0007A5AE E108                       	smpsAlterNote       $08
0007A5B0 E701                       	dc.b	smpsNoAttack, $01
0007A5B2 E105                       	smpsAlterNote       $05
0007A5B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A5B8 E10B                       	smpsAlterNote       $0B
0007A5BA E701                       	dc.b	smpsNoAttack, $01
0007A5BC E10F                       	smpsAlterNote       $0F
0007A5BE E701                       	dc.b	smpsNoAttack, $01
0007A5C0 E10E                       	smpsAlterNote       $0E
0007A5C2 E701                       	dc.b	smpsNoAttack, $01
0007A5C4 E108                       	smpsAlterNote       $08
0007A5C6 E701                       	dc.b	smpsNoAttack, $01
0007A5C8 E104                       	smpsAlterNote       $04
0007A5CA E701                       	dc.b	smpsNoAttack, $01
0007A5CC E108                       	smpsAlterNote       $08
0007A5CE E701                       	dc.b	smpsNoAttack, $01
0007A5D0 E10B                       	smpsAlterNote       $0B
0007A5D2 E701                       	dc.b	smpsNoAttack, $01
0007A5D4 E10F                       	smpsAlterNote       $0F
0007A5D6 E701                       	dc.b	smpsNoAttack, $01
0007A5D8 E10B                       	smpsAlterNote       $0B
0007A5DA B30D                       	dc.b	nD4, $0D
0007A5DC E108                       	smpsAlterNote       $08
0007A5DE E701                       	dc.b	smpsNoAttack, $01
0007A5E0 E105                       	smpsAlterNote       $05
0007A5E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A5E6 E10B                       	smpsAlterNote       $0B
0007A5E8 E701                       	dc.b	smpsNoAttack, $01
0007A5EA E10F                       	smpsAlterNote       $0F
0007A5EC E701                       	dc.b	smpsNoAttack, $01
0007A5EE E10E                       	smpsAlterNote       $0E
0007A5F0 E701                       	dc.b	smpsNoAttack, $01
0007A5F2 E108                       	smpsAlterNote       $08
0007A5F4 E701                       	dc.b	smpsNoAttack, $01
0007A5F6 E104                       	smpsAlterNote       $04
0007A5F8 E701                       	dc.b	smpsNoAttack, $01
0007A5FA E108                       	smpsAlterNote       $08
0007A5FC E701                       	dc.b	smpsNoAttack, $01
0007A5FE E10B                       	smpsAlterNote       $0B
0007A600 E701                       	dc.b	smpsNoAttack, $01
0007A602 E10F                       	smpsAlterNote       $0F
0007A604 E701                       	dc.b	smpsNoAttack, $01
0007A606 E10B                       	smpsAlterNote       $0B
0007A608 E701                       	dc.b	smpsNoAttack, $01
0007A60A E105                       	smpsAlterNote       $05
0007A60C E701                       	dc.b	smpsNoAttack, $01
0007A60E E104                       	smpsAlterNote       $04
0007A610 E701                       	dc.b	smpsNoAttack, $01
0007A612 E108                       	smpsAlterNote       $08
0007A614 E701                       	dc.b	smpsNoAttack, $01
0007A616 E10E                       	smpsAlterNote       $0E
0007A618 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A61C E10B                       	smpsAlterNote       $0B
0007A61E 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0007A622 E108                       	smpsAlterNote       $08
0007A624 E701                       	dc.b	smpsNoAttack, $01
0007A626 E104                       	smpsAlterNote       $04
0007A628 E701                       	dc.b	smpsNoAttack, $01
0007A62A E108                       	smpsAlterNote       $08
0007A62C E701                       	dc.b	smpsNoAttack, $01
0007A62E E10B                       	smpsAlterNote       $0B
0007A630 E701                       	dc.b	smpsNoAttack, $01
0007A634 E0C0                       	smpsPan             panCenter, $00
0007A636 E601                       	smpsAlterVol        $01
0007A638 E108                       	smpsAlterNote       $08
0007A63A A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0007A646 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0007A64E E080                       	smpsPan             panLeft, $00
0007A650 07                         	dc.b	$07
0007A651 E6FF                       	smpsAlterVol        $FF
0007A653 E10D                       	smpsAlterNote       $0D
0007A655 B60D                       	dc.b	nF4, $0D
0007A657 E10A                       	smpsAlterNote       $0A
0007A659 E701                       	dc.b	smpsNoAttack, $01
0007A65B E106                       	smpsAlterNote       $06
0007A65D E701                       	dc.b	smpsNoAttack, $01
0007A65F E10A                       	smpsAlterNote       $0A
0007A661 E701                       	dc.b	smpsNoAttack, $01
0007A663 E110                       	smpsAlterNote       $10
0007A665 E701                       	dc.b	smpsNoAttack, $01
0007A667 E111                       	smpsAlterNote       $11
0007A669 E701                       	dc.b	smpsNoAttack, $01
0007A66B E10D                       	smpsAlterNote       $0D
0007A66D E701                       	dc.b	smpsNoAttack, $01
0007A66F E107                       	smpsAlterNote       $07
0007A671 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A675 E10A                       	smpsAlterNote       $0A
0007A677 E701                       	dc.b	smpsNoAttack, $01
0007A679 E110                       	smpsAlterNote       $10
0007A67B E701                       	dc.b	smpsNoAttack, $01
0007A67D E111                       	smpsAlterNote       $11
0007A67F 8001                       	dc.b	nRst, $01
0007A681 E10D                       	smpsAlterNote       $0D
0007A683 B80D                       	dc.b	nG4, $0D
0007A685 E10A                       	smpsAlterNote       $0A
0007A687 E701                       	dc.b	smpsNoAttack, $01
0007A689 E106                       	smpsAlterNote       $06
0007A68B E701                       	dc.b	smpsNoAttack, $01
0007A68D E10A                       	smpsAlterNote       $0A
0007A68F E701                       	dc.b	smpsNoAttack, $01
0007A691 E110                       	smpsAlterNote       $10
0007A693 E701                       	dc.b	smpsNoAttack, $01
0007A695 E111                       	smpsAlterNote       $11
0007A697 E701                       	dc.b	smpsNoAttack, $01
0007A699 E10D                       	smpsAlterNote       $0D
0007A69B E701                       	dc.b	smpsNoAttack, $01
0007A69D E107                       	smpsAlterNote       $07
0007A69F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A6A3 E10D                       	smpsAlterNote       $0D
0007A6A5 E701                       	dc.b	smpsNoAttack, $01
0007A6A7 E110                       	smpsAlterNote       $10
0007A6A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A6AD E10A                       	smpsAlterNote       $0A
0007A6AF E701                       	dc.b	smpsNoAttack, $01
0007A6B1 E106                       	smpsAlterNote       $06
0007A6B3 E701                       	dc.b	smpsNoAttack, $01
0007A6B5 E107                       	smpsAlterNote       $07
0007A6B7 E701                       	dc.b	smpsNoAttack, $01
0007A6B9 E10D                       	smpsAlterNote       $0D
0007A6BB E701                       	dc.b	smpsNoAttack, $01
0007A6BD E111                       	smpsAlterNote       $11
0007A6BF E701                       	dc.b	smpsNoAttack, $01
0007A6C1 E10D                       	smpsAlterNote       $0D
0007A6C3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007A6C7 E10F                       	smpsAlterNote       $0F
0007A6C9 BA0D                       	dc.b	nA4, $0D
0007A6CB E109                       	smpsAlterNote       $09
0007A6CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A6D1 E10C                       	smpsAlterNote       $0C
0007A6D3 E701                       	dc.b	smpsNoAttack, $01
0007A6D5 E112                       	smpsAlterNote       $12
0007A6D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A6DB E10C                       	smpsAlterNote       $0C
0007A6DD E701                       	dc.b	smpsNoAttack, $01
0007A6DF E109                       	smpsAlterNote       $09
0007A6E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A6E5 E10F                       	smpsAlterNote       $0F
0007A6E7 E701                       	dc.b	smpsNoAttack, $01
0007A6E9 E113                       	smpsAlterNote       $13
0007A6EB E701                       	dc.b	smpsNoAttack, $01
0007A6ED E112                       	smpsAlterNote       $12
0007A6EF E701                       	dc.b	smpsNoAttack, $01
0007A6F1 E10C                       	smpsAlterNote       $0C
0007A6F3 E701                       	dc.b	smpsNoAttack, $01
0007A6F5 E108                       	smpsAlterNote       $08
0007A6F7 E701                       	dc.b	smpsNoAttack, $01
0007A6F9 E10C                       	smpsAlterNote       $0C
0007A6FB E701                       	dc.b	smpsNoAttack, $01
0007A6FD E10F                       	smpsAlterNote       $0F
0007A6FF E701                       	dc.b	smpsNoAttack, $01
0007A701 E113                       	smpsAlterNote       $13
0007A703 E701                       	dc.b	smpsNoAttack, $01
0007A705 E10F                       	smpsAlterNote       $0F
0007A707 E701                       	dc.b	smpsNoAttack, $01
0007A709 E109                       	smpsAlterNote       $09
0007A70B E701                       	dc.b	smpsNoAttack, $01
0007A70D E108                       	smpsAlterNote       $08
0007A70F E701                       	dc.b	smpsNoAttack, $01
0007A711 E10C                       	smpsAlterNote       $0C
0007A713 E701                       	dc.b	smpsNoAttack, $01
0007A715 E112                       	smpsAlterNote       $12
0007A717 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A71B E10F                       	smpsAlterNote       $0F
0007A71D E701                       	dc.b	smpsNoAttack, $01
0007A71F E109                       	smpsAlterNote       $09
0007A721 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A725 E10F                       	smpsAlterNote       $0F
0007A727 E701                       	dc.b	smpsNoAttack, $01
0007A729 E112                       	smpsAlterNote       $12
0007A72B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A72F E10C                       	smpsAlterNote       $0C
0007A731 E701                       	dc.b	smpsNoAttack, $01
0007A733 E108                       	smpsAlterNote       $08
0007A735 E701                       	dc.b	smpsNoAttack, $01
0007A737 E109                       	smpsAlterNote       $09
0007A739 E701                       	dc.b	smpsNoAttack, $01
0007A73B E10C                       	smpsAlterNote       $0C
0007A73D B50A                       	dc.b	nE4, $0A
0007A73F E10D                       	smpsAlterNote       $0D
0007A741 B60E                       	dc.b	nF4, $0E
0007A743 E107                       	smpsAlterNote       $07
0007A745 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A749 E10D                       	smpsAlterNote       $0D
0007A74B E701                       	dc.b	smpsNoAttack, $01
0007A74D E110                       	smpsAlterNote       $10
0007A74F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A753 E10A                       	smpsAlterNote       $0A
0007A755 E701                       	dc.b	smpsNoAttack, $01
0007A757 E106                       	smpsAlterNote       $06
0007A759 E701                       	dc.b	smpsNoAttack, $01
0007A75B E107                       	smpsAlterNote       $07
0007A75D E701                       	dc.b	smpsNoAttack, $01
0007A75F E10D                       	smpsAlterNote       $0D
0007A761 E701                       	dc.b	smpsNoAttack, $01
0007A763 E111                       	smpsAlterNote       $11
0007A765 E701                       	dc.b	smpsNoAttack, $01
0007A767 E10D                       	smpsAlterNote       $0D
0007A769 B80D                       	dc.b	nG4, $0D
0007A76B E10A                       	smpsAlterNote       $0A
0007A76D E701                       	dc.b	smpsNoAttack, $01
0007A76F E107                       	smpsAlterNote       $07
0007A771 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A775 E10D                       	smpsAlterNote       $0D
0007A777 E701                       	dc.b	smpsNoAttack, $01
0007A779 E111                       	smpsAlterNote       $11
0007A77B E701                       	dc.b	smpsNoAttack, $01
0007A77D E110                       	smpsAlterNote       $10
0007A77F E701                       	dc.b	smpsNoAttack, $01
0007A781 E10A                       	smpsAlterNote       $0A
0007A783 E701                       	dc.b	smpsNoAttack, $01
0007A785 E106                       	smpsAlterNote       $06
0007A787 E701                       	dc.b	smpsNoAttack, $01
0007A789 E10A                       	smpsAlterNote       $0A
0007A78B E701                       	dc.b	smpsNoAttack, $01
0007A78D E10D                       	smpsAlterNote       $0D
0007A78F E701                       	dc.b	smpsNoAttack, $01
0007A791 E111                       	smpsAlterNote       $11
0007A793 E701                       	dc.b	smpsNoAttack, $01
0007A795 E10D                       	smpsAlterNote       $0D
0007A797 E701                       	dc.b	smpsNoAttack, $01
0007A799 E107                       	smpsAlterNote       $07
0007A79B E701                       	dc.b	smpsNoAttack, $01
0007A79D E106                       	smpsAlterNote       $06
0007A79F E701                       	dc.b	smpsNoAttack, $01
0007A7A1 E10A                       	smpsAlterNote       $0A
0007A7A3 E701                       	dc.b	smpsNoAttack, $01
0007A7A5 E110                       	smpsAlterNote       $10
0007A7A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A7AB E10D                       	smpsAlterNote       $0D
0007A7AD E701                       	dc.b	smpsNoAttack, $01
0007A7AF E10F                       	smpsAlterNote       $0F
0007A7B1 BA0D                       	dc.b	nA4, $0D
0007A7B3 E10C                       	smpsAlterNote       $0C
0007A7B5 E701                       	dc.b	smpsNoAttack, $01
0007A7B7 E108                       	smpsAlterNote       $08
0007A7B9 E701                       	dc.b	smpsNoAttack, $01
0007A7BB E109                       	smpsAlterNote       $09
0007A7BD E701                       	dc.b	smpsNoAttack, $01
0007A7BF E10F                       	smpsAlterNote       $0F
0007A7C1 E701                       	dc.b	smpsNoAttack, $01
0007A7C3 E113                       	smpsAlterNote       $13
0007A7C5 E701                       	dc.b	smpsNoAttack, $01
0007A7C7 E10F                       	smpsAlterNote       $0F
0007A7C9 E701                       	dc.b	smpsNoAttack, $01
0007A7CB E10C                       	smpsAlterNote       $0C
0007A7CD E701                       	dc.b	smpsNoAttack, $01
0007A7CF E108                       	smpsAlterNote       $08
0007A7D1 E701                       	dc.b	smpsNoAttack, $01
0007A7D3 E10C                       	smpsAlterNote       $0C
0007A7D5 E701                       	dc.b	smpsNoAttack, $01
0007A7D7 E112                       	smpsAlterNote       $12
0007A7D9 E701                       	dc.b	smpsNoAttack, $01
0007A7DB E113                       	smpsAlterNote       $13
0007A7DD E701                       	dc.b	smpsNoAttack, $01
0007A7DF E10F                       	smpsAlterNote       $0F
0007A7E1 E701                       	dc.b	smpsNoAttack, $01
0007A7E3 E109                       	smpsAlterNote       $09
0007A7E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A7E9 E10C                       	smpsAlterNote       $0C
0007A7EB E701                       	dc.b	smpsNoAttack, $01
0007A7ED E112                       	smpsAlterNote       $12
0007A7EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A7F3 E10C                       	smpsAlterNote       $0C
0007A7F5 E701                       	dc.b	smpsNoAttack, $01
0007A7F7 E109                       	smpsAlterNote       $09
0007A7F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A7FD E10F                       	smpsAlterNote       $0F
0007A7FF E701                       	dc.b	smpsNoAttack, $01
0007A801 E113                       	smpsAlterNote       $13
0007A803 E701                       	dc.b	smpsNoAttack, $01
0007A805 E112                       	smpsAlterNote       $12
0007A807 E701                       	dc.b	smpsNoAttack, $01
0007A809 E10C                       	smpsAlterNote       $0C
0007A80B E701                       	dc.b	smpsNoAttack, $01
0007A80D E109                       	smpsAlterNote       $09
0007A80F 8001                       	dc.b	nRst, $01
0007A811 E10D                       	smpsAlterNote       $0D
0007A813 B60A                       	dc.b	nF4, $0A
0007A815 E10C                       	smpsAlterNote       $0C
0007A817 B506 8001                  	dc.b	nE4, $06, nRst, $01
0007A81B E10B                       	smpsAlterNote       $0B
0007A81D B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0007A821 E10C                       	smpsAlterNote       $0C
0007A823 B503                       	dc.b	nE4, $03
0007A825 E10D                       	smpsAlterNote       $0D
0007A827 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0007A831 E10C                       	smpsAlterNote       $0C
0007A833 E701                       	dc.b	smpsNoAttack, $01
0007A835 E108                       	smpsAlterNote       $08
0007A837 E701                       	dc.b	smpsNoAttack, $01
0007A839 E10C                       	smpsAlterNote       $0C
0007A83B E701                       	dc.b	smpsNoAttack, $01
0007A83D E112                       	smpsAlterNote       $12
0007A83F E701                       	dc.b	smpsNoAttack, $01
0007A841 E113                       	smpsAlterNote       $13
0007A843 E701                       	dc.b	smpsNoAttack, $01
0007A845 E10F                       	smpsAlterNote       $0F
0007A847 E701                       	dc.b	smpsNoAttack, $01
0007A849 E109                       	smpsAlterNote       $09
0007A84B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A84F E10C                       	smpsAlterNote       $0C
0007A851 E701                       	dc.b	smpsNoAttack, $01
0007A853 E112                       	smpsAlterNote       $12
0007A855 E701                       	dc.b	smpsNoAttack, $01
0007A857 E113                       	smpsAlterNote       $13
0007A859 8001                       	dc.b	nRst, $01
0007A85B E10D                       	smpsAlterNote       $0D
0007A85D C20D                       	dc.b	nF5, $0D
0007A85F E10A                       	smpsAlterNote       $0A
0007A861 E701                       	dc.b	smpsNoAttack, $01
0007A863 E106                       	smpsAlterNote       $06
0007A865 E701                       	dc.b	smpsNoAttack, $01
0007A867 E10A                       	smpsAlterNote       $0A
0007A869 E701                       	dc.b	smpsNoAttack, $01
0007A86B E110                       	smpsAlterNote       $10
0007A86D E701                       	dc.b	smpsNoAttack, $01
0007A86F E111                       	smpsAlterNote       $11
0007A871 E701                       	dc.b	smpsNoAttack, $01
0007A873 E10D                       	smpsAlterNote       $0D
0007A875 E701                       	dc.b	smpsNoAttack, $01
0007A877 E107                       	smpsAlterNote       $07
0007A879 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A87D E10A                       	smpsAlterNote       $0A
0007A87F E701                       	dc.b	smpsNoAttack, $01
0007A881 E110                       	smpsAlterNote       $10
0007A883 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A887 E10A                       	smpsAlterNote       $0A
0007A889 E701                       	dc.b	smpsNoAttack, $01
0007A88B E107                       	smpsAlterNote       $07
0007A88D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A891 E10D                       	smpsAlterNote       $0D
0007A893 E701                       	dc.b	smpsNoAttack, $01
0007A895 E111                       	smpsAlterNote       $11
0007A897 E701                       	dc.b	smpsNoAttack, $01
0007A899 E110                       	smpsAlterNote       $10
0007A89B E701                       	dc.b	smpsNoAttack, $01
0007A89D E10A                       	smpsAlterNote       $0A
0007A89F E701                       	dc.b	smpsNoAttack, $01
0007A8A1 E106                       	smpsAlterNote       $06
0007A8A3 E701                       	dc.b	smpsNoAttack, $01
0007A8A5 E10A                       	smpsAlterNote       $0A
0007A8A7 E701                       	dc.b	smpsNoAttack, $01
0007A8A9 E10D                       	smpsAlterNote       $0D
0007A8AB E701                       	dc.b	smpsNoAttack, $01
0007A8AD E111                       	smpsAlterNote       $11
0007A8AF E701                       	dc.b	smpsNoAttack, $01
0007A8B1 E10D                       	smpsAlterNote       $0D
0007A8B3 E701                       	dc.b	smpsNoAttack, $01
0007A8B5 E107                       	smpsAlterNote       $07
0007A8B7 E701                       	dc.b	smpsNoAttack, $01
0007A8B9 E106                       	smpsAlterNote       $06
0007A8BB E701                       	dc.b	smpsNoAttack, $01
0007A8BD E10A                       	smpsAlterNote       $0A
0007A8BF E701                       	dc.b	smpsNoAttack, $01
0007A8C1 E110                       	smpsAlterNote       $10
0007A8C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A8C7 E10D                       	smpsAlterNote       $0D
0007A8C9 E701                       	dc.b	smpsNoAttack, $01
0007A8CB E107                       	smpsAlterNote       $07
0007A8CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A8D1 E10D                       	smpsAlterNote       $0D
0007A8D3 E701                       	dc.b	smpsNoAttack, $01
0007A8D5 E110                       	smpsAlterNote       $10
0007A8D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A8DB E10A                       	smpsAlterNote       $0A
0007A8DD E701                       	dc.b	smpsNoAttack, $01
0007A8DF E106                       	smpsAlterNote       $06
0007A8E1 E701                       	dc.b	smpsNoAttack, $01
0007A8E3 E107                       	smpsAlterNote       $07
0007A8E5 E701                       	dc.b	smpsNoAttack, $01
0007A8E7 E10D                       	smpsAlterNote       $0D
0007A8E9 E701                       	dc.b	smpsNoAttack, $01
0007A8EB E111                       	smpsAlterNote       $11
0007A8ED E701                       	dc.b	smpsNoAttack, $01
0007A8EF E10D                       	smpsAlterNote       $0D
0007A8F1 E701                       	dc.b	smpsNoAttack, $01
0007A8F3 E10A                       	smpsAlterNote       $0A
0007A8F5 E701                       	dc.b	smpsNoAttack, $01
0007A8F7 E107                       	smpsAlterNote       $07
0007A8F9 8001                       	dc.b	nRst, $01
0007A8FB E10D                       	smpsAlterNote       $0D
0007A8FD C206 8001                  	dc.b	nF5, $06, nRst, $01
0007A903 E601                       	smpsAlterVol        $01
0007A905 E110                       	smpsAlterNote       $10
0007A907 BB0D                       	dc.b	nBb4, $0D
0007A909 E10A                       	smpsAlterNote       $0A
0007A90B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A90F E110                       	smpsAlterNote       $10
0007A911 E701                       	dc.b	smpsNoAttack, $01
0007A913 E113                       	smpsAlterNote       $13
0007A915 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A919 E10D                       	smpsAlterNote       $0D
0007A91B E701                       	dc.b	smpsNoAttack, $01
0007A91D E109                       	smpsAlterNote       $09
0007A91F E701                       	dc.b	smpsNoAttack, $01
0007A921 E10A                       	smpsAlterNote       $0A
0007A923 E701                       	dc.b	smpsNoAttack, $01
0007A925 E110                       	smpsAlterNote       $10
0007A927 E701                       	dc.b	smpsNoAttack, $01
0007A929 E114                       	smpsAlterNote       $14
0007A92B E701                       	dc.b	smpsNoAttack, $01
0007A92D E110                       	smpsAlterNote       $10
0007A92F E701                       	dc.b	smpsNoAttack, $01
0007A931 E10D                       	smpsAlterNote       $0D
0007A933 E701                       	dc.b	smpsNoAttack, $01
0007A935 E109                       	smpsAlterNote       $09
0007A937 E701                       	dc.b	smpsNoAttack, $01
0007A939 E10A                       	smpsAlterNote       $0A
0007A93B 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0007A93F E107                       	smpsAlterNote       $07
0007A941 E701                       	dc.b	smpsNoAttack, $01
0007A943 E103                       	smpsAlterNote       $03
0007A945 E701                       	dc.b	smpsNoAttack, $01
0007A947 E107                       	smpsAlterNote       $07
0007A949 E701                       	dc.b	smpsNoAttack, $01
0007A94B E10D                       	smpsAlterNote       $0D
0007A94D E701                       	dc.b	smpsNoAttack, $01
0007A94F E10E                       	smpsAlterNote       $0E
0007A951 E701                       	dc.b	smpsNoAttack, $01
0007A953 E10A                       	smpsAlterNote       $0A
0007A955 E701                       	dc.b	smpsNoAttack, $01
0007A957 E104                       	smpsAlterNote       $04
0007A959 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A95D E107                       	smpsAlterNote       $07
0007A95F E701                       	dc.b	smpsNoAttack, $01
0007A961 E10D                       	smpsAlterNote       $0D
0007A963 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A967 E107                       	smpsAlterNote       $07
0007A969 E701                       	dc.b	smpsNoAttack, $01
0007A96B E104                       	smpsAlterNote       $04
0007A96D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A971 E10B                       	smpsAlterNote       $0B
0007A973 BF0D                       	dc.b	nD5, $0D
0007A975 E108                       	smpsAlterNote       $08
0007A977 E701                       	dc.b	smpsNoAttack, $01
0007A979 E105                       	smpsAlterNote       $05
0007A97B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A97F E10B                       	smpsAlterNote       $0B
0007A981 E701                       	dc.b	smpsNoAttack, $01
0007A983 E10F                       	smpsAlterNote       $0F
0007A985 E701                       	dc.b	smpsNoAttack, $01
0007A987 E10E                       	smpsAlterNote       $0E
0007A989 E701                       	dc.b	smpsNoAttack, $01
0007A98B E108                       	smpsAlterNote       $08
0007A98D E701                       	dc.b	smpsNoAttack, $01
0007A98F E104                       	smpsAlterNote       $04
0007A991 E701                       	dc.b	smpsNoAttack, $01
0007A993 E108                       	smpsAlterNote       $08
0007A995 E701                       	dc.b	smpsNoAttack, $01
0007A997 E10B                       	smpsAlterNote       $0B
0007A999 E701                       	dc.b	smpsNoAttack, $01
0007A99B E10F                       	smpsAlterNote       $0F
0007A99D E701                       	dc.b	smpsNoAttack, $01
0007A99F E10B                       	smpsAlterNote       $0B
0007A9A1 E701                       	dc.b	smpsNoAttack, $01
0007A9A3 E105                       	smpsAlterNote       $05
0007A9A5 E701                       	dc.b	smpsNoAttack, $01
0007A9A7 E104                       	smpsAlterNote       $04
0007A9A9 E701                       	dc.b	smpsNoAttack, $01
0007A9AB E105                       	smpsAlterNote       $05
0007A9AD 8001                       	dc.b	nRst, $01
0007A9AF E10C                       	smpsAlterNote       $0C
0007A9B1 C10C                       	dc.b	nE5, $0C
0007A9B3 E10D                       	smpsAlterNote       $0D
0007A9B5 C201                       	dc.b	nF5, $01
0007A9B7 E10E                       	smpsAlterNote       $0E
0007A9B9 C301 8001                  	dc.b	nFs5, $01, nRst, $01
0007A9BD E10D                       	smpsAlterNote       $0D
0007A9BF C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0007A9C3 E10A                       	smpsAlterNote       $0A
0007A9C5 E701                       	dc.b	smpsNoAttack, $01
0007A9C7 E106                       	smpsAlterNote       $06
0007A9C9 E701                       	dc.b	smpsNoAttack, $01
0007A9CB E10A                       	smpsAlterNote       $0A
0007A9CD E701                       	dc.b	smpsNoAttack, $01
0007A9CF E10D                       	smpsAlterNote       $0D
0007A9D1 E701                       	dc.b	smpsNoAttack, $01
0007A9D3 E111                       	smpsAlterNote       $11
0007A9D5 E701                       	dc.b	smpsNoAttack, $01
0007A9D7 E10D                       	smpsAlterNote       $0D
0007A9D9 E701                       	dc.b	smpsNoAttack, $01
0007A9DB E107                       	smpsAlterNote       $07
0007A9DD E701                       	dc.b	smpsNoAttack, $01
0007A9DF E106                       	smpsAlterNote       $06
0007A9E1 E701                       	dc.b	smpsNoAttack, $01
0007A9E3 E10A                       	smpsAlterNote       $0A
0007A9E5 E701                       	dc.b	smpsNoAttack, $01
0007A9E7 E110                       	smpsAlterNote       $10
0007A9E9 E701                       	dc.b	smpsNoAttack, $01
0007A9EB E111                       	smpsAlterNote       $11
0007A9ED 8001                       	dc.b	nRst, $01
0007A9EF E10D                       	smpsAlterNote       $0D
0007A9F1 C40D                       	dc.b	nG5, $0D
0007A9F3 E10A                       	smpsAlterNote       $0A
0007A9F5 E701                       	dc.b	smpsNoAttack, $01
0007A9F7 E106                       	smpsAlterNote       $06
0007A9F9 E701                       	dc.b	smpsNoAttack, $01
0007A9FB E10A                       	smpsAlterNote       $0A
0007A9FD E701                       	dc.b	smpsNoAttack, $01
0007A9FF E10D                       	smpsAlterNote       $0D
0007AA01 E701                       	dc.b	smpsNoAttack, $01
0007AA03 E10C                       	smpsAlterNote       $0C
0007AA05 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0007AA11 8001                       	dc.b	nRst, $01
0007AA13 E10D                       	smpsAlterNote       $0D
0007AA15 C20D                       	dc.b	nF5, $0D
0007AA17 E10A                       	smpsAlterNote       $0A
0007AA19 E701                       	dc.b	smpsNoAttack, $01
0007AA1B E106                       	smpsAlterNote       $06
0007AA1D E701                       	dc.b	smpsNoAttack, $01
0007AA1F E10A                       	smpsAlterNote       $0A
0007AA21 E701                       	dc.b	smpsNoAttack, $01
0007AA23 E110                       	smpsAlterNote       $10
0007AA25 E701                       	dc.b	smpsNoAttack, $01
0007AA27 E111                       	smpsAlterNote       $11
0007AA29 E701                       	dc.b	smpsNoAttack, $01
0007AA2B E10D                       	smpsAlterNote       $0D
0007AA2D E701                       	dc.b	smpsNoAttack, $01
0007AA2F E107                       	smpsAlterNote       $07
0007AA31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AA35 E10A                       	smpsAlterNote       $0A
0007AA37 E701                       	dc.b	smpsNoAttack, $01
0007AA39 E110                       	smpsAlterNote       $10
0007AA3B E701                       	dc.b	smpsNoAttack, $01
0007AA3D E111                       	smpsAlterNote       $11
0007AA3F 8001                       	dc.b	nRst, $01
0007AA41 E10F                       	smpsAlterNote       $0F
0007AA43 C60A                       	dc.b	nA5, $0A
0007AA45 E10D                       	smpsAlterNote       $0D
0007AA47 C406 8001                  	dc.b	nG5, $06, nRst, $01
0007AA4B E10C                       	smpsAlterNote       $0C
0007AA4D C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0007AA59 8001                       	dc.b	nRst, $01
0007AA5B E10D                       	smpsAlterNote       $0D
0007AA5D C20D                       	dc.b	nF5, $0D
0007AA5F E107                       	smpsAlterNote       $07
0007AA61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AA65 E10A                       	smpsAlterNote       $0A
0007AA67 E701                       	dc.b	smpsNoAttack, $01
0007AA69 E110                       	smpsAlterNote       $10
0007AA6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AA6F E10A                       	smpsAlterNote       $0A
0007AA71 E701                       	dc.b	smpsNoAttack, $01
0007AA73 E107                       	smpsAlterNote       $07
0007AA75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AA79 E10D                       	smpsAlterNote       $0D
0007AA7B E701                       	dc.b	smpsNoAttack, $01
0007AA7D E111                       	smpsAlterNote       $11
0007AA7F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007AA83 E10D                       	smpsAlterNote       $0D
0007AA85 C40D                       	dc.b	nG5, $0D
0007AA87 E107                       	smpsAlterNote       $07
0007AA89 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AA8D E10A                       	smpsAlterNote       $0A
0007AA8F E701                       	dc.b	smpsNoAttack, $01
0007AA91 E10D                       	smpsAlterNote       $0D
0007AA93 8001                       	dc.b	nRst, $01
0007AA95 E10C                       	smpsAlterNote       $0C
0007AA97 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0007AAA3 E10D                       	smpsAlterNote       $0D
0007AAA5 C20E                       	dc.b	nF5, $0E
0007AAA7 E107                       	smpsAlterNote       $07
0007AAA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AAAD E10D                       	smpsAlterNote       $0D
0007AAAF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007AAB5 E0C0                       	smpsPan             panCenter, $00
0007AAB7 E603                       	smpsAlterVol        $03
0007AAB9 E108                       	smpsAlterNote       $08
0007AABB B406                       	dc.b	nEb4, $06
0007AABD E10C                       	smpsAlterNote       $0C
0007AABF AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0007AAC3 E108                       	smpsAlterNote       $08
0007AAC5 B403                       	dc.b	nEb4, $03
0007AAC7 E109                       	smpsAlterNote       $09
0007AAC9 B803 8001                  	dc.b	nG4, $03, nRst, $01
0007AACD E10C                       	smpsAlterNote       $0C
0007AACF BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
0007AAD7 03                         	dc.b	$03
0007AAD8 E6FD                       	smpsAlterVol        $FD
0007AADA F6F1 F4                    	smpsJump            music84_Jump00
0007AADD                            
0007AADD                            ; PSG1 Data
0007AADD                            music84_PSG1:
0007AADD E1FD                       	smpsAlterNote       $FD
0007AADF EC04                       	smpsPSGAlterVol     $04
0007AAE1 9203                       	dc.b	nF1, $03
0007AAE3 E1FE                       	smpsAlterNote       $FE
0007AAE5 9603                       	dc.b	nA1, $03
0007AAE7 EC04                       	smpsPSGAlterVol     $04
0007AAE9 E701                       	dc.b	smpsNoAttack, $01
0007AAEB E1FF                       	smpsAlterNote       $FF
0007AAED ECFC                       	smpsPSGAlterVol     $FC
0007AAEF 9B03                       	dc.b	nD2, $03
0007AAF1 E1FD                       	smpsAlterNote       $FD
0007AAF3 9403                       	dc.b	nG1, $03
0007AAF5 EC04                       	smpsPSGAlterVol     $04
0007AAF7 E701                       	dc.b	smpsNoAttack, $01
0007AAF9 E1FE                       	smpsAlterNote       $FE
0007AAFB ECFC                       	smpsPSGAlterVol     $FC
0007AAFD 9703                       	dc.b	nBb1, $03
0007AAFF E1FF                       	smpsAlterNote       $FF
0007AB01 9B03                       	dc.b	nD2, $03
0007AB03 EC04                       	smpsPSGAlterVol     $04
0007AB05 E701                       	dc.b	smpsNoAttack, $01
0007AB07 E1FE                       	smpsAlterNote       $FE
0007AB09 ECFC                       	smpsPSGAlterVol     $FC
0007AB0B A002                       	dc.b	nG2, $02
0007AB0D EC04                       	smpsPSGAlterVol     $04
0007AB0F E701                       	dc.b	smpsNoAttack, $01
0007AB11 E1FF                       	smpsAlterNote       $FF
0007AB13 ECFC                       	smpsPSGAlterVol     $FC
0007AB15 A203                       	dc.b	nA2, $03
0007AB17 EC0B                       	smpsPSGAlterVol     $0B
0007AB19 800A                       	dc.b	nRst, $0A
0007AB1B E105                       	smpsAlterNote       $05
0007AB1D 01                         	dc.b	$01
0007AB1E E1FC                       	smpsAlterNote       $FC
0007AB20 01                         	dc.b	$01
0007AB21 E105                       	smpsAlterNote       $05
0007AB23 01                         	dc.b	$01
0007AB24 E1FD                       	smpsAlterNote       $FD
0007AB26 01                         	dc.b	$01
0007AB27 E105                       	smpsAlterNote       $05
0007AB29 01                         	dc.b	$01
0007AB2A E1FD                       	smpsAlterNote       $FD
0007AB2C 01                         	dc.b	$01
0007AB2D E1FA                       	smpsAlterNote       $FA
0007AB2F 01                         	dc.b	$01
0007AB30 E1FC                       	smpsAlterNote       $FC
0007AB32 01                         	dc.b	$01
0007AB33 E105                       	smpsAlterNote       $05
0007AB35 01                         	dc.b	$01
0007AB36 E108                       	smpsAlterNote       $08
0007AB38 0101                       	dc.b	$01, $01
0007AB3A E105                       	smpsAlterNote       $05
0007AB3C 01                         	dc.b	$01
0007AB3D E1FA                       	smpsAlterNote       $FA
0007AB3F 0101                       	dc.b	$01, $01
0007AB41 E1FD                       	smpsAlterNote       $FD
0007AB43 01                         	dc.b	$01
0007AB44 E105                       	smpsAlterNote       $05
0007AB46 01                         	dc.b	$01
0007AB47 E108                       	smpsAlterNote       $08
0007AB49 01                         	dc.b	$01
0007AB4A E105                       	smpsAlterNote       $05
0007AB4C 01                         	dc.b	$01
0007AB4D E1FC                       	smpsAlterNote       $FC
0007AB4F 01                         	dc.b	$01
0007AB50 E105                       	smpsAlterNote       $05
0007AB52 01                         	dc.b	$01
0007AB53 E1FD                       	smpsAlterNote       $FD
0007AB55 01                         	dc.b	$01
0007AB56                            
0007AB56                            music84_Jump07:
0007AB56 E105                       	smpsAlterNote       $05
0007AB58 8001                       	dc.b	nRst, $01
0007AB5A E1FD                       	smpsAlterNote       $FD
0007AB5C 01                         	dc.b	$01
0007AB5D E1FA                       	smpsAlterNote       $FA
0007AB5F 01                         	dc.b	$01
0007AB60 E1FC                       	smpsAlterNote       $FC
0007AB62 01                         	dc.b	$01
0007AB63 E1FD                       	smpsAlterNote       $FD
0007AB65 ECF5                       	smpsPSGAlterVol     $F5
0007AB67 9206                       	dc.b	nF1, $06
0007AB69 EC04                       	smpsPSGAlterVol     $04
0007AB6B E701                       	dc.b	smpsNoAttack, $01
0007AB6D EC07                       	smpsPSGAlterVol     $07
0007AB6F 8003                       	dc.b	nRst, $03
0007AB71 ECF5                       	smpsPSGAlterVol     $F5
0007AB73 9206                       	dc.b	nF1, $06
0007AB75 EC04                       	smpsPSGAlterVol     $04
0007AB77 E701                       	dc.b	smpsNoAttack, $01
0007AB79 EC07                       	smpsPSGAlterVol     $07
0007AB7B 8006                       	dc.b	nRst, $06
0007AB7D E100                       	smpsAlterNote       $00
0007AB7F 01                         	dc.b	$01
0007AB80 E104                       	smpsAlterNote       $04
0007AB82 01                         	dc.b	$01
0007AB83 E100                       	smpsAlterNote       $00
0007AB85 01                         	dc.b	$01
0007AB86 E1FB                       	smpsAlterNote       $FB
0007AB88 01                         	dc.b	$01
0007AB89 E1FD                       	smpsAlterNote       $FD
0007AB8B ECF5                       	smpsPSGAlterVol     $F5
0007AB8D 9406                       	dc.b	nG1, $06
0007AB8F EC04                       	smpsPSGAlterVol     $04
0007AB91 E701                       	dc.b	smpsNoAttack, $01
0007AB93 EC07                       	smpsPSGAlterVol     $07
0007AB95 8003                       	dc.b	nRst, $03
0007AB97 ECF5                       	smpsPSGAlterVol     $F5
0007AB99 9407                       	dc.b	nG1, $07
0007AB9B EC0B                       	smpsPSGAlterVol     $0B
0007AB9D 8006                       	dc.b	nRst, $06
0007AB9F E100                       	smpsAlterNote       $00
0007ABA1 01                         	dc.b	$01
0007ABA2 E103                       	smpsAlterNote       $03
0007ABA4 0101                       	dc.b	$01, $01
0007ABA6 E1FD                       	smpsAlterNote       $FD
0007ABA8 01                         	dc.b	$01
0007ABA9 ECF5                       	smpsPSGAlterVol     $F5
0007ABAB 9207                       	dc.b	nF1, $07
0007ABAD EC0B                       	smpsPSGAlterVol     $0B
0007ABAF 8004                       	dc.b	nRst, $04
0007ABB1 ECF5                       	smpsPSGAlterVol     $F5
0007ABB3 9206                       	dc.b	nF1, $06
0007ABB5 EC04                       	smpsPSGAlterVol     $04
0007ABB7 E701                       	dc.b	smpsNoAttack, $01
0007ABB9 EC07                       	smpsPSGAlterVol     $07
0007ABBB 8006                       	dc.b	nRst, $06
0007ABBD E103                       	smpsAlterNote       $03
0007ABBF 01                         	dc.b	$01
0007ABC0 E104                       	smpsAlterNote       $04
0007ABC2 01                         	dc.b	$01
0007ABC3 E100                       	smpsAlterNote       $00
0007ABC5 01                         	dc.b	$01
0007ABC6 E1FA                       	smpsAlterNote       $FA
0007ABC8 01                         	dc.b	$01
0007ABC9 E1FD                       	smpsAlterNote       $FD
0007ABCB ECF5                       	smpsPSGAlterVol     $F5
0007ABCD 9206                       	dc.b	nF1, $06
0007ABCF EC04                       	smpsPSGAlterVol     $04
0007ABD1 E701                       	dc.b	smpsNoAttack, $01
0007ABD3 EC07                       	smpsPSGAlterVol     $07
0007ABD5 8003                       	dc.b	nRst, $03
0007ABD7 ECF5                       	smpsPSGAlterVol     $F5
0007ABD9 9106                       	dc.b	nE1, $06
0007ABDB EC04                       	smpsPSGAlterVol     $04
0007ABDD E701                       	dc.b	smpsNoAttack, $01
0007ABDF EC07                       	smpsPSGAlterVol     $07
0007ABE1 8006                       	dc.b	nRst, $06
0007ABE3 E100                       	smpsAlterNote       $00
0007ABE5 01                         	dc.b	$01
0007ABE6 E104                       	smpsAlterNote       $04
0007ABE8 01                         	dc.b	$01
0007ABE9 E100                       	smpsAlterNote       $00
0007ABEB 01                         	dc.b	$01
0007ABEC E1FD                       	smpsAlterNote       $FD
0007ABEE 01                         	dc.b	$01
0007ABEF ECF5                       	smpsPSGAlterVol     $F5
0007ABF1 9206                       	dc.b	nF1, $06
0007ABF3 EC04                       	smpsPSGAlterVol     $04
0007ABF5 E701                       	dc.b	smpsNoAttack, $01
0007ABF7 EC07                       	smpsPSGAlterVol     $07
0007ABF9 8003                       	dc.b	nRst, $03
0007ABFB ECF5                       	smpsPSGAlterVol     $F5
0007ABFD 9207                       	dc.b	nF1, $07
0007ABFF EC0B                       	smpsPSGAlterVol     $0B
0007AC01 8007                       	dc.b	nRst, $07
0007AC03 E103                       	smpsAlterNote       $03
0007AC05 0101                       	dc.b	$01, $01
0007AC07 E1FD                       	smpsAlterNote       $FD
0007AC09 01                         	dc.b	$01
0007AC0A E1FB                       	smpsAlterNote       $FB
0007AC0C 01                         	dc.b	$01
0007AC0D E1FD                       	smpsAlterNote       $FD
0007AC0F ECF5                       	smpsPSGAlterVol     $F5
0007AC11 9406                       	dc.b	nG1, $06
0007AC13 EC0B                       	smpsPSGAlterVol     $0B
0007AC15 8004                       	dc.b	nRst, $04
0007AC17 ECF5                       	smpsPSGAlterVol     $F5
0007AC19 9406                       	dc.b	nG1, $06
0007AC1B EC04                       	smpsPSGAlterVol     $04
0007AC1D E701                       	dc.b	smpsNoAttack, $01
0007AC1F EC07                       	smpsPSGAlterVol     $07
0007AC21 8006                       	dc.b	nRst, $06
0007AC23 E100                       	smpsAlterNote       $00
0007AC25 01                         	dc.b	$01
0007AC26 E104                       	smpsAlterNote       $04
0007AC28 01                         	dc.b	$01
0007AC29 E100                       	smpsAlterNote       $00
0007AC2B 01                         	dc.b	$01
0007AC2C E1F9                       	smpsAlterNote       $F9
0007AC2E 01                         	dc.b	$01
0007AC2F E1FD                       	smpsAlterNote       $FD
0007AC31 ECF5                       	smpsPSGAlterVol     $F5
0007AC33 9206                       	dc.b	nF1, $06
0007AC35 EC04                       	smpsPSGAlterVol     $04
0007AC37 E701                       	dc.b	smpsNoAttack, $01
0007AC39 EC07                       	smpsPSGAlterVol     $07
0007AC3B 8003                       	dc.b	nRst, $03
0007AC3D ECF5                       	smpsPSGAlterVol     $F5
0007AC3F 9207                       	dc.b	nF1, $07
0007AC41 EC0B                       	smpsPSGAlterVol     $0B
0007AC43 8006                       	dc.b	nRst, $06
0007AC45 E100                       	smpsAlterNote       $00
0007AC47 01                         	dc.b	$01
0007AC48 E104                       	smpsAlterNote       $04
0007AC4A 01                         	dc.b	$01
0007AC4B E103                       	smpsAlterNote       $03
0007AC4D 01                         	dc.b	$01
0007AC4E E1FD                       	smpsAlterNote       $FD
0007AC50 01                         	dc.b	$01
0007AC51 ECF5                       	smpsPSGAlterVol     $F5
0007AC53 9207                       	dc.b	nF1, $07
0007AC55 EC0B                       	smpsPSGAlterVol     $0B
0007AC57 8004                       	dc.b	nRst, $04
0007AC59 ECF5                       	smpsPSGAlterVol     $F5
0007AC5B 9206                       	dc.b	nF1, $06
0007AC5D EC0B                       	smpsPSGAlterVol     $0B
0007AC5F 8007                       	dc.b	nRst, $07
0007AC61 E103                       	smpsAlterNote       $03
0007AC63 0101                       	dc.b	$01, $01
0007AC65 E100                       	smpsAlterNote       $00
0007AC67 01                         	dc.b	$01
0007AC68 E1FA                       	smpsAlterNote       $FA
0007AC6A 01                         	dc.b	$01
0007AC6B E1FD                       	smpsAlterNote       $FD
0007AC6D ECF5                       	smpsPSGAlterVol     $F5
0007AC6F 9206                       	dc.b	nF1, $06
0007AC71 EC04                       	smpsPSGAlterVol     $04
0007AC73 E701                       	dc.b	smpsNoAttack, $01
0007AC75 EC07                       	smpsPSGAlterVol     $07
0007AC77 8003                       	dc.b	nRst, $03
0007AC79 ECF5                       	smpsPSGAlterVol     $F5
0007AC7B 9206                       	dc.b	nF1, $06
0007AC7D EC04                       	smpsPSGAlterVol     $04
0007AC7F E701                       	dc.b	smpsNoAttack, $01
0007AC81 EC07                       	smpsPSGAlterVol     $07
0007AC83 8006                       	dc.b	nRst, $06
0007AC85 E100                       	smpsAlterNote       $00
0007AC87 01                         	dc.b	$01
0007AC88 E104                       	smpsAlterNote       $04
0007AC8A 01                         	dc.b	$01
0007AC8B E100                       	smpsAlterNote       $00
0007AC8D 01                         	dc.b	$01
0007AC8E E1FD                       	smpsAlterNote       $FD
0007AC90 01                         	dc.b	$01
0007AC91 ECF5                       	smpsPSGAlterVol     $F5
0007AC93 9206                       	dc.b	nF1, $06
0007AC95 EC04                       	smpsPSGAlterVol     $04
0007AC97 E701                       	dc.b	smpsNoAttack, $01
0007AC99 EC07                       	smpsPSGAlterVol     $07
0007AC9B 8003                       	dc.b	nRst, $03
0007AC9D ECF5                       	smpsPSGAlterVol     $F5
0007AC9F 9207                       	dc.b	nF1, $07
0007ACA1 EC0B                       	smpsPSGAlterVol     $0B
0007ACA3 8007                       	dc.b	nRst, $07
0007ACA5 E103                       	smpsAlterNote       $03
0007ACA7 0101                       	dc.b	$01, $01
0007ACA9 E1FD                       	smpsAlterNote       $FD
0007ACAB 01                         	dc.b	$01
0007ACAC E1FA                       	smpsAlterNote       $FA
0007ACAE 01                         	dc.b	$01
0007ACAF E1FD                       	smpsAlterNote       $FD
0007ACB1 ECF5                       	smpsPSGAlterVol     $F5
0007ACB3 9206                       	dc.b	nF1, $06
0007ACB5 EC0B                       	smpsPSGAlterVol     $0B
0007ACB7 8004                       	dc.b	nRst, $04
0007ACB9 ECF5                       	smpsPSGAlterVol     $F5
0007ACBB 9206                       	dc.b	nF1, $06
0007ACBD EC04                       	smpsPSGAlterVol     $04
0007ACBF E701                       	dc.b	smpsNoAttack, $01
0007ACC1 EC07                       	smpsPSGAlterVol     $07
0007ACC3 8006                       	dc.b	nRst, $06
0007ACC5 E103                       	smpsAlterNote       $03
0007ACC7 01                         	dc.b	$01
0007ACC8 E104                       	smpsAlterNote       $04
0007ACCA 01                         	dc.b	$01
0007ACCB E100                       	smpsAlterNote       $00
0007ACCD 01                         	dc.b	$01
0007ACCE E1FA                       	smpsAlterNote       $FA
0007ACD0 01                         	dc.b	$01
0007ACD1 E1FD                       	smpsAlterNote       $FD
0007ACD3 ECF5                       	smpsPSGAlterVol     $F5
0007ACD5 9206                       	dc.b	nF1, $06
0007ACD7 EC04                       	smpsPSGAlterVol     $04
0007ACD9 E701                       	dc.b	smpsNoAttack, $01
0007ACDB EC07                       	smpsPSGAlterVol     $07
0007ACDD 8003                       	dc.b	nRst, $03
0007ACDF ECF5                       	smpsPSGAlterVol     $F5
0007ACE1 9206                       	dc.b	nF1, $06
0007ACE3 EC04                       	smpsPSGAlterVol     $04
0007ACE5 E701                       	dc.b	smpsNoAttack, $01
0007ACE7 EC07                       	smpsPSGAlterVol     $07
0007ACE9 8006                       	dc.b	nRst, $06
0007ACEB E100                       	smpsAlterNote       $00
0007ACED 01                         	dc.b	$01
0007ACEE E104                       	smpsAlterNote       $04
0007ACF0 01                         	dc.b	$01
0007ACF1 E103                       	smpsAlterNote       $03
0007ACF3 01                         	dc.b	$01
0007ACF4 E1FD                       	smpsAlterNote       $FD
0007ACF6 01                         	dc.b	$01
0007ACF7 ECF5                       	smpsPSGAlterVol     $F5
0007ACF9 9107                       	dc.b	nE1, $07
0007ACFB EC0B                       	smpsPSGAlterVol     $0B
0007ACFD 8004                       	dc.b	nRst, $04
0007ACFF ECF5                       	smpsPSGAlterVol     $F5
0007AD01 9106                       	dc.b	nE1, $06
0007AD03 EC0B                       	smpsPSGAlterVol     $0B
0007AD05 8007                       	dc.b	nRst, $07
0007AD07 E103                       	smpsAlterNote       $03
0007AD09 0101                       	dc.b	$01, $01
0007AD0B E100                       	smpsAlterNote       $00
0007AD0D 01                         	dc.b	$01
0007AD0E E1FA                       	smpsAlterNote       $FA
0007AD10 01                         	dc.b	$01
0007AD11 E1FD                       	smpsAlterNote       $FD
0007AD13 ECF5                       	smpsPSGAlterVol     $F5
0007AD15 9106                       	dc.b	nE1, $06
0007AD17 EC04                       	smpsPSGAlterVol     $04
0007AD19 E701                       	dc.b	smpsNoAttack, $01
0007AD1B EC07                       	smpsPSGAlterVol     $07
0007AD1D 8003                       	dc.b	nRst, $03
0007AD1F ECF5                       	smpsPSGAlterVol     $F5
0007AD21 9106                       	dc.b	nE1, $06
0007AD23 EC04                       	smpsPSGAlterVol     $04
0007AD25 E701                       	dc.b	smpsNoAttack, $01
0007AD27 EC07                       	smpsPSGAlterVol     $07
0007AD29 8006                       	dc.b	nRst, $06
0007AD2B E100                       	smpsAlterNote       $00
0007AD2D 01                         	dc.b	$01
0007AD2E E104                       	smpsAlterNote       $04
0007AD30 01                         	dc.b	$01
0007AD31 E100                       	smpsAlterNote       $00
0007AD33 01                         	dc.b	$01
0007AD34 E1FA                       	smpsAlterNote       $FA
0007AD36 01                         	dc.b	$01
0007AD37 E1FD                       	smpsAlterNote       $FD
0007AD39 ECF5                       	smpsPSGAlterVol     $F5
0007AD3B 9106                       	dc.b	nE1, $06
0007AD3D EC04                       	smpsPSGAlterVol     $04
0007AD3F E701                       	dc.b	smpsNoAttack, $01
0007AD41 EC07                       	smpsPSGAlterVol     $07
0007AD43 8003                       	dc.b	nRst, $03
0007AD45 ECF5                       	smpsPSGAlterVol     $F5
0007AD47 9107 9106                  	dc.b	nE1, $07, nE1, $06
0007AD4B EC04                       	smpsPSGAlterVol     $04
0007AD4D E701                       	dc.b	smpsNoAttack, $01
0007AD4F ECFC                       	smpsPSGAlterVol     $FC
0007AD51 9103 9103                  	dc.b	nE1, $03, nE1, $03
0007AD55 EC04                       	smpsPSGAlterVol     $04
0007AD57 E701                       	dc.b	smpsNoAttack, $01
0007AD59 ECFC                       	smpsPSGAlterVol     $FC
0007AD5B 9106                       	dc.b	nE1, $06
0007AD5D EC04                       	smpsPSGAlterVol     $04
0007AD5F E701                       	dc.b	smpsNoAttack, $01
0007AD61 EC07                       	smpsPSGAlterVol     $07
0007AD63 8006                       	dc.b	nRst, $06
0007AD65 E100                       	smpsAlterNote       $00
0007AD67 01                         	dc.b	$01
0007AD68 E104                       	smpsAlterNote       $04
0007AD6A 01                         	dc.b	$01
0007AD6B E100                       	smpsAlterNote       $00
0007AD6D 01                         	dc.b	$01
0007AD6E E1FA                       	smpsAlterNote       $FA
0007AD70 01                         	dc.b	$01
0007AD71 E1F9                       	smpsAlterNote       $F9
0007AD73 01                         	dc.b	$01
0007AD74 E1FD                       	smpsAlterNote       $FD
0007AD76 01                         	dc.b	$01
0007AD77 E103                       	smpsAlterNote       $03
0007AD79 01                         	dc.b	$01
0007AD7A E104                       	smpsAlterNote       $04
0007AD7C 01                         	dc.b	$01
0007AD7D E100                       	smpsAlterNote       $00
0007AD7F 01                         	dc.b	$01
0007AD80 E1FA                       	smpsAlterNote       $FA
0007AD82 0101                       	dc.b	$01, $01
0007AD84 E1FD                       	smpsAlterNote       $FD
0007AD86 ECF5                       	smpsPSGAlterVol     $F5
0007AD88 9206                       	dc.b	nF1, $06
0007AD8A EC04                       	smpsPSGAlterVol     $04
0007AD8C E701                       	dc.b	smpsNoAttack, $01
0007AD8E EC07                       	smpsPSGAlterVol     $07
0007AD90 8003                       	dc.b	nRst, $03
0007AD92 ECF5                       	smpsPSGAlterVol     $F5
0007AD94 9206                       	dc.b	nF1, $06
0007AD96 EC04                       	smpsPSGAlterVol     $04
0007AD98 E701                       	dc.b	smpsNoAttack, $01
0007AD9A EC07                       	smpsPSGAlterVol     $07
0007AD9C 8006                       	dc.b	nRst, $06
0007AD9E E100                       	smpsAlterNote       $00
0007ADA0 01                         	dc.b	$01
0007ADA1 E104                       	smpsAlterNote       $04
0007ADA3 01                         	dc.b	$01
0007ADA4 E103                       	smpsAlterNote       $03
0007ADA6 01                         	dc.b	$01
0007ADA7 E1FD                       	smpsAlterNote       $FD
0007ADA9 01                         	dc.b	$01
0007ADAA ECF5                       	smpsPSGAlterVol     $F5
0007ADAC 9407                       	dc.b	nG1, $07
0007ADAE EC0B                       	smpsPSGAlterVol     $0B
0007ADB0 8004                       	dc.b	nRst, $04
0007ADB2 ECF5                       	smpsPSGAlterVol     $F5
0007ADB4 9406                       	dc.b	nG1, $06
0007ADB6 EC0B                       	smpsPSGAlterVol     $0B
0007ADB8 8007                       	dc.b	nRst, $07
0007ADBA E103                       	smpsAlterNote       $03
0007ADBC 0101                       	dc.b	$01, $01
0007ADBE E1FD                       	smpsAlterNote       $FD
0007ADC0 01                         	dc.b	$01
0007ADC1 E1F9                       	smpsAlterNote       $F9
0007ADC3 01                         	dc.b	$01
0007ADC4 E1FD                       	smpsAlterNote       $FD
0007ADC6 ECF5                       	smpsPSGAlterVol     $F5
0007ADC8 9206                       	dc.b	nF1, $06
0007ADCA EC04                       	smpsPSGAlterVol     $04
0007ADCC E701                       	dc.b	smpsNoAttack, $01
0007ADCE EC07                       	smpsPSGAlterVol     $07
0007ADD0 8003                       	dc.b	nRst, $03
0007ADD2 ECF5                       	smpsPSGAlterVol     $F5
0007ADD4 9206                       	dc.b	nF1, $06
0007ADD6 EC04                       	smpsPSGAlterVol     $04
0007ADD8 E701                       	dc.b	smpsNoAttack, $01
0007ADDA EC07                       	smpsPSGAlterVol     $07
0007ADDC 8006                       	dc.b	nRst, $06
0007ADDE E100                       	smpsAlterNote       $00
0007ADE0 01                         	dc.b	$01
0007ADE1 E104                       	smpsAlterNote       $04
0007ADE3 01                         	dc.b	$01
0007ADE4 E100                       	smpsAlterNote       $00
0007ADE6 01                         	dc.b	$01
0007ADE7 E1FA                       	smpsAlterNote       $FA
0007ADE9 01                         	dc.b	$01
0007ADEA E1FD                       	smpsAlterNote       $FD
0007ADEC ECF5                       	smpsPSGAlterVol     $F5
0007ADEE 9206                       	dc.b	nF1, $06
0007ADF0 EC04                       	smpsPSGAlterVol     $04
0007ADF2 E701                       	dc.b	smpsNoAttack, $01
0007ADF4 EC07                       	smpsPSGAlterVol     $07
0007ADF6 8003                       	dc.b	nRst, $03
0007ADF8 ECF5                       	smpsPSGAlterVol     $F5
0007ADFA 9107                       	dc.b	nE1, $07
0007ADFC EC0B                       	smpsPSGAlterVol     $0B
0007ADFE 8006                       	dc.b	nRst, $06
0007AE00 E100                       	smpsAlterNote       $00
0007AE02 01                         	dc.b	$01
0007AE03 E103                       	smpsAlterNote       $03
0007AE05 0101                       	dc.b	$01, $01
0007AE07 E1FD                       	smpsAlterNote       $FD
0007AE09 01                         	dc.b	$01
0007AE0A ECF5                       	smpsPSGAlterVol     $F5
0007AE0C 9207                       	dc.b	nF1, $07
0007AE0E EC0B                       	smpsPSGAlterVol     $0B
0007AE10 8004                       	dc.b	nRst, $04
0007AE12 ECF5                       	smpsPSGAlterVol     $F5
0007AE14 9206                       	dc.b	nF1, $06
0007AE16 EC04                       	smpsPSGAlterVol     $04
0007AE18 E701                       	dc.b	smpsNoAttack, $01
0007AE1A EC07                       	smpsPSGAlterVol     $07
0007AE1C 8006                       	dc.b	nRst, $06
0007AE1E E103                       	smpsAlterNote       $03
0007AE20 01                         	dc.b	$01
0007AE21 E104                       	smpsAlterNote       $04
0007AE23 01                         	dc.b	$01
0007AE24 E100                       	smpsAlterNote       $00
0007AE26 01                         	dc.b	$01
0007AE27 E1FB                       	smpsAlterNote       $FB
0007AE29 01                         	dc.b	$01
0007AE2A E1FD                       	smpsAlterNote       $FD
0007AE2C ECF5                       	smpsPSGAlterVol     $F5
0007AE2E 9406                       	dc.b	nG1, $06
0007AE30 EC04                       	smpsPSGAlterVol     $04
0007AE32 E701                       	dc.b	smpsNoAttack, $01
0007AE34 EC07                       	smpsPSGAlterVol     $07
0007AE36 8003                       	dc.b	nRst, $03
0007AE38 ECF5                       	smpsPSGAlterVol     $F5
0007AE3A 9406                       	dc.b	nG1, $06
0007AE3C EC04                       	smpsPSGAlterVol     $04
0007AE3E E701                       	dc.b	smpsNoAttack, $01
0007AE40 EC07                       	smpsPSGAlterVol     $07
0007AE42 8006                       	dc.b	nRst, $06
0007AE44 E100                       	smpsAlterNote       $00
0007AE46 01                         	dc.b	$01
0007AE47 E104                       	smpsAlterNote       $04
0007AE49 01                         	dc.b	$01
0007AE4A E100                       	smpsAlterNote       $00
0007AE4C 01                         	dc.b	$01
0007AE4D E1FD                       	smpsAlterNote       $FD
0007AE4F 01                         	dc.b	$01
0007AE50 ECF5                       	smpsPSGAlterVol     $F5
0007AE52 9206                       	dc.b	nF1, $06
0007AE54 EC04                       	smpsPSGAlterVol     $04
0007AE56 E701                       	dc.b	smpsNoAttack, $01
0007AE58 EC07                       	smpsPSGAlterVol     $07
0007AE5A 8003                       	dc.b	nRst, $03
0007AE5C ECF5                       	smpsPSGAlterVol     $F5
0007AE5E 9207                       	dc.b	nF1, $07
0007AE60 EC0B                       	smpsPSGAlterVol     $0B
0007AE62 8007                       	dc.b	nRst, $07
0007AE64 E103                       	smpsAlterNote       $03
0007AE66 0101                       	dc.b	$01, $01
0007AE68 E1FD                       	smpsAlterNote       $FD
0007AE6A 01                         	dc.b	$01
0007AE6B E1FA                       	smpsAlterNote       $FA
0007AE6D 01                         	dc.b	$01
0007AE6E E1FD                       	smpsAlterNote       $FD
0007AE70 ECF5                       	smpsPSGAlterVol     $F5
0007AE72 9206                       	dc.b	nF1, $06
0007AE74 EC0B                       	smpsPSGAlterVol     $0B
0007AE76 8004                       	dc.b	nRst, $04
0007AE78 ECF5                       	smpsPSGAlterVol     $F5
0007AE7A 9206                       	dc.b	nF1, $06
0007AE7C EC04                       	smpsPSGAlterVol     $04
0007AE7E E701                       	dc.b	smpsNoAttack, $01
0007AE80 EC07                       	smpsPSGAlterVol     $07
0007AE82 8006                       	dc.b	nRst, $06
0007AE84 E100                       	smpsAlterNote       $00
0007AE86 01                         	dc.b	$01
0007AE87 E104                       	smpsAlterNote       $04
0007AE89 01                         	dc.b	$01
0007AE8A E100                       	smpsAlterNote       $00
0007AE8C 01                         	dc.b	$01
0007AE8D E1FA                       	smpsAlterNote       $FA
0007AE8F 01                         	dc.b	$01
0007AE90 E1FD                       	smpsAlterNote       $FD
0007AE92 ECF5                       	smpsPSGAlterVol     $F5
0007AE94 9206                       	dc.b	nF1, $06
0007AE96 EC04                       	smpsPSGAlterVol     $04
0007AE98 E704                       	dc.b	smpsNoAttack, $04
0007AE9A ECFC                       	smpsPSGAlterVol     $FC
0007AE9C 9207                       	dc.b	nF1, $07
0007AE9E EC0B                       	smpsPSGAlterVol     $0B
0007AEA0 8006                       	dc.b	nRst, $06
0007AEA2 E100                       	smpsAlterNote       $00
0007AEA4 01                         	dc.b	$01
0007AEA5 E104                       	smpsAlterNote       $04
0007AEA7 01                         	dc.b	$01
0007AEA8 E103                       	smpsAlterNote       $03
0007AEAA 01                         	dc.b	$01
0007AEAB E1FD                       	smpsAlterNote       $FD
0007AEAD 01                         	dc.b	$01
0007AEAE ECF5                       	smpsPSGAlterVol     $F5
0007AEB0 9207                       	dc.b	nF1, $07
0007AEB2 EC0B                       	smpsPSGAlterVol     $0B
0007AEB4 8004                       	dc.b	nRst, $04
0007AEB6 ECF5                       	smpsPSGAlterVol     $F5
0007AEB8 9206                       	dc.b	nF1, $06
0007AEBA EC0B                       	smpsPSGAlterVol     $0B
0007AEBC 8007                       	dc.b	nRst, $07
0007AEBE E103                       	smpsAlterNote       $03
0007AEC0 0101                       	dc.b	$01, $01
0007AEC2 E100                       	smpsAlterNote       $00
0007AEC4 01                         	dc.b	$01
0007AEC5 E1FA                       	smpsAlterNote       $FA
0007AEC7 01                         	dc.b	$01
0007AEC8 E1FD                       	smpsAlterNote       $FD
0007AECA ECF5                       	smpsPSGAlterVol     $F5
0007AECC 9206                       	dc.b	nF1, $06
0007AECE EC04                       	smpsPSGAlterVol     $04
0007AED0 E704                       	dc.b	smpsNoAttack, $04
0007AED2 ECFC                       	smpsPSGAlterVol     $FC
0007AED4 9206                       	dc.b	nF1, $06
0007AED6 EC04                       	smpsPSGAlterVol     $04
0007AED8 E701                       	dc.b	smpsNoAttack, $01
0007AEDA EC07                       	smpsPSGAlterVol     $07
0007AEDC 8006                       	dc.b	nRst, $06
0007AEDE E100                       	smpsAlterNote       $00
0007AEE0 01                         	dc.b	$01
0007AEE1 E104                       	smpsAlterNote       $04
0007AEE3 01                         	dc.b	$01
0007AEE4 E100                       	smpsAlterNote       $00
0007AEE6 01                         	dc.b	$01
0007AEE7 E1FD                       	smpsAlterNote       $FD
0007AEE9 01                         	dc.b	$01
0007AEEA ECF5                       	smpsPSGAlterVol     $F5
0007AEEC 9206                       	dc.b	nF1, $06
0007AEEE EC04                       	smpsPSGAlterVol     $04
0007AEF0 E701                       	dc.b	smpsNoAttack, $01
0007AEF2 EC07                       	smpsPSGAlterVol     $07
0007AEF4 8003                       	dc.b	nRst, $03
0007AEF6 ECF5                       	smpsPSGAlterVol     $F5
0007AEF8 9207                       	dc.b	nF1, $07
0007AEFA EC0B                       	smpsPSGAlterVol     $0B
0007AEFC 8007                       	dc.b	nRst, $07
0007AEFE E103                       	smpsAlterNote       $03
0007AF00 0101                       	dc.b	$01, $01
0007AF02 E1FD                       	smpsAlterNote       $FD
0007AF04 01                         	dc.b	$01
0007AF05 E1FA                       	smpsAlterNote       $FA
0007AF07 01                         	dc.b	$01
0007AF08 E1FD                       	smpsAlterNote       $FD
0007AF0A ECF5                       	smpsPSGAlterVol     $F5
0007AF0C 9106                       	dc.b	nE1, $06
0007AF0E EC0B                       	smpsPSGAlterVol     $0B
0007AF10 8004                       	dc.b	nRst, $04
0007AF12 ECF5                       	smpsPSGAlterVol     $F5
0007AF14 9106                       	dc.b	nE1, $06
0007AF16 EC04                       	smpsPSGAlterVol     $04
0007AF18 E701                       	dc.b	smpsNoAttack, $01
0007AF1A EC07                       	smpsPSGAlterVol     $07
0007AF1C 8006                       	dc.b	nRst, $06
0007AF1E E100                       	smpsAlterNote       $00
0007AF20 01                         	dc.b	$01
0007AF21 E104                       	smpsAlterNote       $04
0007AF23 01                         	dc.b	$01
0007AF24 E100                       	smpsAlterNote       $00
0007AF26 01                         	dc.b	$01
0007AF27 E1FA                       	smpsAlterNote       $FA
0007AF29 01                         	dc.b	$01
0007AF2A E1FD                       	smpsAlterNote       $FD
0007AF2C ECF5                       	smpsPSGAlterVol     $F5
0007AF2E 9106                       	dc.b	nE1, $06
0007AF30 EC04                       	smpsPSGAlterVol     $04
0007AF32 E701                       	dc.b	smpsNoAttack, $01
0007AF34 EC07                       	smpsPSGAlterVol     $07
0007AF36 8003                       	dc.b	nRst, $03
0007AF38 ECF5                       	smpsPSGAlterVol     $F5
0007AF3A 9106                       	dc.b	nE1, $06
0007AF3C EC04                       	smpsPSGAlterVol     $04
0007AF3E E701                       	dc.b	smpsNoAttack, $01
0007AF40 EC07                       	smpsPSGAlterVol     $07
0007AF42 8006                       	dc.b	nRst, $06
0007AF44 E100                       	smpsAlterNote       $00
0007AF46 01                         	dc.b	$01
0007AF47 E104                       	smpsAlterNote       $04
0007AF49 01                         	dc.b	$01
0007AF4A E103                       	smpsAlterNote       $03
0007AF4C 01                         	dc.b	$01
0007AF4D E1FD                       	smpsAlterNote       $FD
0007AF4F 01                         	dc.b	$01
0007AF50 ECF5                       	smpsPSGAlterVol     $F5
0007AF52 9107                       	dc.b	nE1, $07
0007AF54 EC0B                       	smpsPSGAlterVol     $0B
0007AF56 8004                       	dc.b	nRst, $04
0007AF58 ECF5                       	smpsPSGAlterVol     $F5
0007AF5A 9106                       	dc.b	nE1, $06
0007AF5C EC0B                       	smpsPSGAlterVol     $0B
0007AF5E 8007                       	dc.b	nRst, $07
0007AF60 E103                       	smpsAlterNote       $03
0007AF62 0101                       	dc.b	$01, $01
0007AF64 E100                       	smpsAlterNote       $00
0007AF66 01                         	dc.b	$01
0007AF67 E1FA                       	smpsAlterNote       $FA
0007AF69 01                         	dc.b	$01
0007AF6A E1FD                       	smpsAlterNote       $FD
0007AF6C ECF5                       	smpsPSGAlterVol     $F5
0007AF6E 9106                       	dc.b	nE1, $06
0007AF70 EC04                       	smpsPSGAlterVol     $04
0007AF72 E701                       	dc.b	smpsNoAttack, $01
0007AF74 EC07                       	smpsPSGAlterVol     $07
0007AF76 8003                       	dc.b	nRst, $03
0007AF78 ECF5                       	smpsPSGAlterVol     $F5
0007AF7A 9106                       	dc.b	nE1, $06
0007AF7C EC04                       	smpsPSGAlterVol     $04
0007AF7E E701                       	dc.b	smpsNoAttack, $01
0007AF80 EC07                       	smpsPSGAlterVol     $07
0007AF82 8003                       	dc.b	nRst, $03
0007AF84 ECF5                       	smpsPSGAlterVol     $F5
0007AF86 9207                       	dc.b	nF1, $07
0007AF88 EC0B                       	smpsPSGAlterVol     $0B
0007AF8A 8006                       	dc.b	nRst, $06
0007AF8C E100                       	smpsAlterNote       $00
0007AF8E 01                         	dc.b	$01
0007AF8F E104                       	smpsAlterNote       $04
0007AF91 01                         	dc.b	$01
0007AF92 E103                       	smpsAlterNote       $03
0007AF94 01                         	dc.b	$01
0007AF95 E1FD                       	smpsAlterNote       $FD
0007AF97 01                         	dc.b	$01
0007AF98 E1F9                       	smpsAlterNote       $F9
0007AF9A 01                         	dc.b	$01
0007AF9B E1FD                       	smpsAlterNote       $FD
0007AF9D 01                         	dc.b	$01
0007AF9E E100                       	smpsAlterNote       $00
0007AFA0 01                         	dc.b	$01
0007AFA1 E104                       	smpsAlterNote       $04
0007AFA3 01                         	dc.b	$01
0007AFA4 E1FD                       	smpsAlterNote       $FD
0007AFA6 ECF5                       	smpsPSGAlterVol     $F5
0007AFA8 9203 9203                  	dc.b	nF1, $03, nF1, $03
0007AFAC EC04                       	smpsPSGAlterVol     $04
0007AFAE E701                       	dc.b	smpsNoAttack, $01
0007AFB0 EC07                       	smpsPSGAlterVol     $07
0007AFB2 8009                       	dc.b	nRst, $09
0007AFB4 E100                       	smpsAlterNote       $00
0007AFB6 01                         	dc.b	$01
0007AFB7 E104                       	smpsAlterNote       $04
0007AFB9 01                         	dc.b	$01
0007AFBA E103                       	smpsAlterNote       $03
0007AFBC 01                         	dc.b	$01
0007AFBD E1FD                       	smpsAlterNote       $FD
0007AFBF 01                         	dc.b	$01
0007AFC0 E1F9                       	smpsAlterNote       $F9
0007AFC2 01                         	dc.b	$01
0007AFC3 E1FD                       	smpsAlterNote       $FD
0007AFC5 01                         	dc.b	$01
0007AFC6 E100                       	smpsAlterNote       $00
0007AFC8 01                         	dc.b	$01
0007AFC9 E104                       	smpsAlterNote       $04
0007AFCB 01                         	dc.b	$01
0007AFCC E100                       	smpsAlterNote       $00
0007AFCE 01                         	dc.b	$01
0007AFCF E1FA                       	smpsAlterNote       $FA
0007AFD1 01                         	dc.b	$01
0007AFD2 E1F9                       	smpsAlterNote       $F9
0007AFD4 01                         	dc.b	$01
0007AFD5 E1FD                       	smpsAlterNote       $FD
0007AFD7 01                         	dc.b	$01
0007AFD8 E103                       	smpsAlterNote       $03
0007AFDA 0101                       	dc.b	$01, $01
0007AFDC E100                       	smpsAlterNote       $00
0007AFDE 01                         	dc.b	$01
0007AFDF E1FD                       	smpsAlterNote       $FD
0007AFE1 ECF5                       	smpsPSGAlterVol     $F5
0007AFE3 9202                       	dc.b	nF1, $02
0007AFE5 EC04                       	smpsPSGAlterVol     $04
0007AFE7 E701                       	dc.b	smpsNoAttack, $01
0007AFE9 ECFC                       	smpsPSGAlterVol     $FC
0007AFEB 9106                       	dc.b	nE1, $06
0007AFED EC04                       	smpsPSGAlterVol     $04
0007AFEF E701                       	dc.b	smpsNoAttack, $01
0007AFF1 EC07                       	smpsPSGAlterVol     $07
0007AFF3 8006                       	dc.b	nRst, $06
0007AFF5 E100                       	smpsAlterNote       $00
0007AFF7 01                         	dc.b	$01
0007AFF8 E104                       	smpsAlterNote       $04
0007AFFA 01                         	dc.b	$01
0007AFFB E100                       	smpsAlterNote       $00
0007AFFD 01                         	dc.b	$01
0007AFFE E1FD                       	smpsAlterNote       $FD
0007B000 01                         	dc.b	$01
0007B001 E1F9                       	smpsAlterNote       $F9
0007B003 01                         	dc.b	$01
0007B004 E1FD                       	smpsAlterNote       $FD
0007B006 01                         	dc.b	$01
0007B007 E103                       	smpsAlterNote       $03
0007B009 01                         	dc.b	$01
0007B00A E104                       	smpsAlterNote       $04
0007B00C 01                         	dc.b	$01
0007B00D E1FD                       	smpsAlterNote       $FD
0007B00F ECF5                       	smpsPSGAlterVol     $F5
0007B011 9102                       	dc.b	nE1, $02
0007B013 EC04                       	smpsPSGAlterVol     $04
0007B015 E701                       	dc.b	smpsNoAttack, $01
0007B017 ECFC                       	smpsPSGAlterVol     $FC
0007B019 920D                       	dc.b	nF1, $0D
0007B01B E100                       	smpsAlterNote       $00
0007B01D E701                       	dc.b	smpsNoAttack, $01
0007B01F E104                       	smpsAlterNote       $04
0007B021 E701                       	dc.b	smpsNoAttack, $01
0007B023 E100                       	smpsAlterNote       $00
0007B025 E701                       	dc.b	smpsNoAttack, $01
0007B027 E1FD                       	smpsAlterNote       $FD
0007B029 E701                       	dc.b	smpsNoAttack, $01
0007B02B E1F9                       	smpsAlterNote       $F9
0007B02D E701                       	dc.b	smpsNoAttack, $01
0007B02F E1FD                       	smpsAlterNote       $FD
0007B031 E701                       	dc.b	smpsNoAttack, $01
0007B033 E103                       	smpsAlterNote       $03
0007B035 E701                       	dc.b	smpsNoAttack, $01
0007B037 E104                       	smpsAlterNote       $04
0007B039 E701                       	dc.b	smpsNoAttack, $01
0007B03B E100                       	smpsAlterNote       $00
0007B03D E701                       	dc.b	smpsNoAttack, $01
0007B03F E1FA                       	smpsAlterNote       $FA
0007B041 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007B045 E1FD                       	smpsAlterNote       $FD
0007B047 E701                       	dc.b	smpsNoAttack, $01
0007B049 E103                       	smpsAlterNote       $03
0007B04B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007B04F E1FD                       	smpsAlterNote       $FD
0007B051 E701                       	dc.b	smpsNoAttack, $01
0007B053 E1F9                       	smpsAlterNote       $F9
0007B055 E701                       	dc.b	smpsNoAttack, $01
0007B057 E1FA                       	smpsAlterNote       $FA
0007B059 E701                       	dc.b	smpsNoAttack, $01
0007B05B E100                       	smpsAlterNote       $00
0007B05D EC04                       	smpsPSGAlterVol     $04
0007B05F E701                       	dc.b	smpsNoAttack, $01
0007B061 EC07                       	smpsPSGAlterVol     $07
0007B063 E104                       	smpsAlterNote       $04
0007B065 8001                       	dc.b	nRst, $01
0007B067 E100                       	smpsAlterNote       $00
0007B069 01                         	dc.b	$01
0007B06A E1FD                       	smpsAlterNote       $FD
0007B06C 01                         	dc.b	$01
0007B06D E1F9                       	smpsAlterNote       $F9
0007B06F 01                         	dc.b	$01
0007B070 E1FD                       	smpsAlterNote       $FD
0007B072 01                         	dc.b	$01
0007B073 E103                       	smpsAlterNote       $03
0007B075 01                         	dc.b	$01
0007B076 E104                       	smpsAlterNote       $04
0007B078 01                         	dc.b	$01
0007B079 E1FD                       	smpsAlterNote       $FD
0007B07B ECF5                       	smpsPSGAlterVol     $F5
0007B07D 9106                       	dc.b	nE1, $06
0007B07F EC04                       	smpsPSGAlterVol     $04
0007B081 E701                       	dc.b	smpsNoAttack, $01
0007B083 EC07                       	smpsPSGAlterVol     $07
0007B085 8003                       	dc.b	nRst, $03
0007B087 ECF5                       	smpsPSGAlterVol     $F5
0007B089 9106                       	dc.b	nE1, $06
0007B08B EC04                       	smpsPSGAlterVol     $04
0007B08D E701                       	dc.b	smpsNoAttack, $01
0007B08F EC07                       	smpsPSGAlterVol     $07
0007B091 8006                       	dc.b	nRst, $06
0007B093 E100                       	smpsAlterNote       $00
0007B095 01                         	dc.b	$01
0007B096 E104                       	smpsAlterNote       $04
0007B098 01                         	dc.b	$01
0007B099 E100                       	smpsAlterNote       $00
0007B09B 01                         	dc.b	$01
0007B09C E1FA                       	smpsAlterNote       $FA
0007B09E 01                         	dc.b	$01
0007B09F E1FD                       	smpsAlterNote       $FD
0007B0A1 ECF5                       	smpsPSGAlterVol     $F5
0007B0A3 9206                       	dc.b	nF1, $06
0007B0A5 EC04                       	smpsPSGAlterVol     $04
0007B0A7 E701                       	dc.b	smpsNoAttack, $01
0007B0A9 EC07                       	smpsPSGAlterVol     $07
0007B0AB 8003                       	dc.b	nRst, $03
0007B0AD ECF5                       	smpsPSGAlterVol     $F5
0007B0AF 9207                       	dc.b	nF1, $07
0007B0B1 EC0B                       	smpsPSGAlterVol     $0B
0007B0B3 8006                       	dc.b	nRst, $06
0007B0B5 E100                       	smpsAlterNote       $00
0007B0B7 01                         	dc.b	$01
0007B0B8 E103                       	smpsAlterNote       $03
0007B0BA 0101                       	dc.b	$01, $01
0007B0BC E1FD                       	smpsAlterNote       $FD
0007B0BE 01                         	dc.b	$01
0007B0BF ECF5                       	smpsPSGAlterVol     $F5
0007B0C1 9107                       	dc.b	nE1, $07
0007B0C3 EC0B                       	smpsPSGAlterVol     $0B
0007B0C5 8004                       	dc.b	nRst, $04
0007B0C7 ECF5                       	smpsPSGAlterVol     $F5
0007B0C9 9106                       	dc.b	nE1, $06
0007B0CB EC04                       	smpsPSGAlterVol     $04
0007B0CD E701                       	dc.b	smpsNoAttack, $01
0007B0CF EC07                       	smpsPSGAlterVol     $07
0007B0D1 8006                       	dc.b	nRst, $06
0007B0D3 E103                       	smpsAlterNote       $03
0007B0D5 01                         	dc.b	$01
0007B0D6 E104                       	smpsAlterNote       $04
0007B0D8 01                         	dc.b	$01
0007B0D9 E100                       	smpsAlterNote       $00
0007B0DB 01                         	dc.b	$01
0007B0DC E1FA                       	smpsAlterNote       $FA
0007B0DE 01                         	dc.b	$01
0007B0DF E1FD                       	smpsAlterNote       $FD
0007B0E1 ECF5                       	smpsPSGAlterVol     $F5
0007B0E3 9106                       	dc.b	nE1, $06
0007B0E5 EC04                       	smpsPSGAlterVol     $04
0007B0E7 E701                       	dc.b	smpsNoAttack, $01
0007B0E9 EC07                       	smpsPSGAlterVol     $07
0007B0EB 8003                       	dc.b	nRst, $03
0007B0ED ECF5                       	smpsPSGAlterVol     $F5
0007B0EF 9106                       	dc.b	nE1, $06
0007B0F1 EC04                       	smpsPSGAlterVol     $04
0007B0F3 E701                       	dc.b	smpsNoAttack, $01
0007B0F5 EC07                       	smpsPSGAlterVol     $07
0007B0F7 8003                       	dc.b	nRst, $03
0007B0F9 ECF5                       	smpsPSGAlterVol     $F5
0007B0FB 9207                       	dc.b	nF1, $07
0007B0FD EC0B                       	smpsPSGAlterVol     $0B
0007B0FF 8006                       	dc.b	nRst, $06
0007B101 E100                       	smpsAlterNote       $00
0007B103 01                         	dc.b	$01
0007B104 E103                       	smpsAlterNote       $03
0007B106 0101                       	dc.b	$01, $01
0007B108 E1FD                       	smpsAlterNote       $FD
0007B10A 01                         	dc.b	$01
0007B10B E1F9                       	smpsAlterNote       $F9
0007B10D 01                         	dc.b	$01
0007B10E E1FA                       	smpsAlterNote       $FA
0007B110 01                         	dc.b	$01
0007B111 E100                       	smpsAlterNote       $00
0007B113 01                         	dc.b	$01
0007B114 E104                       	smpsAlterNote       $04
0007B116 01                         	dc.b	$01
0007B117 E1FD                       	smpsAlterNote       $FD
0007B119 ECF5                       	smpsPSGAlterVol     $F5
0007B11B 9203 9203                  	dc.b	nF1, $03, nF1, $03
0007B11F EC04                       	smpsPSGAlterVol     $04
0007B121 E701                       	dc.b	smpsNoAttack, $01
0007B123 EC07                       	smpsPSGAlterVol     $07
0007B125 8009                       	dc.b	nRst, $09
0007B127 E100                       	smpsAlterNote       $00
0007B129 01                         	dc.b	$01
0007B12A E103                       	smpsAlterNote       $03
0007B12C 0101                       	dc.b	$01, $01
0007B12E E1FD                       	smpsAlterNote       $FD
0007B130 01                         	dc.b	$01
0007B131 E1F9                       	smpsAlterNote       $F9
0007B133 01                         	dc.b	$01
0007B134 E1FA                       	smpsAlterNote       $FA
0007B136 01                         	dc.b	$01
0007B137 E100                       	smpsAlterNote       $00
0007B139 01                         	dc.b	$01
0007B13A E104                       	smpsAlterNote       $04
0007B13C 01                         	dc.b	$01
0007B13D E100                       	smpsAlterNote       $00
0007B13F 01                         	dc.b	$01
0007B140 E1FD                       	smpsAlterNote       $FD
0007B142 01                         	dc.b	$01
0007B143 E1F9                       	smpsAlterNote       $F9
0007B145 01                         	dc.b	$01
0007B146 E1FD                       	smpsAlterNote       $FD
0007B148 01                         	dc.b	$01
0007B149 E103                       	smpsAlterNote       $03
0007B14B 01                         	dc.b	$01
0007B14C E104                       	smpsAlterNote       $04
0007B14E 01                         	dc.b	$01
0007B14F E100                       	smpsAlterNote       $00
0007B151 01                         	dc.b	$01
0007B152 E1FD                       	smpsAlterNote       $FD
0007B154 ECF5                       	smpsPSGAlterVol     $F5
0007B156 9203 9106                  	dc.b	nF1, $03, nE1, $06
0007B15A EC04                       	smpsPSGAlterVol     $04
0007B15C E701                       	dc.b	smpsNoAttack, $01
0007B15E EC07                       	smpsPSGAlterVol     $07
0007B160 8006                       	dc.b	nRst, $06
0007B162 E100                       	smpsAlterNote       $00
0007B164 01                         	dc.b	$01
0007B165 E104                       	smpsAlterNote       $04
0007B167 01                         	dc.b	$01
0007B168 E103                       	smpsAlterNote       $03
0007B16A 01                         	dc.b	$01
0007B16B E1FD                       	smpsAlterNote       $FD
0007B16D 01                         	dc.b	$01
0007B16E E1F9                       	smpsAlterNote       $F9
0007B170 01                         	dc.b	$01
0007B171 E1FD                       	smpsAlterNote       $FD
0007B173 01                         	dc.b	$01
0007B174 E100                       	smpsAlterNote       $00
0007B176 01                         	dc.b	$01
0007B177 E104                       	smpsAlterNote       $04
0007B179 01                         	dc.b	$01
0007B17A E1FD                       	smpsAlterNote       $FD
0007B17C ECF5                       	smpsPSGAlterVol     $F5
0007B17E 9103 920D                  	dc.b	nE1, $03, nF1, $0D
0007B182 E100                       	smpsAlterNote       $00
0007B184 E701                       	dc.b	smpsNoAttack, $01
0007B186 E104                       	smpsAlterNote       $04
0007B188 E701                       	dc.b	smpsNoAttack, $01
0007B18A E100                       	smpsAlterNote       $00
0007B18C E701                       	dc.b	smpsNoAttack, $01
0007B18E E1FD                       	smpsAlterNote       $FD
0007B190 E701                       	dc.b	smpsNoAttack, $01
0007B192 E1F9                       	smpsAlterNote       $F9
0007B194 E701                       	dc.b	smpsNoAttack, $01
0007B196 E1FD                       	smpsAlterNote       $FD
0007B198 E701                       	dc.b	smpsNoAttack, $01
0007B19A E103                       	smpsAlterNote       $03
0007B19C E701                       	dc.b	smpsNoAttack, $01
0007B19E E104                       	smpsAlterNote       $04
0007B1A0 E701                       	dc.b	smpsNoAttack, $01
0007B1A2 E100                       	smpsAlterNote       $00
0007B1A4 E701                       	dc.b	smpsNoAttack, $01
0007B1A6 E1FA                       	smpsAlterNote       $FA
0007B1A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007B1AC E1FD                       	smpsAlterNote       $FD
0007B1AE E701                       	dc.b	smpsNoAttack, $01
0007B1B0 E103                       	smpsAlterNote       $03
0007B1B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007B1B6 E100                       	smpsAlterNote       $00
0007B1B8 E701                       	dc.b	smpsNoAttack, $01
0007B1BA E1FA                       	smpsAlterNote       $FA
0007B1BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007B1C0 E100                       	smpsAlterNote       $00
0007B1C2 EC04                       	smpsPSGAlterVol     $04
0007B1C4 E701                       	dc.b	smpsNoAttack, $01
0007B1C6 EC07                       	smpsPSGAlterVol     $07
0007B1C8 E104                       	smpsAlterNote       $04
0007B1CA 8001                       	dc.b	nRst, $01
0007B1CC E103                       	smpsAlterNote       $03
0007B1CE 01                         	dc.b	$01
0007B1CF E1FD                       	smpsAlterNote       $FD
0007B1D1 01                         	dc.b	$01
0007B1D2 E1F9                       	smpsAlterNote       $F9
0007B1D4 01                         	dc.b	$01
0007B1D5 E1FD                       	smpsAlterNote       $FD
0007B1D7 01                         	dc.b	$01
0007B1D8 E100                       	smpsAlterNote       $00
0007B1DA 01                         	dc.b	$01
0007B1DB E104                       	smpsAlterNote       $04
0007B1DD 01                         	dc.b	$01
0007B1DE E1FD                       	smpsAlterNote       $FD
0007B1E0 ECF5                       	smpsPSGAlterVol     $F5
0007B1E2 9106                       	dc.b	nE1, $06
0007B1E4 EC04                       	smpsPSGAlterVol     $04
0007B1E6 E701                       	dc.b	smpsNoAttack, $01
0007B1E8 EC07                       	smpsPSGAlterVol     $07
0007B1EA 8003                       	dc.b	nRst, $03
0007B1EC ECF5                       	smpsPSGAlterVol     $F5
0007B1EE 9106                       	dc.b	nE1, $06
0007B1F0 EC04                       	smpsPSGAlterVol     $04
0007B1F2 E701                       	dc.b	smpsNoAttack, $01
0007B1F4 EC07                       	smpsPSGAlterVol     $07
0007B1F6 8006                       	dc.b	nRst, $06
0007B1F8 E100                       	smpsAlterNote       $00
0007B1FA 01                         	dc.b	$01
0007B1FB E104                       	smpsAlterNote       $04
0007B1FD 01                         	dc.b	$01
0007B1FE E100                       	smpsAlterNote       $00
0007B200 01                         	dc.b	$01
0007B201 E1FD                       	smpsAlterNote       $FD
0007B203 01                         	dc.b	$01
0007B204 ECF5                       	smpsPSGAlterVol     $F5
0007B206 9206                       	dc.b	nF1, $06
0007B208 EC04                       	smpsPSGAlterVol     $04
0007B20A E701                       	dc.b	smpsNoAttack, $01
0007B20C EC07                       	smpsPSGAlterVol     $07
0007B20E 8003                       	dc.b	nRst, $03
0007B210 ECF5                       	smpsPSGAlterVol     $F5
0007B212 9207                       	dc.b	nF1, $07
0007B214 EC0B                       	smpsPSGAlterVol     $0B
0007B216 8007                       	dc.b	nRst, $07
0007B218 E103                       	smpsAlterNote       $03
0007B21A 0101                       	dc.b	$01, $01
0007B21C E1FD                       	smpsAlterNote       $FD
0007B21E 01                         	dc.b	$01
0007B21F E1FA                       	smpsAlterNote       $FA
0007B221 01                         	dc.b	$01
0007B222 E1FD                       	smpsAlterNote       $FD
0007B224 ECF5                       	smpsPSGAlterVol     $F5
0007B226 9106                       	dc.b	nE1, $06
0007B228 EC0B                       	smpsPSGAlterVol     $0B
0007B22A 8004                       	dc.b	nRst, $04
0007B22C ECF5                       	smpsPSGAlterVol     $F5
0007B22E 9106                       	dc.b	nE1, $06
0007B230 EC04                       	smpsPSGAlterVol     $04
0007B232 E701                       	dc.b	smpsNoAttack, $01
0007B234 EC07                       	smpsPSGAlterVol     $07
0007B236 8006                       	dc.b	nRst, $06
0007B238 E100                       	smpsAlterNote       $00
0007B23A 01                         	dc.b	$01
0007B23B E104                       	smpsAlterNote       $04
0007B23D 01                         	dc.b	$01
0007B23E E100                       	smpsAlterNote       $00
0007B240 01                         	dc.b	$01
0007B241 E1FA                       	smpsAlterNote       $FA
0007B243 01                         	dc.b	$01
0007B244 E1FD                       	smpsAlterNote       $FD
0007B246 ECF5                       	smpsPSGAlterVol     $F5
0007B248 9206                       	dc.b	nF1, $06
0007B24A EC04                       	smpsPSGAlterVol     $04
0007B24C E701                       	dc.b	smpsNoAttack, $01
0007B24E EC07                       	smpsPSGAlterVol     $07
0007B250 8003                       	dc.b	nRst, $03
0007B252 ECF5                       	smpsPSGAlterVol     $F5
0007B254 9206                       	dc.b	nF1, $06
0007B256 EC04                       	smpsPSGAlterVol     $04
0007B258 E701                       	dc.b	smpsNoAttack, $01
0007B25A EC07                       	smpsPSGAlterVol     $07
0007B25C 8006                       	dc.b	nRst, $06
0007B25E E100                       	smpsAlterNote       $00
0007B260 01                         	dc.b	$01
0007B261 E104                       	smpsAlterNote       $04
0007B263 01                         	dc.b	$01
0007B264 E103                       	smpsAlterNote       $03
0007B266 01                         	dc.b	$01
0007B267 E1FD                       	smpsAlterNote       $FD
0007B269 01                         	dc.b	$01
0007B26A ECF5                       	smpsPSGAlterVol     $F5
0007B26C 9107                       	dc.b	nE1, $07
0007B26E EC0B                       	smpsPSGAlterVol     $0B
0007B270 8004                       	dc.b	nRst, $04
0007B272 ECF5                       	smpsPSGAlterVol     $F5
0007B274 9106                       	dc.b	nE1, $06
0007B276 EC0B                       	smpsPSGAlterVol     $0B
0007B278 8007                       	dc.b	nRst, $07
0007B27A E103                       	smpsAlterNote       $03
0007B27C 0101                       	dc.b	$01, $01
0007B27E E100                       	smpsAlterNote       $00
0007B280 01                         	dc.b	$01
0007B281 E1FA                       	smpsAlterNote       $FA
0007B283 01                         	dc.b	$01
0007B284 E1FD                       	smpsAlterNote       $FD
0007B286 ECF5                       	smpsPSGAlterVol     $F5
0007B288 9206                       	dc.b	nF1, $06
0007B28A EC04                       	smpsPSGAlterVol     $04
0007B28C E701                       	dc.b	smpsNoAttack, $01
0007B28E EC07                       	smpsPSGAlterVol     $07
0007B290 8003                       	dc.b	nRst, $03
0007B292 ECF5                       	smpsPSGAlterVol     $F5
0007B294 9206                       	dc.b	nF1, $06
0007B296 EC04                       	smpsPSGAlterVol     $04
0007B298 E701                       	dc.b	smpsNoAttack, $01
0007B29A EC07                       	smpsPSGAlterVol     $07
0007B29C 8006                       	dc.b	nRst, $06
0007B29E E100                       	smpsAlterNote       $00
0007B2A0 01                         	dc.b	$01
0007B2A1 E104                       	smpsAlterNote       $04
0007B2A3 01                         	dc.b	$01
0007B2A4 E100                       	smpsAlterNote       $00
0007B2A6 01                         	dc.b	$01
0007B2A7 E1FD                       	smpsAlterNote       $FD
0007B2A9 01                         	dc.b	$01
0007B2AA ECF5                       	smpsPSGAlterVol     $F5
0007B2AC 9106                       	dc.b	nE1, $06
0007B2AE EC04                       	smpsPSGAlterVol     $04
0007B2B0 E701                       	dc.b	smpsNoAttack, $01
0007B2B2 EC07                       	smpsPSGAlterVol     $07
0007B2B4 8003                       	dc.b	nRst, $03
0007B2B6 ECF5                       	smpsPSGAlterVol     $F5
0007B2B8 9107 9106                  	dc.b	nE1, $07, nE1, $06
0007B2BC EC04                       	smpsPSGAlterVol     $04
0007B2BE E701                       	dc.b	smpsNoAttack, $01
0007B2C0 ECFC                       	smpsPSGAlterVol     $FC
0007B2C2 9103                       	dc.b	nE1, $03
0007B2C4 EC04                       	smpsPSGAlterVol     $04
0007B2C6 E701                       	dc.b	smpsNoAttack, $01
0007B2C8 ECFC                       	smpsPSGAlterVol     $FC
0007B2CA 9102                       	dc.b	nE1, $02
0007B2CC EC04                       	smpsPSGAlterVol     $04
0007B2CE E701                       	dc.b	smpsNoAttack, $01
0007B2D0 ECFC                       	smpsPSGAlterVol     $FC
0007B2D2 9103                       	dc.b	nE1, $03
0007B2D4 EC0B                       	smpsPSGAlterVol     $0B
0007B2D6 800A                       	dc.b	nRst, $0A
0007B2D8 E100                       	smpsAlterNote       $00
0007B2DA 01                         	dc.b	$01
0007B2DB E104                       	smpsAlterNote       $04
0007B2DD 01                         	dc.b	$01
0007B2DE E100                       	smpsAlterNote       $00
0007B2E0 01                         	dc.b	$01
0007B2E1 E1FA                       	smpsAlterNote       $FA
0007B2E3 01                         	dc.b	$01
0007B2E4 E1F9                       	smpsAlterNote       $F9
0007B2E6 01                         	dc.b	$01
0007B2E7 E1FD                       	smpsAlterNote       $FD
0007B2E9 01                         	dc.b	$01
0007B2EA E103                       	smpsAlterNote       $03
0007B2EC 0101                       	dc.b	$01, $01
0007B2EE E100                       	smpsAlterNote       $00
0007B2F0 01                         	dc.b	$01
0007B2F1 E1FA                       	smpsAlterNote       $FA
0007B2F3 0101                       	dc.b	$01, $01
0007B2F5 E1FD                       	smpsAlterNote       $FD
0007B2F7 ECF5                       	smpsPSGAlterVol     $F5
0007B2F9 9206                       	dc.b	nF1, $06
0007B2FB EC04                       	smpsPSGAlterVol     $04
0007B2FD E704                       	dc.b	smpsNoAttack, $04
0007B2FF ECFC                       	smpsPSGAlterVol     $FC
0007B301 9206                       	dc.b	nF1, $06
0007B303 EC04                       	smpsPSGAlterVol     $04
0007B305 E701                       	dc.b	smpsNoAttack, $01
0007B307 EC07                       	smpsPSGAlterVol     $07
0007B309 8006                       	dc.b	nRst, $06
0007B30B E100                       	smpsAlterNote       $00
0007B30D 01                         	dc.b	$01
0007B30E E104                       	smpsAlterNote       $04
0007B310 01                         	dc.b	$01
0007B311 E103                       	smpsAlterNote       $03
0007B313 01                         	dc.b	$01
0007B314 E1FD                       	smpsAlterNote       $FD
0007B316 01                         	dc.b	$01
0007B317 ECF5                       	smpsPSGAlterVol     $F5
0007B319 9407                       	dc.b	nG1, $07
0007B31B EC0B                       	smpsPSGAlterVol     $0B
0007B31D 8004                       	dc.b	nRst, $04
0007B31F ECF5                       	smpsPSGAlterVol     $F5
0007B321 9406                       	dc.b	nG1, $06
0007B323 EC0B                       	smpsPSGAlterVol     $0B
0007B325 8007                       	dc.b	nRst, $07
0007B327 E103                       	smpsAlterNote       $03
0007B329 0101                       	dc.b	$01, $01
0007B32B E1FD                       	smpsAlterNote       $FD
0007B32D 01                         	dc.b	$01
0007B32E E1F9                       	smpsAlterNote       $F9
0007B330 01                         	dc.b	$01
0007B331 E1FD                       	smpsAlterNote       $FD
0007B333 ECF5                       	smpsPSGAlterVol     $F5
0007B335 9206                       	dc.b	nF1, $06
0007B337 EC04                       	smpsPSGAlterVol     $04
0007B339 E701                       	dc.b	smpsNoAttack, $01
0007B33B EC07                       	smpsPSGAlterVol     $07
0007B33D 8003                       	dc.b	nRst, $03
0007B33F ECF5                       	smpsPSGAlterVol     $F5
0007B341 9206                       	dc.b	nF1, $06
0007B343 EC04                       	smpsPSGAlterVol     $04
0007B345 E701                       	dc.b	smpsNoAttack, $01
0007B347 EC07                       	smpsPSGAlterVol     $07
0007B349 8006                       	dc.b	nRst, $06
0007B34B E100                       	smpsAlterNote       $00
0007B34D 01                         	dc.b	$01
0007B34E E104                       	smpsAlterNote       $04
0007B350 01                         	dc.b	$01
0007B351 E100                       	smpsAlterNote       $00
0007B353 01                         	dc.b	$01
0007B354 E1FA                       	smpsAlterNote       $FA
0007B356 01                         	dc.b	$01
0007B357 E1FD                       	smpsAlterNote       $FD
0007B359 ECF5                       	smpsPSGAlterVol     $F5
0007B35B 9206                       	dc.b	nF1, $06
0007B35D EC04                       	smpsPSGAlterVol     $04
0007B35F E701                       	dc.b	smpsNoAttack, $01
0007B361 EC07                       	smpsPSGAlterVol     $07
0007B363 8003                       	dc.b	nRst, $03
0007B365 ECF5                       	smpsPSGAlterVol     $F5
0007B367 9107                       	dc.b	nE1, $07
0007B369 EC0B                       	smpsPSGAlterVol     $0B
0007B36B 8006                       	dc.b	nRst, $06
0007B36D E100                       	smpsAlterNote       $00
0007B36F 01                         	dc.b	$01
0007B370 E103                       	smpsAlterNote       $03
0007B372 0101                       	dc.b	$01, $01
0007B374 E1FD                       	smpsAlterNote       $FD
0007B376 01                         	dc.b	$01
0007B377 ECF5                       	smpsPSGAlterVol     $F5
0007B379 9207                       	dc.b	nF1, $07
0007B37B EC0B                       	smpsPSGAlterVol     $0B
0007B37D 8004                       	dc.b	nRst, $04
0007B37F ECF5                       	smpsPSGAlterVol     $F5
0007B381 9206                       	dc.b	nF1, $06
0007B383 EC04                       	smpsPSGAlterVol     $04
0007B385 E701                       	dc.b	smpsNoAttack, $01
0007B387 EC07                       	smpsPSGAlterVol     $07
0007B389 8006                       	dc.b	nRst, $06
0007B38B E103                       	smpsAlterNote       $03
0007B38D 01                         	dc.b	$01
0007B38E E104                       	smpsAlterNote       $04
0007B390 01                         	dc.b	$01
0007B391 E100                       	smpsAlterNote       $00
0007B393 01                         	dc.b	$01
0007B394 E1FB                       	smpsAlterNote       $FB
0007B396 01                         	dc.b	$01
0007B397 E1FD                       	smpsAlterNote       $FD
0007B399 ECF5                       	smpsPSGAlterVol     $F5
0007B39B 9406                       	dc.b	nG1, $06
0007B39D EC04                       	smpsPSGAlterVol     $04
0007B39F E701                       	dc.b	smpsNoAttack, $01
0007B3A1 EC07                       	smpsPSGAlterVol     $07
0007B3A3 8003                       	dc.b	nRst, $03
0007B3A5 ECF5                       	smpsPSGAlterVol     $F5
0007B3A7 9406                       	dc.b	nG1, $06
0007B3A9 EC04                       	smpsPSGAlterVol     $04
0007B3AB E701                       	dc.b	smpsNoAttack, $01
0007B3AD EC07                       	smpsPSGAlterVol     $07
0007B3AF 8006                       	dc.b	nRst, $06
0007B3B1 E100                       	smpsAlterNote       $00
0007B3B3 01                         	dc.b	$01
0007B3B4 E104                       	smpsAlterNote       $04
0007B3B6 01                         	dc.b	$01
0007B3B7 E100                       	smpsAlterNote       $00
0007B3B9 01                         	dc.b	$01
0007B3BA E1FD                       	smpsAlterNote       $FD
0007B3BC 01                         	dc.b	$01
0007B3BD ECF5                       	smpsPSGAlterVol     $F5
0007B3BF 9206                       	dc.b	nF1, $06
0007B3C1 EC04                       	smpsPSGAlterVol     $04
0007B3C3 E701                       	dc.b	smpsNoAttack, $01
0007B3C5 EC07                       	smpsPSGAlterVol     $07
0007B3C7 8003                       	dc.b	nRst, $03
0007B3C9 ECF5                       	smpsPSGAlterVol     $F5
0007B3CB 9207                       	dc.b	nF1, $07
0007B3CD EC0B                       	smpsPSGAlterVol     $0B
0007B3CF 8007                       	dc.b	nRst, $07
0007B3D1 E103                       	smpsAlterNote       $03
0007B3D3 0101                       	dc.b	$01, $01
0007B3D5 E1FD                       	smpsAlterNote       $FD
0007B3D7 01                         	dc.b	$01
0007B3D8 E1FA                       	smpsAlterNote       $FA
0007B3DA 01                         	dc.b	$01
0007B3DB E1FD                       	smpsAlterNote       $FD
0007B3DD ECF5                       	smpsPSGAlterVol     $F5
0007B3DF 9206                       	dc.b	nF1, $06
0007B3E1 EC0B                       	smpsPSGAlterVol     $0B
0007B3E3 8004                       	dc.b	nRst, $04
0007B3E5 ECF5                       	smpsPSGAlterVol     $F5
0007B3E7 9206                       	dc.b	nF1, $06
0007B3E9 EC04                       	smpsPSGAlterVol     $04
0007B3EB E701                       	dc.b	smpsNoAttack, $01
0007B3ED EC07                       	smpsPSGAlterVol     $07
0007B3EF 8006                       	dc.b	nRst, $06
0007B3F1 E100                       	smpsAlterNote       $00
0007B3F3 01                         	dc.b	$01
0007B3F4 E104                       	smpsAlterNote       $04
0007B3F6 01                         	dc.b	$01
0007B3F7 E100                       	smpsAlterNote       $00
0007B3F9 01                         	dc.b	$01
0007B3FA E1FA                       	smpsAlterNote       $FA
0007B3FC 01                         	dc.b	$01
0007B3FD E1FD                       	smpsAlterNote       $FD
0007B3FF ECF5                       	smpsPSGAlterVol     $F5
0007B401 9206                       	dc.b	nF1, $06
0007B403 EC04                       	smpsPSGAlterVol     $04
0007B405 E701                       	dc.b	smpsNoAttack, $01
0007B407 EC07                       	smpsPSGAlterVol     $07
0007B409 8003                       	dc.b	nRst, $03
0007B40B ECF5                       	smpsPSGAlterVol     $F5
0007B40D 9207                       	dc.b	nF1, $07
0007B40F EC0B                       	smpsPSGAlterVol     $0B
0007B411 8006                       	dc.b	nRst, $06
0007B413 E100                       	smpsAlterNote       $00
0007B415 01                         	dc.b	$01
0007B416 E103                       	smpsAlterNote       $03
0007B418 0101                       	dc.b	$01, $01
0007B41A E1FD                       	smpsAlterNote       $FD
0007B41C 01                         	dc.b	$01
0007B41D ECF5                       	smpsPSGAlterVol     $F5
0007B41F 9207                       	dc.b	nF1, $07
0007B421 EC0B                       	smpsPSGAlterVol     $0B
0007B423 8004                       	dc.b	nRst, $04
0007B425 ECF5                       	smpsPSGAlterVol     $F5
0007B427 9206                       	dc.b	nF1, $06
0007B429 EC0B                       	smpsPSGAlterVol     $0B
0007B42B 8007                       	dc.b	nRst, $07
0007B42D E103                       	smpsAlterNote       $03
0007B42F 0101                       	dc.b	$01, $01
0007B431 E100                       	smpsAlterNote       $00
0007B433 01                         	dc.b	$01
0007B434 E1FA                       	smpsAlterNote       $FA
0007B436 01                         	dc.b	$01
0007B437 E1FD                       	smpsAlterNote       $FD
0007B439 ECF5                       	smpsPSGAlterVol     $F5
0007B43B 9206                       	dc.b	nF1, $06
0007B43D EC04                       	smpsPSGAlterVol     $04
0007B43F E701                       	dc.b	smpsNoAttack, $01
0007B441 EC07                       	smpsPSGAlterVol     $07
0007B443 8003                       	dc.b	nRst, $03
0007B445 ECF5                       	smpsPSGAlterVol     $F5
0007B447 9206                       	dc.b	nF1, $06
0007B449 EC04                       	smpsPSGAlterVol     $04
0007B44B E701                       	dc.b	smpsNoAttack, $01
0007B44D EC07                       	smpsPSGAlterVol     $07
0007B44F 8006                       	dc.b	nRst, $06
0007B451 E100                       	smpsAlterNote       $00
0007B453 01                         	dc.b	$01
0007B454 E104                       	smpsAlterNote       $04
0007B456 01                         	dc.b	$01
0007B457 E100                       	smpsAlterNote       $00
0007B459 01                         	dc.b	$01
0007B45A E1FD                       	smpsAlterNote       $FD
0007B45C 01                         	dc.b	$01
0007B45D ECF5                       	smpsPSGAlterVol     $F5
0007B45F 9206                       	dc.b	nF1, $06
0007B461 EC04                       	smpsPSGAlterVol     $04
0007B463 E701                       	dc.b	smpsNoAttack, $01
0007B465 EC07                       	smpsPSGAlterVol     $07
0007B467 8003                       	dc.b	nRst, $03
0007B469 ECF5                       	smpsPSGAlterVol     $F5
0007B46B 9207                       	dc.b	nF1, $07
0007B46D EC0B                       	smpsPSGAlterVol     $0B
0007B46F 8007                       	dc.b	nRst, $07
0007B471 E104                       	smpsAlterNote       $04
0007B473 0101                       	dc.b	$01, $01
0007B475 E1FB                       	smpsAlterNote       $FB
0007B477 01                         	dc.b	$01
0007B478 E1F6                       	smpsAlterNote       $F6
0007B47A 0101                       	dc.b	$01, $01
0007B47C E1FF                       	smpsAlterNote       $FF
0007B47E 01                         	dc.b	$01
0007B47F E105                       	smpsAlterNote       $05
0007B481 01                         	dc.b	$01
0007B482 E104                       	smpsAlterNote       $04
0007B484 01                         	dc.b	$01
0007B485 E1FB                       	smpsAlterNote       $FB
0007B487 01                         	dc.b	$01
0007B488 E1F5                       	smpsAlterNote       $F5
0007B48A 01                         	dc.b	$01
0007B48B E1FC                       	smpsAlterNote       $FC
0007B48D ECF5                       	smpsPSGAlterVol     $F5
0007B48F 8B0E                       	dc.b	nBb0, $0E
0007B491 E102                       	smpsAlterNote       $02
0007B493 EC0B                       	smpsPSGAlterVol     $0B
0007B495 8001                       	dc.b	nRst, $01
0007B497 E101                       	smpsAlterNote       $01
0007B499 01                         	dc.b	$01
0007B49A E1FC                       	smpsAlterNote       $FC
0007B49C 01                         	dc.b	$01
0007B49D E1F9                       	smpsAlterNote       $F9
0007B49F 0101                       	dc.b	$01, $01
0007B4A1 E1FF                       	smpsAlterNote       $FF
0007B4A3 01                         	dc.b	$01
0007B4A4 E102                       	smpsAlterNote       $02
0007B4A6 01                         	dc.b	$01
0007B4A7 E1FF                       	smpsAlterNote       $FF
0007B4A9 01                         	dc.b	$01
0007B4AA E1FC                       	smpsAlterNote       $FC
0007B4AC 01                         	dc.b	$01
0007B4AD E1F8                       	smpsAlterNote       $F8
0007B4AF 01                         	dc.b	$01
0007B4B0 E1FC                       	smpsAlterNote       $FC
0007B4B2 01                         	dc.b	$01
0007B4B3 E101                       	smpsAlterNote       $01
0007B4B5 01                         	dc.b	$01
0007B4B6 E102                       	smpsAlterNote       $02
0007B4B8 01                         	dc.b	$01
0007B4B9 E1FF                       	smpsAlterNote       $FF
0007B4BB 01                         	dc.b	$01
0007B4BC E1FB                       	smpsAlterNote       $FB
0007B4BE ECF5                       	smpsPSGAlterVol     $F5
0007B4C0 8D0D                       	dc.b	nC1, $0D
0007B4C2 E101                       	smpsAlterNote       $01
0007B4C4 EC0B                       	smpsPSGAlterVol     $0B
0007B4C6 8001                       	dc.b	nRst, $01
0007B4C8 E102                       	smpsAlterNote       $02
0007B4CA 01                         	dc.b	$01
0007B4CB E1FF                       	smpsAlterNote       $FF
0007B4CD 01                         	dc.b	$01
0007B4CE E1F9                       	smpsAlterNote       $F9
0007B4D0 0101                       	dc.b	$01, $01
0007B4D2 E1FC                       	smpsAlterNote       $FC
0007B4D4 01                         	dc.b	$01
0007B4D5 E101                       	smpsAlterNote       $01
0007B4D7 0101                       	dc.b	$01, $01
0007B4D9 E1FC                       	smpsAlterNote       $FC
0007B4DB 01                         	dc.b	$01
0007B4DC E1F9                       	smpsAlterNote       $F9
0007B4DE 0101                       	dc.b	$01, $01
0007B4E0 E1FF                       	smpsAlterNote       $FF
0007B4E2 01                         	dc.b	$01
0007B4E3 E102                       	smpsAlterNote       $02
0007B4E5 01                         	dc.b	$01
0007B4E6 E101                       	smpsAlterNote       $01
0007B4E8 01                         	dc.b	$01
0007B4E9 E1FC                       	smpsAlterNote       $FC
0007B4EB ECF5                       	smpsPSGAlterVol     $F5
0007B4ED 8F0D                       	dc.b	nD1, $0D
0007B4EF E1FF                       	smpsAlterNote       $FF
0007B4F1 EC04                       	smpsPSGAlterVol     $04
0007B4F3 E701                       	dc.b	smpsNoAttack, $01
0007B4F5 EC07                       	smpsPSGAlterVol     $07
0007B4F7 E103                       	smpsAlterNote       $03
0007B4F9 8001                       	dc.b	nRst, $01
0007B4FB E102                       	smpsAlterNote       $02
0007B4FD 01                         	dc.b	$01
0007B4FE E1FD                       	smpsAlterNote       $FD
0007B500 01                         	dc.b	$01
0007B501 E1F9                       	smpsAlterNote       $F9
0007B503 01                         	dc.b	$01
0007B504 E1FD                       	smpsAlterNote       $FD
0007B506 01                         	dc.b	$01
0007B507 E100                       	smpsAlterNote       $00
0007B509 01                         	dc.b	$01
0007B50A E103                       	smpsAlterNote       $03
0007B50C 01                         	dc.b	$01
0007B50D E100                       	smpsAlterNote       $00
0007B50F 01                         	dc.b	$01
0007B510 E1FA                       	smpsAlterNote       $FA
0007B512 01                         	dc.b	$01
0007B513 E1F9                       	smpsAlterNote       $F9
0007B515 01                         	dc.b	$01
0007B516 E1FD                       	smpsAlterNote       $FD
0007B518 01                         	dc.b	$01
0007B519 E102                       	smpsAlterNote       $02
0007B51B 0101                       	dc.b	$01, $01
0007B51D E100                       	smpsAlterNote       $00
0007B51F 01                         	dc.b	$01
0007B520 E1FD                       	smpsAlterNote       $FD
0007B522 ECF5                       	smpsPSGAlterVol     $F5
0007B524 910D                       	dc.b	nE1, $0D
0007B526 E103                       	smpsAlterNote       $03
0007B528 EC0B                       	smpsPSGAlterVol     $0B
0007B52A 8001 01                    	dc.b	nRst, $01, $01
0007B52D E100                       	smpsAlterNote       $00
0007B52F 01                         	dc.b	$01
0007B530 E1FA                       	smpsAlterNote       $FA
0007B532 0101                       	dc.b	$01, $01
0007B534 E100                       	smpsAlterNote       $00
0007B536 01                         	dc.b	$01
0007B537 E103                       	smpsAlterNote       $03
0007B539 01                         	dc.b	$01
0007B53A E1FD                       	smpsAlterNote       $FD
0007B53C ECF5                       	smpsPSGAlterVol     $F5
0007B53E 9206                       	dc.b	nF1, $06
0007B540 EC04                       	smpsPSGAlterVol     $04
0007B542 E701                       	dc.b	smpsNoAttack, $01
0007B544 EC07                       	smpsPSGAlterVol     $07
0007B546 8003                       	dc.b	nRst, $03
0007B548 ECF5                       	smpsPSGAlterVol     $F5
0007B54A 9207                       	dc.b	nF1, $07
0007B54C EC0B                       	smpsPSGAlterVol     $0B
0007B54E 8006                       	dc.b	nRst, $06
0007B550 E100                       	smpsAlterNote       $00
0007B552 01                         	dc.b	$01
0007B553 E103                       	smpsAlterNote       $03
0007B555 0101                       	dc.b	$01, $01
0007B557 E1FD                       	smpsAlterNote       $FD
0007B559 01                         	dc.b	$01
0007B55A ECF5                       	smpsPSGAlterVol     $F5
0007B55C 9407                       	dc.b	nG1, $07
0007B55E EC0B                       	smpsPSGAlterVol     $0B
0007B560 8004                       	dc.b	nRst, $04
0007B562 ECF5                       	smpsPSGAlterVol     $F5
0007B564 9406                       	dc.b	nG1, $06
0007B566 EC04                       	smpsPSGAlterVol     $04
0007B568 E701                       	dc.b	smpsNoAttack, $01
0007B56A EC07                       	smpsPSGAlterVol     $07
0007B56C 8006                       	dc.b	nRst, $06
0007B56E E103                       	smpsAlterNote       $03
0007B570 01                         	dc.b	$01
0007B571 E104                       	smpsAlterNote       $04
0007B573 01                         	dc.b	$01
0007B574 E100                       	smpsAlterNote       $00
0007B576 01                         	dc.b	$01
0007B577 E1F9                       	smpsAlterNote       $F9
0007B579 01                         	dc.b	$01
0007B57A E1FD                       	smpsAlterNote       $FD
0007B57C ECF5                       	smpsPSGAlterVol     $F5
0007B57E 9206                       	dc.b	nF1, $06
0007B580 EC04                       	smpsPSGAlterVol     $04
0007B582 E701                       	dc.b	smpsNoAttack, $01
0007B584 EC07                       	smpsPSGAlterVol     $07
0007B586 8003                       	dc.b	nRst, $03
0007B588 ECF5                       	smpsPSGAlterVol     $F5
0007B58A 9206                       	dc.b	nF1, $06
0007B58C EC04                       	smpsPSGAlterVol     $04
0007B58E E701                       	dc.b	smpsNoAttack, $01
0007B590 EC07                       	smpsPSGAlterVol     $07
0007B592 8006                       	dc.b	nRst, $06
0007B594 E100                       	smpsAlterNote       $00
0007B596 01                         	dc.b	$01
0007B597 E104                       	smpsAlterNote       $04
0007B599 01                         	dc.b	$01
0007B59A E103                       	smpsAlterNote       $03
0007B59C 01                         	dc.b	$01
0007B59D E1FD                       	smpsAlterNote       $FD
0007B59F 01                         	dc.b	$01
0007B5A0 ECF5                       	smpsPSGAlterVol     $F5
0007B5A2 9407                       	dc.b	nG1, $07
0007B5A4 EC0B                       	smpsPSGAlterVol     $0B
0007B5A6 8004                       	dc.b	nRst, $04
0007B5A8 ECF5                       	smpsPSGAlterVol     $F5
0007B5AA 9406                       	dc.b	nG1, $06
0007B5AC EC0B                       	smpsPSGAlterVol     $0B
0007B5AE 8007                       	dc.b	nRst, $07
0007B5B0 E103                       	smpsAlterNote       $03
0007B5B2 0101                       	dc.b	$01, $01
0007B5B4 E100                       	smpsAlterNote       $00
0007B5B6 01                         	dc.b	$01
0007B5B7 E1F9                       	smpsAlterNote       $F9
0007B5B9 01                         	dc.b	$01
0007B5BA E1FD                       	smpsAlterNote       $FD
0007B5BC ECF5                       	smpsPSGAlterVol     $F5
0007B5BE 9206                       	dc.b	nF1, $06
0007B5C0 EC04                       	smpsPSGAlterVol     $04
0007B5C2 E701                       	dc.b	smpsNoAttack, $01
0007B5C4 EC07                       	smpsPSGAlterVol     $07
0007B5C6 8003                       	dc.b	nRst, $03
0007B5C8 ECF5                       	smpsPSGAlterVol     $F5
0007B5CA 9206                       	dc.b	nF1, $06
0007B5CC EC04                       	smpsPSGAlterVol     $04
0007B5CE E701                       	dc.b	smpsNoAttack, $01
0007B5D0 EC07                       	smpsPSGAlterVol     $07
0007B5D2 8006                       	dc.b	nRst, $06
0007B5D4 E100                       	smpsAlterNote       $00
0007B5D6 01                         	dc.b	$01
0007B5D7 E104                       	smpsAlterNote       $04
0007B5D9 01                         	dc.b	$01
0007B5DA E100                       	smpsAlterNote       $00
0007B5DC 01                         	dc.b	$01
0007B5DD E1FB                       	smpsAlterNote       $FB
0007B5DF 01                         	dc.b	$01
0007B5E0 E1FD                       	smpsAlterNote       $FD
0007B5E2 ECF5                       	smpsPSGAlterVol     $F5
0007B5E4 9406                       	dc.b	nG1, $06
0007B5E6 EC04                       	smpsPSGAlterVol     $04
0007B5E8 E701                       	dc.b	smpsNoAttack, $01
0007B5EA EC07                       	smpsPSGAlterVol     $07
0007B5EC 8003                       	dc.b	nRst, $03
0007B5EE ECF5                       	smpsPSGAlterVol     $F5
0007B5F0 9407                       	dc.b	nG1, $07
0007B5F2 EC0B                       	smpsPSGAlterVol     $0B
0007B5F4 8006                       	dc.b	nRst, $06
0007B5F6 E100                       	smpsAlterNote       $00
0007B5F8 01                         	dc.b	$01
0007B5F9 E103                       	smpsAlterNote       $03
0007B5FB 0101                       	dc.b	$01, $01
0007B5FD E1FD                       	smpsAlterNote       $FD
0007B5FF 01                         	dc.b	$01
0007B600 ECF5                       	smpsPSGAlterVol     $F5
0007B602 9207                       	dc.b	nF1, $07
0007B604 EC0B                       	smpsPSGAlterVol     $0B
0007B606 8004                       	dc.b	nRst, $04
0007B608 ECF5                       	smpsPSGAlterVol     $F5
0007B60A 9206                       	dc.b	nF1, $06
0007B60C EC04                       	smpsPSGAlterVol     $04
0007B60E E701                       	dc.b	smpsNoAttack, $01
0007B610 ECFC                       	smpsPSGAlterVol     $FC
0007B612 E1FC                       	smpsAlterNote       $FC
0007B614 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0007B618 EC04                       	smpsPSGAlterVol     $04
0007B61A E701                       	dc.b	smpsNoAttack, $01
0007B61C ECFC                       	smpsPSGAlterVol     $FC
0007B61E 9003                       	dc.b	nEb1, $03
0007B620 E1FD                       	smpsAlterNote       $FD
0007B622 9403                       	dc.b	nG1, $03
0007B624 EC04                       	smpsPSGAlterVol     $04
0007B626 E701                       	dc.b	smpsNoAttack, $01
0007B628 E1FE                       	smpsAlterNote       $FE
0007B62A ECFC                       	smpsPSGAlterVol     $FC
0007B62C 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0007B630 EC04                       	smpsPSGAlterVol     $04
0007B632 E701                       	dc.b	smpsNoAttack, $01
0007B634 EC07                       	smpsPSGAlterVol     $07
0007B636 8009                       	dc.b	nRst, $09
0007B638 E100                       	smpsAlterNote       $00
0007B63A 01                         	dc.b	$01
0007B63B F6F5 19                    	smpsJump            music84_Jump07
0007B63E                            
0007B63E                            ; PSG2 Data
0007B63E                            music84_PSG2:
0007B63E E1FC                       	smpsAlterNote       $FC
0007B640 EC04                       	smpsPSGAlterVol     $04
0007B642 8F03                       	dc.b	nD1, $03
0007B644 E1FD                       	smpsAlterNote       $FD
0007B646 9203                       	dc.b	nF1, $03
0007B648 EC04                       	smpsPSGAlterVol     $04
0007B64A E701                       	dc.b	smpsNoAttack, $01
0007B64C E1FE                       	smpsAlterNote       $FE
0007B64E ECFC                       	smpsPSGAlterVol     $FC
0007B650 9603                       	dc.b	nA1, $03
0007B652 E1FD                       	smpsAlterNote       $FD
0007B654 9103                       	dc.b	nE1, $03
0007B656 EC04                       	smpsPSGAlterVol     $04
0007B658 E701                       	dc.b	smpsNoAttack, $01
0007B65A ECFC                       	smpsPSGAlterVol     $FC
0007B65C 9403                       	dc.b	nG1, $03
0007B65E E1FE                       	smpsAlterNote       $FE
0007B660 9703                       	dc.b	nBb1, $03
0007B662 EC04                       	smpsPSGAlterVol     $04
0007B664 E701                       	dc.b	smpsNoAttack, $01
0007B666 E1FF                       	smpsAlterNote       $FF
0007B668 ECFC                       	smpsPSGAlterVol     $FC
0007B66A 9B02                       	dc.b	nD2, $02
0007B66C EC04                       	smpsPSGAlterVol     $04
0007B66E E701                       	dc.b	smpsNoAttack, $01
0007B670 ECFC                       	smpsPSGAlterVol     $FC
0007B672 E1FE                       	smpsAlterNote       $FE
0007B674 9A03                       	dc.b	nCs2, $03
0007B676 EC0B                       	smpsPSGAlterVol     $0B
0007B678 800A                       	dc.b	nRst, $0A
0007B67A E102                       	smpsAlterNote       $02
0007B67C 01                         	dc.b	$01
0007B67D E10A                       	smpsAlterNote       $0A
0007B67F 01                         	dc.b	$01
0007B680 E102                       	smpsAlterNote       $02
0007B682 01                         	dc.b	$01
0007B683 E1FC                       	smpsAlterNote       $FC
0007B685 01                         	dc.b	$01
0007B686 E10A                       	smpsAlterNote       $0A
0007B688 01                         	dc.b	$01
0007B689 E1FC                       	smpsAlterNote       $FC
0007B68B 01                         	dc.b	$01
0007B68C E108                       	smpsAlterNote       $08
0007B68E 01                         	dc.b	$01
0007B68F E10A                       	smpsAlterNote       $0A
0007B691 01                         	dc.b	$01
0007B692 E102                       	smpsAlterNote       $02
0007B694 01                         	dc.b	$01
0007B695 E1F7                       	smpsAlterNote       $F7
0007B697 0101                       	dc.b	$01, $01
0007B699 E102                       	smpsAlterNote       $02
0007B69B 01                         	dc.b	$01
0007B69C E108                       	smpsAlterNote       $08
0007B69E 0101                       	dc.b	$01, $01
0007B6A0 E1FC                       	smpsAlterNote       $FC
0007B6A2 01                         	dc.b	$01
0007B6A3 E10A                       	smpsAlterNote       $0A
0007B6A5 01                         	dc.b	$01
0007B6A6 E1F7                       	smpsAlterNote       $F7
0007B6A8 01                         	dc.b	$01
0007B6A9 E102                       	smpsAlterNote       $02
0007B6AB 01                         	dc.b	$01
0007B6AC E10A                       	smpsAlterNote       $0A
0007B6AE 01                         	dc.b	$01
0007B6AF E102                       	smpsAlterNote       $02
0007B6B1 01                         	dc.b	$01
0007B6B2 E1FC                       	smpsAlterNote       $FC
0007B6B4 01                         	dc.b	$01
0007B6B5                            
0007B6B5                            music84_Jump06:
0007B6B5 E10A                       	smpsAlterNote       $0A
0007B6B7 8001                       	dc.b	nRst, $01
0007B6B9 E1FC                       	smpsAlterNote       $FC
0007B6BB 01                         	dc.b	$01
0007B6BC E108                       	smpsAlterNote       $08
0007B6BE 01                         	dc.b	$01
0007B6BF E10A                       	smpsAlterNote       $0A
0007B6C1 01                         	dc.b	$01
0007B6C2 E1FC                       	smpsAlterNote       $FC
0007B6C4 ECF5                       	smpsPSGAlterVol     $F5
0007B6C6 8F06                       	dc.b	nD1, $06
0007B6C8 EC04                       	smpsPSGAlterVol     $04
0007B6CA E701                       	dc.b	smpsNoAttack, $01
0007B6CC EC07                       	smpsPSGAlterVol     $07
0007B6CE 8003                       	dc.b	nRst, $03
0007B6D0 ECF5                       	smpsPSGAlterVol     $F5
0007B6D2 8F06                       	dc.b	nD1, $06
0007B6D4 EC04                       	smpsPSGAlterVol     $04
0007B6D6 E701                       	dc.b	smpsNoAttack, $01
0007B6D8 EC07                       	smpsPSGAlterVol     $07
0007B6DA 8006                       	dc.b	nRst, $06
0007B6DC E1FF                       	smpsAlterNote       $FF
0007B6DE 01                         	dc.b	$01
0007B6DF E102                       	smpsAlterNote       $02
0007B6E1 01                         	dc.b	$01
0007B6E2 E1FF                       	smpsAlterNote       $FF
0007B6E4 01                         	dc.b	$01
0007B6E5 E1F9                       	smpsAlterNote       $F9
0007B6E7 01                         	dc.b	$01
0007B6E8 E1FC                       	smpsAlterNote       $FC
0007B6EA ECF5                       	smpsPSGAlterVol     $F5
0007B6EC 9006                       	dc.b	nEb1, $06
0007B6EE EC04                       	smpsPSGAlterVol     $04
0007B6F0 E701                       	dc.b	smpsNoAttack, $01
0007B6F2 EC07                       	smpsPSGAlterVol     $07
0007B6F4 8003                       	dc.b	nRst, $03
0007B6F6 ECF5                       	smpsPSGAlterVol     $F5
0007B6F8 9007                       	dc.b	nEb1, $07
0007B6FA EC0B                       	smpsPSGAlterVol     $0B
0007B6FC 8006                       	dc.b	nRst, $06
0007B6FE E1FF                       	smpsAlterNote       $FF
0007B700 01                         	dc.b	$01
0007B701 E103                       	smpsAlterNote       $03
0007B703 0101                       	dc.b	$01, $01
0007B705 E1FC                       	smpsAlterNote       $FC
0007B707 01                         	dc.b	$01
0007B708 ECF5                       	smpsPSGAlterVol     $F5
0007B70A 8F07                       	dc.b	nD1, $07
0007B70C EC0B                       	smpsPSGAlterVol     $0B
0007B70E 8004                       	dc.b	nRst, $04
0007B710 ECF5                       	smpsPSGAlterVol     $F5
0007B712 8F06                       	dc.b	nD1, $06
0007B714 EC04                       	smpsPSGAlterVol     $04
0007B716 E701                       	dc.b	smpsNoAttack, $01
0007B718 EC07                       	smpsPSGAlterVol     $07
0007B71A 8006                       	dc.b	nRst, $06
0007B71C E102                       	smpsAlterNote       $02
0007B71E 01                         	dc.b	$01
0007B71F E103                       	smpsAlterNote       $03
0007B721 01                         	dc.b	$01
0007B722 E1FF                       	smpsAlterNote       $FF
0007B724 01                         	dc.b	$01
0007B725 E1F9                       	smpsAlterNote       $F9
0007B727 01                         	dc.b	$01
0007B728 E1FC                       	smpsAlterNote       $FC
0007B72A ECF5                       	smpsPSGAlterVol     $F5
0007B72C 8F06                       	dc.b	nD1, $06
0007B72E EC04                       	smpsPSGAlterVol     $04
0007B730 E701                       	dc.b	smpsNoAttack, $01
0007B732 EC07                       	smpsPSGAlterVol     $07
0007B734 8003                       	dc.b	nRst, $03
0007B736 ECF5                       	smpsPSGAlterVol     $F5
0007B738 8F06                       	dc.b	nD1, $06
0007B73A EC04                       	smpsPSGAlterVol     $04
0007B73C E701                       	dc.b	smpsNoAttack, $01
0007B73E EC07                       	smpsPSGAlterVol     $07
0007B740 8006                       	dc.b	nRst, $06
0007B742 E1FF                       	smpsAlterNote       $FF
0007B744 01                         	dc.b	$01
0007B745 E103                       	smpsAlterNote       $03
0007B747 01                         	dc.b	$01
0007B748 E1FF                       	smpsAlterNote       $FF
0007B74A 01                         	dc.b	$01
0007B74B E1FC                       	smpsAlterNote       $FC
0007B74D 01                         	dc.b	$01
0007B74E ECF5                       	smpsPSGAlterVol     $F5
0007B750 8F06                       	dc.b	nD1, $06
0007B752 EC04                       	smpsPSGAlterVol     $04
0007B754 E701                       	dc.b	smpsNoAttack, $01
0007B756 EC07                       	smpsPSGAlterVol     $07
0007B758 8003                       	dc.b	nRst, $03
0007B75A ECF5                       	smpsPSGAlterVol     $F5
0007B75C 8F07                       	dc.b	nD1, $07
0007B75E EC0B                       	smpsPSGAlterVol     $0B
0007B760 8007                       	dc.b	nRst, $07
0007B762 E101                       	smpsAlterNote       $01
0007B764 0101                       	dc.b	$01, $01
0007B766 E1FC                       	smpsAlterNote       $FC
0007B768 01                         	dc.b	$01
0007B769 E1F9                       	smpsAlterNote       $F9
0007B76B 01                         	dc.b	$01
0007B76C E1FC                       	smpsAlterNote       $FC
0007B76E ECF5                       	smpsPSGAlterVol     $F5
0007B770 9006                       	dc.b	nEb1, $06
0007B772 EC0B                       	smpsPSGAlterVol     $0B
0007B774 8004                       	dc.b	nRst, $04
0007B776 ECF5                       	smpsPSGAlterVol     $F5
0007B778 9006                       	dc.b	nEb1, $06
0007B77A EC04                       	smpsPSGAlterVol     $04
0007B77C E701                       	dc.b	smpsNoAttack, $01
0007B77E EC07                       	smpsPSGAlterVol     $07
0007B780 8006                       	dc.b	nRst, $06
0007B782 E100                       	smpsAlterNote       $00
0007B784 01                         	dc.b	$01
0007B785 E102                       	smpsAlterNote       $02
0007B787 01                         	dc.b	$01
0007B788 E100                       	smpsAlterNote       $00
0007B78A 01                         	dc.b	$01
0007B78B E1FD                       	smpsAlterNote       $FD
0007B78D 01                         	dc.b	$01
0007B78E E1FF                       	smpsAlterNote       $FF
0007B790 ECF5                       	smpsPSGAlterVol     $F5
0007B792 9B06                       	dc.b	nD2, $06
0007B794 EC04                       	smpsPSGAlterVol     $04
0007B796 E701                       	dc.b	smpsNoAttack, $01
0007B798 EC07                       	smpsPSGAlterVol     $07
0007B79A 8003                       	dc.b	nRst, $03
0007B79C ECF5                       	smpsPSGAlterVol     $F5
0007B79E 9B07                       	dc.b	nD2, $07
0007B7A0 EC0B                       	smpsPSGAlterVol     $0B
0007B7A2 8006                       	dc.b	nRst, $06
0007B7A4 E102                       	smpsAlterNote       $02
0007B7A6 01                         	dc.b	$01
0007B7A7 E106                       	smpsAlterNote       $06
0007B7A9 01                         	dc.b	$01
0007B7AA E105                       	smpsAlterNote       $05
0007B7AC 01                         	dc.b	$01
0007B7AD E1FF                       	smpsAlterNote       $FF
0007B7AF 01                         	dc.b	$01
0007B7B0 ECF5                       	smpsPSGAlterVol     $F5
0007B7B2 9B07                       	dc.b	nD2, $07
0007B7B4 EC0B                       	smpsPSGAlterVol     $0B
0007B7B6 8004                       	dc.b	nRst, $04
0007B7B8 ECF5                       	smpsPSGAlterVol     $F5
0007B7BA 9B06                       	dc.b	nD2, $06
0007B7BC EC0B                       	smpsPSGAlterVol     $0B
0007B7BE 8007                       	dc.b	nRst, $07
0007B7C0 E105                       	smpsAlterNote       $05
0007B7C2 0101                       	dc.b	$01, $01
0007B7C4 E102                       	smpsAlterNote       $02
0007B7C6 01                         	dc.b	$01
0007B7C7 E1FC                       	smpsAlterNote       $FC
0007B7C9 01                         	dc.b	$01
0007B7CA E1FF                       	smpsAlterNote       $FF
0007B7CC ECF5                       	smpsPSGAlterVol     $F5
0007B7CE 9B06                       	dc.b	nD2, $06
0007B7D0 EC04                       	smpsPSGAlterVol     $04
0007B7D2 E701                       	dc.b	smpsNoAttack, $01
0007B7D4 EC07                       	smpsPSGAlterVol     $07
0007B7D6 8003                       	dc.b	nRst, $03
0007B7D8 ECF5                       	smpsPSGAlterVol     $F5
0007B7DA 9B06                       	dc.b	nD2, $06
0007B7DC EC04                       	smpsPSGAlterVol     $04
0007B7DE E701                       	dc.b	smpsNoAttack, $01
0007B7E0 EC07                       	smpsPSGAlterVol     $07
0007B7E2 8006                       	dc.b	nRst, $06
0007B7E4 E102                       	smpsAlterNote       $02
0007B7E6 01                         	dc.b	$01
0007B7E7 E106                       	smpsAlterNote       $06
0007B7E9 01                         	dc.b	$01
0007B7EA E102                       	smpsAlterNote       $02
0007B7EC 01                         	dc.b	$01
0007B7ED E1FF                       	smpsAlterNote       $FF
0007B7EF 01                         	dc.b	$01
0007B7F0 ECF5                       	smpsPSGAlterVol     $F5
0007B7F2 9B06                       	dc.b	nD2, $06
0007B7F4 EC04                       	smpsPSGAlterVol     $04
0007B7F6 E701                       	dc.b	smpsNoAttack, $01
0007B7F8 EC07                       	smpsPSGAlterVol     $07
0007B7FA 8003                       	dc.b	nRst, $03
0007B7FC ECF5                       	smpsPSGAlterVol     $F5
0007B7FE 9B07                       	dc.b	nD2, $07
0007B800 EC0B                       	smpsPSGAlterVol     $0B
0007B802 8007                       	dc.b	nRst, $07
0007B804 E105                       	smpsAlterNote       $05
0007B806 0101                       	dc.b	$01, $01
0007B808 E1FF                       	smpsAlterNote       $FF
0007B80A 01                         	dc.b	$01
0007B80B E1FC                       	smpsAlterNote       $FC
0007B80D 01                         	dc.b	$01
0007B80E E1FF                       	smpsAlterNote       $FF
0007B810 ECF5                       	smpsPSGAlterVol     $F5
0007B812 9B06                       	dc.b	nD2, $06
0007B814 EC0B                       	smpsPSGAlterVol     $0B
0007B816 8004                       	dc.b	nRst, $04
0007B818 ECF5                       	smpsPSGAlterVol     $F5
0007B81A 9B06                       	dc.b	nD2, $06
0007B81C EC04                       	smpsPSGAlterVol     $04
0007B81E E701                       	dc.b	smpsNoAttack, $01
0007B820 EC07                       	smpsPSGAlterVol     $07
0007B822 8006                       	dc.b	nRst, $06
0007B824 E105                       	smpsAlterNote       $05
0007B826 01                         	dc.b	$01
0007B827 E106                       	smpsAlterNote       $06
0007B829 01                         	dc.b	$01
0007B82A E102                       	smpsAlterNote       $02
0007B82C 01                         	dc.b	$01
0007B82D E1FC                       	smpsAlterNote       $FC
0007B82F 01                         	dc.b	$01
0007B830 E1FF                       	smpsAlterNote       $FF
0007B832 ECF5                       	smpsPSGAlterVol     $F5
0007B834 9B06                       	dc.b	nD2, $06
0007B836 EC04                       	smpsPSGAlterVol     $04
0007B838 E701                       	dc.b	smpsNoAttack, $01
0007B83A EC07                       	smpsPSGAlterVol     $07
0007B83C 8003                       	dc.b	nRst, $03
0007B83E ECF5                       	smpsPSGAlterVol     $F5
0007B840 9B06                       	dc.b	nD2, $06
0007B842 EC04                       	smpsPSGAlterVol     $04
0007B844 E701                       	dc.b	smpsNoAttack, $01
0007B846 EC07                       	smpsPSGAlterVol     $07
0007B848 8006                       	dc.b	nRst, $06
0007B84A E102                       	smpsAlterNote       $02
0007B84C 01                         	dc.b	$01
0007B84D E106                       	smpsAlterNote       $06
0007B84F 01                         	dc.b	$01
0007B850 E105                       	smpsAlterNote       $05
0007B852 01                         	dc.b	$01
0007B853 E1FF                       	smpsAlterNote       $FF
0007B855 01                         	dc.b	$01
0007B856 ECF5                       	smpsPSGAlterVol     $F5
0007B858 9B07                       	dc.b	nD2, $07
0007B85A EC0B                       	smpsPSGAlterVol     $0B
0007B85C 8004                       	dc.b	nRst, $04
0007B85E ECF5                       	smpsPSGAlterVol     $F5
0007B860 9B06                       	dc.b	nD2, $06
0007B862 EC0B                       	smpsPSGAlterVol     $0B
0007B864 8007                       	dc.b	nRst, $07
0007B866 E105                       	smpsAlterNote       $05
0007B868 0101                       	dc.b	$01, $01
0007B86A E102                       	smpsAlterNote       $02
0007B86C 01                         	dc.b	$01
0007B86D E1FC                       	smpsAlterNote       $FC
0007B86F 01                         	dc.b	$01
0007B870 E1FF                       	smpsAlterNote       $FF
0007B872 ECF5                       	smpsPSGAlterVol     $F5
0007B874 9B06                       	dc.b	nD2, $06
0007B876 EC04                       	smpsPSGAlterVol     $04
0007B878 E701                       	dc.b	smpsNoAttack, $01
0007B87A EC07                       	smpsPSGAlterVol     $07
0007B87C 8003                       	dc.b	nRst, $03
0007B87E ECF5                       	smpsPSGAlterVol     $F5
0007B880 9B06                       	dc.b	nD2, $06
0007B882 EC04                       	smpsPSGAlterVol     $04
0007B884 E701                       	dc.b	smpsNoAttack, $01
0007B886 EC07                       	smpsPSGAlterVol     $07
0007B888 8006                       	dc.b	nRst, $06
0007B88A E102                       	smpsAlterNote       $02
0007B88C 01                         	dc.b	$01
0007B88D E106                       	smpsAlterNote       $06
0007B88F 01                         	dc.b	$01
0007B890 E102                       	smpsAlterNote       $02
0007B892 01                         	dc.b	$01
0007B893 E1FF                       	smpsAlterNote       $FF
0007B895 01                         	dc.b	$01
0007B896 ECF5                       	smpsPSGAlterVol     $F5
0007B898 9B06                       	dc.b	nD2, $06
0007B89A EC04                       	smpsPSGAlterVol     $04
0007B89C E701                       	dc.b	smpsNoAttack, $01
0007B89E EC07                       	smpsPSGAlterVol     $07
0007B8A0 8003                       	dc.b	nRst, $03
0007B8A2 ECF5                       	smpsPSGAlterVol     $F5
0007B8A4 9B07                       	dc.b	nD2, $07
0007B8A6 E1FE                       	smpsAlterNote       $FE
0007B8A8 9706                       	dc.b	nBb1, $06
0007B8AA EC04                       	smpsPSGAlterVol     $04
0007B8AC E701                       	dc.b	smpsNoAttack, $01
0007B8AE ECFC                       	smpsPSGAlterVol     $FC
0007B8B0 9703                       	dc.b	nBb1, $03
0007B8B2 EC04                       	smpsPSGAlterVol     $04
0007B8B4 E701                       	dc.b	smpsNoAttack, $01
0007B8B6 ECFC                       	smpsPSGAlterVol     $FC
0007B8B8 9702                       	dc.b	nBb1, $02
0007B8BA EC04                       	smpsPSGAlterVol     $04
0007B8BC E701                       	dc.b	smpsNoAttack, $01
0007B8BE ECFC                       	smpsPSGAlterVol     $FC
0007B8C0 9606                       	dc.b	nA1, $06
0007B8C2 EC04                       	smpsPSGAlterVol     $04
0007B8C4 E701                       	dc.b	smpsNoAttack, $01
0007B8C6 EC07                       	smpsPSGAlterVol     $07
0007B8C8 8006                       	dc.b	nRst, $06
0007B8CA E101                       	smpsAlterNote       $01
0007B8CC 01                         	dc.b	$01
0007B8CD E107                       	smpsAlterNote       $07
0007B8CF 01                         	dc.b	$01
0007B8D0 E101                       	smpsAlterNote       $01
0007B8D2 01                         	dc.b	$01
0007B8D3 E1F8                       	smpsAlterNote       $F8
0007B8D5 01                         	dc.b	$01
0007B8D6 E1F7                       	smpsAlterNote       $F7
0007B8D8 01                         	dc.b	$01
0007B8D9 E1FC                       	smpsAlterNote       $FC
0007B8DB 01                         	dc.b	$01
0007B8DC E106                       	smpsAlterNote       $06
0007B8DE 01                         	dc.b	$01
0007B8DF E107                       	smpsAlterNote       $07
0007B8E1 01                         	dc.b	$01
0007B8E2 E101                       	smpsAlterNote       $01
0007B8E4 01                         	dc.b	$01
0007B8E5 E1F8                       	smpsAlterNote       $F8
0007B8E7 0101                       	dc.b	$01, $01
0007B8E9 E1FC                       	smpsAlterNote       $FC
0007B8EB ECF5                       	smpsPSGAlterVol     $F5
0007B8ED 8F06                       	dc.b	nD1, $06
0007B8EF EC04                       	smpsPSGAlterVol     $04
0007B8F1 E701                       	dc.b	smpsNoAttack, $01
0007B8F3 EC07                       	smpsPSGAlterVol     $07
0007B8F5 8003                       	dc.b	nRst, $03
0007B8F7 ECF5                       	smpsPSGAlterVol     $F5
0007B8F9 8F06                       	dc.b	nD1, $06
0007B8FB EC04                       	smpsPSGAlterVol     $04
0007B8FD E701                       	dc.b	smpsNoAttack, $01
0007B8FF EC07                       	smpsPSGAlterVol     $07
0007B901 8006                       	dc.b	nRst, $06
0007B903 E1FF                       	smpsAlterNote       $FF
0007B905 01                         	dc.b	$01
0007B906 E102                       	smpsAlterNote       $02
0007B908 01                         	dc.b	$01
0007B909 E101                       	smpsAlterNote       $01
0007B90B 01                         	dc.b	$01
0007B90C E1FC                       	smpsAlterNote       $FC
0007B90E 01                         	dc.b	$01
0007B90F ECF5                       	smpsPSGAlterVol     $F5
0007B911 9007                       	dc.b	nEb1, $07
0007B913 EC0B                       	smpsPSGAlterVol     $0B
0007B915 8004                       	dc.b	nRst, $04
0007B917 ECF5                       	smpsPSGAlterVol     $F5
0007B919 9006                       	dc.b	nEb1, $06
0007B91B EC0B                       	smpsPSGAlterVol     $0B
0007B91D 8007                       	dc.b	nRst, $07
0007B91F E103                       	smpsAlterNote       $03
0007B921 0101                       	dc.b	$01, $01
0007B923 E1FC                       	smpsAlterNote       $FC
0007B925 01                         	dc.b	$01
0007B926 E1F9                       	smpsAlterNote       $F9
0007B928 01                         	dc.b	$01
0007B929 E1FC                       	smpsAlterNote       $FC
0007B92B ECF5                       	smpsPSGAlterVol     $F5
0007B92D 8F06                       	dc.b	nD1, $06
0007B92F EC04                       	smpsPSGAlterVol     $04
0007B931 E701                       	dc.b	smpsNoAttack, $01
0007B933 EC07                       	smpsPSGAlterVol     $07
0007B935 8003                       	dc.b	nRst, $03
0007B937 ECF5                       	smpsPSGAlterVol     $F5
0007B939 8F06                       	dc.b	nD1, $06
0007B93B EC04                       	smpsPSGAlterVol     $04
0007B93D E701                       	dc.b	smpsNoAttack, $01
0007B93F EC07                       	smpsPSGAlterVol     $07
0007B941 8006                       	dc.b	nRst, $06
0007B943 E1FF                       	smpsAlterNote       $FF
0007B945 01                         	dc.b	$01
0007B946 E103                       	smpsAlterNote       $03
0007B948 01                         	dc.b	$01
0007B949 E1FF                       	smpsAlterNote       $FF
0007B94B 01                         	dc.b	$01
0007B94C E1F9                       	smpsAlterNote       $F9
0007B94E 01                         	dc.b	$01
0007B94F E1FC                       	smpsAlterNote       $FC
0007B951 ECF5                       	smpsPSGAlterVol     $F5
0007B953 8F06                       	dc.b	nD1, $06
0007B955 EC04                       	smpsPSGAlterVol     $04
0007B957 E701                       	dc.b	smpsNoAttack, $01
0007B959 EC07                       	smpsPSGAlterVol     $07
0007B95B 8003                       	dc.b	nRst, $03
0007B95D ECF5                       	smpsPSGAlterVol     $F5
0007B95F 8F07                       	dc.b	nD1, $07
0007B961 EC0B                       	smpsPSGAlterVol     $0B
0007B963 8006                       	dc.b	nRst, $06
0007B965 E1FF                       	smpsAlterNote       $FF
0007B967 01                         	dc.b	$01
0007B968 E102                       	smpsAlterNote       $02
0007B96A 0101                       	dc.b	$01, $01
0007B96C E1FC                       	smpsAlterNote       $FC
0007B96E 01                         	dc.b	$01
0007B96F ECF5                       	smpsPSGAlterVol     $F5
0007B971 8F07                       	dc.b	nD1, $07
0007B973 EC0B                       	smpsPSGAlterVol     $0B
0007B975 8004                       	dc.b	nRst, $04
0007B977 ECF5                       	smpsPSGAlterVol     $F5
0007B979 8F06                       	dc.b	nD1, $06
0007B97B EC04                       	smpsPSGAlterVol     $04
0007B97D E701                       	dc.b	smpsNoAttack, $01
0007B97F EC07                       	smpsPSGAlterVol     $07
0007B981 8006                       	dc.b	nRst, $06
0007B983 E101                       	smpsAlterNote       $01
0007B985 01                         	dc.b	$01
0007B986 E102                       	smpsAlterNote       $02
0007B988 01                         	dc.b	$01
0007B989 E1FF                       	smpsAlterNote       $FF
0007B98B 01                         	dc.b	$01
0007B98C E1F9                       	smpsAlterNote       $F9
0007B98E 01                         	dc.b	$01
0007B98F E1FC                       	smpsAlterNote       $FC
0007B991 ECF5                       	smpsPSGAlterVol     $F5
0007B993 9006                       	dc.b	nEb1, $06
0007B995 EC04                       	smpsPSGAlterVol     $04
0007B997 E701                       	dc.b	smpsNoAttack, $01
0007B999 EC07                       	smpsPSGAlterVol     $07
0007B99B 8003                       	dc.b	nRst, $03
0007B99D ECF5                       	smpsPSGAlterVol     $F5
0007B99F 9006                       	dc.b	nEb1, $06
0007B9A1 EC04                       	smpsPSGAlterVol     $04
0007B9A3 E701                       	dc.b	smpsNoAttack, $01
0007B9A5 EC07                       	smpsPSGAlterVol     $07
0007B9A7 8006                       	dc.b	nRst, $06
0007B9A9 E100                       	smpsAlterNote       $00
0007B9AB 01                         	dc.b	$01
0007B9AC E102                       	smpsAlterNote       $02
0007B9AE 01                         	dc.b	$01
0007B9AF E100                       	smpsAlterNote       $00
0007B9B1 01                         	dc.b	$01
0007B9B2 E1FF                       	smpsAlterNote       $FF
0007B9B4 01                         	dc.b	$01
0007B9B5 ECF5                       	smpsPSGAlterVol     $F5
0007B9B7 9B06                       	dc.b	nD2, $06
0007B9B9 EC04                       	smpsPSGAlterVol     $04
0007B9BB E701                       	dc.b	smpsNoAttack, $01
0007B9BD EC07                       	smpsPSGAlterVol     $07
0007B9BF 8003                       	dc.b	nRst, $03
0007B9C1 ECF5                       	smpsPSGAlterVol     $F5
0007B9C3 9B07                       	dc.b	nD2, $07
0007B9C5 EC0B                       	smpsPSGAlterVol     $0B
0007B9C7 8007                       	dc.b	nRst, $07
0007B9C9 E105                       	smpsAlterNote       $05
0007B9CB 0101                       	dc.b	$01, $01
0007B9CD E1FF                       	smpsAlterNote       $FF
0007B9CF 01                         	dc.b	$01
0007B9D0 E1FC                       	smpsAlterNote       $FC
0007B9D2 01                         	dc.b	$01
0007B9D3 E1FF                       	smpsAlterNote       $FF
0007B9D5 ECF5                       	smpsPSGAlterVol     $F5
0007B9D7 9B06                       	dc.b	nD2, $06
0007B9D9 EC0B                       	smpsPSGAlterVol     $0B
0007B9DB 8004                       	dc.b	nRst, $04
0007B9DD ECF5                       	smpsPSGAlterVol     $F5
0007B9DF 9B06                       	dc.b	nD2, $06
0007B9E1 EC04                       	smpsPSGAlterVol     $04
0007B9E3 E701                       	dc.b	smpsNoAttack, $01
0007B9E5 EC07                       	smpsPSGAlterVol     $07
0007B9E7 8006                       	dc.b	nRst, $06
0007B9E9 E102                       	smpsAlterNote       $02
0007B9EB 01                         	dc.b	$01
0007B9EC E106                       	smpsAlterNote       $06
0007B9EE 01                         	dc.b	$01
0007B9EF E102                       	smpsAlterNote       $02
0007B9F1 01                         	dc.b	$01
0007B9F2 E1FC                       	smpsAlterNote       $FC
0007B9F4 01                         	dc.b	$01
0007B9F5 E1FF                       	smpsAlterNote       $FF
0007B9F7 ECF5                       	smpsPSGAlterVol     $F5
0007B9F9 9B06                       	dc.b	nD2, $06
0007B9FB EC04                       	smpsPSGAlterVol     $04
0007B9FD E701                       	dc.b	smpsNoAttack, $01
0007B9FF EC07                       	smpsPSGAlterVol     $07
0007BA01 8003                       	dc.b	nRst, $03
0007BA03 ECF5                       	smpsPSGAlterVol     $F5
0007BA05 9B07                       	dc.b	nD2, $07
0007BA07 EC0B                       	smpsPSGAlterVol     $0B
0007BA09 8006                       	dc.b	nRst, $06
0007BA0B E102                       	smpsAlterNote       $02
0007BA0D 01                         	dc.b	$01
0007BA0E E105                       	smpsAlterNote       $05
0007BA10 0101                       	dc.b	$01, $01
0007BA12 E1FF                       	smpsAlterNote       $FF
0007BA14 01                         	dc.b	$01
0007BA15 ECF5                       	smpsPSGAlterVol     $F5
0007BA17 9B07                       	dc.b	nD2, $07
0007BA19 EC0B                       	smpsPSGAlterVol     $0B
0007BA1B 8004                       	dc.b	nRst, $04
0007BA1D ECF5                       	smpsPSGAlterVol     $F5
0007BA1F 9B06                       	dc.b	nD2, $06
0007BA21 EC0B                       	smpsPSGAlterVol     $0B
0007BA23 8007                       	dc.b	nRst, $07
0007BA25 E105                       	smpsAlterNote       $05
0007BA27 0101                       	dc.b	$01, $01
0007BA29 E102                       	smpsAlterNote       $02
0007BA2B 01                         	dc.b	$01
0007BA2C E1FC                       	smpsAlterNote       $FC
0007BA2E 01                         	dc.b	$01
0007BA2F E1FF                       	smpsAlterNote       $FF
0007BA31 ECF5                       	smpsPSGAlterVol     $F5
0007BA33 9B06                       	dc.b	nD2, $06
0007BA35 EC04                       	smpsPSGAlterVol     $04
0007BA37 E701                       	dc.b	smpsNoAttack, $01
0007BA39 EC07                       	smpsPSGAlterVol     $07
0007BA3B 8003                       	dc.b	nRst, $03
0007BA3D ECF5                       	smpsPSGAlterVol     $F5
0007BA3F 9B06                       	dc.b	nD2, $06
0007BA41 EC04                       	smpsPSGAlterVol     $04
0007BA43 E701                       	dc.b	smpsNoAttack, $01
0007BA45 EC07                       	smpsPSGAlterVol     $07
0007BA47 8006                       	dc.b	nRst, $06
0007BA49 E102                       	smpsAlterNote       $02
0007BA4B 01                         	dc.b	$01
0007BA4C E106                       	smpsAlterNote       $06
0007BA4E 01                         	dc.b	$01
0007BA4F E102                       	smpsAlterNote       $02
0007BA51 01                         	dc.b	$01
0007BA52 E1FF                       	smpsAlterNote       $FF
0007BA54 01                         	dc.b	$01
0007BA55 ECF5                       	smpsPSGAlterVol     $F5
0007BA57 9B06                       	dc.b	nD2, $06
0007BA59 EC04                       	smpsPSGAlterVol     $04
0007BA5B E701                       	dc.b	smpsNoAttack, $01
0007BA5D EC07                       	smpsPSGAlterVol     $07
0007BA5F 8003                       	dc.b	nRst, $03
0007BA61 ECF5                       	smpsPSGAlterVol     $F5
0007BA63 9B07                       	dc.b	nD2, $07
0007BA65 EC0B                       	smpsPSGAlterVol     $0B
0007BA67 8007                       	dc.b	nRst, $07
0007BA69 E105                       	smpsAlterNote       $05
0007BA6B 0101                       	dc.b	$01, $01
0007BA6D E1FF                       	smpsAlterNote       $FF
0007BA6F 01                         	dc.b	$01
0007BA70 E1FC                       	smpsAlterNote       $FC
0007BA72 01                         	dc.b	$01
0007BA73 E1FF                       	smpsAlterNote       $FF
0007BA75 ECF5                       	smpsPSGAlterVol     $F5
0007BA77 9B06                       	dc.b	nD2, $06
0007BA79 EC0B                       	smpsPSGAlterVol     $0B
0007BA7B 8004                       	dc.b	nRst, $04
0007BA7D ECF5                       	smpsPSGAlterVol     $F5
0007BA7F 9B06                       	dc.b	nD2, $06
0007BA81 EC04                       	smpsPSGAlterVol     $04
0007BA83 E701                       	dc.b	smpsNoAttack, $01
0007BA85 EC07                       	smpsPSGAlterVol     $07
0007BA87 8006                       	dc.b	nRst, $06
0007BA89 E102                       	smpsAlterNote       $02
0007BA8B 01                         	dc.b	$01
0007BA8C E106                       	smpsAlterNote       $06
0007BA8E 01                         	dc.b	$01
0007BA8F E102                       	smpsAlterNote       $02
0007BA91 01                         	dc.b	$01
0007BA92 E1FC                       	smpsAlterNote       $FC
0007BA94 01                         	dc.b	$01
0007BA95 E1FF                       	smpsAlterNote       $FF
0007BA97 ECF5                       	smpsPSGAlterVol     $F5
0007BA99 9B06                       	dc.b	nD2, $06
0007BA9B EC04                       	smpsPSGAlterVol     $04
0007BA9D E701                       	dc.b	smpsNoAttack, $01
0007BA9F EC07                       	smpsPSGAlterVol     $07
0007BAA1 8003                       	dc.b	nRst, $03
0007BAA3 ECF5                       	smpsPSGAlterVol     $F5
0007BAA5 9B06                       	dc.b	nD2, $06
0007BAA7 EC04                       	smpsPSGAlterVol     $04
0007BAA9 E701                       	dc.b	smpsNoAttack, $01
0007BAAB EC07                       	smpsPSGAlterVol     $07
0007BAAD 8006                       	dc.b	nRst, $06
0007BAAF E102                       	smpsAlterNote       $02
0007BAB1 01                         	dc.b	$01
0007BAB2 E106                       	smpsAlterNote       $06
0007BAB4 01                         	dc.b	$01
0007BAB5 E105                       	smpsAlterNote       $05
0007BAB7 01                         	dc.b	$01
0007BAB8 E1FF                       	smpsAlterNote       $FF
0007BABA 01                         	dc.b	$01
0007BABB ECF5                       	smpsPSGAlterVol     $F5
0007BABD 9B07                       	dc.b	nD2, $07
0007BABF EC0B                       	smpsPSGAlterVol     $0B
0007BAC1 8004                       	dc.b	nRst, $04
0007BAC3 ECF5                       	smpsPSGAlterVol     $F5
0007BAC5 9B06                       	dc.b	nD2, $06
0007BAC7 EC0B                       	smpsPSGAlterVol     $0B
0007BAC9 8007                       	dc.b	nRst, $07
0007BACB E105                       	smpsAlterNote       $05
0007BACD 0101                       	dc.b	$01, $01
0007BACF E101                       	smpsAlterNote       $01
0007BAD1 01                         	dc.b	$01
0007BAD2 E1FB                       	smpsAlterNote       $FB
0007BAD4 01                         	dc.b	$01
0007BAD5 E1FE                       	smpsAlterNote       $FE
0007BAD7 ECF5                       	smpsPSGAlterVol     $F5
0007BAD9 9A06                       	dc.b	nCs2, $06
0007BADB EC04                       	smpsPSGAlterVol     $04
0007BADD E701                       	dc.b	smpsNoAttack, $01
0007BADF EC07                       	smpsPSGAlterVol     $07
0007BAE1 8003                       	dc.b	nRst, $03
0007BAE3 ECF5                       	smpsPSGAlterVol     $F5
0007BAE5 9A06                       	dc.b	nCs2, $06
0007BAE7 EC04                       	smpsPSGAlterVol     $04
0007BAE9 E701                       	dc.b	smpsNoAttack, $01
0007BAEB EC07                       	smpsPSGAlterVol     $07
0007BAED 8003                       	dc.b	nRst, $03
0007BAEF E1FC                       	smpsAlterNote       $FC
0007BAF1 ECF5                       	smpsPSGAlterVol     $F5
0007BAF3 8F07                       	dc.b	nD1, $07
0007BAF5 EC0B                       	smpsPSGAlterVol     $0B
0007BAF7 8006                       	dc.b	nRst, $06
0007BAF9 E1FF                       	smpsAlterNote       $FF
0007BAFB 01                         	dc.b	$01
0007BAFC E103                       	smpsAlterNote       $03
0007BAFE 01                         	dc.b	$01
0007BAFF E102                       	smpsAlterNote       $02
0007BB01 01                         	dc.b	$01
0007BB02 E1FC                       	smpsAlterNote       $FC
0007BB04 01                         	dc.b	$01
0007BB05 E1F8                       	smpsAlterNote       $F8
0007BB07 01                         	dc.b	$01
0007BB08 E1FC                       	smpsAlterNote       $FC
0007BB0A 01                         	dc.b	$01
0007BB0B E1FF                       	smpsAlterNote       $FF
0007BB0D 01                         	dc.b	$01
0007BB0E E103                       	smpsAlterNote       $03
0007BB10 01                         	dc.b	$01
0007BB11 E1FC                       	smpsAlterNote       $FC
0007BB13 ECF5                       	smpsPSGAlterVol     $F5
0007BB15 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0007BB19 EC04                       	smpsPSGAlterVol     $04
0007BB1B E701                       	dc.b	smpsNoAttack, $01
0007BB1D EC07                       	smpsPSGAlterVol     $07
0007BB1F 8009                       	dc.b	nRst, $09
0007BB21 E1FF                       	smpsAlterNote       $FF
0007BB23 01                         	dc.b	$01
0007BB24 E103                       	smpsAlterNote       $03
0007BB26 01                         	dc.b	$01
0007BB27 E102                       	smpsAlterNote       $02
0007BB29 01                         	dc.b	$01
0007BB2A E1FC                       	smpsAlterNote       $FC
0007BB2C 01                         	dc.b	$01
0007BB2D E1F8                       	smpsAlterNote       $F8
0007BB2F 01                         	dc.b	$01
0007BB30 E1FC                       	smpsAlterNote       $FC
0007BB32 01                         	dc.b	$01
0007BB33 E1FF                       	smpsAlterNote       $FF
0007BB35 01                         	dc.b	$01
0007BB36 E103                       	smpsAlterNote       $03
0007BB38 01                         	dc.b	$01
0007BB39 E1FF                       	smpsAlterNote       $FF
0007BB3B 01                         	dc.b	$01
0007BB3C E1F9                       	smpsAlterNote       $F9
0007BB3E 01                         	dc.b	$01
0007BB3F E1F8                       	smpsAlterNote       $F8
0007BB41 01                         	dc.b	$01
0007BB42 E1FC                       	smpsAlterNote       $FC
0007BB44 01                         	dc.b	$01
0007BB45 E102                       	smpsAlterNote       $02
0007BB47 0101                       	dc.b	$01, $01
0007BB49 E1FF                       	smpsAlterNote       $FF
0007BB4B 01                         	dc.b	$01
0007BB4C E1FC                       	smpsAlterNote       $FC
0007BB4E ECF5                       	smpsPSGAlterVol     $F5
0007BB50 8F02                       	dc.b	nD1, $02
0007BB52 EC04                       	smpsPSGAlterVol     $04
0007BB54 E701                       	dc.b	smpsNoAttack, $01
0007BB56 ECFC                       	smpsPSGAlterVol     $FC
0007BB58 E1FB                       	smpsAlterNote       $FB
0007BB5A 8D06                       	dc.b	nC1, $06
0007BB5C EC04                       	smpsPSGAlterVol     $04
0007BB5E E701                       	dc.b	smpsNoAttack, $01
0007BB60 EC07                       	smpsPSGAlterVol     $07
0007BB62 8006                       	dc.b	nRst, $06
0007BB64 E1FE                       	smpsAlterNote       $FE
0007BB66 01                         	dc.b	$01
0007BB67 E102                       	smpsAlterNote       $02
0007BB69 01                         	dc.b	$01
0007BB6A E1FE                       	smpsAlterNote       $FE
0007BB6C 01                         	dc.b	$01
0007BB6D E1FB                       	smpsAlterNote       $FB
0007BB6F 01                         	dc.b	$01
0007BB70 E1F7                       	smpsAlterNote       $F7
0007BB72 01                         	dc.b	$01
0007BB73 E1FB                       	smpsAlterNote       $FB
0007BB75 01                         	dc.b	$01
0007BB76 E101                       	smpsAlterNote       $01
0007BB78 01                         	dc.b	$01
0007BB79 E102                       	smpsAlterNote       $02
0007BB7B 01                         	dc.b	$01
0007BB7C E1FB                       	smpsAlterNote       $FB
0007BB7E ECF5                       	smpsPSGAlterVol     $F5
0007BB80 8D02                       	dc.b	nC1, $02
0007BB82 EC04                       	smpsPSGAlterVol     $04
0007BB84 E701                       	dc.b	smpsNoAttack, $01
0007BB86 E1FC                       	smpsAlterNote       $FC
0007BB88 ECFC                       	smpsPSGAlterVol     $FC
0007BB8A 8F0D                       	dc.b	nD1, $0D
0007BB8C E1FF                       	smpsAlterNote       $FF
0007BB8E E701                       	dc.b	smpsNoAttack, $01
0007BB90 E103                       	smpsAlterNote       $03
0007BB92 E701                       	dc.b	smpsNoAttack, $01
0007BB94 E1FF                       	smpsAlterNote       $FF
0007BB96 E701                       	dc.b	smpsNoAttack, $01
0007BB98 E1FC                       	smpsAlterNote       $FC
0007BB9A E701                       	dc.b	smpsNoAttack, $01
0007BB9C E1F8                       	smpsAlterNote       $F8
0007BB9E E701                       	dc.b	smpsNoAttack, $01
0007BBA0 E1FC                       	smpsAlterNote       $FC
0007BBA2 E701                       	dc.b	smpsNoAttack, $01
0007BBA4 E102                       	smpsAlterNote       $02
0007BBA6 E701                       	dc.b	smpsNoAttack, $01
0007BBA8 E103                       	smpsAlterNote       $03
0007BBAA E701                       	dc.b	smpsNoAttack, $01
0007BBAC E1FF                       	smpsAlterNote       $FF
0007BBAE E701                       	dc.b	smpsNoAttack, $01
0007BBB0 E1F9                       	smpsAlterNote       $F9
0007BBB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007BBB6 E1FC                       	smpsAlterNote       $FC
0007BBB8 E701                       	dc.b	smpsNoAttack, $01
0007BBBA E102                       	smpsAlterNote       $02
0007BBBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007BBC0 E1FC                       	smpsAlterNote       $FC
0007BBC2 E701                       	dc.b	smpsNoAttack, $01
0007BBC4 E1F9                       	smpsAlterNote       $F9
0007BBC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007BBCA E1FF                       	smpsAlterNote       $FF
0007BBCC EC04                       	smpsPSGAlterVol     $04
0007BBCE E701                       	dc.b	smpsNoAttack, $01
0007BBD0 EC07                       	smpsPSGAlterVol     $07
0007BBD2 E103                       	smpsAlterNote       $03
0007BBD4 8001                       	dc.b	nRst, $01
0007BBD6 E102                       	smpsAlterNote       $02
0007BBD8 01                         	dc.b	$01
0007BBD9 E1FB                       	smpsAlterNote       $FB
0007BBDB 01                         	dc.b	$01
0007BBDC E1F7                       	smpsAlterNote       $F7
0007BBDE 01                         	dc.b	$01
0007BBDF E1FB                       	smpsAlterNote       $FB
0007BBE1 01                         	dc.b	$01
0007BBE2 E102                       	smpsAlterNote       $02
0007BBE4 01                         	dc.b	$01
0007BBE5 E103                       	smpsAlterNote       $03
0007BBE7 01                         	dc.b	$01
0007BBE8 E1FB                       	smpsAlterNote       $FB
0007BBEA ECF5                       	smpsPSGAlterVol     $F5
0007BBEC 8E06                       	dc.b	nCs1, $06
0007BBEE EC04                       	smpsPSGAlterVol     $04
0007BBF0 E701                       	dc.b	smpsNoAttack, $01
0007BBF2 EC07                       	smpsPSGAlterVol     $07
0007BBF4 8003                       	dc.b	nRst, $03
0007BBF6 ECF5                       	smpsPSGAlterVol     $F5
0007BBF8 8E06                       	dc.b	nCs1, $06
0007BBFA EC04                       	smpsPSGAlterVol     $04
0007BBFC E701                       	dc.b	smpsNoAttack, $01
0007BBFE EC07                       	smpsPSGAlterVol     $07
0007BC00 8006                       	dc.b	nRst, $06
0007BC02 E1FE                       	smpsAlterNote       $FE
0007BC04 01                         	dc.b	$01
0007BC05 E102                       	smpsAlterNote       $02
0007BC07 01                         	dc.b	$01
0007BC08 E1FE                       	smpsAlterNote       $FE
0007BC0A 01                         	dc.b	$01
0007BC0B E1F9                       	smpsAlterNote       $F9
0007BC0D 01                         	dc.b	$01
0007BC0E E1FC                       	smpsAlterNote       $FC
0007BC10 ECF5                       	smpsPSGAlterVol     $F5
0007BC12 8F06                       	dc.b	nD1, $06
0007BC14 EC04                       	smpsPSGAlterVol     $04
0007BC16 E701                       	dc.b	smpsNoAttack, $01
0007BC18 EC07                       	smpsPSGAlterVol     $07
0007BC1A 8003                       	dc.b	nRst, $03
0007BC1C ECF5                       	smpsPSGAlterVol     $F5
0007BC1E 8F07                       	dc.b	nD1, $07
0007BC20 EC0B                       	smpsPSGAlterVol     $0B
0007BC22 8006                       	dc.b	nRst, $06
0007BC24 E1FF                       	smpsAlterNote       $FF
0007BC26 01                         	dc.b	$01
0007BC27 E102                       	smpsAlterNote       $02
0007BC29 0101                       	dc.b	$01, $01
0007BC2B E1FB                       	smpsAlterNote       $FB
0007BC2D 01                         	dc.b	$01
0007BC2E ECF5                       	smpsPSGAlterVol     $F5
0007BC30 8E07                       	dc.b	nCs1, $07
0007BC32 EC0B                       	smpsPSGAlterVol     $0B
0007BC34 8004                       	dc.b	nRst, $04
0007BC36 ECF5                       	smpsPSGAlterVol     $F5
0007BC38 8E06                       	dc.b	nCs1, $06
0007BC3A EC04                       	smpsPSGAlterVol     $04
0007BC3C E701                       	dc.b	smpsNoAttack, $01
0007BC3E EC07                       	smpsPSGAlterVol     $07
0007BC40 8006                       	dc.b	nRst, $06
0007BC42 E101                       	smpsAlterNote       $01
0007BC44 01                         	dc.b	$01
0007BC45 E102                       	smpsAlterNote       $02
0007BC47 01                         	dc.b	$01
0007BC48 E1FE                       	smpsAlterNote       $FE
0007BC4A 01                         	dc.b	$01
0007BC4B E1F8                       	smpsAlterNote       $F8
0007BC4D 01                         	dc.b	$01
0007BC4E E1FB                       	smpsAlterNote       $FB
0007BC50 ECF5                       	smpsPSGAlterVol     $F5
0007BC52 8E06                       	dc.b	nCs1, $06
0007BC54 EC04                       	smpsPSGAlterVol     $04
0007BC56 E701                       	dc.b	smpsNoAttack, $01
0007BC58 EC07                       	smpsPSGAlterVol     $07
0007BC5A 8003                       	dc.b	nRst, $03
0007BC5C ECF5                       	smpsPSGAlterVol     $F5
0007BC5E 8E06                       	dc.b	nCs1, $06
0007BC60 EC04                       	smpsPSGAlterVol     $04
0007BC62 E701                       	dc.b	smpsNoAttack, $01
0007BC64 EC07                       	smpsPSGAlterVol     $07
0007BC66 8004                       	dc.b	nRst, $04
0007BC68 E1FC                       	smpsAlterNote       $FC
0007BC6A ECF5                       	smpsPSGAlterVol     $F5
0007BC6C 8F06                       	dc.b	nD1, $06
0007BC6E EC0B                       	smpsPSGAlterVol     $0B
0007BC70 8006                       	dc.b	nRst, $06
0007BC72 E1FF                       	smpsAlterNote       $FF
0007BC74 01                         	dc.b	$01
0007BC75 E102                       	smpsAlterNote       $02
0007BC77 0101                       	dc.b	$01, $01
0007BC79 E1FC                       	smpsAlterNote       $FC
0007BC7B 01                         	dc.b	$01
0007BC7C E1F8                       	smpsAlterNote       $F8
0007BC7E 01                         	dc.b	$01
0007BC7F E1F9                       	smpsAlterNote       $F9
0007BC81 01                         	dc.b	$01
0007BC82 E1FF                       	smpsAlterNote       $FF
0007BC84 01                         	dc.b	$01
0007BC85 E103                       	smpsAlterNote       $03
0007BC87 01                         	dc.b	$01
0007BC88 E1FC                       	smpsAlterNote       $FC
0007BC8A ECF5                       	smpsPSGAlterVol     $F5
0007BC8C 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0007BC90 EC04                       	smpsPSGAlterVol     $04
0007BC92 E701                       	dc.b	smpsNoAttack, $01
0007BC94 EC07                       	smpsPSGAlterVol     $07
0007BC96 8009                       	dc.b	nRst, $09
0007BC98 E1FF                       	smpsAlterNote       $FF
0007BC9A 01                         	dc.b	$01
0007BC9B E102                       	smpsAlterNote       $02
0007BC9D 0101                       	dc.b	$01, $01
0007BC9F E1FC                       	smpsAlterNote       $FC
0007BCA1 01                         	dc.b	$01
0007BCA2 E1F8                       	smpsAlterNote       $F8
0007BCA4 01                         	dc.b	$01
0007BCA5 E1F9                       	smpsAlterNote       $F9
0007BCA7 01                         	dc.b	$01
0007BCA8 E1FF                       	smpsAlterNote       $FF
0007BCAA 01                         	dc.b	$01
0007BCAB E103                       	smpsAlterNote       $03
0007BCAD 01                         	dc.b	$01
0007BCAE E1FF                       	smpsAlterNote       $FF
0007BCB0 01                         	dc.b	$01
0007BCB1 E1FC                       	smpsAlterNote       $FC
0007BCB3 01                         	dc.b	$01
0007BCB4 E1F8                       	smpsAlterNote       $F8
0007BCB6 01                         	dc.b	$01
0007BCB7 E1FC                       	smpsAlterNote       $FC
0007BCB9 01                         	dc.b	$01
0007BCBA E102                       	smpsAlterNote       $02
0007BCBC 01                         	dc.b	$01
0007BCBD E103                       	smpsAlterNote       $03
0007BCBF 01                         	dc.b	$01
0007BCC0 E1FF                       	smpsAlterNote       $FF
0007BCC2 01                         	dc.b	$01
0007BCC3 E1FC                       	smpsAlterNote       $FC
0007BCC5 ECF5                       	smpsPSGAlterVol     $F5
0007BCC7 8F03                       	dc.b	nD1, $03
0007BCC9 E1FB                       	smpsAlterNote       $FB
0007BCCB 8D06                       	dc.b	nC1, $06
0007BCCD EC04                       	smpsPSGAlterVol     $04
0007BCCF E701                       	dc.b	smpsNoAttack, $01
0007BCD1 EC07                       	smpsPSGAlterVol     $07
0007BCD3 8006                       	dc.b	nRst, $06
0007BCD5 E1FE                       	smpsAlterNote       $FE
0007BCD7 01                         	dc.b	$01
0007BCD8 E102                       	smpsAlterNote       $02
0007BCDA 01                         	dc.b	$01
0007BCDB E101                       	smpsAlterNote       $01
0007BCDD 01                         	dc.b	$01
0007BCDE E1FB                       	smpsAlterNote       $FB
0007BCE0 01                         	dc.b	$01
0007BCE1 E1F7                       	smpsAlterNote       $F7
0007BCE3 01                         	dc.b	$01
0007BCE4 E1FB                       	smpsAlterNote       $FB
0007BCE6 01                         	dc.b	$01
0007BCE7 E1FE                       	smpsAlterNote       $FE
0007BCE9 01                         	dc.b	$01
0007BCEA E102                       	smpsAlterNote       $02
0007BCEC 01                         	dc.b	$01
0007BCED E1FB                       	smpsAlterNote       $FB
0007BCEF ECF5                       	smpsPSGAlterVol     $F5
0007BCF1 8D03                       	dc.b	nC1, $03
0007BCF3 E1FC                       	smpsAlterNote       $FC
0007BCF5 8F0D                       	dc.b	nD1, $0D
0007BCF7 E1FF                       	smpsAlterNote       $FF
0007BCF9 E701                       	dc.b	smpsNoAttack, $01
0007BCFB E103                       	smpsAlterNote       $03
0007BCFD E701                       	dc.b	smpsNoAttack, $01
0007BCFF E1FF                       	smpsAlterNote       $FF
0007BD01 E701                       	dc.b	smpsNoAttack, $01
0007BD03 E1FC                       	smpsAlterNote       $FC
0007BD05 E701                       	dc.b	smpsNoAttack, $01
0007BD07 E1F8                       	smpsAlterNote       $F8
0007BD09 E701                       	dc.b	smpsNoAttack, $01
0007BD0B E1FC                       	smpsAlterNote       $FC
0007BD0D E701                       	dc.b	smpsNoAttack, $01
0007BD0F E102                       	smpsAlterNote       $02
0007BD11 E701                       	dc.b	smpsNoAttack, $01
0007BD13 E103                       	smpsAlterNote       $03
0007BD15 E701                       	dc.b	smpsNoAttack, $01
0007BD17 E1FF                       	smpsAlterNote       $FF
0007BD19 E701                       	dc.b	smpsNoAttack, $01
0007BD1B E1F9                       	smpsAlterNote       $F9
0007BD1D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007BD21 E1FC                       	smpsAlterNote       $FC
0007BD23 E701                       	dc.b	smpsNoAttack, $01
0007BD25 E102                       	smpsAlterNote       $02
0007BD27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007BD2B E1FF                       	smpsAlterNote       $FF
0007BD2D E701                       	dc.b	smpsNoAttack, $01
0007BD2F E1F9                       	smpsAlterNote       $F9
0007BD31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007BD35 E1FF                       	smpsAlterNote       $FF
0007BD37 EC04                       	smpsPSGAlterVol     $04
0007BD39 E701                       	dc.b	smpsNoAttack, $01
0007BD3B EC07                       	smpsPSGAlterVol     $07
0007BD3D E103                       	smpsAlterNote       $03
0007BD3F 8001                       	dc.b	nRst, $01
0007BD41 E102                       	smpsAlterNote       $02
0007BD43 01                         	dc.b	$01
0007BD44 E1FB                       	smpsAlterNote       $FB
0007BD46 01                         	dc.b	$01
0007BD47 E1F7                       	smpsAlterNote       $F7
0007BD49 01                         	dc.b	$01
0007BD4A E1FB                       	smpsAlterNote       $FB
0007BD4C 01                         	dc.b	$01
0007BD4D E1FF                       	smpsAlterNote       $FF
0007BD4F 01                         	dc.b	$01
0007BD50 E103                       	smpsAlterNote       $03
0007BD52 01                         	dc.b	$01
0007BD53 E1FB                       	smpsAlterNote       $FB
0007BD55 ECF5                       	smpsPSGAlterVol     $F5
0007BD57 8E06                       	dc.b	nCs1, $06
0007BD59 EC04                       	smpsPSGAlterVol     $04
0007BD5B E701                       	dc.b	smpsNoAttack, $01
0007BD5D EC07                       	smpsPSGAlterVol     $07
0007BD5F 8003                       	dc.b	nRst, $03
0007BD61 ECF5                       	smpsPSGAlterVol     $F5
0007BD63 8E06                       	dc.b	nCs1, $06
0007BD65 EC04                       	smpsPSGAlterVol     $04
0007BD67 E701                       	dc.b	smpsNoAttack, $01
0007BD69 EC07                       	smpsPSGAlterVol     $07
0007BD6B 8006                       	dc.b	nRst, $06
0007BD6D E1FE                       	smpsAlterNote       $FE
0007BD6F 01                         	dc.b	$01
0007BD70 E102                       	smpsAlterNote       $02
0007BD72 01                         	dc.b	$01
0007BD73 E1FE                       	smpsAlterNote       $FE
0007BD75 01                         	dc.b	$01
0007BD76 E1FC                       	smpsAlterNote       $FC
0007BD78 01                         	dc.b	$01
0007BD79 ECF5                       	smpsPSGAlterVol     $F5
0007BD7B 8F06                       	dc.b	nD1, $06
0007BD7D EC04                       	smpsPSGAlterVol     $04
0007BD7F E701                       	dc.b	smpsNoAttack, $01
0007BD81 EC07                       	smpsPSGAlterVol     $07
0007BD83 8003                       	dc.b	nRst, $03
0007BD85 ECF5                       	smpsPSGAlterVol     $F5
0007BD87 8F07                       	dc.b	nD1, $07
0007BD89 EC0B                       	smpsPSGAlterVol     $0B
0007BD8B 8007                       	dc.b	nRst, $07
0007BD8D E102                       	smpsAlterNote       $02
0007BD8F 0101                       	dc.b	$01, $01
0007BD91 E1FB                       	smpsAlterNote       $FB
0007BD93 01                         	dc.b	$01
0007BD94 E1F8                       	smpsAlterNote       $F8
0007BD96 01                         	dc.b	$01
0007BD97 E1FB                       	smpsAlterNote       $FB
0007BD99 ECF5                       	smpsPSGAlterVol     $F5
0007BD9B 8E06                       	dc.b	nCs1, $06
0007BD9D EC0B                       	smpsPSGAlterVol     $0B
0007BD9F 8004                       	dc.b	nRst, $04
0007BDA1 ECF5                       	smpsPSGAlterVol     $F5
0007BDA3 8E06                       	dc.b	nCs1, $06
0007BDA5 EC04                       	smpsPSGAlterVol     $04
0007BDA7 E701                       	dc.b	smpsNoAttack, $01
0007BDA9 EC07                       	smpsPSGAlterVol     $07
0007BDAB 8006                       	dc.b	nRst, $06
0007BDAD E1FE                       	smpsAlterNote       $FE
0007BDAF 01                         	dc.b	$01
0007BDB0 E102                       	smpsAlterNote       $02
0007BDB2 01                         	dc.b	$01
0007BDB3 E1FE                       	smpsAlterNote       $FE
0007BDB5 01                         	dc.b	$01
0007BDB6 E1F9                       	smpsAlterNote       $F9
0007BDB8 01                         	dc.b	$01
0007BDB9 E1FC                       	smpsAlterNote       $FC
0007BDBB ECF5                       	smpsPSGAlterVol     $F5
0007BDBD 8F06                       	dc.b	nD1, $06
0007BDBF EC04                       	smpsPSGAlterVol     $04
0007BDC1 E701                       	dc.b	smpsNoAttack, $01
0007BDC3 EC07                       	smpsPSGAlterVol     $07
0007BDC5 8003                       	dc.b	nRst, $03
0007BDC7 ECF5                       	smpsPSGAlterVol     $F5
0007BDC9 8F06                       	dc.b	nD1, $06
0007BDCB EC04                       	smpsPSGAlterVol     $04
0007BDCD E701                       	dc.b	smpsNoAttack, $01
0007BDCF EC07                       	smpsPSGAlterVol     $07
0007BDD1 8006                       	dc.b	nRst, $06
0007BDD3 E1FF                       	smpsAlterNote       $FF
0007BDD5 01                         	dc.b	$01
0007BDD6 E103                       	smpsAlterNote       $03
0007BDD8 01                         	dc.b	$01
0007BDD9 E102                       	smpsAlterNote       $02
0007BDDB 01                         	dc.b	$01
0007BDDC E1FB                       	smpsAlterNote       $FB
0007BDDE 01                         	dc.b	$01
0007BDDF ECF5                       	smpsPSGAlterVol     $F5
0007BDE1 8E07                       	dc.b	nCs1, $07
0007BDE3 EC0B                       	smpsPSGAlterVol     $0B
0007BDE5 8004                       	dc.b	nRst, $04
0007BDE7 ECF5                       	smpsPSGAlterVol     $F5
0007BDE9 8E06                       	dc.b	nCs1, $06
0007BDEB EC0B                       	smpsPSGAlterVol     $0B
0007BDED 8007                       	dc.b	nRst, $07
0007BDEF E101                       	smpsAlterNote       $01
0007BDF1 0101                       	dc.b	$01, $01
0007BDF3 E1FE                       	smpsAlterNote       $FE
0007BDF5 01                         	dc.b	$01
0007BDF6 E1F9                       	smpsAlterNote       $F9
0007BDF8 01                         	dc.b	$01
0007BDF9 E1FC                       	smpsAlterNote       $FC
0007BDFB ECF5                       	smpsPSGAlterVol     $F5
0007BDFD 8F06                       	dc.b	nD1, $06
0007BDFF EC04                       	smpsPSGAlterVol     $04
0007BE01 E701                       	dc.b	smpsNoAttack, $01
0007BE03 EC07                       	smpsPSGAlterVol     $07
0007BE05 8003                       	dc.b	nRst, $03
0007BE07 ECF5                       	smpsPSGAlterVol     $F5
0007BE09 8F06                       	dc.b	nD1, $06
0007BE0B EC04                       	smpsPSGAlterVol     $04
0007BE0D E701                       	dc.b	smpsNoAttack, $01
0007BE0F EC07                       	smpsPSGAlterVol     $07
0007BE11 8006                       	dc.b	nRst, $06
0007BE13 E1FF                       	smpsAlterNote       $FF
0007BE15 01                         	dc.b	$01
0007BE16 E103                       	smpsAlterNote       $03
0007BE18 01                         	dc.b	$01
0007BE19 E1FF                       	smpsAlterNote       $FF
0007BE1B 01                         	dc.b	$01
0007BE1C E1FB                       	smpsAlterNote       $FB
0007BE1E 01                         	dc.b	$01
0007BE1F ECF5                       	smpsPSGAlterVol     $F5
0007BE21 8E06                       	dc.b	nCs1, $06
0007BE23 EC04                       	smpsPSGAlterVol     $04
0007BE25 E701                       	dc.b	smpsNoAttack, $01
0007BE27 EC07                       	smpsPSGAlterVol     $07
0007BE29 8003                       	dc.b	nRst, $03
0007BE2B ECF5                       	smpsPSGAlterVol     $F5
0007BE2D 8E07                       	dc.b	nCs1, $07
0007BE2F E1FF                       	smpsAlterNote       $FF
0007BE31 9B06                       	dc.b	nD2, $06
0007BE33 EC04                       	smpsPSGAlterVol     $04
0007BE35 E701                       	dc.b	smpsNoAttack, $01
0007BE37 ECFC                       	smpsPSGAlterVol     $FC
0007BE39 9B03                       	dc.b	nD2, $03
0007BE3B EC04                       	smpsPSGAlterVol     $04
0007BE3D E701                       	dc.b	smpsNoAttack, $01
0007BE3F ECFC                       	smpsPSGAlterVol     $FC
0007BE41 9B02                       	dc.b	nD2, $02
0007BE43 EC04                       	smpsPSGAlterVol     $04
0007BE45 E701                       	dc.b	smpsNoAttack, $01
0007BE47 ECFC                       	smpsPSGAlterVol     $FC
0007BE49 E1FE                       	smpsAlterNote       $FE
0007BE4B 9A03                       	dc.b	nCs2, $03
0007BE4D EC0B                       	smpsPSGAlterVol     $0B
0007BE4F 800A                       	dc.b	nRst, $0A
0007BE51 E102                       	smpsAlterNote       $02
0007BE53 01                         	dc.b	$01
0007BE54 E10A                       	smpsAlterNote       $0A
0007BE56 01                         	dc.b	$01
0007BE57 E102                       	smpsAlterNote       $02
0007BE59 01                         	dc.b	$01
0007BE5A E1F7                       	smpsAlterNote       $F7
0007BE5C 01                         	dc.b	$01
0007BE5D E10A                       	smpsAlterNote       $0A
0007BE5F 01                         	dc.b	$01
0007BE60 E1FC                       	smpsAlterNote       $FC
0007BE62 01                         	dc.b	$01
0007BE63 E108                       	smpsAlterNote       $08
0007BE65 0101                       	dc.b	$01, $01
0007BE67 E102                       	smpsAlterNote       $02
0007BE69 01                         	dc.b	$01
0007BE6A E1F7                       	smpsAlterNote       $F7
0007BE6C 0101                       	dc.b	$01, $01
0007BE6E E1FC                       	smpsAlterNote       $FC
0007BE70 ECF5                       	smpsPSGAlterVol     $F5
0007BE72 8F06                       	dc.b	nD1, $06
0007BE74 EC04                       	smpsPSGAlterVol     $04
0007BE76 E701                       	dc.b	smpsNoAttack, $01
0007BE78 EC07                       	smpsPSGAlterVol     $07
0007BE7A 8003                       	dc.b	nRst, $03
0007BE7C ECF5                       	smpsPSGAlterVol     $F5
0007BE7E 8F06                       	dc.b	nD1, $06
0007BE80 EC04                       	smpsPSGAlterVol     $04
0007BE82 E701                       	dc.b	smpsNoAttack, $01
0007BE84 EC07                       	smpsPSGAlterVol     $07
0007BE86 8006                       	dc.b	nRst, $06
0007BE88 E1FF                       	smpsAlterNote       $FF
0007BE8A 01                         	dc.b	$01
0007BE8B E102                       	smpsAlterNote       $02
0007BE8D 01                         	dc.b	$01
0007BE8E E101                       	smpsAlterNote       $01
0007BE90 01                         	dc.b	$01
0007BE91 E1FC                       	smpsAlterNote       $FC
0007BE93 01                         	dc.b	$01
0007BE94 ECF5                       	smpsPSGAlterVol     $F5
0007BE96 9007                       	dc.b	nEb1, $07
0007BE98 EC0B                       	smpsPSGAlterVol     $0B
0007BE9A 8004                       	dc.b	nRst, $04
0007BE9C ECF5                       	smpsPSGAlterVol     $F5
0007BE9E 9006                       	dc.b	nEb1, $06
0007BEA0 EC0B                       	smpsPSGAlterVol     $0B
0007BEA2 8007                       	dc.b	nRst, $07
0007BEA4 E103                       	smpsAlterNote       $03
0007BEA6 0101                       	dc.b	$01, $01
0007BEA8 E1FF                       	smpsAlterNote       $FF
0007BEAA 01                         	dc.b	$01
0007BEAB E1F9                       	smpsAlterNote       $F9
0007BEAD 01                         	dc.b	$01
0007BEAE E1FC                       	smpsAlterNote       $FC
0007BEB0 ECF5                       	smpsPSGAlterVol     $F5
0007BEB2 8F06                       	dc.b	nD1, $06
0007BEB4 EC04                       	smpsPSGAlterVol     $04
0007BEB6 E701                       	dc.b	smpsNoAttack, $01
0007BEB8 EC07                       	smpsPSGAlterVol     $07
0007BEBA 8003                       	dc.b	nRst, $03
0007BEBC ECF5                       	smpsPSGAlterVol     $F5
0007BEBE 8F06                       	dc.b	nD1, $06
0007BEC0 EC04                       	smpsPSGAlterVol     $04
0007BEC2 E701                       	dc.b	smpsNoAttack, $01
0007BEC4 EC07                       	smpsPSGAlterVol     $07
0007BEC6 8006                       	dc.b	nRst, $06
0007BEC8 E1FF                       	smpsAlterNote       $FF
0007BECA 01                         	dc.b	$01
0007BECB E103                       	smpsAlterNote       $03
0007BECD 01                         	dc.b	$01
0007BECE E1FF                       	smpsAlterNote       $FF
0007BED0 01                         	dc.b	$01
0007BED1 E1F9                       	smpsAlterNote       $F9
0007BED3 01                         	dc.b	$01
0007BED4 E1FC                       	smpsAlterNote       $FC
0007BED6 ECF5                       	smpsPSGAlterVol     $F5
0007BED8 8F06                       	dc.b	nD1, $06
0007BEDA EC04                       	smpsPSGAlterVol     $04
0007BEDC E701                       	dc.b	smpsNoAttack, $01
0007BEDE EC07                       	smpsPSGAlterVol     $07
0007BEE0 8003                       	dc.b	nRst, $03
0007BEE2 ECF5                       	smpsPSGAlterVol     $F5
0007BEE4 8F07                       	dc.b	nD1, $07
0007BEE6 EC0B                       	smpsPSGAlterVol     $0B
0007BEE8 8006                       	dc.b	nRst, $06
0007BEEA E1FF                       	smpsAlterNote       $FF
0007BEEC 01                         	dc.b	$01
0007BEED E102                       	smpsAlterNote       $02
0007BEEF 0101                       	dc.b	$01, $01
0007BEF1 E1FC                       	smpsAlterNote       $FC
0007BEF3 01                         	dc.b	$01
0007BEF4 ECF5                       	smpsPSGAlterVol     $F5
0007BEF6 8F07                       	dc.b	nD1, $07
0007BEF8 EC0B                       	smpsPSGAlterVol     $0B
0007BEFA 8004                       	dc.b	nRst, $04
0007BEFC ECF5                       	smpsPSGAlterVol     $F5
0007BEFE 8F06                       	dc.b	nD1, $06
0007BF00 EC04                       	smpsPSGAlterVol     $04
0007BF02 E701                       	dc.b	smpsNoAttack, $01
0007BF04 EC07                       	smpsPSGAlterVol     $07
0007BF06 8006                       	dc.b	nRst, $06
0007BF08 E101                       	smpsAlterNote       $01
0007BF0A 01                         	dc.b	$01
0007BF0B E102                       	smpsAlterNote       $02
0007BF0D 01                         	dc.b	$01
0007BF0E E1FF                       	smpsAlterNote       $FF
0007BF10 01                         	dc.b	$01
0007BF11 E1F9                       	smpsAlterNote       $F9
0007BF13 01                         	dc.b	$01
0007BF14 E1FC                       	smpsAlterNote       $FC
0007BF16 ECF5                       	smpsPSGAlterVol     $F5
0007BF18 9006                       	dc.b	nEb1, $06
0007BF1A EC04                       	smpsPSGAlterVol     $04
0007BF1C E701                       	dc.b	smpsNoAttack, $01
0007BF1E EC07                       	smpsPSGAlterVol     $07
0007BF20 8003                       	dc.b	nRst, $03
0007BF22 ECF5                       	smpsPSGAlterVol     $F5
0007BF24 9006                       	dc.b	nEb1, $06
0007BF26 EC04                       	smpsPSGAlterVol     $04
0007BF28 E701                       	dc.b	smpsNoAttack, $01
0007BF2A EC07                       	smpsPSGAlterVol     $07
0007BF2C 8006                       	dc.b	nRst, $06
0007BF2E E100                       	smpsAlterNote       $00
0007BF30 01                         	dc.b	$01
0007BF31 E102                       	smpsAlterNote       $02
0007BF33 01                         	dc.b	$01
0007BF34 E100                       	smpsAlterNote       $00
0007BF36 01                         	dc.b	$01
0007BF37 E1FF                       	smpsAlterNote       $FF
0007BF39 01                         	dc.b	$01
0007BF3A ECF5                       	smpsPSGAlterVol     $F5
0007BF3C 9B06                       	dc.b	nD2, $06
0007BF3E EC04                       	smpsPSGAlterVol     $04
0007BF40 E701                       	dc.b	smpsNoAttack, $01
0007BF42 EC07                       	smpsPSGAlterVol     $07
0007BF44 8003                       	dc.b	nRst, $03
0007BF46 ECF5                       	smpsPSGAlterVol     $F5
0007BF48 9B07                       	dc.b	nD2, $07
0007BF4A EC0B                       	smpsPSGAlterVol     $0B
0007BF4C 8007                       	dc.b	nRst, $07
0007BF4E E105                       	smpsAlterNote       $05
0007BF50 0101                       	dc.b	$01, $01
0007BF52 E1FF                       	smpsAlterNote       $FF
0007BF54 01                         	dc.b	$01
0007BF55 E1FC                       	smpsAlterNote       $FC
0007BF57 01                         	dc.b	$01
0007BF58 E1FF                       	smpsAlterNote       $FF
0007BF5A ECF5                       	smpsPSGAlterVol     $F5
0007BF5C 9B06                       	dc.b	nD2, $06
0007BF5E EC0B                       	smpsPSGAlterVol     $0B
0007BF60 8004                       	dc.b	nRst, $04
0007BF62 ECF5                       	smpsPSGAlterVol     $F5
0007BF64 9B06                       	dc.b	nD2, $06
0007BF66 EC04                       	smpsPSGAlterVol     $04
0007BF68 E701                       	dc.b	smpsNoAttack, $01
0007BF6A EC07                       	smpsPSGAlterVol     $07
0007BF6C 8006                       	dc.b	nRst, $06
0007BF6E E102                       	smpsAlterNote       $02
0007BF70 01                         	dc.b	$01
0007BF71 E106                       	smpsAlterNote       $06
0007BF73 01                         	dc.b	$01
0007BF74 E102                       	smpsAlterNote       $02
0007BF76 01                         	dc.b	$01
0007BF77 E1FC                       	smpsAlterNote       $FC
0007BF79 01                         	dc.b	$01
0007BF7A E1FF                       	smpsAlterNote       $FF
0007BF7C ECF5                       	smpsPSGAlterVol     $F5
0007BF7E 9B06                       	dc.b	nD2, $06
0007BF80 EC04                       	smpsPSGAlterVol     $04
0007BF82 E701                       	dc.b	smpsNoAttack, $01
0007BF84 EC07                       	smpsPSGAlterVol     $07
0007BF86 8003                       	dc.b	nRst, $03
0007BF88 ECF5                       	smpsPSGAlterVol     $F5
0007BF8A 9B07                       	dc.b	nD2, $07
0007BF8C EC0B                       	smpsPSGAlterVol     $0B
0007BF8E 8006                       	dc.b	nRst, $06
0007BF90 E102                       	smpsAlterNote       $02
0007BF92 01                         	dc.b	$01
0007BF93 E105                       	smpsAlterNote       $05
0007BF95 0101                       	dc.b	$01, $01
0007BF97 E1FF                       	smpsAlterNote       $FF
0007BF99 01                         	dc.b	$01
0007BF9A ECF5                       	smpsPSGAlterVol     $F5
0007BF9C 9B07                       	dc.b	nD2, $07
0007BF9E EC0B                       	smpsPSGAlterVol     $0B
0007BFA0 8004                       	dc.b	nRst, $04
0007BFA2 ECF5                       	smpsPSGAlterVol     $F5
0007BFA4 9B06                       	dc.b	nD2, $06
0007BFA6 EC04                       	smpsPSGAlterVol     $04
0007BFA8 E701                       	dc.b	smpsNoAttack, $01
0007BFAA EC07                       	smpsPSGAlterVol     $07
0007BFAC 8006                       	dc.b	nRst, $06
0007BFAE E105                       	smpsAlterNote       $05
0007BFB0 0101                       	dc.b	$01, $01
0007BFB2 E102                       	smpsAlterNote       $02
0007BFB4 01                         	dc.b	$01
0007BFB5 E1FC                       	smpsAlterNote       $FC
0007BFB7 01                         	dc.b	$01
0007BFB8 E1FF                       	smpsAlterNote       $FF
0007BFBA ECF5                       	smpsPSGAlterVol     $F5
0007BFBC 9B06                       	dc.b	nD2, $06
0007BFBE EC04                       	smpsPSGAlterVol     $04
0007BFC0 E701                       	dc.b	smpsNoAttack, $01
0007BFC2 EC07                       	smpsPSGAlterVol     $07
0007BFC4 8003                       	dc.b	nRst, $03
0007BFC6 ECF5                       	smpsPSGAlterVol     $F5
0007BFC8 9B06                       	dc.b	nD2, $06
0007BFCA EC04                       	smpsPSGAlterVol     $04
0007BFCC E701                       	dc.b	smpsNoAttack, $01
0007BFCE EC07                       	smpsPSGAlterVol     $07
0007BFD0 8006                       	dc.b	nRst, $06
0007BFD2 E102                       	smpsAlterNote       $02
0007BFD4 01                         	dc.b	$01
0007BFD5 E106                       	smpsAlterNote       $06
0007BFD7 01                         	dc.b	$01
0007BFD8 E102                       	smpsAlterNote       $02
0007BFDA 01                         	dc.b	$01
0007BFDB E1FF                       	smpsAlterNote       $FF
0007BFDD 01                         	dc.b	$01
0007BFDE ECF5                       	smpsPSGAlterVol     $F5
0007BFE0 9B06                       	dc.b	nD2, $06
0007BFE2 EC04                       	smpsPSGAlterVol     $04
0007BFE4 E701                       	dc.b	smpsNoAttack, $01
0007BFE6 EC07                       	smpsPSGAlterVol     $07
0007BFE8 8003                       	dc.b	nRst, $03
0007BFEA ECF5                       	smpsPSGAlterVol     $F5
0007BFEC 9B07                       	dc.b	nD2, $07
0007BFEE EC0B                       	smpsPSGAlterVol     $0B
0007BFF0 8007                       	dc.b	nRst, $07
0007BFF2 E107                       	smpsAlterNote       $07
0007BFF4 0101                       	dc.b	$01, $01
0007BFF6 E1FE                       	smpsAlterNote       $FE
0007BFF8 01                         	dc.b	$01
0007BFF9 E1FA                       	smpsAlterNote       $FA
0007BFFB 0101                       	dc.b	$01, $01
0007BFFD E103                       	smpsAlterNote       $03
0007BFFF 01                         	dc.b	$01
0007C000 E109                       	smpsAlterNote       $09
0007C002 01                         	dc.b	$01
0007C003 E107                       	smpsAlterNote       $07
0007C005 01                         	dc.b	$01
0007C006 E1FE                       	smpsAlterNote       $FE
0007C008 01                         	dc.b	$01
0007C009 E108                       	smpsAlterNote       $08
0007C00B 01                         	dc.b	$01
0007C00C E1FD                       	smpsAlterNote       $FD
0007C00E ECF5                       	smpsPSGAlterVol     $F5
0007C010 940E                       	dc.b	nG1, $0E
0007C012 E103                       	smpsAlterNote       $03
0007C014 EC0B                       	smpsPSGAlterVol     $0B
0007C016 8001 01                    	dc.b	nRst, $01, $01
0007C019 E1FD                       	smpsAlterNote       $FD
0007C01B 01                         	dc.b	$01
0007C01C E1FB                       	smpsAlterNote       $FB
0007C01E 0101                       	dc.b	$01, $01
0007C020 E100                       	smpsAlterNote       $00
0007C022 01                         	dc.b	$01
0007C023 E103                       	smpsAlterNote       $03
0007C025 01                         	dc.b	$01
0007C026 E100                       	smpsAlterNote       $00
0007C028 01                         	dc.b	$01
0007C029 E1FD                       	smpsAlterNote       $FD
0007C02B 01                         	dc.b	$01
0007C02C E1FA                       	smpsAlterNote       $FA
0007C02E 01                         	dc.b	$01
0007C02F E1FD                       	smpsAlterNote       $FD
0007C031 01                         	dc.b	$01
0007C032 E103                       	smpsAlterNote       $03
0007C034 0101                       	dc.b	$01, $01
0007C036 E100                       	smpsAlterNote       $00
0007C038 01                         	dc.b	$01
0007C039 E1FE                       	smpsAlterNote       $FE
0007C03B ECF5                       	smpsPSGAlterVol     $F5
0007C03D 960D                       	dc.b	nA1, $0D
0007C03F E104                       	smpsAlterNote       $04
0007C041 EC0B                       	smpsPSGAlterVol     $0B
0007C043 8001 01                    	dc.b	nRst, $01, $01
0007C046 E101                       	smpsAlterNote       $01
0007C048 01                         	dc.b	$01
0007C049 E1FB                       	smpsAlterNote       $FB
0007C04B 0101                       	dc.b	$01, $01
0007C04D E1FE                       	smpsAlterNote       $FE
0007C04F 01                         	dc.b	$01
0007C050 E104                       	smpsAlterNote       $04
0007C052 0101                       	dc.b	$01, $01
0007C054 E1FE                       	smpsAlterNote       $FE
0007C056 01                         	dc.b	$01
0007C057 E1FB                       	smpsAlterNote       $FB
0007C059 0101                       	dc.b	$01, $01
0007C05B E101                       	smpsAlterNote       $01
0007C05D 01                         	dc.b	$01
0007C05E E104                       	smpsAlterNote       $04
0007C060 0101                       	dc.b	$01, $01
0007C062 E1FE                       	smpsAlterNote       $FE
0007C064 ECF5                       	smpsPSGAlterVol     $F5
0007C066 970D                       	dc.b	nBb1, $0D
0007C068 E101                       	smpsAlterNote       $01
0007C06A EC04                       	smpsPSGAlterVol     $04
0007C06C E701                       	dc.b	smpsNoAttack, $01
0007C06E EC07                       	smpsPSGAlterVol     $07
0007C070 E104                       	smpsAlterNote       $04
0007C072 8001                       	dc.b	nRst, $01
0007C074 E103                       	smpsAlterNote       $03
0007C076 01                         	dc.b	$01
0007C077 E1FE                       	smpsAlterNote       $FE
0007C079 01                         	dc.b	$01
0007C07A E1FA                       	smpsAlterNote       $FA
0007C07C 01                         	dc.b	$01
0007C07D E1FE                       	smpsAlterNote       $FE
0007C07F 01                         	dc.b	$01
0007C080 E101                       	smpsAlterNote       $01
0007C082 01                         	dc.b	$01
0007C083 E104                       	smpsAlterNote       $04
0007C085 01                         	dc.b	$01
0007C086 E101                       	smpsAlterNote       $01
0007C088 01                         	dc.b	$01
0007C089 E1FB                       	smpsAlterNote       $FB
0007C08B 01                         	dc.b	$01
0007C08C E1FA                       	smpsAlterNote       $FA
0007C08E 01                         	dc.b	$01
0007C08F E1FE                       	smpsAlterNote       $FE
0007C091 01                         	dc.b	$01
0007C092 E103                       	smpsAlterNote       $03
0007C094 0101                       	dc.b	$01, $01
0007C096 E101                       	smpsAlterNote       $01
0007C098 01                         	dc.b	$01
0007C099 E1FE                       	smpsAlterNote       $FE
0007C09B ECF5                       	smpsPSGAlterVol     $F5
0007C09D 990D                       	dc.b	nC2, $0D
0007C09F E104                       	smpsAlterNote       $04
0007C0A1 EC0B                       	smpsPSGAlterVol     $0B
0007C0A3 8001 01                    	dc.b	nRst, $01, $01
0007C0A6 E102                       	smpsAlterNote       $02
0007C0A8 01                         	dc.b	$01
0007C0A9 E1FC                       	smpsAlterNote       $FC
0007C0AB 0101                       	dc.b	$01, $01
0007C0AD E102                       	smpsAlterNote       $02
0007C0AF 01                         	dc.b	$01
0007C0B0 E104                       	smpsAlterNote       $04
0007C0B2 01                         	dc.b	$01
0007C0B3 E1FF                       	smpsAlterNote       $FF
0007C0B5 ECF5                       	smpsPSGAlterVol     $F5
0007C0B7 9B06                       	dc.b	nD2, $06
0007C0B9 EC04                       	smpsPSGAlterVol     $04
0007C0BB E701                       	dc.b	smpsNoAttack, $01
0007C0BD EC07                       	smpsPSGAlterVol     $07
0007C0BF 8003                       	dc.b	nRst, $03
0007C0C1 ECF5                       	smpsPSGAlterVol     $F5
0007C0C3 9B07                       	dc.b	nD2, $07
0007C0C5 EC0B                       	smpsPSGAlterVol     $0B
0007C0C7 8006                       	dc.b	nRst, $06
0007C0C9 E101                       	smpsAlterNote       $01
0007C0CB 01                         	dc.b	$01
0007C0CC E104                       	smpsAlterNote       $04
0007C0CE 0101                       	dc.b	$01, $01
0007C0D0 E1FE                       	smpsAlterNote       $FE
0007C0D2 01                         	dc.b	$01
0007C0D3 E1FC                       	smpsAlterNote       $FC
0007C0D5 01                         	dc.b	$01
0007C0D6 E1FE                       	smpsAlterNote       $FE
0007C0D8 ECF5                       	smpsPSGAlterVol     $F5
0007C0DA 9C06                       	dc.b	nEb2, $06
0007C0DC EC0B                       	smpsPSGAlterVol     $0B
0007C0DE 8004                       	dc.b	nRst, $04
0007C0E0 ECF5                       	smpsPSGAlterVol     $F5
0007C0E2 9C06                       	dc.b	nEb2, $06
0007C0E4 EC04                       	smpsPSGAlterVol     $04
0007C0E6 E701                       	dc.b	smpsNoAttack, $01
0007C0E8 EC07                       	smpsPSGAlterVol     $07
0007C0EA 8006                       	dc.b	nRst, $06
0007C0EC E105                       	smpsAlterNote       $05
0007C0EE 01                         	dc.b	$01
0007C0EF E106                       	smpsAlterNote       $06
0007C0F1 01                         	dc.b	$01
0007C0F2 E102                       	smpsAlterNote       $02
0007C0F4 01                         	dc.b	$01
0007C0F5 E1FB                       	smpsAlterNote       $FB
0007C0F7 01                         	dc.b	$01
0007C0F8 E1FF                       	smpsAlterNote       $FF
0007C0FA ECF5                       	smpsPSGAlterVol     $F5
0007C0FC 9B06                       	dc.b	nD2, $06
0007C0FE EC04                       	smpsPSGAlterVol     $04
0007C100 E701                       	dc.b	smpsNoAttack, $01
0007C102 EC07                       	smpsPSGAlterVol     $07
0007C104 8003                       	dc.b	nRst, $03
0007C106 ECF5                       	smpsPSGAlterVol     $F5
0007C108 9B06                       	dc.b	nD2, $06
0007C10A EC04                       	smpsPSGAlterVol     $04
0007C10C E701                       	dc.b	smpsNoAttack, $01
0007C10E EC07                       	smpsPSGAlterVol     $07
0007C110 8006                       	dc.b	nRst, $06
0007C112 E101                       	smpsAlterNote       $01
0007C114 01                         	dc.b	$01
0007C115 E105                       	smpsAlterNote       $05
0007C117 01                         	dc.b	$01
0007C118 E104                       	smpsAlterNote       $04
0007C11A 01                         	dc.b	$01
0007C11B E1FE                       	smpsAlterNote       $FE
0007C11D 01                         	dc.b	$01
0007C11E ECF5                       	smpsPSGAlterVol     $F5
0007C120 9C07                       	dc.b	nEb2, $07
0007C122 EC0B                       	smpsPSGAlterVol     $0B
0007C124 8004                       	dc.b	nRst, $04
0007C126 ECF5                       	smpsPSGAlterVol     $F5
0007C128 9C06                       	dc.b	nEb2, $06
0007C12A EC0B                       	smpsPSGAlterVol     $0B
0007C12C 8007                       	dc.b	nRst, $07
0007C12E E105                       	smpsAlterNote       $05
0007C130 0101                       	dc.b	$01, $01
0007C132 E102                       	smpsAlterNote       $02
0007C134 01                         	dc.b	$01
0007C135 E1FB                       	smpsAlterNote       $FB
0007C137 01                         	dc.b	$01
0007C138 E1FF                       	smpsAlterNote       $FF
0007C13A ECF5                       	smpsPSGAlterVol     $F5
0007C13C 9B06                       	dc.b	nD2, $06
0007C13E EC04                       	smpsPSGAlterVol     $04
0007C140 E701                       	dc.b	smpsNoAttack, $01
0007C142 EC07                       	smpsPSGAlterVol     $07
0007C144 8003                       	dc.b	nRst, $03
0007C146 ECF5                       	smpsPSGAlterVol     $F5
0007C148 9B06                       	dc.b	nD2, $06
0007C14A EC04                       	smpsPSGAlterVol     $04
0007C14C E701                       	dc.b	smpsNoAttack, $01
0007C14E EC07                       	smpsPSGAlterVol     $07
0007C150 8006                       	dc.b	nRst, $06
0007C152 E101                       	smpsAlterNote       $01
0007C154 01                         	dc.b	$01
0007C155 E105                       	smpsAlterNote       $05
0007C157 01                         	dc.b	$01
0007C158 E101                       	smpsAlterNote       $01
0007C15A 01                         	dc.b	$01
0007C15B E1FC                       	smpsAlterNote       $FC
0007C15D 01                         	dc.b	$01
0007C15E E1FE                       	smpsAlterNote       $FE
0007C160 ECF5                       	smpsPSGAlterVol     $F5
0007C162 9C06                       	dc.b	nEb2, $06
0007C164 EC04                       	smpsPSGAlterVol     $04
0007C166 E701                       	dc.b	smpsNoAttack, $01
0007C168 EC07                       	smpsPSGAlterVol     $07
0007C16A 8003                       	dc.b	nRst, $03
0007C16C ECF5                       	smpsPSGAlterVol     $F5
0007C16E 9C07                       	dc.b	nEb2, $07
0007C170 EC0B                       	smpsPSGAlterVol     $0B
0007C172 8006                       	dc.b	nRst, $06
0007C174 E102                       	smpsAlterNote       $02
0007C176 01                         	dc.b	$01
0007C177 E105                       	smpsAlterNote       $05
0007C179 0101                       	dc.b	$01, $01
0007C17B E1FF                       	smpsAlterNote       $FF
0007C17D 01                         	dc.b	$01
0007C17E ECF5                       	smpsPSGAlterVol     $F5
0007C180 9B07                       	dc.b	nD2, $07
0007C182 EC0B                       	smpsPSGAlterVol     $0B
0007C184 8004                       	dc.b	nRst, $04
0007C186 ECF5                       	smpsPSGAlterVol     $F5
0007C188 9B06                       	dc.b	nD2, $06
0007C18A EC04                       	smpsPSGAlterVol     $04
0007C18C E701                       	dc.b	smpsNoAttack, $01
0007C18E EC07                       	smpsPSGAlterVol     $07
0007C190 8002                       	dc.b	nRst, $02
0007C192 E1FC                       	smpsAlterNote       $FC
0007C194 ECF5                       	smpsPSGAlterVol     $F5
0007C196 9006                       	dc.b	nEb1, $06
0007C198 EC04                       	smpsPSGAlterVol     $04
0007C19A E701                       	dc.b	smpsNoAttack, $01
0007C19C ECFC                       	smpsPSGAlterVol     $FC
0007C19E 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
0007C1A2 EC04                       	smpsPSGAlterVol     $04
0007C1A4 E701                       	dc.b	smpsNoAttack, $01
0007C1A6 E1FD                       	smpsAlterNote       $FD
0007C1A8 ECFC                       	smpsPSGAlterVol     $FC
0007C1AA 9402                       	dc.b	nG1, $02
0007C1AC EC04                       	smpsPSGAlterVol     $04
0007C1AE E701                       	dc.b	smpsNoAttack, $01
0007C1B0 E1FE                       	smpsAlterNote       $FE
0007C1B2 ECFC                       	smpsPSGAlterVol     $FC
0007C1B4 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0007C1B8 EC04                       	smpsPSGAlterVol     $04
0007C1BA E701                       	dc.b	smpsNoAttack, $01
0007C1BC EC07                       	smpsPSGAlterVol     $07
0007C1BE 8008                       	dc.b	nRst, $08
0007C1C0 F6F4 F3                    	smpsJump            music84_Jump06
0007C1C3                            
0007C1C3                            ; PSG3 Data
0007C1C3                            music84_PSG3:
0007C1C3 F500                       	smpsPSGvoice        $00
0007C1C5 E1FF                       	smpsAlterNote       $FF
0007C1C7 EC0F                       	smpsPSGAlterVol     $0F
0007C1C9 803A                       	dc.b	nRst, $3A
0007C1CB                            
0007C1CB                            music84_Jump05:
0007C1CB 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
0007C1D7 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
0007C1E1 F6FF E8                    	smpsJump            music84_Jump05
0007C1E4                            
0007C1E4                            ; DAC Data
0007C1E4                            music84_DAC:
0007C1E4 E0C0                       	smpsPan             panCenter, $00
0007C1E6 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0007C1F2 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
0007C1FE 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0007C20A 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0007C216 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0007C222 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
0007C22E 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0007C23A 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0007C246 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0007C252 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
0007C25E 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0007C26A 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0007C276 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0007C282 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0007C28E 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
0007C29A 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
0007C2A6 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
0007C2B2 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
0007C2BE 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0007C2CA 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0007C2D6 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0007C2E2 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0007C2EE 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0007C2FA 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0007C306 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0007C312 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
0007C31E 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0007C32A 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0007C336 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0007C342 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0007C34E 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0007C35A 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0007C366 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0007C372 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
0007C37E 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
0007C38A 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0007C396 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0007C3A2 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
0007C3AE 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0007C3BA 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0007C3C6 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0007C3D2 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
0007C3DE 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0007C3EA 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0007C3F6 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0007C402 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0007C40E 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0007C41A 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0007C426 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0007C432 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0007C43E 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0007C44A 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0007C456 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0007C462 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
0007C46E 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0007C47A 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0007C486 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0007C492 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0007C49E 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0007C4AA 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0007C4B6 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0007C4C2 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
0007C4CE 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0007C4DA 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0007C4E6 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0007C4F2 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
0007C4FE 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0007C50A 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0007C516 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0007C522 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0007C52E 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0007C53A 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0007C546 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0007C552 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
0007C55E 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0007C56A E0C0                       	smpsPan             panCenter, $00
0007C56C F2                         	smpsStop
0007C56D                            
0007C56D                            music84_Voices:
0007C56D                            ;	Voice $00
0007C56D                            ;	$3D
0007C56D                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
0007C56D                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
0007C56D                            	smpsVcAlgorithm     $05
0007C56D                            	smpsVcFeedback      $07
0007C56D                            	smpsVcUnusedBits    $00
0007C56D                            	smpsVcDetune        $05, $04, $03, $04
0007C56D                            	smpsVcCoarseFreq    $01, $01, $01, $01
0007C56D                            	smpsVcRateScale     $00, $00, $00, $00
0007C56D                            	smpsVcAttackRate    $11, $11, $11, $11
0007C56D                            	smpsVcAmpMod        $00, $00, $00, $00
0007C56D                            	smpsVcDecayRate1    $00, $00, $00, $0A
0007C56D                            	smpsVcDecayRate2    $00, $00, $00, $0B
0007C56D                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0007C56D                            	smpsVcReleaseRate   $08, $08, $08, $07
0007C56D 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0007C586                            
0007C586                            ;	Voice $01
0007C586                            ;	$04
0007C586                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0007C586                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0007C586                            	smpsVcAlgorithm     $04
0007C586                            	smpsVcFeedback      $00
0007C586                            	smpsVcUnusedBits    $00
0007C586                            	smpsVcDetune        $04, $03, $04, $05
0007C586                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0007C586                            	smpsVcRateScale     $00, $01, $00, $01
0007C586                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0007C586                            	smpsVcAmpMod        $00, $00, $00, $00
0007C586                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0007C586                            	smpsVcDecayRate2    $05, $00, $05, $00
0007C586                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0007C586                            	smpsVcReleaseRate   $06, $06, $06, $06
0007C586 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0007C59F                            
0007C59F                            ;	Voice $02
0007C59F                            ;	$30
0007C59F                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0007C59F                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0007C59F                            	smpsVcAlgorithm     $00
0007C59F                            	smpsVcFeedback      $06
0007C59F                            	smpsVcUnusedBits    $00
0007C59F                            	smpsVcDetune        $04, $02, $00, $06
0007C59F                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0007C59F                            	smpsVcRateScale     $00, $00, $00, $00
0007C59F                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0007C59F                            	smpsVcAmpMod        $00, $00, $00, $00
0007C59F                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0007C59F                            	smpsVcDecayRate2    $01, $01, $01, $01
0007C59F                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0007C59F                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0007C59F 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0007C5B8                            
0007C5B8                            ;	Voice $03
0007C5B8                            ;	$3A
0007C5B8                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0007C5B8                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0007C5B8                            	smpsVcAlgorithm     $02
0007C5B8                            	smpsVcFeedback      $07
0007C5B8                            	smpsVcUnusedBits    $00
0007C5B8                            	smpsVcDetune        $04, $06, $02, $00
0007C5B8                            	smpsVcCoarseFreq    $01, $01, $01, $01
0007C5B8                            	smpsVcRateScale     $00, $00, $00, $00
0007C5B8                            	smpsVcAttackRate    $18, $19, $14, $14
0007C5B8                            	smpsVcAmpMod        $00, $00, $00, $00
0007C5B8                            	smpsVcDecayRate1    $09, $0D, $09, $09
0007C5B8                            	smpsVcDecayRate2    $00, $00, $00, $00
0007C5B8                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0007C5B8                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0007C5B8 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0007C5D1                            
0007C5D1                            ;	Voice $04
0007C5D1                            ;	$3C
0007C5D1                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0007C5D1                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0007C5D1                            	smpsVcAlgorithm     $04
0007C5D1                            	smpsVcFeedback      $07
0007C5D1                            	smpsVcUnusedBits    $00
0007C5D1                            	smpsVcDetune        $07, $00, $00, $03
0007C5D1                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0007C5D1                            	smpsVcRateScale     $00, $00, $00, $00
0007C5D1                            	smpsVcAttackRate    $10, $1F, $10, $1F
0007C5D1                            	smpsVcAmpMod        $00, $00, $00, $00
0007C5D1                            	smpsVcDecayRate1    $00, $00, $00, $00
0007C5D1                            	smpsVcDecayRate2    $00, $00, $00, $00
0007C5D1                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0007C5D1                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0007C5D1 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0007C5EA                            
0007C5EA                            ;	Voice $05
0007C5EA                            ;	$38
0007C5EA                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0007C5EA                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0007C5EA                            	smpsVcAlgorithm     $00
0007C5EA                            	smpsVcFeedback      $07
0007C5EA                            	smpsVcUnusedBits    $00
0007C5EA                            	smpsVcDetune        $04, $06, $02, $00
0007C5EA                            	smpsVcCoarseFreq    $01, $01, $01, $00
0007C5EA                            	smpsVcRateScale     $00, $00, $00, $00
0007C5EA                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0007C5EA                            	smpsVcAmpMod        $00, $00, $00, $00
0007C5EA                            	smpsVcDecayRate1    $00, $03, $00, $17
0007C5EA                            	smpsVcDecayRate2    $00, $08, $08, $0B
0007C5EA                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0007C5EA                            	smpsVcReleaseRate   $08, $05, $05, $05
0007C5EA 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0007C603                            
0007C603                            
0007C604 00                         		even
0007C604                            Music85:	incbin	sound\music85.bin
0007CA50                            		even
0007CA50                            Music86:	incbin	sound\music86.bin
0007CFA0                            		even
0007CFA0                            Music87:	incbin	sound\music87.bin
0007D186                            		even
0007D186                            Music88:	incbin	sound\music88.bin
0007D274                            		even
0007D274                            Music89:	incbin	sound\music89.bin
0008113C 00                         		even
0008113C                            Music8A:	incbin	sound\music8A.bin
00081306                            		even
00081306                            Music8B:	incbin	sound\music8B.bin
000815A0                            		even
000815A0                            Music8C:	incbin	sound\music8C.bin
000817BC                            		even
000817BC                            Music8D:	incbin	sound\music8D.bin
000819D8                            		even
000819D8                            Music8E:	incbin	sound\music8E.bin
00081B2E                            		even
00081B2E                            Music8F:	incbin	sound\music8F.bin
00081C7E                            		even
00081C7E                            Music90:	incbin	sound\music90.bin
00081DDC                            		even
00081DDC                            Music91:	incbin	sound\music91.bin
000830AA                            		even
000830AA                            Music92:	incbin	sound\music92.bin
000831D4                            		even
000831D4                            Music93:	incbin	sound\music93.bin
000832A2                            		even
000832A2                            ; ---------------------------------------------------------------------------
000832A2                            ; Sound	effect pointers
000832A2                            ; ---------------------------------------------------------------------------
000832A2 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000832AE 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000832BA 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000832C6 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000832D2 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000832DE 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000832EA 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000832F6 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
00083302 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
0008330E 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
0008331A 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
00083326 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
00083332 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
0008333E 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
0008334A 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
00083356 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
00083362 0000 0000                  SoundD0Index:	dc.l SoundD0
00083366                            SoundA0:	incbin	sound\soundA0.bin
0008337C                            		even
0008337C                            SoundA1:	incbin	sound\soundA1.bin
000833A6                            		even
000833A6                            SoundA2:	incbin	sound\soundA2.bin
000833C6                            		even
000833C6                            SoundA3:	incbin	sound\soundA3.bin
000833F8                            		even
000833F8                            SoundA4:	incbin	sound\soundA4.bin
0008342E                            		even
0008342E                            SoundA5:	incbin	sound\soundA5.bin
0008345A                            		even
0008345A                            SoundA6:	incbin	sound\soundA6.bin
0008348A                            		even
0008348A                            SoundA7:	incbin	sound\soundA7.bin
000834BA                            		even
000834BA                            SoundA8:	incbin	sound\soundA8.bin
000834EE                            		even
000834EE                            SoundA9:	incbin	sound\soundA9.bin
00083500                            		even
00083500                            SoundAA:	incbin	sound\soundAA.bin
00083542                            		even
00083542                            SoundAB:	incbin	sound\soundAB.bin
00083562                            		even
00083562                            SoundAC:	incbin	sound\soundAC.bin
00083596                            		even
00083596                            SoundAD:	incbin	sound\soundAD.bin
000835CC                            		even
000835CC                            SoundAE:	incbin	sound\soundAE.bin
00083616                            		even
00083616                            SoundAF:	incbin	sound\soundAF.bin
00083644                            		even
00083644                            SoundB0:	incbin	sound\soundB0.bin
00083676                            		even
00083676                            SoundB1:	incbin	sound\soundB1.bin
000836A2                            		even
000836A2                            SoundB2:	incbin	sound\soundB2.bin
000836F2                            		even
000836F2                            SoundB3:	incbin	sound\soundB3.bin
0008373C                            		even
0008373C                            SoundB4:	incbin	sound\soundB4.bin
00083798                            		even
00083798                            SoundB5:	incbin	sound\soundB5.bin
000837C6                            		even
000837C6                            SoundB6:	incbin	sound\soundB6.bin
000837E4                            		even
000837E4                            SoundB7:	incbin	sound\soundB7.bin
00083820                            		even
00083820                            SoundB8:	incbin	sound\soundB8.bin
0008383E                            		even
0008383E                            SoundB9:	incbin	sound\soundB9.bin
000838A2                            		even
000838A2                            SoundBA:	incbin	sound\soundBA.bin
000838CA                            		even
000838CA                            SoundBB:	incbin	sound\soundBB.bin
000838F6                            		even
000838F6                            SoundBC:	incbin	sound\soundBC.bin
00083938                            		even
00083938                            SoundBD:	incbin	sound\soundBD.bin
0008398C                            		even
0008398C                            SoundBE:	incbin	sound\soundBE.bin
000839C6                            		even
000839C6                            SoundBF:	incbin	sound\soundBF.bin
00083A38                            		even
00083A38                            SoundC0:	incbin	sound\soundC0.bin
00083A66                            		even
00083A66                            SoundC1:	incbin	sound\soundC1.bin
00083AA0                            		even
00083AA0                            SoundC2:	incbin	sound\soundC2.bin
00083ACA                            		even
00083ACA                            SoundC3:	incbin	sound\soundC3.bin
00083B44                            		even
00083B44                            SoundC4:	incbin	sound\soundC4.bin
00083B6C                            		even
00083B6C                            SoundC5:	incbin	sound\soundC5.bin
00083BD4                            		even
00083BD4                            SoundC6:	incbin	sound\soundC6.bin
00083C16                            		even
00083C16                            SoundC7:	incbin	sound\soundC7.bin
00083C44                            		even
00083C44                            SoundC8:	incbin	sound\soundC8.bin
00083C56                            		even
00083C56                            SoundC9:	incbin	sound\soundC9.bin
00083C84                            		even
00083C84                            SoundCA:	incbin	sound\soundCA.bin
00083CB2                            		even
00083CB2                            SoundCB:	incbin	sound\soundCB.bin
00083CFE                            		even
00083CFE                            SoundCC:	incbin	sound\soundCC.bin
00083D38                            		even
00083D38                            SoundCD:	incbin	sound\soundCD.bin
00083D46                            		even
00083D46                            SoundCE:	incbin	sound\soundCE.bin
00083D74                            		even
00083D74                            SoundCF:	incbin	sound\soundCF.bin
00083DAC                            		even
00083DAC                            SoundD0:	incbin	sound\soundD0.bin
00083DE6                            		even
00083DE6                            SegaPCM:	incbin	sound\segapcm.bin
0008A75E                            SegaPCM_end:	even
0008A75E                            
0008A75E                            ; end of 'ROM'
0008A75E                            EndOfRom:
0008A75E                            
0008A75E                            
